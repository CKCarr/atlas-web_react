/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var e={3318:(e,t,n)=>{"use strict";var r=n(3067),o=n(8246),a=n(7976),i=n(280),s=n(7521),l=n(6966),u=n(1429),c=n(4323),f=n(3348),p=n(4810),d=n(8075),h=n(4761),m=n(9612)("a"),E="a"!==m[0]||!(0 in m),T=d("String.prototype.split");e.exports=function(e){var t,n=f(this),d=E&&h(n)?T(n,""):n,m=u(d);if(!l(e))throw new TypeError("Array.prototype.filter callback must be a function");arguments.length>1&&(t=arguments[1]);for(var g=r(n,0),y=0,_=0;y<m;){var A=p(y);if(s(n,A)){var b=i(n,A);c(o(e,t,[b,y,n]))&&(a(g,p(_),b),_+=1)}y+=1}return g}},7406:(e,t,n)=>{"use strict";var r=n(8452),o=n(5388),a=n(487),i=n(8075),s=n(3318),l=n(6919),u=a.apply(l()),c=n(1209),f=i("Array.prototype.slice"),p=function(e,t){return o(e),u(e,f(arguments,1))};r(p,{getPolyfill:l,implementation:s,shim:c}),e.exports=p},6919:(e,t,n)=>{"use strict";var r=n(7777),o=n(3318);e.exports=function(){var e=Array.prototype.filter;return r(e)?e:o}},1209:(e,t,n)=>{"use strict";var r=n(8452),o=n(6919);e.exports=function(){var e=o();return r(Array.prototype,{filter:e},{filter:function(){return Array.prototype.filter!==e}}),e}},1469:(e,t,n)=>{"use strict";var r=n(4076),o=n(1828),a=n(4281),i=n(289),s=n(9916),l=n(8227);e.exports=function(){var e=l(this),t=s(a(e,"length")),n=1;arguments.length>0&&void 0!==arguments[0]&&(n=i(arguments[0]));var u=r(e,0);return o(u,e,t,0,n),u}},3003:(e,t,n)=>{"use strict";var r=n(8452),o=n(487),a=n(1469),i=n(635),s=i(),l=n(7842),u=o(s);r(u,{getPolyfill:i,implementation:a,shim:l}),e.exports=u},635:(e,t,n)=>{"use strict";var r=n(1469);e.exports=function(){return Array.prototype.flat||r}},7842:(e,t,n)=>{"use strict";var r=n(8452),o=n(3295),a=n(635);e.exports=function(){var e=a();return r(Array.prototype,{flat:e},{flat:function(){return Array.prototype.flat!==e}}),o("flat"),e}},1264:e=>{e.exports={trueFunc:function(){return!0},falseFunc:function(){return!1}}},8075:(e,t,n)=>{"use strict";var r=n(453),o=n(487),a=o(r("String.prototype.indexOf"));e.exports=function(e,t){var n=r(e,!!t);return"function"==typeof n&&a(e,".prototype.")>-1?o(n):n}},487:(e,t,n)=>{"use strict";var r=n(6743),o=n(453),a=n(6897),i=n(9675),s=o("%Function.prototype.apply%"),l=o("%Function.prototype.call%"),u=o("%Reflect.apply%",!0)||r.call(l,s),c=n(655),f=o("%Math.max%");e.exports=function(e){if("function"!=typeof e)throw new i("a function is required");var t=u(r,l,arguments);return a(t,1+f(0,e.length-(arguments.length-1)),!0)};var p=function(){return u(r,s,arguments)};c?c(e.exports,"apply",{value:p}):e.exports.apply=p},4080:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.groupSelectors=t.getDocumentRoot=void 0;var r=n(7598);t.getDocumentRoot=function(e){for(;e.parent;)e=e.parent;return e},t.groupSelectors=function(e){for(var t=[],n=[],o=0,a=e;o<a.length;o++){var i=a[o];i.some(r.isFilter)?t.push(i):n.push(i)}return[n,t]}},6869:function(e,t,n){"use strict";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},r.apply(this,arguments)},o=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var o=Object.getOwnPropertyDescriptor(t,n);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,o)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&o(t,e,n);return a(t,e),t},s=this&&this.__spreadArray||function(e,t,n){if(n||2===arguments.length)for(var r,o=0,a=t.length;o<a;o++)!r&&o in t||(r||(r=Array.prototype.slice.call(t,0,o)),r[o]=t[o]);return e.concat(r||Array.prototype.slice.call(t))};Object.defineProperty(t,"__esModule",{value:!0}),t.select=t.filter=t.some=t.is=t.aliases=t.pseudos=t.filters=void 0;var l=n(4090),u=n(2603),c=i(n(8888)),f=i(n(1264)),p=n(4080),d=n(7598),h=n(2603);Object.defineProperty(t,"filters",{enumerable:!0,get:function(){return h.filters}}),Object.defineProperty(t,"pseudos",{enumerable:!0,get:function(){return h.pseudos}}),Object.defineProperty(t,"aliases",{enumerable:!0,get:function(){return h.aliases}});var m={type:l.SelectorType.Universal,namespace:null},E={type:l.SelectorType.Pseudo,name:"scope",data:null};function T(e,t,n){if(void 0===n&&(n={}),"function"==typeof t)return e.some(t);var r=(0,p.groupSelectors)((0,l.parse)(t)),o=r[0],a=r[1];return o.length>0&&e.some((0,u._compileToken)(o,n))||a.some((function(t){return y(t,e,n).length>0}))}function g(e,t,n){if(0===t.length)return[];var r,o=(0,p.groupSelectors)(e),a=o[0],i=o[1];if(a.length){var s=v(t,a,n);if(0===i.length)return s;s.length&&(r=new Set(s))}for(var l=0;l<i.length&&(null==r?void 0:r.size)!==t.length;l++){var u=i[l];if(0===(r?t.filter((function(e){return c.isTag(e)&&!r.has(e)})):t).length)break;if((s=y(u,t,n)).length)if(r)s.forEach((function(e){return r.add(e)}));else{if(l===i.length-1)return s;r=new Set(s)}}return void 0!==r?r.size===t.length?t:t.filter((function(e){return r.has(e)})):[]}function y(e,t,n){var o;if(e.some(l.isTraversal)){var a=null!==(o=n.root)&&void 0!==o?o:(0,p.getDocumentRoot)(t[0]),i=r(r({},n),{context:t,relativeSelector:!1});return e.push(E),_(a,e,i,!0,t.length)}return _(t,e,n,!1,t.length)}function _(e,t,n,o,a){var i=t.findIndex(d.isFilter),s=t.slice(0,i),p=t[i],h=t.length-1===i?a:1/0,E=(0,d.getLimit)(p.name,p.data,h);if(0===E)return[];var T=(0!==s.length||Array.isArray(e)?0===s.length?(Array.isArray(e)?e:[e]).filter(c.isTag):o||s.some(l.isTraversal)?A(e,[s],n,E):v(e,[s],n):c.getChildren(e).filter(c.isTag)).slice(0,E),y=function(e,t,n,r){var o="string"==typeof n?parseInt(n,10):NaN;switch(e){case"first":case"lt":return t;case"last":return t.length>0?[t[t.length-1]]:t;case"nth":case"eq":return isFinite(o)&&Math.abs(o)<t.length?[o<0?t[t.length+o]:t[o]]:[];case"gt":return isFinite(o)?t.slice(o+1):[];case"even":return t.filter((function(e,t){return t%2==0}));case"odd":return t.filter((function(e,t){return t%2==1}));case"not":var a=new Set(g(n,t,r));return t.filter((function(e){return!a.has(e)}))}}(p.name,T,p.data,n);if(0===y.length||t.length===i+1)return y;var b=t.slice(i+1),S=b.some(l.isTraversal);if(S){if((0,l.isTraversal)(b[0])){var I=b[0].type;I!==l.SelectorType.Sibling&&I!==l.SelectorType.Adjacent||(y=(0,u.prepareContext)(y,c,!0)),b.unshift(m)}n=r(r({},n),{relativeSelector:!1,rootFunc:function(e){return y.includes(e)}})}else n.rootFunc&&n.rootFunc!==f.trueFunc&&(n=r(r({},n),{rootFunc:f.trueFunc}));return b.some(d.isFilter)?_(y,b,n,!1,a):S?A(y,[b],n,a):v(y,[b],n)}function A(e,t,n,r){return b(e,(0,u._compileToken)(t,n,e),r)}function b(e,t,n){void 0===n&&(n=1/0);var r=(0,u.prepareContext)(e,c,t.shouldTestNextSiblings);return c.find((function(e){return c.isTag(e)&&t(e)}),r,!0,n)}function v(e,t,n){var r=(Array.isArray(e)?e:[e]).filter(c.isTag);if(0===r.length)return r;var o=(0,u._compileToken)(t,n);return o===f.trueFunc?r:r.filter(o)}t.is=function(e,t,n){return void 0===n&&(n={}),T([e],t,n)},t.some=T,t.filter=function(e,t,n){return void 0===n&&(n={}),g((0,l.parse)(e),t,n)},t.select=function(e,t,n,r){if(void 0===n&&(n={}),void 0===r&&(r=1/0),"function"==typeof e)return b(t,e);var o=(0,p.groupSelectors)((0,l.parse)(e)),a=o[0],i=o[1].map((function(e){return _(t,e,n,!0,r)}));return a.length&&i.push(A(t,a,n,r)),0===i.length?[]:1===i.length?i[0]:c.uniqueSort(i.reduce((function(e,t){return s(s([],e,!0),t,!0)})))}},7598:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getLimit=t.isFilter=t.filterNames=void 0,t.filterNames=new Set(["first","last","eq","gt","nth","lt","even","odd"]),t.isFilter=function e(n){return"pseudo"===n.type&&(!!t.filterNames.has(n.name)||!("not"!==n.name||!Array.isArray(n.data))&&n.data.some((function(t){return t.some(e)})))},t.getLimit=function(e,t,n){var r=null!=t?parseInt(t,10):NaN;switch(e){case"first":return 1;case"nth":case"eq":return isFinite(r)?r>=0?r+1:1/0:0;case"lt":return isFinite(r)?r>=0?Math.min(r,n):1/0:0;case"gt":return isFinite(r)?1/0:0;case"odd":return 2*n;case"even":return 2*n-1;case"last":case"not":return 1/0}}},4340:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.toggleClass=t.removeClass=t.addClass=t.hasClass=t.removeAttr=t.val=t.data=t.prop=t.attr=void 0;var r=n(1690),o=n(1067),a=n(8888),i=Object.prototype.hasOwnProperty,s=/\s+/,l="data-",u={null:null,true:!0,false:!1},c=/^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i,f=/^{[^]*}$|^\[[^]*]$/;function p(e,t,n){var a;if(e&&(0,o.isTag)(e))return null!==(a=e.attribs)&&void 0!==a||(e.attribs={}),t?i.call(e.attribs,t)?!n&&c.test(t)?t:e.attribs[t]:"option"===e.name&&"value"===t?(0,r.text)(e.children):"input"!==e.name||"radio"!==e.attribs.type&&"checkbox"!==e.attribs.type||"value"!==t?void 0:"on":e.attribs}function d(e,t,n){null===n?g(e,t):e.attribs[t]="".concat(n)}function h(e,t,n){return t in e?e[t]:!n&&c.test(t)?void 0!==p(e,t,!1):p(e,t,n)}function m(e,t,n,r){t in e?e[t]=n:d(e,t,!r&&c.test(t)?n?"":null:"".concat(n))}function E(e,t,n){var r,o=e;null!==(r=o.data)&&void 0!==r||(o.data={}),"object"==typeof t?Object.assign(o.data,t):"string"==typeof t&&void 0!==n&&(o.data[t]=n)}function T(e,t){var n,r,a;null==t?r=(n=Object.keys(e.attribs).filter((function(e){return e.startsWith(l)}))).map((function(e){return(0,o.camelCase)(e.slice(5))})):(n=[l+(0,o.cssCase)(t)],r=[t]);for(var s=0;s<n.length;++s){var c=n[s],p=r[s];if(i.call(e.attribs,c)&&!i.call(e.data,p)){if(a=e.attribs[c],i.call(u,a))a=u[a];else if(a===String(Number(a)))a=Number(a);else if(f.test(a))try{a=JSON.parse(a)}catch(e){}e.data[p]=a}}return null==t?e.data:a}function g(e,t){e.attribs&&i.call(e.attribs,t)&&delete e.attribs[t]}function y(e){return e?e.trim().split(s):[]}t.attr=function(e,t){if("object"==typeof e||void 0!==t){if("function"==typeof t){if("string"!=typeof e)throw new Error("Bad combination of arguments.");return(0,o.domEach)(this,(function(n,r){(0,o.isTag)(n)&&d(n,e,t.call(n,r,n.attribs[e]))}))}return(0,o.domEach)(this,(function(n){(0,o.isTag)(n)&&("object"==typeof e?Object.keys(e).forEach((function(t){var r=e[t];d(n,t,r)})):d(n,e,t))}))}return arguments.length>1?this:p(this[0],e,this.options.xmlMode)},t.prop=function(e,t){var n,r=this;if("string"==typeof e&&void 0===t){var i=this[0];if(!i||!(0,o.isTag)(i))return;switch(e){case"style":var s=this.css(),l=Object.keys(s);return l.forEach((function(e,t){s[t]=e})),s.length=l.length,s;case"tagName":case"nodeName":return i.name.toUpperCase();case"href":case"src":var u=null===(n=i.attribs)||void 0===n?void 0:n[e];return"undefined"==typeof URL||("href"!==e||"a"!==i.tagName&&"link"!==i.name)&&("src"!==e||"img"!==i.tagName&&"iframe"!==i.tagName&&"audio"!==i.tagName&&"video"!==i.tagName&&"source"!==i.tagName)||void 0===u||!this.options.baseURI?u:new URL(u,this.options.baseURI).href;case"innerText":return(0,a.innerText)(i);case"textContent":return(0,a.textContent)(i);case"outerHTML":return this.clone().wrap("<container />").parent().html();case"innerHTML":return this.html();default:return h(i,e,this.options.xmlMode)}}if("object"==typeof e||void 0!==t){if("function"==typeof t){if("object"==typeof e)throw new Error("Bad combination of arguments.");return(0,o.domEach)(this,(function(n,a){(0,o.isTag)(n)&&m(n,e,t.call(n,a,h(n,e,r.options.xmlMode)),r.options.xmlMode)}))}return(0,o.domEach)(this,(function(n){(0,o.isTag)(n)&&("object"==typeof e?Object.keys(e).forEach((function(t){var o=e[t];m(n,t,o,r.options.xmlMode)})):m(n,e,t,r.options.xmlMode))}))}},t.data=function(e,t){var n,r=this[0];if(r&&(0,o.isTag)(r)){var a=r;return null!==(n=a.data)&&void 0!==n||(a.data={}),e?"object"==typeof e||void 0!==t?((0,o.domEach)(this,(function(n){(0,o.isTag)(n)&&("object"==typeof e?E(n,e):E(n,e,t))})),this):i.call(a.data,e)?a.data[e]:T(a,e):T(a)}},t.val=function(e){var t=0===arguments.length,n=this[0];if(!n||!(0,o.isTag)(n))return t?void 0:this;switch(n.name){case"textarea":return this.text(e);case"select":var a=this.find("option:selected");if(!t){if(null==this.attr("multiple")&&"object"==typeof e)return this;this.find("option").removeAttr("selected");for(var i="object"!=typeof e?[e]:e,s=0;s<i.length;s++)this.find('option[value="'.concat(i[s],'"]')).attr("selected","");return this}return this.attr("multiple")?a.toArray().map((function(e){return(0,r.text)(e.children)})):a.attr("value");case"input":case"option":return t?this.attr("value"):this.attr("value",e)}},t.removeAttr=function(e){for(var t=y(e),n=function(e){(0,o.domEach)(r,(function(n){(0,o.isTag)(n)&&g(n,t[e])}))},r=this,a=0;a<t.length;a++)n(a);return this},t.hasClass=function(e){return this.toArray().some((function(t){var n=(0,o.isTag)(t)&&t.attribs.class,r=-1;if(n&&e.length)for(;(r=n.indexOf(e,r+1))>-1;){var a=r+e.length;if((0===r||s.test(n[r-1]))&&(a===n.length||s.test(n[a])))return!0}return!1}))},t.addClass=function e(t){if("function"==typeof t)return(0,o.domEach)(this,(function(n,r){if((0,o.isTag)(n)){var a=n.attribs.class||"";e.call([n],t.call(n,r,a))}}));if(!t||"string"!=typeof t)return this;for(var n=t.split(s),r=this.length,a=0;a<r;a++){var i=this[a];if((0,o.isTag)(i)){var l=p(i,"class",!1);if(l){for(var u=" ".concat(l," "),c=0;c<n.length;c++){var f="".concat(n[c]," ");u.includes(" ".concat(f))||(u+=f)}d(i,"class",u.trim())}else d(i,"class",n.join(" ").trim())}}return this},t.removeClass=function e(t){if("function"==typeof t)return(0,o.domEach)(this,(function(n,r){(0,o.isTag)(n)&&e.call([n],t.call(n,r,n.attribs.class||""))}));var n=y(t),r=n.length,a=0===arguments.length;return(0,o.domEach)(this,(function(e){if((0,o.isTag)(e))if(a)e.attribs.class="";else{for(var t=y(e.attribs.class),i=!1,s=0;s<r;s++){var l=t.indexOf(n[s]);l>=0&&(t.splice(l,1),i=!0,s--)}i&&(e.attribs.class=t.join(" "))}}))},t.toggleClass=function e(t,n){if("function"==typeof t)return(0,o.domEach)(this,(function(r,a){(0,o.isTag)(r)&&e.call([r],t.call(r,a,r.attribs.class||"",n),n)}));if(!t||"string"!=typeof t)return this;for(var r=t.split(s),a=r.length,i="boolean"==typeof n?n?1:-1:0,l=this.length,u=0;u<l;u++){var c=this[u];if((0,o.isTag)(c)){for(var f=y(c.attribs.class),p=0;p<a;p++){var d=f.indexOf(r[p]);i>=0&&d<0?f.push(r[p]):i<=0&&d>=0&&f.splice(d,1)}c.attribs.class=f.join(" ")}}return this}},7922:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.css=void 0;var r=n(1067);function o(e,t,n,r){if("string"==typeof t){var i=a(e),s="function"==typeof n?n.call(e,r,i[t]):n;""===s?delete i[t]:null!=s&&(i[t]=s),e.attribs.style=(l=i,Object.keys(l).reduce((function(e,t){return"".concat(e).concat(e?" ":"").concat(t,": ").concat(l[t],";")}),""))}else"object"==typeof t&&Object.keys(t).forEach((function(n,r){o(e,n,t[n],r)}));var l}function a(e,t){if(e&&(0,r.isTag)(e)){var n=function(e){if(!(e=(e||"").trim()))return{};for(var t,n={},r=0,o=e.split(";");r<o.length;r++){var a=o[r],i=a.indexOf(":");if(i<1||i===a.length-1){var s=a.trimEnd();s.length>0&&void 0!==t&&(n[t]+=";".concat(s))}else n[t=a.slice(0,i).trim()]=a.slice(i+1).trim()}return n}(e.attribs.style);if("string"==typeof t)return n[t];if(Array.isArray(t)){var o={};return t.forEach((function(e){null!=n[e]&&(o[e]=n[e])})),o}return n}}t.css=function(e,t){return null!=e&&null!=t||"object"==typeof e&&!Array.isArray(e)?(0,r.domEach)(this,(function(n,a){(0,r.isTag)(n)&&o(n,e,t,a)})):0!==this.length?a(this[0],e):void 0}},8270:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.serializeArray=t.serialize=void 0;var r=n(1067),o="input,select,textarea,keygen",a=/%20/g,i=/\r?\n/g;t.serialize=function(){return this.serializeArray().map((function(e){return"".concat(encodeURIComponent(e.name),"=").concat(encodeURIComponent(e.value))})).join("&").replace(a,"+")},t.serializeArray=function(){var e=this;return this.map((function(t,n){var a=e._make(n);return(0,r.isTag)(n)&&"form"===n.name?a.find(o).toArray():a.filter(o).toArray()})).filter('[name!=""]:enabled:not(:submit, :button, :image, :reset, :file):matches([checked], :not(:checkbox, :radio))').map((function(t,n){var r,o=e._make(n),a=o.attr("name"),s=null!==(r=o.val())&&void 0!==r?r:"";return Array.isArray(s)?s.map((function(e){return{name:a,value:e.replace(i,"\r\n")}})):{name:a,value:s.replace(i,"\r\n")}})).toArray()}},7764:function(e,t,n){"use strict";var r=this&&this.__spreadArray||function(e,t,n){if(n||2===arguments.length)for(var r,o=0,a=t.length;o<a;o++)!r&&o in t||(r||(r=Array.prototype.slice.call(t,0,o)),r[o]=t[o]);return e.concat(r||Array.prototype.slice.call(t))};Object.defineProperty(t,"__esModule",{value:!0}),t.clone=t.text=t.toString=t.html=t.empty=t.replaceWith=t.remove=t.insertBefore=t.before=t.insertAfter=t.after=t.wrapAll=t.unwrap=t.wrapInner=t.wrap=t.prepend=t.append=t.prependTo=t.appendTo=t._makeDomArray=void 0;var o=n(1141),a=n(1577),i=n(1690),s=n(1067),l=n(8888);function u(e){return function(){for(var t=this,n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];var a=this.length-1;return(0,s.domEach)(this,(function(r,i){if((0,o.hasChildren)(r)){var s="function"==typeof n[0]?n[0].call(r,i,t._render(r.children)):n,l=t._makeDomArray(s,i<a);e(l,r.children,r)}}))}}function c(e,t,n,o,a){for(var i,s,l=r([t,n],o,!0),u=0===t?null:e[t-1],c=t+n>=e.length?null:e[t+n],f=0;f<o.length;++f){var p=o[f],d=p.parent;if(d){var h=d.children.indexOf(p);h>-1&&(d.children.splice(h,1),a===d&&t>h&&l[0]--)}p.parent=a,p.prev&&(p.prev.next=null!==(i=p.next)&&void 0!==i?i:null),p.next&&(p.next.prev=null!==(s=p.prev)&&void 0!==s?s:null),p.prev=0===f?u:o[f-1],p.next=f===o.length-1?c:o[f+1]}return u&&(u.next=o[0]),c&&(c.prev=o[o.length-1]),e.splice.apply(e,l)}function f(e){return function(t){for(var n=this.length-1,r=this.parents().last(),a=0;a<this.length;a++){var i=this[a],l="function"==typeof t?t.call(i,a,i):"string"!=typeof t||(0,s.isHtml)(t)?t:r.find(t).clone(),u=this._makeDomArray(l,a<n)[0];if(u&&(0,o.hasChildren)(u)){for(var c=u,f=0;f<c.children.length;){var p=c.children[f];(0,s.isTag)(p)?(c=p,f=0):f++}e(i,c,[u])}}return this}}t._makeDomArray=function(e,t){var n=this;return null==e?[]:(0,s.isCheerio)(e)?t?(0,s.cloneDom)(e.get()):e.get():Array.isArray(e)?e.reduce((function(e,r){return e.concat(n._makeDomArray(r,t))}),[]):"string"==typeof e?this._parse(e,this.options,!1,null).children:t?(0,s.cloneDom)([e]):[e]},t.appendTo=function(e){return((0,s.isCheerio)(e)?e:this._make(e)).append(this),this},t.prependTo=function(e){return((0,s.isCheerio)(e)?e:this._make(e)).prepend(this),this},t.append=u((function(e,t,n){c(t,t.length,0,e,n)})),t.prepend=u((function(e,t,n){c(t,0,0,e,n)})),t.wrap=f((function(e,t,n){var r=e.parent;if(r){var o=r.children,i=o.indexOf(e);(0,a.update)([e],t),c(o,i,0,n,r)}})),t.wrapInner=f((function(e,t,n){(0,o.hasChildren)(e)&&((0,a.update)(e.children,t),(0,a.update)(n,e))})),t.unwrap=function(e){var t=this;return this.parent(e).not("body").each((function(e,n){t._make(n).replaceWith(n.children)})),this},t.wrapAll=function(e){var t=this[0];if(t){for(var n=this._make("function"==typeof e?e.call(t,0,t):e).insertBefore(t),r=void 0,o=0;o<n.length;o++)"tag"===n[o].type&&(r=n[o]);for(var a=0;r&&a<r.children.length;){var i=r.children[a];"tag"===i.type?(r=i,a=0):a++}r&&this._make(r).append(this)}return this},t.after=function(){for(var e=this,t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var r=this.length-1;return(0,s.domEach)(this,(function(n,a){var i=n.parent;if((0,o.hasChildren)(n)&&i){var s=i.children,l=s.indexOf(n);if(!(l<0)){var u="function"==typeof t[0]?t[0].call(n,a,e._render(n.children)):t;c(s,l+1,0,e._makeDomArray(u,a<r),i)}}}))},t.insertAfter=function(e){var t=this;"string"==typeof e&&(e=this._make(e)),this.remove();var n=[];return this._makeDomArray(e).forEach((function(e){var r=t.clone().toArray(),o=e.parent;if(o){var a=o.children,i=a.indexOf(e);i<0||(c(a,i+1,0,r,o),n.push.apply(n,r))}})),this._make(n)},t.before=function(){for(var e=this,t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var r=this.length-1;return(0,s.domEach)(this,(function(n,a){var i=n.parent;if((0,o.hasChildren)(n)&&i){var s=i.children,l=s.indexOf(n);if(!(l<0)){var u="function"==typeof t[0]?t[0].call(n,a,e._render(n.children)):t;c(s,l,0,e._makeDomArray(u,a<r),i)}}}))},t.insertBefore=function(e){var t=this,n=this._make(e);this.remove();var r=[];return(0,s.domEach)(n,(function(e){var n=t.clone().toArray(),o=e.parent;if(o){var a=o.children,i=a.indexOf(e);i<0||(c(a,i,0,n,o),r.push.apply(r,n))}})),this._make(r)},t.remove=function(e){var t=e?this.filter(e):this;return(0,s.domEach)(t,(function(e){(0,l.removeElement)(e),e.prev=e.next=e.parent=null})),this},t.replaceWith=function(e){var t=this;return(0,s.domEach)(this,(function(n,r){var o=n.parent;if(o){var i=o.children,s="function"==typeof e?e.call(n,r,n):e,l=t._makeDomArray(s);(0,a.update)(l,null);var u=i.indexOf(n);c(i,u,1,l,o),l.includes(n)||(n.parent=n.prev=n.next=null)}}))},t.empty=function(){return(0,s.domEach)(this,(function(e){(0,o.hasChildren)(e)&&(e.children.forEach((function(e){e.next=e.prev=e.parent=null})),e.children.length=0)}))},t.html=function(e){var t=this;if(void 0===e){var n=this[0];return n&&(0,o.hasChildren)(n)?this._render(n.children):null}return(0,s.domEach)(this,(function(n){if((0,o.hasChildren)(n)){n.children.forEach((function(e){e.next=e.prev=e.parent=null}));var r=(0,s.isCheerio)(e)?e.toArray():t._parse("".concat(e),t.options,!1,n).children;(0,a.update)(r,n)}}))},t.toString=function(){return this._render(this)},t.text=function(e){var t=this;return void 0===e?(0,i.text)(this):"function"==typeof e?(0,s.domEach)(this,(function(n,r){return t._make(n).text(e.call(n,r,(0,i.text)([n])))})):(0,s.domEach)(this,(function(t){if((0,o.hasChildren)(t)){t.children.forEach((function(e){e.next=e.prev=e.parent=null}));var n=new o.Text("".concat(e));(0,a.update)(n,t)}}))},t.clone=function(){return this._make((0,s.cloneDom)(this.get()))}},8080:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var o=Object.getOwnPropertyDescriptor(t,n);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,o)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return o(t,e),t},i=this&&this.__spreadArray||function(e,t,n){if(n||2===arguments.length)for(var r,o=0,a=t.length;o<a;o++)!r&&o in t||(r||(r=Array.prototype.slice.call(t,0,o)),r[o]=t[o]);return e.concat(r||Array.prototype.slice.call(t))};Object.defineProperty(t,"__esModule",{value:!0}),t.addBack=t.add=t.end=t.slice=t.index=t.toArray=t.get=t.eq=t.last=t.first=t.has=t.not=t.is=t.filterArray=t.filter=t.map=t.each=t.contents=t.children=t.siblings=t.prevUntil=t.prevAll=t.prev=t.nextUntil=t.nextAll=t.next=t.closest=t.parentsUntil=t.parents=t.parent=t.find=void 0;var s=n(1141),l=a(n(6869)),u=n(1067),c=n(1690),f=n(8888),p=/^\s*[~+]/;function d(e){return function(t){for(var n=[],r=1;r<arguments.length;r++)n[r-1]=arguments[r];return function(r){var o,a=e(t,this);return r&&(a=y(a,r,this.options.xmlMode,null===(o=this._root)||void 0===o?void 0:o[0])),this._make(this.length>1&&a.length>1?n.reduce((function(e,t){return t(e)}),a):a)}}}t.find=function(e){var t;if(!e)return this._make([]);var n=this.toArray();if("string"!=typeof e){var r=(0,u.isCheerio)(e)?e.toArray():[e];return this._make(r.filter((function(e){return n.some((function(t){return(0,c.contains)(t,e)}))})))}var o=p.test(e)?n:this.children().toArray(),a={context:n,root:null===(t=this._root)||void 0===t?void 0:t[0],xmlMode:this.options.xmlMode,lowerCaseTags:this.options.lowerCaseTags,lowerCaseAttributeNames:this.options.lowerCaseAttributeNames,pseudos:this.options.pseudos,quirksMode:this.options.quirksMode};return this._make(l.select(e,o,a))};var h=d((function(e,t){for(var n,r=[],o=0;o<t.length;o++){var a=e(t[o]);r.push(a)}return(n=new Array).concat.apply(n,r)})),m=d((function(e,t){for(var n=[],r=0;r<t.length;r++){var o=e(t[r]);null!==o&&n.push(o)}return n}));function E(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];var r=null,o=d((function(e,t){var n=[];return(0,u.domEach)(t,(function(t){for(var o;(o=e(t))&&!(null==r?void 0:r(o,n.length));t=o)n.push(o)})),n})).apply(void 0,i([e],t,!1));return function(e,t){var n=this;r="string"==typeof e?function(t){return l.is(t,e,n.options)}:e?g(e):null;var a=o.call(this,t);return r=null,a}}function T(e){return Array.from(new Set(e))}function g(e){return"function"==typeof e?function(t,n){return e.call(t,n,t)}:(0,u.isCheerio)(e)?function(t){return Array.prototype.includes.call(e,t)}:function(t){return e===t}}function y(e,t,n,r){return"string"==typeof t?l.filter(t,e,{xmlMode:n,root:r}):e.filter(g(t))}t.parent=m((function(e){var t=e.parent;return t&&!(0,s.isDocument)(t)?t:null}),T),t.parents=h((function(e){for(var t=[];e.parent&&!(0,s.isDocument)(e.parent);)t.push(e.parent),e=e.parent;return t}),f.uniqueSort,(function(e){return e.reverse()})),t.parentsUntil=E((function(e){var t=e.parent;return t&&!(0,s.isDocument)(t)?t:null}),f.uniqueSort,(function(e){return e.reverse()})),t.closest=function(e){var t,n=[];if(!e)return this._make(n);var r={xmlMode:this.options.xmlMode,root:null===(t=this._root)||void 0===t?void 0:t[0]},o="string"==typeof e?function(t){return l.is(t,e,r)}:g(e);return(0,u.domEach)(this,(function(e){for(;e&&(0,u.isTag)(e);){if(o(e,0)){n.includes(e)||n.push(e);break}e=e.parent}})),this._make(n)},t.next=m((function(e){return(0,f.nextElementSibling)(e)})),t.nextAll=h((function(e){for(var t=[];e.next;)e=e.next,(0,u.isTag)(e)&&t.push(e);return t}),T),t.nextUntil=E((function(e){return(0,f.nextElementSibling)(e)}),T),t.prev=m((function(e){return(0,f.prevElementSibling)(e)})),t.prevAll=h((function(e){for(var t=[];e.prev;)e=e.prev,(0,u.isTag)(e)&&t.push(e);return t}),T),t.prevUntil=E((function(e){return(0,f.prevElementSibling)(e)}),T),t.siblings=h((function(e){return(0,f.getSiblings)(e).filter((function(t){return(0,u.isTag)(t)&&t!==e}))}),f.uniqueSort),t.children=h((function(e){return(0,f.getChildren)(e).filter(u.isTag)}),T),t.contents=function(){var e=this.toArray().reduce((function(e,t){return(0,s.hasChildren)(t)?e.concat(t.children):e}),[]);return this._make(e)},t.each=function(e){for(var t=0,n=this.length;t<n&&!1!==e.call(this[t],t,this[t]);)++t;return this},t.map=function(e){for(var t=[],n=0;n<this.length;n++){var r=this[n],o=e.call(r,n,r);null!=o&&(t=t.concat(o))}return this._make(t)},t.filter=function(e){var t;return this._make(y(this.toArray(),e,this.options.xmlMode,null===(t=this._root)||void 0===t?void 0:t[0]))},t.filterArray=y,t.is=function(e){var t=this.toArray();return"string"==typeof e?l.some(t.filter(u.isTag),e,this.options):!!e&&t.some(g(e))},t.not=function(e){var t=this.toArray();if("string"==typeof e){var n=new Set(l.filter(e,t,this.options));t=t.filter((function(e){return!n.has(e)}))}else{var r=g(e);t=t.filter((function(e,t){return!r(e,t)}))}return this._make(t)},t.has=function(e){var t=this;return this.filter("string"==typeof e?":has(".concat(e,")"):function(n,r){return t._make(r).find(e).length>0})},t.first=function(){return this.length>1?this._make(this[0]):this},t.last=function(){return this.length>0?this._make(this[this.length-1]):this},t.eq=function(e){var t;return 0==(e=+e)&&this.length<=1?this:(e<0&&(e=this.length+e),this._make(null!==(t=this[e])&&void 0!==t?t:[]))},t.get=function(e){return null==e?this.toArray():this[e<0?this.length+e:e]},t.toArray=function(){return Array.prototype.slice.call(this)},t.index=function(e){var t,n;return null==e?(t=this.parent().children(),n=this[0]):"string"==typeof e?(t=this._make(e),n=this[0]):(t=this,n=(0,u.isCheerio)(e)?e[0]:e),Array.prototype.indexOf.call(t,n)},t.slice=function(e,t){return this._make(Array.prototype.slice.call(this,e,t))},t.end=function(){var e;return null!==(e=this.prevObject)&&void 0!==e?e:this._make([])},t.add=function(e,t){var n=this._make(e,t),r=(0,f.uniqueSort)(i(i([],this.get(),!0),n.get(),!0));return this._make(r)},t.addBack=function(e){return this.prevObject?this.add(e?this.prevObject.filter(e):this.prevObject):this}},1127:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var o=Object.getOwnPropertyDescriptor(t,n);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,o)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return o(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Cheerio=void 0;var i=a(n(4340)),s=a(n(8080)),l=a(n(7764)),u=a(n(7922)),c=a(n(8270)),f=function(e,t,n){if(this.length=0,this.options=n,this._root=t,e){for(var r=0;r<e.length;r++)this[r]=e[r];this.length=e.length}};t.Cheerio=f,f.prototype.cheerio="[cheerio object]",f.prototype.splice=Array.prototype.splice,f.prototype[Symbol.iterator]=Array.prototype[Symbol.iterator],Object.assign(f.prototype,i,s,l,u,c)},5674:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var o=Object.getOwnPropertyDescriptor(t,n);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,o)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),a=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||r(t,e,n)},i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return o(t,e),t},s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.root=t.parseHTML=t.merge=t.contains=t.text=t.xml=t.html=t.load=void 0,a(n(8583),t);var l=n(9944),u=n(1577),c=n(7101),f=s(n(3806)),p=n(8659),d=(0,u.getParse)((function(e,t,n,r){return t.xmlMode||t._useHtmlParser2?(0,p.parseDocument)(e,t):(0,c.parseWithParse5)(e,t,n,r)}));t.load=(0,l.getLoad)(d,(function(e,t){return t.xmlMode||t._useHtmlParser2?(0,f.default)(e,t):(0,c.renderWithParse5)(e)})),t.default=(0,t.load)([]);var h=n(1690);Object.defineProperty(t,"html",{enumerable:!0,get:function(){return h.html}}),Object.defineProperty(t,"xml",{enumerable:!0,get:function(){return h.xml}}),Object.defineProperty(t,"text",{enumerable:!0,get:function(){return h.text}});var m=i(n(1690));t.contains=m.contains,t.merge=m.merge,t.parseHTML=m.parseHTML,t.root=m.root},9944:function(e,t,n){"use strict";var r,o=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),a=this&&this.__assign||function(){return a=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},a.apply(this,arguments)},i=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var o=Object.getOwnPropertyDescriptor(t,n);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,o)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),s=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),l=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&i(t,e,n);return s(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.getLoad=void 0;var u=l(n(3796)),c=l(n(1690)),f=n(1127),p=n(1067);t.getLoad=function(e,t){return function n(r,i,s){if(void 0===s&&(s=!0),null==r)throw new Error("cheerio.load() expects a string");var l=a(a({},u.default),(0,u.flatten)(i)),d=e(r,l,s,null),h=function(n){function r(){return null!==n&&n.apply(this,arguments)||this}return o(r,n),r.prototype._make=function(e,t){var n=m(e,t);return n.prevObject=this,n},r.prototype._parse=function(t,n,r,o){return e(t,n,r,o)},r.prototype._render=function(e){return t(e,this.options)},r}(f.Cheerio);function m(t,n,r,o){if(void 0===r&&(r=d),t&&(0,p.isCheerio)(t))return t;var i=a(a({},l),(0,u.flatten)(o)),s="string"==typeof r?[e(r,i,!1,null)]:"length"in r?r:[r],c=(0,p.isCheerio)(s)?s:new h(s,null,i);if(c._root=c,!t)return new h(void 0,c,i);var f,m="string"==typeof t&&(0,p.isHtml)(t)?e(t,i,!1,null).children:(f=t).name||"root"===f.type||"text"===f.type||"comment"===f.type?[t]:Array.isArray(t)?t:void 0,E=new h(m,c,i);if(m)return E;if("string"!=typeof t)throw new Error("Unexpected type of selector");var T=t,g=n?"string"==typeof n?(0,p.isHtml)(n)?new h([e(n,i,!1,null)],c,i):(T="".concat(n," ").concat(T),c):(0,p.isCheerio)(n)?n:new h(Array.isArray(n)?n:[n],c,i):c;return g?g.find(T):E}return Object.assign(m,c,{load:n,_root:d,_options:l,fn:h.prototype,prototype:h.prototype}),m}}},3796:function(e,t){"use strict";var n=this&&this.__assign||function(){return n=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},n.apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.flatten=void 0,t.default={xml:!1,decodeEntities:!0};var r={_useHtmlParser2:!0,xmlMode:!0};t.flatten=function(e){return(null==e?void 0:e.xml)?"boolean"==typeof e.xml?r:n(n({},r),e.xml):null!=e?e:void 0}},1577:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.update=t.getParse=void 0;var r=n(8888),o=n(1141);function a(e,t){var n=Array.isArray(e)?e:[e];t?t.children=n:t=null;for(var o=0;o<n.length;o++){var a=n[o];a.parent&&a.parent.children!==n&&(0,r.removeElement)(a),t?(a.prev=n[o-1]||null,a.next=n[o+1]||null):a.prev=a.next=null,a.parent=t}return t}t.getParse=function(e){return function(t,n,r,i){if("undefined"!=typeof Buffer&&Buffer.isBuffer(t)&&(t=t.toString()),"string"==typeof t)return e(t,n,r,i);var s=t;if(!Array.isArray(s)&&(0,o.isDocument)(s))return s;var l=new o.Document([]);return a(s,l),l}},t.update=a},7101:function(e,t,n){"use strict";var r=this&&this.__spreadArray||function(e,t,n){if(n||2===arguments.length)for(var r,o=0,a=t.length;o<a;o++)!r&&o in t||(r||(r=Array.prototype.slice.call(t,0,o)),r[o]=t[o]);return e.concat(r||Array.prototype.slice.call(t))};Object.defineProperty(t,"__esModule",{value:!0}),t.renderWithParse5=t.parseWithParse5=void 0;var o=n(1141),a=n(2884),i=n(2794);t.parseWithParse5=function(e,t,n,r){var o={scriptingEnabled:"boolean"!=typeof t.scriptingEnabled||t.scriptingEnabled,treeAdapter:i.adapter,sourceCodeLocationInfo:t.sourceCodeLocationInfo};return n?(0,a.parse)(e,o):(0,a.parseFragment)(r,e,o)};var s={treeAdapter:i.adapter};t.renderWithParse5=function(e){for(var t,n=("length"in e?e:[e]),i=0;i<n.length;i+=1){var l=n[i];(0,o.isDocument)(l)&&(t=Array.prototype.splice).call.apply(t,r([n,i,1],l.children,!1))}var u="";for(i=0;i<n.length;i+=1)l=n[i],u+=(0,a.serializeOuter)(l,s);return u}},1690:function(e,t,n){"use strict";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},r.apply(this,arguments)},o=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var o=Object.getOwnPropertyDescriptor(t,n);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,o)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&o(t,e,n);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.merge=t.contains=t.root=t.parseHTML=t.text=t.xml=t.html=void 0;var s=n(8888),l=i(n(3796));function u(e,t,n){return e?e(null!=t?t:e._root.children,null,void 0,n).toString():""}function c(e){if(Array.isArray(e))return!0;if("object"!=typeof e||!Object.prototype.hasOwnProperty.call(e,"length")||"number"!=typeof e.length||e.length<0)return!1;for(var t=0;t<e.length;t++)if(!(t in e))return!1;return!0}t.html=function(e,t){return u(this,function(e,t){return"object"==typeof e&&null!=e&&!("length"in e)&&!("type"in e)}(e)?void(t=e):e,r(r(r({},l.default),null==this?void 0:this._options),(0,l.flatten)(null!=t?t:{})))},t.xml=function(e){return u(this,e,r(r({},this._options),{xmlMode:!0}))},t.text=function(e){for(var t=e||(this?this.root():[]),n="",r=0;r<t.length;r++)n+=(0,s.textContent)(t[r]);return n},t.parseHTML=function(e,t,n){if(void 0===n&&(n="boolean"==typeof t&&t),!e||"string"!=typeof e)return null;"boolean"==typeof t&&(n=t);var r=this.load(e,l.default,!1);return n||r("script").remove(),r.root()[0].children.slice()},t.root=function(){return this(this._root)},t.contains=function(e,t){if(t===e)return!1;for(var n=t;n&&n!==n.parent;)if((n=n.parent)===e)return!0;return!1},t.merge=function(e,t){if(c(e)&&c(t)){for(var n=e.length,r=+t.length,o=0;o<r;o++)e[n++]=t[o];return e.length=n,e}}},8583:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},1067:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isHtml=t.cloneDom=t.domEach=t.cssCase=t.camelCase=t.isCheerio=t.isTag=void 0;var r,o=n(1141),a=n(1141);Object.defineProperty(t,"isTag",{enumerable:!0,get:function(){return a.isTag}}),t.isCheerio=function(e){return null!=e.cheerio},t.camelCase=function(e){return e.replace(/[_.-](\w|$)/g,(function(e,t){return t.toUpperCase()}))},t.cssCase=function(e){return e.replace(/[A-Z]/g,"-$&").toLowerCase()},t.domEach=function(e,t){for(var n=e.length,r=0;r<n;r++)t(e[r],r);return e},t.cloneDom=function(e){var t="length"in e?Array.prototype.map.call(e,(function(e){return(0,o.cloneNode)(e,!0)})):[(0,o.cloneNode)(e,!0)],n=new o.Document(t);return t.forEach((function(e){e.parent=n})),t},function(e){e[e.LowerA=97]="LowerA",e[e.LowerZ=122]="LowerZ",e[e.UpperA=65]="UpperA",e[e.UpperZ=90]="UpperZ",e[e.Exclamation=33]="Exclamation"}(r||(r={})),t.isHtml=function(e){var t=e.indexOf("<");if(t<0||t>e.length-3)return!1;var n=e.charCodeAt(t+1);return(n>=r.LowerA&&n<=r.LowerZ||n>=r.UpperA&&n<=r.UpperZ||n===r.Exclamation)&&e.includes(">",t+2)}},3126:(e,t,n)=>{"use strict";n.d(t,{A:()=>s});var r=n(1354),o=n.n(r),a=n(6314),i=n.n(a)()(o());i.push([e.id,".App {\n  height: auto;\n  align-items: flex-start;\n  /* Aligns content to the left */\n}\n","",{version:3,sources:["webpack://./src/App/App.css"],names:[],mappings:"AAAA;EACE,YAAY;EACZ,uBAAuB;EACvB,+BAA+B;AACjC",sourcesContent:[".App {\n  height: auto;\n  align-items: flex-start;\n  /* Aligns content to the left */\n}\n"],sourceRoot:""}]);const s=i},1457:(e,t,n)=>{"use strict";n.d(t,{A:()=>s});var r=n(1354),o=n.n(r),a=n(6314),i=n.n(a)()(o());i.push([e.id,"/* src/BodySection/BodySectionWithMarginBottom.css */\n.bodySectionWithMargin {\n    margin-bottom: 40px;\n}\n","",{version:3,sources:["webpack://./src/BodySection/BodySectionWithMarginBottom.css"],names:[],mappings:"AAAA,oDAAoD;AACpD;IACI,mBAAmB;AACvB",sourcesContent:["/* src/BodySection/BodySectionWithMarginBottom.css */\n.bodySectionWithMargin {\n    margin-bottom: 40px;\n}\n"],sourceRoot:""}]);const s=i},246:(e,t,n)=>{"use strict";n.d(t,{A:()=>s});var r=n(1354),o=n.n(r),a=n(6314),i=n.n(a)()(o());i.push([e.id,"/* General styling for the CourseList table */\n#CourseList {\n    width: 100%;\n    border-collapse: collapse;\n    /* Ensures that borders between cells are merged */\n    margin: 20px 0;\n    background-color: #f8f8f8;\n    box-shadow: 0 2px 3px rgba(0, 0, 0, 0.1);\n\n}\n\n#CourseList th,\n#CourseList td {\n    border: 1px solid #ddd;\n    /* Light grey border around cells */\n    padding: 8px 12px;\n    /* Padding inside each cell for text */\n    text-align: left;\n    /* Aligns text to the left */\n}\n\n#CourseList th {\n    background-color: #ffffff;\n    color: #000000;\n\n}\n\n#CourseList tbody tr:nth-child(odd) {\n    background-color: #f2f2f2;\n    /* Zebra striping for rows */\n}\n\n#CourseList tbody tr:hover {\n    background-color: #ddd;\n}\n","",{version:3,sources:["webpack://./src/CourseList/CourseList.css"],names:[],mappings:"AAAA,6CAA6C;AAC7C;IACI,WAAW;IACX,yBAAyB;IACzB,kDAAkD;IAClD,cAAc;IACd,yBAAyB;IACzB,wCAAwC;;AAE5C;;AAEA;;IAEI,sBAAsB;IACtB,mCAAmC;IACnC,iBAAiB;IACjB,sCAAsC;IACtC,gBAAgB;IAChB,4BAA4B;AAChC;;AAEA;IACI,yBAAyB;IACzB,cAAc;;AAElB;;AAEA;IACI,yBAAyB;IACzB,4BAA4B;AAChC;;AAEA;IACI,sBAAsB;AAC1B",sourcesContent:["/* General styling for the CourseList table */\n#CourseList {\n    width: 100%;\n    border-collapse: collapse;\n    /* Ensures that borders between cells are merged */\n    margin: 20px 0;\n    background-color: #f8f8f8;\n    box-shadow: 0 2px 3px rgba(0, 0, 0, 0.1);\n\n}\n\n#CourseList th,\n#CourseList td {\n    border: 1px solid #ddd;\n    /* Light grey border around cells */\n    padding: 8px 12px;\n    /* Padding inside each cell for text */\n    text-align: left;\n    /* Aligns text to the left */\n}\n\n#CourseList th {\n    background-color: #ffffff;\n    color: #000000;\n\n}\n\n#CourseList tbody tr:nth-child(odd) {\n    background-color: #f2f2f2;\n    /* Zebra striping for rows */\n}\n\n#CourseList tbody tr:hover {\n    background-color: #ddd;\n}\n"],sourceRoot:""}]);const s=i},9126:(e,t,n)=>{"use strict";n.d(t,{A:()=>s});var r=n(1354),o=n.n(r),a=n(6314),i=n.n(a)()(o());i.push([e.id,".App-footer {\n    border-top: red 2px solid;\n    justify-content: center;\n    text-align: center;\n    font-style: italic;\n}\n","",{version:3,sources:["webpack://./src/Footer/Footer.css"],names:[],mappings:"AAAA;IACI,yBAAyB;IACzB,uBAAuB;IACvB,kBAAkB;IAClB,kBAAkB;AACtB",sourcesContent:[".App-footer {\n    border-top: red 2px solid;\n    justify-content: center;\n    text-align: center;\n    font-style: italic;\n}\n"],sourceRoot:""}]);const s=i},2646:(e,t,n)=>{"use strict";n.d(t,{A:()=>s});var r=n(1354),o=n.n(r),a=n(6314),i=n.n(a)()(o());i.push([e.id,".App-logo {\n    height: 25vmin;\n    pointer-events: none;\n}\n\n.App-header {\n    display: flex;\n    border-bottom: red 2px solid;\n}\n\n.header {\n    color: red;\n    justify-content: center;\n    align-items: center;\n    padding-top: 5vh;\n    font-size: calc(10px + 2vmin);\n}\n","",{version:3,sources:["webpack://./src/Header/Header.css"],names:[],mappings:"AAAA;IACI,cAAc;IACd,oBAAoB;AACxB;;AAEA;IACI,aAAa;IACb,4BAA4B;AAChC;;AAEA;IACI,UAAU;IACV,uBAAuB;IACvB,mBAAmB;IACnB,gBAAgB;IAChB,6BAA6B;AACjC",sourcesContent:[".App-logo {\n    height: 25vmin;\n    pointer-events: none;\n}\n\n.App-header {\n    display: flex;\n    border-bottom: red 2px solid;\n}\n\n.header {\n    color: red;\n    justify-content: center;\n    align-items: center;\n    padding-top: 5vh;\n    font-size: calc(10px + 2vmin);\n}\n"],sourceRoot:""}]);const s=i},4954:(e,t,n)=>{"use strict";n.d(t,{A:()=>s});var r=n(1354),o=n.n(r),a=n(6314),i=n.n(a)()(o());i.push([e.id,".App-body {\n    height: 40vh;\n    display: flex;\n    flex-direction: column;\n}\n\n.App-body p {\n    color: ccc;\n    font-size: 1.5em;\n    margin: 4px;\n    padding: 8px;\n}\n\n.App-body label,\n.App-body input,\n.App-body button {\n    color: ccc;\n    display: inline-block;\n    padding: 2px;\n    margin: 6px;\n}\n\n.App-body button {\n    background-color: white;\n    color: ccc;\n    border: #cececee7 1px solid;\n    cursor: pointer;\n}\n\n.App-body button:hover {\n    background-color: #cececee7;\n}\n","",{version:3,sources:["webpack://./src/Login/Login.css"],names:[],mappings:"AAAA;IACI,YAAY;IACZ,aAAa;IACb,sBAAsB;AAC1B;;AAEA;IACI,UAAU;IACV,gBAAgB;IAChB,WAAW;IACX,YAAY;AAChB;;AAEA;;;IAGI,UAAU;IACV,qBAAqB;IACrB,YAAY;IACZ,WAAW;AACf;;AAEA;IACI,uBAAuB;IACvB,UAAU;IACV,2BAA2B;IAC3B,eAAe;AACnB;;AAEA;IACI,2BAA2B;AAC/B",sourcesContent:[".App-body {\n    height: 40vh;\n    display: flex;\n    flex-direction: column;\n}\n\n.App-body p {\n    color: ccc;\n    font-size: 1.5em;\n    margin: 4px;\n    padding: 8px;\n}\n\n.App-body label,\n.App-body input,\n.App-body button {\n    color: ccc;\n    display: inline-block;\n    padding: 2px;\n    margin: 6px;\n}\n\n.App-body button {\n    background-color: white;\n    color: ccc;\n    border: #cececee7 1px solid;\n    cursor: pointer;\n}\n\n.App-body button:hover {\n    background-color: #cececee7;\n}\n"],sourceRoot:""}]);const s=i},5602:(e,t,n)=>{"use strict";n.d(t,{A:()=>s});var r=n(1354),o=n.n(r),a=n(6314),i=n.n(a)()(o());i.push([e.id,'.Notifications li[data-notification-type="default"] {\n    color: rgb(4, 4, 126);\n}\n\n.Notifications li[data-notification-type="urgent"] {\n    color: rgb(255, 0, 0);\n}\n\n.Notifications {\n    display: block;\n    /* Hidden by default */\n    padding: 10px;\n    margin: 20px;\n    border: 2px dotted red;\n    background-color: white;\n    position: absolute;\n    top: 0;\n    right: 0;\n    z-index: 100;\n    /* Ensures it appears above other content */\n}\n\n.Notifications.active {\n    display: block;\n    /* Display when active */\n}\n\n.menuItem {\n    cursor: pointer;\n    margin-bottom: 10px;\n    margin-right: 20px;\n    position: absolute;\n    top: 0;\n    right: 0;\n    z-index: 99;\n    /* Slightly below notifications to allow for click access */\n}\n',"",{version:3,sources:["webpack://./src/Notifications/Notifications.css"],names:[],mappings:"AAAA;IACI,qBAAqB;AACzB;;AAEA;IACI,qBAAqB;AACzB;;AAEA;IACI,cAAc;IACd,sBAAsB;IACtB,aAAa;IACb,YAAY;IACZ,sBAAsB;IACtB,uBAAuB;IACvB,kBAAkB;IAClB,MAAM;IACN,QAAQ;IACR,YAAY;IACZ,2CAA2C;AAC/C;;AAEA;IACI,cAAc;IACd,wBAAwB;AAC5B;;AAEA;IACI,eAAe;IACf,mBAAmB;IACnB,kBAAkB;IAClB,kBAAkB;IAClB,MAAM;IACN,QAAQ;IACR,WAAW;IACX,2DAA2D;AAC/D",sourcesContent:['.Notifications li[data-notification-type="default"] {\n    color: rgb(4, 4, 126);\n}\n\n.Notifications li[data-notification-type="urgent"] {\n    color: rgb(255, 0, 0);\n}\n\n.Notifications {\n    display: block;\n    /* Hidden by default */\n    padding: 10px;\n    margin: 20px;\n    border: 2px dotted red;\n    background-color: white;\n    position: absolute;\n    top: 0;\n    right: 0;\n    z-index: 100;\n    /* Ensures it appears above other content */\n}\n\n.Notifications.active {\n    display: block;\n    /* Display when active */\n}\n\n.menuItem {\n    cursor: pointer;\n    margin-bottom: 10px;\n    margin-right: 20px;\n    position: absolute;\n    top: 0;\n    right: 0;\n    z-index: 99;\n    /* Slightly below notifications to allow for click access */\n}\n'],sourceRoot:""}]);const s=i},6314:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(i[l]=!0)}for(var u=0;u<e.length;u++){var c=[].concat(e[u]);r&&i[c[0]]||(void 0!==a&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=a),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),o&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=o):c[4]="".concat(o)),t.push(c))}},t}},1354:e=>{"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[t].concat([a]).join("\n")}return[t].join("\n")}},3762:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.attributeRules=void 0;var o=r(n(1264)),a=/[-[\]{}()*+?.,\\^$|#\s]/g;function i(e){return e.replace(a,"\\$&")}var s=new Set(["accept","accept-charset","align","alink","axis","bgcolor","charset","checked","clear","codetype","color","compact","declare","defer","dir","direction","disabled","enctype","face","frame","hreflang","http-equiv","lang","language","link","media","method","multiple","nohref","noresize","noshade","nowrap","readonly","rel","rev","rules","scope","scrolling","selected","shape","target","text","type","valign","valuetype","vlink"]);function l(e,t){return"boolean"==typeof e.ignoreCase?e.ignoreCase:"quirks"===e.ignoreCase?!!t.quirksMode:!t.xmlMode&&s.has(e.name)}t.attributeRules={equals:function(e,t,n){var r=n.adapter,o=t.name,a=t.value;return l(t,n)?(a=a.toLowerCase(),function(t){var n=r.getAttributeValue(t,o);return null!=n&&n.length===a.length&&n.toLowerCase()===a&&e(t)}):function(t){return r.getAttributeValue(t,o)===a&&e(t)}},hyphen:function(e,t,n){var r=n.adapter,o=t.name,a=t.value,i=a.length;return l(t,n)?(a=a.toLowerCase(),function(t){var n=r.getAttributeValue(t,o);return null!=n&&(n.length===i||"-"===n.charAt(i))&&n.substr(0,i).toLowerCase()===a&&e(t)}):function(t){var n=r.getAttributeValue(t,o);return null!=n&&(n.length===i||"-"===n.charAt(i))&&n.substr(0,i)===a&&e(t)}},element:function(e,t,n){var r=n.adapter,a=t.name,s=t.value;if(/\s/.test(s))return o.default.falseFunc;var u=new RegExp("(?:^|\\s)".concat(i(s),"(?:$|\\s)"),l(t,n)?"i":"");return function(t){var n=r.getAttributeValue(t,a);return null!=n&&n.length>=s.length&&u.test(n)&&e(t)}},exists:function(e,t,n){var r=t.name,o=n.adapter;return function(t){return o.hasAttrib(t,r)&&e(t)}},start:function(e,t,n){var r=n.adapter,a=t.name,i=t.value,s=i.length;return 0===s?o.default.falseFunc:l(t,n)?(i=i.toLowerCase(),function(t){var n=r.getAttributeValue(t,a);return null!=n&&n.length>=s&&n.substr(0,s).toLowerCase()===i&&e(t)}):function(t){var n;return!!(null===(n=r.getAttributeValue(t,a))||void 0===n?void 0:n.startsWith(i))&&e(t)}},end:function(e,t,n){var r=n.adapter,a=t.name,i=t.value,s=-i.length;return 0===s?o.default.falseFunc:l(t,n)?(i=i.toLowerCase(),function(t){var n;return(null===(n=r.getAttributeValue(t,a))||void 0===n?void 0:n.substr(s).toLowerCase())===i&&e(t)}):function(t){var n;return!!(null===(n=r.getAttributeValue(t,a))||void 0===n?void 0:n.endsWith(i))&&e(t)}},any:function(e,t,n){var r=n.adapter,a=t.name,s=t.value;if(""===s)return o.default.falseFunc;if(l(t,n)){var u=new RegExp(i(s),"i");return function(t){var n=r.getAttributeValue(t,a);return null!=n&&n.length>=s.length&&u.test(n)&&e(t)}}return function(t){var n;return!!(null===(n=r.getAttributeValue(t,a))||void 0===n?void 0:n.includes(s))&&e(t)}},not:function(e,t,n){var r=n.adapter,o=t.name,a=t.value;return""===a?function(t){return!!r.getAttributeValue(t,o)&&e(t)}:l(t,n)?(a=a.toLowerCase(),function(t){var n=r.getAttributeValue(t,o);return(null==n||n.length!==a.length||n.toLowerCase()!==a)&&e(t)}):function(t){return r.getAttributeValue(t,o)!==a&&e(t)}}}},8118:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var o=Object.getOwnPropertyDescriptor(t,n);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,o)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return o(t,e),t},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.compileToken=t.compileUnsafe=t.compile=void 0;var s=n(4090),l=i(n(1264)),u=a(n(6491)),c=n(5327),f=n(5234);function p(e,t,n){return T("string"==typeof e?(0,s.parse)(e):e,t,n)}function d(e){return e.type===s.SelectorType.Pseudo&&("scope"===e.name||Array.isArray(e.data)&&e.data.some((function(e){return e.some(d)})))}t.compile=function(e,t,n){var r=p(e,t,n);return(0,f.ensureIsTag)(r,t.adapter)},t.compileUnsafe=p;var h={type:s.SelectorType.Descendant},m={type:"_flexibleDescendant"},E={type:s.SelectorType.Pseudo,name:"scope",data:null};function T(e,t,n){var r;e.forEach(u.default),n=null!==(r=t.context)&&void 0!==r?r:n;var o=Array.isArray(n),a=n&&(Array.isArray(n)?n:[n]);if(!1!==t.relativeSelector)!function(e,t,n){for(var r=t.adapter,o=!!(null==n?void 0:n.every((function(e){var t=r.isTag(e)&&r.getParent(e);return e===f.PLACEHOLDER_ELEMENT||t&&r.isTag(t)}))),a=0,i=e;a<i.length;a++){var l=i[a];if(l.length>0&&(0,u.isTraversal)(l[0])&&l[0].type!==s.SelectorType.Descendant);else{if(!o||l.some(d))continue;l.unshift(h)}l.unshift(E)}}(e,t,a);else if(e.some((function(e){return e.length>0&&(0,u.isTraversal)(e[0])})))throw new Error("Relative selectors are not allowed when the `relativeSelector` option is disabled");var i=!1,p=e.map((function(e){if(e.length>=2){var n=e[0],r=e[1];n.type!==s.SelectorType.Pseudo||"scope"!==n.name||(o&&r.type===s.SelectorType.Descendant?e[1]=m:r.type!==s.SelectorType.Adjacent&&r.type!==s.SelectorType.Sibling||(i=!0))}return function(e,t,n){var r;return e.reduce((function(e,r){return e===l.default.falseFunc?l.default.falseFunc:(0,c.compileGeneralSelector)(e,r,t,n,T)}),null!==(r=t.rootFunc)&&void 0!==r?r:l.default.trueFunc)}(e,t,a)})).reduce(g,l.default.falseFunc);return p.shouldTestNextSiblings=i,p}function g(e,t){return t===l.default.falseFunc||e===l.default.trueFunc?e:e===l.default.falseFunc||t===l.default.trueFunc?t:function(n){return e(n)||t(n)}}t.compileToken=T},5327:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.compileGeneralSelector=void 0;var r=n(3762),o=n(8161),a=n(4090);function i(e,t){var n=t.getParent(e);return n&&t.isTag(n)?n:null}t.compileGeneralSelector=function(e,t,n,s,l){var u=n.adapter,c=n.equals;switch(t.type){case a.SelectorType.PseudoElement:throw new Error("Pseudo-elements are not supported by css-select");case a.SelectorType.ColumnCombinator:throw new Error("Column combinators are not yet supported by css-select");case a.SelectorType.Attribute:if(null!=t.namespace)throw new Error("Namespaced attributes are not yet supported by css-select");return n.xmlMode&&!n.lowerCaseAttributeNames||(t.name=t.name.toLowerCase()),r.attributeRules[t.action](e,t,n);case a.SelectorType.Pseudo:return(0,o.compilePseudoSelector)(e,t,n,s,l);case a.SelectorType.Tag:if(null!=t.namespace)throw new Error("Namespaced tag names are not yet supported by css-select");var f=t.name;return n.xmlMode&&!n.lowerCaseTags||(f=f.toLowerCase()),function(t){return u.getName(t)===f&&e(t)};case a.SelectorType.Descendant:if(!1===n.cacheResults||"undefined"==typeof WeakSet)return function(t){for(var n=t;n=i(n,u);)if(e(n))return!0;return!1};var p=new WeakSet;return function(t){for(var n=t;n=i(n,u);)if(!p.has(n)){if(u.isTag(n)&&e(n))return!0;p.add(n)}return!1};case"_flexibleDescendant":return function(t){var n=t;do{if(e(n))return!0}while(n=i(n,u));return!1};case a.SelectorType.Parent:return function(t){return u.getChildren(t).some((function(t){return u.isTag(t)&&e(t)}))};case a.SelectorType.Child:return function(t){var n=u.getParent(t);return null!=n&&u.isTag(n)&&e(n)};case a.SelectorType.Sibling:return function(t){for(var n=u.getSiblings(t),r=0;r<n.length;r++){var o=n[r];if(c(t,o))break;if(u.isTag(o)&&e(o))return!0}return!1};case a.SelectorType.Adjacent:return u.prevElementSibling?function(t){var n=u.prevElementSibling(t);return null!=n&&e(n)}:function(t){for(var n,r=u.getSiblings(t),o=0;o<r.length;o++){var a=r[o];if(c(t,a))break;u.isTag(a)&&(n=a)}return!!n&&e(n)};case a.SelectorType.Universal:if(null!=t.namespace&&"*"!==t.namespace)throw new Error("Namespaced universal selectors are not yet supported by css-select");return e}}},2603:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var o=Object.getOwnPropertyDescriptor(t,n);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,o)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return o(t,e),t},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.aliases=t.pseudos=t.filters=t.is=t.selectOne=t.selectAll=t.prepareContext=t._compileToken=t._compileUnsafe=t.compile=void 0;var s=a(n(8888)),l=i(n(1264)),u=n(8118),c=n(5234),f=function(e,t){return e===t},p={adapter:s,equals:f};function d(e){var t,n,r,o,a=null!=e?e:p;return null!==(t=a.adapter)&&void 0!==t||(a.adapter=s),null!==(n=a.equals)&&void 0!==n||(a.equals=null!==(o=null===(r=a.adapter)||void 0===r?void 0:r.equals)&&void 0!==o?o:f),a}function h(e){return function(t,n,r){var o=d(n);return e(t,o,r)}}function m(e){return function(t,n,r){var o=d(r);"function"!=typeof t&&(t=(0,u.compileUnsafe)(t,o,n));var a=E(n,o.adapter,t.shouldTestNextSiblings);return e(t,a,o)}}function E(e,t,n){return void 0===n&&(n=!1),n&&(e=function(e,t){for(var n=Array.isArray(e)?e.slice(0):[e],r=n.length,o=0;o<r;o++){var a=(0,c.getNextSiblings)(n[o],t);n.push.apply(n,a)}return n}(e,t)),Array.isArray(e)?t.removeSubsets(e):t.getChildren(e)}t.compile=h(u.compile),t._compileUnsafe=h(u.compileUnsafe),t._compileToken=h(u.compileToken),t.prepareContext=E,t.selectAll=m((function(e,t,n){return e!==l.default.falseFunc&&t&&0!==t.length?n.adapter.findAll(e,t):[]})),t.selectOne=m((function(e,t,n){return e!==l.default.falseFunc&&t&&0!==t.length?n.adapter.findOne(e,t):null})),t.is=function(e,t,n){var r=d(n);return("function"==typeof t?t:(0,u.compile)(t,r))(e)},t.default=t.selectAll;var T=n(8161);Object.defineProperty(t,"filters",{enumerable:!0,get:function(){return T.filters}}),Object.defineProperty(t,"pseudos",{enumerable:!0,get:function(){return T.pseudos}}),Object.defineProperty(t,"aliases",{enumerable:!0,get:function(){return T.aliases}})},9433:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.aliases=void 0,t.aliases={"any-link":":is(a, area, link)[href]",link:":any-link:not(:visited)",disabled:":is(\n        :is(button, input, select, textarea, optgroup, option)[disabled],\n        optgroup[disabled] > option,\n        fieldset[disabled]:not(fieldset[disabled] legend:first-of-type *)\n    )",enabled:":not(:disabled)",checked:":is(:is(input[type=radio], input[type=checkbox])[checked], option:selected)",required:":is(input, select, textarea)[required]",optional:":is(input, select, textarea):not([required])",selected:"option:is([selected], select:not([multiple]):not(:has(> option[selected])) > :first-of-type)",checkbox:"[type=checkbox]",file:"[type=file]",password:"[type=password]",radio:"[type=radio]",reset:"[type=reset]",image:"[type=image]",submit:"[type=submit]",parent:":not(:empty)",header:":is(h1, h2, h3, h4, h5, h6)",button:":is(button, input[type=button])",input:":is(input, textarea, select, button)",text:"input:is(:not([type!='']), [type=text])"}},6310:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.filters=void 0;var o=r(n(3172)),a=r(n(1264));function i(e,t){return function(n){var r=t.getParent(n);return null!=r&&t.isTag(r)&&e(n)}}function s(e){return function(t,n,r){var o=r.adapter[e];return"function"!=typeof o?a.default.falseFunc:function(e){return o(e)&&t(e)}}}t.filters={contains:function(e,t,n){var r=n.adapter;return function(n){return e(n)&&r.getText(n).includes(t)}},icontains:function(e,t,n){var r=n.adapter,o=t.toLowerCase();return function(t){return e(t)&&r.getText(t).toLowerCase().includes(o)}},"nth-child":function(e,t,n){var r=n.adapter,s=n.equals,l=(0,o.default)(t);return l===a.default.falseFunc?a.default.falseFunc:l===a.default.trueFunc?i(e,r):function(t){for(var n=r.getSiblings(t),o=0,a=0;a<n.length&&!s(t,n[a]);a++)r.isTag(n[a])&&o++;return l(o)&&e(t)}},"nth-last-child":function(e,t,n){var r=n.adapter,s=n.equals,l=(0,o.default)(t);return l===a.default.falseFunc?a.default.falseFunc:l===a.default.trueFunc?i(e,r):function(t){for(var n=r.getSiblings(t),o=0,a=n.length-1;a>=0&&!s(t,n[a]);a--)r.isTag(n[a])&&o++;return l(o)&&e(t)}},"nth-of-type":function(e,t,n){var r=n.adapter,s=n.equals,l=(0,o.default)(t);return l===a.default.falseFunc?a.default.falseFunc:l===a.default.trueFunc?i(e,r):function(t){for(var n=r.getSiblings(t),o=0,a=0;a<n.length;a++){var i=n[a];if(s(t,i))break;r.isTag(i)&&r.getName(i)===r.getName(t)&&o++}return l(o)&&e(t)}},"nth-last-of-type":function(e,t,n){var r=n.adapter,s=n.equals,l=(0,o.default)(t);return l===a.default.falseFunc?a.default.falseFunc:l===a.default.trueFunc?i(e,r):function(t){for(var n=r.getSiblings(t),o=0,a=n.length-1;a>=0;a--){var i=n[a];if(s(t,i))break;r.isTag(i)&&r.getName(i)===r.getName(t)&&o++}return l(o)&&e(t)}},root:function(e,t,n){var r=n.adapter;return function(t){var n=r.getParent(t);return(null==n||!r.isTag(n))&&e(t)}},scope:function(e,n,r,o){var a=r.equals;return o&&0!==o.length?1===o.length?function(t){return a(o[0],t)&&e(t)}:function(t){return o.includes(t)&&e(t)}:t.filters.root(e,n,r)},hover:s("isHovered"),visited:s("isVisited"),active:s("isActive")}},8161:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.compilePseudoSelector=t.aliases=t.pseudos=t.filters=void 0;var r=n(4090),o=n(6310);Object.defineProperty(t,"filters",{enumerable:!0,get:function(){return o.filters}});var a=n(682);Object.defineProperty(t,"pseudos",{enumerable:!0,get:function(){return a.pseudos}});var i=n(9433);Object.defineProperty(t,"aliases",{enumerable:!0,get:function(){return i.aliases}});var s=n(5234);t.compilePseudoSelector=function(e,t,n,l,u){var c,f=t.name,p=t.data;if(Array.isArray(p)){if(!(f in s.subselects))throw new Error("Unknown pseudo-class :".concat(f,"(").concat(p,")"));return s.subselects[f](e,p,n,l,u)}var d=null===(c=n.pseudos)||void 0===c?void 0:c[f],h="string"==typeof d?d:i.aliases[f];if("string"==typeof h){if(null!=p)throw new Error("Pseudo ".concat(f," doesn't have any arguments"));var m=(0,r.parse)(h);return s.subselects.is(e,m,n,l,u)}if("function"==typeof d)return(0,a.verifyPseudoArgs)(d,f,p,1),function(t){return d(t,p)&&e(t)};if(f in o.filters)return o.filters[f](e,p,n,l);if(f in a.pseudos){var E=a.pseudos[f];return(0,a.verifyPseudoArgs)(E,f,p,2),function(t){return E(t,n,p)&&e(t)}}throw new Error("Unknown pseudo-class :".concat(f))}},682:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.verifyPseudoArgs=t.pseudos=void 0,t.pseudos={empty:function(e,t){var n=t.adapter;return!n.getChildren(e).some((function(e){return n.isTag(e)||""!==n.getText(e)}))},"first-child":function(e,t){var n=t.adapter,r=t.equals;if(n.prevElementSibling)return null==n.prevElementSibling(e);var o=n.getSiblings(e).find((function(e){return n.isTag(e)}));return null!=o&&r(e,o)},"last-child":function(e,t){for(var n=t.adapter,r=t.equals,o=n.getSiblings(e),a=o.length-1;a>=0;a--){if(r(e,o[a]))return!0;if(n.isTag(o[a]))break}return!1},"first-of-type":function(e,t){for(var n=t.adapter,r=t.equals,o=n.getSiblings(e),a=n.getName(e),i=0;i<o.length;i++){var s=o[i];if(r(e,s))return!0;if(n.isTag(s)&&n.getName(s)===a)break}return!1},"last-of-type":function(e,t){for(var n=t.adapter,r=t.equals,o=n.getSiblings(e),a=n.getName(e),i=o.length-1;i>=0;i--){var s=o[i];if(r(e,s))return!0;if(n.isTag(s)&&n.getName(s)===a)break}return!1},"only-of-type":function(e,t){var n=t.adapter,r=t.equals,o=n.getName(e);return n.getSiblings(e).every((function(t){return r(e,t)||!n.isTag(t)||n.getName(t)!==o}))},"only-child":function(e,t){var n=t.adapter,r=t.equals;return n.getSiblings(e).every((function(t){return r(e,t)||!n.isTag(t)}))}},t.verifyPseudoArgs=function(e,t,n,r){if(null===n){if(e.length>r)throw new Error("Pseudo-class :".concat(t," requires an argument"))}else if(e.length===r)throw new Error("Pseudo-class :".concat(t," doesn't have any arguments"))}},5234:function(e,t,n){"use strict";var r=this&&this.__spreadArray||function(e,t,n){if(n||2===arguments.length)for(var r,o=0,a=t.length;o<a;o++)!r&&o in t||(r||(r=Array.prototype.slice.call(t,0,o)),r[o]=t[o]);return e.concat(r||Array.prototype.slice.call(t))},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.subselects=t.getNextSiblings=t.ensureIsTag=t.PLACEHOLDER_ELEMENT=void 0;var a=o(n(1264)),i=n(6491);function s(e,t){return e===a.default.falseFunc?a.default.falseFunc:function(n){return t.isTag(n)&&e(n)}}function l(e,t){var n=t.getSiblings(e);if(n.length<=1)return[];var r=n.indexOf(e);return r<0||r===n.length-1?[]:n.slice(r+1).filter(t.isTag)}function u(e){return{xmlMode:!!e.xmlMode,lowerCaseAttributeNames:!!e.lowerCaseAttributeNames,lowerCaseTags:!!e.lowerCaseTags,quirksMode:!!e.quirksMode,cacheResults:!!e.cacheResults,pseudos:e.pseudos,adapter:e.adapter,equals:e.equals}}t.PLACEHOLDER_ELEMENT={},t.ensureIsTag=s,t.getNextSiblings=l;var c=function(e,t,n,r,o){var i=o(t,u(n),r);return i===a.default.trueFunc?e:i===a.default.falseFunc?a.default.falseFunc:function(t){return i(t)&&e(t)}};t.subselects={is:c,matches:c,where:c,not:function(e,t,n,r,o){var i=o(t,u(n),r);return i===a.default.falseFunc?e:i===a.default.trueFunc?a.default.falseFunc:function(t){return!i(t)&&e(t)}},has:function(e,n,o,c,f){var p=o.adapter,d=u(o);d.relativeSelector=!0;var h=n.some((function(e){return e.some(i.isTraversal)}))?[t.PLACEHOLDER_ELEMENT]:void 0,m=f(n,d,h);if(m===a.default.falseFunc)return a.default.falseFunc;var E=s(m,p);if(h&&m!==a.default.trueFunc){var T=m.shouldTestNextSiblings,g=void 0!==T&&T;return function(t){if(!e(t))return!1;h[0]=t;var n=p.getChildren(t),o=g?r(r([],n,!0),l(t,p),!0):n;return p.existsOne(E,o)}}return function(t){return e(t)&&p.existsOne(E,p.getChildren(t))}}}},6491:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isTraversal=void 0;var r=n(4090),o=new Map([[r.SelectorType.Universal,50],[r.SelectorType.Tag,30],[r.SelectorType.Attribute,1],[r.SelectorType.Pseudo,0]]);t.isTraversal=function(e){return!o.has(e.type)};var a=new Map([[r.AttributeAction.Exists,10],[r.AttributeAction.Equals,8],[r.AttributeAction.Not,7],[r.AttributeAction.Start,6],[r.AttributeAction.End,6],[r.AttributeAction.Any,5]]);function i(e){var t,n,s=null!==(t=o.get(e.type))&&void 0!==t?t:-1;return e.type===r.SelectorType.Attribute?(s=null!==(n=a.get(e.action))&&void 0!==n?n:4,e.action===r.AttributeAction.Equals&&"id"===e.name&&(s=9),e.ignoreCase&&(s>>=1)):e.type===r.SelectorType.Pseudo&&(e.data?"has"===e.name||"contains"===e.name?s=0:Array.isArray(e.data)?(s=Math.min.apply(Math,e.data.map((function(e){return Math.min.apply(Math,e.map(i))}))))<0&&(s=0):s=2:s=3),s}t.default=function(e){for(var t=e.map(i),n=1;n<e.length;n++){var r=t[n];if(!(r<0))for(var o=n-1;o>=0&&r<t[o];o--){var a=e[o+1];e[o+1]=e[o],e[o]=a,t[o+1]=t[o],t[o]=r}}}},4090:(e,t,n)=>{"use strict";var r;n.r(t),n.d(t,{AttributeAction:()=>a,IgnoreCaseMode:()=>o,SelectorType:()=>r,isTraversal:()=>c,parse:()=>E,stringify:()=>v}),function(e){e.Attribute="attribute",e.Pseudo="pseudo",e.PseudoElement="pseudo-element",e.Tag="tag",e.Universal="universal",e.Adjacent="adjacent",e.Child="child",e.Descendant="descendant",e.Parent="parent",e.Sibling="sibling",e.ColumnCombinator="column-combinator"}(r||(r={}));const o={Unknown:null,QuirksMode:"quirks",IgnoreCase:!0,CaseSensitive:!1};var a;!function(e){e.Any="any",e.Element="element",e.End="end",e.Equals="equals",e.Exists="exists",e.Hyphen="hyphen",e.Not="not",e.Start="start"}(a||(a={}));const i=/^[^\\#]?(?:\\(?:[\da-f]{1,6}\s?|.)|[\w\-\u00b0-\uFFFF])+/,s=/\\([\da-f]{1,6}\s?|(\s)|.)/gi,l=new Map([[126,a.Element],[94,a.Start],[36,a.End],[42,a.Any],[33,a.Not],[124,a.Hyphen]]),u=new Set(["has","not","matches","is","where","host","host-context"]);function c(e){switch(e.type){case r.Adjacent:case r.Child:case r.Descendant:case r.Parent:case r.Sibling:case r.ColumnCombinator:return!0;default:return!1}}const f=new Set(["contains","icontains"]);function p(e,t,n){const r=parseInt(t,16)-65536;return r!=r||n?t:r<0?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)}function d(e){return e.replace(s,p)}function h(e){return 39===e||34===e}function m(e){return 32===e||9===e||10===e||12===e||13===e}function E(e){const t=[],n=T(t,`${e}`,0);if(n<e.length)throw new Error(`Unmatched selector: ${e.slice(n)}`);return t}function T(e,t,n){let o=[];function s(e){const r=t.slice(n+e).match(i);if(!r)throw new Error(`Expected name, found ${t.slice(n)}`);const[o]=r;return n+=e+o.length,d(o)}function p(e){for(n+=e;n<t.length&&m(t.charCodeAt(n));)n++}function E(){const e=n+=1;let r=1;for(;r>0&&n<t.length;n++)40!==t.charCodeAt(n)||g(n)?41!==t.charCodeAt(n)||g(n)||r--:r++;if(r)throw new Error("Parenthesis not matched");return d(t.slice(e,n-1))}function g(e){let n=0;for(;92===t.charCodeAt(--e);)n++;return!(1&~n)}function y(){if(o.length>0&&c(o[o.length-1]))throw new Error("Did not expect successive traversals.")}function _(e){o.length>0&&o[o.length-1].type===r.Descendant?o[o.length-1].type=e:(y(),o.push({type:e}))}function A(e,t){o.push({type:r.Attribute,name:e,action:t,value:s(1),namespace:null,ignoreCase:"quirks"})}function b(){if(o.length&&o[o.length-1].type===r.Descendant&&o.pop(),0===o.length)throw new Error("Empty sub-selector");e.push(o)}if(p(0),t.length===n)return n;e:for(;n<t.length;){const e=t.charCodeAt(n);switch(e){case 32:case 9:case 10:case 12:case 13:0!==o.length&&o[0].type===r.Descendant||(y(),o.push({type:r.Descendant})),p(1);break;case 62:_(r.Child),p(1);break;case 60:_(r.Parent),p(1);break;case 126:_(r.Sibling),p(1);break;case 43:_(r.Adjacent),p(1);break;case 46:A("class",a.Element);break;case 35:A("id",a.Equals);break;case 91:{let e;p(1);let i=null;124===t.charCodeAt(n)?e=s(1):t.startsWith("*|",n)?(i="*",e=s(2)):(e=s(0),124===t.charCodeAt(n)&&61!==t.charCodeAt(n+1)&&(i=e,e=s(1))),p(0);let u=a.Exists;const c=l.get(t.charCodeAt(n));if(c){if(u=c,61!==t.charCodeAt(n+1))throw new Error("Expected `=`");p(2)}else 61===t.charCodeAt(n)&&(u=a.Equals,p(1));let f="",E=null;if("exists"!==u){if(h(t.charCodeAt(n))){const e=t.charCodeAt(n);let r=n+1;for(;r<t.length&&(t.charCodeAt(r)!==e||g(r));)r+=1;if(t.charCodeAt(r)!==e)throw new Error("Attribute value didn't end");f=d(t.slice(n+1,r)),n=r+1}else{const e=n;for(;n<t.length&&(!m(t.charCodeAt(n))&&93!==t.charCodeAt(n)||g(n));)n+=1;f=d(t.slice(e,n))}p(0);const e=32|t.charCodeAt(n);115===e?(E=!1,p(1)):105===e&&(E=!0,p(1))}if(93!==t.charCodeAt(n))throw new Error("Attribute selector didn't terminate");n+=1;const T={type:r.Attribute,name:e,action:u,value:f,namespace:i,ignoreCase:E};o.push(T);break}case 58:{if(58===t.charCodeAt(n+1)){o.push({type:r.PseudoElement,name:s(2).toLowerCase(),data:40===t.charCodeAt(n)?E():null});continue}const e=s(1).toLowerCase();let a=null;if(40===t.charCodeAt(n))if(u.has(e)){if(h(t.charCodeAt(n+1)))throw new Error(`Pseudo-selector ${e} cannot be quoted`);if(a=[],n=T(a,t,n+1),41!==t.charCodeAt(n))throw new Error(`Missing closing parenthesis in :${e} (${t})`);n+=1}else{if(a=E(),f.has(e)){const e=a.charCodeAt(0);e===a.charCodeAt(a.length-1)&&h(e)&&(a=a.slice(1,-1))}a=d(a)}o.push({type:r.Pseudo,name:e,data:a});break}case 44:b(),o=[],p(1);break;default:{if(t.startsWith("/*",n)){const e=t.indexOf("*/",n+2);if(e<0)throw new Error("Comment was not terminated");n=e+2,0===o.length&&p(0);break}let a,l=null;if(42===e)n+=1,a="*";else if(124===e){if(a="",124===t.charCodeAt(n+1)){_(r.ColumnCombinator),p(2);break}}else{if(!i.test(t.slice(n)))break e;a=s(0)}124===t.charCodeAt(n)&&124!==t.charCodeAt(n+1)&&(l=a,42===t.charCodeAt(n+1)?(a="*",n+=2):a=s(1)),o.push("*"===a?{type:r.Universal,namespace:l}:{type:r.Tag,name:a,namespace:l})}}}return b(),n}const g=["\\",'"'],y=[...g,"(",")"],_=new Set(g.map((e=>e.charCodeAt(0)))),A=new Set(y.map((e=>e.charCodeAt(0)))),b=new Set([...y,"~","^","$","*","+","!","|",":","[","]"," ","."].map((e=>e.charCodeAt(0))));function v(e){return e.map((e=>e.map(S).join(""))).join(", ")}function S(e,t,n){switch(e.type){case r.Child:return 0===t?"> ":" > ";case r.Parent:return 0===t?"< ":" < ";case r.Sibling:return 0===t?"~ ":" ~ ";case r.Adjacent:return 0===t?"+ ":" + ";case r.Descendant:return" ";case r.ColumnCombinator:return 0===t?"|| ":" || ";case r.Universal:return"*"===e.namespace&&t+1<n.length&&"name"in n[t+1]?"":`${C(e.namespace)}*`;case r.Tag:return I(e);case r.PseudoElement:return`::${N(e.name,b)}${null===e.data?"":`(${N(e.data,A)})`}`;case r.Pseudo:return`:${N(e.name,b)}${null===e.data?"":`(${"string"==typeof e.data?N(e.data,A):v(e.data)})`}`;case r.Attribute:{if("id"===e.name&&e.action===a.Equals&&"quirks"===e.ignoreCase&&!e.namespace)return`#${N(e.value,b)}`;if("class"===e.name&&e.action===a.Element&&"quirks"===e.ignoreCase&&!e.namespace)return`.${N(e.value,b)}`;const t=I(e);return e.action===a.Exists?`[${t}]`:`[${t}${function(e){switch(e){case a.Equals:return"";case a.Element:return"~";case a.Start:return"^";case a.End:return"$";case a.Any:return"*";case a.Not:return"!";case a.Hyphen:return"|";case a.Exists:throw new Error("Shouldn't be here")}}(e.action)}="${N(e.value,_)}"${null===e.ignoreCase?"":e.ignoreCase?" i":" s"}]`}}}function I(e){return`${C(e.namespace)}${N(e.name,b)}`}function C(e){return null!==e?`${"*"===e?"*":N(e,b)}|`:""}function N(e,t){let n=0,r="";for(let o=0;o<e.length;o++)t.has(e.charCodeAt(o))&&(r+=`${e.slice(n,o)}\\${e.charAt(o)}`,n=o+1);return r.length>0?r+e.slice(n):e}},41:(e,t,n)=>{"use strict";var r=n(655),o=n(8068),a=n(9675),i=n(5795);e.exports=function(e,t,n){if(!e||"object"!=typeof e&&"function"!=typeof e)throw new a("`obj` must be an object or a function`");if("string"!=typeof t&&"symbol"!=typeof t)throw new a("`property` must be a string or a symbol`");if(arguments.length>3&&"boolean"!=typeof arguments[3]&&null!==arguments[3])throw new a("`nonEnumerable`, if provided, must be a boolean or null");if(arguments.length>4&&"boolean"!=typeof arguments[4]&&null!==arguments[4])throw new a("`nonWritable`, if provided, must be a boolean or null");if(arguments.length>5&&"boolean"!=typeof arguments[5]&&null!==arguments[5])throw new a("`nonConfigurable`, if provided, must be a boolean or null");if(arguments.length>6&&"boolean"!=typeof arguments[6])throw new a("`loose`, if provided, must be a boolean");var s=arguments.length>3?arguments[3]:null,l=arguments.length>4?arguments[4]:null,u=arguments.length>5?arguments[5]:null,c=arguments.length>6&&arguments[6],f=!!i&&i(e,t);if(r)r(e,t,{configurable:null===u&&f?f.configurable:!u,enumerable:null===s&&f?f.enumerable:!s,value:n,writable:null===l&&f?f.writable:!l});else{if(!c&&(s||l||u))throw new o("This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.");e[t]=n}}},8452:(e,t,n)=>{"use strict";var r=n(1189),o="function"==typeof Symbol&&"symbol"==typeof Symbol("foo"),a=Object.prototype.toString,i=Array.prototype.concat,s=n(41),l=n(592)(),u=function(e,t,n,r){if(t in e)if(!0===r){if(e[t]===n)return}else if("function"!=typeof(o=r)||"[object Function]"!==a.call(o)||!r())return;var o;l?s(e,t,n,!0):s(e,t,n)},c=function(e,t){var n=arguments.length>2?arguments[2]:{},a=r(t);o&&(a=i.call(a,Object.getOwnPropertySymbols(t)));for(var s=0;s<a.length;s+=1)u(e,a[s],t[a[s]],n[a[s]])};c.supportsDescriptors=!!l,e.exports=c},4460:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.attributeNames=t.elementNames=void 0,t.elementNames=new Map(["altGlyph","altGlyphDef","altGlyphItem","animateColor","animateMotion","animateTransform","clipPath","feBlend","feColorMatrix","feComponentTransfer","feComposite","feConvolveMatrix","feDiffuseLighting","feDisplacementMap","feDistantLight","feDropShadow","feFlood","feFuncA","feFuncB","feFuncG","feFuncR","feGaussianBlur","feImage","feMerge","feMergeNode","feMorphology","feOffset","fePointLight","feSpecularLighting","feSpotLight","feTile","feTurbulence","foreignObject","glyphRef","linearGradient","radialGradient","textPath"].map((function(e){return[e.toLowerCase(),e]}))),t.attributeNames=new Map(["definitionURL","attributeName","attributeType","baseFrequency","baseProfile","calcMode","clipPathUnits","diffuseConstant","edgeMode","filterUnits","glyphRef","gradientTransform","gradientUnits","kernelMatrix","kernelUnitLength","keyPoints","keySplines","keyTimes","lengthAdjust","limitingConeAngle","markerHeight","markerUnits","markerWidth","maskContentUnits","maskUnits","numOctaves","pathLength","patternContentUnits","patternTransform","patternUnits","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","refX","refY","repeatCount","repeatDur","requiredExtensions","requiredFeatures","specularConstant","specularExponent","spreadMethod","startOffset","stdDeviation","stitchTiles","surfaceScale","systemLanguage","tableValues","targetX","targetY","textLength","viewBox","viewTarget","xChannelSelector","yChannelSelector","zoomAndPan"].map((function(e){return[e.toLowerCase(),e]})))},3806:function(e,t,n){"use strict";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},r.apply(this,arguments)},o=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var o=Object.getOwnPropertyDescriptor(t,n);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,o)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&o(t,e,n);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.render=void 0;var s=i(n(5413)),l=n(2730),u=n(4460),c=new Set(["style","script","xmp","iframe","noembed","noframes","plaintext","noscript"]);function f(e){return e.replace(/"/g,"&quot;")}var p=new Set(["area","base","basefont","br","col","command","embed","frame","hr","img","input","isindex","keygen","link","meta","param","source","track","wbr"]);function d(e,t){void 0===t&&(t={});for(var n=("length"in e?e:[e]),r="",o=0;o<n.length;o++)r+=h(n[o],t);return r}function h(e,t){switch(e.type){case s.Root:return d(e.children,t);case s.Doctype:case s.Directive:return"<".concat(e.data,">");case s.Comment:return"\x3c!--".concat(e.data,"--\x3e");case s.CDATA:return function(e){return"<![CDATA[".concat(e.children[0].data,"]]>")}(e);case s.Script:case s.Style:case s.Tag:return function(e,t){var n;"foreign"===t.xmlMode&&(e.name=null!==(n=u.elementNames.get(e.name))&&void 0!==n?n:e.name,e.parent&&m.has(e.parent.name)&&(t=r(r({},t),{xmlMode:!1}))),!t.xmlMode&&E.has(e.name)&&(t=r(r({},t),{xmlMode:"foreign"}));var o="<".concat(e.name),a=function(e,t){var n;if(e){var r=!1===(null!==(n=t.encodeEntities)&&void 0!==n?n:t.decodeEntities)?f:t.xmlMode||"utf8"!==t.encodeEntities?l.encodeXML:l.escapeAttribute;return Object.keys(e).map((function(n){var o,a,i=null!==(o=e[n])&&void 0!==o?o:"";return"foreign"===t.xmlMode&&(n=null!==(a=u.attributeNames.get(n))&&void 0!==a?a:n),t.emptyAttrs||t.xmlMode||""!==i?"".concat(n,'="').concat(r(i),'"'):n})).join(" ")}}(e.attribs,t);return a&&(o+=" ".concat(a)),0===e.children.length&&(t.xmlMode?!1!==t.selfClosingTags:t.selfClosingTags&&p.has(e.name))?(t.xmlMode||(o+=" "),o+="/>"):(o+=">",e.children.length>0&&(o+=d(e.children,t)),!t.xmlMode&&p.has(e.name)||(o+="</".concat(e.name,">"))),o}(e,t);case s.Text:return function(e,t){var n,r=e.data||"";return!1===(null!==(n=t.encodeEntities)&&void 0!==n?n:t.decodeEntities)||!t.xmlMode&&e.parent&&c.has(e.parent.name)||(r=t.xmlMode||"utf8"!==t.encodeEntities?(0,l.encodeXML)(r):(0,l.escapeText)(r)),r}(e,t)}}t.render=d,t.default=d;var m=new Set(["mi","mo","mn","ms","mtext","annotation-xml","foreignObject","desc","title"]),E=new Set(["svg","math"])},5413:(e,t)=>{"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0}),t.Doctype=t.CDATA=t.Tag=t.Style=t.Script=t.Comment=t.Directive=t.Text=t.Root=t.isTag=t.ElementType=void 0,function(e){e.Root="root",e.Text="text",e.Directive="directive",e.Comment="comment",e.Script="script",e.Style="style",e.Tag="tag",e.CDATA="cdata",e.Doctype="doctype"}(n=t.ElementType||(t.ElementType={})),t.isTag=function(e){return e.type===n.Tag||e.type===n.Script||e.type===n.Style},t.Root=n.Root,t.Text=n.Text,t.Directive=n.Directive,t.Comment=n.Comment,t.Script=n.Script,t.Style=n.Style,t.Tag=n.Tag,t.CDATA=n.CDATA,t.Doctype=n.Doctype},1141:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var o=Object.getOwnPropertyDescriptor(t,n);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,o)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||r(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),t.DomHandler=void 0;var a=n(5413),i=n(6957);o(n(6957),t);var s={withStartIndices:!1,withEndIndices:!1,xmlMode:!1},l=function(){function e(e,t,n){this.dom=[],this.root=new i.Document(this.dom),this.done=!1,this.tagStack=[this.root],this.lastNode=null,this.parser=null,"function"==typeof t&&(n=t,t=s),"object"==typeof e&&(t=e,e=void 0),this.callback=null!=e?e:null,this.options=null!=t?t:s,this.elementCB=null!=n?n:null}return e.prototype.onparserinit=function(e){this.parser=e},e.prototype.onreset=function(){this.dom=[],this.root=new i.Document(this.dom),this.done=!1,this.tagStack=[this.root],this.lastNode=null,this.parser=null},e.prototype.onend=function(){this.done||(this.done=!0,this.parser=null,this.handleCallback(null))},e.prototype.onerror=function(e){this.handleCallback(e)},e.prototype.onclosetag=function(){this.lastNode=null;var e=this.tagStack.pop();this.options.withEndIndices&&(e.endIndex=this.parser.endIndex),this.elementCB&&this.elementCB(e)},e.prototype.onopentag=function(e,t){var n=this.options.xmlMode?a.ElementType.Tag:void 0,r=new i.Element(e,t,void 0,n);this.addNode(r),this.tagStack.push(r)},e.prototype.ontext=function(e){var t=this.lastNode;if(t&&t.type===a.ElementType.Text)t.data+=e,this.options.withEndIndices&&(t.endIndex=this.parser.endIndex);else{var n=new i.Text(e);this.addNode(n),this.lastNode=n}},e.prototype.oncomment=function(e){if(this.lastNode&&this.lastNode.type===a.ElementType.Comment)this.lastNode.data+=e;else{var t=new i.Comment(e);this.addNode(t),this.lastNode=t}},e.prototype.oncommentend=function(){this.lastNode=null},e.prototype.oncdatastart=function(){var e=new i.Text(""),t=new i.CDATA([e]);this.addNode(t),e.parent=t,this.lastNode=e},e.prototype.oncdataend=function(){this.lastNode=null},e.prototype.onprocessinginstruction=function(e,t){var n=new i.ProcessingInstruction(e,t);this.addNode(n)},e.prototype.handleCallback=function(e){if("function"==typeof this.callback)this.callback(e,this.dom);else if(e)throw e},e.prototype.addNode=function(e){var t=this.tagStack[this.tagStack.length-1],n=t.children[t.children.length-1];this.options.withStartIndices&&(e.startIndex=this.parser.startIndex),this.options.withEndIndices&&(e.endIndex=this.parser.endIndex),t.children.push(e),n&&(e.prev=n,n.next=e),e.parent=t,this.lastNode=null},e}();t.DomHandler=l,t.default=l},6957:function(e,t,n){"use strict";var r,o=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),a=this&&this.__assign||function(){return a=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},a.apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.cloneNode=t.hasChildren=t.isDocument=t.isDirective=t.isComment=t.isText=t.isCDATA=t.isTag=t.Element=t.Document=t.CDATA=t.NodeWithChildren=t.ProcessingInstruction=t.Comment=t.Text=t.DataNode=t.Node=void 0;var i=n(5413),s=function(){function e(){this.parent=null,this.prev=null,this.next=null,this.startIndex=null,this.endIndex=null}return Object.defineProperty(e.prototype,"parentNode",{get:function(){return this.parent},set:function(e){this.parent=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"previousSibling",{get:function(){return this.prev},set:function(e){this.prev=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"nextSibling",{get:function(){return this.next},set:function(e){this.next=e},enumerable:!1,configurable:!0}),e.prototype.cloneNode=function(e){return void 0===e&&(e=!1),b(this,e)},e}();t.Node=s;var l=function(e){function t(t){var n=e.call(this)||this;return n.data=t,n}return o(t,e),Object.defineProperty(t.prototype,"nodeValue",{get:function(){return this.data},set:function(e){this.data=e},enumerable:!1,configurable:!0}),t}(s);t.DataNode=l;var u=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.type=i.ElementType.Text,t}return o(t,e),Object.defineProperty(t.prototype,"nodeType",{get:function(){return 3},enumerable:!1,configurable:!0}),t}(l);t.Text=u;var c=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.type=i.ElementType.Comment,t}return o(t,e),Object.defineProperty(t.prototype,"nodeType",{get:function(){return 8},enumerable:!1,configurable:!0}),t}(l);t.Comment=c;var f=function(e){function t(t,n){var r=e.call(this,n)||this;return r.name=t,r.type=i.ElementType.Directive,r}return o(t,e),Object.defineProperty(t.prototype,"nodeType",{get:function(){return 1},enumerable:!1,configurable:!0}),t}(l);t.ProcessingInstruction=f;var p=function(e){function t(t){var n=e.call(this)||this;return n.children=t,n}return o(t,e),Object.defineProperty(t.prototype,"firstChild",{get:function(){var e;return null!==(e=this.children[0])&&void 0!==e?e:null},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"lastChild",{get:function(){return this.children.length>0?this.children[this.children.length-1]:null},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"childNodes",{get:function(){return this.children},set:function(e){this.children=e},enumerable:!1,configurable:!0}),t}(s);t.NodeWithChildren=p;var d=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.type=i.ElementType.CDATA,t}return o(t,e),Object.defineProperty(t.prototype,"nodeType",{get:function(){return 4},enumerable:!1,configurable:!0}),t}(p);t.CDATA=d;var h=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.type=i.ElementType.Root,t}return o(t,e),Object.defineProperty(t.prototype,"nodeType",{get:function(){return 9},enumerable:!1,configurable:!0}),t}(p);t.Document=h;var m=function(e){function t(t,n,r,o){void 0===r&&(r=[]),void 0===o&&(o="script"===t?i.ElementType.Script:"style"===t?i.ElementType.Style:i.ElementType.Tag);var a=e.call(this,r)||this;return a.name=t,a.attribs=n,a.type=o,a}return o(t,e),Object.defineProperty(t.prototype,"nodeType",{get:function(){return 1},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"tagName",{get:function(){return this.name},set:function(e){this.name=e},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"attributes",{get:function(){var e=this;return Object.keys(this.attribs).map((function(t){var n,r;return{name:t,value:e.attribs[t],namespace:null===(n=e["x-attribsNamespace"])||void 0===n?void 0:n[t],prefix:null===(r=e["x-attribsPrefix"])||void 0===r?void 0:r[t]}}))},enumerable:!1,configurable:!0}),t}(p);function E(e){return(0,i.isTag)(e)}function T(e){return e.type===i.ElementType.CDATA}function g(e){return e.type===i.ElementType.Text}function y(e){return e.type===i.ElementType.Comment}function _(e){return e.type===i.ElementType.Directive}function A(e){return e.type===i.ElementType.Root}function b(e,t){var n;if(void 0===t&&(t=!1),g(e))n=new u(e.data);else if(y(e))n=new c(e.data);else if(E(e)){var r=t?v(e.children):[],o=new m(e.name,a({},e.attribs),r);r.forEach((function(e){return e.parent=o})),null!=e.namespace&&(o.namespace=e.namespace),e["x-attribsNamespace"]&&(o["x-attribsNamespace"]=a({},e["x-attribsNamespace"])),e["x-attribsPrefix"]&&(o["x-attribsPrefix"]=a({},e["x-attribsPrefix"])),n=o}else if(T(e)){r=t?v(e.children):[];var i=new d(r);r.forEach((function(e){return e.parent=i})),n=i}else if(A(e)){r=t?v(e.children):[];var s=new h(r);r.forEach((function(e){return e.parent=s})),e["x-mode"]&&(s["x-mode"]=e["x-mode"]),n=s}else{if(!_(e))throw new Error("Not implemented yet: ".concat(e.type));var l=new f(e.name,e.data);null!=e["x-name"]&&(l["x-name"]=e["x-name"],l["x-publicId"]=e["x-publicId"],l["x-systemId"]=e["x-systemId"]),n=l}return n.startIndex=e.startIndex,n.endIndex=e.endIndex,null!=e.sourceCodeLocation&&(n.sourceCodeLocation=e.sourceCodeLocation),n}function v(e){for(var t=e.map((function(e){return b(e,!0)})),n=1;n<t.length;n++)t[n].prev=t[n-1],t[n-1].next=t[n];return t}t.Element=m,t.isTag=E,t.isCDATA=T,t.isText=g,t.isComment=y,t.isDirective=_,t.isDocument=A,t.hasChildren=function(e){return Object.prototype.hasOwnProperty.call(e,"children")},t.cloneNode=b},4437:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getFeed=void 0;var r=n(6037),o=n(3209);t.getFeed=function(e){var t=l(f,e);return t?"feed"===t.name?function(e){var t,n=e.children,r={type:"atom",items:(0,o.getElementsByTagName)("entry",n).map((function(e){var t,n=e.children,r={media:s(n)};c(r,"id","id",n),c(r,"title","title",n);var o=null===(t=l("link",n))||void 0===t?void 0:t.attribs.href;o&&(r.link=o);var a=u("summary",n)||u("content",n);a&&(r.description=a);var i=u("updated",n);return i&&(r.pubDate=new Date(i)),r}))};c(r,"id","id",n),c(r,"title","title",n);var a=null===(t=l("link",n))||void 0===t?void 0:t.attribs.href;a&&(r.link=a),c(r,"description","subtitle",n);var i=u("updated",n);return i&&(r.updated=new Date(i)),c(r,"author","email",n,!0),r}(t):function(e){var t,n,r=null!==(n=null===(t=l("channel",e.children))||void 0===t?void 0:t.children)&&void 0!==n?n:[],a={type:e.name.substr(0,3),id:"",items:(0,o.getElementsByTagName)("item",e.children).map((function(e){var t=e.children,n={media:s(t)};c(n,"id","guid",t),c(n,"title","title",t),c(n,"link","link",t),c(n,"description","description",t);var r=u("pubDate",t)||u("dc:date",t);return r&&(n.pubDate=new Date(r)),n}))};c(a,"title","title",r),c(a,"link","link",r),c(a,"description","description",r);var i=u("lastBuildDate",r);return i&&(a.updated=new Date(i)),c(a,"author","managingEditor",r,!0),a}(t):null};var a=["url","type","lang"],i=["fileSize","bitrate","framerate","samplingrate","channels","duration","height","width"];function s(e){return(0,o.getElementsByTagName)("media:content",e).map((function(e){for(var t=e.attribs,n={medium:t.medium,isDefault:!!t.isDefault},r=0,o=a;r<o.length;r++)t[u=o[r]]&&(n[u]=t[u]);for(var s=0,l=i;s<l.length;s++){var u;t[u=l[s]]&&(n[u]=parseInt(t[u],10))}return t.expression&&(n.expression=t.expression),n}))}function l(e,t){return(0,o.getElementsByTagName)(e,t,!0,1)[0]}function u(e,t,n){return void 0===n&&(n=!1),(0,r.textContent)((0,o.getElementsByTagName)(e,t,n,1)).trim()}function c(e,t,n,r,o){void 0===o&&(o=!1);var a=u(n,r,o);a&&(e[t]=a)}function f(e){return"rss"===e||"feed"===e||"rdf:RDF"===e}},5397:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.uniqueSort=t.compareDocumentPosition=t.DocumentPosition=t.removeSubsets=void 0;var r,o=n(1141);function a(e,t){var n=[],a=[];if(e===t)return 0;for(var i=(0,o.hasChildren)(e)?e:e.parent;i;)n.unshift(i),i=i.parent;for(i=(0,o.hasChildren)(t)?t:t.parent;i;)a.unshift(i),i=i.parent;for(var s=Math.min(n.length,a.length),l=0;l<s&&n[l]===a[l];)l++;if(0===l)return r.DISCONNECTED;var u=n[l-1],c=u.children,f=n[l],p=a[l];return c.indexOf(f)>c.indexOf(p)?u===t?r.FOLLOWING|r.CONTAINED_BY:r.FOLLOWING:u===e?r.PRECEDING|r.CONTAINS:r.PRECEDING}t.removeSubsets=function(e){for(var t=e.length;--t>=0;){var n=e[t];if(t>0&&e.lastIndexOf(n,t-1)>=0)e.splice(t,1);else for(var r=n.parent;r;r=r.parent)if(e.includes(r)){e.splice(t,1);break}}return e},function(e){e[e.DISCONNECTED=1]="DISCONNECTED",e[e.PRECEDING=2]="PRECEDING",e[e.FOLLOWING=4]="FOLLOWING",e[e.CONTAINS=8]="CONTAINS",e[e.CONTAINED_BY=16]="CONTAINED_BY"}(r=t.DocumentPosition||(t.DocumentPosition={})),t.compareDocumentPosition=a,t.uniqueSort=function(e){return(e=e.filter((function(e,t,n){return!n.includes(e,t+1)}))).sort((function(e,t){var n=a(e,t);return n&r.PRECEDING?-1:n&r.FOLLOWING?1:0})),e}},8888:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var o=Object.getOwnPropertyDescriptor(t,n);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,o)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||r(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),t.hasChildren=t.isDocument=t.isComment=t.isText=t.isCDATA=t.isTag=void 0,o(n(6037),t),o(n(8938),t),o(n(3403),t),o(n(718),t),o(n(3209),t),o(n(5397),t),o(n(4437),t);var a=n(1141);Object.defineProperty(t,"isTag",{enumerable:!0,get:function(){return a.isTag}}),Object.defineProperty(t,"isCDATA",{enumerable:!0,get:function(){return a.isCDATA}}),Object.defineProperty(t,"isText",{enumerable:!0,get:function(){return a.isText}}),Object.defineProperty(t,"isComment",{enumerable:!0,get:function(){return a.isComment}}),Object.defineProperty(t,"isDocument",{enumerable:!0,get:function(){return a.isDocument}}),Object.defineProperty(t,"hasChildren",{enumerable:!0,get:function(){return a.hasChildren}})},3209:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getElementsByTagType=t.getElementsByTagName=t.getElementById=t.getElements=t.testElement=void 0;var r=n(1141),o=n(718),a={tag_name:function(e){return"function"==typeof e?function(t){return(0,r.isTag)(t)&&e(t.name)}:"*"===e?r.isTag:function(t){return(0,r.isTag)(t)&&t.name===e}},tag_type:function(e){return"function"==typeof e?function(t){return e(t.type)}:function(t){return t.type===e}},tag_contains:function(e){return"function"==typeof e?function(t){return(0,r.isText)(t)&&e(t.data)}:function(t){return(0,r.isText)(t)&&t.data===e}}};function i(e,t){return"function"==typeof t?function(n){return(0,r.isTag)(n)&&t(n.attribs[e])}:function(n){return(0,r.isTag)(n)&&n.attribs[e]===t}}function s(e,t){return function(n){return e(n)||t(n)}}function l(e){var t=Object.keys(e).map((function(t){var n=e[t];return Object.prototype.hasOwnProperty.call(a,t)?a[t](n):i(t,n)}));return 0===t.length?null:t.reduce(s)}t.testElement=function(e,t){var n=l(e);return!n||n(t)},t.getElements=function(e,t,n,r){void 0===r&&(r=1/0);var a=l(e);return a?(0,o.filter)(a,t,n,r):[]},t.getElementById=function(e,t,n){return void 0===n&&(n=!0),Array.isArray(t)||(t=[t]),(0,o.findOne)(i("id",e),t,n)},t.getElementsByTagName=function(e,t,n,r){return void 0===n&&(n=!0),void 0===r&&(r=1/0),(0,o.filter)(a.tag_name(e),t,n,r)},t.getElementsByTagType=function(e,t,n,r){return void 0===n&&(n=!0),void 0===r&&(r=1/0),(0,o.filter)(a.tag_type(e),t,n,r)}},3403:(e,t)=>{"use strict";function n(e){if(e.prev&&(e.prev.next=e.next),e.next&&(e.next.prev=e.prev),e.parent){var t=e.parent.children,n=t.lastIndexOf(e);n>=0&&t.splice(n,1)}e.next=null,e.prev=null,e.parent=null}Object.defineProperty(t,"__esModule",{value:!0}),t.prepend=t.prependChild=t.append=t.appendChild=t.replaceElement=t.removeElement=void 0,t.removeElement=n,t.replaceElement=function(e,t){var n=t.prev=e.prev;n&&(n.next=t);var r=t.next=e.next;r&&(r.prev=t);var o=t.parent=e.parent;if(o){var a=o.children;a[a.lastIndexOf(e)]=t,e.parent=null}},t.appendChild=function(e,t){if(n(t),t.next=null,t.parent=e,e.children.push(t)>1){var r=e.children[e.children.length-2];r.next=t,t.prev=r}else t.prev=null},t.append=function(e,t){n(t);var r=e.parent,o=e.next;if(t.next=o,t.prev=e,e.next=t,t.parent=r,o){if(o.prev=t,r){var a=r.children;a.splice(a.lastIndexOf(o),0,t)}}else r&&r.children.push(t)},t.prependChild=function(e,t){if(n(t),t.parent=e,t.prev=null,1!==e.children.unshift(t)){var r=e.children[1];r.prev=t,t.next=r}else t.next=null},t.prepend=function(e,t){n(t);var r=e.parent;if(r){var o=r.children;o.splice(o.indexOf(e),0,t)}e.prev&&(e.prev.next=t),t.parent=r,t.prev=e.prev,t.next=e,e.prev=t}},718:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.findAll=t.existsOne=t.findOne=t.findOneChild=t.find=t.filter=void 0;var r=n(1141);function o(e,t,n,o){for(var a=[],i=[t],s=[0];;)if(s[0]>=i[0].length){if(1===s.length)return a;i.shift(),s.shift()}else{var l=i[0][s[0]++];if(e(l)&&(a.push(l),--o<=0))return a;n&&(0,r.hasChildren)(l)&&l.children.length>0&&(s.unshift(0),i.unshift(l.children))}}t.filter=function(e,t,n,r){return void 0===n&&(n=!0),void 0===r&&(r=1/0),o(e,Array.isArray(t)?t:[t],n,r)},t.find=o,t.findOneChild=function(e,t){return t.find(e)},t.findOne=function e(t,n,o){void 0===o&&(o=!0);for(var a=null,i=0;i<n.length&&!a;i++){var s=n[i];(0,r.isTag)(s)&&(t(s)?a=s:o&&s.children.length>0&&(a=e(t,s.children,!0)))}return a},t.existsOne=function e(t,n){return n.some((function(n){return(0,r.isTag)(n)&&(t(n)||e(t,n.children))}))},t.findAll=function(e,t){for(var n=[],o=[t],a=[0];;)if(a[0]>=o[0].length){if(1===o.length)return n;o.shift(),a.shift()}else{var i=o[0][a[0]++];(0,r.isTag)(i)&&(e(i)&&n.push(i),i.children.length>0&&(a.unshift(0),o.unshift(i.children)))}}},6037:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.innerText=t.textContent=t.getText=t.getInnerHTML=t.getOuterHTML=void 0;var o=n(1141),a=r(n(3806)),i=n(5413);function s(e,t){return(0,a.default)(e,t)}t.getOuterHTML=s,t.getInnerHTML=function(e,t){return(0,o.hasChildren)(e)?e.children.map((function(e){return s(e,t)})).join(""):""},t.getText=function e(t){return Array.isArray(t)?t.map(e).join(""):(0,o.isTag)(t)?"br"===t.name?"\n":e(t.children):(0,o.isCDATA)(t)?e(t.children):(0,o.isText)(t)?t.data:""},t.textContent=function e(t){return Array.isArray(t)?t.map(e).join(""):(0,o.hasChildren)(t)&&!(0,o.isComment)(t)?e(t.children):(0,o.isText)(t)?t.data:""},t.innerText=function e(t){return Array.isArray(t)?t.map(e).join(""):(0,o.hasChildren)(t)&&(t.type===i.ElementType.Tag||(0,o.isCDATA)(t))?e(t.children):(0,o.isText)(t)?t.data:""}},8938:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.prevElementSibling=t.nextElementSibling=t.getName=t.hasAttrib=t.getAttributeValue=t.getSiblings=t.getParent=t.getChildren=void 0;var r=n(1141);function o(e){return(0,r.hasChildren)(e)?e.children:[]}function a(e){return e.parent||null}t.getChildren=o,t.getParent=a,t.getSiblings=function(e){var t=a(e);if(null!=t)return o(t);for(var n=[e],r=e.prev,i=e.next;null!=r;)n.unshift(r),r=r.prev;for(;null!=i;)n.push(i),i=i.next;return n},t.getAttributeValue=function(e,t){var n;return null===(n=e.attribs)||void 0===n?void 0:n[t]},t.hasAttrib=function(e,t){return null!=e.attribs&&Object.prototype.hasOwnProperty.call(e.attribs,t)&&null!=e.attribs[t]},t.getName=function(e){return e.name},t.nextElementSibling=function(e){for(var t=e.next;null!==t&&!(0,r.isTag)(t);)t=t.next;return t},t.prevElementSibling=function(e){for(var t=e.prev;null!==t&&!(0,r.isTag)(t);)t=t.prev;return t}},9878:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var o=Object.getOwnPropertyDescriptor(t,n);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,o)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return o(t,e),t},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.decodeXML=t.decodeHTMLStrict=t.decodeHTMLAttribute=t.decodeHTML=t.determineBranch=t.EntityDecoder=t.DecodingMode=t.BinTrieFlags=t.fromCodePoint=t.replaceCodePoint=t.decodeCodePoint=t.xmlDecodeTree=t.htmlDecodeTree=void 0;var s=i(n(3603));t.htmlDecodeTree=s.default;var l=i(n(2517));t.xmlDecodeTree=l.default;var u=a(n(5096));t.decodeCodePoint=u.default;var c,f,p,d,h=n(5096);function m(e){return e>=c.ZERO&&e<=c.NINE}Object.defineProperty(t,"replaceCodePoint",{enumerable:!0,get:function(){return h.replaceCodePoint}}),Object.defineProperty(t,"fromCodePoint",{enumerable:!0,get:function(){return h.fromCodePoint}}),function(e){e[e.NUM=35]="NUM",e[e.SEMI=59]="SEMI",e[e.EQUALS=61]="EQUALS",e[e.ZERO=48]="ZERO",e[e.NINE=57]="NINE",e[e.LOWER_A=97]="LOWER_A",e[e.LOWER_F=102]="LOWER_F",e[e.LOWER_X=120]="LOWER_X",e[e.LOWER_Z=122]="LOWER_Z",e[e.UPPER_A=65]="UPPER_A",e[e.UPPER_F=70]="UPPER_F",e[e.UPPER_Z=90]="UPPER_Z"}(c||(c={})),function(e){e[e.VALUE_LENGTH=49152]="VALUE_LENGTH",e[e.BRANCH_LENGTH=16256]="BRANCH_LENGTH",e[e.JUMP_TABLE=127]="JUMP_TABLE"}(f=t.BinTrieFlags||(t.BinTrieFlags={})),function(e){e[e.EntityStart=0]="EntityStart",e[e.NumericStart=1]="NumericStart",e[e.NumericDecimal=2]="NumericDecimal",e[e.NumericHex=3]="NumericHex",e[e.NamedEntity=4]="NamedEntity"}(p||(p={})),function(e){e[e.Legacy=0]="Legacy",e[e.Strict=1]="Strict",e[e.Attribute=2]="Attribute"}(d=t.DecodingMode||(t.DecodingMode={}));var E=function(){function e(e,t,n){this.decodeTree=e,this.emitCodePoint=t,this.errors=n,this.state=p.EntityStart,this.consumed=1,this.result=0,this.treeIndex=0,this.excess=1,this.decodeMode=d.Strict}return e.prototype.startEntity=function(e){this.decodeMode=e,this.state=p.EntityStart,this.result=0,this.treeIndex=0,this.excess=1,this.consumed=1},e.prototype.write=function(e,t){switch(this.state){case p.EntityStart:return e.charCodeAt(t)===c.NUM?(this.state=p.NumericStart,this.consumed+=1,this.stateNumericStart(e,t+1)):(this.state=p.NamedEntity,this.stateNamedEntity(e,t));case p.NumericStart:return this.stateNumericStart(e,t);case p.NumericDecimal:return this.stateNumericDecimal(e,t);case p.NumericHex:return this.stateNumericHex(e,t);case p.NamedEntity:return this.stateNamedEntity(e,t)}},e.prototype.stateNumericStart=function(e,t){return t>=e.length?-1:(32|e.charCodeAt(t))===c.LOWER_X?(this.state=p.NumericHex,this.consumed+=1,this.stateNumericHex(e,t+1)):(this.state=p.NumericDecimal,this.stateNumericDecimal(e,t))},e.prototype.addToNumericResult=function(e,t,n,r){if(t!==n){var o=n-t;this.result=this.result*Math.pow(r,o)+parseInt(e.substr(t,o),r),this.consumed+=o}},e.prototype.stateNumericHex=function(e,t){for(var n,r=t;t<e.length;){var o=e.charCodeAt(t);if(!(m(o)||(n=o,n>=c.UPPER_A&&n<=c.UPPER_F||n>=c.LOWER_A&&n<=c.LOWER_F)))return this.addToNumericResult(e,r,t,16),this.emitNumericEntity(o,3);t+=1}return this.addToNumericResult(e,r,t,16),-1},e.prototype.stateNumericDecimal=function(e,t){for(var n=t;t<e.length;){var r=e.charCodeAt(t);if(!m(r))return this.addToNumericResult(e,n,t,10),this.emitNumericEntity(r,2);t+=1}return this.addToNumericResult(e,n,t,10),-1},e.prototype.emitNumericEntity=function(e,t){var n;if(this.consumed<=t)return null===(n=this.errors)||void 0===n||n.absenceOfDigitsInNumericCharacterReference(this.consumed),0;if(e===c.SEMI)this.consumed+=1;else if(this.decodeMode===d.Strict)return 0;return this.emitCodePoint((0,u.replaceCodePoint)(this.result),this.consumed),this.errors&&(e!==c.SEMI&&this.errors.missingSemicolonAfterCharacterReference(),this.errors.validateNumericCharacterReference(this.result)),this.consumed},e.prototype.stateNamedEntity=function(e,t){for(var n=this.decodeTree,r=n[this.treeIndex],o=(r&f.VALUE_LENGTH)>>14;t<e.length;t++,this.excess++){var a=e.charCodeAt(t);if(this.treeIndex=g(n,r,this.treeIndex+Math.max(1,o),a),this.treeIndex<0)return 0===this.result||this.decodeMode===d.Attribute&&(0===o||((i=a)===c.EQUALS||function(e){return e>=c.UPPER_A&&e<=c.UPPER_Z||e>=c.LOWER_A&&e<=c.LOWER_Z||m(e)}(i)))?0:this.emitNotTerminatedNamedEntity();if(0!=(o=((r=n[this.treeIndex])&f.VALUE_LENGTH)>>14)){if(a===c.SEMI)return this.emitNamedEntityData(this.treeIndex,o,this.consumed+this.excess);this.decodeMode!==d.Strict&&(this.result=this.treeIndex,this.consumed+=this.excess,this.excess=0)}}var i;return-1},e.prototype.emitNotTerminatedNamedEntity=function(){var e,t=this.result,n=(this.decodeTree[t]&f.VALUE_LENGTH)>>14;return this.emitNamedEntityData(t,n,this.consumed),null===(e=this.errors)||void 0===e||e.missingSemicolonAfterCharacterReference(),this.consumed},e.prototype.emitNamedEntityData=function(e,t,n){var r=this.decodeTree;return this.emitCodePoint(1===t?r[e]&~f.VALUE_LENGTH:r[e+1],n),3===t&&this.emitCodePoint(r[e+2],n),n},e.prototype.end=function(){var e;switch(this.state){case p.NamedEntity:return 0===this.result||this.decodeMode===d.Attribute&&this.result!==this.treeIndex?0:this.emitNotTerminatedNamedEntity();case p.NumericDecimal:return this.emitNumericEntity(0,2);case p.NumericHex:return this.emitNumericEntity(0,3);case p.NumericStart:return null===(e=this.errors)||void 0===e||e.absenceOfDigitsInNumericCharacterReference(this.consumed),0;case p.EntityStart:return 0}},e}();function T(e){var t="",n=new E(e,(function(e){return t+=(0,u.fromCodePoint)(e)}));return function(e,r){for(var o=0,a=0;(a=e.indexOf("&",a))>=0;){t+=e.slice(o,a),n.startEntity(r);var i=n.write(e,a+1);if(i<0){o=a+n.end();break}o=a+i,a=0===i?o+1:o}var s=t+e.slice(o);return t="",s}}function g(e,t,n,r){var o=(t&f.BRANCH_LENGTH)>>7,a=t&f.JUMP_TABLE;if(0===o)return 0!==a&&r===a?n:-1;if(a){var i=r-a;return i<0||i>=o?-1:e[n+i]-1}for(var s=n,l=s+o-1;s<=l;){var u=s+l>>>1,c=e[u];if(c<r)s=u+1;else{if(!(c>r))return e[u+o];l=u-1}}return-1}t.EntityDecoder=E,t.determineBranch=g;var y=T(s.default),_=T(l.default);t.decodeHTML=function(e,t){return void 0===t&&(t=d.Legacy),y(e,t)},t.decodeHTMLAttribute=function(e){return y(e,d.Attribute)},t.decodeHTMLStrict=function(e){return y(e,d.Strict)},t.decodeXML=function(e){return _(e,d.Strict)}},5096:(e,t)=>{"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0}),t.replaceCodePoint=t.fromCodePoint=void 0;var r=new Map([[0,65533],[128,8364],[130,8218],[131,402],[132,8222],[133,8230],[134,8224],[135,8225],[136,710],[137,8240],[138,352],[139,8249],[140,338],[142,381],[145,8216],[146,8217],[147,8220],[148,8221],[149,8226],[150,8211],[151,8212],[152,732],[153,8482],[154,353],[155,8250],[156,339],[158,382],[159,376]]);function o(e){var t;return e>=55296&&e<=57343||e>1114111?65533:null!==(t=r.get(e))&&void 0!==t?t:e}t.fromCodePoint=null!==(n=String.fromCodePoint)&&void 0!==n?n:function(e){var t="";return e>65535&&(e-=65536,t+=String.fromCharCode(e>>>10&1023|55296),e=56320|1023&e),t+String.fromCharCode(e)},t.replaceCodePoint=o,t.default=function(e){return(0,t.fromCodePoint)(o(e))}},1818:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.encodeNonAsciiHTML=t.encodeHTML=void 0;var o=r(n(5504)),a=n(5987),i=/[\t\n!-,./:-@[-`\f{-}$\x80-\uFFFF]/g;function s(e,t){for(var n,r="",i=0;null!==(n=e.exec(t));){var s=n.index;r+=t.substring(i,s);var l=t.charCodeAt(s),u=o.default.get(l);if("object"==typeof u){if(s+1<t.length){var c=t.charCodeAt(s+1),f="number"==typeof u.n?u.n===c?u.o:void 0:u.n.get(c);if(void 0!==f){r+=f,i=e.lastIndex+=1;continue}}u=u.v}if(void 0!==u)r+=u,i=s+1;else{var p=(0,a.getCodePoint)(t,s);r+="&#x".concat(p.toString(16),";"),i=e.lastIndex+=Number(p!==l)}}return r+t.substr(i)}t.encodeHTML=function(e){return s(i,e)},t.encodeNonAsciiHTML=function(e){return s(a.xmlReplacer,e)}},5987:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.escapeText=t.escapeAttribute=t.escapeUTF8=t.escape=t.encodeXML=t.getCodePoint=t.xmlReplacer=void 0,t.xmlReplacer=/["&'<>$\x80-\uFFFF]/g;var n=new Map([[34,"&quot;"],[38,"&amp;"],[39,"&apos;"],[60,"&lt;"],[62,"&gt;"]]);function r(e){for(var r,o="",a=0;null!==(r=t.xmlReplacer.exec(e));){var i=r.index,s=e.charCodeAt(i),l=n.get(s);void 0!==l?(o+=e.substring(a,i)+l,a=i+1):(o+="".concat(e.substring(a,i),"&#x").concat((0,t.getCodePoint)(e,i).toString(16),";"),a=t.xmlReplacer.lastIndex+=Number(55296==(64512&s)))}return o+e.substr(a)}function o(e,t){return function(n){for(var r,o=0,a="";r=e.exec(n);)o!==r.index&&(a+=n.substring(o,r.index)),a+=t.get(r[0].charCodeAt(0)),o=r.index+1;return a+n.substring(o)}}t.getCodePoint=null!=String.prototype.codePointAt?function(e,t){return e.codePointAt(t)}:function(e,t){return 55296==(64512&e.charCodeAt(t))?1024*(e.charCodeAt(t)-55296)+e.charCodeAt(t+1)-56320+65536:e.charCodeAt(t)},t.encodeXML=r,t.escape=r,t.escapeUTF8=o(/[&<>'"]/g,n),t.escapeAttribute=o(/["&\u00A0]/g,new Map([[34,"&quot;"],[38,"&amp;"],[160,"&nbsp;"]])),t.escapeText=o(/[&<>\u00A0]/g,new Map([[38,"&amp;"],[60,"&lt;"],[62,"&gt;"],[160,"&nbsp;"]]))},3603:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=new Uint16Array('ᵁ<Õıʊҝջאٵ۞ޢߖࠏ੊ઑඡ๭༉༦჊ረዡᐕᒝᓃᓟᔥ\0\0\0\0\0\0ᕫᛍᦍᰒᷝ὾⁠↰⊍⏀⏻⑂⠤⤒ⴈ⹈⿎〖㊺㘹㞬㣾㨨㩱㫠㬮ࠀEMabcfglmnoprstu\\bfms¦³¹ÈÏlig耻Æ䃆P耻&䀦cute耻Á䃁reve;䄂Āiyx}rc耻Â䃂;䐐r;쀀𝔄rave耻À䃀pha;䎑acr;䄀d;橓Āgp¡on;䄄f;쀀𝔸plyFunction;恡ing耻Å䃅Ācs¾Ãr;쀀𝒜ign;扔ilde耻Ã䃃ml耻Ä䃄ЀaceforsuåûþėĜĢħĪĀcrêòkslash;或Ŷöø;櫧ed;挆y;䐑ƀcrtąċĔause;戵noullis;愬a;䎒r;쀀𝔅pf;쀀𝔹eve;䋘còēmpeq;扎܀HOacdefhilorsuōőŖƀƞƢƵƷƺǜȕɳɸɾcy;䐧PY耻©䂩ƀcpyŝŢźute;䄆Ā;iŧŨ拒talDifferentialD;慅leys;愭ȀaeioƉƎƔƘron;䄌dil耻Ç䃇rc;䄈nint;戰ot;䄊ĀdnƧƭilla;䂸terDot;䂷òſi;䎧rcleȀDMPTǇǋǑǖot;抙inus;抖lus;投imes;抗oĀcsǢǸkwiseContourIntegral;戲eCurlyĀDQȃȏoubleQuote;思uote;怙ȀlnpuȞȨɇɕonĀ;eȥȦ户;橴ƀgitȯȶȺruent;扡nt;戯ourIntegral;戮ĀfrɌɎ;愂oduct;成nterClockwiseContourIntegral;戳oss;樯cr;쀀𝒞pĀ;Cʄʅ拓ap;才րDJSZacefiosʠʬʰʴʸˋ˗ˡ˦̳ҍĀ;oŹʥtrahd;椑cy;䐂cy;䐅cy;䐏ƀgrsʿ˄ˇger;怡r;憡hv;櫤Āayː˕ron;䄎;䐔lĀ;t˝˞戇a;䎔r;쀀𝔇Āaf˫̧Ācm˰̢riticalȀADGT̖̜̀̆cute;䂴oŴ̋̍;䋙bleAcute;䋝rave;䁠ilde;䋜ond;拄ferentialD;慆Ѱ̽\0\0\0͔͂\0Ѕf;쀀𝔻ƀ;DE͈͉͍䂨ot;惜qual;扐blèCDLRUVͣͲ΂ϏϢϸontourIntegraìȹoɴ͹\0\0ͻ»͉nArrow;懓Āeo·ΤftƀARTΐΖΡrrow;懐ightArrow;懔eåˊngĀLRΫτeftĀARγιrrow;柸ightArrow;柺ightArrow;柹ightĀATϘϞrrow;懒ee;抨pɁϩ\0\0ϯrrow;懑ownArrow;懕erticalBar;戥ǹABLRTaВЪаўѿͼrrowƀ;BUНОТ憓ar;椓pArrow;懵reve;䌑eft˒к\0ц\0ѐightVector;楐eeVector;楞ectorĀ;Bљњ憽ar;楖ightǔѧ\0ѱeeVector;楟ectorĀ;BѺѻ懁ar;楗eeĀ;A҆҇护rrow;憧ĀctҒҗr;쀀𝒟rok;䄐ࠀNTacdfglmopqstuxҽӀӄӋӞӢӧӮӵԡԯԶՒ՝ՠեG;䅊H耻Ð䃐cute耻É䃉ƀaiyӒӗӜron;䄚rc耻Ê䃊;䐭ot;䄖r;쀀𝔈rave耻È䃈ement;戈ĀapӺӾcr;䄒tyɓԆ\0\0ԒmallSquare;旻erySmallSquare;斫ĀgpԦԪon;䄘f;쀀𝔼silon;䎕uĀaiԼՉlĀ;TՂՃ橵ilde;扂librium;懌Āci՗՚r;愰m;橳a;䎗ml耻Ë䃋Āipժկsts;戃onentialE;慇ʀcfiosօֈ֍ֲ׌y;䐤r;쀀𝔉lledɓ֗\0\0֣mallSquare;旼erySmallSquare;斪Ͱֺ\0ֿ\0\0ׄf;쀀𝔽All;戀riertrf;愱cò׋؀JTabcdfgorstר׬ׯ׺؀ؒؖ؛؝أ٬ٲcy;䐃耻>䀾mmaĀ;d׷׸䎓;䏜reve;䄞ƀeiy؇،ؐdil;䄢rc;䄜;䐓ot;䄠r;쀀𝔊;拙pf;쀀𝔾eater̀EFGLSTصلَٖٛ٦qualĀ;Lؾؿ扥ess;招ullEqual;执reater;檢ess;扷lantEqual;橾ilde;扳cr;쀀𝒢;扫ЀAacfiosuڅڋږڛڞڪھۊRDcy;䐪Āctڐڔek;䋇;䁞irc;䄤r;愌lbertSpace;愋ǰگ\0ڲf;愍izontalLine;攀Āctۃۅòکrok;䄦mpńېۘownHumðįqual;扏܀EJOacdfgmnostuۺ۾܃܇܎ܚܞܡܨ݄ݸދޏޕcy;䐕lig;䄲cy;䐁cute耻Í䃍Āiyܓܘrc耻Î䃎;䐘ot;䄰r;愑rave耻Ì䃌ƀ;apܠܯܿĀcgܴܷr;䄪inaryI;慈lieóϝǴ݉\0ݢĀ;eݍݎ戬Āgrݓݘral;戫section;拂isibleĀCTݬݲomma;恣imes;恢ƀgptݿރވon;䄮f;쀀𝕀a;䎙cr;愐ilde;䄨ǫޚ\0ޞcy;䐆l耻Ï䃏ʀcfosuެ޷޼߂ߐĀiyޱ޵rc;䄴;䐙r;쀀𝔍pf;쀀𝕁ǣ߇\0ߌr;쀀𝒥rcy;䐈kcy;䐄΀HJacfosߤߨ߽߬߱ࠂࠈcy;䐥cy;䐌ppa;䎚Āey߶߻dil;䄶;䐚r;쀀𝔎pf;쀀𝕂cr;쀀𝒦րJTaceflmostࠥࠩࠬࡐࡣ঳সে্਷ੇcy;䐉耻<䀼ʀcmnpr࠷࠼ࡁࡄࡍute;䄹bda;䎛g;柪lacetrf;愒r;憞ƀaeyࡗ࡜ࡡron;䄽dil;䄻;䐛Āfsࡨ॰tԀACDFRTUVarࡾࢩࢱࣦ࣠ࣼयज़ΐ४Ānrࢃ࢏gleBracket;柨rowƀ;BR࢙࢚࢞憐ar;懤ightArrow;懆eiling;挈oǵࢷ\0ࣃbleBracket;柦nǔࣈ\0࣒eeVector;楡ectorĀ;Bࣛࣜ懃ar;楙loor;挊ightĀAV࣯ࣵrrow;憔ector;楎Āerँगeƀ;AVउऊऐ抣rrow;憤ector;楚iangleƀ;BEतथऩ抲ar;槏qual;抴pƀDTVषूौownVector;楑eeVector;楠ectorĀ;Bॖॗ憿ar;楘ectorĀ;B॥०憼ar;楒ightáΜs̀EFGLSTॾঋকঝঢভqualGreater;拚ullEqual;扦reater;扶ess;檡lantEqual;橽ilde;扲r;쀀𝔏Ā;eঽা拘ftarrow;懚idot;䄿ƀnpw৔ਖਛgȀLRlr৞৷ਂਐeftĀAR০৬rrow;柵ightArrow;柷ightArrow;柶eftĀarγਊightáοightáϊf;쀀𝕃erĀLRਢਬeftArrow;憙ightArrow;憘ƀchtਾੀੂòࡌ;憰rok;䅁;扪Ѐacefiosuਗ਼੝੠੷੼અઋ઎p;椅y;䐜Ādl੥੯iumSpace;恟lintrf;愳r;쀀𝔐nusPlus;戓pf;쀀𝕄cò੶;䎜ҀJacefostuણધભીଔଙඑ඗ඞcy;䐊cute;䅃ƀaey઴હાron;䅇dil;䅅;䐝ƀgswે૰଎ativeƀMTV૓૟૨ediumSpace;怋hiĀcn૦૘ë૙eryThiî૙tedĀGL૸ଆreaterGreateòٳessLesóੈLine;䀊r;쀀𝔑ȀBnptଢନଷ଺reak;恠BreakingSpace;䂠f;愕ڀ;CDEGHLNPRSTV୕ୖ୪୼஡௫ఄ౞಄ದ೘ൡඅ櫬Āou୛୤ngruent;扢pCap;扭oubleVerticalBar;戦ƀlqxஃஊ஛ement;戉ualĀ;Tஒஓ扠ilde;쀀≂̸ists;戄reater΀;EFGLSTஶஷ஽௉௓௘௥扯qual;扱ullEqual;쀀≧̸reater;쀀≫̸ess;批lantEqual;쀀⩾̸ilde;扵umpń௲௽ownHump;쀀≎̸qual;쀀≏̸eĀfsఊధtTriangleƀ;BEచఛడ拪ar;쀀⧏̸qual;括s̀;EGLSTవశ఼ౄోౘ扮qual;扰reater;扸ess;쀀≪̸lantEqual;쀀⩽̸ilde;扴estedĀGL౨౹reaterGreater;쀀⪢̸essLess;쀀⪡̸recedesƀ;ESಒಓಛ技qual;쀀⪯̸lantEqual;拠ĀeiಫಹverseElement;戌ghtTriangleƀ;BEೋೌ೒拫ar;쀀⧐̸qual;拭ĀquೝഌuareSuĀbp೨೹setĀ;E೰ೳ쀀⊏̸qual;拢ersetĀ;Eഃആ쀀⊐̸qual;拣ƀbcpഓതൎsetĀ;Eഛഞ쀀⊂⃒qual;抈ceedsȀ;ESTലള഻െ抁qual;쀀⪰̸lantEqual;拡ilde;쀀≿̸ersetĀ;E൘൛쀀⊃⃒qual;抉ildeȀ;EFT൮൯൵ൿ扁qual;扄ullEqual;扇ilde;扉erticalBar;戤cr;쀀𝒩ilde耻Ñ䃑;䎝܀Eacdfgmoprstuvලෂ෉෕ෛ෠෧෼ขภยา฿ไlig;䅒cute耻Ó䃓Āiy෎ීrc耻Ô䃔;䐞blac;䅐r;쀀𝔒rave耻Ò䃒ƀaei෮ෲ෶cr;䅌ga;䎩cron;䎟pf;쀀𝕆enCurlyĀDQฎบoubleQuote;怜uote;怘;橔Āclวฬr;쀀𝒪ash耻Ø䃘iŬื฼de耻Õ䃕es;樷ml耻Ö䃖erĀBP๋๠Āar๐๓r;怾acĀek๚๜;揞et;掴arenthesis;揜Ҁacfhilors๿ງຊຏຒດຝະ໼rtialD;戂y;䐟r;쀀𝔓i;䎦;䎠usMinus;䂱Āipຢອncareplanåڝf;愙Ȁ;eio຺ູ໠໤檻cedesȀ;EST່້໏໚扺qual;檯lantEqual;扼ilde;找me;怳Ādp໩໮uct;戏ortionĀ;aȥ໹l;戝Āci༁༆r;쀀𝒫;䎨ȀUfos༑༖༛༟OT耻"䀢r;쀀𝔔pf;愚cr;쀀𝒬؀BEacefhiorsu༾གྷཇའཱིྦྷྪྭ႖ႩႴႾarr;椐G耻®䂮ƀcnrཎནབute;䅔g;柫rĀ;tཛྷཝ憠l;椖ƀaeyཧཬཱron;䅘dil;䅖;䐠Ā;vླྀཹ愜erseĀEUྂྙĀlq྇ྎement;戋uilibrium;懋pEquilibrium;楯r»ཹo;䎡ghtЀACDFTUVa࿁࿫࿳ဢဨၛႇϘĀnr࿆࿒gleBracket;柩rowƀ;BL࿜࿝࿡憒ar;懥eftArrow;懄eiling;按oǵ࿹\0စbleBracket;柧nǔည\0နeeVector;楝ectorĀ;Bဝသ懂ar;楕loor;挋Āerိ၃eƀ;AVဵံြ抢rrow;憦ector;楛iangleƀ;BEၐၑၕ抳ar;槐qual;抵pƀDTVၣၮၸownVector;楏eeVector;楜ectorĀ;Bႂႃ憾ar;楔ectorĀ;B႑႒懀ar;楓Āpuႛ႞f;愝ndImplies;楰ightarrow;懛ĀchႹႼr;愛;憱leDelayed;槴ڀHOacfhimoqstuფჱჷჽᄙᄞᅑᅖᅡᅧᆵᆻᆿĀCcჩხHcy;䐩y;䐨FTcy;䐬cute;䅚ʀ;aeiyᄈᄉᄎᄓᄗ檼ron;䅠dil;䅞rc;䅜;䐡r;쀀𝔖ortȀDLRUᄪᄴᄾᅉownArrow»ОeftArrow»࢚ightArrow»࿝pArrow;憑gma;䎣allCircle;战pf;쀀𝕊ɲᅭ\0\0ᅰt;戚areȀ;ISUᅻᅼᆉᆯ斡ntersection;抓uĀbpᆏᆞsetĀ;Eᆗᆘ抏qual;抑ersetĀ;Eᆨᆩ抐qual;抒nion;抔cr;쀀𝒮ar;拆ȀbcmpᇈᇛሉላĀ;sᇍᇎ拐etĀ;Eᇍᇕqual;抆ĀchᇠህeedsȀ;ESTᇭᇮᇴᇿ扻qual;檰lantEqual;扽ilde;承Tháྌ;我ƀ;esሒሓሣ拑rsetĀ;Eሜም抃qual;抇et»ሓրHRSacfhiorsሾቄ቉ቕ቞ቱቶኟዂወዑORN耻Þ䃞ADE;愢ĀHc቎ቒcy;䐋y;䐦Ābuቚቜ;䀉;䎤ƀaeyብቪቯron;䅤dil;䅢;䐢r;쀀𝔗Āeiቻ኉ǲኀ\0ኇefore;戴a;䎘Ācn኎ኘkSpace;쀀  Space;怉ldeȀ;EFTካኬኲኼ戼qual;扃ullEqual;扅ilde;扈pf;쀀𝕋ipleDot;惛Āctዖዛr;쀀𝒯rok;䅦ૡዷጎጚጦ\0ጬጱ\0\0\0\0\0ጸጽ፷ᎅ\0᏿ᐄᐊᐐĀcrዻጁute耻Ú䃚rĀ;oጇገ憟cir;楉rǣጓ\0጖y;䐎ve;䅬Āiyጞጣrc耻Û䃛;䐣blac;䅰r;쀀𝔘rave耻Ù䃙acr;䅪Ādiፁ፩erĀBPፈ፝Āarፍፐr;䁟acĀekፗፙ;揟et;掵arenthesis;揝onĀ;P፰፱拃lus;抎Āgp፻፿on;䅲f;쀀𝕌ЀADETadps᎕ᎮᎸᏄϨᏒᏗᏳrrowƀ;BDᅐᎠᎤar;椒ownArrow;懅ownArrow;憕quilibrium;楮eeĀ;AᏋᏌ报rrow;憥ownáϳerĀLRᏞᏨeftArrow;憖ightArrow;憗iĀ;lᏹᏺ䏒on;䎥ing;䅮cr;쀀𝒰ilde;䅨ml耻Ü䃜ҀDbcdefosvᐧᐬᐰᐳᐾᒅᒊᒐᒖash;披ar;櫫y;䐒ashĀ;lᐻᐼ抩;櫦Āerᑃᑅ;拁ƀbtyᑌᑐᑺar;怖Ā;iᑏᑕcalȀBLSTᑡᑥᑪᑴar;戣ine;䁼eparator;杘ilde;所ThinSpace;怊r;쀀𝔙pf;쀀𝕍cr;쀀𝒱dash;抪ʀcefosᒧᒬᒱᒶᒼirc;䅴dge;拀r;쀀𝔚pf;쀀𝕎cr;쀀𝒲Ȁfiosᓋᓐᓒᓘr;쀀𝔛;䎞pf;쀀𝕏cr;쀀𝒳ҀAIUacfosuᓱᓵᓹᓽᔄᔏᔔᔚᔠcy;䐯cy;䐇cy;䐮cute耻Ý䃝Āiyᔉᔍrc;䅶;䐫r;쀀𝔜pf;쀀𝕐cr;쀀𝒴ml;䅸ЀHacdefosᔵᔹᔿᕋᕏᕝᕠᕤcy;䐖cute;䅹Āayᕄᕉron;䅽;䐗ot;䅻ǲᕔ\0ᕛoWidtè૙a;䎖r;愨pf;愤cr;쀀𝒵௡ᖃᖊᖐ\0ᖰᖶᖿ\0\0\0\0ᗆᗛᗫᙟ᙭\0ᚕ᚛ᚲᚹ\0ᚾcute耻á䃡reve;䄃̀;Ediuyᖜᖝᖡᖣᖨᖭ戾;쀀∾̳;房rc耻â䃢te肻´̆;䐰lig耻æ䃦Ā;r²ᖺ;쀀𝔞rave耻à䃠ĀepᗊᗖĀfpᗏᗔsym;愵èᗓha;䎱ĀapᗟcĀclᗤᗧr;䄁g;樿ɤᗰ\0\0ᘊʀ;adsvᗺᗻᗿᘁᘇ戧nd;橕;橜lope;橘;橚΀;elmrszᘘᘙᘛᘞᘿᙏᙙ戠;榤e»ᘙsdĀ;aᘥᘦ戡ѡᘰᘲᘴᘶᘸᘺᘼᘾ;榨;榩;榪;榫;榬;榭;榮;榯tĀ;vᙅᙆ戟bĀ;dᙌᙍ抾;榝Āptᙔᙗh;戢»¹arr;捼Āgpᙣᙧon;䄅f;쀀𝕒΀;Eaeiop዁ᙻᙽᚂᚄᚇᚊ;橰cir;橯;扊d;手s;䀧roxĀ;e዁ᚒñᚃing耻å䃥ƀctyᚡᚦᚨr;쀀𝒶;䀪mpĀ;e዁ᚯñʈilde耻ã䃣ml耻ä䃤Āciᛂᛈoninôɲnt;樑ࠀNabcdefiklnoprsu᛭ᛱᜰ᜼ᝃᝈ᝸᝽០៦ᠹᡐᜍ᤽᥈ᥰot;櫭Ācrᛶ᜞kȀcepsᜀᜅᜍᜓong;扌psilon;䏶rime;怵imĀ;e᜚᜛戽q;拍Ŷᜢᜦee;抽edĀ;gᜬᜭ挅e»ᜭrkĀ;t፜᜷brk;掶Āoyᜁᝁ;䐱quo;怞ʀcmprtᝓ᝛ᝡᝤᝨausĀ;eĊĉptyv;榰séᜌnoõēƀahwᝯ᝱ᝳ;䎲;愶een;扬r;쀀𝔟g΀costuvwឍឝឳេ៕៛៞ƀaiuបពរðݠrc;旯p»፱ƀdptឤឨឭot;樀lus;樁imes;樂ɱឹ\0\0ើcup;樆ar;昅riangleĀdu៍្own;施p;斳plus;樄eåᑄåᒭarow;植ƀako៭ᠦᠵĀcn៲ᠣkƀlst៺֫᠂ozenge;槫riangleȀ;dlr᠒᠓᠘᠝斴own;斾eft;旂ight;斸k;搣Ʊᠫ\0ᠳƲᠯ\0ᠱ;斒;斑4;斓ck;斈ĀeoᠾᡍĀ;qᡃᡆ쀀=⃥uiv;쀀≡⃥t;挐Ȁptwxᡙᡞᡧᡬf;쀀𝕓Ā;tᏋᡣom»Ꮜtie;拈؀DHUVbdhmptuvᢅᢖᢪᢻᣗᣛᣬ᣿ᤅᤊᤐᤡȀLRlrᢎᢐᢒᢔ;敗;敔;敖;敓ʀ;DUduᢡᢢᢤᢦᢨ敐;敦;敩;敤;敧ȀLRlrᢳᢵᢷᢹ;敝;敚;敜;教΀;HLRhlrᣊᣋᣍᣏᣑᣓᣕ救;敬;散;敠;敫;敢;敟ox;槉ȀLRlrᣤᣦᣨᣪ;敕;敒;攐;攌ʀ;DUduڽ᣷᣹᣻᣽;敥;敨;攬;攴inus;抟lus;択imes;抠ȀLRlrᤙᤛᤝ᤟;敛;敘;攘;攔΀;HLRhlrᤰᤱᤳᤵᤷ᤻᤹攂;敪;敡;敞;攼;攤;攜Āevģ᥂bar耻¦䂦Ȁceioᥑᥖᥚᥠr;쀀𝒷mi;恏mĀ;e᜚᜜lƀ;bhᥨᥩᥫ䁜;槅sub;柈Ŭᥴ᥾lĀ;e᥹᥺怢t»᥺pƀ;Eeįᦅᦇ;檮Ā;qۜۛೡᦧ\0᧨ᨑᨕᨲ\0ᨷᩐ\0\0᪴\0\0᫁\0\0ᬡᬮ᭍᭒\0᯽\0ᰌƀcpr᦭ᦲ᧝ute;䄇̀;abcdsᦿᧀᧄ᧊᧕᧙戩nd;橄rcup;橉Āau᧏᧒p;橋p;橇ot;橀;쀀∩︀Āeo᧢᧥t;恁îړȀaeiu᧰᧻ᨁᨅǰ᧵\0᧸s;橍on;䄍dil耻ç䃧rc;䄉psĀ;sᨌᨍ橌m;橐ot;䄋ƀdmnᨛᨠᨦil肻¸ƭptyv;榲t脀¢;eᨭᨮ䂢räƲr;쀀𝔠ƀceiᨽᩀᩍy;䑇ckĀ;mᩇᩈ朓ark»ᩈ;䏇r΀;Ecefms᩟᩠ᩢᩫ᪤᪪᪮旋;槃ƀ;elᩩᩪᩭ䋆q;扗eɡᩴ\0\0᪈rrowĀlr᩼᪁eft;憺ight;憻ʀRSacd᪒᪔᪖᪚᪟»ཇ;擈st;抛irc;抚ash;抝nint;樐id;櫯cir;槂ubsĀ;u᪻᪼晣it»᪼ˬ᫇᫔᫺\0ᬊonĀ;eᫍᫎ䀺Ā;qÇÆɭ᫙\0\0᫢aĀ;t᫞᫟䀬;䁀ƀ;fl᫨᫩᫫戁îᅠeĀmx᫱᫶ent»᫩eóɍǧ᫾\0ᬇĀ;dኻᬂot;橭nôɆƀfryᬐᬔᬗ;쀀𝕔oäɔ脀©;sŕᬝr;愗Āaoᬥᬩrr;憵ss;朗Ācuᬲᬷr;쀀𝒸Ābpᬼ᭄Ā;eᭁᭂ櫏;櫑Ā;eᭉᭊ櫐;櫒dot;拯΀delprvw᭠᭬᭷ᮂᮬᯔ᯹arrĀlr᭨᭪;椸;椵ɰ᭲\0\0᭵r;拞c;拟arrĀ;p᭿ᮀ憶;椽̀;bcdosᮏᮐᮖᮡᮥᮨ截rcap;橈Āauᮛᮞp;橆p;橊ot;抍r;橅;쀀∪︀Ȁalrv᮵ᮿᯞᯣrrĀ;mᮼᮽ憷;椼yƀevwᯇᯔᯘqɰᯎ\0\0ᯒreã᭳uã᭵ee;拎edge;拏en耻¤䂤earrowĀlrᯮ᯳eft»ᮀight»ᮽeäᯝĀciᰁᰇoninôǷnt;戱lcty;挭ঀAHabcdefhijlorstuwz᰸᰻᰿ᱝᱩᱵᲊᲞᲬᲷ᳻᳿ᴍᵻᶑᶫᶻ᷆᷍rò΁ar;楥Ȁglrs᱈ᱍ᱒᱔ger;怠eth;愸òᄳhĀ;vᱚᱛ怐»ऊūᱡᱧarow;椏aã̕Āayᱮᱳron;䄏;䐴ƀ;ao̲ᱼᲄĀgrʿᲁr;懊tseq;橷ƀglmᲑᲔᲘ耻°䂰ta;䎴ptyv;榱ĀirᲣᲨsht;楿;쀀𝔡arĀlrᲳᲵ»ࣜ»သʀaegsv᳂͸᳖᳜᳠mƀ;oș᳊᳔ndĀ;ș᳑uit;晦amma;䏝in;拲ƀ;io᳧᳨᳸䃷de脀÷;o᳧ᳰntimes;拇nø᳷cy;䑒cɯᴆ\0\0ᴊrn;挞op;挍ʀlptuwᴘᴝᴢᵉᵕlar;䀤f;쀀𝕕ʀ;emps̋ᴭᴷᴽᵂqĀ;d͒ᴳot;扑inus;戸lus;戔quare;抡blebarwedgåúnƀadhᄮᵝᵧownarrowóᲃarpoonĀlrᵲᵶefôᲴighôᲶŢᵿᶅkaro÷གɯᶊ\0\0ᶎrn;挟op;挌ƀcotᶘᶣᶦĀryᶝᶡ;쀀𝒹;䑕l;槶rok;䄑Ādrᶰᶴot;拱iĀ;fᶺ᠖斿Āah᷀᷃ròЩaòྦangle;榦Āci᷒ᷕy;䑟grarr;柿ऀDacdefglmnopqrstuxḁḉḙḸոḼṉṡṾấắẽỡἪἷὄ὎὚ĀDoḆᴴoôᲉĀcsḎḔute耻é䃩ter;橮ȀaioyḢḧḱḶron;䄛rĀ;cḭḮ扖耻ê䃪lon;払;䑍ot;䄗ĀDrṁṅot;扒;쀀𝔢ƀ;rsṐṑṗ檚ave耻è䃨Ā;dṜṝ檖ot;檘Ȁ;ilsṪṫṲṴ檙nters;揧;愓Ā;dṹṺ檕ot;檗ƀapsẅẉẗcr;䄓tyƀ;svẒẓẕ戅et»ẓpĀ1;ẝẤĳạả;怄;怅怃ĀgsẪẬ;䅋p;怂ĀgpẴẸon;䄙f;쀀𝕖ƀalsỄỎỒrĀ;sỊị拕l;槣us;橱iƀ;lvỚớở䎵on»ớ;䏵ȀcsuvỪỳἋἣĀioữḱrc»Ḯɩỹ\0\0ỻíՈantĀglἂἆtr»ṝess»Ṻƀaeiἒ἖Ἒls;䀽st;扟vĀ;DȵἠD;橸parsl;槥ĀDaἯἳot;打rr;楱ƀcdiἾὁỸr;愯oô͒ĀahὉὋ;䎷耻ð䃰Āmrὓὗl耻ë䃫o;悬ƀcipὡὤὧl;䀡sôծĀeoὬὴctatioîՙnentialåչৡᾒ\0ᾞ\0ᾡᾧ\0\0ῆῌ\0ΐ\0ῦῪ \0 ⁚llingdotseñṄy;䑄male;晀ƀilrᾭᾳ῁lig;耀ﬃɩᾹ\0\0᾽g;耀ﬀig;耀ﬄ;쀀𝔣lig;耀ﬁlig;쀀fjƀaltῙ῜ῡt;晭ig;耀ﬂns;斱of;䆒ǰ΅\0ῳf;쀀𝕗ĀakֿῷĀ;vῼ´拔;櫙artint;樍Āao‌⁕Ācs‑⁒α‚‰‸⁅⁈\0⁐β•‥‧‪‬\0‮耻½䂽;慓耻¼䂼;慕;慙;慛Ƴ‴\0‶;慔;慖ʴ‾⁁\0\0⁃耻¾䂾;慗;慜5;慘ƶ⁌\0⁎;慚;慝8;慞l;恄wn;挢cr;쀀𝒻ࢀEabcdefgijlnorstv₂₉₟₥₰₴⃰⃵⃺⃿℃ℒℸ̗ℾ⅒↞Ā;lٍ₇;檌ƀcmpₐₕ₝ute;䇵maĀ;dₜ᳚䎳;檆reve;䄟Āiy₪₮rc;䄝;䐳ot;䄡Ȁ;lqsؾق₽⃉ƀ;qsؾٌ⃄lanô٥Ȁ;cdl٥⃒⃥⃕c;檩otĀ;o⃜⃝檀Ā;l⃢⃣檂;檄Ā;e⃪⃭쀀⋛︀s;檔r;쀀𝔤Ā;gٳ؛mel;愷cy;䑓Ȁ;Eajٚℌℎℐ;檒;檥;檤ȀEaesℛℝ℩ℴ;扩pĀ;p℣ℤ檊rox»ℤĀ;q℮ℯ檈Ā;q℮ℛim;拧pf;쀀𝕘Āci⅃ⅆr;愊mƀ;el٫ⅎ⅐;檎;檐茀>;cdlqr׮ⅠⅪⅮⅳⅹĀciⅥⅧ;檧r;橺ot;拗Par;榕uest;橼ʀadelsↄⅪ←ٖ↛ǰ↉\0↎proø₞r;楸qĀlqؿ↖lesó₈ií٫Āen↣↭rtneqq;쀀≩︀Å↪ԀAabcefkosy⇄⇇⇱⇵⇺∘∝∯≨≽ròΠȀilmr⇐⇔⇗⇛rsðᒄf»․ilôکĀdr⇠⇤cy;䑊ƀ;cwࣴ⇫⇯ir;楈;憭ar;意irc;䄥ƀalr∁∎∓rtsĀ;u∉∊晥it»∊lip;怦con;抹r;쀀𝔥sĀew∣∩arow;椥arow;椦ʀamopr∺∾≃≞≣rr;懿tht;戻kĀlr≉≓eftarrow;憩ightarrow;憪f;쀀𝕙bar;怕ƀclt≯≴≸r;쀀𝒽asè⇴rok;䄧Ābp⊂⊇ull;恃hen»ᱛૡ⊣\0⊪\0⊸⋅⋎\0⋕⋳\0\0⋸⌢⍧⍢⍿\0⎆⎪⎴cute耻í䃭ƀ;iyݱ⊰⊵rc耻î䃮;䐸Ācx⊼⊿y;䐵cl耻¡䂡ĀfrΟ⋉;쀀𝔦rave耻ì䃬Ȁ;inoܾ⋝⋩⋮Āin⋢⋦nt;樌t;戭fin;槜ta;愩lig;䄳ƀaop⋾⌚⌝ƀcgt⌅⌈⌗r;䄫ƀelpܟ⌏⌓inåގarôܠh;䄱f;抷ed;䆵ʀ;cfotӴ⌬⌱⌽⍁are;愅inĀ;t⌸⌹戞ie;槝doô⌙ʀ;celpݗ⍌⍐⍛⍡al;抺Āgr⍕⍙eróᕣã⍍arhk;樗rod;樼Ȁcgpt⍯⍲⍶⍻y;䑑on;䄯f;쀀𝕚a;䎹uest耻¿䂿Āci⎊⎏r;쀀𝒾nʀ;EdsvӴ⎛⎝⎡ӳ;拹ot;拵Ā;v⎦⎧拴;拳Ā;iݷ⎮lde;䄩ǫ⎸\0⎼cy;䑖l耻ï䃯̀cfmosu⏌⏗⏜⏡⏧⏵Āiy⏑⏕rc;䄵;䐹r;쀀𝔧ath;䈷pf;쀀𝕛ǣ⏬\0⏱r;쀀𝒿rcy;䑘kcy;䑔Ѐacfghjos␋␖␢␧␭␱␵␻ppaĀ;v␓␔䎺;䏰Āey␛␠dil;䄷;䐺r;쀀𝔨reen;䄸cy;䑅cy;䑜pf;쀀𝕜cr;쀀𝓀஀ABEHabcdefghjlmnoprstuv⑰⒁⒆⒍⒑┎┽╚▀♎♞♥♹♽⚚⚲⛘❝❨➋⟀⠁⠒ƀart⑷⑺⑼rò৆òΕail;椛arr;椎Ā;gঔ⒋;檋ar;楢ॣ⒥\0⒪\0⒱\0\0\0\0\0⒵Ⓔ\0ⓆⓈⓍ\0⓹ute;䄺mptyv;榴raîࡌbda;䎻gƀ;dlࢎⓁⓃ;榑åࢎ;檅uo耻«䂫rЀ;bfhlpst࢙ⓞⓦⓩ⓫⓮⓱⓵Ā;f࢝ⓣs;椟s;椝ë≒p;憫l;椹im;楳l;憢ƀ;ae⓿─┄檫il;椙Ā;s┉┊檭;쀀⪭︀ƀabr┕┙┝rr;椌rk;杲Āak┢┬cĀek┨┪;䁻;䁛Āes┱┳;榋lĀdu┹┻;榏;榍Ȁaeuy╆╋╖╘ron;䄾Ādi═╔il;䄼ìࢰâ┩;䐻Ȁcqrs╣╦╭╽a;椶uoĀ;rนᝆĀdu╲╷har;楧shar;楋h;憲ʀ;fgqs▋▌উ◳◿扤tʀahlrt▘▤▷◂◨rrowĀ;t࢙□aé⓶arpoonĀdu▯▴own»њp»०eftarrows;懇ightƀahs◍◖◞rrowĀ;sࣴࢧarpoonó྘quigarro÷⇰hreetimes;拋ƀ;qs▋ও◺lanôবʀ;cdgsব☊☍☝☨c;檨otĀ;o☔☕橿Ā;r☚☛檁;檃Ā;e☢☥쀀⋚︀s;檓ʀadegs☳☹☽♉♋pproøⓆot;拖qĀgq♃♅ôউgtò⒌ôছiíলƀilr♕࣡♚sht;楼;쀀𝔩Ā;Eজ♣;檑š♩♶rĀdu▲♮Ā;l॥♳;楪lk;斄cy;䑙ʀ;achtੈ⚈⚋⚑⚖rò◁orneòᴈard;楫ri;旺Āio⚟⚤dot;䅀ustĀ;a⚬⚭掰che»⚭ȀEaes⚻⚽⛉⛔;扨pĀ;p⛃⛄檉rox»⛄Ā;q⛎⛏檇Ā;q⛎⚻im;拦Ѐabnoptwz⛩⛴⛷✚✯❁❇❐Ānr⛮⛱g;柬r;懽rëࣁgƀlmr⛿✍✔eftĀar০✇ightá৲apsto;柼ightá৽parrowĀlr✥✩efô⓭ight;憬ƀafl✶✹✽r;榅;쀀𝕝us;樭imes;樴š❋❏st;戗áፎƀ;ef❗❘᠀旊nge»❘arĀ;l❤❥䀨t;榓ʀachmt❳❶❼➅➇ròࢨorneòᶌarĀ;d྘➃;業;怎ri;抿̀achiqt➘➝ੀ➢➮➻quo;怹r;쀀𝓁mƀ;egল➪➬;檍;檏Ābu┪➳oĀ;rฟ➹;怚rok;䅂萀<;cdhilqrࠫ⟒☹⟜⟠⟥⟪⟰Āci⟗⟙;檦r;橹reå◲mes;拉arr;楶uest;橻ĀPi⟵⟹ar;榖ƀ;ef⠀भ᠛旃rĀdu⠇⠍shar;楊har;楦Āen⠗⠡rtneqq;쀀≨︀Å⠞܀Dacdefhilnopsu⡀⡅⢂⢎⢓⢠⢥⢨⣚⣢⣤ઃ⣳⤂Dot;戺Ȁclpr⡎⡒⡣⡽r耻¯䂯Āet⡗⡙;時Ā;e⡞⡟朠se»⡟Ā;sျ⡨toȀ;dluျ⡳⡷⡻owîҌefôएðᏑker;斮Āoy⢇⢌mma;権;䐼ash;怔asuredangle»ᘦr;쀀𝔪o;愧ƀcdn⢯⢴⣉ro耻µ䂵Ȁ;acdᑤ⢽⣀⣄sôᚧir;櫰ot肻·Ƶusƀ;bd⣒ᤃ⣓戒Ā;uᴼ⣘;横ţ⣞⣡p;櫛ò−ðઁĀdp⣩⣮els;抧f;쀀𝕞Āct⣸⣽r;쀀𝓂pos»ᖝƀ;lm⤉⤊⤍䎼timap;抸ఀGLRVabcdefghijlmoprstuvw⥂⥓⥾⦉⦘⧚⧩⨕⨚⩘⩝⪃⪕⪤⪨⬄⬇⭄⭿⮮ⰴⱧⱼ⳩Āgt⥇⥋;쀀⋙̸Ā;v⥐௏쀀≫⃒ƀelt⥚⥲⥶ftĀar⥡⥧rrow;懍ightarrow;懎;쀀⋘̸Ā;v⥻ే쀀≪⃒ightarrow;懏ĀDd⦎⦓ash;抯ash;抮ʀbcnpt⦣⦧⦬⦱⧌la»˞ute;䅄g;쀀∠⃒ʀ;Eiop඄⦼⧀⧅⧈;쀀⩰̸d;쀀≋̸s;䅉roø඄urĀ;a⧓⧔普lĀ;s⧓ସǳ⧟\0⧣p肻 ଷmpĀ;e௹ఀʀaeouy⧴⧾⨃⨐⨓ǰ⧹\0⧻;橃on;䅈dil;䅆ngĀ;dൾ⨊ot;쀀⩭̸p;橂;䐽ash;怓΀;Aadqsxஒ⨩⨭⨻⩁⩅⩐rr;懗rĀhr⨳⨶k;椤Ā;oᏲᏰot;쀀≐̸uiöୣĀei⩊⩎ar;椨í஘istĀ;s஠டr;쀀𝔫ȀEest௅⩦⩹⩼ƀ;qs஼⩭௡ƀ;qs஼௅⩴lanô௢ií௪Ā;rஶ⪁»ஷƀAap⪊⪍⪑rò⥱rr;憮ar;櫲ƀ;svྍ⪜ྌĀ;d⪡⪢拼;拺cy;䑚΀AEadest⪷⪺⪾⫂⫅⫶⫹rò⥦;쀀≦̸rr;憚r;急Ȁ;fqs఻⫎⫣⫯tĀar⫔⫙rro÷⫁ightarro÷⪐ƀ;qs఻⪺⫪lanôౕĀ;sౕ⫴»శiíౝĀ;rవ⫾iĀ;eచథiäඐĀpt⬌⬑f;쀀𝕟膀¬;in⬙⬚⬶䂬nȀ;Edvஉ⬤⬨⬮;쀀⋹̸ot;쀀⋵̸ǡஉ⬳⬵;拷;拶iĀ;vಸ⬼ǡಸ⭁⭃;拾;拽ƀaor⭋⭣⭩rȀ;ast୻⭕⭚⭟lleì୻l;쀀⫽⃥;쀀∂̸lint;樔ƀ;ceಒ⭰⭳uåಥĀ;cಘ⭸Ā;eಒ⭽ñಘȀAait⮈⮋⮝⮧rò⦈rrƀ;cw⮔⮕⮙憛;쀀⤳̸;쀀↝̸ghtarrow»⮕riĀ;eೋೖ΀chimpqu⮽⯍⯙⬄୸⯤⯯Ȁ;cerല⯆ഷ⯉uå൅;쀀𝓃ortɭ⬅\0\0⯖ará⭖mĀ;e൮⯟Ā;q൴൳suĀbp⯫⯭å೸åഋƀbcp⯶ⰑⰙȀ;Ees⯿ⰀഢⰄ抄;쀀⫅̸etĀ;eഛⰋqĀ;qണⰀcĀ;eലⰗñസȀ;EesⰢⰣൟⰧ抅;쀀⫆̸etĀ;e൘ⰮqĀ;qൠⰣȀgilrⰽⰿⱅⱇìௗlde耻ñ䃱çృiangleĀlrⱒⱜeftĀ;eచⱚñదightĀ;eೋⱥñ೗Ā;mⱬⱭ䎽ƀ;esⱴⱵⱹ䀣ro;愖p;怇ҀDHadgilrsⲏⲔⲙⲞⲣⲰⲶⳓⳣash;抭arr;椄p;쀀≍⃒ash;抬ĀetⲨⲬ;쀀≥⃒;쀀>⃒nfin;槞ƀAetⲽⳁⳅrr;椂;쀀≤⃒Ā;rⳊⳍ쀀<⃒ie;쀀⊴⃒ĀAtⳘⳜrr;椃rie;쀀⊵⃒im;쀀∼⃒ƀAan⳰⳴ⴂrr;懖rĀhr⳺⳽k;椣Ā;oᏧᏥear;椧ቓ᪕\0\0\0\0\0\0\0\0\0\0\0\0\0ⴭ\0ⴸⵈⵠⵥ⵲ⶄᬇ\0\0ⶍⶫ\0ⷈⷎ\0ⷜ⸙⸫⸾⹃Ācsⴱ᪗ute耻ó䃳ĀiyⴼⵅrĀ;c᪞ⵂ耻ô䃴;䐾ʀabios᪠ⵒⵗǈⵚlac;䅑v;樸old;榼lig;䅓Ācr⵩⵭ir;榿;쀀𝔬ͯ⵹\0\0⵼\0ⶂn;䋛ave耻ò䃲;槁Ābmⶈ෴ar;榵Ȁacitⶕ⶘ⶥⶨrò᪀Āir⶝ⶠr;榾oss;榻nå๒;槀ƀaeiⶱⶵⶹcr;䅍ga;䏉ƀcdnⷀⷅǍron;䎿;榶pf;쀀𝕠ƀaelⷔ⷗ǒr;榷rp;榹΀;adiosvⷪⷫⷮ⸈⸍⸐⸖戨rò᪆Ȁ;efmⷷⷸ⸂⸅橝rĀ;oⷾⷿ愴f»ⷿ耻ª䂪耻º䂺gof;抶r;橖lope;橗;橛ƀclo⸟⸡⸧ò⸁ash耻ø䃸l;折iŬⸯ⸴de耻õ䃵esĀ;aǛ⸺s;樶ml耻ö䃶bar;挽ૡ⹞\0⹽\0⺀⺝\0⺢⺹\0\0⻋ຜ\0⼓\0\0⼫⾼\0⿈rȀ;astЃ⹧⹲຅脀¶;l⹭⹮䂶leìЃɩ⹸\0\0⹻m;櫳;櫽y;䐿rʀcimpt⺋⺏⺓ᡥ⺗nt;䀥od;䀮il;怰enk;怱r;쀀𝔭ƀimo⺨⺰⺴Ā;v⺭⺮䏆;䏕maô੶ne;明ƀ;tv⺿⻀⻈䏀chfork»´;䏖Āau⻏⻟nĀck⻕⻝kĀ;h⇴⻛;愎ö⇴sҀ;abcdemst⻳⻴ᤈ⻹⻽⼄⼆⼊⼎䀫cir;樣ir;樢Āouᵀ⼂;樥;橲n肻±ຝim;樦wo;樧ƀipu⼙⼠⼥ntint;樕f;쀀𝕡nd耻£䂣Ԁ;Eaceinosu່⼿⽁⽄⽇⾁⾉⾒⽾⾶;檳p;檷uå໙Ā;c໎⽌̀;acens່⽙⽟⽦⽨⽾pproø⽃urlyeñ໙ñ໎ƀaes⽯⽶⽺pprox;檹qq;檵im;拨iíໟmeĀ;s⾈ຮ怲ƀEas⽸⾐⽺ð⽵ƀdfp໬⾙⾯ƀals⾠⾥⾪lar;挮ine;挒urf;挓Ā;t໻⾴ï໻rel;抰Āci⿀⿅r;쀀𝓅;䏈ncsp;怈̀fiopsu⿚⋢⿟⿥⿫⿱r;쀀𝔮pf;쀀𝕢rime;恗cr;쀀𝓆ƀaeo⿸〉〓tĀei⿾々rnionóڰnt;樖stĀ;e【】䀿ñἙô༔઀ABHabcdefhilmnoprstux぀けさすムㄎㄫㅇㅢㅲㆎ㈆㈕㈤㈩㉘㉮㉲㊐㊰㊷ƀartぇおがròႳòϝail;検aròᱥar;楤΀cdenqrtとふへみわゔヌĀeuねぱ;쀀∽̱te;䅕iãᅮmptyv;榳gȀ;del࿑らるろ;榒;榥å࿑uo耻»䂻rր;abcfhlpstw࿜ガクシスゼゾダッデナp;極Ā;f࿠ゴs;椠;椳s;椞ë≝ð✮l;楅im;楴l;憣;憝Āaiパフil;椚oĀ;nホボ戶aló༞ƀabrョリヮrò៥rk;杳ĀakンヽcĀekヹ・;䁽;䁝Āes㄂㄄;榌lĀduㄊㄌ;榎;榐Ȁaeuyㄗㄜㄧㄩron;䅙Ādiㄡㄥil;䅗ì࿲âヺ;䑀Ȁclqsㄴㄷㄽㅄa;椷dhar;楩uoĀ;rȎȍh;憳ƀacgㅎㅟངlȀ;ipsླྀㅘㅛႜnåႻarôྩt;断ƀilrㅩဣㅮsht;楽;쀀𝔯ĀaoㅷㆆrĀduㅽㅿ»ѻĀ;l႑ㆄ;楬Ā;vㆋㆌ䏁;䏱ƀgns㆕ㇹㇼht̀ahlrstㆤㆰ㇂㇘㇤㇮rrowĀ;t࿜ㆭaéトarpoonĀduㆻㆿowîㅾp»႒eftĀah㇊㇐rrowó࿪arpoonóՑightarrows;應quigarro÷ニhreetimes;拌g;䋚ingdotseñἲƀahm㈍㈐㈓rò࿪aòՑ;怏oustĀ;a㈞㈟掱che»㈟mid;櫮Ȁabpt㈲㈽㉀㉒Ānr㈷㈺g;柭r;懾rëဃƀafl㉇㉊㉎r;榆;쀀𝕣us;樮imes;樵Āap㉝㉧rĀ;g㉣㉤䀩t;榔olint;樒arò㇣Ȁachq㉻㊀Ⴜ㊅quo;怺r;쀀𝓇Ābu・㊊oĀ;rȔȓƀhir㊗㊛㊠reåㇸmes;拊iȀ;efl㊪ၙᠡ㊫方tri;槎luhar;楨;愞ൡ㋕㋛㋟㌬㌸㍱\0㍺㎤\0\0㏬㏰\0㐨㑈㑚㒭㒱㓊㓱\0㘖\0\0㘳cute;䅛quï➺Ԁ;Eaceinpsyᇭ㋳㋵㋿㌂㌋㌏㌟㌦㌩;檴ǰ㋺\0㋼;檸on;䅡uåᇾĀ;dᇳ㌇il;䅟rc;䅝ƀEas㌖㌘㌛;檶p;檺im;择olint;樓iíሄ;䑁otƀ;be㌴ᵇ㌵担;橦΀Aacmstx㍆㍊㍗㍛㍞㍣㍭rr;懘rĀhr㍐㍒ë∨Ā;oਸ਼਴t耻§䂧i;䀻war;椩mĀin㍩ðnuóñt;朶rĀ;o㍶⁕쀀𝔰Ȁacoy㎂㎆㎑㎠rp;景Āhy㎋㎏cy;䑉;䑈rtɭ㎙\0\0㎜iäᑤaraì⹯耻­䂭Āgm㎨㎴maƀ;fv㎱㎲㎲䏃;䏂Ѐ;deglnprካ㏅㏉㏎㏖㏞㏡㏦ot;橪Ā;q኱ኰĀ;E㏓㏔檞;檠Ā;E㏛㏜檝;檟e;扆lus;樤arr;楲aròᄽȀaeit㏸㐈㐏㐗Āls㏽㐄lsetmé㍪hp;樳parsl;槤Ādlᑣ㐔e;挣Ā;e㐜㐝檪Ā;s㐢㐣檬;쀀⪬︀ƀflp㐮㐳㑂tcy;䑌Ā;b㐸㐹䀯Ā;a㐾㐿槄r;挿f;쀀𝕤aĀdr㑍ЂesĀ;u㑔㑕晠it»㑕ƀcsu㑠㑹㒟Āau㑥㑯pĀ;sᆈ㑫;쀀⊓︀pĀ;sᆴ㑵;쀀⊔︀uĀbp㑿㒏ƀ;esᆗᆜ㒆etĀ;eᆗ㒍ñᆝƀ;esᆨᆭ㒖etĀ;eᆨ㒝ñᆮƀ;afᅻ㒦ְrť㒫ֱ»ᅼaròᅈȀcemt㒹㒾㓂㓅r;쀀𝓈tmîñiì㐕aræᆾĀar㓎㓕rĀ;f㓔ឿ昆Āan㓚㓭ightĀep㓣㓪psiloîỠhé⺯s»⡒ʀbcmnp㓻㕞ሉ㖋㖎Ҁ;Edemnprs㔎㔏㔑㔕㔞㔣㔬㔱㔶抂;櫅ot;檽Ā;dᇚ㔚ot;櫃ult;櫁ĀEe㔨㔪;櫋;把lus;檿arr;楹ƀeiu㔽㕒㕕tƀ;en㔎㕅㕋qĀ;qᇚ㔏eqĀ;q㔫㔨m;櫇Ābp㕚㕜;櫕;櫓c̀;acensᇭ㕬㕲㕹㕻㌦pproø㋺urlyeñᇾñᇳƀaes㖂㖈㌛pproø㌚qñ㌗g;晪ڀ123;Edehlmnps㖩㖬㖯ሜ㖲㖴㗀㗉㗕㗚㗟㗨㗭耻¹䂹耻²䂲耻³䂳;櫆Āos㖹㖼t;檾ub;櫘Ā;dሢ㗅ot;櫄sĀou㗏㗒l;柉b;櫗arr;楻ult;櫂ĀEe㗤㗦;櫌;抋lus;櫀ƀeiu㗴㘉㘌tƀ;enሜ㗼㘂qĀ;qሢ㖲eqĀ;q㗧㗤m;櫈Ābp㘑㘓;櫔;櫖ƀAan㘜㘠㘭rr;懙rĀhr㘦㘨ë∮Ā;oਫ਩war;椪lig耻ß䃟௡㙑㙝㙠ዎ㙳㙹\0㙾㛂\0\0\0\0\0㛛㜃\0㜉㝬\0\0\0㞇ɲ㙖\0\0㙛get;挖;䏄rë๟ƀaey㙦㙫㙰ron;䅥dil;䅣;䑂lrec;挕r;쀀𝔱Ȁeiko㚆㚝㚵㚼ǲ㚋\0㚑eĀ4fኄኁaƀ;sv㚘㚙㚛䎸ym;䏑Ācn㚢㚲kĀas㚨㚮pproø዁im»ኬsðኞĀas㚺㚮ð዁rn耻þ䃾Ǭ̟㛆⋧es膀×;bd㛏㛐㛘䃗Ā;aᤏ㛕r;樱;樰ƀeps㛡㛣㜀á⩍Ȁ;bcf҆㛬㛰㛴ot;挶ir;櫱Ā;o㛹㛼쀀𝕥rk;櫚á㍢rime;怴ƀaip㜏㜒㝤dåቈ΀adempst㜡㝍㝀㝑㝗㝜㝟ngleʀ;dlqr㜰㜱㜶㝀㝂斵own»ᶻeftĀ;e⠀㜾ñम;扜ightĀ;e㊪㝋ñၚot;旬inus;樺lus;樹b;槍ime;樻ezium;揢ƀcht㝲㝽㞁Āry㝷㝻;쀀𝓉;䑆cy;䑛rok;䅧Āio㞋㞎xô᝷headĀlr㞗㞠eftarro÷ࡏightarrow»ཝऀAHabcdfghlmoprstuw㟐㟓㟗㟤㟰㟼㠎㠜㠣㠴㡑㡝㡫㢩㣌㣒㣪㣶ròϭar;楣Ācr㟜㟢ute耻ú䃺òᅐrǣ㟪\0㟭y;䑞ve;䅭Āiy㟵㟺rc耻û䃻;䑃ƀabh㠃㠆㠋ròᎭlac;䅱aòᏃĀir㠓㠘sht;楾;쀀𝔲rave耻ù䃹š㠧㠱rĀlr㠬㠮»ॗ»ႃlk;斀Āct㠹㡍ɯ㠿\0\0㡊rnĀ;e㡅㡆挜r»㡆op;挏ri;旸Āal㡖㡚cr;䅫肻¨͉Āgp㡢㡦on;䅳f;쀀𝕦̀adhlsuᅋ㡸㡽፲㢑㢠ownáᎳarpoonĀlr㢈㢌efô㠭ighô㠯iƀ;hl㢙㢚㢜䏅»ᏺon»㢚parrows;懈ƀcit㢰㣄㣈ɯ㢶\0\0㣁rnĀ;e㢼㢽挝r»㢽op;挎ng;䅯ri;旹cr;쀀𝓊ƀdir㣙㣝㣢ot;拰lde;䅩iĀ;f㜰㣨»᠓Āam㣯㣲rò㢨l耻ü䃼angle;榧ހABDacdeflnoprsz㤜㤟㤩㤭㦵㦸㦽㧟㧤㧨㧳㧹㧽㨁㨠ròϷarĀ;v㤦㤧櫨;櫩asèϡĀnr㤲㤷grt;榜΀eknprst㓣㥆㥋㥒㥝㥤㦖appá␕othinçẖƀhir㓫⻈㥙opô⾵Ā;hᎷ㥢ïㆍĀiu㥩㥭gmá㎳Ābp㥲㦄setneqĀ;q㥽㦀쀀⊊︀;쀀⫋︀setneqĀ;q㦏㦒쀀⊋︀;쀀⫌︀Āhr㦛㦟etá㚜iangleĀlr㦪㦯eft»थight»ၑy;䐲ash»ံƀelr㧄㧒㧗ƀ;beⷪ㧋㧏ar;抻q;扚lip;拮Ābt㧜ᑨaòᑩr;쀀𝔳tré㦮suĀbp㧯㧱»ജ»൙pf;쀀𝕧roð໻tré㦴Ācu㨆㨋r;쀀𝓋Ābp㨐㨘nĀEe㦀㨖»㥾nĀEe㦒㨞»㦐igzag;榚΀cefoprs㨶㨻㩖㩛㩔㩡㩪irc;䅵Ādi㩀㩑Ābg㩅㩉ar;機eĀ;qᗺ㩏;扙erp;愘r;쀀𝔴pf;쀀𝕨Ā;eᑹ㩦atèᑹcr;쀀𝓌ૣណ㪇\0㪋\0㪐㪛\0\0㪝㪨㪫㪯\0\0㫃㫎\0㫘ៜ៟tré៑r;쀀𝔵ĀAa㪔㪗ròσrò৶;䎾ĀAa㪡㪤ròθrò৫að✓is;拻ƀdptឤ㪵㪾Āfl㪺ឩ;쀀𝕩imåឲĀAa㫇㫊ròώròਁĀcq㫒ីr;쀀𝓍Āpt៖㫜ré។Ѐacefiosu㫰㫽㬈㬌㬑㬕㬛㬡cĀuy㫶㫻te耻ý䃽;䑏Āiy㬂㬆rc;䅷;䑋n耻¥䂥r;쀀𝔶cy;䑗pf;쀀𝕪cr;쀀𝓎Ācm㬦㬩y;䑎l耻ÿ䃿Ԁacdefhiosw㭂㭈㭔㭘㭤㭩㭭㭴㭺㮀cute;䅺Āay㭍㭒ron;䅾;䐷ot;䅼Āet㭝㭡træᕟa;䎶r;쀀𝔷cy;䐶grarr;懝pf;쀀𝕫cr;쀀𝓏Ājn㮅㮇;怍j;怌'.split("").map((function(e){return e.charCodeAt(0)})))},2517:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=new Uint16Array("Ȁaglq\tɭ\0\0p;䀦os;䀧t;䀾t;䀼uot;䀢".split("").map((function(e){return e.charCodeAt(0)})))},5504:(e,t)=>{"use strict";function n(e){for(var t=1;t<e.length;t++)e[t][0]+=e[t-1][0]+1;return e}Object.defineProperty(t,"__esModule",{value:!0}),t.default=new Map(n([[9,"&Tab;"],[0,"&NewLine;"],[22,"&excl;"],[0,"&quot;"],[0,"&num;"],[0,"&dollar;"],[0,"&percnt;"],[0,"&amp;"],[0,"&apos;"],[0,"&lpar;"],[0,"&rpar;"],[0,"&ast;"],[0,"&plus;"],[0,"&comma;"],[1,"&period;"],[0,"&sol;"],[10,"&colon;"],[0,"&semi;"],[0,{v:"&lt;",n:8402,o:"&nvlt;"}],[0,{v:"&equals;",n:8421,o:"&bne;"}],[0,{v:"&gt;",n:8402,o:"&nvgt;"}],[0,"&quest;"],[0,"&commat;"],[26,"&lbrack;"],[0,"&bsol;"],[0,"&rbrack;"],[0,"&Hat;"],[0,"&lowbar;"],[0,"&DiacriticalGrave;"],[5,{n:106,o:"&fjlig;"}],[20,"&lbrace;"],[0,"&verbar;"],[0,"&rbrace;"],[34,"&nbsp;"],[0,"&iexcl;"],[0,"&cent;"],[0,"&pound;"],[0,"&curren;"],[0,"&yen;"],[0,"&brvbar;"],[0,"&sect;"],[0,"&die;"],[0,"&copy;"],[0,"&ordf;"],[0,"&laquo;"],[0,"&not;"],[0,"&shy;"],[0,"&circledR;"],[0,"&macr;"],[0,"&deg;"],[0,"&PlusMinus;"],[0,"&sup2;"],[0,"&sup3;"],[0,"&acute;"],[0,"&micro;"],[0,"&para;"],[0,"&centerdot;"],[0,"&cedil;"],[0,"&sup1;"],[0,"&ordm;"],[0,"&raquo;"],[0,"&frac14;"],[0,"&frac12;"],[0,"&frac34;"],[0,"&iquest;"],[0,"&Agrave;"],[0,"&Aacute;"],[0,"&Acirc;"],[0,"&Atilde;"],[0,"&Auml;"],[0,"&angst;"],[0,"&AElig;"],[0,"&Ccedil;"],[0,"&Egrave;"],[0,"&Eacute;"],[0,"&Ecirc;"],[0,"&Euml;"],[0,"&Igrave;"],[0,"&Iacute;"],[0,"&Icirc;"],[0,"&Iuml;"],[0,"&ETH;"],[0,"&Ntilde;"],[0,"&Ograve;"],[0,"&Oacute;"],[0,"&Ocirc;"],[0,"&Otilde;"],[0,"&Ouml;"],[0,"&times;"],[0,"&Oslash;"],[0,"&Ugrave;"],[0,"&Uacute;"],[0,"&Ucirc;"],[0,"&Uuml;"],[0,"&Yacute;"],[0,"&THORN;"],[0,"&szlig;"],[0,"&agrave;"],[0,"&aacute;"],[0,"&acirc;"],[0,"&atilde;"],[0,"&auml;"],[0,"&aring;"],[0,"&aelig;"],[0,"&ccedil;"],[0,"&egrave;"],[0,"&eacute;"],[0,"&ecirc;"],[0,"&euml;"],[0,"&igrave;"],[0,"&iacute;"],[0,"&icirc;"],[0,"&iuml;"],[0,"&eth;"],[0,"&ntilde;"],[0,"&ograve;"],[0,"&oacute;"],[0,"&ocirc;"],[0,"&otilde;"],[0,"&ouml;"],[0,"&div;"],[0,"&oslash;"],[0,"&ugrave;"],[0,"&uacute;"],[0,"&ucirc;"],[0,"&uuml;"],[0,"&yacute;"],[0,"&thorn;"],[0,"&yuml;"],[0,"&Amacr;"],[0,"&amacr;"],[0,"&Abreve;"],[0,"&abreve;"],[0,"&Aogon;"],[0,"&aogon;"],[0,"&Cacute;"],[0,"&cacute;"],[0,"&Ccirc;"],[0,"&ccirc;"],[0,"&Cdot;"],[0,"&cdot;"],[0,"&Ccaron;"],[0,"&ccaron;"],[0,"&Dcaron;"],[0,"&dcaron;"],[0,"&Dstrok;"],[0,"&dstrok;"],[0,"&Emacr;"],[0,"&emacr;"],[2,"&Edot;"],[0,"&edot;"],[0,"&Eogon;"],[0,"&eogon;"],[0,"&Ecaron;"],[0,"&ecaron;"],[0,"&Gcirc;"],[0,"&gcirc;"],[0,"&Gbreve;"],[0,"&gbreve;"],[0,"&Gdot;"],[0,"&gdot;"],[0,"&Gcedil;"],[1,"&Hcirc;"],[0,"&hcirc;"],[0,"&Hstrok;"],[0,"&hstrok;"],[0,"&Itilde;"],[0,"&itilde;"],[0,"&Imacr;"],[0,"&imacr;"],[2,"&Iogon;"],[0,"&iogon;"],[0,"&Idot;"],[0,"&imath;"],[0,"&IJlig;"],[0,"&ijlig;"],[0,"&Jcirc;"],[0,"&jcirc;"],[0,"&Kcedil;"],[0,"&kcedil;"],[0,"&kgreen;"],[0,"&Lacute;"],[0,"&lacute;"],[0,"&Lcedil;"],[0,"&lcedil;"],[0,"&Lcaron;"],[0,"&lcaron;"],[0,"&Lmidot;"],[0,"&lmidot;"],[0,"&Lstrok;"],[0,"&lstrok;"],[0,"&Nacute;"],[0,"&nacute;"],[0,"&Ncedil;"],[0,"&ncedil;"],[0,"&Ncaron;"],[0,"&ncaron;"],[0,"&napos;"],[0,"&ENG;"],[0,"&eng;"],[0,"&Omacr;"],[0,"&omacr;"],[2,"&Odblac;"],[0,"&odblac;"],[0,"&OElig;"],[0,"&oelig;"],[0,"&Racute;"],[0,"&racute;"],[0,"&Rcedil;"],[0,"&rcedil;"],[0,"&Rcaron;"],[0,"&rcaron;"],[0,"&Sacute;"],[0,"&sacute;"],[0,"&Scirc;"],[0,"&scirc;"],[0,"&Scedil;"],[0,"&scedil;"],[0,"&Scaron;"],[0,"&scaron;"],[0,"&Tcedil;"],[0,"&tcedil;"],[0,"&Tcaron;"],[0,"&tcaron;"],[0,"&Tstrok;"],[0,"&tstrok;"],[0,"&Utilde;"],[0,"&utilde;"],[0,"&Umacr;"],[0,"&umacr;"],[0,"&Ubreve;"],[0,"&ubreve;"],[0,"&Uring;"],[0,"&uring;"],[0,"&Udblac;"],[0,"&udblac;"],[0,"&Uogon;"],[0,"&uogon;"],[0,"&Wcirc;"],[0,"&wcirc;"],[0,"&Ycirc;"],[0,"&ycirc;"],[0,"&Yuml;"],[0,"&Zacute;"],[0,"&zacute;"],[0,"&Zdot;"],[0,"&zdot;"],[0,"&Zcaron;"],[0,"&zcaron;"],[19,"&fnof;"],[34,"&imped;"],[63,"&gacute;"],[65,"&jmath;"],[142,"&circ;"],[0,"&caron;"],[16,"&breve;"],[0,"&DiacriticalDot;"],[0,"&ring;"],[0,"&ogon;"],[0,"&DiacriticalTilde;"],[0,"&dblac;"],[51,"&DownBreve;"],[127,"&Alpha;"],[0,"&Beta;"],[0,"&Gamma;"],[0,"&Delta;"],[0,"&Epsilon;"],[0,"&Zeta;"],[0,"&Eta;"],[0,"&Theta;"],[0,"&Iota;"],[0,"&Kappa;"],[0,"&Lambda;"],[0,"&Mu;"],[0,"&Nu;"],[0,"&Xi;"],[0,"&Omicron;"],[0,"&Pi;"],[0,"&Rho;"],[1,"&Sigma;"],[0,"&Tau;"],[0,"&Upsilon;"],[0,"&Phi;"],[0,"&Chi;"],[0,"&Psi;"],[0,"&ohm;"],[7,"&alpha;"],[0,"&beta;"],[0,"&gamma;"],[0,"&delta;"],[0,"&epsi;"],[0,"&zeta;"],[0,"&eta;"],[0,"&theta;"],[0,"&iota;"],[0,"&kappa;"],[0,"&lambda;"],[0,"&mu;"],[0,"&nu;"],[0,"&xi;"],[0,"&omicron;"],[0,"&pi;"],[0,"&rho;"],[0,"&sigmaf;"],[0,"&sigma;"],[0,"&tau;"],[0,"&upsi;"],[0,"&phi;"],[0,"&chi;"],[0,"&psi;"],[0,"&omega;"],[7,"&thetasym;"],[0,"&Upsi;"],[2,"&phiv;"],[0,"&piv;"],[5,"&Gammad;"],[0,"&digamma;"],[18,"&kappav;"],[0,"&rhov;"],[3,"&epsiv;"],[0,"&backepsilon;"],[10,"&IOcy;"],[0,"&DJcy;"],[0,"&GJcy;"],[0,"&Jukcy;"],[0,"&DScy;"],[0,"&Iukcy;"],[0,"&YIcy;"],[0,"&Jsercy;"],[0,"&LJcy;"],[0,"&NJcy;"],[0,"&TSHcy;"],[0,"&KJcy;"],[1,"&Ubrcy;"],[0,"&DZcy;"],[0,"&Acy;"],[0,"&Bcy;"],[0,"&Vcy;"],[0,"&Gcy;"],[0,"&Dcy;"],[0,"&IEcy;"],[0,"&ZHcy;"],[0,"&Zcy;"],[0,"&Icy;"],[0,"&Jcy;"],[0,"&Kcy;"],[0,"&Lcy;"],[0,"&Mcy;"],[0,"&Ncy;"],[0,"&Ocy;"],[0,"&Pcy;"],[0,"&Rcy;"],[0,"&Scy;"],[0,"&Tcy;"],[0,"&Ucy;"],[0,"&Fcy;"],[0,"&KHcy;"],[0,"&TScy;"],[0,"&CHcy;"],[0,"&SHcy;"],[0,"&SHCHcy;"],[0,"&HARDcy;"],[0,"&Ycy;"],[0,"&SOFTcy;"],[0,"&Ecy;"],[0,"&YUcy;"],[0,"&YAcy;"],[0,"&acy;"],[0,"&bcy;"],[0,"&vcy;"],[0,"&gcy;"],[0,"&dcy;"],[0,"&iecy;"],[0,"&zhcy;"],[0,"&zcy;"],[0,"&icy;"],[0,"&jcy;"],[0,"&kcy;"],[0,"&lcy;"],[0,"&mcy;"],[0,"&ncy;"],[0,"&ocy;"],[0,"&pcy;"],[0,"&rcy;"],[0,"&scy;"],[0,"&tcy;"],[0,"&ucy;"],[0,"&fcy;"],[0,"&khcy;"],[0,"&tscy;"],[0,"&chcy;"],[0,"&shcy;"],[0,"&shchcy;"],[0,"&hardcy;"],[0,"&ycy;"],[0,"&softcy;"],[0,"&ecy;"],[0,"&yucy;"],[0,"&yacy;"],[1,"&iocy;"],[0,"&djcy;"],[0,"&gjcy;"],[0,"&jukcy;"],[0,"&dscy;"],[0,"&iukcy;"],[0,"&yicy;"],[0,"&jsercy;"],[0,"&ljcy;"],[0,"&njcy;"],[0,"&tshcy;"],[0,"&kjcy;"],[1,"&ubrcy;"],[0,"&dzcy;"],[7074,"&ensp;"],[0,"&emsp;"],[0,"&emsp13;"],[0,"&emsp14;"],[1,"&numsp;"],[0,"&puncsp;"],[0,"&ThinSpace;"],[0,"&hairsp;"],[0,"&NegativeMediumSpace;"],[0,"&zwnj;"],[0,"&zwj;"],[0,"&lrm;"],[0,"&rlm;"],[0,"&dash;"],[2,"&ndash;"],[0,"&mdash;"],[0,"&horbar;"],[0,"&Verbar;"],[1,"&lsquo;"],[0,"&CloseCurlyQuote;"],[0,"&lsquor;"],[1,"&ldquo;"],[0,"&CloseCurlyDoubleQuote;"],[0,"&bdquo;"],[1,"&dagger;"],[0,"&Dagger;"],[0,"&bull;"],[2,"&nldr;"],[0,"&hellip;"],[9,"&permil;"],[0,"&pertenk;"],[0,"&prime;"],[0,"&Prime;"],[0,"&tprime;"],[0,"&backprime;"],[3,"&lsaquo;"],[0,"&rsaquo;"],[3,"&oline;"],[2,"&caret;"],[1,"&hybull;"],[0,"&frasl;"],[10,"&bsemi;"],[7,"&qprime;"],[7,{v:"&MediumSpace;",n:8202,o:"&ThickSpace;"}],[0,"&NoBreak;"],[0,"&af;"],[0,"&InvisibleTimes;"],[0,"&ic;"],[72,"&euro;"],[46,"&tdot;"],[0,"&DotDot;"],[37,"&complexes;"],[2,"&incare;"],[4,"&gscr;"],[0,"&hamilt;"],[0,"&Hfr;"],[0,"&Hopf;"],[0,"&planckh;"],[0,"&hbar;"],[0,"&imagline;"],[0,"&Ifr;"],[0,"&lagran;"],[0,"&ell;"],[1,"&naturals;"],[0,"&numero;"],[0,"&copysr;"],[0,"&weierp;"],[0,"&Popf;"],[0,"&Qopf;"],[0,"&realine;"],[0,"&real;"],[0,"&reals;"],[0,"&rx;"],[3,"&trade;"],[1,"&integers;"],[2,"&mho;"],[0,"&zeetrf;"],[0,"&iiota;"],[2,"&bernou;"],[0,"&Cayleys;"],[1,"&escr;"],[0,"&Escr;"],[0,"&Fouriertrf;"],[1,"&Mellintrf;"],[0,"&order;"],[0,"&alefsym;"],[0,"&beth;"],[0,"&gimel;"],[0,"&daleth;"],[12,"&CapitalDifferentialD;"],[0,"&dd;"],[0,"&ee;"],[0,"&ii;"],[10,"&frac13;"],[0,"&frac23;"],[0,"&frac15;"],[0,"&frac25;"],[0,"&frac35;"],[0,"&frac45;"],[0,"&frac16;"],[0,"&frac56;"],[0,"&frac18;"],[0,"&frac38;"],[0,"&frac58;"],[0,"&frac78;"],[49,"&larr;"],[0,"&ShortUpArrow;"],[0,"&rarr;"],[0,"&darr;"],[0,"&harr;"],[0,"&updownarrow;"],[0,"&nwarr;"],[0,"&nearr;"],[0,"&LowerRightArrow;"],[0,"&LowerLeftArrow;"],[0,"&nlarr;"],[0,"&nrarr;"],[1,{v:"&rarrw;",n:824,o:"&nrarrw;"}],[0,"&Larr;"],[0,"&Uarr;"],[0,"&Rarr;"],[0,"&Darr;"],[0,"&larrtl;"],[0,"&rarrtl;"],[0,"&LeftTeeArrow;"],[0,"&mapstoup;"],[0,"&map;"],[0,"&DownTeeArrow;"],[1,"&hookleftarrow;"],[0,"&hookrightarrow;"],[0,"&larrlp;"],[0,"&looparrowright;"],[0,"&harrw;"],[0,"&nharr;"],[1,"&lsh;"],[0,"&rsh;"],[0,"&ldsh;"],[0,"&rdsh;"],[1,"&crarr;"],[0,"&cularr;"],[0,"&curarr;"],[2,"&circlearrowleft;"],[0,"&circlearrowright;"],[0,"&leftharpoonup;"],[0,"&DownLeftVector;"],[0,"&RightUpVector;"],[0,"&LeftUpVector;"],[0,"&rharu;"],[0,"&DownRightVector;"],[0,"&dharr;"],[0,"&dharl;"],[0,"&RightArrowLeftArrow;"],[0,"&udarr;"],[0,"&LeftArrowRightArrow;"],[0,"&leftleftarrows;"],[0,"&upuparrows;"],[0,"&rightrightarrows;"],[0,"&ddarr;"],[0,"&leftrightharpoons;"],[0,"&Equilibrium;"],[0,"&nlArr;"],[0,"&nhArr;"],[0,"&nrArr;"],[0,"&DoubleLeftArrow;"],[0,"&DoubleUpArrow;"],[0,"&DoubleRightArrow;"],[0,"&dArr;"],[0,"&DoubleLeftRightArrow;"],[0,"&DoubleUpDownArrow;"],[0,"&nwArr;"],[0,"&neArr;"],[0,"&seArr;"],[0,"&swArr;"],[0,"&lAarr;"],[0,"&rAarr;"],[1,"&zigrarr;"],[6,"&larrb;"],[0,"&rarrb;"],[15,"&DownArrowUpArrow;"],[7,"&loarr;"],[0,"&roarr;"],[0,"&hoarr;"],[0,"&forall;"],[0,"&comp;"],[0,{v:"&part;",n:824,o:"&npart;"}],[0,"&exist;"],[0,"&nexist;"],[0,"&empty;"],[1,"&Del;"],[0,"&Element;"],[0,"&NotElement;"],[1,"&ni;"],[0,"&notni;"],[2,"&prod;"],[0,"&coprod;"],[0,"&sum;"],[0,"&minus;"],[0,"&MinusPlus;"],[0,"&dotplus;"],[1,"&Backslash;"],[0,"&lowast;"],[0,"&compfn;"],[1,"&radic;"],[2,"&prop;"],[0,"&infin;"],[0,"&angrt;"],[0,{v:"&ang;",n:8402,o:"&nang;"}],[0,"&angmsd;"],[0,"&angsph;"],[0,"&mid;"],[0,"&nmid;"],[0,"&DoubleVerticalBar;"],[0,"&NotDoubleVerticalBar;"],[0,"&and;"],[0,"&or;"],[0,{v:"&cap;",n:65024,o:"&caps;"}],[0,{v:"&cup;",n:65024,o:"&cups;"}],[0,"&int;"],[0,"&Int;"],[0,"&iiint;"],[0,"&conint;"],[0,"&Conint;"],[0,"&Cconint;"],[0,"&cwint;"],[0,"&ClockwiseContourIntegral;"],[0,"&awconint;"],[0,"&there4;"],[0,"&becaus;"],[0,"&ratio;"],[0,"&Colon;"],[0,"&dotminus;"],[1,"&mDDot;"],[0,"&homtht;"],[0,{v:"&sim;",n:8402,o:"&nvsim;"}],[0,{v:"&backsim;",n:817,o:"&race;"}],[0,{v:"&ac;",n:819,o:"&acE;"}],[0,"&acd;"],[0,"&VerticalTilde;"],[0,"&NotTilde;"],[0,{v:"&eqsim;",n:824,o:"&nesim;"}],[0,"&sime;"],[0,"&NotTildeEqual;"],[0,"&cong;"],[0,"&simne;"],[0,"&ncong;"],[0,"&ap;"],[0,"&nap;"],[0,"&ape;"],[0,{v:"&apid;",n:824,o:"&napid;"}],[0,"&backcong;"],[0,{v:"&asympeq;",n:8402,o:"&nvap;"}],[0,{v:"&bump;",n:824,o:"&nbump;"}],[0,{v:"&bumpe;",n:824,o:"&nbumpe;"}],[0,{v:"&doteq;",n:824,o:"&nedot;"}],[0,"&doteqdot;"],[0,"&efDot;"],[0,"&erDot;"],[0,"&Assign;"],[0,"&ecolon;"],[0,"&ecir;"],[0,"&circeq;"],[1,"&wedgeq;"],[0,"&veeeq;"],[1,"&triangleq;"],[2,"&equest;"],[0,"&ne;"],[0,{v:"&Congruent;",n:8421,o:"&bnequiv;"}],[0,"&nequiv;"],[1,{v:"&le;",n:8402,o:"&nvle;"}],[0,{v:"&ge;",n:8402,o:"&nvge;"}],[0,{v:"&lE;",n:824,o:"&nlE;"}],[0,{v:"&gE;",n:824,o:"&ngE;"}],[0,{v:"&lnE;",n:65024,o:"&lvertneqq;"}],[0,{v:"&gnE;",n:65024,o:"&gvertneqq;"}],[0,{v:"&ll;",n:new Map(n([[824,"&nLtv;"],[7577,"&nLt;"]]))}],[0,{v:"&gg;",n:new Map(n([[824,"&nGtv;"],[7577,"&nGt;"]]))}],[0,"&between;"],[0,"&NotCupCap;"],[0,"&nless;"],[0,"&ngt;"],[0,"&nle;"],[0,"&nge;"],[0,"&lesssim;"],[0,"&GreaterTilde;"],[0,"&nlsim;"],[0,"&ngsim;"],[0,"&LessGreater;"],[0,"&gl;"],[0,"&NotLessGreater;"],[0,"&NotGreaterLess;"],[0,"&pr;"],[0,"&sc;"],[0,"&prcue;"],[0,"&sccue;"],[0,"&PrecedesTilde;"],[0,{v:"&scsim;",n:824,o:"&NotSucceedsTilde;"}],[0,"&NotPrecedes;"],[0,"&NotSucceeds;"],[0,{v:"&sub;",n:8402,o:"&NotSubset;"}],[0,{v:"&sup;",n:8402,o:"&NotSuperset;"}],[0,"&nsub;"],[0,"&nsup;"],[0,"&sube;"],[0,"&supe;"],[0,"&NotSubsetEqual;"],[0,"&NotSupersetEqual;"],[0,{v:"&subne;",n:65024,o:"&varsubsetneq;"}],[0,{v:"&supne;",n:65024,o:"&varsupsetneq;"}],[1,"&cupdot;"],[0,"&UnionPlus;"],[0,{v:"&sqsub;",n:824,o:"&NotSquareSubset;"}],[0,{v:"&sqsup;",n:824,o:"&NotSquareSuperset;"}],[0,"&sqsube;"],[0,"&sqsupe;"],[0,{v:"&sqcap;",n:65024,o:"&sqcaps;"}],[0,{v:"&sqcup;",n:65024,o:"&sqcups;"}],[0,"&CirclePlus;"],[0,"&CircleMinus;"],[0,"&CircleTimes;"],[0,"&osol;"],[0,"&CircleDot;"],[0,"&circledcirc;"],[0,"&circledast;"],[1,"&circleddash;"],[0,"&boxplus;"],[0,"&boxminus;"],[0,"&boxtimes;"],[0,"&dotsquare;"],[0,"&RightTee;"],[0,"&dashv;"],[0,"&DownTee;"],[0,"&bot;"],[1,"&models;"],[0,"&DoubleRightTee;"],[0,"&Vdash;"],[0,"&Vvdash;"],[0,"&VDash;"],[0,"&nvdash;"],[0,"&nvDash;"],[0,"&nVdash;"],[0,"&nVDash;"],[0,"&prurel;"],[1,"&LeftTriangle;"],[0,"&RightTriangle;"],[0,{v:"&LeftTriangleEqual;",n:8402,o:"&nvltrie;"}],[0,{v:"&RightTriangleEqual;",n:8402,o:"&nvrtrie;"}],[0,"&origof;"],[0,"&imof;"],[0,"&multimap;"],[0,"&hercon;"],[0,"&intcal;"],[0,"&veebar;"],[1,"&barvee;"],[0,"&angrtvb;"],[0,"&lrtri;"],[0,"&bigwedge;"],[0,"&bigvee;"],[0,"&bigcap;"],[0,"&bigcup;"],[0,"&diam;"],[0,"&sdot;"],[0,"&sstarf;"],[0,"&divideontimes;"],[0,"&bowtie;"],[0,"&ltimes;"],[0,"&rtimes;"],[0,"&leftthreetimes;"],[0,"&rightthreetimes;"],[0,"&backsimeq;"],[0,"&curlyvee;"],[0,"&curlywedge;"],[0,"&Sub;"],[0,"&Sup;"],[0,"&Cap;"],[0,"&Cup;"],[0,"&fork;"],[0,"&epar;"],[0,"&lessdot;"],[0,"&gtdot;"],[0,{v:"&Ll;",n:824,o:"&nLl;"}],[0,{v:"&Gg;",n:824,o:"&nGg;"}],[0,{v:"&leg;",n:65024,o:"&lesg;"}],[0,{v:"&gel;",n:65024,o:"&gesl;"}],[2,"&cuepr;"],[0,"&cuesc;"],[0,"&NotPrecedesSlantEqual;"],[0,"&NotSucceedsSlantEqual;"],[0,"&NotSquareSubsetEqual;"],[0,"&NotSquareSupersetEqual;"],[2,"&lnsim;"],[0,"&gnsim;"],[0,"&precnsim;"],[0,"&scnsim;"],[0,"&nltri;"],[0,"&NotRightTriangle;"],[0,"&nltrie;"],[0,"&NotRightTriangleEqual;"],[0,"&vellip;"],[0,"&ctdot;"],[0,"&utdot;"],[0,"&dtdot;"],[0,"&disin;"],[0,"&isinsv;"],[0,"&isins;"],[0,{v:"&isindot;",n:824,o:"&notindot;"}],[0,"&notinvc;"],[0,"&notinvb;"],[1,{v:"&isinE;",n:824,o:"&notinE;"}],[0,"&nisd;"],[0,"&xnis;"],[0,"&nis;"],[0,"&notnivc;"],[0,"&notnivb;"],[6,"&barwed;"],[0,"&Barwed;"],[1,"&lceil;"],[0,"&rceil;"],[0,"&LeftFloor;"],[0,"&rfloor;"],[0,"&drcrop;"],[0,"&dlcrop;"],[0,"&urcrop;"],[0,"&ulcrop;"],[0,"&bnot;"],[1,"&profline;"],[0,"&profsurf;"],[1,"&telrec;"],[0,"&target;"],[5,"&ulcorn;"],[0,"&urcorn;"],[0,"&dlcorn;"],[0,"&drcorn;"],[2,"&frown;"],[0,"&smile;"],[9,"&cylcty;"],[0,"&profalar;"],[7,"&topbot;"],[6,"&ovbar;"],[1,"&solbar;"],[60,"&angzarr;"],[51,"&lmoustache;"],[0,"&rmoustache;"],[2,"&OverBracket;"],[0,"&bbrk;"],[0,"&bbrktbrk;"],[37,"&OverParenthesis;"],[0,"&UnderParenthesis;"],[0,"&OverBrace;"],[0,"&UnderBrace;"],[2,"&trpezium;"],[4,"&elinters;"],[59,"&blank;"],[164,"&circledS;"],[55,"&boxh;"],[1,"&boxv;"],[9,"&boxdr;"],[3,"&boxdl;"],[3,"&boxur;"],[3,"&boxul;"],[3,"&boxvr;"],[7,"&boxvl;"],[7,"&boxhd;"],[7,"&boxhu;"],[7,"&boxvh;"],[19,"&boxH;"],[0,"&boxV;"],[0,"&boxdR;"],[0,"&boxDr;"],[0,"&boxDR;"],[0,"&boxdL;"],[0,"&boxDl;"],[0,"&boxDL;"],[0,"&boxuR;"],[0,"&boxUr;"],[0,"&boxUR;"],[0,"&boxuL;"],[0,"&boxUl;"],[0,"&boxUL;"],[0,"&boxvR;"],[0,"&boxVr;"],[0,"&boxVR;"],[0,"&boxvL;"],[0,"&boxVl;"],[0,"&boxVL;"],[0,"&boxHd;"],[0,"&boxhD;"],[0,"&boxHD;"],[0,"&boxHu;"],[0,"&boxhU;"],[0,"&boxHU;"],[0,"&boxvH;"],[0,"&boxVh;"],[0,"&boxVH;"],[19,"&uhblk;"],[3,"&lhblk;"],[3,"&block;"],[8,"&blk14;"],[0,"&blk12;"],[0,"&blk34;"],[13,"&square;"],[8,"&blacksquare;"],[0,"&EmptyVerySmallSquare;"],[1,"&rect;"],[0,"&marker;"],[2,"&fltns;"],[1,"&bigtriangleup;"],[0,"&blacktriangle;"],[0,"&triangle;"],[2,"&blacktriangleright;"],[0,"&rtri;"],[3,"&bigtriangledown;"],[0,"&blacktriangledown;"],[0,"&dtri;"],[2,"&blacktriangleleft;"],[0,"&ltri;"],[6,"&loz;"],[0,"&cir;"],[32,"&tridot;"],[2,"&bigcirc;"],[8,"&ultri;"],[0,"&urtri;"],[0,"&lltri;"],[0,"&EmptySmallSquare;"],[0,"&FilledSmallSquare;"],[8,"&bigstar;"],[0,"&star;"],[7,"&phone;"],[49,"&female;"],[1,"&male;"],[29,"&spades;"],[2,"&clubs;"],[1,"&hearts;"],[0,"&diamondsuit;"],[3,"&sung;"],[2,"&flat;"],[0,"&natural;"],[0,"&sharp;"],[163,"&check;"],[3,"&cross;"],[8,"&malt;"],[21,"&sext;"],[33,"&VerticalSeparator;"],[25,"&lbbrk;"],[0,"&rbbrk;"],[84,"&bsolhsub;"],[0,"&suphsol;"],[28,"&LeftDoubleBracket;"],[0,"&RightDoubleBracket;"],[0,"&lang;"],[0,"&rang;"],[0,"&Lang;"],[0,"&Rang;"],[0,"&loang;"],[0,"&roang;"],[7,"&longleftarrow;"],[0,"&longrightarrow;"],[0,"&longleftrightarrow;"],[0,"&DoubleLongLeftArrow;"],[0,"&DoubleLongRightArrow;"],[0,"&DoubleLongLeftRightArrow;"],[1,"&longmapsto;"],[2,"&dzigrarr;"],[258,"&nvlArr;"],[0,"&nvrArr;"],[0,"&nvHarr;"],[0,"&Map;"],[6,"&lbarr;"],[0,"&bkarow;"],[0,"&lBarr;"],[0,"&dbkarow;"],[0,"&drbkarow;"],[0,"&DDotrahd;"],[0,"&UpArrowBar;"],[0,"&DownArrowBar;"],[2,"&Rarrtl;"],[2,"&latail;"],[0,"&ratail;"],[0,"&lAtail;"],[0,"&rAtail;"],[0,"&larrfs;"],[0,"&rarrfs;"],[0,"&larrbfs;"],[0,"&rarrbfs;"],[2,"&nwarhk;"],[0,"&nearhk;"],[0,"&hksearow;"],[0,"&hkswarow;"],[0,"&nwnear;"],[0,"&nesear;"],[0,"&seswar;"],[0,"&swnwar;"],[8,{v:"&rarrc;",n:824,o:"&nrarrc;"}],[1,"&cudarrr;"],[0,"&ldca;"],[0,"&rdca;"],[0,"&cudarrl;"],[0,"&larrpl;"],[2,"&curarrm;"],[0,"&cularrp;"],[7,"&rarrpl;"],[2,"&harrcir;"],[0,"&Uarrocir;"],[0,"&lurdshar;"],[0,"&ldrushar;"],[2,"&LeftRightVector;"],[0,"&RightUpDownVector;"],[0,"&DownLeftRightVector;"],[0,"&LeftUpDownVector;"],[0,"&LeftVectorBar;"],[0,"&RightVectorBar;"],[0,"&RightUpVectorBar;"],[0,"&RightDownVectorBar;"],[0,"&DownLeftVectorBar;"],[0,"&DownRightVectorBar;"],[0,"&LeftUpVectorBar;"],[0,"&LeftDownVectorBar;"],[0,"&LeftTeeVector;"],[0,"&RightTeeVector;"],[0,"&RightUpTeeVector;"],[0,"&RightDownTeeVector;"],[0,"&DownLeftTeeVector;"],[0,"&DownRightTeeVector;"],[0,"&LeftUpTeeVector;"],[0,"&LeftDownTeeVector;"],[0,"&lHar;"],[0,"&uHar;"],[0,"&rHar;"],[0,"&dHar;"],[0,"&luruhar;"],[0,"&ldrdhar;"],[0,"&ruluhar;"],[0,"&rdldhar;"],[0,"&lharul;"],[0,"&llhard;"],[0,"&rharul;"],[0,"&lrhard;"],[0,"&udhar;"],[0,"&duhar;"],[0,"&RoundImplies;"],[0,"&erarr;"],[0,"&simrarr;"],[0,"&larrsim;"],[0,"&rarrsim;"],[0,"&rarrap;"],[0,"&ltlarr;"],[1,"&gtrarr;"],[0,"&subrarr;"],[1,"&suplarr;"],[0,"&lfisht;"],[0,"&rfisht;"],[0,"&ufisht;"],[0,"&dfisht;"],[5,"&lopar;"],[0,"&ropar;"],[4,"&lbrke;"],[0,"&rbrke;"],[0,"&lbrkslu;"],[0,"&rbrksld;"],[0,"&lbrksld;"],[0,"&rbrkslu;"],[0,"&langd;"],[0,"&rangd;"],[0,"&lparlt;"],[0,"&rpargt;"],[0,"&gtlPar;"],[0,"&ltrPar;"],[3,"&vzigzag;"],[1,"&vangrt;"],[0,"&angrtvbd;"],[6,"&ange;"],[0,"&range;"],[0,"&dwangle;"],[0,"&uwangle;"],[0,"&angmsdaa;"],[0,"&angmsdab;"],[0,"&angmsdac;"],[0,"&angmsdad;"],[0,"&angmsdae;"],[0,"&angmsdaf;"],[0,"&angmsdag;"],[0,"&angmsdah;"],[0,"&bemptyv;"],[0,"&demptyv;"],[0,"&cemptyv;"],[0,"&raemptyv;"],[0,"&laemptyv;"],[0,"&ohbar;"],[0,"&omid;"],[0,"&opar;"],[1,"&operp;"],[1,"&olcross;"],[0,"&odsold;"],[1,"&olcir;"],[0,"&ofcir;"],[0,"&olt;"],[0,"&ogt;"],[0,"&cirscir;"],[0,"&cirE;"],[0,"&solb;"],[0,"&bsolb;"],[3,"&boxbox;"],[3,"&trisb;"],[0,"&rtriltri;"],[0,{v:"&LeftTriangleBar;",n:824,o:"&NotLeftTriangleBar;"}],[0,{v:"&RightTriangleBar;",n:824,o:"&NotRightTriangleBar;"}],[11,"&iinfin;"],[0,"&infintie;"],[0,"&nvinfin;"],[4,"&eparsl;"],[0,"&smeparsl;"],[0,"&eqvparsl;"],[5,"&blacklozenge;"],[8,"&RuleDelayed;"],[1,"&dsol;"],[9,"&bigodot;"],[0,"&bigoplus;"],[0,"&bigotimes;"],[1,"&biguplus;"],[1,"&bigsqcup;"],[5,"&iiiint;"],[0,"&fpartint;"],[2,"&cirfnint;"],[0,"&awint;"],[0,"&rppolint;"],[0,"&scpolint;"],[0,"&npolint;"],[0,"&pointint;"],[0,"&quatint;"],[0,"&intlarhk;"],[10,"&pluscir;"],[0,"&plusacir;"],[0,"&simplus;"],[0,"&plusdu;"],[0,"&plussim;"],[0,"&plustwo;"],[1,"&mcomma;"],[0,"&minusdu;"],[2,"&loplus;"],[0,"&roplus;"],[0,"&Cross;"],[0,"&timesd;"],[0,"&timesbar;"],[1,"&smashp;"],[0,"&lotimes;"],[0,"&rotimes;"],[0,"&otimesas;"],[0,"&Otimes;"],[0,"&odiv;"],[0,"&triplus;"],[0,"&triminus;"],[0,"&tritime;"],[0,"&intprod;"],[2,"&amalg;"],[0,"&capdot;"],[1,"&ncup;"],[0,"&ncap;"],[0,"&capand;"],[0,"&cupor;"],[0,"&cupcap;"],[0,"&capcup;"],[0,"&cupbrcap;"],[0,"&capbrcup;"],[0,"&cupcup;"],[0,"&capcap;"],[0,"&ccups;"],[0,"&ccaps;"],[2,"&ccupssm;"],[2,"&And;"],[0,"&Or;"],[0,"&andand;"],[0,"&oror;"],[0,"&orslope;"],[0,"&andslope;"],[1,"&andv;"],[0,"&orv;"],[0,"&andd;"],[0,"&ord;"],[1,"&wedbar;"],[6,"&sdote;"],[3,"&simdot;"],[2,{v:"&congdot;",n:824,o:"&ncongdot;"}],[0,"&easter;"],[0,"&apacir;"],[0,{v:"&apE;",n:824,o:"&napE;"}],[0,"&eplus;"],[0,"&pluse;"],[0,"&Esim;"],[0,"&Colone;"],[0,"&Equal;"],[1,"&ddotseq;"],[0,"&equivDD;"],[0,"&ltcir;"],[0,"&gtcir;"],[0,"&ltquest;"],[0,"&gtquest;"],[0,{v:"&leqslant;",n:824,o:"&nleqslant;"}],[0,{v:"&geqslant;",n:824,o:"&ngeqslant;"}],[0,"&lesdot;"],[0,"&gesdot;"],[0,"&lesdoto;"],[0,"&gesdoto;"],[0,"&lesdotor;"],[0,"&gesdotol;"],[0,"&lap;"],[0,"&gap;"],[0,"&lne;"],[0,"&gne;"],[0,"&lnap;"],[0,"&gnap;"],[0,"&lEg;"],[0,"&gEl;"],[0,"&lsime;"],[0,"&gsime;"],[0,"&lsimg;"],[0,"&gsiml;"],[0,"&lgE;"],[0,"&glE;"],[0,"&lesges;"],[0,"&gesles;"],[0,"&els;"],[0,"&egs;"],[0,"&elsdot;"],[0,"&egsdot;"],[0,"&el;"],[0,"&eg;"],[2,"&siml;"],[0,"&simg;"],[0,"&simlE;"],[0,"&simgE;"],[0,{v:"&LessLess;",n:824,o:"&NotNestedLessLess;"}],[0,{v:"&GreaterGreater;",n:824,o:"&NotNestedGreaterGreater;"}],[1,"&glj;"],[0,"&gla;"],[0,"&ltcc;"],[0,"&gtcc;"],[0,"&lescc;"],[0,"&gescc;"],[0,"&smt;"],[0,"&lat;"],[0,{v:"&smte;",n:65024,o:"&smtes;"}],[0,{v:"&late;",n:65024,o:"&lates;"}],[0,"&bumpE;"],[0,{v:"&PrecedesEqual;",n:824,o:"&NotPrecedesEqual;"}],[0,{v:"&sce;",n:824,o:"&NotSucceedsEqual;"}],[2,"&prE;"],[0,"&scE;"],[0,"&precneqq;"],[0,"&scnE;"],[0,"&prap;"],[0,"&scap;"],[0,"&precnapprox;"],[0,"&scnap;"],[0,"&Pr;"],[0,"&Sc;"],[0,"&subdot;"],[0,"&supdot;"],[0,"&subplus;"],[0,"&supplus;"],[0,"&submult;"],[0,"&supmult;"],[0,"&subedot;"],[0,"&supedot;"],[0,{v:"&subE;",n:824,o:"&nsubE;"}],[0,{v:"&supE;",n:824,o:"&nsupE;"}],[0,"&subsim;"],[0,"&supsim;"],[2,{v:"&subnE;",n:65024,o:"&varsubsetneqq;"}],[0,{v:"&supnE;",n:65024,o:"&varsupsetneqq;"}],[2,"&csub;"],[0,"&csup;"],[0,"&csube;"],[0,"&csupe;"],[0,"&subsup;"],[0,"&supsub;"],[0,"&subsub;"],[0,"&supsup;"],[0,"&suphsub;"],[0,"&supdsub;"],[0,"&forkv;"],[0,"&topfork;"],[0,"&mlcp;"],[8,"&Dashv;"],[1,"&Vdashl;"],[0,"&Barv;"],[0,"&vBar;"],[0,"&vBarv;"],[1,"&Vbar;"],[0,"&Not;"],[0,"&bNot;"],[0,"&rnmid;"],[0,"&cirmid;"],[0,"&midcir;"],[0,"&topcir;"],[0,"&nhpar;"],[0,"&parsim;"],[9,{v:"&parsl;",n:8421,o:"&nparsl;"}],[44343,{n:new Map(n([[56476,"&Ascr;"],[1,"&Cscr;"],[0,"&Dscr;"],[2,"&Gscr;"],[2,"&Jscr;"],[0,"&Kscr;"],[2,"&Nscr;"],[0,"&Oscr;"],[0,"&Pscr;"],[0,"&Qscr;"],[1,"&Sscr;"],[0,"&Tscr;"],[0,"&Uscr;"],[0,"&Vscr;"],[0,"&Wscr;"],[0,"&Xscr;"],[0,"&Yscr;"],[0,"&Zscr;"],[0,"&ascr;"],[0,"&bscr;"],[0,"&cscr;"],[0,"&dscr;"],[1,"&fscr;"],[1,"&hscr;"],[0,"&iscr;"],[0,"&jscr;"],[0,"&kscr;"],[0,"&lscr;"],[0,"&mscr;"],[0,"&nscr;"],[1,"&pscr;"],[0,"&qscr;"],[0,"&rscr;"],[0,"&sscr;"],[0,"&tscr;"],[0,"&uscr;"],[0,"&vscr;"],[0,"&wscr;"],[0,"&xscr;"],[0,"&yscr;"],[0,"&zscr;"],[52,"&Afr;"],[0,"&Bfr;"],[1,"&Dfr;"],[0,"&Efr;"],[0,"&Ffr;"],[0,"&Gfr;"],[2,"&Jfr;"],[0,"&Kfr;"],[0,"&Lfr;"],[0,"&Mfr;"],[0,"&Nfr;"],[0,"&Ofr;"],[0,"&Pfr;"],[0,"&Qfr;"],[1,"&Sfr;"],[0,"&Tfr;"],[0,"&Ufr;"],[0,"&Vfr;"],[0,"&Wfr;"],[0,"&Xfr;"],[0,"&Yfr;"],[1,"&afr;"],[0,"&bfr;"],[0,"&cfr;"],[0,"&dfr;"],[0,"&efr;"],[0,"&ffr;"],[0,"&gfr;"],[0,"&hfr;"],[0,"&ifr;"],[0,"&jfr;"],[0,"&kfr;"],[0,"&lfr;"],[0,"&mfr;"],[0,"&nfr;"],[0,"&ofr;"],[0,"&pfr;"],[0,"&qfr;"],[0,"&rfr;"],[0,"&sfr;"],[0,"&tfr;"],[0,"&ufr;"],[0,"&vfr;"],[0,"&wfr;"],[0,"&xfr;"],[0,"&yfr;"],[0,"&zfr;"],[0,"&Aopf;"],[0,"&Bopf;"],[1,"&Dopf;"],[0,"&Eopf;"],[0,"&Fopf;"],[0,"&Gopf;"],[1,"&Iopf;"],[0,"&Jopf;"],[0,"&Kopf;"],[0,"&Lopf;"],[0,"&Mopf;"],[1,"&Oopf;"],[3,"&Sopf;"],[0,"&Topf;"],[0,"&Uopf;"],[0,"&Vopf;"],[0,"&Wopf;"],[0,"&Xopf;"],[0,"&Yopf;"],[1,"&aopf;"],[0,"&bopf;"],[0,"&copf;"],[0,"&dopf;"],[0,"&eopf;"],[0,"&fopf;"],[0,"&gopf;"],[0,"&hopf;"],[0,"&iopf;"],[0,"&jopf;"],[0,"&kopf;"],[0,"&lopf;"],[0,"&mopf;"],[0,"&nopf;"],[0,"&oopf;"],[0,"&popf;"],[0,"&qopf;"],[0,"&ropf;"],[0,"&sopf;"],[0,"&topf;"],[0,"&uopf;"],[0,"&vopf;"],[0,"&wopf;"],[0,"&xopf;"],[0,"&yopf;"],[0,"&zopf;"]]))}],[8906,"&fflig;"],[0,"&filig;"],[0,"&fllig;"],[0,"&ffilig;"],[0,"&ffllig;"]]))},2730:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.decodeXMLStrict=t.decodeHTML5Strict=t.decodeHTML4Strict=t.decodeHTML5=t.decodeHTML4=t.decodeHTMLAttribute=t.decodeHTMLStrict=t.decodeHTML=t.decodeXML=t.DecodingMode=t.EntityDecoder=t.encodeHTML5=t.encodeHTML4=t.encodeNonAsciiHTML=t.encodeHTML=t.escapeText=t.escapeAttribute=t.escapeUTF8=t.escape=t.encodeXML=t.encode=t.decodeStrict=t.decode=t.EncodingMode=t.EntityLevel=void 0;var r,o,a=n(9878),i=n(1818),s=n(5987);function l(e,t){if(void 0===t&&(t=r.XML),("number"==typeof t?t:t.level)===r.HTML){var n="object"==typeof t?t.mode:void 0;return(0,a.decodeHTML)(e,n)}return(0,a.decodeXML)(e)}!function(e){e[e.XML=0]="XML",e[e.HTML=1]="HTML"}(r=t.EntityLevel||(t.EntityLevel={})),function(e){e[e.UTF8=0]="UTF8",e[e.ASCII=1]="ASCII",e[e.Extensive=2]="Extensive",e[e.Attribute=3]="Attribute",e[e.Text=4]="Text"}(o=t.EncodingMode||(t.EncodingMode={})),t.decode=l,t.decodeStrict=function(e,t){var n;void 0===t&&(t=r.XML);var o="number"==typeof t?{level:t}:t;return null!==(n=o.mode)&&void 0!==n||(o.mode=a.DecodingMode.Strict),l(e,o)},t.encode=function(e,t){void 0===t&&(t=r.XML);var n="number"==typeof t?{level:t}:t;return n.mode===o.UTF8?(0,s.escapeUTF8)(e):n.mode===o.Attribute?(0,s.escapeAttribute)(e):n.mode===o.Text?(0,s.escapeText)(e):n.level===r.HTML?n.mode===o.ASCII?(0,i.encodeNonAsciiHTML)(e):(0,i.encodeHTML)(e):(0,s.encodeXML)(e)};var u=n(5987);Object.defineProperty(t,"encodeXML",{enumerable:!0,get:function(){return u.encodeXML}}),Object.defineProperty(t,"escape",{enumerable:!0,get:function(){return u.escape}}),Object.defineProperty(t,"escapeUTF8",{enumerable:!0,get:function(){return u.escapeUTF8}}),Object.defineProperty(t,"escapeAttribute",{enumerable:!0,get:function(){return u.escapeAttribute}}),Object.defineProperty(t,"escapeText",{enumerable:!0,get:function(){return u.escapeText}});var c=n(1818);Object.defineProperty(t,"encodeHTML",{enumerable:!0,get:function(){return c.encodeHTML}}),Object.defineProperty(t,"encodeNonAsciiHTML",{enumerable:!0,get:function(){return c.encodeNonAsciiHTML}}),Object.defineProperty(t,"encodeHTML4",{enumerable:!0,get:function(){return c.encodeHTML}}),Object.defineProperty(t,"encodeHTML5",{enumerable:!0,get:function(){return c.encodeHTML}});var f=n(9878);Object.defineProperty(t,"EntityDecoder",{enumerable:!0,get:function(){return f.EntityDecoder}}),Object.defineProperty(t,"DecodingMode",{enumerable:!0,get:function(){return f.DecodingMode}}),Object.defineProperty(t,"decodeXML",{enumerable:!0,get:function(){return f.decodeXML}}),Object.defineProperty(t,"decodeHTML",{enumerable:!0,get:function(){return f.decodeHTML}}),Object.defineProperty(t,"decodeHTMLStrict",{enumerable:!0,get:function(){return f.decodeHTMLStrict}}),Object.defineProperty(t,"decodeHTMLAttribute",{enumerable:!0,get:function(){return f.decodeHTMLAttribute}}),Object.defineProperty(t,"decodeHTML4",{enumerable:!0,get:function(){return f.decodeHTML}}),Object.defineProperty(t,"decodeHTML5",{enumerable:!0,get:function(){return f.decodeHTML}}),Object.defineProperty(t,"decodeHTML4Strict",{enumerable:!0,get:function(){return f.decodeHTMLStrict}}),Object.defineProperty(t,"decodeHTML5Strict",{enumerable:!0,get:function(){return f.decodeHTMLStrict}}),Object.defineProperty(t,"decodeXMLStrict",{enumerable:!0,get:function(){return f.decodeXML}})},4470:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if((0,r.default)(e,t))return!0;if(!e||!t||"object"!==i(e)||"object"!==i(t))return!1;var n=Object.keys(e),a=Object.keys(t);if(n.length!==a.length)return!1;n.sort(),a.sort();for(var s=0;s<n.length;s+=1)if(!(0,o.default)(t,n[s])||!(0,r.default)(e[n[s]],t[n[s]]))return!1;return!0};var r=a(n(7653)),o=a(n(9957));function a(e){return e&&e.__esModule?e:{default:e}}function i(e){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i(e)}e.exports=t.default},2789:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};t.typeName=E,t.spaces=T,t.indent=g,t.debugNode=y,t.debugNodes=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return e.map((function(e){return y(e,void 0,t)})).join("\n\n\n")};var o=h(n(7901)),a=h(n(1482)),i=h(n(4761)),s=h(n(1703)),l=h(n(9600)),u=h(n(5128)),c=h(n(8859)),f=h(n(9030)),p=n(9993),d=h(n(5523));function h(e){return e&&e.__esModule?e:{default:e}}var m=Function.bind.call(Function.call,Boolean.prototype.valueOf);function E(e){return(0,d.default)().displayNameOfNode?(0,d.default)().displayNameOfNode(e)||"Component":"function"==typeof e.type?e.type.displayName||(0,a.default)(e.type)||"Component":e.type}function T(e){return Array(e+1).join(" ")}function g(e,t){return t.split("\n").map((function(t){return""+String(T(e))+String(t)})).join("\n")}function y(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:2,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if("string"==typeof e||"number"==typeof e)return(0,o.default)(e);if("function"==typeof e){var h=(0,a.default)(e);return"[function"+(h?" "+String(h):"")+"]"}if(!e)return"";if(!(0,d.default)().isValidElement(e)&&!function(e){return(0,f.default)(e,"nodeType")&&"string"==typeof e.nodeType&&(0,f.default)(e,"type")&&(0,f.default)(e,"key")&&(0,f.default)(e,"ref")&&(0,f.default)(e,"instance")&&(0,f.default)(e,"rendered")}(e))return"{"+String((0,c.default)(e))+"}";var T=(0,p.childrenOfNode)(e).map((function(e){return y(e,t,n)})).filter(Boolean),_=E(e),A=n.ignoreProps?"":function(e,t){var n=(0,p.propsOfNode)(e);return Object.keys(n).filter((function(e){return"children"!==e})).map((function(e){return String(e)+"="+String(function(e,t){return(0,i.default)(e)?(0,c.default)(String(e),{quoteStyle:"double"}):(0,s.default)(e)?"{"+String((0,c.default)(Number(e)))+"}":(0,u.default)(e)?"{"+String((0,c.default)(m(e)))+"}":(0,l.default)(e)?"{"+String((0,c.default)(e))+"}":"object"===(void 0===e?"undefined":r(e))?t.verbose?"{"+String((0,c.default)(e))+"}":"{{...}}":"{["+(void 0===e?"undefined":r(e))+"]}"}(n[e],t))})).join(" ")}(e,n),b=A?" ":"",v=T.length?">":" ",S=function(e,t){return e.length?"\n"+String(e.map((function(e){return g(t,e)})).join("\n"))+"\n":""}(T,t),I=T.length?"</"+String(_)+">":"/>";return"<"+String(_)+b+String(A)+v+String(S)+I}},8469:e=>{"use strict";var t=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function n(e,t){return new Error(String(e)+" is a required method of "+String(t)+", but was not implemented.")}var r=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.options={}}return t(e,[{key:"createRenderer",value:function(e){throw n("createRenderer","EnzymeAdapter")}},{key:"nodeToElement",value:function(e){throw n("nodeToElement","EnzymeAdapter")}},{key:"matchesElementType",value:function(e,t){return e?e.type===t:e}},{key:"isValidElement",value:function(e){throw n("isValidElement","EnzymeAdapter")}},{key:"createElement",value:function(e,t){throw n("createElement","EnzymeAdapter")}},{key:"invokeSetStateCallback",value:function(e,t){t.call(e)}}]),e}();r.MODES={STRING:"string",MOUNT:"mount",SHALLOW:"shallow"},e.exports=r},9993:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.propsOfNode=p,t.childrenOfNode=d,t.hasClassName=function(e,t){var n=p(e).className||"";return n=String(n).replace(/\s/g," "),(0,l.default)(t)?t.test(n):(" "+String(n)+" ").indexOf(" "+String(t)+" ")>-1},t.treeForEach=h,t.treeFilter=m,t.findParentNode=function(e,t){return m(e,(function(e){return!!e.rendered&&-1!==d(e).indexOf(t)}))[0]||null},t.pathToNode=T,t.parentsOfNode=function(e,t){return(T(e,t)||[]).reverse()},t.nodeHasId=function(e,t){return p(e).id===t},t.nodeMatchesObjectProps=function(e,t){return(0,i.default)(p(e),(n=t,(0,a.default)(n).reduce((function(e,t){var n=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,o=!1,a=void 0;try{for(var i,s=e[Symbol.iterator]();!(r=(i=s.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{!r&&s.return&&s.return()}finally{if(o)throw a}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")}(t,2),o=n[0],a=n[1];return(0,r.default)({},e,function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}({},o,function(e){return void 0!==e?e:g}(a)))}),{})));var n},t.getTextFromNode=function e(t){return _(t,{recurse:e,getCustom:function(e){var t=e.type;return"<"+String(t.displayName||(0,s.default)(t))+" />"}})},t.getTextFromHostNodes=function e(t,n){return _(t,{recurse:function(t){return e(t,n)},handleHostNodes:function(e){return[].concat(n.nodeToHostNode(e,!0)).map(y).join("")}})},t.getHTMLFromHostNodes=function e(t,n){return _(t,{recurse:function(t){return e(t,n)},handleHostNodes:function(e){return[].concat(n.nodeToHostNode(e,!0)).map(A).join("")},nullRenderReturnsNull:!0})};var r=c(n(6525)),o=c(n(3003)),a=c(n(3932)),i=c(n(6246)),s=c(n(1482)),l=c(n(4035)),u=c(n(5523));function c(e){return e&&e.__esModule?e:{default:e}}function f(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}function p(e){return e&&e.props||{}}function d(e){if(!e)return[];var t=(0,u.default)(),n=t.isFragment&&"function"==typeof t.isFragment,r=Array.isArray(e.rendered)?(0,o.default)(e.rendered,1):[e.rendered];return n?(0,o.default)(r.map((function(e){return t.isFragment(e)?d(e):e})),1):r}function h(e,t){e&&t(e),d(e).forEach((function(e){return h(e,t)}))}function m(e,t){var n=[];return h(e,(function(e){t(e)&&n.push(e)})),n}function E(e,t){return e.filter((function(e){return 0!==m(e,t).length}))}function T(e,t){for(var n=[t],r=[],o=function(t){return e===t};n.length;){var a=n.pop(),i=d(a);if(a===e)return E(r,o);r.push(a),0===i.length&&r.pop(),n.push.apply(n,f(i))}return null}var g={};function y(e){return"string"==typeof e?String(e||""):e&&e.textContent||""}function _(e,t){var n=t.getCustom,r=t.handleHostNodes,o=t.recurse,a=t.nullRenderReturnsNull,i=void 0!==a&&a;return null==e?"":"string"==typeof e||"number"==typeof e?String(e):n&&e.type&&"function"==typeof e.type?n(e):r&&"host"===e.nodeType?r(e):null==e.rendered&&i?null:d(e).map(o).join("")}function A(e){return null==e?null:e.outerHTML.replace(/\sdata-(reactid|reactroot)+="([^"]*)+"/g,"")}},7042:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=d(n(6525)),i=d(n(3003)),s=d(n(9030)),l=n(9891),u=d(n(5523)),c=n(2789),f=n(9993),p=n(152);function d(e){return e&&e.__esModule?e:{default:e}}function h(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function m(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var E=(0,l.sym)("__node__"),T=(0,l.sym)("__nodes__"),g=(0,l.sym)("__renderer__"),y=(0,l.sym)("__unrendered__"),_=(0,l.sym)("__root__"),A=(0,l.sym)("__options__"),b=(0,l.sym)("__rootNodes__"),v=(0,l.sym)("__wrappingComponent__"),S=(0,l.sym)("__linkedRoots__"),I=(0,l.sym)("__updatedBy__");function C(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:f.treeFilter;return e.flatMap((function(e){return n(e.getNodeInternal(),t)}))}function N(e,t){return e.wrap(e.getNodesInternal().filter(t).filter(Boolean))}function O(e){if(1!==e[_].length)throw new Error("getRootNodeInternal(wrapper) can only be called when wrapper wraps one node");return e[_]!==e?e[b][0]:e[_][E]}function D(e,t){return(0,f.parentsOfNode)(t,O(e))}function P(e,t){t?Array.isArray(t)?((0,l.privateSet)(e,E,t[0]),(0,l.privateSet)(e,T,t)):((0,l.privateSet)(e,E,t),(0,l.privateSet)(e,T,[t])):((0,l.privateSet)(e,E,null),(0,l.privateSet)(e,T,[])),(0,l.privateSet)(e,"length",e[T].length)}var R=function(){function e(t,r){var o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if(m(this,e),!n.g.window&&!n.g.document)throw new Error("It looks like you called `mount()` without a global document being loaded.");var i=(0,l.makeOptions)(o);if(r)(0,l.privateSet)(this,g,r[g]),(0,l.privateSet)(this,_,r),P(this,t),(0,l.privateSet)(this,b,r[T]),(0,l.privateSet)(this,A,r[A]),(0,l.privateSet)(this,S,[]);else{var s=(0,u.default)(i);if(!s.isValidElement(t))throw new TypeError("ReactWrapper can only wrap valid elements");var c=s.createRenderer((0,a.default)({mode:"mount"},i));if((0,l.privateSet)(this,g,c),c.render(t,i.context),(0,l.privateSet)(this,_,this),P(this,this[g].getNode()),(0,l.privateSet)(this,A,i),(0,l.privateSet)(this,S,[]),(0,l.isCustomComponent)(i.wrappingComponent,s)){if("function"!=typeof this[g].getWrappingComponentRenderer)throw new TypeError("your adapter does not support `wrappingComponent`. Try upgrading it!");(0,l.privateSet)(this,v,new k(this,this[g].getWrappingComponentRenderer())),this[S].push(this[v])}}(0,l.privateSet)(this,y,t),(0,l.privateSet)(this,I,null)}return o(e,[{key:"root",value:function(){return this[_]}},{key:"getNodeInternal",value:function(){if(1!==this.length)throw new Error("ReactWrapper::getNode() can only be called when wrapping one node");return this[T][0]}},{key:"getNodesInternal",value:function(){return this[T]}},{key:"getElement",value:function(){var e=this;return this.single("getElement",(function(){return(0,u.default)(e[A]).nodeToElement(e[E])}))}},{key:"getElements",value:function(){var e=this;return this[T].map((function(t){return(0,u.default)(e[A]).nodeToElement(t)}))}},{key:"getNode",value:function(){throw new Error("ReactWrapper::getNode() is no longer supported. Use ReactWrapper::instance() instead")}},{key:"getNodes",value:function(){throw new Error("ReactWrapper::getNodes() is no longer supported.")}},{key:"getDOMNode",value:function(){var e=(0,u.default)(this[A]);return this.single("getDOMNode",(function(t){return e.nodeToHostNode(t,!0)}))}},{key:"ref",value:function(e){if(this[_]!==this)throw new Error("ReactWrapper::ref(refname) can only be called on the root");return this.instance().refs[e]}},{key:"instance",value:function(){var e=this;return this.single("instance",(function(){return e[E].instance}))}},{key:"getWrappingComponent",value:function(){if(this[_]!==this)throw new Error("ReactWrapper::getWrappingComponent() can only be called on the root");if(!this[A].wrappingComponent)throw new Error("ReactWrapper::getWrappingComponent() can only be called on a wrapper that was originally passed a `wrappingComponent` option");return this[v]}},{key:"update",value:function(){var e=this,t=this[_];return this!==t?t.update():(P(this,this[g].getNode()),this[S].forEach((function(t){if(t!==e[I]){t[I]=e;try{t.update()}finally{t[I]=null}}})),this)}},{key:"unmount",value:function(){var e=this;if(this[_]!==this)throw new Error("ReactWrapper::unmount() can only be called on the root");return this.single("unmount",(function(){e[g].unmount(),e.update()})),this}},{key:"mount",value:function(){var e=this;if(this[_]!==this)throw new Error("ReactWrapper::mount() can only be called on the root");return this[g].render(this[y],this[A].context,(function(){return e.update()})),this}},{key:"setProps",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:void 0;if(this[_]!==this)throw new Error("ReactWrapper::setProps() can only be called on the root");if(arguments.length>1&&"function"!=typeof n)throw new TypeError("ReactWrapper::setProps() expects a function as its second argument");var r=(0,u.default)(this[A]);return this[y]=(0,l.cloneElement)(r,this[y],e),this[g].render(this[y],null,(function(){t.update(),n&&n()})),this}},{key:"setState",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:void 0;if(null===this.instance()||"class"!==this.getNodeInternal().nodeType)throw new Error("ReactWrapper::setState() can only be called on class components");if(arguments.length>1&&"function"!=typeof n)throw new TypeError("ReactWrapper::setState() expects a function as its second argument");return this.instance().setState(e,(function(){if(t.update(),n){var e=(0,u.default)(t[A]),r=t.instance();e.invokeSetStateCallback?e.invokeSetStateCallback(r,n):n.call(r)}})),this}},{key:"setContext",value:function(e){var t=this;if(this[_]!==this)throw new Error("ReactWrapper::setContext() can only be called on the root");if(!this[A].context)throw new Error("ReactWrapper::setContext() can only be called on a wrapper that was originally passed a context option");return this[g].render(this[y],e,(function(){return t.update()})),this}},{key:"contains",value:function(e){var t=(0,u.default)(this[A]);return C(this,Array.isArray(e)?function(n){return(0,l.containsChildrenSubArray)(l.nodeEqual,n,e.map((function(e){return t.elementToNode(e)})))}:function(n){return(0,l.nodeEqual)(t.elementToNode(e),n)}).length>0}},{key:"containsMatchingElement",value:function(e){var t=(0,u.default)(this[A]).elementToNode(e);return C(this,(function(e){return(0,l.nodeMatches)(t,e,(function(e,t){return e<=t}))})).length>0}},{key:"containsAllMatchingElements",value:function(e){var t=this;if(!Array.isArray(e))throw new TypeError("nodes should be an Array");return e.every((function(e){return t.containsMatchingElement(e)}))}},{key:"containsAnyMatchingElements",value:function(e){var t=this;return Array.isArray(e)&&e.some((function(e){return t.containsMatchingElement(e)}))}},{key:"equals",value:function(e){var t=this;return this.single("equals",(function(){return(0,l.nodeEqual)(t.getNodeInternal(),e)}))}},{key:"matchesElement",value:function(e){var t=this;return this.single("matchesElement",(function(){var n=(0,u.default)(t[A]).elementToNode(e);return(0,l.nodeMatches)(n,t.getNodeInternal(),(function(e,t){return e<=t}))}))}},{key:"find",value:function(e){return this.wrap((0,p.reduceTreesBySelector)(e,this.getNodesInternal()))}},{key:"is",value:function(e){var t=(0,p.buildPredicate)(e);return this.single("is",(function(e){return t(e)}))}},{key:"isEmptyRender",value:function(){var e=this.getNodeInternal();return(0,l.renderedDive)(e)}},{key:"filterWhere",value:function(e){var t=this;return N(this,(function(n){return e(t.wrap(n))}))}},{key:"filter",value:function(e){return N(this,(0,p.buildPredicate)(e))}},{key:"not",value:function(e){var t=(0,p.buildPredicate)(e);return N(this,(function(e){return!t(e)}))}},{key:"text",value:function(){var e=(0,u.default)(this[A]);return this.single("text",(function(t){return(0,f.getTextFromHostNodes)(t,e)}))}},{key:"html",value:function(){var e=(0,u.default)(this[A]);return this.single("html",(function(t){return(0,f.getHTMLFromHostNodes)(t,e)}))}},{key:"render",value:function(){var e=this.html();return(0,l.loadCheerioRoot)(e)}},{key:"simulate",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return this.single("simulate",(function(r){return t[g].simulateEvent(r,e,n),t[_].update(),t}))}},{key:"simulateError",value:function(e){var t=this;if(this[_]===this)throw new Error("ReactWrapper::simulateError() may not be called on the root");return this.single("simulateError",(function(n){if("host"===n.nodeType)throw new Error("ReactWrapper::simulateError() can only be called on custom components");var r=t[g];if("function"!=typeof r.simulateError)throw new TypeError("your adapter does not support `simulateError`. Try upgrading it!");var o=O(t),a=[n].concat(D(t,n));return r.simulateError(a,o,e),t[_].update(),t}))}},{key:"props",value:function(){return this.single("props",f.propsOfNode)}},{key:"state",value:function(e){var t=this,n=this[_]===this?this[g].getNode():this.getNodeInternal();if(null===this.instance()||"class"!==n.nodeType)throw new Error("ReactWrapper::state() can only be called on class components");var r=this.single("state",(function(){return t.instance().state}));if(void 0!==e){if(null==r)throw new TypeError('ReactWrapper::state("'+String(e)+'") requires that `state` not be `null` or `undefined`');return r[e]}return r}},{key:"context",value:function(e){var t=this;if(this[_]!==this)throw new Error("ReactWrapper::context() can only be called on the root");var n=this.single("context",(function(){return t.instance()}));if(null===n)throw new Error("ReactWrapper::context() can only be called on components with instances");var r=n.context;return void 0!==e?r[e]:r}},{key:"children",value:function(e){var t=this.flatMap((function(e){return(0,f.childrenOfNode)(e.getNodeInternal())}));return e?t.filter(e):t}},{key:"childAt",value:function(e){var t=this;return this.single("childAt",(function(){return t.children().at(e)}))}},{key:"parents",value:function(e){var t=this;return this.single("parents",(function(n){var r=t.wrap(D(t,n));return e?r.filter(e):r}))}},{key:"parent",value:function(){return this.flatMap((function(e){return[e.parents().get(0)]}))}},{key:"closest",value:function(e){if(this.is(e))return this;var t=this.parents().filter(e);return t.length>0?t.first():this.findWhere((function(){return!1}))}},{key:"prop",value:function(e){return this.props()[e]}},{key:"invoke",value:function(e){var t=this;return this.single("invoke",(function(){var n=t.prop(e);if("function"!=typeof n)throw new TypeError("ReactWrapper::invoke() requires the name of a prop whose value is a function");return function(){for(var e=arguments.length,r=Array(e),o=0;o<e;o++)r[o]=arguments[o];var a="function"==typeof t[g].wrapInvoke?t[g].wrapInvoke((function(){return n.apply(void 0,r)})):n.apply(void 0,r);return t[_].update(),a}}))}},{key:"renderProp",value:function(e){var t=this,n=(0,u.default)(this[A]);if("function"!=typeof n.wrap)throw new RangeError("your adapter does not support `wrap`. Try upgrading it!");return this.single("renderProp",(function(o){if("host"===o.nodeType)throw new TypeError("ReactWrapper::renderProp() can only be called on custom components");if("string"!=typeof e)throw new TypeError("ReactWrapper::renderProp(): `propName` must be a string");var a=t.props();if(!(0,s.default)(a,e))throw new Error("ReactWrapper::renderProp(): no prop called “"+String(e)+"“ found");var i=a[e];if("function"!=typeof i)throw new TypeError("ReactWrapper::renderProp(): expected prop “"+String(e)+"“ to contain a function, but it holds “"+(void 0===i?"undefined":r(i))+"“");return function(){var e=i.apply(void 0,arguments),r=n.wrap(e);return t.wrap(r,null,t[A])}}))}},{key:"key",value:function(){return this.single("key",(function(e){return void 0===e.key?null:e.key}))}},{key:"type",value:function(){return this.single("type",(function(e){return(0,l.typeOfNode)(e)}))}},{key:"name",value:function(){var e=(0,u.default)(this[A]);return this.single("name",(function(t){return e.displayNameOfNode?e.displayNameOfNode(t):(0,l.displayNameOfNode)(t)}))}},{key:"hasClass",value:function(e){return"string"==typeof e&&-1!==e.indexOf(".")&&console.warn("It looks like you're calling `ReactWrapper::hasClass()` with a CSS selector. hasClass() expects a class name, not a CSS selector."),this.single("hasClass",(function(t){return(0,f.hasClassName)(t,e)}))}},{key:"forEach",value:function(e){var t=this;return this.getNodesInternal().forEach((function(n,r){return e.call(t,t.wrap(n),r)})),this}},{key:"map",value:function(e){var t=this;return this.getNodesInternal().map((function(n,r){return e.call(t,t.wrap(n),r)}))}},{key:"reduce",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:void 0;return arguments.length>1?this.getNodesInternal().reduce((function(n,r,o){return e.call(t,n,t.wrap(r),o)}),n):this.getNodesInternal().reduce((function(n,r,o){return e.call(t,1===o?t.wrap(n):n,t.wrap(r),o)}))}},{key:"reduceRight",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:void 0;return arguments.length>1?this.getNodesInternal().reduceRight((function(n,r,o){return e.call(t,n,t.wrap(r),o)}),n):this.getNodesInternal().reduceRight((function(n,r,o){return e.call(t,1===o?t.wrap(n):n,t.wrap(r),o)}))}},{key:"slice",value:function(e,t){return this.wrap(this.getNodesInternal().slice(e,t))}},{key:"some",value:function(e){if(this[_]===this)throw new Error("ReactWrapper::some() can not be called on the root");var t=(0,p.buildPredicate)(e);return this.getNodesInternal().some(t)}},{key:"someWhere",value:function(e){var t=this;return this.getNodesInternal().some((function(n,r){return e.call(t,t.wrap(n),r)}))}},{key:"every",value:function(e){var t=(0,p.buildPredicate)(e);return this.getNodesInternal().every(t)}},{key:"everyWhere",value:function(e){var t=this;return this.getNodesInternal().every((function(n,r){return e.call(t,t.wrap(n),r)}))}},{key:"flatMap",value:function(e){var t=this,n=this.getNodesInternal().map((function(n,r){return e.call(t,t.wrap(n),r)})),r=(0,i.default)(n,1);return this.wrap(r.filter(Boolean))}},{key:"findWhere",value:function(e){var t=this;return C(this,(function(n){var r=t.wrap(n);return r.length>0&&e(r)}))}},{key:"get",value:function(e){return this.getElements()[e]}},{key:"at",value:function(e){var t=this.getNodesInternal();return e<t.length?this.wrap(t[e]):this.wrap([])}},{key:"first",value:function(){return this.at(0)}},{key:"last",value:function(){return this.at(this.length-1)}},{key:"isEmpty",value:function(){return console.warn("Enzyme::Deprecated method isEmpty() called, use exists() instead."),!this.exists()}},{key:"exists",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;return arguments.length>0?this.find(e).exists():this.length>0}},{key:"single",value:function(e,t){var n="string"==typeof e?e:"unknown",r="function"==typeof t?t:e;if(1!==this.length)throw new Error("Method “"+n+"” is meant to be run on 1 node. "+String(this.length)+" found instead.");return r.call(this,this.getNodeInternal())}},{key:"wrap",value:function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this[_];if(t instanceof e)return t;for(var r=arguments.length,o=Array(r>2?r-2:0),a=2;a<r;a++)o[a-2]=arguments[a];return new(Function.prototype.bind.apply(e,[null].concat([t,n],o)))}},{key:"debug",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return(0,c.debugNodes)(this.getNodesInternal(),e)}},{key:"tap",value:function(e){return e(this),this}},{key:"detach",value:function(){if(this[_]!==this)throw new Error("ReactWrapper::detach() can only be called on the root");if(!this[A].attachTo)throw new Error("ReactWrapper::detach() can only be called on when the `attachTo` option was passed into `mount()`.");this[g].unmount()}},{key:"hostNodes",value:function(){return this.filterWhere((function(e){return"string"==typeof e.type()}))}}]),e}(),k=function(e){function t(e,n){m(this,t);var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,n.getNode(),e));return(0,l.privateSet)(r,_,r),(0,l.privateSet)(r,g,n),r[S].push(e),r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),o(t,[{key:"getWrappingComponent",value:function(){throw new TypeError("ReactWrapper::getWrappingComponent() can only be called on the root")}}]),t}(R);function w(e,t){Object.defineProperty(R.prototype,e,{get:function(){throw new Error("\n        Attempted to access ReactWrapper::"+String(e)+", which was previously a private property on\n        Enzyme ReactWrapper instances, but is no longer and should not be relied upon.\n        "+String(t)+"\n      ")},enumerable:!1,configurable:!1})}l.ITERATOR_SYMBOL&&Object.defineProperty(R.prototype,l.ITERATOR_SYMBOL,{configurable:!0,value:function(){var e,t=this[T][l.ITERATOR_SYMBOL](),n=(0,u.default)(this[A]);return h(e={},l.ITERATOR_SYMBOL,(function(){return this})),h(e,"next",(function(){var e=t.next();return e.done?{done:!0}:{done:!1,value:n.nodeToElement(e.value)}})),e}}),w("node","Consider using the getElement() method instead."),w("nodes","Consider using the getElements() method instead."),w("renderer",""),w("options",""),w("complexSelector",""),t.default=R},2391:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function e(t,n,r){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,n);if(void 0===o){var a=Object.getPrototypeOf(t);return null===a?void 0:e(a,n,r)}if("value"in o)return o.value;var i=o.get;return void 0!==i?i.call(r):void 0},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i=m(n(6525)),s=m(n(3003)),l=m(n(9030)),u=m(n(4470)),c=n(9891),f=m(n(5523)),p=n(2789),d=n(9993),h=n(152);function m(e){return e&&e.__esModule?e:{default:e}}function E(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}function T(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function g(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var y=(0,c.sym)("__node__"),_=(0,c.sym)("__nodes__"),A=(0,c.sym)("__renderer__"),b=(0,c.sym)("__unrendered__"),v=(0,c.sym)("__root__"),S=(0,c.sym)("__options__"),I=(0,c.sym)("__setState__"),C=(0,c.sym)("__rootNodes__"),N=(0,c.sym)("__childContext__"),O=(0,c.sym)("__wrappingComponent__"),D=(0,c.sym)("__primaryWrapper__"),P=(0,c.sym)("__rootFinder__"),R=(0,c.sym)("__providerValues__");function k(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:d.treeFilter;return e.flatMap((function(e){return n(e.getNodeInternal(),t)}))}function w(e,t){return e.wrap(e.getNodesInternal().filter(t).filter(Boolean))}function L(e){var t=e.options,n=t.lifecycles,r=void 0===n?{}:n,o=t.enableComponentDidUpdateOnSetState,a=t.supportPrevContextArgumentOfComponentDidUpdate,s=void 0!==o,l=void 0!==a,u=s||l?(0,i.default)({},s&&{onSetState:!!o},l&&{prevContext:!!a}):null,c=r.getDerivedStateFromProps,f=!!c&&{hasShouldComponentUpdateBug:!!c.hasShouldComponentUpdateBug};return(0,i.default)({},r,{setState:(0,i.default)({},r.setState),getChildContext:(0,i.default)({calledByRenderer:!0},r.getChildContext)},u&&{componentDidUpdate:u},{getDerivedStateFromProps:f})}function M(e){return"host"===e.nodeType?e:e.rendered}function x(e){if(1!==e[v].length)throw new Error("getRootNodeInternal(wrapper) can only be called when wrapper wraps one node");return e[v]!==e?e[C][0]:e[v][y]}function G(e,t){return(0,d.parentsOfNode)(t,x(e))}function B(e,t){Array.isArray(t)?((0,c.privateSet)(e,y,t[0]),(0,c.privateSet)(e,_,t)):((0,c.privateSet)(e,y,t),(0,c.privateSet)(e,_,[t])),(0,c.privateSet)(e,"length",e[_].length)}function H(e,t,n,r){return!(0,u.default)(e,t)||!(0,u.default)(n,r)}function F(e){return e&&e.isPureReactComponent}function U(e,t,n,r,o){var i=t[A];if("parent"===e.options.legacyContextMode)if(o)(0,c.privateSet)(t,N,o.getLastReturnValue()),o.restore();else if("function"==typeof n.getChildContext){var s=function(e,t,n){var r=e.instance,o=e.type,i=(0,c.displayNameOfNode)(e);if("object"!==a(o.childContextTypes))return console.warn(String(i)+".getChildContext(): childContextTypes must be defined in order to use getChildContext()."),{};var s=r.getChildContext();return Object.keys(s).forEach((function(e){if(!(e in o.childContextTypes))throw new Error(String(i)+'.getChildContext(): key "'+String(e)+'" is not defined in childContextTypes.')})),"function"==typeof n.checkPropTypes&&n.checkPropTypes(o.childContextTypes,s,"child context",t),s}(r,[t[y]].concat(G(t,t[y])),i);(0,c.privateSet)(t,N,s)}else(0,c.privateSet)(t,N,null)}function j(e,t){if("function"==typeof e.type.getDerivedStateFromProps)var n=e.instance,r=(0,c.spyMethod)(n,"shouldComponentUpdate",(function(e){return function(){n.state=t;for(var r=arguments.length,a=Array(r),i=0;i<r;i++)a[i]=arguments[i];var s=e.apply(n,a),l=a[1];return n.state=l,o(),s}})),o=r.restore}function q(e,t,n){var r=e[y],o=r&&n.nodeToElement(r);if(e.type()===t)return e.dive();if(o&&(0,c.isCustomComponentElement)(o,n))return q(e.dive(),t,n);for(var a=e.children(),i=0;i<a.length;i+=1){var s=q(a.at(i),t,n);if(void 0!==s)return s}}function z(e,t){var n=q(e,e[P],t);if(!n)throw new Error("`wrappingComponent` must render its children!");return{legacyContext:n[S].context,providerValues:n[R]}}function W(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=(0,i.default)({},e[S],t,{context:t.context||(0,i.default)({},e[S].context,e[v][N])});return(0,c.privateSet)(n,R,e[v][R]),n}var V=function(){function e(t,n){var r=this,o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};T(this,e),function(e){var t=e.lifecycleExperimental,n=e.disableLifecycleMethods,r=e.enableComponentDidUpdateOnSetState,o=e.supportPrevContextArgumentOfComponentDidUpdate,a=e.lifecycles;if(void 0!==t&&"boolean"!=typeof t)throw new Error("lifecycleExperimental must be either true or false if provided");if(void 0!==n&&"boolean"!=typeof n)throw new Error("disableLifecycleMethods must be either true or false if provided");if(null!=t&&null!=n&&t===n)throw new Error("lifecycleExperimental and disableLifecycleMethods cannot be set to the same value");if(void 0!==r&&a.componentDidUpdate&&a.componentDidUpdate.onSetState!==r)throw new TypeError("the legacy enableComponentDidUpdateOnSetState option should be matched by `lifecycles: { componentDidUpdate: { onSetState: true } }`, for compatibility");if(void 0!==o&&a.componentDidUpdate&&a.componentDidUpdate.prevContext!==o)throw new TypeError("the legacy supportPrevContextArgumentOfComponentDidUpdate option should be matched by `lifecycles: { componentDidUpdate: { prevContext: true } }`, for compatibility")}(o);var a=function(e,t,n,r){var o=(0,c.makeOptions)(n),a=(0,f.default)(n);if((0,c.privateSet)(o,R,n[R]),t||!(0,c.isCustomComponent)(o.wrappingComponent,a))return o;if("function"!=typeof a.wrapWithWrappingComponent)throw new TypeError("your adapter does not support `wrappingComponent`. Try upgrading it!");var s=a.wrapWithWrappingComponent(e,o),l=s.node,u=s.RootFinder,p=new $(l,r,u),d=z(p,a),h=d.legacyContext,m=d.providerValues;return(0,c.privateSet)(r,O,p),(0,i.default)({},o,g({context:(0,i.default)({},o.context,h)},R,m))}(t,n,o,this),s=(0,f.default)(a),l=L(s);if(n)(0,c.privateSet)(this,v,n),(0,c.privateSet)(this,b,null),(0,c.privateSet)(this,A,n[A]),B(this,t),(0,c.privateSet)(this,S,n[S]),(0,c.privateSet)(this,C,n[_]),(0,c.privateSet)(this,R,null);else{if(!s.isValidElement(t))throw new TypeError("ShallowWrapper can only wrap valid elements");var u=l.getChildContext.calledByRenderer?function(e,t){return(0,c.isCustomComponentElement)(e,t)&&e.type.prototype&&"function"==typeof e.type.prototype.getChildContext?(0,c.spyMethod)(e.type.prototype,"getChildContext"):null}(t,s):null;(0,c.privateSet)(this,v,this),(0,c.privateSet)(this,b,t);var p=s.createRenderer((0,i.default)({mode:"shallow"},a));(0,c.privateSet)(this,A,p);var d=new Map(a[R]||[]);this[A].render(t,a.context,{providerValues:d});var h=this[A].getNode();B(this,M(h)),(0,c.privateSet)(this,S,a),(0,c.privateSet)(this,R,d);var m=h.instance;m&&!a.disableLifecycleMethods&&(l.componentDidUpdate.onSetState&&!m[I]&&((0,c.privateSet)(m,I,m.setState),m.setState=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:void 0;return r.setState.apply(r,E(null==t?[e]:[e,t]))}),"function"==typeof m.componentDidMount&&this[A].batchedUpdates((function(){m.componentDidMount()})),U(s,this,m,h,u))}}return o(e,[{key:"root",value:function(){return this[v]}},{key:"getNodeInternal",value:function(){if(1!==this.length)throw new Error("ShallowWrapper::getNode() can only be called when wrapping one node");return this[v]===this&&this.update(),this[y]}},{key:"getNodesInternal",value:function(){return this[v]===this&&1===this.length&&this.update(),this[_]}},{key:"getElement",value:function(){var e=this;return this.single("getElement",(function(t){return(0,f.default)(e[S]).nodeToElement(t)}))}},{key:"getElements",value:function(){var e=this;return this.getNodesInternal().map((function(t){return(0,f.default)(e[S]).nodeToElement(t)}))}},{key:"getNode",value:function(){throw new Error("ShallowWrapper::getNode() is no longer supported. Use ShallowWrapper::getElement() instead")}},{key:"getNodes",value:function(){throw new Error("ShallowWrapper::getNodes() is no longer supported. Use ShallowWrapper::getElements() instead")}},{key:"instance",value:function(){if(this[v]!==this)throw new Error("ShallowWrapper::instance() can only be called on the root");return this[A].getNode().instance}},{key:"getWrappingComponent",value:function(){if(this[v]!==this)throw new Error("ShallowWrapper::getWrappingComponent() can only be called on the root");if(!this[S].wrappingComponent)throw new Error("ShallowWrapper::getWrappingComponent() can only be called on a wrapper that was originally passed a `wrappingComponent` option");return this[O]}},{key:"update",value:function(){if(this[v]!==this)throw new Error("ShallowWrapper::update() can only be called on the root");if(1!==this.length)throw new Error("ShallowWrapper::update() can only be called when wrapping one node");return B(this,M(this[A].getNode())),this}},{key:"unmount",value:function(){return this[A].unmount(),this[v][O]&&this[v][O].unmount(),this}},{key:"rerender",value:function(e,t){var n=this,r=(0,f.default)(this[S]);return this.single("rerender",(function(){(0,c.withSetStateAllowed)((function(){var o=n[A].getNode(),a=o.instance||{},s=o.type||{},l=a.state,f=a.props||n[b].props,p=a.context||n[S].context,d=t||p;t&&(n[S]=(0,i.default)({},n[S],{context:d})),n[A].batchedUpdates((function(){var t=L(r),h=!0,m=void 0,E=void 0;if(!n[S].disableLifecycleMethods&&a){if("function"==typeof a.shouldComponentUpdate){var T=t.getDerivedStateFromProps;T&&T.hasShouldComponentUpdateBug&&j(o,l),m=(0,c.spyMethod)(a,"shouldComponentUpdate")}t.getChildContext.calledByRenderer&&"function"==typeof a.getChildContext&&(E=(0,c.spyMethod)(a,"getChildContext"))}if(!m&&F(a)&&(h=H(f,e,l,a.state)),e&&(n[b]=(0,c.cloneElement)(r,n[b],e)),n[A].render(n[b],d,{providerValues:n[R]}),m&&(h=m.getLastReturnValue(),m.restore()),h&&!n[S].disableLifecycleMethods&&a)if(U(r,n,a,o,E),t.getSnapshotBeforeUpdate){var g=void 0;"function"==typeof a.getSnapshotBeforeUpdate&&(g=a.getSnapshotBeforeUpdate(f,l)),!t.componentDidUpdate||"function"!=typeof a.componentDidUpdate||l&&!(0,u.default)(l,n.instance().state)&&"function"!=typeof s.getDerivedStateFromProps||a.componentDidUpdate(f,l,g)}else t.componentDidUpdate&&"function"==typeof a.componentDidUpdate&&(t.componentDidUpdate.prevContext?a.componentDidUpdate(f,l,p):l&&!(0,u.default)(n.instance().state,l)||a.componentDidUpdate(f,l));else(0,u.default)(e,a.props)||(a.props=(Object.freeze||Object)((0,i.default)({},a.props,e)));n.update()}))}))})),this}},{key:"setProps",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:void 0;if(this[v]!==this)throw new Error("ShallowWrapper::setProps() can only be called on the root");if(arguments.length>1&&"function"!=typeof t)throw new TypeError("ReactWrapper::setProps() expects a function as its second argument");return this.rerender(e),t&&t(),this}},{key:"setState",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:void 0;if(this[v]!==this)throw new Error("ShallowWrapper::setState() can only be called on the root");if(null===this.instance()||"class"!==this[A].getNode().nodeType)throw new Error("ShallowWrapper::setState() can only be called on class components");if(arguments.length>1&&"function"!=typeof n)throw new TypeError("ReactWrapper::setState() expects a function as its second argument");return this.single("setState",(function(){(0,c.withSetStateAllowed)((function(){var r=(0,f.default)(t[S]),o=L(r),a=t[A].getNode(),s=a.instance,l=s.props,u=s.state,p=s.context,d="function"==typeof e?e.call(s,u,l):e,h=!o.setState.skipsComponentDidUpdateOnNullish||null!=d,m=void 0,E=void 0,T=!0;if(!t[S].disableLifecycleMethods&&s){if(o.componentDidUpdate&&o.componentDidUpdate.onSetState&&"function"==typeof s.shouldComponentUpdate){var g=o.getDerivedStateFromProps;g&&g.hasShouldComponentUpdateBug&&j(a,e),m=(0,c.spyMethod)(s,"shouldComponentUpdate")}o.getChildContext.calledByRenderer&&"function"==typeof s.getChildContext&&(E=(0,c.spyMethod)(s,"getChildContext"))}if(!m&&F(s)&&(T=H(l,s.props,u,(0,i.default)({},u,d))),s[I]?s[I](d):s.setState(d),m&&(T=m.getLastReturnValue(),m.restore()),h&&T&&!t[S].disableLifecycleMethods&&(U(r,t,s,a,E),o.componentDidUpdate&&o.componentDidUpdate.onSetState))if(o.getSnapshotBeforeUpdate&&"function"==typeof s.getSnapshotBeforeUpdate){var y=s.getSnapshotBeforeUpdate(l,u);"function"==typeof s.componentDidUpdate&&s.componentDidUpdate(l,u,y)}else"function"==typeof s.componentDidUpdate&&(o.componentDidUpdate.prevContext?s.componentDidUpdate(l,u,p):s.componentDidUpdate(l,u));t.update(),n&&(r.invokeSetStateCallback?r.invokeSetStateCallback(s,n):n.call(s))}))})),this}},{key:"setContext",value:function(e){if(this[v]!==this)throw new Error("ShallowWrapper::setContext() can only be called on the root");if(!this[S].context)throw new Error("ShallowWrapper::setContext() can only be called on a wrapper that was originally passed a context option");return this.rerender(null,e)}},{key:"contains",value:function(e){var t=(0,f.default)(this[S]);if(!(0,c.isReactElementAlike)(e,t))throw new Error("ShallowWrapper::contains() can only be called with a ReactElement (or an array of them), a string, or a number as an argument.");return k(this,Array.isArray(e)?function(n){return(0,c.containsChildrenSubArray)(c.nodeEqual,n,e.map((function(e){return t.elementToNode(e)})))}:function(n){return(0,c.nodeEqual)(t.elementToNode(e),n)}).length>0}},{key:"containsMatchingElement",value:function(e){var t=(0,f.default)(this[S]).elementToNode(e);return k(this,(function(e){return(0,c.nodeMatches)(t,e,(function(e,t){return e<=t}))})).length>0}},{key:"containsAllMatchingElements",value:function(e){var t=this;if(!Array.isArray(e))throw new TypeError("nodes should be an Array");return e.every((function(e){return t.containsMatchingElement(e)}))}},{key:"containsAnyMatchingElements",value:function(e){var t=this;return Array.isArray(e)&&e.some((function(e){return t.containsMatchingElement(e)}))}},{key:"equals",value:function(e){var t=this;return this.single("equals",(function(){return(0,c.nodeEqual)(t.getNodeInternal(),e)}))}},{key:"matchesElement",value:function(e){var t=this;return this.single("matchesElement",(function(){var n=(0,f.default)(t[S]).elementToNode(e);return(0,c.nodeMatches)(n,t.getNodeInternal(),(function(e,t){return e<=t}))}))}},{key:"find",value:function(e){return this.wrap((0,h.reduceTreesBySelector)(e,this.getNodesInternal()))}},{key:"is",value:function(e){var t=(0,h.buildPredicate)(e);return this.single("is",(function(e){return t(e)}))}},{key:"isEmptyRender",value:function(){return this.getNodesInternal().every((function(e){return(0,c.isEmptyValue)(e)}))}},{key:"filterWhere",value:function(e){var t=this;return w(this,(function(n){return e(t.wrap(n))}))}},{key:"filter",value:function(e){return w(this,(0,h.buildPredicate)(e))}},{key:"not",value:function(e){var t=(0,h.buildPredicate)(e);return w(this,(function(e){return!t(e)}))}},{key:"text",value:function(){return this.single("text",d.getTextFromNode)}},{key:"html",value:function(){var e=this;return this.single("html",(function(t){if(null===e.type())return null;var n=(0,f.default)(e[S]);return n.createRenderer((0,i.default)({},e[S],{mode:"string"})).render(n.nodeToElement(t))}))}},{key:"render",value:function(){var e=this.html();return(0,c.loadCheerioRoot)(e)}},{key:"simulate",value:function(e){for(var t=this,n=arguments.length,r=Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];return this.single("simulate",(function(n){var o;return(o=t[A]).simulateEvent.apply(o,[n,e].concat(r)),t[v].update(),t}))}},{key:"simulateError",value:function(e){var t=this;return this.single("simulateError",(function(n){if("host"===n.nodeType)throw new TypeError("ShallowWrapper::simulateError() can only be called on custom components");var r=t[A];if("function"!=typeof r.simulateError)throw new TypeError("your adapter does not support `simulateError`. Try upgrading it!");var o=x(t),a=[n].concat(G(t,n));return r.simulateError(a,o,e),t}))}},{key:"props",value:function(){return this.single("props",d.propsOfNode)}},{key:"state",value:function(e){var t=this;if(this[v]!==this)throw new Error("ShallowWrapper::state() can only be called on the root");if(null===this.instance()||"class"!==this[A].getNode().nodeType)throw new Error("ShallowWrapper::state() can only be called on class components");var n=this.single("state",(function(){return t.instance().state}));if(void 0!==e){if(null==n)throw new TypeError('ShallowWrapper::state("'+String(e)+'") requires that `state` not be `null` or `undefined`');return n[e]}return n}},{key:"context",value:function(e){var t=this;if(this[v]!==this)throw new Error("ShallowWrapper::context() can only be called on the root");if(!this[S].context)throw new Error("ShallowWrapper::context() can only be called on a wrapper that was originally passed a context option");if(null===this.instance())throw new Error("ShallowWrapper::context() can only be called on wrapped nodes that have a non-null instance");var n=this.single("context",(function(){return t.instance().context}));return e?n[e]:n}},{key:"children",value:function(e){var t=this.flatMap((function(e){return(0,d.childrenOfNode)(e.getNodeInternal())}));return e?t.filter(e):t}},{key:"childAt",value:function(e){var t=this;return this.single("childAt",(function(){return t.children().at(e)}))}},{key:"parents",value:function(e){var t=this;return this.single("parents",(function(n){var r=t.wrap(G(t,n));return e?r.filter(e):r}))}},{key:"parent",value:function(){return this.flatMap((function(e){return[e.parents().get(0)]}))}},{key:"closest",value:function(e){if(this.is(e))return this;var t=this.parents().filter(e);return t.length>0?t.first():this.findWhere((function(){return!1}))}},{key:"shallow",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return this.single("shallow",(function(n){var r=W(e,t);return e.wrap((0,f.default)(e[S]).nodeToElement(n),null,r)}))}},{key:"prop",value:function(e){return this.props()[e]}},{key:"invoke",value:function(e){var t=this;return this.single("invoke",(function(){var n=t.prop(e);if("function"!=typeof n)throw new TypeError("ShallowWrapper::invoke() requires the name of a prop whose value is a function");return function(){var e=n.apply(void 0,arguments);return t[v].update(),e}}))}},{key:"renderProp",value:function(e){var t=this,n=(0,f.default)(this[S]);if("function"!=typeof n.wrap)throw new RangeError("your adapter does not support `wrap`. Try upgrading it!");return this.single("renderProp",(function(r){if("host"===r.nodeType)throw new TypeError("ShallowWrapper::renderProp() can only be called on custom components");if("string"!=typeof e)throw new TypeError("ShallowWrapper::renderProp(): `propName` must be a string");var o=t.props();if(!(0,l.default)(o,e))throw new Error("ShallowWrapper::renderProp(): no prop called “"+String(e)+"“ found");var i=o[e];if("function"!=typeof i)throw new TypeError("ShallowWrapper::renderProp(): expected prop “"+String(e)+"“ to contain a function, but it holds “"+(void 0===i?"undefined":a(i))+"“");return function(){var e=i.apply(void 0,arguments),r=n.wrap(e);return t.wrap(r,null,t[S])}}))}},{key:"key",value:function(){return this.single("key",(function(e){return void 0===e.key?null:e.key}))}},{key:"type",value:function(){return this.single("type",(function(e){return(0,c.typeOfNode)(e)}))}},{key:"name",value:function(){var e=(0,f.default)(this[S]);return this.single("name",(function(t){return e.displayNameOfNode?e.displayNameOfNode(t):(0,c.displayNameOfNode)(t)}))}},{key:"hasClass",value:function(e){return"string"==typeof e&&-1!==e.indexOf(".")&&console.warn("It looks like you're calling `ShallowWrapper::hasClass()` with a CSS selector. hasClass() expects a class name, not a CSS selector."),this.single("hasClass",(function(t){return(0,d.hasClassName)(t,e)}))}},{key:"forEach",value:function(e){var t=this;return this.getNodesInternal().forEach((function(n,r){return e.call(t,t.wrap(n),r)})),this}},{key:"map",value:function(e){var t=this;return this.getNodesInternal().map((function(n,r){return e.call(t,t.wrap(n),r)}))}},{key:"reduce",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:void 0;return arguments.length>1?this.getNodesInternal().reduce((function(n,r,o){return e.call(t,n,t.wrap(r),o)}),n):this.getNodesInternal().reduce((function(n,r,o){return e.call(t,1===o?t.wrap(n):n,t.wrap(r),o)}))}},{key:"reduceRight",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:void 0;return arguments.length>1?this.getNodesInternal().reduceRight((function(n,r,o){return e.call(t,n,t.wrap(r),o)}),n):this.getNodesInternal().reduceRight((function(n,r,o){return e.call(t,1===o?t.wrap(n):n,t.wrap(r),o)}))}},{key:"slice",value:function(e,t){return this.wrap(this.getNodesInternal().slice(e,t))}},{key:"some",value:function(e){if(this[v]===this)throw new Error("ShallowWrapper::some() can not be called on the root");var t=(0,h.buildPredicate)(e);return this.getNodesInternal().some(t)}},{key:"someWhere",value:function(e){var t=this;return this.getNodesInternal().some((function(n,r){return e.call(t,t.wrap(n),r)}))}},{key:"every",value:function(e){var t=(0,h.buildPredicate)(e);return this.getNodesInternal().every(t)}},{key:"everyWhere",value:function(e){var t=this;return this.getNodesInternal().every((function(n,r){return e.call(t,t.wrap(n),r)}))}},{key:"flatMap",value:function(e){var t=this,n=this.getNodesInternal().map((function(n,r){return e.call(t,t.wrap(n),r)})),r=(0,s.default)(n,1);return this.wrap(r.filter(Boolean))}},{key:"findWhere",value:function(e){var t=this;return k(this,(function(n){var r=t.wrap(n);return r.length>0&&e(r)}))}},{key:"get",value:function(e){return this.getElements()[e]}},{key:"at",value:function(e){var t=this.getNodesInternal();return e<t.length?this.wrap(t[e]):this.wrap([])}},{key:"first",value:function(){return this.at(0)}},{key:"last",value:function(){return this.at(this.length-1)}},{key:"isEmpty",value:function(){return console.warn("Enzyme::Deprecated method isEmpty() called, use exists() instead."),!this.exists()}},{key:"exists",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;return arguments.length>0?this.find(e).exists():this.length>0}},{key:"single",value:function(e,t){var n="string"==typeof e?e:"unknown",r="function"==typeof t?t:e;if(1!==this.length)throw new Error("Method “"+n+"” is meant to be run on 1 node. "+String(this.length)+" found instead.");return r.call(this,this.getNodeInternal())}},{key:"wrap",value:function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this[v];if(t instanceof e)return t;for(var r=arguments.length,o=Array(r>2?r-2:0),a=2;a<r;a++)o[a-2]=arguments[a];return new(Function.prototype.bind.apply(e,[null].concat([t,n],o)))}},{key:"debug",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return(0,p.debugNodes)(this.getNodesInternal(),e)}},{key:"tap",value:function(e){return e(this),this}},{key:"dive",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=(0,f.default)(this[S]);return this.single("dive",(function(r){if(r&&"host"===r.nodeType)throw new TypeError("ShallowWrapper::dive() can not be called on Host Components");var o=(0,f.default)(e[S]).nodeToElement(r);if(!(0,c.isCustomComponentElement)(o,n))throw new TypeError("ShallowWrapper::dive() can only be called on components");var a=W(e,t);return e.wrap(o,null,a)}))}},{key:"hostNodes",value:function(){return this.filterWhere((function(e){return"string"==typeof e.type()}))}}]),e}();function Y(e){var t=(0,f.default)(e[S]),n=e[D],r=n[A].getNode(),o=z(e,t),a=o.legacyContext,s=o.providerValues,l=n[R];if(n.setContext((0,i.default)({},e[D][S].context,a)),n[R]=new Map([].concat(E(l),E(s))),"function"==typeof t.isContextConsumer&&t.isContextConsumer(r.type)){var u=r.type,c=t.getProviderFromConsumer(u);s.get(c)!==l.get(c)&&n.rerender()}}var $=function(e){function t(e,n,r){T(this,t);var o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return(0,c.privateSet)(o,D,n),(0,c.privateSet)(o,P,r),o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),o(t,[{key:"rerender",value:function(){for(var e,n=arguments.length,o=Array(n),a=0;a<n;a++)o[a]=arguments[a];var i=(e=r(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"rerender",this)).call.apply(e,[this].concat(o));return Y(this),i}},{key:"setState",value:function(){for(var e,n=arguments.length,o=Array(n),a=0;a<n;a++)o[a]=arguments[a];var i=(e=r(t.prototype.__proto__||Object.getPrototypeOf(t.prototype),"setState",this)).call.apply(e,[this].concat(o));return Y(this),i}},{key:"getWrappingComponent",value:function(){throw new Error("ShallowWrapper::getWrappingComponent() can only be called on the root")}}]),t}(V);function Q(e,t){Object.defineProperty(V.prototype,e,{get:function(){throw new Error("\n        Attempted to access ShallowWrapper::"+String(e)+", which was previously a private property on\n        Enzyme ShallowWrapper instances, but is no longer and should not be relied upon.\n        "+String(t)+"\n      ")},enumerable:!1,configurable:!1})}c.ITERATOR_SYMBOL&&Object.defineProperty(V.prototype,c.ITERATOR_SYMBOL,{configurable:!0,value:function(){var e,t=this.getNodesInternal()[c.ITERATOR_SYMBOL](),n=(0,f.default)(this[S]);return g(e={},c.ITERATOR_SYMBOL,(function(){return this})),g(e,"next",(function(){var e=t.next();return e.done?{done:!0}:{done:!1,value:n.nodeToElement(e.value)}})),e}}),Q("node","Consider using the getElement() method instead."),Q("nodes","Consider using the getElements() method instead."),Q("renderer",""),Q("options",""),Q("complexSelector",""),t.default=V},9891:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.shallowEqual=t.ITERATOR_SYMBOL=void 0;var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,o=!1,a=void 0;try{for(var i,s=e[Symbol.iterator]();!(r=(i=s.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{!r&&s.return&&s.return()}finally{if(o)throw a}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")};t.getAdapter=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return console.warn("getAdapter from Utils is deprecated; please use ./getAdapter instead"),(0,g.default)(e)},t.makeOptions=function(e){var t=(0,E.get)(),n=t.attachTo,r=t.hydrateIn,o=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(t,["attachTo","hydrateIn"]);b(n,r);var a=e.attachTo,s=e.hydrateIn;b(a,s);var l=s||r||n||a||void 0,u=s||r||void 0,c=(0,i.default)({},l&&{attachTo:l},u&&{hydrateIn:u});return(0,i.default)({},o,e,c)},t.isCustomComponent=function(e,t){return(0,y.default)(t),t.isCustomComponent?!!t.isCustomComponent(e):"function"==typeof e},t.isCustomComponentElement=function(e,t){return t.isCustomComponentElement?!!t.isCustomComponentElement(e):!!e&&t.isValidElement(e)&&"function"==typeof e.type},t.propsOfNode=v,t.typeOfNode=function(e){return e?e.type:null},t.nodeHasType=function(e,t){if(!t||!e)return!1;var n=(0,g.default)();return n.displayNameOfNode?n.displayNameOfNode(e)===t:!!e.type&&("string"==typeof e.type?e.type===t:("function"==typeof e.type?(0,c.default)(e.type)===t:e.type.name===t)||e.type.displayName===t)},t.nodeMatches=D,t.nodeEqual=P,t.containsChildrenSubArray=function(e,t,n){var r=(0,T.childrenOfNode)(t);return r.some((function(t,o){return function(e,t,n){return t.length===n.length&&t.every((function(t,r){return e(t,n[r])}))}(e,r.slice(o,o+n.length),n)}))},t.childrenToSimplifiedArray=R,t.isReactElementAlike=function(e,t){return t.isValidElement(e)||k(e)||Array.isArray(e)},t.withSetStateAllowed=function(e){var t=!1;void 0===n.g.document&&(t=!0,n.g.document={}),e(),t&&(n.g.document=void 0,delete n.g.document)},t.AND=function(e){var t=e.slice().reverse();return function(e){return t.every((function(t){return t(e)}))}},t.displayNameOfNode=function(e){if(!e)return null;var t=e.type;return t?t.displayName||("function"==typeof t?(0,c.default)(t):t.name||t):null},t.sym=function(e){return"function"==typeof Symbol?Symbol.for("enzyme."+String(e)):e},t.privateSet=function(e,t,n){Object.defineProperty(e,t,{value:n,enumerable:!1,writable:!0})},t.cloneElement=function(e,t,n){return e.createElement(t.type,(0,i.default)({},t.props,n))},t.spyMethod=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:function(){},r=void 0,o=e[t],a=(0,f.default)(e,t),i=void 0;return a&&(i=Object.getOwnPropertyDescriptor(e,t)),Object.defineProperty(e,t,{configurable:!0,enumerable:!i||!!i.enumerable,value:n(o)||function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];var a=o.apply(this,t);return r=a,a}}),{restore:function(){a?i?Object.defineProperty(e,t,i):e[t]=o:delete e[t]},getLastReturnValue:function(){return r}}};var a=n(4470);Object.defineProperty(t,"shallowEqual",{enumerable:!0,get:function(){return _(a).default}}),t.isEmptyValue=w,t.renderedDive=function e(t){return!!w(t)||[].concat(t).every((function(t){if(t){var n=t.rendered;return w(n)||e(n)}return w(t)}))},t.loadCheerioRoot=function(e){return e?(0,m.isHtml)(e)?h.default.load("")(e):h.default.load(e,null,!1).root():h.default.root()};var i=_(n(6525)),s=_(n(8142)),l=_(n(7653)),u=_(n(3932)),c=_(n(1482)),f=_(n(9030)),p=_(n(3003)),d=_(n(214)),h=_(n(5674)),m=n(1067),E=n(408),T=n(9993),g=_(n(5523)),y=_(n(1275));function _(e){return e&&e.__esModule?e:{default:e}}function A(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function b(e,t){if(e&&t&&e!==t)throw new TypeError("If both the `attachTo` and `hydrateIn` options are provided, they must be === (for backwards compatibility)")}function v(e){return(0,u.default)(e&&e.props||{}).filter((function(e){return void 0!==o(e,2)[1]})).reduce((function(e,t){var n=o(t,2),r=n[0],a=n[1];return(0,i.default)(e,A({},r,a))}),{})}function S(e,t,n,r){var o=r?D:P;if(e===t)return!0;if(!Array.isArray(e)&&!Array.isArray(t))return o(e,t,n);var a=(0,p.default)(e,1/0),i=(0,p.default)(t,1/0);if(a.length!==i.length)return!1;if(0===a.length&&0===i.length)return!0;for(var s=0;s<a.length;s+=1)if(!o(a[s],i[s],n))return!1;return!0}function I(e,t,n){return S(e,t,n,!0)}function C(e,t,n){return S(e,t,n,!1)}function N(e,t){var n=o(t,2),r=n[0],a=n[1],s=null==a?{}:A({},r,a);return(0,i.default)({},e,s)}function O(e,t,n,o){if(e===t)return!0;if(!e||!t)return!1;if(e.type!==t.type)return!1;var a=v(e),i=v(t);o&&(a=(0,u.default)(a).reduce(N,{}),i=(0,u.default)(i).reduce(N,{}));for(var l=Object.keys(a),c=0;c<l.length;c+=1){var f=l[c];if("children"===f);else{if(!(f in i))return!1;if(i[f]===a[f]);else{if(r(i[f])!==r(a[f])||"object"!==r(a[f]))return!1;if(!(0,s.default)(a[f],i[f]))return!1}}}var p="children"in a,d="children"in i;if((p||d)&&!(o?I:C)(R(a.children,o),R(i.children,o),n))return!1;if(!k(e)){var h=Object.keys(i);return n(l.length-p,h.length-d)}return!1}function D(e,t){return O(e,t,arguments.length>2&&void 0!==arguments[2]?arguments[2]:l.default,!0)}function P(e,t){return O(e,t,arguments.length>2&&void 0!==arguments[2]?arguments[2]:l.default,!1)}function R(e){for(var t,n,r,o=arguments.length>1&&void 0!==arguments[1]&&arguments[1],a=(t=e,n=[],r=function(e){null!==e&&!1!==e&&void 0!==e&&n.push(e)},Array.isArray(t)?t.forEach(r):r(t),n),i=[],s=0;s<a.length;s+=1){var l=a[s],u=i.pop();void 0===u?i.push(l):k(l)&&k(u)?i.push(u+l):(i.push(u),i.push(l))}return o?i.map((function(e){return"string"==typeof e?(0,d.default)(e):e})):i}function k(e){return"string"==typeof e||"number"==typeof e}function w(e){return null===e||!1===e}t.ITERATOR_SYMBOL="function"==typeof Symbol&&Symbol.iterator},408:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.get=function(){return(0,r.default)({},i)},t.merge=s,t.reset=function(){i={},s(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{})};var r=a(n(6525)),o=a(n(1275));function a(e){return e&&e.__esModule?e:{default:e}}var i={};function s(e){e.adapter&&(0,o.default)(e.adapter),(0,r.default)(i,e)}},5523:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(e.adapter)return(0,o.default)(e.adapter),e.adapter;var t=(0,a.get)().adapter;return(0,o.default)(t),t};var r,o=(r=n(1275))&&r.__esModule?r:{default:r},a=n(408)},3074:(e,t,n)=>{"use strict";var r=c(n(7042)),o=c(n(2391)),a=c(n(8469)),i=c(n(1331)),s=c(n(386)),l=c(n(8116)),u=n(408);function c(e){return e&&e.__esModule?e:{default:e}}e.exports={render:l.default,shallow:s.default,mount:i.default,ShallowWrapper:o.default,ReactWrapper:r.default,configure:u.merge,EnzymeAdapter:a.default}},1331:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){return new o.default(e,null,t)};var r,o=(r=n(7042))&&r.__esModule?r:{default:r}},8116:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=(0,o.default)(t).createRenderer((0,r.default)({mode:"string"},t)).render(e,t.context);return(0,a.loadCheerioRoot)(n)};var r=i(n(6525)),o=i(n(5523)),a=n(9891);function i(e){return e&&e.__esModule?e:{default:e}}},152:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,o=!1,a=void 0;try{for(var i,s=e[Symbol.iterator]();!(r=(i=s.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,a=e}finally{try{!r&&s.return&&s.return()}finally{if(o)throw a}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")};t.buildPredicate=F,t.reduceTreeBySelector=W,t.reduceTreesBySelector=function(e,t){var n=t.map((function(t){return W(e,t)}));return M((0,s.default)(n,1))};var a=n(6013),i=h(n(8638)),s=h(n(3003)),l=h(n(7653)),u=h(n(9030)),c=h(n(9317)),f=n(9993),p=n(9891),d=h(n(5523));function h(e){return e&&e.__esModule?e:{default:e}}var m=(0,a.createParser)(),E="childCombinator",T="adjacentSiblingCombinator",g="generalSiblingCombinator",y="descendantCombinator",_="selector",A="typeSelector",b="classSelector",v="idSelector",S="universalSelector",I="attributePresenceSelector",C="attributeValueSelector",N="pseudoClassSelector",O="pseudoElementSelector",D="=",P="~=",R="|=",k="^=",w="$=",L="*=";function M(e){return[].concat(function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}(new Set(e)))}function x(e,t){return M(t.reduce(e,[]))}function G(e){try{return m.parse(e)}catch(t){throw new Error("Failed to parse selector: "+String(e))}}function B(e,t,n){if(null===e||"string"==typeof e)return!1;switch(t.type){case S:return!0;case b:return(0,f.hasClassName)(e,t.name);case A:return(0,p.nodeHasType)(e,t.name);case v:return(0,f.nodeHasId)(e,t.name);case I:case C:return function(e,t){var n=t.operator,r=t.value,o=t.name,a=(0,p.propsOfNode)(e),i=Object.getOwnPropertyDescriptor(a,o);if(i&&i.get)return!1;var s=a[o];if(void 0===s)return!1;if(t.type===I)return(0,u.default)(a,t.name);if(("string"!=typeof s||"string"!=typeof r)&&n!==D)return!1;switch(n){case D:return(0,l.default)(s,r);case P:return-1!==s.split(" ").indexOf(r);case R:return s===r||s.startsWith(String(r)+"-");case k:return""!==r&&s.slice(0,r.length)===r;case w:return""!==r&&s.slice(-r.length)===r;case L:return""!==r&&-1!==s.indexOf(r);default:throw new Error('Enzyme::Selector: Unknown attribute selector operator "'+String(n)+'"')}}(e,t);case O:case N:return function(e,t,n){var r=t.name,a=t.parameters;if("not"===r)return a.every((function(t){return 0===W(t,e).length}));if("empty"===r)return 0===(0,f.treeFilter)(e,(function(t){return t!==e})).length;if("first-child"===r){var i=(0,f.findParentNode)(n,e).rendered;return o(i,1)[0]===e}if("last-child"===r){var s=(0,f.findParentNode)(n,e).rendered;return s[s.length-1]===e}if("focus"===r){if("undefined"==typeof document)throw new Error('Enzyme::Selector does not support the ":focus" pseudo-element without a global `document`.');var l=(0,d.default)();return document.activeElement&&l.nodeToHostNode(e)===document.activeElement}throw new TypeError('Enzyme::Selector does not support the "'+String(t.name)+'" pseudo-element or pseudo-class selectors.')}(e,t,n);default:throw new Error("Unknown token type: "+String(t.type))}}function H(e,t){return function(n){return e.body.every((function(e){return B(n,e,t)}))}}function F(e){if("string"==typeof e){var t=G(e);if(function(e){return e.some((function(e){return e.type!==_}))}(t))throw new TypeError("This method does not support complex CSS selectors");return H(t[0])}var n=(0,d.default)();if(n.isValidElementType?n.isValidElementType(e):"function"==typeof e)return function(t){return n.matchesElementType(t,e)};if("object"===(void 0===e?"undefined":r(e))){if(!Array.isArray(e)&&null!==e&&Object.keys(e).length>0){if((0,i.default)(e).some((function(e){return void 0===e})))throw new TypeError("Enzyme::Props can’t have `undefined` values. Try using ‘findWhere()’ instead.");return function(t){return(0,f.nodeMatchesObjectProps)(t,e)}}throw new TypeError("Enzyme::Selector does not support an array, null, or empty object as a selector")}throw new TypeError("Enzyme::Selector expects a string, object, or valid element type (Component Constructor)")}function U(e,t,n){return e.reduce((function(e,r){var o=(0,f.findParentNode)(n,r);if(!o)return e;var a=(0,f.childrenOfNode)(o),i=a.indexOf(r),s=a[i+1];return s?(t(s)&&e.push(s),e):e}),[])}function j(e,t,n){return x((function(e,r){var o=(0,f.findParentNode)(n,r);if(!o)return e;var a=(0,f.childrenOfNode)(o),i=a.indexOf(r),s=a.slice(i+1);return e.concat(s.filter(t))}),e)}function q(e,t){return x((function(e,n){return e.concat((0,f.childrenOfNode)(n).filter(t))}),e)}function z(e,t){return x((function(e,n){return e.concat((0,f.treeFilter)(n,t))}),(0,s.default)(e.map(f.childrenOfNode)))}function W(e,t){if("string"!=typeof e){var n=(0,c.default)(e);if(n.length>0)return(0,s.default)(n.map((function(e){return W(e.tag,t)})))}if("function"==typeof e||"object"===(void 0===e?"undefined":r(e)))return(0,f.treeFilter)(t,F(e));var o=[];if("string"!=typeof e)throw new TypeError("Enzyme::Selector expects a string, object, or Component Constructor");for(var a=G(e),i=0;i<a.length;){var l=a[i];if(l.type===_){var u=H(l,t);o=o.concat((0,f.treeFilter)(t,u))}else{var p=l.type,d=H(a[i+=1],t);switch(p){case T:o=U(o,d,t);break;case g:o=j(o,d,t);break;case E:o=q(o,d);break;case y:o=z(o,d);break;default:throw new Error("Unknown combinator selector: "+String(p))}}i+=1}return o}},386:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){return new o.default(e,null,t)};var r,o=(r=n(2391))&&r.__esModule?r:{default:r}},1275:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){if(!e)throw new Error("\n      Enzyme Internal Error: Enzyme expects an adapter to be configured, but found none.\n      To configure an adapter, you should call `Enzyme.configure({ adapter: new Adapter() })`\n      before using any of Enzyme's top level APIs, where `Adapter` is the adapter\n      corresponding to the library currently being tested. For example:\n\n      import Adapter from 'enzyme-adapter-react-15';\n\n      To find out more about this, see https://airbnb.io/enzyme/docs/installation/index.html\n    ");if("function"==typeof e){if(Object.getPrototypeOf(e)===o.default)throw new Error("\n        Enzyme Internal Error: Enzyme expects an adapter instance to be configured -\n        you provided an adapter *constructor*.\n        To configure an adapter, you should call `Enzyme.configure({ adapter: new Adapter() })`\n        before using any of Enzyme's top level APIs, where `Adapter` is the adapter\n        corresponding to the library currently being tested. For example:\n\n        import Adapter from 'enzyme-adapter-react-15';\n\n        To find out more about this, see https://airbnb.io/enzyme/docs/installation/index.html\n      ");throw new Error("\n      Enzyme Internal Error: Enzyme expects an adapter to be configured -\n      an enzyme adapter must be an object instance; you provided a function.\n      To configure an adapter, you should call `Enzyme.configure({ adapter: new Adapter() })`\n      before using any of Enzyme's top level APIs, where `Adapter` is the adapter\n      corresponding to the library currently being tested. For example:\n\n      import Adapter from 'enzyme-adapter-react-15';\n\n      To find out more about this, see https://airbnb.io/enzyme/docs/installation/index.html\n    ")}if(!(e instanceof o.default))throw new Error("Enzyme Internal Error: configured enzyme adapter did not inherit from the EnzymeAdapter base class")};var r,o=(r=n(8469))&&r.__esModule?r:{default:r}},7777:e=>{e.exports=function(e){var t=!0,n=!0,r=!1;if("function"==typeof e){try{e.call("f",(function(e,n,r){"object"!=typeof r&&(t=!1)})),e.call([null],(function(){"use strict";n="string"==typeof this}),"x")}catch(e){r=!0}return!r&&t&&n}return!1}},655:(e,t,n)=>{"use strict";var r=n(453)("%Object.defineProperty%",!0)||!1;if(r)try{r({},"a",{value:1})}catch(e){r=!1}e.exports=r},1237:e=>{"use strict";e.exports=EvalError},9383:e=>{"use strict";e.exports=Error},9290:e=>{"use strict";e.exports=RangeError},9538:e=>{"use strict";e.exports=ReferenceError},8068:e=>{"use strict";e.exports=SyntaxError},9675:e=>{"use strict";e.exports=TypeError},5345:e=>{"use strict";e.exports=URIError},5388:(e,t,n)=>{"use strict";var r=n(9675);e.exports=function(e){if(null==e)throw new r(arguments.length>0&&arguments[1]||"Cannot call method on "+e);return e}},3348:(e,t,n)=>{"use strict";var r=n(9612),o=n(5388);e.exports=function(e){return o(e),r(e)}},9612:e=>{"use strict";e.exports=Object},3295:(e,t,n)=>{"use strict";var r=n(9957),o="function"==typeof Symbol&&"symbol"==typeof Symbol.unscopables,a=o&&Array.prototype[Symbol.unscopables],i=TypeError;e.exports=function(e){if("string"!=typeof e||!e)throw new i("method must be a non-empty string");if(!r(Array.prototype,e))throw new i("method must be on Array.prototype");o&&(a[e]=!0)}},5437:(e,t,n)=>{"use strict";var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator,o=n(162),a=n(9600),i=n(2120),s=n(3612);e.exports=function(e){if(o(e))return e;var t,n="default";if(arguments.length>1&&(arguments[1]===String?n="string":arguments[1]===Number&&(n="number")),r&&(Symbol.toPrimitive?t=function(e,t){var n=e[t];if(null!=n){if(!a(n))throw new TypeError(n+" returned for property "+t+" of object "+e+" is not a function");return n}}(e,Symbol.toPrimitive):s(e)&&(t=Symbol.prototype.valueOf)),void 0!==t){var l=t.call(e,n);if(o(l))return l;throw new TypeError("unable to convert exotic object to primitive")}return"default"===n&&(i(e)||s(e))&&(n="string"),function(e,t){if(null==e)throw new TypeError("Cannot call method on "+e);if("string"!=typeof t||"number"!==t&&"string"!==t)throw new TypeError('hint must be "string" or "number"');var n,r,i,s="string"===t?["toString","valueOf"]:["valueOf","toString"];for(i=0;i<s.length;++i)if(n=e[s[i]],a(n)&&(r=n.call(e),o(r)))return r;throw new TypeError("No default value")}(e,"default"===n?"number":n)}},162:e=>{"use strict";e.exports=function(e){return null===e||"function"!=typeof e&&"object"!=typeof e}},9353:e=>{"use strict";var t=Object.prototype.toString,n=Math.max,r=function(e,t){for(var n=[],r=0;r<e.length;r+=1)n[r]=e[r];for(var o=0;o<t.length;o+=1)n[o+e.length]=t[o];return n};e.exports=function(e){var o=this;if("function"!=typeof o||"[object Function]"!==t.apply(o))throw new TypeError("Function.prototype.bind called on incompatible "+o);for(var a,i=function(e,t){for(var n=[],r=1,o=0;r<e.length;r+=1,o+=1)n[o]=e[r];return n}(arguments),s=n(0,o.length-i.length),l=[],u=0;u<s;u++)l[u]="$"+u;if(a=Function("binder","return function ("+function(e,t){for(var n="",r=0;r<e.length;r+=1)n+=e[r],r+1<e.length&&(n+=",");return n}(l)+"){ return binder.apply(this,arguments); }")((function(){if(this instanceof a){var t=o.apply(this,r(i,arguments));return Object(t)===t?t:this}return o.apply(e,r(i,arguments))})),o.prototype){var c=function(){};c.prototype=o.prototype,a.prototype=new c,c.prototype=null}return a}},6743:(e,t,n)=>{"use strict";var r=n(9353);e.exports=Function.prototype.bind||r},34:(e,t,n)=>{"use strict";var r=n(4377),o=n(8356),a=n(4462)(),i=n(8075),s=i("Function.prototype.toString"),l=i("String.prototype.match"),u=i("Object.prototype.toString"),c=/^class /,f=/\s*function\s+([^(\s]*)\s*/,p=!(0 in[,]),d=Function.prototype,h=function(){return!1};if("object"==typeof document){var m=document.all;u(m)===u(document.all)&&(h=function(e){if((p||!e)&&(void 0===e||"object"==typeof e))try{var t=u(e);return("[object HTMLAllCollection]"===t||"[object Object]"===t)&&null==e("")}catch(e){}return!1})}e.exports=function(){if(h(this)||!function(e){if(r(e))return!1;if("function"!=typeof e)return!1;try{return!!l(s(e),c)}catch(e){}return!1}(this)&&!r(this))throw new TypeError("Function.prototype.name sham getter called on non-function");if(a&&o(this,"name"))return this.name;if(this===d)return"";var e=s(this),t=l(e,f);return t&&t[1]}},1482:(e,t,n)=>{"use strict";var r=n(8452),o=n(487),a=n(34),i=n(2747),s=n(8013),l=o(a);r(l,{getPolyfill:i,implementation:a,shim:s}),e.exports=l},2747:(e,t,n)=>{"use strict";var r=n(34);e.exports=function(){return r}},8013:(e,t,n)=>{"use strict";var r=n(8452).supportsDescriptors,o=n(4462)(),a=n(2747),i=Object.defineProperty,s=TypeError;e.exports=function(){var e=a();if(o)return e;if(!r)throw new s("Shimming Function.prototype.name support requires ES5 property descriptor support.");var t=Function.prototype;return i(t,"name",{configurable:!0,enumerable:!1,get:function(){var n=e.call(this);return this!==t&&i(this,"name",{configurable:!0,enumerable:!1,value:n,writable:!1}),n}}),e}},4462:e=>{"use strict";var t=function(){return"string"==typeof function(){}.name},n=Object.getOwnPropertyDescriptor;if(n)try{n([],"length")}catch(e){n=null}t.functionsHaveConfigurableNames=function(){if(!t()||!n)return!1;var e=n((function(){}),"name");return!!e&&!!e.configurable};var r=Function.prototype.bind;t.boundFunctionsHaveNames=function(){return t()&&"function"==typeof r&&""!==function(){}.bind().name},e.exports=t},453:(e,t,n)=>{"use strict";var r,o=n(9383),a=n(1237),i=n(9290),s=n(9538),l=n(8068),u=n(9675),c=n(5345),f=Function,p=function(e){try{return f('"use strict"; return ('+e+").constructor;")()}catch(e){}},d=Object.getOwnPropertyDescriptor;if(d)try{d({},"")}catch(e){d=null}var h=function(){throw new u},m=d?function(){try{return h}catch(e){try{return d(arguments,"callee").get}catch(e){return h}}}():h,E=n(4039)(),T=n(24)(),g=Object.getPrototypeOf||(T?function(e){return e.__proto__}:null),y={},_="undefined"!=typeof Uint8Array&&g?g(Uint8Array):r,A={__proto__:null,"%AggregateError%":"undefined"==typeof AggregateError?r:AggregateError,"%Array%":Array,"%ArrayBuffer%":"undefined"==typeof ArrayBuffer?r:ArrayBuffer,"%ArrayIteratorPrototype%":E&&g?g([][Symbol.iterator]()):r,"%AsyncFromSyncIteratorPrototype%":r,"%AsyncFunction%":y,"%AsyncGenerator%":y,"%AsyncGeneratorFunction%":y,"%AsyncIteratorPrototype%":y,"%Atomics%":"undefined"==typeof Atomics?r:Atomics,"%BigInt%":"undefined"==typeof BigInt?r:BigInt,"%BigInt64Array%":"undefined"==typeof BigInt64Array?r:BigInt64Array,"%BigUint64Array%":"undefined"==typeof BigUint64Array?r:BigUint64Array,"%Boolean%":Boolean,"%DataView%":"undefined"==typeof DataView?r:DataView,"%Date%":Date,"%decodeURI%":decodeURI,"%decodeURIComponent%":decodeURIComponent,"%encodeURI%":encodeURI,"%encodeURIComponent%":encodeURIComponent,"%Error%":o,"%eval%":eval,"%EvalError%":a,"%Float32Array%":"undefined"==typeof Float32Array?r:Float32Array,"%Float64Array%":"undefined"==typeof Float64Array?r:Float64Array,"%FinalizationRegistry%":"undefined"==typeof FinalizationRegistry?r:FinalizationRegistry,"%Function%":f,"%GeneratorFunction%":y,"%Int8Array%":"undefined"==typeof Int8Array?r:Int8Array,"%Int16Array%":"undefined"==typeof Int16Array?r:Int16Array,"%Int32Array%":"undefined"==typeof Int32Array?r:Int32Array,"%isFinite%":isFinite,"%isNaN%":isNaN,"%IteratorPrototype%":E&&g?g(g([][Symbol.iterator]())):r,"%JSON%":"object"==typeof JSON?JSON:r,"%Map%":"undefined"==typeof Map?r:Map,"%MapIteratorPrototype%":"undefined"!=typeof Map&&E&&g?g((new Map)[Symbol.iterator]()):r,"%Math%":Math,"%Number%":Number,"%Object%":Object,"%parseFloat%":parseFloat,"%parseInt%":parseInt,"%Promise%":"undefined"==typeof Promise?r:Promise,"%Proxy%":"undefined"==typeof Proxy?r:Proxy,"%RangeError%":i,"%ReferenceError%":s,"%Reflect%":"undefined"==typeof Reflect?r:Reflect,"%RegExp%":RegExp,"%Set%":"undefined"==typeof Set?r:Set,"%SetIteratorPrototype%":"undefined"!=typeof Set&&E&&g?g((new Set)[Symbol.iterator]()):r,"%SharedArrayBuffer%":"undefined"==typeof SharedArrayBuffer?r:SharedArrayBuffer,"%String%":String,"%StringIteratorPrototype%":E&&g?g(""[Symbol.iterator]()):r,"%Symbol%":E?Symbol:r,"%SyntaxError%":l,"%ThrowTypeError%":m,"%TypedArray%":_,"%TypeError%":u,"%Uint8Array%":"undefined"==typeof Uint8Array?r:Uint8Array,"%Uint8ClampedArray%":"undefined"==typeof Uint8ClampedArray?r:Uint8ClampedArray,"%Uint16Array%":"undefined"==typeof Uint16Array?r:Uint16Array,"%Uint32Array%":"undefined"==typeof Uint32Array?r:Uint32Array,"%URIError%":c,"%WeakMap%":"undefined"==typeof WeakMap?r:WeakMap,"%WeakRef%":"undefined"==typeof WeakRef?r:WeakRef,"%WeakSet%":"undefined"==typeof WeakSet?r:WeakSet};if(g)try{null.error}catch(e){var b=g(g(e));A["%Error.prototype%"]=b}var v=function e(t){var n;if("%AsyncFunction%"===t)n=p("async function () {}");else if("%GeneratorFunction%"===t)n=p("function* () {}");else if("%AsyncGeneratorFunction%"===t)n=p("async function* () {}");else if("%AsyncGenerator%"===t){var r=e("%AsyncGeneratorFunction%");r&&(n=r.prototype)}else if("%AsyncIteratorPrototype%"===t){var o=e("%AsyncGenerator%");o&&g&&(n=g(o.prototype))}return A[t]=n,n},S={__proto__:null,"%ArrayBufferPrototype%":["ArrayBuffer","prototype"],"%ArrayPrototype%":["Array","prototype"],"%ArrayProto_entries%":["Array","prototype","entries"],"%ArrayProto_forEach%":["Array","prototype","forEach"],"%ArrayProto_keys%":["Array","prototype","keys"],"%ArrayProto_values%":["Array","prototype","values"],"%AsyncFunctionPrototype%":["AsyncFunction","prototype"],"%AsyncGenerator%":["AsyncGeneratorFunction","prototype"],"%AsyncGeneratorPrototype%":["AsyncGeneratorFunction","prototype","prototype"],"%BooleanPrototype%":["Boolean","prototype"],"%DataViewPrototype%":["DataView","prototype"],"%DatePrototype%":["Date","prototype"],"%ErrorPrototype%":["Error","prototype"],"%EvalErrorPrototype%":["EvalError","prototype"],"%Float32ArrayPrototype%":["Float32Array","prototype"],"%Float64ArrayPrototype%":["Float64Array","prototype"],"%FunctionPrototype%":["Function","prototype"],"%Generator%":["GeneratorFunction","prototype"],"%GeneratorPrototype%":["GeneratorFunction","prototype","prototype"],"%Int8ArrayPrototype%":["Int8Array","prototype"],"%Int16ArrayPrototype%":["Int16Array","prototype"],"%Int32ArrayPrototype%":["Int32Array","prototype"],"%JSONParse%":["JSON","parse"],"%JSONStringify%":["JSON","stringify"],"%MapPrototype%":["Map","prototype"],"%NumberPrototype%":["Number","prototype"],"%ObjectPrototype%":["Object","prototype"],"%ObjProto_toString%":["Object","prototype","toString"],"%ObjProto_valueOf%":["Object","prototype","valueOf"],"%PromisePrototype%":["Promise","prototype"],"%PromiseProto_then%":["Promise","prototype","then"],"%Promise_all%":["Promise","all"],"%Promise_reject%":["Promise","reject"],"%Promise_resolve%":["Promise","resolve"],"%RangeErrorPrototype%":["RangeError","prototype"],"%ReferenceErrorPrototype%":["ReferenceError","prototype"],"%RegExpPrototype%":["RegExp","prototype"],"%SetPrototype%":["Set","prototype"],"%SharedArrayBufferPrototype%":["SharedArrayBuffer","prototype"],"%StringPrototype%":["String","prototype"],"%SymbolPrototype%":["Symbol","prototype"],"%SyntaxErrorPrototype%":["SyntaxError","prototype"],"%TypedArrayPrototype%":["TypedArray","prototype"],"%TypeErrorPrototype%":["TypeError","prototype"],"%Uint8ArrayPrototype%":["Uint8Array","prototype"],"%Uint8ClampedArrayPrototype%":["Uint8ClampedArray","prototype"],"%Uint16ArrayPrototype%":["Uint16Array","prototype"],"%Uint32ArrayPrototype%":["Uint32Array","prototype"],"%URIErrorPrototype%":["URIError","prototype"],"%WeakMapPrototype%":["WeakMap","prototype"],"%WeakSetPrototype%":["WeakSet","prototype"]},I=n(6743),C=n(9957),N=I.call(Function.call,Array.prototype.concat),O=I.call(Function.apply,Array.prototype.splice),D=I.call(Function.call,String.prototype.replace),P=I.call(Function.call,String.prototype.slice),R=I.call(Function.call,RegExp.prototype.exec),k=/[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g,w=/\\(\\)?/g,L=function(e,t){var n,r=e;if(C(S,r)&&(r="%"+(n=S[r])[0]+"%"),C(A,r)){var o=A[r];if(o===y&&(o=v(r)),void 0===o&&!t)throw new u("intrinsic "+e+" exists, but is not available. Please file an issue!");return{alias:n,name:r,value:o}}throw new l("intrinsic "+e+" does not exist!")};e.exports=function(e,t){if("string"!=typeof e||0===e.length)throw new u("intrinsic name must be a non-empty string");if(arguments.length>1&&"boolean"!=typeof t)throw new u('"allowMissing" argument must be a boolean');if(null===R(/^%?[^%]*%?$/,e))throw new l("`%` may not be present anywhere but at the beginning and end of the intrinsic name");var n=function(e){var t=P(e,0,1),n=P(e,-1);if("%"===t&&"%"!==n)throw new l("invalid intrinsic syntax, expected closing `%`");if("%"===n&&"%"!==t)throw new l("invalid intrinsic syntax, expected opening `%`");var r=[];return D(e,k,(function(e,t,n,o){r[r.length]=n?D(o,w,"$1"):t||e})),r}(e),r=n.length>0?n[0]:"",o=L("%"+r+"%",t),a=o.name,i=o.value,s=!1,c=o.alias;c&&(r=c[0],O(n,N([0,1],c)));for(var f=1,p=!0;f<n.length;f+=1){var h=n[f],m=P(h,0,1),E=P(h,-1);if(('"'===m||"'"===m||"`"===m||'"'===E||"'"===E||"`"===E)&&m!==E)throw new l("property names with quotes must have matching quotes");if("constructor"!==h&&p||(s=!0),C(A,a="%"+(r+="."+h)+"%"))i=A[a];else if(null!=i){if(!(h in i)){if(!t)throw new u("base intrinsic for "+e+" exists, but the property is not available.");return}if(d&&f+1>=n.length){var T=d(i,h);i=(p=!!T)&&"get"in T&&!("originalValue"in T.get)?T.get:i[h]}else p=C(i,h),i=i[h];p&&!s&&(A[a]=i)}}return i}},5795:(e,t,n)=>{"use strict";var r=n(453)("%Object.getOwnPropertyDescriptor%",!0);if(r)try{r([],"length")}catch(e){r=null}e.exports=r},592:(e,t,n)=>{"use strict";var r=n(655),o=function(){return!!r};o.hasArrayLengthDefineBug=function(){if(!r)return null;try{return 1!==r([],"length",{value:1}).length}catch(e){return!0}},e.exports=o},24:e=>{"use strict";var t={__proto__:null,foo:{}},n=Object;e.exports=function(){return{__proto__:t}.foo===t.foo&&!(t instanceof n)}},4039:(e,t,n)=>{"use strict";var r="undefined"!=typeof Symbol&&Symbol,o=n(1333);e.exports=function(){return"function"==typeof r&&"function"==typeof Symbol&&"symbol"==typeof r("foo")&&"symbol"==typeof Symbol("bar")&&o()}},1333:e=>{"use strict";e.exports=function(){if("function"!=typeof Symbol||"function"!=typeof Object.getOwnPropertySymbols)return!1;if("symbol"==typeof Symbol.iterator)return!0;var e={},t=Symbol("test"),n=Object(t);if("string"==typeof t)return!1;if("[object Symbol]"!==Object.prototype.toString.call(t))return!1;if("[object Symbol]"!==Object.prototype.toString.call(n))return!1;for(t in e[t]=42,e)return!1;if("function"==typeof Object.keys&&0!==Object.keys(e).length)return!1;if("function"==typeof Object.getOwnPropertyNames&&0!==Object.getOwnPropertyNames(e).length)return!1;var r=Object.getOwnPropertySymbols(e);if(1!==r.length||r[0]!==t)return!1;if(!Object.prototype.propertyIsEnumerable.call(e,t))return!1;if("function"==typeof Object.getOwnPropertyDescriptor){var o=Object.getOwnPropertyDescriptor(e,t);if(42!==o.value||!0!==o.enumerable)return!1}return!0}},9092:(e,t,n)=>{"use strict";var r=n(1333);e.exports=function(){return r()&&!!Symbol.toStringTag}},9030:e=>{"use strict";var t={}.hasOwnProperty,n=Function.prototype.call;e.exports=n.bind?n.bind(t):function(e,r){return n.call(t,e,r)}},9957:(e,t,n)=>{"use strict";var r=Function.prototype.call,o=Object.prototype.hasOwnProperty,a=n(6743);e.exports=a.call(r,o)},9317:(e,t,n)=>{"use strict";var r=n(7406),o=n(9626);e.exports=function(e){if(!e)return[];var t=o();return e===t.unknown?[]:e===t.all?t.elements:r(t.elements,(function(t){return t.constructor===e}))}},9626:(e,t,n)=>{"use strict";var r=n(8075)("Array.prototype.push"),o=function(e,t){for(var n=[],o=0;o<e.length;o+=1)r(n,t(e[o],o));return n},a=[["HTMLElement","article"],["HTMLElement","section"],["HTMLBaseFontElement","basefont","HTMLBaseFontElementConstructor"],["HTMLPhraseElement","cite","HTMLElement"],["HTMLElement","noscript"],["HTMLBGSoundElement","bgsound","HTMLElement"],["HTMLPhraseElement","blink","HTMLElement"],["HTMLElement","multicol"],["HTMLNextIdElement","nextid","HTMLElement"],["HTMLElement","rb"],["HTMLElement","spacer"],["HTMLAnchorElement","a","HTMLElement"],["HTMLAreaElement","area","HTMLElement"],["HTMLAudioElement","audio","HTMLElement"],["HTMLBaseElement","base","HTMLElement"],["HTMLBodyElement","body","HTMLElement"],["HTMLBRElement","br","HTMLElement"],["HTMLButtonElement","button"],["HTMLCanvasElement","canvas"],["HTMLContentElement","content","HTMLElement"],["HTMLDataElement","data","HTMLElement"],["HTMLDataListElement","datalist"],["HTMLDialogElement","dialog","HTMLElement"],["HTMLDirectoryElement","dir"],["HTMLDivElement","div"],["HTMLDListElement","dl"],["HTMLEmbedElement","embed"],["HTMLFieldSetElement","fieldset"],["HTMLFontElement","font"],["HTMLFormElement","form"],["HTMLFrameElement","frame"],["HTMLFrameSetElement","frameset"],["HTMLHeadElement","head"],["HTMLHeadingElement","h1"],["HTMLHeadingElement","h2"],["HTMLHeadingElement","h3"],["HTMLHeadingElement","h4"],["HTMLHeadingElement","h5"],["HTMLHeadingElement","h6"],["HTMLHtmlElement","html"],["HTMLHRElement","hr"],["HTMLIFrameElement","iframe"],["HTMLImageElement","img"],["HTMLInputElement","input"],["HTMLIsIndexElement","index","HTMLElement"],["HTMLKeygenElement","keygen","HTMLBlockElement"],["HTMLLabelElement","label"],["HTMLLegendElement","legend"],["HTMLLIElement","li"],["HTMLLinkElement","link"],["HTMLElement","main"],["HTMLMapElement","map"],["HTMLMarqueeElement","marquee"],["HTMLMenuElement","menu"],["HTMLMetaElement","meta"],["HTMLMeterElement","meter","HTMLElement"],["HTMLModElement","del"],["HTMLModElement","ins"],["HTMLObjectElement","object"],["HTMLOListElement","ol"],["HTMLOptGroupElement","optgroup"],["HTMLOptionElement","option"],["HTMLOutputElement","output"],["HTMLParagraphElement","p"],["HTMLParamElement","param"],["HTMLPictureElement","picture","HTMLElement"],["HTMLPreElement","pre"],["HTMLProgressElement","progress","HTMLElement"],["HTMLQuoteElement","q","HTMLBlockquoteElement"],["HTMLQuoteElement","blockquote","HTMLBlockElement","HTMLBlockquoteElement"],["HTMLScriptElement","script"],["HTMLSelectElement","select"],["HTMLShadowElement","shadow","HTMLElement"],["HTMLSourceElement","source"],["HTMLSpanElement","span","HTMLElement"],["HTMLStyleElement","style"],["HTMLTableElement","table"],["HTMLTableCaptionElement","caption"],["HTMLTableCellElement","td","HTMLTableDataCellElement"],["HTMLTableCellElement","th","HTMLTableHeaderCellElement"],["HTMLTableRowElement","tr"],["HTMLTableColElement","col"],["HTMLTableColElement","colgroup"],["HTMLTableSectionElement","tbody"],["HTMLTableSectionElement","thead"],["HTMLTableSectionElement","tfoot"],["HTMLTemplateElement","template","HTMLElement"],["HTMLTextAreaElement","textarea"],["HTMLTimeElement","time","HTMLElement"],["HTMLTitleElement","title"],["HTMLTrackElement","track","HTMLElement"],["HTMLUListElement","ul"],["HTMLVideoElement","video"],["HTMLElement","abbr"],["HTMLElement","address"],["HTMLElement","aside"],["HTMLElement","b"],["HTMLElement","bdi"],["HTMLElement","bdo"],["HTMLElement","code"],["HTMLElement","dd"],["HTMLDetailsElement","details","HTMLElement"],["HTMLElement","dfn"],["HTMLElement","dt"],["HTMLElement","em"],["HTMLElement","figcaption"],["HTMLElement","figure"],["HTMLElement","footer"],["HTMLElement","header"],["HTMLElement","hgroup"],["HTMLElement","i"],["HTMLElement","kbd"],["HTMLElement","mark"],["HTMLElement","nav"],["HTMLElement","rp"],["HTMLElement","rt"],["HTMLElement","ruby"],["HTMLElement","s"],["HTMLElement","samp"],["HTMLSlotElement","slot","HTMLElement"],["HTMLElement","small"],["HTMLElement","strong"],["HTMLElement","summary"],["HTMLElement","u"],["HTMLElement","var"],["HTMLElement","wbr"]],i=function(e,t,n){if("undefined"!=typeof document&&"function"==typeof document.createElement){var r=document.createElement(e).constructor;if(r!==n)return r}};e.exports=function(){var e=n.g.HTMLUnknownElement;return{all:n.g.HTMLElement,elements:o(a,(function(t){for(var r,o,a=t[0],s=t[1],l=2;l<arguments.length&&!o;l+=1)o=(r=t[l])&&n.g[r];var u=n.g[a];return{constructor:i(s,0,e),constructorName:o?r:a,expectedConstructor:o||u,tag:s}})),unknown:e}}},1724:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var o=Object.getOwnPropertyDescriptor(t,n);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,o)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return o(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Parser=void 0;var i=a(n(7918)),s=n(9878),l=new Set(["input","option","optgroup","select","button","datalist","textarea"]),u=new Set(["p"]),c=new Set(["thead","tbody"]),f=new Set(["dd","dt"]),p=new Set(["rt","rp"]),d=new Map([["tr",new Set(["tr","th","td"])],["th",new Set(["th"])],["td",new Set(["thead","th","td"])],["body",new Set(["head","link","script"])],["li",new Set(["li"])],["p",u],["h1",u],["h2",u],["h3",u],["h4",u],["h5",u],["h6",u],["select",l],["input",l],["output",l],["button",l],["datalist",l],["textarea",l],["option",new Set(["option"])],["optgroup",new Set(["optgroup","option"])],["dd",f],["dt",f],["address",u],["article",u],["aside",u],["blockquote",u],["details",u],["div",u],["dl",u],["fieldset",u],["figcaption",u],["figure",u],["footer",u],["form",u],["header",u],["hr",u],["main",u],["nav",u],["ol",u],["pre",u],["section",u],["table",u],["ul",u],["rt",p],["rp",p],["tbody",c],["tfoot",c]]),h=new Set(["area","base","basefont","br","col","command","embed","frame","hr","img","input","isindex","keygen","link","meta","param","source","track","wbr"]),m=new Set(["math","svg"]),E=new Set(["mi","mo","mn","ms","mtext","annotation-xml","foreignobject","desc","title"]),T=/\s|\//,g=function(){function e(e,t){var n,r,o,a,s;void 0===t&&(t={}),this.options=t,this.startIndex=0,this.endIndex=0,this.openTagStart=0,this.tagname="",this.attribname="",this.attribvalue="",this.attribs=null,this.stack=[],this.foreignContext=[],this.buffers=[],this.bufferOffset=0,this.writeIndex=0,this.ended=!1,this.cbs=null!=e?e:{},this.lowerCaseTagNames=null!==(n=t.lowerCaseTags)&&void 0!==n?n:!t.xmlMode,this.lowerCaseAttributeNames=null!==(r=t.lowerCaseAttributeNames)&&void 0!==r?r:!t.xmlMode,this.tokenizer=new(null!==(o=t.Tokenizer)&&void 0!==o?o:i.default)(this.options,this),null===(s=(a=this.cbs).onparserinit)||void 0===s||s.call(a,this)}return e.prototype.ontext=function(e,t){var n,r,o=this.getSlice(e,t);this.endIndex=t-1,null===(r=(n=this.cbs).ontext)||void 0===r||r.call(n,o),this.startIndex=t},e.prototype.ontextentity=function(e){var t,n,r=this.tokenizer.getSectionStart();this.endIndex=r-1,null===(n=(t=this.cbs).ontext)||void 0===n||n.call(t,(0,s.fromCodePoint)(e)),this.startIndex=r},e.prototype.isVoidElement=function(e){return!this.options.xmlMode&&h.has(e)},e.prototype.onopentagname=function(e,t){this.endIndex=t;var n=this.getSlice(e,t);this.lowerCaseTagNames&&(n=n.toLowerCase()),this.emitOpenTag(n)},e.prototype.emitOpenTag=function(e){var t,n,r,o;this.openTagStart=this.startIndex,this.tagname=e;var a=!this.options.xmlMode&&d.get(e);if(a)for(;this.stack.length>0&&a.has(this.stack[this.stack.length-1]);){var i=this.stack.pop();null===(n=(t=this.cbs).onclosetag)||void 0===n||n.call(t,i,!0)}this.isVoidElement(e)||(this.stack.push(e),m.has(e)?this.foreignContext.push(!0):E.has(e)&&this.foreignContext.push(!1)),null===(o=(r=this.cbs).onopentagname)||void 0===o||o.call(r,e),this.cbs.onopentag&&(this.attribs={})},e.prototype.endOpenTag=function(e){var t,n;this.startIndex=this.openTagStart,this.attribs&&(null===(n=(t=this.cbs).onopentag)||void 0===n||n.call(t,this.tagname,this.attribs,e),this.attribs=null),this.cbs.onclosetag&&this.isVoidElement(this.tagname)&&this.cbs.onclosetag(this.tagname,!0),this.tagname=""},e.prototype.onopentagend=function(e){this.endIndex=e,this.endOpenTag(!1),this.startIndex=e+1},e.prototype.onclosetag=function(e,t){var n,r,o,a,i,s;this.endIndex=t;var l=this.getSlice(e,t);if(this.lowerCaseTagNames&&(l=l.toLowerCase()),(m.has(l)||E.has(l))&&this.foreignContext.pop(),this.isVoidElement(l))this.options.xmlMode||"br"!==l||(null===(r=(n=this.cbs).onopentagname)||void 0===r||r.call(n,"br"),null===(a=(o=this.cbs).onopentag)||void 0===a||a.call(o,"br",{},!0),null===(s=(i=this.cbs).onclosetag)||void 0===s||s.call(i,"br",!1));else{var u=this.stack.lastIndexOf(l);if(-1!==u)if(this.cbs.onclosetag)for(var c=this.stack.length-u;c--;)this.cbs.onclosetag(this.stack.pop(),0!==c);else this.stack.length=u;else this.options.xmlMode||"p"!==l||(this.emitOpenTag("p"),this.closeCurrentTag(!0))}this.startIndex=t+1},e.prototype.onselfclosingtag=function(e){this.endIndex=e,this.options.xmlMode||this.options.recognizeSelfClosing||this.foreignContext[this.foreignContext.length-1]?(this.closeCurrentTag(!1),this.startIndex=e+1):this.onopentagend(e)},e.prototype.closeCurrentTag=function(e){var t,n,r=this.tagname;this.endOpenTag(e),this.stack[this.stack.length-1]===r&&(null===(n=(t=this.cbs).onclosetag)||void 0===n||n.call(t,r,!e),this.stack.pop())},e.prototype.onattribname=function(e,t){this.startIndex=e;var n=this.getSlice(e,t);this.attribname=this.lowerCaseAttributeNames?n.toLowerCase():n},e.prototype.onattribdata=function(e,t){this.attribvalue+=this.getSlice(e,t)},e.prototype.onattribentity=function(e){this.attribvalue+=(0,s.fromCodePoint)(e)},e.prototype.onattribend=function(e,t){var n,r;this.endIndex=t,null===(r=(n=this.cbs).onattribute)||void 0===r||r.call(n,this.attribname,this.attribvalue,e===i.QuoteType.Double?'"':e===i.QuoteType.Single?"'":e===i.QuoteType.NoValue?void 0:null),this.attribs&&!Object.prototype.hasOwnProperty.call(this.attribs,this.attribname)&&(this.attribs[this.attribname]=this.attribvalue),this.attribvalue=""},e.prototype.getInstructionName=function(e){var t=e.search(T),n=t<0?e:e.substr(0,t);return this.lowerCaseTagNames&&(n=n.toLowerCase()),n},e.prototype.ondeclaration=function(e,t){this.endIndex=t;var n=this.getSlice(e,t);if(this.cbs.onprocessinginstruction){var r=this.getInstructionName(n);this.cbs.onprocessinginstruction("!".concat(r),"!".concat(n))}this.startIndex=t+1},e.prototype.onprocessinginstruction=function(e,t){this.endIndex=t;var n=this.getSlice(e,t);if(this.cbs.onprocessinginstruction){var r=this.getInstructionName(n);this.cbs.onprocessinginstruction("?".concat(r),"?".concat(n))}this.startIndex=t+1},e.prototype.oncomment=function(e,t,n){var r,o,a,i;this.endIndex=t,null===(o=(r=this.cbs).oncomment)||void 0===o||o.call(r,this.getSlice(e,t-n)),null===(i=(a=this.cbs).oncommentend)||void 0===i||i.call(a),this.startIndex=t+1},e.prototype.oncdata=function(e,t,n){var r,o,a,i,s,l,u,c,f,p;this.endIndex=t;var d=this.getSlice(e,t-n);this.options.xmlMode||this.options.recognizeCDATA?(null===(o=(r=this.cbs).oncdatastart)||void 0===o||o.call(r),null===(i=(a=this.cbs).ontext)||void 0===i||i.call(a,d),null===(l=(s=this.cbs).oncdataend)||void 0===l||l.call(s)):(null===(c=(u=this.cbs).oncomment)||void 0===c||c.call(u,"[CDATA[".concat(d,"]]")),null===(p=(f=this.cbs).oncommentend)||void 0===p||p.call(f)),this.startIndex=t+1},e.prototype.onend=function(){var e,t;if(this.cbs.onclosetag){this.endIndex=this.startIndex;for(var n=this.stack.length;n>0;this.cbs.onclosetag(this.stack[--n],!0));}null===(t=(e=this.cbs).onend)||void 0===t||t.call(e)},e.prototype.reset=function(){var e,t,n,r;null===(t=(e=this.cbs).onreset)||void 0===t||t.call(e),this.tokenizer.reset(),this.tagname="",this.attribname="",this.attribs=null,this.stack.length=0,this.startIndex=0,this.endIndex=0,null===(r=(n=this.cbs).onparserinit)||void 0===r||r.call(n,this),this.buffers.length=0,this.bufferOffset=0,this.writeIndex=0,this.ended=!1},e.prototype.parseComplete=function(e){this.reset(),this.end(e)},e.prototype.getSlice=function(e,t){for(;e-this.bufferOffset>=this.buffers[0].length;)this.shiftBuffer();for(var n=this.buffers[0].slice(e-this.bufferOffset,t-this.bufferOffset);t-this.bufferOffset>this.buffers[0].length;)this.shiftBuffer(),n+=this.buffers[0].slice(0,t-this.bufferOffset);return n},e.prototype.shiftBuffer=function(){this.bufferOffset+=this.buffers[0].length,this.writeIndex--,this.buffers.shift()},e.prototype.write=function(e){var t,n;this.ended?null===(n=(t=this.cbs).onerror)||void 0===n||n.call(t,new Error(".write() after done!")):(this.buffers.push(e),this.tokenizer.running&&(this.tokenizer.write(e),this.writeIndex++))},e.prototype.end=function(e){var t,n;this.ended?null===(n=(t=this.cbs).onerror)||void 0===n||n.call(t,new Error(".end() after done!")):(e&&this.write(e),this.ended=!0,this.tokenizer.end())},e.prototype.pause=function(){this.tokenizer.pause()},e.prototype.resume=function(){for(this.tokenizer.resume();this.tokenizer.running&&this.writeIndex<this.buffers.length;)this.tokenizer.write(this.buffers[this.writeIndex++]);this.ended&&this.tokenizer.end()},e.prototype.parseChunk=function(e){this.write(e)},e.prototype.done=function(e){this.end(e)},e}();t.Parser=g},7918:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.QuoteType=void 0;var r,o,a,i=n(9878);function s(e){return e===r.Space||e===r.NewLine||e===r.Tab||e===r.FormFeed||e===r.CarriageReturn}function l(e){return e===r.Slash||e===r.Gt||s(e)}function u(e){return e>=r.Zero&&e<=r.Nine}!function(e){e[e.Tab=9]="Tab",e[e.NewLine=10]="NewLine",e[e.FormFeed=12]="FormFeed",e[e.CarriageReturn=13]="CarriageReturn",e[e.Space=32]="Space",e[e.ExclamationMark=33]="ExclamationMark",e[e.Number=35]="Number",e[e.Amp=38]="Amp",e[e.SingleQuote=39]="SingleQuote",e[e.DoubleQuote=34]="DoubleQuote",e[e.Dash=45]="Dash",e[e.Slash=47]="Slash",e[e.Zero=48]="Zero",e[e.Nine=57]="Nine",e[e.Semi=59]="Semi",e[e.Lt=60]="Lt",e[e.Eq=61]="Eq",e[e.Gt=62]="Gt",e[e.Questionmark=63]="Questionmark",e[e.UpperA=65]="UpperA",e[e.LowerA=97]="LowerA",e[e.UpperF=70]="UpperF",e[e.LowerF=102]="LowerF",e[e.UpperZ=90]="UpperZ",e[e.LowerZ=122]="LowerZ",e[e.LowerX=120]="LowerX",e[e.OpeningSquareBracket=91]="OpeningSquareBracket"}(r||(r={})),function(e){e[e.Text=1]="Text",e[e.BeforeTagName=2]="BeforeTagName",e[e.InTagName=3]="InTagName",e[e.InSelfClosingTag=4]="InSelfClosingTag",e[e.BeforeClosingTagName=5]="BeforeClosingTagName",e[e.InClosingTagName=6]="InClosingTagName",e[e.AfterClosingTagName=7]="AfterClosingTagName",e[e.BeforeAttributeName=8]="BeforeAttributeName",e[e.InAttributeName=9]="InAttributeName",e[e.AfterAttributeName=10]="AfterAttributeName",e[e.BeforeAttributeValue=11]="BeforeAttributeValue",e[e.InAttributeValueDq=12]="InAttributeValueDq",e[e.InAttributeValueSq=13]="InAttributeValueSq",e[e.InAttributeValueNq=14]="InAttributeValueNq",e[e.BeforeDeclaration=15]="BeforeDeclaration",e[e.InDeclaration=16]="InDeclaration",e[e.InProcessingInstruction=17]="InProcessingInstruction",e[e.BeforeComment=18]="BeforeComment",e[e.CDATASequence=19]="CDATASequence",e[e.InSpecialComment=20]="InSpecialComment",e[e.InCommentLike=21]="InCommentLike",e[e.BeforeSpecialS=22]="BeforeSpecialS",e[e.SpecialStartSequence=23]="SpecialStartSequence",e[e.InSpecialTag=24]="InSpecialTag",e[e.BeforeEntity=25]="BeforeEntity",e[e.BeforeNumericEntity=26]="BeforeNumericEntity",e[e.InNamedEntity=27]="InNamedEntity",e[e.InNumericEntity=28]="InNumericEntity",e[e.InHexEntity=29]="InHexEntity"}(o||(o={})),function(e){e[e.NoValue=0]="NoValue",e[e.Unquoted=1]="Unquoted",e[e.Single=2]="Single",e[e.Double=3]="Double"}(a=t.QuoteType||(t.QuoteType={}));var c={Cdata:new Uint8Array([67,68,65,84,65,91]),CdataEnd:new Uint8Array([93,93,62]),CommentEnd:new Uint8Array([45,45,62]),ScriptEnd:new Uint8Array([60,47,115,99,114,105,112,116]),StyleEnd:new Uint8Array([60,47,115,116,121,108,101]),TitleEnd:new Uint8Array([60,47,116,105,116,108,101])},f=function(){function e(e,t){var n=e.xmlMode,r=void 0!==n&&n,a=e.decodeEntities,s=void 0===a||a;this.cbs=t,this.state=o.Text,this.buffer="",this.sectionStart=0,this.index=0,this.baseState=o.Text,this.isSpecial=!1,this.running=!0,this.offset=0,this.currentSequence=void 0,this.sequenceIndex=0,this.trieIndex=0,this.trieCurrent=0,this.entityResult=0,this.entityExcess=0,this.xmlMode=r,this.decodeEntities=s,this.entityTrie=r?i.xmlDecodeTree:i.htmlDecodeTree}return e.prototype.reset=function(){this.state=o.Text,this.buffer="",this.sectionStart=0,this.index=0,this.baseState=o.Text,this.currentSequence=void 0,this.running=!0,this.offset=0},e.prototype.write=function(e){this.offset+=this.buffer.length,this.buffer=e,this.parse()},e.prototype.end=function(){this.running&&this.finish()},e.prototype.pause=function(){this.running=!1},e.prototype.resume=function(){this.running=!0,this.index<this.buffer.length+this.offset&&this.parse()},e.prototype.getIndex=function(){return this.index},e.prototype.getSectionStart=function(){return this.sectionStart},e.prototype.stateText=function(e){e===r.Lt||!this.decodeEntities&&this.fastForwardTo(r.Lt)?(this.index>this.sectionStart&&this.cbs.ontext(this.sectionStart,this.index),this.state=o.BeforeTagName,this.sectionStart=this.index):this.decodeEntities&&e===r.Amp&&(this.state=o.BeforeEntity)},e.prototype.stateSpecialStartSequence=function(e){var t=this.sequenceIndex===this.currentSequence.length;if(t?l(e):(32|e)===this.currentSequence[this.sequenceIndex]){if(!t)return void this.sequenceIndex++}else this.isSpecial=!1;this.sequenceIndex=0,this.state=o.InTagName,this.stateInTagName(e)},e.prototype.stateInSpecialTag=function(e){if(this.sequenceIndex===this.currentSequence.length){if(e===r.Gt||s(e)){var t=this.index-this.currentSequence.length;if(this.sectionStart<t){var n=this.index;this.index=t,this.cbs.ontext(this.sectionStart,t),this.index=n}return this.isSpecial=!1,this.sectionStart=t+2,void this.stateInClosingTagName(e)}this.sequenceIndex=0}(32|e)===this.currentSequence[this.sequenceIndex]?this.sequenceIndex+=1:0===this.sequenceIndex?this.currentSequence===c.TitleEnd?this.decodeEntities&&e===r.Amp&&(this.state=o.BeforeEntity):this.fastForwardTo(r.Lt)&&(this.sequenceIndex=1):this.sequenceIndex=Number(e===r.Lt)},e.prototype.stateCDATASequence=function(e){e===c.Cdata[this.sequenceIndex]?++this.sequenceIndex===c.Cdata.length&&(this.state=o.InCommentLike,this.currentSequence=c.CdataEnd,this.sequenceIndex=0,this.sectionStart=this.index+1):(this.sequenceIndex=0,this.state=o.InDeclaration,this.stateInDeclaration(e))},e.prototype.fastForwardTo=function(e){for(;++this.index<this.buffer.length+this.offset;)if(this.buffer.charCodeAt(this.index-this.offset)===e)return!0;return this.index=this.buffer.length+this.offset-1,!1},e.prototype.stateInCommentLike=function(e){e===this.currentSequence[this.sequenceIndex]?++this.sequenceIndex===this.currentSequence.length&&(this.currentSequence===c.CdataEnd?this.cbs.oncdata(this.sectionStart,this.index,2):this.cbs.oncomment(this.sectionStart,this.index,2),this.sequenceIndex=0,this.sectionStart=this.index+1,this.state=o.Text):0===this.sequenceIndex?this.fastForwardTo(this.currentSequence[0])&&(this.sequenceIndex=1):e!==this.currentSequence[this.sequenceIndex-1]&&(this.sequenceIndex=0)},e.prototype.isTagStartChar=function(e){return this.xmlMode?!l(e):function(e){return e>=r.LowerA&&e<=r.LowerZ||e>=r.UpperA&&e<=r.UpperZ}(e)},e.prototype.startSpecial=function(e,t){this.isSpecial=!0,this.currentSequence=e,this.sequenceIndex=t,this.state=o.SpecialStartSequence},e.prototype.stateBeforeTagName=function(e){if(e===r.ExclamationMark)this.state=o.BeforeDeclaration,this.sectionStart=this.index+1;else if(e===r.Questionmark)this.state=o.InProcessingInstruction,this.sectionStart=this.index+1;else if(this.isTagStartChar(e)){var t=32|e;this.sectionStart=this.index,this.xmlMode||t!==c.TitleEnd[2]?this.state=this.xmlMode||t!==c.ScriptEnd[2]?o.InTagName:o.BeforeSpecialS:this.startSpecial(c.TitleEnd,3)}else e===r.Slash?this.state=o.BeforeClosingTagName:(this.state=o.Text,this.stateText(e))},e.prototype.stateInTagName=function(e){l(e)&&(this.cbs.onopentagname(this.sectionStart,this.index),this.sectionStart=-1,this.state=o.BeforeAttributeName,this.stateBeforeAttributeName(e))},e.prototype.stateBeforeClosingTagName=function(e){s(e)||(e===r.Gt?this.state=o.Text:(this.state=this.isTagStartChar(e)?o.InClosingTagName:o.InSpecialComment,this.sectionStart=this.index))},e.prototype.stateInClosingTagName=function(e){(e===r.Gt||s(e))&&(this.cbs.onclosetag(this.sectionStart,this.index),this.sectionStart=-1,this.state=o.AfterClosingTagName,this.stateAfterClosingTagName(e))},e.prototype.stateAfterClosingTagName=function(e){(e===r.Gt||this.fastForwardTo(r.Gt))&&(this.state=o.Text,this.baseState=o.Text,this.sectionStart=this.index+1)},e.prototype.stateBeforeAttributeName=function(e){e===r.Gt?(this.cbs.onopentagend(this.index),this.isSpecial?(this.state=o.InSpecialTag,this.sequenceIndex=0):this.state=o.Text,this.baseState=this.state,this.sectionStart=this.index+1):e===r.Slash?this.state=o.InSelfClosingTag:s(e)||(this.state=o.InAttributeName,this.sectionStart=this.index)},e.prototype.stateInSelfClosingTag=function(e){e===r.Gt?(this.cbs.onselfclosingtag(this.index),this.state=o.Text,this.baseState=o.Text,this.sectionStart=this.index+1,this.isSpecial=!1):s(e)||(this.state=o.BeforeAttributeName,this.stateBeforeAttributeName(e))},e.prototype.stateInAttributeName=function(e){(e===r.Eq||l(e))&&(this.cbs.onattribname(this.sectionStart,this.index),this.sectionStart=-1,this.state=o.AfterAttributeName,this.stateAfterAttributeName(e))},e.prototype.stateAfterAttributeName=function(e){e===r.Eq?this.state=o.BeforeAttributeValue:e===r.Slash||e===r.Gt?(this.cbs.onattribend(a.NoValue,this.index),this.state=o.BeforeAttributeName,this.stateBeforeAttributeName(e)):s(e)||(this.cbs.onattribend(a.NoValue,this.index),this.state=o.InAttributeName,this.sectionStart=this.index)},e.prototype.stateBeforeAttributeValue=function(e){e===r.DoubleQuote?(this.state=o.InAttributeValueDq,this.sectionStart=this.index+1):e===r.SingleQuote?(this.state=o.InAttributeValueSq,this.sectionStart=this.index+1):s(e)||(this.sectionStart=this.index,this.state=o.InAttributeValueNq,this.stateInAttributeValueNoQuotes(e))},e.prototype.handleInAttributeValue=function(e,t){e===t||!this.decodeEntities&&this.fastForwardTo(t)?(this.cbs.onattribdata(this.sectionStart,this.index),this.sectionStart=-1,this.cbs.onattribend(t===r.DoubleQuote?a.Double:a.Single,this.index),this.state=o.BeforeAttributeName):this.decodeEntities&&e===r.Amp&&(this.baseState=this.state,this.state=o.BeforeEntity)},e.prototype.stateInAttributeValueDoubleQuotes=function(e){this.handleInAttributeValue(e,r.DoubleQuote)},e.prototype.stateInAttributeValueSingleQuotes=function(e){this.handleInAttributeValue(e,r.SingleQuote)},e.prototype.stateInAttributeValueNoQuotes=function(e){s(e)||e===r.Gt?(this.cbs.onattribdata(this.sectionStart,this.index),this.sectionStart=-1,this.cbs.onattribend(a.Unquoted,this.index),this.state=o.BeforeAttributeName,this.stateBeforeAttributeName(e)):this.decodeEntities&&e===r.Amp&&(this.baseState=this.state,this.state=o.BeforeEntity)},e.prototype.stateBeforeDeclaration=function(e){e===r.OpeningSquareBracket?(this.state=o.CDATASequence,this.sequenceIndex=0):this.state=e===r.Dash?o.BeforeComment:o.InDeclaration},e.prototype.stateInDeclaration=function(e){(e===r.Gt||this.fastForwardTo(r.Gt))&&(this.cbs.ondeclaration(this.sectionStart,this.index),this.state=o.Text,this.sectionStart=this.index+1)},e.prototype.stateInProcessingInstruction=function(e){(e===r.Gt||this.fastForwardTo(r.Gt))&&(this.cbs.onprocessinginstruction(this.sectionStart,this.index),this.state=o.Text,this.sectionStart=this.index+1)},e.prototype.stateBeforeComment=function(e){e===r.Dash?(this.state=o.InCommentLike,this.currentSequence=c.CommentEnd,this.sequenceIndex=2,this.sectionStart=this.index+1):this.state=o.InDeclaration},e.prototype.stateInSpecialComment=function(e){(e===r.Gt||this.fastForwardTo(r.Gt))&&(this.cbs.oncomment(this.sectionStart,this.index,0),this.state=o.Text,this.sectionStart=this.index+1)},e.prototype.stateBeforeSpecialS=function(e){var t=32|e;t===c.ScriptEnd[3]?this.startSpecial(c.ScriptEnd,4):t===c.StyleEnd[3]?this.startSpecial(c.StyleEnd,4):(this.state=o.InTagName,this.stateInTagName(e))},e.prototype.stateBeforeEntity=function(e){this.entityExcess=1,this.entityResult=0,e===r.Number?this.state=o.BeforeNumericEntity:e===r.Amp||(this.trieIndex=0,this.trieCurrent=this.entityTrie[0],this.state=o.InNamedEntity,this.stateInNamedEntity(e))},e.prototype.stateInNamedEntity=function(e){if(this.entityExcess+=1,this.trieIndex=(0,i.determineBranch)(this.entityTrie,this.trieCurrent,this.trieIndex+1,e),this.trieIndex<0)return this.emitNamedEntity(),void this.index--;this.trieCurrent=this.entityTrie[this.trieIndex];var t=this.trieCurrent&i.BinTrieFlags.VALUE_LENGTH;if(t){var n=(t>>14)-1;if(this.allowLegacyEntity()||e===r.Semi){var o=this.index-this.entityExcess+1;o>this.sectionStart&&this.emitPartial(this.sectionStart,o),this.entityResult=this.trieIndex,this.trieIndex+=n,this.entityExcess=0,this.sectionStart=this.index+1,0===n&&this.emitNamedEntity()}else this.trieIndex+=n}},e.prototype.emitNamedEntity=function(){if(this.state=this.baseState,0!==this.entityResult)switch((this.entityTrie[this.entityResult]&i.BinTrieFlags.VALUE_LENGTH)>>14){case 1:this.emitCodePoint(this.entityTrie[this.entityResult]&~i.BinTrieFlags.VALUE_LENGTH);break;case 2:this.emitCodePoint(this.entityTrie[this.entityResult+1]);break;case 3:this.emitCodePoint(this.entityTrie[this.entityResult+1]),this.emitCodePoint(this.entityTrie[this.entityResult+2])}},e.prototype.stateBeforeNumericEntity=function(e){(32|e)===r.LowerX?(this.entityExcess++,this.state=o.InHexEntity):(this.state=o.InNumericEntity,this.stateInNumericEntity(e))},e.prototype.emitNumericEntity=function(e){var t=this.index-this.entityExcess-1;t+2+Number(this.state===o.InHexEntity)!==this.index&&(t>this.sectionStart&&this.emitPartial(this.sectionStart,t),this.sectionStart=this.index+Number(e),this.emitCodePoint((0,i.replaceCodePoint)(this.entityResult))),this.state=this.baseState},e.prototype.stateInNumericEntity=function(e){e===r.Semi?this.emitNumericEntity(!0):u(e)?(this.entityResult=10*this.entityResult+(e-r.Zero),this.entityExcess++):(this.allowLegacyEntity()?this.emitNumericEntity(!1):this.state=this.baseState,this.index--)},e.prototype.stateInHexEntity=function(e){e===r.Semi?this.emitNumericEntity(!0):u(e)?(this.entityResult=16*this.entityResult+(e-r.Zero),this.entityExcess++):function(e){return e>=r.UpperA&&e<=r.UpperF||e>=r.LowerA&&e<=r.LowerF}(e)?(this.entityResult=16*this.entityResult+((32|e)-r.LowerA+10),this.entityExcess++):(this.allowLegacyEntity()?this.emitNumericEntity(!1):this.state=this.baseState,this.index--)},e.prototype.allowLegacyEntity=function(){return!this.xmlMode&&(this.baseState===o.Text||this.baseState===o.InSpecialTag)},e.prototype.cleanup=function(){this.running&&this.sectionStart!==this.index&&(this.state===o.Text||this.state===o.InSpecialTag&&0===this.sequenceIndex?(this.cbs.ontext(this.sectionStart,this.index),this.sectionStart=this.index):this.state!==o.InAttributeValueDq&&this.state!==o.InAttributeValueSq&&this.state!==o.InAttributeValueNq||(this.cbs.onattribdata(this.sectionStart,this.index),this.sectionStart=this.index))},e.prototype.shouldContinue=function(){return this.index<this.buffer.length+this.offset&&this.running},e.prototype.parse=function(){for(;this.shouldContinue();){var e=this.buffer.charCodeAt(this.index-this.offset);switch(this.state){case o.Text:this.stateText(e);break;case o.SpecialStartSequence:this.stateSpecialStartSequence(e);break;case o.InSpecialTag:this.stateInSpecialTag(e);break;case o.CDATASequence:this.stateCDATASequence(e);break;case o.InAttributeValueDq:this.stateInAttributeValueDoubleQuotes(e);break;case o.InAttributeName:this.stateInAttributeName(e);break;case o.InCommentLike:this.stateInCommentLike(e);break;case o.InSpecialComment:this.stateInSpecialComment(e);break;case o.BeforeAttributeName:this.stateBeforeAttributeName(e);break;case o.InTagName:this.stateInTagName(e);break;case o.InClosingTagName:this.stateInClosingTagName(e);break;case o.BeforeTagName:this.stateBeforeTagName(e);break;case o.AfterAttributeName:this.stateAfterAttributeName(e);break;case o.InAttributeValueSq:this.stateInAttributeValueSingleQuotes(e);break;case o.BeforeAttributeValue:this.stateBeforeAttributeValue(e);break;case o.BeforeClosingTagName:this.stateBeforeClosingTagName(e);break;case o.AfterClosingTagName:this.stateAfterClosingTagName(e);break;case o.BeforeSpecialS:this.stateBeforeSpecialS(e);break;case o.InAttributeValueNq:this.stateInAttributeValueNoQuotes(e);break;case o.InSelfClosingTag:this.stateInSelfClosingTag(e);break;case o.InDeclaration:this.stateInDeclaration(e);break;case o.BeforeDeclaration:this.stateBeforeDeclaration(e);break;case o.BeforeComment:this.stateBeforeComment(e);break;case o.InProcessingInstruction:this.stateInProcessingInstruction(e);break;case o.InNamedEntity:this.stateInNamedEntity(e);break;case o.BeforeEntity:this.stateBeforeEntity(e);break;case o.InHexEntity:this.stateInHexEntity(e);break;case o.InNumericEntity:this.stateInNumericEntity(e);break;default:this.stateBeforeNumericEntity(e)}this.index++}this.cleanup()},e.prototype.finish=function(){this.state===o.InNamedEntity&&this.emitNamedEntity(),this.sectionStart<this.index&&this.handleTrailingData(),this.cbs.onend()},e.prototype.handleTrailingData=function(){var e=this.buffer.length+this.offset;this.state===o.InCommentLike?this.currentSequence===c.CdataEnd?this.cbs.oncdata(this.sectionStart,e,0):this.cbs.oncomment(this.sectionStart,e,0):this.state===o.InNumericEntity&&this.allowLegacyEntity()||this.state===o.InHexEntity&&this.allowLegacyEntity()?this.emitNumericEntity(!1):this.state===o.InTagName||this.state===o.BeforeAttributeName||this.state===o.BeforeAttributeValue||this.state===o.AfterAttributeName||this.state===o.InAttributeName||this.state===o.InAttributeValueSq||this.state===o.InAttributeValueDq||this.state===o.InAttributeValueNq||this.state===o.InClosingTagName||this.cbs.ontext(this.sectionStart,e)},e.prototype.emitPartial=function(e,t){this.baseState!==o.Text&&this.baseState!==o.InSpecialTag?this.cbs.onattribdata(e,t):this.cbs.ontext(e,t)},e.prototype.emitCodePoint=function(e){this.baseState!==o.Text&&this.baseState!==o.InSpecialTag?this.cbs.onattribentity(e):this.cbs.ontextentity(e)},e}();t.default=f},8659:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var o=Object.getOwnPropertyDescriptor(t,n);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,o)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return o(t,e),t},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.DomUtils=t.parseFeed=t.getFeed=t.ElementType=t.Tokenizer=t.createDomStream=t.parseDOM=t.parseDocument=t.DefaultHandler=t.DomHandler=t.Parser=void 0;var s=n(1724),l=n(1724);Object.defineProperty(t,"Parser",{enumerable:!0,get:function(){return l.Parser}});var u=n(1141),c=n(1141);function f(e,t){var n=new u.DomHandler(void 0,t);return new s.Parser(n,t).end(e),n.root}function p(e,t){return f(e,t).children}Object.defineProperty(t,"DomHandler",{enumerable:!0,get:function(){return c.DomHandler}}),Object.defineProperty(t,"DefaultHandler",{enumerable:!0,get:function(){return c.DomHandler}}),t.parseDocument=f,t.parseDOM=p,t.createDomStream=function(e,t,n){var r=new u.DomHandler(e,t,n);return new s.Parser(r,t)};var d=n(7918);Object.defineProperty(t,"Tokenizer",{enumerable:!0,get:function(){return i(d).default}}),t.ElementType=a(n(5413));var h=n(8888),m=n(8888);Object.defineProperty(t,"getFeed",{enumerable:!0,get:function(){return m.getFeed}});var E={xmlMode:!0};t.parseFeed=function(e,t){return void 0===t&&(t=E),(0,h.getFeed)(p(e,t))},t.DomUtils=a(n(8888))},5128:(e,t,n)=>{"use strict";var r=n(8075),o=r("Boolean.prototype.toString"),a=r("Object.prototype.toString"),i=n(9092)();e.exports=function(e){return"boolean"==typeof e||null!==e&&"object"==typeof e&&(i&&Symbol.toStringTag in e?function(e){try{return o(e),!0}catch(e){return!1}}(e):"[object Boolean]"===a(e))}},9600:e=>{"use strict";var t,n,r=Function.prototype.toString,o="object"==typeof Reflect&&null!==Reflect&&Reflect.apply;if("function"==typeof o&&"function"==typeof Object.defineProperty)try{t=Object.defineProperty({},"length",{get:function(){throw n}}),n={},o((function(){throw 42}),null,t)}catch(e){e!==n&&(o=null)}else o=null;var a=/^\s*class\b/,i=function(e){try{var t=r.call(e);return a.test(t)}catch(e){return!1}},s=function(e){try{return!i(e)&&(r.call(e),!0)}catch(e){return!1}},l=Object.prototype.toString,u="function"==typeof Symbol&&!!Symbol.toStringTag,c=!(0 in[,]),f=function(){return!1};if("object"==typeof document){var p=document.all;l.call(p)===l.call(document.all)&&(f=function(e){if((c||!e)&&(void 0===e||"object"==typeof e))try{var t=l.call(e);return("[object HTMLAllCollection]"===t||"[object HTML document.all class]"===t||"[object HTMLCollection]"===t||"[object Object]"===t)&&null==e("")}catch(e){}return!1})}e.exports=o?function(e){if(f(e))return!0;if(!e)return!1;if("function"!=typeof e&&"object"!=typeof e)return!1;try{o(e,null,t)}catch(e){if(e!==n)return!1}return!i(e)&&s(e)}:function(e){if(f(e))return!0;if(!e)return!1;if("function"!=typeof e&&"object"!=typeof e)return!1;if(u)return s(e);if(i(e))return!1;var t=l.call(e);return!("[object Function]"!==t&&"[object GeneratorFunction]"!==t&&!/^\[object HTML/.test(t))&&s(e)}},2120:(e,t,n)=>{"use strict";var r=Date.prototype.getDay,o=Object.prototype.toString,a=n(9092)();e.exports=function(e){return"object"==typeof e&&null!==e&&(a?function(e){try{return r.call(e),!0}catch(e){return!1}}(e):"[object Date]"===o.call(e))}},1703:(e,t,n)=>{"use strict";var r=Number.prototype.toString,o=Object.prototype.toString,a=n(9092)();e.exports=function(e){return"number"==typeof e||"object"==typeof e&&(a?function(e){try{return r.call(e),!0}catch(e){return!1}}(e):"[object Number]"===o.call(e))}},4035:(e,t,n)=>{"use strict";var r,o,a,i,s=n(8075),l=n(9092)();if(l){r=s("Object.prototype.hasOwnProperty"),o=s("RegExp.prototype.exec"),a={};var u=function(){throw a};i={toString:u,valueOf:u},"symbol"==typeof Symbol.toPrimitive&&(i[Symbol.toPrimitive]=u)}var c=s("Object.prototype.toString"),f=Object.getOwnPropertyDescriptor;e.exports=l?function(e){if(!e||"object"!=typeof e)return!1;var t=f(e,"lastIndex");if(!t||!r(t,"value"))return!1;try{o(e,i)}catch(e){return e===a}}:function(e){return!(!e||"object"!=typeof e&&"function"!=typeof e)&&"[object RegExp]"===c(e)}},4761:(e,t,n)=>{"use strict";var r=String.prototype.valueOf,o=Object.prototype.toString,a=n(9092)();e.exports=function(e){return"string"==typeof e||"object"==typeof e&&(a?function(e){try{return r.call(e),!0}catch(e){return!1}}(e):"[object String]"===o.call(e))}},6246:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(e){function t(t,n){return e.apply(this,arguments)}return t.toString=function(){return e.toString()},t}((function(e,t){return"object"==typeof e&&null!==e&&"object"==typeof t&&null!==t&&Object.keys(t).every((function(r){if(!e.propertyIsEnumerable(r))return!1;var o=t[r],a=e[r];return!!("object"==typeof o&&null!==o?n(a,o):a===o)}))}));t.default=n,e.exports=t.default},3612:(e,t,n)=>{"use strict";var r=Object.prototype.toString;if(n(4039)()){var o=Symbol.prototype.toString,a=/^Symbol\(.*\)$/;e.exports=function(e){if("symbol"==typeof e)return!0;if("[object Symbol]"!==r.call(e))return!1;try{return function(e){return"symbol"==typeof e.valueOf()&&a.test(o.call(e))}(e)}catch(e){return!1}}}else e.exports=function(e){return!1}},7901:(e,t,n)=>{var r,o=/[&<>"'`]/g,a=RegExp(o.source),i="object"==typeof n.g&&n.g&&n.g.Object===Object&&n.g,s="object"==typeof self&&self&&self.Object===Object&&self,l=i||s||Function("return this")(),u=(r={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","`":"&#96;"},function(e){return null==r?void 0:r[e]}),c=Object.prototype.toString,f=l.Symbol,p=f?f.prototype:void 0,d=p?p.toString:void 0;e.exports=function(e){var t;return(e=null==(t=e)?"":function(e){if("string"==typeof e)return e;if(function(e){return"symbol"==typeof e||function(e){return!!e&&"object"==typeof e}(e)&&"[object Symbol]"==c.call(e)}(e))return d?d.call(e):"";var t=e+"";return"0"==t&&1/e==-1/0?"-0":t}(t))&&a.test(e)?e.replace(o,u):e}},2622:(e,t,n)=>{var r=1/0,o=9007199254740991,a="[object Arguments]",i="[object Function]",s="[object GeneratorFunction]",l="object"==typeof n.g&&n.g&&n.g.Object===Object&&n.g,u="object"==typeof self&&self&&self.Object===Object&&self,c=l||u||Function("return this")();function f(e,t){for(var n=-1,r=t.length,o=e.length;++n<r;)e[o+n]=t[n];return e}var p=Object.prototype,d=p.hasOwnProperty,h=p.toString,m=c.Symbol,E=p.propertyIsEnumerable,T=m?m.isConcatSpreadable:void 0;function g(e,t,n,r,o){var a=-1,i=e.length;for(n||(n=y),o||(o=[]);++a<i;){var s=e[a];t>0&&n(s)?t>1?g(s,t-1,n,r,o):f(o,s):r||(o[o.length]=s)}return o}function y(e){return _(e)||function(e){return function(e){return function(e){return!!e&&"object"==typeof e}(e)&&function(e){return null!=e&&function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=o}(e.length)&&!function(e){var t=function(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}(e)?h.call(e):"";return t==i||t==s}(e)}(e)}(e)&&d.call(e,"callee")&&(!E.call(e,"callee")||h.call(e)==a)}(e)||!!(T&&e&&e[T])}var _=Array.isArray;e.exports=function(e){return e&&e.length?g(e,r):[]}},8142:(e,t,n)=>{e=n.nmd(e);var r="__lodash_hash_undefined__",o=1,a=2,i=9007199254740991,s="[object Arguments]",l="[object Array]",u="[object AsyncFunction]",c="[object Boolean]",f="[object Date]",p="[object Error]",d="[object Function]",h="[object GeneratorFunction]",m="[object Map]",E="[object Number]",T="[object Null]",g="[object Object]",y="[object Promise]",_="[object Proxy]",A="[object RegExp]",b="[object Set]",v="[object String]",S="[object Undefined]",I="[object WeakMap]",C="[object ArrayBuffer]",N="[object DataView]",O=/^\[object .+?Constructor\]$/,D=/^(?:0|[1-9]\d*)$/,P={};P["[object Float32Array]"]=P["[object Float64Array]"]=P["[object Int8Array]"]=P["[object Int16Array]"]=P["[object Int32Array]"]=P["[object Uint8Array]"]=P["[object Uint8ClampedArray]"]=P["[object Uint16Array]"]=P["[object Uint32Array]"]=!0,P[s]=P[l]=P[C]=P[c]=P[N]=P[f]=P[p]=P[d]=P[m]=P[E]=P[g]=P[A]=P[b]=P[v]=P[I]=!1;var R="object"==typeof n.g&&n.g&&n.g.Object===Object&&n.g,k="object"==typeof self&&self&&self.Object===Object&&self,w=R||k||Function("return this")(),L=t&&!t.nodeType&&t,M=L&&e&&!e.nodeType&&e,x=M&&M.exports===L,G=x&&R.process,B=function(){try{return G&&G.binding&&G.binding("util")}catch(e){}}(),H=B&&B.isTypedArray;function F(e,t){for(var n=-1,r=null==e?0:e.length;++n<r;)if(t(e[n],n,e))return!0;return!1}function U(e){var t=-1,n=Array(e.size);return e.forEach((function(e,r){n[++t]=[r,e]})),n}function j(e){var t=-1,n=Array(e.size);return e.forEach((function(e){n[++t]=e})),n}var q,z,W,V=Array.prototype,Y=Function.prototype,$=Object.prototype,Q=w["__core-js_shared__"],X=Y.toString,K=$.hasOwnProperty,Z=(q=/[^.]+$/.exec(Q&&Q.keys&&Q.keys.IE_PROTO||""))?"Symbol(src)_1."+q:"",J=$.toString,ee=RegExp("^"+X.call(K).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),te=x?w.Buffer:void 0,ne=w.Symbol,re=w.Uint8Array,oe=$.propertyIsEnumerable,ae=V.splice,ie=ne?ne.toStringTag:void 0,se=Object.getOwnPropertySymbols,le=te?te.isBuffer:void 0,ue=(z=Object.keys,W=Object,function(e){return z(W(e))}),ce=Me(w,"DataView"),fe=Me(w,"Map"),pe=Me(w,"Promise"),de=Me(w,"Set"),he=Me(w,"WeakMap"),me=Me(Object,"create"),Ee=He(ce),Te=He(fe),ge=He(pe),ye=He(de),_e=He(he),Ae=ne?ne.prototype:void 0,be=Ae?Ae.valueOf:void 0;function ve(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function Se(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function Ie(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function Ce(e){var t=-1,n=null==e?0:e.length;for(this.__data__=new Ie;++t<n;)this.add(e[t])}function Ne(e){var t=this.__data__=new Se(e);this.size=t.size}function Oe(e,t){for(var n=e.length;n--;)if(Fe(e[n][0],t))return n;return-1}function De(e){return null==e?void 0===e?S:T:ie&&ie in Object(e)?function(e){var t=K.call(e,ie),n=e[ie];try{e[ie]=void 0;var r=!0}catch(e){}var o=J.call(e);return r&&(t?e[ie]=n:delete e[ie]),o}(e):function(e){return J.call(e)}(e)}function Pe(e){return Ye(e)&&De(e)==s}function Re(e,t,n,r,i){return e===t||(null==e||null==t||!Ye(e)&&!Ye(t)?e!=e&&t!=t:function(e,t,n,r,i,u){var d=je(e),h=je(t),T=d?l:Ge(e),y=h?l:Ge(t),_=(T=T==s?g:T)==g,S=(y=y==s?g:y)==g,I=T==y;if(I&&qe(e)){if(!qe(t))return!1;d=!0,_=!1}if(I&&!_)return u||(u=new Ne),d||$e(e)?ke(e,t,n,r,i,u):function(e,t,n,r,i,s,l){switch(n){case N:if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case C:return!(e.byteLength!=t.byteLength||!s(new re(e),new re(t)));case c:case f:case E:return Fe(+e,+t);case p:return e.name==t.name&&e.message==t.message;case A:case v:return e==t+"";case m:var u=U;case b:var d=r&o;if(u||(u=j),e.size!=t.size&&!d)return!1;var h=l.get(e);if(h)return h==t;r|=a,l.set(e,t);var T=ke(u(e),u(t),r,i,s,l);return l.delete(e),T;case"[object Symbol]":if(be)return be.call(e)==be.call(t)}return!1}(e,t,T,n,r,i,u);if(!(n&o)){var O=_&&K.call(e,"__wrapped__"),D=S&&K.call(t,"__wrapped__");if(O||D){var P=O?e.value():e,R=D?t.value():t;return u||(u=new Ne),i(P,R,n,r,u)}}return!!I&&(u||(u=new Ne),function(e,t,n,r,a,i){var s=n&o,l=we(e),u=l.length;if(u!=we(t).length&&!s)return!1;for(var c=u;c--;){var f=l[c];if(!(s?f in t:K.call(t,f)))return!1}var p=i.get(e);if(p&&i.get(t))return p==t;var d=!0;i.set(e,t),i.set(t,e);for(var h=s;++c<u;){var m=e[f=l[c]],E=t[f];if(r)var T=s?r(E,m,f,t,e,i):r(m,E,f,e,t,i);if(!(void 0===T?m===E||a(m,E,n,r,i):T)){d=!1;break}h||(h="constructor"==f)}if(d&&!h){var g=e.constructor,y=t.constructor;g==y||!("constructor"in e)||!("constructor"in t)||"function"==typeof g&&g instanceof g&&"function"==typeof y&&y instanceof y||(d=!1)}return i.delete(e),i.delete(t),d}(e,t,n,r,i,u))}(e,t,n,r,Re,i))}function ke(e,t,n,r,i,s){var l=n&o,u=e.length,c=t.length;if(u!=c&&!(l&&c>u))return!1;var f=s.get(e);if(f&&s.get(t))return f==t;var p=-1,d=!0,h=n&a?new Ce:void 0;for(s.set(e,t),s.set(t,e);++p<u;){var m=e[p],E=t[p];if(r)var T=l?r(E,m,p,t,e,s):r(m,E,p,e,t,s);if(void 0!==T){if(T)continue;d=!1;break}if(h){if(!F(t,(function(e,t){if(o=t,!h.has(o)&&(m===e||i(m,e,n,r,s)))return h.push(t);var o}))){d=!1;break}}else if(m!==E&&!i(m,E,n,r,s)){d=!1;break}}return s.delete(e),s.delete(t),d}function we(e){return function(e,t,n){var r=t(e);return je(e)?r:function(e,t){for(var n=-1,r=t.length,o=e.length;++n<r;)e[o+n]=t[n];return e}(r,n(e))}(e,Qe,xe)}function Le(e,t){var n,r,o=e.__data__;return("string"==(r=typeof(n=t))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==n:null===n)?o["string"==typeof t?"string":"hash"]:o.map}function Me(e,t){var n=function(e,t){return null==e?void 0:e[t]}(e,t);return function(e){return!(!Ve(e)||function(e){return!!Z&&Z in e}(e))&&(ze(e)?ee:O).test(He(e))}(n)?n:void 0}ve.prototype.clear=function(){this.__data__=me?me(null):{},this.size=0},ve.prototype.delete=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t},ve.prototype.get=function(e){var t=this.__data__;if(me){var n=t[e];return n===r?void 0:n}return K.call(t,e)?t[e]:void 0},ve.prototype.has=function(e){var t=this.__data__;return me?void 0!==t[e]:K.call(t,e)},ve.prototype.set=function(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=me&&void 0===t?r:t,this},Se.prototype.clear=function(){this.__data__=[],this.size=0},Se.prototype.delete=function(e){var t=this.__data__,n=Oe(t,e);return!(n<0||(n==t.length-1?t.pop():ae.call(t,n,1),--this.size,0))},Se.prototype.get=function(e){var t=this.__data__,n=Oe(t,e);return n<0?void 0:t[n][1]},Se.prototype.has=function(e){return Oe(this.__data__,e)>-1},Se.prototype.set=function(e,t){var n=this.__data__,r=Oe(n,e);return r<0?(++this.size,n.push([e,t])):n[r][1]=t,this},Ie.prototype.clear=function(){this.size=0,this.__data__={hash:new ve,map:new(fe||Se),string:new ve}},Ie.prototype.delete=function(e){var t=Le(this,e).delete(e);return this.size-=t?1:0,t},Ie.prototype.get=function(e){return Le(this,e).get(e)},Ie.prototype.has=function(e){return Le(this,e).has(e)},Ie.prototype.set=function(e,t){var n=Le(this,e),r=n.size;return n.set(e,t),this.size+=n.size==r?0:1,this},Ce.prototype.add=Ce.prototype.push=function(e){return this.__data__.set(e,r),this},Ce.prototype.has=function(e){return this.__data__.has(e)},Ne.prototype.clear=function(){this.__data__=new Se,this.size=0},Ne.prototype.delete=function(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n},Ne.prototype.get=function(e){return this.__data__.get(e)},Ne.prototype.has=function(e){return this.__data__.has(e)},Ne.prototype.set=function(e,t){var n=this.__data__;if(n instanceof Se){var r=n.__data__;if(!fe||r.length<199)return r.push([e,t]),this.size=++n.size,this;n=this.__data__=new Ie(r)}return n.set(e,t),this.size=n.size,this};var xe=se?function(e){return null==e?[]:(e=Object(e),function(t,n){for(var r=-1,o=null==t?0:t.length,a=0,i=[];++r<o;){var s=t[r];l=s,oe.call(e,l)&&(i[a++]=s)}var l;return i}(se(e)))}:function(){return[]},Ge=De;function Be(e,t){return!!(t=null==t?i:t)&&("number"==typeof e||D.test(e))&&e>-1&&e%1==0&&e<t}function He(e){if(null!=e){try{return X.call(e)}catch(e){}try{return e+""}catch(e){}}return""}function Fe(e,t){return e===t||e!=e&&t!=t}(ce&&Ge(new ce(new ArrayBuffer(1)))!=N||fe&&Ge(new fe)!=m||pe&&Ge(pe.resolve())!=y||de&&Ge(new de)!=b||he&&Ge(new he)!=I)&&(Ge=function(e){var t=De(e),n=t==g?e.constructor:void 0,r=n?He(n):"";if(r)switch(r){case Ee:return N;case Te:return m;case ge:return y;case ye:return b;case _e:return I}return t});var Ue=Pe(function(){return arguments}())?Pe:function(e){return Ye(e)&&K.call(e,"callee")&&!oe.call(e,"callee")},je=Array.isArray,qe=le||function(){return!1};function ze(e){if(!Ve(e))return!1;var t=De(e);return t==d||t==h||t==u||t==_}function We(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=i}function Ve(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}function Ye(e){return null!=e&&"object"==typeof e}var $e=H?function(e){return function(t){return e(t)}}(H):function(e){return Ye(e)&&We(e.length)&&!!P[De(e)]};function Qe(e){return null!=(t=e)&&We(t.length)&&!ze(t)?function(e,t){var n=je(e),r=!n&&Ue(e),o=!n&&!r&&qe(e),a=!n&&!r&&!o&&$e(e),i=n||r||o||a,s=i?function(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}(e.length,String):[],l=s.length;for(var u in e)!t&&!K.call(e,u)||i&&("length"==u||o&&("offset"==u||"parent"==u)||a&&("buffer"==u||"byteLength"==u||"byteOffset"==u)||Be(u,l))||s.push(u);return s}(e):function(e){if(n=(t=e)&&t.constructor,t!==("function"==typeof n&&n.prototype||$))return ue(e);var t,n,r=[];for(var o in Object(e))K.call(e,o)&&"constructor"!=o&&r.push(o);return r}(e);var t}e.exports=function(e,t){return Re(e,t)}},8515:function(e){var t;t=function(){function e(t,n,r){return this.id=++e.highestId,this.name=t,this.symbols=n,this.postprocess=r,this}function t(e,t,n,r){this.rule=e,this.dot=t,this.reference=n,this.data=[],this.wantedBy=r,this.isComplete=this.dot===e.symbols.length}function n(e,t){this.grammar=e,this.index=t,this.states=[],this.wants={},this.scannable=[],this.completed={}}function r(e,t){this.rules=e,this.start=t||this.rules[0].name;var n=this.byName={};this.rules.forEach((function(e){n.hasOwnProperty(e.name)||(n[e.name]=[]),n[e.name].push(e)}))}function o(){this.reset("")}function a(e,t,a){if(e instanceof r){var i=e;a=t}else i=r.fromCompiled(e,t);for(var s in this.grammar=i,this.options={keepHistory:!1,lexer:i.lexer||new o},a||{})this.options[s]=a[s];this.lexer=this.options.lexer,this.lexerState=void 0;var l=new n(i,0);this.table=[l],l.wants[i.start]=[],l.predict(i.start),l.process(),this.current=0}function i(e){var t=typeof e;if("string"===t)return e;if("object"===t){if(e.literal)return JSON.stringify(e.literal);if(e instanceof RegExp)return e.toString();if(e.type)return"%"+e.type;if(e.test)return"<"+String(e.test)+">";throw new Error("Unknown symbol type: "+e)}}return e.highestId=0,e.prototype.toString=function(e){var t=void 0===e?this.symbols.map(i).join(" "):this.symbols.slice(0,e).map(i).join(" ")+" ● "+this.symbols.slice(e).map(i).join(" ");return this.name+" → "+t},t.prototype.toString=function(){return"{"+this.rule.toString(this.dot)+"}, from: "+(this.reference||0)},t.prototype.nextState=function(e){var n=new t(this.rule,this.dot+1,this.reference,this.wantedBy);return n.left=this,n.right=e,n.isComplete&&(n.data=n.build(),n.right=void 0),n},t.prototype.build=function(){var e=[],t=this;do{e.push(t.right.data),t=t.left}while(t.left);return e.reverse(),e},t.prototype.finish=function(){this.rule.postprocess&&(this.data=this.rule.postprocess(this.data,this.reference,a.fail))},n.prototype.process=function(e){for(var t=this.states,n=this.wants,r=this.completed,o=0;o<t.length;o++){var i=t[o];if(i.isComplete){if(i.finish(),i.data!==a.fail){for(var s=i.wantedBy,l=s.length;l--;){var u=s[l];this.complete(u,i)}if(i.reference===this.index){var c=i.rule.name;(this.completed[c]=this.completed[c]||[]).push(i)}}}else{if("string"!=typeof(c=i.rule.symbols[i.dot])){this.scannable.push(i);continue}if(n[c]){if(n[c].push(i),r.hasOwnProperty(c)){var f=r[c];for(l=0;l<f.length;l++){var p=f[l];this.complete(i,p)}}}else n[c]=[i],this.predict(c)}}},n.prototype.predict=function(e){for(var n=this.grammar.byName[e]||[],r=0;r<n.length;r++){var o=n[r],a=this.wants[e],i=new t(o,0,this.index,a);this.states.push(i)}},n.prototype.complete=function(e,t){var n=e.nextState(t);this.states.push(n)},r.fromCompiled=function(t,n){var o=t.Lexer;t.ParserStart&&(n=t.ParserStart,t=t.ParserRules);var a=new r(t=t.map((function(t){return new e(t.name,t.symbols,t.postprocess)})),n);return a.lexer=o,a},o.prototype.reset=function(e,t){this.buffer=e,this.index=0,this.line=t?t.line:1,this.lastLineBreak=t?-t.col:0},o.prototype.next=function(){if(this.index<this.buffer.length){var e=this.buffer[this.index++];return"\n"===e&&(this.line+=1,this.lastLineBreak=this.index),{value:e}}},o.prototype.save=function(){return{line:this.line,col:this.index-this.lastLineBreak}},o.prototype.formatError=function(e,t){var n=this.buffer;if("string"==typeof n){var r=n.split("\n").slice(Math.max(0,this.line-5),this.line),o=n.indexOf("\n",this.index);-1===o&&(o=n.length);var a=this.index-this.lastLineBreak,i=String(this.line).length;return t+=" at line "+this.line+" col "+a+":\n\n",(t+=r.map((function(e,t){return s(this.line-r.length+t+1,i)+" "+e}),this).join("\n"))+"\n"+s("",i+a)+"^\n"}return t+" at index "+(this.index-1);function s(e,t){var n=String(e);return Array(t-n.length+1).join(" ")+n}},a.fail={},a.prototype.feed=function(e){var t,r=this.lexer;for(r.reset(e,this.lexerState);;){try{if(!(t=r.next()))break}catch(e){var a=new n(this.grammar,this.current+1);throw this.table.push(a),(l=new Error(this.reportLexerError(e))).offset=this.current,l.token=e.token,l}var i=this.table[this.current];this.options.keepHistory||delete this.table[this.current-1];var s=this.current+1;a=new n(this.grammar,s),this.table.push(a);for(var l,u=void 0!==t.text?t.text:t.value,c=r.constructor===o?t.value:t,f=i.scannable,p=f.length;p--;){var d=f[p],h=d.rule.symbols[d.dot];if(h.test?h.test(c):h.type?h.type===t.type:h.literal===u){var m=d.nextState({data:c,token:t,isToken:!0,reference:s-1});a.states.push(m)}}if(a.process(),0===a.states.length)throw(l=new Error(this.reportError(t))).offset=this.current,l.token=t,l;this.options.keepHistory&&(i.lexerState=r.save()),this.current++}return i&&(this.lexerState=r.save()),this.results=this.finish(),this},a.prototype.reportLexerError=function(e){var t,n,r=e.token;return r?(t="input "+JSON.stringify(r.text[0])+" (lexer error)",n=this.lexer.formatError(r,"Syntax error")):(t="input (lexer error)",n=e.message),this.reportErrorCommon(n,t)},a.prototype.reportError=function(e){var t=(e.type?e.type+" token: ":"")+JSON.stringify(void 0!==e.value?e.value:e),n=this.lexer.formatError(e,"Syntax error");return this.reportErrorCommon(n,t)},a.prototype.reportErrorCommon=function(e,t){var n=[];n.push(e);var r=this.table.length-2,o=this.table[r],a=o.states.filter((function(e){var t=e.rule.symbols[e.dot];return t&&"string"!=typeof t}));return 0===a.length?(n.push("Unexpected "+t+". I did not expect any more input. Here is the state of my parse table:\n"),this.displayStateStack(o.states,n)):(n.push("Unexpected "+t+". Instead, I was expecting to see one of the following:\n"),a.map((function(e){return this.buildFirstStateStack(e,[])||[e]}),this).forEach((function(e){var t=e[0],r=t.rule.symbols[t.dot],o=this.getSymbolDisplay(r);n.push("A "+o+" based on:"),this.displayStateStack(e,n)}),this)),n.push(""),n.join("\n")},a.prototype.displayStateStack=function(e,t){for(var n,r=0,o=0;o<e.length;o++){var a=e[o],i=a.rule.toString(a.dot);i===n?r++:(r>0&&t.push("    ^ "+r+" more lines identical to this"),r=0,t.push("    "+i)),n=i}},a.prototype.getSymbolDisplay=function(e){return function(e){var t=typeof e;if("string"===t)return e;if("object"===t){if(e.literal)return JSON.stringify(e.literal);if(e instanceof RegExp)return"character matching "+e;if(e.type)return e.type+" token";if(e.test)return"token matching "+String(e.test);throw new Error("Unknown symbol type: "+e)}}(e)},a.prototype.buildFirstStateStack=function(e,t){if(-1!==t.indexOf(e))return null;if(0===e.wantedBy.length)return[e];var n=e.wantedBy[0],r=[e].concat(t),o=this.buildFirstStateStack(n,r);return null===o?null:[e].concat(o)},a.prototype.save=function(){var e=this.table[this.current];return e.lexerState=this.lexerState,e},a.prototype.restore=function(e){var t=e.index;this.current=t,this.table[t]=e,this.table.splice(t+1),this.lexerState=e.lexerState,this.results=this.finish()},a.prototype.rewind=function(e){if(!this.options.keepHistory)throw new Error("set option `keepHistory` to enable rewinding");this.restore(this.table[e])},a.prototype.finish=function(){var e=[],t=this.grammar.start;return this.table[this.table.length-1].states.forEach((function(n){n.rule.name===t&&n.dot===n.rule.symbols.length&&0===n.reference&&n.data!==a.fail&&e.push(n)})),e.map((function(e){return e.data}))},{Parser:a,Grammar:r,Rule:e}},e.exports?e.exports=t():this.nearley=t()},8525:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.generate=t.compile=void 0;var o=r(n(1264));t.compile=function(e){var t=e[0],n=e[1]-1;if(n<0&&t<=0)return o.default.falseFunc;if(-1===t)return function(e){return e<=n};if(0===t)return function(e){return e===n};if(1===t)return n<0?o.default.trueFunc:function(e){return e>=n};var r=Math.abs(t),a=(n%r+r)%r;return t>1?function(e){return e>=n&&e%r===a}:function(e){return e<=n&&e%r===a}},t.generate=function(e){var t=e[0],n=e[1]-1,r=0;if(t<0){var o=-t,a=(n%o+o)%o;return function(){var e=a+o*r++;return e>n?null:e}}return 0===t?n<0?function(){return null}:function(){return 0==r++?n:null}:(n<0&&(n+=t*Math.ceil(-n/t)),function(){return t*r+++n})}},3172:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.sequence=t.generate=t.compile=t.parse=void 0;var r=n(8151);Object.defineProperty(t,"parse",{enumerable:!0,get:function(){return r.parse}});var o=n(8525);Object.defineProperty(t,"compile",{enumerable:!0,get:function(){return o.compile}}),Object.defineProperty(t,"generate",{enumerable:!0,get:function(){return o.generate}}),t.default=function(e){return(0,o.compile)((0,r.parse)(e))},t.sequence=function(e){return(0,o.generate)((0,r.parse)(e))}},8151:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.parse=void 0;var n=new Set([9,10,12,13,32]),r="0".charCodeAt(0),o="9".charCodeAt(0);t.parse=function(e){if("even"===(e=e.trim().toLowerCase()))return[2,0];if("odd"===e)return[2,1];var t=0,a=0,i=l(),s=u();if(t<e.length&&"n"===e.charAt(t)&&(t++,a=i*(null!=s?s:1),c(),t<e.length?(i=l(),c(),s=u()):i=s=0),null===s||t<e.length)throw new Error("n-th rule couldn't be parsed ('".concat(e,"')"));return[a,i*s];function l(){return"-"===e.charAt(t)?(t++,-1):("+"===e.charAt(t)&&t++,1)}function u(){for(var n=t,a=0;t<e.length&&e.charCodeAt(t)>=r&&e.charCodeAt(t)<=o;)a=10*a+(e.charCodeAt(t)-r),t++;return t===n?null:a}function c(){for(;t<e.length&&n.has(e.charCodeAt(t));)t++}}},8859:(e,t,n)=>{var r="function"==typeof Map&&Map.prototype,o=Object.getOwnPropertyDescriptor&&r?Object.getOwnPropertyDescriptor(Map.prototype,"size"):null,a=r&&o&&"function"==typeof o.get?o.get:null,i=r&&Map.prototype.forEach,s="function"==typeof Set&&Set.prototype,l=Object.getOwnPropertyDescriptor&&s?Object.getOwnPropertyDescriptor(Set.prototype,"size"):null,u=s&&l&&"function"==typeof l.get?l.get:null,c=s&&Set.prototype.forEach,f="function"==typeof WeakMap&&WeakMap.prototype?WeakMap.prototype.has:null,p="function"==typeof WeakSet&&WeakSet.prototype?WeakSet.prototype.has:null,d="function"==typeof WeakRef&&WeakRef.prototype?WeakRef.prototype.deref:null,h=Boolean.prototype.valueOf,m=Object.prototype.toString,E=Function.prototype.toString,T=String.prototype.match,g=String.prototype.slice,y=String.prototype.replace,_=String.prototype.toUpperCase,A=String.prototype.toLowerCase,b=RegExp.prototype.test,v=Array.prototype.concat,S=Array.prototype.join,I=Array.prototype.slice,C=Math.floor,N="function"==typeof BigInt?BigInt.prototype.valueOf:null,O=Object.getOwnPropertySymbols,D="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?Symbol.prototype.toString:null,P="function"==typeof Symbol&&"object"==typeof Symbol.iterator,R="function"==typeof Symbol&&Symbol.toStringTag&&(Symbol.toStringTag,1)?Symbol.toStringTag:null,k=Object.prototype.propertyIsEnumerable,w=("function"==typeof Reflect?Reflect.getPrototypeOf:Object.getPrototypeOf)||([].__proto__===Array.prototype?function(e){return e.__proto__}:null);function L(e,t){if(e===1/0||e===-1/0||e!=e||e&&e>-1e3&&e<1e3||b.call(/e/,t))return t;var n=/[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;if("number"==typeof e){var r=e<0?-C(-e):C(e);if(r!==e){var o=String(r),a=g.call(t,o.length+1);return y.call(o,n,"$&_")+"."+y.call(y.call(a,/([0-9]{3})/g,"$&_"),/_$/,"")}}return y.call(t,n,"$&_")}var M=n(2634),x=M.custom,G=j(x)?x:null;function B(e,t,n){var r="double"===(n.quoteStyle||t)?'"':"'";return r+e+r}function H(e){return y.call(String(e),/"/g,"&quot;")}function F(e){return!("[object Array]"!==W(e)||R&&"object"==typeof e&&R in e)}function U(e){return!("[object RegExp]"!==W(e)||R&&"object"==typeof e&&R in e)}function j(e){if(P)return e&&"object"==typeof e&&e instanceof Symbol;if("symbol"==typeof e)return!0;if(!e||"object"!=typeof e||!D)return!1;try{return D.call(e),!0}catch(e){}return!1}e.exports=function e(t,r,o,s){var l=r||{};if(z(l,"quoteStyle")&&"single"!==l.quoteStyle&&"double"!==l.quoteStyle)throw new TypeError('option "quoteStyle" must be "single" or "double"');if(z(l,"maxStringLength")&&("number"==typeof l.maxStringLength?l.maxStringLength<0&&l.maxStringLength!==1/0:null!==l.maxStringLength))throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');var m=!z(l,"customInspect")||l.customInspect;if("boolean"!=typeof m&&"symbol"!==m)throw new TypeError("option \"customInspect\", if provided, must be `true`, `false`, or `'symbol'`");if(z(l,"indent")&&null!==l.indent&&"\t"!==l.indent&&!(parseInt(l.indent,10)===l.indent&&l.indent>0))throw new TypeError('option "indent" must be "\\t", an integer > 0, or `null`');if(z(l,"numericSeparator")&&"boolean"!=typeof l.numericSeparator)throw new TypeError('option "numericSeparator", if provided, must be `true` or `false`');var _=l.numericSeparator;if(void 0===t)return"undefined";if(null===t)return"null";if("boolean"==typeof t)return t?"true":"false";if("string"==typeof t)return Y(t,l);if("number"==typeof t){if(0===t)return 1/0/t>0?"0":"-0";var b=String(t);return _?L(t,b):b}if("bigint"==typeof t){var C=String(t)+"n";return _?L(t,C):C}var O=void 0===l.depth?5:l.depth;if(void 0===o&&(o=0),o>=O&&O>0&&"object"==typeof t)return F(t)?"[Array]":"[Object]";var x,q=function(e,t){var n;if("\t"===e.indent)n="\t";else{if(!("number"==typeof e.indent&&e.indent>0))return null;n=S.call(Array(e.indent+1)," ")}return{base:n,prev:S.call(Array(t+1),n)}}(l,o);if(void 0===s)s=[];else if(V(s,t)>=0)return"[Circular]";function $(t,n,r){if(n&&(s=I.call(s)).push(n),r){var a={depth:l.depth};return z(l,"quoteStyle")&&(a.quoteStyle=l.quoteStyle),e(t,a,o+1,s)}return e(t,l,o+1,s)}if("function"==typeof t&&!U(t)){var ee=function(e){if(e.name)return e.name;var t=T.call(E.call(e),/^function\s*([\w$]+)/);return t?t[1]:null}(t),te=J(t,$);return"[Function"+(ee?": "+ee:" (anonymous)")+"]"+(te.length>0?" { "+S.call(te,", ")+" }":"")}if(j(t)){var ne=P?y.call(String(t),/^(Symbol\(.*\))_[^)]*$/,"$1"):D.call(t);return"object"!=typeof t||P?ne:Q(ne)}if((x=t)&&"object"==typeof x&&("undefined"!=typeof HTMLElement&&x instanceof HTMLElement||"string"==typeof x.nodeName&&"function"==typeof x.getAttribute)){for(var re="<"+A.call(String(t.nodeName)),oe=t.attributes||[],ae=0;ae<oe.length;ae++)re+=" "+oe[ae].name+"="+B(H(oe[ae].value),"double",l);return re+=">",t.childNodes&&t.childNodes.length&&(re+="..."),re+"</"+A.call(String(t.nodeName))+">"}if(F(t)){if(0===t.length)return"[]";var ie=J(t,$);return q&&!function(e){for(var t=0;t<e.length;t++)if(V(e[t],"\n")>=0)return!1;return!0}(ie)?"["+Z(ie,q)+"]":"[ "+S.call(ie,", ")+" ]"}if(function(e){return!("[object Error]"!==W(e)||R&&"object"==typeof e&&R in e)}(t)){var se=J(t,$);return"cause"in Error.prototype||!("cause"in t)||k.call(t,"cause")?0===se.length?"["+String(t)+"]":"{ ["+String(t)+"] "+S.call(se,", ")+" }":"{ ["+String(t)+"] "+S.call(v.call("[cause]: "+$(t.cause),se),", ")+" }"}if("object"==typeof t&&m){if(G&&"function"==typeof t[G]&&M)return M(t,{depth:O-o});if("symbol"!==m&&"function"==typeof t.inspect)return t.inspect()}if(function(e){if(!a||!e||"object"!=typeof e)return!1;try{a.call(e);try{u.call(e)}catch(e){return!0}return e instanceof Map}catch(e){}return!1}(t)){var le=[];return i&&i.call(t,(function(e,n){le.push($(n,t,!0)+" => "+$(e,t))})),K("Map",a.call(t),le,q)}if(function(e){if(!u||!e||"object"!=typeof e)return!1;try{u.call(e);try{a.call(e)}catch(e){return!0}return e instanceof Set}catch(e){}return!1}(t)){var ue=[];return c&&c.call(t,(function(e){ue.push($(e,t))})),K("Set",u.call(t),ue,q)}if(function(e){if(!f||!e||"object"!=typeof e)return!1;try{f.call(e,f);try{p.call(e,p)}catch(e){return!0}return e instanceof WeakMap}catch(e){}return!1}(t))return X("WeakMap");if(function(e){if(!p||!e||"object"!=typeof e)return!1;try{p.call(e,p);try{f.call(e,f)}catch(e){return!0}return e instanceof WeakSet}catch(e){}return!1}(t))return X("WeakSet");if(function(e){if(!d||!e||"object"!=typeof e)return!1;try{return d.call(e),!0}catch(e){}return!1}(t))return X("WeakRef");if(function(e){return!("[object Number]"!==W(e)||R&&"object"==typeof e&&R in e)}(t))return Q($(Number(t)));if(function(e){if(!e||"object"!=typeof e||!N)return!1;try{return N.call(e),!0}catch(e){}return!1}(t))return Q($(N.call(t)));if(function(e){return!("[object Boolean]"!==W(e)||R&&"object"==typeof e&&R in e)}(t))return Q(h.call(t));if(function(e){return!("[object String]"!==W(e)||R&&"object"==typeof e&&R in e)}(t))return Q($(String(t)));if("undefined"!=typeof window&&t===window)return"{ [object Window] }";if(t===n.g)return"{ [object globalThis] }";if(!function(e){return!("[object Date]"!==W(e)||R&&"object"==typeof e&&R in e)}(t)&&!U(t)){var ce=J(t,$),fe=w?w(t)===Object.prototype:t instanceof Object||t.constructor===Object,pe=t instanceof Object?"":"null prototype",de=!fe&&R&&Object(t)===t&&R in t?g.call(W(t),8,-1):pe?"Object":"",he=(fe||"function"!=typeof t.constructor?"":t.constructor.name?t.constructor.name+" ":"")+(de||pe?"["+S.call(v.call([],de||[],pe||[]),": ")+"] ":"");return 0===ce.length?he+"{}":q?he+"{"+Z(ce,q)+"}":he+"{ "+S.call(ce,", ")+" }"}return String(t)};var q=Object.prototype.hasOwnProperty||function(e){return e in this};function z(e,t){return q.call(e,t)}function W(e){return m.call(e)}function V(e,t){if(e.indexOf)return e.indexOf(t);for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1}function Y(e,t){if(e.length>t.maxStringLength){var n=e.length-t.maxStringLength,r="... "+n+" more character"+(n>1?"s":"");return Y(g.call(e,0,t.maxStringLength),t)+r}return B(y.call(y.call(e,/(['\\])/g,"\\$1"),/[\x00-\x1f]/g,$),"single",t)}function $(e){var t=e.charCodeAt(0),n={8:"b",9:"t",10:"n",12:"f",13:"r"}[t];return n?"\\"+n:"\\x"+(t<16?"0":"")+_.call(t.toString(16))}function Q(e){return"Object("+e+")"}function X(e){return e+" { ? }"}function K(e,t,n,r){return e+" ("+t+") {"+(r?Z(n,r):S.call(n,", "))+"}"}function Z(e,t){if(0===e.length)return"";var n="\n"+t.prev+t.base;return n+S.call(e,","+n)+"\n"+t.prev}function J(e,t){var n=F(e),r=[];if(n){r.length=e.length;for(var o=0;o<e.length;o++)r[o]=z(e,o)?t(e[o],e):""}var a,i="function"==typeof O?O(e):[];if(P){a={};for(var s=0;s<i.length;s++)a["$"+i[s]]=i[s]}for(var l in e)z(e,l)&&(n&&String(Number(l))===l&&l<e.length||P&&a["$"+l]instanceof Symbol||(b.call(/[^\w$]/,l)?r.push(t(l,e)+": "+t(e[l],e)):r.push(l+": "+t(e[l],e))));if("function"==typeof O)for(var u=0;u<i.length;u++)k.call(e,i[u])&&r.push("["+t(i[u])+"]: "+t(e[i[u]],e));return r}},9211:e=>{"use strict";var t=function(e){return e!=e};e.exports=function(e,n){return 0===e&&0===n?1/e==1/n:e===n||!(!t(e)||!t(n))}},7653:(e,t,n)=>{"use strict";var r=n(8452),o=n(487),a=n(9211),i=n(9394),s=n(6576),l=o(i(),Object);r(l,{getPolyfill:i,implementation:a,shim:s}),e.exports=l},9394:(e,t,n)=>{"use strict";var r=n(9211);e.exports=function(){return"function"==typeof Object.is?Object.is:r}},6576:(e,t,n)=>{"use strict";var r=n(9394),o=n(8452);e.exports=function(){var e=r();return o(Object,{is:e},{is:function(){return Object.is!==e}}),e}},8875:(e,t,n)=>{"use strict";var r;if(!Object.keys){var o=Object.prototype.hasOwnProperty,a=Object.prototype.toString,i=n(1093),s=Object.prototype.propertyIsEnumerable,l=!s.call({toString:null},"toString"),u=s.call((function(){}),"prototype"),c=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"],f=function(e){var t=e.constructor;return t&&t.prototype===e},p={$applicationCache:!0,$console:!0,$external:!0,$frame:!0,$frameElement:!0,$frames:!0,$innerHeight:!0,$innerWidth:!0,$onmozfullscreenchange:!0,$onmozfullscreenerror:!0,$outerHeight:!0,$outerWidth:!0,$pageXOffset:!0,$pageYOffset:!0,$parent:!0,$scrollLeft:!0,$scrollTop:!0,$scrollX:!0,$scrollY:!0,$self:!0,$webkitIndexedDB:!0,$webkitStorageInfo:!0,$window:!0},d=function(){if("undefined"==typeof window)return!1;for(var e in window)try{if(!p["$"+e]&&o.call(window,e)&&null!==window[e]&&"object"==typeof window[e])try{f(window[e])}catch(e){return!0}}catch(e){return!0}return!1}();r=function(e){var t=null!==e&&"object"==typeof e,n="[object Function]"===a.call(e),r=i(e),s=t&&"[object String]"===a.call(e),p=[];if(!t&&!n&&!r)throw new TypeError("Object.keys called on a non-object");var h=u&&n;if(s&&e.length>0&&!o.call(e,0))for(var m=0;m<e.length;++m)p.push(String(m));if(r&&e.length>0)for(var E=0;E<e.length;++E)p.push(String(E));else for(var T in e)h&&"prototype"===T||!o.call(e,T)||p.push(String(T));if(l)for(var g=function(e){if("undefined"==typeof window||!d)return f(e);try{return f(e)}catch(e){return!1}}(e),y=0;y<c.length;++y)g&&"constructor"===c[y]||!o.call(e,c[y])||p.push(c[y]);return p}}e.exports=r},1189:(e,t,n)=>{"use strict";var r=Array.prototype.slice,o=n(1093),a=Object.keys,i=a?function(e){return a(e)}:n(8875),s=Object.keys;i.shim=function(){if(Object.keys){var e=function(){var e=Object.keys(arguments);return e&&e.length===arguments.length}(1,2);e||(Object.keys=function(e){return o(e)?s(r.call(e)):s(e)})}else Object.keys=i;return Object.keys||i},e.exports=i},1093:e=>{"use strict";var t=Object.prototype.toString;e.exports=function(e){var n=t.call(e),r="[object Arguments]"===n;return r||(r="[object Array]"!==n&&null!==e&&"object"==typeof e&&"number"==typeof e.length&&e.length>=0&&"[object Function]"===t.call(e.callee)),r}},8403:(e,t,n)=>{"use strict";var r=n(1189),o=n(1333)(),a=n(8075),i=Object,s=a("Array.prototype.push"),l=a("Object.prototype.propertyIsEnumerable"),u=o?Object.getOwnPropertySymbols:null;e.exports=function(e,t){if(null==e)throw new TypeError("target must be an object");var n=i(e);if(1===arguments.length)return n;for(var a=1;a<arguments.length;++a){var c=i(arguments[a]),f=r(c),p=o&&(Object.getOwnPropertySymbols||u);if(p)for(var d=p(c),h=0;h<d.length;++h){var m=d[h];l(c,m)&&s(f,m)}for(var E=0;E<f.length;++E){var T=f[E];if(l(c,T)){var g=c[T];n[T]=g}}}return n}},6525:(e,t,n)=>{"use strict";var r=n(8452),o=n(487),a=n(8403),i=n(1514),s=n(984),l=o.apply(i()),u=function(e,t){return l(Object,arguments)};r(u,{getPolyfill:i,implementation:a,shim:s}),e.exports=u},1514:(e,t,n)=>{"use strict";var r=n(8403);e.exports=function(){return Object.assign?function(){if(!Object.assign)return!1;for(var e="abcdefghijklmnopqrst",t=e.split(""),n={},r=0;r<t.length;++r)n[t[r]]=t[r];var o=Object.assign({},n),a="";for(var i in o)a+=i;return e!==a}()||function(){if(!Object.assign||!Object.preventExtensions)return!1;var e=Object.preventExtensions({1:2});try{Object.assign(e,"xy")}catch(t){return"y"===e[1]}return!1}()?r:Object.assign:r}},984:(e,t,n)=>{"use strict";var r=n(8452),o=n(1514);e.exports=function(){var e=o();return r(Object,{assign:e},{assign:function(){return Object.assign!==e}}),e}},3488:(e,t,n)=>{"use strict";var r=n(5388),o=n(8075),a=o("Object.prototype.propertyIsEnumerable"),i=o("Array.prototype.push");e.exports=function(e){var t=r(e),n=[];for(var o in t)a(t,o)&&i(n,[o,t[o]]);return n}},3932:(e,t,n)=>{"use strict";var r=n(8452),o=n(487),a=n(3488),i=n(3445),s=n(7891),l=o(i(),Object);r(l,{getPolyfill:i,implementation:a,shim:s}),e.exports=l},3445:(e,t,n)=>{"use strict";var r=n(3488);e.exports=function(){return"function"==typeof Object.entries?Object.entries:r}},7891:(e,t,n)=>{"use strict";var r=n(3445),o=n(8452);e.exports=function(){var e=r();return o(Object,{entries:e},{entries:function(){return Object.entries!==e}}),e}},7446:(e,t,n)=>{"use strict";var r=n(5388),o=n(8075),a=o("Object.prototype.propertyIsEnumerable"),i=o("Array.prototype.push");e.exports=function(e){var t=r(e),n=[];for(var o in t)a(t,o)&&i(n,t[o]);return n}},8638:(e,t,n)=>{"use strict";var r=n(8452),o=n(487),a=n(7446),i=n(1927),s=n(3305),l=o(i(),Object);r(l,{getPolyfill:i,implementation:a,shim:s}),e.exports=l},1927:(e,t,n)=>{"use strict";var r=n(7446);e.exports=function(){return"function"==typeof Object.values?Object.values:r}},3305:(e,t,n)=>{"use strict";var r=n(1927),o=n(8452);e.exports=function(){var e=r();return o(Object,{values:e},{values:function(){return Object.values!==e}}),e}},2694:(e,t,n)=>{"use strict";var r=n(6925);function o(){}function a(){}a.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,a,i){if(i!==r){var s=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw s.name="Invariant Violation",s}}function t(){return e}e.isRequired=e;var n={array:e,bigint:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:a,resetWarningCache:o};return n.PropTypes=n,n}},5556:(e,t,n)=>{e.exports=n(2694)()},6925:e=>{"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},2551:(e,t,n)=>{"use strict";var r=n(6540),o=n(9982);function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var i=new Set,s={};function l(e,t){u(e,t),u(e+"Capture",t)}function u(e,t){for(s[e]=t,e=0;e<t.length;e++)i.add(t[e])}var c=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),f=Object.prototype.hasOwnProperty,p=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,d={},h={};function m(e,t,n,r,o,a,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=a,this.removeEmptyString=i}var E={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){E[e]=new m(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];E[t]=new m(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){E[e]=new m(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){E[e]=new m(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){E[e]=new m(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){E[e]=new m(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){E[e]=new m(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){E[e]=new m(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){E[e]=new m(e,5,!1,e.toLowerCase(),null,!1,!1)}));var T=/[\-:]([a-z])/g;function g(e){return e[1].toUpperCase()}function y(e,t,n,r){var o=E.hasOwnProperty(t)?E[t]:null;(null!==o?0!==o.type:r||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!f.call(h,e)||!f.call(d,e)&&(p.test(e)?h[e]=!0:(d[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(T,g);E[t]=new m(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(T,g);E[t]=new m(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(T,g);E[t]=new m(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){E[e]=new m(e,1,!1,e.toLowerCase(),null,!1,!1)})),E.xlinkHref=new m("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){E[e]=new m(e,1,!1,e.toLowerCase(),null,!0,!0)}));var _=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,A=Symbol.for("react.element"),b=Symbol.for("react.portal"),v=Symbol.for("react.fragment"),S=Symbol.for("react.strict_mode"),I=Symbol.for("react.profiler"),C=Symbol.for("react.provider"),N=Symbol.for("react.context"),O=Symbol.for("react.forward_ref"),D=Symbol.for("react.suspense"),P=Symbol.for("react.suspense_list"),R=Symbol.for("react.memo"),k=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var w=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var L=Symbol.iterator;function M(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=L&&e[L]||e["@@iterator"])?e:null}var x,G=Object.assign;function B(e){if(void 0===x)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);x=t&&t[1]||""}return"\n"+x+e}var H=!1;function F(e,t){if(!e||H)return"";H=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(t){if(t&&r&&"string"==typeof t.stack){for(var o=t.stack.split("\n"),a=r.stack.split("\n"),i=o.length-1,s=a.length-1;1<=i&&0<=s&&o[i]!==a[s];)s--;for(;1<=i&&0<=s;i--,s--)if(o[i]!==a[s]){if(1!==i||1!==s)do{if(i--,0>--s||o[i]!==a[s]){var l="\n"+o[i].replace(" at new "," at ");return e.displayName&&l.includes("<anonymous>")&&(l=l.replace("<anonymous>",e.displayName)),l}}while(1<=i&&0<=s);break}}}finally{H=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?B(e):""}function U(e){switch(e.tag){case 5:return B(e.type);case 16:return B("Lazy");case 13:return B("Suspense");case 19:return B("SuspenseList");case 0:case 2:case 15:return F(e.type,!1);case 11:return F(e.type.render,!1);case 1:return F(e.type,!0);default:return""}}function j(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case v:return"Fragment";case b:return"Portal";case I:return"Profiler";case S:return"StrictMode";case D:return"Suspense";case P:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case N:return(e.displayName||"Context")+".Consumer";case C:return(e._context.displayName||"Context")+".Provider";case O:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case R:return null!==(t=e.displayName||null)?t:j(e.type)||"Memo";case k:t=e._payload,e=e._init;try{return j(e(t))}catch(e){}}return null}function q(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return j(t);case 8:return t===S?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function z(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function W(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function V(e){e._valueTracker||(e._valueTracker=function(e){var t=W(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,a=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function Y(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=W(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function $(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Q(e,t){var n=t.checked;return G({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function X(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=z(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function K(e,t){null!=(t=t.checked)&&y(e,"checked",t,!1)}function Z(e,t){K(e,t);var n=z(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,n):t.hasOwnProperty("defaultValue")&&ee(e,t.type,z(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function J(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ee(e,t,n){"number"===t&&$(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var te=Array.isArray;function ne(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+z(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function re(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return G({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function oe(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(a(92));if(te(n)){if(1<n.length)throw Error(a(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:z(n)}}function ae(e,t){var n=z(t.value),r=z(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ie(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function se(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function le(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?se(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var ue,ce,fe=(ce=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((ue=ue||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=ue.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return ce(e,t)}))}:ce);function pe(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var de={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},he=["Webkit","ms","Moz","O"];function me(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||de.hasOwnProperty(e)&&de[e]?(""+t).trim():t+"px"}function Ee(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=me(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(de).forEach((function(e){he.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),de[t]=de[e]}))}));var Te=G({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ge(e,t){if(t){if(Te[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(a(62))}}function ye(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var _e=null;function Ae(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var be=null,ve=null,Se=null;function Ie(e){if(e=_o(e)){if("function"!=typeof be)throw Error(a(280));var t=e.stateNode;t&&(t=bo(t),be(e.stateNode,e.type,t))}}function Ce(e){ve?Se?Se.push(e):Se=[e]:ve=e}function Ne(){if(ve){var e=ve,t=Se;if(Se=ve=null,Ie(e),t)for(e=0;e<t.length;e++)Ie(t[e])}}function Oe(e,t){return e(t)}function De(){}var Pe=!1;function Re(e,t,n){if(Pe)return e(t,n);Pe=!0;try{return Oe(e,t,n)}finally{Pe=!1,(null!==ve||null!==Se)&&(De(),Ne())}}function ke(e,t){var n=e.stateNode;if(null===n)return null;var r=bo(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(a(231,t,typeof n));return n}var we=!1;if(c)try{var Le={};Object.defineProperty(Le,"passive",{get:function(){we=!0}}),window.addEventListener("test",Le,Le),window.removeEventListener("test",Le,Le)}catch(ce){we=!1}function Me(e,t,n,r,o,a,i,s,l){var u=Array.prototype.slice.call(arguments,3);try{t.apply(n,u)}catch(e){this.onError(e)}}var xe=!1,Ge=null,Be=!1,He=null,Fe={onError:function(e){xe=!0,Ge=e}};function Ue(e,t,n,r,o,a,i,s,l){xe=!1,Ge=null,Me.apply(Fe,arguments)}function je(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{!!(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function qe(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function ze(e){if(je(e)!==e)throw Error(a(188))}function We(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=je(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var i=o.alternate;if(null===i){if(null!==(r=o.return)){n=r;continue}break}if(o.child===i.child){for(i=o.child;i;){if(i===n)return ze(o),e;if(i===r)return ze(o),t;i=i.sibling}throw Error(a(188))}if(n.return!==r.return)n=o,r=i;else{for(var s=!1,l=o.child;l;){if(l===n){s=!0,n=o,r=i;break}if(l===r){s=!0,r=o,n=i;break}l=l.sibling}if(!s){for(l=i.child;l;){if(l===n){s=!0,n=i,r=o;break}if(l===r){s=!0,r=i,n=o;break}l=l.sibling}if(!s)throw Error(a(189))}}if(n.alternate!==r)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(e))?Ve(e):null}function Ve(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=Ve(e);if(null!==t)return t;e=e.sibling}return null}var Ye=o.unstable_scheduleCallback,$e=o.unstable_cancelCallback,Qe=o.unstable_shouldYield,Xe=o.unstable_requestPaint,Ke=o.unstable_now,Ze=o.unstable_getCurrentPriorityLevel,Je=o.unstable_ImmediatePriority,et=o.unstable_UserBlockingPriority,tt=o.unstable_NormalPriority,nt=o.unstable_LowPriority,rt=o.unstable_IdlePriority,ot=null,at=null,it=Math.clz32?Math.clz32:function(e){return 0===(e>>>=0)?32:31-(st(e)/lt|0)|0},st=Math.log,lt=Math.LN2,ut=64,ct=4194304;function ft(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function pt(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,o=e.suspendedLanes,a=e.pingedLanes,i=268435455&n;if(0!==i){var s=i&~o;0!==s?r=ft(s):0!=(a&=i)&&(r=ft(a))}else 0!=(i=n&~o)?r=ft(i):0!==a&&(r=ft(a));if(0===r)return 0;if(0!==t&&t!==r&&!(t&o)&&((o=r&-r)>=(a=t&-t)||16===o&&4194240&a))return t;if(4&r&&(r|=16&n),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)o=1<<(n=31-it(t)),r|=e[n],t&=~o;return r}function dt(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function ht(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function mt(){var e=ut;return!(4194240&(ut<<=1))&&(ut=64),e}function Et(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function Tt(e,t,n){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-it(t)]=n}function gt(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-it(n),o=1<<r;o&t|e[r]&t&&(e[r]|=t),n&=~o}}var yt=0;function _t(e){return 1<(e&=-e)?4<e?268435455&e?16:536870912:4:1}var At,bt,vt,St,It,Ct=!1,Nt=[],Ot=null,Dt=null,Pt=null,Rt=new Map,kt=new Map,wt=[],Lt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Mt(e,t){switch(e){case"focusin":case"focusout":Ot=null;break;case"dragenter":case"dragleave":Dt=null;break;case"mouseover":case"mouseout":Pt=null;break;case"pointerover":case"pointerout":Rt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":kt.delete(t.pointerId)}}function xt(e,t,n,r,o,a){return null===e||e.nativeEvent!==a?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:a,targetContainers:[o]},null!==t&&null!==(t=_o(t))&&bt(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function Gt(e){var t=yo(e.target);if(null!==t){var n=je(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=qe(n)))return e.blockedOn=t,void It(e.priority,(function(){vt(n)}))}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Bt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Qt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=_o(n))&&bt(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);_e=r,n.target.dispatchEvent(r),_e=null,t.shift()}return!0}function Ht(e,t,n){Bt(e)&&n.delete(t)}function Ft(){Ct=!1,null!==Ot&&Bt(Ot)&&(Ot=null),null!==Dt&&Bt(Dt)&&(Dt=null),null!==Pt&&Bt(Pt)&&(Pt=null),Rt.forEach(Ht),kt.forEach(Ht)}function Ut(e,t){e.blockedOn===t&&(e.blockedOn=null,Ct||(Ct=!0,o.unstable_scheduleCallback(o.unstable_NormalPriority,Ft)))}function jt(e){function t(t){return Ut(t,e)}if(0<Nt.length){Ut(Nt[0],e);for(var n=1;n<Nt.length;n++){var r=Nt[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==Ot&&Ut(Ot,e),null!==Dt&&Ut(Dt,e),null!==Pt&&Ut(Pt,e),Rt.forEach(t),kt.forEach(t),n=0;n<wt.length;n++)(r=wt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<wt.length&&null===(n=wt[0]).blockedOn;)Gt(n),null===n.blockedOn&&wt.shift()}var qt=_.ReactCurrentBatchConfig,zt=!0;function Wt(e,t,n,r){var o=yt,a=qt.transition;qt.transition=null;try{yt=1,Yt(e,t,n,r)}finally{yt=o,qt.transition=a}}function Vt(e,t,n,r){var o=yt,a=qt.transition;qt.transition=null;try{yt=4,Yt(e,t,n,r)}finally{yt=o,qt.transition=a}}function Yt(e,t,n,r){if(zt){var o=Qt(e,t,n,r);if(null===o)zr(e,t,r,$t,n),Mt(e,r);else if(function(e,t,n,r,o){switch(t){case"focusin":return Ot=xt(Ot,e,t,n,r,o),!0;case"dragenter":return Dt=xt(Dt,e,t,n,r,o),!0;case"mouseover":return Pt=xt(Pt,e,t,n,r,o),!0;case"pointerover":var a=o.pointerId;return Rt.set(a,xt(Rt.get(a)||null,e,t,n,r,o)),!0;case"gotpointercapture":return a=o.pointerId,kt.set(a,xt(kt.get(a)||null,e,t,n,r,o)),!0}return!1}(o,e,t,n,r))r.stopPropagation();else if(Mt(e,r),4&t&&-1<Lt.indexOf(e)){for(;null!==o;){var a=_o(o);if(null!==a&&At(a),null===(a=Qt(e,t,n,r))&&zr(e,t,r,$t,n),a===o)break;o=a}null!==o&&r.stopPropagation()}else zr(e,t,r,null,n)}}var $t=null;function Qt(e,t,n,r){if($t=null,null!==(e=yo(e=Ae(r))))if(null===(t=je(e)))e=null;else if(13===(n=t.tag)){if(null!==(e=qe(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return $t=e,null}function Xt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Ze()){case Je:return 1;case et:return 4;case tt:case nt:return 16;case rt:return 536870912;default:return 16}default:return 16}}var Kt=null,Zt=null,Jt=null;function en(){if(Jt)return Jt;var e,t,n=Zt,r=n.length,o="value"in Kt?Kt.value:Kt.textContent,a=o.length;for(e=0;e<r&&n[e]===o[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===o[a-t];t++);return Jt=o.slice(e,1<t?1-t:void 0)}function tn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function nn(){return!0}function rn(){return!1}function on(e){function t(t,n,r,o,a){for(var i in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=o,this.target=a,this.currentTarget=null,e)e.hasOwnProperty(i)&&(t=e[i],this[i]=t?t(o):o[i]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?nn:rn,this.isPropagationStopped=rn,this}return G(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=nn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=nn)},persist:function(){},isPersistent:nn}),t}var an,sn,ln,un={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},cn=on(un),fn=G({},un,{view:0,detail:0}),pn=on(fn),dn=G({},fn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:In,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==ln&&(ln&&"mousemove"===e.type?(an=e.screenX-ln.screenX,sn=e.screenY-ln.screenY):sn=an=0,ln=e),an)},movementY:function(e){return"movementY"in e?e.movementY:sn}}),hn=on(dn),mn=on(G({},dn,{dataTransfer:0})),En=on(G({},fn,{relatedTarget:0})),Tn=on(G({},un,{animationName:0,elapsedTime:0,pseudoElement:0})),gn=G({},un,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),yn=on(gn),_n=on(G({},un,{data:0})),An={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},bn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},vn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Sn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=vn[e])&&!!t[e]}function In(){return Sn}var Cn=G({},fn,{key:function(e){if(e.key){var t=An[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=tn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?bn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:In,charCode:function(e){return"keypress"===e.type?tn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Nn=on(Cn),On=on(G({},dn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Dn=on(G({},fn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:In})),Pn=on(G({},un,{propertyName:0,elapsedTime:0,pseudoElement:0})),Rn=G({},dn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),kn=on(Rn),wn=[9,13,27,32],Ln=c&&"CompositionEvent"in window,Mn=null;c&&"documentMode"in document&&(Mn=document.documentMode);var xn=c&&"TextEvent"in window&&!Mn,Gn=c&&(!Ln||Mn&&8<Mn&&11>=Mn),Bn=String.fromCharCode(32),Hn=!1;function Fn(e,t){switch(e){case"keyup":return-1!==wn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Un(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var jn=!1,qn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function zn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!qn[e.type]:"textarea"===t}function Wn(e,t,n,r){Ce(r),0<(t=Vr(t,"onChange")).length&&(n=new cn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Vn=null,Yn=null;function $n(e){Br(e,0)}function Qn(e){if(Y(Ao(e)))return e}function Xn(e,t){if("change"===e)return t}var Kn=!1;if(c){var Zn;if(c){var Jn="oninput"in document;if(!Jn){var er=document.createElement("div");er.setAttribute("oninput","return;"),Jn="function"==typeof er.oninput}Zn=Jn}else Zn=!1;Kn=Zn&&(!document.documentMode||9<document.documentMode)}function tr(){Vn&&(Vn.detachEvent("onpropertychange",nr),Yn=Vn=null)}function nr(e){if("value"===e.propertyName&&Qn(Yn)){var t=[];Wn(t,Yn,e,Ae(e)),Re($n,t)}}function rr(e,t,n){"focusin"===e?(tr(),Yn=n,(Vn=t).attachEvent("onpropertychange",nr)):"focusout"===e&&tr()}function or(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Qn(Yn)}function ar(e,t){if("click"===e)return Qn(t)}function ir(e,t){if("input"===e||"change"===e)return Qn(t)}var sr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function lr(e,t){if(sr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var o=n[r];if(!f.call(t,o)||!sr(e[o],t[o]))return!1}return!0}function ur(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function cr(e,t){var n,r=ur(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=ur(r)}}function fr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?fr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function pr(){for(var e=window,t=$();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=$((e=t.contentWindow).document)}return t}function dr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function hr(e){var t=pr(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&fr(n.ownerDocument.documentElement,n)){if(null!==r&&dr(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var o=n.textContent.length,a=Math.min(r.start,o);r=void 0===r.end?a:Math.min(r.end,o),!e.extend&&a>r&&(o=r,r=a,a=o),o=cr(n,a);var i=cr(n,r);o&&i&&(1!==e.rangeCount||e.anchorNode!==o.node||e.anchorOffset!==o.offset||e.focusNode!==i.node||e.focusOffset!==i.offset)&&((t=t.createRange()).setStart(o.node,o.offset),e.removeAllRanges(),a>r?(e.addRange(t),e.extend(i.node,i.offset)):(t.setEnd(i.node,i.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var mr=c&&"documentMode"in document&&11>=document.documentMode,Er=null,Tr=null,gr=null,yr=!1;function _r(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;yr||null==Er||Er!==$(r)||(r="selectionStart"in(r=Er)&&dr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},gr&&lr(gr,r)||(gr=r,0<(r=Vr(Tr,"onSelect")).length&&(t=new cn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=Er)))}function Ar(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var br={animationend:Ar("Animation","AnimationEnd"),animationiteration:Ar("Animation","AnimationIteration"),animationstart:Ar("Animation","AnimationStart"),transitionend:Ar("Transition","TransitionEnd")},vr={},Sr={};function Ir(e){if(vr[e])return vr[e];if(!br[e])return e;var t,n=br[e];for(t in n)if(n.hasOwnProperty(t)&&t in Sr)return vr[e]=n[t];return e}c&&(Sr=document.createElement("div").style,"AnimationEvent"in window||(delete br.animationend.animation,delete br.animationiteration.animation,delete br.animationstart.animation),"TransitionEvent"in window||delete br.transitionend.transition);var Cr=Ir("animationend"),Nr=Ir("animationiteration"),Or=Ir("animationstart"),Dr=Ir("transitionend"),Pr=new Map,Rr="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function kr(e,t){Pr.set(e,t),l(t,[e])}for(var wr=0;wr<Rr.length;wr++){var Lr=Rr[wr];kr(Lr.toLowerCase(),"on"+(Lr[0].toUpperCase()+Lr.slice(1)))}kr(Cr,"onAnimationEnd"),kr(Nr,"onAnimationIteration"),kr(Or,"onAnimationStart"),kr("dblclick","onDoubleClick"),kr("focusin","onFocus"),kr("focusout","onBlur"),kr(Dr,"onTransitionEnd"),u("onMouseEnter",["mouseout","mouseover"]),u("onMouseLeave",["mouseout","mouseover"]),u("onPointerEnter",["pointerout","pointerover"]),u("onPointerLeave",["pointerout","pointerover"]),l("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),l("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),l("onBeforeInput",["compositionend","keypress","textInput","paste"]),l("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),l("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),l("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Mr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),xr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Mr));function Gr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,o,i,s,l,u){if(Ue.apply(this,arguments),xe){if(!xe)throw Error(a(198));var c=Ge;xe=!1,Ge=null,Be||(Be=!0,He=c)}}(r,t,void 0,e),e.currentTarget=null}function Br(e,t){t=!!(4&t);for(var n=0;n<e.length;n++){var r=e[n],o=r.event;r=r.listeners;e:{var a=void 0;if(t)for(var i=r.length-1;0<=i;i--){var s=r[i],l=s.instance,u=s.currentTarget;if(s=s.listener,l!==a&&o.isPropagationStopped())break e;Gr(o,s,u),a=l}else for(i=0;i<r.length;i++){if(l=(s=r[i]).instance,u=s.currentTarget,s=s.listener,l!==a&&o.isPropagationStopped())break e;Gr(o,s,u),a=l}}}if(Be)throw e=He,Be=!1,He=null,e}function Hr(e,t){var n=t[Eo];void 0===n&&(n=t[Eo]=new Set);var r=e+"__bubble";n.has(r)||(qr(t,e,2,!1),n.add(r))}function Fr(e,t,n){var r=0;t&&(r|=4),qr(n,e,r,t)}var Ur="_reactListening"+Math.random().toString(36).slice(2);function jr(e){if(!e[Ur]){e[Ur]=!0,i.forEach((function(t){"selectionchange"!==t&&(xr.has(t)||Fr(t,!1,e),Fr(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[Ur]||(t[Ur]=!0,Fr("selectionchange",!1,t))}}function qr(e,t,n,r){switch(Xt(t)){case 1:var o=Wt;break;case 4:o=Vt;break;default:o=Yt}n=o.bind(null,t,n,e),o=void 0,!we||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),r?void 0!==o?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):void 0!==o?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function zr(e,t,n,r,o){var a=r;if(!(1&t||2&t||null===r))e:for(;;){if(null===r)return;var i=r.tag;if(3===i||4===i){var s=r.stateNode.containerInfo;if(s===o||8===s.nodeType&&s.parentNode===o)break;if(4===i)for(i=r.return;null!==i;){var l=i.tag;if((3===l||4===l)&&((l=i.stateNode.containerInfo)===o||8===l.nodeType&&l.parentNode===o))return;i=i.return}for(;null!==s;){if(null===(i=yo(s)))return;if(5===(l=i.tag)||6===l){r=a=i;continue e}s=s.parentNode}}r=r.return}Re((function(){var r=a,o=Ae(n),i=[];e:{var s=Pr.get(e);if(void 0!==s){var l=cn,u=e;switch(e){case"keypress":if(0===tn(n))break e;case"keydown":case"keyup":l=Nn;break;case"focusin":u="focus",l=En;break;case"focusout":u="blur",l=En;break;case"beforeblur":case"afterblur":l=En;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":l=hn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":l=mn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":l=Dn;break;case Cr:case Nr:case Or:l=Tn;break;case Dr:l=Pn;break;case"scroll":l=pn;break;case"wheel":l=kn;break;case"copy":case"cut":case"paste":l=yn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":l=On}var c=!!(4&t),f=!c&&"scroll"===e,p=c?null!==s?s+"Capture":null:s;c=[];for(var d,h=r;null!==h;){var m=(d=h).stateNode;if(5===d.tag&&null!==m&&(d=m,null!==p&&null!=(m=ke(h,p))&&c.push(Wr(h,m,d))),f)break;h=h.return}0<c.length&&(s=new l(s,u,null,n,o),i.push({event:s,listeners:c}))}}if(!(7&t)){if(l="mouseout"===e||"pointerout"===e,(!(s="mouseover"===e||"pointerover"===e)||n===_e||!(u=n.relatedTarget||n.fromElement)||!yo(u)&&!u[mo])&&(l||s)&&(s=o.window===o?o:(s=o.ownerDocument)?s.defaultView||s.parentWindow:window,l?(l=r,null!==(u=(u=n.relatedTarget||n.toElement)?yo(u):null)&&(u!==(f=je(u))||5!==u.tag&&6!==u.tag)&&(u=null)):(l=null,u=r),l!==u)){if(c=hn,m="onMouseLeave",p="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(c=On,m="onPointerLeave",p="onPointerEnter",h="pointer"),f=null==l?s:Ao(l),d=null==u?s:Ao(u),(s=new c(m,h+"leave",l,n,o)).target=f,s.relatedTarget=d,m=null,yo(o)===r&&((c=new c(p,h+"enter",u,n,o)).target=d,c.relatedTarget=f,m=c),f=m,l&&u)e:{for(p=u,h=0,d=c=l;d;d=Yr(d))h++;for(d=0,m=p;m;m=Yr(m))d++;for(;0<h-d;)c=Yr(c),h--;for(;0<d-h;)p=Yr(p),d--;for(;h--;){if(c===p||null!==p&&c===p.alternate)break e;c=Yr(c),p=Yr(p)}c=null}else c=null;null!==l&&$r(i,s,l,c,!1),null!==u&&null!==f&&$r(i,f,u,c,!0)}if("select"===(l=(s=r?Ao(r):window).nodeName&&s.nodeName.toLowerCase())||"input"===l&&"file"===s.type)var E=Xn;else if(zn(s))if(Kn)E=ir;else{E=or;var T=rr}else(l=s.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===s.type||"radio"===s.type)&&(E=ar);switch(E&&(E=E(e,r))?Wn(i,E,n,o):(T&&T(e,s,r),"focusout"===e&&(T=s._wrapperState)&&T.controlled&&"number"===s.type&&ee(s,"number",s.value)),T=r?Ao(r):window,e){case"focusin":(zn(T)||"true"===T.contentEditable)&&(Er=T,Tr=r,gr=null);break;case"focusout":gr=Tr=Er=null;break;case"mousedown":yr=!0;break;case"contextmenu":case"mouseup":case"dragend":yr=!1,_r(i,n,o);break;case"selectionchange":if(mr)break;case"keydown":case"keyup":_r(i,n,o)}var g;if(Ln)e:{switch(e){case"compositionstart":var y="onCompositionStart";break e;case"compositionend":y="onCompositionEnd";break e;case"compositionupdate":y="onCompositionUpdate";break e}y=void 0}else jn?Fn(e,n)&&(y="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(y="onCompositionStart");y&&(Gn&&"ko"!==n.locale&&(jn||"onCompositionStart"!==y?"onCompositionEnd"===y&&jn&&(g=en()):(Zt="value"in(Kt=o)?Kt.value:Kt.textContent,jn=!0)),0<(T=Vr(r,y)).length&&(y=new _n(y,e,null,n,o),i.push({event:y,listeners:T}),(g||null!==(g=Un(n)))&&(y.data=g))),(g=xn?function(e,t){switch(e){case"compositionend":return Un(t);case"keypress":return 32!==t.which?null:(Hn=!0,Bn);case"textInput":return(e=t.data)===Bn&&Hn?null:e;default:return null}}(e,n):function(e,t){if(jn)return"compositionend"===e||!Ln&&Fn(e,t)?(e=en(),Jt=Zt=Kt=null,jn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Gn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=Vr(r,"onBeforeInput")).length&&(o=new _n("onBeforeInput","beforeinput",null,n,o),i.push({event:o,listeners:r}),o.data=g)}Br(i,t)}))}function Wr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Vr(e,t){for(var n=t+"Capture",r=[];null!==e;){var o=e,a=o.stateNode;5===o.tag&&null!==a&&(o=a,null!=(a=ke(e,n))&&r.unshift(Wr(e,a,o)),null!=(a=ke(e,t))&&r.push(Wr(e,a,o))),e=e.return}return r}function Yr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function $r(e,t,n,r,o){for(var a=t._reactName,i=[];null!==n&&n!==r;){var s=n,l=s.alternate,u=s.stateNode;if(null!==l&&l===r)break;5===s.tag&&null!==u&&(s=u,o?null!=(l=ke(n,a))&&i.unshift(Wr(n,l,s)):o||null!=(l=ke(n,a))&&i.push(Wr(n,l,s))),n=n.return}0!==i.length&&e.push({event:t,listeners:i})}var Qr=/\r\n?/g,Xr=/\u0000|\uFFFD/g;function Kr(e){return("string"==typeof e?e:""+e).replace(Qr,"\n").replace(Xr,"")}function Zr(e,t,n){if(t=Kr(t),Kr(e)!==t&&n)throw Error(a(425))}function Jr(){}var eo=null,to=null;function no(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var ro="function"==typeof setTimeout?setTimeout:void 0,oo="function"==typeof clearTimeout?clearTimeout:void 0,ao="function"==typeof Promise?Promise:void 0,io="function"==typeof queueMicrotask?queueMicrotask:void 0!==ao?function(e){return ao.resolve(null).then(e).catch(so)}:ro;function so(e){setTimeout((function(){throw e}))}function lo(e,t){var n=t,r=0;do{var o=n.nextSibling;if(e.removeChild(n),o&&8===o.nodeType)if("/$"===(n=o.data)){if(0===r)return e.removeChild(o),void jt(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=o}while(n);jt(t)}function uo(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function co(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var fo=Math.random().toString(36).slice(2),po="__reactFiber$"+fo,ho="__reactProps$"+fo,mo="__reactContainer$"+fo,Eo="__reactEvents$"+fo,To="__reactListeners$"+fo,go="__reactHandles$"+fo;function yo(e){var t=e[po];if(t)return t;for(var n=e.parentNode;n;){if(t=n[mo]||n[po]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=co(e);null!==e;){if(n=e[po])return n;e=co(e)}return t}n=(e=n).parentNode}return null}function _o(e){return!(e=e[po]||e[mo])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function Ao(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function bo(e){return e[ho]||null}var vo=[],So=-1;function Io(e){return{current:e}}function Co(e){0>So||(e.current=vo[So],vo[So]=null,So--)}function No(e,t){So++,vo[So]=e.current,e.current=t}var Oo={},Do=Io(Oo),Po=Io(!1),Ro=Oo;function ko(e,t){var n=e.type.contextTypes;if(!n)return Oo;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,a={};for(o in n)a[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function wo(e){return null!=e.childContextTypes}function Lo(){Co(Po),Co(Do)}function Mo(e,t,n){if(Do.current!==Oo)throw Error(a(168));No(Do,t),No(Po,n)}function xo(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var o in r=r.getChildContext())if(!(o in t))throw Error(a(108,q(e)||"Unknown",o));return G({},n,r)}function Go(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||Oo,Ro=Do.current,No(Do,e),No(Po,Po.current),!0}function Bo(e,t,n){var r=e.stateNode;if(!r)throw Error(a(169));n?(e=xo(e,t,Ro),r.__reactInternalMemoizedMergedChildContext=e,Co(Po),Co(Do),No(Do,e)):Co(Po),No(Po,n)}var Ho=null,Fo=!1,Uo=!1;function jo(e){null===Ho?Ho=[e]:Ho.push(e)}function qo(){if(!Uo&&null!==Ho){Uo=!0;var e=0,t=yt;try{var n=Ho;for(yt=1;e<n.length;e++){var r=n[e];do{r=r(!0)}while(null!==r)}Ho=null,Fo=!1}catch(t){throw null!==Ho&&(Ho=Ho.slice(e+1)),Ye(Je,qo),t}finally{yt=t,Uo=!1}}return null}var zo=[],Wo=0,Vo=null,Yo=0,$o=[],Qo=0,Xo=null,Ko=1,Zo="";function Jo(e,t){zo[Wo++]=Yo,zo[Wo++]=Vo,Vo=e,Yo=t}function ea(e,t,n){$o[Qo++]=Ko,$o[Qo++]=Zo,$o[Qo++]=Xo,Xo=e;var r=Ko;e=Zo;var o=32-it(r)-1;r&=~(1<<o),n+=1;var a=32-it(t)+o;if(30<a){var i=o-o%5;a=(r&(1<<i)-1).toString(32),r>>=i,o-=i,Ko=1<<32-it(t)+o|n<<o|r,Zo=a+e}else Ko=1<<a|n<<o|r,Zo=e}function ta(e){null!==e.return&&(Jo(e,1),ea(e,1,0))}function na(e){for(;e===Vo;)Vo=zo[--Wo],zo[Wo]=null,Yo=zo[--Wo],zo[Wo]=null;for(;e===Xo;)Xo=$o[--Qo],$o[Qo]=null,Zo=$o[--Qo],$o[Qo]=null,Ko=$o[--Qo],$o[Qo]=null}var ra=null,oa=null,aa=!1,ia=null;function sa(e,t){var n=Ru(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,null===(t=e.deletions)?(e.deletions=[n],e.flags|=16):t.push(n)}function la(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,ra=e,oa=uo(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,ra=e,oa=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(n=null!==Xo?{id:Ko,overflow:Zo}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},(n=Ru(18,null,null,0)).stateNode=t,n.return=e,e.child=n,ra=e,oa=null,!0);default:return!1}}function ua(e){return!(!(1&e.mode)||128&e.flags)}function ca(e){if(aa){var t=oa;if(t){var n=t;if(!la(e,t)){if(ua(e))throw Error(a(418));t=uo(n.nextSibling);var r=ra;t&&la(e,t)?sa(r,n):(e.flags=-4097&e.flags|2,aa=!1,ra=e)}}else{if(ua(e))throw Error(a(418));e.flags=-4097&e.flags|2,aa=!1,ra=e}}}function fa(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;ra=e}function pa(e){if(e!==ra)return!1;if(!aa)return fa(e),aa=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!no(e.type,e.memoizedProps)),t&&(t=oa)){if(ua(e))throw da(),Error(a(418));for(;t;)sa(e,t),t=uo(t.nextSibling)}if(fa(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){oa=uo(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}oa=null}}else oa=ra?uo(e.stateNode.nextSibling):null;return!0}function da(){for(var e=oa;e;)e=uo(e.nextSibling)}function ha(){oa=ra=null,aa=!1}function ma(e){null===ia?ia=[e]:ia.push(e)}var Ea=_.ReactCurrentBatchConfig;function Ta(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var r=n.stateNode}if(!r)throw Error(a(147,e));var o=r,i=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===i?t.ref:(t=function(e){var t=o.refs;null===e?delete t[i]:t[i]=e},t._stringRef=i,t)}if("string"!=typeof e)throw Error(a(284));if(!n._owner)throw Error(a(290,e))}return e}function ga(e,t){throw e=Object.prototype.toString.call(t),Error(a(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function ya(e){return(0,e._init)(e._payload)}function _a(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=wu(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=2,n):r:(t.flags|=2,n):(t.flags|=1048576,n)}function s(t){return e&&null===t.alternate&&(t.flags|=2),t}function l(e,t,n,r){return null===t||6!==t.tag?((t=Gu(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function u(e,t,n,r){var a=n.type;return a===v?f(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===a||"object"==typeof a&&null!==a&&a.$$typeof===k&&ya(a)===t.type)?((r=o(t,n.props)).ref=Ta(e,t,n),r.return=e,r):((r=Lu(n.type,n.key,n.props,null,e.mode,r)).ref=Ta(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Bu(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,a){return null===t||7!==t.tag?((t=Mu(n,e.mode,r,a)).return=e,t):((t=o(t,n)).return=e,t)}function p(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=Gu(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case A:return(n=Lu(t.type,t.key,t.props,null,e.mode,n)).ref=Ta(e,null,t),n.return=e,n;case b:return(t=Bu(t,e.mode,n)).return=e,t;case k:return p(e,(0,t._init)(t._payload),n)}if(te(t)||M(t))return(t=Mu(t,e.mode,n,null)).return=e,t;ga(e,t)}return null}function d(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n)return null!==o?null:l(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case A:return n.key===o?u(e,t,n,r):null;case b:return n.key===o?c(e,t,n,r):null;case k:return d(e,t,(o=n._init)(n._payload),r)}if(te(n)||M(n))return null!==o?null:f(e,t,n,r,null);ga(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r&&""!==r||"number"==typeof r)return l(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case A:return u(t,e=e.get(null===r.key?n:r.key)||null,r,o);case b:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o);case k:return h(e,t,n,(0,r._init)(r._payload),o)}if(te(r)||M(r))return f(t,e=e.get(n)||null,r,o,null);ga(t,r)}return null}function m(o,a,s,l){for(var u=null,c=null,f=a,m=a=0,E=null;null!==f&&m<s.length;m++){f.index>m?(E=f,f=null):E=f.sibling;var T=d(o,f,s[m],l);if(null===T){null===f&&(f=E);break}e&&f&&null===T.alternate&&t(o,f),a=i(T,a,m),null===c?u=T:c.sibling=T,c=T,f=E}if(m===s.length)return n(o,f),aa&&Jo(o,m),u;if(null===f){for(;m<s.length;m++)null!==(f=p(o,s[m],l))&&(a=i(f,a,m),null===c?u=f:c.sibling=f,c=f);return aa&&Jo(o,m),u}for(f=r(o,f);m<s.length;m++)null!==(E=h(f,o,m,s[m],l))&&(e&&null!==E.alternate&&f.delete(null===E.key?m:E.key),a=i(E,a,m),null===c?u=E:c.sibling=E,c=E);return e&&f.forEach((function(e){return t(o,e)})),aa&&Jo(o,m),u}function E(o,s,l,u){var c=M(l);if("function"!=typeof c)throw Error(a(150));if(null==(l=c.call(l)))throw Error(a(151));for(var f=c=null,m=s,E=s=0,T=null,g=l.next();null!==m&&!g.done;E++,g=l.next()){m.index>E?(T=m,m=null):T=m.sibling;var y=d(o,m,g.value,u);if(null===y){null===m&&(m=T);break}e&&m&&null===y.alternate&&t(o,m),s=i(y,s,E),null===f?c=y:f.sibling=y,f=y,m=T}if(g.done)return n(o,m),aa&&Jo(o,E),c;if(null===m){for(;!g.done;E++,g=l.next())null!==(g=p(o,g.value,u))&&(s=i(g,s,E),null===f?c=g:f.sibling=g,f=g);return aa&&Jo(o,E),c}for(m=r(o,m);!g.done;E++,g=l.next())null!==(g=h(m,o,E,g.value,u))&&(e&&null!==g.alternate&&m.delete(null===g.key?E:g.key),s=i(g,s,E),null===f?c=g:f.sibling=g,f=g);return e&&m.forEach((function(e){return t(o,e)})),aa&&Jo(o,E),c}return function e(r,a,i,l){if("object"==typeof i&&null!==i&&i.type===v&&null===i.key&&(i=i.props.children),"object"==typeof i&&null!==i){switch(i.$$typeof){case A:e:{for(var u=i.key,c=a;null!==c;){if(c.key===u){if((u=i.type)===v){if(7===c.tag){n(r,c.sibling),(a=o(c,i.props.children)).return=r,r=a;break e}}else if(c.elementType===u||"object"==typeof u&&null!==u&&u.$$typeof===k&&ya(u)===c.type){n(r,c.sibling),(a=o(c,i.props)).ref=Ta(r,c,i),a.return=r,r=a;break e}n(r,c);break}t(r,c),c=c.sibling}i.type===v?((a=Mu(i.props.children,r.mode,l,i.key)).return=r,r=a):((l=Lu(i.type,i.key,i.props,null,r.mode,l)).ref=Ta(r,a,i),l.return=r,r=l)}return s(r);case b:e:{for(c=i.key;null!==a;){if(a.key===c){if(4===a.tag&&a.stateNode.containerInfo===i.containerInfo&&a.stateNode.implementation===i.implementation){n(r,a.sibling),(a=o(a,i.children||[])).return=r,r=a;break e}n(r,a);break}t(r,a),a=a.sibling}(a=Bu(i,r.mode,l)).return=r,r=a}return s(r);case k:return e(r,a,(c=i._init)(i._payload),l)}if(te(i))return m(r,a,i,l);if(M(i))return E(r,a,i,l);ga(r,i)}return"string"==typeof i&&""!==i||"number"==typeof i?(i=""+i,null!==a&&6===a.tag?(n(r,a.sibling),(a=o(a,i)).return=r,r=a):(n(r,a),(a=Gu(i,r.mode,l)).return=r,r=a),s(r)):n(r,a)}}var Aa=_a(!0),ba=_a(!1),va=Io(null),Sa=null,Ia=null,Ca=null;function Na(){Ca=Ia=Sa=null}function Oa(e){var t=va.current;Co(va),e._currentValue=t}function Da(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function Pa(e,t){Sa=e,Ca=Ia=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(!!(e.lanes&t)&&(ys=!0),e.firstContext=null)}function Ra(e){var t=e._currentValue;if(Ca!==e)if(e={context:e,memoizedValue:t,next:null},null===Ia){if(null===Sa)throw Error(a(308));Ia=e,Sa.dependencies={lanes:0,firstContext:e}}else Ia=Ia.next=e;return t}var ka=null;function wa(e){null===ka?ka=[e]:ka.push(e)}function La(e,t,n,r){var o=t.interleaved;return null===o?(n.next=n,wa(t)):(n.next=o.next,o.next=n),t.interleaved=n,Ma(e,r)}function Ma(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}var xa=!1;function Ga(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Ba(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function Ha(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function Fa(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,2&Ol){var o=r.pending;return null===o?t.next=t:(t.next=o.next,o.next=t),r.pending=t,Ma(e,n)}return null===(o=r.interleaved)?(t.next=t,wa(r)):(t.next=o.next,o.next=t),r.interleaved=t,Ma(e,n)}function Ua(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,4194240&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,gt(e,n)}}function ja(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var o=null,a=null;if(null!==(n=n.firstBaseUpdate)){do{var i={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===a?o=a=i:a=a.next=i,n=n.next}while(null!==n);null===a?o=a=t:a=a.next=t}else o=a=t;return n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:a,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function qa(e,t,n,r){var o=e.updateQueue;xa=!1;var a=o.firstBaseUpdate,i=o.lastBaseUpdate,s=o.shared.pending;if(null!==s){o.shared.pending=null;var l=s,u=l.next;l.next=null,null===i?a=u:i.next=u,i=l;var c=e.alternate;null!==c&&(s=(c=c.updateQueue).lastBaseUpdate)!==i&&(null===s?c.firstBaseUpdate=u:s.next=u,c.lastBaseUpdate=l)}if(null!==a){var f=o.baseState;for(i=0,c=u=l=null,s=a;;){var p=s.lane,d=s.eventTime;if((r&p)===p){null!==c&&(c=c.next={eventTime:d,lane:0,tag:s.tag,payload:s.payload,callback:s.callback,next:null});e:{var h=e,m=s;switch(p=t,d=n,m.tag){case 1:if("function"==typeof(h=m.payload)){f=h.call(d,f,p);break e}f=h;break e;case 3:h.flags=-65537&h.flags|128;case 0:if(null==(p="function"==typeof(h=m.payload)?h.call(d,f,p):h))break e;f=G({},f,p);break e;case 2:xa=!0}}null!==s.callback&&0!==s.lane&&(e.flags|=64,null===(p=o.effects)?o.effects=[s]:p.push(s))}else d={eventTime:d,lane:p,tag:s.tag,payload:s.payload,callback:s.callback,next:null},null===c?(u=c=d,l=f):c=c.next=d,i|=p;if(null===(s=s.next)){if(null===(s=o.shared.pending))break;s=(p=s).next,p.next=null,o.lastBaseUpdate=p,o.shared.pending=null}}if(null===c&&(l=f),o.baseState=l,o.firstBaseUpdate=u,o.lastBaseUpdate=c,null!==(t=o.shared.interleaved)){o=t;do{i|=o.lane,o=o.next}while(o!==t)}else null===a&&(o.shared.lanes=0);xl|=i,e.lanes=i,e.memoizedState=f}}function za(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=n,"function"!=typeof o)throw Error(a(191,o));o.call(r)}}}var Wa={},Va=Io(Wa),Ya=Io(Wa),$a=Io(Wa);function Qa(e){if(e===Wa)throw Error(a(174));return e}function Xa(e,t){switch(No($a,t),No(Ya,e),No(Va,Wa),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:le(null,"");break;default:t=le(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}Co(Va),No(Va,t)}function Ka(){Co(Va),Co(Ya),Co($a)}function Za(e){Qa($a.current);var t=Qa(Va.current),n=le(t,e.type);t!==n&&(No(Ya,e),No(Va,n))}function Ja(e){Ya.current===e&&(Co(Va),Co(Ya))}var ei=Io(0);function ti(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(128&t.flags)return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var ni=[];function ri(){for(var e=0;e<ni.length;e++)ni[e]._workInProgressVersionPrimary=null;ni.length=0}var oi=_.ReactCurrentDispatcher,ai=_.ReactCurrentBatchConfig,ii=0,si=null,li=null,ui=null,ci=!1,fi=!1,pi=0,di=0;function hi(){throw Error(a(321))}function mi(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!sr(e[n],t[n]))return!1;return!0}function Ei(e,t,n,r,o,i){if(ii=i,si=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,oi.current=null===e||null===e.memoizedState?Ji:es,e=n(r,o),fi){i=0;do{if(fi=!1,pi=0,25<=i)throw Error(a(301));i+=1,ui=li=null,t.updateQueue=null,oi.current=ts,e=n(r,o)}while(fi)}if(oi.current=Zi,t=null!==li&&null!==li.next,ii=0,ui=li=si=null,ci=!1,t)throw Error(a(300));return e}function Ti(){var e=0!==pi;return pi=0,e}function gi(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===ui?si.memoizedState=ui=e:ui=ui.next=e,ui}function yi(){if(null===li){var e=si.alternate;e=null!==e?e.memoizedState:null}else e=li.next;var t=null===ui?si.memoizedState:ui.next;if(null!==t)ui=t,li=e;else{if(null===e)throw Error(a(310));e={memoizedState:(li=e).memoizedState,baseState:li.baseState,baseQueue:li.baseQueue,queue:li.queue,next:null},null===ui?si.memoizedState=ui=e:ui=ui.next=e}return ui}function _i(e,t){return"function"==typeof t?t(e):t}function Ai(e){var t=yi(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=li,o=r.baseQueue,i=n.pending;if(null!==i){if(null!==o){var s=o.next;o.next=i.next,i.next=s}r.baseQueue=o=i,n.pending=null}if(null!==o){i=o.next,r=r.baseState;var l=s=null,u=null,c=i;do{var f=c.lane;if((ii&f)===f)null!==u&&(u=u.next={lane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),r=c.hasEagerState?c.eagerState:e(r,c.action);else{var p={lane:f,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null};null===u?(l=u=p,s=r):u=u.next=p,si.lanes|=f,xl|=f}c=c.next}while(null!==c&&c!==i);null===u?s=r:u.next=l,sr(r,t.memoizedState)||(ys=!0),t.memoizedState=r,t.baseState=s,t.baseQueue=u,n.lastRenderedState=r}if(null!==(e=n.interleaved)){o=e;do{i=o.lane,si.lanes|=i,xl|=i,o=o.next}while(o!==e)}else null===o&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function bi(e){var t=yi(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,i=t.memoizedState;if(null!==o){n.pending=null;var s=o=o.next;do{i=e(i,s.action),s=s.next}while(s!==o);sr(i,t.memoizedState)||(ys=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function vi(){}function Si(e,t){var n=si,r=yi(),o=t(),i=!sr(r.memoizedState,o);if(i&&(r.memoizedState=o,ys=!0),r=r.queue,xi(Ni.bind(null,n,r,e),[e]),r.getSnapshot!==t||i||null!==ui&&1&ui.memoizedState.tag){if(n.flags|=2048,Ri(9,Ci.bind(null,n,r,o,t),void 0,null),null===Dl)throw Error(a(349));30&ii||Ii(n,t,o)}return o}function Ii(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=si.updateQueue)?(t={lastEffect:null,stores:null},si.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function Ci(e,t,n,r){t.value=n,t.getSnapshot=r,Oi(t)&&Di(e)}function Ni(e,t,n){return n((function(){Oi(t)&&Di(e)}))}function Oi(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!sr(e,n)}catch(e){return!0}}function Di(e){var t=Ma(e,1);null!==t&&nu(t,e,1,-1)}function Pi(e){var t=gi();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:_i,lastRenderedState:e},t.queue=e,e=e.dispatch=$i.bind(null,si,e),[t.memoizedState,e]}function Ri(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=si.updateQueue)?(t={lastEffect:null,stores:null},si.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function ki(){return yi().memoizedState}function wi(e,t,n,r){var o=gi();si.flags|=e,o.memoizedState=Ri(1|t,n,void 0,void 0===r?null:r)}function Li(e,t,n,r){var o=yi();r=void 0===r?null:r;var a=void 0;if(null!==li){var i=li.memoizedState;if(a=i.destroy,null!==r&&mi(r,i.deps))return void(o.memoizedState=Ri(t,n,a,r))}si.flags|=e,o.memoizedState=Ri(1|t,n,a,r)}function Mi(e,t){return wi(8390656,8,e,t)}function xi(e,t){return Li(2048,8,e,t)}function Gi(e,t){return Li(4,2,e,t)}function Bi(e,t){return Li(4,4,e,t)}function Hi(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Fi(e,t,n){return n=null!=n?n.concat([e]):null,Li(4,4,Hi.bind(null,t,e),n)}function Ui(){}function ji(e,t){var n=yi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&mi(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function qi(e,t){var n=yi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&mi(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function zi(e,t,n){return 21&ii?(sr(n,t)||(n=mt(),si.lanes|=n,xl|=n,e.baseState=!0),t):(e.baseState&&(e.baseState=!1,ys=!0),e.memoizedState=n)}function Wi(e,t){var n=yt;yt=0!==n&&4>n?n:4,e(!0);var r=ai.transition;ai.transition={};try{e(!1),t()}finally{yt=n,ai.transition=r}}function Vi(){return yi().memoizedState}function Yi(e,t,n){var r=tu(e);n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},Qi(e)?Xi(t,n):null!==(n=La(e,t,n,r))&&(nu(n,e,r,eu()),Ki(n,t,r))}function $i(e,t,n){var r=tu(e),o={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(Qi(e))Xi(t,o);else{var a=e.alternate;if(0===e.lanes&&(null===a||0===a.lanes)&&null!==(a=t.lastRenderedReducer))try{var i=t.lastRenderedState,s=a(i,n);if(o.hasEagerState=!0,o.eagerState=s,sr(s,i)){var l=t.interleaved;return null===l?(o.next=o,wa(t)):(o.next=l.next,l.next=o),void(t.interleaved=o)}}catch(e){}null!==(n=La(e,t,o,r))&&(nu(n,e,r,o=eu()),Ki(n,t,r))}}function Qi(e){var t=e.alternate;return e===si||null!==t&&t===si}function Xi(e,t){fi=ci=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function Ki(e,t,n){if(4194240&n){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,gt(e,n)}}var Zi={readContext:Ra,useCallback:hi,useContext:hi,useEffect:hi,useImperativeHandle:hi,useInsertionEffect:hi,useLayoutEffect:hi,useMemo:hi,useReducer:hi,useRef:hi,useState:hi,useDebugValue:hi,useDeferredValue:hi,useTransition:hi,useMutableSource:hi,useSyncExternalStore:hi,useId:hi,unstable_isNewReconciler:!1},Ji={readContext:Ra,useCallback:function(e,t){return gi().memoizedState=[e,void 0===t?null:t],e},useContext:Ra,useEffect:Mi,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,wi(4194308,4,Hi.bind(null,t,e),n)},useLayoutEffect:function(e,t){return wi(4194308,4,e,t)},useInsertionEffect:function(e,t){return wi(4,2,e,t)},useMemo:function(e,t){var n=gi();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=gi();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=Yi.bind(null,si,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},gi().memoizedState=e},useState:Pi,useDebugValue:Ui,useDeferredValue:function(e){return gi().memoizedState=e},useTransition:function(){var e=Pi(!1),t=e[0];return e=Wi.bind(null,e[1]),gi().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=si,o=gi();if(aa){if(void 0===n)throw Error(a(407));n=n()}else{if(n=t(),null===Dl)throw Error(a(349));30&ii||Ii(r,t,n)}o.memoizedState=n;var i={value:n,getSnapshot:t};return o.queue=i,Mi(Ni.bind(null,r,i,e),[e]),r.flags|=2048,Ri(9,Ci.bind(null,r,i,n,t),void 0,null),n},useId:function(){var e=gi(),t=Dl.identifierPrefix;if(aa){var n=Zo;t=":"+t+"R"+(n=(Ko&~(1<<32-it(Ko)-1)).toString(32)+n),0<(n=pi++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=di++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},es={readContext:Ra,useCallback:ji,useContext:Ra,useEffect:xi,useImperativeHandle:Fi,useInsertionEffect:Gi,useLayoutEffect:Bi,useMemo:qi,useReducer:Ai,useRef:ki,useState:function(){return Ai(_i)},useDebugValue:Ui,useDeferredValue:function(e){return zi(yi(),li.memoizedState,e)},useTransition:function(){return[Ai(_i)[0],yi().memoizedState]},useMutableSource:vi,useSyncExternalStore:Si,useId:Vi,unstable_isNewReconciler:!1},ts={readContext:Ra,useCallback:ji,useContext:Ra,useEffect:xi,useImperativeHandle:Fi,useInsertionEffect:Gi,useLayoutEffect:Bi,useMemo:qi,useReducer:bi,useRef:ki,useState:function(){return bi(_i)},useDebugValue:Ui,useDeferredValue:function(e){var t=yi();return null===li?t.memoizedState=e:zi(t,li.memoizedState,e)},useTransition:function(){return[bi(_i)[0],yi().memoizedState]},useMutableSource:vi,useSyncExternalStore:Si,useId:Vi,unstable_isNewReconciler:!1};function ns(e,t){if(e&&e.defaultProps){for(var n in t=G({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}function rs(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:G({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var os={isMounted:function(e){return!!(e=e._reactInternals)&&je(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=eu(),o=tu(e),a=Ha(r,o);a.payload=t,null!=n&&(a.callback=n),null!==(t=Fa(e,a,o))&&(nu(t,e,o,r),Ua(t,e,o))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=eu(),o=tu(e),a=Ha(r,o);a.tag=1,a.payload=t,null!=n&&(a.callback=n),null!==(t=Fa(e,a,o))&&(nu(t,e,o,r),Ua(t,e,o))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=eu(),r=tu(e),o=Ha(n,r);o.tag=2,null!=t&&(o.callback=t),null!==(t=Fa(e,o,r))&&(nu(t,e,r,n),Ua(t,e,r))}};function as(e,t,n,r,o,a,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,a,i):!(t.prototype&&t.prototype.isPureReactComponent&&lr(n,r)&&lr(o,a))}function is(e,t,n){var r=!1,o=Oo,a=t.contextType;return"object"==typeof a&&null!==a?a=Ra(a):(o=wo(t)?Ro:Do.current,a=(r=null!=(r=t.contextTypes))?ko(e,o):Oo),t=new t(n,a),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=os,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=a),t}function ss(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&os.enqueueReplaceState(t,t.state,null)}function ls(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs={},Ga(e);var a=t.contextType;"object"==typeof a&&null!==a?o.context=Ra(a):(a=wo(t)?Ro:Do.current,o.context=ko(e,a)),o.state=e.memoizedState,"function"==typeof(a=t.getDerivedStateFromProps)&&(rs(e,t,a,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&os.enqueueReplaceState(o,o.state,null),qa(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.flags|=4194308)}function us(e,t){try{var n="",r=t;do{n+=U(r),r=r.return}while(r);var o=n}catch(e){o="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:o,digest:null}}function cs(e,t,n){return{value:e,source:null,stack:null!=n?n:null,digest:null!=t?t:null}}function fs(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var ps="function"==typeof WeakMap?WeakMap:Map;function ds(e,t,n){(n=Ha(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){zl||(zl=!0,Wl=r),fs(0,t)},n}function hs(e,t,n){(n=Ha(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return r(o)},n.callback=function(){fs(0,t)}}var a=e.stateNode;return null!==a&&"function"==typeof a.componentDidCatch&&(n.callback=function(){fs(0,t),"function"!=typeof r&&(null===Vl?Vl=new Set([this]):Vl.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}function ms(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new ps;var o=new Set;r.set(t,o)}else void 0===(o=r.get(t))&&(o=new Set,r.set(t,o));o.has(n)||(o.add(n),e=Iu.bind(null,e,t,n),t.then(e,e))}function Es(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function Ts(e,t,n,r,o){return 1&e.mode?(e.flags|=65536,e.lanes=o,e):(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,1===n.tag&&(null===n.alternate?n.tag=17:((t=Ha(-1,1)).tag=2,Fa(n,t,1))),n.lanes|=1),e)}var gs=_.ReactCurrentOwner,ys=!1;function _s(e,t,n,r){t.child=null===e?ba(t,null,n,r):Aa(t,e.child,n,r)}function As(e,t,n,r,o){n=n.render;var a=t.ref;return Pa(t,o),r=Ei(e,t,n,r,a,o),n=Ti(),null===e||ys?(aa&&n&&ta(t),t.flags|=1,_s(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,zs(e,t,o))}function bs(e,t,n,r,o){if(null===e){var a=n.type;return"function"!=typeof a||ku(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Lu(n.type,null,r,t,t.mode,o)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,vs(e,t,a,r,o))}if(a=e.child,!(e.lanes&o)){var i=a.memoizedProps;if((n=null!==(n=n.compare)?n:lr)(i,r)&&e.ref===t.ref)return zs(e,t,o)}return t.flags|=1,(e=wu(a,r)).ref=t.ref,e.return=t,t.child=e}function vs(e,t,n,r,o){if(null!==e){var a=e.memoizedProps;if(lr(a,r)&&e.ref===t.ref){if(ys=!1,t.pendingProps=r=a,!(e.lanes&o))return t.lanes=e.lanes,zs(e,t,o);131072&e.flags&&(ys=!0)}}return Cs(e,t,n,r,o)}function Ss(e,t,n){var r=t.pendingProps,o=r.children,a=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(1&t.mode){if(!(1073741824&n))return e=null!==a?a.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,No(wl,kl),kl|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=null!==a?a.baseLanes:n,No(wl,kl),kl|=r}else t.memoizedState={baseLanes:0,cachePool:null,transitions:null},No(wl,kl),kl|=n;else null!==a?(r=a.baseLanes|n,t.memoizedState=null):r=n,No(wl,kl),kl|=r;return _s(e,t,o,n),t.child}function Is(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function Cs(e,t,n,r,o){var a=wo(n)?Ro:Do.current;return a=ko(t,a),Pa(t,o),n=Ei(e,t,n,r,a,o),r=Ti(),null===e||ys?(aa&&r&&ta(t),t.flags|=1,_s(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,zs(e,t,o))}function Ns(e,t,n,r,o){if(wo(n)){var a=!0;Go(t)}else a=!1;if(Pa(t,o),null===t.stateNode)qs(e,t),is(t,n,r),ls(t,n,r,o),r=!0;else if(null===e){var i=t.stateNode,s=t.memoizedProps;i.props=s;var l=i.context,u=n.contextType;u="object"==typeof u&&null!==u?Ra(u):ko(t,u=wo(n)?Ro:Do.current);var c=n.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof i.getSnapshotBeforeUpdate;f||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(s!==r||l!==u)&&ss(t,i,r,u),xa=!1;var p=t.memoizedState;i.state=p,qa(t,r,i,o),l=t.memoizedState,s!==r||p!==l||Po.current||xa?("function"==typeof c&&(rs(t,n,c,r),l=t.memoizedState),(s=xa||as(t,n,s,r,p,l,u))?(f||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.flags|=4194308)):("function"==typeof i.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=l),i.props=r,i.state=l,i.context=u,r=s):("function"==typeof i.componentDidMount&&(t.flags|=4194308),r=!1)}else{i=t.stateNode,Ba(e,t),s=t.memoizedProps,u=t.type===t.elementType?s:ns(t.type,s),i.props=u,f=t.pendingProps,p=i.context,l="object"==typeof(l=n.contextType)&&null!==l?Ra(l):ko(t,l=wo(n)?Ro:Do.current);var d=n.getDerivedStateFromProps;(c="function"==typeof d||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(s!==f||p!==l)&&ss(t,i,r,l),xa=!1,p=t.memoizedState,i.state=p,qa(t,r,i,o);var h=t.memoizedState;s!==f||p!==h||Po.current||xa?("function"==typeof d&&(rs(t,n,d,r),h=t.memoizedState),(u=xa||as(t,n,u,r,p,h,l)||!1)?(c||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,h,l),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,h,l)),"function"==typeof i.componentDidUpdate&&(t.flags|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof i.componentDidUpdate||s===e.memoizedProps&&p===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||s===e.memoizedProps&&p===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=h),i.props=r,i.state=h,i.context=l,r=u):("function"!=typeof i.componentDidUpdate||s===e.memoizedProps&&p===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||s===e.memoizedProps&&p===e.memoizedState||(t.flags|=1024),r=!1)}return Os(e,t,n,r,a,o)}function Os(e,t,n,r,o,a){Is(e,t);var i=!!(128&t.flags);if(!r&&!i)return o&&Bo(t,n,!1),zs(e,t,a);r=t.stateNode,gs.current=t;var s=i&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&i?(t.child=Aa(t,e.child,null,a),t.child=Aa(t,null,s,a)):_s(e,t,s,a),t.memoizedState=r.state,o&&Bo(t,n,!0),t.child}function Ds(e){var t=e.stateNode;t.pendingContext?Mo(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Mo(0,t.context,!1),Xa(e,t.containerInfo)}function Ps(e,t,n,r,o){return ha(),ma(o),t.flags|=256,_s(e,t,n,r),t.child}var Rs,ks,ws,Ls,Ms={dehydrated:null,treeContext:null,retryLane:0};function xs(e){return{baseLanes:e,cachePool:null,transitions:null}}function Gs(e,t,n){var r,o=t.pendingProps,i=ei.current,s=!1,l=!!(128&t.flags);if((r=l)||(r=(null===e||null!==e.memoizedState)&&!!(2&i)),r?(s=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(i|=1),No(ei,1&i),null===e)return ca(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(1&t.mode?"$!"===e.data?t.lanes=8:t.lanes=1073741824:t.lanes=1,null):(l=o.children,e=o.fallback,s?(o=t.mode,s=t.child,l={mode:"hidden",children:l},1&o||null===s?s=xu(l,o,0,null):(s.childLanes=0,s.pendingProps=l),e=Mu(e,o,n,null),s.return=t,e.return=t,s.sibling=e,t.child=s,t.child.memoizedState=xs(n),t.memoizedState=Ms,e):Bs(t,l));if(null!==(i=e.memoizedState)&&null!==(r=i.dehydrated))return function(e,t,n,r,o,i,s){if(n)return 256&t.flags?(t.flags&=-257,Hs(e,t,s,r=cs(Error(a(422))))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(i=r.fallback,o=t.mode,r=xu({mode:"visible",children:r.children},o,0,null),(i=Mu(i,o,s,null)).flags|=2,r.return=t,i.return=t,r.sibling=i,t.child=r,1&t.mode&&Aa(t,e.child,null,s),t.child.memoizedState=xs(s),t.memoizedState=Ms,i);if(!(1&t.mode))return Hs(e,t,s,null);if("$!"===o.data){if(r=o.nextSibling&&o.nextSibling.dataset)var l=r.dgst;return r=l,Hs(e,t,s,r=cs(i=Error(a(419)),r,void 0))}if(l=!!(s&e.childLanes),ys||l){if(null!==(r=Dl)){switch(s&-s){case 4:o=2;break;case 16:o=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:o=32;break;case 536870912:o=268435456;break;default:o=0}0!==(o=o&(r.suspendedLanes|s)?0:o)&&o!==i.retryLane&&(i.retryLane=o,Ma(e,o),nu(r,e,o,-1))}return mu(),Hs(e,t,s,r=cs(Error(a(421))))}return"$?"===o.data?(t.flags|=128,t.child=e.child,t=Nu.bind(null,e),o._reactRetry=t,null):(e=i.treeContext,oa=uo(o.nextSibling),ra=t,aa=!0,ia=null,null!==e&&($o[Qo++]=Ko,$o[Qo++]=Zo,$o[Qo++]=Xo,Ko=e.id,Zo=e.overflow,Xo=t),(t=Bs(t,r.children)).flags|=4096,t)}(e,t,l,o,r,i,n);if(s){s=o.fallback,l=t.mode,r=(i=e.child).sibling;var u={mode:"hidden",children:o.children};return 1&l||t.child===i?(o=wu(i,u)).subtreeFlags=14680064&i.subtreeFlags:((o=t.child).childLanes=0,o.pendingProps=u,t.deletions=null),null!==r?s=wu(r,s):(s=Mu(s,l,n,null)).flags|=2,s.return=t,o.return=t,o.sibling=s,t.child=o,o=s,s=t.child,l=null===(l=e.child.memoizedState)?xs(n):{baseLanes:l.baseLanes|n,cachePool:null,transitions:l.transitions},s.memoizedState=l,s.childLanes=e.childLanes&~n,t.memoizedState=Ms,o}return e=(s=e.child).sibling,o=wu(s,{mode:"visible",children:o.children}),!(1&t.mode)&&(o.lanes=n),o.return=t,o.sibling=null,null!==e&&(null===(n=t.deletions)?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=o,t.memoizedState=null,o}function Bs(e,t){return(t=xu({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function Hs(e,t,n,r){return null!==r&&ma(r),Aa(t,e.child,null,n),(e=Bs(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function Fs(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),Da(e.return,t,n)}function Us(e,t,n,r,o){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailMode=o)}function js(e,t,n){var r=t.pendingProps,o=r.revealOrder,a=r.tail;if(_s(e,t,r.children,n),2&(r=ei.current))r=1&r|2,t.flags|=128;else{if(null!==e&&128&e.flags)e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Fs(e,n,t);else if(19===e.tag)Fs(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(No(ei,r),1&t.mode)switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===ti(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),Us(t,!1,o,n,a);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===ti(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}Us(t,!0,n,null,a);break;case"together":Us(t,!1,null,null,void 0);break;default:t.memoizedState=null}else t.memoizedState=null;return t.child}function qs(e,t){!(1&t.mode)&&null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2)}function zs(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),xl|=t.lanes,!(n&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=wu(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=wu(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Ws(e,t){if(!aa)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Vs(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var o=e.child;null!==o;)n|=o.lanes|o.childLanes,r|=14680064&o.subtreeFlags,r|=14680064&o.flags,o.return=e,o=o.sibling;else for(o=e.child;null!==o;)n|=o.lanes|o.childLanes,r|=o.subtreeFlags,r|=o.flags,o.return=e,o=o.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function Ys(e,t,n){var r=t.pendingProps;switch(na(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return Vs(t),null;case 1:case 17:return wo(t.type)&&Lo(),Vs(t),null;case 3:return r=t.stateNode,Ka(),Co(Po),Co(Do),ri(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(pa(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&!(256&t.flags)||(t.flags|=1024,null!==ia&&(iu(ia),ia=null))),ks(e,t),Vs(t),null;case 5:Ja(t);var o=Qa($a.current);if(n=t.type,null!==e&&null!=t.stateNode)ws(e,t,n,r,o),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(null===t.stateNode)throw Error(a(166));return Vs(t),null}if(e=Qa(Va.current),pa(t)){r=t.stateNode,n=t.type;var i=t.memoizedProps;switch(r[po]=t,r[ho]=i,e=!!(1&t.mode),n){case"dialog":Hr("cancel",r),Hr("close",r);break;case"iframe":case"object":case"embed":Hr("load",r);break;case"video":case"audio":for(o=0;o<Mr.length;o++)Hr(Mr[o],r);break;case"source":Hr("error",r);break;case"img":case"image":case"link":Hr("error",r),Hr("load",r);break;case"details":Hr("toggle",r);break;case"input":X(r,i),Hr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!i.multiple},Hr("invalid",r);break;case"textarea":oe(r,i),Hr("invalid",r)}for(var l in ge(n,i),o=null,i)if(i.hasOwnProperty(l)){var u=i[l];"children"===l?"string"==typeof u?r.textContent!==u&&(!0!==i.suppressHydrationWarning&&Zr(r.textContent,u,e),o=["children",u]):"number"==typeof u&&r.textContent!==""+u&&(!0!==i.suppressHydrationWarning&&Zr(r.textContent,u,e),o=["children",""+u]):s.hasOwnProperty(l)&&null!=u&&"onScroll"===l&&Hr("scroll",r)}switch(n){case"input":V(r),J(r,i,!0);break;case"textarea":V(r),ie(r);break;case"select":case"option":break;default:"function"==typeof i.onClick&&(r.onclick=Jr)}r=o,t.updateQueue=r,null!==r&&(t.flags|=4)}else{l=9===o.nodeType?o:o.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=se(n)),"http://www.w3.org/1999/xhtml"===e?"script"===n?((e=l.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=l.createElement(n,{is:r.is}):(e=l.createElement(n),"select"===n&&(l=e,r.multiple?l.multiple=!0:r.size&&(l.size=r.size))):e=l.createElementNS(e,n),e[po]=t,e[ho]=r,Rs(e,t,!1,!1),t.stateNode=e;e:{switch(l=ye(n,r),n){case"dialog":Hr("cancel",e),Hr("close",e),o=r;break;case"iframe":case"object":case"embed":Hr("load",e),o=r;break;case"video":case"audio":for(o=0;o<Mr.length;o++)Hr(Mr[o],e);o=r;break;case"source":Hr("error",e),o=r;break;case"img":case"image":case"link":Hr("error",e),Hr("load",e),o=r;break;case"details":Hr("toggle",e),o=r;break;case"input":X(e,r),o=Q(e,r),Hr("invalid",e);break;case"option":default:o=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},o=G({},r,{value:void 0}),Hr("invalid",e);break;case"textarea":oe(e,r),o=re(e,r),Hr("invalid",e)}for(i in ge(n,o),u=o)if(u.hasOwnProperty(i)){var c=u[i];"style"===i?Ee(e,c):"dangerouslySetInnerHTML"===i?null!=(c=c?c.__html:void 0)&&fe(e,c):"children"===i?"string"==typeof c?("textarea"!==n||""!==c)&&pe(e,c):"number"==typeof c&&pe(e,""+c):"suppressContentEditableWarning"!==i&&"suppressHydrationWarning"!==i&&"autoFocus"!==i&&(s.hasOwnProperty(i)?null!=c&&"onScroll"===i&&Hr("scroll",e):null!=c&&y(e,i,c,l))}switch(n){case"input":V(e),J(e,r,!1);break;case"textarea":V(e),ie(e);break;case"option":null!=r.value&&e.setAttribute("value",""+z(r.value));break;case"select":e.multiple=!!r.multiple,null!=(i=r.value)?ne(e,!!r.multiple,i,!1):null!=r.defaultValue&&ne(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof o.onClick&&(e.onclick=Jr)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return Vs(t),null;case 6:if(e&&null!=t.stateNode)Ls(e,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(a(166));if(n=Qa($a.current),Qa(Va.current),pa(t)){if(r=t.stateNode,n=t.memoizedProps,r[po]=t,(i=r.nodeValue!==n)&&null!==(e=ra))switch(e.tag){case 3:Zr(r.nodeValue,n,!!(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Zr(r.nodeValue,n,!!(1&e.mode))}i&&(t.flags|=4)}else(r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[po]=t,t.stateNode=r}return Vs(t),null;case 13:if(Co(ei),r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(aa&&null!==oa&&1&t.mode&&!(128&t.flags))da(),ha(),t.flags|=98560,i=!1;else if(i=pa(t),null!==r&&null!==r.dehydrated){if(null===e){if(!i)throw Error(a(318));if(!(i=null!==(i=t.memoizedState)?i.dehydrated:null))throw Error(a(317));i[po]=t}else ha(),!(128&t.flags)&&(t.memoizedState=null),t.flags|=4;Vs(t),i=!1}else null!==ia&&(iu(ia),ia=null),i=!0;if(!i)return 65536&t.flags?t:null}return 128&t.flags?(t.lanes=n,t):((r=null!==r)!=(null!==e&&null!==e.memoizedState)&&r&&(t.child.flags|=8192,1&t.mode&&(null===e||1&ei.current?0===Ll&&(Ll=3):mu())),null!==t.updateQueue&&(t.flags|=4),Vs(t),null);case 4:return Ka(),ks(e,t),null===e&&jr(t.stateNode.containerInfo),Vs(t),null;case 10:return Oa(t.type._context),Vs(t),null;case 19:if(Co(ei),null===(i=t.memoizedState))return Vs(t),null;if(r=!!(128&t.flags),null===(l=i.rendering))if(r)Ws(i,!1);else{if(0!==Ll||null!==e&&128&e.flags)for(e=t.child;null!==e;){if(null!==(l=ti(e))){for(t.flags|=128,Ws(i,!1),null!==(r=l.updateQueue)&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;null!==n;)e=r,(i=n).flags&=14680066,null===(l=i.alternate)?(i.childLanes=0,i.lanes=e,i.child=null,i.subtreeFlags=0,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null,i.stateNode=null):(i.childLanes=l.childLanes,i.lanes=l.lanes,i.child=l.child,i.subtreeFlags=0,i.deletions=null,i.memoizedProps=l.memoizedProps,i.memoizedState=l.memoizedState,i.updateQueue=l.updateQueue,i.type=l.type,e=l.dependencies,i.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return No(ei,1&ei.current|2),t.child}e=e.sibling}null!==i.tail&&Ke()>jl&&(t.flags|=128,r=!0,Ws(i,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=ti(l))){if(t.flags|=128,r=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),Ws(i,!0),null===i.tail&&"hidden"===i.tailMode&&!l.alternate&&!aa)return Vs(t),null}else 2*Ke()-i.renderingStartTime>jl&&1073741824!==n&&(t.flags|=128,r=!0,Ws(i,!1),t.lanes=4194304);i.isBackwards?(l.sibling=t.child,t.child=l):(null!==(n=i.last)?n.sibling=l:t.child=l,i.last=l)}return null!==i.tail?(t=i.tail,i.rendering=t,i.tail=t.sibling,i.renderingStartTime=Ke(),t.sibling=null,n=ei.current,No(ei,r?1&n|2:1&n),t):(Vs(t),null);case 22:case 23:return fu(),r=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==r&&(t.flags|=8192),r&&1&t.mode?!!(1073741824&kl)&&(Vs(t),6&t.subtreeFlags&&(t.flags|=8192)):Vs(t),null;case 24:case 25:return null}throw Error(a(156,t.tag))}function $s(e,t){switch(na(t),t.tag){case 1:return wo(t.type)&&Lo(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return Ka(),Co(Po),Co(Do),ri(),65536&(e=t.flags)&&!(128&e)?(t.flags=-65537&e|128,t):null;case 5:return Ja(t),null;case 13:if(Co(ei),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(a(340));ha()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return Co(ei),null;case 4:return Ka(),null;case 10:return Oa(t.type._context),null;case 22:case 23:return fu(),null;default:return null}}Rs=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},ks=function(){},ws=function(e,t,n,r){var o=e.memoizedProps;if(o!==r){e=t.stateNode,Qa(Va.current);var a,i=null;switch(n){case"input":o=Q(e,o),r=Q(e,r),i=[];break;case"select":o=G({},o,{value:void 0}),r=G({},r,{value:void 0}),i=[];break;case"textarea":o=re(e,o),r=re(e,r),i=[];break;default:"function"!=typeof o.onClick&&"function"==typeof r.onClick&&(e.onclick=Jr)}for(c in ge(n,r),n=null,o)if(!r.hasOwnProperty(c)&&o.hasOwnProperty(c)&&null!=o[c])if("style"===c){var l=o[c];for(a in l)l.hasOwnProperty(a)&&(n||(n={}),n[a]="")}else"dangerouslySetInnerHTML"!==c&&"children"!==c&&"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(s.hasOwnProperty(c)?i||(i=[]):(i=i||[]).push(c,null));for(c in r){var u=r[c];if(l=null!=o?o[c]:void 0,r.hasOwnProperty(c)&&u!==l&&(null!=u||null!=l))if("style"===c)if(l){for(a in l)!l.hasOwnProperty(a)||u&&u.hasOwnProperty(a)||(n||(n={}),n[a]="");for(a in u)u.hasOwnProperty(a)&&l[a]!==u[a]&&(n||(n={}),n[a]=u[a])}else n||(i||(i=[]),i.push(c,n)),n=u;else"dangerouslySetInnerHTML"===c?(u=u?u.__html:void 0,l=l?l.__html:void 0,null!=u&&l!==u&&(i=i||[]).push(c,u)):"children"===c?"string"!=typeof u&&"number"!=typeof u||(i=i||[]).push(c,""+u):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&(s.hasOwnProperty(c)?(null!=u&&"onScroll"===c&&Hr("scroll",e),i||l===u||(i=[])):(i=i||[]).push(c,u))}n&&(i=i||[]).push("style",n);var c=i;(t.updateQueue=c)&&(t.flags|=4)}},Ls=function(e,t,n,r){n!==r&&(t.flags|=4)};var Qs=!1,Xs=!1,Ks="function"==typeof WeakSet?WeakSet:Set,Zs=null;function Js(e,t){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){Su(e,t,n)}else n.current=null}function el(e,t,n){try{n()}catch(n){Su(e,t,n)}}var tl=!1;function nl(e,t,n){var r=t.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var o=r=r.next;do{if((o.tag&e)===e){var a=o.destroy;o.destroy=void 0,void 0!==a&&el(t,n,a)}o=o.next}while(o!==r)}}function rl(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function ol(e){var t=e.ref;if(null!==t){var n=e.stateNode;e.tag,e=n,"function"==typeof t?t(e):t.current=e}}function al(e){var t=e.alternate;null!==t&&(e.alternate=null,al(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&(delete t[po],delete t[ho],delete t[Eo],delete t[To],delete t[go]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function il(e){return 5===e.tag||3===e.tag||4===e.tag}function sl(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||il(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function ll(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Jr));else if(4!==r&&null!==(e=e.child))for(ll(e,t,n),e=e.sibling;null!==e;)ll(e,t,n),e=e.sibling}function ul(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(ul(e,t,n),e=e.sibling;null!==e;)ul(e,t,n),e=e.sibling}var cl=null,fl=!1;function pl(e,t,n){for(n=n.child;null!==n;)dl(e,t,n),n=n.sibling}function dl(e,t,n){if(at&&"function"==typeof at.onCommitFiberUnmount)try{at.onCommitFiberUnmount(ot,n)}catch(e){}switch(n.tag){case 5:Xs||Js(n,t);case 6:var r=cl,o=fl;cl=null,pl(e,t,n),fl=o,null!==(cl=r)&&(fl?(e=cl,n=n.stateNode,8===e.nodeType?e.parentNode.removeChild(n):e.removeChild(n)):cl.removeChild(n.stateNode));break;case 18:null!==cl&&(fl?(e=cl,n=n.stateNode,8===e.nodeType?lo(e.parentNode,n):1===e.nodeType&&lo(e,n),jt(e)):lo(cl,n.stateNode));break;case 4:r=cl,o=fl,cl=n.stateNode.containerInfo,fl=!0,pl(e,t,n),cl=r,fl=o;break;case 0:case 11:case 14:case 15:if(!Xs&&null!==(r=n.updateQueue)&&null!==(r=r.lastEffect)){o=r=r.next;do{var a=o,i=a.destroy;a=a.tag,void 0!==i&&(2&a||4&a)&&el(n,t,i),o=o.next}while(o!==r)}pl(e,t,n);break;case 1:if(!Xs&&(Js(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(e){Su(n,t,e)}pl(e,t,n);break;case 21:pl(e,t,n);break;case 22:1&n.mode?(Xs=(r=Xs)||null!==n.memoizedState,pl(e,t,n),Xs=r):pl(e,t,n);break;default:pl(e,t,n)}}function hl(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Ks),t.forEach((function(t){var r=Ou.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function ml(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var o=n[r];try{var i=e,s=t,l=s;e:for(;null!==l;){switch(l.tag){case 5:cl=l.stateNode,fl=!1;break e;case 3:case 4:cl=l.stateNode.containerInfo,fl=!0;break e}l=l.return}if(null===cl)throw Error(a(160));dl(i,s,o),cl=null,fl=!1;var u=o.alternate;null!==u&&(u.return=null),o.return=null}catch(e){Su(o,t,e)}}if(12854&t.subtreeFlags)for(t=t.child;null!==t;)El(t,e),t=t.sibling}function El(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(ml(t,e),Tl(e),4&r){try{nl(3,e,e.return),rl(3,e)}catch(t){Su(e,e.return,t)}try{nl(5,e,e.return)}catch(t){Su(e,e.return,t)}}break;case 1:ml(t,e),Tl(e),512&r&&null!==n&&Js(n,n.return);break;case 5:if(ml(t,e),Tl(e),512&r&&null!==n&&Js(n,n.return),32&e.flags){var o=e.stateNode;try{pe(o,"")}catch(t){Su(e,e.return,t)}}if(4&r&&null!=(o=e.stateNode)){var i=e.memoizedProps,s=null!==n?n.memoizedProps:i,l=e.type,u=e.updateQueue;if(e.updateQueue=null,null!==u)try{"input"===l&&"radio"===i.type&&null!=i.name&&K(o,i),ye(l,s);var c=ye(l,i);for(s=0;s<u.length;s+=2){var f=u[s],p=u[s+1];"style"===f?Ee(o,p):"dangerouslySetInnerHTML"===f?fe(o,p):"children"===f?pe(o,p):y(o,f,p,c)}switch(l){case"input":Z(o,i);break;case"textarea":ae(o,i);break;case"select":var d=o._wrapperState.wasMultiple;o._wrapperState.wasMultiple=!!i.multiple;var h=i.value;null!=h?ne(o,!!i.multiple,h,!1):d!==!!i.multiple&&(null!=i.defaultValue?ne(o,!!i.multiple,i.defaultValue,!0):ne(o,!!i.multiple,i.multiple?[]:"",!1))}o[ho]=i}catch(t){Su(e,e.return,t)}}break;case 6:if(ml(t,e),Tl(e),4&r){if(null===e.stateNode)throw Error(a(162));o=e.stateNode,i=e.memoizedProps;try{o.nodeValue=i}catch(t){Su(e,e.return,t)}}break;case 3:if(ml(t,e),Tl(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{jt(t.containerInfo)}catch(t){Su(e,e.return,t)}break;case 4:default:ml(t,e),Tl(e);break;case 13:ml(t,e),Tl(e),8192&(o=e.child).flags&&(i=null!==o.memoizedState,o.stateNode.isHidden=i,!i||null!==o.alternate&&null!==o.alternate.memoizedState||(Ul=Ke())),4&r&&hl(e);break;case 22:if(f=null!==n&&null!==n.memoizedState,1&e.mode?(Xs=(c=Xs)||f,ml(t,e),Xs=c):ml(t,e),Tl(e),8192&r){if(c=null!==e.memoizedState,(e.stateNode.isHidden=c)&&!f&&1&e.mode)for(Zs=e,f=e.child;null!==f;){for(p=Zs=f;null!==Zs;){switch(h=(d=Zs).child,d.tag){case 0:case 11:case 14:case 15:nl(4,d,d.return);break;case 1:Js(d,d.return);var m=d.stateNode;if("function"==typeof m.componentWillUnmount){r=d,n=d.return;try{t=r,m.props=t.memoizedProps,m.state=t.memoizedState,m.componentWillUnmount()}catch(e){Su(r,n,e)}}break;case 5:Js(d,d.return);break;case 22:if(null!==d.memoizedState){Al(p);continue}}null!==h?(h.return=d,Zs=h):Al(p)}f=f.sibling}e:for(f=null,p=e;;){if(5===p.tag){if(null===f){f=p;try{o=p.stateNode,c?"function"==typeof(i=o.style).setProperty?i.setProperty("display","none","important"):i.display="none":(l=p.stateNode,s=null!=(u=p.memoizedProps.style)&&u.hasOwnProperty("display")?u.display:null,l.style.display=me("display",s))}catch(t){Su(e,e.return,t)}}}else if(6===p.tag){if(null===f)try{p.stateNode.nodeValue=c?"":p.memoizedProps}catch(t){Su(e,e.return,t)}}else if((22!==p.tag&&23!==p.tag||null===p.memoizedState||p===e)&&null!==p.child){p.child.return=p,p=p.child;continue}if(p===e)break e;for(;null===p.sibling;){if(null===p.return||p.return===e)break e;f===p&&(f=null),p=p.return}f===p&&(f=null),p.sibling.return=p.return,p=p.sibling}}break;case 19:ml(t,e),Tl(e),4&r&&hl(e);case 21:}}function Tl(e){var t=e.flags;if(2&t){try{e:{for(var n=e.return;null!==n;){if(il(n)){var r=n;break e}n=n.return}throw Error(a(160))}switch(r.tag){case 5:var o=r.stateNode;32&r.flags&&(pe(o,""),r.flags&=-33),ul(e,sl(e),o);break;case 3:case 4:var i=r.stateNode.containerInfo;ll(e,sl(e),i);break;default:throw Error(a(161))}}catch(t){Su(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function gl(e,t,n){Zs=e,yl(e,t,n)}function yl(e,t,n){for(var r=!!(1&e.mode);null!==Zs;){var o=Zs,a=o.child;if(22===o.tag&&r){var i=null!==o.memoizedState||Qs;if(!i){var s=o.alternate,l=null!==s&&null!==s.memoizedState||Xs;s=Qs;var u=Xs;if(Qs=i,(Xs=l)&&!u)for(Zs=o;null!==Zs;)l=(i=Zs).child,22===i.tag&&null!==i.memoizedState?bl(o):null!==l?(l.return=i,Zs=l):bl(o);for(;null!==a;)Zs=a,yl(a,t,n),a=a.sibling;Zs=o,Qs=s,Xs=u}_l(e)}else 8772&o.subtreeFlags&&null!==a?(a.return=o,Zs=a):_l(e)}}function _l(e){for(;null!==Zs;){var t=Zs;if(8772&t.flags){var n=t.alternate;try{if(8772&t.flags)switch(t.tag){case 0:case 11:case 15:Xs||rl(5,t);break;case 1:var r=t.stateNode;if(4&t.flags&&!Xs)if(null===n)r.componentDidMount();else{var o=t.elementType===t.type?n.memoizedProps:ns(t.type,n.memoizedProps);r.componentDidUpdate(o,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var i=t.updateQueue;null!==i&&za(t,i,r);break;case 3:var s=t.updateQueue;if(null!==s){if(n=null,null!==t.child)switch(t.child.tag){case 5:case 1:n=t.child.stateNode}za(t,s,n)}break;case 5:var l=t.stateNode;if(null===n&&4&t.flags){n=l;var u=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":u.autoFocus&&n.focus();break;case"img":u.src&&(n.src=u.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===t.memoizedState){var c=t.alternate;if(null!==c){var f=c.memoizedState;if(null!==f){var p=f.dehydrated;null!==p&&jt(p)}}}break;default:throw Error(a(163))}Xs||512&t.flags&&ol(t)}catch(e){Su(t,t.return,e)}}if(t===e){Zs=null;break}if(null!==(n=t.sibling)){n.return=t.return,Zs=n;break}Zs=t.return}}function Al(e){for(;null!==Zs;){var t=Zs;if(t===e){Zs=null;break}var n=t.sibling;if(null!==n){n.return=t.return,Zs=n;break}Zs=t.return}}function bl(e){for(;null!==Zs;){var t=Zs;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{rl(4,t)}catch(e){Su(t,n,e)}break;case 1:var r=t.stateNode;if("function"==typeof r.componentDidMount){var o=t.return;try{r.componentDidMount()}catch(e){Su(t,o,e)}}var a=t.return;try{ol(t)}catch(e){Su(t,a,e)}break;case 5:var i=t.return;try{ol(t)}catch(e){Su(t,i,e)}}}catch(e){Su(t,t.return,e)}if(t===e){Zs=null;break}var s=t.sibling;if(null!==s){s.return=t.return,Zs=s;break}Zs=t.return}}var vl,Sl=Math.ceil,Il=_.ReactCurrentDispatcher,Cl=_.ReactCurrentOwner,Nl=_.ReactCurrentBatchConfig,Ol=0,Dl=null,Pl=null,Rl=0,kl=0,wl=Io(0),Ll=0,Ml=null,xl=0,Gl=0,Bl=0,Hl=null,Fl=null,Ul=0,jl=1/0,ql=null,zl=!1,Wl=null,Vl=null,Yl=!1,$l=null,Ql=0,Xl=0,Kl=null,Zl=-1,Jl=0;function eu(){return 6&Ol?Ke():-1!==Zl?Zl:Zl=Ke()}function tu(e){return 1&e.mode?2&Ol&&0!==Rl?Rl&-Rl:null!==Ea.transition?(0===Jl&&(Jl=mt()),Jl):0!==(e=yt)?e:e=void 0===(e=window.event)?16:Xt(e.type):1}function nu(e,t,n,r){if(50<Xl)throw Xl=0,Kl=null,Error(a(185));Tt(e,n,r),2&Ol&&e===Dl||(e===Dl&&(!(2&Ol)&&(Gl|=n),4===Ll&&su(e,Rl)),ru(e,r),1===n&&0===Ol&&!(1&t.mode)&&(jl=Ke()+500,Fo&&qo()))}function ru(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,o=e.expirationTimes,a=e.pendingLanes;0<a;){var i=31-it(a),s=1<<i,l=o[i];-1===l?s&n&&!(s&r)||(o[i]=dt(s,t)):l<=t&&(e.expiredLanes|=s),a&=~s}}(e,t);var r=pt(e,e===Dl?Rl:0);if(0===r)null!==n&&$e(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(null!=n&&$e(n),1===t)0===e.tag?function(e){Fo=!0,jo(e)}(lu.bind(null,e)):jo(lu.bind(null,e)),io((function(){!(6&Ol)&&qo()})),n=null;else{switch(_t(r)){case 1:n=Je;break;case 4:n=et;break;case 16:default:n=tt;break;case 536870912:n=rt}n=Du(n,ou.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function ou(e,t){if(Zl=-1,Jl=0,6&Ol)throw Error(a(327));var n=e.callbackNode;if(bu()&&e.callbackNode!==n)return null;var r=pt(e,e===Dl?Rl:0);if(0===r)return null;if(30&r||r&e.expiredLanes||t)t=Eu(e,r);else{t=r;var o=Ol;Ol|=2;var i=hu();for(Dl===e&&Rl===t||(ql=null,jl=Ke()+500,pu(e,t));;)try{gu();break}catch(t){du(e,t)}Na(),Il.current=i,Ol=o,null!==Pl?t=0:(Dl=null,Rl=0,t=Ll)}if(0!==t){if(2===t&&0!==(o=ht(e))&&(r=o,t=au(e,o)),1===t)throw n=Ml,pu(e,0),su(e,r),ru(e,Ke()),n;if(6===t)su(e,r);else{if(o=e.current.alternate,!(30&r||function(e){for(var t=e;;){if(16384&t.flags){var n=t.updateQueue;if(null!==n&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var o=n[r],a=o.getSnapshot;o=o.value;try{if(!sr(a(),o))return!1}catch(e){return!1}}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(o)||(t=Eu(e,r),2===t&&(i=ht(e),0!==i&&(r=i,t=au(e,i))),1!==t)))throw n=Ml,pu(e,0),su(e,r),ru(e,Ke()),n;switch(e.finishedWork=o,e.finishedLanes=r,t){case 0:case 1:throw Error(a(345));case 2:case 5:Au(e,Fl,ql);break;case 3:if(su(e,r),(130023424&r)===r&&10<(t=Ul+500-Ke())){if(0!==pt(e,0))break;if(((o=e.suspendedLanes)&r)!==r){eu(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=ro(Au.bind(null,e,Fl,ql),t);break}Au(e,Fl,ql);break;case 4:if(su(e,r),(4194240&r)===r)break;for(t=e.eventTimes,o=-1;0<r;){var s=31-it(r);i=1<<s,(s=t[s])>o&&(o=s),r&=~i}if(r=o,10<(r=(120>(r=Ke()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*Sl(r/1960))-r)){e.timeoutHandle=ro(Au.bind(null,e,Fl,ql),r);break}Au(e,Fl,ql);break;default:throw Error(a(329))}}}return ru(e,Ke()),e.callbackNode===n?ou.bind(null,e):null}function au(e,t){var n=Hl;return e.current.memoizedState.isDehydrated&&(pu(e,t).flags|=256),2!==(e=Eu(e,t))&&(t=Fl,Fl=n,null!==t&&iu(t)),e}function iu(e){null===Fl?Fl=e:Fl.push.apply(Fl,e)}function su(e,t){for(t&=~Bl,t&=~Gl,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-it(t),r=1<<n;e[n]=-1,t&=~r}}function lu(e){if(6&Ol)throw Error(a(327));bu();var t=pt(e,0);if(!(1&t))return ru(e,Ke()),null;var n=Eu(e,t);if(0!==e.tag&&2===n){var r=ht(e);0!==r&&(t=r,n=au(e,r))}if(1===n)throw n=Ml,pu(e,0),su(e,t),ru(e,Ke()),n;if(6===n)throw Error(a(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,Au(e,Fl,ql),ru(e,Ke()),null}function uu(e,t){var n=Ol;Ol|=1;try{return e(t)}finally{0===(Ol=n)&&(jl=Ke()+500,Fo&&qo())}}function cu(e){null!==$l&&0===$l.tag&&!(6&Ol)&&bu();var t=Ol;Ol|=1;var n=Nl.transition,r=yt;try{if(Nl.transition=null,yt=1,e)return e()}finally{yt=r,Nl.transition=n,!(6&(Ol=t))&&qo()}}function fu(){kl=wl.current,Co(wl)}function pu(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,oo(n)),null!==Pl)for(n=Pl.return;null!==n;){var r=n;switch(na(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&Lo();break;case 3:Ka(),Co(Po),Co(Do),ri();break;case 5:Ja(r);break;case 4:Ka();break;case 13:case 19:Co(ei);break;case 10:Oa(r.type._context);break;case 22:case 23:fu()}n=n.return}if(Dl=e,Pl=e=wu(e.current,null),Rl=kl=t,Ll=0,Ml=null,Bl=Gl=xl=0,Fl=Hl=null,null!==ka){for(t=0;t<ka.length;t++)if(null!==(r=(n=ka[t]).interleaved)){n.interleaved=null;var o=r.next,a=n.pending;if(null!==a){var i=a.next;a.next=o,r.next=i}n.pending=r}ka=null}return e}function du(e,t){for(;;){var n=Pl;try{if(Na(),oi.current=Zi,ci){for(var r=si.memoizedState;null!==r;){var o=r.queue;null!==o&&(o.pending=null),r=r.next}ci=!1}if(ii=0,ui=li=si=null,fi=!1,pi=0,Cl.current=null,null===n||null===n.return){Ll=1,Ml=t,Pl=null;break}e:{var i=e,s=n.return,l=n,u=t;if(t=Rl,l.flags|=32768,null!==u&&"object"==typeof u&&"function"==typeof u.then){var c=u,f=l,p=f.tag;if(!(1&f.mode||0!==p&&11!==p&&15!==p)){var d=f.alternate;d?(f.updateQueue=d.updateQueue,f.memoizedState=d.memoizedState,f.lanes=d.lanes):(f.updateQueue=null,f.memoizedState=null)}var h=Es(s);if(null!==h){h.flags&=-257,Ts(h,s,l,0,t),1&h.mode&&ms(i,c,t),u=c;var m=(t=h).updateQueue;if(null===m){var E=new Set;E.add(u),t.updateQueue=E}else m.add(u);break e}if(!(1&t)){ms(i,c,t),mu();break e}u=Error(a(426))}else if(aa&&1&l.mode){var T=Es(s);if(null!==T){!(65536&T.flags)&&(T.flags|=256),Ts(T,s,l,0,t),ma(us(u,l));break e}}i=u=us(u,l),4!==Ll&&(Ll=2),null===Hl?Hl=[i]:Hl.push(i),i=s;do{switch(i.tag){case 3:i.flags|=65536,t&=-t,i.lanes|=t,ja(i,ds(0,u,t));break e;case 1:l=u;var g=i.type,y=i.stateNode;if(!(128&i.flags||"function"!=typeof g.getDerivedStateFromError&&(null===y||"function"!=typeof y.componentDidCatch||null!==Vl&&Vl.has(y)))){i.flags|=65536,t&=-t,i.lanes|=t,ja(i,hs(i,l,t));break e}}i=i.return}while(null!==i)}_u(n)}catch(e){t=e,Pl===n&&null!==n&&(Pl=n=n.return);continue}break}}function hu(){var e=Il.current;return Il.current=Zi,null===e?Zi:e}function mu(){0!==Ll&&3!==Ll&&2!==Ll||(Ll=4),null===Dl||!(268435455&xl)&&!(268435455&Gl)||su(Dl,Rl)}function Eu(e,t){var n=Ol;Ol|=2;var r=hu();for(Dl===e&&Rl===t||(ql=null,pu(e,t));;)try{Tu();break}catch(t){du(e,t)}if(Na(),Ol=n,Il.current=r,null!==Pl)throw Error(a(261));return Dl=null,Rl=0,Ll}function Tu(){for(;null!==Pl;)yu(Pl)}function gu(){for(;null!==Pl&&!Qe();)yu(Pl)}function yu(e){var t=vl(e.alternate,e,kl);e.memoizedProps=e.pendingProps,null===t?_u(e):Pl=t,Cl.current=null}function _u(e){var t=e;do{var n=t.alternate;if(e=t.return,32768&t.flags){if(null!==(n=$s(n,t)))return n.flags&=32767,void(Pl=n);if(null===e)return Ll=6,void(Pl=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}else if(null!==(n=Ys(n,t,kl)))return void(Pl=n);if(null!==(t=t.sibling))return void(Pl=t);Pl=t=e}while(null!==t);0===Ll&&(Ll=5)}function Au(e,t,n){var r=yt,o=Nl.transition;try{Nl.transition=null,yt=1,function(e,t,n,r){do{bu()}while(null!==$l);if(6&Ol)throw Error(a(327));n=e.finishedWork;var o=e.finishedLanes;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(a(177));e.callbackNode=null,e.callbackPriority=0;var i=n.lanes|n.childLanes;if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var o=31-it(n),a=1<<o;t[o]=0,r[o]=-1,e[o]=-1,n&=~a}}(e,i),e===Dl&&(Pl=Dl=null,Rl=0),!(2064&n.subtreeFlags)&&!(2064&n.flags)||Yl||(Yl=!0,Du(tt,(function(){return bu(),null}))),i=!!(15990&n.flags),15990&n.subtreeFlags||i){i=Nl.transition,Nl.transition=null;var s=yt;yt=1;var l=Ol;Ol|=4,Cl.current=null,function(e,t){if(eo=zt,dr(e=pr())){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var o=r.anchorOffset,i=r.focusNode;r=r.focusOffset;try{n.nodeType,i.nodeType}catch(e){n=null;break e}var s=0,l=-1,u=-1,c=0,f=0,p=e,d=null;t:for(;;){for(var h;p!==n||0!==o&&3!==p.nodeType||(l=s+o),p!==i||0!==r&&3!==p.nodeType||(u=s+r),3===p.nodeType&&(s+=p.nodeValue.length),null!==(h=p.firstChild);)d=p,p=h;for(;;){if(p===e)break t;if(d===n&&++c===o&&(l=s),d===i&&++f===r&&(u=s),null!==(h=p.nextSibling))break;d=(p=d).parentNode}p=h}n=-1===l||-1===u?null:{start:l,end:u}}else n=null}n=n||{start:0,end:0}}else n=null;for(to={focusedElem:e,selectionRange:n},zt=!1,Zs=t;null!==Zs;)if(e=(t=Zs).child,1028&t.subtreeFlags&&null!==e)e.return=t,Zs=e;else for(;null!==Zs;){t=Zs;try{var m=t.alternate;if(1024&t.flags)switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==m){var E=m.memoizedProps,T=m.memoizedState,g=t.stateNode,y=g.getSnapshotBeforeUpdate(t.elementType===t.type?E:ns(t.type,E),T);g.__reactInternalSnapshotBeforeUpdate=y}break;case 3:var _=t.stateNode.containerInfo;1===_.nodeType?_.textContent="":9===_.nodeType&&_.documentElement&&_.removeChild(_.documentElement);break;default:throw Error(a(163))}}catch(e){Su(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Zs=e;break}Zs=t.return}m=tl,tl=!1}(e,n),El(n,e),hr(to),zt=!!eo,to=eo=null,e.current=n,gl(n,e,o),Xe(),Ol=l,yt=s,Nl.transition=i}else e.current=n;if(Yl&&(Yl=!1,$l=e,Ql=o),0===(i=e.pendingLanes)&&(Vl=null),function(e){if(at&&"function"==typeof at.onCommitFiberRoot)try{at.onCommitFiberRoot(ot,e,void 0,!(128&~e.current.flags))}catch(e){}}(n.stateNode),ru(e,Ke()),null!==t)for(r=e.onRecoverableError,n=0;n<t.length;n++)r((o=t[n]).value,{componentStack:o.stack,digest:o.digest});if(zl)throw zl=!1,e=Wl,Wl=null,e;!!(1&Ql)&&0!==e.tag&&bu(),1&(i=e.pendingLanes)?e===Kl?Xl++:(Xl=0,Kl=e):Xl=0,qo()}(e,t,n,r)}finally{Nl.transition=o,yt=r}return null}function bu(){if(null!==$l){var e=_t(Ql),t=Nl.transition,n=yt;try{if(Nl.transition=null,yt=16>e?16:e,null===$l)var r=!1;else{if(e=$l,$l=null,Ql=0,6&Ol)throw Error(a(331));var o=Ol;for(Ol|=4,Zs=e.current;null!==Zs;){var i=Zs,s=i.child;if(16&Zs.flags){var l=i.deletions;if(null!==l){for(var u=0;u<l.length;u++){var c=l[u];for(Zs=c;null!==Zs;){var f=Zs;switch(f.tag){case 0:case 11:case 15:nl(8,f,i)}var p=f.child;if(null!==p)p.return=f,Zs=p;else for(;null!==Zs;){var d=(f=Zs).sibling,h=f.return;if(al(f),f===c){Zs=null;break}if(null!==d){d.return=h,Zs=d;break}Zs=h}}}var m=i.alternate;if(null!==m){var E=m.child;if(null!==E){m.child=null;do{var T=E.sibling;E.sibling=null,E=T}while(null!==E)}}Zs=i}}if(2064&i.subtreeFlags&&null!==s)s.return=i,Zs=s;else e:for(;null!==Zs;){if(2048&(i=Zs).flags)switch(i.tag){case 0:case 11:case 15:nl(9,i,i.return)}var g=i.sibling;if(null!==g){g.return=i.return,Zs=g;break e}Zs=i.return}}var y=e.current;for(Zs=y;null!==Zs;){var _=(s=Zs).child;if(2064&s.subtreeFlags&&null!==_)_.return=s,Zs=_;else e:for(s=y;null!==Zs;){if(2048&(l=Zs).flags)try{switch(l.tag){case 0:case 11:case 15:rl(9,l)}}catch(e){Su(l,l.return,e)}if(l===s){Zs=null;break e}var A=l.sibling;if(null!==A){A.return=l.return,Zs=A;break e}Zs=l.return}}if(Ol=o,qo(),at&&"function"==typeof at.onPostCommitFiberRoot)try{at.onPostCommitFiberRoot(ot,e)}catch(e){}r=!0}return r}finally{yt=n,Nl.transition=t}}return!1}function vu(e,t,n){e=Fa(e,t=ds(0,t=us(n,t),1),1),t=eu(),null!==e&&(Tt(e,1,t),ru(e,t))}function Su(e,t,n){if(3===e.tag)vu(e,e,n);else for(;null!==t;){if(3===t.tag){vu(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Vl||!Vl.has(r))){t=Fa(t,e=hs(t,e=us(n,e),1),1),e=eu(),null!==t&&(Tt(t,1,e),ru(t,e));break}}t=t.return}}function Iu(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=eu(),e.pingedLanes|=e.suspendedLanes&n,Dl===e&&(Rl&n)===n&&(4===Ll||3===Ll&&(130023424&Rl)===Rl&&500>Ke()-Ul?pu(e,0):Bl|=n),ru(e,t)}function Cu(e,t){0===t&&(1&e.mode?(t=ct,!(130023424&(ct<<=1))&&(ct=4194304)):t=1);var n=eu();null!==(e=Ma(e,t))&&(Tt(e,t,n),ru(e,n))}function Nu(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),Cu(e,n)}function Ou(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,o=e.memoizedState;null!==o&&(n=o.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(a(314))}null!==r&&r.delete(t),Cu(e,n)}function Du(e,t){return Ye(e,t)}function Pu(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Ru(e,t,n,r){return new Pu(e,t,n,r)}function ku(e){return!(!(e=e.prototype)||!e.isReactComponent)}function wu(e,t){var n=e.alternate;return null===n?((n=Ru(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=14680064&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Lu(e,t,n,r,o,i){var s=2;if(r=e,"function"==typeof e)ku(e)&&(s=1);else if("string"==typeof e)s=5;else e:switch(e){case v:return Mu(n.children,o,i,t);case S:s=8,o|=8;break;case I:return(e=Ru(12,n,t,2|o)).elementType=I,e.lanes=i,e;case D:return(e=Ru(13,n,t,o)).elementType=D,e.lanes=i,e;case P:return(e=Ru(19,n,t,o)).elementType=P,e.lanes=i,e;case w:return xu(n,o,i,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case C:s=10;break e;case N:s=9;break e;case O:s=11;break e;case R:s=14;break e;case k:s=16,r=null;break e}throw Error(a(130,null==e?e:typeof e,""))}return(t=Ru(s,n,t,o)).elementType=e,t.type=r,t.lanes=i,t}function Mu(e,t,n,r){return(e=Ru(7,e,r,t)).lanes=n,e}function xu(e,t,n,r){return(e=Ru(22,e,r,t)).elementType=w,e.lanes=n,e.stateNode={isHidden:!1},e}function Gu(e,t,n){return(e=Ru(6,e,null,t)).lanes=n,e}function Bu(e,t,n){return(t=Ru(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Hu(e,t,n,r,o){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=Et(0),this.expirationTimes=Et(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Et(0),this.identifierPrefix=r,this.onRecoverableError=o,this.mutableSourceEagerHydrationData=null}function Fu(e,t,n,r,o,a,i,s,l){return e=new Hu(e,t,n,s,l),1===t?(t=1,!0===a&&(t|=8)):t=0,a=Ru(3,null,null,t),e.current=a,a.stateNode=e,a.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},Ga(a),e}function Uu(e){if(!e)return Oo;e:{if(je(e=e._reactInternals)!==e||1!==e.tag)throw Error(a(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(wo(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(a(171))}if(1===e.tag){var n=e.type;if(wo(n))return xo(e,n,t)}return t}function ju(e,t,n,r,o,a,i,s,l){return(e=Fu(n,r,!0,e,0,a,0,s,l)).context=Uu(null),n=e.current,(a=Ha(r=eu(),o=tu(n))).callback=null!=t?t:null,Fa(n,a,o),e.current.lanes=o,Tt(e,o,r),ru(e,r),e}function qu(e,t,n,r){var o=t.current,a=eu(),i=tu(o);return n=Uu(n),null===t.context?t.context=n:t.pendingContext=n,(t=Ha(a,i)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),null!==(e=Fa(o,t,i))&&(nu(e,o,i,a),Ua(e,o,i)),i}function zu(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Wu(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Vu(e,t){Wu(e,t),(e=e.alternate)&&Wu(e,t)}vl=function(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps||Po.current)ys=!0;else{if(!(e.lanes&n||128&t.flags))return ys=!1,function(e,t,n){switch(t.tag){case 3:Ds(t),ha();break;case 5:Za(t);break;case 1:wo(t.type)&&Go(t);break;case 4:Xa(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,o=t.memoizedProps.value;No(va,r._currentValue),r._currentValue=o;break;case 13:if(null!==(r=t.memoizedState))return null!==r.dehydrated?(No(ei,1&ei.current),t.flags|=128,null):n&t.child.childLanes?Gs(e,t,n):(No(ei,1&ei.current),null!==(e=zs(e,t,n))?e.sibling:null);No(ei,1&ei.current);break;case 19:if(r=!!(n&t.childLanes),128&e.flags){if(r)return js(e,t,n);t.flags|=128}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),No(ei,ei.current),r)break;return null;case 22:case 23:return t.lanes=0,Ss(e,t,n)}return zs(e,t,n)}(e,t,n);ys=!!(131072&e.flags)}else ys=!1,aa&&1048576&t.flags&&ea(t,Yo,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;qs(e,t),e=t.pendingProps;var o=ko(t,Do.current);Pa(t,n),o=Ei(null,t,r,e,o,n);var i=Ti();return t.flags|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,wo(r)?(i=!0,Go(t)):i=!1,t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,Ga(t),o.updater=os,t.stateNode=o,o._reactInternals=t,ls(t,r,e,n),t=Os(null,t,r,!0,i,n)):(t.tag=0,aa&&i&&ta(t),_s(null,t,o,n),t=t.child),t;case 16:r=t.elementType;e:{switch(qs(e,t),e=t.pendingProps,r=(o=r._init)(r._payload),t.type=r,o=t.tag=function(e){if("function"==typeof e)return ku(e)?1:0;if(null!=e){if((e=e.$$typeof)===O)return 11;if(e===R)return 14}return 2}(r),e=ns(r,e),o){case 0:t=Cs(null,t,r,e,n);break e;case 1:t=Ns(null,t,r,e,n);break e;case 11:t=As(null,t,r,e,n);break e;case 14:t=bs(null,t,r,ns(r.type,e),n);break e}throw Error(a(306,r,""))}return t;case 0:return r=t.type,o=t.pendingProps,Cs(e,t,r,o=t.elementType===r?o:ns(r,o),n);case 1:return r=t.type,o=t.pendingProps,Ns(e,t,r,o=t.elementType===r?o:ns(r,o),n);case 3:e:{if(Ds(t),null===e)throw Error(a(387));r=t.pendingProps,o=(i=t.memoizedState).element,Ba(e,t),qa(t,r,null,n);var s=t.memoizedState;if(r=s.element,i.isDehydrated){if(i={element:r,isDehydrated:!1,cache:s.cache,pendingSuspenseBoundaries:s.pendingSuspenseBoundaries,transitions:s.transitions},t.updateQueue.baseState=i,t.memoizedState=i,256&t.flags){t=Ps(e,t,r,n,o=us(Error(a(423)),t));break e}if(r!==o){t=Ps(e,t,r,n,o=us(Error(a(424)),t));break e}for(oa=uo(t.stateNode.containerInfo.firstChild),ra=t,aa=!0,ia=null,n=ba(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(ha(),r===o){t=zs(e,t,n);break e}_s(e,t,r,n)}t=t.child}return t;case 5:return Za(t),null===e&&ca(t),r=t.type,o=t.pendingProps,i=null!==e?e.memoizedProps:null,s=o.children,no(r,o)?s=null:null!==i&&no(r,i)&&(t.flags|=32),Is(e,t),_s(e,t,s,n),t.child;case 6:return null===e&&ca(t),null;case 13:return Gs(e,t,n);case 4:return Xa(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Aa(t,null,r,n):_s(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,As(e,t,r,o=t.elementType===r?o:ns(r,o),n);case 7:return _s(e,t,t.pendingProps,n),t.child;case 8:case 12:return _s(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,o=t.pendingProps,i=t.memoizedProps,s=o.value,No(va,r._currentValue),r._currentValue=s,null!==i)if(sr(i.value,s)){if(i.children===o.children&&!Po.current){t=zs(e,t,n);break e}}else for(null!==(i=t.child)&&(i.return=t);null!==i;){var l=i.dependencies;if(null!==l){s=i.child;for(var u=l.firstContext;null!==u;){if(u.context===r){if(1===i.tag){(u=Ha(-1,n&-n)).tag=2;var c=i.updateQueue;if(null!==c){var f=(c=c.shared).pending;null===f?u.next=u:(u.next=f.next,f.next=u),c.pending=u}}i.lanes|=n,null!==(u=i.alternate)&&(u.lanes|=n),Da(i.return,n,t),l.lanes|=n;break}u=u.next}}else if(10===i.tag)s=i.type===t.type?null:i.child;else if(18===i.tag){if(null===(s=i.return))throw Error(a(341));s.lanes|=n,null!==(l=s.alternate)&&(l.lanes|=n),Da(s,n,t),s=i.sibling}else s=i.child;if(null!==s)s.return=i;else for(s=i;null!==s;){if(s===t){s=null;break}if(null!==(i=s.sibling)){i.return=s.return,s=i;break}s=s.return}i=s}_s(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=t.pendingProps.children,Pa(t,n),r=r(o=Ra(o)),t.flags|=1,_s(e,t,r,n),t.child;case 14:return o=ns(r=t.type,t.pendingProps),bs(e,t,r,o=ns(r.type,o),n);case 15:return vs(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:ns(r,o),qs(e,t),t.tag=1,wo(r)?(e=!0,Go(t)):e=!1,Pa(t,n),is(t,r,o),ls(t,r,o,n),Os(null,t,r,!0,e,n);case 19:return js(e,t,n);case 22:return Ss(e,t,n)}throw Error(a(156,t.tag))};var Yu="function"==typeof reportError?reportError:function(e){console.error(e)};function $u(e){this._internalRoot=e}function Qu(e){this._internalRoot=e}function Xu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Ku(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Zu(){}function Ju(e,t,n,r,o){var a=n._reactRootContainer;if(a){var i=a;if("function"==typeof o){var s=o;o=function(){var e=zu(i);s.call(e)}}qu(t,i,e,o)}else i=function(e,t,n,r,o){if(o){if("function"==typeof r){var a=r;r=function(){var e=zu(i);a.call(e)}}var i=ju(t,r,e,0,null,!1,0,"",Zu);return e._reactRootContainer=i,e[mo]=i.current,jr(8===e.nodeType?e.parentNode:e),cu(),i}for(;o=e.lastChild;)e.removeChild(o);if("function"==typeof r){var s=r;r=function(){var e=zu(l);s.call(e)}}var l=Fu(e,0,!1,null,0,!1,0,"",Zu);return e._reactRootContainer=l,e[mo]=l.current,jr(8===e.nodeType?e.parentNode:e),cu((function(){qu(t,l,n,r)})),l}(n,t,e,o,r);return zu(i)}Qu.prototype.render=$u.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(a(409));qu(e,t,null,null)},Qu.prototype.unmount=$u.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;cu((function(){qu(null,e,null,null)})),t[mo]=null}},Qu.prototype.unstable_scheduleHydration=function(e){if(e){var t=St();e={blockedOn:null,target:e,priority:t};for(var n=0;n<wt.length&&0!==t&&t<wt[n].priority;n++);wt.splice(n,0,e),0===n&&Gt(e)}},At=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=ft(t.pendingLanes);0!==n&&(gt(t,1|n),ru(t,Ke()),!(6&Ol)&&(jl=Ke()+500,qo()))}break;case 13:cu((function(){var t=Ma(e,1);if(null!==t){var n=eu();nu(t,e,1,n)}})),Vu(e,1)}},bt=function(e){if(13===e.tag){var t=Ma(e,134217728);null!==t&&nu(t,e,134217728,eu()),Vu(e,134217728)}},vt=function(e){if(13===e.tag){var t=tu(e),n=Ma(e,t);null!==n&&nu(n,e,t,eu()),Vu(e,t)}},St=function(){return yt},It=function(e,t){var n=yt;try{return yt=e,t()}finally{yt=n}},be=function(e,t,n){switch(t){case"input":if(Z(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=bo(r);if(!o)throw Error(a(90));Y(r),Z(r,o)}}}break;case"textarea":ae(e,n);break;case"select":null!=(t=n.value)&&ne(e,!!n.multiple,t,!1)}},Oe=uu,De=cu;var ec={usingClientEntryPoint:!1,Events:[_o,Ao,bo,Ce,Ne,uu]},tc={findFiberByHostInstance:yo,bundleType:0,version:"18.3.1",rendererPackageName:"react-dom"},nc={bundleType:tc.bundleType,version:tc.version,rendererPackageName:tc.rendererPackageName,rendererConfig:tc.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:_.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=We(e))?null:e.stateNode},findFiberByHostInstance:tc.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.3.1-next-f1338f8080-20240426"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var rc=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!rc.isDisabled&&rc.supportsFiber)try{ot=rc.inject(nc),at=rc}catch(ce){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=ec,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Xu(t))throw Error(a(200));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:b,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)},t.createRoot=function(e,t){if(!Xu(e))throw Error(a(299));var n=!1,r="",o=Yu;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onRecoverableError&&(o=t.onRecoverableError)),t=Fu(e,1,!1,null,0,n,0,r,o),e[mo]=t.current,jr(8===e.nodeType?e.parentNode:e),new $u(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(a(188));throw e=Object.keys(e).join(","),Error(a(268,e))}return null===(e=We(t))?null:e.stateNode},t.flushSync=function(e){return cu(e)},t.hydrate=function(e,t,n){if(!Ku(t))throw Error(a(200));return Ju(null,e,t,!0,n)},t.hydrateRoot=function(e,t,n){if(!Xu(e))throw Error(a(405));var r=null!=n&&n.hydratedSources||null,o=!1,i="",s=Yu;if(null!=n&&(!0===n.unstable_strictMode&&(o=!0),void 0!==n.identifierPrefix&&(i=n.identifierPrefix),void 0!==n.onRecoverableError&&(s=n.onRecoverableError)),t=ju(t,null,e,1,null!=n?n:null,o,0,i,s),e[mo]=t.current,jr(e),r)for(e=0;e<r.length;e++)o=(o=(n=r[e])._getVersion)(n._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[n,o]:t.mutableSourceEagerHydrationData.push(n,o);return new Qu(t)},t.render=function(e,t,n){if(!Ku(t))throw Error(a(200));return Ju(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Ku(e))throw Error(a(40));return!!e._reactRootContainer&&(cu((function(){Ju(null,null,e,!1,(function(){e._reactRootContainer=null,e[mo]=null}))})),!0)},t.unstable_batchedUpdates=uu,t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Ku(n))throw Error(a(200));if(null==e||void 0===e._reactInternals)throw Error(a(38));return Ju(e,t,n,!1,r)},t.version="18.3.1-next-f1338f8080-20240426"},5338:(e,t,n)=>{"use strict";var r=n(961);t.createRoot=r.createRoot,t.hydrateRoot=r.hydrateRoot},961:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(2551)},5287:(e,t)=>{"use strict";var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),o=Symbol.for("react.fragment"),a=Symbol.for("react.strict_mode"),i=Symbol.for("react.profiler"),s=Symbol.for("react.provider"),l=Symbol.for("react.context"),u=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),f=Symbol.for("react.memo"),p=Symbol.for("react.lazy"),d=Symbol.iterator,h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m=Object.assign,E={};function T(e,t,n){this.props=e,this.context=t,this.refs=E,this.updater=n||h}function g(){}function y(e,t,n){this.props=e,this.context=t,this.refs=E,this.updater=n||h}T.prototype.isReactComponent={},T.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},T.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},g.prototype=T.prototype;var _=y.prototype=new g;_.constructor=y,m(_,T.prototype),_.isPureReactComponent=!0;var A=Array.isArray,b=Object.prototype.hasOwnProperty,v={current:null},S={key:!0,ref:!0,__self:!0,__source:!0};function I(e,t,r){var o,a={},i=null,s=null;if(null!=t)for(o in void 0!==t.ref&&(s=t.ref),void 0!==t.key&&(i=""+t.key),t)b.call(t,o)&&!S.hasOwnProperty(o)&&(a[o]=t[o]);var l=arguments.length-2;if(1===l)a.children=r;else if(1<l){for(var u=Array(l),c=0;c<l;c++)u[c]=arguments[c+2];a.children=u}if(e&&e.defaultProps)for(o in l=e.defaultProps)void 0===a[o]&&(a[o]=l[o]);return{$$typeof:n,type:e,key:i,ref:s,props:a,_owner:v.current}}function C(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var N=/\/+/g;function O(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function D(e,t,o,a,i){var s=typeof e;"undefined"!==s&&"boolean"!==s||(e=null);var l=!1;if(null===e)l=!0;else switch(s){case"string":case"number":l=!0;break;case"object":switch(e.$$typeof){case n:case r:l=!0}}if(l)return i=i(l=e),e=""===a?"."+O(l,0):a,A(i)?(o="",null!=e&&(o=e.replace(N,"$&/")+"/"),D(i,t,o,"",(function(e){return e}))):null!=i&&(C(i)&&(i=function(e,t){return{$$typeof:n,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(i,o+(!i.key||l&&l.key===i.key?"":(""+i.key).replace(N,"$&/")+"/")+e)),t.push(i)),1;if(l=0,a=""===a?".":a+":",A(e))for(var u=0;u<e.length;u++){var c=a+O(s=e[u],u);l+=D(s,t,o,c,i)}else if(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=d&&e[d]||e["@@iterator"])?e:null}(e),"function"==typeof c)for(e=c.call(e),u=0;!(s=e.next()).done;)l+=D(s=s.value,t,o,c=a+O(s,u++),i);else if("object"===s)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return l}function P(e,t,n){if(null==e)return e;var r=[],o=0;return D(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function R(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var k={current:null},w={transition:null},L={ReactCurrentDispatcher:k,ReactCurrentBatchConfig:w,ReactCurrentOwner:v};function M(){throw Error("act(...) is not supported in production builds of React.")}t.Children={map:P,forEach:function(e,t,n){P(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return P(e,(function(){t++})),t},toArray:function(e){return P(e,(function(e){return e}))||[]},only:function(e){if(!C(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=T,t.Fragment=o,t.Profiler=i,t.PureComponent=y,t.StrictMode=a,t.Suspense=c,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=L,t.act=M,t.cloneElement=function(e,t,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var o=m({},e.props),a=e.key,i=e.ref,s=e._owner;if(null!=t){if(void 0!==t.ref&&(i=t.ref,s=v.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var l=e.type.defaultProps;for(u in t)b.call(t,u)&&!S.hasOwnProperty(u)&&(o[u]=void 0===t[u]&&void 0!==l?l[u]:t[u])}var u=arguments.length-2;if(1===u)o.children=r;else if(1<u){l=Array(u);for(var c=0;c<u;c++)l[c]=arguments[c+2];o.children=l}return{$$typeof:n,type:e.type,key:a,ref:i,props:o,_owner:s}},t.createContext=function(e){return(e={$$typeof:l,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:s,_context:e},e.Consumer=e},t.createElement=I,t.createFactory=function(e){var t=I.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:u,render:e}},t.isValidElement=C,t.lazy=function(e){return{$$typeof:p,_payload:{_status:-1,_result:e},_init:R}},t.memo=function(e,t){return{$$typeof:f,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=w.transition;w.transition={};try{e()}finally{w.transition=t}},t.unstable_act=M,t.useCallback=function(e,t){return k.current.useCallback(e,t)},t.useContext=function(e){return k.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return k.current.useDeferredValue(e)},t.useEffect=function(e,t){return k.current.useEffect(e,t)},t.useId=function(){return k.current.useId()},t.useImperativeHandle=function(e,t,n){return k.current.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return k.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return k.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return k.current.useMemo(e,t)},t.useReducer=function(e,t,n){return k.current.useReducer(e,t,n)},t.useRef=function(e){return k.current.useRef(e)},t.useState=function(e){return k.current.useState(e)},t.useSyncExternalStore=function(e,t,n){return k.current.useSyncExternalStore(e,t,n)},t.useTransition=function(){return k.current.useTransition()},t.version="18.3.1"},6540:(e,t,n)=>{"use strict";e.exports=n(5287)},6492:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(e){return JSON.stringify(e)},r=function(e){var t=e.body,r=[],o=!0,a=!1,i=void 0;try{for(var s,l=t[Symbol.iterator]();!(o=(s=l.next()).done);o=!0){var u=s.value,c=void 0;if("universalSelector"===u.type)c="*";else if("typeSelector"===u.type)c=u.name;else if("idSelector"===u.type)c="#"+u.name;else if("classSelector"===u.type)c="."+u.name;else if("attributePresenceSelector"===u.type)c="["+u.name+"]";else if("attributeValueSelector"===u.type)c="["+u.name+u.operator+n(u.value)+"]";else if("pseudoClassSelector"===u.type)c=":"+u.name,u.parameters.length&&(c+="("+u.parameters.map(n).join(", ")+")");else{if("pseudoElementSelector"!==u.type)throw new Error("Unknown token.");c="::"+u.name}r.push(c)}}catch(e){a=!0,i=e}finally{try{!o&&l.return&&l.return()}finally{if(a)throw i}}return r.join("")};t.default=function(){return{generate:function(e){var t=[],n=!0,o=!1,a=void 0;try{for(var i,s=e[Symbol.iterator]();!(n=(i=s.next()).done);n=!0){var l=i.value;if("selector"===l.type)t.push(r(l));else if("descendantCombinator"===l.type)t.push(" ");else if("childCombinator"===l.type)t.push(" > ");else if("adjacentSiblingCombinator"===l.type)t.push(" + ");else{if("generalSiblingCombinator"!==l.type)throw new Error("Unknown token.");t.push(" ~ ")}}}catch(e){o=!0,a=e}finally{try{!n&&s.return&&s.return()}finally{if(o)throw a}}return t.join("")}}}},9414:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(8515),a=(r=n(6500))&&r.__esModule?r:{default:r};t.default=function(){return{parse:function(e){var t=new o.Parser(a.default.ParserRules,a.default.ParserStart).feed(e).results;if(0===t.length)throw new Error("Found no parsings.");if(t.length>1)throw new Error("Ambiguous results.");return t[0]}}}},6500:(e,t,n)=>{"use strict";!function(){function t(e){return e[0]}var r=n(2622),o=function(e){return e=e.filter((function(e){return null!==e})),r(e)},a={" ":"descendantCombinator","+":"adjacentSiblingCombinator",">":"childCombinator","~":"generalSiblingCombinator"},i=function(e,t,n){var o=r(e).join(""),a=parseFloat(o);return isNaN(a)?n:a},s=function(e,t,n){return"true"===e[0]||"false"!==e[0]&&n},l=function(e,t,n){return"NaN"===e[0]?NaN:"undefined"!==e[0]?"null"===e[0]?null:n:void 0},u={Lexer:void 0,ParserRules:[{name:"combinator",symbols:["selector"]},{name:"combinator",symbols:["combinator","_",/[>+~ ]/,"_","selector"],postprocess:function(e){return(Array.isArray(e[0])?e[0]:[e[0]]).concat({type:a[e[2]]}).concat(e[4])}},{name:"selector",symbols:["selectorBody"],postprocess:function(e){return{type:"selector",body:e[0]}}},{name:"selectorBody$ebnf$1",symbols:["typeSelector"],postprocess:t},{name:"selectorBody$ebnf$1",symbols:[],postprocess:function(e){return null}},{name:"selectorBody$ebnf$2",symbols:[]},{name:"selectorBody$ebnf$2",symbols:["selectorBody$ebnf$2","simpleSelector"],postprocess:function(e){return e[0].concat([e[1]])}},{name:"selectorBody",symbols:["selectorBody$ebnf$1","selectorBody$ebnf$2"],postprocess:function(e,t,n){var r=o(e);return r.length?r:n}},{name:"selectorBody$ebnf$3",symbols:[]},{name:"selectorBody$ebnf$3",symbols:["selectorBody$ebnf$3","simpleSelector"],postprocess:function(e){return e[0].concat([e[1]])}},{name:"selectorBody",symbols:["universalSelector","selectorBody$ebnf$3"],postprocess:o},{name:"simpleSelector",symbols:["idSelector"]},{name:"simpleSelector",symbols:["classSelector"]},{name:"simpleSelector",symbols:["attributeValueSelector"]},{name:"simpleSelector",symbols:["attributePresenceSelector"]},{name:"simpleSelector",symbols:["pseudoClassSelector"]},{name:"simpleSelector",symbols:["pseudoElementSelector"]},{name:"typeSelector",symbols:["attributeName"],postprocess:function(e){return{type:"typeSelector",name:e[0]}}},{name:"className$ebnf$1",symbols:[{literal:"-"}],postprocess:t},{name:"className$ebnf$1",symbols:[],postprocess:function(e){return null}},{name:"className$ebnf$2",symbols:[]},{name:"className$ebnf$2",symbols:["className$ebnf$2",/[_a-zA-Z0-9-]/],postprocess:function(e){return e[0].concat([e[1]])}},{name:"className",symbols:["className$ebnf$1",/[_a-zA-Z]/,"className$ebnf$2"],postprocess:function(e){return(e[0]||"")+e[1]+e[2].join("")}},{name:"attributeName$ebnf$1",symbols:[]},{name:"attributeName$ebnf$1",symbols:["attributeName$ebnf$1",/[_a-zA-Z()0-9-]/],postprocess:function(e){return e[0].concat([e[1]])}},{name:"attributeName",symbols:[/[_a-z()A-Z]/,"attributeName$ebnf$1"],postprocess:function(e){return e[0]+e[1].join("")}},{name:"classSelector",symbols:[{literal:"."},"className"],postprocess:function(e){return{type:"classSelector",name:e[1]}}},{name:"idSelector",symbols:[{literal:"#"},"attributeName"],postprocess:function(e){return{type:"idSelector",name:e[1]}}},{name:"universalSelector",symbols:[{literal:"*"}],postprocess:function(e){return{type:"universalSelector"}}},{name:"attributePresenceSelector",symbols:[{literal:"["},"attributeName",{literal:"]"}],postprocess:function(e){return{type:"attributePresenceSelector",name:e[1]}}},{name:"attributeOperator",symbols:[{literal:"="}]},{name:"attributeOperator$string$1",symbols:[{literal:"~"},{literal:"="}],postprocess:function(e){return e.join("")}},{name:"attributeOperator",symbols:["attributeOperator$string$1"]},{name:"attributeOperator$string$2",symbols:[{literal:"|"},{literal:"="}],postprocess:function(e){return e.join("")}},{name:"attributeOperator",symbols:["attributeOperator$string$2"]},{name:"attributeOperator$string$3",symbols:[{literal:"^"},{literal:"="}],postprocess:function(e){return e.join("")}},{name:"attributeOperator",symbols:["attributeOperator$string$3"]},{name:"attributeOperator$string$4",symbols:[{literal:"$"},{literal:"="}],postprocess:function(e){return e.join("")}},{name:"attributeOperator",symbols:["attributeOperator$string$4"]},{name:"attributeOperator$string$5",symbols:[{literal:"*"},{literal:"="}],postprocess:function(e){return e.join("")}},{name:"attributeOperator",symbols:["attributeOperator$string$5"]},{name:"attributeValueSelector",symbols:[{literal:"["},"attributeName","attributeOperator","attributeValue",{literal:"]"}],postprocess:function(e){return{type:"attributeValueSelector",name:e[1],value:e[3],operator:e[2][0]}}},{name:"attributeValue",symbols:["falsyPrimitiveStrings"],postprocess:t},{name:"attributeValue",symbols:["numericValue"],postprocess:t},{name:"attributeValue",symbols:["sqstring"],postprocess:t},{name:"attributeValue",symbols:["dqstring"],postprocess:t},{name:"falsyPrimitiveStrings$string$1",symbols:[{literal:"f"},{literal:"a"},{literal:"l"},{literal:"s"},{literal:"e"}],postprocess:function(e){return e.join("")}},{name:"falsyPrimitiveStrings",symbols:["falsyPrimitiveStrings$string$1"],postprocess:s},{name:"falsyPrimitiveStrings$string$2",symbols:[{literal:"t"},{literal:"r"},{literal:"u"},{literal:"e"}],postprocess:function(e){return e.join("")}},{name:"falsyPrimitiveStrings",symbols:["falsyPrimitiveStrings$string$2"],postprocess:s},{name:"falsyPrimitiveStrings$string$3",symbols:[{literal:"N"},{literal:"a"},{literal:"N"}],postprocess:function(e){return e.join("")}},{name:"falsyPrimitiveStrings",symbols:["falsyPrimitiveStrings$string$3"],postprocess:l},{name:"falsyPrimitiveStrings$string$4",symbols:[{literal:"n"},{literal:"u"},{literal:"l"},{literal:"l"}],postprocess:function(e){return e.join("")}},{name:"falsyPrimitiveStrings",symbols:["falsyPrimitiveStrings$string$4"],postprocess:l},{name:"falsyPrimitiveStrings$string$5",symbols:[{literal:"u"},{literal:"n"},{literal:"d"},{literal:"e"},{literal:"f"},{literal:"i"},{literal:"n"},{literal:"e"},{literal:"d"}],postprocess:function(e){return e.join("")}},{name:"falsyPrimitiveStrings",symbols:["falsyPrimitiveStrings$string$5"],postprocess:l},{name:"numericValue",symbols:["int",{literal:"."},"int"],postprocess:i},{name:"numericValue",symbols:[{literal:"+"},"int",{literal:"."},"int"],postprocess:i},{name:"numericValue",symbols:[{literal:"-"},"int",{literal:"."},"int"],postprocess:i},{name:"numericValue",symbols:[{literal:"-"},"int"],postprocess:i},{name:"numericValue",symbols:["int"],postprocess:i},{name:"numericValue",symbols:[{literal:"+"},"int"],postprocess:i},{name:"numericValue$string$1",symbols:[{literal:"I"},{literal:"n"},{literal:"f"},{literal:"i"},{literal:"n"},{literal:"i"},{literal:"t"},{literal:"y"}],postprocess:function(e){return e.join("")}},{name:"numericValue",symbols:["numericValue$string$1"],postprocess:i},{name:"numericValue$string$2",symbols:[{literal:"+"},{literal:"I"},{literal:"n"},{literal:"f"},{literal:"i"},{literal:"n"},{literal:"i"},{literal:"t"},{literal:"y"}],postprocess:function(e){return e.join("")}},{name:"numericValue",symbols:["numericValue$string$2"],postprocess:i},{name:"numericValue$string$3",symbols:[{literal:"-"},{literal:"I"},{literal:"n"},{literal:"f"},{literal:"i"},{literal:"n"},{literal:"i"},{literal:"t"},{literal:"y"}],postprocess:function(e){return e.join("")}},{name:"numericValue",symbols:["numericValue$string$3"],postprocess:i},{name:"int$ebnf$1",symbols:[/[0-9]/]},{name:"int$ebnf$1",symbols:["int$ebnf$1",/[0-9]/],postprocess:function(e){return e[0].concat([e[1]])}},{name:"int",symbols:["int$ebnf$1"]},{name:"classParameters",symbols:[]},{name:"classParameters",symbols:["classParameter"]},{name:"classParameters",symbols:["classParameters",{literal:","},"_","classParameter"],postprocess:(0,3,function(e){return e[0].concat([e[3]])})},{name:"classParameter$ebnf$1",symbols:[/[^()"', ]/]},{name:"classParameter$ebnf$1",symbols:["classParameter$ebnf$1",/[^()"', ]/],postprocess:function(e){return e[0].concat([e[1]])}},{name:"classParameter",symbols:["classParameter$ebnf$1"],postprocess:function(e){return e[0].join("")}},{name:"classParameter",symbols:["sqstring"],postprocess:t},{name:"classParameter",symbols:["dqstring"],postprocess:t},{name:"pseudoElementSelector$string$1",symbols:[{literal:":"},{literal:":"}],postprocess:function(e){return e.join("")}},{name:"pseudoElementSelector",symbols:["pseudoElementSelector$string$1","pseudoClassSelectorName"],postprocess:function(e){return{type:"pseudoElementSelector",name:e[1]}}},{name:"pseudoClassSelector",symbols:[{literal:":"},"pseudoClassSelectorName"],postprocess:function(e){return{type:"pseudoClassSelector",name:e[1]}}},{name:"pseudoClassSelector",symbols:[{literal:":"},"pseudoClassSelectorName",{literal:"("},"classParameters",{literal:")"}],postprocess:function(e){return{type:"pseudoClassSelector",name:e[1],parameters:e[3]}}},{name:"pseudoClassSelectorName$ebnf$1",symbols:[/[a-zA-Z0-9-_]/]},{name:"pseudoClassSelectorName$ebnf$1",symbols:["pseudoClassSelectorName$ebnf$1",/[a-zA-Z0-9-_]/],postprocess:function(e){return e[0].concat([e[1]])}},{name:"pseudoClassSelectorName",symbols:[/[a-zA-Z]/,"pseudoClassSelectorName$ebnf$1"],postprocess:function(e){return e[0]+e[1].join("")}},{name:"dqstring$ebnf$1",symbols:[]},{name:"dqstring$ebnf$1",symbols:["dqstring$ebnf$1","dstrchar"],postprocess:function(e){return e[0].concat([e[1]])}},{name:"dqstring",symbols:[{literal:'"'},"dqstring$ebnf$1",{literal:'"'}],postprocess:function(e){return e[1].join("")}},{name:"dstrchar",symbols:[/[^"]/],postprocess:t},{name:"dstrchar$string$1",symbols:[{literal:"\\"},{literal:'"'}],postprocess:function(e){return e.join("")}},{name:"dstrchar",symbols:["dstrchar$string$1"],postprocess:function(e){return'"'}},{name:"sqstring$ebnf$1",symbols:[]},{name:"sqstring$ebnf$1",symbols:["sqstring$ebnf$1","sstrchar"],postprocess:function(e){return e[0].concat([e[1]])}},{name:"sqstring",symbols:[{literal:"'"},"sqstring$ebnf$1",{literal:"'"}],postprocess:function(e){return e[1].join("")}},{name:"sstrchar",symbols:[/[^']/],postprocess:t},{name:"sstrchar$string$1",symbols:[{literal:"\\"},{literal:"'"}],postprocess:function(e){return e.join("")}},{name:"sstrchar",symbols:["sstrchar$string$1"],postprocess:function(e){return"'"}},{name:"_$ebnf$1",symbols:[]},{name:"_$ebnf$1",symbols:["_$ebnf$1",/[ ]/],postprocess:function(e){return e[0].concat([e[1]])}},{name:"_",symbols:["_$ebnf$1"],postprocess:function(e){return null}}],ParserStart:"combinator"};void 0!==e.exports?e.exports=u:window.grammar=u}()},6013:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.createParser=t.createGenerator=void 0;var r=a(n(6492)),o=a(n(9414));function a(e){return e&&e.__esModule?e:{default:e}}t.createGenerator=r.default,t.createParser=o.default},9721:(e,t,n)=>{"use strict";var r=n(8075),o=n(4035),a=r("RegExp.prototype.exec"),i=n(9675);e.exports=function(e){if(!o(e))throw new i("`regex` must be a RegExp");return function(t){return null!==a(e,t)}}},7463:(e,t)=>{"use strict";function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,o=e[r];if(!(0<a(o,t)))break e;e[r]=t,e[n]=o,n=r}}function r(e){return 0===e.length?null:e[0]}function o(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length,i=o>>>1;r<i;){var s=2*(r+1)-1,l=e[s],u=s+1,c=e[u];if(0>a(l,n))u<o&&0>a(c,l)?(e[r]=c,e[u]=n,r=u):(e[r]=l,e[s]=n,r=s);else{if(!(u<o&&0>a(c,n)))break e;e[r]=c,e[u]=n,r=u}}}return t}function a(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var i=performance;t.unstable_now=function(){return i.now()}}else{var s=Date,l=s.now();t.unstable_now=function(){return s.now()-l}}var u=[],c=[],f=1,p=null,d=3,h=!1,m=!1,E=!1,T="function"==typeof setTimeout?setTimeout:null,g="function"==typeof clearTimeout?clearTimeout:null,y="undefined"!=typeof setImmediate?setImmediate:null;function _(e){for(var t=r(c);null!==t;){if(null===t.callback)o(c);else{if(!(t.startTime<=e))break;o(c),t.sortIndex=t.expirationTime,n(u,t)}t=r(c)}}function A(e){if(E=!1,_(e),!m)if(null!==r(u))m=!0,w(b);else{var t=r(c);null!==t&&L(A,t.startTime-e)}}function b(e,n){m=!1,E&&(E=!1,g(C),C=-1),h=!0;var a=d;try{for(_(n),p=r(u);null!==p&&(!(p.expirationTime>n)||e&&!D());){var i=p.callback;if("function"==typeof i){p.callback=null,d=p.priorityLevel;var s=i(p.expirationTime<=n);n=t.unstable_now(),"function"==typeof s?p.callback=s:p===r(u)&&o(u),_(n)}else o(u);p=r(u)}if(null!==p)var l=!0;else{var f=r(c);null!==f&&L(A,f.startTime-n),l=!1}return l}finally{p=null,d=a,h=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var v,S=!1,I=null,C=-1,N=5,O=-1;function D(){return!(t.unstable_now()-O<N)}function P(){if(null!==I){var e=t.unstable_now();O=e;var n=!0;try{n=I(!0,e)}finally{n?v():(S=!1,I=null)}}else S=!1}if("function"==typeof y)v=function(){y(P)};else if("undefined"!=typeof MessageChannel){var R=new MessageChannel,k=R.port2;R.port1.onmessage=P,v=function(){k.postMessage(null)}}else v=function(){T(P,0)};function w(e){I=e,S||(S=!0,v())}function L(e,n){C=T((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){m||h||(m=!0,w(b))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):N=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return d},t.unstable_getFirstCallbackNode=function(){return r(u)},t.unstable_next=function(e){switch(d){case 1:case 2:case 3:var t=3;break;default:t=d}var n=d;d=t;try{return e()}finally{d=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=d;d=e;try{return t()}finally{d=n}},t.unstable_scheduleCallback=function(e,o,a){var i=t.unstable_now();switch(a="object"==typeof a&&null!==a&&"number"==typeof(a=a.delay)&&0<a?i+a:i,e){case 1:var s=-1;break;case 2:s=250;break;case 5:s=1073741823;break;case 4:s=1e4;break;default:s=5e3}return e={id:f++,callback:o,priorityLevel:e,startTime:a,expirationTime:s=a+s,sortIndex:-1},a>i?(e.sortIndex=a,n(c,e),null===r(u)&&e===r(c)&&(E?(g(C),C=-1):E=!0,L(A,a-i))):(e.sortIndex=s,n(u,e),m||h||(m=!0,w(b))),e},t.unstable_shouldYield=D,t.unstable_wrapCallback=function(e){var t=d;return function(){var n=d;d=t;try{return e.apply(this,arguments)}finally{d=n}}}},9982:(e,t,n)=>{"use strict";e.exports=n(7463)},6897:(e,t,n)=>{"use strict";var r=n(453),o=n(41),a=n(592)(),i=n(5795),s=n(9675),l=r("%Math.floor%");e.exports=function(e,t){if("function"!=typeof e)throw new s("`fn` is not a function");if("number"!=typeof t||t<0||t>4294967295||l(t)!==t)throw new s("`length` must be a positive 32-bit integer");var n=arguments.length>2&&!!arguments[2],r=!0,u=!0;if("length"in e&&i){var c=i(e,"length");c&&!c.configurable&&(r=!1),c&&!c.writable&&(u=!1)}return(r||u||!n)&&(a?o(e,"length",t,!0,!0):o(e,"length",t)),e}},8206:(e,t,n)=>{"use strict";var r=n(5388),o=n(4810),a=n(8075)("String.prototype.replace"),i=/^\s$/.test("᠎"),s=i?/^[\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF]+/:/^[\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF]+/,l=i?/[\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF]+$/:/[\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF]+$/;e.exports=function(){var e=o(r(this));return a(a(e,s,""),l,"")}},214:(e,t,n)=>{"use strict";var r=n(487),o=n(8452),a=n(5388),i=n(8206),s=n(4895),l=n(9377),u=r(s()),c=function(e){return a(e),u(e)};o(c,{getPolyfill:s,implementation:i,shim:l}),e.exports=c},4895:(e,t,n)=>{"use strict";var r=n(8206);e.exports=function(){return String.prototype.trim&&"​"==="​".trim()&&"᠎"==="᠎".trim()&&"_᠎"==="_᠎".trim()&&"᠎_"==="᠎_".trim()?String.prototype.trim:r}},9377:(e,t,n)=>{"use strict";var r=n(8452),o=n(4895);e.exports=function(){var e=o();return r(String.prototype,{trim:e},{trim:function(){return String.prototype.trim!==e}}),e}},5072:e=>{"use strict";var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var a={},i=[],s=0;s<e.length;s++){var l=e[s],u=r.base?l[0]+r.base:l[0],c=a[u]||0,f="".concat(u," ").concat(c);a[u]=c+1;var p=n(f),d={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==p)t[p].references++,t[p].updater(d);else{var h=o(d,r);r.byIndex=s,t.splice(s,0,{identifier:f,updater:h,references:1})}i.push(f)}return i}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var s=n(a[i]);t[s].references--}for(var l=r(e,o),u=0;u<a.length;u++){var c=n(a[u]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}a=l}}},7659:e=>{"use strict";var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},540:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},5056:(e,t,n)=>{"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},7825:e=>{"use strict";e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},1113:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},2634:()=>{},3016:(e,t,n)=>{"use strict";var r=n(453),o=r("%Array.prototype%"),a=n(9290),i=n(8068),s=n(9675),l=n(1087),u=Math.pow(2,32)-1,c=n(24)(),f=r("%Object.setPrototypeOf%",!0)||(c?function(e,t){return e.__proto__=t,e}:null);e.exports=function(e){if(!l(e)||e<0)throw new s("Assertion failed: `length` must be an integer Number >= 0");if(e>u)throw new a("length is greater than (2**32 - 1)");var t=arguments.length>1?arguments[1]:o,n=[];if(t!==o){if(!f)throw new i("ArrayCreate: a `proto` argument that is not `Array.prototype` is not supported in an environment that does not support setting the [[Prototype]]");f(n,t)}return 0!==e&&(n.length=e),n}},4076:(e,t,n)=>{"use strict";var r=n(453)("%Symbol.species%",!0),o=n(9675),a=n(3016),i=n(4281),s=n(9268),l=n(9801),u=n(8501),c=n(1087);e.exports=function(e,t){if(!c(t)||t<0)throw new o("Assertion failed: length must be an integer >= 0");if(!s(e))return a(t);var n=i(e,"constructor");if(r&&"Object"===u(n)&&null===(n=i(n,r))&&(n=void 0),void 0===n)return a(t);if(!l(n))throw new o("C must be a constructor");return new n(t)}},545:(e,t,n)=>{"use strict";var r=n(453),o=n(8075),a=n(9675),i=n(9268),s=r("%Reflect.apply%",!0)||o("Function.prototype.apply");e.exports=function(e,t){var n=arguments.length>2?arguments[2]:[];if(!i(n))throw new a("Assertion failed: optional `argumentsList`, if provided, must be a List");return s(e,t,n)}},3288:(e,t,n)=>{"use strict";var r=n(9675),o=n(5637),a=n(6175),i=n(8501);e.exports=function(e,t,n){if("Object"!==i(e))throw new r("Assertion failed: Type(O) is not Object");if(!o(t))throw new r("Assertion failed: IsPropertyKey(P) is not true");return a(e,t,{"[[Configurable]]":!0,"[[Enumerable]]":!0,"[[Value]]":n,"[[Writable]]":!0})}},2189:(e,t,n)=>{"use strict";var r=n(9675),o=n(3288),a=n(5637),i=n(8501);e.exports=function(e,t,n){if("Object"!==i(e))throw new r("Assertion failed: Type(O) is not Object");if(!a(t))throw new r("Assertion failed: IsPropertyKey(P) is not true");if(!o(e,t,n))throw new r("unable to create data property")}},8780:(e,t,n)=>{"use strict";var r=n(9675),o=n(5701),a=n(4769),i=n(9173),s=n(7856),l=n(5637),u=n(6654),c=n(9576),f=n(8501);e.exports=function(e,t,n){if("Object"!==f(e))throw new r("Assertion failed: Type(O) is not Object");if(!l(t))throw new r("Assertion failed: IsPropertyKey(P) is not true");var p=o(n)?n:c(n);if(!o(p))throw new r("Assertion failed: Desc is not a valid Property Descriptor");return a(s,u,i,e,t,p)}},1828:(e,t,n)=>{"use strict";var r=n(9675),o=n(7050),a=n(545),i=n(2189),s=n(4281),l=n(3772),u=n(9268),c=n(2916),f=n(1885);e.exports=function e(t,n,p,d,h){var m;arguments.length>5&&(m=arguments[5]);for(var E=d,T=0;T<p;){var g=f(T);if(!0===l(n,g)){var y=s(n,g);if(void 0!==m){if(arguments.length<=6)throw new r("Assertion failed: thisArg is required when mapperFunction is provided");y=a(m,arguments[6],[y,T,n])}var _=!1;if(h>0&&(_=u(y)),_)E=e(t,y,c(y),E,h-1);else{if(E>=o)throw new r("index too large");i(t,f(E),y),E+=1}}T+=1}return E}},9173:(e,t,n)=>{"use strict";var r=n(9675),o=n(5701),a=n(2997);e.exports=function(e){if(void 0!==e&&!o(e))throw new r("Assertion failed: `Desc` must be a Property Descriptor");return a(e)}},4281:(e,t,n)=>{"use strict";var r=n(9675),o=n(8859),a=n(5637),i=n(8501);e.exports=function(e,t){if("Object"!==i(e))throw new r("Assertion failed: Type(O) is not Object");if(!a(t))throw new r("Assertion failed: IsPropertyKey(P) is not true, got "+o(t));return e[t]}},8356:(e,t,n)=>{"use strict";var r=n(9675),o=n(9957),a=n(5637),i=n(8501);e.exports=function(e,t){if("Object"!==i(e))throw new r("Assertion failed: `O` must be an Object");if(!a(t))throw new r("Assertion failed: `P` must be a Property Key");return o(e,t)}},3772:(e,t,n)=>{"use strict";var r=n(9675),o=n(5637),a=n(8501);e.exports=function(e,t){if("Object"!==a(e))throw new r("Assertion failed: `O` must be an Object");if(!o(t))throw new r("Assertion failed: `P` must be a Property Key");return t in e}},6951:(e,t,n)=>{"use strict";var r=n(9675),o=n(9957),a=n(5701);e.exports=function(e){if(void 0===e)return!1;if(!a(e))throw new r("Assertion failed: `Desc` must be a Property Descriptor");return!(!o(e,"[[Get]]")&&!o(e,"[[Set]]"))}},9268:(e,t,n)=>{"use strict";e.exports=n(1412)},4377:(e,t,n)=>{"use strict";e.exports=n(9600)},9801:(e,t,n)=>{"use strict";var r=n(1376)("%Reflect.construct%",!0),o=n(8780);try{o({},"",{"[[Get]]":function(){}})}catch(e){o=null}if(o&&r){var a={},i={};o(i,"length",{"[[Get]]":function(){throw a},"[[Enumerable]]":!0}),e.exports=function(e){try{r(e,i)}catch(e){return e===a}}}else e.exports=function(e){return"function"==typeof e&&!!e.prototype}},7856:(e,t,n)=>{"use strict";var r=n(9675),o=n(9957),a=n(5701);e.exports=function(e){if(void 0===e)return!1;if(!a(e))throw new r("Assertion failed: `Desc` must be a Property Descriptor");return!(!o(e,"[[Value]]")&&!o(e,"[[Writable]]"))}},908:(e,t,n)=>{"use strict";var r=n(453),o=r("%Object.preventExtensions%",!0),a=r("%Object.isExtensible%",!0),i=n(6600);e.exports=o?function(e){return!i(e)&&a(e)}:function(e){return!i(e)}},9561:(e,t,n)=>{"use strict";var r=n(9675),o=n(6951),a=n(7856),i=n(5701);e.exports=function(e){if(void 0===e)return!1;if(!i(e))throw new r("Assertion failed: `Desc` must be a Property Descriptor");return!o(e)&&!a(e)}},5637:e=>{"use strict";e.exports=function(e){return"string"==typeof e||"symbol"==typeof e}},2916:(e,t,n)=>{"use strict";var r=n(9675),o=n(4281),a=n(9916),i=n(8501);e.exports=function(e){if("Object"!==i(e))throw new r("Assertion failed: `obj` must be an Object");return a(o(e,"length"))}},6175:(e,t,n)=>{"use strict";var r=n(5795),o=n(8068),a=n(9675),i=n(5701),s=n(6951),l=n(908),u=n(5637),c=n(9576),f=n(6654),p=n(8501),d=n(6532);e.exports=function(e,t,n){if("Object"!==p(e))throw new a("Assertion failed: O must be an Object");if(!u(t))throw new a("Assertion failed: P must be a Property Key");if(!i(n))throw new a("Assertion failed: Desc must be a Property Descriptor");if(!r){if(s(n))throw new o("This environment does not support accessor property descriptors.");var h=!(t in e)&&n["[[Writable]]"]&&n["[[Enumerable]]"]&&n["[[Configurable]]"]&&"[[Value]]"in n,m=t in e&&(!("[[Configurable]]"in n)||n["[[Configurable]]"])&&(!("[[Enumerable]]"in n)||n["[[Enumerable]]"])&&(!("[[Writable]]"in n)||n["[[Writable]]"])&&"[[Value]]"in n;if(h||m)return e[t]=n["[[Value]]"],f(e[t],n["[[Value]]"]);throw new o("This environment does not support defining non-writable, non-enumerable, or non-configurable properties")}var E=r(e,t),T=E&&c(E),g=l(e);return d(e,t,g,n,T)}},6654:(e,t,n)=>{"use strict";var r=n(8756);e.exports=function(e,t){return e===t?0!==e||1/e==1/t:r(e)&&r(t)}},3360:(e,t,n)=>{"use strict";var r=n(453),o=r("%Number%"),a=r("%RegExp%"),i=n(9675),s=r("%parseInt%"),l=n(8075),u=n(9721),c=l("String.prototype.slice"),f=u(/^0b[01]+$/i),p=u(/^0o[0-7]+$/i),d=u(/^[-+]0x[0-9a-f]+$/i),h=u(new a("["+["","​","￾"].join("")+"]","g")),m=n(214);e.exports=function e(t){if("string"!=typeof t)throw new i("Assertion failed: `argument` is not a String");if(f(t))return o(s(c(t,2),2));if(p(t))return o(s(c(t,2),8));if(h(t)||d(t))return NaN;var n=m(t);return n!==t?e(n):o(t)}},4150:e=>{"use strict";e.exports=function(e){return!!e}},289:(e,t,n)=>{"use strict";var r=n(6065),o=n(6967),a=n(8756),i=n(5046);e.exports=function(e){var t=r(e);return a(t)||0===t?0:i(t)?o(t):t}},9916:(e,t,n)=>{"use strict";var r=n(7050),o=n(289);e.exports=function(e){var t=o(e);return t<=0?0:t>r?r:t}},6065:(e,t,n)=>{"use strict";var r=n(453),o=n(9675),a=r("%Number%"),i=n(6600),s=n(9163),l=n(3360);e.exports=function(e){var t=i(e)?e:s(e,a);if("symbol"==typeof t)throw new o("Cannot convert a Symbol value to a number");if("bigint"==typeof t)throw new o("Conversion from 'BigInt' to 'number' is not allowed.");return"string"==typeof t?l(t):a(t)}},8227:(e,t,n)=>{"use strict";e.exports=n(3348)},9163:(e,t,n)=>{"use strict";var r=n(5437);e.exports=function(e){return arguments.length>1?r(e,arguments[1]):r(e)}},9576:(e,t,n)=>{"use strict";var r=n(9957),o=n(9675),a=n(8501),i=n(4150),s=n(4377);e.exports=function(e){if("Object"!==a(e))throw new o("ToPropertyDescriptor requires an object");var t={};if(r(e,"enumerable")&&(t["[[Enumerable]]"]=i(e.enumerable)),r(e,"configurable")&&(t["[[Configurable]]"]=i(e.configurable)),r(e,"value")&&(t["[[Value]]"]=e.value),r(e,"writable")&&(t["[[Writable]]"]=i(e.writable)),r(e,"get")){var n=e.get;if(void 0!==n&&!s(n))throw new o("getter must be a function");t["[[Get]]"]=n}if(r(e,"set")){var l=e.set;if(void 0!==l&&!s(l))throw new o("setter must be a function");t["[[Set]]"]=l}if((r(t,"[[Get]]")||r(t,"[[Set]]"))&&(r(t,"[[Value]]")||r(t,"[[Writable]]")))throw new o("Invalid property descriptor. Cannot both specify accessors and a value or writable attribute");return t}},1885:(e,t,n)=>{"use strict";var r=n(453)("%String%"),o=n(9675);e.exports=function(e){if("symbol"==typeof e)throw new o("Cannot convert a Symbol value to a string");return r(e)}},8501:(e,t,n)=>{"use strict";var r=n(2439);e.exports=function(e){return"symbol"==typeof e?"Symbol":"bigint"==typeof e?"BigInt":r(e)}},6532:(e,t,n)=>{"use strict";var r=n(9675),o=n(4769),a=n(8143),i=n(5701),s=n(9173),l=n(6951),u=n(7856),c=n(9561),f=n(5637),p=n(6654),d=n(8501);e.exports=function(e,t,n,h,m){var E,T,g=d(e);if("Undefined"!==g&&"Object"!==g)throw new r("Assertion failed: O must be undefined or an Object");if(!f(t))throw new r("Assertion failed: P must be a Property Key");if("boolean"!=typeof n)throw new r("Assertion failed: extensible must be a Boolean");if(!i(h))throw new r("Assertion failed: Desc must be a Property Descriptor");if(void 0!==m&&!i(m))throw new r("Assertion failed: current must be a Property Descriptor, or undefined");if(void 0===m)return!!n&&("Undefined"===g||(l(h)?o(u,p,s,e,t,h):o(u,p,s,e,t,{"[[Configurable]]":!!h["[[Configurable]]"],"[[Enumerable]]":!!h["[[Enumerable]]"],"[[Value]]":h["[[Value]]"],"[[Writable]]":!!h["[[Writable]]"]})));if(!a({IsAccessorDescriptor:l,IsDataDescriptor:u},m))throw new r("`current`, when present, must be a fully populated and valid Property Descriptor");if(!m["[[Configurable]]"]){if("[[Configurable]]"in h&&h["[[Configurable]]"])return!1;if("[[Enumerable]]"in h&&!p(h["[[Enumerable]]"],m["[[Enumerable]]"]))return!1;if(!c(h)&&!p(l(h),l(m)))return!1;if(l(m)){if("[[Get]]"in h&&!p(h["[[Get]]"],m["[[Get]]"]))return!1;if("[[Set]]"in h&&!p(h["[[Set]]"],m["[[Set]]"]))return!1}else if(!m["[[Writable]]"]){if("[[Writable]]"in h&&h["[[Writable]]"])return!1;if("[[Value]]"in h&&!p(h["[[Value]]"],m["[[Value]]"]))return!1}}return"Undefined"===g||(u(m)&&l(h)?(E=("[[Configurable]]"in h?h:m)["[[Configurable]]"],T=("[[Enumerable]]"in h?h:m)["[[Enumerable]]"],o(u,p,s,e,t,{"[[Configurable]]":!!E,"[[Enumerable]]":!!T,"[[Get]]":("[[Get]]"in h?h:m)["[[Get]]"],"[[Set]]":("[[Set]]"in h?h:m)["[[Set]]"]})):l(m)&&u(h)?(E=("[[Configurable]]"in h?h:m)["[[Configurable]]"],T=("[[Enumerable]]"in h?h:m)["[[Enumerable]]"],o(u,p,s,e,t,{"[[Configurable]]":!!E,"[[Enumerable]]":!!T,"[[Value]]":("[[Value]]"in h?h:m)["[[Value]]"],"[[Writable]]":!!("[[Writable]]"in h?h:m)["[[Writable]]"]})):o(u,p,s,e,t,h))}},8091:e=>{"use strict";var t=Math.floor;e.exports=function(e){return"bigint"==typeof e?e:t(e)}},6967:(e,t,n)=>{"use strict";var r=n(8091),o=n(9675);e.exports=function(e){if("number"!=typeof e&&"bigint"!=typeof e)throw new o("argument must be a Number or a BigInt");var t=e<0?-r(-e):r(e);return 0===t?0:t}},2713:(e,t,n)=>{"use strict";var r=n(453),o=r("%Array.prototype%"),a=n(9290),i=n(8068),s=n(9675),l=n(1087),u=Math.pow(2,32)-1,c=n(24)(),f=r("%Object.setPrototypeOf%",!0)||(c?function(e,t){return e.__proto__=t,e}:null);e.exports=function(e){if(!l(e)||e<0)throw new s("Assertion failed: `length` must be an integer Number >= 0");if(e>u)throw new a("length is greater than (2**32 - 1)");var t=arguments.length>1?arguments[1]:o,n=[];if(t!==o){if(!f)throw new i("ArrayCreate: a `proto` argument that is not `Array.prototype` is not supported in an environment that does not support setting the [[Prototype]]");f(n,t)}return 0!==e&&(n.length=e),n}},3067:(e,t,n)=>{"use strict";var r=n(453)("%Symbol.species%",!0),o=n(9675),a=n(2713),i=n(280),s=n(533),l=n(4528),u=n(7730),c=n(1087);e.exports=function(e,t){if(!c(t)||t<0)throw new o("Assertion failed: length must be an integer >= 0");if(!s(e))return a(t);var n=i(e,"constructor");if(r&&"Object"===u(n)&&null===(n=i(n,r))&&(n=void 0),void 0===n)return a(t);if(!l(n))throw new o("C must be a constructor");return new n(t)}},8246:(e,t,n)=>{"use strict";var r=n(453),o=n(8075),a=n(9675),i=n(533),s=r("%Reflect.apply%",!0)||o("Function.prototype.apply");e.exports=function(e,t){var n=arguments.length>2?arguments[2]:[];if(!i(n))throw new a("Assertion failed: optional `argumentsList`, if provided, must be a List");return s(e,t,n)}},547:(e,t,n)=>{"use strict";var r=n(9675),o=n(3400),a=n(8798),i=n(7730);e.exports=function(e,t,n){if("Object"!==i(e))throw new r("Assertion failed: Type(O) is not Object");if(!o(t))throw new r("Assertion failed: IsPropertyKey(P) is not true");return a(e,t,{"[[Configurable]]":!0,"[[Enumerable]]":!0,"[[Value]]":n,"[[Writable]]":!0})}},7976:(e,t,n)=>{"use strict";var r=n(9675),o=n(547),a=n(3400),i=n(7730);e.exports=function(e,t,n){if("Object"!==i(e))throw new r("Assertion failed: Type(O) is not Object");if(!a(t))throw new r("Assertion failed: IsPropertyKey(P) is not true");if(!o(e,t,n))throw new r("unable to create data property")}},893:(e,t,n)=>{"use strict";var r=n(9675),o=n(5701),a=n(4769),i=n(7030),s=n(8131),l=n(3400),u=n(2875),c=n(259),f=n(7730);e.exports=function(e,t,n){if("Object"!==f(e))throw new r("Assertion failed: Type(O) is not Object");if(!l(t))throw new r("Assertion failed: IsPropertyKey(P) is not true");var p=o(n)?n:c(n);if(!o(p))throw new r("Assertion failed: Desc is not a valid Property Descriptor");return a(s,u,i,e,t,p)}},7030:(e,t,n)=>{"use strict";var r=n(9675),o=n(5701),a=n(2997);e.exports=function(e){if(void 0!==e&&!o(e))throw new r("Assertion failed: `Desc` must be a Property Descriptor");return a(e)}},280:(e,t,n)=>{"use strict";var r=n(9675),o=n(8859),a=n(3400),i=n(7730);e.exports=function(e,t){if("Object"!==i(e))throw new r("Assertion failed: Type(O) is not Object");if(!a(t))throw new r("Assertion failed: IsPropertyKey(P) is not true, got "+o(t));return e[t]}},7521:(e,t,n)=>{"use strict";var r=n(9675),o=n(3400),a=n(7730);e.exports=function(e,t){if("Object"!==a(e))throw new r("Assertion failed: `O` must be an Object");if(!o(t))throw new r("Assertion failed: `P` must be a Property Key");return t in e}},5520:(e,t,n)=>{"use strict";var r=n(9675),o=n(9957),a=n(5701);e.exports=function(e){if(void 0===e)return!1;if(!a(e))throw new r("Assertion failed: `Desc` must be a Property Descriptor");return!(!o(e,"[[Get]]")&&!o(e,"[[Set]]"))}},533:(e,t,n)=>{"use strict";e.exports=n(1412)},6966:(e,t,n)=>{"use strict";e.exports=n(9600)},4528:(e,t,n)=>{"use strict";var r=n(1376)("%Reflect.construct%",!0),o=n(893);try{o({},"",{"[[Get]]":function(){}})}catch(e){o=null}if(o&&r){var a={},i={};o(i,"length",{"[[Get]]":function(){throw a},"[[Enumerable]]":!0}),e.exports=function(e){try{r(e,i)}catch(e){return e===a}}}else e.exports=function(e){return"function"==typeof e&&!!e.prototype}},8131:(e,t,n)=>{"use strict";var r=n(9675),o=n(9957),a=n(5701);e.exports=function(e){if(void 0===e)return!1;if(!a(e))throw new r("Assertion failed: `Desc` must be a Property Descriptor");return!(!o(e,"[[Value]]")&&!o(e,"[[Writable]]"))}},4820:(e,t,n)=>{"use strict";var r=n(453),o=r("%Object.preventExtensions%",!0),a=r("%Object.isExtensible%",!0),i=n(6600);e.exports=o?function(e){return!i(e)&&a(e)}:function(e){return!i(e)}},8608:(e,t,n)=>{"use strict";var r=n(9675),o=n(5520),a=n(8131),i=n(5701);e.exports=function(e){if(void 0===e)return!1;if(!i(e))throw new r("Assertion failed: `Desc` must be a Property Descriptor");return!o(e)&&!a(e)}},3400:e=>{"use strict";e.exports=function(e){return"string"==typeof e||"symbol"==typeof e}},1429:(e,t,n)=>{"use strict";var r=n(9675),o=n(280),a=n(5035),i=n(7730);e.exports=function(e){if("Object"!==i(e))throw new r("Assertion failed: `obj` must be an Object");return a(o(e,"length"))}},8798:(e,t,n)=>{"use strict";var r=n(5795),o=n(8068),a=n(9675),i=n(5701),s=n(5520),l=n(4820),u=n(3400),c=n(259),f=n(2875),p=n(7730),d=n(6751);e.exports=function(e,t,n){if("Object"!==p(e))throw new a("Assertion failed: O must be an Object");if(!u(t))throw new a("Assertion failed: P must be a Property Key");if(!i(n))throw new a("Assertion failed: Desc must be a Property Descriptor");if(!r){if(s(n))throw new o("This environment does not support accessor property descriptors.");var h=!(t in e)&&n["[[Writable]]"]&&n["[[Enumerable]]"]&&n["[[Configurable]]"]&&"[[Value]]"in n,m=t in e&&(!("[[Configurable]]"in n)||n["[[Configurable]]"])&&(!("[[Enumerable]]"in n)||n["[[Enumerable]]"])&&(!("[[Writable]]"in n)||n["[[Writable]]"])&&"[[Value]]"in n;if(h||m)return e[t]=n["[[Value]]"],f(e[t],n["[[Value]]"]);throw new o("This environment does not support defining non-writable, non-enumerable, or non-configurable properties")}var E=r(e,t),T=E&&c(E),g=l(e);return d(e,t,g,n,T)}},2875:(e,t,n)=>{"use strict";var r=n(8756);e.exports=function(e,t){return e===t?0!==e||1/e==1/t:r(e)&&r(t)}},8679:(e,t,n)=>{"use strict";var r=n(453),o=r("%Number%"),a=r("%RegExp%"),i=n(9675),s=r("%parseInt%"),l=n(8075),u=n(9721),c=l("String.prototype.slice"),f=u(/^0b[01]+$/i),p=u(/^0o[0-7]+$/i),d=u(/^[-+]0x[0-9a-f]+$/i),h=u(new a("["+["","​","￾"].join("")+"]","g")),m=n(214);e.exports=function e(t){if("string"!=typeof t)throw new i("Assertion failed: `argument` is not a String");if(f(t))return o(s(c(t,2),2));if(p(t))return o(s(c(t,2),8));if(h(t)||d(t))return NaN;var n=m(t);return n!==t?e(n):o(t)}},4323:e=>{"use strict";e.exports=function(e){return!!e}},7196:(e,t,n)=>{"use strict";var r=n(8410),o=n(3384),a=n(8756),i=n(5046);e.exports=function(e){var t=r(e);return a(t)||0===t?0:i(t)?o(t):t}},5035:(e,t,n)=>{"use strict";var r=n(7050),o=n(7196);e.exports=function(e){var t=o(e);return t<=0?0:t>r?r:t}},8410:(e,t,n)=>{"use strict";var r=n(453),o=n(9675),a=r("%Number%"),i=n(6600),s=n(866),l=n(8679);e.exports=function(e){var t=i(e)?e:s(e,a);if("symbol"==typeof t)throw new o("Cannot convert a Symbol value to a number");if("bigint"==typeof t)throw new o("Conversion from 'BigInt' to 'number' is not allowed.");return"string"==typeof t?l(t):a(t)}},866:(e,t,n)=>{"use strict";var r=n(5437);e.exports=function(e){return arguments.length>1?r(e,arguments[1]):r(e)}},259:(e,t,n)=>{"use strict";var r=n(9957),o=n(9675),a=n(7730),i=n(4323),s=n(6966);e.exports=function(e){if("Object"!==a(e))throw new o("ToPropertyDescriptor requires an object");var t={};if(r(e,"enumerable")&&(t["[[Enumerable]]"]=i(e.enumerable)),r(e,"configurable")&&(t["[[Configurable]]"]=i(e.configurable)),r(e,"value")&&(t["[[Value]]"]=e.value),r(e,"writable")&&(t["[[Writable]]"]=i(e.writable)),r(e,"get")){var n=e.get;if(void 0!==n&&!s(n))throw new o("getter must be a function");t["[[Get]]"]=n}if(r(e,"set")){var l=e.set;if(void 0!==l&&!s(l))throw new o("setter must be a function");t["[[Set]]"]=l}if((r(t,"[[Get]]")||r(t,"[[Set]]"))&&(r(t,"[[Value]]")||r(t,"[[Writable]]")))throw new o("Invalid property descriptor. Cannot both specify accessors and a value or writable attribute");return t}},4810:(e,t,n)=>{"use strict";var r=n(453)("%String%"),o=n(9675);e.exports=function(e){if("symbol"==typeof e)throw new o("Cannot convert a Symbol value to a string");return r(e)}},7730:(e,t,n)=>{"use strict";var r=n(2439);e.exports=function(e){return"symbol"==typeof e?"Symbol":"bigint"==typeof e?"BigInt":r(e)}},6751:(e,t,n)=>{"use strict";var r=n(9675),o=n(4769),a=n(8143),i=n(5701),s=n(7030),l=n(5520),u=n(8131),c=n(8608),f=n(3400),p=n(2875),d=n(7730);e.exports=function(e,t,n,h,m){var E,T,g=d(e);if("Undefined"!==g&&"Object"!==g)throw new r("Assertion failed: O must be undefined or an Object");if(!f(t))throw new r("Assertion failed: P must be a Property Key");if("boolean"!=typeof n)throw new r("Assertion failed: extensible must be a Boolean");if(!i(h))throw new r("Assertion failed: Desc must be a Property Descriptor");if(void 0!==m&&!i(m))throw new r("Assertion failed: current must be a Property Descriptor, or undefined");if(void 0===m)return!!n&&("Undefined"===g||(l(h)?o(u,p,s,e,t,h):o(u,p,s,e,t,{"[[Configurable]]":!!h["[[Configurable]]"],"[[Enumerable]]":!!h["[[Enumerable]]"],"[[Value]]":h["[[Value]]"],"[[Writable]]":!!h["[[Writable]]"]})));if(!a({IsAccessorDescriptor:l,IsDataDescriptor:u},m))throw new r("`current`, when present, must be a fully populated and valid Property Descriptor");if(!m["[[Configurable]]"]){if("[[Configurable]]"in h&&h["[[Configurable]]"])return!1;if("[[Enumerable]]"in h&&!p(h["[[Enumerable]]"],m["[[Enumerable]]"]))return!1;if(!c(h)&&!p(l(h),l(m)))return!1;if(l(m)){if("[[Get]]"in h&&!p(h["[[Get]]"],m["[[Get]]"]))return!1;if("[[Set]]"in h&&!p(h["[[Set]]"],m["[[Set]]"]))return!1}else if(!m["[[Writable]]"]){if("[[Writable]]"in h&&h["[[Writable]]"])return!1;if("[[Value]]"in h&&!p(h["[[Value]]"],m["[[Value]]"]))return!1}}return"Undefined"===g||(u(m)&&l(h)?(E=("[[Configurable]]"in h?h:m)["[[Configurable]]"],T=("[[Enumerable]]"in h?h:m)["[[Enumerable]]"],o(u,p,s,e,t,{"[[Configurable]]":!!E,"[[Enumerable]]":!!T,"[[Get]]":("[[Get]]"in h?h:m)["[[Get]]"],"[[Set]]":("[[Set]]"in h?h:m)["[[Set]]"]})):l(m)&&u(h)?(E=("[[Configurable]]"in h?h:m)["[[Configurable]]"],T=("[[Enumerable]]"in h?h:m)["[[Enumerable]]"],o(u,p,s,e,t,{"[[Configurable]]":!!E,"[[Enumerable]]":!!T,"[[Value]]":("[[Value]]"in h?h:m)["[[Value]]"],"[[Writable]]":!!("[[Writable]]"in h?h:m)["[[Writable]]"]})):o(u,p,s,e,t,h))}},5986:e=>{"use strict";var t=Math.floor;e.exports=function(e){return"bigint"==typeof e?e:t(e)}},3384:(e,t,n)=>{"use strict";var r=n(5986),o=n(9675);e.exports=function(e){if("number"!=typeof e&&"bigint"!=typeof e)throw new o("argument must be a Number or a BigInt");var t=e<0?-r(-e):r(e);return 0===t?0:t}},2439:e=>{"use strict";e.exports=function(e){return null===e?"Null":void 0===e?"Undefined":"function"==typeof e||"object"==typeof e?"Object":"number"==typeof e?"Number":"boolean"==typeof e?"Boolean":"string"==typeof e?"String":void 0}},1376:(e,t,n)=>{"use strict";e.exports=n(453)},4769:(e,t,n)=>{"use strict";var r=n(592),o=n(655),a=r.hasArrayLengthDefineBug(),i=a&&n(1412),s=n(8075)("Object.prototype.propertyIsEnumerable");e.exports=function(e,t,n,r,l,u){if(!o){if(!e(u))return!1;if(!u["[[Configurable]]"]||!u["[[Writable]]"])return!1;if(l in r&&s(r,l)!==!!u["[[Enumerable]]"])return!1;var c=u["[[Value]]"];return r[l]=c,t(r[l],c)}return a&&"length"===l&&"[[Value]]"in u&&i(r)&&r.length!==u["[[Value]]"]?(r.length=u["[[Value]]"],r.length===u["[[Value]]"]):(o(r,l,n(u)),!0)}},1412:(e,t,n)=>{"use strict";var r=n(453)("%Array%"),o=!r.isArray&&n(8075)("Object.prototype.toString");e.exports=r.isArray||function(e){return"[object Array]"===o(e)}},2997:e=>{"use strict";e.exports=function(e){if(void 0===e)return e;var t={};return"[[Value]]"in e&&(t.value=e["[[Value]]"]),"[[Writable]]"in e&&(t.writable=!!e["[[Writable]]"]),"[[Get]]"in e&&(t.get=e["[[Get]]"]),"[[Set]]"in e&&(t.set=e["[[Set]]"]),"[[Enumerable]]"in e&&(t.enumerable=!!e["[[Enumerable]]"]),"[[Configurable]]"in e&&(t.configurable=!!e["[[Configurable]]"]),t}},5046:(e,t,n)=>{"use strict";var r=n(8756);e.exports=function(e){return("number"==typeof e||"bigint"==typeof e)&&!r(e)&&e!==1/0&&e!==-1/0}},8143:(e,t,n)=>{"use strict";var r=n(5701);e.exports=function(e,t){return r(t)&&"object"==typeof t&&"[[Enumerable]]"in t&&"[[Configurable]]"in t&&(e.IsAccessorDescriptor(t)||e.IsDataDescriptor(t))}},1087:(e,t,n)=>{"use strict";var r=n(453),o=r("%Math.abs%"),a=r("%Math.floor%"),i=n(8756),s=n(5046);e.exports=function(e){if("number"!=typeof e||i(e)||!s(e))return!1;var t=o(e);return a(t)===t}},8756:e=>{"use strict";e.exports=Number.isNaN||function(e){return e!=e}},6600:e=>{"use strict";e.exports=function(e){return null===e||"function"!=typeof e&&"object"!=typeof e}},7050:e=>{"use strict";e.exports=Number.MAX_SAFE_INTEGER||9007199254740991},5701:(e,t,n)=>{"use strict";var r=n(9675),o=n(9957),a={__proto__:null,"[[Configurable]]":!0,"[[Enumerable]]":!0,"[[Get]]":!0,"[[Set]]":!0,"[[Value]]":!0,"[[Writable]]":!0};e.exports=function(e){if(!e||"object"!=typeof e)return!1;for(var t in e)if(o(e,t)&&!a[t])return!1;var n=o(e,"[[Value]]")||o(e,"[[Writable]]"),i=o(e,"[[Get]]")||o(e,"[[Set]]");if(n&&i)throw new r("Property Descriptors may not be both accessor and data descriptors");return!0}},2794:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.adapter=t.serializeDoctypeContent=void 0;const r=n(2884),o=n(1141);function a(e){return new o.Text(e)}function i(e){const t=e.includes('"')?"'":'"';return t+e+t}function s(e,t,n){let r="!DOCTYPE ";return e&&(r+=e),t?r+=` PUBLIC ${i(t)}`:n&&(r+=" SYSTEM"),n&&(r+=` ${i(n)}`),r}t.serializeDoctypeContent=s,t.adapter={isCommentNode:o.isComment,isElementNode:o.isTag,isTextNode:o.isText,createDocument(){const e=new o.Document([]);return e["x-mode"]=r.html.DOCUMENT_MODE.NO_QUIRKS,e},createDocumentFragment:()=>new o.Document([]),createElement(e,t,n){const r=Object.create(null),a=Object.create(null),i=Object.create(null);for(let e=0;e<n.length;e++){const t=n[e].name;r[t]=n[e].value,a[t]=n[e].namespace,i[t]=n[e].prefix}const s=new o.Element(e,r,[]);return s.namespace=t,s["x-attribsNamespace"]=a,s["x-attribsPrefix"]=i,s},createCommentNode:e=>new o.Comment(e),appendChild(e,t){const n=e.children[e.children.length-1];n&&(n.next=t,t.prev=n),e.children.push(t),t.parent=e},insertBefore(e,t,n){const r=e.children.indexOf(n),{prev:o}=n;o&&(o.next=t,t.prev=o),n.prev=t,t.next=n,e.children.splice(r,0,t),t.parent=e},setTemplateContent(e,n){t.adapter.appendChild(e,n)},getTemplateContent:e=>e.children[0],setDocumentType(e,n,r,a){const i=s(n,r,a);let l=e.children.find((e=>(0,o.isDirective)(e)&&"!doctype"===e.name));l?l.data=null!=i?i:null:(l=new o.ProcessingInstruction("!doctype",i),t.adapter.appendChild(e,l)),l["x-name"]=null!=n?n:void 0,l["x-publicId"]=null!=r?r:void 0,l["x-systemId"]=null!=a?a:void 0},setDocumentMode(e,t){e["x-mode"]=t},getDocumentMode:e=>e["x-mode"],detachNode(e){if(e.parent){const t=e.parent.children.indexOf(e),{prev:n,next:r}=e;e.prev=null,e.next=null,n&&(n.next=r),r&&(r.prev=n),e.parent.children.splice(t,1),e.parent=null}},insertText(e,n){const r=e.children[e.children.length-1];r&&(0,o.isText)(r)?r.data+=n:t.adapter.appendChild(e,a(n))},insertTextBefore(e,n,r){const i=e.children[e.children.indexOf(r)-1];i&&(0,o.isText)(i)?i.data+=n:t.adapter.insertBefore(e,a(n),r)},adoptAttributes(e,t){for(let n=0;n<t.length;n++){const r=t[n].name;void 0===e.attribs[r]&&(e.attribs[r]=t[n].value,e["x-attribsNamespace"][r]=t[n].namespace,e["x-attribsPrefix"][r]=t[n].prefix)}},getFirstChild:e=>e.children[0],getChildNodes:e=>e.children,getParentNode:e=>e.parent,getAttrList:e=>e.attributes,getTagName:e=>e.name,getNamespaceURI:e=>e.namespace,getTextNodeContent:e=>e.data,getCommentNodeContent:e=>e.data,getDocumentTypeNodeName(e){var t;return null!==(t=e["x-name"])&&void 0!==t?t:""},getDocumentTypeNodePublicId(e){var t;return null!==(t=e["x-publicId"])&&void 0!==t?t:""},getDocumentTypeNodeSystemId(e){var t;return null!==(t=e["x-systemId"])&&void 0!==t?t:""},isDocumentTypeNode:e=>(0,o.isDirective)(e)&&"!doctype"===e.name,setNodeSourceCodeLocation(e,t){t&&(e.startIndex=t.startOffset,e.endIndex=t.endOffset),e.sourceCodeLocation=t},getNodeSourceCodeLocation:e=>e.sourceCodeLocation,updateNodeSourceCodeLocation(e,t){null!=t.endOffset&&(e.endIndex=t.endOffset),e.sourceCodeLocation=Object.assign(Object.assign({},e.sourceCodeLocation),t)}}},4766:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getDocumentMode=t.isConforming=void 0;const r=n(2287),o="html",a=["+//silmaril//dtd html pro v0r11 19970101//","-//as//dtd html 3.0 aswedit + extensions//","-//advasoft ltd//dtd html 3.0 aswedit + extensions//","-//ietf//dtd html 2.0 level 1//","-//ietf//dtd html 2.0 level 2//","-//ietf//dtd html 2.0 strict level 1//","-//ietf//dtd html 2.0 strict level 2//","-//ietf//dtd html 2.0 strict//","-//ietf//dtd html 2.0//","-//ietf//dtd html 2.1e//","-//ietf//dtd html 3.0//","-//ietf//dtd html 3.2 final//","-//ietf//dtd html 3.2//","-//ietf//dtd html 3//","-//ietf//dtd html level 0//","-//ietf//dtd html level 1//","-//ietf//dtd html level 2//","-//ietf//dtd html level 3//","-//ietf//dtd html strict level 0//","-//ietf//dtd html strict level 1//","-//ietf//dtd html strict level 2//","-//ietf//dtd html strict level 3//","-//ietf//dtd html strict//","-//ietf//dtd html//","-//metrius//dtd metrius presentational//","-//microsoft//dtd internet explorer 2.0 html strict//","-//microsoft//dtd internet explorer 2.0 html//","-//microsoft//dtd internet explorer 2.0 tables//","-//microsoft//dtd internet explorer 3.0 html strict//","-//microsoft//dtd internet explorer 3.0 html//","-//microsoft//dtd internet explorer 3.0 tables//","-//netscape comm. corp.//dtd html//","-//netscape comm. corp.//dtd strict html//","-//o'reilly and associates//dtd html 2.0//","-//o'reilly and associates//dtd html extended 1.0//","-//o'reilly and associates//dtd html extended relaxed 1.0//","-//sq//dtd html 2.0 hotmetal + extensions//","-//softquad software//dtd hotmetal pro 6.0::19990601::extensions to html 4.0//","-//softquad//dtd hotmetal pro 4.0::19971010::extensions to html 4.0//","-//spyglass//dtd html 2.0 extended//","-//sun microsystems corp.//dtd hotjava html//","-//sun microsystems corp.//dtd hotjava strict html//","-//w3c//dtd html 3 1995-03-24//","-//w3c//dtd html 3.2 draft//","-//w3c//dtd html 3.2 final//","-//w3c//dtd html 3.2//","-//w3c//dtd html 3.2s draft//","-//w3c//dtd html 4.0 frameset//","-//w3c//dtd html 4.0 transitional//","-//w3c//dtd html experimental 19960712//","-//w3c//dtd html experimental 970421//","-//w3c//dtd w3 html//","-//w3o//dtd w3 html 3.0//","-//webtechs//dtd mozilla html 2.0//","-//webtechs//dtd mozilla html//"],i=[...a,"-//w3c//dtd html 4.01 frameset//","-//w3c//dtd html 4.01 transitional//"],s=new Set(["-//w3o//dtd w3 html strict 3.0//en//","-/w3c/dtd html 4.0 transitional/en","html"]),l=["-//w3c//dtd xhtml 1.0 frameset//","-//w3c//dtd xhtml 1.0 transitional//"],u=[...l,"-//w3c//dtd html 4.01 frameset//","-//w3c//dtd html 4.01 transitional//"];function c(e,t){return t.some((t=>e.startsWith(t)))}t.isConforming=function(e){return e.name===o&&null===e.publicId&&(null===e.systemId||"about:legacy-compat"===e.systemId)},t.getDocumentMode=function(e){if(e.name!==o)return r.DOCUMENT_MODE.QUIRKS;const{systemId:t}=e;if(t&&"http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd"===t.toLowerCase())return r.DOCUMENT_MODE.QUIRKS;let{publicId:n}=e;if(null!==n){if(n=n.toLowerCase(),s.has(n))return r.DOCUMENT_MODE.QUIRKS;let e=null===t?i:a;if(c(n,e))return r.DOCUMENT_MODE.QUIRKS;if(e=null===t?l:u,c(n,e))return r.DOCUMENT_MODE.LIMITED_QUIRKS}return r.DOCUMENT_MODE.NO_QUIRKS}},9425:(e,t)=>{"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0}),t.ERR=void 0,(n=t.ERR||(t.ERR={})).controlCharacterInInputStream="control-character-in-input-stream",n.noncharacterInInputStream="noncharacter-in-input-stream",n.surrogateInInputStream="surrogate-in-input-stream",n.nonVoidHtmlElementStartTagWithTrailingSolidus="non-void-html-element-start-tag-with-trailing-solidus",n.endTagWithAttributes="end-tag-with-attributes",n.endTagWithTrailingSolidus="end-tag-with-trailing-solidus",n.unexpectedSolidusInTag="unexpected-solidus-in-tag",n.unexpectedNullCharacter="unexpected-null-character",n.unexpectedQuestionMarkInsteadOfTagName="unexpected-question-mark-instead-of-tag-name",n.invalidFirstCharacterOfTagName="invalid-first-character-of-tag-name",n.unexpectedEqualsSignBeforeAttributeName="unexpected-equals-sign-before-attribute-name",n.missingEndTagName="missing-end-tag-name",n.unexpectedCharacterInAttributeName="unexpected-character-in-attribute-name",n.unknownNamedCharacterReference="unknown-named-character-reference",n.missingSemicolonAfterCharacterReference="missing-semicolon-after-character-reference",n.unexpectedCharacterAfterDoctypeSystemIdentifier="unexpected-character-after-doctype-system-identifier",n.unexpectedCharacterInUnquotedAttributeValue="unexpected-character-in-unquoted-attribute-value",n.eofBeforeTagName="eof-before-tag-name",n.eofInTag="eof-in-tag",n.missingAttributeValue="missing-attribute-value",n.missingWhitespaceBetweenAttributes="missing-whitespace-between-attributes",n.missingWhitespaceAfterDoctypePublicKeyword="missing-whitespace-after-doctype-public-keyword",n.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers="missing-whitespace-between-doctype-public-and-system-identifiers",n.missingWhitespaceAfterDoctypeSystemKeyword="missing-whitespace-after-doctype-system-keyword",n.missingQuoteBeforeDoctypePublicIdentifier="missing-quote-before-doctype-public-identifier",n.missingQuoteBeforeDoctypeSystemIdentifier="missing-quote-before-doctype-system-identifier",n.missingDoctypePublicIdentifier="missing-doctype-public-identifier",n.missingDoctypeSystemIdentifier="missing-doctype-system-identifier",n.abruptDoctypePublicIdentifier="abrupt-doctype-public-identifier",n.abruptDoctypeSystemIdentifier="abrupt-doctype-system-identifier",n.cdataInHtmlContent="cdata-in-html-content",n.incorrectlyOpenedComment="incorrectly-opened-comment",n.eofInScriptHtmlCommentLikeText="eof-in-script-html-comment-like-text",n.eofInDoctype="eof-in-doctype",n.nestedComment="nested-comment",n.abruptClosingOfEmptyComment="abrupt-closing-of-empty-comment",n.eofInComment="eof-in-comment",n.incorrectlyClosedComment="incorrectly-closed-comment",n.eofInCdata="eof-in-cdata",n.absenceOfDigitsInNumericCharacterReference="absence-of-digits-in-numeric-character-reference",n.nullCharacterReference="null-character-reference",n.surrogateCharacterReference="surrogate-character-reference",n.characterReferenceOutsideUnicodeRange="character-reference-outside-unicode-range",n.controlCharacterReference="control-character-reference",n.noncharacterCharacterReference="noncharacter-character-reference",n.missingWhitespaceBeforeDoctypeName="missing-whitespace-before-doctype-name",n.missingDoctypeName="missing-doctype-name",n.invalidCharacterSequenceAfterDoctypeName="invalid-character-sequence-after-doctype-name",n.duplicateAttribute="duplicate-attribute",n.nonConformingDoctype="non-conforming-doctype",n.missingDoctype="missing-doctype",n.misplacedDoctype="misplaced-doctype",n.endTagWithoutMatchingOpenElement="end-tag-without-matching-open-element",n.closingOfElementWithOpenChildElements="closing-of-element-with-open-child-elements",n.disallowedContentInNoscriptInHead="disallowed-content-in-noscript-in-head",n.openElementsLeftAfterEof="open-elements-left-after-eof",n.abandonedHeadElementChild="abandoned-head-element-child",n.misplacedStartTagForHeadElement="misplaced-start-tag-for-head-element",n.nestedNoscriptInHead="nested-noscript-in-head",n.eofInElementThatCanContainOnlyText="eof-in-element-that-can-contain-only-text"},3368:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isIntegrationPoint=t.adjustTokenSVGTagName=t.adjustTokenXMLAttrs=t.adjustTokenSVGAttrs=t.adjustTokenMathMLAttrs=t.causesExit=t.SVG_TAG_NAMES_ADJUSTMENT_MAP=void 0;const r=n(2287),o="text/html",a="application/xhtml+xml",i=new Map(["attributeName","attributeType","baseFrequency","baseProfile","calcMode","clipPathUnits","diffuseConstant","edgeMode","filterUnits","glyphRef","gradientTransform","gradientUnits","kernelMatrix","kernelUnitLength","keyPoints","keySplines","keyTimes","lengthAdjust","limitingConeAngle","markerHeight","markerUnits","markerWidth","maskContentUnits","maskUnits","numOctaves","pathLength","patternContentUnits","patternTransform","patternUnits","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","refX","refY","repeatCount","repeatDur","requiredExtensions","requiredFeatures","specularConstant","specularExponent","spreadMethod","startOffset","stdDeviation","stitchTiles","surfaceScale","systemLanguage","tableValues","targetX","targetY","textLength","viewBox","viewTarget","xChannelSelector","yChannelSelector","zoomAndPan"].map((e=>[e.toLowerCase(),e]))),s=new Map([["xlink:actuate",{prefix:"xlink",name:"actuate",namespace:r.NS.XLINK}],["xlink:arcrole",{prefix:"xlink",name:"arcrole",namespace:r.NS.XLINK}],["xlink:href",{prefix:"xlink",name:"href",namespace:r.NS.XLINK}],["xlink:role",{prefix:"xlink",name:"role",namespace:r.NS.XLINK}],["xlink:show",{prefix:"xlink",name:"show",namespace:r.NS.XLINK}],["xlink:title",{prefix:"xlink",name:"title",namespace:r.NS.XLINK}],["xlink:type",{prefix:"xlink",name:"type",namespace:r.NS.XLINK}],["xml:base",{prefix:"xml",name:"base",namespace:r.NS.XML}],["xml:lang",{prefix:"xml",name:"lang",namespace:r.NS.XML}],["xml:space",{prefix:"xml",name:"space",namespace:r.NS.XML}],["xmlns",{prefix:"",name:"xmlns",namespace:r.NS.XMLNS}],["xmlns:xlink",{prefix:"xmlns",name:"xlink",namespace:r.NS.XMLNS}]]);t.SVG_TAG_NAMES_ADJUSTMENT_MAP=new Map(["altGlyph","altGlyphDef","altGlyphItem","animateColor","animateMotion","animateTransform","clipPath","feBlend","feColorMatrix","feComponentTransfer","feComposite","feConvolveMatrix","feDiffuseLighting","feDisplacementMap","feDistantLight","feFlood","feFuncA","feFuncB","feFuncG","feFuncR","feGaussianBlur","feImage","feMerge","feMergeNode","feMorphology","feOffset","fePointLight","feSpecularLighting","feSpotLight","feTile","feTurbulence","foreignObject","glyphRef","linearGradient","radialGradient","textPath"].map((e=>[e.toLowerCase(),e])));const l=new Set([r.TAG_ID.B,r.TAG_ID.BIG,r.TAG_ID.BLOCKQUOTE,r.TAG_ID.BODY,r.TAG_ID.BR,r.TAG_ID.CENTER,r.TAG_ID.CODE,r.TAG_ID.DD,r.TAG_ID.DIV,r.TAG_ID.DL,r.TAG_ID.DT,r.TAG_ID.EM,r.TAG_ID.EMBED,r.TAG_ID.H1,r.TAG_ID.H2,r.TAG_ID.H3,r.TAG_ID.H4,r.TAG_ID.H5,r.TAG_ID.H6,r.TAG_ID.HEAD,r.TAG_ID.HR,r.TAG_ID.I,r.TAG_ID.IMG,r.TAG_ID.LI,r.TAG_ID.LISTING,r.TAG_ID.MENU,r.TAG_ID.META,r.TAG_ID.NOBR,r.TAG_ID.OL,r.TAG_ID.P,r.TAG_ID.PRE,r.TAG_ID.RUBY,r.TAG_ID.S,r.TAG_ID.SMALL,r.TAG_ID.SPAN,r.TAG_ID.STRONG,r.TAG_ID.STRIKE,r.TAG_ID.SUB,r.TAG_ID.SUP,r.TAG_ID.TABLE,r.TAG_ID.TT,r.TAG_ID.U,r.TAG_ID.UL,r.TAG_ID.VAR]);t.causesExit=function(e){const t=e.tagID;return t===r.TAG_ID.FONT&&e.attrs.some((({name:e})=>e===r.ATTRS.COLOR||e===r.ATTRS.SIZE||e===r.ATTRS.FACE))||l.has(t)},t.adjustTokenMathMLAttrs=function(e){for(let t=0;t<e.attrs.length;t++)if("definitionurl"===e.attrs[t].name){e.attrs[t].name="definitionURL";break}},t.adjustTokenSVGAttrs=function(e){for(let t=0;t<e.attrs.length;t++){const n=i.get(e.attrs[t].name);null!=n&&(e.attrs[t].name=n)}},t.adjustTokenXMLAttrs=function(e){for(let t=0;t<e.attrs.length;t++){const n=s.get(e.attrs[t].name);n&&(e.attrs[t].prefix=n.prefix,e.attrs[t].name=n.name,e.attrs[t].namespace=n.namespace)}},t.adjustTokenSVGTagName=function(e){const n=t.SVG_TAG_NAMES_ADJUSTMENT_MAP.get(e.tagName);null!=n&&(e.tagName=n,e.tagID=(0,r.getTagID)(e.tagName))},t.isIntegrationPoint=function(e,t,n,i){return(!i||i===r.NS.HTML)&&function(e,t,n){if(t===r.NS.MATHML&&e===r.TAG_ID.ANNOTATION_XML)for(let e=0;e<n.length;e++)if(n[e].name===r.ATTRS.ENCODING){const t=n[e].value.toLowerCase();return t===o||t===a}return t===r.NS.SVG&&(e===r.TAG_ID.FOREIGN_OBJECT||e===r.TAG_ID.DESC||e===r.TAG_ID.TITLE)}(e,t,n)||(!i||i===r.NS.MATHML)&&function(e,t){return t===r.NS.MATHML&&(e===r.TAG_ID.MI||e===r.TAG_ID.MO||e===r.TAG_ID.MN||e===r.TAG_ID.MS||e===r.TAG_ID.MTEXT)}(e,t)}},2287:(e,t)=>{"use strict";var n,r,o,a,i;Object.defineProperty(t,"__esModule",{value:!0}),t.hasUnescapedText=t.isNumberedHeader=t.SPECIAL_ELEMENTS=t.getTagID=t.TAG_ID=t.TAG_NAMES=t.DOCUMENT_MODE=t.ATTRS=t.NS=void 0,function(e){e.HTML="http://www.w3.org/1999/xhtml",e.MATHML="http://www.w3.org/1998/Math/MathML",e.SVG="http://www.w3.org/2000/svg",e.XLINK="http://www.w3.org/1999/xlink",e.XML="http://www.w3.org/XML/1998/namespace",e.XMLNS="http://www.w3.org/2000/xmlns/"}(n=t.NS||(t.NS={})),(i=t.ATTRS||(t.ATTRS={})).TYPE="type",i.ACTION="action",i.ENCODING="encoding",i.PROMPT="prompt",i.NAME="name",i.COLOR="color",i.FACE="face",i.SIZE="size",(a=t.DOCUMENT_MODE||(t.DOCUMENT_MODE={})).NO_QUIRKS="no-quirks",a.QUIRKS="quirks",a.LIMITED_QUIRKS="limited-quirks",function(e){e.A="a",e.ADDRESS="address",e.ANNOTATION_XML="annotation-xml",e.APPLET="applet",e.AREA="area",e.ARTICLE="article",e.ASIDE="aside",e.B="b",e.BASE="base",e.BASEFONT="basefont",e.BGSOUND="bgsound",e.BIG="big",e.BLOCKQUOTE="blockquote",e.BODY="body",e.BR="br",e.BUTTON="button",e.CAPTION="caption",e.CENTER="center",e.CODE="code",e.COL="col",e.COLGROUP="colgroup",e.DD="dd",e.DESC="desc",e.DETAILS="details",e.DIALOG="dialog",e.DIR="dir",e.DIV="div",e.DL="dl",e.DT="dt",e.EM="em",e.EMBED="embed",e.FIELDSET="fieldset",e.FIGCAPTION="figcaption",e.FIGURE="figure",e.FONT="font",e.FOOTER="footer",e.FOREIGN_OBJECT="foreignObject",e.FORM="form",e.FRAME="frame",e.FRAMESET="frameset",e.H1="h1",e.H2="h2",e.H3="h3",e.H4="h4",e.H5="h5",e.H6="h6",e.HEAD="head",e.HEADER="header",e.HGROUP="hgroup",e.HR="hr",e.HTML="html",e.I="i",e.IMG="img",e.IMAGE="image",e.INPUT="input",e.IFRAME="iframe",e.KEYGEN="keygen",e.LABEL="label",e.LI="li",e.LINK="link",e.LISTING="listing",e.MAIN="main",e.MALIGNMARK="malignmark",e.MARQUEE="marquee",e.MATH="math",e.MENU="menu",e.META="meta",e.MGLYPH="mglyph",e.MI="mi",e.MO="mo",e.MN="mn",e.MS="ms",e.MTEXT="mtext",e.NAV="nav",e.NOBR="nobr",e.NOFRAMES="noframes",e.NOEMBED="noembed",e.NOSCRIPT="noscript",e.OBJECT="object",e.OL="ol",e.OPTGROUP="optgroup",e.OPTION="option",e.P="p",e.PARAM="param",e.PLAINTEXT="plaintext",e.PRE="pre",e.RB="rb",e.RP="rp",e.RT="rt",e.RTC="rtc",e.RUBY="ruby",e.S="s",e.SCRIPT="script",e.SECTION="section",e.SELECT="select",e.SOURCE="source",e.SMALL="small",e.SPAN="span",e.STRIKE="strike",e.STRONG="strong",e.STYLE="style",e.SUB="sub",e.SUMMARY="summary",e.SUP="sup",e.TABLE="table",e.TBODY="tbody",e.TEMPLATE="template",e.TEXTAREA="textarea",e.TFOOT="tfoot",e.TD="td",e.TH="th",e.THEAD="thead",e.TITLE="title",e.TR="tr",e.TRACK="track",e.TT="tt",e.U="u",e.UL="ul",e.SVG="svg",e.VAR="var",e.WBR="wbr",e.XMP="xmp"}(r=t.TAG_NAMES||(t.TAG_NAMES={})),function(e){e[e.UNKNOWN=0]="UNKNOWN",e[e.A=1]="A",e[e.ADDRESS=2]="ADDRESS",e[e.ANNOTATION_XML=3]="ANNOTATION_XML",e[e.APPLET=4]="APPLET",e[e.AREA=5]="AREA",e[e.ARTICLE=6]="ARTICLE",e[e.ASIDE=7]="ASIDE",e[e.B=8]="B",e[e.BASE=9]="BASE",e[e.BASEFONT=10]="BASEFONT",e[e.BGSOUND=11]="BGSOUND",e[e.BIG=12]="BIG",e[e.BLOCKQUOTE=13]="BLOCKQUOTE",e[e.BODY=14]="BODY",e[e.BR=15]="BR",e[e.BUTTON=16]="BUTTON",e[e.CAPTION=17]="CAPTION",e[e.CENTER=18]="CENTER",e[e.CODE=19]="CODE",e[e.COL=20]="COL",e[e.COLGROUP=21]="COLGROUP",e[e.DD=22]="DD",e[e.DESC=23]="DESC",e[e.DETAILS=24]="DETAILS",e[e.DIALOG=25]="DIALOG",e[e.DIR=26]="DIR",e[e.DIV=27]="DIV",e[e.DL=28]="DL",e[e.DT=29]="DT",e[e.EM=30]="EM",e[e.EMBED=31]="EMBED",e[e.FIELDSET=32]="FIELDSET",e[e.FIGCAPTION=33]="FIGCAPTION",e[e.FIGURE=34]="FIGURE",e[e.FONT=35]="FONT",e[e.FOOTER=36]="FOOTER",e[e.FOREIGN_OBJECT=37]="FOREIGN_OBJECT",e[e.FORM=38]="FORM",e[e.FRAME=39]="FRAME",e[e.FRAMESET=40]="FRAMESET",e[e.H1=41]="H1",e[e.H2=42]="H2",e[e.H3=43]="H3",e[e.H4=44]="H4",e[e.H5=45]="H5",e[e.H6=46]="H6",e[e.HEAD=47]="HEAD",e[e.HEADER=48]="HEADER",e[e.HGROUP=49]="HGROUP",e[e.HR=50]="HR",e[e.HTML=51]="HTML",e[e.I=52]="I",e[e.IMG=53]="IMG",e[e.IMAGE=54]="IMAGE",e[e.INPUT=55]="INPUT",e[e.IFRAME=56]="IFRAME",e[e.KEYGEN=57]="KEYGEN",e[e.LABEL=58]="LABEL",e[e.LI=59]="LI",e[e.LINK=60]="LINK",e[e.LISTING=61]="LISTING",e[e.MAIN=62]="MAIN",e[e.MALIGNMARK=63]="MALIGNMARK",e[e.MARQUEE=64]="MARQUEE",e[e.MATH=65]="MATH",e[e.MENU=66]="MENU",e[e.META=67]="META",e[e.MGLYPH=68]="MGLYPH",e[e.MI=69]="MI",e[e.MO=70]="MO",e[e.MN=71]="MN",e[e.MS=72]="MS",e[e.MTEXT=73]="MTEXT",e[e.NAV=74]="NAV",e[e.NOBR=75]="NOBR",e[e.NOFRAMES=76]="NOFRAMES",e[e.NOEMBED=77]="NOEMBED",e[e.NOSCRIPT=78]="NOSCRIPT",e[e.OBJECT=79]="OBJECT",e[e.OL=80]="OL",e[e.OPTGROUP=81]="OPTGROUP",e[e.OPTION=82]="OPTION",e[e.P=83]="P",e[e.PARAM=84]="PARAM",e[e.PLAINTEXT=85]="PLAINTEXT",e[e.PRE=86]="PRE",e[e.RB=87]="RB",e[e.RP=88]="RP",e[e.RT=89]="RT",e[e.RTC=90]="RTC",e[e.RUBY=91]="RUBY",e[e.S=92]="S",e[e.SCRIPT=93]="SCRIPT",e[e.SECTION=94]="SECTION",e[e.SELECT=95]="SELECT",e[e.SOURCE=96]="SOURCE",e[e.SMALL=97]="SMALL",e[e.SPAN=98]="SPAN",e[e.STRIKE=99]="STRIKE",e[e.STRONG=100]="STRONG",e[e.STYLE=101]="STYLE",e[e.SUB=102]="SUB",e[e.SUMMARY=103]="SUMMARY",e[e.SUP=104]="SUP",e[e.TABLE=105]="TABLE",e[e.TBODY=106]="TBODY",e[e.TEMPLATE=107]="TEMPLATE",e[e.TEXTAREA=108]="TEXTAREA",e[e.TFOOT=109]="TFOOT",e[e.TD=110]="TD",e[e.TH=111]="TH",e[e.THEAD=112]="THEAD",e[e.TITLE=113]="TITLE",e[e.TR=114]="TR",e[e.TRACK=115]="TRACK",e[e.TT=116]="TT",e[e.U=117]="U",e[e.UL=118]="UL",e[e.SVG=119]="SVG",e[e.VAR=120]="VAR",e[e.WBR=121]="WBR",e[e.XMP=122]="XMP"}(o=t.TAG_ID||(t.TAG_ID={}));const s=new Map([[r.A,o.A],[r.ADDRESS,o.ADDRESS],[r.ANNOTATION_XML,o.ANNOTATION_XML],[r.APPLET,o.APPLET],[r.AREA,o.AREA],[r.ARTICLE,o.ARTICLE],[r.ASIDE,o.ASIDE],[r.B,o.B],[r.BASE,o.BASE],[r.BASEFONT,o.BASEFONT],[r.BGSOUND,o.BGSOUND],[r.BIG,o.BIG],[r.BLOCKQUOTE,o.BLOCKQUOTE],[r.BODY,o.BODY],[r.BR,o.BR],[r.BUTTON,o.BUTTON],[r.CAPTION,o.CAPTION],[r.CENTER,o.CENTER],[r.CODE,o.CODE],[r.COL,o.COL],[r.COLGROUP,o.COLGROUP],[r.DD,o.DD],[r.DESC,o.DESC],[r.DETAILS,o.DETAILS],[r.DIALOG,o.DIALOG],[r.DIR,o.DIR],[r.DIV,o.DIV],[r.DL,o.DL],[r.DT,o.DT],[r.EM,o.EM],[r.EMBED,o.EMBED],[r.FIELDSET,o.FIELDSET],[r.FIGCAPTION,o.FIGCAPTION],[r.FIGURE,o.FIGURE],[r.FONT,o.FONT],[r.FOOTER,o.FOOTER],[r.FOREIGN_OBJECT,o.FOREIGN_OBJECT],[r.FORM,o.FORM],[r.FRAME,o.FRAME],[r.FRAMESET,o.FRAMESET],[r.H1,o.H1],[r.H2,o.H2],[r.H3,o.H3],[r.H4,o.H4],[r.H5,o.H5],[r.H6,o.H6],[r.HEAD,o.HEAD],[r.HEADER,o.HEADER],[r.HGROUP,o.HGROUP],[r.HR,o.HR],[r.HTML,o.HTML],[r.I,o.I],[r.IMG,o.IMG],[r.IMAGE,o.IMAGE],[r.INPUT,o.INPUT],[r.IFRAME,o.IFRAME],[r.KEYGEN,o.KEYGEN],[r.LABEL,o.LABEL],[r.LI,o.LI],[r.LINK,o.LINK],[r.LISTING,o.LISTING],[r.MAIN,o.MAIN],[r.MALIGNMARK,o.MALIGNMARK],[r.MARQUEE,o.MARQUEE],[r.MATH,o.MATH],[r.MENU,o.MENU],[r.META,o.META],[r.MGLYPH,o.MGLYPH],[r.MI,o.MI],[r.MO,o.MO],[r.MN,o.MN],[r.MS,o.MS],[r.MTEXT,o.MTEXT],[r.NAV,o.NAV],[r.NOBR,o.NOBR],[r.NOFRAMES,o.NOFRAMES],[r.NOEMBED,o.NOEMBED],[r.NOSCRIPT,o.NOSCRIPT],[r.OBJECT,o.OBJECT],[r.OL,o.OL],[r.OPTGROUP,o.OPTGROUP],[r.OPTION,o.OPTION],[r.P,o.P],[r.PARAM,o.PARAM],[r.PLAINTEXT,o.PLAINTEXT],[r.PRE,o.PRE],[r.RB,o.RB],[r.RP,o.RP],[r.RT,o.RT],[r.RTC,o.RTC],[r.RUBY,o.RUBY],[r.S,o.S],[r.SCRIPT,o.SCRIPT],[r.SECTION,o.SECTION],[r.SELECT,o.SELECT],[r.SOURCE,o.SOURCE],[r.SMALL,o.SMALL],[r.SPAN,o.SPAN],[r.STRIKE,o.STRIKE],[r.STRONG,o.STRONG],[r.STYLE,o.STYLE],[r.SUB,o.SUB],[r.SUMMARY,o.SUMMARY],[r.SUP,o.SUP],[r.TABLE,o.TABLE],[r.TBODY,o.TBODY],[r.TEMPLATE,o.TEMPLATE],[r.TEXTAREA,o.TEXTAREA],[r.TFOOT,o.TFOOT],[r.TD,o.TD],[r.TH,o.TH],[r.THEAD,o.THEAD],[r.TITLE,o.TITLE],[r.TR,o.TR],[r.TRACK,o.TRACK],[r.TT,o.TT],[r.U,o.U],[r.UL,o.UL],[r.SVG,o.SVG],[r.VAR,o.VAR],[r.WBR,o.WBR],[r.XMP,o.XMP]]);t.getTagID=function(e){var t;return null!==(t=s.get(e))&&void 0!==t?t:o.UNKNOWN};const l=o;t.SPECIAL_ELEMENTS={[n.HTML]:new Set([l.ADDRESS,l.APPLET,l.AREA,l.ARTICLE,l.ASIDE,l.BASE,l.BASEFONT,l.BGSOUND,l.BLOCKQUOTE,l.BODY,l.BR,l.BUTTON,l.CAPTION,l.CENTER,l.COL,l.COLGROUP,l.DD,l.DETAILS,l.DIR,l.DIV,l.DL,l.DT,l.EMBED,l.FIELDSET,l.FIGCAPTION,l.FIGURE,l.FOOTER,l.FORM,l.FRAME,l.FRAMESET,l.H1,l.H2,l.H3,l.H4,l.H5,l.H6,l.HEAD,l.HEADER,l.HGROUP,l.HR,l.HTML,l.IFRAME,l.IMG,l.INPUT,l.LI,l.LINK,l.LISTING,l.MAIN,l.MARQUEE,l.MENU,l.META,l.NAV,l.NOEMBED,l.NOFRAMES,l.NOSCRIPT,l.OBJECT,l.OL,l.P,l.PARAM,l.PLAINTEXT,l.PRE,l.SCRIPT,l.SECTION,l.SELECT,l.SOURCE,l.STYLE,l.SUMMARY,l.TABLE,l.TBODY,l.TD,l.TEMPLATE,l.TEXTAREA,l.TFOOT,l.TH,l.THEAD,l.TITLE,l.TR,l.TRACK,l.UL,l.WBR,l.XMP]),[n.MATHML]:new Set([l.MI,l.MO,l.MN,l.MS,l.MTEXT,l.ANNOTATION_XML]),[n.SVG]:new Set([l.TITLE,l.FOREIGN_OBJECT,l.DESC]),[n.XLINK]:new Set,[n.XML]:new Set,[n.XMLNS]:new Set},t.isNumberedHeader=function(e){return e===l.H1||e===l.H2||e===l.H3||e===l.H4||e===l.H5||e===l.H6};const u=new Set([r.STYLE,r.SCRIPT,r.XMP,r.IFRAME,r.NOEMBED,r.NOFRAMES,r.PLAINTEXT]);t.hasUnescapedText=function(e,t){return u.has(e)||t&&e===r.NOSCRIPT}},6389:(e,t)=>{"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0}),t.getTokenAttr=t.TokenType=void 0,(n=t.TokenType||(t.TokenType={}))[n.CHARACTER=0]="CHARACTER",n[n.NULL_CHARACTER=1]="NULL_CHARACTER",n[n.WHITESPACE_CHARACTER=2]="WHITESPACE_CHARACTER",n[n.START_TAG=3]="START_TAG",n[n.END_TAG=4]="END_TAG",n[n.COMMENT=5]="COMMENT",n[n.DOCTYPE=6]="DOCTYPE",n[n.EOF=7]="EOF",n[n.HIBERNATION=8]="HIBERNATION",t.getTokenAttr=function(e,t){for(let n=e.attrs.length-1;n>=0;n--)if(e.attrs[n].name===t)return e.attrs[n].value;return null}},791:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isUndefinedCodePoint=t.isControlCodePoint=t.getSurrogatePairCodePoint=t.isSurrogatePair=t.isSurrogate=t.SEQUENCES=t.CODE_POINTS=t.REPLACEMENT_CHARACTER=void 0;const n=new Set([65534,65535,131070,131071,196606,196607,262142,262143,327678,327679,393214,393215,458750,458751,524286,524287,589822,589823,655358,655359,720894,720895,786430,786431,851966,851967,917502,917503,983038,983039,1048574,1048575,1114110,1114111]);var r;t.REPLACEMENT_CHARACTER="�",(r=t.CODE_POINTS||(t.CODE_POINTS={}))[r.EOF=-1]="EOF",r[r.NULL=0]="NULL",r[r.TABULATION=9]="TABULATION",r[r.CARRIAGE_RETURN=13]="CARRIAGE_RETURN",r[r.LINE_FEED=10]="LINE_FEED",r[r.FORM_FEED=12]="FORM_FEED",r[r.SPACE=32]="SPACE",r[r.EXCLAMATION_MARK=33]="EXCLAMATION_MARK",r[r.QUOTATION_MARK=34]="QUOTATION_MARK",r[r.NUMBER_SIGN=35]="NUMBER_SIGN",r[r.AMPERSAND=38]="AMPERSAND",r[r.APOSTROPHE=39]="APOSTROPHE",r[r.HYPHEN_MINUS=45]="HYPHEN_MINUS",r[r.SOLIDUS=47]="SOLIDUS",r[r.DIGIT_0=48]="DIGIT_0",r[r.DIGIT_9=57]="DIGIT_9",r[r.SEMICOLON=59]="SEMICOLON",r[r.LESS_THAN_SIGN=60]="LESS_THAN_SIGN",r[r.EQUALS_SIGN=61]="EQUALS_SIGN",r[r.GREATER_THAN_SIGN=62]="GREATER_THAN_SIGN",r[r.QUESTION_MARK=63]="QUESTION_MARK",r[r.LATIN_CAPITAL_A=65]="LATIN_CAPITAL_A",r[r.LATIN_CAPITAL_F=70]="LATIN_CAPITAL_F",r[r.LATIN_CAPITAL_X=88]="LATIN_CAPITAL_X",r[r.LATIN_CAPITAL_Z=90]="LATIN_CAPITAL_Z",r[r.RIGHT_SQUARE_BRACKET=93]="RIGHT_SQUARE_BRACKET",r[r.GRAVE_ACCENT=96]="GRAVE_ACCENT",r[r.LATIN_SMALL_A=97]="LATIN_SMALL_A",r[r.LATIN_SMALL_F=102]="LATIN_SMALL_F",r[r.LATIN_SMALL_X=120]="LATIN_SMALL_X",r[r.LATIN_SMALL_Z=122]="LATIN_SMALL_Z",r[r.REPLACEMENT_CHARACTER=65533]="REPLACEMENT_CHARACTER",t.SEQUENCES={DASH_DASH:"--",CDATA_START:"[CDATA[",DOCTYPE:"doctype",SCRIPT:"script",PUBLIC:"public",SYSTEM:"system"},t.isSurrogate=function(e){return e>=55296&&e<=57343},t.isSurrogatePair=function(e){return e>=56320&&e<=57343},t.getSurrogatePairCodePoint=function(e,t){return 1024*(e-55296)+9216+t},t.isControlCodePoint=function(e){return 32!==e&&10!==e&&13!==e&&9!==e&&12!==e&&e>=1&&e<=31||e>=127&&e<=159},t.isUndefinedCodePoint=function(e){return e>=64976&&e<=65007||n.has(e)}},2884:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.parseFragment=t.parse=t.TokenizerMode=t.Tokenizer=t.Token=t.html=t.foreignContent=t.ErrorCodes=t.serializeOuter=t.serialize=t.Parser=t.defaultTreeAdapter=void 0;const r=n(3082);var o=n(4921);Object.defineProperty(t,"defaultTreeAdapter",{enumerable:!0,get:function(){return o.defaultTreeAdapter}});var a=n(3082);Object.defineProperty(t,"Parser",{enumerable:!0,get:function(){return a.Parser}});var i=n(661);Object.defineProperty(t,"serialize",{enumerable:!0,get:function(){return i.serialize}}),Object.defineProperty(t,"serializeOuter",{enumerable:!0,get:function(){return i.serializeOuter}});var s=n(9425);Object.defineProperty(t,"ErrorCodes",{enumerable:!0,get:function(){return s.ERR}}),t.foreignContent=n(3368),t.html=n(2287),t.Token=n(6389);var l=n(1786);Object.defineProperty(t,"Tokenizer",{enumerable:!0,get:function(){return l.Tokenizer}}),Object.defineProperty(t,"TokenizerMode",{enumerable:!0,get:function(){return l.TokenizerMode}}),t.parse=function(e,t){return r.Parser.parse(e,t)},t.parseFragment=function(e,t,n){"string"==typeof e&&(n=t,t=e,e=null);const o=r.Parser.getFragmentParser(e,n);return o.tokenizer.write(t,!0),o.getFragment()}},763:(e,t)=>{"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0}),t.FormattingElementList=t.EntryType=void 0,function(e){e[e.Marker=0]="Marker",e[e.Element=1]="Element"}(n=t.EntryType||(t.EntryType={}));const r={type:n.Marker};t.FormattingElementList=class{constructor(e){this.treeAdapter=e,this.entries=[],this.bookmark=null}_getNoahArkConditionCandidates(e,t){const r=[],o=t.length,a=this.treeAdapter.getTagName(e),i=this.treeAdapter.getNamespaceURI(e);for(let e=0;e<this.entries.length;e++){const t=this.entries[e];if(t.type===n.Marker)break;const{element:s}=t;if(this.treeAdapter.getTagName(s)===a&&this.treeAdapter.getNamespaceURI(s)===i){const t=this.treeAdapter.getAttrList(s);t.length===o&&r.push({idx:e,attrs:t})}}return r}_ensureNoahArkCondition(e){if(this.entries.length<3)return;const t=this.treeAdapter.getAttrList(e),n=this._getNoahArkConditionCandidates(e,t);if(n.length<3)return;const r=new Map(t.map((e=>[e.name,e.value])));let o=0;for(let e=0;e<n.length;e++){const t=n[e];t.attrs.every((e=>r.get(e.name)===e.value))&&(o+=1,o>=3&&this.entries.splice(t.idx,1))}}insertMarker(){this.entries.unshift(r)}pushElement(e,t){this._ensureNoahArkCondition(e),this.entries.unshift({type:n.Element,element:e,token:t})}insertElementAfterBookmark(e,t){const r=this.entries.indexOf(this.bookmark);this.entries.splice(r,0,{type:n.Element,element:e,token:t})}removeEntry(e){const t=this.entries.indexOf(e);t>=0&&this.entries.splice(t,1)}clearToLastMarker(){const e=this.entries.indexOf(r);e>=0?this.entries.splice(0,e+1):this.entries.length=0}getElementEntryInScopeWithTagName(e){const t=this.entries.find((t=>t.type===n.Marker||this.treeAdapter.getTagName(t.element)===e));return t&&t.type===n.Element?t:null}getElementEntry(e){return this.entries.find((t=>t.type===n.Element&&t.element===e))}}},3082:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Parser=void 0;const r=n(1786),o=n(5976),a=n(763),i=n(4921),s=n(4766),l=n(3368),u=n(9425),c=n(791),f=n(2287),p=n(6389),d="hidden",h=8,m=3;var E;!function(e){e[e.INITIAL=0]="INITIAL",e[e.BEFORE_HTML=1]="BEFORE_HTML",e[e.BEFORE_HEAD=2]="BEFORE_HEAD",e[e.IN_HEAD=3]="IN_HEAD",e[e.IN_HEAD_NO_SCRIPT=4]="IN_HEAD_NO_SCRIPT",e[e.AFTER_HEAD=5]="AFTER_HEAD",e[e.IN_BODY=6]="IN_BODY",e[e.TEXT=7]="TEXT",e[e.IN_TABLE=8]="IN_TABLE",e[e.IN_TABLE_TEXT=9]="IN_TABLE_TEXT",e[e.IN_CAPTION=10]="IN_CAPTION",e[e.IN_COLUMN_GROUP=11]="IN_COLUMN_GROUP",e[e.IN_TABLE_BODY=12]="IN_TABLE_BODY",e[e.IN_ROW=13]="IN_ROW",e[e.IN_CELL=14]="IN_CELL",e[e.IN_SELECT=15]="IN_SELECT",e[e.IN_SELECT_IN_TABLE=16]="IN_SELECT_IN_TABLE",e[e.IN_TEMPLATE=17]="IN_TEMPLATE",e[e.AFTER_BODY=18]="AFTER_BODY",e[e.IN_FRAMESET=19]="IN_FRAMESET",e[e.AFTER_FRAMESET=20]="AFTER_FRAMESET",e[e.AFTER_AFTER_BODY=21]="AFTER_AFTER_BODY",e[e.AFTER_AFTER_FRAMESET=22]="AFTER_AFTER_FRAMESET"}(E||(E={}));const T={startLine:-1,startCol:-1,startOffset:-1,endLine:-1,endCol:-1,endOffset:-1},g=new Set([f.TAG_ID.TABLE,f.TAG_ID.TBODY,f.TAG_ID.TFOOT,f.TAG_ID.THEAD,f.TAG_ID.TR]),y={scriptingEnabled:!0,sourceCodeLocationInfo:!1,treeAdapter:i.defaultTreeAdapter,onParseError:null};function _(e,t){let n=e.activeFormattingElements.getElementEntryInScopeWithTagName(t.tagName);return n?e.openElements.contains(n.element)?e.openElements.hasInScope(t.tagID)||(n=null):(e.activeFormattingElements.removeEntry(n),n=null):W(e,t),n}function A(e,t){let n=null,r=e.openElements.stackTop;for(;r>=0;r--){const o=e.openElements.items[r];if(o===t.element)break;e._isSpecialElement(o,e.openElements.tagIDs[r])&&(n=o)}return n||(e.openElements.shortenToLength(r<0?0:r),e.activeFormattingElements.removeEntry(t)),n}function b(e,t,n){let r=t,o=e.openElements.getCommonAncestor(t);for(let a=0,i=o;i!==n;a++,i=o){o=e.openElements.getCommonAncestor(i);const n=e.activeFormattingElements.getElementEntry(i),s=n&&a>=m;!n||s?(s&&e.activeFormattingElements.removeEntry(n),e.openElements.remove(i)):(i=v(e,n),r===t&&(e.activeFormattingElements.bookmark=n),e.treeAdapter.detachNode(r),e.treeAdapter.appendChild(i,r),r=i)}return r}function v(e,t){const n=e.treeAdapter.getNamespaceURI(t.element),r=e.treeAdapter.createElement(t.token.tagName,n,t.token.attrs);return e.openElements.replace(t.element,r),t.element=r,r}function S(e,t,n){const r=e.treeAdapter.getTagName(t),o=(0,f.getTagID)(r);if(e._isElementCausesFosterParenting(o))e._fosterParentElement(n);else{const r=e.treeAdapter.getNamespaceURI(t);o===f.TAG_ID.TEMPLATE&&r===f.NS.HTML&&(t=e.treeAdapter.getTemplateContent(t)),e.treeAdapter.appendChild(t,n)}}function I(e,t,n){const r=e.treeAdapter.getNamespaceURI(n.element),{token:o}=n,a=e.treeAdapter.createElement(o.tagName,r,o.attrs);e._adoptNodes(t,a),e.treeAdapter.appendChild(t,a),e.activeFormattingElements.insertElementAfterBookmark(a,o),e.activeFormattingElements.removeEntry(n),e.openElements.remove(n.element),e.openElements.insertAfter(t,a,o.tagID)}function C(e,t){for(let n=0;n<h;n++){const n=_(e,t);if(!n)break;const r=A(e,n);if(!r)break;e.activeFormattingElements.bookmark=n;const o=b(e,r,n.element),a=e.openElements.getCommonAncestor(n.element);e.treeAdapter.detachNode(o),a&&S(e,a,o),I(e,r,n)}}function N(e,t){e._appendCommentNode(t,e.openElements.currentTmplContentOrNode)}function O(e,t){if(e.stopped=!0,t.location){const n=e.fragmentContext?0:2;for(let r=e.openElements.stackTop;r>=n;r--)e._setEndLocation(e.openElements.items[r],t);if(!e.fragmentContext&&e.openElements.stackTop>=0){const n=e.openElements.items[0],r=e.treeAdapter.getNodeSourceCodeLocation(n);if(r&&!r.endTag&&(e._setEndLocation(n,t),e.openElements.stackTop>=1)){const n=e.openElements.items[1],r=e.treeAdapter.getNodeSourceCodeLocation(n);r&&!r.endTag&&e._setEndLocation(n,t)}}}}function D(e,t){e._err(t,u.ERR.missingDoctype,!0),e.treeAdapter.setDocumentMode(e.document,f.DOCUMENT_MODE.QUIRKS),e.insertionMode=E.BEFORE_HTML,e._processToken(t)}function P(e,t){e._insertFakeRootElement(),e.insertionMode=E.BEFORE_HEAD,e._processToken(t)}function R(e,t){e._insertFakeElement(f.TAG_NAMES.HEAD,f.TAG_ID.HEAD),e.headElement=e.openElements.current,e.insertionMode=E.IN_HEAD,e._processToken(t)}function k(e,t){switch(t.tagID){case f.TAG_ID.HTML:z(e,t);break;case f.TAG_ID.BASE:case f.TAG_ID.BASEFONT:case f.TAG_ID.BGSOUND:case f.TAG_ID.LINK:case f.TAG_ID.META:e._appendElement(t,f.NS.HTML),t.ackSelfClosing=!0;break;case f.TAG_ID.TITLE:e._switchToTextParsing(t,r.TokenizerMode.RCDATA);break;case f.TAG_ID.NOSCRIPT:e.options.scriptingEnabled?e._switchToTextParsing(t,r.TokenizerMode.RAWTEXT):(e._insertElement(t,f.NS.HTML),e.insertionMode=E.IN_HEAD_NO_SCRIPT);break;case f.TAG_ID.NOFRAMES:case f.TAG_ID.STYLE:e._switchToTextParsing(t,r.TokenizerMode.RAWTEXT);break;case f.TAG_ID.SCRIPT:e._switchToTextParsing(t,r.TokenizerMode.SCRIPT_DATA);break;case f.TAG_ID.TEMPLATE:e._insertTemplate(t),e.activeFormattingElements.insertMarker(),e.framesetOk=!1,e.insertionMode=E.IN_TEMPLATE,e.tmplInsertionModeStack.unshift(E.IN_TEMPLATE);break;case f.TAG_ID.HEAD:e._err(t,u.ERR.misplacedStartTagForHeadElement);break;default:L(e,t)}}function w(e,t){e.openElements.tmplCount>0?(e.openElements.generateImpliedEndTagsThoroughly(),e.openElements.currentTagId!==f.TAG_ID.TEMPLATE&&e._err(t,u.ERR.closingOfElementWithOpenChildElements),e.openElements.popUntilTagNamePopped(f.TAG_ID.TEMPLATE),e.activeFormattingElements.clearToLastMarker(),e.tmplInsertionModeStack.shift(),e._resetInsertionMode()):e._err(t,u.ERR.endTagWithoutMatchingOpenElement)}function L(e,t){e.openElements.pop(),e.insertionMode=E.AFTER_HEAD,e._processToken(t)}function M(e,t){const n=t.type===p.TokenType.EOF?u.ERR.openElementsLeftAfterEof:u.ERR.disallowedContentInNoscriptInHead;e._err(t,n),e.openElements.pop(),e.insertionMode=E.IN_HEAD,e._processToken(t)}function x(e,t){e._insertFakeElement(f.TAG_NAMES.BODY,f.TAG_ID.BODY),e.insertionMode=E.IN_BODY,G(e,t)}function G(e,t){switch(t.type){case p.TokenType.CHARACTER:H(e,t);break;case p.TokenType.WHITESPACE_CHARACTER:B(e,t);break;case p.TokenType.COMMENT:N(e,t);break;case p.TokenType.START_TAG:z(e,t);break;case p.TokenType.END_TAG:V(e,t);break;case p.TokenType.EOF:Y(e,t)}}function B(e,t){e._reconstructActiveFormattingElements(),e._insertCharacters(t)}function H(e,t){e._reconstructActiveFormattingElements(),e._insertCharacters(t),e.framesetOk=!1}function F(e,t){e._reconstructActiveFormattingElements(),e._appendElement(t,f.NS.HTML),e.framesetOk=!1,t.ackSelfClosing=!0}function U(e){const t=(0,p.getTokenAttr)(e,f.ATTRS.TYPE);return null!=t&&t.toLowerCase()===d}function j(e,t){e._switchToTextParsing(t,r.TokenizerMode.RAWTEXT)}function q(e,t){e._reconstructActiveFormattingElements(),e._insertElement(t,f.NS.HTML)}function z(e,t){switch(t.tagID){case f.TAG_ID.I:case f.TAG_ID.S:case f.TAG_ID.B:case f.TAG_ID.U:case f.TAG_ID.EM:case f.TAG_ID.TT:case f.TAG_ID.BIG:case f.TAG_ID.CODE:case f.TAG_ID.FONT:case f.TAG_ID.SMALL:case f.TAG_ID.STRIKE:case f.TAG_ID.STRONG:!function(e,t){e._reconstructActiveFormattingElements(),e._insertElement(t,f.NS.HTML),e.activeFormattingElements.pushElement(e.openElements.current,t)}(e,t);break;case f.TAG_ID.A:!function(e,t){const n=e.activeFormattingElements.getElementEntryInScopeWithTagName(f.TAG_NAMES.A);n&&(C(e,t),e.openElements.remove(n.element),e.activeFormattingElements.removeEntry(n)),e._reconstructActiveFormattingElements(),e._insertElement(t,f.NS.HTML),e.activeFormattingElements.pushElement(e.openElements.current,t)}(e,t);break;case f.TAG_ID.H1:case f.TAG_ID.H2:case f.TAG_ID.H3:case f.TAG_ID.H4:case f.TAG_ID.H5:case f.TAG_ID.H6:!function(e,t){e.openElements.hasInButtonScope(f.TAG_ID.P)&&e._closePElement(),(0,f.isNumberedHeader)(e.openElements.currentTagId)&&e.openElements.pop(),e._insertElement(t,f.NS.HTML)}(e,t);break;case f.TAG_ID.P:case f.TAG_ID.DL:case f.TAG_ID.OL:case f.TAG_ID.UL:case f.TAG_ID.DIV:case f.TAG_ID.DIR:case f.TAG_ID.NAV:case f.TAG_ID.MAIN:case f.TAG_ID.MENU:case f.TAG_ID.ASIDE:case f.TAG_ID.CENTER:case f.TAG_ID.FIGURE:case f.TAG_ID.FOOTER:case f.TAG_ID.HEADER:case f.TAG_ID.HGROUP:case f.TAG_ID.DIALOG:case f.TAG_ID.DETAILS:case f.TAG_ID.ADDRESS:case f.TAG_ID.ARTICLE:case f.TAG_ID.SECTION:case f.TAG_ID.SUMMARY:case f.TAG_ID.FIELDSET:case f.TAG_ID.BLOCKQUOTE:case f.TAG_ID.FIGCAPTION:!function(e,t){e.openElements.hasInButtonScope(f.TAG_ID.P)&&e._closePElement(),e._insertElement(t,f.NS.HTML)}(e,t);break;case f.TAG_ID.LI:case f.TAG_ID.DD:case f.TAG_ID.DT:!function(e,t){e.framesetOk=!1;const n=t.tagID;for(let t=e.openElements.stackTop;t>=0;t--){const r=e.openElements.tagIDs[t];if(n===f.TAG_ID.LI&&r===f.TAG_ID.LI||(n===f.TAG_ID.DD||n===f.TAG_ID.DT)&&(r===f.TAG_ID.DD||r===f.TAG_ID.DT)){e.openElements.generateImpliedEndTagsWithExclusion(r),e.openElements.popUntilTagNamePopped(r);break}if(r!==f.TAG_ID.ADDRESS&&r!==f.TAG_ID.DIV&&r!==f.TAG_ID.P&&e._isSpecialElement(e.openElements.items[t],r))break}e.openElements.hasInButtonScope(f.TAG_ID.P)&&e._closePElement(),e._insertElement(t,f.NS.HTML)}(e,t);break;case f.TAG_ID.BR:case f.TAG_ID.IMG:case f.TAG_ID.WBR:case f.TAG_ID.AREA:case f.TAG_ID.EMBED:case f.TAG_ID.KEYGEN:F(e,t);break;case f.TAG_ID.HR:!function(e,t){e.openElements.hasInButtonScope(f.TAG_ID.P)&&e._closePElement(),e._appendElement(t,f.NS.HTML),e.framesetOk=!1,t.ackSelfClosing=!0}(e,t);break;case f.TAG_ID.RB:case f.TAG_ID.RTC:!function(e,t){e.openElements.hasInScope(f.TAG_ID.RUBY)&&e.openElements.generateImpliedEndTags(),e._insertElement(t,f.NS.HTML)}(e,t);break;case f.TAG_ID.RT:case f.TAG_ID.RP:!function(e,t){e.openElements.hasInScope(f.TAG_ID.RUBY)&&e.openElements.generateImpliedEndTagsWithExclusion(f.TAG_ID.RTC),e._insertElement(t,f.NS.HTML)}(e,t);break;case f.TAG_ID.PRE:case f.TAG_ID.LISTING:!function(e,t){e.openElements.hasInButtonScope(f.TAG_ID.P)&&e._closePElement(),e._insertElement(t,f.NS.HTML),e.skipNextNewLine=!0,e.framesetOk=!1}(e,t);break;case f.TAG_ID.XMP:!function(e,t){e.openElements.hasInButtonScope(f.TAG_ID.P)&&e._closePElement(),e._reconstructActiveFormattingElements(),e.framesetOk=!1,e._switchToTextParsing(t,r.TokenizerMode.RAWTEXT)}(e,t);break;case f.TAG_ID.SVG:!function(e,t){e._reconstructActiveFormattingElements(),l.adjustTokenSVGAttrs(t),l.adjustTokenXMLAttrs(t),t.selfClosing?e._appendElement(t,f.NS.SVG):e._insertElement(t,f.NS.SVG),t.ackSelfClosing=!0}(e,t);break;case f.TAG_ID.HTML:!function(e,t){0===e.openElements.tmplCount&&e.treeAdapter.adoptAttributes(e.openElements.items[0],t.attrs)}(e,t);break;case f.TAG_ID.BASE:case f.TAG_ID.LINK:case f.TAG_ID.META:case f.TAG_ID.STYLE:case f.TAG_ID.TITLE:case f.TAG_ID.SCRIPT:case f.TAG_ID.BGSOUND:case f.TAG_ID.BASEFONT:case f.TAG_ID.TEMPLATE:k(e,t);break;case f.TAG_ID.BODY:!function(e,t){const n=e.openElements.tryPeekProperlyNestedBodyElement();n&&0===e.openElements.tmplCount&&(e.framesetOk=!1,e.treeAdapter.adoptAttributes(n,t.attrs))}(e,t);break;case f.TAG_ID.FORM:!function(e,t){const n=e.openElements.tmplCount>0;e.formElement&&!n||(e.openElements.hasInButtonScope(f.TAG_ID.P)&&e._closePElement(),e._insertElement(t,f.NS.HTML),n||(e.formElement=e.openElements.current))}(e,t);break;case f.TAG_ID.NOBR:!function(e,t){e._reconstructActiveFormattingElements(),e.openElements.hasInScope(f.TAG_ID.NOBR)&&(C(e,t),e._reconstructActiveFormattingElements()),e._insertElement(t,f.NS.HTML),e.activeFormattingElements.pushElement(e.openElements.current,t)}(e,t);break;case f.TAG_ID.MATH:!function(e,t){e._reconstructActiveFormattingElements(),l.adjustTokenMathMLAttrs(t),l.adjustTokenXMLAttrs(t),t.selfClosing?e._appendElement(t,f.NS.MATHML):e._insertElement(t,f.NS.MATHML),t.ackSelfClosing=!0}(e,t);break;case f.TAG_ID.TABLE:!function(e,t){e.treeAdapter.getDocumentMode(e.document)!==f.DOCUMENT_MODE.QUIRKS&&e.openElements.hasInButtonScope(f.TAG_ID.P)&&e._closePElement(),e._insertElement(t,f.NS.HTML),e.framesetOk=!1,e.insertionMode=E.IN_TABLE}(e,t);break;case f.TAG_ID.INPUT:!function(e,t){e._reconstructActiveFormattingElements(),e._appendElement(t,f.NS.HTML),U(t)||(e.framesetOk=!1),t.ackSelfClosing=!0}(e,t);break;case f.TAG_ID.PARAM:case f.TAG_ID.TRACK:case f.TAG_ID.SOURCE:!function(e,t){e._appendElement(t,f.NS.HTML),t.ackSelfClosing=!0}(e,t);break;case f.TAG_ID.IMAGE:!function(e,t){t.tagName=f.TAG_NAMES.IMG,t.tagID=f.TAG_ID.IMG,F(e,t)}(e,t);break;case f.TAG_ID.BUTTON:!function(e,t){e.openElements.hasInScope(f.TAG_ID.BUTTON)&&(e.openElements.generateImpliedEndTags(),e.openElements.popUntilTagNamePopped(f.TAG_ID.BUTTON)),e._reconstructActiveFormattingElements(),e._insertElement(t,f.NS.HTML),e.framesetOk=!1}(e,t);break;case f.TAG_ID.APPLET:case f.TAG_ID.OBJECT:case f.TAG_ID.MARQUEE:!function(e,t){e._reconstructActiveFormattingElements(),e._insertElement(t,f.NS.HTML),e.activeFormattingElements.insertMarker(),e.framesetOk=!1}(e,t);break;case f.TAG_ID.IFRAME:!function(e,t){e.framesetOk=!1,e._switchToTextParsing(t,r.TokenizerMode.RAWTEXT)}(e,t);break;case f.TAG_ID.SELECT:!function(e,t){e._reconstructActiveFormattingElements(),e._insertElement(t,f.NS.HTML),e.framesetOk=!1,e.insertionMode=e.insertionMode===E.IN_TABLE||e.insertionMode===E.IN_CAPTION||e.insertionMode===E.IN_TABLE_BODY||e.insertionMode===E.IN_ROW||e.insertionMode===E.IN_CELL?E.IN_SELECT_IN_TABLE:E.IN_SELECT}(e,t);break;case f.TAG_ID.OPTION:case f.TAG_ID.OPTGROUP:!function(e,t){e.openElements.currentTagId===f.TAG_ID.OPTION&&e.openElements.pop(),e._reconstructActiveFormattingElements(),e._insertElement(t,f.NS.HTML)}(e,t);break;case f.TAG_ID.NOEMBED:j(e,t);break;case f.TAG_ID.FRAMESET:!function(e,t){const n=e.openElements.tryPeekProperlyNestedBodyElement();e.framesetOk&&n&&(e.treeAdapter.detachNode(n),e.openElements.popAllUpToHtmlElement(),e._insertElement(t,f.NS.HTML),e.insertionMode=E.IN_FRAMESET)}(e,t);break;case f.TAG_ID.TEXTAREA:!function(e,t){e._insertElement(t,f.NS.HTML),e.skipNextNewLine=!0,e.tokenizer.state=r.TokenizerMode.RCDATA,e.originalInsertionMode=e.insertionMode,e.framesetOk=!1,e.insertionMode=E.TEXT}(e,t);break;case f.TAG_ID.NOSCRIPT:e.options.scriptingEnabled?j(e,t):q(e,t);break;case f.TAG_ID.PLAINTEXT:!function(e,t){e.openElements.hasInButtonScope(f.TAG_ID.P)&&e._closePElement(),e._insertElement(t,f.NS.HTML),e.tokenizer.state=r.TokenizerMode.PLAINTEXT}(e,t);break;case f.TAG_ID.COL:case f.TAG_ID.TH:case f.TAG_ID.TD:case f.TAG_ID.TR:case f.TAG_ID.HEAD:case f.TAG_ID.FRAME:case f.TAG_ID.TBODY:case f.TAG_ID.TFOOT:case f.TAG_ID.THEAD:case f.TAG_ID.CAPTION:case f.TAG_ID.COLGROUP:break;default:q(e,t)}}function W(e,t){const n=t.tagName,r=t.tagID;for(let t=e.openElements.stackTop;t>0;t--){const o=e.openElements.items[t],a=e.openElements.tagIDs[t];if(r===a&&(r!==f.TAG_ID.UNKNOWN||e.treeAdapter.getTagName(o)===n)){e.openElements.generateImpliedEndTagsWithExclusion(r),e.openElements.stackTop>=t&&e.openElements.shortenToLength(t);break}if(e._isSpecialElement(o,a))break}}function V(e,t){switch(t.tagID){case f.TAG_ID.A:case f.TAG_ID.B:case f.TAG_ID.I:case f.TAG_ID.S:case f.TAG_ID.U:case f.TAG_ID.EM:case f.TAG_ID.TT:case f.TAG_ID.BIG:case f.TAG_ID.CODE:case f.TAG_ID.FONT:case f.TAG_ID.NOBR:case f.TAG_ID.SMALL:case f.TAG_ID.STRIKE:case f.TAG_ID.STRONG:C(e,t);break;case f.TAG_ID.P:!function(e){e.openElements.hasInButtonScope(f.TAG_ID.P)||e._insertFakeElement(f.TAG_NAMES.P,f.TAG_ID.P),e._closePElement()}(e);break;case f.TAG_ID.DL:case f.TAG_ID.UL:case f.TAG_ID.OL:case f.TAG_ID.DIR:case f.TAG_ID.DIV:case f.TAG_ID.NAV:case f.TAG_ID.PRE:case f.TAG_ID.MAIN:case f.TAG_ID.MENU:case f.TAG_ID.ASIDE:case f.TAG_ID.BUTTON:case f.TAG_ID.CENTER:case f.TAG_ID.FIGURE:case f.TAG_ID.FOOTER:case f.TAG_ID.HEADER:case f.TAG_ID.HGROUP:case f.TAG_ID.DIALOG:case f.TAG_ID.ADDRESS:case f.TAG_ID.ARTICLE:case f.TAG_ID.DETAILS:case f.TAG_ID.SECTION:case f.TAG_ID.SUMMARY:case f.TAG_ID.LISTING:case f.TAG_ID.FIELDSET:case f.TAG_ID.BLOCKQUOTE:case f.TAG_ID.FIGCAPTION:!function(e,t){const n=t.tagID;e.openElements.hasInScope(n)&&(e.openElements.generateImpliedEndTags(),e.openElements.popUntilTagNamePopped(n))}(e,t);break;case f.TAG_ID.LI:!function(e){e.openElements.hasInListItemScope(f.TAG_ID.LI)&&(e.openElements.generateImpliedEndTagsWithExclusion(f.TAG_ID.LI),e.openElements.popUntilTagNamePopped(f.TAG_ID.LI))}(e);break;case f.TAG_ID.DD:case f.TAG_ID.DT:!function(e,t){const n=t.tagID;e.openElements.hasInScope(n)&&(e.openElements.generateImpliedEndTagsWithExclusion(n),e.openElements.popUntilTagNamePopped(n))}(e,t);break;case f.TAG_ID.H1:case f.TAG_ID.H2:case f.TAG_ID.H3:case f.TAG_ID.H4:case f.TAG_ID.H5:case f.TAG_ID.H6:!function(e){e.openElements.hasNumberedHeaderInScope()&&(e.openElements.generateImpliedEndTags(),e.openElements.popUntilNumberedHeaderPopped())}(e);break;case f.TAG_ID.BR:!function(e){e._reconstructActiveFormattingElements(),e._insertFakeElement(f.TAG_NAMES.BR,f.TAG_ID.BR),e.openElements.pop(),e.framesetOk=!1}(e);break;case f.TAG_ID.BODY:!function(e,t){if(e.openElements.hasInScope(f.TAG_ID.BODY)&&(e.insertionMode=E.AFTER_BODY,e.options.sourceCodeLocationInfo)){const n=e.openElements.tryPeekProperlyNestedBodyElement();n&&e._setEndLocation(n,t)}}(e,t);break;case f.TAG_ID.HTML:!function(e,t){e.openElements.hasInScope(f.TAG_ID.BODY)&&(e.insertionMode=E.AFTER_BODY,fe(e,t))}(e,t);break;case f.TAG_ID.FORM:!function(e){const t=e.openElements.tmplCount>0,{formElement:n}=e;t||(e.formElement=null),(n||t)&&e.openElements.hasInScope(f.TAG_ID.FORM)&&(e.openElements.generateImpliedEndTags(),t?e.openElements.popUntilTagNamePopped(f.TAG_ID.FORM):n&&e.openElements.remove(n))}(e);break;case f.TAG_ID.APPLET:case f.TAG_ID.OBJECT:case f.TAG_ID.MARQUEE:!function(e,t){const n=t.tagID;e.openElements.hasInScope(n)&&(e.openElements.generateImpliedEndTags(),e.openElements.popUntilTagNamePopped(n),e.activeFormattingElements.clearToLastMarker())}(e,t);break;case f.TAG_ID.TEMPLATE:w(e,t);break;default:W(e,t)}}function Y(e,t){e.tmplInsertionModeStack.length>0?ce(e,t):O(e,t)}function $(e,t){if(g.has(e.openElements.currentTagId))switch(e.pendingCharacterTokens.length=0,e.hasNonWhitespacePendingCharacterToken=!1,e.originalInsertionMode=e.insertionMode,e.insertionMode=E.IN_TABLE_TEXT,t.type){case p.TokenType.CHARACTER:J(e,t);break;case p.TokenType.WHITESPACE_CHARACTER:Z(e,t)}else K(e,t)}function Q(e,t){switch(t.tagID){case f.TAG_ID.TD:case f.TAG_ID.TH:case f.TAG_ID.TR:!function(e,t){e.openElements.clearBackToTableContext(),e._insertFakeElement(f.TAG_NAMES.TBODY,f.TAG_ID.TBODY),e.insertionMode=E.IN_TABLE_BODY,oe(e,t)}(e,t);break;case f.TAG_ID.STYLE:case f.TAG_ID.SCRIPT:case f.TAG_ID.TEMPLATE:k(e,t);break;case f.TAG_ID.COL:!function(e,t){e.openElements.clearBackToTableContext(),e._insertFakeElement(f.TAG_NAMES.COLGROUP,f.TAG_ID.COLGROUP),e.insertionMode=E.IN_COLUMN_GROUP,ne(e,t)}(e,t);break;case f.TAG_ID.FORM:!function(e,t){e.formElement||0!==e.openElements.tmplCount||(e._insertElement(t,f.NS.HTML),e.formElement=e.openElements.current,e.openElements.pop())}(e,t);break;case f.TAG_ID.TABLE:!function(e,t){e.openElements.hasInTableScope(f.TAG_ID.TABLE)&&(e.openElements.popUntilTagNamePopped(f.TAG_ID.TABLE),e._resetInsertionMode(),e._processStartTag(t))}(e,t);break;case f.TAG_ID.TBODY:case f.TAG_ID.TFOOT:case f.TAG_ID.THEAD:!function(e,t){e.openElements.clearBackToTableContext(),e._insertElement(t,f.NS.HTML),e.insertionMode=E.IN_TABLE_BODY}(e,t);break;case f.TAG_ID.INPUT:!function(e,t){U(t)?e._appendElement(t,f.NS.HTML):K(e,t),t.ackSelfClosing=!0}(e,t);break;case f.TAG_ID.CAPTION:!function(e,t){e.openElements.clearBackToTableContext(),e.activeFormattingElements.insertMarker(),e._insertElement(t,f.NS.HTML),e.insertionMode=E.IN_CAPTION}(e,t);break;case f.TAG_ID.COLGROUP:!function(e,t){e.openElements.clearBackToTableContext(),e._insertElement(t,f.NS.HTML),e.insertionMode=E.IN_COLUMN_GROUP}(e,t);break;default:K(e,t)}}function X(e,t){switch(t.tagID){case f.TAG_ID.TABLE:e.openElements.hasInTableScope(f.TAG_ID.TABLE)&&(e.openElements.popUntilTagNamePopped(f.TAG_ID.TABLE),e._resetInsertionMode());break;case f.TAG_ID.TEMPLATE:w(e,t);break;case f.TAG_ID.BODY:case f.TAG_ID.CAPTION:case f.TAG_ID.COL:case f.TAG_ID.COLGROUP:case f.TAG_ID.HTML:case f.TAG_ID.TBODY:case f.TAG_ID.TD:case f.TAG_ID.TFOOT:case f.TAG_ID.TH:case f.TAG_ID.THEAD:case f.TAG_ID.TR:break;default:K(e,t)}}function K(e,t){const n=e.fosterParentingEnabled;e.fosterParentingEnabled=!0,G(e,t),e.fosterParentingEnabled=n}function Z(e,t){e.pendingCharacterTokens.push(t)}function J(e,t){e.pendingCharacterTokens.push(t),e.hasNonWhitespacePendingCharacterToken=!0}function ee(e,t){let n=0;if(e.hasNonWhitespacePendingCharacterToken)for(;n<e.pendingCharacterTokens.length;n++)K(e,e.pendingCharacterTokens[n]);else for(;n<e.pendingCharacterTokens.length;n++)e._insertCharacters(e.pendingCharacterTokens[n]);e.insertionMode=e.originalInsertionMode,e._processToken(t)}t.Parser=class{constructor(e,t,n=null,i=null){this.fragmentContext=n,this.scriptHandler=i,this.currentToken=null,this.stopped=!1,this.insertionMode=E.INITIAL,this.originalInsertionMode=E.INITIAL,this.headElement=null,this.formElement=null,this.currentNotInHTML=!1,this.tmplInsertionModeStack=[],this.pendingCharacterTokens=[],this.hasNonWhitespacePendingCharacterToken=!1,this.framesetOk=!0,this.skipNextNewLine=!1,this.fosterParentingEnabled=!1,this.options=Object.assign(Object.assign({},y),e),this.treeAdapter=this.options.treeAdapter,this.onParseError=this.options.onParseError,this.onParseError&&(this.options.sourceCodeLocationInfo=!0),this.document=null!=t?t:this.treeAdapter.createDocument(),this.tokenizer=new r.Tokenizer(this.options,this),this.activeFormattingElements=new a.FormattingElementList(this.treeAdapter),this.fragmentContextID=n?(0,f.getTagID)(this.treeAdapter.getTagName(n)):f.TAG_ID.UNKNOWN,this._setContextModes(null!=n?n:this.document,this.fragmentContextID),this.openElements=new o.OpenElementStack(this.document,this.treeAdapter,this)}static parse(e,t){const n=new this(t);return n.tokenizer.write(e,!0),n.document}static getFragmentParser(e,t){const n=Object.assign(Object.assign({},y),t);null!=e||(e=n.treeAdapter.createElement(f.TAG_NAMES.TEMPLATE,f.NS.HTML,[]));const r=n.treeAdapter.createElement("documentmock",f.NS.HTML,[]),o=new this(n,r,e);return o.fragmentContextID===f.TAG_ID.TEMPLATE&&o.tmplInsertionModeStack.unshift(E.IN_TEMPLATE),o._initTokenizerForFragmentParsing(),o._insertFakeRootElement(),o._resetInsertionMode(),o._findFormInFragmentContext(),o}getFragment(){const e=this.treeAdapter.getFirstChild(this.document),t=this.treeAdapter.createDocumentFragment();return this._adoptNodes(e,t),t}_err(e,t,n){var r;if(!this.onParseError)return;const o=null!==(r=e.location)&&void 0!==r?r:T,a={code:t,startLine:o.startLine,startCol:o.startCol,startOffset:o.startOffset,endLine:n?o.startLine:o.endLine,endCol:n?o.startCol:o.endCol,endOffset:n?o.startOffset:o.endOffset};this.onParseError(a)}onItemPush(e,t,n){var r,o;null===(o=(r=this.treeAdapter).onItemPush)||void 0===o||o.call(r,e),n&&this.openElements.stackTop>0&&this._setContextModes(e,t)}onItemPop(e,t){var n,r;if(this.options.sourceCodeLocationInfo&&this._setEndLocation(e,this.currentToken),null===(r=(n=this.treeAdapter).onItemPop)||void 0===r||r.call(n,e,this.openElements.current),t){let e,t;0===this.openElements.stackTop&&this.fragmentContext?(e=this.fragmentContext,t=this.fragmentContextID):({current:e,currentTagId:t}=this.openElements),this._setContextModes(e,t)}}_setContextModes(e,t){const n=e===this.document||this.treeAdapter.getNamespaceURI(e)===f.NS.HTML;this.currentNotInHTML=!n,this.tokenizer.inForeignNode=!n&&!this._isIntegrationPoint(t,e)}_switchToTextParsing(e,t){this._insertElement(e,f.NS.HTML),this.tokenizer.state=t,this.originalInsertionMode=this.insertionMode,this.insertionMode=E.TEXT}switchToPlaintextParsing(){this.insertionMode=E.TEXT,this.originalInsertionMode=E.IN_BODY,this.tokenizer.state=r.TokenizerMode.PLAINTEXT}_getAdjustedCurrentElement(){return 0===this.openElements.stackTop&&this.fragmentContext?this.fragmentContext:this.openElements.current}_findFormInFragmentContext(){let e=this.fragmentContext;for(;e;){if(this.treeAdapter.getTagName(e)===f.TAG_NAMES.FORM){this.formElement=e;break}e=this.treeAdapter.getParentNode(e)}}_initTokenizerForFragmentParsing(){if(this.fragmentContext&&this.treeAdapter.getNamespaceURI(this.fragmentContext)===f.NS.HTML)switch(this.fragmentContextID){case f.TAG_ID.TITLE:case f.TAG_ID.TEXTAREA:this.tokenizer.state=r.TokenizerMode.RCDATA;break;case f.TAG_ID.STYLE:case f.TAG_ID.XMP:case f.TAG_ID.IFRAME:case f.TAG_ID.NOEMBED:case f.TAG_ID.NOFRAMES:case f.TAG_ID.NOSCRIPT:this.tokenizer.state=r.TokenizerMode.RAWTEXT;break;case f.TAG_ID.SCRIPT:this.tokenizer.state=r.TokenizerMode.SCRIPT_DATA;break;case f.TAG_ID.PLAINTEXT:this.tokenizer.state=r.TokenizerMode.PLAINTEXT}}_setDocumentType(e){const t=e.name||"",n=e.publicId||"",r=e.systemId||"";if(this.treeAdapter.setDocumentType(this.document,t,n,r),e.location){const t=this.treeAdapter.getChildNodes(this.document).find((e=>this.treeAdapter.isDocumentTypeNode(e)));t&&this.treeAdapter.setNodeSourceCodeLocation(t,e.location)}}_attachElementToTree(e,t){if(this.options.sourceCodeLocationInfo){const n=t&&Object.assign(Object.assign({},t),{startTag:t});this.treeAdapter.setNodeSourceCodeLocation(e,n)}if(this._shouldFosterParentOnInsertion())this._fosterParentElement(e);else{const t=this.openElements.currentTmplContentOrNode;this.treeAdapter.appendChild(t,e)}}_appendElement(e,t){const n=this.treeAdapter.createElement(e.tagName,t,e.attrs);this._attachElementToTree(n,e.location)}_insertElement(e,t){const n=this.treeAdapter.createElement(e.tagName,t,e.attrs);this._attachElementToTree(n,e.location),this.openElements.push(n,e.tagID)}_insertFakeElement(e,t){const n=this.treeAdapter.createElement(e,f.NS.HTML,[]);this._attachElementToTree(n,null),this.openElements.push(n,t)}_insertTemplate(e){const t=this.treeAdapter.createElement(e.tagName,f.NS.HTML,e.attrs),n=this.treeAdapter.createDocumentFragment();this.treeAdapter.setTemplateContent(t,n),this._attachElementToTree(t,e.location),this.openElements.push(t,e.tagID),this.options.sourceCodeLocationInfo&&this.treeAdapter.setNodeSourceCodeLocation(n,null)}_insertFakeRootElement(){const e=this.treeAdapter.createElement(f.TAG_NAMES.HTML,f.NS.HTML,[]);this.options.sourceCodeLocationInfo&&this.treeAdapter.setNodeSourceCodeLocation(e,null),this.treeAdapter.appendChild(this.openElements.current,e),this.openElements.push(e,f.TAG_ID.HTML)}_appendCommentNode(e,t){const n=this.treeAdapter.createCommentNode(e.data);this.treeAdapter.appendChild(t,n),this.options.sourceCodeLocationInfo&&this.treeAdapter.setNodeSourceCodeLocation(n,e.location)}_insertCharacters(e){let t,n;if(this._shouldFosterParentOnInsertion()?(({parent:t,beforeElement:n}=this._findFosterParentingLocation()),n?this.treeAdapter.insertTextBefore(t,e.chars,n):this.treeAdapter.insertText(t,e.chars)):(t=this.openElements.currentTmplContentOrNode,this.treeAdapter.insertText(t,e.chars)),!e.location)return;const r=this.treeAdapter.getChildNodes(t),o=n?r.lastIndexOf(n):r.length,a=r[o-1];if(this.treeAdapter.getNodeSourceCodeLocation(a)){const{endLine:t,endCol:n,endOffset:r}=e.location;this.treeAdapter.updateNodeSourceCodeLocation(a,{endLine:t,endCol:n,endOffset:r})}else this.options.sourceCodeLocationInfo&&this.treeAdapter.setNodeSourceCodeLocation(a,e.location)}_adoptNodes(e,t){for(let n=this.treeAdapter.getFirstChild(e);n;n=this.treeAdapter.getFirstChild(e))this.treeAdapter.detachNode(n),this.treeAdapter.appendChild(t,n)}_setEndLocation(e,t){if(this.treeAdapter.getNodeSourceCodeLocation(e)&&t.location){const n=t.location,r=this.treeAdapter.getTagName(e),o=t.type===p.TokenType.END_TAG&&r===t.tagName?{endTag:Object.assign({},n),endLine:n.endLine,endCol:n.endCol,endOffset:n.endOffset}:{endLine:n.startLine,endCol:n.startCol,endOffset:n.startOffset};this.treeAdapter.updateNodeSourceCodeLocation(e,o)}}shouldProcessStartTagTokenInForeignContent(e){if(!this.currentNotInHTML)return!1;let t,n;return 0===this.openElements.stackTop&&this.fragmentContext?(t=this.fragmentContext,n=this.fragmentContextID):({current:t,currentTagId:n}=this.openElements),(e.tagID!==f.TAG_ID.SVG||this.treeAdapter.getTagName(t)!==f.TAG_NAMES.ANNOTATION_XML||this.treeAdapter.getNamespaceURI(t)!==f.NS.MATHML)&&(this.tokenizer.inForeignNode||(e.tagID===f.TAG_ID.MGLYPH||e.tagID===f.TAG_ID.MALIGNMARK)&&!this._isIntegrationPoint(n,t,f.NS.HTML))}_processToken(e){switch(e.type){case p.TokenType.CHARACTER:this.onCharacter(e);break;case p.TokenType.NULL_CHARACTER:this.onNullCharacter(e);break;case p.TokenType.COMMENT:this.onComment(e);break;case p.TokenType.DOCTYPE:this.onDoctype(e);break;case p.TokenType.START_TAG:this._processStartTag(e);break;case p.TokenType.END_TAG:this.onEndTag(e);break;case p.TokenType.EOF:this.onEof(e);break;case p.TokenType.WHITESPACE_CHARACTER:this.onWhitespaceCharacter(e)}}_isIntegrationPoint(e,t,n){const r=this.treeAdapter.getNamespaceURI(t),o=this.treeAdapter.getAttrList(t);return l.isIntegrationPoint(e,r,o,n)}_reconstructActiveFormattingElements(){const e=this.activeFormattingElements.entries.length;if(e){const t=this.activeFormattingElements.entries.findIndex((e=>e.type===a.EntryType.Marker||this.openElements.contains(e.element)));for(let n=t<0?e-1:t-1;n>=0;n--){const e=this.activeFormattingElements.entries[n];this._insertElement(e.token,this.treeAdapter.getNamespaceURI(e.element)),e.element=this.openElements.current}}}_closeTableCell(){this.openElements.generateImpliedEndTags(),this.openElements.popUntilTableCellPopped(),this.activeFormattingElements.clearToLastMarker(),this.insertionMode=E.IN_ROW}_closePElement(){this.openElements.generateImpliedEndTagsWithExclusion(f.TAG_ID.P),this.openElements.popUntilTagNamePopped(f.TAG_ID.P)}_resetInsertionMode(){for(let e=this.openElements.stackTop;e>=0;e--)switch(0===e&&this.fragmentContext?this.fragmentContextID:this.openElements.tagIDs[e]){case f.TAG_ID.TR:return void(this.insertionMode=E.IN_ROW);case f.TAG_ID.TBODY:case f.TAG_ID.THEAD:case f.TAG_ID.TFOOT:return void(this.insertionMode=E.IN_TABLE_BODY);case f.TAG_ID.CAPTION:return void(this.insertionMode=E.IN_CAPTION);case f.TAG_ID.COLGROUP:return void(this.insertionMode=E.IN_COLUMN_GROUP);case f.TAG_ID.TABLE:return void(this.insertionMode=E.IN_TABLE);case f.TAG_ID.BODY:return void(this.insertionMode=E.IN_BODY);case f.TAG_ID.FRAMESET:return void(this.insertionMode=E.IN_FRAMESET);case f.TAG_ID.SELECT:return void this._resetInsertionModeForSelect(e);case f.TAG_ID.TEMPLATE:return void(this.insertionMode=this.tmplInsertionModeStack[0]);case f.TAG_ID.HTML:return void(this.insertionMode=this.headElement?E.AFTER_HEAD:E.BEFORE_HEAD);case f.TAG_ID.TD:case f.TAG_ID.TH:if(e>0)return void(this.insertionMode=E.IN_CELL);break;case f.TAG_ID.HEAD:if(e>0)return void(this.insertionMode=E.IN_HEAD)}this.insertionMode=E.IN_BODY}_resetInsertionModeForSelect(e){if(e>0)for(let t=e-1;t>0;t--){const e=this.openElements.tagIDs[t];if(e===f.TAG_ID.TEMPLATE)break;if(e===f.TAG_ID.TABLE)return void(this.insertionMode=E.IN_SELECT_IN_TABLE)}this.insertionMode=E.IN_SELECT}_isElementCausesFosterParenting(e){return g.has(e)}_shouldFosterParentOnInsertion(){return this.fosterParentingEnabled&&this._isElementCausesFosterParenting(this.openElements.currentTagId)}_findFosterParentingLocation(){for(let e=this.openElements.stackTop;e>=0;e--){const t=this.openElements.items[e];switch(this.openElements.tagIDs[e]){case f.TAG_ID.TEMPLATE:if(this.treeAdapter.getNamespaceURI(t)===f.NS.HTML)return{parent:this.treeAdapter.getTemplateContent(t),beforeElement:null};break;case f.TAG_ID.TABLE:{const n=this.treeAdapter.getParentNode(t);return n?{parent:n,beforeElement:t}:{parent:this.openElements.items[e-1],beforeElement:null}}}}return{parent:this.openElements.items[0],beforeElement:null}}_fosterParentElement(e){const t=this._findFosterParentingLocation();t.beforeElement?this.treeAdapter.insertBefore(t.parent,e,t.beforeElement):this.treeAdapter.appendChild(t.parent,e)}_isSpecialElement(e,t){const n=this.treeAdapter.getNamespaceURI(e);return f.SPECIAL_ELEMENTS[n].has(t)}onCharacter(e){if(this.skipNextNewLine=!1,this.tokenizer.inForeignNode)!function(e,t){e._insertCharacters(t),e.framesetOk=!1}(this,e);else switch(this.insertionMode){case E.INITIAL:D(this,e);break;case E.BEFORE_HTML:P(this,e);break;case E.BEFORE_HEAD:R(this,e);break;case E.IN_HEAD:L(this,e);break;case E.IN_HEAD_NO_SCRIPT:M(this,e);break;case E.AFTER_HEAD:x(this,e);break;case E.IN_BODY:case E.IN_CAPTION:case E.IN_CELL:case E.IN_TEMPLATE:H(this,e);break;case E.TEXT:case E.IN_SELECT:case E.IN_SELECT_IN_TABLE:this._insertCharacters(e);break;case E.IN_TABLE:case E.IN_TABLE_BODY:case E.IN_ROW:$(this,e);break;case E.IN_TABLE_TEXT:J(this,e);break;case E.IN_COLUMN_GROUP:re(this,e);break;case E.AFTER_BODY:pe(this,e);break;case E.AFTER_AFTER_BODY:de(this,e)}}onNullCharacter(e){if(this.skipNextNewLine=!1,this.tokenizer.inForeignNode)!function(e,t){t.chars=c.REPLACEMENT_CHARACTER,e._insertCharacters(t)}(this,e);else switch(this.insertionMode){case E.INITIAL:D(this,e);break;case E.BEFORE_HTML:P(this,e);break;case E.BEFORE_HEAD:R(this,e);break;case E.IN_HEAD:L(this,e);break;case E.IN_HEAD_NO_SCRIPT:M(this,e);break;case E.AFTER_HEAD:x(this,e);break;case E.TEXT:this._insertCharacters(e);break;case E.IN_TABLE:case E.IN_TABLE_BODY:case E.IN_ROW:$(this,e);break;case E.IN_COLUMN_GROUP:re(this,e);break;case E.AFTER_BODY:pe(this,e);break;case E.AFTER_AFTER_BODY:de(this,e)}}onComment(e){if(this.skipNextNewLine=!1,this.currentNotInHTML)N(this,e);else switch(this.insertionMode){case E.INITIAL:case E.BEFORE_HTML:case E.BEFORE_HEAD:case E.IN_HEAD:case E.IN_HEAD_NO_SCRIPT:case E.AFTER_HEAD:case E.IN_BODY:case E.IN_TABLE:case E.IN_CAPTION:case E.IN_COLUMN_GROUP:case E.IN_TABLE_BODY:case E.IN_ROW:case E.IN_CELL:case E.IN_SELECT:case E.IN_SELECT_IN_TABLE:case E.IN_TEMPLATE:case E.IN_FRAMESET:case E.AFTER_FRAMESET:N(this,e);break;case E.IN_TABLE_TEXT:ee(this,e);break;case E.AFTER_BODY:!function(e,t){e._appendCommentNode(t,e.openElements.items[0])}(this,e);break;case E.AFTER_AFTER_BODY:case E.AFTER_AFTER_FRAMESET:!function(e,t){e._appendCommentNode(t,e.document)}(this,e)}}onDoctype(e){switch(this.skipNextNewLine=!1,this.insertionMode){case E.INITIAL:!function(e,t){e._setDocumentType(t);const n=t.forceQuirks?f.DOCUMENT_MODE.QUIRKS:s.getDocumentMode(t);s.isConforming(t)||e._err(t,u.ERR.nonConformingDoctype),e.treeAdapter.setDocumentMode(e.document,n),e.insertionMode=E.BEFORE_HTML}(this,e);break;case E.BEFORE_HEAD:case E.IN_HEAD:case E.IN_HEAD_NO_SCRIPT:case E.AFTER_HEAD:this._err(e,u.ERR.misplacedDoctype);break;case E.IN_TABLE_TEXT:ee(this,e)}}onStartTag(e){this.skipNextNewLine=!1,this.currentToken=e,this._processStartTag(e),e.selfClosing&&!e.ackSelfClosing&&this._err(e,u.ERR.nonVoidHtmlElementStartTagWithTrailingSolidus)}_processStartTag(e){this.shouldProcessStartTagTokenInForeignContent(e)?function(e,t){if(l.causesExit(t))he(e),e._startTagOutsideForeignContent(t);else{const n=e._getAdjustedCurrentElement(),r=e.treeAdapter.getNamespaceURI(n);r===f.NS.MATHML?l.adjustTokenMathMLAttrs(t):r===f.NS.SVG&&(l.adjustTokenSVGTagName(t),l.adjustTokenSVGAttrs(t)),l.adjustTokenXMLAttrs(t),t.selfClosing?e._appendElement(t,r):e._insertElement(t,r),t.ackSelfClosing=!0}}(this,e):this._startTagOutsideForeignContent(e)}_startTagOutsideForeignContent(e){switch(this.insertionMode){case E.INITIAL:D(this,e);break;case E.BEFORE_HTML:!function(e,t){t.tagID===f.TAG_ID.HTML?(e._insertElement(t,f.NS.HTML),e.insertionMode=E.BEFORE_HEAD):P(e,t)}(this,e);break;case E.BEFORE_HEAD:!function(e,t){switch(t.tagID){case f.TAG_ID.HTML:z(e,t);break;case f.TAG_ID.HEAD:e._insertElement(t,f.NS.HTML),e.headElement=e.openElements.current,e.insertionMode=E.IN_HEAD;break;default:R(e,t)}}(this,e);break;case E.IN_HEAD:k(this,e);break;case E.IN_HEAD_NO_SCRIPT:!function(e,t){switch(t.tagID){case f.TAG_ID.HTML:z(e,t);break;case f.TAG_ID.BASEFONT:case f.TAG_ID.BGSOUND:case f.TAG_ID.HEAD:case f.TAG_ID.LINK:case f.TAG_ID.META:case f.TAG_ID.NOFRAMES:case f.TAG_ID.STYLE:k(e,t);break;case f.TAG_ID.NOSCRIPT:e._err(t,u.ERR.nestedNoscriptInHead);break;default:M(e,t)}}(this,e);break;case E.AFTER_HEAD:!function(e,t){switch(t.tagID){case f.TAG_ID.HTML:z(e,t);break;case f.TAG_ID.BODY:e._insertElement(t,f.NS.HTML),e.framesetOk=!1,e.insertionMode=E.IN_BODY;break;case f.TAG_ID.FRAMESET:e._insertElement(t,f.NS.HTML),e.insertionMode=E.IN_FRAMESET;break;case f.TAG_ID.BASE:case f.TAG_ID.BASEFONT:case f.TAG_ID.BGSOUND:case f.TAG_ID.LINK:case f.TAG_ID.META:case f.TAG_ID.NOFRAMES:case f.TAG_ID.SCRIPT:case f.TAG_ID.STYLE:case f.TAG_ID.TEMPLATE:case f.TAG_ID.TITLE:e._err(t,u.ERR.abandonedHeadElementChild),e.openElements.push(e.headElement,f.TAG_ID.HEAD),k(e,t),e.openElements.remove(e.headElement);break;case f.TAG_ID.HEAD:e._err(t,u.ERR.misplacedStartTagForHeadElement);break;default:x(e,t)}}(this,e);break;case E.IN_BODY:z(this,e);break;case E.IN_TABLE:Q(this,e);break;case E.IN_TABLE_TEXT:ee(this,e);break;case E.IN_CAPTION:!function(e,t){const n=t.tagID;te.has(n)?e.openElements.hasInTableScope(f.TAG_ID.CAPTION)&&(e.openElements.generateImpliedEndTags(),e.openElements.popUntilTagNamePopped(f.TAG_ID.CAPTION),e.activeFormattingElements.clearToLastMarker(),e.insertionMode=E.IN_TABLE,Q(e,t)):z(e,t)}(this,e);break;case E.IN_COLUMN_GROUP:ne(this,e);break;case E.IN_TABLE_BODY:oe(this,e);break;case E.IN_ROW:ie(this,e);break;case E.IN_CELL:!function(e,t){const n=t.tagID;te.has(n)?(e.openElements.hasInTableScope(f.TAG_ID.TD)||e.openElements.hasInTableScope(f.TAG_ID.TH))&&(e._closeTableCell(),ie(e,t)):z(e,t)}(this,e);break;case E.IN_SELECT:le(this,e);break;case E.IN_SELECT_IN_TABLE:!function(e,t){const n=t.tagID;n===f.TAG_ID.CAPTION||n===f.TAG_ID.TABLE||n===f.TAG_ID.TBODY||n===f.TAG_ID.TFOOT||n===f.TAG_ID.THEAD||n===f.TAG_ID.TR||n===f.TAG_ID.TD||n===f.TAG_ID.TH?(e.openElements.popUntilTagNamePopped(f.TAG_ID.SELECT),e._resetInsertionMode(),e._processStartTag(t)):le(e,t)}(this,e);break;case E.IN_TEMPLATE:!function(e,t){switch(t.tagID){case f.TAG_ID.BASE:case f.TAG_ID.BASEFONT:case f.TAG_ID.BGSOUND:case f.TAG_ID.LINK:case f.TAG_ID.META:case f.TAG_ID.NOFRAMES:case f.TAG_ID.SCRIPT:case f.TAG_ID.STYLE:case f.TAG_ID.TEMPLATE:case f.TAG_ID.TITLE:k(e,t);break;case f.TAG_ID.CAPTION:case f.TAG_ID.COLGROUP:case f.TAG_ID.TBODY:case f.TAG_ID.TFOOT:case f.TAG_ID.THEAD:e.tmplInsertionModeStack[0]=E.IN_TABLE,e.insertionMode=E.IN_TABLE,Q(e,t);break;case f.TAG_ID.COL:e.tmplInsertionModeStack[0]=E.IN_COLUMN_GROUP,e.insertionMode=E.IN_COLUMN_GROUP,ne(e,t);break;case f.TAG_ID.TR:e.tmplInsertionModeStack[0]=E.IN_TABLE_BODY,e.insertionMode=E.IN_TABLE_BODY,oe(e,t);break;case f.TAG_ID.TD:case f.TAG_ID.TH:e.tmplInsertionModeStack[0]=E.IN_ROW,e.insertionMode=E.IN_ROW,ie(e,t);break;default:e.tmplInsertionModeStack[0]=E.IN_BODY,e.insertionMode=E.IN_BODY,z(e,t)}}(this,e);break;case E.AFTER_BODY:!function(e,t){t.tagID===f.TAG_ID.HTML?z(e,t):pe(e,t)}(this,e);break;case E.IN_FRAMESET:!function(e,t){switch(t.tagID){case f.TAG_ID.HTML:z(e,t);break;case f.TAG_ID.FRAMESET:e._insertElement(t,f.NS.HTML);break;case f.TAG_ID.FRAME:e._appendElement(t,f.NS.HTML),t.ackSelfClosing=!0;break;case f.TAG_ID.NOFRAMES:k(e,t)}}(this,e);break;case E.AFTER_FRAMESET:!function(e,t){switch(t.tagID){case f.TAG_ID.HTML:z(e,t);break;case f.TAG_ID.NOFRAMES:k(e,t)}}(this,e);break;case E.AFTER_AFTER_BODY:!function(e,t){t.tagID===f.TAG_ID.HTML?z(e,t):de(e,t)}(this,e);break;case E.AFTER_AFTER_FRAMESET:!function(e,t){switch(t.tagID){case f.TAG_ID.HTML:z(e,t);break;case f.TAG_ID.NOFRAMES:k(e,t)}}(this,e)}}onEndTag(e){this.skipNextNewLine=!1,this.currentToken=e,this.currentNotInHTML?function(e,t){if(t.tagID===f.TAG_ID.P||t.tagID===f.TAG_ID.BR)return he(e),void e._endTagOutsideForeignContent(t);for(let n=e.openElements.stackTop;n>0;n--){const r=e.openElements.items[n];if(e.treeAdapter.getNamespaceURI(r)===f.NS.HTML){e._endTagOutsideForeignContent(t);break}const o=e.treeAdapter.getTagName(r);if(o.toLowerCase()===t.tagName){t.tagName=o,e.openElements.shortenToLength(n);break}}}(this,e):this._endTagOutsideForeignContent(e)}_endTagOutsideForeignContent(e){switch(this.insertionMode){case E.INITIAL:D(this,e);break;case E.BEFORE_HTML:!function(e,t){const n=t.tagID;n!==f.TAG_ID.HTML&&n!==f.TAG_ID.HEAD&&n!==f.TAG_ID.BODY&&n!==f.TAG_ID.BR||P(e,t)}(this,e);break;case E.BEFORE_HEAD:!function(e,t){const n=t.tagID;n===f.TAG_ID.HEAD||n===f.TAG_ID.BODY||n===f.TAG_ID.HTML||n===f.TAG_ID.BR?R(e,t):e._err(t,u.ERR.endTagWithoutMatchingOpenElement)}(this,e);break;case E.IN_HEAD:!function(e,t){switch(t.tagID){case f.TAG_ID.HEAD:e.openElements.pop(),e.insertionMode=E.AFTER_HEAD;break;case f.TAG_ID.BODY:case f.TAG_ID.BR:case f.TAG_ID.HTML:L(e,t);break;case f.TAG_ID.TEMPLATE:w(e,t);break;default:e._err(t,u.ERR.endTagWithoutMatchingOpenElement)}}(this,e);break;case E.IN_HEAD_NO_SCRIPT:!function(e,t){switch(t.tagID){case f.TAG_ID.NOSCRIPT:e.openElements.pop(),e.insertionMode=E.IN_HEAD;break;case f.TAG_ID.BR:M(e,t);break;default:e._err(t,u.ERR.endTagWithoutMatchingOpenElement)}}(this,e);break;case E.AFTER_HEAD:!function(e,t){switch(t.tagID){case f.TAG_ID.BODY:case f.TAG_ID.HTML:case f.TAG_ID.BR:x(e,t);break;case f.TAG_ID.TEMPLATE:w(e,t);break;default:e._err(t,u.ERR.endTagWithoutMatchingOpenElement)}}(this,e);break;case E.IN_BODY:V(this,e);break;case E.TEXT:!function(e,t){var n;t.tagID===f.TAG_ID.SCRIPT&&(null===(n=e.scriptHandler)||void 0===n||n.call(e,e.openElements.current)),e.openElements.pop(),e.insertionMode=e.originalInsertionMode}(this,e);break;case E.IN_TABLE:X(this,e);break;case E.IN_TABLE_TEXT:ee(this,e);break;case E.IN_CAPTION:!function(e,t){const n=t.tagID;switch(n){case f.TAG_ID.CAPTION:case f.TAG_ID.TABLE:e.openElements.hasInTableScope(f.TAG_ID.CAPTION)&&(e.openElements.generateImpliedEndTags(),e.openElements.popUntilTagNamePopped(f.TAG_ID.CAPTION),e.activeFormattingElements.clearToLastMarker(),e.insertionMode=E.IN_TABLE,n===f.TAG_ID.TABLE&&X(e,t));break;case f.TAG_ID.BODY:case f.TAG_ID.COL:case f.TAG_ID.COLGROUP:case f.TAG_ID.HTML:case f.TAG_ID.TBODY:case f.TAG_ID.TD:case f.TAG_ID.TFOOT:case f.TAG_ID.TH:case f.TAG_ID.THEAD:case f.TAG_ID.TR:break;default:V(e,t)}}(this,e);break;case E.IN_COLUMN_GROUP:!function(e,t){switch(t.tagID){case f.TAG_ID.COLGROUP:e.openElements.currentTagId===f.TAG_ID.COLGROUP&&(e.openElements.pop(),e.insertionMode=E.IN_TABLE);break;case f.TAG_ID.TEMPLATE:w(e,t);break;case f.TAG_ID.COL:break;default:re(e,t)}}(this,e);break;case E.IN_TABLE_BODY:ae(this,e);break;case E.IN_ROW:se(this,e);break;case E.IN_CELL:!function(e,t){const n=t.tagID;switch(n){case f.TAG_ID.TD:case f.TAG_ID.TH:e.openElements.hasInTableScope(n)&&(e.openElements.generateImpliedEndTags(),e.openElements.popUntilTagNamePopped(n),e.activeFormattingElements.clearToLastMarker(),e.insertionMode=E.IN_ROW);break;case f.TAG_ID.TABLE:case f.TAG_ID.TBODY:case f.TAG_ID.TFOOT:case f.TAG_ID.THEAD:case f.TAG_ID.TR:e.openElements.hasInTableScope(n)&&(e._closeTableCell(),se(e,t));break;case f.TAG_ID.BODY:case f.TAG_ID.CAPTION:case f.TAG_ID.COL:case f.TAG_ID.COLGROUP:case f.TAG_ID.HTML:break;default:V(e,t)}}(this,e);break;case E.IN_SELECT:ue(this,e);break;case E.IN_SELECT_IN_TABLE:!function(e,t){const n=t.tagID;n===f.TAG_ID.CAPTION||n===f.TAG_ID.TABLE||n===f.TAG_ID.TBODY||n===f.TAG_ID.TFOOT||n===f.TAG_ID.THEAD||n===f.TAG_ID.TR||n===f.TAG_ID.TD||n===f.TAG_ID.TH?e.openElements.hasInTableScope(n)&&(e.openElements.popUntilTagNamePopped(f.TAG_ID.SELECT),e._resetInsertionMode(),e.onEndTag(t)):ue(e,t)}(this,e);break;case E.IN_TEMPLATE:!function(e,t){t.tagID===f.TAG_ID.TEMPLATE&&w(e,t)}(this,e);break;case E.AFTER_BODY:fe(this,e);break;case E.IN_FRAMESET:!function(e,t){t.tagID!==f.TAG_ID.FRAMESET||e.openElements.isRootHtmlElementCurrent()||(e.openElements.pop(),e.fragmentContext||e.openElements.currentTagId===f.TAG_ID.FRAMESET||(e.insertionMode=E.AFTER_FRAMESET))}(this,e);break;case E.AFTER_FRAMESET:!function(e,t){t.tagID===f.TAG_ID.HTML&&(e.insertionMode=E.AFTER_AFTER_FRAMESET)}(this,e);break;case E.AFTER_AFTER_BODY:de(this,e)}}onEof(e){switch(this.insertionMode){case E.INITIAL:D(this,e);break;case E.BEFORE_HTML:P(this,e);break;case E.BEFORE_HEAD:R(this,e);break;case E.IN_HEAD:L(this,e);break;case E.IN_HEAD_NO_SCRIPT:M(this,e);break;case E.AFTER_HEAD:x(this,e);break;case E.IN_BODY:case E.IN_TABLE:case E.IN_CAPTION:case E.IN_COLUMN_GROUP:case E.IN_TABLE_BODY:case E.IN_ROW:case E.IN_CELL:case E.IN_SELECT:case E.IN_SELECT_IN_TABLE:Y(this,e);break;case E.TEXT:!function(e,t){e._err(t,u.ERR.eofInElementThatCanContainOnlyText),e.openElements.pop(),e.insertionMode=e.originalInsertionMode,e.onEof(t)}(this,e);break;case E.IN_TABLE_TEXT:ee(this,e);break;case E.IN_TEMPLATE:ce(this,e);break;case E.AFTER_BODY:case E.IN_FRAMESET:case E.AFTER_FRAMESET:case E.AFTER_AFTER_BODY:case E.AFTER_AFTER_FRAMESET:O(this,e)}}onWhitespaceCharacter(e){if(this.skipNextNewLine&&(this.skipNextNewLine=!1,e.chars.charCodeAt(0)===c.CODE_POINTS.LINE_FEED)){if(1===e.chars.length)return;e.chars=e.chars.substr(1)}if(this.tokenizer.inForeignNode)this._insertCharacters(e);else switch(this.insertionMode){case E.IN_HEAD:case E.IN_HEAD_NO_SCRIPT:case E.AFTER_HEAD:case E.TEXT:case E.IN_COLUMN_GROUP:case E.IN_SELECT:case E.IN_SELECT_IN_TABLE:case E.IN_FRAMESET:case E.AFTER_FRAMESET:this._insertCharacters(e);break;case E.IN_BODY:case E.IN_CAPTION:case E.IN_CELL:case E.IN_TEMPLATE:case E.AFTER_BODY:case E.AFTER_AFTER_BODY:case E.AFTER_AFTER_FRAMESET:B(this,e);break;case E.IN_TABLE:case E.IN_TABLE_BODY:case E.IN_ROW:$(this,e);break;case E.IN_TABLE_TEXT:Z(this,e)}}};const te=new Set([f.TAG_ID.CAPTION,f.TAG_ID.COL,f.TAG_ID.COLGROUP,f.TAG_ID.TBODY,f.TAG_ID.TD,f.TAG_ID.TFOOT,f.TAG_ID.TH,f.TAG_ID.THEAD,f.TAG_ID.TR]);function ne(e,t){switch(t.tagID){case f.TAG_ID.HTML:z(e,t);break;case f.TAG_ID.COL:e._appendElement(t,f.NS.HTML),t.ackSelfClosing=!0;break;case f.TAG_ID.TEMPLATE:k(e,t);break;default:re(e,t)}}function re(e,t){e.openElements.currentTagId===f.TAG_ID.COLGROUP&&(e.openElements.pop(),e.insertionMode=E.IN_TABLE,e._processToken(t))}function oe(e,t){switch(t.tagID){case f.TAG_ID.TR:e.openElements.clearBackToTableBodyContext(),e._insertElement(t,f.NS.HTML),e.insertionMode=E.IN_ROW;break;case f.TAG_ID.TH:case f.TAG_ID.TD:e.openElements.clearBackToTableBodyContext(),e._insertFakeElement(f.TAG_NAMES.TR,f.TAG_ID.TR),e.insertionMode=E.IN_ROW,ie(e,t);break;case f.TAG_ID.CAPTION:case f.TAG_ID.COL:case f.TAG_ID.COLGROUP:case f.TAG_ID.TBODY:case f.TAG_ID.TFOOT:case f.TAG_ID.THEAD:e.openElements.hasTableBodyContextInTableScope()&&(e.openElements.clearBackToTableBodyContext(),e.openElements.pop(),e.insertionMode=E.IN_TABLE,Q(e,t));break;default:Q(e,t)}}function ae(e,t){const n=t.tagID;switch(t.tagID){case f.TAG_ID.TBODY:case f.TAG_ID.TFOOT:case f.TAG_ID.THEAD:e.openElements.hasInTableScope(n)&&(e.openElements.clearBackToTableBodyContext(),e.openElements.pop(),e.insertionMode=E.IN_TABLE);break;case f.TAG_ID.TABLE:e.openElements.hasTableBodyContextInTableScope()&&(e.openElements.clearBackToTableBodyContext(),e.openElements.pop(),e.insertionMode=E.IN_TABLE,X(e,t));break;case f.TAG_ID.BODY:case f.TAG_ID.CAPTION:case f.TAG_ID.COL:case f.TAG_ID.COLGROUP:case f.TAG_ID.HTML:case f.TAG_ID.TD:case f.TAG_ID.TH:case f.TAG_ID.TR:break;default:X(e,t)}}function ie(e,t){switch(t.tagID){case f.TAG_ID.TH:case f.TAG_ID.TD:e.openElements.clearBackToTableRowContext(),e._insertElement(t,f.NS.HTML),e.insertionMode=E.IN_CELL,e.activeFormattingElements.insertMarker();break;case f.TAG_ID.CAPTION:case f.TAG_ID.COL:case f.TAG_ID.COLGROUP:case f.TAG_ID.TBODY:case f.TAG_ID.TFOOT:case f.TAG_ID.THEAD:case f.TAG_ID.TR:e.openElements.hasInTableScope(f.TAG_ID.TR)&&(e.openElements.clearBackToTableRowContext(),e.openElements.pop(),e.insertionMode=E.IN_TABLE_BODY,oe(e,t));break;default:Q(e,t)}}function se(e,t){switch(t.tagID){case f.TAG_ID.TR:e.openElements.hasInTableScope(f.TAG_ID.TR)&&(e.openElements.clearBackToTableRowContext(),e.openElements.pop(),e.insertionMode=E.IN_TABLE_BODY);break;case f.TAG_ID.TABLE:e.openElements.hasInTableScope(f.TAG_ID.TR)&&(e.openElements.clearBackToTableRowContext(),e.openElements.pop(),e.insertionMode=E.IN_TABLE_BODY,ae(e,t));break;case f.TAG_ID.TBODY:case f.TAG_ID.TFOOT:case f.TAG_ID.THEAD:(e.openElements.hasInTableScope(t.tagID)||e.openElements.hasInTableScope(f.TAG_ID.TR))&&(e.openElements.clearBackToTableRowContext(),e.openElements.pop(),e.insertionMode=E.IN_TABLE_BODY,ae(e,t));break;case f.TAG_ID.BODY:case f.TAG_ID.CAPTION:case f.TAG_ID.COL:case f.TAG_ID.COLGROUP:case f.TAG_ID.HTML:case f.TAG_ID.TD:case f.TAG_ID.TH:break;default:X(e,t)}}function le(e,t){switch(t.tagID){case f.TAG_ID.HTML:z(e,t);break;case f.TAG_ID.OPTION:e.openElements.currentTagId===f.TAG_ID.OPTION&&e.openElements.pop(),e._insertElement(t,f.NS.HTML);break;case f.TAG_ID.OPTGROUP:e.openElements.currentTagId===f.TAG_ID.OPTION&&e.openElements.pop(),e.openElements.currentTagId===f.TAG_ID.OPTGROUP&&e.openElements.pop(),e._insertElement(t,f.NS.HTML);break;case f.TAG_ID.INPUT:case f.TAG_ID.KEYGEN:case f.TAG_ID.TEXTAREA:case f.TAG_ID.SELECT:e.openElements.hasInSelectScope(f.TAG_ID.SELECT)&&(e.openElements.popUntilTagNamePopped(f.TAG_ID.SELECT),e._resetInsertionMode(),t.tagID!==f.TAG_ID.SELECT&&e._processStartTag(t));break;case f.TAG_ID.SCRIPT:case f.TAG_ID.TEMPLATE:k(e,t)}}function ue(e,t){switch(t.tagID){case f.TAG_ID.OPTGROUP:e.openElements.stackTop>0&&e.openElements.currentTagId===f.TAG_ID.OPTION&&e.openElements.tagIDs[e.openElements.stackTop-1]===f.TAG_ID.OPTGROUP&&e.openElements.pop(),e.openElements.currentTagId===f.TAG_ID.OPTGROUP&&e.openElements.pop();break;case f.TAG_ID.OPTION:e.openElements.currentTagId===f.TAG_ID.OPTION&&e.openElements.pop();break;case f.TAG_ID.SELECT:e.openElements.hasInSelectScope(f.TAG_ID.SELECT)&&(e.openElements.popUntilTagNamePopped(f.TAG_ID.SELECT),e._resetInsertionMode());break;case f.TAG_ID.TEMPLATE:w(e,t)}}function ce(e,t){e.openElements.tmplCount>0?(e.openElements.popUntilTagNamePopped(f.TAG_ID.TEMPLATE),e.activeFormattingElements.clearToLastMarker(),e.tmplInsertionModeStack.shift(),e._resetInsertionMode(),e.onEof(t)):O(e,t)}function fe(e,t){var n;if(t.tagID===f.TAG_ID.HTML){if(e.fragmentContext||(e.insertionMode=E.AFTER_AFTER_BODY),e.options.sourceCodeLocationInfo&&e.openElements.tagIDs[0]===f.TAG_ID.HTML){e._setEndLocation(e.openElements.items[0],t);const r=e.openElements.items[1];r&&!(null===(n=e.treeAdapter.getNodeSourceCodeLocation(r))||void 0===n?void 0:n.endTag)&&e._setEndLocation(r,t)}}else pe(e,t)}function pe(e,t){e.insertionMode=E.IN_BODY,G(e,t)}function de(e,t){e.insertionMode=E.IN_BODY,G(e,t)}function he(e){for(;e.treeAdapter.getNamespaceURI(e.openElements.current)!==f.NS.HTML&&!e._isIntegrationPoint(e.openElements.currentTagId,e.openElements.current);)e.openElements.pop()}},5976:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.OpenElementStack=void 0;const r=n(2287),o=new Set([r.TAG_ID.DD,r.TAG_ID.DT,r.TAG_ID.LI,r.TAG_ID.OPTGROUP,r.TAG_ID.OPTION,r.TAG_ID.P,r.TAG_ID.RB,r.TAG_ID.RP,r.TAG_ID.RT,r.TAG_ID.RTC]),a=new Set([...o,r.TAG_ID.CAPTION,r.TAG_ID.COLGROUP,r.TAG_ID.TBODY,r.TAG_ID.TD,r.TAG_ID.TFOOT,r.TAG_ID.TH,r.TAG_ID.THEAD,r.TAG_ID.TR]),i=new Map([[r.TAG_ID.APPLET,r.NS.HTML],[r.TAG_ID.CAPTION,r.NS.HTML],[r.TAG_ID.HTML,r.NS.HTML],[r.TAG_ID.MARQUEE,r.NS.HTML],[r.TAG_ID.OBJECT,r.NS.HTML],[r.TAG_ID.TABLE,r.NS.HTML],[r.TAG_ID.TD,r.NS.HTML],[r.TAG_ID.TEMPLATE,r.NS.HTML],[r.TAG_ID.TH,r.NS.HTML],[r.TAG_ID.ANNOTATION_XML,r.NS.MATHML],[r.TAG_ID.MI,r.NS.MATHML],[r.TAG_ID.MN,r.NS.MATHML],[r.TAG_ID.MO,r.NS.MATHML],[r.TAG_ID.MS,r.NS.MATHML],[r.TAG_ID.MTEXT,r.NS.MATHML],[r.TAG_ID.DESC,r.NS.SVG],[r.TAG_ID.FOREIGN_OBJECT,r.NS.SVG],[r.TAG_ID.TITLE,r.NS.SVG]]),s=[r.TAG_ID.H1,r.TAG_ID.H2,r.TAG_ID.H3,r.TAG_ID.H4,r.TAG_ID.H5,r.TAG_ID.H6],l=[r.TAG_ID.TR,r.TAG_ID.TEMPLATE,r.TAG_ID.HTML],u=[r.TAG_ID.TBODY,r.TAG_ID.TFOOT,r.TAG_ID.THEAD,r.TAG_ID.TEMPLATE,r.TAG_ID.HTML],c=[r.TAG_ID.TABLE,r.TAG_ID.TEMPLATE,r.TAG_ID.HTML],f=[r.TAG_ID.TD,r.TAG_ID.TH];t.OpenElementStack=class{get currentTmplContentOrNode(){return this._isInTemplate()?this.treeAdapter.getTemplateContent(this.current):this.current}constructor(e,t,n){this.treeAdapter=t,this.handler=n,this.items=[],this.tagIDs=[],this.stackTop=-1,this.tmplCount=0,this.currentTagId=r.TAG_ID.UNKNOWN,this.current=e}_indexOf(e){return this.items.lastIndexOf(e,this.stackTop)}_isInTemplate(){return this.currentTagId===r.TAG_ID.TEMPLATE&&this.treeAdapter.getNamespaceURI(this.current)===r.NS.HTML}_updateCurrentElement(){this.current=this.items[this.stackTop],this.currentTagId=this.tagIDs[this.stackTop]}push(e,t){this.stackTop++,this.items[this.stackTop]=e,this.current=e,this.tagIDs[this.stackTop]=t,this.currentTagId=t,this._isInTemplate()&&this.tmplCount++,this.handler.onItemPush(e,t,!0)}pop(){const e=this.current;this.tmplCount>0&&this._isInTemplate()&&this.tmplCount--,this.stackTop--,this._updateCurrentElement(),this.handler.onItemPop(e,!0)}replace(e,t){const n=this._indexOf(e);this.items[n]=t,n===this.stackTop&&(this.current=t)}insertAfter(e,t,n){const r=this._indexOf(e)+1;this.items.splice(r,0,t),this.tagIDs.splice(r,0,n),this.stackTop++,r===this.stackTop&&this._updateCurrentElement(),this.handler.onItemPush(this.current,this.currentTagId,r===this.stackTop)}popUntilTagNamePopped(e){let t=this.stackTop+1;do{t=this.tagIDs.lastIndexOf(e,t-1)}while(t>0&&this.treeAdapter.getNamespaceURI(this.items[t])!==r.NS.HTML);this.shortenToLength(t<0?0:t)}shortenToLength(e){for(;this.stackTop>=e;){const t=this.current;this.tmplCount>0&&this._isInTemplate()&&(this.tmplCount-=1),this.stackTop--,this._updateCurrentElement(),this.handler.onItemPop(t,this.stackTop<e)}}popUntilElementPopped(e){const t=this._indexOf(e);this.shortenToLength(t<0?0:t)}popUntilPopped(e,t){const n=this._indexOfTagNames(e,t);this.shortenToLength(n<0?0:n)}popUntilNumberedHeaderPopped(){this.popUntilPopped(s,r.NS.HTML)}popUntilTableCellPopped(){this.popUntilPopped(f,r.NS.HTML)}popAllUpToHtmlElement(){this.tmplCount=0,this.shortenToLength(1)}_indexOfTagNames(e,t){for(let n=this.stackTop;n>=0;n--)if(e.includes(this.tagIDs[n])&&this.treeAdapter.getNamespaceURI(this.items[n])===t)return n;return-1}clearBackTo(e,t){const n=this._indexOfTagNames(e,t);this.shortenToLength(n+1)}clearBackToTableContext(){this.clearBackTo(c,r.NS.HTML)}clearBackToTableBodyContext(){this.clearBackTo(u,r.NS.HTML)}clearBackToTableRowContext(){this.clearBackTo(l,r.NS.HTML)}remove(e){const t=this._indexOf(e);t>=0&&(t===this.stackTop?this.pop():(this.items.splice(t,1),this.tagIDs.splice(t,1),this.stackTop--,this._updateCurrentElement(),this.handler.onItemPop(e,!1)))}tryPeekProperlyNestedBodyElement(){return this.stackTop>=1&&this.tagIDs[1]===r.TAG_ID.BODY?this.items[1]:null}contains(e){return this._indexOf(e)>-1}getCommonAncestor(e){const t=this._indexOf(e)-1;return t>=0?this.items[t]:null}isRootHtmlElementCurrent(){return 0===this.stackTop&&this.tagIDs[0]===r.TAG_ID.HTML}hasInScope(e){for(let t=this.stackTop;t>=0;t--){const n=this.tagIDs[t],o=this.treeAdapter.getNamespaceURI(this.items[t]);if(n===e&&o===r.NS.HTML)return!0;if(i.get(n)===o)return!1}return!0}hasNumberedHeaderInScope(){for(let e=this.stackTop;e>=0;e--){const t=this.tagIDs[e],n=this.treeAdapter.getNamespaceURI(this.items[e]);if((0,r.isNumberedHeader)(t)&&n===r.NS.HTML)return!0;if(i.get(t)===n)return!1}return!0}hasInListItemScope(e){for(let t=this.stackTop;t>=0;t--){const n=this.tagIDs[t],o=this.treeAdapter.getNamespaceURI(this.items[t]);if(n===e&&o===r.NS.HTML)return!0;if((n===r.TAG_ID.UL||n===r.TAG_ID.OL)&&o===r.NS.HTML||i.get(n)===o)return!1}return!0}hasInButtonScope(e){for(let t=this.stackTop;t>=0;t--){const n=this.tagIDs[t],o=this.treeAdapter.getNamespaceURI(this.items[t]);if(n===e&&o===r.NS.HTML)return!0;if(n===r.TAG_ID.BUTTON&&o===r.NS.HTML||i.get(n)===o)return!1}return!0}hasInTableScope(e){for(let t=this.stackTop;t>=0;t--){const n=this.tagIDs[t];if(this.treeAdapter.getNamespaceURI(this.items[t])===r.NS.HTML){if(n===e)return!0;if(n===r.TAG_ID.TABLE||n===r.TAG_ID.TEMPLATE||n===r.TAG_ID.HTML)return!1}}return!0}hasTableBodyContextInTableScope(){for(let e=this.stackTop;e>=0;e--){const t=this.tagIDs[e];if(this.treeAdapter.getNamespaceURI(this.items[e])===r.NS.HTML){if(t===r.TAG_ID.TBODY||t===r.TAG_ID.THEAD||t===r.TAG_ID.TFOOT)return!0;if(t===r.TAG_ID.TABLE||t===r.TAG_ID.HTML)return!1}}return!0}hasInSelectScope(e){for(let t=this.stackTop;t>=0;t--){const n=this.tagIDs[t];if(this.treeAdapter.getNamespaceURI(this.items[t])===r.NS.HTML){if(n===e)return!0;if(n!==r.TAG_ID.OPTION&&n!==r.TAG_ID.OPTGROUP)return!1}}return!0}generateImpliedEndTags(){for(;o.has(this.currentTagId);)this.pop()}generateImpliedEndTagsThoroughly(){for(;a.has(this.currentTagId);)this.pop()}generateImpliedEndTagsWithExclusion(e){for(;this.currentTagId!==e&&a.has(this.currentTagId);)this.pop()}}},661:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.serializeOuter=t.serialize=void 0;const r=n(2287),o=n(5987),a=n(4921),i=new Set([r.TAG_NAMES.AREA,r.TAG_NAMES.BASE,r.TAG_NAMES.BASEFONT,r.TAG_NAMES.BGSOUND,r.TAG_NAMES.BR,r.TAG_NAMES.COL,r.TAG_NAMES.EMBED,r.TAG_NAMES.FRAME,r.TAG_NAMES.HR,r.TAG_NAMES.IMG,r.TAG_NAMES.INPUT,r.TAG_NAMES.KEYGEN,r.TAG_NAMES.LINK,r.TAG_NAMES.META,r.TAG_NAMES.PARAM,r.TAG_NAMES.SOURCE,r.TAG_NAMES.TRACK,r.TAG_NAMES.WBR]);function s(e,t){return t.treeAdapter.isElementNode(e)&&t.treeAdapter.getNamespaceURI(e)===r.NS.HTML&&i.has(t.treeAdapter.getTagName(e))}const l={treeAdapter:a.defaultTreeAdapter,scriptingEnabled:!0};function u(e,t){let n="";const o=t.treeAdapter.isElementNode(e)&&t.treeAdapter.getTagName(e)===r.TAG_NAMES.TEMPLATE&&t.treeAdapter.getNamespaceURI(e)===r.NS.HTML?t.treeAdapter.getTemplateContent(e):e,a=t.treeAdapter.getChildNodes(o);if(a)for(const e of a)n+=c(e,t);return n}function c(e,t){return t.treeAdapter.isElementNode(e)?function(e,t){const n=t.treeAdapter.getTagName(e);return`<${n}${function(e,{treeAdapter:t}){let n="";for(const a of t.getAttrList(e)){if(n+=" ",a.namespace)switch(a.namespace){case r.NS.XML:n+=`xml:${a.name}`;break;case r.NS.XMLNS:"xmlns"!==a.name&&(n+="xmlns:"),n+=a.name;break;case r.NS.XLINK:n+=`xlink:${a.name}`;break;default:n+=`${a.prefix}:${a.name}`}else n+=a.name;n+=`="${(0,o.escapeAttribute)(a.value)}"`}return n}(e,t)}>${s(e,t)?"":`${u(e,t)}</${n}>`}`}(e,t):t.treeAdapter.isTextNode(e)?function(e,t){const{treeAdapter:n}=t,a=n.getTextNodeContent(e),i=n.getParentNode(e),s=i&&n.isElementNode(i)&&n.getTagName(i);return s&&n.getNamespaceURI(i)===r.NS.HTML&&(0,r.hasUnescapedText)(s,t.scriptingEnabled)?a:(0,o.escapeText)(a)}(e,t):t.treeAdapter.isCommentNode(e)?function(e,{treeAdapter:t}){return`\x3c!--${t.getCommentNodeContent(e)}--\x3e`}(e,t):t.treeAdapter.isDocumentTypeNode(e)?function(e,{treeAdapter:t}){return`<!DOCTYPE ${t.getDocumentTypeNodeName(e)}>`}(e,t):""}t.serialize=function(e,t){const n=Object.assign(Object.assign({},l),t);return s(e,n)?"":u(e,n)},t.serializeOuter=function(e,t){return c(e,Object.assign(Object.assign({},l),t))}},1786:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Tokenizer=t.TokenizerMode=void 0;const r=n(2431),o=n(791),a=n(6389),i=n(9878),s=n(9425),l=n(2287),u=new Map([[128,8364],[130,8218],[131,402],[132,8222],[133,8230],[134,8224],[135,8225],[136,710],[137,8240],[138,352],[139,8249],[140,338],[142,381],[145,8216],[146,8217],[147,8220],[148,8221],[149,8226],[150,8211],[151,8212],[152,732],[153,8482],[154,353],[155,8250],[156,339],[158,382],[159,376]]);var c;function f(e){return e>=o.CODE_POINTS.DIGIT_0&&e<=o.CODE_POINTS.DIGIT_9}function p(e){return e>=o.CODE_POINTS.LATIN_CAPITAL_A&&e<=o.CODE_POINTS.LATIN_CAPITAL_Z}function d(e){return function(e){return e>=o.CODE_POINTS.LATIN_SMALL_A&&e<=o.CODE_POINTS.LATIN_SMALL_Z}(e)||p(e)}function h(e){return d(e)||f(e)}function m(e){return e>=o.CODE_POINTS.LATIN_CAPITAL_A&&e<=o.CODE_POINTS.LATIN_CAPITAL_F}function E(e){return e>=o.CODE_POINTS.LATIN_SMALL_A&&e<=o.CODE_POINTS.LATIN_SMALL_F}function T(e){return e+32}function g(e){return e===o.CODE_POINTS.SPACE||e===o.CODE_POINTS.LINE_FEED||e===o.CODE_POINTS.TABULATION||e===o.CODE_POINTS.FORM_FEED}function y(e){return g(e)||e===o.CODE_POINTS.SOLIDUS||e===o.CODE_POINTS.GREATER_THAN_SIGN}!function(e){e[e.DATA=0]="DATA",e[e.RCDATA=1]="RCDATA",e[e.RAWTEXT=2]="RAWTEXT",e[e.SCRIPT_DATA=3]="SCRIPT_DATA",e[e.PLAINTEXT=4]="PLAINTEXT",e[e.TAG_OPEN=5]="TAG_OPEN",e[e.END_TAG_OPEN=6]="END_TAG_OPEN",e[e.TAG_NAME=7]="TAG_NAME",e[e.RCDATA_LESS_THAN_SIGN=8]="RCDATA_LESS_THAN_SIGN",e[e.RCDATA_END_TAG_OPEN=9]="RCDATA_END_TAG_OPEN",e[e.RCDATA_END_TAG_NAME=10]="RCDATA_END_TAG_NAME",e[e.RAWTEXT_LESS_THAN_SIGN=11]="RAWTEXT_LESS_THAN_SIGN",e[e.RAWTEXT_END_TAG_OPEN=12]="RAWTEXT_END_TAG_OPEN",e[e.RAWTEXT_END_TAG_NAME=13]="RAWTEXT_END_TAG_NAME",e[e.SCRIPT_DATA_LESS_THAN_SIGN=14]="SCRIPT_DATA_LESS_THAN_SIGN",e[e.SCRIPT_DATA_END_TAG_OPEN=15]="SCRIPT_DATA_END_TAG_OPEN",e[e.SCRIPT_DATA_END_TAG_NAME=16]="SCRIPT_DATA_END_TAG_NAME",e[e.SCRIPT_DATA_ESCAPE_START=17]="SCRIPT_DATA_ESCAPE_START",e[e.SCRIPT_DATA_ESCAPE_START_DASH=18]="SCRIPT_DATA_ESCAPE_START_DASH",e[e.SCRIPT_DATA_ESCAPED=19]="SCRIPT_DATA_ESCAPED",e[e.SCRIPT_DATA_ESCAPED_DASH=20]="SCRIPT_DATA_ESCAPED_DASH",e[e.SCRIPT_DATA_ESCAPED_DASH_DASH=21]="SCRIPT_DATA_ESCAPED_DASH_DASH",e[e.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN=22]="SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN",e[e.SCRIPT_DATA_ESCAPED_END_TAG_OPEN=23]="SCRIPT_DATA_ESCAPED_END_TAG_OPEN",e[e.SCRIPT_DATA_ESCAPED_END_TAG_NAME=24]="SCRIPT_DATA_ESCAPED_END_TAG_NAME",e[e.SCRIPT_DATA_DOUBLE_ESCAPE_START=25]="SCRIPT_DATA_DOUBLE_ESCAPE_START",e[e.SCRIPT_DATA_DOUBLE_ESCAPED=26]="SCRIPT_DATA_DOUBLE_ESCAPED",e[e.SCRIPT_DATA_DOUBLE_ESCAPED_DASH=27]="SCRIPT_DATA_DOUBLE_ESCAPED_DASH",e[e.SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH=28]="SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH",e[e.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN=29]="SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN",e[e.SCRIPT_DATA_DOUBLE_ESCAPE_END=30]="SCRIPT_DATA_DOUBLE_ESCAPE_END",e[e.BEFORE_ATTRIBUTE_NAME=31]="BEFORE_ATTRIBUTE_NAME",e[e.ATTRIBUTE_NAME=32]="ATTRIBUTE_NAME",e[e.AFTER_ATTRIBUTE_NAME=33]="AFTER_ATTRIBUTE_NAME",e[e.BEFORE_ATTRIBUTE_VALUE=34]="BEFORE_ATTRIBUTE_VALUE",e[e.ATTRIBUTE_VALUE_DOUBLE_QUOTED=35]="ATTRIBUTE_VALUE_DOUBLE_QUOTED",e[e.ATTRIBUTE_VALUE_SINGLE_QUOTED=36]="ATTRIBUTE_VALUE_SINGLE_QUOTED",e[e.ATTRIBUTE_VALUE_UNQUOTED=37]="ATTRIBUTE_VALUE_UNQUOTED",e[e.AFTER_ATTRIBUTE_VALUE_QUOTED=38]="AFTER_ATTRIBUTE_VALUE_QUOTED",e[e.SELF_CLOSING_START_TAG=39]="SELF_CLOSING_START_TAG",e[e.BOGUS_COMMENT=40]="BOGUS_COMMENT",e[e.MARKUP_DECLARATION_OPEN=41]="MARKUP_DECLARATION_OPEN",e[e.COMMENT_START=42]="COMMENT_START",e[e.COMMENT_START_DASH=43]="COMMENT_START_DASH",e[e.COMMENT=44]="COMMENT",e[e.COMMENT_LESS_THAN_SIGN=45]="COMMENT_LESS_THAN_SIGN",e[e.COMMENT_LESS_THAN_SIGN_BANG=46]="COMMENT_LESS_THAN_SIGN_BANG",e[e.COMMENT_LESS_THAN_SIGN_BANG_DASH=47]="COMMENT_LESS_THAN_SIGN_BANG_DASH",e[e.COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH=48]="COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH",e[e.COMMENT_END_DASH=49]="COMMENT_END_DASH",e[e.COMMENT_END=50]="COMMENT_END",e[e.COMMENT_END_BANG=51]="COMMENT_END_BANG",e[e.DOCTYPE=52]="DOCTYPE",e[e.BEFORE_DOCTYPE_NAME=53]="BEFORE_DOCTYPE_NAME",e[e.DOCTYPE_NAME=54]="DOCTYPE_NAME",e[e.AFTER_DOCTYPE_NAME=55]="AFTER_DOCTYPE_NAME",e[e.AFTER_DOCTYPE_PUBLIC_KEYWORD=56]="AFTER_DOCTYPE_PUBLIC_KEYWORD",e[e.BEFORE_DOCTYPE_PUBLIC_IDENTIFIER=57]="BEFORE_DOCTYPE_PUBLIC_IDENTIFIER",e[e.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED=58]="DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED",e[e.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED=59]="DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED",e[e.AFTER_DOCTYPE_PUBLIC_IDENTIFIER=60]="AFTER_DOCTYPE_PUBLIC_IDENTIFIER",e[e.BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS=61]="BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS",e[e.AFTER_DOCTYPE_SYSTEM_KEYWORD=62]="AFTER_DOCTYPE_SYSTEM_KEYWORD",e[e.BEFORE_DOCTYPE_SYSTEM_IDENTIFIER=63]="BEFORE_DOCTYPE_SYSTEM_IDENTIFIER",e[e.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED=64]="DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED",e[e.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED=65]="DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED",e[e.AFTER_DOCTYPE_SYSTEM_IDENTIFIER=66]="AFTER_DOCTYPE_SYSTEM_IDENTIFIER",e[e.BOGUS_DOCTYPE=67]="BOGUS_DOCTYPE",e[e.CDATA_SECTION=68]="CDATA_SECTION",e[e.CDATA_SECTION_BRACKET=69]="CDATA_SECTION_BRACKET",e[e.CDATA_SECTION_END=70]="CDATA_SECTION_END",e[e.CHARACTER_REFERENCE=71]="CHARACTER_REFERENCE",e[e.NAMED_CHARACTER_REFERENCE=72]="NAMED_CHARACTER_REFERENCE",e[e.AMBIGUOUS_AMPERSAND=73]="AMBIGUOUS_AMPERSAND",e[e.NUMERIC_CHARACTER_REFERENCE=74]="NUMERIC_CHARACTER_REFERENCE",e[e.HEXADEMICAL_CHARACTER_REFERENCE_START=75]="HEXADEMICAL_CHARACTER_REFERENCE_START",e[e.HEXADEMICAL_CHARACTER_REFERENCE=76]="HEXADEMICAL_CHARACTER_REFERENCE",e[e.DECIMAL_CHARACTER_REFERENCE=77]="DECIMAL_CHARACTER_REFERENCE",e[e.NUMERIC_CHARACTER_REFERENCE_END=78]="NUMERIC_CHARACTER_REFERENCE_END"}(c||(c={})),t.TokenizerMode={DATA:c.DATA,RCDATA:c.RCDATA,RAWTEXT:c.RAWTEXT,SCRIPT_DATA:c.SCRIPT_DATA,PLAINTEXT:c.PLAINTEXT,CDATA_SECTION:c.CDATA_SECTION},t.Tokenizer=class{constructor(e,t){this.options=e,this.handler=t,this.paused=!1,this.inLoop=!1,this.inForeignNode=!1,this.lastStartTagName="",this.active=!1,this.state=c.DATA,this.returnState=c.DATA,this.charRefCode=-1,this.consumedAfterSnapshot=-1,this.currentCharacterToken=null,this.currentToken=null,this.currentAttr={name:"",value:""},this.preprocessor=new r.Preprocessor(t),this.currentLocation=this.getCurrentLocation(-1)}_err(e){var t,n;null===(n=(t=this.handler).onParseError)||void 0===n||n.call(t,this.preprocessor.getError(e))}getCurrentLocation(e){return this.options.sourceCodeLocationInfo?{startLine:this.preprocessor.line,startCol:this.preprocessor.col-e,startOffset:this.preprocessor.offset-e,endLine:-1,endCol:-1,endOffset:-1}:null}_runParsingLoop(){if(!this.inLoop){for(this.inLoop=!0;this.active&&!this.paused;){this.consumedAfterSnapshot=0;const e=this._consume();this._ensureHibernation()||this._callState(e)}this.inLoop=!1}}pause(){this.paused=!0}resume(e){if(!this.paused)throw new Error("Parser was already resumed");this.paused=!1,this.inLoop||(this._runParsingLoop(),this.paused||null==e||e())}write(e,t,n){this.active=!0,this.preprocessor.write(e,t),this._runParsingLoop(),this.paused||null==n||n()}insertHtmlAtCurrentPos(e){this.active=!0,this.preprocessor.insertHtmlAtCurrentPos(e),this._runParsingLoop()}_ensureHibernation(){return!!this.preprocessor.endOfChunkHit&&(this._unconsume(this.consumedAfterSnapshot),this.active=!1,!0)}_consume(){return this.consumedAfterSnapshot++,this.preprocessor.advance()}_unconsume(e){this.consumedAfterSnapshot-=e,this.preprocessor.retreat(e)}_reconsumeInState(e,t){this.state=e,this._callState(t)}_advanceBy(e){this.consumedAfterSnapshot+=e;for(let t=0;t<e;t++)this.preprocessor.advance()}_consumeSequenceIfMatch(e,t){return!!this.preprocessor.startsWith(e,t)&&(this._advanceBy(e.length-1),!0)}_createStartTagToken(){this.currentToken={type:a.TokenType.START_TAG,tagName:"",tagID:l.TAG_ID.UNKNOWN,selfClosing:!1,ackSelfClosing:!1,attrs:[],location:this.getCurrentLocation(1)}}_createEndTagToken(){this.currentToken={type:a.TokenType.END_TAG,tagName:"",tagID:l.TAG_ID.UNKNOWN,selfClosing:!1,ackSelfClosing:!1,attrs:[],location:this.getCurrentLocation(2)}}_createCommentToken(e){this.currentToken={type:a.TokenType.COMMENT,data:"",location:this.getCurrentLocation(e)}}_createDoctypeToken(e){this.currentToken={type:a.TokenType.DOCTYPE,name:e,forceQuirks:!1,publicId:null,systemId:null,location:this.currentLocation}}_createCharacterToken(e,t){this.currentCharacterToken={type:e,chars:t,location:this.currentLocation}}_createAttr(e){this.currentAttr={name:e,value:""},this.currentLocation=this.getCurrentLocation(0)}_leaveAttrName(){var e,t;const n=this.currentToken;null===(0,a.getTokenAttr)(n,this.currentAttr.name)?(n.attrs.push(this.currentAttr),n.location&&this.currentLocation&&((null!==(e=(t=n.location).attrs)&&void 0!==e?e:t.attrs=Object.create(null))[this.currentAttr.name]=this.currentLocation,this._leaveAttrValue())):this._err(s.ERR.duplicateAttribute)}_leaveAttrValue(){this.currentLocation&&(this.currentLocation.endLine=this.preprocessor.line,this.currentLocation.endCol=this.preprocessor.col,this.currentLocation.endOffset=this.preprocessor.offset)}prepareToken(e){this._emitCurrentCharacterToken(e.location),this.currentToken=null,e.location&&(e.location.endLine=this.preprocessor.line,e.location.endCol=this.preprocessor.col+1,e.location.endOffset=this.preprocessor.offset+1),this.currentLocation=this.getCurrentLocation(-1)}emitCurrentTagToken(){const e=this.currentToken;this.prepareToken(e),e.tagID=(0,l.getTagID)(e.tagName),e.type===a.TokenType.START_TAG?(this.lastStartTagName=e.tagName,this.handler.onStartTag(e)):(e.attrs.length>0&&this._err(s.ERR.endTagWithAttributes),e.selfClosing&&this._err(s.ERR.endTagWithTrailingSolidus),this.handler.onEndTag(e)),this.preprocessor.dropParsedChunk()}emitCurrentComment(e){this.prepareToken(e),this.handler.onComment(e),this.preprocessor.dropParsedChunk()}emitCurrentDoctype(e){this.prepareToken(e),this.handler.onDoctype(e),this.preprocessor.dropParsedChunk()}_emitCurrentCharacterToken(e){if(this.currentCharacterToken){switch(e&&this.currentCharacterToken.location&&(this.currentCharacterToken.location.endLine=e.startLine,this.currentCharacterToken.location.endCol=e.startCol,this.currentCharacterToken.location.endOffset=e.startOffset),this.currentCharacterToken.type){case a.TokenType.CHARACTER:this.handler.onCharacter(this.currentCharacterToken);break;case a.TokenType.NULL_CHARACTER:this.handler.onNullCharacter(this.currentCharacterToken);break;case a.TokenType.WHITESPACE_CHARACTER:this.handler.onWhitespaceCharacter(this.currentCharacterToken)}this.currentCharacterToken=null}}_emitEOFToken(){const e=this.getCurrentLocation(0);e&&(e.endLine=e.startLine,e.endCol=e.startCol,e.endOffset=e.startOffset),this._emitCurrentCharacterToken(e),this.handler.onEof({type:a.TokenType.EOF,location:e}),this.active=!1}_appendCharToCurrentCharacterToken(e,t){if(this.currentCharacterToken){if(this.currentCharacterToken.type===e)return void(this.currentCharacterToken.chars+=t);this.currentLocation=this.getCurrentLocation(0),this._emitCurrentCharacterToken(this.currentLocation),this.preprocessor.dropParsedChunk()}this._createCharacterToken(e,t)}_emitCodePoint(e){const t=g(e)?a.TokenType.WHITESPACE_CHARACTER:e===o.CODE_POINTS.NULL?a.TokenType.NULL_CHARACTER:a.TokenType.CHARACTER;this._appendCharToCurrentCharacterToken(t,String.fromCodePoint(e))}_emitChars(e){this._appendCharToCurrentCharacterToken(a.TokenType.CHARACTER,e)}_matchNamedCharacterReference(e){let t=null,n=0,r=!1;for(let s=0,l=i.htmlDecodeTree[0];s>=0&&(s=(0,i.determineBranch)(i.htmlDecodeTree,l,s+1,e),!(s<0));e=this._consume()){n+=1,l=i.htmlDecodeTree[s];const u=l&i.BinTrieFlags.VALUE_LENGTH;if(u){const l=(u>>14)-1;if(e!==o.CODE_POINTS.SEMICOLON&&this._isCharacterReferenceInAttribute()&&((a=this.preprocessor.peek(1))===o.CODE_POINTS.EQUALS_SIGN||h(a))?(t=[o.CODE_POINTS.AMPERSAND],s+=l):(t=0===l?[i.htmlDecodeTree[s]&~i.BinTrieFlags.VALUE_LENGTH]:1===l?[i.htmlDecodeTree[++s]]:[i.htmlDecodeTree[++s],i.htmlDecodeTree[++s]],n=0,r=e!==o.CODE_POINTS.SEMICOLON),0===l){this._consume();break}}}var a;return this._unconsume(n),r&&!this.preprocessor.endOfChunkHit&&this._err(s.ERR.missingSemicolonAfterCharacterReference),this._unconsume(1),t}_isCharacterReferenceInAttribute(){return this.returnState===c.ATTRIBUTE_VALUE_DOUBLE_QUOTED||this.returnState===c.ATTRIBUTE_VALUE_SINGLE_QUOTED||this.returnState===c.ATTRIBUTE_VALUE_UNQUOTED}_flushCodePointConsumedAsCharacterReference(e){this._isCharacterReferenceInAttribute()?this.currentAttr.value+=String.fromCodePoint(e):this._emitCodePoint(e)}_callState(e){switch(this.state){case c.DATA:this._stateData(e);break;case c.RCDATA:this._stateRcdata(e);break;case c.RAWTEXT:this._stateRawtext(e);break;case c.SCRIPT_DATA:this._stateScriptData(e);break;case c.PLAINTEXT:this._statePlaintext(e);break;case c.TAG_OPEN:this._stateTagOpen(e);break;case c.END_TAG_OPEN:this._stateEndTagOpen(e);break;case c.TAG_NAME:this._stateTagName(e);break;case c.RCDATA_LESS_THAN_SIGN:this._stateRcdataLessThanSign(e);break;case c.RCDATA_END_TAG_OPEN:this._stateRcdataEndTagOpen(e);break;case c.RCDATA_END_TAG_NAME:this._stateRcdataEndTagName(e);break;case c.RAWTEXT_LESS_THAN_SIGN:this._stateRawtextLessThanSign(e);break;case c.RAWTEXT_END_TAG_OPEN:this._stateRawtextEndTagOpen(e);break;case c.RAWTEXT_END_TAG_NAME:this._stateRawtextEndTagName(e);break;case c.SCRIPT_DATA_LESS_THAN_SIGN:this._stateScriptDataLessThanSign(e);break;case c.SCRIPT_DATA_END_TAG_OPEN:this._stateScriptDataEndTagOpen(e);break;case c.SCRIPT_DATA_END_TAG_NAME:this._stateScriptDataEndTagName(e);break;case c.SCRIPT_DATA_ESCAPE_START:this._stateScriptDataEscapeStart(e);break;case c.SCRIPT_DATA_ESCAPE_START_DASH:this._stateScriptDataEscapeStartDash(e);break;case c.SCRIPT_DATA_ESCAPED:this._stateScriptDataEscaped(e);break;case c.SCRIPT_DATA_ESCAPED_DASH:this._stateScriptDataEscapedDash(e);break;case c.SCRIPT_DATA_ESCAPED_DASH_DASH:this._stateScriptDataEscapedDashDash(e);break;case c.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN:this._stateScriptDataEscapedLessThanSign(e);break;case c.SCRIPT_DATA_ESCAPED_END_TAG_OPEN:this._stateScriptDataEscapedEndTagOpen(e);break;case c.SCRIPT_DATA_ESCAPED_END_TAG_NAME:this._stateScriptDataEscapedEndTagName(e);break;case c.SCRIPT_DATA_DOUBLE_ESCAPE_START:this._stateScriptDataDoubleEscapeStart(e);break;case c.SCRIPT_DATA_DOUBLE_ESCAPED:this._stateScriptDataDoubleEscaped(e);break;case c.SCRIPT_DATA_DOUBLE_ESCAPED_DASH:this._stateScriptDataDoubleEscapedDash(e);break;case c.SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH:this._stateScriptDataDoubleEscapedDashDash(e);break;case c.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN:this._stateScriptDataDoubleEscapedLessThanSign(e);break;case c.SCRIPT_DATA_DOUBLE_ESCAPE_END:this._stateScriptDataDoubleEscapeEnd(e);break;case c.BEFORE_ATTRIBUTE_NAME:this._stateBeforeAttributeName(e);break;case c.ATTRIBUTE_NAME:this._stateAttributeName(e);break;case c.AFTER_ATTRIBUTE_NAME:this._stateAfterAttributeName(e);break;case c.BEFORE_ATTRIBUTE_VALUE:this._stateBeforeAttributeValue(e);break;case c.ATTRIBUTE_VALUE_DOUBLE_QUOTED:this._stateAttributeValueDoubleQuoted(e);break;case c.ATTRIBUTE_VALUE_SINGLE_QUOTED:this._stateAttributeValueSingleQuoted(e);break;case c.ATTRIBUTE_VALUE_UNQUOTED:this._stateAttributeValueUnquoted(e);break;case c.AFTER_ATTRIBUTE_VALUE_QUOTED:this._stateAfterAttributeValueQuoted(e);break;case c.SELF_CLOSING_START_TAG:this._stateSelfClosingStartTag(e);break;case c.BOGUS_COMMENT:this._stateBogusComment(e);break;case c.MARKUP_DECLARATION_OPEN:this._stateMarkupDeclarationOpen(e);break;case c.COMMENT_START:this._stateCommentStart(e);break;case c.COMMENT_START_DASH:this._stateCommentStartDash(e);break;case c.COMMENT:this._stateComment(e);break;case c.COMMENT_LESS_THAN_SIGN:this._stateCommentLessThanSign(e);break;case c.COMMENT_LESS_THAN_SIGN_BANG:this._stateCommentLessThanSignBang(e);break;case c.COMMENT_LESS_THAN_SIGN_BANG_DASH:this._stateCommentLessThanSignBangDash(e);break;case c.COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH:this._stateCommentLessThanSignBangDashDash(e);break;case c.COMMENT_END_DASH:this._stateCommentEndDash(e);break;case c.COMMENT_END:this._stateCommentEnd(e);break;case c.COMMENT_END_BANG:this._stateCommentEndBang(e);break;case c.DOCTYPE:this._stateDoctype(e);break;case c.BEFORE_DOCTYPE_NAME:this._stateBeforeDoctypeName(e);break;case c.DOCTYPE_NAME:this._stateDoctypeName(e);break;case c.AFTER_DOCTYPE_NAME:this._stateAfterDoctypeName(e);break;case c.AFTER_DOCTYPE_PUBLIC_KEYWORD:this._stateAfterDoctypePublicKeyword(e);break;case c.BEFORE_DOCTYPE_PUBLIC_IDENTIFIER:this._stateBeforeDoctypePublicIdentifier(e);break;case c.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED:this._stateDoctypePublicIdentifierDoubleQuoted(e);break;case c.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED:this._stateDoctypePublicIdentifierSingleQuoted(e);break;case c.AFTER_DOCTYPE_PUBLIC_IDENTIFIER:this._stateAfterDoctypePublicIdentifier(e);break;case c.BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS:this._stateBetweenDoctypePublicAndSystemIdentifiers(e);break;case c.AFTER_DOCTYPE_SYSTEM_KEYWORD:this._stateAfterDoctypeSystemKeyword(e);break;case c.BEFORE_DOCTYPE_SYSTEM_IDENTIFIER:this._stateBeforeDoctypeSystemIdentifier(e);break;case c.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED:this._stateDoctypeSystemIdentifierDoubleQuoted(e);break;case c.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED:this._stateDoctypeSystemIdentifierSingleQuoted(e);break;case c.AFTER_DOCTYPE_SYSTEM_IDENTIFIER:this._stateAfterDoctypeSystemIdentifier(e);break;case c.BOGUS_DOCTYPE:this._stateBogusDoctype(e);break;case c.CDATA_SECTION:this._stateCdataSection(e);break;case c.CDATA_SECTION_BRACKET:this._stateCdataSectionBracket(e);break;case c.CDATA_SECTION_END:this._stateCdataSectionEnd(e);break;case c.CHARACTER_REFERENCE:this._stateCharacterReference(e);break;case c.NAMED_CHARACTER_REFERENCE:this._stateNamedCharacterReference(e);break;case c.AMBIGUOUS_AMPERSAND:this._stateAmbiguousAmpersand(e);break;case c.NUMERIC_CHARACTER_REFERENCE:this._stateNumericCharacterReference(e);break;case c.HEXADEMICAL_CHARACTER_REFERENCE_START:this._stateHexademicalCharacterReferenceStart(e);break;case c.HEXADEMICAL_CHARACTER_REFERENCE:this._stateHexademicalCharacterReference(e);break;case c.DECIMAL_CHARACTER_REFERENCE:this._stateDecimalCharacterReference(e);break;case c.NUMERIC_CHARACTER_REFERENCE_END:this._stateNumericCharacterReferenceEnd(e);break;default:throw new Error("Unknown state")}}_stateData(e){switch(e){case o.CODE_POINTS.LESS_THAN_SIGN:this.state=c.TAG_OPEN;break;case o.CODE_POINTS.AMPERSAND:this.returnState=c.DATA,this.state=c.CHARACTER_REFERENCE;break;case o.CODE_POINTS.NULL:this._err(s.ERR.unexpectedNullCharacter),this._emitCodePoint(e);break;case o.CODE_POINTS.EOF:this._emitEOFToken();break;default:this._emitCodePoint(e)}}_stateRcdata(e){switch(e){case o.CODE_POINTS.AMPERSAND:this.returnState=c.RCDATA,this.state=c.CHARACTER_REFERENCE;break;case o.CODE_POINTS.LESS_THAN_SIGN:this.state=c.RCDATA_LESS_THAN_SIGN;break;case o.CODE_POINTS.NULL:this._err(s.ERR.unexpectedNullCharacter),this._emitChars(o.REPLACEMENT_CHARACTER);break;case o.CODE_POINTS.EOF:this._emitEOFToken();break;default:this._emitCodePoint(e)}}_stateRawtext(e){switch(e){case o.CODE_POINTS.LESS_THAN_SIGN:this.state=c.RAWTEXT_LESS_THAN_SIGN;break;case o.CODE_POINTS.NULL:this._err(s.ERR.unexpectedNullCharacter),this._emitChars(o.REPLACEMENT_CHARACTER);break;case o.CODE_POINTS.EOF:this._emitEOFToken();break;default:this._emitCodePoint(e)}}_stateScriptData(e){switch(e){case o.CODE_POINTS.LESS_THAN_SIGN:this.state=c.SCRIPT_DATA_LESS_THAN_SIGN;break;case o.CODE_POINTS.NULL:this._err(s.ERR.unexpectedNullCharacter),this._emitChars(o.REPLACEMENT_CHARACTER);break;case o.CODE_POINTS.EOF:this._emitEOFToken();break;default:this._emitCodePoint(e)}}_statePlaintext(e){switch(e){case o.CODE_POINTS.NULL:this._err(s.ERR.unexpectedNullCharacter),this._emitChars(o.REPLACEMENT_CHARACTER);break;case o.CODE_POINTS.EOF:this._emitEOFToken();break;default:this._emitCodePoint(e)}}_stateTagOpen(e){if(d(e))this._createStartTagToken(),this.state=c.TAG_NAME,this._stateTagName(e);else switch(e){case o.CODE_POINTS.EXCLAMATION_MARK:this.state=c.MARKUP_DECLARATION_OPEN;break;case o.CODE_POINTS.SOLIDUS:this.state=c.END_TAG_OPEN;break;case o.CODE_POINTS.QUESTION_MARK:this._err(s.ERR.unexpectedQuestionMarkInsteadOfTagName),this._createCommentToken(1),this.state=c.BOGUS_COMMENT,this._stateBogusComment(e);break;case o.CODE_POINTS.EOF:this._err(s.ERR.eofBeforeTagName),this._emitChars("<"),this._emitEOFToken();break;default:this._err(s.ERR.invalidFirstCharacterOfTagName),this._emitChars("<"),this.state=c.DATA,this._stateData(e)}}_stateEndTagOpen(e){if(d(e))this._createEndTagToken(),this.state=c.TAG_NAME,this._stateTagName(e);else switch(e){case o.CODE_POINTS.GREATER_THAN_SIGN:this._err(s.ERR.missingEndTagName),this.state=c.DATA;break;case o.CODE_POINTS.EOF:this._err(s.ERR.eofBeforeTagName),this._emitChars("</"),this._emitEOFToken();break;default:this._err(s.ERR.invalidFirstCharacterOfTagName),this._createCommentToken(2),this.state=c.BOGUS_COMMENT,this._stateBogusComment(e)}}_stateTagName(e){const t=this.currentToken;switch(e){case o.CODE_POINTS.SPACE:case o.CODE_POINTS.LINE_FEED:case o.CODE_POINTS.TABULATION:case o.CODE_POINTS.FORM_FEED:this.state=c.BEFORE_ATTRIBUTE_NAME;break;case o.CODE_POINTS.SOLIDUS:this.state=c.SELF_CLOSING_START_TAG;break;case o.CODE_POINTS.GREATER_THAN_SIGN:this.state=c.DATA,this.emitCurrentTagToken();break;case o.CODE_POINTS.NULL:this._err(s.ERR.unexpectedNullCharacter),t.tagName+=o.REPLACEMENT_CHARACTER;break;case o.CODE_POINTS.EOF:this._err(s.ERR.eofInTag),this._emitEOFToken();break;default:t.tagName+=String.fromCodePoint(p(e)?T(e):e)}}_stateRcdataLessThanSign(e){e===o.CODE_POINTS.SOLIDUS?this.state=c.RCDATA_END_TAG_OPEN:(this._emitChars("<"),this.state=c.RCDATA,this._stateRcdata(e))}_stateRcdataEndTagOpen(e){d(e)?(this.state=c.RCDATA_END_TAG_NAME,this._stateRcdataEndTagName(e)):(this._emitChars("</"),this.state=c.RCDATA,this._stateRcdata(e))}handleSpecialEndTag(e){if(!this.preprocessor.startsWith(this.lastStartTagName,!1))return!this._ensureHibernation();switch(this._createEndTagToken(),this.currentToken.tagName=this.lastStartTagName,this.preprocessor.peek(this.lastStartTagName.length)){case o.CODE_POINTS.SPACE:case o.CODE_POINTS.LINE_FEED:case o.CODE_POINTS.TABULATION:case o.CODE_POINTS.FORM_FEED:return this._advanceBy(this.lastStartTagName.length),this.state=c.BEFORE_ATTRIBUTE_NAME,!1;case o.CODE_POINTS.SOLIDUS:return this._advanceBy(this.lastStartTagName.length),this.state=c.SELF_CLOSING_START_TAG,!1;case o.CODE_POINTS.GREATER_THAN_SIGN:return this._advanceBy(this.lastStartTagName.length),this.emitCurrentTagToken(),this.state=c.DATA,!1;default:return!this._ensureHibernation()}}_stateRcdataEndTagName(e){this.handleSpecialEndTag(e)&&(this._emitChars("</"),this.state=c.RCDATA,this._stateRcdata(e))}_stateRawtextLessThanSign(e){e===o.CODE_POINTS.SOLIDUS?this.state=c.RAWTEXT_END_TAG_OPEN:(this._emitChars("<"),this.state=c.RAWTEXT,this._stateRawtext(e))}_stateRawtextEndTagOpen(e){d(e)?(this.state=c.RAWTEXT_END_TAG_NAME,this._stateRawtextEndTagName(e)):(this._emitChars("</"),this.state=c.RAWTEXT,this._stateRawtext(e))}_stateRawtextEndTagName(e){this.handleSpecialEndTag(e)&&(this._emitChars("</"),this.state=c.RAWTEXT,this._stateRawtext(e))}_stateScriptDataLessThanSign(e){switch(e){case o.CODE_POINTS.SOLIDUS:this.state=c.SCRIPT_DATA_END_TAG_OPEN;break;case o.CODE_POINTS.EXCLAMATION_MARK:this.state=c.SCRIPT_DATA_ESCAPE_START,this._emitChars("<!");break;default:this._emitChars("<"),this.state=c.SCRIPT_DATA,this._stateScriptData(e)}}_stateScriptDataEndTagOpen(e){d(e)?(this.state=c.SCRIPT_DATA_END_TAG_NAME,this._stateScriptDataEndTagName(e)):(this._emitChars("</"),this.state=c.SCRIPT_DATA,this._stateScriptData(e))}_stateScriptDataEndTagName(e){this.handleSpecialEndTag(e)&&(this._emitChars("</"),this.state=c.SCRIPT_DATA,this._stateScriptData(e))}_stateScriptDataEscapeStart(e){e===o.CODE_POINTS.HYPHEN_MINUS?(this.state=c.SCRIPT_DATA_ESCAPE_START_DASH,this._emitChars("-")):(this.state=c.SCRIPT_DATA,this._stateScriptData(e))}_stateScriptDataEscapeStartDash(e){e===o.CODE_POINTS.HYPHEN_MINUS?(this.state=c.SCRIPT_DATA_ESCAPED_DASH_DASH,this._emitChars("-")):(this.state=c.SCRIPT_DATA,this._stateScriptData(e))}_stateScriptDataEscaped(e){switch(e){case o.CODE_POINTS.HYPHEN_MINUS:this.state=c.SCRIPT_DATA_ESCAPED_DASH,this._emitChars("-");break;case o.CODE_POINTS.LESS_THAN_SIGN:this.state=c.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;break;case o.CODE_POINTS.NULL:this._err(s.ERR.unexpectedNullCharacter),this._emitChars(o.REPLACEMENT_CHARACTER);break;case o.CODE_POINTS.EOF:this._err(s.ERR.eofInScriptHtmlCommentLikeText),this._emitEOFToken();break;default:this._emitCodePoint(e)}}_stateScriptDataEscapedDash(e){switch(e){case o.CODE_POINTS.HYPHEN_MINUS:this.state=c.SCRIPT_DATA_ESCAPED_DASH_DASH,this._emitChars("-");break;case o.CODE_POINTS.LESS_THAN_SIGN:this.state=c.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;break;case o.CODE_POINTS.NULL:this._err(s.ERR.unexpectedNullCharacter),this.state=c.SCRIPT_DATA_ESCAPED,this._emitChars(o.REPLACEMENT_CHARACTER);break;case o.CODE_POINTS.EOF:this._err(s.ERR.eofInScriptHtmlCommentLikeText),this._emitEOFToken();break;default:this.state=c.SCRIPT_DATA_ESCAPED,this._emitCodePoint(e)}}_stateScriptDataEscapedDashDash(e){switch(e){case o.CODE_POINTS.HYPHEN_MINUS:this._emitChars("-");break;case o.CODE_POINTS.LESS_THAN_SIGN:this.state=c.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;break;case o.CODE_POINTS.GREATER_THAN_SIGN:this.state=c.SCRIPT_DATA,this._emitChars(">");break;case o.CODE_POINTS.NULL:this._err(s.ERR.unexpectedNullCharacter),this.state=c.SCRIPT_DATA_ESCAPED,this._emitChars(o.REPLACEMENT_CHARACTER);break;case o.CODE_POINTS.EOF:this._err(s.ERR.eofInScriptHtmlCommentLikeText),this._emitEOFToken();break;default:this.state=c.SCRIPT_DATA_ESCAPED,this._emitCodePoint(e)}}_stateScriptDataEscapedLessThanSign(e){e===o.CODE_POINTS.SOLIDUS?this.state=c.SCRIPT_DATA_ESCAPED_END_TAG_OPEN:d(e)?(this._emitChars("<"),this.state=c.SCRIPT_DATA_DOUBLE_ESCAPE_START,this._stateScriptDataDoubleEscapeStart(e)):(this._emitChars("<"),this.state=c.SCRIPT_DATA_ESCAPED,this._stateScriptDataEscaped(e))}_stateScriptDataEscapedEndTagOpen(e){d(e)?(this.state=c.SCRIPT_DATA_ESCAPED_END_TAG_NAME,this._stateScriptDataEscapedEndTagName(e)):(this._emitChars("</"),this.state=c.SCRIPT_DATA_ESCAPED,this._stateScriptDataEscaped(e))}_stateScriptDataEscapedEndTagName(e){this.handleSpecialEndTag(e)&&(this._emitChars("</"),this.state=c.SCRIPT_DATA_ESCAPED,this._stateScriptDataEscaped(e))}_stateScriptDataDoubleEscapeStart(e){if(this.preprocessor.startsWith(o.SEQUENCES.SCRIPT,!1)&&y(this.preprocessor.peek(o.SEQUENCES.SCRIPT.length))){this._emitCodePoint(e);for(let e=0;e<o.SEQUENCES.SCRIPT.length;e++)this._emitCodePoint(this._consume());this.state=c.SCRIPT_DATA_DOUBLE_ESCAPED}else this._ensureHibernation()||(this.state=c.SCRIPT_DATA_ESCAPED,this._stateScriptDataEscaped(e))}_stateScriptDataDoubleEscaped(e){switch(e){case o.CODE_POINTS.HYPHEN_MINUS:this.state=c.SCRIPT_DATA_DOUBLE_ESCAPED_DASH,this._emitChars("-");break;case o.CODE_POINTS.LESS_THAN_SIGN:this.state=c.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN,this._emitChars("<");break;case o.CODE_POINTS.NULL:this._err(s.ERR.unexpectedNullCharacter),this._emitChars(o.REPLACEMENT_CHARACTER);break;case o.CODE_POINTS.EOF:this._err(s.ERR.eofInScriptHtmlCommentLikeText),this._emitEOFToken();break;default:this._emitCodePoint(e)}}_stateScriptDataDoubleEscapedDash(e){switch(e){case o.CODE_POINTS.HYPHEN_MINUS:this.state=c.SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH,this._emitChars("-");break;case o.CODE_POINTS.LESS_THAN_SIGN:this.state=c.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN,this._emitChars("<");break;case o.CODE_POINTS.NULL:this._err(s.ERR.unexpectedNullCharacter),this.state=c.SCRIPT_DATA_DOUBLE_ESCAPED,this._emitChars(o.REPLACEMENT_CHARACTER);break;case o.CODE_POINTS.EOF:this._err(s.ERR.eofInScriptHtmlCommentLikeText),this._emitEOFToken();break;default:this.state=c.SCRIPT_DATA_DOUBLE_ESCAPED,this._emitCodePoint(e)}}_stateScriptDataDoubleEscapedDashDash(e){switch(e){case o.CODE_POINTS.HYPHEN_MINUS:this._emitChars("-");break;case o.CODE_POINTS.LESS_THAN_SIGN:this.state=c.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN,this._emitChars("<");break;case o.CODE_POINTS.GREATER_THAN_SIGN:this.state=c.SCRIPT_DATA,this._emitChars(">");break;case o.CODE_POINTS.NULL:this._err(s.ERR.unexpectedNullCharacter),this.state=c.SCRIPT_DATA_DOUBLE_ESCAPED,this._emitChars(o.REPLACEMENT_CHARACTER);break;case o.CODE_POINTS.EOF:this._err(s.ERR.eofInScriptHtmlCommentLikeText),this._emitEOFToken();break;default:this.state=c.SCRIPT_DATA_DOUBLE_ESCAPED,this._emitCodePoint(e)}}_stateScriptDataDoubleEscapedLessThanSign(e){e===o.CODE_POINTS.SOLIDUS?(this.state=c.SCRIPT_DATA_DOUBLE_ESCAPE_END,this._emitChars("/")):(this.state=c.SCRIPT_DATA_DOUBLE_ESCAPED,this._stateScriptDataDoubleEscaped(e))}_stateScriptDataDoubleEscapeEnd(e){if(this.preprocessor.startsWith(o.SEQUENCES.SCRIPT,!1)&&y(this.preprocessor.peek(o.SEQUENCES.SCRIPT.length))){this._emitCodePoint(e);for(let e=0;e<o.SEQUENCES.SCRIPT.length;e++)this._emitCodePoint(this._consume());this.state=c.SCRIPT_DATA_ESCAPED}else this._ensureHibernation()||(this.state=c.SCRIPT_DATA_DOUBLE_ESCAPED,this._stateScriptDataDoubleEscaped(e))}_stateBeforeAttributeName(e){switch(e){case o.CODE_POINTS.SPACE:case o.CODE_POINTS.LINE_FEED:case o.CODE_POINTS.TABULATION:case o.CODE_POINTS.FORM_FEED:break;case o.CODE_POINTS.SOLIDUS:case o.CODE_POINTS.GREATER_THAN_SIGN:case o.CODE_POINTS.EOF:this.state=c.AFTER_ATTRIBUTE_NAME,this._stateAfterAttributeName(e);break;case o.CODE_POINTS.EQUALS_SIGN:this._err(s.ERR.unexpectedEqualsSignBeforeAttributeName),this._createAttr("="),this.state=c.ATTRIBUTE_NAME;break;default:this._createAttr(""),this.state=c.ATTRIBUTE_NAME,this._stateAttributeName(e)}}_stateAttributeName(e){switch(e){case o.CODE_POINTS.SPACE:case o.CODE_POINTS.LINE_FEED:case o.CODE_POINTS.TABULATION:case o.CODE_POINTS.FORM_FEED:case o.CODE_POINTS.SOLIDUS:case o.CODE_POINTS.GREATER_THAN_SIGN:case o.CODE_POINTS.EOF:this._leaveAttrName(),this.state=c.AFTER_ATTRIBUTE_NAME,this._stateAfterAttributeName(e);break;case o.CODE_POINTS.EQUALS_SIGN:this._leaveAttrName(),this.state=c.BEFORE_ATTRIBUTE_VALUE;break;case o.CODE_POINTS.QUOTATION_MARK:case o.CODE_POINTS.APOSTROPHE:case o.CODE_POINTS.LESS_THAN_SIGN:this._err(s.ERR.unexpectedCharacterInAttributeName),this.currentAttr.name+=String.fromCodePoint(e);break;case o.CODE_POINTS.NULL:this._err(s.ERR.unexpectedNullCharacter),this.currentAttr.name+=o.REPLACEMENT_CHARACTER;break;default:this.currentAttr.name+=String.fromCodePoint(p(e)?T(e):e)}}_stateAfterAttributeName(e){switch(e){case o.CODE_POINTS.SPACE:case o.CODE_POINTS.LINE_FEED:case o.CODE_POINTS.TABULATION:case o.CODE_POINTS.FORM_FEED:break;case o.CODE_POINTS.SOLIDUS:this.state=c.SELF_CLOSING_START_TAG;break;case o.CODE_POINTS.EQUALS_SIGN:this.state=c.BEFORE_ATTRIBUTE_VALUE;break;case o.CODE_POINTS.GREATER_THAN_SIGN:this.state=c.DATA,this.emitCurrentTagToken();break;case o.CODE_POINTS.EOF:this._err(s.ERR.eofInTag),this._emitEOFToken();break;default:this._createAttr(""),this.state=c.ATTRIBUTE_NAME,this._stateAttributeName(e)}}_stateBeforeAttributeValue(e){switch(e){case o.CODE_POINTS.SPACE:case o.CODE_POINTS.LINE_FEED:case o.CODE_POINTS.TABULATION:case o.CODE_POINTS.FORM_FEED:break;case o.CODE_POINTS.QUOTATION_MARK:this.state=c.ATTRIBUTE_VALUE_DOUBLE_QUOTED;break;case o.CODE_POINTS.APOSTROPHE:this.state=c.ATTRIBUTE_VALUE_SINGLE_QUOTED;break;case o.CODE_POINTS.GREATER_THAN_SIGN:this._err(s.ERR.missingAttributeValue),this.state=c.DATA,this.emitCurrentTagToken();break;default:this.state=c.ATTRIBUTE_VALUE_UNQUOTED,this._stateAttributeValueUnquoted(e)}}_stateAttributeValueDoubleQuoted(e){switch(e){case o.CODE_POINTS.QUOTATION_MARK:this.state=c.AFTER_ATTRIBUTE_VALUE_QUOTED;break;case o.CODE_POINTS.AMPERSAND:this.returnState=c.ATTRIBUTE_VALUE_DOUBLE_QUOTED,this.state=c.CHARACTER_REFERENCE;break;case o.CODE_POINTS.NULL:this._err(s.ERR.unexpectedNullCharacter),this.currentAttr.value+=o.REPLACEMENT_CHARACTER;break;case o.CODE_POINTS.EOF:this._err(s.ERR.eofInTag),this._emitEOFToken();break;default:this.currentAttr.value+=String.fromCodePoint(e)}}_stateAttributeValueSingleQuoted(e){switch(e){case o.CODE_POINTS.APOSTROPHE:this.state=c.AFTER_ATTRIBUTE_VALUE_QUOTED;break;case o.CODE_POINTS.AMPERSAND:this.returnState=c.ATTRIBUTE_VALUE_SINGLE_QUOTED,this.state=c.CHARACTER_REFERENCE;break;case o.CODE_POINTS.NULL:this._err(s.ERR.unexpectedNullCharacter),this.currentAttr.value+=o.REPLACEMENT_CHARACTER;break;case o.CODE_POINTS.EOF:this._err(s.ERR.eofInTag),this._emitEOFToken();break;default:this.currentAttr.value+=String.fromCodePoint(e)}}_stateAttributeValueUnquoted(e){switch(e){case o.CODE_POINTS.SPACE:case o.CODE_POINTS.LINE_FEED:case o.CODE_POINTS.TABULATION:case o.CODE_POINTS.FORM_FEED:this._leaveAttrValue(),this.state=c.BEFORE_ATTRIBUTE_NAME;break;case o.CODE_POINTS.AMPERSAND:this.returnState=c.ATTRIBUTE_VALUE_UNQUOTED,this.state=c.CHARACTER_REFERENCE;break;case o.CODE_POINTS.GREATER_THAN_SIGN:this._leaveAttrValue(),this.state=c.DATA,this.emitCurrentTagToken();break;case o.CODE_POINTS.NULL:this._err(s.ERR.unexpectedNullCharacter),this.currentAttr.value+=o.REPLACEMENT_CHARACTER;break;case o.CODE_POINTS.QUOTATION_MARK:case o.CODE_POINTS.APOSTROPHE:case o.CODE_POINTS.LESS_THAN_SIGN:case o.CODE_POINTS.EQUALS_SIGN:case o.CODE_POINTS.GRAVE_ACCENT:this._err(s.ERR.unexpectedCharacterInUnquotedAttributeValue),this.currentAttr.value+=String.fromCodePoint(e);break;case o.CODE_POINTS.EOF:this._err(s.ERR.eofInTag),this._emitEOFToken();break;default:this.currentAttr.value+=String.fromCodePoint(e)}}_stateAfterAttributeValueQuoted(e){switch(e){case o.CODE_POINTS.SPACE:case o.CODE_POINTS.LINE_FEED:case o.CODE_POINTS.TABULATION:case o.CODE_POINTS.FORM_FEED:this._leaveAttrValue(),this.state=c.BEFORE_ATTRIBUTE_NAME;break;case o.CODE_POINTS.SOLIDUS:this._leaveAttrValue(),this.state=c.SELF_CLOSING_START_TAG;break;case o.CODE_POINTS.GREATER_THAN_SIGN:this._leaveAttrValue(),this.state=c.DATA,this.emitCurrentTagToken();break;case o.CODE_POINTS.EOF:this._err(s.ERR.eofInTag),this._emitEOFToken();break;default:this._err(s.ERR.missingWhitespaceBetweenAttributes),this.state=c.BEFORE_ATTRIBUTE_NAME,this._stateBeforeAttributeName(e)}}_stateSelfClosingStartTag(e){switch(e){case o.CODE_POINTS.GREATER_THAN_SIGN:this.currentToken.selfClosing=!0,this.state=c.DATA,this.emitCurrentTagToken();break;case o.CODE_POINTS.EOF:this._err(s.ERR.eofInTag),this._emitEOFToken();break;default:this._err(s.ERR.unexpectedSolidusInTag),this.state=c.BEFORE_ATTRIBUTE_NAME,this._stateBeforeAttributeName(e)}}_stateBogusComment(e){const t=this.currentToken;switch(e){case o.CODE_POINTS.GREATER_THAN_SIGN:this.state=c.DATA,this.emitCurrentComment(t);break;case o.CODE_POINTS.EOF:this.emitCurrentComment(t),this._emitEOFToken();break;case o.CODE_POINTS.NULL:this._err(s.ERR.unexpectedNullCharacter),t.data+=o.REPLACEMENT_CHARACTER;break;default:t.data+=String.fromCodePoint(e)}}_stateMarkupDeclarationOpen(e){this._consumeSequenceIfMatch(o.SEQUENCES.DASH_DASH,!0)?(this._createCommentToken(o.SEQUENCES.DASH_DASH.length+1),this.state=c.COMMENT_START):this._consumeSequenceIfMatch(o.SEQUENCES.DOCTYPE,!1)?(this.currentLocation=this.getCurrentLocation(o.SEQUENCES.DOCTYPE.length+1),this.state=c.DOCTYPE):this._consumeSequenceIfMatch(o.SEQUENCES.CDATA_START,!0)?this.inForeignNode?this.state=c.CDATA_SECTION:(this._err(s.ERR.cdataInHtmlContent),this._createCommentToken(o.SEQUENCES.CDATA_START.length+1),this.currentToken.data="[CDATA[",this.state=c.BOGUS_COMMENT):this._ensureHibernation()||(this._err(s.ERR.incorrectlyOpenedComment),this._createCommentToken(2),this.state=c.BOGUS_COMMENT,this._stateBogusComment(e))}_stateCommentStart(e){switch(e){case o.CODE_POINTS.HYPHEN_MINUS:this.state=c.COMMENT_START_DASH;break;case o.CODE_POINTS.GREATER_THAN_SIGN:{this._err(s.ERR.abruptClosingOfEmptyComment),this.state=c.DATA;const e=this.currentToken;this.emitCurrentComment(e);break}default:this.state=c.COMMENT,this._stateComment(e)}}_stateCommentStartDash(e){const t=this.currentToken;switch(e){case o.CODE_POINTS.HYPHEN_MINUS:this.state=c.COMMENT_END;break;case o.CODE_POINTS.GREATER_THAN_SIGN:this._err(s.ERR.abruptClosingOfEmptyComment),this.state=c.DATA,this.emitCurrentComment(t);break;case o.CODE_POINTS.EOF:this._err(s.ERR.eofInComment),this.emitCurrentComment(t),this._emitEOFToken();break;default:t.data+="-",this.state=c.COMMENT,this._stateComment(e)}}_stateComment(e){const t=this.currentToken;switch(e){case o.CODE_POINTS.HYPHEN_MINUS:this.state=c.COMMENT_END_DASH;break;case o.CODE_POINTS.LESS_THAN_SIGN:t.data+="<",this.state=c.COMMENT_LESS_THAN_SIGN;break;case o.CODE_POINTS.NULL:this._err(s.ERR.unexpectedNullCharacter),t.data+=o.REPLACEMENT_CHARACTER;break;case o.CODE_POINTS.EOF:this._err(s.ERR.eofInComment),this.emitCurrentComment(t),this._emitEOFToken();break;default:t.data+=String.fromCodePoint(e)}}_stateCommentLessThanSign(e){const t=this.currentToken;switch(e){case o.CODE_POINTS.EXCLAMATION_MARK:t.data+="!",this.state=c.COMMENT_LESS_THAN_SIGN_BANG;break;case o.CODE_POINTS.LESS_THAN_SIGN:t.data+="<";break;default:this.state=c.COMMENT,this._stateComment(e)}}_stateCommentLessThanSignBang(e){e===o.CODE_POINTS.HYPHEN_MINUS?this.state=c.COMMENT_LESS_THAN_SIGN_BANG_DASH:(this.state=c.COMMENT,this._stateComment(e))}_stateCommentLessThanSignBangDash(e){e===o.CODE_POINTS.HYPHEN_MINUS?this.state=c.COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH:(this.state=c.COMMENT_END_DASH,this._stateCommentEndDash(e))}_stateCommentLessThanSignBangDashDash(e){e!==o.CODE_POINTS.GREATER_THAN_SIGN&&e!==o.CODE_POINTS.EOF&&this._err(s.ERR.nestedComment),this.state=c.COMMENT_END,this._stateCommentEnd(e)}_stateCommentEndDash(e){const t=this.currentToken;switch(e){case o.CODE_POINTS.HYPHEN_MINUS:this.state=c.COMMENT_END;break;case o.CODE_POINTS.EOF:this._err(s.ERR.eofInComment),this.emitCurrentComment(t),this._emitEOFToken();break;default:t.data+="-",this.state=c.COMMENT,this._stateComment(e)}}_stateCommentEnd(e){const t=this.currentToken;switch(e){case o.CODE_POINTS.GREATER_THAN_SIGN:this.state=c.DATA,this.emitCurrentComment(t);break;case o.CODE_POINTS.EXCLAMATION_MARK:this.state=c.COMMENT_END_BANG;break;case o.CODE_POINTS.HYPHEN_MINUS:t.data+="-";break;case o.CODE_POINTS.EOF:this._err(s.ERR.eofInComment),this.emitCurrentComment(t),this._emitEOFToken();break;default:t.data+="--",this.state=c.COMMENT,this._stateComment(e)}}_stateCommentEndBang(e){const t=this.currentToken;switch(e){case o.CODE_POINTS.HYPHEN_MINUS:t.data+="--!",this.state=c.COMMENT_END_DASH;break;case o.CODE_POINTS.GREATER_THAN_SIGN:this._err(s.ERR.incorrectlyClosedComment),this.state=c.DATA,this.emitCurrentComment(t);break;case o.CODE_POINTS.EOF:this._err(s.ERR.eofInComment),this.emitCurrentComment(t),this._emitEOFToken();break;default:t.data+="--!",this.state=c.COMMENT,this._stateComment(e)}}_stateDoctype(e){switch(e){case o.CODE_POINTS.SPACE:case o.CODE_POINTS.LINE_FEED:case o.CODE_POINTS.TABULATION:case o.CODE_POINTS.FORM_FEED:this.state=c.BEFORE_DOCTYPE_NAME;break;case o.CODE_POINTS.GREATER_THAN_SIGN:this.state=c.BEFORE_DOCTYPE_NAME,this._stateBeforeDoctypeName(e);break;case o.CODE_POINTS.EOF:{this._err(s.ERR.eofInDoctype),this._createDoctypeToken(null);const e=this.currentToken;e.forceQuirks=!0,this.emitCurrentDoctype(e),this._emitEOFToken();break}default:this._err(s.ERR.missingWhitespaceBeforeDoctypeName),this.state=c.BEFORE_DOCTYPE_NAME,this._stateBeforeDoctypeName(e)}}_stateBeforeDoctypeName(e){if(p(e))this._createDoctypeToken(String.fromCharCode(T(e))),this.state=c.DOCTYPE_NAME;else switch(e){case o.CODE_POINTS.SPACE:case o.CODE_POINTS.LINE_FEED:case o.CODE_POINTS.TABULATION:case o.CODE_POINTS.FORM_FEED:break;case o.CODE_POINTS.NULL:this._err(s.ERR.unexpectedNullCharacter),this._createDoctypeToken(o.REPLACEMENT_CHARACTER),this.state=c.DOCTYPE_NAME;break;case o.CODE_POINTS.GREATER_THAN_SIGN:{this._err(s.ERR.missingDoctypeName),this._createDoctypeToken(null);const e=this.currentToken;e.forceQuirks=!0,this.emitCurrentDoctype(e),this.state=c.DATA;break}case o.CODE_POINTS.EOF:{this._err(s.ERR.eofInDoctype),this._createDoctypeToken(null);const e=this.currentToken;e.forceQuirks=!0,this.emitCurrentDoctype(e),this._emitEOFToken();break}default:this._createDoctypeToken(String.fromCodePoint(e)),this.state=c.DOCTYPE_NAME}}_stateDoctypeName(e){const t=this.currentToken;switch(e){case o.CODE_POINTS.SPACE:case o.CODE_POINTS.LINE_FEED:case o.CODE_POINTS.TABULATION:case o.CODE_POINTS.FORM_FEED:this.state=c.AFTER_DOCTYPE_NAME;break;case o.CODE_POINTS.GREATER_THAN_SIGN:this.state=c.DATA,this.emitCurrentDoctype(t);break;case o.CODE_POINTS.NULL:this._err(s.ERR.unexpectedNullCharacter),t.name+=o.REPLACEMENT_CHARACTER;break;case o.CODE_POINTS.EOF:this._err(s.ERR.eofInDoctype),t.forceQuirks=!0,this.emitCurrentDoctype(t),this._emitEOFToken();break;default:t.name+=String.fromCodePoint(p(e)?T(e):e)}}_stateAfterDoctypeName(e){const t=this.currentToken;switch(e){case o.CODE_POINTS.SPACE:case o.CODE_POINTS.LINE_FEED:case o.CODE_POINTS.TABULATION:case o.CODE_POINTS.FORM_FEED:break;case o.CODE_POINTS.GREATER_THAN_SIGN:this.state=c.DATA,this.emitCurrentDoctype(t);break;case o.CODE_POINTS.EOF:this._err(s.ERR.eofInDoctype),t.forceQuirks=!0,this.emitCurrentDoctype(t),this._emitEOFToken();break;default:this._consumeSequenceIfMatch(o.SEQUENCES.PUBLIC,!1)?this.state=c.AFTER_DOCTYPE_PUBLIC_KEYWORD:this._consumeSequenceIfMatch(o.SEQUENCES.SYSTEM,!1)?this.state=c.AFTER_DOCTYPE_SYSTEM_KEYWORD:this._ensureHibernation()||(this._err(s.ERR.invalidCharacterSequenceAfterDoctypeName),t.forceQuirks=!0,this.state=c.BOGUS_DOCTYPE,this._stateBogusDoctype(e))}}_stateAfterDoctypePublicKeyword(e){const t=this.currentToken;switch(e){case o.CODE_POINTS.SPACE:case o.CODE_POINTS.LINE_FEED:case o.CODE_POINTS.TABULATION:case o.CODE_POINTS.FORM_FEED:this.state=c.BEFORE_DOCTYPE_PUBLIC_IDENTIFIER;break;case o.CODE_POINTS.QUOTATION_MARK:this._err(s.ERR.missingWhitespaceAfterDoctypePublicKeyword),t.publicId="",this.state=c.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED;break;case o.CODE_POINTS.APOSTROPHE:this._err(s.ERR.missingWhitespaceAfterDoctypePublicKeyword),t.publicId="",this.state=c.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED;break;case o.CODE_POINTS.GREATER_THAN_SIGN:this._err(s.ERR.missingDoctypePublicIdentifier),t.forceQuirks=!0,this.state=c.DATA,this.emitCurrentDoctype(t);break;case o.CODE_POINTS.EOF:this._err(s.ERR.eofInDoctype),t.forceQuirks=!0,this.emitCurrentDoctype(t),this._emitEOFToken();break;default:this._err(s.ERR.missingQuoteBeforeDoctypePublicIdentifier),t.forceQuirks=!0,this.state=c.BOGUS_DOCTYPE,this._stateBogusDoctype(e)}}_stateBeforeDoctypePublicIdentifier(e){const t=this.currentToken;switch(e){case o.CODE_POINTS.SPACE:case o.CODE_POINTS.LINE_FEED:case o.CODE_POINTS.TABULATION:case o.CODE_POINTS.FORM_FEED:break;case o.CODE_POINTS.QUOTATION_MARK:t.publicId="",this.state=c.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED;break;case o.CODE_POINTS.APOSTROPHE:t.publicId="",this.state=c.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED;break;case o.CODE_POINTS.GREATER_THAN_SIGN:this._err(s.ERR.missingDoctypePublicIdentifier),t.forceQuirks=!0,this.state=c.DATA,this.emitCurrentDoctype(t);break;case o.CODE_POINTS.EOF:this._err(s.ERR.eofInDoctype),t.forceQuirks=!0,this.emitCurrentDoctype(t),this._emitEOFToken();break;default:this._err(s.ERR.missingQuoteBeforeDoctypePublicIdentifier),t.forceQuirks=!0,this.state=c.BOGUS_DOCTYPE,this._stateBogusDoctype(e)}}_stateDoctypePublicIdentifierDoubleQuoted(e){const t=this.currentToken;switch(e){case o.CODE_POINTS.QUOTATION_MARK:this.state=c.AFTER_DOCTYPE_PUBLIC_IDENTIFIER;break;case o.CODE_POINTS.NULL:this._err(s.ERR.unexpectedNullCharacter),t.publicId+=o.REPLACEMENT_CHARACTER;break;case o.CODE_POINTS.GREATER_THAN_SIGN:this._err(s.ERR.abruptDoctypePublicIdentifier),t.forceQuirks=!0,this.emitCurrentDoctype(t),this.state=c.DATA;break;case o.CODE_POINTS.EOF:this._err(s.ERR.eofInDoctype),t.forceQuirks=!0,this.emitCurrentDoctype(t),this._emitEOFToken();break;default:t.publicId+=String.fromCodePoint(e)}}_stateDoctypePublicIdentifierSingleQuoted(e){const t=this.currentToken;switch(e){case o.CODE_POINTS.APOSTROPHE:this.state=c.AFTER_DOCTYPE_PUBLIC_IDENTIFIER;break;case o.CODE_POINTS.NULL:this._err(s.ERR.unexpectedNullCharacter),t.publicId+=o.REPLACEMENT_CHARACTER;break;case o.CODE_POINTS.GREATER_THAN_SIGN:this._err(s.ERR.abruptDoctypePublicIdentifier),t.forceQuirks=!0,this.emitCurrentDoctype(t),this.state=c.DATA;break;case o.CODE_POINTS.EOF:this._err(s.ERR.eofInDoctype),t.forceQuirks=!0,this.emitCurrentDoctype(t),this._emitEOFToken();break;default:t.publicId+=String.fromCodePoint(e)}}_stateAfterDoctypePublicIdentifier(e){const t=this.currentToken;switch(e){case o.CODE_POINTS.SPACE:case o.CODE_POINTS.LINE_FEED:case o.CODE_POINTS.TABULATION:case o.CODE_POINTS.FORM_FEED:this.state=c.BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS;break;case o.CODE_POINTS.GREATER_THAN_SIGN:this.state=c.DATA,this.emitCurrentDoctype(t);break;case o.CODE_POINTS.QUOTATION_MARK:this._err(s.ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers),t.systemId="",this.state=c.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;break;case o.CODE_POINTS.APOSTROPHE:this._err(s.ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers),t.systemId="",this.state=c.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;break;case o.CODE_POINTS.EOF:this._err(s.ERR.eofInDoctype),t.forceQuirks=!0,this.emitCurrentDoctype(t),this._emitEOFToken();break;default:this._err(s.ERR.missingQuoteBeforeDoctypeSystemIdentifier),t.forceQuirks=!0,this.state=c.BOGUS_DOCTYPE,this._stateBogusDoctype(e)}}_stateBetweenDoctypePublicAndSystemIdentifiers(e){const t=this.currentToken;switch(e){case o.CODE_POINTS.SPACE:case o.CODE_POINTS.LINE_FEED:case o.CODE_POINTS.TABULATION:case o.CODE_POINTS.FORM_FEED:break;case o.CODE_POINTS.GREATER_THAN_SIGN:this.emitCurrentDoctype(t),this.state=c.DATA;break;case o.CODE_POINTS.QUOTATION_MARK:t.systemId="",this.state=c.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;break;case o.CODE_POINTS.APOSTROPHE:t.systemId="",this.state=c.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;break;case o.CODE_POINTS.EOF:this._err(s.ERR.eofInDoctype),t.forceQuirks=!0,this.emitCurrentDoctype(t),this._emitEOFToken();break;default:this._err(s.ERR.missingQuoteBeforeDoctypeSystemIdentifier),t.forceQuirks=!0,this.state=c.BOGUS_DOCTYPE,this._stateBogusDoctype(e)}}_stateAfterDoctypeSystemKeyword(e){const t=this.currentToken;switch(e){case o.CODE_POINTS.SPACE:case o.CODE_POINTS.LINE_FEED:case o.CODE_POINTS.TABULATION:case o.CODE_POINTS.FORM_FEED:this.state=c.BEFORE_DOCTYPE_SYSTEM_IDENTIFIER;break;case o.CODE_POINTS.QUOTATION_MARK:this._err(s.ERR.missingWhitespaceAfterDoctypeSystemKeyword),t.systemId="",this.state=c.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;break;case o.CODE_POINTS.APOSTROPHE:this._err(s.ERR.missingWhitespaceAfterDoctypeSystemKeyword),t.systemId="",this.state=c.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;break;case o.CODE_POINTS.GREATER_THAN_SIGN:this._err(s.ERR.missingDoctypeSystemIdentifier),t.forceQuirks=!0,this.state=c.DATA,this.emitCurrentDoctype(t);break;case o.CODE_POINTS.EOF:this._err(s.ERR.eofInDoctype),t.forceQuirks=!0,this.emitCurrentDoctype(t),this._emitEOFToken();break;default:this._err(s.ERR.missingQuoteBeforeDoctypeSystemIdentifier),t.forceQuirks=!0,this.state=c.BOGUS_DOCTYPE,this._stateBogusDoctype(e)}}_stateBeforeDoctypeSystemIdentifier(e){const t=this.currentToken;switch(e){case o.CODE_POINTS.SPACE:case o.CODE_POINTS.LINE_FEED:case o.CODE_POINTS.TABULATION:case o.CODE_POINTS.FORM_FEED:break;case o.CODE_POINTS.QUOTATION_MARK:t.systemId="",this.state=c.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;break;case o.CODE_POINTS.APOSTROPHE:t.systemId="",this.state=c.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;break;case o.CODE_POINTS.GREATER_THAN_SIGN:this._err(s.ERR.missingDoctypeSystemIdentifier),t.forceQuirks=!0,this.state=c.DATA,this.emitCurrentDoctype(t);break;case o.CODE_POINTS.EOF:this._err(s.ERR.eofInDoctype),t.forceQuirks=!0,this.emitCurrentDoctype(t),this._emitEOFToken();break;default:this._err(s.ERR.missingQuoteBeforeDoctypeSystemIdentifier),t.forceQuirks=!0,this.state=c.BOGUS_DOCTYPE,this._stateBogusDoctype(e)}}_stateDoctypeSystemIdentifierDoubleQuoted(e){const t=this.currentToken;switch(e){case o.CODE_POINTS.QUOTATION_MARK:this.state=c.AFTER_DOCTYPE_SYSTEM_IDENTIFIER;break;case o.CODE_POINTS.NULL:this._err(s.ERR.unexpectedNullCharacter),t.systemId+=o.REPLACEMENT_CHARACTER;break;case o.CODE_POINTS.GREATER_THAN_SIGN:this._err(s.ERR.abruptDoctypeSystemIdentifier),t.forceQuirks=!0,this.emitCurrentDoctype(t),this.state=c.DATA;break;case o.CODE_POINTS.EOF:this._err(s.ERR.eofInDoctype),t.forceQuirks=!0,this.emitCurrentDoctype(t),this._emitEOFToken();break;default:t.systemId+=String.fromCodePoint(e)}}_stateDoctypeSystemIdentifierSingleQuoted(e){const t=this.currentToken;switch(e){case o.CODE_POINTS.APOSTROPHE:this.state=c.AFTER_DOCTYPE_SYSTEM_IDENTIFIER;break;case o.CODE_POINTS.NULL:this._err(s.ERR.unexpectedNullCharacter),t.systemId+=o.REPLACEMENT_CHARACTER;break;case o.CODE_POINTS.GREATER_THAN_SIGN:this._err(s.ERR.abruptDoctypeSystemIdentifier),t.forceQuirks=!0,this.emitCurrentDoctype(t),this.state=c.DATA;break;case o.CODE_POINTS.EOF:this._err(s.ERR.eofInDoctype),t.forceQuirks=!0,this.emitCurrentDoctype(t),this._emitEOFToken();break;default:t.systemId+=String.fromCodePoint(e)}}_stateAfterDoctypeSystemIdentifier(e){const t=this.currentToken;switch(e){case o.CODE_POINTS.SPACE:case o.CODE_POINTS.LINE_FEED:case o.CODE_POINTS.TABULATION:case o.CODE_POINTS.FORM_FEED:break;case o.CODE_POINTS.GREATER_THAN_SIGN:this.emitCurrentDoctype(t),this.state=c.DATA;break;case o.CODE_POINTS.EOF:this._err(s.ERR.eofInDoctype),t.forceQuirks=!0,this.emitCurrentDoctype(t),this._emitEOFToken();break;default:this._err(s.ERR.unexpectedCharacterAfterDoctypeSystemIdentifier),this.state=c.BOGUS_DOCTYPE,this._stateBogusDoctype(e)}}_stateBogusDoctype(e){const t=this.currentToken;switch(e){case o.CODE_POINTS.GREATER_THAN_SIGN:this.emitCurrentDoctype(t),this.state=c.DATA;break;case o.CODE_POINTS.NULL:this._err(s.ERR.unexpectedNullCharacter);break;case o.CODE_POINTS.EOF:this.emitCurrentDoctype(t),this._emitEOFToken()}}_stateCdataSection(e){switch(e){case o.CODE_POINTS.RIGHT_SQUARE_BRACKET:this.state=c.CDATA_SECTION_BRACKET;break;case o.CODE_POINTS.EOF:this._err(s.ERR.eofInCdata),this._emitEOFToken();break;default:this._emitCodePoint(e)}}_stateCdataSectionBracket(e){e===o.CODE_POINTS.RIGHT_SQUARE_BRACKET?this.state=c.CDATA_SECTION_END:(this._emitChars("]"),this.state=c.CDATA_SECTION,this._stateCdataSection(e))}_stateCdataSectionEnd(e){switch(e){case o.CODE_POINTS.GREATER_THAN_SIGN:this.state=c.DATA;break;case o.CODE_POINTS.RIGHT_SQUARE_BRACKET:this._emitChars("]");break;default:this._emitChars("]]"),this.state=c.CDATA_SECTION,this._stateCdataSection(e)}}_stateCharacterReference(e){e===o.CODE_POINTS.NUMBER_SIGN?this.state=c.NUMERIC_CHARACTER_REFERENCE:h(e)?(this.state=c.NAMED_CHARACTER_REFERENCE,this._stateNamedCharacterReference(e)):(this._flushCodePointConsumedAsCharacterReference(o.CODE_POINTS.AMPERSAND),this._reconsumeInState(this.returnState,e))}_stateNamedCharacterReference(e){const t=this._matchNamedCharacterReference(e);if(this._ensureHibernation());else if(t){for(let e=0;e<t.length;e++)this._flushCodePointConsumedAsCharacterReference(t[e]);this.state=this.returnState}else this._flushCodePointConsumedAsCharacterReference(o.CODE_POINTS.AMPERSAND),this.state=c.AMBIGUOUS_AMPERSAND}_stateAmbiguousAmpersand(e){h(e)?this._flushCodePointConsumedAsCharacterReference(e):(e===o.CODE_POINTS.SEMICOLON&&this._err(s.ERR.unknownNamedCharacterReference),this._reconsumeInState(this.returnState,e))}_stateNumericCharacterReference(e){this.charRefCode=0,e===o.CODE_POINTS.LATIN_SMALL_X||e===o.CODE_POINTS.LATIN_CAPITAL_X?this.state=c.HEXADEMICAL_CHARACTER_REFERENCE_START:f(e)?(this.state=c.DECIMAL_CHARACTER_REFERENCE,this._stateDecimalCharacterReference(e)):(this._err(s.ERR.absenceOfDigitsInNumericCharacterReference),this._flushCodePointConsumedAsCharacterReference(o.CODE_POINTS.AMPERSAND),this._flushCodePointConsumedAsCharacterReference(o.CODE_POINTS.NUMBER_SIGN),this._reconsumeInState(this.returnState,e))}_stateHexademicalCharacterReferenceStart(e){!function(e){return f(e)||m(e)||E(e)}(e)?(this._err(s.ERR.absenceOfDigitsInNumericCharacterReference),this._flushCodePointConsumedAsCharacterReference(o.CODE_POINTS.AMPERSAND),this._flushCodePointConsumedAsCharacterReference(o.CODE_POINTS.NUMBER_SIGN),this._unconsume(2),this.state=this.returnState):(this.state=c.HEXADEMICAL_CHARACTER_REFERENCE,this._stateHexademicalCharacterReference(e))}_stateHexademicalCharacterReference(e){m(e)?this.charRefCode=16*this.charRefCode+e-55:E(e)?this.charRefCode=16*this.charRefCode+e-87:f(e)?this.charRefCode=16*this.charRefCode+e-48:e===o.CODE_POINTS.SEMICOLON?this.state=c.NUMERIC_CHARACTER_REFERENCE_END:(this._err(s.ERR.missingSemicolonAfterCharacterReference),this.state=c.NUMERIC_CHARACTER_REFERENCE_END,this._stateNumericCharacterReferenceEnd(e))}_stateDecimalCharacterReference(e){f(e)?this.charRefCode=10*this.charRefCode+e-48:e===o.CODE_POINTS.SEMICOLON?this.state=c.NUMERIC_CHARACTER_REFERENCE_END:(this._err(s.ERR.missingSemicolonAfterCharacterReference),this.state=c.NUMERIC_CHARACTER_REFERENCE_END,this._stateNumericCharacterReferenceEnd(e))}_stateNumericCharacterReferenceEnd(e){if(this.charRefCode===o.CODE_POINTS.NULL)this._err(s.ERR.nullCharacterReference),this.charRefCode=o.CODE_POINTS.REPLACEMENT_CHARACTER;else if(this.charRefCode>1114111)this._err(s.ERR.characterReferenceOutsideUnicodeRange),this.charRefCode=o.CODE_POINTS.REPLACEMENT_CHARACTER;else if((0,o.isSurrogate)(this.charRefCode))this._err(s.ERR.surrogateCharacterReference),this.charRefCode=o.CODE_POINTS.REPLACEMENT_CHARACTER;else if((0,o.isUndefinedCodePoint)(this.charRefCode))this._err(s.ERR.noncharacterCharacterReference);else if((0,o.isControlCodePoint)(this.charRefCode)||this.charRefCode===o.CODE_POINTS.CARRIAGE_RETURN){this._err(s.ERR.controlCharacterReference);const e=u.get(this.charRefCode);void 0!==e&&(this.charRefCode=e)}this._flushCodePointConsumedAsCharacterReference(this.charRefCode),this._reconsumeInState(this.returnState,e)}}},2431:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Preprocessor=void 0;const r=n(791),o=n(9425);t.Preprocessor=class{constructor(e){this.handler=e,this.html="",this.pos=-1,this.lastGapPos=-2,this.gapStack=[],this.skipNextNewLine=!1,this.lastChunkWritten=!1,this.endOfChunkHit=!1,this.bufferWaterline=65536,this.isEol=!1,this.lineStartPos=0,this.droppedBufferSize=0,this.line=1,this.lastErrOffset=-1}get col(){return this.pos-this.lineStartPos+Number(this.lastGapPos!==this.pos)}get offset(){return this.droppedBufferSize+this.pos}getError(e){const{line:t,col:n,offset:r}=this;return{code:e,startLine:t,endLine:t,startCol:n,endCol:n,startOffset:r,endOffset:r}}_err(e){this.handler.onParseError&&this.lastErrOffset!==this.offset&&(this.lastErrOffset=this.offset,this.handler.onParseError(this.getError(e)))}_addGap(){this.gapStack.push(this.lastGapPos),this.lastGapPos=this.pos}_processSurrogate(e){if(this.pos!==this.html.length-1){const t=this.html.charCodeAt(this.pos+1);if((0,r.isSurrogatePair)(t))return this.pos++,this._addGap(),(0,r.getSurrogatePairCodePoint)(e,t)}else if(!this.lastChunkWritten)return this.endOfChunkHit=!0,r.CODE_POINTS.EOF;return this._err(o.ERR.surrogateInInputStream),e}willDropParsedChunk(){return this.pos>this.bufferWaterline}dropParsedChunk(){this.willDropParsedChunk()&&(this.html=this.html.substring(this.pos),this.lineStartPos-=this.pos,this.droppedBufferSize+=this.pos,this.pos=0,this.lastGapPos=-2,this.gapStack.length=0)}write(e,t){this.html.length>0?this.html+=e:this.html=e,this.endOfChunkHit=!1,this.lastChunkWritten=t}insertHtmlAtCurrentPos(e){this.html=this.html.substring(0,this.pos+1)+e+this.html.substring(this.pos+1),this.endOfChunkHit=!1}startsWith(e,t){if(this.pos+e.length>this.html.length)return this.endOfChunkHit=!this.lastChunkWritten,!1;if(t)return this.html.startsWith(e,this.pos);for(let t=0;t<e.length;t++)if((32|this.html.charCodeAt(this.pos+t))!==e.charCodeAt(t))return!1;return!0}peek(e){const t=this.pos+e;if(t>=this.html.length)return this.endOfChunkHit=!this.lastChunkWritten,r.CODE_POINTS.EOF;const n=this.html.charCodeAt(t);return n===r.CODE_POINTS.CARRIAGE_RETURN?r.CODE_POINTS.LINE_FEED:n}advance(){if(this.pos++,this.isEol&&(this.isEol=!1,this.line++,this.lineStartPos=this.pos),this.pos>=this.html.length)return this.endOfChunkHit=!this.lastChunkWritten,r.CODE_POINTS.EOF;let e=this.html.charCodeAt(this.pos);return e===r.CODE_POINTS.CARRIAGE_RETURN?(this.isEol=!0,this.skipNextNewLine=!0,r.CODE_POINTS.LINE_FEED):e===r.CODE_POINTS.LINE_FEED&&(this.isEol=!0,this.skipNextNewLine)?(this.line--,this.skipNextNewLine=!1,this._addGap(),this.advance()):(this.skipNextNewLine=!1,(0,r.isSurrogate)(e)&&(e=this._processSurrogate(e)),null===this.handler.onParseError||e>31&&e<127||e===r.CODE_POINTS.LINE_FEED||e===r.CODE_POINTS.CARRIAGE_RETURN||e>159&&e<64976||this._checkForProblematicCharacters(e),e)}_checkForProblematicCharacters(e){(0,r.isControlCodePoint)(e)?this._err(o.ERR.controlCharacterInInputStream):(0,r.isUndefinedCodePoint)(e)&&this._err(o.ERR.noncharacterInInputStream)}retreat(e){for(this.pos-=e;this.pos<this.lastGapPos;)this.lastGapPos=this.gapStack.pop(),this.pos--;this.isEol=!1}}},4921:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.defaultTreeAdapter=void 0;const r=n(2287);function o(e){return{nodeName:"#text",value:e,parentNode:null}}t.defaultTreeAdapter={createDocument:()=>({nodeName:"#document",mode:r.DOCUMENT_MODE.NO_QUIRKS,childNodes:[]}),createDocumentFragment:()=>({nodeName:"#document-fragment",childNodes:[]}),createElement:(e,t,n)=>({nodeName:e,tagName:e,attrs:n,namespaceURI:t,childNodes:[],parentNode:null}),createCommentNode:e=>({nodeName:"#comment",data:e,parentNode:null}),appendChild(e,t){e.childNodes.push(t),t.parentNode=e},insertBefore(e,t,n){const r=e.childNodes.indexOf(n);e.childNodes.splice(r,0,t),t.parentNode=e},setTemplateContent(e,t){e.content=t},getTemplateContent:e=>e.content,setDocumentType(e,n,r,o){const a=e.childNodes.find((e=>"#documentType"===e.nodeName));if(a)a.name=n,a.publicId=r,a.systemId=o;else{const a={nodeName:"#documentType",name:n,publicId:r,systemId:o,parentNode:null};t.defaultTreeAdapter.appendChild(e,a)}},setDocumentMode(e,t){e.mode=t},getDocumentMode:e=>e.mode,detachNode(e){if(e.parentNode){const t=e.parentNode.childNodes.indexOf(e);e.parentNode.childNodes.splice(t,1),e.parentNode=null}},insertText(e,n){if(e.childNodes.length>0){const r=e.childNodes[e.childNodes.length-1];if(t.defaultTreeAdapter.isTextNode(r))return void(r.value+=n)}t.defaultTreeAdapter.appendChild(e,o(n))},insertTextBefore(e,n,r){const a=e.childNodes[e.childNodes.indexOf(r)-1];a&&t.defaultTreeAdapter.isTextNode(a)?a.value+=n:t.defaultTreeAdapter.insertBefore(e,o(n),r)},adoptAttributes(e,t){const n=new Set(e.attrs.map((e=>e.name)));for(let r=0;r<t.length;r++)n.has(t[r].name)||e.attrs.push(t[r])},getFirstChild:e=>e.childNodes[0],getChildNodes:e=>e.childNodes,getParentNode:e=>e.parentNode,getAttrList:e=>e.attrs,getTagName:e=>e.tagName,getNamespaceURI:e=>e.namespaceURI,getTextNodeContent:e=>e.value,getCommentNodeContent:e=>e.data,getDocumentTypeNodeName:e=>e.name,getDocumentTypeNodePublicId:e=>e.publicId,getDocumentTypeNodeSystemId:e=>e.systemId,isTextNode:e=>"#text"===e.nodeName,isCommentNode:e=>"#comment"===e.nodeName,isDocumentTypeNode:e=>"#documentType"===e.nodeName,isElementNode:e=>Object.prototype.hasOwnProperty.call(e,"tagName"),setNodeSourceCodeLocation(e,t){e.sourceCodeLocation=t},getNodeSourceCodeLocation:e=>e.sourceCodeLocation,updateNodeSourceCodeLocation(e,t){e.sourceCodeLocation=Object.assign(Object.assign({},e.sourceCodeLocation),t)}}}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var a=t[r]={id:r,loaded:!1,exports:{}};return e[r].call(a.exports,a,a.exports,n),a.loaded=!0,a.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");if(r.length)for(var o=r.length-1;o>-1&&(!e||!/^http(s?):/.test(e));)e=r[o--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),n.nc=void 0,(()=>{"use strict";var e=n(6540),t=n(5338),r=n(5556),o=n.n(r),a=(n(3074),n(5072)),i=n.n(a),s=n(7825),l=n.n(s),u=n(7659),c=n.n(u),f=n(5056),p=n.n(f),d=n(540),h=n.n(d),m=n(1113),E=n.n(m),T=n(5602),g={};function y(t){var n=t.type,r=t.value,o=t.html;return o?e.createElement("li",{"data-notification-type":n,dangerouslySetInnerHTML:o}):e.createElement("li",{"data-notification-type":n},r)}g.styleTagTransform=E(),g.setAttributes=p(),g.insert=c().bind(null,"head"),g.domAPI=l(),g.insertStyleElement=h(),i()(T.A,g),T.A&&T.A.locals&&T.A.locals,y.propTypes={type:o().string.isRequired,value:o().string,html:o().shape({__html:o().string})},y.defaultProps={type:"default"};const _=y;var A=o().shape({id:o().number.isRequired,html:o().shape({__html:o().string}),type:o().string.isRequired,value:o().string});function b(t){var n=t.listNotifications,r=void 0===n?[]:n,o=t.displayDrawer,a=void 0!==o&&o;return e.createElement(e.Fragment,null,e.createElement("div",null,e.createElement("div",{className:"menuItem"},"Your notifications")),a&&e.createElement("div",{className:"Notifications"},e.createElement("button",{style:{float:"right",border:"none",backgroundColor:"white"},"aria-label":"Close",onClick:function(){console.log("Close button has been clicked")}},"X"),e.createElement("p",null,"Here is the list of notifications"),e.createElement("ul",null,0===r.length?e.createElement(_,{value:"No new notification for now"}):r.map((function(t){return e.createElement(_,{key:t.id,type:t.type,value:t.value,html:t.html})})))))}b.propTypes={displayDrawer:o().bool,listNotifications:(0,r.oneOf)([o().arrayOf(o().shape(A)),o().arrayOf(A)])},b.defaultProps={displayDrawer:!1,listNotifications:[]};const v=b;var S=n(2646),I={};I.styleTagTransform=E(),I.setAttributes=p(),I.insert=c().bind(null,"head"),I.domAPI=l(),I.insertStyleElement=h(),i()(S.A,I),S.A&&S.A.locals&&S.A.locals;const C=n.p+"e9a6f27b05e2863ef92df3d4142e1d7e.jpg",N=function(){return e.createElement("header",{className:"App-header"},e.createElement("img",{src:C,className:"App-logo",alt:"logo"}),e.createElement("h1",{className:"header"},"School Dashboard"))};var O=n(4954),D={};D.styleTagTransform=E(),D.setAttributes=p(),D.insert=c().bind(null,"head"),D.domAPI=l(),D.insertStyleElement=h(),i()(O.A,D),O.A&&O.A.locals&&O.A.locals;const P=function(){return e.createElement(e.Fragment,null,e.createElement("body",{className:"App-body"},e.createElement("p",null,"Login to access the full dashboard"),e.createElement("div",null,e.createElement("label",{htmlFor:"email",onClick:function(){return document.getElementById("email").focus()}},"Email:"),e.createElement("input",{type:"email",id:"email",name:"email",autoComplete:"on"}),e.createElement("label",{htmlFor:"password",onClick:function(){return document.getElementById("password").focus()}},"Password:"),e.createElement("input",{type:"password",id:"password",name:"password",autoComplete:"off"}),e.createElement("button",null,"OK"))))};var R=n(9126),k={};function w(e){return e?"Holberton School":"Holberton School main dashboard"}k.styleTagTransform=E(),k.setAttributes=p(),k.insert=c().bind(null,"head"),k.domAPI=l(),k.insertStyleElement=h(),i()(R.A,k),R.A&&R.A.locals&&R.A.locals;const L=function(){return e.createElement("footer",{className:"App-footer"},e.createElement("p",null,w(!1)),e.createElement("p",null,"Copyright ",(new Date).getFullYear()," - ",w(!0)))};function M(t){var n=t.isHeader,r=t.textFirstCell,o=t.textSecondCell,a=void 0===o?null:o;return n?null===a?e.createElement("tr",null,e.createElement("th",{colSpan:"2"},r)):e.createElement("tr",null,e.createElement("th",null,r),e.createElement("th",null,a)):e.createElement("tr",null,e.createElement("td",null,r),e.createElement("td",null,a))}M.propTypes={isHeader:o().bool,textFirstCell:o().string.isRequired,textSecondCell:o().oneOfType([o().string,o().number])},M.defaultProps={isHeader:!1,textSecondCell:null};const x=M;var G=n(246),B={};B.styleTagTransform=E(),B.setAttributes=p(),B.insert=c().bind(null,"head"),B.domAPI=l(),B.insertStyleElement=h(),i()(G.A,B),G.A&&G.A.locals&&G.A.locals;var H=o().shape({id:o().number.isRequired,name:o().string.isRequired,credit:o().number.isRequired});function F(t){var n=t.listCourses,r=void 0===n?[]:n;return e.createElement("table",{id:"CourseList"},e.createElement("thead",null,e.createElement(x,{isHeader:!0,textFirstCell:"Available courses"}),e.createElement(x,{isHeader:!0,textFirstCell:"Course name",textSecondCell:"Credit"})),e.createElement("tbody",null,0===r.length?e.createElement(x,{textFirstCell:"No course available yet"}):r.map((function(t){return e.createElement(x,{key:t.id,textFirstCell:t.name,textSecondCell:t.credit})}))))}F.propTypes={listCourses:o().arrayOf(o().shape(H)).isRequired},F.defaultProps={listCourses:[]};const U=F;function j(e){return j="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},j(e)}function q(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,z(r.key),r)}}function z(e){var t=function(e,t){if("object"!=j(e)||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!=j(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==j(t)?t:t+""}function W(e,t,n){return t=Y(t),function(e,t){if(t&&("object"===j(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(e,V()?Reflect.construct(t,n||[],Y(e).constructor):t.apply(e,n))}function V(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(V=function(){return!!e})()}function Y(e){return Y=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},Y(e)}function $(e,t){return $=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},$(e,t)}var Q=function(t){function n(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n),W(this,n,arguments)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&$(e,t)}(n,t),r=n,(o=[{key:"render",value:function(){var t=this.props,n=t.title,r=t.children;return e.createElement("div",{className:"bodySection"},e.createElement("h2",null,n),r)}}])&&q(r.prototype,o),Object.defineProperty(r,"prototype",{writable:!1}),r;var r,o}(e.Component);Q.propTypes={title:o().string.isRequired,children:o().node};const X=Q;var K=n(1457),Z={};function J(e){return J="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},J(e)}function ee(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function te(t){return e.createElement("div",{className:"bodySectionWithMargin"},e.createElement(X,t))}Z.styleTagTransform=E(),Z.setAttributes=p(),Z.insert=c().bind(null,"head"),Z.domAPI=l(),Z.insertStyleElement=h(),i()(K.A,Z),K.A&&K.A.locals&&K.A.locals,te.propTypes=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ee(Object(n),!0).forEach((function(t){var r,o,a,i;r=e,o=t,a=n[t],i=function(e,t){if("object"!=J(e)||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!=J(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(o),(o="symbol"==J(i)?i:i+"")in r?Object.defineProperty(r,o,{value:a,enumerable:!0,configurable:!0,writable:!0}):r[o]=a})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ee(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},X.propTypes);const ne=te;var re=n(3126),oe={};function ae(e){return ae="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ae(e)}function ie(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,fe(r.key),r)}}function se(e,t,n){return t=ue(t),function(e,t){if(t&&("object"===ae(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(e,le()?Reflect.construct(t,n||[],ue(e).constructor):t.apply(e,n))}function le(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(le=function(){return!!e})()}function ue(e){return ue=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},ue(e)}function ce(e,t){return ce=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},ce(e,t)}function fe(e){var t=function(e,t){if("object"!=ae(e)||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!=ae(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==ae(t)?t:t+""}oe.styleTagTransform=E(),oe.setAttributes=p(),oe.insert=c().bind(null,"head"),oe.domAPI=l(),oe.insertStyleElement=h(),i()(re.A,oe),re.A&&re.A.locals&&re.A.locals;var pe=[{id:1,name:"ES6",credit:60},{id:2,name:"Webpack",credit:20},{id:3,name:"React",credit:40}],de=[{id:1,type:"default",value:"New course available"},{id:2,type:"urgent",value:"New resume available"},{id:3,type:"urgent",html:{__html:"<strong>Urgent requirement</strong> - complete by EOD"}}],he=function(t){function n(){var e,t,r,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n);for(var a=arguments.length,i=new Array(a),s=0;s<a;s++)i[s]=arguments[s];return t=e=se(this,n,[].concat(i)),o=function(t){t.ctrlKey&&"h"===t.key&&(t.preventDefault(),alert("Logging you out"),e.props.logOut())},(r=fe(r="handleKeyPress"))in t?Object.defineProperty(t,r,{value:o,enumerable:!0,configurable:!0,writable:!0}):t[r]=o,e}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&ce(e,t)}(n,t),r=n,(o=[{key:"componentDidMount",value:function(){document.addEventListener("keydown",this.handleKeyPress),console.log("Component did mount")}},{key:"componentWillUnmount",value:function(){document.removeEventListener("keydown",this.handleKeyPress),console.log("Unmounting")}},{key:"render",value:function(){var t=this.props.isLoggedIn;return e.createElement(e.Fragment,null,e.createElement("div",{className:"App"},e.createElement(v,{listNotifications:de}),e.createElement(N,null),t?e.createElement(ne,{title:"Course List"},e.createElement(U,{listCourses:pe})):e.createElement(ne,{title:"Log in to continue"},e.createElement(P,null)),e.createElement(X,{title:"News from the School"},e.createElement("p",null,"Stay informed with the latest updates from our school.")),e.createElement(X,{title:"test"},e.createElement("p",null,"test")),e.createElement(ne,{title:"Test Title"},e.createElement("p",null,"This content will have a margin at the bottom.")),e.createElement(L,null)))}}])&&ie(r.prototype,o),Object.defineProperty(r,"prototype",{writable:!1}),r;var r,o}(e.Component);he.propTypes={isLoggedIn:o().bool,logOut:o().func},he.propDefault={isLoggedIn:!1,logOut:function(){}};const me=he;t.createRoot(document.getElementById("root")).render(e.createElement(e.StrictMode,null,e.createElement(me,{isLoggedIn:!1})))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LEVBQUcsVUFBVyxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEdBQUksVUFBVyxDQUFDLEdBQUksV0FBWSxDQUFDLEdBQUksWUFBYSxDQUFDLEdBQUksV0FBWSxDQUFDLElBQUssVUFBVyxDQUFDLEVBQUcsV0FBWSxDQUFDLEdBQUksV0FBWSxDQUFDLEVBQUcsb0JBQXFCLENBQUMsRUFBRyxVQUFXLENBQUMsRUFBRyxVQUFXLENBQUMsRUFBRyxzQkFBdUIsQ0FBQyxFQUFHLFdBQVksQ0FBQyxHQUFJLGVBQWdCLENBQUMsSUFBSyxXQUFZLENBQUMsRUFBRyxVQUFXLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxhQUFjLENBQUMsRUFBRyxVQUFXLENBQUMsRUFBRyxTQUFVLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxVQUFXLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxRQUFTLENBQUMsRUFBRyxRQUFTLENBQUMsRUFBRyxRQUFTLENBQUMsRUFBRyxhQUFjLENBQUMsRUFBRyxRQUFTLENBQUMsRUFBRyxTQUFVLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxTQUFVLENBQUMsRUFBRyxhQUFjLENBQUMsRUFBRyxTQUFVLENBQUMsRUFBRyxTQUFVLENBQUMsRUFBRyxTQUFVLENBQUMsRUFBRyxTQUFVLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxVQUFXLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxVQUFXLENBQUMsRUFBRyxVQUFXLENBQUMsRUFBRyxTQUFVLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxVQUFXLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxRQUFTLENBQUMsRUFBRyxRQUFTLENBQUMsRUFBRyxRQUFTLENBQUMsRUFBRyxhQUFjLENBQUMsRUFBRyxRQUFTLENBQUMsRUFBRyxTQUFVLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxTQUFVLENBQUMsRUFBRyxVQUFXLENBQUMsRUFBRyxTQUFVLENBQUMsRUFBRyxTQUFVLENBQUMsRUFBRyxTQUFVLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxjQUFlLENBQUMsRUFBRyxVQUFXLENBQUMsRUFBRyxVQUFXLENBQUMsRUFBRyxTQUFVLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxhQUFjLENBQUMsR0FBSSxZQUFhLENBQUMsRUFBRyxVQUFXLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxpQkFBa0IsQ0FBQyxHQUFJLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFlBQWEsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFlBQWEsQ0FBQyxFQUFHLFlBQWEsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFlBQWEsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFlBQWEsQ0FBQyxFQUFHLFlBQWEsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFlBQWEsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFlBQWEsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFVBQVcsQ0FBQyxLQUFNLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFlBQWEsQ0FBQyxFQUFHLFlBQWEsQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFlBQWEsQ0FBQyxFQUFHLGVBQWdCLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyx5QkFBMEIsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFlBQWEsQ0FBQyxFQUFHLFlBQWEsQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLHFCQUFzQixDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsMkJBQTRCLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxVQUFXLENBQUMsRUFBRyxVQUFXLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxhQUFjLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxlQUFnQixDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsV0FBWSxDQUFDLEdBQUksV0FBWSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsQ0FBRVksRUFBRyxnQkFBaUJqQixFQUFHLEtBQU1LLEVBQUcsaUJBQW1CLENBQUMsRUFBRyxhQUFjLENBQUMsRUFBRyxRQUFTLENBQUMsRUFBRyxvQkFBcUIsQ0FBQyxFQUFHLFFBQVMsQ0FBQyxHQUFJLFVBQVcsQ0FBQyxHQUFJLFVBQVcsQ0FBQyxFQUFHLFlBQWEsQ0FBQyxHQUFJLGVBQWdCLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxVQUFXLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxTQUFVLENBQUMsRUFBRyxVQUFXLENBQUMsRUFBRyxhQUFjLENBQUMsRUFBRyxVQUFXLENBQUMsRUFBRyxjQUFlLENBQUMsRUFBRyxTQUFVLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxTQUFVLENBQUMsRUFBRyxjQUFlLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxVQUFXLENBQUMsRUFBRyxVQUFXLENBQUMsRUFBRyxhQUFjLENBQUMsRUFBRyxVQUFXLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxRQUFTLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxjQUFlLENBQUMsRUFBRyxTQUFVLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxhQUFjLENBQUMsRUFBRyxVQUFXLENBQUMsRUFBRyxVQUFXLENBQUMsRUFBRyxnQkFBaUIsQ0FBQyxFQUFHLGVBQWdCLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxhQUFjLENBQUMsRUFBRyxVQUFXLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxZQUFhLENBQUMsR0FBSSwwQkFBMkIsQ0FBQyxFQUFHLFFBQVMsQ0FBQyxFQUFHLFFBQVMsQ0FBQyxFQUFHLFFBQVMsQ0FBQyxHQUFJLFlBQWEsQ0FBQyxFQUFHLFlBQWEsQ0FBQyxFQUFHLFlBQWEsQ0FBQyxFQUFHLFlBQWEsQ0FBQyxFQUFHLFlBQWEsQ0FBQyxFQUFHLFlBQWEsQ0FBQyxFQUFHLFlBQWEsQ0FBQyxFQUFHLFlBQWEsQ0FBQyxFQUFHLFlBQWEsQ0FBQyxFQUFHLFlBQWEsQ0FBQyxFQUFHLFlBQWEsQ0FBQyxFQUFHLFlBQWEsQ0FBQyxHQUFJLFVBQVcsQ0FBQyxFQUFHLGtCQUFtQixDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsaUJBQWtCLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxxQkFBc0IsQ0FBQyxFQUFHLG9CQUFxQixDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsQ0FBRVksRUFBRyxVQUFXakIsRUFBRyxJQUFLSyxFQUFHLGFBQWUsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFlBQWEsQ0FBQyxFQUFHLFlBQWEsQ0FBQyxFQUFHLGtCQUFtQixDQUFDLEVBQUcsY0FBZSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsa0JBQW1CLENBQUMsRUFBRyxtQkFBb0IsQ0FBQyxFQUFHLG9CQUFxQixDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsb0JBQXFCLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxTQUFVLENBQUMsRUFBRyxTQUFVLENBQUMsRUFBRyxVQUFXLENBQUMsRUFBRyxVQUFXLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxxQkFBc0IsQ0FBQyxFQUFHLHNCQUF1QixDQUFDLEVBQUcsbUJBQW9CLENBQUMsRUFBRyxvQkFBcUIsQ0FBQyxFQUFHLG1CQUFvQixDQUFDLEVBQUcsa0JBQW1CLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxxQkFBc0IsQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLHlCQUEwQixDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcseUJBQTBCLENBQUMsRUFBRyxvQkFBcUIsQ0FBQyxFQUFHLGdCQUFpQixDQUFDLEVBQUcsc0JBQXVCLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyx1QkFBd0IsQ0FBQyxFQUFHLGlCQUFrQixDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcscUJBQXNCLENBQUMsRUFBRyxtQkFBb0IsQ0FBQyxFQUFHLHNCQUF1QixDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsMEJBQTJCLENBQUMsRUFBRyx1QkFBd0IsQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLGFBQWMsQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFdBQVksQ0FBQyxHQUFJLHNCQUF1QixDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsQ0FBRVksRUFBRyxTQUFVakIsRUFBRyxJQUFLSyxFQUFHLFlBQWMsQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFlBQWEsQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLGFBQWMsQ0FBQyxFQUFHLGdCQUFpQixDQUFDLEVBQUcsUUFBUyxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsZUFBZ0IsQ0FBQyxFQUFHLGFBQWMsQ0FBQyxFQUFHLGVBQWdCLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxVQUFXLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxDQUFFWSxFQUFHLFFBQVNqQixFQUFHLEtBQU1LLEVBQUcsV0FBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsdUJBQXdCLENBQUMsRUFBRywwQkFBMkIsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFFBQVMsQ0FBQyxFQUFHLENBQUVZLEVBQUcsUUFBU2pCLEVBQUcsTUFBT0ssRUFBRyxXQUFhLENBQUMsRUFBRyxDQUFFWSxFQUFHLFFBQVNqQixFQUFHLE1BQU9LLEVBQUcsV0FBYSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsYUFBYyxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsOEJBQStCLENBQUMsRUFBRyxjQUFlLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxjQUFlLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxDQUFFWSxFQUFHLFFBQVNqQixFQUFHLEtBQU1LLEVBQUcsWUFBYyxDQUFDLEVBQUcsQ0FBRVksRUFBRyxZQUFhakIsRUFBRyxJQUFLSyxFQUFHLFdBQWEsQ0FBQyxFQUFHLENBQUVZLEVBQUcsT0FBUWpCLEVBQUcsSUFBS0ssRUFBRyxVQUFZLENBQUMsRUFBRyxTQUFVLENBQUMsRUFBRyxtQkFBb0IsQ0FBQyxFQUFHLGNBQWUsQ0FBQyxFQUFHLENBQUVZLEVBQUcsVUFBV2pCLEVBQUcsSUFBS0ssRUFBRyxZQUFjLENBQUMsRUFBRyxVQUFXLENBQUMsRUFBRyxtQkFBb0IsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFFBQVMsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLENBQUVZLEVBQUcsU0FBVWpCLEVBQUcsSUFBS0ssRUFBRyxZQUFjLENBQUMsRUFBRyxjQUFlLENBQUMsRUFBRyxDQUFFWSxFQUFHLFlBQWFqQixFQUFHLEtBQU1LLEVBQUcsV0FBYSxDQUFDLEVBQUcsQ0FBRVksRUFBRyxTQUFVakIsRUFBRyxJQUFLSyxFQUFHLFlBQWMsQ0FBQyxFQUFHLENBQUVZLEVBQUcsVUFBV2pCLEVBQUcsSUFBS0ssRUFBRyxhQUFlLENBQUMsRUFBRyxDQUFFWSxFQUFHLFVBQVdqQixFQUFHLElBQUtLLEVBQUcsWUFBYyxDQUFDLEVBQUcsY0FBZSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsZUFBZ0IsQ0FBQyxFQUFHLFlBQWEsQ0FBQyxFQUFHLFFBQVMsQ0FBQyxFQUFHLENBQUVZLEVBQUcsY0FBZWpCLEVBQUcsS0FBTUssRUFBRyxjQUFnQixDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsQ0FBRVksRUFBRyxPQUFRakIsRUFBRyxLQUFNSyxFQUFHLFdBQWEsQ0FBQyxFQUFHLENBQUVZLEVBQUcsT0FBUWpCLEVBQUcsS0FBTUssRUFBRyxXQUFhLENBQUMsRUFBRyxDQUFFWSxFQUFHLE9BQVFqQixFQUFHLElBQUtLLEVBQUcsVUFBWSxDQUFDLEVBQUcsQ0FBRVksRUFBRyxPQUFRakIsRUFBRyxJQUFLSyxFQUFHLFVBQVksQ0FBQyxFQUFHLENBQUVZLEVBQUcsUUFBU2pCLEVBQUcsTUFBT0ssRUFBRyxnQkFBa0IsQ0FBQyxFQUFHLENBQUVZLEVBQUcsUUFBU2pCLEVBQUcsTUFBT0ssRUFBRyxnQkFBa0IsQ0FBQyxFQUFHLENBQUVZLEVBQUcsT0FBUWpCLEVBQUcsSUFBSXNsQixJQUFvQm9WLEVBQVksQ0FBQyxDQUFDLElBQUssVUFBVyxDQUFDLEtBQU0sY0FBZ0IsQ0FBQyxFQUFHLENBQUV6NUIsRUFBRyxPQUFRakIsRUFBRyxJQUFJc2xCLElBQW9Cb1YsRUFBWSxDQUFDLENBQUMsSUFBSyxVQUFXLENBQUMsS0FBTSxjQUFnQixDQUFDLEVBQUcsYUFBYyxDQUFDLEVBQUcsZUFBZ0IsQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLGFBQWMsQ0FBQyxFQUFHLGtCQUFtQixDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsaUJBQWtCLENBQUMsRUFBRyxRQUFTLENBQUMsRUFBRyxvQkFBcUIsQ0FBQyxFQUFHLG9CQUFxQixDQUFDLEVBQUcsUUFBUyxDQUFDLEVBQUcsUUFBUyxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsbUJBQW9CLENBQUMsRUFBRyxDQUFFejVCLEVBQUcsVUFBV2pCLEVBQUcsSUFBS0ssRUFBRyx1QkFBeUIsQ0FBQyxFQUFHLGlCQUFrQixDQUFDLEVBQUcsaUJBQWtCLENBQUMsRUFBRyxDQUFFWSxFQUFHLFFBQVNqQixFQUFHLEtBQU1LLEVBQUcsZ0JBQWtCLENBQUMsRUFBRyxDQUFFWSxFQUFHLFFBQVNqQixFQUFHLEtBQU1LLEVBQUcsa0JBQW9CLENBQUMsRUFBRyxVQUFXLENBQUMsRUFBRyxVQUFXLENBQUMsRUFBRyxVQUFXLENBQUMsRUFBRyxVQUFXLENBQUMsRUFBRyxvQkFBcUIsQ0FBQyxFQUFHLHNCQUF1QixDQUFDLEVBQUcsQ0FBRVksRUFBRyxVQUFXakIsRUFBRyxNQUFPSyxFQUFHLG1CQUFxQixDQUFDLEVBQUcsQ0FBRVksRUFBRyxVQUFXakIsRUFBRyxNQUFPSyxFQUFHLG1CQUFxQixDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsZUFBZ0IsQ0FBQyxFQUFHLENBQUVZLEVBQUcsVUFBV2pCLEVBQUcsSUFBS0ssRUFBRyxzQkFBd0IsQ0FBQyxFQUFHLENBQUVZLEVBQUcsVUFBV2pCLEVBQUcsSUFBS0ssRUFBRyx3QkFBMEIsQ0FBQyxFQUFHLFlBQWEsQ0FBQyxFQUFHLFlBQWEsQ0FBQyxFQUFHLENBQUVZLEVBQUcsVUFBV2pCLEVBQUcsTUFBT0ssRUFBRyxhQUFlLENBQUMsRUFBRyxDQUFFWSxFQUFHLFVBQVdqQixFQUFHLE1BQU9LLEVBQUcsYUFBZSxDQUFDLEVBQUcsZ0JBQWlCLENBQUMsRUFBRyxpQkFBa0IsQ0FBQyxFQUFHLGlCQUFrQixDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsZUFBZ0IsQ0FBQyxFQUFHLGlCQUFrQixDQUFDLEVBQUcsZ0JBQWlCLENBQUMsRUFBRyxpQkFBa0IsQ0FBQyxFQUFHLGFBQWMsQ0FBQyxFQUFHLGNBQWUsQ0FBQyxFQUFHLGNBQWUsQ0FBQyxFQUFHLGVBQWdCLENBQUMsRUFBRyxjQUFlLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxhQUFjLENBQUMsRUFBRyxTQUFVLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxvQkFBcUIsQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFlBQWEsQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFlBQWEsQ0FBQyxFQUFHLFlBQWEsQ0FBQyxFQUFHLFlBQWEsQ0FBQyxFQUFHLFlBQWEsQ0FBQyxFQUFHLFlBQWEsQ0FBQyxFQUFHLGtCQUFtQixDQUFDLEVBQUcsbUJBQW9CLENBQUMsRUFBRyxDQUFFWSxFQUFHLHNCQUF1QmpCLEVBQUcsS0FBTUssRUFBRyxjQUFnQixDQUFDLEVBQUcsQ0FBRVksRUFBRyx1QkFBd0JqQixFQUFHLEtBQU1LLEVBQUcsY0FBZ0IsQ0FBQyxFQUFHLFlBQWEsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLGNBQWUsQ0FBQyxFQUFHLFlBQWEsQ0FBQyxFQUFHLFlBQWEsQ0FBQyxFQUFHLFlBQWEsQ0FBQyxFQUFHLFlBQWEsQ0FBQyxFQUFHLGFBQWMsQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLGNBQWUsQ0FBQyxFQUFHLFlBQWEsQ0FBQyxFQUFHLFlBQWEsQ0FBQyxFQUFHLFlBQWEsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFlBQWEsQ0FBQyxFQUFHLG1CQUFvQixDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsb0JBQXFCLENBQUMsRUFBRyxxQkFBc0IsQ0FBQyxFQUFHLGVBQWdCLENBQUMsRUFBRyxjQUFlLENBQUMsRUFBRyxnQkFBaUIsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLGFBQWMsQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLENBQUVZLEVBQUcsT0FBUWpCLEVBQUcsSUFBS0ssRUFBRyxVQUFZLENBQUMsRUFBRyxDQUFFWSxFQUFHLE9BQVFqQixFQUFHLElBQUtLLEVBQUcsVUFBWSxDQUFDLEVBQUcsQ0FBRVksRUFBRyxRQUFTakIsRUFBRyxNQUFPSyxFQUFHLFdBQWEsQ0FBQyxFQUFHLENBQUVZLEVBQUcsUUFBU2pCLEVBQUcsTUFBT0ssRUFBRyxXQUFhLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRywyQkFBNEIsQ0FBQyxFQUFHLDJCQUE0QixDQUFDLEVBQUcsMEJBQTJCLENBQUMsRUFBRyw0QkFBNkIsQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLGNBQWUsQ0FBQyxFQUFHLFlBQWEsQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLHNCQUF1QixDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsMkJBQTRCLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxDQUFFWSxFQUFHLFlBQWFqQixFQUFHLElBQUtLLEVBQUcsZUFBaUIsQ0FBQyxFQUFHLGFBQWMsQ0FBQyxFQUFHLGFBQWMsQ0FBQyxFQUFHLENBQUVZLEVBQUcsVUFBV2pCLEVBQUcsSUFBS0ssRUFBRyxhQUFlLENBQUMsRUFBRyxVQUFXLENBQUMsRUFBRyxVQUFXLENBQUMsRUFBRyxTQUFVLENBQUMsRUFBRyxhQUFjLENBQUMsRUFBRyxhQUFjLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxlQUFnQixDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsY0FBZSxDQUFDLEVBQUcsY0FBZSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsY0FBZSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsWUFBYSxDQUFDLEdBQUksYUFBYyxDQUFDLEdBQUksZ0JBQWlCLENBQUMsRUFBRyxnQkFBaUIsQ0FBQyxFQUFHLGlCQUFrQixDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsY0FBZSxDQUFDLEdBQUkscUJBQXNCLENBQUMsRUFBRyxzQkFBdUIsQ0FBQyxFQUFHLGVBQWdCLENBQUMsRUFBRyxnQkFBaUIsQ0FBQyxFQUFHLGNBQWUsQ0FBQyxFQUFHLGNBQWUsQ0FBQyxHQUFJLFdBQVksQ0FBQyxJQUFLLGNBQWUsQ0FBQyxHQUFJLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFdBQVksQ0FBQyxHQUFJLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFdBQVksQ0FBQyxHQUFJLFdBQVksQ0FB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RUFBRyxtQkFBb0IsQ0FBQyxFQUFHLG9CQUFxQixDQUFDLEVBQUcsc0JBQXVCLENBQUMsRUFBRyx3QkFBeUIsQ0FBQyxFQUFHLHVCQUF3QixDQUFDLEVBQUcsd0JBQXlCLENBQUMsRUFBRyxxQkFBc0IsQ0FBQyxFQUFHLHVCQUF3QixDQUFDLEVBQUcsbUJBQW9CLENBQUMsRUFBRyxvQkFBcUIsQ0FBQyxFQUFHLHNCQUF1QixDQUFDLEVBQUcsd0JBQXlCLENBQUMsRUFBRyx1QkFBd0IsQ0FBQyxFQUFHLHdCQUF5QixDQUFDLEVBQUcscUJBQXNCLENBQUMsRUFBRyx1QkFBd0IsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLGFBQWMsQ0FBQyxFQUFHLGFBQWMsQ0FBQyxFQUFHLGFBQWMsQ0FBQyxFQUFHLGFBQWMsQ0FBQyxFQUFHLFlBQWEsQ0FBQyxFQUFHLFlBQWEsQ0FBQyxFQUFHLFlBQWEsQ0FBQyxFQUFHLFlBQWEsQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLGtCQUFtQixDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsYUFBYyxDQUFDLEVBQUcsYUFBYyxDQUFDLEVBQUcsYUFBYyxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsYUFBYyxDQUFDLEVBQUcsYUFBYyxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsYUFBYyxDQUFDLEVBQUcsYUFBYyxDQUFDLEVBQUcsYUFBYyxDQUFDLEVBQUcsYUFBYyxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsYUFBYyxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsY0FBZSxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsYUFBYyxDQUFDLEVBQUcsYUFBYyxDQUFDLEVBQUcsY0FBZSxDQUFDLEVBQUcsY0FBZSxDQUFDLEVBQUcsY0FBZSxDQUFDLEVBQUcsY0FBZSxDQUFDLEVBQUcsY0FBZSxDQUFDLEVBQUcsY0FBZSxDQUFDLEVBQUcsY0FBZSxDQUFDLEVBQUcsY0FBZSxDQUFDLEVBQUcsYUFBYyxDQUFDLEVBQUcsYUFBYyxDQUFDLEVBQUcsYUFBYyxDQUFDLEVBQUcsY0FBZSxDQUFDLEVBQUcsY0FBZSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsYUFBYyxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsYUFBYyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsY0FBZSxDQUFDLEVBQUcsQ0FBRVksRUFBRyxvQkFBcUJqQixFQUFHLElBQUtLLEVBQUcseUJBQTJCLENBQUMsRUFBRyxDQUFFWSxFQUFHLHFCQUFzQmpCLEVBQUcsSUFBS0ssRUFBRywwQkFBNEIsQ0FBQyxHQUFJLFlBQWEsQ0FBQyxFQUFHLGNBQWUsQ0FBQyxFQUFHLGFBQWMsQ0FBQyxFQUFHLFlBQWEsQ0FBQyxFQUFHLGNBQWUsQ0FBQyxFQUFHLGNBQWUsQ0FBQyxFQUFHLGtCQUFtQixDQUFDLEVBQUcsaUJBQWtCLENBQUMsRUFBRyxVQUFXLENBQUMsRUFBRyxhQUFjLENBQUMsRUFBRyxjQUFlLENBQUMsRUFBRyxlQUFnQixDQUFDLEVBQUcsY0FBZSxDQUFDLEVBQUcsY0FBZSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsY0FBZSxDQUFDLEVBQUcsY0FBZSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsY0FBZSxDQUFDLEVBQUcsY0FBZSxDQUFDLEVBQUcsYUFBYyxDQUFDLEVBQUcsY0FBZSxDQUFDLEVBQUcsYUFBYyxDQUFDLEVBQUcsY0FBZSxDQUFDLEdBQUksYUFBYyxDQUFDLEVBQUcsY0FBZSxDQUFDLEVBQUcsYUFBYyxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsYUFBYyxDQUFDLEVBQUcsYUFBYyxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsYUFBYyxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsY0FBZSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsYUFBYyxDQUFDLEVBQUcsYUFBYyxDQUFDLEVBQUcsY0FBZSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsYUFBYyxDQUFDLEVBQUcsY0FBZSxDQUFDLEVBQUcsYUFBYyxDQUFDLEVBQUcsYUFBYyxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsY0FBZSxDQUFDLEVBQUcsY0FBZSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsYUFBYyxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsUUFBUyxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsYUFBYyxDQUFDLEVBQUcsY0FBZSxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsQ0FBRVksRUFBRyxZQUFhakIsRUFBRyxJQUFLSyxFQUFHLGVBQWlCLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxDQUFFWSxFQUFHLFFBQVNqQixFQUFHLElBQUtLLEVBQUcsV0FBYSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsYUFBYyxDQUFDLEVBQUcsYUFBYyxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsYUFBYyxDQUFDLEVBQUcsYUFBYyxDQUFDLEVBQUcsQ0FBRVksRUFBRyxhQUFjakIsRUFBRyxJQUFLSyxFQUFHLGdCQUFrQixDQUFDLEVBQUcsQ0FBRVksRUFBRyxhQUFjakIsRUFBRyxJQUFLSyxFQUFHLGdCQUFrQixDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsYUFBYyxDQUFDLEVBQUcsYUFBYyxDQUFDLEVBQUcsY0FBZSxDQUFDLEVBQUcsY0FBZSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsWUFBYSxDQUFDLEVBQUcsUUFBUyxDQUFDLEVBQUcsUUFBUyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsV0FBWSxDQUFDLEVBQUcsQ0FBRVksRUFBRyxhQUFjakIsRUFBRyxJQUFLSyxFQUFHLHdCQUEwQixDQUFDLEVBQUcsQ0FBRVksRUFBRyxtQkFBb0JqQixFQUFHLElBQUtLLEVBQUcsOEJBQWdDLENBQUMsRUFBRyxTQUFVLENBQUMsRUFBRyxTQUFVLENBQUMsRUFBRyxVQUFXLENBQUMsRUFBRyxVQUFXLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxTQUFVLENBQUMsRUFBRyxTQUFVLENBQUMsRUFBRyxDQUFFWSxFQUFHLFNBQVVqQixFQUFHLE1BQU9LLEVBQUcsWUFBYyxDQUFDLEVBQUcsQ0FBRVksRUFBRyxTQUFVakIsRUFBRyxNQUFPSyxFQUFHLFlBQWMsQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLENBQUVZLEVBQUcsa0JBQW1CakIsRUFBRyxJQUFLSyxFQUFHLHVCQUF5QixDQUFDLEVBQUcsQ0FBRVksRUFBRyxRQUFTakIsRUFBRyxJQUFLSyxFQUFHLHVCQUF5QixDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsU0FBVSxDQUFDLEVBQUcsY0FBZSxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsVUFBVyxDQUFDLEVBQUcsaUJBQWtCLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxRQUFTLENBQUMsRUFBRyxRQUFTLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyxhQUFjLENBQUMsRUFBRyxhQUFjLENBQUMsRUFBRyxhQUFjLENBQUMsRUFBRyxhQUFjLENBQUMsRUFBRyxhQUFjLENBQUMsRUFBRyxhQUFjLENBQUMsRUFBRyxDQUFFWSxFQUFHLFNBQVVqQixFQUFHLElBQUtLLEVBQUcsWUFBYyxDQUFDLEVBQUcsQ0FBRVksRUFBRyxTQUFVakIsRUFBRyxJQUFLSyxFQUFHLFlBQWMsQ0FBQyxFQUFHLFlBQWEsQ0FBQyxFQUFHLFlBQWEsQ0FBQyxFQUFHLENBQUVZLEVBQUcsVUFBV2pCLEVBQUcsTUFBT0ssRUFBRyxvQkFBc0IsQ0FBQyxFQUFHLENBQUVZLEVBQUcsVUFBV2pCLEVBQUcsTUFBT0ssRUFBRyxvQkFBc0IsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFlBQWEsQ0FBQyxFQUFHLFlBQWEsQ0FBQyxFQUFHLFlBQWEsQ0FBQyxFQUFHLFlBQWEsQ0FBQyxFQUFHLGFBQWMsQ0FBQyxFQUFHLGFBQWMsQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLGFBQWMsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFlBQWEsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFlBQWEsQ0FBQyxFQUFHLFlBQWEsQ0FBQyxFQUFHLFlBQWEsQ0FBQyxFQUFHLFdBQVksQ0FBQyxFQUFHLFlBQWEsQ0FBQyxFQUFHLENBQUVZLEVBQUcsVUFBV2pCLEVBQUcsS0FBTUssRUFBRyxhQUFlLENBQUMsTUFBTyxDQUFFTCxFQUFHLElBQUlzbEIsSUFBb0JvVixFQUFZLENBQUMsQ0FBQyxNQUFPLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxHQUFJLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFNBQVUsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLFVBQVcsQ0FBQyxFQUFHLGVBQWlCLENBQUMsS0FBTSxXQUFZLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxXQUFZLENBQUMsRUFBRyxZQUFhLENBQUMsRUFBRyw0Q0NUbHEwQi83QixPQUFPQyxlQUFlNUQsRUFBUyxhQUFjLENBQUUwRCxPQUFPLElBQ3REMUQsRUFBUTIvQixnQkFBa0IzL0IsRUFBUTQvQixrQkFBb0I1L0IsRUFBUTYvQixrQkFBb0I3L0IsRUFBUTgvQixZQUFjOS9CLEVBQVErL0IsWUFBYy8vQixFQUFRaTVCLG9CQUFzQmo1QixFQUFRZzVCLGlCQUFtQmg1QixFQUFRazVCLFdBQWFsNUIsRUFBUSs0QixVQUFZLzRCLEVBQVFxNUIsYUFBZXI1QixFQUFRbzVCLGNBQWdCcDVCLEVBQVFnZ0MsWUFBY2hnQyxFQUFRaWdDLFlBQWNqZ0MsRUFBUXUrQixtQkFBcUJ2K0IsRUFBUXcrQixXQUFheCtCLEVBQVF5eEIsV0FBYXp4QixFQUFRb3hCLGdCQUFrQnB4QixFQUFRby9CLFdBQWFwL0IsRUFBUXEvQixPQUFTci9CLEVBQVFteEIsVUFBWW54QixFQUFRaXhCLE9BQVNqeEIsRUFBUWtnQyxhQUFlbGdDLEVBQVFtZ0MsT0FBU25nQyxFQUFRb2dDLGFBQWVwZ0MsRUFBUXFnQyxpQkFBYyxFQUM1akIsSUFJSUEsRUFPQUQsRUFYQUUsRUFBYyxFQUFRLE1BQ3RCQyxFQUFjLEVBQVEsTUFDdEI3QixFQUFjLEVBQVEsTUE0QzFCLFNBQVN5QixFQUFPcjRCLEVBQU1FLEdBR2xCLFFBRmdCLElBQVpBLElBQXNCQSxFQUFVcTRCLEVBQVlHLE1BQ2pCLGlCQUFaeDRCLEVBQXVCQSxFQUFVQSxFQUFReTRCLFNBQzlDSixFQUFZSyxLQUFNLENBQzVCLElBQUl2QyxFQUEwQixpQkFBWm4yQixFQUF1QkEsRUFBUW0yQixVQUFPMzRCLEVBQ3hELE9BQU8sRUFBSTg2QixFQUFZcEgsWUFBWXB4QixFQUFNcTJCLEVBQzdDLENBQ0EsT0FBTyxFQUFJbUMsRUFBWXZILFdBQVdqeEIsRUFDdEMsRUFqREEsU0FBV3U0QixHQUVQQSxFQUFZQSxFQUFpQixJQUFJLEdBQUssTUFFdENBLEVBQVlBLEVBQWtCLEtBQUksR0FBSyxNQUMxQyxDQUxELENBS0dBLEVBQWNyZ0MsRUFBUXFnQyxjQUFnQnJnQyxFQUFRcWdDLFlBQWMsQ0FBQyxJQUVoRSxTQUFXRCxHQUtQQSxFQUFhQSxFQUFtQixLQUFJLEdBQUssT0FNekNBLEVBQWFBLEVBQW9CLE1BQUksR0FBSyxRQUsxQ0EsRUFBYUEsRUFBd0IsVUFBSSxHQUFLLFlBSzlDQSxFQUFhQSxFQUF3QixVQUFJLEdBQUssWUFLOUNBLEVBQWFBLEVBQW1CLEtBQUksR0FBSyxNQUM1QyxDQTNCRCxDQTJCR0EsRUFBZXBnQyxFQUFRb2dDLGVBQWlCcGdDLEVBQVFvZ0MsYUFBZSxDQUFDLElBZ0JuRXBnQyxFQUFRbWdDLE9BQVNBLEVBZWpCbmdDLEVBQVFrZ0MsYUFQUixTQUFzQnA0QixFQUFNRSxHQUN4QixJQUFJQyxPQUNZLElBQVpELElBQXNCQSxFQUFVcTRCLEVBQVlHLEtBQ2hELElBQUlsM0IsRUFBMEIsaUJBQVp0QixFQUF1QixDQUFFeTRCLE1BQU96NEIsR0FBWUEsRUFFOUQsT0FEcUIsUUFBcEJDLEVBQUtxQixFQUFLNjBCLFlBQXlCLElBQVBsMkIsSUFBc0JxQixFQUFLNjBCLEtBQU9tQyxFQUFZakgsYUFBYXlCLFFBQ2pGcUYsRUFBT3I0QixFQUFNd0IsRUFDeEIsRUEyQkF0SixFQUFRaXhCLE9BbkJSLFNBQWdCbnBCLEVBQU1FLFFBQ0YsSUFBWkEsSUFBc0JBLEVBQVVxNEIsRUFBWUcsS0FDaEQsSUFBSWwzQixFQUEwQixpQkFBWnRCLEVBQXVCLENBQUV5NEIsTUFBT3o0QixHQUFZQSxFQUU5RCxPQUFJc0IsRUFBSzYwQixPQUFTaUMsRUFBYU8sTUFDcEIsRUFBSWpDLEVBQVlVLFlBQVl0M0IsR0FDbkN3QixFQUFLNjBCLE9BQVNpQyxFQUFhdGIsV0FDcEIsRUFBSTRaLEVBQVl0TixpQkFBaUJ0cEIsR0FDeEN3QixFQUFLNjBCLE9BQVNpQyxFQUFhOW9CLE1BQ3BCLEVBQUlvbkIsRUFBWWpOLFlBQVkzcEIsR0FDbkN3QixFQUFLbTNCLFFBQVVKLEVBQVlLLEtBQ3ZCcDNCLEVBQUs2MEIsT0FBU2lDLEVBQWFRLE9BQ3BCLEVBQUlMLEVBQVloQyxvQkFBb0J6MkIsSUFFeEMsRUFBSXk0QixFQUFZL0IsWUFBWTEyQixJQUdoQyxFQUFJNDJCLEVBQVl2TixXQUFXcnBCLEVBQ3RDLEVBRUEsSUFBSSs0QixFQUFjLEVBQVEsTUFDMUJsOUIsT0FBT0MsZUFBZTVELEVBQVMsWUFBYSxDQUFFOEYsWUFBWSxFQUFNQyxJQUFLLFdBQWMsT0FBTzg2QixFQUFZMVAsU0FBVyxJQUNqSHh0QixPQUFPQyxlQUFlNUQsRUFBUyxTQUFVLENBQUU4RixZQUFZLEVBQU1DLElBQUssV0FBYyxPQUFPODZCLEVBQVl4QixNQUFRLElBQzNHMTdCLE9BQU9DLGVBQWU1RCxFQUFTLGFBQWMsQ0FBRThGLFlBQVksRUFBTUMsSUFBSyxXQUFjLE9BQU84NkIsRUFBWXpCLFVBQVksSUFDbkh6N0IsT0FBT0MsZUFBZTVELEVBQVMsa0JBQW1CLENBQUU4RixZQUFZLEVBQU1DLElBQUssV0FBYyxPQUFPODZCLEVBQVl6UCxlQUFpQixJQUM3SHp0QixPQUFPQyxlQUFlNUQsRUFBUyxhQUFjLENBQUU4RixZQUFZLEVBQU1DLElBQUssV0FBYyxPQUFPODZCLEVBQVlwUCxVQUFZLElBQ25ILElBQUlxUCxFQUFjLEVBQVEsTUFDMUJuOUIsT0FBT0MsZUFBZTVELEVBQVMsYUFBYyxDQUFFOEYsWUFBWSxFQUFNQyxJQUFLLFdBQWMsT0FBTys2QixFQUFZdEMsVUFBWSxJQUNuSDc2QixPQUFPQyxlQUFlNUQsRUFBUyxxQkFBc0IsQ0FBRThGLFlBQVksRUFBTUMsSUFBSyxXQUFjLE9BQU8rNkIsRUFBWXZDLGtCQUFvQixJQUVuSTU2QixPQUFPQyxlQUFlNUQsRUFBUyxjQUFlLENBQUU4RixZQUFZLEVBQU1DLElBQUssV0FBYyxPQUFPKzZCLEVBQVl0QyxVQUFZLElBQ3BINzZCLE9BQU9DLGVBQWU1RCxFQUFTLGNBQWUsQ0FBRThGLFlBQVksRUFBTUMsSUFBSyxXQUFjLE9BQU8rNkIsRUFBWXRDLFVBQVksSUFDcEgsSUFBSXVDLEVBQWMsRUFBUSxNQUMxQnA5QixPQUFPQyxlQUFlNUQsRUFBUyxnQkFBaUIsQ0FBRThGLFlBQVksRUFBTUMsSUFBSyxXQUFjLE9BQU9nN0IsRUFBWTNILGFBQWUsSUFDekh6MUIsT0FBT0MsZUFBZTVELEVBQVMsZUFBZ0IsQ0FBRThGLFlBQVksRUFBTUMsSUFBSyxXQUFjLE9BQU9nN0IsRUFBWTFILFlBQWMsSUFDdkgxMUIsT0FBT0MsZUFBZTVELEVBQVMsWUFBYSxDQUFFOEYsWUFBWSxFQUFNQyxJQUFLLFdBQWMsT0FBT2c3QixFQUFZaEksU0FBVyxJQUNqSHAxQixPQUFPQyxlQUFlNUQsRUFBUyxhQUFjLENBQUU4RixZQUFZLEVBQU1DLElBQUssV0FBYyxPQUFPZzdCLEVBQVk3SCxVQUFZLElBQ25IdjFCLE9BQU9DLGVBQWU1RCxFQUFTLG1CQUFvQixDQUFFOEYsWUFBWSxFQUFNQyxJQUFLLFdBQWMsT0FBT2c3QixFQUFZL0gsZ0JBQWtCLElBQy9IcjFCLE9BQU9DLGVBQWU1RCxFQUFTLHNCQUF1QixDQUFFOEYsWUFBWSxFQUFNQyxJQUFLLFdBQWMsT0FBT2c3QixFQUFZOUgsbUJBQXFCLElBRXJJdDFCLE9BQU9DLGVBQWU1RCxFQUFTLGNBQWUsQ0FBRThGLFlBQVksRUFBTUMsSUFBSyxXQUFjLE9BQU9nN0IsRUFBWTdILFVBQVksSUFDcEh2MUIsT0FBT0MsZUFBZTVELEVBQVMsY0FBZSxDQUFFOEYsWUFBWSxFQUFNQyxJQUFLLFdBQWMsT0FBT2c3QixFQUFZN0gsVUFBWSxJQUNwSHYxQixPQUFPQyxlQUFlNUQsRUFBUyxvQkFBcUIsQ0FBRThGLFlBQVksRUFBTUMsSUFBSyxXQUFjLE9BQU9nN0IsRUFBWS9ILGdCQUFrQixJQUNoSXIxQixPQUFPQyxlQUFlNUQsRUFBUyxvQkFBcUIsQ0FBRThGLFlBQVksRUFBTUMsSUFBSyxXQUFjLE9BQU9nN0IsRUFBWS9ILGdCQUFrQixJQUNoSXIxQixPQUFPQyxlQUFlNUQsRUFBUyxrQkFBbUIsQ0FBRThGLFlBQVksRUFBTUMsSUFBSyxXQUFjLE9BQU9nN0IsRUFBWWhJLFNBQVcsaUNDMUh2SHAxQixPQUFPQyxlQUFlNUQsRUFBUyxhQUFjLENBQzNDMEQsT0FBTyxJQUVUMUQsRUFBaUIsUUFNakIsU0FBc0JnaEMsRUFBTUMsR0FDMUIsSUFBSSxFQUFJQyxFQUFtQixTQUFHRixFQUFNQyxHQUNsQyxPQUFPLEVBRVQsSUFBS0QsSUFBU0MsR0FBMEIsV0FBbEJFLEVBQVFILElBQXdDLFdBQWxCRyxFQUFRRixHQUMxRCxPQUFPLEVBRVQsSUFBSUcsRUFBUXo5QixPQUFPNkssS0FBS3d5QixHQUNwQkssRUFBUTE5QixPQUFPNkssS0FBS3l5QixHQUN4QixHQUFJRyxFQUFNM2dDLFNBQVc0Z0MsRUFBTTVnQyxPQUN6QixPQUFPLEVBRVQyZ0MsRUFBTWhLLE9BQ05pSyxFQUFNakssT0FHTixJQUFLLElBQUlyeUIsRUFBSSxFQUFHQSxFQUFJcThCLEVBQU0zZ0MsT0FBUXNFLEdBQUssRUFDckMsS0FBSyxFQUFJdThCLEVBQWlCLFNBQUdMLEVBQU1HLEVBQU1yOEIsT0FBUSxFQUFJbThCLEVBQW1CLFNBQUdGLEVBQUtJLEVBQU1yOEIsSUFBS2s4QixFQUFLRyxFQUFNcjhCLEtBQ3BHLE9BQU8sRUFHWCxPQUFPLENBQ1QsRUEzQkEsSUFBSW04QixFQUFZSyxFQUF1QixFQUFRLE9BQzNDRCxFQUFVQyxFQUF1QixFQUFRLE9BQzdDLFNBQVNBLEVBQXVCOXVCLEdBQU8sT0FBT0EsR0FBT0EsRUFBSTlNLFdBQWE4TSxFQUFNLENBQUUsUUFBV0EsRUFBTyxDQUNoRyxTQUFTMHVCLEVBQVE5N0IsR0FBZ0MsT0FBTzg3QixFQUFVLG1CQUFxQi9sQixRQUFVLGlCQUFtQkEsT0FBT0MsU0FBVyxTQUFVaFcsR0FBSyxjQUFjQSxDQUFHLEVBQUksU0FBVUEsR0FBSyxPQUFPQSxHQUFLLG1CQUFxQitWLFFBQVUvVixFQUFFeVgsY0FBZ0IxQixRQUFVL1YsSUFBTStWLE9BQU92WixVQUFZLGdCQUFrQndELENBQUcsRUFBRzg3QixFQUFROTdCLEVBQUksQ0F5QjdUdEYsRUFBT0MsUUFBVUEsRUFBUXFjLHFDQ2hDekIxWSxPQUFPQyxlQUFlNUQsRUFBUyxhQUFjLENBQzNDMEQsT0FBTyxJQUdULElBQUl5OUIsRUFBNEIsbUJBQVgvbEIsUUFBb0QsaUJBQXBCQSxPQUFPQyxTQUF3QixTQUFVNUksR0FBTyxjQUFjQSxDQUFLLEVBQUksU0FBVUEsR0FBTyxPQUFPQSxHQUF5QixtQkFBWDJJLFFBQXlCM0ksRUFBSXFLLGNBQWdCMUIsUUFBVTNJLElBQVEySSxPQUFPdlosVUFBWSxnQkFBa0I0USxDQUFLLEVBRTNRelMsRUFBUXdoQyxTQUFXQSxFQUNuQnhoQyxFQUFReWhDLE9BQVNBLEVBQ2pCemhDLEVBQVEwaEMsT0FBU0EsRUFDakIxaEMsRUFBUTJoQyxVQUFZQSxFQUNwQjNoQyxFQUFRNGhDLFdBc0lSLFNBQW9Cam9CLEdBQ2xCLElBQUkzUixFQUFVeEgsVUFBVUMsT0FBUyxRQUFzQitFLElBQWpCaEYsVUFBVSxHQUFtQkEsVUFBVSxHQUFLLENBQUMsRUFFbkYsT0FBT21aLEVBQU03TixLQUFJLFNBQVU5SCxHQUN6QixPQUFPMjlCLEVBQVUzOUIsT0FBTXdCLEVBQVd3QyxFQUNwQyxJQUFHMkosS0FBSyxTQUNWLEVBMUlBLElBRUlrd0IsRUFBV04sRUFGRCxFQUFRLE9BTWxCTyxFQUFzQlAsRUFGRCxFQUFRLE9BTTdCUSxFQUFhUixFQUZELEVBQVEsT0FNcEJTLEVBQW1CVCxFQUZELEVBQVEsT0FNMUJVLEVBQWVWLEVBRkQsRUFBUSxPQU10QlcsRUFBb0JYLEVBRkQsRUFBUSxPQU0zQlksRUFBa0JaLEVBRkQsRUFBUSxPQU16QmEsRUFBUWIsRUFGRCxFQUFRLE9BSWZjLEVBQWdCLEVBQVEsTUFJeEJDLEVBQWVmLEVBRkQsRUFBUSxPQUkxQixTQUFTQSxFQUF1Qjl1QixHQUFPLE9BQU9BLEdBQU9BLEVBQUk5TSxXQUFhOE0sRUFBTSxDQUFFLFFBQVdBLEVBQU8sQ0FFaEcsSUFBSTh2QixFQUFlQyxTQUFTMS9CLEtBQUtNLEtBQUtvL0IsU0FBU3AvQixLQUFNcS9CLFFBQVE1Z0MsVUFBVTZnQyxTQUV2RSxTQUFTbEIsRUFBU3g5QixHQUVoQixPQURjLEVBQUlzK0IsRUFBc0IsV0FDNUJLLG1CQUNILEVBQUlMLEVBQXNCLFdBQUtLLGtCQUFrQjMrQixJQUFTLFlBRXZDLG1CQUFkQSxFQUFLd0QsS0FBc0J4RCxFQUFLd0QsS0FBS283QixjQUFlLEVBQUlkLEVBQTZCLFNBQUc5OUIsRUFBS3dELE9BQVMsWUFBY3hELEVBQUt3RCxJQUN6SSxDQUVBLFNBQVNpNkIsRUFBT3o4QixHQUNkLE9BQU9wRCxNQUFNb0QsRUFBSSxHQUFHMk0sS0FBSyxJQUMzQixDQUVBLFNBQVMrdkIsRUFBT21CLEVBQU9DLEdBQ3JCLE9BQU9BLEVBQU94ekIsTUFBTSxNQUFNeEQsS0FBSSxTQUFVK1QsR0FDdEMsTUFBTyxHQUFLN1EsT0FBT3l5QixFQUFPb0IsSUFBVTd6QixPQUFPNlEsRUFDN0MsSUFBR2xPLEtBQUssS0FDVixDQTZDQSxTQUFTZ3dCLEVBQVUzOUIsR0FDakIsSUFBSSsrQixFQUFldmlDLFVBQVVDLE9BQVMsUUFBc0IrRSxJQUFqQmhGLFVBQVUsR0FBbUJBLFVBQVUsR0FBSyxFQUNuRndILEVBQVV4SCxVQUFVQyxPQUFTLFFBQXNCK0UsSUFBakJoRixVQUFVLEdBQW1CQSxVQUFVLEdBQUssQ0FBQyxFQUVuRixHQUFvQixpQkFBVHdELEdBQXFDLGlCQUFUQSxFQUFtQixPQUFPLEVBQUk2OUIsRUFBa0IsU0FBRzc5QixHQUMxRixHQUFvQixtQkFBVEEsRUFBcUIsQ0FDOUIsSUFBSXJCLEdBQU8sRUFBSW0vQixFQUE2QixTQUFHOTlCLEdBQy9DLE1BQU8sYUFBZXJCLEVBQU8sSUFBTXFNLE9BQU9yTSxHQUFRLElBQU0sR0FDMUQsQ0FDQSxJQUFLcUIsRUFBTSxNQUFPLEdBR2xCLEtBRGMsRUFBSXMrQixFQUFzQixXQUMzQlUsZUFBZWgvQixLQWhCOUIsU0FBdUJBLEdBQ3JCLE9BQU8sRUFBSW8rQixFQUFlLFNBQUdwK0IsRUFBTSxhQUF3QyxpQkFBbEJBLEVBQUtpL0IsV0FBeUIsRUFBSWIsRUFBZSxTQUFHcCtCLEVBQU0sVUFBVyxFQUFJbytCLEVBQWUsU0FBR3ArQixFQUFNLFNBQVUsRUFBSW8rQixFQUFlLFNBQUdwK0IsRUFBTSxTQUFVLEVBQUlvK0IsRUFBZSxTQUFHcCtCLEVBQU0sY0FBZSxFQUFJbytCLEVBQWUsU0FBR3ArQixFQUFNLFdBQ25SLENBY3dDay9CLENBQWNsL0IsR0FDbEQsTUFBTyxJQUFNZ0wsUUFBTyxFQUFJbXpCLEVBQXlCLFNBQUduK0IsSUFBUyxJQUcvRCxJQUFJbS9CLEdBQWUsRUFBSWQsRUFBY2UsZ0JBQWdCcC9CLEdBQU04SCxLQUFJLFNBQVU5RyxHQUN2RSxPQUFPMjhCLEVBQVUzOEIsRUFBRys5QixFQUFjLzZCLEVBQ3BDLElBQUdsRyxPQUFPMmdDLFNBQ05qN0IsRUFBT2c2QixFQUFTeDlCLEdBRWhCMHJCLEVBQVExbkIsRUFBUXE3QixZQUFjLEdBekNwQyxTQUFxQnIvQixFQUFNZ0UsR0FDekIsSUFBSTBuQixHQUFRLEVBQUkyUyxFQUFjaUIsYUFBYXQvQixHQUkzQyxPQUhXTCxPQUFPNkssS0FBS2toQixHQUFPNXRCLFFBQU8sU0FBVStkLEdBQzdDLE1BQWEsYUFBTkEsQ0FDVCxJQUNZL1QsS0FBSSxTQUFVMkUsR0FDeEIsT0FBT3pCLE9BQU95QixHQUFPLElBQU16QixPQTdCL0IsU0FBb0JyQyxFQUFNM0UsR0FDeEIsT0FBSSxFQUFJKzVCLEVBQW9CLFNBQUdwMUIsSUFDdEIsRUFBSXcxQixFQUF5QixTQUFHbnpCLE9BQU9yQyxHQUFPLENBQUU0MkIsV0FBWSxZQUVqRSxFQUFJdkIsRUFBMEIsU0FBR3IxQixHQUM1QixJQUFNcUMsUUFBTyxFQUFJbXpCLEVBQXlCLFNBQUdsekIsT0FBT3RDLEtBQVUsS0FFbkUsRUFBSXUxQixFQUEyQixTQUFHdjFCLEdBQzdCLElBQU1xQyxRQUFPLEVBQUltekIsRUFBeUIsU0FBR0ksRUFBYTUxQixLQUFVLEtBRXpFLEVBQUlzMUIsRUFBc0IsU0FBR3QxQixHQUN4QixJQUFNcUMsUUFBTyxFQUFJbXpCLEVBQXlCLFNBQUd4MUIsSUFBUyxJQUVLLGlCQUEvQyxJQUFUQSxFQUF1QixZQUFjdzBCLEVBQVF4MEIsSUFDbkQzRSxFQUFRdzdCLFFBQ0gsSUFBTXgwQixRQUFPLEVBQUltekIsRUFBeUIsU0FBR3gxQixJQUFTLElBR3hELFVBRUYsV0FBd0IsSUFBVEEsRUFBdUIsWUFBY3cwQixFQUFReDBCLElBQVMsSUFDOUUsQ0FRc0M4MkIsQ0FBVy9ULEVBQU1qZixHQUFNekksR0FDM0QsSUFBRzJKLEtBQUssSUFDVixDQWlDeUMreEIsQ0FBWTEvQixFQUFNZ0UsR0FDckQyN0IsRUFBY2pVLEVBQVEsSUFBTSxHQUM1QmtVLEVBQWFULEVBQWExaUMsT0FBUyxJQUFNLElBQ3pDb2pDLEVBbENOLFNBQXdCVixFQUFjSixHQUNwQyxPQUFPSSxFQUFhMWlDLE9BQVMsS0FBT3VPLE9BQU9tMEIsRUFBYXIzQixLQUFJLFNBQVUrVCxHQUNwRSxPQUFPNmhCLEVBQU9xQixFQUFjbGpCLEVBQzlCLElBQUdsTyxLQUFLLE9BQVMsS0FBTyxFQUMxQixDQThCeUJteUIsQ0FBZVgsRUFBY0osR0FDaERnQixFQUFZWixFQUFhMWlDLE9BQVMsS0FBT3VPLE9BQU94SCxHQUFRLElBQU0sS0FDbEUsTUFBTyxJQUFNd0gsT0FBT3hILEdBQVFtOEIsRUFBYzMwQixPQUFPMGdCLEdBQVNrVSxFQUFhNTBCLE9BQU82MEIsR0FBb0JFLENBQ3BHLHlCQzlJQSxJQUFJQyxFQUFlLFdBQWMsU0FBU3hVLEVBQWlCL1ksRUFBUWlaLEdBQVMsSUFBSyxJQUFJM3FCLEVBQUksRUFBR0EsRUFBSTJxQixFQUFNanZCLE9BQVFzRSxJQUFLLENBQUUsSUFBSWsvQixFQUFhdlUsRUFBTTNxQixHQUFJay9CLEVBQVduK0IsV0FBYW0rQixFQUFXbitCLGFBQWMsRUFBT20rQixFQUFXcCtCLGNBQWUsRUFBVSxVQUFXbytCLElBQVlBLEVBQVdyK0IsVUFBVyxHQUFNakMsT0FBT0MsZUFBZTZTLEVBQVF3dEIsRUFBV3h6QixJQUFLd3pCLEVBQWEsQ0FBRSxDQUFFLE9BQU8sU0FBVUMsRUFBYUMsRUFBWUMsR0FBaUosT0FBOUhELEdBQVkzVSxFQUFpQjBVLEVBQVlyaUMsVUFBV3NpQyxHQUFpQkMsR0FBYTVVLEVBQWlCMFUsRUFBYUUsR0FBcUJGLENBQWEsQ0FBRyxDQUE3aEIsR0FJbkIsU0FBU0csRUFBbUJDLEVBQVlDLEdBQ3RDLE9BQU8sSUFBSWgxQixNQUFNUCxPQUFPczFCLEdBQWMsNEJBQThCdDFCLE9BQU91MUIsR0FBYSw2QkFDMUYsQ0FFQSxJQUFJQyxFQUFnQixXQUNsQixTQUFTQSxLQVBYLFNBQXlCOW1CLEVBQVV3bUIsR0FBZSxLQUFNeG1CLGFBQW9Cd21CLEdBQWdCLE1BQU0sSUFBSTNqQyxVQUFVLG9DQUF3QyxDQVFwSmtrQyxDQUFnQnJrQyxLQUFNb2tDLEdBRXRCcGtDLEtBQUs0SCxRQUFVLENBQUMsQ0FDbEIsQ0FzRkEsT0EvRUFnOEIsRUFBYVEsRUFBZSxDQUFDLENBQzNCL3pCLElBQUssaUJBQ0wvTSxNQUNFLFNBQXdCc0UsR0FDdEIsTUFBTXE4QixFQUFtQixpQkFBa0IsZ0JBQzdDLEdBVUQsQ0FDRDV6QixJQUFLLGdCQUNML00sTUFDRSxTQUF1Qk0sR0FDckIsTUFBTXFnQyxFQUFtQixnQkFBaUIsZ0JBQzVDLEdBT0QsQ0FDRDV6QixJQUFLLHFCQUNML00sTUFDRSxTQUE0Qk0sRUFBTTBnQyxHQUNoQyxPQUFLMWdDLEVBR01BLEVBQUt3RCxPQUVBazlCLEVBSlAxZ0MsQ0FLWCxHQU9ELENBQ0R5TSxJQUFLLGlCQUNML00sTUFDRSxTQUF3QmtJLEdBQ3RCLE1BQU15NEIsRUFBbUIsaUJBQWtCLGdCQUM3QyxHQU9ELENBQ0Q1ekIsSUFBSyxnQkFDTC9NLE1BQ0UsU0FBdUI4RCxFQUFNa29CLEdBQzNCLE1BQU0yVSxFQUFtQixnQkFBaUIsZ0JBQzVDLEdBT0QsQ0FDRDV6QixJQUFLLHlCQUNML00sTUFDRSxTQUFnQ2dhLEVBQVV1VSxHQUN4Q0EsRUFBUzd1QixLQUFLc2EsRUFDaEIsS0FNRzhtQixDQUNULENBNUZvQixHQThGcEJBLEVBQWNHLE1BQVEsQ0FDcEJDLE9BQVEsU0FDUkMsTUFBTyxRQUNQQyxRQUFTLFdBR1gva0MsRUFBT0MsUUFBVXdrQywrQkM1R2pCN2dDLE9BQU9DLGVBQWU1RCxFQUFTLGFBQWMsQ0FDM0MwRCxPQUFPLElBS1QxRCxFQUFRc2pDLFlBQWNBLEVBQ3RCdGpDLEVBQVFvakMsZUFBaUJBLEVBQ3pCcGpDLEVBQVEra0MsYUF5RVIsU0FBc0IvZ0MsRUFBTWtOLEdBQzFCLElBQUlVLEVBQVUweEIsRUFBWXQvQixHQUFNa04sV0FBYSxHQUU3QyxPQURBVSxFQUFVNUMsT0FBTzRDLEdBQVN5QixRQUFRLE1BQU8sTUFDckMsRUFBSTJ4QixFQUFtQixTQUFHOXpCLEdBQW1CQSxFQUFVckQsS0FBSytELElBQ3hELElBQU01QyxPQUFPNEMsR0FBVyxLQUFLUixRQUFRLElBQU1wQyxPQUFPa0MsR0FBYSxNQUFRLENBQ2pGLEVBN0VBbFIsRUFBUWlsQyxZQUFjQSxFQUN0QmpsQyxFQUFRa2xDLFdBQWFBLEVBQ3JCbGxDLEVBQVFtbEMsZUEwR1IsU0FBd0I5N0IsRUFBTSs3QixHQVE1QixPQVBjRixFQUFXNzdCLEdBQU0sU0FBVXJGLEdBQ3ZDLFFBQUtBLEVBQUtxaEMsV0FJMkMsSUFBOUNqQyxFQUFlcC9CLEdBQU1vTixRQUFRZzBCLEVBQ3RDLElBQ2UsSUFBTSxJQUN2QixFQWxIQXBsQyxFQUFRc2xDLFdBQWFBLEVBQ3JCdGxDLEVBQVF1bEMsY0FrSlIsU0FBdUJ2aEMsRUFBTXFGLEdBQzNCLE9BQVFpOEIsRUFBV3RoQyxFQUFNcUYsSUFBUyxJQUFJd1EsU0FDeEMsRUFuSkE3WixFQUFRd2xDLFVBcUpSLFNBQW1CeGhDLEVBQU15YyxHQUN2QixPQUFPNmlCLEVBQVl0L0IsR0FBTXljLEtBQU9BLENBQ2xDLEVBdEpBemdCLEVBQVF5bEMsdUJBc0tSLFNBQWdDemhDLEVBQU0wckIsR0FDcEMsT0FBTyxFQUFJZ1csRUFBb0IsU0FBR3BDLEVBQVl0L0IsSUFYaEJ5TyxFQVc4Q2lkLEdBVnJFLEVBQUlpVyxFQUFrQixTQUFHbHpCLEdBQUt6RyxRQUFPLFNBQVU0NUIsRUFBS0MsR0FDekQsSUFBSUMsRUF6SzRhLFNBQVU3bkIsRUFBS2xaLEdBQUssR0FBSW5ELE1BQU13SSxRQUFRNlQsR0FBUSxPQUFPQSxFQUFZLEdBQUk3QyxPQUFPQyxZQUFZMVgsT0FBT3NhLEdBQVEsT0FBeGYsU0FBdUJBLEVBQUtsWixHQUFLLElBQUlnaEMsRUFBTyxHQUFRQyxHQUFLLEVBQVU1ZixHQUFLLEVBQVc2ZixPQUFLemdDLEVBQVcsSUFBTSxJQUFLLElBQWlDMGdDLEVBQTdCN2hDLEVBQUs0WixFQUFJN0MsT0FBT0MsY0FBbUIycUIsR0FBTUUsRUFBSzdoQyxFQUFHbVIsUUFBUTJjLFFBQW9CNFQsRUFBS3JoQyxLQUFLd2hDLEVBQUd4aUMsUUFBWXFCLEdBQUtnaEMsRUFBS3RsQyxTQUFXc0UsR0FBM0RpaEMsR0FBSyxHQUFrRSxDQUFFLE1BQU9HLEdBQU8vZixHQUFLLEVBQU02ZixFQUFLRSxDQUFLLENBQUUsUUFBVSxLQUFXSCxHQUFNM2hDLEVBQVcsUUFBR0EsRUFBVyxRQUFLLENBQUUsUUFBVSxHQUFJK2hCLEVBQUksTUFBTTZmLENBQUksQ0FBRSxDQUFFLE9BQU9GLENBQU0sQ0FBdUhLLENBQWNub0IsRUFBS2xaLEdBQWEsTUFBTSxJQUFJeEUsVUFBVSx1REFBMkQsQ0F5S2pvQjhsQyxDQUFlUixFQUFNLEdBQzdCbGxDLEVBQUltbEMsRUFBTSxHQUNWNy9CLEVBQUk2L0IsRUFBTSxHQUVkLE9BQU8sRUFBSVEsRUFBa0IsU0FBRyxDQUFDLEVBQUdWLEVBL0h4QyxTQUF5Qm56QixFQUFLaEMsRUFBSy9NLEdBQWlLLE9BQXBKK00sS0FBT2dDLEVBQU85TyxPQUFPQyxlQUFlNk8sRUFBS2hDLEVBQUssQ0FBRS9NLE1BQU9BLEVBQU9vQyxZQUFZLEVBQU1ELGNBQWMsRUFBTUQsVUFBVSxJQUFrQjZNLEVBQUloQyxHQUFPL00sRUFBZ0IrTyxDQUFLLENBK0huSzh6QixDQUFnQixDQUFDLEVBQUc1bEMsRUFUakUsU0FBMEJzRixHQUN4QixZQUFvQixJQUFOQSxFQUFvQkEsRUFBSXVnQyxDQUN4QyxDQU9vRUMsQ0FBaUJ4Z0MsSUFDbkYsR0FBRyxDQUFDLEtBUE4sSUFBZ0N3TSxDQVloQyxFQXZLQXpTLEVBQVEwbUMsZ0JBK01SLFNBQVNBLEVBQWdCMWlDLEdBQ3ZCLE9BQU8yaUMsRUFBbUIzaUMsRUFBTSxDQUM5Qmt5QixRQUFTd1EsRUFDVEUsVUFDRSxTQUFtQkMsR0FDakIsSUFBSXIvQixFQUFPcS9CLEVBQU1yL0IsS0FFakIsTUFBTyxJQUFNd0gsT0FBT3hILEVBQUtvN0IsY0FBZSxFQUFJZCxFQUE2QixTQUFHdDZCLElBQVMsS0FDdkYsR0FLTixFQTNOQXhILEVBQVE4bUMscUJBNk5SLFNBQVNBLEVBQXFCOWlDLEVBQU0yYSxHQUNsQyxPQUFPZ29CLEVBQW1CM2lDLEVBQU0sQ0FDOUJreUIsUUFDRSxTQUFpQnBqQixHQUNmLE9BQU9nMEIsRUFBcUJoMEIsRUFBTTZMLEVBQ3BDLEVBSUZvb0IsZ0JBQ0UsU0FBeUJqMEIsR0FFdkIsTUFEWSxHQUFHbk0sT0FBT2dZLEVBQVFxb0IsZUFBZWwwQixHQUFNLElBQ3RDaEgsSUFBSW03QixHQUFxQnQxQixLQUFLLEdBQzdDLEdBS04sRUE5T0EzUixFQUFRa25DLHFCQXVQUixTQUFTQSxFQUFxQmxqQyxFQUFNMmEsR0FDbEMsT0FBT2dvQixFQUFtQjNpQyxFQUFNLENBQzlCa3lCLFFBQ0UsU0FBaUJwakIsR0FDZixPQUFPbzBCLEVBQXFCcDBCLEVBQU02TCxFQUNwQyxFQUlGb29CLGdCQUNFLFNBQXlCajBCLEdBRXZCLE1BRFksR0FBR25NLE9BQU9nWSxFQUFRcW9CLGVBQWVsMEIsR0FBTSxJQUN0Q2hILElBQUlxN0IsR0FBcUJ4MUIsS0FBSyxHQUM3QyxFQUtGeTFCLHVCQUF1QixHQUUzQixFQXpRQSxJQUVJZCxFQUFXL0UsRUFGRCxFQUFRLE9BTWxCOEYsRUFBbUI5RixFQUZELEVBQVEsT0FNMUJvRSxFQUFXcEUsRUFGQSxFQUFRLE9BTW5CbUUsRUFBYW5FLEVBRkQsRUFBUSxPQU1wQk8sRUFBc0JQLEVBRkQsRUFBUSxPQU03QnlELEVBQVl6RCxFQUZELEVBQVEsT0FNbkJlLEVBQWVmLEVBRkQsRUFBUSxPQUkxQixTQUFTQSxFQUF1Qjl1QixHQUFPLE9BQU9BLEdBQU9BLEVBQUk5TSxXQUFhOE0sRUFBTSxDQUFFLFFBQVdBLEVBQU8sQ0FJaEcsU0FBUzYwQixFQUFtQnJwQixHQUFPLEdBQUlyYyxNQUFNd0ksUUFBUTZULEdBQU0sQ0FBRSxJQUFLLElBQUlsWixFQUFJLEVBQUd5YSxFQUFPNWQsTUFBTXFjLEVBQUl4ZCxRQUFTc0UsRUFBSWtaLEVBQUl4ZCxPQUFRc0UsSUFBT3lhLEVBQUt6YSxHQUFLa1osRUFBSWxaLEdBQU0sT0FBT3lhLENBQU0sQ0FBUyxPQUFPNWQsTUFBTTBFLEtBQUsyWCxFQUFRLENBRWxNLFNBQVNxbEIsRUFBWXQvQixHQUNuQixPQUFPQSxHQUFRQSxFQUFLMHJCLE9BQVMsQ0FBQyxDQUNoQyxDQUVBLFNBQVMwVCxFQUFlcC9CLEdBQ3RCLElBQUtBLEVBQU0sTUFBTyxHQUVsQixJQUFJMmEsR0FBVSxFQUFJMmpCLEVBQXNCLFdBQ3BDaUYsRUFBdUI1b0IsRUFBUTZvQixZQUE0QyxtQkFBdkI3b0IsRUFBUTZvQixXQUU1REMsRUFBZ0I3bEMsTUFBTXdJLFFBQVFwRyxFQUFLcWhDLFdBQVksRUFBSWdDLEVBQTBCLFNBQUdyakMsRUFBS3FoQyxTQUFVLEdBQUssQ0FBQ3JoQyxFQUFLcWhDLFVBRzlHLE9BQUtrQyxHQUlFLEVBQUlGLEVBQTBCLFNBQUdJLEVBQWMzN0IsS0FBSSxTQUFVNDdCLEdBRWxFLE9BQUkvb0IsRUFBUTZvQixXQUFXRSxHQUNkdEUsRUFBZXNFLEdBR2pCQSxDQUNULElBQUksR0FWS0QsQ0FXWCxDQVNBLFNBQVN4QyxFQUFZMEMsRUFBTXR2QixHQUNyQnN2QixHQUNGdHZCLEVBQUdzdkIsR0FFTHZFLEVBQWV1RSxHQUFNMStCLFNBQVEsU0FBVWpGLEdBQ3JDLE9BQU9paEMsRUFBWWpoQyxFQUFNcVUsRUFDM0IsR0FDRixDQUVBLFNBQVM2c0IsRUFBV3lDLEVBQU10dkIsR0FDeEIsSUFBSXhNLEVBQVUsR0FNZCxPQUxBbzVCLEVBQVkwQyxHQUFNLFNBQVUzakMsR0FDdEJxVSxFQUFHclUsSUFDTDZILEVBQVFuSCxLQUFLVixFQUVqQixJQUNPNkgsQ0FDVCxDQXVCQSxTQUFTKzdCLEVBQVdDLEVBQU14dkIsR0FDeEIsT0FBT3d2QixFQUFLL2xDLFFBQU8sU0FBVTZsQyxHQUMzQixPQUF1QyxJQUFoQ3pDLEVBQVd5QyxFQUFNdHZCLEdBQUk1WCxNQUM5QixHQUNGLENBRUEsU0FBUzZrQyxFQUFXdGhDLEVBQU1xRixHQVF4QixJQVBBLElBQUl5K0IsRUFBUSxDQUFDeitCLEdBQ1R3K0IsRUFBTyxHQUVQRSxFQUFVLFNBQWlCQyxHQUM3QixPQUFPaGtDLElBQVNna0MsQ0FDbEIsRUFFT0YsRUFBTXJuQyxRQUFRLENBQ25CLElBQUk2a0IsRUFBVXdpQixFQUFNeGEsTUFDaEJ2ZixFQUFXcTFCLEVBQWU5ZCxHQUM5QixHQUFJQSxJQUFZdGhCLEVBQU0sT0FBTzRqQyxFQUFXQyxFQUFNRSxHQUU5Q0YsRUFBS25qQyxLQUFLNGdCLEdBRWMsSUFBcEJ2WCxFQUFTdE4sUUFFWG9uQyxFQUFLdmEsTUFFUHdhLEVBQU1wakMsS0FBS3JELE1BQU15bUMsRUFBT1IsRUFBbUJ2NUIsR0FDN0MsQ0FFQSxPQUFPLElBQ1QsQ0FVQSxJQUFJeTRCLEVBQWtCLENBQUMsRUFrQnZCLFNBQVNTLEVBQW9CZ0IsR0FDM0IsTUFBd0IsaUJBQWJBLEVBQ0ZqNUIsT0FBT2k1QixHQUFZLElBRXZCQSxHQUdFQSxFQUFTNTNCLGFBRlAsRUFHWCxDQUVBLFNBQVNzMkIsRUFBbUIzaUMsRUFBTWtrQyxHQUNoQyxJQUFJdEIsRUFBWXNCLEVBQU10QixVQUNsQkcsRUFBa0JtQixFQUFNbkIsZ0JBQ3hCN1EsRUFBVWdTLEVBQU1oUyxRQUNoQmlTLEVBQXdCRCxFQUFNZCxzQkFDOUJBLE9BQWtENWhDLElBQTFCMmlDLEdBQThDQSxFQUUxRSxPQUFZLE1BQVJua0MsRUFDSyxHQUdXLGlCQUFUQSxHQUFxQyxpQkFBVEEsRUFDOUJnTCxPQUFPaEwsR0FHWjRpQyxHQUFhNWlDLEVBQUt3RCxNQUE2QixtQkFBZHhELEVBQUt3RCxLQUNqQ28vQixFQUFVNWlDLEdBR2YraUMsR0FBcUMsU0FBbEIvaUMsRUFBS2kvQixTQUNuQjhELEVBQWdCL2lDLEdBRUosTUFBakJBLEVBQUtxaEMsVUFBb0IrQixFQUNwQixLQUVGaEUsRUFBZXAvQixHQUFNOEgsSUFBSW9xQixHQUFTdmtCLEtBQUssR0FDaEQsQ0FxQ0EsU0FBU3cxQixFQUFvQmMsR0FDM0IsT0FBZ0IsTUFBWkEsRUFDSyxLQUVGQSxFQUFTRyxVQUFVLzBCLFFBQVEsMENBQTJDLEdBQy9FLCtCQ3ZRQTFQLE9BQU9DLGVBQWU1RCxFQUFTLGFBQWMsQ0FDM0MwRCxPQUFPLElBR1QsSUFBSXk5QixFQUE0QixtQkFBWC9sQixRQUFvRCxpQkFBcEJBLE9BQU9DLFNBQXdCLFNBQVU1SSxHQUFPLGNBQWNBLENBQUssRUFBSSxTQUFVQSxHQUFPLE9BQU9BLEdBQXlCLG1CQUFYMkksUUFBeUIzSSxFQUFJcUssY0FBZ0IxQixRQUFVM0ksSUFBUTJJLE9BQU92WixVQUFZLGdCQUFrQjRRLENBQUssRUFFdlF1eEIsRUFBZSxXQUFjLFNBQVN4VSxFQUFpQi9ZLEVBQVFpWixHQUFTLElBQUssSUFBSTNxQixFQUFJLEVBQUdBLEVBQUkycUIsRUFBTWp2QixPQUFRc0UsSUFBSyxDQUFFLElBQUlrL0IsRUFBYXZVLEVBQU0zcUIsR0FBSWsvQixFQUFXbitCLFdBQWFtK0IsRUFBV24rQixhQUFjLEVBQU9tK0IsRUFBV3ArQixjQUFlLEVBQVUsVUFBV28rQixJQUFZQSxFQUFXcitCLFVBQVcsR0FBTWpDLE9BQU9DLGVBQWU2UyxFQUFRd3RCLEVBQVd4ekIsSUFBS3d6QixFQUFhLENBQUUsQ0FBRSxPQUFPLFNBQVVDLEVBQWFDLEVBQVlDLEdBQWlKLE9BQTlIRCxHQUFZM1UsRUFBaUIwVSxFQUFZcmlDLFVBQVdzaUMsR0FBaUJDLEdBQWE1VSxFQUFpQjBVLEVBQWFFLEdBQXFCRixDQUFhLENBQUcsQ0FBN2hCLEdBSWZvQyxFQUFXL0UsRUFGRCxFQUFRLE9BTWxCOEYsRUFBbUI5RixFQUZELEVBQVEsT0FNMUJhLEVBQVFiLEVBRkQsRUFBUSxPQUlmOEcsRUFBUyxFQUFRLE1BSWpCL0YsRUFBZWYsRUFGRCxFQUFRLE9BSXRCK0csRUFBUyxFQUFRLE1BRWpCakcsRUFBZ0IsRUFBUSxNQUV4QmtHLEVBQWEsRUFBUSxLQUV6QixTQUFTaEgsRUFBdUI5dUIsR0FBTyxPQUFPQSxHQUFPQSxFQUFJOU0sV0FBYThNLEVBQU0sQ0FBRTRKLFFBQVM1SixFQUFPLENBRTlGLFNBQVM4ekIsRUFBZ0I5ekIsRUFBS2hDLEVBQUsvTSxHQUFpSyxPQUFwSitNLEtBQU9nQyxFQUFPOU8sT0FBT0MsZUFBZTZPLEVBQUtoQyxFQUFLLENBQUUvTSxNQUFPQSxFQUFPb0MsWUFBWSxFQUFNRCxjQUFjLEVBQU1ELFVBQVUsSUFBa0I2TSxFQUFJaEMsR0FBTy9NLEVBQWdCK08sQ0FBSyxDQU1oTixTQUFTZ3lCLEVBQWdCL21CLEVBQVV3bUIsR0FBZSxLQUFNeG1CLGFBQW9Cd21CLEdBQWdCLE1BQU0sSUFBSTNqQyxVQUFVLG9DQUF3QyxDQUV4SixJQUFJaW9DLEdBQU8sRUFBSUgsRUFBT0ksS0FBSyxZQUN2QkMsR0FBUSxFQUFJTCxFQUFPSSxLQUFLLGFBQ3hCRSxHQUFXLEVBQUlOLEVBQU9JLEtBQUssZ0JBQzNCRyxHQUFhLEVBQUlQLEVBQU9JLEtBQUssa0JBQzdCSSxHQUFPLEVBQUlSLEVBQU9JLEtBQUssWUFDdkJLLEdBQVUsRUFBSVQsRUFBT0ksS0FBSyxlQUMxQk0sR0FBYSxFQUFJVixFQUFPSSxLQUFLLGlCQUM3Qk8sR0FBcUIsRUFBSVgsRUFBT0ksS0FBSyx5QkFDckNRLEdBQWUsRUFBSVosRUFBT0ksS0FBSyxtQkFDL0JTLEdBQWEsRUFBSWIsRUFBT0ksS0FBSyxpQkFXakMsU0FBU1UsRUFBbUJ0ekIsRUFBUzBaLEdBQ25DLElBQUl6dEIsRUFBU3RCLFVBQVVDLE9BQVMsUUFBc0IrRSxJQUFqQmhGLFVBQVUsR0FBbUJBLFVBQVUsR0FBSzZoQyxFQUFjNkMsV0FFL0YsT0FBT3J2QixFQUFRdXpCLFNBQVEsU0FBVXBrQyxHQUMvQixPQUFPbEQsRUFBT2tELEVBQUVxa0Msa0JBQW1COVosRUFDckMsR0FDRixDQVVBLFNBQVMrWixFQUFxQnp6QixFQUFTMFosR0FDckMsT0FBTzFaLEVBQVF0RixLQUFLc0YsRUFBUTB6QixtQkFBbUJ6bkMsT0FBT3l0QixHQUFXenRCLE9BQU8yZ0MsU0FDMUUsQ0FFQSxTQUFTK0csRUFBb0IzekIsR0FDM0IsR0FBNkIsSUFBekJBLEVBQVFnekIsR0FBTXBvQyxPQUNoQixNQUFNLElBQUk4TyxNQUFNLCtFQUVsQixPQUFJc0csRUFBUWd6QixLQUFVaHpCLEVBQ2JBLEVBQVFrekIsR0FBWSxHQUV0Qmx6QixFQUFRZ3pCLEdBQU1MLEVBQ3ZCLENBRUEsU0FBU2lCLEVBQVk1ekIsRUFBUzdSLEdBQzVCLE9BQU8sRUFBSXErQixFQUFja0QsZUFBZXZoQyxFQUFNd2xDLEVBQW9CM3pCLEdBQ3BFLENBRUEsU0FBUzZ6QixFQUFnQjd6QixFQUFTOEQsR0FDM0JBLEVBR08vWCxNQUFNd0ksUUFBUXVQLEtBSXhCLEVBQUkwdUIsRUFBT3NCLFlBQVk5ekIsRUFBUzJ5QixFQUFNN3VCLEVBQU0sS0FDNUMsRUFBSTB1QixFQUFPc0IsWUFBWTl6QixFQUFTNnlCLEVBQU8vdUIsTUFKdkMsRUFBSTB1QixFQUFPc0IsWUFBWTl6QixFQUFTMnlCLEVBQU03dUIsSUFDdEMsRUFBSTB1QixFQUFPc0IsWUFBWTl6QixFQUFTNnlCLEVBQU8sQ0FBQy91QixPQUp4QyxFQUFJMHVCLEVBQU9zQixZQUFZOXpCLEVBQVMyeUIsRUFBTSxPQUN0QyxFQUFJSCxFQUFPc0IsWUFBWTl6QixFQUFTNnlCLEVBQU8sTUFRekMsRUFBSUwsRUFBT3NCLFlBQVk5ekIsRUFBUyxTQUFVQSxFQUFRNnlCLEdBQU9qb0MsT0FDM0QsQ0FNQSxJQUFJbXBDLEVBQWUsV0FDakIsU0FBU0EsRUFBYWp3QixFQUFPdFEsR0FDM0IsSUFBSXdnQyxFQUFnQnJwQyxVQUFVQyxPQUFTLFFBQXNCK0UsSUFBakJoRixVQUFVLEdBQW1CQSxVQUFVLEdBQUssQ0FBQyxFQUl6RixHQUZBaWtDLEVBQWdCcmtDLEtBQU13cEMsSUFFakIsRUFBQUUsRUFBT0MsU0FBVyxFQUFBRCxFQUFPRSxTQUM1QixNQUFNLElBQUl6NkIsTUFBTSw4RUFFbEIsSUFBSXZILEdBQVUsRUFBSXFnQyxFQUFPNEIsYUFBYUosR0FFdEMsR0FBS3hnQyxHQXdCSCxFQUFJZy9CLEVBQU9zQixZQUFZdnBDLEtBQU11b0MsRUFBVXQvQixFQUFLcy9CLEtBQzVDLEVBQUlOLEVBQU9zQixZQUFZdnBDLEtBQU15b0MsRUFBTXgvQixHQUNuQ3FnQyxFQUFnQnRwQyxLQUFNdVosSUFDdEIsRUFBSTB1QixFQUFPc0IsWUFBWXZwQyxLQUFNMm9DLEVBQVkxL0IsRUFBS3EvQixLQUM5QyxFQUFJTCxFQUFPc0IsWUFBWXZwQyxLQUFNMG9DLEVBQVN6L0IsRUFBS3kvQixLQUMzQyxFQUFJVCxFQUFPc0IsWUFBWXZwQyxLQUFNNm9DLEVBQWMsUUE3QmxDLENBQ1QsSUFBSXRxQixHQUFVLEVBQUkyakIsRUFBc0IsU0FBR3Q2QixHQUMzQyxJQUFLMlcsRUFBUXFrQixlQUFlcnBCLEdBQzFCLE1BQU0sSUFBSXBaLFVBQVUsNkNBR3RCLElBQUkycEMsRUFBV3ZyQixFQUFRd3JCLGdCQUFlLEVBQUk3RCxFQUFrQixTQUFHLENBQUVuSSxLQUFNLFNBQVduMkIsSUFRbEYsSUFQQSxFQUFJcWdDLEVBQU9zQixZQUFZdnBDLEtBQU11b0MsRUFBVXVCLEdBQ3ZDQSxFQUFTanRCLE9BQU90RCxFQUFPM1IsRUFBUXVCLFVBQy9CLEVBQUk4K0IsRUFBT3NCLFlBQVl2cEMsS0FBTXlvQyxFQUFNem9DLE1BQ25Dc3BDLEVBQWdCdHBDLEtBQU1BLEtBQUt1b0MsR0FBVXlCLFlBQ3JDLEVBQUkvQixFQUFPc0IsWUFBWXZwQyxLQUFNMG9DLEVBQVM5Z0MsSUFDdEMsRUFBSXFnQyxFQUFPc0IsWUFBWXZwQyxLQUFNNm9DLEVBQWMsS0FFdkMsRUFBSVosRUFBT2dDLG1CQUFtQnJpQyxFQUFRc2lDLGtCQUFtQjNyQixHQUFVLENBQ3JFLEdBQTJELG1CQUFoRHZlLEtBQUt1b0MsR0FBVTRCLDZCQUN4QixNQUFNLElBQUlocUMsVUFBVSx5RUFJdEIsRUFBSThuQyxFQUFPc0IsWUFBWXZwQyxLQUFNNG9DLEVBQW9CLElBQUl3QixFQUF5QnBxQyxLQUFNQSxLQUFLdW9DLEdBQVU0QixpQ0FDbkducUMsS0FBSzZvQyxHQUFjdmtDLEtBQUt0RSxLQUFLNG9DLEdBQy9CLENBQ0YsRUFRQSxFQUFJWCxFQUFPc0IsWUFBWXZwQyxLQUFNd29DLEVBQVlqdkIsSUFDekMsRUFBSTB1QixFQUFPc0IsWUFBWXZwQyxLQUFNOG9DLEVBQVksS0FDM0MsQ0FvdERBLE9BM3NEQWxGLEVBQWE0RixFQUFjLENBQUMsQ0FDMUJuNUIsSUFBSyxPQUNML00sTUFDRSxXQUNFLE9BQU90RCxLQUFLeW9DLEVBQ2QsR0FXRCxDQUNEcDRCLElBQUssa0JBQ0wvTSxNQUNFLFdBQ0UsR0FBb0IsSUFBaEJ0RCxLQUFLSyxPQUNQLE1BQU0sSUFBSThPLE1BQU0scUVBRWxCLE9BQU9uUCxLQUFLc29DLEdBQU8sRUFDckIsR0FXRCxDQUNEajRCLElBQUssbUJBQ0wvTSxNQUNFLFdBQ0UsT0FBT3RELEtBQUtzb0MsRUFDZCxHQVdELENBQ0RqNEIsSUFBSyxhQUNML00sTUFDRSxXQUNFLElBQUlpTSxFQUFRdlAsS0FFWixPQUFPQSxLQUFLcXFDLE9BQU8sY0FBYyxXQUMvQixPQUFPLEVBQUluSSxFQUFzQixTQUFHM3lCLEVBQU1tNUIsSUFBVTRCLGNBQWMvNkIsRUFBTTY0QixHQUMxRSxHQUNGLEdBV0QsQ0FDRC8zQixJQUFLLGNBQ0wvTSxNQUNFLFdBQ0UsSUFBSWluQyxFQUFTdnFDLEtBRWIsT0FBT0EsS0FBS3NvQyxHQUFPNThCLEtBQUksU0FBVTlHLEdBQy9CLE9BQU8sRUFBSXM5QixFQUFzQixTQUFHcUksRUFBTzdCLElBQVU0QixjQUFjMWxDLEVBQ3JFLEdBQ0YsR0FPRCxDQUNEeUwsSUFBSyxVQUNML00sTUFDRSxXQUNFLE1BQU0sSUFBSTZMLE1BQU0sdUZBQ2xCLEdBT0QsQ0FDRGtCLElBQUssV0FDTC9NLE1BQ0UsV0FDRSxNQUFNLElBQUk2TCxNQUFNLG1EQUNsQixHQWFELENBQ0RrQixJQUFLLGFBQ0wvTSxNQUNFLFdBQ0UsSUFBSWliLEdBQVUsRUFBSTJqQixFQUFzQixTQUFHbGlDLEtBQUswb0MsSUFDaEQsT0FBTzFvQyxLQUFLcXFDLE9BQU8sY0FBYyxTQUFVemxDLEdBQ3pDLE9BQU8yWixFQUFRcW9CLGVBQWVoaUMsR0FBRyxFQUNuQyxHQUNGLEdBZUQsQ0FDRHlMLElBQUssTUFDTC9NLE1BQ0UsU0FBYWtuQyxHQUNYLEdBQUl4cUMsS0FBS3lvQyxLQUFVem9DLEtBQ2pCLE1BQU0sSUFBSW1QLE1BQU0sNkRBRWxCLE9BQU9uUCxLQUFLc2QsV0FBV210QixLQUFLRCxFQUM5QixHQWlCRCxDQUNEbjZCLElBQUssV0FDTC9NLE1BQ0UsV0FDRSxJQUFJb25DLEVBQVMxcUMsS0FFYixPQUFPQSxLQUFLcXFDLE9BQU8sWUFBWSxXQUM3QixPQUFPSyxFQUFPdEMsR0FBTTlxQixRQUN0QixHQUNGLEdBYUQsQ0FDRGpOLElBQUssdUJBQ0wvTSxNQUNFLFdBQ0UsR0FBSXRELEtBQUt5b0MsS0FBVXpvQyxLQUNqQixNQUFNLElBQUltUCxNQUFNLHVFQUVsQixJQUFLblAsS0FBSzBvQyxHQUFTd0Isa0JBQ2pCLE1BQU0sSUFBSS82QixNQUFNLGdJQUVsQixPQUFPblAsS0FBSzRvQyxFQUNkLEdBY0QsQ0FDRHY0QixJQUFLLFNBQ0wvTSxNQUNFLFdBQ0UsSUFBSXFuQyxFQUFTM3FDLEtBRVRpSixFQUFPakosS0FBS3lvQyxHQUNoQixPQUFJem9DLE9BQVNpSixFQUNKQSxFQUFLc04sVUFFZCt5QixFQUFnQnRwQyxLQUFNQSxLQUFLdW9DLEdBQVV5QixXQUNyQ2hxQyxLQUFLNm9DLEdBQWNoZ0MsU0FBUSxTQUFVK2hDLEdBQ25DLEdBQUlBLElBQWVELEVBQU83QixHQUFhLENBS3JDOEIsRUFBVzlCLEdBQWM2QixFQUN6QixJQUNFQyxFQUFXcjBCLFFBQ2IsQ0FBRSxRQUNBcTBCLEVBQVc5QixHQUFjLElBQzNCLENBQ0YsQ0FDRixJQUNPOW9DLEtBQ1QsR0FZRCxDQUNEcVEsSUFBSyxVQUNML00sTUFDRSxXQUNFLElBQUl1bkMsRUFBUzdxQyxLQUViLEdBQUlBLEtBQUt5b0MsS0FBVXpvQyxLQUNqQixNQUFNLElBQUltUCxNQUFNLDBEQU1sQixPQUpBblAsS0FBS3FxQyxPQUFPLFdBQVcsV0FDckJRLEVBQU90QyxHQUFVdUMsVUFDakJELEVBQU90MEIsUUFDVCxJQUNPdlcsSUFDVCxHQWFELENBQ0RxUSxJQUFLLFFBQ0wvTSxNQUNFLFdBQ0UsSUFBSXluQyxFQUFTL3FDLEtBRWIsR0FBSUEsS0FBS3lvQyxLQUFVem9DLEtBQ2pCLE1BQU0sSUFBSW1QLE1BQU0sd0RBS2xCLE9BSEFuUCxLQUFLdW9DLEdBQVUxckIsT0FBTzdjLEtBQUt3b0MsR0FBYXhvQyxLQUFLMG9DLEdBQVN2L0IsU0FBUyxXQUM3RCxPQUFPNGhDLEVBQU94MEIsUUFDaEIsSUFDT3ZXLElBQ1QsR0FvQkQsQ0FDRHFRLElBQUssV0FDTC9NLE1BQ0UsU0FBa0Jnc0IsR0FDaEIsSUFBSTBiLEVBQVNockMsS0FFVDZ4QixFQUFXenhCLFVBQVVDLE9BQVMsUUFBc0IrRSxJQUFqQmhGLFVBQVUsR0FBbUJBLFVBQVUsUUFBS2dGLEVBRW5GLEdBQUlwRixLQUFLeW9DLEtBQVV6b0MsS0FDakIsTUFBTSxJQUFJbVAsTUFBTSwyREFFbEIsR0FBSS9PLFVBQVVDLE9BQVMsR0FBeUIsbUJBQWJ3eEIsRUFDakMsTUFBTSxJQUFJMXhCLFVBQVUsc0VBRXRCLElBQUlvZSxHQUFVLEVBQUkyakIsRUFBc0IsU0FBR2xpQyxLQUFLMG9DLElBUWhELE9BUEExb0MsS0FBS3dvQyxJQUFjLEVBQUlQLEVBQU9nRCxjQUFjMXNCLEVBQVN2ZSxLQUFLd29DLEdBQWFsWixHQUN2RXR2QixLQUFLdW9DLEdBQVUxckIsT0FBTzdjLEtBQUt3b0MsR0FBYSxNQUFNLFdBQzVDd0MsRUFBT3owQixTQUNIc2IsR0FDRkEsR0FFSixJQUNPN3hCLElBQ1QsR0FtQkQsQ0FDRHFRLElBQUssV0FDTC9NLE1BQ0UsU0FBa0IwTyxHQUNoQixJQUFJazVCLEVBQVNsckMsS0FFVDZ4QixFQUFXenhCLFVBQVVDLE9BQVMsUUFBc0IrRSxJQUFqQmhGLFVBQVUsR0FBbUJBLFVBQVUsUUFBS2dGLEVBRW5GLEdBQXdCLE9BQXBCcEYsS0FBS3NkLFlBQTJELFVBQXBDdGQsS0FBS2lwQyxrQkFBa0JwRyxTQUNyRCxNQUFNLElBQUkxekIsTUFBTSxtRUFFbEIsR0FBSS9PLFVBQVVDLE9BQVMsR0FBeUIsbUJBQWJ3eEIsRUFDakMsTUFBTSxJQUFJMXhCLFVBQVUsc0VBY3RCLE9BWkFILEtBQUtzZCxXQUFXNnRCLFNBQVNuNUIsR0FBTyxXQUU5QixHQURBazVCLEVBQU8zMEIsU0FDSHNiLEVBQVUsQ0FDWixJQUFJdFQsR0FBVSxFQUFJMmpCLEVBQXNCLFNBQUdnSixFQUFPeEMsSUFDOUNwckIsRUFBVzR0QixFQUFPNXRCLFdBQ2xCaUIsRUFBUTZzQix1QkFDVjdzQixFQUFRNnNCLHVCQUF1Qjl0QixFQUFVdVUsR0FFekNBLEVBQVM3dUIsS0FBS3NhLEVBRWxCLENBQ0YsSUFDT3RkLElBQ1QsR0FlRCxDQUNEcVEsSUFBSyxhQUNML00sTUFDRSxTQUFvQjZGLEdBQ2xCLElBQUlraUMsRUFBU3JyQyxLQUViLEdBQUlBLEtBQUt5b0MsS0FBVXpvQyxLQUNqQixNQUFNLElBQUltUCxNQUFNLDZEQUVsQixJQUFLblAsS0FBSzBvQyxHQUFTdi9CLFFBQ2pCLE1BQU0sSUFBSWdHLE1BQU0sMEdBS2xCLE9BSEFuUCxLQUFLdW9DLEdBQVUxckIsT0FBTzdjLEtBQUt3b0MsR0FBYXIvQixHQUFTLFdBQy9DLE9BQU9raUMsRUFBTzkwQixRQUNoQixJQUNPdlcsSUFDVCxHQWtCRCxDQUNEcVEsSUFBSyxXQUNML00sTUFDRSxTQUFrQmdvQyxHQUNoQixJQUFJL3NCLEdBQVUsRUFBSTJqQixFQUFzQixTQUFHbGlDLEtBQUswb0MsSUFVaEQsT0FBT0ssRUFBbUIvb0MsS0FSVndCLE1BQU13SSxRQUFRc2hDLEdBQWUsU0FBVS93QixHQUNyRCxPQUFPLEVBQUkwdEIsRUFBT3NELDBCQUEwQnRELEVBQU91RCxVQUFXanhCLEVBQU8rd0IsRUFBWTUvQixLQUFJLFNBQVU5SCxHQUM3RixPQUFPMmEsRUFBUWt0QixjQUFjN25DLEVBQy9CLElBQ0YsRUFBSSxTQUFVMlcsR0FDWixPQUFPLEVBQUkwdEIsRUFBT3VELFdBQVdqdEIsRUFBUWt0QixjQUFjSCxHQUFjL3dCLEVBQ25FLEdBRTJDbGEsT0FBUyxDQUN0RCxHQXNCRCxDQUNEZ1EsSUFBSywwQkFDTC9NLE1BQ0UsU0FBaUNNLEdBQy9CLElBQUk4bkMsR0FBVSxFQUFJeEosRUFBc0IsU0FBR2xpQyxLQUFLMG9DLElBQVUrQyxjQUFjN25DLEdBVXhFLE9BQU9tbEMsRUFBbUIvb0MsTUFSeEIsU0FBbUJ1YSxHQUNqQixPQUFPLEVBQUkwdEIsRUFBTzBELGFBQWFELEVBQVNueEIsR0FBTyxTQUFVMU8sRUFBR0MsR0FDMUQsT0FBT0QsR0FBS0MsQ0FDZCxHQUNGLElBSXlDekwsT0FBUyxDQUN0RCxHQXdCRCxDQUNEZ1EsSUFBSyw4QkFDTC9NLE1BQ0UsU0FBcUNpVyxHQUNuQyxJQUFJcXlCLEVBQVU1ckMsS0FFZCxJQUFLd0IsTUFBTXdJLFFBQVF1UCxHQUNqQixNQUFNLElBQUlwWixVQUFVLDRCQUd0QixPQUFPb1osRUFBTWtLLE9BQU0sU0FBVTdmLEdBQzNCLE9BQU9nb0MsRUFBUUMsd0JBQXdCam9DLEVBQ3pDLEdBQ0YsR0F3QkQsQ0FDRHlNLElBQUssOEJBQ0wvTSxNQUNFLFNBQXFDaVcsR0FDbkMsSUFBSXV5QixFQUFVOXJDLEtBRWQsT0FBT3dCLE1BQU13SSxRQUFRdVAsSUFBVUEsRUFBTW5WLE1BQUssU0FBVVIsR0FDbEQsT0FBT2tvQyxFQUFRRCx3QkFBd0Jqb0MsRUFDekMsR0FDRixHQWtCRCxDQUNEeU0sSUFBSyxTQUNML00sTUFDRSxTQUFnQk0sR0FDZCxJQUFJbW9DLEVBQVUvckMsS0FFZCxPQUFPQSxLQUFLcXFDLE9BQU8sVUFBVSxXQUMzQixPQUFPLEVBQUlwQyxFQUFPdUQsV0FBV08sRUFBUTlDLGtCQUFtQnJsQyxFQUMxRCxHQUNGLEdBdUJELENBQ0R5TSxJQUFLLGlCQUNML00sTUFDRSxTQUF3Qk0sR0FDdEIsSUFBSW9vQyxFQUFVaHNDLEtBRWQsT0FBT0EsS0FBS3FxQyxPQUFPLGtCQUFrQixXQUNuQyxJQUNJcUIsR0FEVSxFQUFJeEosRUFBc0IsU0FBRzhKLEVBQVF0RCxJQUM3QitDLGNBQWM3bkMsR0FDcEMsT0FBTyxFQUFJcWtDLEVBQU8wRCxhQUFhRCxFQUFTTSxFQUFRL0MsbUJBQW1CLFNBQVVwOUIsRUFBR0MsR0FDOUUsT0FBT0QsR0FBS0MsQ0FDZCxHQUNGLEdBQ0YsR0FZRCxDQUNEdUUsSUFBSyxPQUNML00sTUFDRSxTQUFjYSxHQUNaLE9BQU9uRSxLQUFLbVEsTUFBSyxFQUFJZzRCLEVBQVc4RCx1QkFBdUI5bkMsRUFBVW5FLEtBQUttcEMsb0JBQ3hFLEdBY0QsQ0FDRDk0QixJQUFLLEtBQ0wvTSxNQUNFLFNBQVlhLEdBQ1YsSUFBSWdyQixHQUFZLEVBQUlnWixFQUFXK0QsZ0JBQWdCL25DLEdBQy9DLE9BQU9uRSxLQUFLcXFDLE9BQU8sTUFBTSxTQUFVemxDLEdBQ2pDLE9BQU91cUIsRUFBVXZxQixFQUNuQixHQUNGLEdBV0QsQ0FDRHlMLElBQUssZ0JBQ0wvTSxNQUNFLFdBQ0UsSUFBSWlXLEVBQVF2WixLQUFLaXBDLGtCQUVqQixPQUFPLEVBQUloQixFQUFPa0UsY0FBYzV5QixFQUNsQyxHQWFELENBQ0RsSixJQUFLLGNBQ0wvTSxNQUNFLFNBQXFCNnJCLEdBQ25CLElBQUlpZCxFQUFVcHNDLEtBRWQsT0FBT2twQyxFQUFxQmxwQyxNQUFNLFNBQVU0RSxHQUMxQyxPQUFPdXFCLEVBQVVpZCxFQUFRajhCLEtBQUt2TCxHQUNoQyxHQUNGLEdBYUQsQ0FDRHlMLElBQUssU0FDTC9NLE1BQ0UsU0FBZ0JhLEdBRWQsT0FBTytrQyxFQUFxQmxwQyxNQURaLEVBQUltb0MsRUFBVytELGdCQUFnQi9uQyxHQUVqRCxHQWFELENBQ0RrTSxJQUFLLE1BQ0wvTSxNQUNFLFNBQWFhLEdBQ1gsSUFBSWdyQixHQUFZLEVBQUlnWixFQUFXK0QsZ0JBQWdCL25DLEdBQy9DLE9BQU8ra0MsRUFBcUJscEMsTUFBTSxTQUFVNEUsR0FDMUMsT0FBUXVxQixFQUFVdnFCLEVBQ3BCLEdBQ0YsR0FlRCxDQUNEeUwsSUFBSyxPQUNML00sTUFDRSxXQUNFLElBQUlpYixHQUFVLEVBQUkyakIsRUFBc0IsU0FBR2xpQyxLQUFLMG9DLElBQ2hELE9BQU8xb0MsS0FBS3FxQyxPQUFPLFFBQVEsU0FBVXpsQyxHQUNuQyxPQUFPLEVBQUlxOUIsRUFBY3lFLHNCQUFzQjloQyxFQUFHMlosRUFDcEQsR0FDRixHQWFELENBQ0RsTyxJQUFLLE9BQ0wvTSxNQUNFLFdBQ0UsSUFBSWliLEdBQVUsRUFBSTJqQixFQUFzQixTQUFHbGlDLEtBQUswb0MsSUFDaEQsT0FBTzFvQyxLQUFLcXFDLE9BQU8sUUFBUSxTQUFVemxDLEdBQ25DLE9BQU8sRUFBSXE5QixFQUFjNkUsc0JBQXNCbGlDLEVBQUcyWixFQUNwRCxHQUNGLEdBYUQsQ0FDRGxPLElBQUssU0FDTC9NLE1BQ0UsV0FDRSxJQUFJOE0sRUFBT3BRLEtBQUtvUSxPQUNoQixPQUFPLEVBQUk2M0IsRUFBT29FLGlCQUFpQmo4QixFQUNyQyxHQWNELENBQ0RDLElBQUssV0FDTC9NLE1BQ0UsU0FBa0JncEMsR0FDaEIsSUFBSUMsRUFBVXZzQyxLQUVWd3NDLEVBQU9wc0MsVUFBVUMsT0FBUyxRQUFzQitFLElBQWpCaEYsVUFBVSxHQUFtQkEsVUFBVSxHQUFLLENBQUMsRUFFaEYsT0FBT0osS0FBS3FxQyxPQUFPLFlBQVksU0FBVXpsQyxHQUd2QyxPQUZBMm5DLEVBQVFoRSxHQUFVa0UsY0FBYzduQyxFQUFHMG5DLEVBQU9FLEdBQzFDRCxFQUFROUQsR0FBTWx5QixTQUNQZzJCLENBQ1QsR0FDRixHQVlELENBQ0RsOEIsSUFBSyxnQkFDTC9NLE1BQ0UsU0FBdUJpdkIsR0FDckIsSUFBSW1hLEVBQVUxc0MsS0FFZCxHQUFJQSxLQUFLeW9DLEtBQVV6b0MsS0FDakIsTUFBTSxJQUFJbVAsTUFBTSwrREFHbEIsT0FBT25QLEtBQUtxcUMsT0FBTyxpQkFBaUIsU0FBVXNDLEdBQzVDLEdBQTBCLFNBQXRCQSxFQUFTOUosU0FDWCxNQUFNLElBQUkxekIsTUFBTSx5RUFHbEIsSUFBSTI2QixFQUFXNEMsRUFBUW5FLEdBQ3ZCLEdBQXNDLG1CQUEzQnVCLEVBQVM4QyxjQUNsQixNQUFNLElBQUl6c0MsVUFBVSxvRUFHdEIsSUFBSTBzQyxFQUFXekQsRUFBb0JzRCxHQUMvQkksRUFBZ0IsQ0FBQ0gsR0FBVXBtQyxPQUFPOGlDLEVBQVlxRCxFQUFTQyxJQUkzRCxPQUhBN0MsRUFBUzhDLGNBQWNFLEVBQWVELEVBQVV0YSxHQUVoRG1hLEVBQVFqRSxHQUFNbHlCLFNBQ1BtMkIsQ0FDVCxHQUNGLEdBYUQsQ0FDRHI4QixJQUFLLFFBQ0wvTSxNQUNFLFdBQ0UsT0FBT3RELEtBQUtxcUMsT0FBTyxRQUFTcEksRUFBY2lCLFlBQzVDLEdBZUQsQ0FDRDd5QixJQUFLLFFBQ0wvTSxNQUNFLFNBQWVmLEdBQ2IsSUFBSXdxQyxFQUFVL3NDLEtBRVYyc0MsRUFBVzNzQyxLQUFLeW9DLEtBQVV6b0MsS0FBT0EsS0FBS3VvQyxHQUFVeUIsVUFBWWhxQyxLQUFLaXBDLGtCQUNyRSxHQUF3QixPQUFwQmpwQyxLQUFLc2QsWUFBNkMsVUFBdEJxdkIsRUFBUzlKLFNBQ3ZDLE1BQU0sSUFBSTF6QixNQUFNLGdFQUVsQixJQUFJNjlCLEVBQVNodEMsS0FBS3FxQyxPQUFPLFNBQVMsV0FDaEMsT0FBTzBDLEVBQVF6dkIsV0FBV3RMLEtBQzVCLElBQ0EsUUFBb0IsSUFBVHpQLEVBQXNCLENBQy9CLEdBQWMsTUFBVnlxQyxFQUNGLE1BQU0sSUFBSTdzQyxVQUFVLHdCQUEwQnlPLE9BQU9yTSxHQUFRLHlEQUUvRCxPQUFPeXFDLEVBQU96cUMsRUFDaEIsQ0FDQSxPQUFPeXFDLENBQ1QsR0FlRCxDQUNEMzhCLElBQUssVUFDTC9NLE1BQ0UsU0FBaUJmLEdBQ2YsSUFBSTBxQyxFQUFVanRDLEtBRWQsR0FBSUEsS0FBS3lvQyxLQUFVem9DLEtBQ2pCLE1BQU0sSUFBSW1QLE1BQU0sMERBRWxCLElBQUltTyxFQUFXdGQsS0FBS3FxQyxPQUFPLFdBQVcsV0FDcEMsT0FBTzRDLEVBQVEzdkIsVUFDakIsSUFDQSxHQUFpQixPQUFiQSxFQUNGLE1BQU0sSUFBSW5PLE1BQU0sMkVBRWxCLElBQUl1YSxFQUFXcE0sRUFBU25VLFFBQ3hCLFlBQW9CLElBQVQ1RyxFQUNGbW5CLEVBQVNubkIsR0FFWG1uQixDQUNULEdBWUQsQ0FDRHJaLElBQUssV0FDTC9NLE1BQ0UsU0FBa0JhLEdBQ2hCLElBQUkrb0MsRUFBY2x0QyxLQUFLZ3BDLFNBQVEsU0FBVXBrQyxHQUN2QyxPQUFPLEVBQUlxOUIsRUFBY2UsZ0JBQWdCcCtCLEVBQUVxa0Msa0JBQzdDLElBQ0EsT0FBTzlrQyxFQUFXK29DLEVBQVl4ckMsT0FBT3lDLEdBQVkrb0MsQ0FDbkQsR0FZRCxDQUNENzhCLElBQUssVUFDTC9NLE1BQ0UsU0FBaUJ1TyxHQUNmLElBQUlzN0IsRUFBVW50QyxLQUVkLE9BQU9BLEtBQUtxcUMsT0FBTyxXQUFXLFdBQzVCLE9BQU84QyxFQUFReC9CLFdBQVd5L0IsR0FBR3Y3QixFQUMvQixHQUNGLEdBZUQsQ0FDRHhCLElBQUssVUFDTC9NLE1BQ0UsU0FBaUJhLEdBQ2YsSUFBSWtwQyxFQUFVcnRDLEtBRWQsT0FBT0EsS0FBS3FxQyxPQUFPLFdBQVcsU0FBVXpsQyxHQUN0QyxJQUFJMG9DLEVBQWFELEVBQVFsOUIsS0FBS2s1QixFQUFZZ0UsRUFBU3pvQyxJQUNuRCxPQUFPVCxFQUFXbXBDLEVBQVc1ckMsT0FBT3lDLEdBQVltcEMsQ0FDbEQsR0FDRixHQVdELENBQ0RqOUIsSUFBSyxTQUNML00sTUFDRSxXQUNFLE9BQU90RCxLQUFLZ3BDLFNBQVEsU0FBVXBrQyxHQUM1QixNQUFPLENBQUNBLEVBQUUrUSxVQUFVaFEsSUFBSSxHQUMxQixHQUNGLEdBV0QsQ0FDRDBLLElBQUssVUFDTC9NLE1BQ0UsU0FBaUJhLEdBQ2YsR0FBSW5FLEtBQUt5RyxHQUFHdEMsR0FDVixPQUFPbkUsS0FFVCxJQUFJdXRDLEVBQW9CdnRDLEtBQUsyVixVQUFValUsT0FBT3lDLEdBQzlDLE9BQU9vcEMsRUFBa0JsdEMsT0FBUyxFQUFJa3RDLEVBQWtCbDJCLFFBQVVyWCxLQUFLd3RDLFdBQVUsV0FDL0UsT0FBTyxDQUNULEdBQ0YsR0FZRCxDQUNEbjlCLElBQUssT0FDTC9NLE1BQ0UsU0FBY21xQyxHQUNaLE9BQU96dEMsS0FBS3N2QixRQUFRbWUsRUFDdEIsR0FhRCxDQUNEcDlCLElBQUssU0FDTC9NLE1BQ0UsU0FBZ0JtcUMsR0FDZCxJQUFJQyxFQUFVMXRDLEtBRWQsT0FBT0EsS0FBS3FxQyxPQUFPLFVBQVUsV0FDM0IsSUFBSXNELEVBQVVELEVBQVFuaEMsS0FBS2toQyxHQUMzQixHQUF1QixtQkFBWkUsRUFDVCxNQUFNLElBQUl4dEMsVUFBVSxnRkFFdEIsT0FBTyxXQUNMLElBQUssSUFBSXl0QyxFQUFPeHRDLFVBQVVDLE9BQVF3dEMsRUFBT3JzQyxNQUFNb3NDLEdBQU9FLEVBQU8sRUFBR0EsRUFBT0YsRUFBTUUsSUFDM0VELEVBQUtDLEdBQVExdEMsVUFBVTB0QyxHQUd6QixJQUFJQyxFQUFtRCxtQkFBakNMLEVBQVFuRixHQUFVeUYsV0FBNEJOLEVBQVFuRixHQUFVeUYsWUFBVyxXQUMvRixPQUFPTCxFQUFRMXNDLFdBQU1tRSxFQUFXeW9DLEVBQ2xDLElBQUtGLEVBQVExc0MsV0FBTW1FLEVBQVd5b0MsR0FFOUIsT0FEQUgsRUFBUWpGLEdBQU1seUIsU0FDUHczQixDQUNULENBQ0YsR0FDRixHQVlELENBQ0QxOUIsSUFBSyxhQUNML00sTUFDRSxTQUFvQm1xQyxHQUNsQixJQUFJUSxFQUFVanVDLEtBRVZ1ZSxHQUFVLEVBQUkyakIsRUFBc0IsU0FBR2xpQyxLQUFLMG9DLElBQ2hELEdBQTRCLG1CQUFqQm5xQixFQUFRcE8sS0FDakIsTUFBTSxJQUFJKzlCLFdBQVcsMkRBR3ZCLE9BQU9sdUMsS0FBS3FxQyxPQUFPLGNBQWMsU0FBVXpsQyxHQUN6QyxHQUFtQixTQUFmQSxFQUFFaStCLFNBQ0osTUFBTSxJQUFJMWlDLFVBQVUsc0VBRXRCLEdBQXdCLGlCQUFic3RDLEVBQ1QsTUFBTSxJQUFJdHRDLFVBQVUsMkRBRXRCLElBQUltdkIsRUFBUTJlLEVBQVEzZSxRQUNwQixLQUFLLEVBQUkwUyxFQUFlLFNBQUcxUyxFQUFPbWUsR0FDaEMsTUFBTSxJQUFJdCtCLE1BQU0sK0NBQXNEUCxPQUFPNitCLEdBQVksV0FFM0YsSUFBSVUsRUFBWTdlLEVBQU1tZSxHQUN0QixHQUF5QixtQkFBZFUsRUFDVCxNQUFNLElBQUlodUMsVUFBVSw4Q0FBcUR5TyxPQUFPNitCLEdBQVksZ0RBQTRFLElBQWRVLEVBQTRCLFlBQWNwTixFQUFRb04sSUFBYyxLQUc1TixPQUFPLFdBQ0wsSUFBSTNpQyxFQUFVMmlDLEVBQVVsdEMsV0FBTW1FLEVBQVdoRixXQUNyQ2d1QyxFQUFVN3ZCLEVBQVFwTyxLQUFLM0UsR0FDM0IsT0FBT3lpQyxFQUFROTlCLEtBQUtpK0IsRUFBUyxLQUFNSCxFQUFRdkYsR0FDN0MsQ0FDRixHQUNGLEdBV0QsQ0FDRHI0QixJQUFLLE1BQ0wvTSxNQUNFLFdBQ0UsT0FBT3RELEtBQUtxcUMsT0FBTyxPQUFPLFNBQVV6bEMsR0FDbEMsWUFBaUJRLElBQVZSLEVBQUV5TCxJQUFvQixLQUFPekwsRUFBRXlMLEdBQ3hDLEdBQ0YsR0FZRCxDQUNEQSxJQUFLLE9BQ0wvTSxNQUNFLFdBQ0UsT0FBT3RELEtBQUtxcUMsT0FBTyxRQUFRLFNBQVV6bEMsR0FDbkMsT0FBTyxFQUFJcWpDLEVBQU9vRyxZQUFZenBDLEVBQ2hDLEdBQ0YsR0FhRCxDQUNEeUwsSUFBSyxPQUNML00sTUFDRSxXQUNFLElBQUlpYixHQUFVLEVBQUkyakIsRUFBc0IsU0FBR2xpQyxLQUFLMG9DLElBQ2hELE9BQU8xb0MsS0FBS3FxQyxPQUFPLFFBQVEsU0FBVXpsQyxHQUNuQyxPQUFPMlosRUFBUWdrQixrQkFBb0Joa0IsRUFBUWdrQixrQkFBa0IzOUIsSUFBSyxFQUFJcWpDLEVBQU8xRixtQkFBbUIzOUIsRUFDbEcsR0FDRixHQWNELENBQ0R5TCxJQUFLLFdBQ0wvTSxNQUNFLFNBQWtCd04sR0FLaEIsTUFKeUIsaUJBQWRBLElBQXNELElBQTVCQSxFQUFVRSxRQUFRLE1BRXJEczlCLFFBQVFDLEtBQUsscUlBRVJ2dUMsS0FBS3FxQyxPQUFPLFlBQVksU0FBVXpsQyxHQUN2QyxPQUFPLEVBQUlxOUIsRUFBYzBDLGNBQWMvL0IsRUFBR2tNLEVBQzVDLEdBQ0YsR0FhRCxDQUNEVCxJQUFLLFVBQ0wvTSxNQUNFLFNBQWlCMlUsR0FDZixJQUFJdTJCLEVBQVV4dUMsS0FLZCxPQUhBQSxLQUFLbXBDLG1CQUFtQnRnQyxTQUFRLFNBQVVqRSxFQUFHRCxHQUMzQyxPQUFPc1QsRUFBR2pWLEtBQUt3ckMsRUFBU0EsRUFBUXIrQixLQUFLdkwsR0FBSUQsRUFDM0MsSUFDTzNFLElBQ1QsR0FhRCxDQUNEcVEsSUFBSyxNQUNML00sTUFDRSxTQUFhMlUsR0FDWCxJQUFJdzJCLEVBQVV6dUMsS0FFZCxPQUFPQSxLQUFLbXBDLG1CQUFtQno5QixLQUFJLFNBQVU5RyxFQUFHRCxHQUM5QyxPQUFPc1QsRUFBR2pWLEtBQUt5ckMsRUFBU0EsRUFBUXQrQixLQUFLdkwsR0FBSUQsRUFDM0MsR0FDRixHQWNELENBQ0QwTCxJQUFLLFNBQ0wvTSxNQUNFLFNBQWdCMlUsR0FDZCxJQUFJeTJCLEVBQVUxdUMsS0FFVjJ1QyxFQUFldnVDLFVBQVVDLE9BQVMsUUFBc0IrRSxJQUFqQmhGLFVBQVUsR0FBbUJBLFVBQVUsUUFBS2dGLEVBRXZGLE9BQUloRixVQUFVQyxPQUFTLEVBQ2RMLEtBQUttcEMsbUJBQW1CdjlCLFFBQU8sU0FBVWdqQyxFQUFPaHFDLEVBQUdELEdBQ3hELE9BQU9zVCxFQUFHalYsS0FBSzByQyxFQUFTRSxFQUFPRixFQUFRditCLEtBQUt2TCxHQUFJRCxFQUNsRCxHQUFHZ3FDLEdBRUUzdUMsS0FBS21wQyxtQkFBbUJ2OUIsUUFBTyxTQUFVZ2pDLEVBQU9ocUMsRUFBR0QsR0FDeEQsT0FBT3NULEVBQUdqVixLQUFLMHJDLEVBQWUsSUFBTi9wQyxFQUFVK3BDLEVBQVF2K0IsS0FBS3krQixHQUFTQSxFQUFPRixFQUFRditCLEtBQUt2TCxHQUFJRCxFQUNsRixHQUNGLEdBY0QsQ0FDRDBMLElBQUssY0FDTC9NLE1BQ0UsU0FBcUIyVSxHQUNuQixJQUFJNDJCLEVBQVU3dUMsS0FFVjJ1QyxFQUFldnVDLFVBQVVDLE9BQVMsUUFBc0IrRSxJQUFqQmhGLFVBQVUsR0FBbUJBLFVBQVUsUUFBS2dGLEVBRXZGLE9BQUloRixVQUFVQyxPQUFTLEVBQ2RMLEtBQUttcEMsbUJBQW1CMkYsYUFBWSxTQUFVRixFQUFPaHFDLEVBQUdELEdBQzdELE9BQU9zVCxFQUFHalYsS0FBSzZyQyxFQUFTRCxFQUFPQyxFQUFRMStCLEtBQUt2TCxHQUFJRCxFQUNsRCxHQUFHZ3FDLEdBRUUzdUMsS0FBS21wQyxtQkFBbUIyRixhQUFZLFNBQVVGLEVBQU9ocUMsRUFBR0QsR0FDN0QsT0FBT3NULEVBQUdqVixLQUFLNnJDLEVBQWUsSUFBTmxxQyxFQUFVa3FDLEVBQVExK0IsS0FBS3krQixHQUFTQSxFQUFPQyxFQUFRMStCLEtBQUt2TCxHQUFJRCxFQUNsRixHQUNGLEdBY0QsQ0FDRDBMLElBQUssUUFDTC9NLE1BQ0UsU0FBZXlyQyxFQUFPOTlCLEdBQ3BCLE9BQU9qUixLQUFLbVEsS0FBS25RLEtBQUttcEMsbUJBQW1CN2lDLE1BQU15b0MsRUFBTzk5QixHQUN4RCxHQVlELENBQ0RaLElBQUssT0FDTC9NLE1BQ0UsU0FBY2EsR0FDWixHQUFJbkUsS0FBS3lvQyxLQUFVem9DLEtBQ2pCLE1BQU0sSUFBSW1QLE1BQU0sc0RBRWxCLElBQUlnZ0IsR0FBWSxFQUFJZ1osRUFBVytELGdCQUFnQi9uQyxHQUMvQyxPQUFPbkUsS0FBS21wQyxtQkFBbUIva0MsS0FBSytxQixFQUN0QyxHQVlELENBQ0Q5ZSxJQUFLLFlBQ0wvTSxNQUNFLFNBQW1CNnJCLEdBQ2pCLElBQUk2ZixFQUFVaHZDLEtBRWQsT0FBT0EsS0FBS21wQyxtQkFBbUIva0MsTUFBSyxTQUFVUSxFQUFHRCxHQUMvQyxPQUFPd3FCLEVBQVVuc0IsS0FBS2dzQyxFQUFTQSxFQUFRNytCLEtBQUt2TCxHQUFJRCxFQUNsRCxHQUNGLEdBWUQsQ0FDRDBMLElBQUssUUFDTC9NLE1BQ0UsU0FBZWEsR0FDYixJQUFJZ3JCLEdBQVksRUFBSWdaLEVBQVcrRCxnQkFBZ0IvbkMsR0FDL0MsT0FBT25FLEtBQUttcEMsbUJBQW1CMWxCLE1BQU0wTCxFQUN2QyxHQVlELENBQ0Q5ZSxJQUFLLGFBQ0wvTSxNQUNFLFNBQW9CNnJCLEdBQ2xCLElBQUk4ZixFQUFVanZDLEtBRWQsT0FBT0EsS0FBS21wQyxtQkFBbUIxbEIsT0FBTSxTQUFVN2UsRUFBR0QsR0FDaEQsT0FBT3dxQixFQUFVbnNCLEtBQUtpc0MsRUFBU0EsRUFBUTkrQixLQUFLdkwsR0FBSUQsRUFDbEQsR0FDRixHQWNELENBQ0QwTCxJQUFLLFVBQ0wvTSxNQUNFLFNBQWlCMlUsR0FDZixJQUFJaTNCLEVBQVVsdkMsS0FFVnVaLEVBQVF2WixLQUFLbXBDLG1CQUFtQno5QixLQUFJLFNBQVU5RyxFQUFHRCxHQUNuRCxPQUFPc1QsRUFBR2pWLEtBQUtrc0MsRUFBU0EsRUFBUS8rQixLQUFLdkwsR0FBSUQsRUFDM0MsSUFDSXdxQyxHQUFZLEVBQUlsSSxFQUEwQixTQUFHMXRCLEVBQU8sR0FDeEQsT0FBT3ZaLEtBQUttUSxLQUFLZy9CLEVBQVV6dEMsT0FBTzJnQyxTQUNwQyxHQWFELENBQ0RoeUIsSUFBSyxZQUNML00sTUFDRSxTQUFtQjZyQixHQUNqQixJQUFJaWdCLEVBQVVwdkMsS0FFZCxPQUFPK29DLEVBQW1CL29DLE1BQU0sU0FBVTRFLEdBQ3hDLElBQUloQixFQUFPd3JDLEVBQVFqL0IsS0FBS3ZMLEdBQ3hCLE9BQU9oQixFQUFLdkQsT0FBUyxHQUFLOHVCLEVBQVV2ckIsRUFDdEMsR0FDRixHQVlELENBQ0R5TSxJQUFLLE1BQ0wvTSxNQUNFLFNBQWF1TyxHQUNYLE9BQU83UixLQUFLbzNCLGNBQWN2bEIsRUFDNUIsR0FZRCxDQUNEeEIsSUFBSyxLQUNML00sTUFDRSxTQUFZdU8sR0FDVixJQUFJMEgsRUFBUXZaLEtBQUttcEMsbUJBQ2pCLE9BQUl0M0IsRUFBUTBILEVBQU1sWixPQUNUTCxLQUFLbVEsS0FBS29KLEVBQU0xSCxJQUVsQjdSLEtBQUttUSxLQUFLLEdBQ25CLEdBV0QsQ0FDREUsSUFBSyxRQUNML00sTUFDRSxXQUNFLE9BQU90RCxLQUFLb3RDLEdBQUcsRUFDakIsR0FXRCxDQUNELzhCLElBQUssT0FDTC9NLE1BQ0UsV0FDRSxPQUFPdEQsS0FBS290QyxHQUFHcHRDLEtBQUtLLE9BQVMsRUFDL0IsR0FXRCxDQUNEZ1EsSUFBSyxVQUNML00sTUFDRSxXQUdFLE9BREFnckMsUUFBUUMsS0FBSyxzRUFDTHZ1QyxLQUFLb2lCLFFBQ2YsR0FhRCxDQUNEL1IsSUFBSyxTQUNML00sTUFDRSxXQUNFLElBQUlhLEVBQVcvRCxVQUFVQyxPQUFTLFFBQXNCK0UsSUFBakJoRixVQUFVLEdBQW1CQSxVQUFVLEdBQUssS0FFbkYsT0FBT0EsVUFBVUMsT0FBUyxFQUFJTCxLQUFLb0wsS0FBS2pILEdBQVVpZSxTQUFXcGlCLEtBQUtLLE9BQVMsQ0FDN0UsR0FjRCxDQUNEZ1EsSUFBSyxTQUNML00sTUFDRSxTQUFnQmYsRUFBTTBWLEdBQ3BCLElBQUlvM0IsRUFBeUIsaUJBQVQ5c0MsRUFBb0JBLEVBQU8sVUFDM0NzdkIsRUFBeUIsbUJBQVA1WixFQUFvQkEsRUFBSzFWLEVBQy9DLEdBQW9CLElBQWhCdkMsS0FBS0ssT0FDUCxNQUFNLElBQUk4TyxNQUFNLFdBQWtCa2dDLEVBQVMsbUNBQTBDemdDLE9BQU81TyxLQUFLSyxRQUFVLG1CQUU3RyxPQUFPd3hCLEVBQVM3dUIsS0FBS2hELEtBQU1BLEtBQUtpcEMsa0JBQ2xDLEdBYUQsQ0FDRDU0QixJQUFLLE9BQ0wvTSxNQUNFLFNBQWNNLEdBQ1osSUFBSXFGLEVBQU83SSxVQUFVQyxPQUFTLFFBQXNCK0UsSUFBakJoRixVQUFVLEdBQW1CQSxVQUFVLEdBQUtKLEtBQUt5b0MsR0FFcEYsR0FBSTdrQyxhQUFnQjRsQyxFQUNsQixPQUFPNWxDLEVBR1QsSUFBSyxJQUFJMHJDLEVBQVFsdkMsVUFBVUMsT0FBUXd0QyxFQUFPcnNDLE1BQU04dEMsRUFBUSxFQUFJQSxFQUFRLEVBQUksR0FBSUMsRUFBUSxFQUFHQSxFQUFRRCxFQUFPQyxJQUNwRzFCLEVBQUswQixFQUFRLEdBQUtudkMsVUFBVW12QyxHQUc5QixPQUFPLElBQUtuTixTQUFTM2dDLFVBQVVpQixLQUFLekIsTUFBTXVvQyxFQUFjLENBQUMsTUFBTWpqQyxPQUFPLENBQUMzQyxFQUFNcUYsR0FBTzRrQyxJQUN0RixHQWNELENBQ0R4OUIsSUFBSyxRQUNML00sTUFDRSxXQUNFLElBQUlzRSxFQUFVeEgsVUFBVUMsT0FBUyxRQUFzQitFLElBQWpCaEYsVUFBVSxHQUFtQkEsVUFBVSxHQUFLLENBQUMsRUFFbkYsT0FBTyxFQUFJOG5DLEVBQU8xRyxZQUFZeGhDLEtBQUttcEMsbUJBQW9CdmhDLEVBQ3pELEdBWUQsQ0FDRHlJLElBQUssTUFDTC9NLE1BQ0UsU0FBYWtzQyxHQUVYLE9BREFBLEVBQVl4dkMsTUFDTEEsSUFDVCxHQWVELENBQ0RxUSxJQUFLLFNBQ0wvTSxNQUNFLFdBQ0UsR0FBSXRELEtBQUt5b0MsS0FBVXpvQyxLQUNqQixNQUFNLElBQUltUCxNQUFNLHlEQUVsQixJQUFLblAsS0FBSzBvQyxHQUFTK0csU0FDakIsTUFBTSxJQUFJdGdDLE1BQU0sc0dBRWxCblAsS0FBS3VvQyxHQUFVdUMsU0FDakIsR0FZRCxDQUNEejZCLElBQUssWUFDTC9NLE1BQ0UsV0FDRSxPQUFPdEQsS0FBSzB2QyxhQUFZLFNBQVU5cUMsR0FDaEMsTUFBMkIsaUJBQWJBLEVBQUV3QyxNQUNsQixHQUNGLEtBTUdvaUMsQ0FDVCxDQWp3RG1CLEdBNHdEZlksRUFBMkIsU0FBVXVGLEdBSXZDLFNBQVN2RixFQUF5Qm5oQyxFQUFNNmdDLEdBQ3RDekYsRUFBZ0Jya0MsS0FBTW9xQyxHQUV0QixJQUFJd0YsRUFqMkRSLFNBQW9DM3ZDLEVBQU0rQyxHQUFRLElBQUsvQyxFQUFRLE1BQU0sSUFBSTR2QyxlQUFlLDZEQUFnRSxPQUFPN3NDLEdBQXlCLGlCQUFUQSxHQUFxQyxtQkFBVEEsRUFBOEIvQyxFQUFQK0MsQ0FBYSxDQWkyRDdOOHNDLENBQTJCOXZDLE1BQU9vcUMsRUFBeUI1dEIsV0FBYWpaLE9BQU93c0MsZUFBZTNGLElBQTJCcG5DLEtBQUtoRCxLQUFNOHBDLEVBQVNFLFVBQVcvZ0MsSUFLdEssT0FIQSxFQUFJZy9CLEVBQU9zQixZQUFZcUcsRUFBU25ILEVBQU1tSCxJQUN0QyxFQUFJM0gsRUFBT3NCLFlBQVlxRyxFQUFTckgsRUFBVXVCLEdBQzFDOEYsRUFBUS9HLEdBQWN2a0MsS0FBSzJFLEdBQ3BCMm1DLENBQ1QsQ0FhQSxPQWwzREYsU0FBbUJJLEVBQVVDLEdBQWMsR0FBMEIsbUJBQWZBLEdBQTRDLE9BQWZBLEVBQXVCLE1BQU0sSUFBSTl2QyxVQUFVLGtFQUFvRTh2QyxHQUFlRCxFQUFTdnVDLFVBQVk4QixPQUFPeUIsT0FBT2lyQyxHQUFjQSxFQUFXeHVDLFVBQVcsQ0FBRWliLFlBQWEsQ0FBRXBaLE1BQU8wc0MsRUFBVXRxQyxZQUFZLEVBQU9GLFVBQVUsRUFBTUMsY0FBYyxLQUFld3FDLElBQVkxc0MsT0FBT2daLGVBQWlCaFosT0FBT2daLGVBQWV5ekIsRUFBVUMsR0FBY0QsRUFBU3h6QixVQUFZeXpCLEVBQVksQ0F5MUQzZUMsQ0FBVTlGLEVBQTBCdUYsR0FjcEMvTCxFQUFhd0csRUFBMEIsQ0FBQyxDQUN0Qy81QixJQUFLLHVCQUNML00sTUFDRSxXQUNFLE1BQU0sSUFBSW5ELFVBQVUsc0VBQ3RCLEtBTUdpcUMsQ0FDVCxDQTNCK0IsQ0EyQjdCWixHQWtDRixTQUFTMkcsRUFBZTVqQyxFQUFNNmpDLEdBQzVCN3NDLE9BQU9DLGVBQWVnbUMsRUFBYS9uQyxVQUFXOEssRUFBTSxDQUNsRDVHLElBQ0UsV0FDRSxNQUFNLElBQUl3SixNQUFNLCtDQUFpRFAsT0FBT3JDLEdBQVEsaUpBQW1KcUMsT0FBT3doQyxHQUFnQixXQUM1UCxFQUtGMXFDLFlBQVksRUFDWkQsY0FBYyxHQUVsQixDQTdDSXdpQyxFQUFPb0ksaUJBQ1Q5c0MsT0FBT0MsZUFBZWdtQyxFQUFhL25DLFVBQVd3bUMsRUFBT29JLGdCQUFpQixDQUNwRTVxQyxjQUFjLEVBQ2RuQyxNQUNFLFdBQ0UsSUFBSW1pQyxFQUVBNkssRUFBT3R3QyxLQUFLc29DLEdBQU9MLEVBQU9vSSxtQkFDMUI5eEIsR0FBVSxFQUFJMmpCLEVBQXNCLFNBQUdsaUMsS0FBSzBvQyxJQUNoRCxPQUFrQnZDLEVBQVhWLEVBQU8sQ0FBQyxFQUF5QndDLEVBQU9vSSxpQkFBaUIsV0FDOUQsT0FBT3J3QyxJQUNULElBQUltbUMsRUFBZ0JWLEVBQU0sUUFDeEIsV0FDRSxJQUFJcndCLEVBQU9rN0IsRUFBS2w3QixPQUNoQixPQUFJQSxFQUFLMmMsS0FDQSxDQUFFQSxNQUFNLEdBRVYsQ0FDTEEsTUFBTSxFQUNOenVCLE1BQU9pYixFQUFRK3JCLGNBQWNsMUIsRUFBSzlSLE9BRXRDLElBR0ltaUMsQ0FDUixJQXNCTjBLLEVBQWUsT0FBUSxtREFDdkJBLEVBQWUsUUFBUyxvREFDeEJBLEVBQWUsV0FBWSxJQUMzQkEsRUFBZSxVQUFXLElBQzFCQSxFQUFlLGtCQUFtQixJQUVsQ3Z3QyxFQUFBLFFBQXFCNHBDLCtCQ2g5RHJCam1DLE9BQU9DLGVBQWU1RCxFQUFTLGFBQWMsQ0FDM0MwRCxPQUFPLElBR1QsSUFBSWl0QyxFQUNGLFNBQVM1cUMsRUFBSXVwQixFQUFRVCxFQUFVK2hCLEdBQTJCLE9BQVh0aEIsSUFBaUJBLEVBQVNrVCxTQUFTM2dDLFdBQVcsSUFBSTRELEVBQU85QixPQUFPK0IseUJBQXlCNHBCLEVBQVFULEdBQVcsUUFBYXJwQixJQUFUQyxFQUFvQixDQUFFLElBQUl4QixFQUFTTixPQUFPd3NDLGVBQWU3Z0IsR0FBUyxPQUFlLE9BQVhyckIsT0FBbUIsRUFBa0M4QixFQUFJOUIsRUFBUTRxQixFQUFVK2hCLEVBQWEsQ0FBTyxHQUFJLFVBQVduckMsRUFBUSxPQUFPQSxFQUFLL0IsTUFBZ0IsSUFBSW10QyxFQUFTcHJDLEVBQUtNLElBQUssWUFBZVAsSUFBWHFyQyxFQUFtREEsRUFBT3p0QyxLQUFLd3RDLFFBQW5FLENBQWdGLEVBSzVkNU0sRUFBZSxXQUFjLFNBQVN4VSxFQUFpQi9ZLEVBQVFpWixHQUFTLElBQUssSUFBSTNxQixFQUFJLEVBQUdBLEVBQUkycUIsRUFBTWp2QixPQUFRc0UsSUFBSyxDQUFFLElBQUlrL0IsRUFBYXZVLEVBQU0zcUIsR0FBSWsvQixFQUFXbitCLFdBQWFtK0IsRUFBV24rQixhQUFjLEVBQU9tK0IsRUFBV3ArQixjQUFlLEVBQVUsVUFBV28rQixJQUFZQSxFQUFXcitCLFVBQVcsR0FBTWpDLE9BQU9DLGVBQWU2UyxFQUFRd3RCLEVBQVd4ekIsSUFBS3d6QixFQUFhLENBQUUsQ0FBRSxPQUFPLFNBQVVDLEVBQWFDLEVBQVlDLEdBQWlKLE9BQTlIRCxHQUFZM1UsRUFBaUIwVSxFQUFZcmlDLFVBQVdzaUMsR0FBaUJDLEdBQWE1VSxFQUFpQjBVLEVBQWFFLEdBQXFCRixDQUFhLENBQUcsQ0FBN2hCLEdBRWYvQyxFQUE0QixtQkFBWC9sQixRQUFvRCxpQkFBcEJBLE9BQU9DLFNBQXdCLFNBQVU1SSxHQUFPLGNBQWNBLENBQUssRUFBSSxTQUFVQSxHQUFPLE9BQU9BLEdBQXlCLG1CQUFYMkksUUFBeUIzSSxFQUFJcUssY0FBZ0IxQixRQUFVM0ksSUFBUTJJLE9BQU92WixVQUFZLGdCQUFrQjRRLENBQUssRUFJdlE2ekIsRUFBVy9FLEVBRkQsRUFBUSxPQU1sQjhGLEVBQW1COUYsRUFGRCxFQUFRLE9BTTFCYSxFQUFRYixFQUZELEVBQVEsT0FNZnVQLEVBQXVCdlAsRUFGRCxFQUFRLE9BSTlCOEcsRUFBUyxFQUFRLE1BSWpCL0YsRUFBZWYsRUFGRCxFQUFRLE9BSXRCK0csRUFBUyxFQUFRLE1BRWpCakcsRUFBZ0IsRUFBUSxNQUV4QmtHLEVBQWEsRUFBUSxLQUV6QixTQUFTaEgsRUFBdUI5dUIsR0FBTyxPQUFPQSxHQUFPQSxFQUFJOU0sV0FBYThNLEVBQU0sQ0FBRSxRQUFXQSxFQUFPLENBTWhHLFNBQVM2MEIsRUFBbUJycEIsR0FBTyxHQUFJcmMsTUFBTXdJLFFBQVE2VCxHQUFNLENBQUUsSUFBSyxJQUFJbFosRUFBSSxFQUFHeWEsRUFBTzVkLE1BQU1xYyxFQUFJeGQsUUFBU3NFLEVBQUlrWixFQUFJeGQsT0FBUXNFLElBQU95YSxFQUFLemEsR0FBS2taLEVBQUlsWixHQUFNLE9BQU95YSxDQUFNLENBQVMsT0FBTzVkLE1BQU0wRSxLQUFLMlgsRUFBUSxDQUVsTSxTQUFTd21CLEVBQWdCL21CLEVBQVV3bUIsR0FBZSxLQUFNeG1CLGFBQW9Cd21CLEdBQWdCLE1BQU0sSUFBSTNqQyxVQUFVLG9DQUF3QyxDQUV4SixTQUFTZ21DLEVBQWdCOXpCLEVBQUtoQyxFQUFLL00sR0FBaUssT0FBcEorTSxLQUFPZ0MsRUFBTzlPLE9BQU9DLGVBQWU2TyxFQUFLaEMsRUFBSyxDQUFFL00sTUFBT0EsRUFBT29DLFlBQVksRUFBTUQsY0FBYyxFQUFNRCxVQUFVLElBQWtCNk0sRUFBSWhDLEdBQU8vTSxFQUFnQitPLENBQUssQ0FFaE4sSUFBSSsxQixHQUFPLEVBQUlILEVBQU9JLEtBQUssWUFDdkJDLEdBQVEsRUFBSUwsRUFBT0ksS0FBSyxhQUN4QkUsR0FBVyxFQUFJTixFQUFPSSxLQUFLLGdCQUMzQkcsR0FBYSxFQUFJUCxFQUFPSSxLQUFLLGtCQUM3QkksR0FBTyxFQUFJUixFQUFPSSxLQUFLLFlBQ3ZCSyxHQUFVLEVBQUlULEVBQU9JLEtBQUssZUFDMUJzSSxHQUFZLEVBQUkxSSxFQUFPSSxLQUFLLGdCQUM1Qk0sR0FBYSxFQUFJVixFQUFPSSxLQUFLLGlCQUM3QnVJLEdBQWdCLEVBQUkzSSxFQUFPSSxLQUFLLG9CQUNoQ08sR0FBcUIsRUFBSVgsRUFBT0ksS0FBSyx5QkFDckN3SSxHQUFrQixFQUFJNUksRUFBT0ksS0FBSyxzQkFDbEN5SSxHQUFjLEVBQUk3SSxFQUFPSSxLQUFLLGtCQUM5QjBJLEdBQWtCLEVBQUk5SSxFQUFPSSxLQUFLLHNCQVd0QyxTQUFTVSxFQUFtQnR6QixFQUFTMFosR0FDbkMsSUFBSXp0QixFQUFTdEIsVUFBVUMsT0FBUyxRQUFzQitFLElBQWpCaEYsVUFBVSxHQUFtQkEsVUFBVSxHQUFLNmhDLEVBQWM2QyxXQUUvRixPQUFPcnZCLEVBQVF1ekIsU0FBUSxTQUFVcGtDLEdBQy9CLE9BQU9sRCxFQUFPa0QsRUFBRXFrQyxrQkFBbUI5WixFQUNyQyxHQUNGLENBVUEsU0FBUytaLEVBQXFCenpCLEVBQVMwWixHQUNyQyxPQUFPMVosRUFBUXRGLEtBQUtzRixFQUFRMHpCLG1CQUFtQnpuQyxPQUFPeXRCLEdBQVd6dEIsT0FBTzJnQyxTQUMxRSxDQWtDQSxTQUFTMk8sRUFBcUJ2TCxHQUM1QixJQUFJNzlCLEVBQVU2OUIsRUFBSzc5QixRQUNmcXBDLEVBQXNCcnBDLEVBQVFzcEMsV0FDOUJBLE9BQXFDOXJDLElBQXhCNnJDLEVBQW9DLENBQUMsRUFBSUEsRUFDdERFLEVBQXFDdnBDLEVBQVF1cEMsbUNBQzdDQyxFQUFpRHhwQyxFQUFRd3BDLCtDQUd6REMsT0FBcUUsSUFBdkNGLEVBQzlCRyxPQUFvRixJQUFuREYsRUFDakNHLEVBQXFCRixHQUF3QkMsR0FBMEIsRUFBSXBMLEVBQWtCLFNBQUcsQ0FBQyxFQUFHbUwsR0FBd0IsQ0FDOUhHLGFBQWNMLEdBQ2JHLEdBQTJCLENBQzVCRyxjQUFlTCxJQUNaLEtBQ0RNLEVBQWdCUixFQUFXUyx5QkFFM0JBLElBQTJCRCxHQUFnQixDQUM3Q0UsOEJBQStCRixFQUFjRSw2QkFHL0MsT0FBTyxFQUFJMUwsRUFBa0IsU0FBRyxDQUFDLEVBQUdnTCxFQUFZLENBQzlDL0YsVUFBVSxFQUFJakYsRUFBa0IsU0FBRyxDQUFDLEVBQUdnTCxFQUFXL0YsVUFDbEQwRyxpQkFBaUIsRUFBSTNMLEVBQWtCLFNBQUcsQ0FDeEM0TCxrQkFBa0IsR0FDakJaLEVBQVdXLGtCQUNiTixHQUFzQixDQUFFQSxtQkFBb0JBLEdBQXNCLENBQ25FSSx5QkFBMEJBLEdBRTlCLENBRUEsU0FBU0ksRUFBWW51QyxHQUNuQixNQUFzQixTQUFsQkEsRUFBS2kvQixTQUNBai9CLEVBRUZBLEVBQUtxaEMsUUFDZCxDQUVBLFNBQVNtRSxFQUFvQjN6QixHQUMzQixHQUE2QixJQUF6QkEsRUFBUWd6QixHQUFNcG9DLE9BQ2hCLE1BQU0sSUFBSThPLE1BQU0sK0VBRWxCLE9BQUlzRyxFQUFRZ3pCLEtBQVVoekIsRUFDYkEsRUFBUWt6QixHQUFZLEdBRXRCbHpCLEVBQVFnekIsR0FBTUwsRUFDdkIsQ0FFQSxTQUFTaUIsRUFBWTV6QixFQUFTN1IsR0FDNUIsT0FBTyxFQUFJcStCLEVBQWNrRCxlQUFldmhDLEVBQU13bEMsRUFBb0IzekIsR0FDcEUsQ0FFQSxTQUFTNnpCLEVBQWdCN3pCLEVBQVM4RCxHQUMzQi9YLE1BQU13SSxRQUFRdVAsS0FJakIsRUFBSTB1QixFQUFPc0IsWUFBWTl6QixFQUFTMnlCLEVBQU03dUIsRUFBTSxLQUM1QyxFQUFJMHVCLEVBQU9zQixZQUFZOXpCLEVBQVM2eUIsRUFBTy91QixNQUp2QyxFQUFJMHVCLEVBQU9zQixZQUFZOXpCLEVBQVMyeUIsRUFBTTd1QixJQUN0QyxFQUFJMHVCLEVBQU9zQixZQUFZOXpCLEVBQVM2eUIsRUFBTyxDQUFDL3VCLE1BSzFDLEVBQUkwdUIsRUFBT3NCLFlBQVk5ekIsRUFBUyxTQUFVQSxFQUFRNnlCLEdBQU9qb0MsT0FDM0QsQ0FFQSxTQUFTMnhDLEVBQW1DQyxFQUFXM2lCLEVBQU80aUIsRUFBV2xnQyxHQUN2RSxRQUFRLEVBQUkwK0IsRUFBOEIsU0FBR3VCLEVBQVczaUIsTUFBVyxFQUFJb2hCLEVBQThCLFNBQUd3QixFQUFXbGdDLEVBQ3JILENBRUEsU0FBU21nQyxFQUFnQjcwQixHQUN2QixPQUFPQSxHQUFZQSxFQUFTODBCLG9CQUM5QixDQW9DQSxTQUFTQyxFQUF1Qjl6QixFQUFTOUksRUFBUzZILEVBQVVnMUIsRUFBY0MsR0FDeEUsSUFBSXpJLEVBQVdyMEIsRUFBUTh5QixHQUV2QixHQUEwQyxXQUF0Q2hxQixFQUFRM1csUUFBUTRxQyxrQkFHcEIsR0FBSUQsR0FDRixFQUFJdEssRUFBT3NCLFlBQVk5ekIsRUFBU203QixFQUFlMkIsRUFBbUJFLHNCQUNsRUYsRUFBbUJHLGVBQ2QsR0FBd0MsbUJBQTdCcDFCLEVBQVN1MEIsZ0JBQWdDLENBR3pELElBQ0ljLEVBL0NSLFNBQXlCL3VDLEVBQU1ndkMsRUFBVzlJLEdBQ3hDLElBQUl4c0IsRUFBVzFaLEVBQUswWixTQUNoQnUxQixFQUFZanZDLEVBQUt3RCxLQUVqQjByQyxHQUFnQixFQUFJN0ssRUFBTzFGLG1CQUFtQjMrQixHQUdsRCxHQUE2QyxXQUF6Q205QixFQUFROFIsRUFBVUUsbUJBR3BCLE9BREF6RSxRQUFRQyxLQUFLMy9CLE9BQU9ra0MsR0FBaUIsNEZBQzlCLENBQUMsRUFJVixJQUFJSCxFQUFlcjFCLEVBQVN1MEIsa0JBUzVCLE9BUkF0dUMsT0FBTzZLLEtBQUt1a0MsR0FBYzlwQyxTQUFRLFNBQVV3SCxHQUMxQyxLQUFNQSxLQUFPd2lDLEVBQVVFLG1CQUNyQixNQUFNLElBQUk1akMsTUFBTVAsT0FBT2trQyxHQUFpQiw0QkFBOEJsa0MsT0FBT3lCLEdBQU8seUNBRXhGLElBQ3VDLG1CQUE1Qnk1QixFQUFTa0osZ0JBQ2xCbEosRUFBU2tKLGVBQWVILEVBQVVFLGtCQUFtQkosRUFBYyxnQkFBaUJDLEdBRS9FRCxDQUNULENBdUJ1QmQsQ0FBZ0JTLEVBRGYsQ0FBQzc4QixFQUFRMnlCLElBQU83aEMsT0FBTzhpQyxFQUFZNXpCLEVBQVNBLEVBQVEyeUIsS0FDUjBCLElBQ2hFLEVBQUk3QixFQUFPc0IsWUFBWTl6QixFQUFTbTdCLEVBQWUrQixFQUNqRCxNQUNFLEVBQUkxSyxFQUFPc0IsWUFBWTl6QixFQUFTbTdCLEVBQWUsS0FFbkQsQ0FFQSxTQUFTcUMsRUFBNEJydkMsRUFBTW9PLEdBSXpDLEdBQXdDLG1CQUhUcE8sRUFBS3dELEtBQUt1cUMseUJBU3ZDLElBQUlyMEIsRUFBVzFaLEVBQUswWixTQUVoQjQxQixHQUFhLEVBQUlqTCxFQUFPa0wsV0FBVzcxQixFQUFVLHlCQUF5QixTQUFVODFCLEdBQ2xGLE9BQ0UsV0FDRTkxQixFQUFTdEwsTUFBUUEsRUFFakIsSUFBSyxJQUFJNDdCLEVBQU94dEMsVUFBVUMsT0FBUXd0QyxFQUFPcnNDLE1BQU1vc0MsR0FBT0UsRUFBTyxFQUFHQSxFQUFPRixFQUFNRSxJQUMzRUQsRUFBS0MsR0FBUTF0QyxVQUFVMHRDLEdBR3pCLElBQUl1RixFQUFZRCxFQUFZbnlDLE1BQU1xYyxFQUFVdXdCLEdBQ3hDeUYsRUFBWXpGLEVBQUssR0FJckIsT0FGQXZ3QixFQUFTdEwsTUFBUXNoQyxFQUNqQlosSUFDT1csQ0FDVCxDQUlKLElBQ0lYLEVBQVVRLEVBQVdSLE9BRTdCLENBWUEsU0FBU2EsRUFBVzk5QixFQUFTWSxFQUFRa0ksR0FDbkMsSUFBSTNhLEVBQU82UixFQUFRMnlCLEdBQ2Y1OEIsRUFBVTVILEdBQVEyYSxFQUFRK3JCLGNBQWMxbUMsR0FDNUMsR0FBSTZSLEVBQVFyTyxTQUFXaVAsRUFDckIsT0FBT1osRUFBUSs5QixPQUVqQixHQUFJaG9DLElBQVcsRUFBSXk4QixFQUFPd0wsMEJBQTBCam9DLEVBQVMrUyxHQUMzRCxPQUFPZzFCLEVBQVc5OUIsRUFBUSs5QixPQUFRbjlCLEVBQVFrSSxHQUc1QyxJQURBLElBQUk1USxFQUFXOEgsRUFBUTlILFdBQ2RoSixFQUFJLEVBQUdBLEVBQUlnSixFQUFTdE4sT0FBUXNFLEdBQUssRUFBRyxDQUMzQyxJQUFJMEQsRUFBUWtyQyxFQUFXNWxDLEVBQVN5L0IsR0FBR3pvQyxHQUFJMFIsRUFBUWtJLEdBQy9DLFFBQXFCLElBQVZsVyxFQUNULE9BQU9BLENBRVgsQ0FFRixDQVlBLFNBQVNxckMsRUFBZ0NqK0IsRUFBUzhJLEdBQ2hELElBQUlvMUIsRUFBYUosRUFBVzk5QixFQUFTQSxFQUFRcTdCLEdBQWN2eUIsR0FDM0QsSUFBS28xQixFQUNILE1BQU0sSUFBSXhrQyxNQUFNLGlEQUVsQixNQUFPLENBQ0x5a0MsY0FBZUQsRUFBV2pMLEdBQVN2L0IsUUFDbkMwcUMsZUFBZ0JGLEVBQVc1QyxHQUUvQixDQTJDQSxTQUFTK0MsRUFBMEJyK0IsR0FDakMsSUFBSTdOLEVBQVV4SCxVQUFVQyxPQUFTLFFBQXNCK0UsSUFBakJoRixVQUFVLEdBQW1CQSxVQUFVLEdBQUssQ0FBQyxFQUUvRTJ6QyxHQUFlLEVBQUk3TixFQUFrQixTQUFHLENBQUMsRUFBR3p3QixFQUFRaXpCLEdBQVU5Z0MsRUFBUyxDQUN6RXVCLFFBQVN2QixFQUFRdUIsVUFBVyxFQUFJKzhCLEVBQWtCLFNBQUcsQ0FBQyxFQUFHendCLEVBQVFpekIsR0FBU3YvQixRQUFTc00sRUFBUWd6QixHQUFNbUksTUFHbkcsT0FEQSxFQUFJM0ksRUFBT3NCLFlBQVl3SyxFQUFjaEQsRUFBaUJ0N0IsRUFBUWd6QixHQUFNc0ksSUFDN0RnRCxDQUNULENBTUEsSUFBSUMsRUFBaUIsV0FDbkIsU0FBU0EsRUFBZXo2QixFQUFPdFEsR0FDN0IsSUFBSXNHLEVBQVF2UCxLQUVSeXBDLEVBQWdCcnBDLFVBQVVDLE9BQVMsUUFBc0IrRSxJQUFqQmhGLFVBQVUsR0FBbUJBLFVBQVUsR0FBSyxDQUFDLEVBRXpGaWtDLEVBQWdCcmtDLEtBQU1nMEMsR0E1UzFCLFNBQXlCcHNDLEdBQ3ZCLElBQUlxc0MsRUFBd0Jyc0MsRUFBUXFzQyxzQkFDaENDLEVBQTBCdHNDLEVBQVFzc0Msd0JBQ2xDL0MsRUFBcUN2cEMsRUFBUXVwQyxtQ0FDN0NDLEVBQWlEeHBDLEVBQVF3cEMsK0NBQ3pERixFQUFhdHBDLEVBQVFzcEMsV0FFekIsUUFBcUMsSUFBMUIrQyxHQUEwRSxrQkFBMUJBLEVBQ3pELE1BQU0sSUFBSTlrQyxNQUFNLGtFQUdsQixRQUF1QyxJQUE1QitrQyxHQUE4RSxrQkFBNUJBLEVBQzNELE1BQU0sSUFBSS9rQyxNQUFNLG9FQUdsQixHQUE2QixNQUF6QjhrQyxHQUE0RCxNQUEzQkMsR0FBbUNELElBQTBCQyxFQUNoRyxNQUFNLElBQUkva0MsTUFBTSxxRkFHbEIsUUFBa0QsSUFBdkNnaUMsR0FBc0RELEVBQVdLLG9CQUFzQkwsRUFBV0ssbUJBQW1CQyxhQUFlTCxFQUM3SSxNQUFNLElBQUloeEMsVUFBVSwySkFHdEIsUUFBOEQsSUFBbkRpeEMsR0FBa0VGLEVBQVdLLG9CQUFzQkwsRUFBV0ssbUJBQW1CRSxjQUFnQkwsRUFDMUosTUFBTSxJQUFJanhDLFVBQVUsdUtBRXhCLENBb1JJZzBDLENBQWdCMUssR0FFaEIsSUFBSTdoQyxFQXJEUixTQUE0QjJSLEVBQU90USxFQUFNd2dDLEVBQWVoMEIsR0FDdEQsSUFBSTdOLEdBQVUsRUFBSXFnQyxFQUFPNEIsYUFBYUosR0FDbENsckIsR0FBVSxFQUFJMmpCLEVBQXNCLFNBQUd1SCxHQUUzQyxJQURBLEVBQUl4QixFQUFPc0IsWUFBWTNoQyxFQUFTbXBDLEVBQWlCdEgsRUFBY3NILElBQzNEOW5DLEtBQVMsRUFBSWcvQixFQUFPZ0MsbUJBQW1CcmlDLEVBQVFzaUMsa0JBQW1CM3JCLEdBQ3BFLE9BQU8zVyxFQUVULEdBQWlELG1CQUF0QzJXLEVBQVE2MUIsMEJBQ2pCLE1BQU0sSUFBSWowQyxVQUFVLHdFQUd0QixJQUFJazBDLEVBQXdCOTFCLEVBQVE2MUIsMEJBQTBCNzZCLEVBQU8zUixHQUNqRTBzQyxFQUFjRCxFQUFzQnp3QyxLQUNwQzJ3QyxFQUFhRixFQUFzQkUsV0FJbkNySyxFQUFvQixJQUFJRSxFQUF5QmtLLEVBQWE3K0IsRUFBUzgrQixHQUV2RUMsRUFBd0JkLEVBQWdDeEosRUFBbUIzckIsR0FDM0VrMkIsRUFBaUNELEVBQXNCWixjQUN2RGMsRUFBa0NGLEVBQXNCWCxlQUc1RCxPQURBLEVBQUk1TCxFQUFPc0IsWUFBWTl6QixFQUFTbXpCLEVBQW9Cc0IsSUFDN0MsRUFBSWhFLEVBQWtCLFNBQUcsQ0FBQyxFQUFHdCtCLEVBQVN1K0IsRUFBZ0IsQ0FDM0RoOUIsU0FBUyxFQUFJKzhCLEVBQWtCLFNBQUcsQ0FBQyxFQUFHdCtCLEVBQVF1QixRQUFTc3JDLElBQ3REMUQsRUFBaUIyRCxHQUN0QixDQTBCa0JDLENBQW1CcDdCLEVBQU90USxFQUFNd2dDLEVBQWV6cEMsTUFDekR1ZSxHQUFVLEVBQUkyakIsRUFBc0IsU0FBR3Q2QixHQUN2Q3NwQyxFQUFhRixFQUFxQnp5QixHQUd0QyxHQUFLdFYsR0FzQ0gsRUFBSWcvQixFQUFPc0IsWUFBWXZwQyxLQUFNeW9DLEVBQU14L0IsSUFDbkMsRUFBSWcvQixFQUFPc0IsWUFBWXZwQyxLQUFNd29DLEVBQVksT0FDekMsRUFBSVAsRUFBT3NCLFlBQVl2cEMsS0FBTXVvQyxFQUFVdC9CLEVBQUtzL0IsSUFDNUNlLEVBQWdCdHBDLEtBQU11WixJQUN0QixFQUFJMHVCLEVBQU9zQixZQUFZdnBDLEtBQU0wb0MsRUFBU3ovQixFQUFLeS9CLEtBQzNDLEVBQUlULEVBQU9zQixZQUFZdnBDLEtBQU0yb0MsRUFBWTEvQixFQUFLcS9CLEtBQzlDLEVBQUlMLEVBQU9zQixZQUFZdnBDLEtBQU0rd0MsRUFBaUIsVUE1Q3JDLENBQ1QsSUFBS3h5QixFQUFRcWtCLGVBQWVycEIsR0FDMUIsTUFBTSxJQUFJcFosVUFBVSwrQ0FHdEIsSUFBSW95QyxFQUFxQnJCLEVBQVdXLGdCQUFnQkMsaUJBN0wxRCxTQUEyQ3Y0QixFQUFPZ0YsR0FDaEQsT0FBSyxFQUFJMHBCLEVBQU93TCwwQkFBMEJsNkIsRUFBT2dGLElBQWFoRixFQUFNblMsS0FBSzNGLFdBQTZELG1CQUF6QzhYLEVBQU1uUyxLQUFLM0YsVUFBVW93QyxpQkFJM0csRUFBSTVKLEVBQU9rTCxXQUFXNTVCLEVBQU1uUyxLQUFLM0YsVUFBVyxtQkFIMUMsSUFJWCxDQXVMNkVtekMsQ0FBa0NyN0IsRUFBT2dGLEdBQVcsTUFDM0gsRUFBSTBwQixFQUFPc0IsWUFBWXZwQyxLQUFNeW9DLEVBQU16b0MsT0FDbkMsRUFBSWlvQyxFQUFPc0IsWUFBWXZwQyxLQUFNd29DLEVBQVlqdkIsR0FDekMsSUFBSXV3QixFQUFXdnJCLEVBQVF3ckIsZ0JBQWUsRUFBSTdELEVBQWtCLFNBQUcsQ0FBRW5JLEtBQU0sV0FBYW4yQixLQUNwRixFQUFJcWdDLEVBQU9zQixZQUFZdnBDLEtBQU11b0MsRUFBVXVCLEdBQ3ZDLElBQUkrSixFQUFpQixJQUFJM3BCLElBQUl0aUIsRUFBUW1wQyxJQUFvQixJQUN6RC93QyxLQUFLdW9DLEdBQVUxckIsT0FBT3RELEVBQU8zUixFQUFRdUIsUUFBUyxDQUFFMHFDLGVBQWdCQSxJQUNoRSxJQUFJdkIsRUFBZXR5QyxLQUFLdW9DLEdBQVV5QixVQUNsQ1YsRUFBZ0J0cEMsS0FBTSt4QyxFQUFZTyxLQUNsQyxFQUFJckssRUFBT3NCLFlBQVl2cEMsS0FBTTBvQyxFQUFTOWdDLElBQ3RDLEVBQUlxZ0MsRUFBT3NCLFlBQVl2cEMsS0FBTSt3QyxFQUFpQjhDLEdBRTlDLElBQUl2MkIsRUFBV2cxQixFQUFhaDFCLFNBRXhCQSxJQUFhMVYsRUFBUXNzQywwQkFFbkJoRCxFQUFXSyxtQkFBbUJDLGFBQWVsMEIsRUFBU3F6QixNQUN4RCxFQUFJMUksRUFBT3NCLFlBQVlqc0IsRUFBVXF6QixFQUFXcnpCLEVBQVM2dEIsVUFDckQ3dEIsRUFBUzZ0QixTQUFXLFNBQVUwSixHQUM1QixJQUFJaGpCLEVBQVd6eEIsVUFBVUMsT0FBUyxRQUFzQitFLElBQWpCaEYsVUFBVSxHQUFtQkEsVUFBVSxRQUFLZ0YsRUFDbkYsT0FBT21LLEVBQU00N0IsU0FBU2xxQyxNQUFNc08sRUFBTzIzQixFQUErQixNQUFaclYsRUFBbUIsQ0FBQ2dqQixHQUFXLENBQUNBLEVBQVNoakIsSUFDakcsR0FHd0MsbUJBQS9CdlUsRUFBU3czQixtQkFDbEI5MEMsS0FBS3VvQyxHQUFVd00sZ0JBQWUsV0FDNUJ6M0IsRUFBU3czQixtQkFDWCxJQUVGekMsRUFBdUI5ekIsRUFBU3ZlLEtBQU1zZCxFQUFVZzFCLEVBQWNDLEdBR2xFLENBU0YsQ0EyMERBLE9BbDBEQTNPLEVBQWFvUSxFQUFnQixDQUFDLENBQzVCM2pDLElBQUssT0FDTC9NLE1BQ0UsV0FDRSxPQUFPdEQsS0FBS3lvQyxFQUNkLEdBV0QsQ0FDRHA0QixJQUFLLGtCQUNML00sTUFDRSxXQUNFLEdBQW9CLElBQWhCdEQsS0FBS0ssT0FDUCxNQUFNLElBQUk4TyxNQUFNLHVFQUtsQixPQUhJblAsS0FBS3lvQyxLQUFVem9DLE1BQ2pCQSxLQUFLdVcsU0FFQXZXLEtBQUtvb0MsRUFDZCxHQVdELENBQ0QvM0IsSUFBSyxtQkFDTC9NLE1BQ0UsV0FJRSxPQUhJdEQsS0FBS3lvQyxLQUFVem9DLE1BQXdCLElBQWhCQSxLQUFLSyxRQUM5QkwsS0FBS3VXLFNBRUF2VyxLQUFLc29DLEVBQ2QsR0FXRCxDQUNEajRCLElBQUssYUFDTC9NLE1BQ0UsV0FDRSxJQUFJaW5DLEVBQVN2cUMsS0FFYixPQUFPQSxLQUFLcXFDLE9BQU8sY0FBYyxTQUFVemxDLEdBQ3pDLE9BQU8sRUFBSXM5QixFQUFzQixTQUFHcUksRUFBTzdCLElBQVU0QixjQUFjMWxDLEVBQ3JFLEdBQ0YsR0FXRCxDQUNEeUwsSUFBSyxjQUNML00sTUFDRSxXQUNFLElBQUlvbkMsRUFBUzFxQyxLQUViLE9BQU9BLEtBQUttcEMsbUJBQW1CejlCLEtBQUksU0FBVTlHLEdBQzNDLE9BQU8sRUFBSXM5QixFQUFzQixTQUFHd0ksRUFBT2hDLElBQVU0QixjQUFjMWxDLEVBQ3JFLEdBQ0YsR0FPRCxDQUNEeUwsSUFBSyxVQUNML00sTUFDRSxXQUNFLE1BQU0sSUFBSTZMLE1BQU0sNkZBQ2xCLEdBT0QsQ0FDRGtCLElBQUssV0FDTC9NLE1BQ0UsV0FDRSxNQUFNLElBQUk2TCxNQUFNLCtGQUNsQixHQW1CRCxDQUNEa0IsSUFBSyxXQUNML00sTUFDRSxXQUNFLEdBQUl0RCxLQUFLeW9DLEtBQVV6b0MsS0FDakIsTUFBTSxJQUFJbVAsTUFBTSw2REFFbEIsT0FBT25QLEtBQUt1b0MsR0FBVXlCLFVBQVUxc0IsUUFDbEMsR0FhRCxDQUNEak4sSUFBSyx1QkFDTC9NLE1BQ0UsV0FDRSxHQUFJdEQsS0FBS3lvQyxLQUFVem9DLEtBQ2pCLE1BQU0sSUFBSW1QLE1BQU0seUVBRWxCLElBQUtuUCxLQUFLMG9DLEdBQVN3QixrQkFDakIsTUFBTSxJQUFJLzZCLE1BQU0sa0lBRWxCLE9BQU9uUCxLQUFLNG9DLEVBQ2QsR0FjRCxDQUNEdjRCLElBQUssU0FDTC9NLE1BQ0UsV0FDRSxHQUFJdEQsS0FBS3lvQyxLQUFVem9DLEtBQ2pCLE1BQU0sSUFBSW1QLE1BQU0sMkRBRWxCLEdBQW9CLElBQWhCblAsS0FBS0ssT0FDUCxNQUFNLElBQUk4TyxNQUFNLHNFQUdsQixPQURBbTZCLEVBQWdCdHBDLEtBQU0reEMsRUFBWS94QyxLQUFLdW9DLEdBQVV5QixZQUMxQ2hxQyxJQUNULEdBV0QsQ0FDRHFRLElBQUssVUFDTC9NLE1BQ0UsV0FLRSxPQUpBdEQsS0FBS3VvQyxHQUFVdUMsVUFDWDlxQyxLQUFLeW9DLEdBQU1HLElBQ2I1b0MsS0FBS3lvQyxHQUFNRyxHQUFvQmtDLFVBRTFCOXFDLElBQ1QsR0FnQkQsQ0FDRHFRLElBQUssV0FDTC9NLE1BQ0UsU0FBa0Jnc0IsRUFBT25tQixHQUN2QixJQUFJd2hDLEVBQVMzcUMsS0FFVHVlLEdBQVUsRUFBSTJqQixFQUFzQixTQUFHbGlDLEtBQUswb0MsSUF5RWhELE9BeEVBMW9DLEtBQUtxcUMsT0FBTyxZQUFZLFlBQ3RCLEVBQUlwQyxFQUFPK00sc0JBQXFCLFdBSTlCLElBQUlweEMsRUFBTyttQyxFQUFPcEMsR0FBVXlCLFVBQ3hCMXNCLEVBQVcxWixFQUFLMFosVUFBWSxDQUFDLEVBQzdCbFcsRUFBT3hELEVBQUt3RCxNQUFRLENBQUMsRUFDckI0SyxFQUFRc0wsRUFBU3RMLE1BRWpCaWdDLEVBQVkzMEIsRUFBU2dTLE9BQVNxYixFQUFPbkMsR0FBWWxaLE1BQ2pEbWlCLEVBQWNuMEIsRUFBU25VLFNBQVd3aEMsRUFBT2pDLEdBQVN2L0IsUUFDbEQ4ckMsRUFBYzlyQyxHQUFXc29DLEVBQ3pCdG9DLElBQ0Z3aEMsRUFBT2pDLElBQVcsRUFBSXhDLEVBQWtCLFNBQUcsQ0FBQyxFQUFHeUUsRUFBT2pDLEdBQVUsQ0FBRXYvQixRQUFTOHJDLEtBRTdFdEssRUFBT3BDLEdBQVV3TSxnQkFBZSxXQUc5QixJQUFJN0QsRUFBYUYsRUFBcUJ6eUIsR0FDbEMyMkIsR0FBZSxFQUNmQyxPQUEyQixFQUMzQjVDLE9BQXFCLEVBQ3pCLElBQUs1SCxFQUFPakMsR0FBU3dMLHlCQUEyQjUyQixFQUFVLENBQ3hELEdBQThDLG1CQUFuQ0EsRUFBUzgzQixzQkFBc0MsQ0FDeEQsSUFBSUMsRUFBUW5FLEVBQVdTLHlCQUVuQjBELEdBQVNBLEVBQU16RCw2QkFDakJxQixFQUE0QnJ2QyxFQUFNb08sR0FFcENtakMsR0FBMkIsRUFBSWxOLEVBQU9rTCxXQUFXNzFCLEVBQVUsd0JBQzdELENBQ0k0ekIsRUFBV1csZ0JBQWdCQyxrQkFBd0QsbUJBQTdCeDBCLEVBQVN1MEIsa0JBQ2pFVSxHQUFxQixFQUFJdEssRUFBT2tMLFdBQVc3MUIsRUFBVSxtQkFFekQsQ0FZQSxJQVhLNjNCLEdBQTRCaEQsRUFBZ0I3MEIsS0FDL0M0M0IsRUFBZWxELEVBQW1DQyxFQUFXM2lCLEVBQU90ZCxFQUFPc0wsRUFBU3RMLFFBRWxGc2QsSUFBT3FiLEVBQU9uQyxJQUFjLEVBQUlQLEVBQU9nRCxjQUFjMXNCLEVBQVNvc0IsRUFBT25DLEdBQWFsWixJQUN0RnFiLEVBQU9wQyxHQUFVMXJCLE9BQU84dEIsRUFBT25DLEdBQWF5TSxFQUFhLENBQ3ZEcEIsZUFBZ0JsSixFQUFPb0csS0FFckJvRSxJQUNGRCxFQUFlQyxFQUF5QjFDLHFCQUN4QzBDLEVBQXlCekMsV0FFdkJ3QyxJQUFpQnZLLEVBQU9qQyxHQUFTd0wseUJBQTJCNTJCLEVBRTlELEdBREErMEIsRUFBdUI5ekIsRUFBU29zQixFQUFRcnRCLEVBQVUxWixFQUFNMnVDLEdBQ3BEckIsRUFBV29FLHdCQUF5QixDQUN0QyxJQUFJQyxPQUFXLEVBQ2lDLG1CQUFyQ2o0QixFQUFTZzRCLDBCQUNsQkMsRUFBV2o0QixFQUFTZzRCLHdCQUF3QnJELEVBQVdqZ0MsS0FFckRrL0IsRUFBV0ssb0JBQTZELG1CQUFoQ2owQixFQUFTaTBCLG9CQUF1Q3YvQixLQUFTLEVBQUkwK0IsRUFBOEIsU0FBRzErQixFQUFPMjRCLEVBQU9ydEIsV0FBV3RMLFFBQW1ELG1CQUFsQzVLLEVBQUt1cUMsMEJBQ3ZMcjBCLEVBQVNpMEIsbUJBQW1CVSxFQUFXamdDLEVBQU91akMsRUFFbEQsTUFBV3JFLEVBQVdLLG9CQUE2RCxtQkFBaENqMEIsRUFBU2kwQixxQkFDdERMLEVBQVdLLG1CQUFtQkUsWUFDaENuMEIsRUFBU2kwQixtQkFBbUJVLEVBQVdqZ0MsRUFBT3kvQixHQUNwQ3ovQixLQUFTLEVBQUkwK0IsRUFBOEIsU0FBRy9GLEVBQU9ydEIsV0FBV3RMLE1BQU9BLElBQ2pGc0wsRUFBU2kwQixtQkFBbUJVLEVBQVdqZ0MsU0FJakMsRUFBSTArQixFQUE4QixTQUFHcGhCLEVBQU9oUyxFQUFTZ1MsU0FDL0RoUyxFQUFTZ1MsT0FBUy9yQixPQUFPaXlDLFFBQVVqeUMsU0FBUSxFQUFJMmlDLEVBQWtCLFNBQUcsQ0FBQyxFQUFHNW9CLEVBQVNnUyxNQUFPQSxLQUUxRnFiLEVBQU9wMEIsUUFDVCxHQUNGLEdBQ0YsSUFDT3ZXLElBQ1QsR0FvQkQsQ0FDRHFRLElBQUssV0FDTC9NLE1BQ0UsU0FBa0Jnc0IsR0FDaEIsSUFBSXVDLEVBQVd6eEIsVUFBVUMsT0FBUyxRQUFzQitFLElBQWpCaEYsVUFBVSxHQUFtQkEsVUFBVSxRQUFLZ0YsRUFFbkYsR0FBSXBGLEtBQUt5b0MsS0FBVXpvQyxLQUNqQixNQUFNLElBQUltUCxNQUFNLDZEQUVsQixHQUFJL08sVUFBVUMsT0FBUyxHQUF5QixtQkFBYnd4QixFQUNqQyxNQUFNLElBQUkxeEIsVUFBVSxzRUFNdEIsT0FKQUgsS0FBS3kxQyxTQUFTbm1CLEdBQ1Z1QyxHQUNGQSxJQUVLN3hCLElBQ1QsR0FtQkQsQ0FDRHFRLElBQUssV0FDTC9NLE1BQ0UsU0FBa0IwTyxHQUNoQixJQUFJNjRCLEVBQVM3cUMsS0FFVDZ4QixFQUFXenhCLFVBQVVDLE9BQVMsUUFBc0IrRSxJQUFqQmhGLFVBQVUsR0FBbUJBLFVBQVUsUUFBS2dGLEVBRW5GLEdBQUlwRixLQUFLeW9DLEtBQVV6b0MsS0FDakIsTUFBTSxJQUFJbVAsTUFBTSw2REFFbEIsR0FBd0IsT0FBcEJuUCxLQUFLc2QsWUFBNkQsVUFBdEN0ZCxLQUFLdW9DLEdBQVV5QixVQUFVbkgsU0FDdkQsTUFBTSxJQUFJMXpCLE1BQU0scUVBRWxCLEdBQUkvTyxVQUFVQyxPQUFTLEdBQXlCLG1CQUFid3hCLEVBQ2pDLE1BQU0sSUFBSTF4QixVQUFVLHNFQW1GdEIsT0FoRkFILEtBQUtxcUMsT0FBTyxZQUFZLFlBQ3RCLEVBQUlwQyxFQUFPK00sc0JBQXFCLFdBQzlCLElBQUl6MkIsR0FBVSxFQUFJMmpCLEVBQXNCLFNBQUcySSxFQUFPbkMsSUFFOUN3SSxFQUFhRixFQUFxQnp5QixHQUVsQzNhLEVBQU9pbkMsRUFBT3RDLEdBQVV5QixVQUN4QjFzQixFQUFXMVosRUFBSzBaLFNBRWhCMjBCLEVBQVkzMEIsRUFBU2dTLE1BQ3JCNGlCLEVBQVk1MEIsRUFBU3RMLE1BQ3JCeS9CLEVBQWNuMEIsRUFBU25VLFFBRXZCdXNDLEVBQWdDLG1CQUFWMWpDLEVBQXVCQSxFQUFNaFAsS0FBS3NhLEVBQVU0MEIsRUFBV0QsR0FBYWpnQyxFQUkxRjJqQyxHQUFrQnpFLEVBQVcvRixTQUFTeUssa0NBQW9ELE1BQWhCRixFQUkxRVAsT0FBMkIsRUFDM0I1QyxPQUFxQixFQUNyQjJDLEdBQWUsRUFDbkIsSUFBS3JLLEVBQU9uQyxHQUFTd0wseUJBQTJCNTJCLEVBQVUsQ0FDeEQsR0FBSTR6QixFQUFXSyxvQkFBc0JMLEVBQVdLLG1CQUFtQkMsWUFBd0QsbUJBQW5DbDBCLEVBQVM4M0Isc0JBQXNDLENBQ3JJLElBQUlDLEVBQVFuRSxFQUFXUyx5QkFFbkIwRCxHQUFTQSxFQUFNekQsNkJBQ2pCcUIsRUFBNEJydkMsRUFBTW9PLEdBRXBDbWpDLEdBQTJCLEVBQUlsTixFQUFPa0wsV0FBVzcxQixFQUFVLHdCQUM3RCxDQUNJNHpCLEVBQVdXLGdCQUFnQkMsa0JBQXdELG1CQUE3QngwQixFQUFTdTBCLGtCQUNqRVUsR0FBcUIsRUFBSXRLLEVBQU9rTCxXQUFXNzFCLEVBQVUsbUJBRXpELENBZ0JBLElBZks2M0IsR0FBNEJoRCxFQUFnQjcwQixLQUMvQzQzQixFQUFlbEQsRUFBbUNDLEVBQVczMEIsRUFBU2dTLE1BQU80aUIsR0FBVyxFQUFJaE0sRUFBa0IsU0FBRyxDQUFDLEVBQUdnTSxFQUFXd0QsS0FLOUhwNEIsRUFBU3F6QixHQUNYcnpCLEVBQVNxekIsR0FBVytFLEdBRXBCcDRCLEVBQVM2dEIsU0FBU3VLLEdBRWhCUCxJQUNGRCxFQUFlQyxFQUF5QjFDLHFCQUN4QzBDLEVBQXlCekMsV0FFdkJpRCxHQUFrQlQsSUFBaUJySyxFQUFPbkMsR0FBU3dMLDBCQUNyRDdCLEVBQXVCOXpCLEVBQVNzc0IsRUFBUXZ0QixFQUFVMVosRUFBTTJ1QyxHQUNwRHJCLEVBQVdLLG9CQUFzQkwsRUFBV0ssbUJBQW1CQyxZQUNqRSxHQUFJTixFQUFXb0UseUJBQXVFLG1CQUFyQ2g0QixFQUFTZzRCLHdCQUF3QyxDQUNoRyxJQUFJQyxFQUFXajRCLEVBQVNnNEIsd0JBQXdCckQsRUFBV0MsR0FDaEIsbUJBQWhDNTBCLEVBQVNpMEIsb0JBQ2xCajBCLEVBQVNpMEIsbUJBQW1CVSxFQUFXQyxFQUFXcUQsRUFFdEQsS0FBa0QsbUJBQWhDajRCLEVBQVNpMEIscUJBQ3JCTCxFQUFXSyxtQkFBbUJFLFlBQ2hDbjBCLEVBQVNpMEIsbUJBQW1CVSxFQUFXQyxFQUFXVCxHQUVsRG4wQixFQUFTaTBCLG1CQUFtQlUsRUFBV0MsSUFLL0NySCxFQUFPdDBCLFNBRUhzYixJQUNFdFQsRUFBUTZzQix1QkFDVjdzQixFQUFRNnNCLHVCQUF1Qjl0QixFQUFVdVUsR0FFekNBLEVBQVM3dUIsS0FBS3NhLEdBR3BCLEdBQ0YsSUFDT3RkLElBQ1QsR0FlRCxDQUNEcVEsSUFBSyxhQUNML00sTUFDRSxTQUFvQjZGLEdBQ2xCLEdBQUluSixLQUFLeW9DLEtBQVV6b0MsS0FDakIsTUFBTSxJQUFJbVAsTUFBTSwrREFFbEIsSUFBS25QLEtBQUswb0MsR0FBU3YvQixRQUNqQixNQUFNLElBQUlnRyxNQUFNLDRHQUVsQixPQUFPblAsS0FBS3kxQyxTQUFTLEtBQU10c0MsRUFDN0IsR0FrQkQsQ0FDRGtILElBQUssV0FDTC9NLE1BQ0UsU0FBa0Jnb0MsR0FDaEIsSUFBSS9zQixHQUFVLEVBQUkyakIsRUFBc0IsU0FBR2xpQyxLQUFLMG9DLElBQ2hELEtBQUssRUFBSVQsRUFBTzROLHFCQUFxQnZLLEVBQWEvc0IsR0FDaEQsTUFBTSxJQUFJcFAsTUFBTSxrSUFVbEIsT0FBTzQ1QixFQUFtQi9vQyxLQVJWd0IsTUFBTXdJLFFBQVFzaEMsR0FBZSxTQUFVL3dCLEdBQ3JELE9BQU8sRUFBSTB0QixFQUFPc0QsMEJBQTBCdEQsRUFBT3VELFVBQVdqeEIsRUFBTyt3QixFQUFZNS9CLEtBQUksU0FBVTlILEdBQzdGLE9BQU8yYSxFQUFRa3RCLGNBQWM3bkMsRUFDL0IsSUFDRixFQUFJLFNBQVUyVyxHQUNaLE9BQU8sRUFBSTB0QixFQUFPdUQsV0FBV2p0QixFQUFRa3RCLGNBQWNILEdBQWMvd0IsRUFDbkUsR0FFMkNsYSxPQUFTLENBQ3RELEdBdUJELENBQ0RnUSxJQUFLLDBCQUNML00sTUFDRSxTQUFpQ00sR0FDL0IsSUFDSThuQyxHQURVLEVBQUl4SixFQUFzQixTQUFHbGlDLEtBQUswb0MsSUFDMUIrQyxjQUFjN25DLEdBVXBDLE9BQU9tbEMsRUFBbUIvb0MsTUFSeEIsU0FBbUJ1YSxHQUNqQixPQUFPLEVBQUkwdEIsRUFBTzBELGFBQWFELEVBQVNueEIsR0FBTyxTQUFVMU8sRUFBR0MsR0FDMUQsT0FBT0QsR0FBS0MsQ0FDZCxHQUNGLElBSXlDekwsT0FBUyxDQUN0RCxHQXlCRCxDQUNEZ1EsSUFBSyw4QkFDTC9NLE1BQ0UsU0FBcUNpVyxHQUNuQyxJQUFJd3hCLEVBQVMvcUMsS0FFYixJQUFLd0IsTUFBTXdJLFFBQVF1UCxHQUNqQixNQUFNLElBQUlwWixVQUFVLDRCQUd0QixPQUFPb1osRUFBTWtLLE9BQU0sU0FBVTdmLEdBQzNCLE9BQU9tbkMsRUFBT2Msd0JBQXdCam9DLEVBQ3hDLEdBQ0YsR0F5QkQsQ0FDRHlNLElBQUssOEJBQ0wvTSxNQUNFLFNBQXFDaVcsR0FDbkMsSUFBSXl4QixFQUFTaHJDLEtBRWIsT0FBT3dCLE1BQU13SSxRQUFRdVAsSUFBVUEsRUFBTW5WLE1BQUssU0FBVVIsR0FDbEQsT0FBT29uQyxFQUFPYSx3QkFBd0Jqb0MsRUFDeEMsR0FDRixHQWtCRCxDQUNEeU0sSUFBSyxTQUNML00sTUFDRSxTQUFnQk0sR0FDZCxJQUFJc25DLEVBQVNsckMsS0FFYixPQUFPQSxLQUFLcXFDLE9BQU8sVUFBVSxXQUMzQixPQUFPLEVBQUlwQyxFQUFPdUQsV0FBV04sRUFBT2pDLGtCQUFtQnJsQyxFQUN6RCxHQUNGLEdBdUJELENBQ0R5TSxJQUFLLGlCQUNML00sTUFDRSxTQUF3Qk0sR0FDdEIsSUFBSXluQyxFQUFTcnJDLEtBRWIsT0FBT0EsS0FBS3FxQyxPQUFPLGtCQUFrQixXQUNuQyxJQUNJcUIsR0FEVSxFQUFJeEosRUFBc0IsU0FBR21KLEVBQU8zQyxJQUM1QitDLGNBQWM3bkMsR0FDcEMsT0FBTyxFQUFJcWtDLEVBQU8wRCxhQUFhRCxFQUFTTCxFQUFPcEMsbUJBQW1CLFNBQVVwOUIsRUFBR0MsR0FDN0UsT0FBT0QsR0FBS0MsQ0FDZCxHQUNGLEdBQ0YsR0FZRCxDQUNEdUUsSUFBSyxPQUNML00sTUFDRSxTQUFjYSxHQUNaLE9BQU9uRSxLQUFLbVEsTUFBSyxFQUFJZzRCLEVBQVc4RCx1QkFBdUI5bkMsRUFBVW5FLEtBQUttcEMsb0JBQ3hFLEdBY0QsQ0FDRDk0QixJQUFLLEtBQ0wvTSxNQUNFLFNBQVlhLEdBQ1YsSUFBSWdyQixHQUFZLEVBQUlnWixFQUFXK0QsZ0JBQWdCL25DLEdBQy9DLE9BQU9uRSxLQUFLcXFDLE9BQU8sTUFBTSxTQUFVemxDLEdBQ2pDLE9BQU91cUIsRUFBVXZxQixFQUNuQixHQUNGLEdBV0QsQ0FDRHlMLElBQUssZ0JBQ0wvTSxNQUNFLFdBR0UsT0FGWXRELEtBQUttcEMsbUJBRUoxbEIsT0FBTSxTQUFVN2UsR0FDM0IsT0FBTyxFQUFJcWpDLEVBQU82TixjQUFjbHhDLEVBQ2xDLEdBQ0YsR0FjRCxDQUNEeUwsSUFBSyxjQUNML00sTUFDRSxTQUFxQjZyQixHQUNuQixJQUFJeWMsRUFBVTVyQyxLQUVkLE9BQU9rcEMsRUFBcUJscEMsTUFBTSxTQUFVNEUsR0FDMUMsT0FBT3VxQixFQUFVeWMsRUFBUXo3QixLQUFLdkwsR0FDaEMsR0FDRixHQWFELENBQ0R5TCxJQUFLLFNBQ0wvTSxNQUNFLFNBQWdCYSxHQUVkLE9BQU8ra0MsRUFBcUJscEMsTUFEWixFQUFJbW9DLEVBQVcrRCxnQkFBZ0IvbkMsR0FFakQsR0FhRCxDQUNEa00sSUFBSyxNQUNML00sTUFDRSxTQUFhYSxHQUNYLElBQUlnckIsR0FBWSxFQUFJZ1osRUFBVytELGdCQUFnQi9uQyxHQUMvQyxPQUFPK2tDLEVBQXFCbHBDLE1BQU0sU0FBVTRFLEdBQzFDLE9BQVF1cUIsRUFBVXZxQixFQUNwQixHQUNGLEdBZUQsQ0FDRHlMLElBQUssT0FDTC9NLE1BQ0UsV0FDRSxPQUFPdEQsS0FBS3FxQyxPQUFPLE9BQVFwSSxFQUFjcUUsZ0JBQzNDLEdBYUQsQ0FDRGoyQixJQUFLLE9BQ0wvTSxNQUNFLFdBQ0UsSUFBSXdvQyxFQUFVOXJDLEtBRWQsT0FBT0EsS0FBS3FxQyxPQUFPLFFBQVEsU0FBVXpsQyxHQUNuQyxHQUF1QixPQUFuQmtuQyxFQUFRMWtDLE9BQWlCLE9BQU8sS0FDcEMsSUFBSW1YLEdBQVUsRUFBSTJqQixFQUFzQixTQUFHNEosRUFBUXBELElBRW5ELE9BRGVucUIsRUFBUXdyQixnQkFBZSxFQUFJN0QsRUFBa0IsU0FBRyxDQUFDLEVBQUc0RixFQUFRcEQsR0FBVSxDQUFFM0ssS0FBTSxZQUM3RWxoQixPQUFPMEIsRUFBUStyQixjQUFjMWxDLEdBQy9DLEdBQ0YsR0FhRCxDQUNEeUwsSUFBSyxTQUNML00sTUFDRSxXQUNFLElBQUk4TSxFQUFPcFEsS0FBS29RLE9BQ2hCLE9BQU8sRUFBSTYzQixFQUFPb0UsaUJBQWlCajhCLEVBQ3JDLEdBY0QsQ0FDREMsSUFBSyxXQUNML00sTUFDRSxTQUFrQmdwQyxHQUdoQixJQUZBLElBQUlQLEVBQVUvckMsS0FFTHN2QyxFQUFRbHZDLFVBQVVDLE9BQVF3dEMsRUFBT3JzQyxNQUFNOHRDLEVBQVEsRUFBSUEsRUFBUSxFQUFJLEdBQUlDLEVBQVEsRUFBR0EsRUFBUUQsRUFBT0MsSUFDcEcxQixFQUFLMEIsRUFBUSxHQUFLbnZDLFVBQVVtdkMsR0FHOUIsT0FBT3Z2QyxLQUFLcXFDLE9BQU8sWUFBWSxTQUFVemxDLEdBQ3ZDLElBQUlteEMsRUFJSixPQUZDQSxFQUFZaEssRUFBUXhELElBQVdrRSxjQUFjeHJDLE1BQU04MEMsRUFBVyxDQUFDbnhDLEVBQUcwbkMsR0FBTy9sQyxPQUFPc25DLElBQ2pGOUIsRUFBUXRELEdBQU1seUIsU0FDUHcxQixDQUNULEdBQ0YsR0FZRCxDQUNEMTdCLElBQUssZ0JBQ0wvTSxNQUNFLFNBQXVCaXZCLEdBQ3JCLElBQUl5WixFQUFVaHNDLEtBSWQsT0FBT0EsS0FBS3FxQyxPQUFPLGlCQUFpQixTQUFVc0MsR0FDNUMsR0FBMEIsU0FBdEJBLEVBQVM5SixTQUNYLE1BQU0sSUFBSTFpQyxVQUFVLDJFQUd0QixJQUFJMnBDLEVBQVdrQyxFQUFRekQsR0FDdkIsR0FBc0MsbUJBQTNCdUIsRUFBUzhDLGNBQ2xCLE1BQU0sSUFBSXpzQyxVQUFVLG9FQUd0QixJQUFJMHNDLEVBQVd6RCxFQUFvQjRDLEdBQy9CYyxFQUFnQixDQUFDSCxHQUFVcG1DLE9BQU84aUMsRUFBWTJDLEVBQVNXLElBRzNELE9BRkE3QyxFQUFTOEMsY0FBY0UsRUFBZUQsRUFBVXRhLEdBRXpDeVosQ0FDVCxHQUNGLEdBYUQsQ0FDRDM3QixJQUFLLFFBQ0wvTSxNQUNFLFdBQ0UsT0FBT3RELEtBQUtxcUMsT0FBTyxRQUFTcEksRUFBY2lCLFlBQzVDLEdBZUQsQ0FDRDd5QixJQUFLLFFBQ0wvTSxNQUNFLFNBQWVmLEdBQ2IsSUFBSTZwQyxFQUFVcHNDLEtBRWQsR0FBSUEsS0FBS3lvQyxLQUFVem9DLEtBQ2pCLE1BQU0sSUFBSW1QLE1BQU0sMERBRWxCLEdBQXdCLE9BQXBCblAsS0FBS3NkLFlBQTZELFVBQXRDdGQsS0FBS3VvQyxHQUFVeUIsVUFBVW5ILFNBQ3ZELE1BQU0sSUFBSTF6QixNQUFNLGtFQUVsQixJQUFJNjlCLEVBQVNodEMsS0FBS3FxQyxPQUFPLFNBQVMsV0FDaEMsT0FBTytCLEVBQVE5dUIsV0FBV3RMLEtBQzVCLElBQ0EsUUFBb0IsSUFBVHpQLEVBQXNCLENBQy9CLEdBQWMsTUFBVnlxQyxFQUNGLE1BQU0sSUFBSTdzQyxVQUFVLDBCQUE0QnlPLE9BQU9yTSxHQUFRLHlEQUVqRSxPQUFPeXFDLEVBQU96cUMsRUFDaEIsQ0FDQSxPQUFPeXFDLENBQ1QsR0FlRCxDQUNEMzhCLElBQUssVUFDTC9NLE1BQ0UsU0FBaUJmLEdBQ2YsSUFBSWdxQyxFQUFVdnNDLEtBRWQsR0FBSUEsS0FBS3lvQyxLQUFVem9DLEtBQ2pCLE1BQU0sSUFBSW1QLE1BQU0sNERBRWxCLElBQUtuUCxLQUFLMG9DLEdBQVN2L0IsUUFDakIsTUFBTSxJQUFJZ0csTUFBTSx5R0FFbEIsR0FBd0IsT0FBcEJuUCxLQUFLc2QsV0FDUCxNQUFNLElBQUluTyxNQUFNLCtGQUVsQixJQUFJdWEsRUFBVzFwQixLQUFLcXFDLE9BQU8sV0FBVyxXQUNwQyxPQUFPa0MsRUFBUWp2QixXQUFXblUsT0FDNUIsSUFDQSxPQUFJNUcsRUFDS21uQixFQUFTbm5CLEdBRVhtbkIsQ0FDVCxHQVlELENBQ0RyWixJQUFLLFdBQ0wvTSxNQUNFLFNBQWtCYSxHQUNoQixJQUFJK29DLEVBQWNsdEMsS0FBS2dwQyxTQUFRLFNBQVVwa0MsR0FDdkMsT0FBTyxFQUFJcTlCLEVBQWNlLGdCQUFnQnArQixFQUFFcWtDLGtCQUM3QyxJQUNBLE9BQU85a0MsRUFBVytvQyxFQUFZeHJDLE9BQU95QyxHQUFZK29DLENBQ25ELEdBWUQsQ0FDRDc4QixJQUFLLFVBQ0wvTSxNQUNFLFNBQWlCdU8sR0FDZixJQUFJNjZCLEVBQVUxc0MsS0FFZCxPQUFPQSxLQUFLcXFDLE9BQU8sV0FBVyxXQUM1QixPQUFPcUMsRUFBUS8rQixXQUFXeS9CLEdBQUd2N0IsRUFDL0IsR0FDRixHQWVELENBQ0R4QixJQUFLLFVBQ0wvTSxNQUNFLFNBQWlCYSxHQUNmLElBQUk0b0MsRUFBVS9zQyxLQUVkLE9BQU9BLEtBQUtxcUMsT0FBTyxXQUFXLFNBQVV6bEMsR0FDdEMsSUFBSTBvQyxFQUFhUCxFQUFRNThCLEtBQUtrNUIsRUFBWTBELEVBQVNub0MsSUFDbkQsT0FBT1QsRUFBV21wQyxFQUFXNXJDLE9BQU95QyxHQUFZbXBDLENBQ2xELEdBQ0YsR0FXRCxDQUNEajlCLElBQUssU0FDTC9NLE1BQ0UsV0FDRSxPQUFPdEQsS0FBS2dwQyxTQUFRLFNBQVVwa0MsR0FDNUIsTUFBTyxDQUFDQSxFQUFFK1EsVUFBVWhRLElBQUksR0FDMUIsR0FDRixHQVdELENBQ0QwSyxJQUFLLFVBQ0wvTSxNQUNFLFNBQWlCYSxHQUNmLEdBQUluRSxLQUFLeUcsR0FBR3RDLEdBQ1YsT0FBT25FLEtBRVQsSUFBSXV0QyxFQUFvQnZ0QyxLQUFLMlYsVUFBVWpVLE9BQU95QyxHQUM5QyxPQUFPb3BDLEVBQWtCbHRDLE9BQVMsRUFBSWt0QyxFQUFrQmwyQixRQUFVclgsS0FBS3d0QyxXQUFVLFdBQy9FLE9BQU8sQ0FDVCxHQUNGLEdBY0QsQ0FDRG45QixJQUFLLFVBQ0wvTSxNQUNFLFdBQ0UsSUFBSTJwQyxFQUFVanRDLEtBRVY0SCxFQUFVeEgsVUFBVUMsT0FBUyxRQUFzQitFLElBQWpCaEYsVUFBVSxHQUFtQkEsVUFBVSxHQUFLLENBQUMsRUFFbkYsT0FBT0osS0FBS3FxQyxPQUFPLFdBQVcsU0FBVXpsQyxHQUN0QyxJQUFJbXZDLEVBQWVELEVBQTBCN0csRUFBU3JsQyxHQUN0RCxPQUFPcWxDLEVBQVE5OEIsTUFBSyxFQUFJK3hCLEVBQXNCLFNBQUcrSyxFQUFRdkUsSUFBVTRCLGNBQWMxbEMsR0FBSSxLQUFNbXZDLEVBQzdGLEdBQ0YsR0FZRCxDQUNEMWpDLElBQUssT0FDTC9NLE1BQ0UsU0FBY21xQyxHQUNaLE9BQU96dEMsS0FBS3N2QixRQUFRbWUsRUFDdEIsR0FhRCxDQUNEcDlCLElBQUssU0FDTC9NLE1BQ0UsU0FBZ0JtcUMsR0FDZCxJQUFJTixFQUFVbnRDLEtBRWQsT0FBT0EsS0FBS3FxQyxPQUFPLFVBQVUsV0FDM0IsSUFBSXNELEVBQVVSLEVBQVE1Z0MsS0FBS2toQyxHQUMzQixHQUF1QixtQkFBWkUsRUFDVCxNQUFNLElBQUl4dEMsVUFBVSxrRkFFdEIsT0FBTyxXQUNMLElBQUk0dEMsRUFBV0osRUFBUTFzQyxXQUFNbUUsRUFBV2hGLFdBRXhDLE9BREErc0MsRUFBUTFFLEdBQU1seUIsU0FDUHczQixDQUNULENBQ0YsR0FDRixHQVlELENBQ0QxOUIsSUFBSyxhQUNML00sTUFDRSxTQUFvQm1xQyxHQUNsQixJQUFJSixFQUFVcnRDLEtBRVZ1ZSxHQUFVLEVBQUkyakIsRUFBc0IsU0FBR2xpQyxLQUFLMG9DLElBQ2hELEdBQTRCLG1CQUFqQm5xQixFQUFRcE8sS0FDakIsTUFBTSxJQUFJKzlCLFdBQVcsMkRBR3ZCLE9BQU9sdUMsS0FBS3FxQyxPQUFPLGNBQWMsU0FBVXpsQyxHQUN6QyxHQUFtQixTQUFmQSxFQUFFaStCLFNBQ0osTUFBTSxJQUFJMWlDLFVBQVUsd0VBRXRCLEdBQXdCLGlCQUFic3RDLEVBQ1QsTUFBTSxJQUFJdHRDLFVBQVUsNkRBRXRCLElBQUltdkIsRUFBUStkLEVBQVEvZCxRQUNwQixLQUFLLEVBQUkwUyxFQUFlLFNBQUcxUyxFQUFPbWUsR0FDaEMsTUFBTSxJQUFJdCtCLE1BQU0saURBQXdEUCxPQUFPNitCLEdBQVksV0FFN0YsSUFBSVUsRUFBWTdlLEVBQU1tZSxHQUN0QixHQUF5QixtQkFBZFUsRUFDVCxNQUFNLElBQUlodUMsVUFBVSxnREFBdUR5TyxPQUFPNitCLEdBQVksZ0RBQTRFLElBQWRVLEVBQTRCLFlBQWNwTixFQUFRb04sSUFBYyxLQUc5TixPQUFPLFdBQ0wsSUFBSTNpQyxFQUFVMmlDLEVBQVVsdEMsV0FBTW1FLEVBQVdoRixXQUNyQ2d1QyxFQUFVN3ZCLEVBQVFwTyxLQUFLM0UsR0FDM0IsT0FBTzZoQyxFQUFRbDlCLEtBQUtpK0IsRUFBUyxLQUFNZixFQUFRM0UsR0FDN0MsQ0FDRixHQUNGLEdBV0QsQ0FDRHI0QixJQUFLLE1BQ0wvTSxNQUNFLFdBQ0UsT0FBT3RELEtBQUtxcUMsT0FBTyxPQUFPLFNBQVV6bEMsR0FDbEMsWUFBaUJRLElBQVZSLEVBQUV5TCxJQUFvQixLQUFPekwsRUFBRXlMLEdBQ3hDLEdBQ0YsR0FhRCxDQUNEQSxJQUFLLE9BQ0wvTSxNQUNFLFdBQ0UsT0FBT3RELEtBQUtxcUMsT0FBTyxRQUFRLFNBQVV6bEMsR0FDbkMsT0FBTyxFQUFJcWpDLEVBQU9vRyxZQUFZenBDLEVBQ2hDLEdBQ0YsR0FhRCxDQUNEeUwsSUFBSyxPQUNML00sTUFDRSxXQUNFLElBQUlpYixHQUFVLEVBQUkyakIsRUFBc0IsU0FBR2xpQyxLQUFLMG9DLElBQ2hELE9BQU8xb0MsS0FBS3FxQyxPQUFPLFFBQVEsU0FBVXpsQyxHQUNuQyxPQUFPMlosRUFBUWdrQixrQkFBb0Joa0IsRUFBUWdrQixrQkFBa0IzOUIsSUFBSyxFQUFJcWpDLEVBQU8xRixtQkFBbUIzOUIsRUFDbEcsR0FDRixHQWNELENBQ0R5TCxJQUFLLFdBQ0wvTSxNQUNFLFNBQWtCd04sR0FLaEIsTUFKeUIsaUJBQWRBLElBQXNELElBQTVCQSxFQUFVRSxRQUFRLE1BRXJEczlCLFFBQVFDLEtBQUssdUlBRVJ2dUMsS0FBS3FxQyxPQUFPLFlBQVksU0FBVXpsQyxHQUN2QyxPQUFPLEVBQUlxOUIsRUFBYzBDLGNBQWMvL0IsRUFBR2tNLEVBQzVDLEdBQ0YsR0FhRCxDQUNEVCxJQUFLLFVBQ0wvTSxNQUNFLFNBQWlCMlUsR0FDZixJQUFJeTFCLEVBQVUxdEMsS0FLZCxPQUhBQSxLQUFLbXBDLG1CQUFtQnRnQyxTQUFRLFNBQVVqRSxFQUFHRCxHQUMzQyxPQUFPc1QsRUFBR2pWLEtBQUswcUMsRUFBU0EsRUFBUXY5QixLQUFLdkwsR0FBSUQsRUFDM0MsSUFDTzNFLElBQ1QsR0FhRCxDQUNEcVEsSUFBSyxNQUNML00sTUFDRSxTQUFhMlUsR0FDWCxJQUFJZzJCLEVBQVVqdUMsS0FFZCxPQUFPQSxLQUFLbXBDLG1CQUFtQno5QixLQUFJLFNBQVU5RyxFQUFHRCxHQUM5QyxPQUFPc1QsRUFBR2pWLEtBQUtpckMsRUFBU0EsRUFBUTk5QixLQUFLdkwsR0FBSUQsRUFDM0MsR0FDRixHQWNELENBQ0QwTCxJQUFLLFNBQ0wvTSxNQUNFLFNBQWdCMlUsR0FDZCxJQUFJdTJCLEVBQVV4dUMsS0FFVjJ1QyxFQUFldnVDLFVBQVVDLE9BQVMsUUFBc0IrRSxJQUFqQmhGLFVBQVUsR0FBbUJBLFVBQVUsUUFBS2dGLEVBRXZGLE9BQUloRixVQUFVQyxPQUFTLEVBQ2RMLEtBQUttcEMsbUJBQW1CdjlCLFFBQU8sU0FBVWdqQyxFQUFPaHFDLEVBQUdELEdBQ3hELE9BQU9zVCxFQUFHalYsS0FBS3dyQyxFQUFTSSxFQUFPSixFQUFRcitCLEtBQUt2TCxHQUFJRCxFQUNsRCxHQUFHZ3FDLEdBRUUzdUMsS0FBS21wQyxtQkFBbUJ2OUIsUUFBTyxTQUFVZ2pDLEVBQU9ocUMsRUFBR0QsR0FDeEQsT0FBT3NULEVBQUdqVixLQUFLd3JDLEVBQWUsSUFBTjdwQyxFQUFVNnBDLEVBQVFyK0IsS0FBS3krQixHQUFTQSxFQUFPSixFQUFRcitCLEtBQUt2TCxHQUFJRCxFQUNsRixHQUNGLEdBY0QsQ0FDRDBMLElBQUssY0FDTC9NLE1BQ0UsU0FBcUIyVSxHQUNuQixJQUFJdzJCLEVBQVV6dUMsS0FFVjJ1QyxFQUFldnVDLFVBQVVDLE9BQVMsUUFBc0IrRSxJQUFqQmhGLFVBQVUsR0FBbUJBLFVBQVUsUUFBS2dGLEVBRXZGLE9BQUloRixVQUFVQyxPQUFTLEVBQ2RMLEtBQUttcEMsbUJBQW1CMkYsYUFBWSxTQUFVRixFQUFPaHFDLEVBQUdELEdBQzdELE9BQU9zVCxFQUFHalYsS0FBS3lyQyxFQUFTRyxFQUFPSCxFQUFRdCtCLEtBQUt2TCxHQUFJRCxFQUNsRCxHQUFHZ3FDLEdBRUUzdUMsS0FBS21wQyxtQkFBbUIyRixhQUFZLFNBQVVGLEVBQU9ocUMsRUFBR0QsR0FDN0QsT0FBT3NULEVBQUdqVixLQUFLeXJDLEVBQWUsSUFBTjlwQyxFQUFVOHBDLEVBQVF0K0IsS0FBS3krQixHQUFTQSxFQUFPSCxFQUFRdCtCLEtBQUt2TCxHQUFJRCxFQUNsRixHQUNGLEdBY0QsQ0FDRDBMLElBQUssUUFDTC9NLE1BQ0UsU0FBZXlyQyxFQUFPOTlCLEdBQ3BCLE9BQU9qUixLQUFLbVEsS0FBS25RLEtBQUttcEMsbUJBQW1CN2lDLE1BQU15b0MsRUFBTzk5QixHQUN4RCxHQVlELENBQ0RaLElBQUssT0FDTC9NLE1BQ0UsU0FBY2EsR0FDWixHQUFJbkUsS0FBS3lvQyxLQUFVem9DLEtBQ2pCLE1BQU0sSUFBSW1QLE1BQU0sd0RBRWxCLElBQUlnZ0IsR0FBWSxFQUFJZ1osRUFBVytELGdCQUFnQi9uQyxHQUMvQyxPQUFPbkUsS0FBS21wQyxtQkFBbUIva0MsS0FBSytxQixFQUN0QyxHQVlELENBQ0Q5ZSxJQUFLLFlBQ0wvTSxNQUNFLFNBQW1CNnJCLEdBQ2pCLElBQUl1ZixFQUFVMXVDLEtBRWQsT0FBT0EsS0FBS21wQyxtQkFBbUIva0MsTUFBSyxTQUFVUSxFQUFHRCxHQUMvQyxPQUFPd3FCLEVBQVVuc0IsS0FBSzByQyxFQUFTQSxFQUFRditCLEtBQUt2TCxHQUFJRCxFQUNsRCxHQUNGLEdBWUQsQ0FDRDBMLElBQUssUUFDTC9NLE1BQ0UsU0FBZWEsR0FDYixJQUFJZ3JCLEdBQVksRUFBSWdaLEVBQVcrRCxnQkFBZ0IvbkMsR0FDL0MsT0FBT25FLEtBQUttcEMsbUJBQW1CMWxCLE1BQU0wTCxFQUN2QyxHQVlELENBQ0Q5ZSxJQUFLLGFBQ0wvTSxNQUNFLFNBQW9CNnJCLEdBQ2xCLElBQUkwZixFQUFVN3VDLEtBRWQsT0FBT0EsS0FBS21wQyxtQkFBbUIxbEIsT0FBTSxTQUFVN2UsRUFBR0QsR0FDaEQsT0FBT3dxQixFQUFVbnNCLEtBQUs2ckMsRUFBU0EsRUFBUTErQixLQUFLdkwsR0FBSUQsRUFDbEQsR0FDRixHQWNELENBQ0QwTCxJQUFLLFVBQ0wvTSxNQUNFLFNBQWlCMlUsR0FDZixJQUFJKzJCLEVBQVVodkMsS0FFVnVaLEVBQVF2WixLQUFLbXBDLG1CQUFtQno5QixLQUFJLFNBQVU5RyxFQUFHRCxHQUNuRCxPQUFPc1QsRUFBR2pWLEtBQUtnc0MsRUFBU0EsRUFBUTcrQixLQUFLdkwsR0FBSUQsRUFDM0MsSUFDSXdxQyxHQUFZLEVBQUlsSSxFQUEwQixTQUFHMXRCLEVBQU8sR0FDeEQsT0FBT3ZaLEtBQUttUSxLQUFLZy9CLEVBQVV6dEMsT0FBTzJnQyxTQUNwQyxHQWNELENBQ0RoeUIsSUFBSyxZQUNML00sTUFDRSxTQUFtQjZyQixHQUNqQixJQUFJOGYsRUFBVWp2QyxLQUVkLE9BQU8rb0MsRUFBbUIvb0MsTUFBTSxTQUFVNEUsR0FDeEMsSUFBSWhCLEVBQU9xckMsRUFBUTkrQixLQUFLdkwsR0FDeEIsT0FBT2hCLEVBQUt2RCxPQUFTLEdBQUs4dUIsRUFBVXZyQixFQUN0QyxHQUNGLEdBWUQsQ0FDRHlNLElBQUssTUFDTC9NLE1BQ0UsU0FBYXVPLEdBQ1gsT0FBTzdSLEtBQUtvM0IsY0FBY3ZsQixFQUM1QixHQVlELENBQ0R4QixJQUFLLEtBQ0wvTSxNQUNFLFNBQVl1TyxHQUNWLElBQUkwSCxFQUFRdlosS0FBS21wQyxtQkFDakIsT0FBSXQzQixFQUFRMEgsRUFBTWxaLE9BQ1RMLEtBQUttUSxLQUFLb0osRUFBTTFILElBRWxCN1IsS0FBS21RLEtBQUssR0FDbkIsR0FXRCxDQUNERSxJQUFLLFFBQ0wvTSxNQUNFLFdBQ0UsT0FBT3RELEtBQUtvdEMsR0FBRyxFQUNqQixHQVdELENBQ0QvOEIsSUFBSyxPQUNML00sTUFDRSxXQUNFLE9BQU90RCxLQUFLb3RDLEdBQUdwdEMsS0FBS0ssT0FBUyxFQUMvQixHQVdELENBQ0RnUSxJQUFLLFVBQ0wvTSxNQUNFLFdBR0UsT0FEQWdyQyxRQUFRQyxLQUFLLHNFQUNMdnVDLEtBQUtvaUIsUUFDZixHQWFELENBQ0QvUixJQUFLLFNBQ0wvTSxNQUNFLFdBQ0UsSUFBSWEsRUFBVy9ELFVBQVVDLE9BQVMsUUFBc0IrRSxJQUFqQmhGLFVBQVUsR0FBbUJBLFVBQVUsR0FBSyxLQUVuRixPQUFPQSxVQUFVQyxPQUFTLEVBQUlMLEtBQUtvTCxLQUFLakgsR0FBVWllLFNBQVdwaUIsS0FBS0ssT0FBUyxDQUM3RSxHQWNELENBQ0RnUSxJQUFLLFNBQ0wvTSxNQUNFLFNBQWdCZixFQUFNMFYsR0FDcEIsSUFBSW8zQixFQUF5QixpQkFBVDlzQyxFQUFvQkEsRUFBTyxVQUMzQ3N2QixFQUF5QixtQkFBUDVaLEVBQW9CQSxFQUFLMVYsRUFDL0MsR0FBb0IsSUFBaEJ2QyxLQUFLSyxPQUNQLE1BQU0sSUFBSThPLE1BQU0sV0FBa0JrZ0MsRUFBUyxtQ0FBMEN6Z0MsT0FBTzVPLEtBQUtLLFFBQVUsbUJBRTdHLE9BQU93eEIsRUFBUzd1QixLQUFLaEQsS0FBTUEsS0FBS2lwQyxrQkFDbEMsR0FhRCxDQUNENTRCLElBQUssT0FDTC9NLE1BQ0UsU0FBY00sR0FDWixJQUFJcUYsRUFBTzdJLFVBQVVDLE9BQVMsUUFBc0IrRSxJQUFqQmhGLFVBQVUsR0FBbUJBLFVBQVUsR0FBS0osS0FBS3lvQyxHQUVwRixHQUFJN2tDLGFBQWdCb3dDLEVBQ2xCLE9BQU9wd0MsRUFHVCxJQUFLLElBQUlveUMsRUFBUTUxQyxVQUFVQyxPQUFRd3RDLEVBQU9yc0MsTUFBTXcwQyxFQUFRLEVBQUlBLEVBQVEsRUFBSSxHQUFJQyxFQUFRLEVBQUdBLEVBQVFELEVBQU9DLElBQ3BHcEksRUFBS29JLEVBQVEsR0FBSzcxQyxVQUFVNjFDLEdBRzlCLE9BQU8sSUFBSzdULFNBQVMzZ0MsVUFBVWlCLEtBQUt6QixNQUFNK3lDLEVBQWdCLENBQUMsTUFBTXp0QyxPQUFPLENBQUMzQyxFQUFNcUYsR0FBTzRrQyxJQUN4RixHQWNELENBQ0R4OUIsSUFBSyxRQUNML00sTUFDRSxXQUNFLElBQUlzRSxFQUFVeEgsVUFBVUMsT0FBUyxRQUFzQitFLElBQWpCaEYsVUFBVSxHQUFtQkEsVUFBVSxHQUFLLENBQUMsRUFFbkYsT0FBTyxFQUFJOG5DLEVBQU8xRyxZQUFZeGhDLEtBQUttcEMsbUJBQW9CdmhDLEVBQ3pELEdBWUQsQ0FDRHlJLElBQUssTUFDTC9NLE1BQ0UsU0FBYWtzQyxHQUVYLE9BREFBLEVBQVl4dkMsTUFDTEEsSUFDVCxHQWFELENBQ0RxUSxJQUFLLE9BQ0wvTSxNQUNFLFdBQ0UsSUFBSTRyQyxFQUFVbHZDLEtBRVY0SCxFQUFVeEgsVUFBVUMsT0FBUyxRQUFzQitFLElBQWpCaEYsVUFBVSxHQUFtQkEsVUFBVSxHQUFLLENBQUMsRUFFL0VtZSxHQUFVLEVBQUkyakIsRUFBc0IsU0FBR2xpQyxLQUFLMG9DLElBRWhELE9BQU8xb0MsS0FBS3FxQyxPQURELFFBQ2MsU0FBVXpsQyxHQUNqQyxHQUFJQSxHQUFvQixTQUFmQSxFQUFFaStCLFNBQ1QsTUFBTSxJQUFJMWlDLFVBQVUsK0RBRXRCLElBQUkySSxHQUFLLEVBQUlvNUIsRUFBc0IsU0FBR2dOLEVBQVF4RyxJQUFVNEIsY0FBYzFsQyxHQUN0RSxLQUFLLEVBQUlxakMsRUFBT3dMLDBCQUEwQjNxQyxFQUFJeVYsR0FDNUMsTUFBTSxJQUFJcGUsVUFBVSwyREFFdEIsSUFBSTR6QyxFQUFlRCxFQUEwQjVFLEVBQVN0bkMsR0FDdEQsT0FBT3NuQyxFQUFRLytCLEtBQUtySCxFQUFJLEtBQU1pckMsRUFDaEMsR0FDRixHQVlELENBQ0QxakMsSUFBSyxZQUNML00sTUFDRSxXQUNFLE9BQU90RCxLQUFLMHZDLGFBQVksU0FBVTlxQyxHQUNoQyxNQUEyQixpQkFBYkEsRUFBRXdDLE1BQ2xCLEdBQ0YsS0FNRzRzQyxDQUNULENBejREcUIsR0FpNURyQixTQUFTa0MsRUFBeUJoTSxHQUNoQyxJQUFJM3JCLEdBQVUsRUFBSTJqQixFQUFzQixTQUFHZ0ksRUFBa0J4QixJQUN6RHlOLEVBQWlCak0sRUFBa0IyRyxHQUVuQ3VGLEVBRGtCRCxFQUFlNU4sR0FDSHlCLFVBRTlCcU0sRUFBeUIzQyxFQUFnQ3hKLEVBQW1CM3JCLEdBQzVFcTFCLEVBQWdCeUMsRUFBdUJ6QyxjQUN2Q0MsRUFBaUJ3QyxFQUF1QnhDLGVBRXhDeUMsRUFBcUJILEVBQWVwRixHQUt4QyxHQUhBb0YsRUFBZUksWUFBVyxFQUFJclEsRUFBa0IsU0FBRyxDQUFDLEVBQUdnRSxFQUFrQjJHLEdBQWlCbkksR0FBU3YvQixRQUFTeXFDLElBQzVHdUMsRUFBZXBGLEdBQW1CLElBQUk3bUIsSUFBSSxHQUFHM2pCLE9BQU8yZ0MsRUFBbUJvUCxHQUFxQnBQLEVBQW1CMk0sS0FFdEUsbUJBQTlCdDFCLEVBQVFpNEIsbUJBQW9DajRCLEVBQVFpNEIsa0JBQWtCSixFQUFZaHZDLE1BQU8sQ0FDbEcsSUFBSXF2QyxFQUFXTCxFQUFZaHZDLEtBR3ZCc3ZDLEVBQVduNEIsRUFBUW80Qix3QkFBd0JGLEdBQ2hDNUMsRUFBZWx1QyxJQUFJK3dDLEtBQ25CSixFQUFtQjN3QyxJQUFJK3dDLElBSXBDUCxFQUFlVixVQUVuQixDQUNGLENBU0EsSUFBSXJMLEVBQTJCLFNBQVV3TSxHQUd2QyxTQUFTeE0sRUFBeUI3d0IsRUFBT3RRLEVBQU1zckMsR0FDN0NsUSxFQUFnQnJrQyxLQUFNb3FDLEdBRXRCLElBQUlnRixFQTN4RVIsU0FBb0NudkMsRUFBTStDLEdBQVEsSUFBSy9DLEVBQVEsTUFBTSxJQUFJNHZDLGVBQWUsNkRBQWdFLE9BQU83c0MsR0FBeUIsaUJBQVRBLEdBQXFDLG1CQUFUQSxFQUE4Qi9DLEVBQVArQyxDQUFhLENBMnhFN044c0MsQ0FBMkI5dkMsTUFBT29xQyxFQUF5QjV0QixXQUFhalosT0FBT3dzQyxlQUFlM0YsSUFBMkJwbkMsS0FBS2hELEtBQU11WixJQUlsSixPQUZBLEVBQUkwdUIsRUFBT3NCLFlBQVk2RixFQUFTeUIsRUFBaUI1bkMsSUFDakQsRUFBSWcvQixFQUFPc0IsWUFBWTZGLEVBQVMwQixFQUFheUQsR0FDdENuRixDQUNULENBOERBLE9BNTFFRixTQUFtQlksRUFBVUMsR0FBYyxHQUEwQixtQkFBZkEsR0FBNEMsT0FBZkEsRUFBdUIsTUFBTSxJQUFJOXZDLFVBQVUsa0VBQW9FOHZDLEdBQWVELEVBQVN2dUMsVUFBWThCLE9BQU95QixPQUFPaXJDLEdBQWNBLEVBQVd4dUMsVUFBVyxDQUFFaWIsWUFBYSxDQUFFcFosTUFBTzBzQyxFQUFVdHFDLFlBQVksRUFBT0YsVUFBVSxFQUFNQyxjQUFjLEtBQWV3cUMsSUFBWTFzQyxPQUFPZ1osZUFBaUJoWixPQUFPZ1osZUFBZXl6QixFQUFVQyxHQUFjRCxFQUFTeHpCLFVBQVl5ekIsRUFBWSxDQW94RTNlQyxDQUFVOUYsRUFBMEJ3TSxHQWtCcENoVCxFQUFhd0csRUFBMEIsQ0FBQyxDQUN0Qy81QixJQUFLLFdBQ0wvTSxNQUNFLFdBR0UsSUFGQSxJQUFJdXpDLEVBRUtDLEVBQVExMkMsVUFBVUMsT0FBUXd0QyxFQUFPcnNDLE1BQU1zMUMsR0FBUUMsRUFBUSxFQUFHQSxFQUFRRCxFQUFPQyxJQUNoRmxKLEVBQUtrSixHQUFTMzJDLFVBQVUyMkMsR0FHMUIsSUFBSS93QyxHQUFVNndDLEVBQVF0RyxFQUFLbkcsRUFBeUIzb0MsVUFBVSthLFdBQWFqWixPQUFPd3NDLGVBQWUzRixFQUF5QjNvQyxXQUFZLFdBQVl6QixPQUFPZ0QsS0FBSy9CLE1BQU00MUMsRUFBTyxDQUFDNzJDLE1BQU11RyxPQUFPc25DLElBRXpMLE9BREFxSSxFQUF5QmwyQyxNQUNsQmdHLENBQ1QsR0FVRCxDQUNEcUssSUFBSyxXQUNML00sTUFDRSxXQUdFLElBRkEsSUFBSTB6QyxFQUVLQyxFQUFRNzJDLFVBQVVDLE9BQVF3dEMsRUFBT3JzQyxNQUFNeTFDLEdBQVFDLEVBQVEsRUFBR0EsRUFBUUQsRUFBT0MsSUFDaEZySixFQUFLcUosR0FBUzkyQyxVQUFVODJDLEdBRzFCLElBQUlseEMsR0FBVWd4QyxFQUFRekcsRUFBS25HLEVBQXlCM29DLFVBQVUrYSxXQUFhalosT0FBT3dzQyxlQUFlM0YsRUFBeUIzb0MsV0FBWSxXQUFZekIsT0FBT2dELEtBQUsvQixNQUFNKzFDLEVBQU8sQ0FBQ2gzQyxNQUFNdUcsT0FBT3NuQyxJQUV6TCxPQURBcUksRUFBeUJsMkMsTUFDbEJnRyxDQUNULEdBT0QsQ0FDRHFLLElBQUssdUJBQ0wvTSxNQUNFLFdBQ0UsTUFBTSxJQUFJNkwsTUFBTSx3RUFDbEIsS0FNR2k3QixDQUNULENBMUUrQixDQTBFN0I0SixHQWtDRixTQUFTN0QsRUFBZTVqQyxFQUFNNmpDLEdBQzVCN3NDLE9BQU9DLGVBQWV3d0MsRUFBZXZ5QyxVQUFXOEssRUFBTSxDQUNwRDVHLElBQ0UsV0FDRSxNQUFNLElBQUl3SixNQUFNLGlEQUFtRFAsT0FBT3JDLEdBQVEsbUpBQXFKcUMsT0FBT3doQyxHQUFnQixXQUNoUSxFQUtGMXFDLFlBQVksRUFDWkQsY0FBYyxHQUVsQixDQTdDSXdpQyxFQUFPb0ksaUJBQ1Q5c0MsT0FBT0MsZUFBZXd3QyxFQUFldnlDLFVBQVd3bUMsRUFBT29JLGdCQUFpQixDQUN0RTVxQyxjQUFjLEVBQ2RuQyxNQUNFLFdBQ0UsSUFBSW9pQyxFQUVBNEssRUFBT3R3QyxLQUFLbXBDLG1CQUFtQmxCLEVBQU9vSSxtQkFDdEM5eEIsR0FBVSxFQUFJMmpCLEVBQXNCLFNBQUdsaUMsS0FBSzBvQyxJQUNoRCxPQUFtQnZDLEVBQVpULEVBQVEsQ0FBQyxFQUEwQnVDLEVBQU9vSSxpQkFBaUIsV0FDaEUsT0FBT3J3QyxJQUNULElBQUltbUMsRUFBZ0JULEVBQU8sUUFDekIsV0FDRSxJQUFJdHdCLEVBQU9rN0IsRUFBS2w3QixPQUNoQixPQUFJQSxFQUFLMmMsS0FDQSxDQUFFQSxNQUFNLEdBRVYsQ0FDTEEsTUFBTSxFQUNOenVCLE1BQU9pYixFQUFRK3JCLGNBQWNsMUIsRUFBSzlSLE9BRXRDLElBR0lvaUMsQ0FDUixJQXNCTnlLLEVBQWUsT0FBUSxtREFDdkJBLEVBQWUsUUFBUyxvREFDeEJBLEVBQWUsV0FBWSxJQUMzQkEsRUFBZSxVQUFXLElBQzFCQSxFQUFlLGtCQUFtQixJQUVsQ3Z3QyxFQUFBLFFBQXFCbzBDLCtCQ2w4RXJCendDLE9BQU9DLGVBQWU1RCxFQUFTLGFBQWMsQ0FDM0MwRCxPQUFPLElBRVQxRCxFQUFRdTNDLGFBQWV2M0MsRUFBUXl3QyxxQkFBa0JqckMsRUFFakQsSUFBSTI3QixFQUE0QixtQkFBWC9sQixRQUFvRCxpQkFBcEJBLE9BQU9DLFNBQXdCLFNBQVU1SSxHQUFPLGNBQWNBLENBQUssRUFBSSxTQUFVQSxHQUFPLE9BQU9BLEdBQXlCLG1CQUFYMkksUUFBeUIzSSxFQUFJcUssY0FBZ0IxQixRQUFVM0ksSUFBUTJJLE9BQU92WixVQUFZLGdCQUFrQjRRLENBQUssRUFFdlE0ekIsRUFBZ2IsU0FBVXBvQixFQUFLbFosR0FBSyxHQUFJbkQsTUFBTXdJLFFBQVE2VCxHQUFRLE9BQU9BLEVBQVksR0FBSTdDLE9BQU9DLFlBQVkxWCxPQUFPc2EsR0FBUSxPQUF4ZixTQUF1QkEsRUFBS2xaLEdBQUssSUFBSWdoQyxFQUFPLEdBQVFDLEdBQUssRUFBVTVmLEdBQUssRUFBVzZmLE9BQUt6Z0MsRUFBVyxJQUFNLElBQUssSUFBaUMwZ0MsRUFBN0I3aEMsRUFBSzRaLEVBQUk3QyxPQUFPQyxjQUFtQjJxQixHQUFNRSxFQUFLN2hDLEVBQUdtUixRQUFRMmMsUUFBb0I0VCxFQUFLcmhDLEtBQUt3aEMsRUFBR3hpQyxRQUFZcUIsR0FBS2doQyxFQUFLdGxDLFNBQVdzRSxHQUEzRGloQyxHQUFLLEdBQWtFLENBQUUsTUFBT0csR0FBTy9mLEdBQUssRUFBTTZmLEVBQUtFLENBQUssQ0FBRSxRQUFVLEtBQVdILEdBQU0zaEMsRUFBVyxRQUFHQSxFQUFXLFFBQUssQ0FBRSxRQUFVLEdBQUkraEIsRUFBSSxNQUFNNmYsQ0FBSSxDQUFFLENBQUUsT0FBT0YsQ0FBTSxDQUF1SEssQ0FBY25vQixFQUFLbFosR0FBYSxNQUFNLElBQUl4RSxVQUFVLHVEQUEyRCxFQUVqcEJQLEVBQVF3M0MsV0ErRlIsV0FDRSxJQUFJeHZDLEVBQVV4SCxVQUFVQyxPQUFTLFFBQXNCK0UsSUFBakJoRixVQUFVLEdBQW1CQSxVQUFVLEdBQUssQ0FBQyxFQUduRixPQURBa3VDLFFBQVFDLEtBQUsseUVBQ04sRUFBSXJNLEVBQXNCLFNBQUd0NkIsRUFDdEMsRUFuR0FoSSxFQUFRaXFDLFlBMkdSLFNBQXFCamlDLEdBQ25CLElBQUkyb0MsR0FBTyxFQUFJOEcsRUFBZTF4QyxPQUMxQjJ4QyxFQUFpQi9HLEVBQUtkLFNBQ3RCOEgsRUFBa0JoSCxFQUFLaUgsVUFDdkJDLEVBdEJOLFNBQWtDcGxDLEVBQUtqRSxHQUFRLElBQUlpSSxFQUFTLENBQUMsRUFBRyxJQUFLLElBQUkxUixLQUFLME4sRUFBV2pFLEVBQUs0QyxRQUFRck0sSUFBTSxHQUFrQnBCLE9BQU85QixVQUFVcUQsZUFBZTlCLEtBQUtxUCxFQUFLMU4sS0FBYzBSLEVBQU8xUixHQUFLME4sRUFBSTFOLElBQU0sT0FBTzBSLENBQVEsQ0FzQjVNcWhDLENBQXlCbkgsRUFBTSxDQUFDLFdBQVksY0FFekRvSCxFQUFxQkwsRUFBZ0JDLEdBRXJDLElBQUk5SCxFQUFXN25DLEVBQVE2bkMsU0FDbkIrSCxFQUFZNXZDLEVBQVE0dkMsVUFFeEJHLEVBQXFCbEksRUFBVStILEdBTS9CLElBQUlJLEVBQWdCSixHQUFhRCxHQUFtQkQsR0FBa0I3SCxRQUFZcnFDLEVBQzlFeXlDLEVBQWlCTCxHQUFhRCxRQUFtQm55QyxFQUNqRDB5QyxHQUFlLEVBQUk1UixFQUFrQixTQUFHLENBQUMsRUFBRzBSLEdBQWlCLENBQUVuSSxTQUFVbUksR0FBaUJDLEdBQWtCLENBQUVMLFVBQVdLLElBRTdILE9BQU8sRUFBSTNSLEVBQWtCLFNBQUcsQ0FBQyxFQUFHdVIsRUFBUTd2QyxFQUFTa3dDLEVBQ3ZELEVBaElBbDRDLEVBQVFxcUMsa0JBa0lSLFNBQTJCOE4sRUFBV3g1QixHQUVwQyxPQURBLEVBQUl5NUIsRUFBMkIsU0FBR3o1QixHQUM5QkEsRUFBUTByQixvQkFDRDFyQixFQUFRMHJCLGtCQUFrQjhOLEdBRVQsbUJBQWRBLENBQ2hCLEVBdklBbjRDLEVBQVE2ekMseUJBeUlSLFNBQWtDd0UsRUFBTTE1QixHQUN0QyxPQUFJQSxFQUFRazFCLDJCQUNEbDFCLEVBQVFrMUIseUJBQXlCd0UsS0FFbkNBLEdBQVExNUIsRUFBUXFrQixlQUFlcVYsSUFBOEIsbUJBQWRBLEVBQUs3d0MsSUFDL0QsRUE3SUF4SCxFQUFRc2pDLFlBQWNBLEVBQ3RCdGpDLEVBQVF5dUMsV0E2SlIsU0FBb0J6cUMsR0FDbEIsT0FBT0EsRUFBT0EsRUFBS3dELEtBQU8sSUFDNUIsRUE5SkF4SCxFQUFRczRDLFlBZ0tSLFNBQXFCdDBDLEVBQU13RCxHQUN6QixJQUFLQSxJQUFTeEQsRUFBTSxPQUFPLEVBRTNCLElBQUkyYSxHQUFVLEVBQUkyakIsRUFBc0IsV0FDeEMsT0FBSTNqQixFQUFRZ2tCLGtCQUNRaGtCLEVBQVFna0Isa0JBQWtCMytCLEtBQ3JCd0QsSUFHcEJ4RCxFQUFLd0QsT0FDZSxpQkFBZHhELEVBQUt3RCxLQUEwQnhELEVBQUt3RCxPQUFTQSxHQUMzQixtQkFBZHhELEVBQUt3RCxNQUFzQixFQUFJczZCLEVBQTZCLFNBQUc5OUIsRUFBS3dELFFBQVVBLEVBQU94RCxFQUFLd0QsS0FBSzdFLE9BQVM2RSxJQUFTeEQsRUFBS3dELEtBQUtvN0IsY0FBZ0JwN0IsRUFDNUosRUEzS0F4SCxFQUFRK3JDLFlBQWNBLEVBQ3RCL3JDLEVBQVE0ckMsVUFBWUEsRUFDcEI1ckMsRUFBUTJyQyx5QkF1UVIsU0FBa0NqeUIsRUFBTzFWLEVBQU11MEMsR0FDN0MsSUFBSXhxQyxHQUFXLEVBQUlzMEIsRUFBY2UsZ0JBQWdCcC9CLEdBSWpELE9BQU8rSixFQUFTdkosTUFIRixTQUFpQnFHLEVBQUc5RixHQUNoQyxPQUtKLFNBQXFCMlUsRUFBTzgrQixFQUFNQyxHQUNoQyxPQUFPRCxFQUFLLzNDLFNBQVdnNEMsRUFBTWg0QyxRQUFVKzNDLEVBQUszMEIsT0FBTSxTQUFVM2EsRUFBSW5FLEdBQzlELE9BQU8yVSxFQUFNeFEsRUFBSXV2QyxFQUFNMXpDLEdBQ3pCLEdBQ0YsQ0FUVzJ6QyxDQUFZaC9CLEVBQU8zTCxFQUFTckgsTUFBTTNCLEVBQUdBLEVBQUl3ekMsRUFBUzkzQyxRQUFTODNDLEVBQ3BFLEdBRUYsRUE1UUF2NEMsRUFBUTI0QywwQkFBNEJBLEVBQ3BDMzRDLEVBQVFpMkMsb0JBb1VSLFNBQTZCMkMsRUFBS2o2QixHQUNoQyxPQUFPQSxFQUFRcWtCLGVBQWU0VixJQUFRQyxFQUFjRCxJQUFRaDNDLE1BQU13SSxRQUFRd3VDLEVBQzVFLEVBclVBNTRDLEVBQVFvMUMsb0JBd1VSLFNBQTZCLzhCLEdBSTNCLElBQUl5Z0MsR0FBVSxPQUNpQixJQUFwQixFQUFBaFAsRUFBT0UsV0FDaEI4TyxHQUFVLEVBQ1YsRUFBQWhQLEVBQU9FLFNBQVcsQ0FBQyxHQUVyQjN4QixJQUNJeWdDLElBR0YsRUFBQWhQLEVBQU9FLGNBQVd4a0MsU0FDWCxFQUFBc2tDLEVBQU9FLFNBRWxCLEVBdlZBaHFDLEVBQVErNEMsSUF5VlIsU0FBYUMsR0FDWCxJQUFJQyxFQUFjRCxFQUFJdHlDLFFBQVFtVCxVQUM5QixPQUFPLFNBQVVnRyxHQUNmLE9BQU9vNUIsRUFBWXAxQixPQUFNLFNBQVV4TCxHQUNqQyxPQUFPQSxFQUFHd0gsRUFDWixHQUNGLENBQ0YsRUEvVkE3ZixFQUFRMmlDLGtCQWlXUixTQUEyQjMrQixHQUN6QixJQUFLQSxFQUFNLE9BQU8sS0FFbEIsSUFBSXdELEVBQU94RCxFQUFLd0QsS0FHaEIsT0FBS0EsRUFFRUEsRUFBS283QixjQUFnQyxtQkFBVHA3QixHQUFzQixFQUFJczZCLEVBQTZCLFNBQUd0NkIsR0FBUUEsRUFBSzdFLE1BQVE2RSxHQUZoRyxJQUdwQixFQXpXQXhILEVBQVF5b0MsSUEyV1IsU0FBYTNqQyxHQUNYLE1BQXlCLG1CQUFYc1csT0FBd0JBLE9BQVksSUFBRSxVQUFZcE0sT0FBT2xLLElBQU1BLENBQy9FLEVBNVdBOUUsRUFBUTJwQyxXQThXUixTQUFvQmwzQixFQUFLOUYsRUFBTWpKLEdBQzdCQyxPQUFPQyxlQUFlNk8sRUFBSzlGLEVBQU0sQ0FDL0JqSixNQUFPQSxFQUNQb0MsWUFBWSxFQUNaRixVQUFVLEdBRWQsRUFuWEE1RixFQUFRcXJDLGFBcVhSLFNBQXNCMXNCLEVBQVN6VixFQUFJd21CLEdBQ2pDLE9BQU8vUSxFQUFRdTZCLGNBQWNod0MsRUFBRzFCLE1BQU0sRUFBSTgrQixFQUFrQixTQUFHLENBQUMsRUFBR3A5QixFQUFHd21CLE1BQU9BLEdBQy9FLEVBdFhBMXZCLEVBQVF1ekMsVUF3WFIsU0FBbUI3MUIsRUFBVTRtQixHQUMzQixJQUFJNlUsRUFBVTM0QyxVQUFVQyxPQUFTLFFBQXNCK0UsSUFBakJoRixVQUFVLEdBQW1CQSxVQUFVLEdBQUssV0FBYSxFQUUzRjQ0QyxPQUFrQixFQUNsQkMsRUFBaUIzN0IsRUFBUzRtQixHQUMxQnQzQixHQUFTLEVBQUlvMUIsRUFBZSxTQUFHMWtCLEVBQVU0bUIsR0FDekNMLE9BQWEsRUFxQmpCLE9BcEJJajNCLElBQ0ZpM0IsRUFBYXRnQyxPQUFPK0IseUJBQXlCZ1ksRUFBVTRtQixJQUV6RDNnQyxPQUFPQyxlQUFlOFosRUFBVTRtQixFQUFZLENBQzFDeitCLGNBQWMsRUFDZEMsWUFBYW0rQixLQUFnQkEsRUFBV24rQixXQUN4Q3BDLE1BQU95MUMsRUFBUUUsSUFDYixXQUNFLElBQUssSUFBSXJMLEVBQU94dEMsVUFBVUMsT0FBUXd0QyxFQUFPcnNDLE1BQU1vc0MsR0FBT0UsRUFBTyxFQUFHQSxFQUFPRixFQUFNRSxJQUMzRUQsRUFBS0MsR0FBUTF0QyxVQUFVMHRDLEdBR3pCLElBQUk5bkMsRUFBU2l6QyxFQUFlaDRDLE1BQU1qQixLQUFNNnRDLEdBRXhDLE9BREFtTCxFQUFrQmh6QyxFQUNYQSxDQUNULElBS0csQ0FDTDBzQyxRQUNFLFdBQ005bEMsRUFDRWkzQixFQUNGdGdDLE9BQU9DLGVBQWU4WixFQUFVNG1CLEVBQVlMLEdBRzVDdm1CLEVBQVM0bUIsR0FBYytVLFNBS2xCMzdCLEVBQVM0bUIsRUFHcEIsRUFJRnVPLG1CQUNFLFdBQ0UsT0FBT3VHLENBQ1QsRUFLTixFQTdhQSxJQUFJRSxFQUFzQixFQUFRLE1BRWxDMzFDLE9BQU9DLGVBQWU1RCxFQUFTLGVBQS9CLENBQ0U4RixZQUFZLEVBQ1pDLElBQ0UsV0FDRSxPQUFPdzdCLEVBQXVCK1gsR0FBOEIsT0FDOUQsSUFLSnQ1QyxFQUFRazJDLGFBQWVBLEVBQ3ZCbDJDLEVBQVF1c0MsYUFzYVIsU0FBU0EsRUFBYTV5QixHQUNwQixRQUFJdThCLEVBQWF2OEIsSUFJVixHQUFHaFQsT0FBT2dULEdBQU9rSyxPQUFNLFNBQVU3ZSxHQUN0QyxHQUFJQSxFQUFHLENBQ0wsSUFBSXFnQyxFQUFXcmdDLEVBQUVxZ0MsU0FFakIsT0FBTzZRLEVBQWE3USxJQUFha0gsRUFBYWxILEVBQ2hELENBRUEsT0FBTzZRLEVBQWFseEMsRUFDdEIsR0FDRixFQW5iQWhGLEVBQVF5c0MsZ0JBcWJSLFNBQXlCajhCLEdBQ3ZCLE9BQUtBLEdBSUEsRUFBSStvQyxFQUFPcmpDLFFBQVExRixHQUtqQmdwQyxFQUFtQixRQUFFNzlCLEtBQUssR0FBMUI2OUIsQ0FBOEJocEMsR0FINUJncEMsRUFBbUIsUUFBRTc5QixLQUFLbkwsRUFBTSxNQUFNLEdBQU9uSCxPQUw3Q213QyxFQUFtQixRQUFFbndDLE1BU2hDLEVBOWJBLElBRUlpOUIsRUFBVy9FLEVBRkQsRUFBUSxPQU1sQk0sRUFBV04sRUFGRCxFQUFRLE9BTWxCa1ksRUFBYWxZLEVBRkQsRUFBUSxPQU1wQm9FLEVBQVdwRSxFQUZBLEVBQVEsT0FNbkJPLEVBQXNCUCxFQUZELEVBQVEsT0FNN0JhLEVBQVFiLEVBRkQsRUFBUSxPQU1mOEYsRUFBbUI5RixFQUZELEVBQVEsT0FNMUJtWSxFQUFvQm5ZLEVBRkQsRUFBUSxNQU0zQmlZLEVBQVlqWSxFQUZELEVBQVEsT0FJbkJnWSxFQUFTLEVBQVEsTUFFakI5QixFQUFpQixFQUFRLEtBRXpCcFYsRUFBZ0IsRUFBUSxNQUl4QkMsRUFBZWYsRUFGRCxFQUFRLE9BTXRCNlcsRUFBb0I3VyxFQUZELEVBQVEsT0FJL0IsU0FBU0EsRUFBdUI5dUIsR0FBTyxPQUFPQSxHQUFPQSxFQUFJOU0sV0FBYThNLEVBQU0sQ0FBRSxRQUFXQSxFQUFPLENBRWhHLFNBQVM4ekIsRUFBZ0I5ekIsRUFBS2hDLEVBQUsvTSxHQUFpSyxPQUFwSitNLEtBQU9nQyxFQUFPOU8sT0FBT0MsZUFBZTZPLEVBQUtoQyxFQUFLLENBQUUvTSxNQUFPQSxFQUFPb0MsWUFBWSxFQUFNRCxjQUFjLEVBQU1ELFVBQVUsSUFBa0I2TSxFQUFJaEMsR0FBTy9NLEVBQWdCK08sQ0FBSyxDQWNoTixTQUFTc2xDLEVBQXFCbEksRUFBVStILEdBQ3RDLEdBQUkvSCxHQUFZK0gsR0FBYS9ILElBQWErSCxFQUN4QyxNQUFNLElBQUlyM0MsVUFBVSw4R0FFeEIsQ0F5Q0EsU0FBUytpQyxFQUFZdC9CLEdBQ25CLE9BQU8sRUFBSTJoQyxFQUFrQixTQUFHM2hDLEdBQVFBLEVBQUswckIsT0FBUyxDQUFDLEdBQUc1dEIsUUFBTyxTQUFVK2pDLEdBSXpFLFlBQXdCLElBSFpRLEVBQWVSLEVBQU0sR0FDZixFQUdwQixJQUFHNzVCLFFBQU8sU0FBVTQ1QixFQUFLc0MsR0FDdkIsSUFBSXJCLEVBQVFSLEVBQWU2QixFQUFPLEdBQzlCejNCLEVBQU1vMkIsRUFBTSxHQUNabmpDLEVBQVFtakMsRUFBTSxHQUVsQixPQUFPLEVBQUlQLEVBQWtCLFNBQUdWLEVBQUtXLEVBQWdCLENBQUMsRUFBRzkxQixFQUFLL00sR0FDaEUsR0FBRyxDQUFDLEVBQ04sQ0FvQkEsU0FBU2kyQyxFQUF3QjF0QyxFQUFHQyxFQUFHMHRDLEVBQVNDLEdBQzlDLElBQUlDLEVBQWNELEVBQVU5TixFQUFjSCxFQUUxQyxHQUFJMy9CLElBQU1DLEVBQUcsT0FBTyxFQUNwQixJQUFLdEssTUFBTXdJLFFBQVE2QixLQUFPckssTUFBTXdJLFFBQVE4QixHQUN0QyxPQUFPNHRDLEVBQVk3dEMsRUFBR0MsRUFBRzB0QyxHQUUzQixJQUFJRyxHQUFRLEVBQUkxUyxFQUEwQixTQUFHcDdCLEVBQUdqQyxLQUM1Q2d3QyxHQUFRLEVBQUkzUyxFQUEwQixTQUFHbjdCLEVBQUdsQyxLQUNoRCxHQUFJK3ZDLEVBQU10NUMsU0FBV3U1QyxFQUFNdjVDLE9BQVEsT0FBTyxFQUMxQyxHQUFxQixJQUFqQnM1QyxFQUFNdDVDLFFBQWlDLElBQWpCdTVDLEVBQU12NUMsT0FBYyxPQUFPLEVBQ3JELElBQUssSUFBSXNFLEVBQUksRUFBR0EsRUFBSWcxQyxFQUFNdDVDLE9BQVFzRSxHQUFLLEVBQ3JDLElBQUsrMEMsRUFBWUMsRUFBTWgxQyxHQUFJaTFDLEVBQU1qMUMsR0FBSTYwQyxHQUFVLE9BQU8sRUFFeEQsT0FBTyxDQUNULENBRUEsU0FBU0ssRUFBY2h1QyxFQUFHQyxFQUFHMHRDLEdBQzNCLE9BQU9ELEVBQXdCMXRDLEVBQUdDLEVBQUcwdEMsR0FBUyxFQUNoRCxDQUVBLFNBQVNNLEVBQWNqdUMsRUFBR0MsRUFBRzB0QyxHQUMzQixPQUFPRCxFQUF3QjF0QyxFQUFHQyxFQUFHMHRDLEdBQVMsRUFDaEQsQ0FFQSxTQUFTTyxFQUFxQnZVLEVBQUt3VSxHQUNqQyxJQUFJQyxFQUFRaFUsRUFBZStULEVBQU8sR0FDOUIzcEMsRUFBTTRwQyxFQUFNLEdBQ1ozMkMsRUFBUTIyQyxFQUFNLEdBRWRDLEVBQW9CLE1BQVQ1MkMsRUFBZ0IsQ0FBQyxFQUFJNmlDLEVBQWdCLENBQUMsRUFBRzkxQixFQUFLL00sR0FDN0QsT0FBTyxFQUFJNGlDLEVBQWtCLFNBQUcsQ0FBQyxFQUFHVixFQUFLMFUsRUFDM0MsQ0FFQSxTQUFTQyxFQUFvQnR1QyxFQUFHQyxFQUFHMHRDLEVBQVNDLEdBQzFDLEdBQUk1dEMsSUFBTUMsRUFBRyxPQUFPLEVBQ3BCLElBQUtELElBQU1DLEVBQUcsT0FBTyxFQUNyQixHQUFJRCxFQUFFekUsT0FBUzBFLEVBQUUxRSxLQUFNLE9BQU8sRUFFOUIsSUFBSWd4QyxFQUFPbFYsRUFBWXIzQixHQUNuQndzQyxFQUFRblYsRUFBWXAzQixHQUNwQjJ0QyxJQUNGckIsR0FBTyxFQUFJN1MsRUFBa0IsU0FBRzZTLEdBQU14c0MsT0FBT211QyxFQUFzQixDQUFDLEdBQ3BFMUIsR0FBUSxFQUFJOVMsRUFBa0IsU0FBRzhTLEdBQU96c0MsT0FBT211QyxFQUFzQixDQUFDLElBSXhFLElBREEsSUFBSUssRUFBVzcyQyxPQUFPNkssS0FBS2dxQyxHQUNsQnp6QyxFQUFJLEVBQUdBLEVBQUl5MUMsRUFBUy81QyxPQUFRc0UsR0FBSyxFQUFHLENBQzNDLElBQUk0SCxFQUFPNnRDLEVBQVN6MUMsR0FFcEIsR0FBYSxhQUFUNEgsT0FFRyxNQUFNQSxLQUFROHJDLEdBQ25CLE9BQU8sRUFDRixHQUFJQSxFQUFNOXJDLEtBQVU2ckMsRUFBSzdyQyxRQUV6QixJQUFJdzBCLEVBQVFzWCxFQUFNOXJDLE1BQVd3MEIsRUFBUXFYLEVBQUs3ckMsS0FBa0MsV0FBeEJ3MEIsRUFBUXFYLEVBQUs3ckMsSUFHdEUsT0FBTyxFQUZQLEtBQUssRUFBSWsxQixFQUFrQixTQUFHMlcsRUFBSzdyQyxHQUFPOHJDLEVBQU05ckMsSUFBUSxPQUFPLENBR2pFLEVBQ0YsQ0FFQSxJQUFJOHRDLEVBQWtCLGFBQWNqQyxFQUNoQ2tDLEVBQW1CLGFBQWNqQyxFQUVyQyxJQUFJZ0MsR0FBbUJDLE1BREpiLEVBQVVJLEVBQWdCQyxHQUV6QnZCLEVBQTBCSCxFQUFLenFDLFNBQVU4ckMsR0FBVWxCLEVBQTBCRixFQUFNMXFDLFNBQVU4ckMsR0FBVUQsR0FDdkgsT0FBTyxFQUlYLElBQUtmLEVBQWM1c0MsR0FBSSxDQUNyQixJQUFJMHVDLEVBQVloM0MsT0FBTzZLLEtBQUtpcUMsR0FDNUIsT0FBT21CLEVBQVFZLEVBQVMvNUMsT0FBU2c2QyxFQUFpQkUsRUFBVWw2QyxPQUFTaTZDLEVBQ3ZFLENBRUEsT0FBTyxDQUNULENBRUEsU0FBUzNPLEVBQVk5L0IsRUFBR0MsR0FHdEIsT0FBT3F1QyxFQUFvQnR1QyxFQUFHQyxFQUZoQjFMLFVBQVVDLE9BQVMsUUFBc0IrRSxJQUFqQmhGLFVBQVUsR0FBbUJBLFVBQVUsR0FBS2k1QyxFQUFvQixTQUU1RCxFQUM1QyxDQUVBLFNBQVM3TixFQUFVMy9CLEVBQUdDLEdBR3BCLE9BQU9xdUMsRUFBb0J0dUMsRUFBR0MsRUFGaEIxTCxVQUFVQyxPQUFTLFFBQXNCK0UsSUFBakJoRixVQUFVLEdBQW1CQSxVQUFVLEdBQUtpNUMsRUFBb0IsU0FFNUQsRUFDNUMsQ0FnQ0EsU0FBU2QsRUFBMEJpQyxHQU1qQyxJQUxBLElBakJ1QjdzQyxFQUNuQjNILEVBRUExQixFQWNBbTFDLEVBQVVyNUMsVUFBVUMsT0FBUyxRQUFzQitFLElBQWpCaEYsVUFBVSxJQUFtQkEsVUFBVSxHQUV6RXE2QyxHQW5CbUI5c0MsRUFtQmE2c0MsRUFsQmhDeDBDLEVBQVMsR0FFVDFCLEVBQU8sU0FBY3dFLEdBQ1osT0FBUEEsSUFBc0IsSUFBUEEsUUFBOEIsSUFBUEEsR0FDMUM5QyxFQUFPMUIsS0FBS3dFLEVBQ2QsRUFFSXRILE1BQU13SSxRQUFRMkQsR0FDaEJBLEVBQVM5RSxRQUFRdkUsR0FFakJBLEVBQUtxSixHQUVBM0gsR0FPSDAwQyxFQUFrQixHQUViLzFDLEVBQUksRUFBR0EsRUFBSTgxQyxFQUFjcDZDLE9BQVFzRSxHQUFLLEVBQUcsQ0FDaEQsSUFBSXNSLEVBQVF3a0MsRUFBYzkxQyxHQUN0QmcyQyxFQUFnQkQsRUFBZ0J4dEIsV0FFUCxJQUFsQnl0QixFQUNURCxFQUFnQnAyQyxLQUFLMlIsR0FDWndpQyxFQUFjeGlDLElBQVV3aUMsRUFBY2tDLEdBQy9DRCxFQUFnQnAyQyxLQUFLcTJDLEVBQWdCMWtDLElBRXJDeWtDLEVBQWdCcDJDLEtBQUtxMkMsR0FDckJELEVBQWdCcDJDLEtBQUsyUixHQUV6QixDQUVBLE9BQUl3akMsRUFDS2lCLEVBQWdCaHZDLEtBQUksU0FBVStULEdBQ25DLE1BQW9CLGlCQUFOQSxHQUFpQixFQUFJNjVCLEVBQTJCLFNBQUc3NUIsR0FBS0EsQ0FDeEUsSUFHS2k3QixDQUNULENBRUEsU0FBU2pDLEVBQWM3MEMsR0FDckIsTUFBdUIsaUJBQVRBLEdBQXFDLGlCQUFUQSxDQUM1QyxDQXNIQSxTQUFTa3lDLEVBQWE4RSxHQUNwQixPQUF5QixPQUFsQkEsSUFBNEMsSUFBbEJBLENBQ25DLENBeFdzQmg3QyxFQUFReXdDLGdCQUFvQyxtQkFBWHIxQixRQUF5QkEsT0FBT0MscUNDdEd2RjFYLE9BQU9DLGVBQWU1RCxFQUFTLGFBQWMsQ0FDM0MwRCxPQUFPLElBRVQxRCxFQUFRK0YsSUFnQlIsV0FDRSxPQUFPLEVBQUl1Z0MsRUFBa0IsU0FBRyxDQUFDLEVBQUcyVSxFQUN0QyxFQWpCQWo3QyxFQUFReWIsTUFBUUEsRUFDaEJ6YixFQUFRMm5CLE1BeUJSLFdBR0VzekIsRUFBZ0IsQ0FBQyxFQUNqQngvQixFQUh3QmpiLFVBQVVDLE9BQVMsUUFBc0IrRSxJQUFqQmhGLFVBQVUsR0FBbUJBLFVBQVUsR0FBSyxDQUFDLEVBSS9GLEVBNUJBLElBRUk4bEMsRUFBVy9FLEVBRkQsRUFBUSxPQU1sQjZXLEVBQW9CN1csRUFGRCxFQUFRLE9BSS9CLFNBQVNBLEVBQXVCOXVCLEdBQU8sT0FBT0EsR0FBT0EsRUFBSTlNLFdBQWE4TSxFQUFNLENBQUUsUUFBV0EsRUFBTyxDQUVoRyxJQUFJd29DLEVBQWdCLENBQUMsRUFNckIsU0FBU3gvQixFQUFNeS9CLEdBQ1RBLEVBQU12OEIsVUFDUixFQUFJeTVCLEVBQTJCLFNBQUc4QyxFQUFNdjhCLFVBRTFDLEVBQUkybkIsRUFBa0IsU0FBRzJVLEVBQWVDLEVBQzFDLCtCQzVCQXYzQyxPQUFPQyxlQUFlNUQsRUFBUyxhQUFjLENBQzNDMEQsT0FBTyxJQUVUMUQsRUFBQSxRQVVBLFdBQ0UsSUFBSWdJLEVBQVV4SCxVQUFVQyxPQUFTLFFBQXNCK0UsSUFBakJoRixVQUFVLEdBQW1CQSxVQUFVLEdBQUssQ0FBQyxFQUVuRixHQUFJd0gsRUFBUTJXLFFBRVYsT0FEQSxFQUFJeTVCLEVBQTJCLFNBQUdwd0MsRUFBUTJXLFNBQ25DM1csRUFBUTJXLFFBR2pCLElBQ0lBLEdBRE8sRUFBSTg0QixFQUFlMXhDLE9BQ1g0WSxRQUduQixPQURBLEVBQUl5NUIsRUFBMkIsU0FBR3o1QixHQUMzQkEsQ0FDVCxFQXJCQSxJQU1nQ2xNLEVBSjVCMmxDLEdBSTRCM2xDLEVBTlQsRUFBUSxRQU1zQkEsRUFBSTlNLFdBQWE4TSxFQUFNLENBQUUsUUFBV0EsR0FGckZnbEMsRUFBaUIsRUFBUSxrQ0NUN0IsSUFFSTBELEVBQWlCNVosRUFGRCxFQUFRLE9BTXhCNlosRUFBbUI3WixFQUZELEVBQVEsT0FNMUI4WixFQUFrQjlaLEVBRkQsRUFBUSxPQU16QitaLEVBQVUvWixFQUZELEVBQVEsT0FNakJnYSxFQUFZaGEsRUFGRCxFQUFRLE1BTW5CaWEsRUFBV2phLEVBRkQsRUFBUSxPQUlsQmtXLEVBQWlCLEVBQVEsS0FFN0IsU0FBU2xXLEVBQXVCOXVCLEdBQU8sT0FBT0EsR0FBT0EsRUFBSTlNLFdBQWE4TSxFQUFNLENBQUUsUUFBV0EsRUFBTyxDQUVoRzFTLEVBQU9DLFFBQVUsQ0FDZmlkLE9BQVF1K0IsRUFBa0IsUUFDMUJDLFFBQVNGLEVBQW1CLFFBQzVCRyxNQUFPSixFQUFpQixRQUN4QmxILGVBQWdCZ0gsRUFBMEIsUUFDMUN4UixhQUFjdVIsRUFBd0IsUUFDdENRLFVBQVdsRSxFQUFlaDhCLE1BQzFCK29CLGNBQWU2VyxFQUF5QixzQ0NuQzFDMTNDLE9BQU9DLGVBQWU1RCxFQUFTLGFBQWMsQ0FDM0MwRCxPQUFPLElBRVQxRCxFQUFBLFFBY0EsU0FBZWdFLEVBQU1nRSxHQUNuQixPQUFPLElBQUltekMsRUFBd0IsUUFBRW4zQyxFQUFNLEtBQU1nRSxFQUNuRCxFQWRBLElBSWdDeUssRUFGNUIwb0MsR0FFNEIxb0MsRUFKWixFQUFRLFFBSXlCQSxFQUFJOU0sV0FBYThNLEVBQU0sQ0FBRSxRQUFXQSxnQ0NUekY5TyxPQUFPQyxlQUFlNUQsRUFBUyxhQUFjLENBQzNDMEQsT0FBTyxJQUVUMUQsRUFBQSxRQTRCQSxTQUFnQmdFLEdBQ2QsSUFBSWdFLEVBQVV4SCxVQUFVQyxPQUFTLFFBQXNCK0UsSUFBakJoRixVQUFVLEdBQW1CQSxVQUFVLEdBQUssQ0FBQyxFQUkvRWdRLEdBRlUsRUFBSTh4QixFQUFzQixTQUFHdDZCLEdBQ3BCbWlDLGdCQUFlLEVBQUk3RCxFQUFrQixTQUFHLENBQUVuSSxLQUFNLFVBQVluMkIsSUFDL0RpVixPQUFPalosRUFBTWdFLEVBQVF1QixTQUN6QyxPQUFPLEVBQUk4K0IsRUFBT29FLGlCQUFpQmo4QixFQUNyQyxFQWpDQSxJQUVJODFCLEVBQVcvRSxFQUZELEVBQVEsT0FNbEJlLEVBQWVmLEVBRkQsRUFBUSxPQUl0QjhHLEVBQVMsRUFBUSxNQUVyQixTQUFTOUcsRUFBdUI5dUIsR0FBTyxPQUFPQSxHQUFPQSxFQUFJOU0sV0FBYThNLEVBQU0sQ0FBRSxRQUFXQSxFQUFPLDhCQ2ZoRzlPLE9BQU9DLGVBQWU1RCxFQUFTLGFBQWMsQ0FDM0MwRCxPQUFPLElBR1QsSUFBSXk5QixFQUE0QixtQkFBWC9sQixRQUFvRCxpQkFBcEJBLE9BQU9DLFNBQXdCLFNBQVU1SSxHQUFPLGNBQWNBLENBQUssRUFBSSxTQUFVQSxHQUFPLE9BQU9BLEdBQXlCLG1CQUFYMkksUUFBeUIzSSxFQUFJcUssY0FBZ0IxQixRQUFVM0ksSUFBUTJJLE9BQU92WixVQUFZLGdCQUFrQjRRLENBQUssRUFFdlE0ekIsRUFBZ2IsU0FBVXBvQixFQUFLbFosR0FBSyxHQUFJbkQsTUFBTXdJLFFBQVE2VCxHQUFRLE9BQU9BLEVBQVksR0FBSTdDLE9BQU9DLFlBQVkxWCxPQUFPc2EsR0FBUSxPQUF4ZixTQUF1QkEsRUFBS2xaLEdBQUssSUFBSWdoQyxFQUFPLEdBQVFDLEdBQUssRUFBVTVmLEdBQUssRUFBVzZmLE9BQUt6Z0MsRUFBVyxJQUFNLElBQUssSUFBaUMwZ0MsRUFBN0I3aEMsRUFBSzRaLEVBQUk3QyxPQUFPQyxjQUFtQjJxQixHQUFNRSxFQUFLN2hDLEVBQUdtUixRQUFRMmMsUUFBb0I0VCxFQUFLcmhDLEtBQUt3aEMsRUFBR3hpQyxRQUFZcUIsR0FBS2doQyxFQUFLdGxDLFNBQVdzRSxHQUEzRGloQyxHQUFLLEdBQWtFLENBQUUsTUFBT0csR0FBTy9mLEdBQUssRUFBTTZmLEVBQUtFLENBQUssQ0FBRSxRQUFVLEtBQVdILEdBQU0zaEMsRUFBVyxRQUFHQSxFQUFXLFFBQUssQ0FBRSxRQUFVLEdBQUkraEIsRUFBSSxNQUFNNmYsQ0FBSSxDQUFFLENBQUUsT0FBT0YsQ0FBTSxDQUF1SEssQ0FBY25vQixFQUFLbFosR0FBYSxNQUFNLElBQUl4RSxVQUFVLHVEQUEyRCxFQUVqcEJQLEVBQVFzc0MsZUFBaUJBLEVBQ3pCdHNDLEVBQVE0N0MscUJBQXVCQSxFQUMvQjU3QyxFQUFRcXNDLHNCQW9mUixTQUErQjluQyxFQUFVczNDLEdBQ3ZDLElBQUlod0MsRUFBVWd3QyxFQUFNL3ZDLEtBQUksU0FBVTlHLEdBQ2hDLE9BQU80MkMsRUFBcUJyM0MsRUFBVVMsRUFDeEMsSUFDQSxPQUFPODJDLEdBQU8sRUFBSXpVLEVBQTBCLFNBQUd4N0IsRUFBUyxHQUMxRCxFQXZmQSxJQUFJa3dDLEVBQXFCLEVBQVEsTUFJN0J6VixFQUFXL0UsRUFGRCxFQUFRLE9BTWxCOEYsRUFBbUI5RixFQUZELEVBQVEsT0FNMUJrWSxFQUFhbFksRUFGRCxFQUFRLE9BTXBCYSxFQUFRYixFQUZELEVBQVEsT0FNZnlhLEVBQWtCemEsRUFGRCxFQUFRLE9BSXpCYyxFQUFnQixFQUFRLE1BRXhCZ0csRUFBUyxFQUFRLE1BSWpCL0YsRUFBZWYsRUFGRCxFQUFRLE9BSTFCLFNBQVNBLEVBQXVCOXVCLEdBQU8sT0FBT0EsR0FBT0EsRUFBSTlNLFdBQWE4TSxFQUFNLENBQUUsUUFBV0EsRUFBTyxDQUtoRyxJQUFJeUwsR0FBUyxFQUFJNjlCLEVBQW1CRSxnQkFHaENDLEVBQVEsa0JBQ1JDLEVBQW1CLDRCQUNuQkMsRUFBa0IsMkJBQ2xCQyxFQUFhLHVCQUdiQyxFQUFXLFdBQ1hDLEVBQWdCLGVBQ2hCQyxFQUFpQixnQkFDakJDLEVBQWMsYUFDZGwxQyxFQUFxQixvQkFDckJtMUMsRUFBcUIsNEJBQ3JCQyxFQUFrQix5QkFFbEJDLEVBQWUsc0JBQ2ZDLEVBQWlCLHdCQUVqQkMsRUFBMkIsSUFDM0JDLEVBQStCLEtBQy9CQyxFQUFnQyxLQUNoQ0MsRUFBNEIsS0FDNUJDLEVBQTRCLEtBQzVCQyxFQUErQixLQUVuQyxTQUFTckIsRUFBTzc5QixHQUNkLE1BQU8sR0FBR3RYLE9BL0JaLFNBQTRCc1gsR0FBTyxHQUFJcmMsTUFBTXdJLFFBQVE2VCxHQUFNLENBQUUsSUFBSyxJQUFJbFosRUFBSSxFQUFHeWEsRUFBTzVkLE1BQU1xYyxFQUFJeGQsUUFBU3NFLEVBQUlrWixFQUFJeGQsT0FBUXNFLElBQU95YSxFQUFLemEsR0FBS2taLEVBQUlsWixHQUFNLE9BQU95YSxDQUFNLENBQVMsT0FBTzVkLE1BQU0wRSxLQUFLMlgsRUFBUSxDQStCL0txcEIsQ0FBbUIsSUFBSTMrQixJQUFJc1YsSUFDOUMsQ0FRQSxTQUFTbS9CLEVBQWEva0MsRUFBSXNCLEdBQ3hCLE9BQU9taUMsRUFBT25pQyxFQUFNM04sT0FBT3FNLEVBQUksSUFDakMsQ0FPQSxTQUFTZ2xDLEVBQXFCOTRDLEdBQzVCLElBQ0UsT0FBTzJaLEVBQU9oVyxNQUFNM0QsRUFDdEIsQ0FBRSxNQUFPNGhDLEdBQ1AsTUFBTSxJQUFJNTJCLE1BQU0sNkJBQStCUCxPQUFPekssR0FDeEQsQ0FDRixDQStIQSxTQUFTKzRDLEVBQWlCdDVDLEVBQU15ZixFQUFPcGEsR0FDckMsR0FBYSxPQUFUckYsR0FBaUMsaUJBQVRBLEVBQzFCLE9BQU8sRUFFVCxPQUFReWYsRUFBTWpjLE1BS1osS0FBS0QsRUFDSCxPQUFPLEVBS1QsS0FBS2kxQyxFQUNILE9BQU8sRUFBSW5hLEVBQWMwQyxjQUFjL2dDLEVBQU15ZixFQUFNOWdCLE1BS3JELEtBQUs0NUMsRUFDSCxPQUFPLEVBQUlsVSxFQUFPaVEsYUFBYXQwQyxFQUFNeWYsRUFBTTlnQixNQUs3QyxLQUFLODVDLEVBQ0gsT0FBTyxFQUFJcGEsRUFBY21ELFdBQVd4aEMsRUFBTXlmLEVBQU05Z0IsTUFNbEQsS0FBSys1QyxFQU9MLEtBQUtDLEVBQ0gsT0F2S04sU0FBZ0MzNEMsRUFBTXlmLEdBQ3BDLElBQUk4NUIsRUFBVzk1QixFQUFNODVCLFNBQ2pCNzVDLEVBQVErZixFQUFNL2YsTUFDZGYsRUFBTzhnQixFQUFNOWdCLEtBRWI2NkMsR0FBWSxFQUFJblYsRUFBTy9FLGFBQWF0L0IsR0FDcENpZ0MsRUFBYXRnQyxPQUFPK0IseUJBQXlCODNDLEVBQVc3NkMsR0FDNUQsR0FBSXNoQyxHQUFjQSxFQUFXbCtCLElBQzNCLE9BQU8sRUFFVCxJQUFJMDNDLEVBQWdCRCxFQUFVNzZDLEdBQzlCLFFBQTZCLElBQWxCODZDLEVBQ1QsT0FBTyxFQUVULEdBQUloNkIsRUFBTWpjLE9BQVNrMUMsRUFDakIsT0FBTyxFQUFJdGEsRUFBZSxTQUFHb2IsRUFBVy81QixFQUFNOWdCLE1BR2hELElBQTZCLGlCQUFsQjg2QyxHQUErQyxpQkFBVi81QyxJQUMxQzY1QyxJQUFhVCxFQUNmLE9BQU8sRUFHWCxPQUFRUyxHQU1OLEtBQUtULEVBQ0gsT0FBTyxFQUFJckQsRUFBb0IsU0FBR2dFLEVBQWUvNUMsR0FPbkQsS0FBS3E1QyxFQUNILE9BQW9ELElBQTdDVSxFQUFjbnVDLE1BQU0sS0FBSzhCLFFBQVExTixHQU8xQyxLQUFLczVDLEVBQ0gsT0FBT1MsSUFBa0IvNUMsR0FBUys1QyxFQUFjL3VDLFdBQVdNLE9BQU90TCxHQUFTLEtBTzdFLEtBQUt1NUMsRUFDSCxNQUFpQixLQUFWdjVDLEdBQXVCKzVDLEVBQWMvMkMsTUFBTSxFQUFHaEQsRUFBTWpELFVBQVlpRCxFQU96RSxLQUFLdzVDLEVBQ0gsTUFBaUIsS0FBVng1QyxHQUF1Qis1QyxFQUFjLzJDLE9BQU9oRCxFQUFNakQsVUFBWWlELEVBUXZFLEtBQUt5NUMsRUFDSCxNQUFpQixLQUFWejVDLElBQXlELElBQWxDKzVDLEVBQWNyc0MsUUFBUTFOLEdBQ3RELFFBQ0UsTUFBTSxJQUFJNkwsTUFBTSwwREFBNERQLE9BQU91dUMsR0FBWSxLQUVyRyxDQTRGYUcsQ0FBdUIxNUMsRUFBTXlmLEdBQ3RDLEtBQUtvNUIsRUFDTCxLQUFLRCxFQUNILE9BN0ZOLFNBQTZCNTRDLEVBQU15ZixFQUFPcGEsR0FDeEMsSUFBSTFHLEVBQU84Z0IsRUFBTTlnQixLQUNiZzdDLEVBQWFsNkIsRUFBTWs2QixXQUV2QixHQUFhLFFBQVRoN0MsRUFFRixPQUFPZzdDLEVBQVc5NUIsT0FBTSxTQUFVdGYsR0FDaEMsT0FBdUQsSUFBaERxM0MsRUFBcUJyM0MsRUFBVVAsR0FBTXZELE1BQzlDLElBRUYsR0FBYSxVQUFUa0MsRUFDRixPQUVjLEtBRlAsRUFBSTAvQixFQUFjNkMsWUFBWWxoQyxHQUFNLFNBQVVnQixHQUNuRCxPQUFPQSxJQUFNaEIsQ0FDZixJQUFHdkQsT0FFTCxHQUFhLGdCQUFUa0MsRUFBd0IsQ0FDMUIsSUFDSTBpQyxHQURrQixFQUFJaEQsRUFBYzhDLGdCQUFnQjk3QixFQUFNckYsR0FDL0JxaEMsU0FLL0IsT0FIZ0JnQixFQUFlaEIsRUFBVSxHQUNkLEtBRUxyaEMsQ0FDeEIsQ0FDQSxHQUFhLGVBQVRyQixFQUF1QixDQUN6QixJQUNJaTdDLEdBRG1CLEVBQUl2YixFQUFjOEMsZ0JBQWdCOTdCLEVBQU1yRixHQUM3QnFoQyxTQUVsQyxPQUFPdVksRUFBV0EsRUFBV245QyxPQUFTLEtBQU91RCxDQUMvQyxDQUNBLEdBQWEsVUFBVHJCLEVBQWtCLENBQ3BCLEdBQXdCLG9CQUFicW5DLFNBQ1QsTUFBTSxJQUFJejZCLE1BQU0sOEZBRWxCLElBQUlvUCxHQUFVLEVBQUkyakIsRUFBc0IsV0FFeEMsT0FBTzBILFNBQVM2VCxlQUFpQmwvQixFQUFRcW9CLGVBQWVoakMsS0FBVWdtQyxTQUFTNlQsYUFDN0UsQ0FFQSxNQUFNLElBQUl0OUMsVUFBVSwwQ0FBNEN5TyxPQUFPeVUsRUFBTTlnQixNQUFRLDhDQUN2RixDQXFEYW03QyxDQUFvQjk1QyxFQUFNeWYsRUFBT3BhLEdBQzFDLFFBQ0UsTUFBTSxJQUFJa0csTUFBTSx1QkFBeUJQLE9BQU95VSxFQUFNamMsT0FFNUQsQ0FRQSxTQUFTdTJDLEVBQXdCdDZCLEVBQU9wYSxHQUN0QyxPQUFPLFNBQVVyRixHQUNmLE9BQU95ZixFQUFNdTZCLEtBQUtuNkIsT0FBTSxTQUFVbzZCLEdBQ2hDLE9BQU9YLEVBQWlCdDVDLEVBQU1pNkMsRUFBVzUwQyxFQUMzQyxHQUNGLENBQ0YsQ0FtQkEsU0FBU2lqQyxFQUFlL25DLEdBRXRCLEdBQXdCLGlCQUFiQSxFQUF1QixDQUNoQyxJQUFJb29CLEVBQVMwd0IsRUFBcUI5NEMsR0FDbEMsR0FoQkosU0FBMkJvb0IsR0FDekIsT0FBT0EsRUFBT25vQixNQUFLLFNBQVVpZixHQUMzQixPQUFPQSxFQUFNamMsT0FBUzgwQyxDQUN4QixHQUNGLENBWVE0QixDQUFrQnZ4QixHQUNwQixNQUFNLElBQUlwc0IsVUFBVSxzREFHdEIsT0FBT3c5QyxFQUF3QnB4QixFQUFPLEdBQ3hDLENBR0EsSUFBSWhPLEdBQVUsRUFBSTJqQixFQUFzQixXQUV4QyxHQURvQjNqQixFQUFRdy9CLG1CQUFxQngvQixFQUFRdy9CLG1CQUFtQjU1QyxHQUFnQyxtQkFBYkEsRUFFN0YsT0FBTyxTQUFVUCxHQUNmLE9BQU8yYSxFQUFReS9CLG1CQUFtQnA2QyxFQUFNTyxFQUMxQyxFQUdGLEdBQTRFLGlCQUFuRCxJQUFiQSxFQUEyQixZQUFjNDhCLEVBQVE1OEIsSUFBeUIsQ0FDcEYsSUFBSzNDLE1BQU13SSxRQUFRN0YsSUFBMEIsT0FBYkEsR0FBcUJaLE9BQU82SyxLQUFLakssR0FBVTlELE9BQVMsRUFBRyxDQUlyRixJQUh5QixFQUFJNmxDLEVBQWtCLFNBQUcvaEMsR0FBVUMsTUFBSyxTQUFVZCxHQUN6RSxZQUF3QixJQUFWQSxDQUNoQixJQUVFLE1BQU0sSUFBSW5ELFVBQVUsaUZBRXRCLE9BQU8sU0FBVXlELEdBQ2YsT0FBTyxFQUFJcStCLEVBQWNvRCx3QkFBd0J6aEMsRUFBTU8sRUFDekQsQ0FDRixDQUNBLE1BQU0sSUFBSWhFLFVBQVUsa0ZBQ3RCLENBRUEsTUFBTSxJQUFJQSxVQUFVLDJGQUN0QixDQVNBLFNBQVM4OUMsRUFBc0Ixa0MsRUFBTzRWLEVBQVdsbUIsR0FDL0MsT0FBT3NRLEVBQU0zTixRQUFPLFNBQVVvTixFQUFTcFYsR0FDckMsSUFBSUMsR0FBUyxFQUFJbytCLEVBQWM4QyxnQkFBZ0I5N0IsRUFBTXJGLEdBRXJELElBQUtDLEVBQ0gsT0FBT21WLEVBRVQsSUFBSWtsQyxHQUFpQixFQUFJamMsRUFBY2UsZ0JBQWdCbi9CLEdBQ25EczZDLEVBQVlELEVBQWVsdEMsUUFBUXBOLEdBQ25DdzZDLEVBQWtCRixFQUFlQyxFQUFZLEdBRWpELE9BQUtDLEdBR0RqdkIsRUFBVWl2QixJQUNacGxDLEVBQVExVSxLQUFLODVDLEdBRVJwbEMsR0FMRUEsQ0FNWCxHQUFHLEdBQ0wsQ0FTQSxTQUFTcWxDLEVBQW9COWtDLEVBQU80VixFQUFXbG1CLEdBQzdDLE9BQU8rekMsR0FBYSxTQUFVaGtDLEVBQVNwVixHQUNyQyxJQUFJQyxHQUFTLEVBQUlvK0IsRUFBYzhDLGdCQUFnQjk3QixFQUFNckYsR0FDckQsSUFBS0MsRUFDSCxPQUFPbVYsRUFFVCxJQUFJa2xDLEdBQWlCLEVBQUlqYyxFQUFjZSxnQkFBZ0JuL0IsR0FDbkRzNkMsRUFBWUQsRUFBZWx0QyxRQUFRcE4sR0FDbkMwNkMsRUFBa0JKLEVBQWU1M0MsTUFBTTYzQyxFQUFZLEdBQ3ZELE9BQU9ubEMsRUFBUXpTLE9BQU8rM0MsRUFBZ0I1OEMsT0FBT3l0QixHQUMvQyxHQUFHNVYsRUFDTCxDQVFBLFNBQVNnbEMsRUFBaUJobEMsRUFBTzRWLEdBQy9CLE9BQU82dEIsR0FBYSxTQUFVaGtDLEVBQVNwVixHQUNyQyxPQUFPb1YsRUFBUXpTLFFBQU8sRUFBSTA3QixFQUFjZSxnQkFBZ0JwL0IsR0FBTWxDLE9BQU95dEIsR0FDdkUsR0FBRzVWLEVBQ0wsQ0FRQSxTQUFTaWxDLEVBQWdCamxDLEVBQU80VixHQUM5QixPQUFPNnRCLEdBQWEsU0FBVWhrQyxFQUFTcFYsR0FDckMsT0FBT29WLEVBQVF6UyxRQUFPLEVBQUkwN0IsRUFBYzZDLFlBQVlsaEMsRUFBTXVyQixHQUM1RCxJQUFHLEVBQUk4WCxFQUEwQixTQUFHMXRCLEVBQU03TixJQUFJdTJCLEVBQWNlLGlCQUM5RCxDQVdBLFNBQVN3WSxFQUFxQnIzQyxFQUFVOEUsR0FDdEMsR0FBd0IsaUJBQWI5RSxFQUF1QixDQUNoQyxJQUFJd0QsR0FBVyxFQUFJaTBDLEVBQXlCLFNBQUd6M0MsR0FDL0MsR0FBSXdELEVBQVN0SCxPQUFTLEVBQ3BCLE9BQU8sRUFBSTRtQyxFQUEwQixTQUFHdC9CLEVBQVMrRCxLQUFJLFNBQVUrVCxHQUM3RCxPQUFPKzdCLEVBQXFCLzdCLEVBQUVtUixJQUFLM25CLEVBQ3JDLElBTUosQ0FFQSxHQUF3QixtQkFBYjlFLEdBQW1HLGlCQUFuRCxJQUFiQSxFQUEyQixZQUFjNDhCLEVBQVE1OEIsSUFDN0YsT0FBTyxFQUFJODlCLEVBQWM2QyxZQUFZNzdCLEVBQU1pakMsRUFBZS9uQyxJQUc1RCxJQUFJc0gsRUFBVSxHQUNkLEdBQXdCLGlCQUFidEgsRUEyRFQsTUFBTSxJQUFJaEUsVUFBVSx1RUF4RHBCLElBRkEsSUFBSW9zQixFQUFTMHdCLEVBQXFCOTRDLEdBQzlCME4sRUFBUSxFQUNMQSxFQUFRMGEsRUFBT2xzQixRQUFRLENBQzVCLElBQUlnakIsRUFBUWtKLEVBQU8xYSxHQWVuQixHQUFJd1IsRUFBTWpjLE9BQVM4MEMsRUFBVSxDQUMzQixJQUFJL3NCLEVBQVl3dUIsRUFBd0J0NkIsRUFBT3BhLEdBQy9Dd0MsRUFBVUEsRUFBUWxGLFFBQU8sRUFBSTA3QixFQUFjNkMsWUFBWTc3QixFQUFNa21CLEdBQy9ELEtBQU8sQ0FHTCxJQUFJL25CLEVBQU9pYyxFQUFNamMsS0FLYnEzQyxFQUFhZCxFQUF3QnB4QixFQUR6QzFhLEdBQVMsR0FDK0M1SSxHQUd4RCxPQUFRN0IsR0FFTixLQUFLMjBDLEVBQ0h0d0MsRUFBVXd5QyxFQUFzQnh5QyxFQUFTZ3pDLEVBQVl4MUMsR0FDckQsTUFFRixLQUFLK3lDLEVBQ0h2d0MsRUFBVTR5QyxFQUFvQjV5QyxFQUFTZ3pDLEVBQVl4MUMsR0FDbkQsTUFFRixLQUFLNnlDLEVBQ0hyd0MsRUFBVTh5QyxFQUFpQjl5QyxFQUFTZ3pDLEdBQ3BDLE1BRUYsS0FBS3hDLEVBRUR4d0MsRUFBVSt5QyxFQUFnQi95QyxFQUFTZ3pDLEdBQ25DLE1BRUosUUFDRSxNQUFNLElBQUl0dkMsTUFBTSxnQ0FBa0NQLE9BQU94SCxJQUUvRCxDQUNBeUssR0FBUyxDQUNYLENBSUYsT0FBT3BHLENBQ1QsOEJDNWZBbEksT0FBT0MsZUFBZTVELEVBQVMsYUFBYyxDQUMzQzBELE9BQU8sSUFFVDFELEVBQUEsUUFjQSxTQUFpQmdFLEVBQU1nRSxHQUNyQixPQUFPLElBQUlvekMsRUFBMEIsUUFBRXAzQyxFQUFNLEtBQU1nRSxFQUNyRCxFQWRBLElBSWdDeUssRUFGNUIyb0MsR0FFNEIzb0MsRUFKVixFQUFRLFFBSXVCQSxFQUFJOU0sV0FBYThNLEVBQU0sQ0FBRSxRQUFXQSxnQ0NUekY5TyxPQUFPQyxlQUFlNUQsRUFBUyxhQUFjLENBQzNDMEQsT0FBTyxJQUVUMUQsRUFBQSxRQVFBLFNBQXlCMmUsR0FDdkIsSUFBS0EsRUFDSCxNQUFNLElBQUlwUCxNQUFNLHVmQUVsQixHQUF1QixtQkFBWm9QLEVBQXdCLENBQ2pDLEdBQUloYixPQUFPd3NDLGVBQWV4eEIsS0FBYTA4QixFQUF5QixRQUM5RCxNQUFNLElBQUk5ckMsTUFBTSwraUJBRWxCLE1BQU0sSUFBSUEsTUFBTSxxakJBQ2xCLENBQ0EsS0FBTW9QLGFBQW1CMDhCLEVBQXlCLFNBQ2hELE1BQU0sSUFBSTlyQyxNQUFNLHFHQUVwQixFQW5CQSxJQUlnQ2tELEVBRjVCNG9DLEdBRTRCNW9DLEVBSlgsRUFBUSxRQUl3QkEsRUFBSTlNLFdBQWE4TSxFQUFNLENBQUUsUUFBV0EsYUNYekYxUyxFQUFPQyxRQUFVLFNBQXVCMkIsR0FFdkMsSUFBSW05QyxHQUF5QixFQUN6QkMsR0FBc0IsRUFDdEJDLEdBQWlCLEVBQ3JCLEdBQXNCLG1CQUFYcjlDLEVBQXVCLENBQ2pDLElBRUNBLEVBQU95QixLQUFLLEtBQUssU0FBVXlILEVBQUdnUyxFQUFJMWMsR0FDaEIsaUJBQU5BLElBQ1YyK0MsR0FBeUIsRUFFM0IsSUFFQW45QyxFQUFPeUIsS0FDTixDQUFDLE9BQ0QsV0FDQyxhQUVBMjdDLEVBQXNDLGlCQUFUMytDLElBQzlCLEdBQ0EsSUFFRixDQUFFLE1BQU8wSSxHQUNSazJDLEdBQWlCLENBQ2xCLENBQ0EsT0FBUUEsR0FBa0JGLEdBQTBCQyxDQUNyRCxDQUNBLE9BQU8sQ0FDUiw4QkMzQkEsSUFHSTE3QyxFQUhlLEVBQVEsSUFHTFosQ0FBYSwyQkFBMkIsS0FBUyxFQUN2RSxHQUFJWSxFQUNILElBQ0NBLEVBQWdCLENBQUMsRUFBRyxJQUFLLENBQUVLLE1BQU8sR0FDbkMsQ0FBRSxNQUFPb0YsR0FFUnpGLEdBQWtCLENBQ25CLENBR0R0RCxFQUFPQyxRQUFVcUQseUJDWmpCdEQsRUFBT0MsUUFBVWkvQyxpQ0NBakJsL0MsRUFBT0MsUUFBVXVQLDZCQ0FqQnhQLEVBQU9DLFFBQVVzdUMsa0NDQWpCdnVDLEVBQU9DLFFBQVVpd0Msc0NDQWpCbHdDLEVBQU9DLFFBQVVrL0MsbUNDQWpCbi9DLEVBQU9DLFFBQVVPLGlDQ0FqQlIsRUFBT0MsUUFBVW0vQyxzQ0NEakIsSUFBSW44QyxFQUFhLEVBQVEsTUFHekJqRCxFQUFPQyxRQUFVLFNBQWdDMEQsR0FDaEQsR0FBYSxNQUFUQSxFQUNILE1BQU0sSUFBSVYsRUFBWXhDLFVBQVVDLE9BQVMsR0FBS0QsVUFBVSxJQUFRLHlCQUEyQmtELEdBRTVGLE9BQU9BLENBQ1IsK0JDUkEsSUFBSTlELEVBQVUsRUFBUSxNQUNsQm9CLEVBQXlCLEVBQVEsTUFHckNqQixFQUFPQyxRQUFVLFNBQWtCMEQsR0FFbEMsT0FEQTFDLEVBQXVCMEMsR0FDaEI5RCxFQUFROEQsRUFDaEIseUJDTkEzRCxFQUFPQyxRQUFVMkQsb0NDRGpCLElBQUlxSixFQUFTLEVBQVEsTUFFakJveUMsRUFBbUMsbUJBQVhoa0MsUUFBdUQsaUJBQXZCQSxPQUFPaWtDLFlBRS9EdnpDLEVBQU1zekMsR0FBa0J4OUMsTUFBTUMsVUFBVXVaLE9BQU9pa0MsYUFFL0NyOEMsRUFBYXpDLFVBRWpCUixFQUFPQyxRQUFVLFNBQXlCMkIsR0FDekMsR0FBc0IsaUJBQVhBLElBQXdCQSxFQUNsQyxNQUFNLElBQUlxQixFQUFXLHFDQUV0QixJQUFLZ0ssRUFBT3BMLE1BQU1DLFVBQVdGLEdBQzVCLE1BQU0sSUFBSXFCLEVBQVcscUNBRWxCbzhDLElBQ0h0ekMsRUFBSW5LLElBQVUsRUFFaEIsK0JDbEJBLElBQUl1dEIsRUFBK0IsbUJBQVg5VCxRQUFvRCxpQkFBcEJBLE9BQU9DLFNBRTNEaWtDLEVBQWMsRUFBUSxLQUN0QkMsRUFBYSxFQUFRLE1BQ3JCQyxFQUFTLEVBQVEsTUFDakJDLEVBQVcsRUFBUSxNQW1DdkIxL0MsRUFBT0MsUUFBVSxTQUFxQmdvQixHQUNyQyxHQUFJczNCLEVBQVl0M0IsR0FDZixPQUFPQSxFQUVSLElBU0kwM0IsRUFUQUMsRUFBTyxVQWlCWCxHQWhCSW4vQyxVQUFVQyxPQUFTLElBQ2xCRCxVQUFVLEtBQU93TyxPQUNwQjJ3QyxFQUFPLFNBQ0duL0MsVUFBVSxLQUFPeU8sU0FDM0Iwd0MsRUFBTyxXQUtMendCLElBQ0M5VCxPQUFPd2tDLFlBQ1ZGLEVBNUJhLFNBQW1Cdi9DLEVBQUcwL0MsR0FDckMsSUFBSXI4QyxFQUFPckQsRUFBRTAvQyxHQUNiLEdBQUlyOEMsUUFBOEMsQ0FDakQsSUFBSys3QyxFQUFXLzdDLEdBQ2YsTUFBTSxJQUFJakQsVUFBVWlELEVBQU8sMEJBQTRCcThDLEVBQUksY0FBZ0IxL0MsRUFBSSxzQkFFaEYsT0FBT3FELENBQ1IsQ0FFRCxDQW1Ca0JzOEMsQ0FBVTkzQixFQUFPNU0sT0FBT3drQyxhQUM3QkgsRUFBU3ozQixLQUNuQjAzQixFQUFldGtDLE9BQU92WixVQUFVNmdDLGVBR04sSUFBakJnZCxFQUE4QixDQUN4QyxJQUFJdDVDLEVBQVNzNUMsRUFBYXQ4QyxLQUFLNGtCLEVBQU8yM0IsR0FDdEMsR0FBSUwsRUFBWWw1QyxHQUNmLE9BQU9BLEVBRVIsTUFBTSxJQUFJN0YsVUFBVSwrQ0FDckIsQ0FJQSxNQUhhLFlBQVRvL0MsSUFBdUJILEVBQU94M0IsSUFBVXkzQixFQUFTejNCLE1BQ3BEMjNCLEVBQU8sVUE5RGlCLFNBQTZCeC9DLEVBQUd3L0MsR0FDekQsR0FBSSxNQUFPeC9DLEVBQ1YsTUFBTSxJQUFJSSxVQUFVLHlCQUEyQkosR0FFaEQsR0FBb0IsaUJBQVR3L0MsR0FBK0IsV0FBVEEsR0FBOEIsV0FBVEEsRUFDckQsTUFBTSxJQUFJcC9DLFVBQVUscUNBRXJCLElBQ0lvQixFQUFReUUsRUFBUXJCLEVBRGhCZzdDLEVBQXVCLFdBQVRKLEVBQW9CLENBQUMsV0FBWSxXQUFhLENBQUMsVUFBVyxZQUU1RSxJQUFLNTZDLEVBQUksRUFBR0EsRUFBSWc3QyxFQUFZdC9DLFNBQVVzRSxFQUVyQyxHQURBcEQsRUFBU3hCLEVBQUU0L0MsRUFBWWg3QyxJQUNuQnc2QyxFQUFXNTlDLEtBQ2R5RSxFQUFTekUsRUFBT3lCLEtBQUtqRCxHQUNqQm0vQyxFQUFZbDVDLElBQ2YsT0FBT0EsRUFJVixNQUFNLElBQUk3RixVQUFVLG1CQUNyQixDQTZDUXkvQyxDQUFvQmg0QixFQUFnQixZQUFUMjNCLEVBQXFCLFNBQVdBLEVBQ25FLHdCQ3hFQTUvQyxFQUFPQyxRQUFVLFNBQXFCMEQsR0FDckMsT0FBaUIsT0FBVkEsR0FBb0MsbUJBQVZBLEdBQXlDLGlCQUFWQSxDQUNqRSx5QkNBQSxJQUNJeXJCLEVBQVF4ckIsT0FBTzlCLFVBQVUyUixTQUN6QnNwQixFQUFNbnlCLEtBQUtteUIsSUFHWG1qQixFQUFXLFNBQWtCaDBDLEVBQUdDLEdBR2hDLElBRkEsSUFBSStSLEVBQU0sR0FFRGxaLEVBQUksRUFBR0EsRUFBSWtILEVBQUV4TCxPQUFRc0UsR0FBSyxFQUMvQmtaLEVBQUlsWixHQUFLa0gsRUFBRWxILEdBRWYsSUFBSyxJQUFJME0sRUFBSSxFQUFHQSxFQUFJdkYsRUFBRXpMLE9BQVFnUixHQUFLLEVBQy9Cd00sRUFBSXhNLEVBQUl4RixFQUFFeEwsUUFBVXlMLEVBQUV1RixHQUcxQixPQUFPd00sQ0FDWCxFQXFCQWxlLEVBQU9DLFFBQVUsU0FBY2dmLEdBQzNCLElBQUl2SSxFQUFTclcsS0FDYixHQUFzQixtQkFBWHFXLEdBcENBLHNCQW9DeUIwWSxFQUFNOXRCLE1BQU1vVixHQUM1QyxNQUFNLElBQUlsVyxVQXhDRSxrREF3Q3dCa1csR0F5QnhDLElBdkJBLElBRUlqVixFQUZBeXNDLEVBeEJJLFNBQWVpUyxFQUFTdHpCLEdBRWhDLElBREEsSUFBSTNPLEVBQU0sR0FDRGxaLEVBc0JtQixFQXRCRjBNLEVBQUksRUFBRzFNLEVBQUltN0MsRUFBUXovQyxPQUFRc0UsR0FBSyxFQUFHME0sR0FBSyxFQUM5RHdNLEVBQUl4TSxHQUFLeXVDLEVBQVFuN0MsR0FFckIsT0FBT2taLENBQ1gsQ0FrQmVraUMsQ0FBTTMvQyxXQXFCYjQvQyxFQUFjdGpCLEVBQUksRUFBR3JtQixFQUFPaFcsT0FBU3d0QyxFQUFLeHRDLFFBQzFDNC9DLEVBQVksR0FDUHQ3QyxFQUFJLEVBQUdBLEVBQUlxN0MsRUFBYXI3QyxJQUM3QnM3QyxFQUFVdDdDLEdBQUssSUFBTUEsRUFLekIsR0FGQXZELEVBQVFnaEMsU0FBUyxTQUFVLG9CQTNDbkIsU0FBVXZrQixFQUFLcWlDLEdBRXZCLElBREEsSUFBSTV0QyxFQUFNLEdBQ0QzTixFQUFJLEVBQUdBLEVBQUlrWixFQUFJeGQsT0FBUXNFLEdBQUssRUFDakMyTixHQUFPdUwsRUFBSWxaLEdBQ1BBLEVBQUksRUFBSWtaLEVBQUl4ZCxTQUNaaVMsR0FzQzBELEtBbkNsRSxPQUFPQSxDQUNYLENBa0NxRDZ0QyxDQUFNRixHQUFrQiw0Q0FBakU3ZCxFQXhCSyxXQUNULEdBQUlwaUMsZ0JBQWdCb0IsRUFBTyxDQUN2QixJQUFJNEUsRUFBU3FRLEVBQU9wVixNQUNoQmpCLEtBQ0E2L0MsRUFBU2hTLEVBQU16dEMsWUFFbkIsT0FBSW1ELE9BQU95QyxLQUFZQSxFQUNaQSxFQUVKaEcsSUFDWCxDQUNBLE9BQU9xVyxFQUFPcFYsTUFDVjJkLEVBQ0FpaEMsRUFBU2hTLEVBQU16dEMsV0FHdkIsSUFVSWlXLEVBQU81VSxVQUFXLENBQ2xCLElBQUkyK0MsRUFBUSxXQUFrQixFQUM5QkEsRUFBTTMrQyxVQUFZNFUsRUFBTzVVLFVBQ3pCTCxFQUFNSyxVQUFZLElBQUkyK0MsRUFDdEJBLEVBQU0zK0MsVUFBWSxJQUN0QixDQUVBLE9BQU9MLENBQ1gsK0JDakZBLElBQUlOLEVBQWlCLEVBQVEsTUFFN0JuQixFQUFPQyxRQUFVd2lDLFNBQVMzZ0MsVUFBVWlCLE1BQVE1Qiw2QkNGNUMsSUFBSTlCLEVBQWEsRUFBUSxNQUNyQnFoRCxFQUFpQixFQUFRLE1BQ3pCQyxFQUFxQixFQUFRLEtBQVIsR0FDckJqaEQsRUFBWSxFQUFRLE1BQ3BCa2hELEVBQW9CbGhELEVBQVUsK0JBQzlCbWhELEVBQWVuaEQsRUFBVSwwQkFDekIwdkIsRUFBUTF2QixFQUFVLDZCQUVsQm9oRCxFQUFhLFVBZ0JiditCLEVBQVEsNkJBRVJ3K0IsSUFBVyxJQUFLLENBQUMsSUFLakJDLEVBQWdCdmUsU0FBUzNnQyxVQUV6Qm0vQyxFQUFRLFdBQ1gsT0FBTyxDQUNSLEVBQ0EsR0FBd0IsaUJBQWJoWCxTQUF1QixDQUVqQyxJQUFJaVgsRUFBTWpYLFNBQVNpWCxJQUNmOXhCLEVBQU04eEIsS0FBUzl4QixFQUFNNmEsU0FBU2lYLE9BQ2pDRCxFQUFRLFNBQTBCdDlDLEdBR2pDLElBQUtvOUMsSUFBV3A5QyxVQUE0QixJQUFWQSxHQUEwQyxpQkFBVkEsR0FDakUsSUFDQyxJQUFJZ1AsRUFBTXljLEVBQU16ckIsR0FFaEIsT0FsQlUsK0JBa0JGZ1AsR0FuQkssb0JBbUJlQSxJQUFxQyxNQUFiaFAsRUFBTSxHQUMzRCxDQUFFLE1BQU9vRixHQUFVLENBRXBCLE9BQU8sQ0FDUixFQUVGLENBRUEvSSxFQUFPQyxRQUFVLFdBQ2hCLEdBQUlnaEQsRUFBTTVnRCxRQTlDRyxTQUE0QmlZLEdBQ3pDLEdBQUlqWixFQUFXaVosR0FDZCxPQUFPLEVBRVIsR0FBa0IsbUJBQVBBLEVBQ1YsT0FBTyxFQUVSLElBRUMsUUFEWXVvQyxFQUFhRCxFQUFrQnRvQyxHQUFLd29DLEVBRWpELENBQUUsTUFBTy8zQyxHQUFJLENBQ2IsT0FBTyxDQUNSLENBa0NzQm80QyxDQUFROWdELFFBQVVoQixFQUFXZ0IsTUFDakQsTUFBTSxJQUFJRyxVQUFVLDhEQUVyQixHQUFJbWdELEdBQXNCRCxFQUFlcmdELEtBQU0sUUFDOUMsT0FBT0EsS0FBS3VDLEtBRWIsR0FBSXZDLE9BQVMyZ0QsRUFDWixNQUFPLEdBRVIsSUFBSXJ1QyxFQUFNaXVDLEVBQWtCdmdELE1BQ3hCc1osRUFBUWtuQyxFQUFhbHVDLEVBQUs0UCxHQUU5QixPQURXNUksR0FBU0EsRUFBTSxFQUUzQiwrQkNyRUEsSUFBSTNZLEVBQVMsRUFBUSxNQUNqQkUsRUFBVyxFQUFRLEtBRW5CQyxFQUFpQixFQUFRLElBQ3pCQyxFQUFjLEVBQVEsTUFDdEJHLEVBQU8sRUFBUSxNQUVmRSxFQUFRUCxFQUFTQyxHQUVyQkgsRUFBT1MsRUFBTyxDQUNiTCxZQUFhQSxFQUNiRCxlQUFnQkEsRUFDaEJJLEtBQU1BLElBR1B2QixFQUFPQyxRQUFVd0IsK0JDZmpCLElBQUlOLEVBQWlCLEVBQVEsSUFFN0JuQixFQUFPQyxRQUFVLFdBQ2hCLE9BQU9rQixDQUNSLCtCQ0pBLElBQUltdUIsRUFBc0IsNEJBQ3RCcXhCLEVBQXFCLEVBQVEsS0FBUixHQUNyQnYvQyxFQUFjLEVBQVEsTUFDdEJ5QyxFQUFpQkQsT0FBT0MsZUFDeEJ1OUMsRUFBVTVnRCxVQUVkUixFQUFPQyxRQUFVLFdBQ2hCLElBQUlvQixFQUFXRCxJQUNmLEdBQUl1L0MsRUFDSCxPQUFPdC9DLEVBRVIsSUFBS2l1QixFQUNKLE1BQU0sSUFBSTh4QixFQUFRLHNGQUVuQixJQUFJSixFQUFnQnZlLFNBQVMzZ0MsVUFpQjdCLE9BaEJBK0IsRUFBZW05QyxFQUFlLE9BQVEsQ0FDckNsN0MsY0FBYyxFQUNkQyxZQUFZLEVBQ1pDLElBQUssV0FDSixJQUFJcEQsRUFBT3ZCLEVBQVNnQyxLQUFLaEQsTUFTekIsT0FSSUEsT0FBUzJnRCxHQUNabjlDLEVBQWV4RCxLQUFNLE9BQVEsQ0FDNUJ5RixjQUFjLEVBQ2RDLFlBQVksRUFDWnBDLE1BQU9mLEVBQ1BpRCxVQUFVLElBR0xqRCxDQUNSLElBRU12QixDQUNSLHlCQ2hDQSxJQUFJcy9DLEVBQXFCLFdBQ3hCLE1BQXVDLGlCQUF6QixXQUFjLEVBQUUvOUMsSUFDL0IsRUFFSXkrQyxFQUFPejlDLE9BQU8rQix5QkFDbEIsR0FBSTA3QyxFQUNILElBQ0NBLEVBQUssR0FBSSxTQUNWLENBQUUsTUFBT3Q0QyxHQUVSczRDLEVBQU8sSUFDUixDQUdEVixFQUFtQlcsK0JBQWlDLFdBQ25ELElBQUtYLE1BQXlCVSxFQUM3QixPQUFPLEVBRVIsSUFBSTM3QyxFQUFPMjdDLEdBQUssV0FBYSxHQUFHLFFBQ2hDLFFBQVMzN0MsS0FBVUEsRUFBS0ksWUFDekIsRUFFQSxJQUFJeTdDLEVBQVE5ZSxTQUFTM2dDLFVBQVVpQixLQUUvQjQ5QyxFQUFtQmEsd0JBQTBCLFdBQzVDLE9BQU9iLEtBQXlDLG1CQUFWWSxHQUF3RCxLQUFoQyxXQUFjLEVBQUV4K0MsT0FBT0gsSUFDdEYsRUFFQTVDLEVBQU9DLFFBQVUwZ0QsOEJDNUJqQixJQUFJbDdDLEVBRUFnOEMsRUFBUyxFQUFRLE1BQ2pCQyxFQUFhLEVBQVEsTUFDckJDLEVBQWMsRUFBUSxNQUN0QkMsRUFBa0IsRUFBUSxNQUMxQmh6QixFQUFlLEVBQVEsTUFDdkIzckIsRUFBYSxFQUFRLE1BQ3JCNCtDLEVBQVksRUFBUSxNQUVwQkMsRUFBWXJmLFNBR1pzZixFQUF3QixTQUFVQyxHQUNyQyxJQUNDLE9BQU9GLEVBQVUseUJBQTJCRSxFQUFtQixpQkFBeERGLEVBQ1IsQ0FBRSxNQUFPLzRDLEdBQUksQ0FDZCxFQUVJazVDLEVBQVFyK0MsT0FBTytCLHlCQUNuQixHQUFJczhDLEVBQ0gsSUFDQ0EsRUFBTSxDQUFDLEVBQUcsR0FDWCxDQUFFLE1BQU9sNUMsR0FDUms1QyxFQUFRLElBQ1QsQ0FHRCxJQUFJQyxFQUFpQixXQUNwQixNQUFNLElBQUlqL0MsQ0FDWCxFQUNJay9DLEVBQWlCRixFQUNqQixXQUNGLElBR0MsT0FBT0MsQ0FDUixDQUFFLE1BQU9FLEdBQ1IsSUFFQyxPQUFPSCxFQUFNeGhELFVBQVcsVUFBVXVGLEdBQ25DLENBQUUsTUFBT3E4QyxHQUNSLE9BQU9ILENBQ1IsQ0FDRCxDQUNELENBYkUsR0FjQUEsRUFFQy95QixFQUFhLEVBQVEsS0FBUixHQUNibXpCLEVBQVcsRUFBUSxHQUFSLEdBRVhDLEVBQVczK0MsT0FBT3dzQyxpQkFDckJrUyxFQUNHLFNBQVV4aUMsR0FBSyxPQUFPQSxFQUFFakQsU0FBVyxFQUNuQyxNQUdBMmxDLEVBQVksQ0FBQyxFQUViQyxFQUFtQyxvQkFBZkMsWUFBK0JILEVBQXVCQSxFQUFTRyxZQUFyQmo5QyxFQUU5RGs5QyxFQUFhLENBQ2hCOWxDLFVBQVcsS0FDWCxtQkFBOEMsb0JBQW5CK2xDLGVBQWlDbjlDLEVBQVltOUMsZUFDeEUsVUFBVy9nRCxNQUNYLGdCQUF3QyxvQkFBaEJnaEQsWUFBOEJwOUMsRUFBWW85QyxZQUNsRSwyQkFBNEIxekIsR0FBY296QixFQUFXQSxFQUFTLEdBQUdsbkMsT0FBT0MsYUFBZTdWLEVBQ3ZGLG1DQUFvQ0EsRUFDcEMsa0JBQW1CKzhDLEVBQ25CLG1CQUFvQkEsRUFDcEIsMkJBQTRCQSxFQUM1QiwyQkFBNEJBLEVBQzVCLFlBQWdDLG9CQUFaTSxRQUEwQnI5QyxFQUFZcTlDLFFBQzFELFdBQThCLG9CQUFYQyxPQUF5QnQ5QyxFQUFZczlDLE9BQ3hELGtCQUE0QyxvQkFBbEJDLGNBQWdDdjlDLEVBQVl1OUMsY0FDdEUsbUJBQThDLG9CQUFuQkMsZUFBaUN4OUMsRUFBWXc5QyxlQUN4RSxZQUFhdmdCLFFBQ2IsYUFBa0Msb0JBQWJ3Z0IsU0FBMkJ6OUMsRUFBWXk5QyxTQUM1RCxTQUFVM3RCLEtBQ1YsY0FBZTR0QixVQUNmLHVCQUF3QkMsbUJBQ3hCLGNBQWVDLFVBQ2YsdUJBQXdCaHdDLG1CQUN4QixVQUFXb3VDLEVBQ1gsU0FBVTZCLEtBQ1YsY0FBZTVCLEVBQ2YsaUJBQTBDLG9CQUFqQjZCLGFBQStCOTlDLEVBQVk4OUMsYUFDcEUsaUJBQTBDLG9CQUFqQkMsYUFBK0IvOUMsRUFBWSs5QyxhQUNwRSx5QkFBMEQsb0JBQXpCQyxxQkFBdUNoK0MsRUFBWWcrQyxxQkFDcEYsYUFBYzNCLEVBQ2Qsc0JBQXVCVSxFQUN2QixjQUFvQyxvQkFBZGtCLFVBQTRCaitDLEVBQVlpK0MsVUFDOUQsZUFBc0Msb0JBQWZDLFdBQTZCbCtDLEVBQVlrK0MsV0FDaEUsZUFBc0Msb0JBQWZDLFdBQTZCbitDLEVBQVltK0MsV0FDaEUsYUFBY2o1QyxTQUNkLFVBQVdrNUMsTUFDWCxzQkFBdUIxMEIsR0FBY296QixFQUFXQSxFQUFTQSxFQUFTLEdBQUdsbkMsT0FBT0MsY0FBZ0I3VixFQUM1RixTQUEwQixpQkFBVDBKLEtBQW9CQSxLQUFPMUosRUFDNUMsUUFBd0Isb0JBQVI4a0IsSUFBc0I5a0IsRUFBWThrQixJQUNsRCx5QkFBeUMsb0JBQVJBLEtBQXdCNEUsR0FBZW96QixFQUF1QkEsR0FBUyxJQUFJaDRCLEtBQU1sUCxPQUFPQyxhQUF0QzdWLEVBQ25GLFNBQVVtRixLQUNWLFdBQVlzRSxPQUNaLFdBQVl0TCxPQUNaLGVBQWdCa2dELFdBQ2hCLGFBQWNyNUMsU0FDZCxZQUFnQyxvQkFBWnM1QyxRQUEwQnQrQyxFQUFZcytDLFFBQzFELFVBQTRCLG9CQUFWQyxNQUF3QnYrQyxFQUFZdStDLE1BQ3RELGVBQWdCckMsRUFDaEIsbUJBQW9CQyxFQUNwQixZQUFnQyxvQkFBWnFDLFFBQTBCeCtDLEVBQVl3K0MsUUFDMUQsV0FBWXpoQyxPQUNaLFFBQXdCLG9CQUFSNVosSUFBc0JuRCxFQUFZbUQsSUFDbEQseUJBQXlDLG9CQUFSQSxLQUF3QnVtQixHQUFlb3pCLEVBQXVCQSxHQUFTLElBQUkzNUMsS0FBTXlTLE9BQU9DLGFBQXRDN1YsRUFDbkYsc0JBQW9ELG9CQUF0QnkrQyxrQkFBb0N6K0MsRUFBWXkrQyxrQkFDOUUsV0FBWWoxQyxPQUNaLDRCQUE2QmtnQixHQUFjb3pCLEVBQVdBLEVBQVMsR0FBR2xuQyxPQUFPQyxhQUFlN1YsRUFDeEYsV0FBWTBwQixFQUFhOVQsT0FBUzVWLEVBQ2xDLGdCQUFpQm1wQixFQUNqQixtQkFBb0J1ekIsRUFDcEIsZUFBZ0JNLEVBQ2hCLGNBQWV4L0MsRUFDZixlQUFzQyxvQkFBZnkvQyxXQUE2Qmo5QyxFQUFZaTlDLFdBQ2hFLHNCQUFvRCxvQkFBdEJ5QixrQkFBb0MxK0MsRUFBWTArQyxrQkFDOUUsZ0JBQXdDLG9CQUFoQnprQixZQUE4Qmo2QixFQUFZaTZCLFlBQ2xFLGdCQUF3QyxvQkFBaEIwa0IsWUFBOEIzK0MsRUFBWTIrQyxZQUNsRSxhQUFjdkMsRUFDZCxZQUFnQyxvQkFBWndDLFFBQTBCNStDLEVBQVk0K0MsUUFDMUQsWUFBZ0Msb0JBQVpDLFFBQTBCNytDLEVBQVk2K0MsUUFDMUQsWUFBZ0Msb0JBQVpoL0IsUUFBMEI3ZixFQUFZNmYsU0FHM0QsR0FBSWk5QixFQUNILElBQ0MsS0FBSzN2QixLQUNOLENBQUUsTUFBTzdwQixHQUVSLElBQUl3N0MsRUFBYWhDLEVBQVNBLEVBQVN4NUMsSUFDbkM0NUMsRUFBVyxxQkFBdUI0QixDQUNuQyxDQUdELElBQUlDLEVBQVMsU0FBU0EsRUFBTzVoRCxHQUM1QixJQUFJZSxFQUNKLEdBQWEsb0JBQVRmLEVBQ0hlLEVBQVFvK0MsRUFBc0IsNkJBQ3hCLEdBQWEsd0JBQVRuL0MsRUFDVmUsRUFBUW8rQyxFQUFzQix3QkFDeEIsR0FBYSw2QkFBVG4vQyxFQUNWZSxFQUFRbytDLEVBQXNCLDhCQUN4QixHQUFhLHFCQUFUbi9DLEVBQTZCLENBQ3ZDLElBQUkwVixFQUFLa3NDLEVBQU8sNEJBQ1psc0MsSUFDSDNVLEVBQVEyVSxFQUFHeFcsVUFFYixNQUFPLEdBQWEsNkJBQVRjLEVBQXFDLENBQy9DLElBQUk2aEQsRUFBTUQsRUFBTyxvQkFDYkMsR0FBT2xDLElBQ1Y1K0MsRUFBUTQrQyxFQUFTa0MsRUFBSTNpRCxXQUV2QixDQUlBLE9BRkE2Z0QsRUFBVy8vQyxHQUFRZSxFQUVaQSxDQUNSLEVBRUkrZ0QsRUFBaUIsQ0FDcEI3bkMsVUFBVyxLQUNYLHlCQUEwQixDQUFDLGNBQWUsYUFDMUMsbUJBQW9CLENBQUMsUUFBUyxhQUM5Qix1QkFBd0IsQ0FBQyxRQUFTLFlBQWEsV0FDL0MsdUJBQXdCLENBQUMsUUFBUyxZQUFhLFdBQy9DLG9CQUFxQixDQUFDLFFBQVMsWUFBYSxRQUM1QyxzQkFBdUIsQ0FBQyxRQUFTLFlBQWEsVUFDOUMsMkJBQTRCLENBQUMsZ0JBQWlCLGFBQzlDLG1CQUFvQixDQUFDLHlCQUEwQixhQUMvQyw0QkFBNkIsQ0FBQyx5QkFBMEIsWUFBYSxhQUNyRSxxQkFBc0IsQ0FBQyxVQUFXLGFBQ2xDLHNCQUF1QixDQUFDLFdBQVksYUFDcEMsa0JBQW1CLENBQUMsT0FBUSxhQUM1QixtQkFBb0IsQ0FBQyxRQUFTLGFBQzlCLHVCQUF3QixDQUFDLFlBQWEsYUFDdEMsMEJBQTJCLENBQUMsZUFBZ0IsYUFDNUMsMEJBQTJCLENBQUMsZUFBZ0IsYUFDNUMsc0JBQXVCLENBQUMsV0FBWSxhQUNwQyxjQUFlLENBQUMsb0JBQXFCLGFBQ3JDLHVCQUF3QixDQUFDLG9CQUFxQixZQUFhLGFBQzNELHVCQUF3QixDQUFDLFlBQWEsYUFDdEMsd0JBQXlCLENBQUMsYUFBYyxhQUN4Qyx3QkFBeUIsQ0FBQyxhQUFjLGFBQ3hDLGNBQWUsQ0FBQyxPQUFRLFNBQ3hCLGtCQUFtQixDQUFDLE9BQVEsYUFDNUIsaUJBQWtCLENBQUMsTUFBTyxhQUMxQixvQkFBcUIsQ0FBQyxTQUFVLGFBQ2hDLG9CQUFxQixDQUFDLFNBQVUsYUFDaEMsc0JBQXVCLENBQUMsU0FBVSxZQUFhLFlBQy9DLHFCQUFzQixDQUFDLFNBQVUsWUFBYSxXQUM5QyxxQkFBc0IsQ0FBQyxVQUFXLGFBQ2xDLHNCQUF1QixDQUFDLFVBQVcsWUFBYSxRQUNoRCxnQkFBaUIsQ0FBQyxVQUFXLE9BQzdCLG1CQUFvQixDQUFDLFVBQVcsVUFDaEMsb0JBQXFCLENBQUMsVUFBVyxXQUNqQyx3QkFBeUIsQ0FBQyxhQUFjLGFBQ3hDLDRCQUE2QixDQUFDLGlCQUFrQixhQUNoRCxvQkFBcUIsQ0FBQyxTQUFVLGFBQ2hDLGlCQUFrQixDQUFDLE1BQU8sYUFDMUIsK0JBQWdDLENBQUMsb0JBQXFCLGFBQ3RELG9CQUFxQixDQUFDLFNBQVUsYUFDaEMsb0JBQXFCLENBQUMsU0FBVSxhQUNoQyx5QkFBMEIsQ0FBQyxjQUFlLGFBQzFDLHdCQUF5QixDQUFDLGFBQWMsYUFDeEMsdUJBQXdCLENBQUMsWUFBYSxhQUN0Qyx3QkFBeUIsQ0FBQyxhQUFjLGFBQ3hDLCtCQUFnQyxDQUFDLG9CQUFxQixhQUN0RCx5QkFBMEIsQ0FBQyxjQUFlLGFBQzFDLHlCQUEwQixDQUFDLGNBQWUsYUFDMUMsc0JBQXVCLENBQUMsV0FBWSxhQUNwQyxxQkFBc0IsQ0FBQyxVQUFXLGFBQ2xDLHFCQUFzQixDQUFDLFVBQVcsY0FHL0I5WixFQUFPLEVBQVEsTUFDZmtLLEVBQVMsRUFBUSxNQUNqQjAzQyxFQUFVNWhELEVBQUtNLEtBQUtvL0IsU0FBU3AvQixLQUFNeEIsTUFBTUMsVUFBVThFLFFBQ25EZytDLEVBQWU3aEQsRUFBS00sS0FBS28vQixTQUFTbmhDLE1BQU9PLE1BQU1DLFVBQVVxUSxRQUN6RDB5QyxFQUFXOWhELEVBQUtNLEtBQUtvL0IsU0FBU3AvQixLQUFNNEwsT0FBT25OLFVBQVV3UixTQUNyRHd4QyxFQUFZL2hELEVBQUtNLEtBQUtvL0IsU0FBU3AvQixLQUFNNEwsT0FBT25OLFVBQVU2RSxPQUN0RG8rQyxFQUFRaGlELEVBQUtNLEtBQUtvL0IsU0FBU3AvQixLQUFNbWYsT0FBTzFnQixVQUFVaTlCLE1BR2xEaW1CLEVBQWEscUdBQ2JDLEVBQWUsV0FpQmZDLEVBQW1CLFNBQTBCdGlELEVBQU1DLEdBQ3RELElBQ0l1bUIsRUFEQSs3QixFQUFnQnZpRCxFQU9wQixHQUxJcUssRUFBT3kzQyxFQUFnQlMsS0FFMUJBLEVBQWdCLEtBRGhCLzdCLEVBQVFzN0IsRUFBZVMsSUFDSyxHQUFLLEtBRzlCbDRDLEVBQU8wMUMsRUFBWXdDLEdBQWdCLENBQ3RDLElBQUl4aEQsRUFBUWcvQyxFQUFXd0MsR0FJdkIsR0FISXhoRCxJQUFVNitDLElBQ2I3K0MsRUFBUTZnRCxFQUFPVyxTQUVLLElBQVZ4aEQsSUFBMEJkLEVBQ3BDLE1BQU0sSUFBSUksRUFBVyxhQUFlTCxFQUFPLHdEQUc1QyxNQUFPLENBQ053bUIsTUFBT0EsRUFDUHhtQixLQUFNdWlELEVBQ054aEQsTUFBT0EsRUFFVCxDQUVBLE1BQU0sSUFBSWlyQixFQUFhLGFBQWVoc0IsRUFBTyxtQkFDOUMsRUFFQTVDLEVBQU9DLFFBQVUsU0FBc0IyQyxFQUFNQyxHQUM1QyxHQUFvQixpQkFBVEQsR0FBcUMsSUFBaEJBLEVBQUtsQyxPQUNwQyxNQUFNLElBQUl1QyxFQUFXLDZDQUV0QixHQUFJeEMsVUFBVUMsT0FBUyxHQUE2QixrQkFBakJtQyxFQUNsQyxNQUFNLElBQUlJLEVBQVcsNkNBR3RCLEdBQW1DLE9BQS9COGhELEVBQU0sY0FBZW5pRCxHQUN4QixNQUFNLElBQUlnc0IsRUFBYSxzRkFFeEIsSUFBSXcyQixFQXREYyxTQUFzQnJpQixHQUN4QyxJQUFJcnJCLEVBQVFvdEMsRUFBVS9oQixFQUFRLEVBQUcsR0FDN0I5c0IsRUFBTzZ1QyxFQUFVL2hCLEdBQVMsR0FDOUIsR0FBYyxNQUFWcnJCLEdBQTBCLE1BQVR6QixFQUNwQixNQUFNLElBQUkyWSxFQUFhLGtEQUNqQixHQUFhLE1BQVQzWSxHQUEwQixNQUFWeUIsRUFDMUIsTUFBTSxJQUFJa1gsRUFBYSxrREFFeEIsSUFBSXZvQixFQUFTLEdBSWIsT0FIQXcrQyxFQUFTOWhCLEVBQVFpaUIsR0FBWSxTQUFVcnJDLEVBQU8wckMsRUFBUTEzQixFQUFPMjNCLEdBQzVEai9DLEVBQU9BLEVBQU8zRixRQUFVaXRCLEVBQVFrM0IsRUFBU1MsRUFBV0wsRUFBYyxNQUFRSSxHQUFVMXJDLENBQ3JGLElBQ090VCxDQUNSLENBeUNhay9DLENBQWEzaUQsR0FDckI0aUQsRUFBb0JKLEVBQU0xa0QsT0FBUyxFQUFJMGtELEVBQU0sR0FBSyxHQUVsRHRpRCxFQUFZb2lELEVBQWlCLElBQU1NLEVBQW9CLElBQUszaUQsR0FDNUQ0aUQsRUFBb0IzaUQsRUFBVUYsS0FDOUJlLEVBQVFiLEVBQVVhLE1BQ2xCK2hELEdBQXFCLEVBRXJCdDhCLEVBQVF0bUIsRUFBVXNtQixNQUNsQkEsSUFDSG84QixFQUFvQnA4QixFQUFNLEdBQzFCdzdCLEVBQWFRLEVBQU9ULEVBQVEsQ0FBQyxFQUFHLEdBQUl2N0IsS0FHckMsSUFBSyxJQUFJcGtCLEVBQUksRUFBRzJnRCxHQUFRLEVBQU0zZ0QsRUFBSW9nRCxFQUFNMWtELE9BQVFzRSxHQUFLLEVBQUcsQ0FDdkQsSUFBSTRnRCxFQUFPUixFQUFNcGdELEdBQ2IwUyxFQUFRb3RDLEVBQVVjLEVBQU0sRUFBRyxHQUMzQjN2QyxFQUFPNnVDLEVBQVVjLEdBQU8sR0FDNUIsSUFFYSxNQUFWbHVDLEdBQTJCLE1BQVZBLEdBQTJCLE1BQVZBLEdBQ3RCLE1BQVR6QixHQUF5QixNQUFUQSxHQUF5QixNQUFUQSxJQUVsQ3lCLElBQVV6QixFQUViLE1BQU0sSUFBSTJZLEVBQWEsd0RBU3hCLEdBUGEsZ0JBQVRnM0IsR0FBMkJELElBQzlCRCxHQUFxQixHQU1sQno0QyxFQUFPMDFDLEVBRlg4QyxFQUFvQixLQURwQkQsR0FBcUIsSUFBTUksR0FDbUIsS0FHN0NqaUQsRUFBUWcvQyxFQUFXOEMsUUFDYixHQUFhLE1BQVQ5aEQsRUFBZSxDQUN6QixLQUFNaWlELEtBQVFqaUQsR0FBUSxDQUNyQixJQUFLZCxFQUNKLE1BQU0sSUFBSUksRUFBVyxzQkFBd0JMLEVBQU8sK0NBRXJELE1BQ0QsQ0FDQSxHQUFJcS9DLEdBQVVqOUMsRUFBSSxHQUFNb2dELEVBQU0xa0QsT0FBUSxDQUNyQyxJQUFJZ0YsRUFBT3U4QyxFQUFNdCtDLEVBQU9paUQsR0FXdkJqaUQsR0FWRGdpRCxJQUFVamdELElBU0csUUFBU0EsS0FBVSxrQkFBbUJBLEVBQUtNLEtBQy9DTixFQUFLTSxJQUVMckMsRUFBTWlpRCxFQUVoQixNQUNDRCxFQUFRMTRDLEVBQU90SixFQUFPaWlELEdBQ3RCamlELEVBQVFBLEVBQU1paUQsR0FHWEQsSUFBVUQsSUFDYi9DLEVBQVc4QyxHQUFxQjloRCxFQUVsQyxDQUNELENBQ0EsT0FBT0EsQ0FDUiwrQkNwV0EsSUFFSXMrQyxFQUZlLEVBQVEsSUFFZnYvQyxDQUFhLHFDQUFxQyxHQUU5RCxHQUFJdS9DLEVBQ0gsSUFDQ0EsRUFBTSxHQUFJLFNBQ1gsQ0FBRSxNQUFPbDVDLEdBRVJrNUMsRUFBUSxJQUNULENBR0RqaUQsRUFBT0MsUUFBVWdpRCw4QkNiakIsSUFBSTMrQyxFQUFrQixFQUFRLEtBRTFCdWlELEVBQXlCLFdBQzVCLFFBQVN2aUQsQ0FDVixFQUVBdWlELEVBQXVCQyx3QkFBMEIsV0FFaEQsSUFBS3hpRCxFQUNKLE9BQU8sS0FFUixJQUNDLE9BQThELElBQXZEQSxFQUFnQixHQUFJLFNBQVUsQ0FBRUssTUFBTyxJQUFLakQsTUFDcEQsQ0FBRSxNQUFPcUksR0FFUixPQUFPLENBQ1IsQ0FDRCxFQUVBL0ksRUFBT0MsUUFBVTRsRCx1QkNuQmpCLElBQUkvM0MsRUFBTyxDQUNWK08sVUFBVyxLQUNYa3BDLElBQUssQ0FBQyxHQUdIbG1ELEVBQVUrRCxPQUdkNUQsRUFBT0MsUUFBVSxXQUVoQixNQUFPLENBQUU0YyxVQUFXL08sR0FBT2k0QyxNQUFRajRDLEVBQUtpNEMsT0FDbENqNEMsYUFBZ0JqTyxFQUN2QiwrQkNaQSxJQUFJbW1ELEVBQStCLG9CQUFYM3FDLFFBQTBCQSxPQUM5QzRxQyxFQUFnQixFQUFRLE1BRTVCam1ELEVBQU9DLFFBQVUsV0FDaEIsTUFBMEIsbUJBQWYrbEQsR0FDVyxtQkFBWDNxQyxRQUNzQixpQkFBdEIycUMsRUFBVyxRQUNPLGlCQUFsQjNxQyxPQUFPLFFBRVg0cUMsR0FDUix5QkNUQWptRCxFQUFPQyxRQUFVLFdBQ2hCLEdBQXNCLG1CQUFYb2IsUUFBaUUsbUJBQWpDelgsT0FBT2dzQixzQkFBd0MsT0FBTyxFQUNqRyxHQUErQixpQkFBcEJ2VSxPQUFPQyxTQUF5QixPQUFPLEVBRWxELElBQUk1SSxFQUFNLENBQUMsRUFDUGcyQixFQUFNcnRCLE9BQU8sUUFDYjZxQyxFQUFTdGlELE9BQU84a0MsR0FDcEIsR0FBbUIsaUJBQVJBLEVBQW9CLE9BQU8sRUFFdEMsR0FBNEMsb0JBQXhDOWtDLE9BQU85QixVQUFVMlIsU0FBU3BRLEtBQUtxbEMsR0FBOEIsT0FBTyxFQUN4RSxHQUErQyxvQkFBM0M5a0MsT0FBTzlCLFVBQVUyUixTQUFTcFEsS0FBSzZpRCxHQUFpQyxPQUFPLEVBWTNFLElBQUt4ZCxLQURMaDJCLEVBQUlnMkIsR0FEUyxHQUVEaDJCLEVBQU8sT0FBTyxFQUMxQixHQUEyQixtQkFBaEI5TyxPQUFPNkssTUFBbUQsSUFBNUI3SyxPQUFPNkssS0FBS2lFLEdBQUtoUyxPQUFnQixPQUFPLEVBRWpGLEdBQTBDLG1CQUEvQmtELE9BQU91aUQscUJBQWlGLElBQTNDdmlELE9BQU91aUQsb0JBQW9CenpDLEdBQUtoUyxPQUFnQixPQUFPLEVBRS9HLElBQUkwbEQsRUFBT3hpRCxPQUFPZ3NCLHNCQUFzQmxkLEdBQ3hDLEdBQW9CLElBQWhCMHpDLEVBQUsxbEQsUUFBZ0IwbEQsRUFBSyxLQUFPMWQsRUFBTyxPQUFPLEVBRW5ELElBQUs5a0MsT0FBTzlCLFVBQVV1a0QscUJBQXFCaGpELEtBQUtxUCxFQUFLZzJCLEdBQVEsT0FBTyxFQUVwRSxHQUErQyxtQkFBcEM5a0MsT0FBTytCLHlCQUF5QyxDQUMxRCxJQUFJdStCLEVBQWF0Z0MsT0FBTytCLHlCQUF5QitNLEVBQUtnMkIsR0FDdEQsR0FkWSxLQWNSeEUsRUFBV3ZnQyxRQUE4QyxJQUExQnVnQyxFQUFXbitCLFdBQXVCLE9BQU8sQ0FDN0UsQ0FFQSxPQUFPLENBQ1IsK0JDdkNBLElBQUlvcEIsRUFBYSxFQUFRLE1BR3pCbnZCLEVBQU9DLFFBQVUsV0FDaEIsT0FBT2t2QixPQUFrQjlULE9BQU9pckMsV0FDakMseUJDTEEsSUFBSW5oRCxFQUFpQixDQUFDLEVBQUVBLGVBQ3BCOUIsRUFBT28vQixTQUFTM2dDLFVBQVV1QixLQUU5QnJELEVBQU9DLFFBQVVvRCxFQUFLTixLQUFPTSxFQUFLTixLQUFLb0MsR0FBa0IsU0FBVS9FLEVBQUcwL0MsR0FDcEUsT0FBT3o4QyxFQUFLQSxLQUFLOEIsRUFBZ0IvRSxFQUFHMC9DLEVBQ3RDLCtCQ0xBLElBQUl6OEMsRUFBT28vQixTQUFTM2dDLFVBQVV1QixLQUMxQmtqRCxFQUFVM2lELE9BQU85QixVQUFVcUQsZUFDM0JwQyxFQUFPLEVBQVEsTUFHbkIvQyxFQUFPQyxRQUFVOEMsRUFBS00sS0FBS0EsRUFBTWtqRCxnQ0NMakMsSUFBSXhrRCxFQUFTLEVBQVEsTUFDakJ5a0QsRUFBVSxFQUFRLE1BRXRCeG1ELEVBQU9DLFFBQVUsU0FBdUI4YyxHQUN2QyxJQUFLQSxFQUNKLE1BQU8sR0FHUixJQUFJaFYsRUFBT3krQyxJQUNYLE9BQUl6cEMsSUFBZ0JoVixFQUFLMCtDLFFBQ2pCLEdBRUoxcEMsSUFBZ0JoVixFQUFLbTVDLElBQ2pCbjVDLEVBQUtDLFNBRU5qRyxFQUFPZ0csRUFBS0MsVUFBVSxTQUFVK0ssR0FDdEMsT0FBT0EsRUFBS2dLLGNBQWdCQSxDQUM3QixHQUNELCtCQ2xCQSxJQUVJMnBDLEVBRlksRUFBUSxLQUVaaG5ELENBQVUsd0JBRWxCcU0sRUFBTSxTQUFVbVMsRUFBS3lvQyxHQUV4QixJQURBLElBQUlDLEVBQVMsR0FDSjVoRCxFQUFJLEVBQUdBLEVBQUlrWixFQUFJeGQsT0FBUXNFLEdBQUssRUFDcEMwaEQsRUFBTUUsRUFBUUQsRUFBT3pvQyxFQUFJbFosR0FBSUEsSUFFOUIsT0FBTzRoRCxDQUNSLEVBRUlDLEVBQVksQ0FDZixDQUFDLGNBQWUsV0FDaEIsQ0FBQyxjQUFlLFdBQ2hCLENBQUMsc0JBQXVCLFdBQVksa0NBQ3BDLENBQUMsb0JBQXFCLE9BQVEsZUFDOUIsQ0FBQyxjQUFlLFlBQ2hCLENBQUMscUJBQXNCLFVBQVcsZUFDbEMsQ0FBQyxvQkFBcUIsUUFBUyxlQUMvQixDQUFDLGNBQWUsWUFDaEIsQ0FBQyxvQkFBcUIsU0FBVSxlQUNoQyxDQUFDLGNBQWUsTUFDaEIsQ0FBQyxjQUFlLFVBQ2hCLENBQUMsb0JBQXFCLElBQUssZUFFM0IsQ0FBQyxrQkFBbUIsT0FBUSxlQUM1QixDQUFDLG1CQUFvQixRQUFTLGVBQzlCLENBQUMsa0JBQW1CLE9BQVEsZUFDNUIsQ0FBQyxrQkFBbUIsT0FBUSxlQUM1QixDQUFDLGdCQUFpQixLQUFNLGVBQ3hCLENBQUMsb0JBQXFCLFVBQ3RCLENBQUMsb0JBQXFCLFVBQ3RCLENBQUMscUJBQXNCLFVBQVcsZUFDbEMsQ0FBQyxrQkFBbUIsT0FBUSxlQUM1QixDQUFDLHNCQUF1QixZQUN4QixDQUFDLG9CQUFxQixTQUFVLGVBQ2hDLENBQUMsdUJBQXdCLE9BQ3pCLENBQUMsaUJBQWtCLE9BQ25CLENBQUMsbUJBQW9CLE1BQ3JCLENBQUMsbUJBQW9CLFNBQ3JCLENBQUMsc0JBQXVCLFlBQ3hCLENBQUMsa0JBQW1CLFFBQ3BCLENBQUMsa0JBQW1CLFFBQ3BCLENBQUMsbUJBQW9CLFNBQ3JCLENBQUMsc0JBQXVCLFlBQ3hCLENBQUMsa0JBQW1CLFFBQ3BCLENBQUMscUJBQXNCLE1BQ3ZCLENBQUMscUJBQXNCLE1BQ3ZCLENBQUMscUJBQXNCLE1BQ3ZCLENBQUMscUJBQXNCLE1BQ3ZCLENBQUMscUJBQXNCLE1BQ3ZCLENBQUMscUJBQXNCLE1BQ3ZCLENBQUMsa0JBQW1CLFFBQ3BCLENBQUMsZ0JBQWlCLE1BQ2xCLENBQUMsb0JBQXFCLFVBQ3RCLENBQUMsbUJBQW9CLE9BQ3JCLENBQUMsbUJBQW9CLFNBQ3JCLENBQUMscUJBQXNCLFFBQVMsZUFDaEMsQ0FBQyxvQkFBcUIsU0FBVSxvQkFDaEMsQ0FBQyxtQkFBb0IsU0FDckIsQ0FBQyxvQkFBcUIsVUFDdEIsQ0FBQyxnQkFBaUIsTUFDbEIsQ0FBQyxrQkFBbUIsUUFDcEIsQ0FBQyxjQUFlLFFBQ2hCLENBQUMsaUJBQWtCLE9BQ25CLENBQUMscUJBQXNCLFdBQ3ZCLENBQUMsa0JBQW1CLFFBQ3BCLENBQUMsa0JBQW1CLFFBQ3BCLENBQUMsbUJBQW9CLFFBQVMsZUFDOUIsQ0FBQyxpQkFBa0IsT0FDbkIsQ0FBQyxpQkFBa0IsT0FDbkIsQ0FBQyxvQkFBcUIsVUFDdEIsQ0FBQyxtQkFBb0IsTUFDckIsQ0FBQyxzQkFBdUIsWUFDeEIsQ0FBQyxvQkFBcUIsVUFDdEIsQ0FBQyxvQkFBcUIsVUFDdEIsQ0FBQyx1QkFBd0IsS0FDekIsQ0FBQyxtQkFBb0IsU0FDckIsQ0FBQyxxQkFBc0IsVUFBVyxlQUNsQyxDQUFDLGlCQUFrQixPQUNuQixDQUFDLHNCQUF1QixXQUFZLGVBQ3BDLENBQUMsbUJBQW9CLElBQUsseUJBQzFCLENBQUMsbUJBQW9CLGFBQWMsbUJBQW9CLHlCQUN2RCxDQUFDLG9CQUFxQixVQUN0QixDQUFDLG9CQUFxQixVQUN0QixDQUFDLG9CQUFxQixTQUFVLGVBQ2hDLENBQUMsb0JBQXFCLFVBQ3RCLENBQUMsa0JBQW1CLE9BQVEsZUFDNUIsQ0FBQyxtQkFBb0IsU0FDckIsQ0FBQyxtQkFBb0IsU0FDckIsQ0FBQywwQkFBMkIsV0FDNUIsQ0FBQyx1QkFBd0IsS0FBTSw0QkFDL0IsQ0FBQyx1QkFBd0IsS0FBTSw4QkFDL0IsQ0FBQyxzQkFBdUIsTUFDeEIsQ0FBQyxzQkFBdUIsT0FDeEIsQ0FBQyxzQkFBdUIsWUFDeEIsQ0FBQywwQkFBMkIsU0FDNUIsQ0FBQywwQkFBMkIsU0FDNUIsQ0FBQywwQkFBMkIsU0FDNUIsQ0FBQyxzQkFBdUIsV0FBWSxlQUNwQyxDQUFDLHNCQUF1QixZQUN4QixDQUFDLGtCQUFtQixPQUFRLGVBQzVCLENBQUMsbUJBQW9CLFNBQ3JCLENBQUMsbUJBQW9CLFFBQVMsZUFDOUIsQ0FBQyxtQkFBb0IsTUFDckIsQ0FBQyxtQkFBb0IsU0FDckIsQ0FBQyxjQUFlLFFBQ2hCLENBQUMsY0FBZSxXQUNoQixDQUFDLGNBQWUsU0FDaEIsQ0FBQyxjQUFlLEtBQ2hCLENBQUMsY0FBZSxPQUNoQixDQUFDLGNBQWUsT0FDaEIsQ0FBQyxjQUFlLFFBQ2hCLENBQUMsY0FBZSxNQUNoQixDQUFDLHFCQUFzQixVQUFXLGVBQ2xDLENBQUMsY0FBZSxPQUNoQixDQUFDLGNBQWUsTUFDaEIsQ0FBQyxjQUFlLE1BQ2hCLENBQUMsY0FBZSxjQUNoQixDQUFDLGNBQWUsVUFDaEIsQ0FBQyxjQUFlLFVBQ2hCLENBQUMsY0FBZSxVQUNoQixDQUFDLGNBQWUsVUFDaEIsQ0FBQyxjQUFlLEtBQ2hCLENBQUMsY0FBZSxPQUNoQixDQUFDLGNBQWUsUUFDaEIsQ0FBQyxjQUFlLE9BQ2hCLENBQUMsY0FBZSxNQUNoQixDQUFDLGNBQWUsTUFDaEIsQ0FBQyxjQUFlLFFBQ2hCLENBQUMsY0FBZSxLQUNoQixDQUFDLGNBQWUsUUFDaEIsQ0FBQyxrQkFBbUIsT0FBUSxlQUM1QixDQUFDLGNBQWUsU0FDaEIsQ0FBQyxjQUFlLFVBQ2hCLENBQUMsY0FBZSxXQUNoQixDQUFDLGNBQWUsS0FDaEIsQ0FBQyxjQUFlLE9BQ2hCLENBQUMsY0FBZSxRQUliQyxFQUFpQixTQUEyQjcxQixFQUFLbFUsRUFBYTBwQyxHQUNqRSxHQUF3QixvQkFBYnhjLFVBQThELG1CQUEzQkEsU0FBU2tQLGNBQThCLENBQ3BGLElBQUk0TixFQUFTOWMsU0FBU2tQLGNBQWNsb0IsR0FBS2xVLFlBQ3pDLEdBQUlncUMsSUFBV04sRUFDZCxPQUFPTSxDQUVULENBQ0QsRUFFQS9tRCxFQUFPQyxRQUFVLFdBQ2hCLElBQUl3bUQsRUFBVSxFQUFBMWMsRUFBT2lkLG1CQUNyQixNQUFPLENBQ045RixJQUFLLEVBQUFuWCxFQUFPa2QsWUFDWmovQyxTQUFVK0QsRUFBSTg2QyxHQUFXLFNBQVVLLEdBS2xDLElBSkEsSUFFSUMsRUFDQUMsRUFIQUMsRUFBa0JILEVBQVMsR0FDM0JqMkIsRUFBTWkyQixFQUFTLEdBR1ZsaUQsRUFBSSxFQUFHQSxFQUFJdkUsVUFBVUMsU0FBVzBtRCxFQUFnQnBpRCxHQUFLLEVBRTdEb2lELEdBREFELEVBQVlELEVBQVNsaUQsS0FDUyxFQUFBK2tDLEVBQU9vZCxHQUV0QyxJQUFJcHFDLEVBQWMsRUFBQWd0QixFQUFPc2QsR0FFekIsTUFBTyxDQUNOdHFDLFlBQWErcEMsRUFBZTcxQixFQUFLbTJCLEVBQStCWCxHQUNoRVksZ0JBQWlCRCxFQUFpQkQsRUFBWUUsRUFDOUNDLG9CQUFxQkYsR0FBa0JycUMsRUFDdkNrVSxJQUFLQSxFQUVQLElBQ0F3MUIsUUFBU0EsRUFFWCxxQ0NqTEEsSUFBSXJoRCxFQUFtQi9FLE1BQVFBLEtBQUsrRSxrQkFBcUJ4QixPQUFPeUIsT0FBUyxTQUFVQyxFQUFHQyxFQUFHM0UsRUFBRzRFLFFBQzdFQyxJQUFQRCxJQUFrQkEsRUFBSzVFLEdBQzNCLElBQUk4RSxFQUFPOUIsT0FBTytCLHlCQUF5QkosRUFBRzNFLEdBQ3pDOEUsS0FBUyxRQUFTQSxHQUFRSCxFQUFFSyxXQUFhRixFQUFLRyxVQUFZSCxFQUFLSSxnQkFDbEVKLEVBQU8sQ0FBRUssWUFBWSxFQUFNQyxJQUFLLFdBQWEsT0FBT1QsRUFBRTNFLEVBQUksSUFFNURnRCxPQUFPQyxlQUFleUIsRUFBR0UsRUFBSUUsRUFDaEMsRUFBSSxTQUFVSixFQUFHQyxFQUFHM0UsRUFBRzRFLFFBQ1RDLElBQVBELElBQWtCQSxFQUFLNUUsR0FDM0IwRSxFQUFFRSxHQUFNRCxFQUFFM0UsRUFDYixHQUNHcUYsRUFBc0I1RixNQUFRQSxLQUFLNEYscUJBQXdCckMsT0FBT3lCLE9BQVMsU0FBVUMsRUFBR1ksR0FDeEZ0QyxPQUFPQyxlQUFleUIsRUFBRyxVQUFXLENBQUVTLFlBQVksRUFBTXBDLE1BQU91QyxHQUNsRSxFQUFJLFNBQVNaLEVBQUdZLEdBQ2JaLEVBQVcsUUFBSVksQ0FDbkIsR0FDSUMsRUFBZ0I5RixNQUFRQSxLQUFLOEYsY0FBaUIsU0FBVUMsR0FDeEQsR0FBSUEsR0FBT0EsRUFBSVIsV0FBWSxPQUFPUSxFQUNsQyxJQUFJQyxFQUFTLENBQUMsRUFDZCxHQUFXLE1BQVBELEVBQWEsSUFBSyxJQUFJeEYsS0FBS3dGLEVBQWUsWUFBTnhGLEdBQW1CZ0QsT0FBTzlCLFVBQVVxRCxlQUFlOUIsS0FBSytDLEVBQUt4RixJQUFJd0UsRUFBZ0JpQixFQUFRRCxFQUFLeEYsR0FFdEksT0FEQXFGLEVBQW1CSSxFQUFRRCxHQUNwQkMsQ0FDWCxFQUNBekMsT0FBT0MsZUFBZTVELEVBQVMsYUFBYyxDQUFFMEQsT0FBTyxJQUN0RDFELEVBQVFzbkQsWUFBUyxFQUNqQixJQUFJQyxFQUFpQnJoRCxFQUFhLEVBQVEsT0FDdENvNkIsRUFBYyxFQUFRLE1BQ3RCa25CLEVBQVcsSUFBSTcrQyxJQUFJLENBQ25CLFFBQ0EsU0FDQSxXQUNBLFNBQ0EsU0FDQSxXQUNBLGFBRUE4K0MsRUFBTyxJQUFJOStDLElBQUksQ0FBQyxNQUNoQisrQyxFQUFtQixJQUFJLytDLElBQUksQ0FBQyxRQUFTLFVBQ3JDZy9DLEVBQVUsSUFBSWgvQyxJQUFJLENBQUMsS0FBTSxPQUN6QmkvQyxFQUFVLElBQUlqL0MsSUFBSSxDQUFDLEtBQU0sT0FDekJrL0MsRUFBbUIsSUFBSXY5QixJQUFJLENBQzNCLENBQUMsS0FBTSxJQUFJM2hCLElBQUksQ0FBQyxLQUFNLEtBQU0sUUFDNUIsQ0FBQyxLQUFNLElBQUlBLElBQUksQ0FBQyxRQUNoQixDQUFDLEtBQU0sSUFBSUEsSUFBSSxDQUFDLFFBQVMsS0FBTSxRQUMvQixDQUFDLE9BQVEsSUFBSUEsSUFBSSxDQUFDLE9BQVEsT0FBUSxZQUNsQyxDQUFDLEtBQU0sSUFBSUEsSUFBSSxDQUFDLFFBQ2hCLENBQUMsSUFBSzgrQyxHQUNOLENBQUMsS0FBTUEsR0FDUCxDQUFDLEtBQU1BLEdBQ1AsQ0FBQyxLQUFNQSxHQUNQLENBQUMsS0FBTUEsR0FDUCxDQUFDLEtBQU1BLEdBQ1AsQ0FBQyxLQUFNQSxHQUNQLENBQUMsU0FBVUQsR0FDWCxDQUFDLFFBQVNBLEdBQ1YsQ0FBQyxTQUFVQSxHQUNYLENBQUMsU0FBVUEsR0FDWCxDQUFDLFdBQVlBLEdBQ2IsQ0FBQyxXQUFZQSxHQUNiLENBQUMsU0FBVSxJQUFJNytDLElBQUksQ0FBQyxZQUNwQixDQUFDLFdBQVksSUFBSUEsSUFBSSxDQUFDLFdBQVksWUFDbEMsQ0FBQyxLQUFNZy9DLEdBQ1AsQ0FBQyxLQUFNQSxHQUNQLENBQUMsVUFBV0YsR0FDWixDQUFDLFVBQVdBLEdBQ1osQ0FBQyxRQUFTQSxHQUNWLENBQUMsYUFBY0EsR0FDZixDQUFDLFVBQVdBLEdBQ1osQ0FBQyxNQUFPQSxHQUNSLENBQUMsS0FBTUEsR0FDUCxDQUFDLFdBQVlBLEdBQ2IsQ0FBQyxhQUFjQSxHQUNmLENBQUMsU0FBVUEsR0FDWCxDQUFDLFNBQVVBLEdBQ1gsQ0FBQyxPQUFRQSxHQUNULENBQUMsU0FBVUEsR0FDWCxDQUFDLEtBQU1BLEdBQ1AsQ0FBQyxPQUFRQSxHQUNULENBQUMsTUFBT0EsR0FDUixDQUFDLEtBQU1BLEdBQ1AsQ0FBQyxNQUFPQSxHQUNSLENBQUMsVUFBV0EsR0FDWixDQUFDLFFBQVNBLEdBQ1YsQ0FBQyxLQUFNQSxHQUNQLENBQUMsS0FBTUcsR0FDUCxDQUFDLEtBQU1BLEdBQ1AsQ0FBQyxRQUFTRixHQUNWLENBQUMsUUFBU0EsS0FFVkksRUFBZSxJQUFJbi9DLElBQUksQ0FDdkIsT0FDQSxPQUNBLFdBQ0EsS0FDQSxNQUNBLFVBQ0EsUUFDQSxRQUNBLEtBQ0EsTUFDQSxRQUNBLFVBQ0EsU0FDQSxPQUNBLE9BQ0EsUUFDQSxTQUNBLFFBQ0EsUUFFQW8vQyxFQUF5QixJQUFJcC9DLElBQUksQ0FBQyxPQUFRLFFBQzFDcS9DLEVBQTBCLElBQUlyL0MsSUFBSSxDQUNsQyxLQUNBLEtBQ0EsS0FDQSxLQUNBLFFBQ0EsaUJBQ0EsZ0JBQ0EsT0FDQSxVQUVBcy9DLEVBQVksUUFDWlgsRUFBd0IsV0FDeEIsU0FBU0EsRUFBT1ksRUFBS2xnRCxHQUVqQixJQUFJQyxFQUFJb04sRUFBSThRLEVBQUlDLEVBQUk2ZixPQURKLElBQVpqK0IsSUFBc0JBLEVBQVUsQ0FBQyxHQUVyQzVILEtBQUs0SCxRQUFVQSxFQUVmNUgsS0FBS216QixXQUFhLEVBRWxCbnpCLEtBQUtvc0IsU0FBVyxFQUtoQnBzQixLQUFLK25ELGFBQWUsRUFDcEIvbkQsS0FBS2dvRCxRQUFVLEdBQ2Zob0QsS0FBS2lvRCxXQUFhLEdBQ2xCam9ELEtBQUtrb0QsWUFBYyxHQUNuQmxvRCxLQUFLd04sUUFBVSxLQUNmeE4sS0FBS21vRCxNQUFRLEdBQ2Jub0QsS0FBS29vRCxlQUFpQixHQUN0QnBvRCxLQUFLcW9ELFFBQVUsR0FDZnJvRCxLQUFLc29ELGFBQWUsRUFFcEJ0b0QsS0FBS3VvRCxXQUFhLEVBRWxCdm9ELEtBQUt3b0QsT0FBUSxFQUNieG9ELEtBQUs4bkQsSUFBTUEsUUFBaUNBLEVBQU0sQ0FBQyxFQUNuRDluRCxLQUFLeW9ELGtCQUFxRCxRQUFoQzVnRCxFQUFLRCxFQUFRNFEscUJBQWtDLElBQVAzUSxFQUFnQkEsR0FBTUQsRUFBUTJGLFFBQ2hHdk4sS0FBS3lZLHdCQUMwQyxRQUExQ3hELEVBQUtyTixFQUFRNlEsK0JBQTRDLElBQVB4RCxFQUFnQkEsR0FBTXJOLEVBQVEyRixRQUNyRnZOLEtBQUswb0QsVUFBWSxJQUFrQyxRQUE1QjNpQyxFQUFLbmUsRUFBUStnRCxpQkFBOEIsSUFBUDVpQyxFQUFnQkEsRUFBS29oQyxFQUFlbHJDLFNBQVNqYyxLQUFLNEgsUUFBUzVILE1BQzlFLFFBQXZDNmxDLEdBQU03ZixFQUFLaG1CLEtBQUs4bkQsS0FBSzUxQixvQkFBaUMsSUFBUDJULEdBQXlCQSxFQUFHN2lDLEtBQUtnakIsRUFBSWhtQixLQUN6RixDQXNXQSxPQW5XQWtuRCxFQUFPemxELFVBQVVreEIsT0FBUyxTQUFVdFksRUFBTytSLEdBQ3ZDLElBQUl2a0IsRUFBSW9OLEVBQ0p2TixFQUFPMUgsS0FBSzRvRCxTQUFTdnVDLEVBQU8rUixHQUNoQ3BzQixLQUFLb3NCLFNBQVdBLEVBQVcsRUFDTyxRQUFqQ25YLEdBQU1wTixFQUFLN0gsS0FBSzhuRCxLQUFLbjFCLGNBQTJCLElBQVAxZCxHQUF5QkEsRUFBR2pTLEtBQUs2RSxFQUFJSCxHQUMvRTFILEtBQUttekIsV0FBYS9HLENBQ3RCLEVBRUE4NkIsRUFBT3psRCxVQUFVb25ELGFBQWUsU0FBVWhxQixHQUN0QyxJQUFJaDNCLEVBQUlvTixFQUtKcEQsRUFBUTdSLEtBQUswb0QsVUFBVUksa0JBQzNCOW9ELEtBQUtvc0IsU0FBV3ZhLEVBQVEsRUFDVSxRQUFqQ29ELEdBQU1wTixFQUFLN0gsS0FBSzhuRCxLQUFLbjFCLGNBQTJCLElBQVAxZCxHQUF5QkEsRUFBR2pTLEtBQUs2RSxHQUFJLEVBQUlxNEIsRUFBWS9HLGVBQWUwRixJQUM5RzcrQixLQUFLbXpCLFdBQWF0aEIsQ0FDdEIsRUFDQXExQyxFQUFPemxELFVBQVVzbkQsY0FBZ0IsU0FBVXhtRCxHQUN2QyxPQUFRdkMsS0FBSzRILFFBQVEyRixTQUFXbTZDLEVBQWE5K0MsSUFBSXJHLEVBQ3JELEVBRUEya0QsRUFBT3psRCxVQUFVdW5ELGNBQWdCLFNBQVUzdUMsRUFBTytSLEdBQzlDcHNCLEtBQUtvc0IsU0FBV0EsRUFDaEIsSUFBSTdwQixFQUFPdkMsS0FBSzRvRCxTQUFTdnVDLEVBQU8rUixHQUM1QnBzQixLQUFLeW9ELG9CQUNMbG1ELEVBQU9BLEVBQUttZCxlQUVoQjFmLEtBQUtpcEQsWUFBWTFtRCxFQUNyQixFQUNBMmtELEVBQU96bEQsVUFBVXduRCxZQUFjLFNBQVUxbUQsR0FDckMsSUFBSXNGLEVBQUlvTixFQUFJOFEsRUFBSUMsRUFDaEJobUIsS0FBSytuRCxhQUFlL25ELEtBQUttekIsV0FDekJuekIsS0FBS2dvRCxRQUFVemxELEVBQ2YsSUFBSTJtRCxHQUFnQmxwRCxLQUFLNEgsUUFBUTJGLFNBQVdrNkMsRUFBaUI5aEQsSUFBSXBELEdBQ2pFLEdBQUkybUQsRUFDQSxLQUFPbHBELEtBQUttb0QsTUFBTTluRCxPQUFTLEdBQ3ZCNm9ELEVBQWF0Z0QsSUFBSTVJLEtBQUttb0QsTUFBTW5vRCxLQUFLbW9ELE1BQU05bkQsT0FBUyxLQUFLLENBQ3JELElBQUltTCxFQUFVeEwsS0FBS21vRCxNQUFNajdCLE1BQ2EsUUFBckNqWSxHQUFNcE4sRUFBSzdILEtBQUs4bkQsS0FBS3QxQixrQkFBK0IsSUFBUHZkLEdBQXlCQSxFQUFHalMsS0FBSzZFLEVBQUkyRCxHQUFTLEVBQ2hHLENBRUN4TCxLQUFLK29ELGNBQWN4bUQsS0FDcEJ2QyxLQUFLbW9ELE1BQU03akQsS0FBSy9CLEdBQ1pvbEQsRUFBdUIvK0MsSUFBSXJHLEdBQzNCdkMsS0FBS29vRCxlQUFlOWpELE1BQUssR0FFcEJzakQsRUFBd0JoL0MsSUFBSXJHLElBQ2pDdkMsS0FBS29vRCxlQUFlOWpELE1BQUssSUFHUSxRQUF4QzBoQixHQUFNRCxFQUFLL2xCLEtBQUs4bkQsS0FBS2tCLHFCQUFrQyxJQUFQaGpDLEdBQXlCQSxFQUFHaGpCLEtBQUsraUIsRUFBSXhqQixHQUNsRnZDLEtBQUs4bkQsSUFBSXIxQixZQUNUenlCLEtBQUt3TixRQUFVLENBQUMsRUFDeEIsRUFDQTA1QyxFQUFPemxELFVBQVUwbkQsV0FBYSxTQUFVQyxHQUNwQyxJQUFJdmhELEVBQUlvTixFQUNSalYsS0FBS216QixXQUFhbnpCLEtBQUsrbkQsYUFDbkIvbkQsS0FBS3dOLFVBQ2dDLFFBQXBDeUgsR0FBTXBOLEVBQUs3SCxLQUFLOG5ELEtBQUtyMUIsaUJBQThCLElBQVB4ZCxHQUF5QkEsRUFBR2pTLEtBQUs2RSxFQUFJN0gsS0FBS2dvRCxRQUFTaG9ELEtBQUt3TixRQUFTNDdDLEdBQzlHcHBELEtBQUt3TixRQUFVLE1BRWZ4TixLQUFLOG5ELElBQUl0MUIsWUFBY3h5QixLQUFLK29ELGNBQWMvb0QsS0FBS2dvRCxVQUMvQ2hvRCxLQUFLOG5ELElBQUl0MUIsV0FBV3h5QixLQUFLZ29ELFNBQVMsR0FFdENob0QsS0FBS2dvRCxRQUFVLEVBQ25CLEVBRUFkLEVBQU96bEQsVUFBVTRuRCxhQUFlLFNBQVVqOUIsR0FDdENwc0IsS0FBS29zQixTQUFXQSxFQUNoQnBzQixLQUFLbXBELFlBQVcsR0FFaEJucEQsS0FBS216QixXQUFhL0csRUFBVyxDQUNqQyxFQUVBODZCLEVBQU96bEQsVUFBVSt3QixXQUFhLFNBQVVuWSxFQUFPK1IsR0FDM0MsSUFBSXZrQixFQUFJb04sRUFBSThRLEVBQUlDLEVBQUk2ZixFQUFJeWpCLEVBQ3hCdHBELEtBQUtvc0IsU0FBV0EsRUFDaEIsSUFBSTdwQixFQUFPdkMsS0FBSzRvRCxTQUFTdnVDLEVBQU8rUixHQVFoQyxHQVBJcHNCLEtBQUt5b0Qsb0JBQ0xsbUQsRUFBT0EsRUFBS21kLGdCQUVaaW9DLEVBQXVCLytDLElBQUlyRyxJQUMzQnFsRCxFQUF3QmgvQyxJQUFJckcsS0FDNUJ2QyxLQUFLb29ELGVBQWVsN0IsTUFFbkJsdEIsS0FBSytvRCxjQUFjeG1ELEdBbUJkdkMsS0FBSzRILFFBQVEyRixTQUFvQixPQUFUaEwsSUFFVyxRQUF4QzBTLEdBQU1wTixFQUFLN0gsS0FBSzhuRCxLQUFLa0IscUJBQWtDLElBQVAvekMsR0FBeUJBLEVBQUdqUyxLQUFLNkUsRUFBSSxNQUNqRCxRQUFwQ21lLEdBQU1ELEVBQUsvbEIsS0FBSzhuRCxLQUFLcjFCLGlCQUE4QixJQUFQek0sR0FBeUJBLEVBQUdoakIsS0FBSytpQixFQUFJLEtBQU0sQ0FBQyxHQUFHLEdBQ3RELFFBQXJDdWpDLEdBQU16akIsRUFBSzdsQyxLQUFLOG5ELEtBQUt0MUIsa0JBQStCLElBQVA4MkIsR0FBeUJBLEVBQUd0bUQsS0FBSzZpQyxFQUFJLE1BQU0sUUF2QjlELENBQzNCLElBQUl6ZCxFQUFNcG9CLEtBQUttb0QsTUFBTXJ4QixZQUFZdjBCLEdBQ2pDLElBQWEsSUFBVDZsQixFQUNBLEdBQUlwb0IsS0FBSzhuRCxJQUFJdDFCLFdBRVQsSUFEQSxJQUFJKzJCLEVBQVF2cEQsS0FBS21vRCxNQUFNOW5ELE9BQVMrbkIsRUFDekJtaEMsS0FFSHZwRCxLQUFLOG5ELElBQUl0MUIsV0FBV3h5QixLQUFLbW9ELE1BQU1qN0IsTUFBaUIsSUFBVnE4QixRQUkxQ3ZwRCxLQUFLbW9ELE1BQU05bkQsT0FBUytuQixPQUVsQnBvQixLQUFLNEgsUUFBUTJGLFNBQW9CLE1BQVRoTCxJQUU5QnZDLEtBQUtpcEQsWUFBWSxLQUNqQmpwRCxLQUFLd3BELGlCQUFnQixHQUU3QixDQVFBeHBELEtBQUttekIsV0FBYS9HLEVBQVcsQ0FDakMsRUFFQTg2QixFQUFPemxELFVBQVVnb0QsaUJBQW1CLFNBQVVyOUIsR0FDMUNwc0IsS0FBS29zQixTQUFXQSxFQUNacHNCLEtBQUs0SCxRQUFRMkYsU0FDYnZOLEtBQUs0SCxRQUFROGhELHNCQUNiMXBELEtBQUtvb0QsZUFBZXBvRCxLQUFLb29ELGVBQWUvbkQsT0FBUyxJQUNqREwsS0FBS3dwRCxpQkFBZ0IsR0FFckJ4cEQsS0FBS216QixXQUFhL0csRUFBVyxHQUk3QnBzQixLQUFLcXBELGFBQWFqOUIsRUFFMUIsRUFDQTg2QixFQUFPemxELFVBQVUrbkQsZ0JBQWtCLFNBQVVHLEdBQ3pDLElBQUk5aEQsRUFBSW9OLEVBQ0oxUyxFQUFPdkMsS0FBS2dvRCxRQUNoQmhvRCxLQUFLbXBELFdBQVdRLEdBRVozcEQsS0FBS21vRCxNQUFNbm9ELEtBQUttb0QsTUFBTTluRCxPQUFTLEtBQU9rQyxJQUVBLFFBQXJDMFMsR0FBTXBOLEVBQUs3SCxLQUFLOG5ELEtBQUt0MUIsa0JBQStCLElBQVB2ZCxHQUF5QkEsRUFBR2pTLEtBQUs2RSxFQUFJdEYsR0FBT29uRCxHQUMxRjNwRCxLQUFLbW9ELE1BQU1qN0IsTUFFbkIsRUFFQWc2QixFQUFPemxELFVBQVVtb0QsYUFBZSxTQUFVdnZDLEVBQU8rUixHQUM3Q3BzQixLQUFLbXpCLFdBQWE5WSxFQUNsQixJQUFJOVgsRUFBT3ZDLEtBQUs0b0QsU0FBU3Z1QyxFQUFPK1IsR0FDaENwc0IsS0FBS2lvRCxXQUFham9ELEtBQUt5WSx3QkFDakJsVyxFQUFLbWQsY0FDTG5kLENBQ1YsRUFFQTJrRCxFQUFPemxELFVBQVVvb0QsYUFBZSxTQUFVeHZDLEVBQU8rUixHQUM3Q3BzQixLQUFLa29ELGFBQWVsb0QsS0FBSzRvRCxTQUFTdnVDLEVBQU8rUixFQUM3QyxFQUVBODZCLEVBQU96bEQsVUFBVXFvRCxlQUFpQixTQUFVanJCLEdBQ3hDNytCLEtBQUtrb0QsY0FBZSxFQUFJaG9CLEVBQVkvRyxlQUFlMEYsRUFDdkQsRUFFQXFvQixFQUFPemxELFVBQVVzb0QsWUFBYyxTQUFVejhCLEVBQU9sQixHQUM1QyxJQUFJdmtCLEVBQUlvTixFQUNSalYsS0FBS29zQixTQUFXQSxFQUN1QixRQUF0Q25YLEdBQU1wTixFQUFLN0gsS0FBSzhuRCxLQUFLa0MsbUJBQWdDLElBQVAvMEMsR0FBeUJBLEVBQUdqUyxLQUFLNkUsRUFBSTdILEtBQUtpb0QsV0FBWWpvRCxLQUFLa29ELFlBQWE1NkIsSUFBVTY1QixFQUFlOEMsVUFBVUMsT0FDcEosSUFDQTU4QixJQUFVNjVCLEVBQWU4QyxVQUFVRSxPQUMvQixJQUNBNzhCLElBQVU2NUIsRUFBZThDLFVBQVVHLGFBQy9CaGxELEVBQ0EsTUFDVnBGLEtBQUt3TixVQUNKakssT0FBTzlCLFVBQVVxRCxlQUFlOUIsS0FBS2hELEtBQUt3TixRQUFTeE4sS0FBS2lvRCxjQUN6RGpvRCxLQUFLd04sUUFBUXhOLEtBQUtpb0QsWUFBY2pvRCxLQUFLa29ELGFBRXpDbG9ELEtBQUtrb0QsWUFBYyxFQUN2QixFQUNBaEIsRUFBT3psRCxVQUFVNG9ELG1CQUFxQixTQUFVL21ELEdBQzVDLElBQUl1TyxFQUFRdk8sRUFBTWlhLE9BQU9zcUMsR0FDckJ0bEQsRUFBT3NQLEVBQVEsRUFBSXZPLEVBQVFBLEVBQU0yZSxPQUFPLEVBQUdwUSxHQUkvQyxPQUhJN1IsS0FBS3lvRCxvQkFDTGxtRCxFQUFPQSxFQUFLbWQsZUFFVG5kLENBQ1gsRUFFQTJrRCxFQUFPemxELFVBQVU2b0QsY0FBZ0IsU0FBVWp3QyxFQUFPK1IsR0FDOUNwc0IsS0FBS29zQixTQUFXQSxFQUNoQixJQUFJOW9CLEVBQVF0RCxLQUFLNG9ELFNBQVN2dUMsRUFBTytSLEdBQ2pDLEdBQUlwc0IsS0FBSzhuRCxJQUFJOTBCLHdCQUF5QixDQUNsQyxJQUFJendCLEVBQU92QyxLQUFLcXFELG1CQUFtQi9tRCxHQUNuQ3RELEtBQUs4bkQsSUFBSTkwQix3QkFBd0IsSUFBSXpzQixPQUFPaEUsR0FBTyxJQUFJZ0UsT0FBT2pELEdBQ2xFLENBRUF0RCxLQUFLbXpCLFdBQWEvRyxFQUFXLENBQ2pDLEVBRUE4NkIsRUFBT3psRCxVQUFVdXhCLHdCQUEwQixTQUFVM1ksRUFBTytSLEdBQ3hEcHNCLEtBQUtvc0IsU0FBV0EsRUFDaEIsSUFBSTlvQixFQUFRdEQsS0FBSzRvRCxTQUFTdnVDLEVBQU8rUixHQUNqQyxHQUFJcHNCLEtBQUs4bkQsSUFBSTkwQix3QkFBeUIsQ0FDbEMsSUFBSXp3QixFQUFPdkMsS0FBS3FxRCxtQkFBbUIvbUQsR0FDbkN0RCxLQUFLOG5ELElBQUk5MEIsd0JBQXdCLElBQUl6c0IsT0FBT2hFLEdBQU8sSUFBSWdFLE9BQU9qRCxHQUNsRSxDQUVBdEQsS0FBS216QixXQUFhL0csRUFBVyxDQUNqQyxFQUVBODZCLEVBQU96bEQsVUFBVW14QixVQUFZLFNBQVV2WSxFQUFPK1IsRUFBVUksR0FDcEQsSUFBSTNrQixFQUFJb04sRUFBSThRLEVBQUlDLEVBQ2hCaG1CLEtBQUtvc0IsU0FBV0EsRUFDcUIsUUFBcENuWCxHQUFNcE4sRUFBSzdILEtBQUs4bkQsS0FBS2wxQixpQkFBOEIsSUFBUDNkLEdBQXlCQSxFQUFHalMsS0FBSzZFLEVBQUk3SCxLQUFLNG9ELFNBQVN2dUMsRUFBTytSLEVBQVdJLElBQzFFLFFBQXZDeEcsR0FBTUQsRUFBSy9sQixLQUFLOG5ELEtBQUtqMUIsb0JBQWlDLElBQVA3TSxHQUF5QkEsRUFBR2hqQixLQUFLK2lCLEdBRWpGL2xCLEtBQUttekIsV0FBYS9HLEVBQVcsQ0FDakMsRUFFQTg2QixFQUFPemxELFVBQVU4b0QsUUFBVSxTQUFVbHdDLEVBQU8rUixFQUFVSSxHQUNsRCxJQUFJM2tCLEVBQUlvTixFQUFJOFEsRUFBSUMsRUFBSTZmLEVBQUl5akIsRUFBSWtCLEVBQUlDLEVBQUlDLEVBQUkzcEMsRUFDeEMvZ0IsS0FBS29zQixTQUFXQSxFQUNoQixJQUFJOW9CLEVBQVF0RCxLQUFLNG9ELFNBQVN2dUMsRUFBTytSLEVBQVdJLEdBQ3hDeHNCLEtBQUs0SCxRQUFRMkYsU0FBV3ZOLEtBQUs0SCxRQUFRK2lELGdCQUNHLFFBQXZDMTFDLEdBQU1wTixFQUFLN0gsS0FBSzhuRCxLQUFLaDFCLG9CQUFpQyxJQUFQN2QsR0FBeUJBLEVBQUdqUyxLQUFLNkUsR0FDL0MsUUFBakNtZSxHQUFNRCxFQUFLL2xCLEtBQUs4bkQsS0FBS24xQixjQUEyQixJQUFQM00sR0FBeUJBLEVBQUdoakIsS0FBSytpQixFQUFJemlCLEdBQ3pDLFFBQXJDZ21ELEdBQU16akIsRUFBSzdsQyxLQUFLOG5ELEtBQUsvMEIsa0JBQStCLElBQVB1MkIsR0FBeUJBLEVBQUd0bUQsS0FBSzZpQyxLQUcxQyxRQUFwQzRrQixHQUFNRCxFQUFLeHFELEtBQUs4bkQsS0FBS2wxQixpQkFBOEIsSUFBUDYzQixHQUF5QkEsRUFBR3puRCxLQUFLd25ELEVBQUksVUFBVWprRCxPQUFPakQsRUFBTyxPQUNsRSxRQUF2Q3lkLEdBQU0ycEMsRUFBSzFxRCxLQUFLOG5ELEtBQUtqMUIsb0JBQWlDLElBQVA5UixHQUF5QkEsRUFBRy9kLEtBQUswbkQsSUFHckYxcUQsS0FBS216QixXQUFhL0csRUFBVyxDQUNqQyxFQUVBODZCLEVBQU96bEQsVUFBVTJ3QixNQUFRLFdBQ3JCLElBQUl2cUIsRUFBSW9OLEVBQ1IsR0FBSWpWLEtBQUs4bkQsSUFBSXQxQixXQUFZLENBRXJCeHlCLEtBQUtvc0IsU0FBV3BzQixLQUFLbXpCLFdBQ3JCLElBQUssSUFBSXRoQixFQUFRN1IsS0FBS21vRCxNQUFNOW5ELE9BQVF3UixFQUFRLEVBQUc3UixLQUFLOG5ELElBQUl0MUIsV0FBV3h5QixLQUFLbW9ELFFBQVF0MkMsSUFBUSxJQUU1RixDQUNpQyxRQUFoQ29ELEdBQU1wTixFQUFLN0gsS0FBSzhuRCxLQUFLMTFCLGFBQTBCLElBQVBuZCxHQUF5QkEsRUFBR2pTLEtBQUs2RSxFQUM5RSxFQUlBcS9DLEVBQU96bEQsVUFBVThsQixNQUFRLFdBQ3JCLElBQUkxZixFQUFJb04sRUFBSThRLEVBQUlDLEVBQ21CLFFBQWxDL1EsR0FBTXBOLEVBQUs3SCxLQUFLOG5ELEtBQUszMUIsZUFBNEIsSUFBUGxkLEdBQXlCQSxFQUFHalMsS0FBSzZFLEdBQzVFN0gsS0FBSzBvRCxVQUFVbmhDLFFBQ2Z2bkIsS0FBS2dvRCxRQUFVLEdBQ2Zob0QsS0FBS2lvRCxXQUFhLEdBQ2xCam9ELEtBQUt3TixRQUFVLEtBQ2Z4TixLQUFLbW9ELE1BQU05bkQsT0FBUyxFQUNwQkwsS0FBS216QixXQUFhLEVBQ2xCbnpCLEtBQUtvc0IsU0FBVyxFQUN3QixRQUF2Q3BHLEdBQU1ELEVBQUsvbEIsS0FBSzhuRCxLQUFLNTFCLG9CQUFpQyxJQUFQbE0sR0FBeUJBLEVBQUdoakIsS0FBSytpQixFQUFJL2xCLE1BQ3JGQSxLQUFLcW9ELFFBQVFob0QsT0FBUyxFQUN0QkwsS0FBS3NvRCxhQUFlLEVBQ3BCdG9ELEtBQUt1b0QsV0FBYSxFQUNsQnZvRCxLQUFLd29ELE9BQVEsQ0FDakIsRUFPQXRCLEVBQU96bEQsVUFBVW1wRCxjQUFnQixTQUFVbGpELEdBQ3ZDMUgsS0FBS3VuQixRQUNMdm5CLEtBQUtpUixJQUFJdkosRUFDYixFQUNBdy9DLEVBQU96bEQsVUFBVW1uRCxTQUFXLFNBQVV2dUMsRUFBT3BKLEdBQ3pDLEtBQU9vSixFQUFRcmEsS0FBS3NvRCxjQUFnQnRvRCxLQUFLcW9ELFFBQVEsR0FBR2hvRCxRQUNoREwsS0FBSzZxRCxjQUdULElBREEsSUFBSXZrRCxFQUFRdEcsS0FBS3FvRCxRQUFRLEdBQUcvaEQsTUFBTStULEVBQVFyYSxLQUFLc29ELGFBQWNyM0MsRUFBTWpSLEtBQUtzb0QsY0FDakVyM0MsRUFBTWpSLEtBQUtzb0QsYUFBZXRvRCxLQUFLcW9ELFFBQVEsR0FBR2hvRCxRQUM3Q0wsS0FBSzZxRCxjQUNMdmtELEdBQVN0RyxLQUFLcW9ELFFBQVEsR0FBRy9oRCxNQUFNLEVBQUcySyxFQUFNalIsS0FBS3NvRCxjQUVqRCxPQUFPaGlELENBQ1gsRUFDQTRnRCxFQUFPemxELFVBQVVvcEQsWUFBYyxXQUMzQjdxRCxLQUFLc29ELGNBQWdCdG9ELEtBQUtxb0QsUUFBUSxHQUFHaG9ELE9BQ3JDTCxLQUFLdW9ELGFBQ0x2b0QsS0FBS3FvRCxRQUFRN3ZCLE9BQ2pCLEVBTUEwdUIsRUFBT3psRCxVQUFVbTVCLE1BQVEsU0FBVWt3QixHQUMvQixJQUFJampELEVBQUlvTixFQUNKalYsS0FBS3dvRCxNQUM4QixRQUFsQ3Z6QyxHQUFNcE4sRUFBSzdILEtBQUs4bkQsS0FBS3gxQixlQUE0QixJQUFQcmQsR0FBeUJBLEVBQUdqUyxLQUFLNkUsRUFBSSxJQUFJc0gsTUFBTSwwQkFHOUZuUCxLQUFLcW9ELFFBQVEvakQsS0FBS3dtRCxHQUNkOXFELEtBQUswb0QsVUFBVXFDLFVBQ2YvcUQsS0FBSzBvRCxVQUFVOXRCLE1BQU1rd0IsR0FDckI5cUQsS0FBS3VvRCxjQUViLEVBTUFyQixFQUFPemxELFVBQVV3UCxJQUFNLFNBQVU2NUMsR0FDN0IsSUFBSWpqRCxFQUFJb04sRUFDSmpWLEtBQUt3b0QsTUFDOEIsUUFBbEN2ekMsR0FBTXBOLEVBQUs3SCxLQUFLOG5ELEtBQUt4MUIsZUFBNEIsSUFBUHJkLEdBQXlCQSxFQUFHalMsS0FBSzZFLEVBQUksSUFBSXNILE1BQU0sd0JBRzFGMjdDLEdBQ0E5cUQsS0FBSzQ2QixNQUFNa3dCLEdBQ2Y5cUQsS0FBS3dvRCxPQUFRLEVBQ2J4b0QsS0FBSzBvRCxVQUFVejNDLE1BQ25CLEVBSUFpMkMsRUFBT3psRCxVQUFVdXBELE1BQVEsV0FDckJockQsS0FBSzBvRCxVQUFVc0MsT0FDbkIsRUFJQTlELEVBQU96bEQsVUFBVXdwRCxPQUFTLFdBRXRCLElBREFqckQsS0FBSzBvRCxVQUFVdUMsU0FDUmpyRCxLQUFLMG9ELFVBQVVxQyxTQUNsQi9xRCxLQUFLdW9ELFdBQWF2b0QsS0FBS3FvRCxRQUFRaG9ELFFBQy9CTCxLQUFLMG9ELFVBQVU5dEIsTUFBTTU2QixLQUFLcW9ELFFBQVFyb0QsS0FBS3VvRCxlQUV2Q3ZvRCxLQUFLd29ELE9BQ0x4b0QsS0FBSzBvRCxVQUFVejNDLEtBQ3ZCLEVBT0FpMkMsRUFBT3psRCxVQUFVeXBELFdBQWEsU0FBVUosR0FDcEM5cUQsS0FBSzQ2QixNQUFNa3dCLEVBQ2YsRUFPQTVELEVBQU96bEQsVUFBVXN3QixLQUFPLFNBQVUrNEIsR0FDOUI5cUQsS0FBS2lSLElBQUk2NUMsRUFDYixFQUNPNUQsQ0FDWCxDQXZZMkIsR0F3WTNCdG5ELEVBQVFzbkQsT0FBU0EsK0JDbmdCakIzakQsT0FBT0MsZUFBZTVELEVBQVMsYUFBYyxDQUFFMEQsT0FBTyxJQUN0RDFELEVBQVFxcUQsZUFBWSxFQUNwQixJQUNJdHdCLEVBK0JBd3hCLEVBMERBbEIsRUExRkEvcEIsRUFBYyxFQUFRLE1BcUUxQixTQUFTL1QsRUFBYUQsR0FDbEIsT0FBUUEsSUFBTXlOLEVBQVV5eEIsT0FDcEJsL0IsSUFBTXlOLEVBQVUweEIsU0FDaEJuL0IsSUFBTXlOLEVBQVUyeEIsS0FDaEJwL0IsSUFBTXlOLEVBQVU0eEIsVUFDaEJyL0IsSUFBTXlOLEVBQVU2eEIsY0FDeEIsQ0FDQSxTQUFTQyxFQUFrQnYvQixHQUN2QixPQUFPQSxJQUFNeU4sRUFBVSt4QixPQUFTeC9CLElBQU15TixFQUFVZ3lCLElBQU14L0IsRUFBYUQsRUFDdkUsQ0FDQSxTQUFTNE4sRUFBUzVOLEdBQ2QsT0FBT0EsR0FBS3lOLEVBQVVpeUIsTUFBUTEvQixHQUFLeU4sRUFBVWt5QixJQUNqRCxFQS9FQSxTQUFXbHlCLEdBQ1BBLEVBQVVBLEVBQWUsSUFBSSxHQUFLLE1BQ2xDQSxFQUFVQSxFQUFtQixRQUFJLElBQU0sVUFDdkNBLEVBQVVBLEVBQW9CLFNBQUksSUFBTSxXQUN4Q0EsRUFBVUEsRUFBMEIsZUFBSSxJQUFNLGlCQUM5Q0EsRUFBVUEsRUFBaUIsTUFBSSxJQUFNLFFBQ3JDQSxFQUFVQSxFQUEyQixnQkFBSSxJQUFNLGtCQUMvQ0EsRUFBVUEsRUFBa0IsT0FBSSxJQUFNLFNBQ3RDQSxFQUFVQSxFQUFlLElBQUksSUFBTSxNQUNuQ0EsRUFBVUEsRUFBdUIsWUFBSSxJQUFNLGNBQzNDQSxFQUFVQSxFQUF1QixZQUFJLElBQU0sY0FDM0NBLEVBQVVBLEVBQWdCLEtBQUksSUFBTSxPQUNwQ0EsRUFBVUEsRUFBaUIsTUFBSSxJQUFNLFFBQ3JDQSxFQUFVQSxFQUFnQixLQUFJLElBQU0sT0FDcENBLEVBQVVBLEVBQWdCLEtBQUksSUFBTSxPQUNwQ0EsRUFBVUEsRUFBZ0IsS0FBSSxJQUFNLE9BQ3BDQSxFQUFVQSxFQUFjLEdBQUksSUFBTSxLQUNsQ0EsRUFBVUEsRUFBYyxHQUFJLElBQU0sS0FDbENBLEVBQVVBLEVBQWMsR0FBSSxJQUFNLEtBQ2xDQSxFQUFVQSxFQUF3QixhQUFJLElBQU0sZUFDNUNBLEVBQVVBLEVBQWtCLE9BQUksSUFBTSxTQUN0Q0EsRUFBVUEsRUFBa0IsT0FBSSxJQUFNLFNBQ3RDQSxFQUFVQSxFQUFrQixPQUFJLElBQU0sU0FDdENBLEVBQVVBLEVBQWtCLE9BQUksS0FBTyxTQUN2Q0EsRUFBVUEsRUFBa0IsT0FBSSxJQUFNLFNBQ3RDQSxFQUFVQSxFQUFrQixPQUFJLEtBQU8sU0FDdkNBLEVBQVVBLEVBQWtCLE9BQUksS0FBTyxTQUN2Q0EsRUFBVUEsRUFBZ0MscUJBQUksSUFBTSxzQkFDdkQsQ0E1QkQsQ0E0QkdBLElBQWNBLEVBQVksQ0FBQyxJQUc5QixTQUFXd3hCLEdBQ1BBLEVBQU1BLEVBQVksS0FBSSxHQUFLLE9BQzNCQSxFQUFNQSxFQUFxQixjQUFJLEdBQUssZ0JBQ3BDQSxFQUFNQSxFQUFpQixVQUFJLEdBQUssWUFDaENBLEVBQU1BLEVBQXdCLGlCQUFJLEdBQUssbUJBQ3ZDQSxFQUFNQSxFQUE0QixxQkFBSSxHQUFLLHVCQUMzQ0EsRUFBTUEsRUFBd0IsaUJBQUksR0FBSyxtQkFDdkNBLEVBQU1BLEVBQTJCLG9CQUFJLEdBQUssc0JBRTFDQSxFQUFNQSxFQUEyQixvQkFBSSxHQUFLLHNCQUMxQ0EsRUFBTUEsRUFBdUIsZ0JBQUksR0FBSyxrQkFDdENBLEVBQU1BLEVBQTBCLG1CQUFJLElBQU0scUJBQzFDQSxFQUFNQSxFQUE0QixxQkFBSSxJQUFNLHVCQUM1Q0EsRUFBTUEsRUFBMEIsbUJBQUksSUFBTSxxQkFDMUNBLEVBQU1BLEVBQTBCLG1CQUFJLElBQU0scUJBQzFDQSxFQUFNQSxFQUEwQixtQkFBSSxJQUFNLHFCQUUxQ0EsRUFBTUEsRUFBeUIsa0JBQUksSUFBTSxvQkFDekNBLEVBQU1BLEVBQXFCLGNBQUksSUFBTSxnQkFFckNBLEVBQU1BLEVBQStCLHdCQUFJLElBQU0sMEJBRS9DQSxFQUFNQSxFQUFxQixjQUFJLElBQU0sZ0JBQ3JDQSxFQUFNQSxFQUFxQixjQUFJLElBQU0sZ0JBQ3JDQSxFQUFNQSxFQUF3QixpQkFBSSxJQUFNLG1CQUN4Q0EsRUFBTUEsRUFBcUIsY0FBSSxJQUFNLGdCQUVyQ0EsRUFBTUEsRUFBc0IsZUFBSSxJQUFNLGlCQUN0Q0EsRUFBTUEsRUFBNEIscUJBQUksSUFBTSx1QkFDNUNBLEVBQU1BLEVBQW9CLGFBQUksSUFBTSxlQUNwQ0EsRUFBTUEsRUFBb0IsYUFBSSxJQUFNLGVBQ3BDQSxFQUFNQSxFQUEyQixvQkFBSSxJQUFNLHNCQUMzQ0EsRUFBTUEsRUFBcUIsY0FBSSxJQUFNLGdCQUNyQ0EsRUFBTUEsRUFBdUIsZ0JBQUksSUFBTSxrQkFDdkNBLEVBQU1BLEVBQW1CLFlBQUksSUFBTSxhQUN0QyxDQW5DRCxDQW1DR0EsSUFBVUEsRUFBUSxDQUFDLElBdUJ0QixTQUFXbEIsR0FDUEEsRUFBVUEsRUFBbUIsUUFBSSxHQUFLLFVBQ3RDQSxFQUFVQSxFQUFvQixTQUFJLEdBQUssV0FDdkNBLEVBQVVBLEVBQWtCLE9BQUksR0FBSyxTQUNyQ0EsRUFBVUEsRUFBa0IsT0FBSSxHQUFLLFFBQ3hDLENBTEQsQ0FLR0EsRUFBWXJxRCxFQUFRcXFELFlBQWNycUQsRUFBUXFxRCxVQUFZLENBQUMsSUFPMUQsSUFBSTZCLEVBQVksQ0FDWkMsTUFBTyxJQUFJMUosV0FBVyxDQUFDLEdBQU0sR0FBTSxHQUFNLEdBQU0sR0FBTSxLQUNyRDJKLFNBQVUsSUFBSTNKLFdBQVcsQ0FBQyxHQUFNLEdBQU0sS0FDdEM0SixXQUFZLElBQUk1SixXQUFXLENBQUMsR0FBTSxHQUFNLEtBQ3hDNkosVUFBVyxJQUFJN0osV0FBVyxDQUFDLEdBQU0sR0FBTSxJQUFNLEdBQU0sSUFBTSxJQUFNLElBQU0sTUFDckU4SixTQUFVLElBQUk5SixXQUFXLENBQUMsR0FBTSxHQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sTUFDOUQrSixTQUFVLElBQUkvSixXQUFXLENBQUMsR0FBTSxHQUFNLElBQU0sSUFBTSxJQUFNLElBQU0sT0FFOURzRyxFQUEyQixXQUMzQixTQUFTQSxFQUFVOWdELEVBQUlpZ0QsR0FDbkIsSUFBSTd5QyxFQUFLcE4sRUFBRzBGLFFBQVNBLE9BQWlCLElBQVAwSCxHQUF3QkEsRUFBSThRLEVBQUtsZSxFQUFHNlYsZUFBZ0JBLE9BQXdCLElBQVBxSSxHQUF1QkEsRUFDM0gvbEIsS0FBSzhuRCxJQUFNQSxFQUVYOW5ELEtBQUtnUyxNQUFRbTVDLEVBQU1qMEMsS0FFbkJsWCxLQUFLcXNELE9BQVMsR0FFZHJzRCxLQUFLc3NELGFBQWUsRUFFcEJ0c0QsS0FBSzZSLE1BQVEsRUFFYjdSLEtBQUt1c0QsVUFBWXBCLEVBQU1qMEMsS0FFdkJsWCxLQUFLd3NELFdBQVksRUFFakJ4c0QsS0FBSytxRCxTQUFVLEVBRWYvcUQsS0FBS3dzQixPQUFTLEVBQ2R4c0IsS0FBS3lzRCxxQkFBa0JybkQsRUFDdkJwRixLQUFLMHNELGNBQWdCLEVBQ3JCMXNELEtBQUsyc0QsVUFBWSxFQUNqQjNzRCxLQUFLNHNELFlBQWMsRUFFbkI1c0QsS0FBSzZzRCxhQUFlLEVBQ3BCN3NELEtBQUs4c0QsYUFBZSxFQUNwQjlzRCxLQUFLdU4sUUFBVUEsRUFDZnZOLEtBQUswZCxlQUFpQkEsRUFDdEIxZCxLQUFLK3NELFdBQWF4L0MsRUFBVTJ5QixFQUFZNUcsY0FBZ0I0RyxFQUFZM0csY0FDeEUsQ0FzeEJBLE9BcnhCQW92QixFQUFVbG5ELFVBQVU4bEIsTUFBUSxXQUN4QnZuQixLQUFLZ1MsTUFBUW01QyxFQUFNajBDLEtBQ25CbFgsS0FBS3FzRCxPQUFTLEdBQ2Ryc0QsS0FBS3NzRCxhQUFlLEVBQ3BCdHNELEtBQUs2UixNQUFRLEVBQ2I3UixLQUFLdXNELFVBQVlwQixFQUFNajBDLEtBQ3ZCbFgsS0FBS3lzRCxxQkFBa0JybkQsRUFDdkJwRixLQUFLK3FELFNBQVUsRUFDZi9xRCxLQUFLd3NCLE9BQVMsQ0FDbEIsRUFDQW04QixFQUFVbG5ELFVBQVVtNUIsTUFBUSxTQUFVa3dCLEdBQ2xDOXFELEtBQUt3c0IsUUFBVXhzQixLQUFLcXNELE9BQU9oc0QsT0FDM0JMLEtBQUtxc0QsT0FBU3ZCLEVBQ2Q5cUQsS0FBSzhILE9BQ1QsRUFDQTZnRCxFQUFVbG5ELFVBQVV3UCxJQUFNLFdBQ2xCalIsS0FBSytxRCxTQUNML3FELEtBQUtndEQsUUFDYixFQUNBckUsRUFBVWxuRCxVQUFVdXBELE1BQVEsV0FDeEJockQsS0FBSytxRCxTQUFVLENBQ25CLEVBQ0FwQyxFQUFVbG5ELFVBQVV3cEQsT0FBUyxXQUN6QmpyRCxLQUFLK3FELFNBQVUsRUFDWC9xRCxLQUFLNlIsTUFBUTdSLEtBQUtxc0QsT0FBT2hzRCxPQUFTTCxLQUFLd3NCLFFBQ3ZDeHNCLEtBQUs4SCxPQUViLEVBSUE2Z0QsRUFBVWxuRCxVQUFVd3JELFNBQVcsV0FDM0IsT0FBT2p0RCxLQUFLNlIsS0FDaEIsRUFJQTgyQyxFQUFVbG5ELFVBQVVxbkQsZ0JBQWtCLFdBQ2xDLE9BQU85b0QsS0FBS3NzRCxZQUNoQixFQUNBM0QsRUFBVWxuRCxVQUFVeXJELFVBQVksU0FBVWhoQyxHQUNsQ0EsSUFBTXlOLEVBQVV3ekIsS0FDZG50RCxLQUFLMGQsZ0JBQWtCMWQsS0FBS290RCxjQUFjenpCLEVBQVV3ekIsS0FDbERudEQsS0FBSzZSLE1BQVE3UixLQUFLc3NELGNBQ2xCdHNELEtBQUs4bkQsSUFBSW4xQixPQUFPM3lCLEtBQUtzc0QsYUFBY3RzRCxLQUFLNlIsT0FFNUM3UixLQUFLZ1MsTUFBUW01QyxFQUFNa0MsY0FDbkJydEQsS0FBS3NzRCxhQUFldHNELEtBQUs2UixPQUVwQjdSLEtBQUswZCxnQkFBa0J3TyxJQUFNeU4sRUFBVTJ6QixNQUM1Q3R0RCxLQUFLZ1MsTUFBUW01QyxFQUFNb0MsYUFFM0IsRUFDQTVFLEVBQVVsbkQsVUFBVStyRCwwQkFBNEIsU0FBVXRoQyxHQUN0RCxJQUFJdWhDLEVBQVF6dEQsS0FBSzBzRCxnQkFBa0Ixc0QsS0FBS3lzRCxnQkFBZ0Jwc0QsT0FNeEQsR0FMY290RCxFQUVOaEMsRUFBa0J2L0IsSUFFYixHQUFKQSxLQUFjbHNCLEtBQUt5c0QsZ0JBQWdCenNELEtBQUswc0QsZ0JBSTVDLElBQUtlLEVBRU4sWUFEQXp0RCxLQUFLMHNELHFCQUhMMXNELEtBQUt3c0QsV0FBWSxFQU1yQnhzRCxLQUFLMHNELGNBQWdCLEVBQ3JCMXNELEtBQUtnUyxNQUFRbTVDLEVBQU11QyxVQUNuQjF0RCxLQUFLMnRELGVBQWV6aEMsRUFDeEIsRUFFQXk4QixFQUFVbG5ELFVBQVVtc0Qsa0JBQW9CLFNBQVUxaEMsR0FDOUMsR0FBSWxzQixLQUFLMHNELGdCQUFrQjFzRCxLQUFLeXNELGdCQUFnQnBzRCxPQUFRLENBQ3BELEdBQUk2ckIsSUFBTXlOLEVBQVVneUIsSUFBTXgvQixFQUFhRCxHQUFJLENBQ3ZDLElBQUkyaEMsRUFBWTd0RCxLQUFLNlIsTUFBUTdSLEtBQUt5c0QsZ0JBQWdCcHNELE9BQ2xELEdBQUlMLEtBQUtzc0QsYUFBZXVCLEVBQVcsQ0FFL0IsSUFBSUMsRUFBYzl0RCxLQUFLNlIsTUFDdkI3UixLQUFLNlIsTUFBUWc4QyxFQUNiN3RELEtBQUs4bkQsSUFBSW4xQixPQUFPM3lCLEtBQUtzc0QsYUFBY3VCLEdBQ25DN3RELEtBQUs2UixNQUFRaThDLENBQ2pCLENBSUEsT0FIQTl0RCxLQUFLd3NELFdBQVksRUFDakJ4c0QsS0FBS3NzRCxhQUFldUIsRUFBWSxPQUNoQzd0RCxLQUFLK3RELHNCQUFzQjdoQyxFQUUvQixDQUNBbHNCLEtBQUswc0QsY0FBZ0IsQ0FDekIsRUFDUyxHQUFKeGdDLEtBQWNsc0IsS0FBS3lzRCxnQkFBZ0J6c0QsS0FBSzBzRCxlQUN6QzFzRCxLQUFLMHNELGVBQWlCLEVBRU0sSUFBdkIxc0QsS0FBSzBzRCxjQUNOMXNELEtBQUt5c0Qsa0JBQW9CWCxFQUFVTSxTQUUvQnBzRCxLQUFLMGQsZ0JBQWtCd08sSUFBTXlOLEVBQVUyekIsTUFDdkN0dEQsS0FBS2dTLE1BQVFtNUMsRUFBTW9DLGNBR2xCdnRELEtBQUtvdEQsY0FBY3p6QixFQUFVd3pCLE1BRWxDbnRELEtBQUswc0QsY0FBZ0IsR0FLekIxc0QsS0FBSzBzRCxjQUFnQjc5QyxPQUFPcWQsSUFBTXlOLEVBQVV3ekIsR0FFcEQsRUFDQXhFLEVBQVVsbkQsVUFBVXVzRCxtQkFBcUIsU0FBVTloQyxHQUMzQ0EsSUFBTTQvQixFQUFVQyxNQUFNL3JELEtBQUswc0QsaUJBQ3JCMXNELEtBQUswc0QsZ0JBQWtCWixFQUFVQyxNQUFNMXJELFNBQ3pDTCxLQUFLZ1MsTUFBUW01QyxFQUFNOEMsY0FDbkJqdUQsS0FBS3lzRCxnQkFBa0JYLEVBQVVFLFNBQ2pDaHNELEtBQUswc0QsY0FBZ0IsRUFDckIxc0QsS0FBS3NzRCxhQUFldHNELEtBQUs2UixNQUFRLElBSXJDN1IsS0FBSzBzRCxjQUFnQixFQUNyQjFzRCxLQUFLZ1MsTUFBUW01QyxFQUFNK0MsY0FDbkJsdUQsS0FBS211RCxtQkFBbUJqaUMsR0FFaEMsRUFPQXk4QixFQUFVbG5ELFVBQVUyckQsY0FBZ0IsU0FBVWxoQyxHQUMxQyxPQUFTbHNCLEtBQUs2UixNQUFRN1IsS0FBS3FzRCxPQUFPaHNELE9BQVNMLEtBQUt3c0IsUUFDNUMsR0FBSXhzQixLQUFLcXNELE9BQU92c0MsV0FBVzlmLEtBQUs2UixNQUFRN1IsS0FBS3dzQixVQUFZTixFQUNyRCxPQUFPLEVBVWYsT0FEQWxzQixLQUFLNlIsTUFBUTdSLEtBQUtxc0QsT0FBT2hzRCxPQUFTTCxLQUFLd3NCLE9BQVMsR0FDekMsQ0FDWCxFQVNBbThCLEVBQVVsbkQsVUFBVTJzRCxtQkFBcUIsU0FBVWxpQyxHQUMzQ0EsSUFBTWxzQixLQUFLeXNELGdCQUFnQnpzRCxLQUFLMHNELGlCQUMxQjFzRCxLQUFLMHNELGdCQUFrQjFzRCxLQUFLeXNELGdCQUFnQnBzRCxTQUMxQ0wsS0FBS3lzRCxrQkFBb0JYLEVBQVVFLFNBQ25DaHNELEtBQUs4bkQsSUFBSXlDLFFBQVF2cUQsS0FBS3NzRCxhQUFjdHNELEtBQUs2UixNQUFPLEdBR2hEN1IsS0FBSzhuRCxJQUFJbDFCLFVBQVU1eUIsS0FBS3NzRCxhQUFjdHNELEtBQUs2UixNQUFPLEdBRXREN1IsS0FBSzBzRCxjQUFnQixFQUNyQjFzRCxLQUFLc3NELGFBQWV0c0QsS0FBSzZSLE1BQVEsRUFDakM3UixLQUFLZ1MsTUFBUW01QyxFQUFNajBDLE1BR0ssSUFBdkJsWCxLQUFLMHNELGNBRU4xc0QsS0FBS290RCxjQUFjcHRELEtBQUt5c0QsZ0JBQWdCLE1BQ3hDenNELEtBQUswc0QsY0FBZ0IsR0FHcEJ4Z0MsSUFBTWxzQixLQUFLeXNELGdCQUFnQnpzRCxLQUFLMHNELGNBQWdCLEtBRXJEMXNELEtBQUswc0QsY0FBZ0IsRUFFN0IsRUFPQS9ELEVBQVVsbkQsVUFBVTRzRCxlQUFpQixTQUFVbmlDLEdBQzNDLE9BQU9sc0IsS0FBS3VOLFNBQVdrK0MsRUFBa0J2L0IsR0F0UGpELFNBQXNCQSxHQUNsQixPQUFTQSxHQUFLeU4sRUFBVTVaLFFBQVVtTSxHQUFLeU4sRUFBVTNaLFFBQzVDa00sR0FBS3lOLEVBQVUxWixRQUFVaU0sR0FBS3lOLEVBQVV6WixNQUNqRCxDQW1Qc0RvdUMsQ0FBYXBpQyxFQUMvRCxFQUNBeThCLEVBQVVsbkQsVUFBVThzRCxhQUFlLFNBQVVDLEVBQVVoaUMsR0FDbkR4c0IsS0FBS3dzRCxXQUFZLEVBQ2pCeHNELEtBQUt5c0QsZ0JBQWtCK0IsRUFDdkJ4dUQsS0FBSzBzRCxjQUFnQmxnQyxFQUNyQnhzQixLQUFLZ1MsTUFBUW01QyxFQUFNc0Qsb0JBQ3ZCLEVBQ0E5RixFQUFVbG5ELFVBQVVpdEQsbUJBQXFCLFNBQVV4aUMsR0FDL0MsR0FBSUEsSUFBTXlOLEVBQVVnMUIsZ0JBQ2hCM3VELEtBQUtnUyxNQUFRbTVDLEVBQU15RCxrQkFDbkI1dUQsS0FBS3NzRCxhQUFldHNELEtBQUs2UixNQUFRLE9BRWhDLEdBQUlxYSxJQUFNeU4sRUFBVWsxQixhQUNyQjd1RCxLQUFLZ1MsTUFBUW01QyxFQUFNMkQsd0JBQ25COXVELEtBQUtzc0QsYUFBZXRzRCxLQUFLNlIsTUFBUSxPQUVoQyxHQUFJN1IsS0FBS3F1RCxlQUFlbmlDLEdBQUksQ0FDN0IsSUFBSTZpQyxFQUFZLEdBQUo3aUMsRUFDWmxzQixLQUFLc3NELGFBQWV0c0QsS0FBSzZSLE1BQ3BCN1IsS0FBS3VOLFNBQVd3aEQsSUFBVWpELEVBQVVNLFNBQVMsR0FJOUNwc0QsS0FBS2dTLE1BQ0FoUyxLQUFLdU4sU0FBV3doRCxJQUFVakQsRUFBVUksVUFBVSxHQUV6Q2YsRUFBTXVDLFVBRE52QyxFQUFNNkQsZUFMaEJodkQsS0FBS3V1RCxhQUFhekMsRUFBVU0sU0FBVSxFQVE5QyxNQUNTbGdDLElBQU15TixFQUFVK3hCLE1BQ3JCMXJELEtBQUtnUyxNQUFRbTVDLEVBQU04RCxzQkFHbkJqdkQsS0FBS2dTLE1BQVFtNUMsRUFBTWowQyxLQUNuQmxYLEtBQUtrdEQsVUFBVWhoQyxHQUV2QixFQUNBeThCLEVBQVVsbkQsVUFBVWtzRCxlQUFpQixTQUFVemhDLEdBQ3ZDdS9CLEVBQWtCdi9CLEtBQ2xCbHNCLEtBQUs4bkQsSUFBSWtCLGNBQWNocEQsS0FBS3NzRCxhQUFjdHNELEtBQUs2UixPQUMvQzdSLEtBQUtzc0QsY0FBZ0IsRUFDckJ0c0QsS0FBS2dTLE1BQVFtNUMsRUFBTStELG9CQUNuQmx2RCxLQUFLbXZELHlCQUF5QmpqQyxHQUV0QyxFQUNBeThCLEVBQVVsbkQsVUFBVTJ0RCwwQkFBNEIsU0FBVWxqQyxHQUNsREMsRUFBYUQsS0FHUkEsSUFBTXlOLEVBQVVneUIsR0FDckIzckQsS0FBS2dTLE1BQVFtNUMsRUFBTWowQyxNQUduQmxYLEtBQUtnUyxNQUFRaFMsS0FBS3F1RCxlQUFlbmlDLEdBQzNCaS9CLEVBQU1rRSxpQkFDTmxFLEVBQU1tRSxpQkFDWnR2RCxLQUFLc3NELGFBQWV0c0QsS0FBSzZSLE9BRWpDLEVBQ0E4MkMsRUFBVWxuRCxVQUFVc3NELHNCQUF3QixTQUFVN2hDLElBQzlDQSxJQUFNeU4sRUFBVWd5QixJQUFNeC9CLEVBQWFELE1BQ25DbHNCLEtBQUs4bkQsSUFBSXQxQixXQUFXeHlCLEtBQUtzc0QsYUFBY3RzRCxLQUFLNlIsT0FDNUM3UixLQUFLc3NELGNBQWdCLEVBQ3JCdHNELEtBQUtnUyxNQUFRbTVDLEVBQU1vRSxvQkFDbkJ2dkQsS0FBS3d2RCx5QkFBeUJ0akMsR0FFdEMsRUFDQXk4QixFQUFVbG5ELFVBQVUrdEQseUJBQTJCLFNBQVV0akMsSUFFakRBLElBQU15TixFQUFVZ3lCLElBQU0zckQsS0FBS290RCxjQUFjenpCLEVBQVVneUIsT0FDbkQzckQsS0FBS2dTLE1BQVFtNUMsRUFBTWowQyxLQUNuQmxYLEtBQUt1c0QsVUFBWXBCLEVBQU1qMEMsS0FDdkJsWCxLQUFLc3NELGFBQWV0c0QsS0FBSzZSLE1BQVEsRUFFekMsRUFDQTgyQyxFQUFVbG5ELFVBQVUwdEQseUJBQTJCLFNBQVVqakMsR0FDakRBLElBQU15TixFQUFVZ3lCLElBQ2hCM3JELEtBQUs4bkQsSUFBSXVCLGFBQWFycEQsS0FBSzZSLE9BQ3ZCN1IsS0FBS3dzRCxXQUNMeHNELEtBQUtnUyxNQUFRbTVDLEVBQU1zRSxhQUNuQnp2RCxLQUFLMHNELGNBQWdCLEdBR3JCMXNELEtBQUtnUyxNQUFRbTVDLEVBQU1qMEMsS0FFdkJsWCxLQUFLdXNELFVBQVl2c0QsS0FBS2dTLE1BQ3RCaFMsS0FBS3NzRCxhQUFldHNELEtBQUs2UixNQUFRLEdBRTVCcWEsSUFBTXlOLEVBQVUreEIsTUFDckIxckQsS0FBS2dTLE1BQVFtNUMsRUFBTXVFLGlCQUVidmpDLEVBQWFELEtBQ25CbHNCLEtBQUtnUyxNQUFRbTVDLEVBQU13RSxnQkFDbkIzdkQsS0FBS3NzRCxhQUFldHNELEtBQUs2UixNQUVqQyxFQUNBODJDLEVBQVVsbkQsVUFBVW11RCxzQkFBd0IsU0FBVTFqQyxHQUM5Q0EsSUFBTXlOLEVBQVVneUIsSUFDaEIzckQsS0FBSzhuRCxJQUFJMkIsaUJBQWlCenBELEtBQUs2UixPQUMvQjdSLEtBQUtnUyxNQUFRbTVDLEVBQU1qMEMsS0FDbkJsWCxLQUFLdXNELFVBQVlwQixFQUFNajBDLEtBQ3ZCbFgsS0FBS3NzRCxhQUFldHNELEtBQUs2UixNQUFRLEVBQ2pDN1IsS0FBS3dzRCxXQUFZLEdBRVhyZ0MsRUFBYUQsS0FDbkJsc0IsS0FBS2dTLE1BQVFtNUMsRUFBTStELG9CQUNuQmx2RCxLQUFLbXZELHlCQUF5QmpqQyxHQUV0QyxFQUNBeThCLEVBQVVsbkQsVUFBVW91RCxxQkFBdUIsU0FBVTNqQyxJQUM3Q0EsSUFBTXlOLEVBQVVtMkIsSUFBTXJFLEVBQWtCdi9CLE1BQ3hDbHNCLEtBQUs4bkQsSUFBSThCLGFBQWE1cEQsS0FBS3NzRCxhQUFjdHNELEtBQUs2UixPQUM5QzdSLEtBQUtzc0QsY0FBZ0IsRUFDckJ0c0QsS0FBS2dTLE1BQVFtNUMsRUFBTTRFLG1CQUNuQi92RCxLQUFLZ3dELHdCQUF3QjlqQyxHQUVyQyxFQUNBeThCLEVBQVVsbkQsVUFBVXV1RCx3QkFBMEIsU0FBVTlqQyxHQUNoREEsSUFBTXlOLEVBQVVtMkIsR0FDaEI5dkQsS0FBS2dTLE1BQVFtNUMsRUFBTThFLHFCQUVkL2pDLElBQU15TixFQUFVK3hCLE9BQVN4L0IsSUFBTXlOLEVBQVVneUIsSUFDOUMzckQsS0FBSzhuRCxJQUFJaUMsWUFBWUUsRUFBVUcsUUFBU3BxRCxLQUFLNlIsT0FDN0M3UixLQUFLZ1MsTUFBUW01QyxFQUFNK0Qsb0JBQ25CbHZELEtBQUttdkQseUJBQXlCampDLElBRXhCQyxFQUFhRCxLQUNuQmxzQixLQUFLOG5ELElBQUlpQyxZQUFZRSxFQUFVRyxRQUFTcHFELEtBQUs2UixPQUM3QzdSLEtBQUtnUyxNQUFRbTVDLEVBQU13RSxnQkFDbkIzdkQsS0FBS3NzRCxhQUFldHNELEtBQUs2UixNQUVqQyxFQUNBODJDLEVBQVVsbkQsVUFBVXl1RCwwQkFBNEIsU0FBVWhrQyxHQUNsREEsSUFBTXlOLEVBQVV3MkIsYUFDaEJud0QsS0FBS2dTLE1BQVFtNUMsRUFBTWlGLG1CQUNuQnB3RCxLQUFLc3NELGFBQWV0c0QsS0FBSzZSLE1BQVEsR0FFNUJxYSxJQUFNeU4sRUFBVTAyQixhQUNyQnJ3RCxLQUFLZ1MsTUFBUW01QyxFQUFNbUYsbUJBQ25CdHdELEtBQUtzc0QsYUFBZXRzRCxLQUFLNlIsTUFBUSxHQUUzQnNhLEVBQWFELEtBQ25CbHNCLEtBQUtzc0QsYUFBZXRzRCxLQUFLNlIsTUFDekI3UixLQUFLZ1MsTUFBUW01QyxFQUFNb0YsbUJBQ25CdndELEtBQUt3d0QsOEJBQThCdGtDLEdBRTNDLEVBQ0F5OEIsRUFBVWxuRCxVQUFVZ3ZELHVCQUF5QixTQUFVdmtDLEVBQUdvQixHQUNsRHBCLElBQU1vQixJQUNKdHRCLEtBQUswZCxnQkFBa0IxZCxLQUFLb3RELGNBQWM5L0IsSUFDNUN0dEIsS0FBSzhuRCxJQUFJK0IsYUFBYTdwRCxLQUFLc3NELGFBQWN0c0QsS0FBSzZSLE9BQzlDN1IsS0FBS3NzRCxjQUFnQixFQUNyQnRzRCxLQUFLOG5ELElBQUlpQyxZQUFZejhCLElBQVVxTSxFQUFVdzJCLFlBQ25DbEcsRUFBVUMsT0FDVkQsRUFBVUUsT0FBUW5xRCxLQUFLNlIsT0FDN0I3UixLQUFLZ1MsTUFBUW01QyxFQUFNK0QscUJBRWRsdkQsS0FBSzBkLGdCQUFrQndPLElBQU15TixFQUFVMnpCLE1BQzVDdHRELEtBQUt1c0QsVUFBWXZzRCxLQUFLZ1MsTUFDdEJoUyxLQUFLZ1MsTUFBUW01QyxFQUFNb0MsYUFFM0IsRUFDQTVFLEVBQVVsbkQsVUFBVWl2RCxrQ0FBb0MsU0FBVXhrQyxHQUM5RGxzQixLQUFLeXdELHVCQUF1QnZrQyxFQUFHeU4sRUFBVXcyQixZQUM3QyxFQUNBeEgsRUFBVWxuRCxVQUFVa3ZELGtDQUFvQyxTQUFVemtDLEdBQzlEbHNCLEtBQUt5d0QsdUJBQXVCdmtDLEVBQUd5TixFQUFVMDJCLFlBQzdDLEVBQ0ExSCxFQUFVbG5ELFVBQVUrdUQsOEJBQWdDLFNBQVV0a0MsR0FDdERDLEVBQWFELElBQU1BLElBQU15TixFQUFVZ3lCLElBQ25DM3JELEtBQUs4bkQsSUFBSStCLGFBQWE3cEQsS0FBS3NzRCxhQUFjdHNELEtBQUs2UixPQUM5QzdSLEtBQUtzc0QsY0FBZ0IsRUFDckJ0c0QsS0FBSzhuRCxJQUFJaUMsWUFBWUUsRUFBVTJHLFNBQVU1d0QsS0FBSzZSLE9BQzlDN1IsS0FBS2dTLE1BQVFtNUMsRUFBTStELG9CQUNuQmx2RCxLQUFLbXZELHlCQUF5QmpqQyxJQUV6QmxzQixLQUFLMGQsZ0JBQWtCd08sSUFBTXlOLEVBQVUyekIsTUFDNUN0dEQsS0FBS3VzRCxVQUFZdnNELEtBQUtnUyxNQUN0QmhTLEtBQUtnUyxNQUFRbTVDLEVBQU1vQyxhQUUzQixFQUNBNUUsRUFBVWxuRCxVQUFVb3ZELHVCQUF5QixTQUFVM2tDLEdBQy9DQSxJQUFNeU4sRUFBVW0zQixzQkFDaEI5d0QsS0FBS2dTLE1BQVFtNUMsRUFBTTRGLGNBQ25CL3dELEtBQUswc0QsY0FBZ0IsR0FHckIxc0QsS0FBS2dTLE1BQ0RrYSxJQUFNeU4sRUFBVXEzQixLQUNWN0YsRUFBTThGLGNBQ045RixFQUFNK0MsYUFFeEIsRUFDQXZGLEVBQVVsbkQsVUFBVTBzRCxtQkFBcUIsU0FBVWppQyxJQUMzQ0EsSUFBTXlOLEVBQVVneUIsSUFBTTNyRCxLQUFLb3RELGNBQWN6ekIsRUFBVWd5QixPQUNuRDNyRCxLQUFLOG5ELElBQUl3QyxjQUFjdHFELEtBQUtzc0QsYUFBY3RzRCxLQUFLNlIsT0FDL0M3UixLQUFLZ1MsTUFBUW01QyxFQUFNajBDLEtBQ25CbFgsS0FBS3NzRCxhQUFldHNELEtBQUs2UixNQUFRLEVBRXpDLEVBQ0E4MkMsRUFBVWxuRCxVQUFVeXZELDZCQUErQixTQUFVaGxDLElBQ3JEQSxJQUFNeU4sRUFBVWd5QixJQUFNM3JELEtBQUtvdEQsY0FBY3p6QixFQUFVZ3lCLE9BQ25EM3JELEtBQUs4bkQsSUFBSTkwQix3QkFBd0JoekIsS0FBS3NzRCxhQUFjdHNELEtBQUs2UixPQUN6RDdSLEtBQUtnUyxNQUFRbTVDLEVBQU1qMEMsS0FDbkJsWCxLQUFLc3NELGFBQWV0c0QsS0FBSzZSLE1BQVEsRUFFekMsRUFDQTgyQyxFQUFVbG5ELFVBQVUwdkQsbUJBQXFCLFNBQVVqbEMsR0FDM0NBLElBQU15TixFQUFVcTNCLE1BQ2hCaHhELEtBQUtnUyxNQUFRbTVDLEVBQU04QyxjQUNuQmp1RCxLQUFLeXNELGdCQUFrQlgsRUFBVUcsV0FFakNqc0QsS0FBSzBzRCxjQUFnQixFQUNyQjFzRCxLQUFLc3NELGFBQWV0c0QsS0FBSzZSLE1BQVEsR0FHakM3UixLQUFLZ1MsTUFBUW01QyxFQUFNK0MsYUFFM0IsRUFDQXZGLEVBQVVsbkQsVUFBVTJ2RCxzQkFBd0IsU0FBVWxsQyxJQUM5Q0EsSUFBTXlOLEVBQVVneUIsSUFBTTNyRCxLQUFLb3RELGNBQWN6ekIsRUFBVWd5QixPQUNuRDNyRCxLQUFLOG5ELElBQUlsMUIsVUFBVTV5QixLQUFLc3NELGFBQWN0c0QsS0FBSzZSLE1BQU8sR0FDbEQ3UixLQUFLZ1MsTUFBUW01QyxFQUFNajBDLEtBQ25CbFgsS0FBS3NzRCxhQUFldHNELEtBQUs2UixNQUFRLEVBRXpDLEVBQ0E4MkMsRUFBVWxuRCxVQUFVNHZELG9CQUFzQixTQUFVbmxDLEdBQ2hELElBQUk2aUMsRUFBWSxHQUFKN2lDLEVBQ1I2aUMsSUFBVWpELEVBQVVJLFVBQVUsR0FDOUJsc0QsS0FBS3V1RCxhQUFhekMsRUFBVUksVUFBVyxHQUVsQzZDLElBQVVqRCxFQUFVSyxTQUFTLEdBQ2xDbnNELEtBQUt1dUQsYUFBYXpDLEVBQVVLLFNBQVUsSUFHdENuc0QsS0FBS2dTLE1BQVFtNUMsRUFBTXVDLFVBQ25CMXRELEtBQUsydEQsZUFBZXpoQyxHQUU1QixFQUNBeThCLEVBQVVsbkQsVUFBVTZ2RCxrQkFBb0IsU0FBVXBsQyxHQUU5Q2xzQixLQUFLOHNELGFBQWUsRUFDcEI5c0QsS0FBSzZzRCxhQUFlLEVBQ2hCM2dDLElBQU15TixFQUFVOXFCLE9BQ2hCN08sS0FBS2dTLE1BQVFtNUMsRUFBTW9HLG9CQUVkcmxDLElBQU15TixFQUFVMnpCLE1BSXJCdHRELEtBQUsyc0QsVUFBWSxFQUNqQjNzRCxLQUFLNHNELFlBQWM1c0QsS0FBSytzRCxXQUFXLEdBQ25DL3NELEtBQUtnUyxNQUFRbTVDLEVBQU1xRyxjQUNuQnh4RCxLQUFLeXhELG1CQUFtQnZsQyxHQUVoQyxFQUNBeThCLEVBQVVsbkQsVUFBVWd3RCxtQkFBcUIsU0FBVXZsQyxHQUcvQyxHQUZBbHNCLEtBQUs4c0QsY0FBZ0IsRUFDckI5c0QsS0FBSzJzRCxXQUFZLEVBQUl6c0IsRUFBWW5ILGlCQUFpQi80QixLQUFLK3NELFdBQVkvc0QsS0FBSzRzRCxZQUFhNXNELEtBQUsyc0QsVUFBWSxFQUFHemdDLEdBQ3JHbHNCLEtBQUsyc0QsVUFBWSxFQUdqQixPQUZBM3NELEtBQUsweEQsdUJBQ0wxeEQsS0FBSzZSLFFBR1Q3UixLQUFLNHNELFlBQWM1c0QsS0FBSytzRCxXQUFXL3NELEtBQUsyc0QsV0FDeEMsSUFBSWdGLEVBQVMzeEQsS0FBSzRzRCxZQUFjMXNCLEVBQVloSCxhQUFhdUQsYUFFekQsR0FBSWsxQixFQUFRLENBRVIsSUFBSW4xQixHQUFlbTFCLEdBQVUsSUFBTSxFQUVuQyxHQUFLM3hELEtBQUs0eEQscUJBQXVCMWxDLElBQU15TixFQUFVazRCLEtBRzVDLENBRUQsSUFBSUMsRUFBYzl4RCxLQUFLNlIsTUFBUTdSLEtBQUs4c0QsYUFBZSxFQUMvQ2dGLEVBQWM5eEQsS0FBS3NzRCxjQUNuQnRzRCxLQUFLK3hELFlBQVkveEQsS0FBS3NzRCxhQUFjd0YsR0FHeEM5eEQsS0FBSzZzRCxhQUFlN3NELEtBQUsyc0QsVUFDekIzc0QsS0FBSzJzRCxXQUFhbndCLEVBQ2xCeDhCLEtBQUs4c0QsYUFBZSxFQUNwQjlzRCxLQUFLc3NELGFBQWV0c0QsS0FBSzZSLE1BQVEsRUFDYixJQUFoQjJxQixHQUNBeDhCLEtBQUsweEQsaUJBRWIsTUFoQkkxeEQsS0FBSzJzRCxXQUFhbndCLENBaUIxQixDQUNKLEVBQ0Ftc0IsRUFBVWxuRCxVQUFVaXdELGdCQUFrQixXQUVsQyxHQURBMXhELEtBQUtnUyxNQUFRaFMsS0FBS3VzRCxVQUNRLElBQXRCdnNELEtBQUs2c0QsYUFLVCxRQUZtQjdzRCxLQUFLK3NELFdBQVcvc0QsS0FBSzZzRCxjQUFnQjNzQixFQUFZaEgsYUFBYXVELGVBQzdFLElBRUEsS0FBSyxFQUNEejhCLEtBQUttNkIsY0FBY242QixLQUFLK3NELFdBQVcvc0QsS0FBSzZzRCxlQUNuQzNzQixFQUFZaEgsYUFBYXVELGNBQzlCLE1BRUosS0FBSyxFQUNEejhCLEtBQUttNkIsY0FBY242QixLQUFLK3NELFdBQVcvc0QsS0FBSzZzRCxhQUFlLElBQ3ZELE1BRUosS0FBSyxFQUNEN3NELEtBQUttNkIsY0FBY242QixLQUFLK3NELFdBQVcvc0QsS0FBSzZzRCxhQUFlLElBQ3ZEN3NELEtBQUttNkIsY0FBY242QixLQUFLK3NELFdBQVcvc0QsS0FBSzZzRCxhQUFlLElBR25FLEVBQ0FsRSxFQUFVbG5ELFVBQVV1d0QseUJBQTJCLFNBQVU5bEMsSUFDNUMsR0FBSkEsS0FBY3lOLEVBQVVzNEIsUUFDekJqeUQsS0FBSzhzRCxlQUNMOXNELEtBQUtnUyxNQUFRbTVDLEVBQU0rRyxjQUduQmx5RCxLQUFLZ1MsTUFBUW01QyxFQUFNZ0gsZ0JBQ25CbnlELEtBQUtveUQscUJBQXFCbG1DLEdBRWxDLEVBQ0F5OEIsRUFBVWxuRCxVQUFVdzZCLGtCQUFvQixTQUFVbzJCLEdBQzlDLElBQUlQLEVBQWM5eEQsS0FBSzZSLE1BQVE3UixLQUFLOHNELGFBQWUsRUFDakNnRixFQUFjLEVBQUlqakQsT0FBTzdPLEtBQUtnUyxRQUFVbTVDLEVBQU0rRyxlQUM1Q2x5RCxLQUFLNlIsUUFFakJpZ0QsRUFBYzl4RCxLQUFLc3NELGNBQ25CdHNELEtBQUsreEQsWUFBWS94RCxLQUFLc3NELGFBQWN3RixHQUV4Qzl4RCxLQUFLc3NELGFBQWV0c0QsS0FBSzZSLE1BQVFoRCxPQUFPd2pELEdBQ3hDcnlELEtBQUttNkIsZUFBYyxFQUFJK0YsRUFBWTlHLGtCQUFrQnA1QixLQUFLNnNELGdCQUU5RDdzRCxLQUFLZ1MsTUFBUWhTLEtBQUt1c0QsU0FDdEIsRUFDQTVELEVBQVVsbkQsVUFBVTJ3RCxxQkFBdUIsU0FBVWxtQyxHQUM3Q0EsSUFBTXlOLEVBQVVrNEIsS0FDaEI3eEQsS0FBS2k4QixtQkFBa0IsR0FFbEJuQyxFQUFTNU4sSUFDZGxzQixLQUFLNnNELGFBQW1DLEdBQXBCN3NELEtBQUs2c0QsY0FBcUIzZ0MsRUFBSXlOLEVBQVVpeUIsTUFDNUQ1ckQsS0FBSzhzRCxpQkFHRDlzRCxLQUFLNHhELG9CQUNMNXhELEtBQUtpOEIsbUJBQWtCLEdBR3ZCajhCLEtBQUtnUyxNQUFRaFMsS0FBS3VzRCxVQUV0QnZzRCxLQUFLNlIsUUFFYixFQUNBODJDLEVBQVVsbkQsVUFBVTZ3RCxpQkFBbUIsU0FBVXBtQyxHQUN6Q0EsSUFBTXlOLEVBQVVrNEIsS0FDaEI3eEQsS0FBS2k4QixtQkFBa0IsR0FFbEJuQyxFQUFTNU4sSUFDZGxzQixLQUFLNnNELGFBQW1DLEdBQXBCN3NELEtBQUs2c0QsY0FBcUIzZ0MsRUFBSXlOLEVBQVVpeUIsTUFDNUQ1ckQsS0FBSzhzRCxnQkE1bEJqQixTQUFvQjVnQyxHQUNoQixPQUFTQSxHQUFLeU4sRUFBVTFaLFFBQVVpTSxHQUFLeU4sRUFBVTQ0QixRQUM1Q3JtQyxHQUFLeU4sRUFBVTVaLFFBQVVtTSxHQUFLeU4sRUFBVTY0QixNQUNqRCxDQTJsQmlCQyxDQUFXdm1DLElBQ2hCbHNCLEtBQUs2c0QsYUFDbUIsR0FBcEI3c0QsS0FBSzZzRCxlQUEwQixHQUFKM2dDLEdBQVl5TixFQUFVNVosT0FBUyxJQUM5RC9mLEtBQUs4c0QsaUJBR0Q5c0QsS0FBSzR4RCxvQkFDTDV4RCxLQUFLaThCLG1CQUFrQixHQUd2Qmo4QixLQUFLZ1MsTUFBUWhTLEtBQUt1c0QsVUFFdEJ2c0QsS0FBSzZSLFFBRWIsRUFDQTgyQyxFQUFVbG5ELFVBQVVtd0Qsa0JBQW9CLFdBQ3BDLE9BQVM1eEQsS0FBS3VOLFVBQ1R2TixLQUFLdXNELFlBQWNwQixFQUFNajBDLE1BQ3RCbFgsS0FBS3VzRCxZQUFjcEIsRUFBTXNFLGFBQ3JDLEVBSUE5RyxFQUFVbG5ELFVBQVVpM0MsUUFBVSxXQUV0QjE0QyxLQUFLK3FELFNBQVcvcUQsS0FBS3NzRCxlQUFpQnRzRCxLQUFLNlIsUUFDdkM3UixLQUFLZ1MsUUFBVW01QyxFQUFNajBDLE1BQ3BCbFgsS0FBS2dTLFFBQVVtNUMsRUFBTXNFLGNBQXVDLElBQXZCenZELEtBQUswc0QsZUFDM0Mxc0QsS0FBSzhuRCxJQUFJbjFCLE9BQU8zeUIsS0FBS3NzRCxhQUFjdHNELEtBQUs2UixPQUN4QzdSLEtBQUtzc0QsYUFBZXRzRCxLQUFLNlIsT0FFcEI3UixLQUFLZ1MsUUFBVW01QyxFQUFNaUYsb0JBQzFCcHdELEtBQUtnUyxRQUFVbTVDLEVBQU1tRixvQkFDckJ0d0QsS0FBS2dTLFFBQVVtNUMsRUFBTW9GLHFCQUNyQnZ3RCxLQUFLOG5ELElBQUkrQixhQUFhN3BELEtBQUtzc0QsYUFBY3RzRCxLQUFLNlIsT0FDOUM3UixLQUFLc3NELGFBQWV0c0QsS0FBSzZSLE9BR3JDLEVBQ0E4MkMsRUFBVWxuRCxVQUFVaXhELGVBQWlCLFdBQ2pDLE9BQU8xeUQsS0FBSzZSLE1BQVE3UixLQUFLcXNELE9BQU9oc0QsT0FBU0wsS0FBS3dzQixRQUFVeHNCLEtBQUsrcUQsT0FDakUsRUFNQXBDLEVBQVVsbkQsVUFBVXFHLE1BQVEsV0FDeEIsS0FBTzlILEtBQUsweUQsa0JBQWtCLENBQzFCLElBQUl4bUMsRUFBSWxzQixLQUFLcXNELE9BQU92c0MsV0FBVzlmLEtBQUs2UixNQUFRN1IsS0FBS3dzQixRQUNqRCxPQUFReHNCLEtBQUtnUyxPQUNULEtBQUttNUMsRUFBTWowQyxLQUNQbFgsS0FBS2t0RCxVQUFVaGhDLEdBQ2YsTUFFSixLQUFLaS9CLEVBQU1zRCxxQkFDUHp1RCxLQUFLd3RELDBCQUEwQnRoQyxHQUMvQixNQUVKLEtBQUtpL0IsRUFBTXNFLGFBQ1B6dkQsS0FBSzR0RCxrQkFBa0IxaEMsR0FDdkIsTUFFSixLQUFLaS9CLEVBQU00RixjQUNQL3dELEtBQUtndUQsbUJBQW1COWhDLEdBQ3hCLE1BRUosS0FBS2kvQixFQUFNaUYsbUJBQ1Bwd0QsS0FBSzB3RCxrQ0FBa0N4a0MsR0FDdkMsTUFFSixLQUFLaS9CLEVBQU13RSxnQkFDUDN2RCxLQUFLNnZELHFCQUFxQjNqQyxHQUMxQixNQUVKLEtBQUtpL0IsRUFBTThDLGNBQ1BqdUQsS0FBS291RCxtQkFBbUJsaUMsR0FDeEIsTUFFSixLQUFLaS9CLEVBQU1tRSxpQkFDUHR2RCxLQUFLb3hELHNCQUFzQmxsQyxHQUMzQixNQUVKLEtBQUtpL0IsRUFBTStELG9CQUNQbHZELEtBQUttdkQseUJBQXlCampDLEdBQzlCLE1BRUosS0FBS2kvQixFQUFNdUMsVUFDUDF0RCxLQUFLMnRELGVBQWV6aEMsR0FDcEIsTUFFSixLQUFLaS9CLEVBQU1rRSxpQkFDUHJ2RCxLQUFLK3RELHNCQUFzQjdoQyxHQUMzQixNQUVKLEtBQUtpL0IsRUFBTWtDLGNBQ1BydEQsS0FBSzB1RCxtQkFBbUJ4aUMsR0FDeEIsTUFFSixLQUFLaS9CLEVBQU00RSxtQkFDUC92RCxLQUFLZ3dELHdCQUF3QjlqQyxHQUM3QixNQUVKLEtBQUtpL0IsRUFBTW1GLG1CQUNQdHdELEtBQUsyd0Qsa0NBQWtDemtDLEdBQ3ZDLE1BRUosS0FBS2kvQixFQUFNOEUscUJBQ1Bqd0QsS0FBS2t3RCwwQkFBMEJoa0MsR0FDL0IsTUFFSixLQUFLaS9CLEVBQU04RCxxQkFDUGp2RCxLQUFLb3ZELDBCQUEwQmxqQyxHQUMvQixNQUVKLEtBQUtpL0IsRUFBTW9FLG9CQUNQdnZELEtBQUt3dkQseUJBQXlCdGpDLEdBQzlCLE1BRUosS0FBS2kvQixFQUFNNkQsZUFDUGh2RCxLQUFLcXhELG9CQUFvQm5sQyxHQUN6QixNQUVKLEtBQUtpL0IsRUFBTW9GLG1CQUNQdndELEtBQUt3d0QsOEJBQThCdGtDLEdBQ25DLE1BRUosS0FBS2kvQixFQUFNdUUsaUJBQ1AxdkQsS0FBSzR2RCxzQkFBc0IxakMsR0FDM0IsTUFFSixLQUFLaS9CLEVBQU0rQyxjQUNQbHVELEtBQUttdUQsbUJBQW1CamlDLEdBQ3hCLE1BRUosS0FBS2kvQixFQUFNeUQsa0JBQ1A1dUQsS0FBSzZ3RCx1QkFBdUIza0MsR0FDNUIsTUFFSixLQUFLaS9CLEVBQU04RixjQUNQanhELEtBQUtteEQsbUJBQW1CamxDLEdBQ3hCLE1BRUosS0FBS2kvQixFQUFNMkQsd0JBQ1A5dUQsS0FBS2t4RCw2QkFBNkJobEMsR0FDbEMsTUFFSixLQUFLaS9CLEVBQU1xRyxjQUNQeHhELEtBQUt5eEQsbUJBQW1CdmxDLEdBQ3hCLE1BRUosS0FBS2kvQixFQUFNb0MsYUFDUHZ0RCxLQUFLc3hELGtCQUFrQnBsQyxHQUN2QixNQUVKLEtBQUtpL0IsRUFBTStHLFlBQ1BseUQsS0FBS3N5RCxpQkFBaUJwbUMsR0FDdEIsTUFFSixLQUFLaS9CLEVBQU1nSCxnQkFDUG55RCxLQUFLb3lELHFCQUFxQmxtQyxHQUMxQixNQUVKLFFBRUlsc0IsS0FBS2d5RCx5QkFBeUI5bEMsR0FHdENsc0IsS0FBSzZSLE9BQ1QsQ0FDQTdSLEtBQUswNEMsU0FDVCxFQUNBaVEsRUFBVWxuRCxVQUFVdXJELE9BQVMsV0FDckJodEQsS0FBS2dTLFFBQVVtNUMsRUFBTXFHLGVBQ3JCeHhELEtBQUsweEQsa0JBR0wxeEQsS0FBS3NzRCxhQUFldHNELEtBQUs2UixPQUN6QjdSLEtBQUsyeUQscUJBRVQzeUQsS0FBSzhuRCxJQUFJMTFCLE9BQ2IsRUFFQXUyQixFQUFVbG5ELFVBQVVreEQsbUJBQXFCLFdBQ3JDLElBQUl2bUMsRUFBV3BzQixLQUFLcXNELE9BQU9oc0QsT0FBU0wsS0FBS3dzQixPQUNyQ3hzQixLQUFLZ1MsUUFBVW01QyxFQUFNOEMsY0FDakJqdUQsS0FBS3lzRCxrQkFBb0JYLEVBQVVFLFNBQ25DaHNELEtBQUs4bkQsSUFBSXlDLFFBQVF2cUQsS0FBS3NzRCxhQUFjbGdDLEVBQVUsR0FHOUNwc0IsS0FBSzhuRCxJQUFJbDFCLFVBQVU1eUIsS0FBS3NzRCxhQUFjbGdDLEVBQVUsR0FHL0Nwc0IsS0FBS2dTLFFBQVVtNUMsRUFBTWdILGlCQUMxQm55RCxLQUFLNHhELHFCQUlBNXhELEtBQUtnUyxRQUFVbTVDLEVBQU0rRyxhQUMxQmx5RCxLQUFLNHhELG9CQUpMNXhELEtBQUtpOEIsbUJBQWtCLEdBUWxCajhCLEtBQUtnUyxRQUFVbTVDLEVBQU11QyxXQUMxQjF0RCxLQUFLZ1MsUUFBVW01QyxFQUFNK0QscUJBQ3JCbHZELEtBQUtnUyxRQUFVbTVDLEVBQU04RSxzQkFDckJqd0QsS0FBS2dTLFFBQVVtNUMsRUFBTTRFLG9CQUNyQi92RCxLQUFLZ1MsUUFBVW01QyxFQUFNd0UsaUJBQ3JCM3ZELEtBQUtnUyxRQUFVbTVDLEVBQU1tRixvQkFDckJ0d0QsS0FBS2dTLFFBQVVtNUMsRUFBTWlGLG9CQUNyQnB3RCxLQUFLZ1MsUUFBVW01QyxFQUFNb0Ysb0JBQ3JCdndELEtBQUtnUyxRQUFVbTVDLEVBQU1rRSxrQkFPckJydkQsS0FBSzhuRCxJQUFJbjFCLE9BQU8zeUIsS0FBS3NzRCxhQUFjbGdDLEVBRTNDLEVBQ0F1OEIsRUFBVWxuRCxVQUFVc3dELFlBQWMsU0FBVTEzQyxFQUFPK1IsR0FDM0Nwc0IsS0FBS3VzRCxZQUFjcEIsRUFBTWowQyxNQUN6QmxYLEtBQUt1c0QsWUFBY3BCLEVBQU1zRSxhQUN6Qnp2RCxLQUFLOG5ELElBQUkrQixhQUFheHZDLEVBQU8rUixHQUc3QnBzQixLQUFLOG5ELElBQUluMUIsT0FBT3RZLEVBQU8rUixFQUUvQixFQUNBdThCLEVBQVVsbkQsVUFBVTA0QixjQUFnQixTQUFVMEUsR0FDdEM3K0IsS0FBS3VzRCxZQUFjcEIsRUFBTWowQyxNQUN6QmxYLEtBQUt1c0QsWUFBY3BCLEVBQU1zRSxhQUN6Qnp2RCxLQUFLOG5ELElBQUlnQyxlQUFlanJCLEdBR3hCNytCLEtBQUs4bkQsSUFBSWUsYUFBYWhxQixFQUU5QixFQUNPOHBCLENBQ1gsQ0FyekI4QixHQXN6QjlCL29ELEVBQUEsUUFBa0Irb0QscUNDdjZCbEIsSUFBSTVqRCxFQUFtQi9FLE1BQVFBLEtBQUsrRSxrQkFBcUJ4QixPQUFPeUIsT0FBUyxTQUFVQyxFQUFHQyxFQUFHM0UsRUFBRzRFLFFBQzdFQyxJQUFQRCxJQUFrQkEsRUFBSzVFLEdBQzNCLElBQUk4RSxFQUFPOUIsT0FBTytCLHlCQUF5QkosRUFBRzNFLEdBQ3pDOEUsS0FBUyxRQUFTQSxHQUFRSCxFQUFFSyxXQUFhRixFQUFLRyxVQUFZSCxFQUFLSSxnQkFDbEVKLEVBQU8sQ0FBRUssWUFBWSxFQUFNQyxJQUFLLFdBQWEsT0FBT1QsRUFBRTNFLEVBQUksSUFFNURnRCxPQUFPQyxlQUFleUIsRUFBR0UsRUFBSUUsRUFDaEMsRUFBSSxTQUFVSixFQUFHQyxFQUFHM0UsRUFBRzRFLFFBQ1RDLElBQVBELElBQWtCQSxFQUFLNUUsR0FDM0IwRSxFQUFFRSxHQUFNRCxFQUFFM0UsRUFDYixHQUNHcUYsRUFBc0I1RixNQUFRQSxLQUFLNEYscUJBQXdCckMsT0FBT3lCLE9BQVMsU0FBVUMsRUFBR1ksR0FDeEZ0QyxPQUFPQyxlQUFleUIsRUFBRyxVQUFXLENBQUVTLFlBQVksRUFBTXBDLE1BQU91QyxHQUNsRSxFQUFJLFNBQVNaLEVBQUdZLEdBQ2JaLEVBQVcsUUFBSVksQ0FDbkIsR0FDSUMsRUFBZ0I5RixNQUFRQSxLQUFLOEYsY0FBaUIsU0FBVUMsR0FDeEQsR0FBSUEsR0FBT0EsRUFBSVIsV0FBWSxPQUFPUSxFQUNsQyxJQUFJQyxFQUFTLENBQUMsRUFDZCxHQUFXLE1BQVBELEVBQWEsSUFBSyxJQUFJeEYsS0FBS3dGLEVBQWUsWUFBTnhGLEdBQW1CZ0QsT0FBTzlCLFVBQVVxRCxlQUFlOUIsS0FBSytDLEVBQUt4RixJQUFJd0UsRUFBZ0JpQixFQUFRRCxFQUFLeEYsR0FFdEksT0FEQXFGLEVBQW1CSSxFQUFRRCxHQUNwQkMsQ0FDWCxFQUNJbVYsRUFBbUJuYixNQUFRQSxLQUFLbWIsaUJBQW9CLFNBQVVwVixHQUM5RCxPQUFRQSxHQUFPQSxFQUFJUixXQUFjUSxFQUFNLENBQUUsUUFBV0EsRUFDeEQsRUFDQXhDLE9BQU9DLGVBQWU1RCxFQUFTLGFBQWMsQ0FBRTBELE9BQU8sSUFDdEQxRCxFQUFRbUgsU0FBV25ILEVBQVFnekQsVUFBWWh6RCxFQUFRdTBCLFFBQVV2MEIsRUFBUTh2QixZQUFjOXZCLEVBQVErb0QsVUFBWS9vRCxFQUFRaXpELGdCQUFrQmp6RCxFQUFRa3pELFNBQVdsekQsRUFBUWtjLGNBQWdCbGMsRUFBUW16RCxlQUFpQm56RCxFQUFRMnhCLFdBQWEzeEIsRUFBUXNuRCxZQUFTLEVBQ3ZPLElBQUk4TCxFQUFjLEVBQVEsTUFDdEJDLEVBQWMsRUFBUSxNQUMxQjF2RCxPQUFPQyxlQUFlNUQsRUFBUyxTQUFVLENBQUU4RixZQUFZLEVBQU1DLElBQUssV0FBYyxPQUFPc3RELEVBQVkvTCxNQUFRLElBQzNHLElBQUk5eUMsRUFBZSxFQUFRLE1BQ3ZCbUwsRUFBZSxFQUFRLE1BVzNCLFNBQVN6RCxFQUFjcFUsRUFBTUUsR0FDekIsSUFBSStsQyxFQUFVLElBQUl2NUIsRUFBYW1kLGdCQUFXbnNCLEVBQVd3QyxHQUVyRCxPQURBLElBQUlvckQsRUFBWTlMLE9BQU92WixFQUFTL2xDLEdBQVNxSixJQUFJdkosR0FDdENpbUMsRUFBUTFrQyxJQUNuQixDQVlBLFNBQVM2cEQsRUFBU3ByRCxFQUFNRSxHQUNwQixPQUFPa1UsRUFBY3BVLEVBQU1FLEdBQVMrRixRQUN4QyxDQTVCQXBLLE9BQU9DLGVBQWU1RCxFQUFTLGFBQWMsQ0FBRThGLFlBQVksRUFBTUMsSUFBSyxXQUFjLE9BQU80WixFQUFhZ1MsVUFBWSxJQUVwSGh1QixPQUFPQyxlQUFlNUQsRUFBUyxpQkFBa0IsQ0FBRThGLFlBQVksRUFBTUMsSUFBSyxXQUFjLE9BQU80WixFQUFhZ1MsVUFBWSxJQWF4SDN4QixFQUFRa2MsY0FBZ0JBLEVBY3hCbGMsRUFBUWt6RCxTQUFXQSxFQVluQmx6RCxFQUFRaXpELGdCQUpSLFNBQXlCaGhDLEVBQVVqcUIsRUFBU3NyRCxHQUN4QyxJQUFJdmxCLEVBQVUsSUFBSXY1QixFQUFhbWQsV0FBV00sRUFBVWpxQixFQUFTc3JELEdBQzdELE9BQU8sSUFBSUYsRUFBWTlMLE9BQU92WixFQUFTL2xDLEVBQzNDLEVBRUEsSUFBSXUvQyxFQUFpQixFQUFRLE1BQzdCNWpELE9BQU9DLGVBQWU1RCxFQUFTLFlBQWEsQ0FBRThGLFlBQVksRUFBTUMsSUFBSyxXQUFjLE9BQU93VixFQUFnQmdzQyxHQUFnQmxyQyxPQUFTLElBS25JcmMsRUFBUTh2QixZQUFjNXBCLEVBQWEsRUFBUSxPQUMzQyxJQUFJNkcsRUFBYSxFQUFRLE1BQ3JCd21ELEVBQWEsRUFBUSxNQUN6QjV2RCxPQUFPQyxlQUFlNUQsRUFBUyxVQUFXLENBQUU4RixZQUFZLEVBQU1DLElBQUssV0FBYyxPQUFPd3RELEVBQVdoL0IsT0FBUyxJQUM1RyxJQUFJaS9CLEVBQTBCLENBQUU3bEQsU0FBUyxHQVd6QzNOLEVBQVFnekQsVUFKUixTQUFtQm4rQixFQUFNN3NCLEdBRXJCLFlBRGdCLElBQVpBLElBQXNCQSxFQUFVd3JELElBQzdCLEVBQUl6bUQsRUFBV3duQixTQUFTMitCLEVBQVNyK0IsRUFBTTdzQixHQUNsRCxFQUVBaEksRUFBUW1ILFNBQVdqQixFQUFhLEVBQVEsb0NDaEd4QyxJQUFJekcsRUFBWSxFQUFRLE1BQ3BCZzBELEVBQWFoMEQsRUFBVSw4QkFDdkJpMEQsRUFBWWowRCxFQUFVLDZCQVd0QmswRCxFQUFpQixFQUFRLEtBQVIsR0FFckI1ekQsRUFBT0MsUUFBVSxTQUFtQjBELEdBQ25DLE1BQXFCLGtCQUFWQSxHQUdHLE9BQVZBLEdBQW1DLGlCQUFWQSxJQUd0Qml3RCxHQUFrQnY0QyxPQUFPaXJDLGVBQWUzaUQsRUFsQnpCLFNBQTJCQSxHQUNqRCxJQUVDLE9BREErdkQsRUFBVy92RCxJQUNKLENBQ1IsQ0FBRSxNQUFPb0YsR0FDUixPQUFPLENBQ1IsQ0FDRCxDQVd3RDhxRCxDQUFpQmx3RCxHQVZ6RCxxQkFVa0Vnd0QsRUFBVWh3RCxHQUM1Rix5QkN2QkEsSUFFSW13RCxFQUNBQyxFQUhBQyxFQUFVdnhCLFNBQVMzZ0MsVUFBVTJSLFNBQzdCd2dELEVBQWtDLGlCQUFaaFEsU0FBb0MsT0FBWkEsU0FBb0JBLFFBQVEzaUQsTUFHOUUsR0FBNEIsbUJBQWpCMnlELEdBQWdFLG1CQUExQnJ3RCxPQUFPQyxlQUN2RCxJQUNDaXdELEVBQWVsd0QsT0FBT0MsZUFBZSxDQUFDLEVBQUcsU0FBVSxDQUNsRG1DLElBQUssV0FDSixNQUFNK3RELENBQ1AsSUFFREEsRUFBbUIsQ0FBQyxFQUVwQkUsR0FBYSxXQUFjLE1BQU0sRUFBSSxHQUFHLEtBQU1ILEVBQy9DLENBQUUsTUFBT2hwRCxHQUNKQSxJQUFNaXBELElBQ1RFLEVBQWUsS0FFakIsTUFFQUEsRUFBZSxLQUdoQixJQUFJQyxFQUFtQixjQUNuQkMsRUFBZSxTQUE0Qnh3RCxHQUM5QyxJQUNDLElBQUl5d0QsRUFBUUosRUFBUTN3RCxLQUFLTSxHQUN6QixPQUFPdXdELEVBQWlCcG1ELEtBQUtzbUQsRUFDOUIsQ0FBRSxNQUFPcnJELEdBQ1IsT0FBTyxDQUNSLENBQ0QsRUFFSXNyRCxFQUFvQixTQUEwQjF3RCxHQUNqRCxJQUNDLE9BQUl3d0QsRUFBYXh3RCxLQUNqQnF3RCxFQUFRM3dELEtBQUtNLElBQ04sRUFDUixDQUFFLE1BQU9vRixHQUNSLE9BQU8sQ0FDUixDQUNELEVBQ0lxbUIsRUFBUXhyQixPQUFPOUIsVUFBVTJSLFNBT3pCbWdELEVBQW1DLG1CQUFYdjRDLFVBQTJCQSxPQUFPaXJDLFlBRTFEdkYsSUFBVyxJQUFLLENBQUMsSUFFakJFLEVBQVEsV0FBOEIsT0FBTyxDQUFPLEVBQ3hELEdBQXdCLGlCQUFiaFgsU0FBdUIsQ0FFakMsSUFBSWlYLEVBQU1qWCxTQUFTaVgsSUFDZjl4QixFQUFNL3JCLEtBQUs2OUMsS0FBUzl4QixFQUFNL3JCLEtBQUs0bUMsU0FBU2lYLE9BQzNDRCxFQUFRLFNBQTBCdDlDLEdBR2pDLElBQUtvOUMsSUFBV3A5QyxVQUE0QixJQUFWQSxHQUEwQyxpQkFBVkEsR0FDakUsSUFDQyxJQUFJZ1AsRUFBTXljLEVBQU0vckIsS0FBS00sR0FDckIsT0FsQlUsK0JBbUJUZ1AsR0FsQlUscUNBbUJQQSxHQWxCTyw0QkFtQlBBLEdBeEJTLG9CQXlCVEEsSUFDYyxNQUFiaFAsRUFBTSxHQUNaLENBQUUsTUFBT29GLEdBQVUsQ0FFcEIsT0FBTyxDQUNSLEVBRUYsQ0FFQS9JLEVBQU9DLFFBQVVnMEQsRUFDZCxTQUFvQnR3RCxHQUNyQixHQUFJczlDLEVBQU10OUMsR0FBVSxPQUFPLEVBQzNCLElBQUtBLEVBQVMsT0FBTyxFQUNyQixHQUFxQixtQkFBVkEsR0FBeUMsaUJBQVZBLEVBQXNCLE9BQU8sRUFDdkUsSUFDQ3N3RCxFQUFhdHdELEVBQU8sS0FBTW13RCxFQUMzQixDQUFFLE1BQU8vcUQsR0FDUixHQUFJQSxJQUFNZ3JELEVBQW9CLE9BQU8sQ0FDdEMsQ0FDQSxPQUFRSSxFQUFheHdELElBQVUwd0QsRUFBa0Ixd0QsRUFDbEQsRUFDRSxTQUFvQkEsR0FDckIsR0FBSXM5QyxFQUFNdDlDLEdBQVUsT0FBTyxFQUMzQixJQUFLQSxFQUFTLE9BQU8sRUFDckIsR0FBcUIsbUJBQVZBLEdBQXlDLGlCQUFWQSxFQUFzQixPQUFPLEVBQ3ZFLEdBQUlpd0QsRUFBa0IsT0FBT1MsRUFBa0Ixd0QsR0FDL0MsR0FBSXd3RCxFQUFheHdELEdBQVUsT0FBTyxFQUNsQyxJQUFJMndELEVBQVdsbEMsRUFBTS9yQixLQUFLTSxHQUMxQixRQXBEWSxzQkFvRFIyd0QsR0FuRFMsK0JBbURlQSxJQUEwQixpQkFBbUJ4bUQsS0FBS3dtRCxLQUN2RUQsRUFBa0Ixd0QsRUFDMUIsK0JDbEdELElBQUk0d0QsRUFBU2gvQixLQUFLenpCLFVBQVV5eUQsT0FVeEJubEMsRUFBUXhyQixPQUFPOUIsVUFBVTJSLFNBRXpCbWdELEVBQWlCLEVBQVEsS0FBUixHQUVyQjV6RCxFQUFPQyxRQUFVLFNBQXNCMEQsR0FDdEMsTUFBcUIsaUJBQVZBLEdBQWdDLE9BQVZBLElBRzFCaXdELEVBakJZLFNBQTJCandELEdBQzlDLElBRUMsT0FEQTR3RCxFQUFPbHhELEtBQUtNLElBQ0wsQ0FDUixDQUFFLE1BQU9vRixHQUNSLE9BQU8sQ0FDUixDQUNELENBVXlCeXJELENBQWM3d0QsR0FQdkIsa0JBT2dDeXJCLEVBQU0vckIsS0FBS00sR0FDM0QsK0JDbkJBLElBQUk4d0QsRUFBV3ZsRCxPQUFPcE4sVUFBVTJSLFNBUzVCMmIsRUFBUXhyQixPQUFPOUIsVUFBVTJSLFNBRXpCbWdELEVBQWlCLEVBQVEsS0FBUixHQUVyQjV6RCxFQUFPQyxRQUFVLFNBQXdCMEQsR0FDeEMsTUFBcUIsaUJBQVZBLEdBR1UsaUJBQVZBLElBR0ppd0QsRUFuQmMsU0FBeUJqd0QsR0FDOUMsSUFFQyxPQURBOHdELEVBQVNweEQsS0FBS00sSUFDUCxDQUNSLENBQUUsTUFBT29GLEdBQ1IsT0FBTyxDQUNSLENBQ0QsQ0FZeUIyckQsQ0FBZ0Ivd0QsR0FWMUIsb0JBVW1DeXJCLEVBQU0vckIsS0FBS00sR0FDN0QsK0JDckJBLElBRUlzRixFQUNBODdDLEVBQ0E0UCxFQUNBQyxFQUxBbDFELEVBQVksRUFBUSxNQUNwQmswRCxFQUFpQixFQUFRLEtBQVIsR0FNckIsR0FBSUEsRUFBZ0IsQ0FDbkIzcUQsRUFBTXZKLEVBQVUsbUNBQ2hCcWxELEVBQVFybEQsRUFBVSx5QkFDbEJpMUQsRUFBZ0IsQ0FBQyxFQUVqQixJQUFJRSxFQUFtQixXQUN0QixNQUFNRixDQUNQLEVBQ0FDLEVBQWlCLENBQ2hCbmhELFNBQVVvaEQsRUFDVmx5QixRQUFTa3lCLEdBR3dCLGlCQUF2Qng1QyxPQUFPd2tDLGNBQ2pCK1UsRUFBZXY1QyxPQUFPd2tDLGFBQWVnVixFQUV2QyxDQUVBLElBQUlsQixFQUFZajBELEVBQVUsNkJBQ3RCMmhELEVBQU96OUMsT0FBTytCLHlCQUdsQjNGLEVBQU9DLFFBQVUyekQsRUFFZCxTQUFpQmp3RCxHQUNsQixJQUFLQSxHQUEwQixpQkFBVkEsRUFDcEIsT0FBTyxFQUdSLElBQUl1Z0MsRUFBYW1kLEVBQUsxOUMsRUFBTyxhQUU3QixJQUQrQnVnQyxJQUFjajdCLEVBQUlpN0IsRUFBWSxTQUU1RCxPQUFPLEVBR1IsSUFDQzZnQixFQUFNcGhELEVBQU9peEQsRUFDZCxDQUFFLE1BQU83ckQsR0FDUixPQUFPQSxJQUFNNHJELENBQ2QsQ0FDRCxFQUNFLFNBQWlCaHhELEdBRWxCLFNBQUtBLEdBQTJCLGlCQUFWQSxHQUF1QyxtQkFBVkEsSUF2QnBDLG9CQTJCUmd3RCxFQUFVaHdELEVBQ2xCLCtCQ3ZERCxJQUFJbXhELEVBQVc3bEQsT0FBT25OLFVBQVU2Z0MsUUFTNUJ2VCxFQUFReHJCLE9BQU85QixVQUFVMlIsU0FFekJtZ0QsRUFBaUIsRUFBUSxLQUFSLEdBRXJCNXpELEVBQU9DLFFBQVUsU0FBa0IwRCxHQUNsQyxNQUFxQixpQkFBVkEsR0FHVSxpQkFBVkEsSUFHSml3RCxFQW5CYyxTQUF5Qmp3RCxHQUM5QyxJQUVDLE9BREFteEQsRUFBU3p4RCxLQUFLTSxJQUNQLENBQ1IsQ0FBRSxNQUFPb0YsR0FDUixPQUFPLENBQ1IsQ0FDRCxDQVl5QmdzRCxDQUFnQnB4RCxHQVYxQixvQkFVbUN5ckIsRUFBTS9yQixLQUFLTSxHQUM3RCw2QkNyQkFDLE9BQU9DLGVBQWU1RCxFQUFTLGFBQS9CLENBQ0UwRCxPQUFPLElBbUJULElBQUlxeEQsRUFBVyxTQUFXQyxHQUN4QixTQUFTRCxFQUFTRSxFQUFJQyxHQUNwQixPQUFPRixFQUFVM3pELE1BQU1qQixLQUFNSSxVQUMvQixDQU1BLE9BSkF1MEQsRUFBU3ZoRCxTQUFXLFdBQ2xCLE9BQU93aEQsRUFBVXhoRCxVQUNuQixFQUVPdWhELENBQ1IsQ0FWYyxFQVVaLFNBQVVJLEVBQVVDLEdBQ3JCLE1BQXdCLGlCQUFiRCxHQUFzQyxPQUFiQSxHQUF3QyxpQkFBWEMsR0FBa0MsT0FBWEEsR0FFakZ6eEQsT0FBTzZLLEtBQUs0bUQsR0FBUXZ4QyxPQUFNLFNBQVVwVCxHQUN6QyxJQUFLMGtELEVBQVMvTyxxQkFBcUIzMUMsR0FBTSxPQUFPLEVBRWhELElBQUk0a0QsRUFBYUQsRUFBTzNrRCxHQUNwQjZrRCxFQUFlSCxFQUFTMWtELEdBQzVCLFNBQTBCLGlCQUFmNGtELEdBQTBDLE9BQWZBLEVBQXVCTixFQUFTTyxFQUFjRCxHQUFjQyxJQUFpQkQsRUFHckgsR0FDRixJQUVBcjFELEVBQUEsUUFBcUIrMEQsRUFDckJoMUQsRUFBT0MsUUFBVUEsRUFBaUIscUNDN0NsQyxJQUFJbXZCLEVBQVF4ckIsT0FBTzlCLFVBQVUyUixTQUc3QixHQUZpQixFQUFRLEtBQVIsR0FFRCxDQUNmLElBQUkraEQsRUFBV242QyxPQUFPdlosVUFBVTJSLFNBQzVCZ2lELEVBQWlCLGlCQVFyQnoxRCxFQUFPQyxRQUFVLFNBQWtCMEQsR0FDbEMsR0FBcUIsaUJBQVZBLEVBQ1YsT0FBTyxFQUVSLEdBQTBCLG9CQUF0QnlyQixFQUFNL3JCLEtBQUtNLEdBQ2QsT0FBTyxFQUVSLElBQ0MsT0FmbUIsU0FBNEJBLEdBQ2hELE1BQStCLGlCQUFwQkEsRUFBTWcvQixXQUdWOHlCLEVBQWUzbkQsS0FBSzBuRCxFQUFTbnlELEtBQUtNLEdBQzFDLENBVVMreEQsQ0FBZS94RCxFQUN2QixDQUFFLE1BQU9vRixHQUNSLE9BQU8sQ0FDUixDQUNELENBQ0QsTUFFQy9JLEVBQU9DLFFBQVUsU0FBa0IwRCxHQUVsQyxPQUFPLENBQ1Isa0JDdkJELElBbUN3QjRyQixFQTdCcEJvbUMsRUFBa0IsWUFDbEJDLEVBQXFCcHpDLE9BQU9tekMsRUFBZ0JFLFFBYTVDQyxFQUE4QixpQkFBVixFQUFBL3JCLEdBQXNCLEVBQUFBLEdBQVUsRUFBQUEsRUFBT25tQyxTQUFXQSxRQUFVLEVBQUFtbUMsRUFHaEZnc0IsRUFBMEIsaUJBQVJ6MUQsTUFBb0JBLE1BQVFBLEtBQUtzRCxTQUFXQSxRQUFVdEQsS0FHeEVnSixFQUFPd3NELEdBQWNDLEdBQVl0ekIsU0FBUyxjQUFUQSxHQXNCakN1ekIsR0Fib0J6bUMsRUF6Qk4sQ0FDaEIsSUFBSyxRQUNMLElBQUssT0FDTCxJQUFLLE9BQ0wsSUFBSyxTQUNMLElBQUssUUFDTCxJQUFLLFNBb0JFLFNBQVM3ZSxHQUNkLE9BQWlCLE1BQVY2ZSxPQUFpQjlwQixFQUFZOHBCLEVBQU83ZSxFQUM3QyxHQW9CRXVsRCxFQVBjcnlELE9BQU85QixVQU9RMlIsU0FHN0I0SCxFQUFTL1IsRUFBSytSLE9BR2Q2NkMsRUFBYzc2QyxFQUFTQSxFQUFPdlosZUFBWTJELEVBQzFDMHdELEVBQWlCRCxFQUFjQSxFQUFZemlELGNBQVdoTyxFQTBJMUR6RixFQUFPQyxRQVBQLFNBQWdCOGlDLEdBdENoQixJQUFrQnAvQixFQXdDaEIsT0FEQW8vQixFQXRDZ0IsT0FEQXAvQixFQXVDRW8vQixHQXRDSyxHQXBGekIsU0FBc0JwL0IsR0FFcEIsR0FBb0IsaUJBQVRBLEVBQ1QsT0FBT0EsRUFFVCxHQW9ERixTQUFrQkEsR0FDaEIsTUFBdUIsaUJBQVRBLEdBdEJoQixTQUFzQkEsR0FDcEIsUUFBU0EsR0FBeUIsaUJBQVRBLENBQzNCLENBcUJLeXlELENBQWF6eUQsSUFuSUYsbUJBbUlZc3lELEVBQWU1eUQsS0FBS00sRUFDaEQsQ0F2RE0rN0MsQ0FBUy83QyxHQUNYLE9BQU93eUQsRUFBaUJBLEVBQWU5eUQsS0FBS00sR0FBUyxHQUV2RCxJQUFJMEMsRUFBVTFDLEVBQVEsR0FDdEIsTUFBa0IsS0FBVjBDLEdBQWtCLEVBQUkxQyxJQUFVLElBQWEsS0FBTzBDLENBQzlELENBMEU4Qmd3RCxDQUFhMXlELEtBdUN2Qml5RCxFQUFtQjluRCxLQUFLaTFCLEdBQ3RDQSxFQUFPenZCLFFBQVFxaUQsRUFBaUJLLEdBQ2hDanpCLENBQ04sa0JDek1BLElBQUl1ekIsRUFBVyxJQUNYQyxFQUFtQixpQkFHbkJDLEVBQVUscUJBQ1ZDLEVBQVUsb0JBQ1ZDLEVBQVMsNkJBR1RaLEVBQThCLGlCQUFWLEVBQUEvckIsR0FBc0IsRUFBQUEsR0FBVSxFQUFBQSxFQUFPbm1DLFNBQVdBLFFBQVUsRUFBQW1tQyxFQUdoRmdzQixFQUEwQixpQkFBUnoxRCxNQUFvQkEsTUFBUUEsS0FBS3NELFNBQVdBLFFBQVV0RCxLQUd4RWdKLEVBQU93c0QsR0FBY0MsR0FBWXR6QixTQUFTLGNBQVRBLEdBVXJDLFNBQVNrMEIsRUFBVWoxRCxFQUFPb1AsR0FLeEIsSUFKQSxJQUFJb0IsR0FBUyxFQUNUeFIsRUFBU29RLEVBQU9wUSxPQUNoQm1zQixFQUFTbnJCLEVBQU1oQixTQUVWd1IsRUFBUXhSLEdBQ2ZnQixFQUFNbXJCLEVBQVMzYSxHQUFTcEIsRUFBT29CLEdBRWpDLE9BQU94USxDQUNULENBR0EsSUFBSWsxRCxFQUFjaHpELE9BQU85QixVQUdyQnFELEVBQWlCeXhELEVBQVl6eEQsZUFPN0I4d0QsRUFBaUJXLEVBQVluakQsU0FHN0I0SCxFQUFTL1IsRUFBSytSLE9BQ2RnckMsRUFBdUJ1USxFQUFZdlEscUJBQ25Dd1EsRUFBbUJ4N0MsRUFBU0EsRUFBT3k3Qyx3QkFBcUJyeEQsRUFhNUQsU0FBU3N4RCxFQUFZcjFELEVBQU9vaEMsRUFBT3RULEVBQVd3bkMsRUFBVTN3RCxHQUN0RCxJQUFJNkwsR0FBUyxFQUNUeFIsRUFBU2dCLEVBQU1oQixPQUtuQixJQUhBOHVCLElBQWNBLEVBQVl5bkMsR0FDMUI1d0QsSUFBV0EsRUFBUyxNQUVYNkwsRUFBUXhSLEdBQVEsQ0FDdkIsSUFBSWlELEVBQVFqQyxFQUFNd1EsR0FDZDR3QixFQUFRLEdBQUt0VCxFQUFVN3JCLEdBQ3JCbS9CLEVBQVEsRUFFVmkwQixFQUFZcHpELEVBQU9tL0IsRUFBUSxFQUFHdFQsRUFBV3duQyxFQUFVM3dELEdBRW5Ec3dELEVBQVV0d0QsRUFBUTFDLEdBRVZxekQsSUFDVjN3RCxFQUFPQSxFQUFPM0YsUUFBVWlELEVBRTVCLENBQ0EsT0FBTzBDLENBQ1QsQ0FTQSxTQUFTNHdELEVBQWN0ekQsR0FDckIsT0FBTzBHLEVBQVExRyxJQXlDakIsU0FBcUJBLEdBRW5CLE9BbUZGLFNBQTJCQSxHQUN6QixPQWdIRixTQUFzQkEsR0FDcEIsUUFBU0EsR0FBeUIsaUJBQVRBLENBQzNCLENBbEhTeXlELENBQWF6eUQsSUE5QnRCLFNBQXFCQSxHQUNuQixPQUFnQixNQUFUQSxHQWtGVCxTQUFrQkEsR0FDaEIsTUFBdUIsaUJBQVRBLEdBQ1pBLEdBQVMsR0FBS0EsRUFBUSxHQUFLLEdBQUtBLEdBQVM0eUQsQ0FDN0MsQ0FyRjBCVyxDQUFTdnpELEVBQU1qRCxVQWlEekMsU0FBb0JpRCxHQUdsQixJQUFJc3RCLEVBNEROLFNBQWtCdHRCLEdBQ2hCLElBQUk4RCxTQUFjOUQsRUFDbEIsUUFBU0EsSUFBa0IsVUFBUjhELEdBQTRCLFlBQVJBLEVBQ3pDLENBL0RZMHZELENBQVN4ekQsR0FBU3N5RCxFQUFlNXlELEtBQUtNLEdBQVMsR0FDekQsT0FBT3N0QixHQUFPd2xDLEdBQVd4bEMsR0FBT3lsQyxDQUNsQyxDQXREcURVLENBQVd6ekQsRUFDaEUsQ0E0QmdDdWIsQ0FBWXZiLEVBQzVDLENBckZTMHpELENBQWtCMXpELElBQVV3QixFQUFlOUIsS0FBS00sRUFBTyxhQUMxRDBpRCxFQUFxQmhqRCxLQUFLTSxFQUFPLFdBQWFzeUQsRUFBZTV5RCxLQUFLTSxJQUFVNnlELEVBQ2xGLENBN0MyQmMsQ0FBWTN6RCxPQUNoQ2t6RCxHQUFvQmx6RCxHQUFTQSxFQUFNa3pELEdBQzFDLENBb0VBLElBQUl4c0QsRUFBVXhJLE1BQU13SSxRQTZLcEJySyxFQUFPQyxRQWpPUCxTQUFxQnlCLEdBRW5CLE9BRGFBLEdBQVFBLEVBQU1oQixPQUNYcTJELEVBQVlyMUQsRUFBTzQwRCxHQUFZLEVBQ2pELDZCQ3JIQSxJQUdJaUIsRUFBaUIsNEJBR2pCQyxFQUF1QixFQUN2QkMsRUFBeUIsRUFHekJsQixFQUFtQixpQkFHbkJDLEVBQVUscUJBQ1ZrQixFQUFXLGlCQUNYQyxFQUFXLHlCQUNYQyxFQUFVLG1CQUNWQyxFQUFVLGdCQUNWQyxFQUFXLGlCQUNYckIsRUFBVSxvQkFDVkMsRUFBUyw2QkFDVHFCLEVBQVMsZUFDVEMsRUFBWSxrQkFDWkMsRUFBVSxnQkFDVkMsRUFBWSxrQkFDWkMsRUFBYSxtQkFDYkMsRUFBVyxpQkFDWEMsRUFBWSxrQkFDWkMsRUFBUyxlQUNUQyxFQUFZLGtCQUVaQyxFQUFlLHFCQUNmQyxFQUFhLG1CQUViQyxFQUFpQix1QkFDakJDLEVBQWMsb0JBa0JkQyxFQUFlLDhCQUdmQyxFQUFXLG1CQUdYQyxFQUFpQixDQUFDLEVBQ3RCQSxFQXhCaUIseUJBd0JZQSxFQXZCWix5QkF3QmpCQSxFQXZCYyxzQkF1QllBLEVBdEJYLHVCQXVCZkEsRUF0QmUsdUJBc0JZQSxFQXJCWix1QkFzQmZBLEVBckJzQiw4QkFxQllBLEVBcEJsQix3QkFxQmhCQSxFQXBCZ0IseUJBb0JZLEVBQzVCQSxFQUFldEMsR0FBV3NDLEVBQWVwQixHQUN6Q29CLEVBQWVKLEdBQWtCSSxFQUFlbEIsR0FDaERrQixFQUFlSCxHQUFlRyxFQUFlakIsR0FDN0NpQixFQUFlaEIsR0FBWWdCLEVBQWVyQyxHQUMxQ3FDLEVBQWVmLEdBQVVlLEVBQWVkLEdBQ3hDYyxFQUFlWixHQUFhWSxFQUFlVCxHQUMzQ1MsRUFBZVIsR0FBVVEsRUFBZVAsR0FDeENPLEVBQWVMLElBQWMsRUFHN0IsSUFBSTNDLEVBQThCLGlCQUFWLEVBQUEvckIsR0FBc0IsRUFBQUEsR0FBVSxFQUFBQSxFQUFPbm1DLFNBQVdBLFFBQVUsRUFBQW1tQyxFQUdoRmdzQixFQUEwQixpQkFBUnoxRCxNQUFvQkEsTUFBUUEsS0FBS3NELFNBQVdBLFFBQVV0RCxLQUd4RWdKLEVBQU93c0QsR0FBY0MsR0FBWXR6QixTQUFTLGNBQVRBLEdBR2pDczJCLEVBQTRDOTRELElBQVlBLEVBQVFpakMsVUFBWWpqQyxFQUc1RSs0RCxFQUFhRCxHQUE0Qy80RCxJQUFXQSxFQUFPa2pDLFVBQVlsakMsRUFHdkZpNUQsRUFBZ0JELEdBQWNBLEVBQVcvNEQsVUFBWTg0RCxFQUdyREcsRUFBY0QsR0FBaUJuRCxFQUFXcUQsUUFHMUNDLEVBQVksV0FDZCxJQUNFLE9BQU9GLEdBQWVBLEVBQVlHLFNBQVdILEVBQVlHLFFBQVEsT0FDbkUsQ0FBRSxNQUFPdHdELEdBQUksQ0FDZixDQUplLEdBT1h1d0QsRUFBbUJGLEdBQVlBLEVBQVNHLGFBdUQ1QyxTQUFTQyxFQUFVOTNELEVBQU84dEIsR0FJeEIsSUFIQSxJQUFJdGQsR0FBUyxFQUNUeFIsRUFBa0IsTUFBVGdCLEVBQWdCLEVBQUlBLEVBQU1oQixTQUU5QndSLEVBQVF4UixHQUNmLEdBQUk4dUIsRUFBVTl0QixFQUFNd1EsR0FBUUEsRUFBT3hRLEdBQ2pDLE9BQU8sRUFHWCxPQUFPLENBQ1QsQ0FpRUEsU0FBUyszRCxFQUFXMXRELEdBQ2xCLElBQUltRyxHQUFTLEVBQ1Q3TCxFQUFTeEUsTUFBTWtLLEVBQUlsRCxNQUt2QixPQUhBa0QsRUFBSTdDLFNBQVEsU0FBU3ZGLEVBQU8rTSxHQUMxQnJLLElBQVM2TCxHQUFTLENBQUN4QixFQUFLL00sRUFDMUIsSUFDTzBDLENBQ1QsQ0F1QkEsU0FBU3F6RCxFQUFXMy9DLEdBQ2xCLElBQUk3SCxHQUFTLEVBQ1Q3TCxFQUFTeEUsTUFBTWtZLEVBQUlsUixNQUt2QixPQUhBa1IsRUFBSTdRLFNBQVEsU0FBU3ZGLEdBQ25CMEMsSUFBUzZMLEdBQVN2TyxDQUNwQixJQUNPMEMsQ0FDVCxDQUdBLElBZU1zekQsRUF2Q1dsMkQsRUFBTW0yRCxFQXdCbkJDLEVBQWFoNEQsTUFBTUMsVUFDbkJnNEQsRUFBWXIzQixTQUFTM2dDLFVBQ3JCODBELEVBQWNoekQsT0FBTzlCLFVBR3JCaTRELEVBQWF6d0QsRUFBSyxzQkFHbEIwd0QsRUFBZUYsRUFBVXJtRCxTQUd6QnRPLEVBQWlCeXhELEVBQVl6eEQsZUFHN0I4MEQsR0FDRU4sRUFBTSxTQUFTNTZCLEtBQUtnN0IsR0FBY0EsRUFBV3RyRCxNQUFRc3JELEVBQVd0ckQsS0FBS3lyRCxVQUFZLEtBQ3ZFLGlCQUFtQlAsRUFBTyxHQVF0Q1EsRUFBdUJ2RCxFQUFZbmpELFNBR25DMm1ELEdBQWE1M0MsT0FBTyxJQUN0QnczQyxFQUFhMzJELEtBQUs4QixHQUFnQm1PLFFBN1BqQixzQkE2UHVDLFFBQ3ZEQSxRQUFRLHlEQUEwRCxTQUFXLEtBSTVFOEssR0FBUzY2QyxFQUFnQjN2RCxFQUFLOFUsWUFBUzNZLEVBQ3ZDNFYsR0FBUy9SLEVBQUsrUixPQUNkcW5DLEdBQWFwNUMsRUFBS281QyxXQUNsQjJELEdBQXVCdVEsRUFBWXZRLHFCQUNuQ2wwQyxHQUFTMG5ELEVBQVcxbkQsT0FDcEJrb0QsR0FBaUJoL0MsR0FBU0EsR0FBT2lyQyxpQkFBYzdnRCxFQUcvQzYwRCxHQUFtQjEyRCxPQUFPZ3NCLHNCQUMxQjJxQyxHQUFpQm44QyxHQUFTQSxHQUFPQyxjQUFXNVksRUFDNUMrMEQsSUFuRWEvMkQsRUFtRVFHLE9BQU82SyxLQW5FVG1yRCxFQW1FZWgyRCxPQWxFN0IsU0FBU2kxQyxHQUNkLE9BQU9wMUMsRUFBS20yRCxFQUFVL2dCLEdBQ3hCLEdBbUVFcUssR0FBV3VYLEdBQVVueEQsRUFBTSxZQUMzQmloQixHQUFNa3dDLEdBQVVueEQsRUFBTSxPQUN0Qnk2QyxHQUFVMFcsR0FBVW54RCxFQUFNLFdBQzFCVixHQUFNNnhELEdBQVVueEQsRUFBTSxPQUN0Qis2QyxHQUFVb1csR0FBVW54RCxFQUFNLFdBQzFCb3hELEdBQWVELEdBQVU3MkQsT0FBUSxVQUdqQysyRCxHQUFxQkMsR0FBUzFYLElBQzlCMlgsR0FBZ0JELEdBQVNyd0MsSUFDekJ1d0MsR0FBb0JGLEdBQVM3VyxJQUM3QmdYLEdBQWdCSCxHQUFTaHlELElBQ3pCb3lELEdBQW9CSixHQUFTdlcsSUFHN0I2UixHQUFjNzZDLEdBQVNBLEdBQU92WixlQUFZMkQsRUFDMUN3MUQsR0FBZ0IvRSxHQUFjQSxHQUFZdnpCLGFBQVVsOUIsRUFTeEQsU0FBU3kxRCxHQUFLQyxHQUNaLElBQUlqcEQsR0FBUyxFQUNUeFIsRUFBb0IsTUFBWHk2RCxFQUFrQixFQUFJQSxFQUFRejZELE9BRzNDLElBREFMLEtBQUsrNkQsVUFDSWxwRCxFQUFReFIsR0FBUSxDQUN2QixJQUFJdTBCLEVBQVFrbUMsRUFBUWpwRCxHQUNwQjdSLEtBQUswWixJQUFJa2IsRUFBTSxHQUFJQSxFQUFNLEdBQzNCLENBQ0YsQ0E2RkEsU0FBU29tQyxHQUFVRixHQUNqQixJQUFJanBELEdBQVMsRUFDVHhSLEVBQW9CLE1BQVh5NkQsRUFBa0IsRUFBSUEsRUFBUXo2RCxPQUczQyxJQURBTCxLQUFLKzZELFVBQ0lscEQsRUFBUXhSLEdBQVEsQ0FDdkIsSUFBSXUwQixFQUFRa21DLEVBQVFqcEQsR0FDcEI3UixLQUFLMFosSUFBSWtiLEVBQU0sR0FBSUEsRUFBTSxHQUMzQixDQUNGLENBMEdBLFNBQVNxbUMsR0FBU0gsR0FDaEIsSUFBSWpwRCxHQUFTLEVBQ1R4UixFQUFvQixNQUFYeTZELEVBQWtCLEVBQUlBLEVBQVF6NkQsT0FHM0MsSUFEQUwsS0FBSys2RCxVQUNJbHBELEVBQVF4UixHQUFRLENBQ3ZCLElBQUl1MEIsRUFBUWttQyxFQUFRanBELEdBQ3BCN1IsS0FBSzBaLElBQUlrYixFQUFNLEdBQUlBLEVBQU0sR0FDM0IsQ0FDRixDQTZGQSxTQUFTc21DLEdBQVN6cUQsR0FDaEIsSUFBSW9CLEdBQVMsRUFDVHhSLEVBQW1CLE1BQVZvUSxFQUFpQixFQUFJQSxFQUFPcFEsT0FHekMsSUFEQUwsS0FBS203RCxTQUFXLElBQUlGLEtBQ1hwcEQsRUFBUXhSLEdBQ2ZMLEtBQUsrSSxJQUFJMEgsRUFBT29CLEdBRXBCLENBeUNBLFNBQVN1cEQsR0FBTU4sR0FDYixJQUFJcHpELEVBQU8xSCxLQUFLbTdELFNBQVcsSUFBSUgsR0FBVUYsR0FDekM5NkQsS0FBS3dJLEtBQU9kLEVBQUtjLElBQ25CLENBcUlBLFNBQVM2eUQsR0FBYWg2RCxFQUFPZ1AsR0FFM0IsSUFEQSxJQUFJaFEsRUFBU2dCLEVBQU1oQixPQUNaQSxLQUNMLEdBQUkrVyxHQUFHL1YsRUFBTWhCLEdBQVEsR0FBSWdRLEdBQ3ZCLE9BQU9oUSxFQUdYLE9BQVEsQ0FDVixDQXlCQSxTQUFTaTdELEdBQVdoNEQsR0FDbEIsT0FBYSxNQUFUQSxPQUNlOEIsSUFBVjlCLEVBQXNCNjBELEVBQWVQLEVBRXRDb0MsSUFBa0JBLE1BQWtCejJELE9BQU9ELEdBMGFyRCxTQUFtQkEsR0FDakIsSUFBSWdpRCxFQUFReGdELEVBQWU5QixLQUFLTSxFQUFPMDJELElBQ25DcHBDLEVBQU10dEIsRUFBTTAyRCxJQUVoQixJQUNFMTJELEVBQU0wMkQsU0FBa0I1MEQsRUFDeEIsSUFBSW0yRCxHQUFXLENBQ2pCLENBQUUsTUFBTzd5RCxHQUFJLENBRWIsSUFBSTFDLEVBQVM4ekQsRUFBcUI5MkQsS0FBS00sR0FRdkMsT0FQSWk0RCxJQUNFalcsRUFDRmhpRCxFQUFNMDJELElBQWtCcHBDLFNBRWpCdHRCLEVBQU0wMkQsS0FHVmgwRCxDQUNULENBM2JNdzFELENBQVVsNEQsR0E0aUJoQixTQUF3QkEsR0FDdEIsT0FBT3cyRCxFQUFxQjkyRCxLQUFLTSxFQUNuQyxDQTdpQk1zeUQsQ0FBZXR5RCxFQUNyQixDQVNBLFNBQVNtNEQsR0FBZ0JuNEQsR0FDdkIsT0FBT3l5RCxHQUFhenlELElBQVVnNEQsR0FBV2g0RCxJQUFVNnlELENBQ3JELENBZ0JBLFNBQVN1RixHQUFZcDRELEVBQU9pWCxFQUFPb2hELEVBQVNDLEVBQVl6VCxHQUN0RCxPQUFJN2tELElBQVVpWCxJQUdELE1BQVRqWCxHQUEwQixNQUFUaVgsSUFBbUJ3N0MsR0FBYXp5RCxLQUFXeXlELEdBQWF4N0MsR0FDcEVqWCxHQUFVQSxHQUFTaVgsR0FBVUEsRUFtQnhDLFNBQXlCMlUsRUFBUTNVLEVBQU9vaEQsRUFBU0MsRUFBWUMsRUFBVzFULEdBQ3RFLElBQUkyVCxFQUFXOXhELEdBQVFrbEIsR0FDbkI2c0MsRUFBVy94RCxHQUFRdVEsR0FDbkJ5aEQsRUFBU0YsRUFBV3pFLEVBQVc0RSxHQUFPL3NDLEdBQ3RDZ3RDLEVBQVNILEVBQVcxRSxFQUFXNEUsR0FBTzFoRCxHQUt0QzRoRCxHQUhKSCxFQUFTQSxHQUFVN0YsRUFBVTBCLEVBQVltRSxJQUdoQm5FLEVBQ3JCdUUsR0FISkYsRUFBU0EsR0FBVS9GLEVBQVUwQixFQUFZcUUsSUFHaEJyRSxFQUNyQndFLEVBQVlMLEdBQVVFLEVBRTFCLEdBQUlHLEdBQWFyK0MsR0FBU2tSLEdBQVMsQ0FDakMsSUFBS2xSLEdBQVN6RCxHQUNaLE9BQU8sRUFFVHVoRCxHQUFXLEVBQ1hLLEdBQVcsQ0FDYixDQUNBLEdBQUlFLElBQWNGLEVBRWhCLE9BREFoVSxJQUFVQSxFQUFRLElBQUlpVCxJQUNkVSxHQUFZNUMsR0FBYWhxQyxHQUM3Qm90QyxHQUFZcHRDLEVBQVEzVSxFQUFPb2hELEVBQVNDLEVBQVlDLEVBQVcxVCxHQWlLbkUsU0FBb0JqNUIsRUFBUTNVLEVBQU9xVyxFQUFLK3FDLEVBQVNDLEVBQVlDLEVBQVcxVCxHQUN0RSxPQUFRdjNCLEdBQ04sS0FBSzBuQyxFQUNILEdBQUtwcEMsRUFBT3F0QyxZQUFjaGlELEVBQU1naUQsWUFDM0JydEMsRUFBT3N0QyxZQUFjamlELEVBQU1paUQsV0FDOUIsT0FBTyxFQUVUdHRDLEVBQVNBLEVBQU9tOUIsT0FDaEI5eEMsRUFBUUEsRUFBTTh4QyxPQUVoQixLQUFLZ00sRUFDSCxRQUFLbnBDLEVBQU9xdEMsWUFBY2hpRCxFQUFNZ2lELGFBQzNCVixFQUFVLElBQUl4WixHQUFXbnpCLEdBQVMsSUFBSW16QixHQUFXOW5DLEtBS3hELEtBQUtnOUMsRUFDTCxLQUFLQyxFQUNMLEtBQUtHLEVBR0gsT0FBT3ZnRCxJQUFJOFgsR0FBUzNVLEdBRXRCLEtBQUtrOUMsRUFDSCxPQUFPdm9DLEVBQU8zc0IsTUFBUWdZLEVBQU1oWSxNQUFRMnNCLEVBQU91dEMsU0FBV2xpRCxFQUFNa2lELFFBRTlELEtBQUt6RSxFQUNMLEtBQUtFLEVBSUgsT0FBT2hwQyxHQUFXM1UsRUFBUSxHQUU1QixLQUFLbTlDLEVBQ0gsSUFBSWdGLEVBQVV0RCxFQUVoQixLQUFLbkIsRUFDSCxJQUFJMEUsRUFBWWhCLEVBQVV4RSxFQUcxQixHQUZBdUYsSUFBWUEsRUFBVXJELEdBRWxCbnFDLEVBQU8xbUIsTUFBUStSLEVBQU0vUixPQUFTbTBELEVBQ2hDLE9BQU8sRUFHVCxJQUFJQyxFQUFVelUsRUFBTXhpRCxJQUFJdXBCLEdBQ3hCLEdBQUkwdEMsRUFDRixPQUFPQSxHQUFXcmlELEVBRXBCb2hELEdBQVd2RSxFQUdYalAsRUFBTXp1QyxJQUFJd1YsRUFBUTNVLEdBQ2xCLElBQUl2VSxFQUFTczJELEdBQVlJLEVBQVF4dEMsR0FBU3d0QyxFQUFRbmlELEdBQVFvaEQsRUFBU0MsRUFBWUMsRUFBVzFULEdBRTFGLE9BREFBLEVBQWMsT0FBRWo1QixHQUNUbHBCLEVBRVQsSUFob0NZLGtCQWlvQ1YsR0FBSTQwRCxHQUNGLE9BQU9BLEdBQWM1M0QsS0FBS2tzQixJQUFXMHJDLEdBQWM1M0QsS0FBS3VYLEdBRzlELE9BQU8sQ0FDVCxDQS9OUXNpRCxDQUFXM3RDLEVBQVEzVSxFQUFPeWhELEVBQVFMLEVBQVNDLEVBQVlDLEVBQVcxVCxHQUV4RSxLQUFNd1QsRUFBVXhFLEdBQXVCLENBQ3JDLElBQUkyRixFQUFlWCxHQUFZcjNELEVBQWU5QixLQUFLa3NCLEVBQVEsZUFDdkQ2dEMsRUFBZVgsR0FBWXQzRCxFQUFlOUIsS0FBS3VYLEVBQU8sZUFFMUQsR0FBSXVpRCxHQUFnQkMsRUFBYyxDQUNoQyxJQUFJQyxFQUFlRixFQUFlNXRDLEVBQU81ckIsUUFBVTRyQixFQUMvQyt0QyxFQUFlRixFQUFleGlELEVBQU1qWCxRQUFVaVgsRUFHbEQsT0FEQTR0QyxJQUFVQSxFQUFRLElBQUlpVCxJQUNmUyxFQUFVbUIsRUFBY0MsRUFBY3RCLEVBQVNDLEVBQVl6VCxFQUNwRSxDQUNGLENBQ0EsUUFBS2tVLElBR0xsVSxJQUFVQSxFQUFRLElBQUlpVCxJQTZOeEIsU0FBc0Jsc0MsRUFBUTNVLEVBQU9vaEQsRUFBU0MsRUFBWUMsRUFBVzFULEdBQ25FLElBQUl3VSxFQUFZaEIsRUFBVXhFLEVBQ3RCK0YsRUFBV0MsR0FBV2p1QyxHQUN0Qmt1QyxFQUFZRixFQUFTNzhELE9BSXpCLEdBQUkrOEQsR0FIV0QsR0FBVzVpRCxHQUNEbGEsU0FFTXM4RCxFQUM3QixPQUFPLEVBR1QsSUFEQSxJQUFJOXFELEVBQVF1ckQsRUFDTHZyRCxLQUFTLENBQ2QsSUFBSXhCLEVBQU02c0QsRUFBU3JyRCxHQUNuQixLQUFNOHFELEVBQVl0c0QsS0FBT2tLLEVBQVF6VixFQUFlOUIsS0FBS3VYLEVBQU9sSyxJQUMxRCxPQUFPLENBRVgsQ0FFQSxJQUFJdXNELEVBQVV6VSxFQUFNeGlELElBQUl1cEIsR0FDeEIsR0FBSTB0QyxHQUFXelUsRUFBTXhpRCxJQUFJNFUsR0FDdkIsT0FBT3FpRCxHQUFXcmlELEVBRXBCLElBQUl2VSxHQUFTLEVBQ2JtaUQsRUFBTXp1QyxJQUFJd1YsRUFBUTNVLEdBQ2xCNHRDLEVBQU16dUMsSUFBSWEsRUFBTzJVLEdBR2pCLElBREEsSUFBSW11QyxFQUFXVixJQUNOOXFELEVBQVF1ckQsR0FBVyxDQUUxQixJQUFJOXRELEVBQVc0ZixFQURmN2UsRUFBTTZzRCxFQUFTcnJELElBRVh5ckQsRUFBVy9pRCxFQUFNbEssR0FFckIsR0FBSXVyRCxFQUNGLElBQUkyQixFQUFXWixFQUNYZixFQUFXMEIsRUFBVWh1RCxFQUFVZSxFQUFLa0ssRUFBTzJVLEVBQVFpNUIsR0FDbkR5VCxFQUFXdHNELEVBQVVndUQsRUFBVWp0RCxFQUFLNmUsRUFBUTNVLEVBQU80dEMsR0FHekQsVUFBbUIvaUQsSUFBYm00RCxFQUNHanVELElBQWFndUQsR0FBWXpCLEVBQVV2c0QsRUFBVWd1RCxFQUFVM0IsRUFBU0MsRUFBWXpULEdBQzdFb1YsR0FDRCxDQUNMdjNELEdBQVMsRUFDVCxLQUNGLENBQ0FxM0QsSUFBYUEsRUFBa0IsZUFBUGh0RCxFQUMxQixDQUNBLEdBQUlySyxJQUFXcTNELEVBQVUsQ0FDdkIsSUFBSUcsRUFBVXR1QyxFQUFPeFMsWUFDakIrZ0QsRUFBVWxqRCxFQUFNbUMsWUFHaEI4Z0QsR0FBV0MsS0FDVixnQkFBaUJ2dUMsTUFBVSxnQkFBaUIzVSxJQUN6QixtQkFBWGlqRCxHQUF5QkEsYUFBbUJBLEdBQ2pDLG1CQUFYQyxHQUF5QkEsYUFBbUJBLElBQ3ZEejNELEdBQVMsRUFFYixDQUdBLE9BRkFtaUQsRUFBYyxPQUFFajVCLEdBQ2hCaTVCLEVBQWMsT0FBRTV0QyxHQUNUdlUsQ0FDVCxDQTFSUzAzRCxDQUFheHVDLEVBQVEzVSxFQUFPb2hELEVBQVNDLEVBQVlDLEVBQVcxVCxHQUNyRSxDQTVEU3dWLENBQWdCcjZELEVBQU9pWCxFQUFPb2hELEVBQVNDLEVBQVlGLEdBQWF2VCxHQUN6RSxDQTBIQSxTQUFTbVUsR0FBWWo3RCxFQUFPa1osRUFBT29oRCxFQUFTQyxFQUFZQyxFQUFXMVQsR0FDakUsSUFBSXdVLEVBQVloQixFQUFVeEUsRUFDdEJ5RyxFQUFZdjhELEVBQU1oQixPQUNsQnc5RCxFQUFZdGpELEVBQU1sYSxPQUV0QixHQUFJdTlELEdBQWFDLEtBQWVsQixHQUFha0IsRUFBWUQsR0FDdkQsT0FBTyxFQUdULElBQUloQixFQUFVelUsRUFBTXhpRCxJQUFJdEUsR0FDeEIsR0FBSXU3RCxHQUFXelUsRUFBTXhpRCxJQUFJNFUsR0FDdkIsT0FBT3FpRCxHQUFXcmlELEVBRXBCLElBQUkxSSxHQUFTLEVBQ1Q3TCxHQUFTLEVBQ1Q4M0QsRUFBUW5DLEVBQVV2RSxFQUEwQixJQUFJOEQsUUFBVzkxRCxFQU0vRCxJQUpBK2lELEVBQU16dUMsSUFBSXJZLEVBQU9rWixHQUNqQjR0QyxFQUFNenVDLElBQUlhLEVBQU9sWixLQUdSd1EsRUFBUStyRCxHQUFXLENBQzFCLElBQUlHLEVBQVcxOEQsRUFBTXdRLEdBQ2pCeXJELEVBQVcvaUQsRUFBTTFJLEdBRXJCLEdBQUkrcEQsRUFDRixJQUFJMkIsRUFBV1osRUFDWGYsRUFBVzBCLEVBQVVTLEVBQVVsc0QsRUFBTzBJLEVBQU9sWixFQUFPOG1ELEdBQ3BEeVQsRUFBV21DLEVBQVVULEVBQVV6ckQsRUFBT3hRLEVBQU9rWixFQUFPNHRDLEdBRTFELFFBQWlCL2lELElBQWJtNEQsRUFBd0IsQ0FDMUIsR0FBSUEsRUFDRixTQUVGdjNELEdBQVMsRUFDVCxLQUNGLENBRUEsR0FBSTgzRCxHQUNGLElBQUszRSxFQUFVNStDLEdBQU8sU0FBUytpRCxFQUFVVSxHQUNuQyxHQTcyQmEzdEQsRUE2MkJPMnRELEdBQU5GLEVBNTJCWGwxRCxJQUFJeUgsS0E2MkJGMHRELElBQWFULEdBQVl6QixFQUFVa0MsRUFBVVQsRUFBVTNCLEVBQVNDLEVBQVl6VCxJQUMvRSxPQUFPMlYsRUFBS3g1RCxLQUFLMDVELEdBLzJCL0IsSUFBeUIzdEQsQ0FpM0JmLElBQUksQ0FDTnJLLEdBQVMsRUFDVCxLQUNGLE9BQ0ssR0FDRCszRCxJQUFhVCxJQUNYekIsRUFBVWtDLEVBQVVULEVBQVUzQixFQUFTQyxFQUFZelQsR0FDcEQsQ0FDTG5pRCxHQUFTLEVBQ1QsS0FDRixDQUNGLENBR0EsT0FGQW1pRCxFQUFjLE9BQUU5bUQsR0FDaEI4bUQsRUFBYyxPQUFFNXRDLEdBQ1R2VSxDQUNULENBd0tBLFNBQVNtM0QsR0FBV2p1QyxHQUNsQixPQXBaRixTQUF3QkEsRUFBUSt1QyxFQUFVQyxHQUN4QyxJQUFJbDRELEVBQVNpNEQsRUFBUy91QyxHQUN0QixPQUFPbGxCLEdBQVFrbEIsR0FBVWxwQixFQWh1QjNCLFNBQW1CM0UsRUFBT29QLEdBS3hCLElBSkEsSUFBSW9CLEdBQVMsRUFDVHhSLEVBQVNvUSxFQUFPcFEsT0FDaEJtc0IsRUFBU25yQixFQUFNaEIsU0FFVndSLEVBQVF4UixHQUNmZ0IsRUFBTW1yQixFQUFTM2EsR0FBU3BCLEVBQU9vQixHQUVqQyxPQUFPeFEsQ0FDVCxDQXV0Qm9DaTFELENBQVV0d0QsRUFBUWs0RCxFQUFZaHZDLEdBQ2xFLENBaVpTaXZDLENBQWVqdkMsRUFBUTlnQixHQUFNZ3dELEdBQ3RDLENBVUEsU0FBU0MsR0FBVzN5RCxFQUFLMkUsR0FDdkIsSUFzSGlCL00sRUFDYjhELEVBdkhBTSxFQUFPZ0UsRUFBSXl2RCxTQUNmLE9BdUhnQixXQURaL3pELFNBRGE5RCxFQXJIQStNLEtBdUhtQixVQUFSakosR0FBNEIsVUFBUkEsR0FBNEIsV0FBUkEsRUFDckQsY0FBVjlELEVBQ1UsT0FBVkEsR0F4SERvRSxFQUFtQixpQkFBUDJJLEVBQWtCLFNBQVcsUUFDekMzSSxFQUFLZ0UsR0FDWCxDQVVBLFNBQVMwdUQsR0FBVWxyQyxFQUFRN2UsR0FDekIsSUFBSS9NLEVBeGpDTixTQUFrQjRyQixFQUFRN2UsR0FDeEIsT0FBaUIsTUFBVjZlLE9BQWlCOXBCLEVBQVk4cEIsRUFBTzdlLEVBQzdDLENBc2pDY2l1RCxDQUFTcHZDLEVBQVE3ZSxHQUM3QixPQXJURixTQUFzQi9NLEdBQ3BCLFNBQUt3ekQsR0FBU3h6RCxJQXdhaEIsU0FBa0JGLEdBQ2hCLFFBQVN3MkQsR0FBZUEsS0FBY3gyRCxDQUN4QyxDQTFhMEJtN0QsQ0FBU2o3RCxNQUduQnl6RCxHQUFXenpELEdBQVN5MkQsR0FBYXhCLEdBQ2hDOXFELEtBQUs4c0QsR0FBU2ozRCxHQUMvQixDQStTU2s3RCxDQUFhbDdELEdBQVNBLE9BQVE4QixDQUN2QyxDQXIyQkF5MUQsR0FBS3A1RCxVQUFVczVELE1BdkVmLFdBQ0UvNkQsS0FBS203RCxTQUFXZCxHQUFlQSxHQUFhLE1BQVEsQ0FBQyxFQUNyRHI2RCxLQUFLd0ksS0FBTyxDQUNkLEVBcUVBcXlELEdBQUtwNUQsVUFBa0IsT0F6RHZCLFNBQW9CNE8sR0FDbEIsSUFBSXJLLEVBQVNoRyxLQUFLNEksSUFBSXlILFdBQWVyUSxLQUFLbTdELFNBQVM5cUQsR0FFbkQsT0FEQXJRLEtBQUt3SSxNQUFReEMsRUFBUyxFQUFJLEVBQ25CQSxDQUNULEVBc0RBNjBELEdBQUtwNUQsVUFBVWtFLElBM0NmLFNBQWlCMEssR0FDZixJQUFJM0ksRUFBTzFILEtBQUttN0QsU0FDaEIsR0FBSWQsR0FBYyxDQUNoQixJQUFJcjBELEVBQVMwQixFQUFLMkksR0FDbEIsT0FBT3JLLElBQVdreEQsT0FBaUI5eEQsRUFBWVksQ0FDakQsQ0FDQSxPQUFPbEIsRUFBZTlCLEtBQUswRSxFQUFNMkksR0FBTzNJLEVBQUsySSxRQUFPakwsQ0FDdEQsRUFxQ0F5MUQsR0FBS3A1RCxVQUFVbUgsSUExQmYsU0FBaUJ5SCxHQUNmLElBQUkzSSxFQUFPMUgsS0FBS203RCxTQUNoQixPQUFPZCxRQUE4QmoxRCxJQUFkc0MsRUFBSzJJLEdBQXNCdkwsRUFBZTlCLEtBQUswRSxFQUFNMkksRUFDOUUsRUF3QkF3cUQsR0FBS3A1RCxVQUFVaVksSUFaZixTQUFpQnJKLEVBQUsvTSxHQUNwQixJQUFJb0UsRUFBTzFILEtBQUttN0QsU0FHaEIsT0FGQW43RCxLQUFLd0ksTUFBUXhJLEtBQUs0SSxJQUFJeUgsR0FBTyxFQUFJLEVBQ2pDM0ksRUFBSzJJLEdBQVFncUQsU0FBMEJqMUQsSUFBVjlCLEVBQXVCNHpELEVBQWlCNXpELEVBQzlEdEQsSUFDVCxFQXNIQWc3RCxHQUFVdjVELFVBQVVzNUQsTUFwRnBCLFdBQ0UvNkQsS0FBS203RCxTQUFXLEdBQ2hCbjdELEtBQUt3SSxLQUFPLENBQ2QsRUFrRkF3eUQsR0FBVXY1RCxVQUFrQixPQXZFNUIsU0FBeUI0TyxHQUN2QixJQUFJM0ksRUFBTzFILEtBQUttN0QsU0FDWnRwRCxFQUFRd3BELEdBQWEzekQsRUFBTTJJLEdBRS9CLFFBQUl3QixFQUFRLElBSVJBLEdBRFluSyxFQUFLckgsT0FBUyxFQUU1QnFILEVBQUt3bEIsTUFFTHBiLEdBQU85TyxLQUFLMEUsRUFBTW1LLEVBQU8sS0FFekI3UixLQUFLd0ksS0FDQSxHQUNULEVBeURBd3lELEdBQVV2NUQsVUFBVWtFLElBOUNwQixTQUFzQjBLLEdBQ3BCLElBQUkzSSxFQUFPMUgsS0FBS203RCxTQUNadHBELEVBQVF3cEQsR0FBYTN6RCxFQUFNMkksR0FFL0IsT0FBT3dCLEVBQVEsT0FBSXpNLEVBQVlzQyxFQUFLbUssR0FBTyxFQUM3QyxFQTBDQW1wRCxHQUFVdjVELFVBQVVtSCxJQS9CcEIsU0FBc0J5SCxHQUNwQixPQUFPZ3JELEdBQWFyN0QsS0FBS203RCxTQUFVOXFELElBQVEsQ0FDN0MsRUE4QkEycUQsR0FBVXY1RCxVQUFVaVksSUFsQnBCLFNBQXNCckosRUFBSy9NLEdBQ3pCLElBQUlvRSxFQUFPMUgsS0FBS203RCxTQUNadHBELEVBQVF3cEQsR0FBYTN6RCxFQUFNMkksR0FRL0IsT0FOSXdCLEVBQVEsS0FDUjdSLEtBQUt3SSxLQUNQZCxFQUFLcEQsS0FBSyxDQUFDK0wsRUFBSy9NLEtBRWhCb0UsRUFBS21LLEdBQU8sR0FBS3ZPLEVBRVp0RCxJQUNULEVBd0dBaTdELEdBQVN4NUQsVUFBVXM1RCxNQXRFbkIsV0FDRS82RCxLQUFLd0ksS0FBTyxFQUNaeEksS0FBS203RCxTQUFXLENBQ2QsS0FBUSxJQUFJTixHQUNaLElBQU8sSUFBSzN3QyxJQUFPOHdDLElBQ25CLE9BQVUsSUFBSUgsR0FFbEIsRUFnRUFJLEdBQVN4NUQsVUFBa0IsT0FyRDNCLFNBQXdCNE8sR0FDdEIsSUFBSXJLLEVBQVNxNEQsR0FBV3IrRCxLQUFNcVEsR0FBYSxPQUFFQSxHQUU3QyxPQURBclEsS0FBS3dJLE1BQVF4QyxFQUFTLEVBQUksRUFDbkJBLENBQ1QsRUFrREFpMUQsR0FBU3g1RCxVQUFVa0UsSUF2Q25CLFNBQXFCMEssR0FDbkIsT0FBT2d1RCxHQUFXcitELEtBQU1xUSxHQUFLMUssSUFBSTBLLEVBQ25DLEVBc0NBNHFELEdBQVN4NUQsVUFBVW1ILElBM0JuQixTQUFxQnlILEdBQ25CLE9BQU9ndUQsR0FBV3IrRCxLQUFNcVEsR0FBS3pILElBQUl5SCxFQUNuQyxFQTBCQTRxRCxHQUFTeDVELFVBQVVpWSxJQWRuQixTQUFxQnJKLEVBQUsvTSxHQUN4QixJQUFJb0UsRUFBTzIyRCxHQUFXcitELEtBQU1xUSxHQUN4QjdILEVBQU9kLEVBQUtjLEtBSWhCLE9BRkFkLEVBQUtnUyxJQUFJckosRUFBSy9NLEdBQ2R0RCxLQUFLd0ksTUFBUWQsRUFBS2MsTUFBUUEsRUFBTyxFQUFJLEVBQzlCeEksSUFDVCxFQXdEQWs3RCxHQUFTejVELFVBQVVzSCxJQUFNbXlELEdBQVN6NUQsVUFBVTZDLEtBbkI1QyxTQUFxQmhCLEdBRW5CLE9BREF0RCxLQUFLbTdELFNBQVN6aEQsSUFBSXBXLEVBQU80ekQsR0FDbEJsM0QsSUFDVCxFQWlCQWs3RCxHQUFTejVELFVBQVVtSCxJQU5uQixTQUFxQnRGLEdBQ25CLE9BQU90RCxLQUFLbTdELFNBQVN2eUQsSUFBSXRGLEVBQzNCLEVBb0dBODNELEdBQU0zNUQsVUFBVXM1RCxNQTNFaEIsV0FDRS82RCxLQUFLbTdELFNBQVcsSUFBSUgsR0FDcEJoN0QsS0FBS3dJLEtBQU8sQ0FDZCxFQXlFQTR5RCxHQUFNMzVELFVBQWtCLE9BOUR4QixTQUFxQjRPLEdBQ25CLElBQUkzSSxFQUFPMUgsS0FBS203RCxTQUNabjFELEVBQVMwQixFQUFhLE9BQUUySSxHQUc1QixPQURBclEsS0FBS3dJLEtBQU9kLEVBQUtjLEtBQ1Z4QyxDQUNULEVBeURBbzFELEdBQU0zNUQsVUFBVWtFLElBOUNoQixTQUFrQjBLLEdBQ2hCLE9BQU9yUSxLQUFLbTdELFNBQVN4MUQsSUFBSTBLLEVBQzNCLEVBNkNBK3FELEdBQU0zNUQsVUFBVW1ILElBbENoQixTQUFrQnlILEdBQ2hCLE9BQU9yUSxLQUFLbTdELFNBQVN2eUQsSUFBSXlILEVBQzNCLEVBaUNBK3FELEdBQU0zNUQsVUFBVWlZLElBckJoQixTQUFrQnJKLEVBQUsvTSxHQUNyQixJQUFJb0UsRUFBTzFILEtBQUttN0QsU0FDaEIsR0FBSXp6RCxhQUFnQnN6RCxHQUFXLENBQzdCLElBQUl5RCxFQUFRLzJELEVBQUt5ekQsU0FDakIsSUFBS2p4QyxJQUFRdTBDLEVBQU1wK0QsT0FBU3ErRCxJQUcxQixPQUZBRCxFQUFNbjZELEtBQUssQ0FBQytMLEVBQUsvTSxJQUNqQnRELEtBQUt3SSxPQUFTZCxFQUFLYyxLQUNaeEksS0FFVDBILEVBQU8xSCxLQUFLbTdELFNBQVcsSUFBSUYsR0FBU3dELEVBQ3RDLENBR0EsT0FGQS8yRCxFQUFLZ1MsSUFBSXJKLEVBQUsvTSxHQUNkdEQsS0FBS3dJLEtBQU9kLEVBQUtjLEtBQ1Z4SSxJQUNULEVBOGhCQSxJQUFJbytELEdBQWNuRSxHQUErQixTQUFTL3FDLEdBQ3hELE9BQWMsTUFBVkEsRUFDSyxJQUVUQSxFQUFTM3JCLE9BQU8yckIsR0E5c0NsQixTQUFxQjd0QixFQUFPOHRCLEdBTTFCLElBTEEsSUFBSXRkLEdBQVMsRUFDVHhSLEVBQWtCLE1BQVRnQixFQUFnQixFQUFJQSxFQUFNaEIsT0FDbkNzK0QsRUFBVyxFQUNYMzRELEVBQVMsS0FFSjZMLEVBQVF4UixHQUFRLENBQ3ZCLElBQUlpRCxFQUFRakMsRUFBTXdRLEdBd3NDa0Mrc0QsRUF2c0N0Q3Q3RCxFQXdzQ1AwaUQsR0FBcUJoakQsS0FBS2tzQixFQUFRMHZDLEtBdnNDdkM1NEQsRUFBTzI0RCxLQUFjcjdELEVBRXpCLENBb3NDNkMsSUFBU3M3RCxFQW5zQ3RELE9BQU81NEQsQ0FDVCxDQWtzQ1M2NEQsQ0FBWTVFLEdBQWlCL3FDLElBR3RDLEVBb2RBLFdBQ0UsTUFBTyxFQUNULEVBN2NJK3NDLEdBQVNYLEdBa0NiLFNBQVN3RCxHQUFReDdELEVBQU9qRCxHQUV0QixTQURBQSxFQUFtQixNQUFWQSxFQUFpQjYxRCxFQUFtQjcxRCxLQUUxQixpQkFBVGlELEdBQXFCazFELEVBQVMvcUQsS0FBS25LLEtBQzFDQSxHQUFTLEdBQUtBLEVBQVEsR0FBSyxHQUFLQSxFQUFRakQsQ0FDN0MsQ0EyREEsU0FBU2s2RCxHQUFTbjNELEdBQ2hCLEdBQVksTUFBUkEsRUFBYyxDQUNoQixJQUNFLE9BQU91MkQsRUFBYTMyRCxLQUFLSSxFQUMzQixDQUFFLE1BQU9zRixHQUFJLENBQ2IsSUFDRSxPQUFRdEYsRUFBTyxFQUNqQixDQUFFLE1BQU9zRixHQUFJLENBQ2YsQ0FDQSxNQUFPLEVBQ1QsQ0FrQ0EsU0FBUzBPLEdBQUc5VCxFQUFPaVgsR0FDakIsT0FBT2pYLElBQVVpWCxHQUFValgsR0FBVUEsR0FBU2lYLEdBQVVBLENBQzFELEVBN0lLc29DLElBQVlvWixHQUFPLElBQUlwWixHQUFTLElBQUlMLFlBQVksTUFBUThWLEdBQ3hEcHVDLElBQU8reEMsR0FBTyxJQUFJL3hDLEtBQVF3dEMsR0FDMUJoVSxJQUFXdVksR0FBT3ZZLEdBQVFxYixZQUFjakgsR0FDeEN2dkQsSUFBTzB6RCxHQUFPLElBQUkxekQsS0FBUTB2RCxHQUMxQmpVLElBQVdpWSxHQUFPLElBQUlqWSxLQUFZb1UsS0FDckM2RCxHQUFTLFNBQVMzNEQsR0FDaEIsSUFBSTBDLEVBQVNzMUQsR0FBV2g0RCxHQUNwQjA3RCxFQUFPaDVELEdBQVU2eEQsRUFBWXYwRCxFQUFNb1osaUJBQWN0WCxFQUNqRDY1RCxFQUFhRCxFQUFPekUsR0FBU3lFLEdBQVEsR0FFekMsR0FBSUMsRUFDRixPQUFRQSxHQUNOLEtBQUszRSxHQUFvQixPQUFPaEMsRUFDaEMsS0FBS2tDLEdBQWUsT0FBTzlDLEVBQzNCLEtBQUsrQyxHQUFtQixPQUFPM0MsRUFDL0IsS0FBSzRDLEdBQWUsT0FBT3pDLEVBQzNCLEtBQUswQyxHQUFtQixPQUFPdkMsRUFHbkMsT0FBT3B5RCxDQUNULEdBNklGLElBQUlpeEQsR0FBY3dFLEdBQWdCLFdBQWEsT0FBT3I3RCxTQUFXLENBQS9CLElBQXNDcTdELEdBQWtCLFNBQVNuNEQsR0FDakcsT0FBT3l5RCxHQUFhenlELElBQVV3QixFQUFlOUIsS0FBS00sRUFBTyxZQUN0RDBpRCxHQUFxQmhqRCxLQUFLTSxFQUFPLFNBQ3RDLEVBeUJJMEcsR0FBVXhJLE1BQU13SSxRQWdEaEJnVSxHQUFXazhDLElBNE9mLFdBQ0UsT0FBTyxDQUNULEVBM0xBLFNBQVNuRCxHQUFXenpELEdBQ2xCLElBQUt3ekQsR0FBU3h6RCxHQUNaLE9BQU8sRUFJVCxJQUFJc3RCLEVBQU0wcUMsR0FBV2g0RCxHQUNyQixPQUFPc3RCLEdBQU93bEMsR0FBV3hsQyxHQUFPeWxDLEdBQVV6bEMsR0FBTzBtQyxHQUFZMW1DLEdBQU9tbkMsQ0FDdEUsQ0E0QkEsU0FBU2xCLEdBQVN2ekQsR0FDaEIsTUFBdUIsaUJBQVRBLEdBQ1pBLEdBQVMsR0FBS0EsRUFBUSxHQUFLLEdBQUtBLEdBQVM0eUQsQ0FDN0MsQ0EyQkEsU0FBU1ksR0FBU3h6RCxHQUNoQixJQUFJOEQsU0FBYzlELEVBQ2xCLE9BQWdCLE1BQVRBLElBQTBCLFVBQVI4RCxHQUE0QixZQUFSQSxFQUMvQyxDQTBCQSxTQUFTMnVELEdBQWF6eUQsR0FDcEIsT0FBZ0IsTUFBVEEsR0FBaUMsaUJBQVRBLENBQ2pDLENBbUJBLElBQUk0MUQsR0FBZUQsRUFoaURuQixTQUFtQjcxRCxHQUNqQixPQUFPLFNBQVNFLEdBQ2QsT0FBT0YsRUFBS0UsRUFDZCxDQUNGLENBNGhEc0M0N0QsQ0FBVWpHLEdBbnZCaEQsU0FBMEIzMUQsR0FDeEIsT0FBT3l5RCxHQUFhenlELElBQ2xCdXpELEdBQVN2ekQsRUFBTWpELFdBQWFvNEQsRUFBZTZDLEdBQVdoNEQsR0FDMUQsRUE4d0JBLFNBQVM4SyxHQUFLOGdCLEdBQ1osT0ExTmdCLE9BREc1ckIsRUEyTkE0ckIsSUExTksybkMsR0FBU3Z6RCxFQUFNakQsVUFBWTAyRCxHQUFXenpELEdBMXZCaEUsU0FBdUJBLEVBQU82N0QsR0FDNUIsSUFBSUMsRUFBUXAxRCxHQUFRMUcsR0FDaEIrN0QsR0FBU0QsR0FBU25JLEdBQVkzekQsR0FDOUJnOEQsR0FBVUYsSUFBVUMsR0FBU3JoRCxHQUFTMWEsR0FDdENpOEQsR0FBVUgsSUFBVUMsSUFBVUMsR0FBVXBHLEdBQWE1MUQsR0FDckRrOEQsRUFBY0osR0FBU0MsR0FBU0MsR0FBVUMsRUFDMUN2NUQsRUFBU3c1RCxFQWxvQmYsU0FBbUI1NkQsRUFBRzY2RCxHQUlwQixJQUhBLElBQUk1dEQsR0FBUyxFQUNUN0wsRUFBU3hFLE1BQU1vRCxLQUVWaU4sRUFBUWpOLEdBQ2ZvQixFQUFPNkwsR0FBUzR0RCxFQUFTNXRELEdBRTNCLE9BQU83TCxDQUNULENBMG5CNkIwNUQsQ0FBVXA4RCxFQUFNakQsT0FBUXVPLFFBQVUsR0FDekR2TyxFQUFTMkYsRUFBTzNGLE9BRXBCLElBQUssSUFBSWdRLEtBQU8vTSxHQUNUNjdELElBQWFyNkQsRUFBZTlCLEtBQUtNLEVBQU8rTSxJQUN2Q212RCxJQUVRLFVBQVBudkQsR0FFQ2l2RCxJQUFrQixVQUFQanZELEdBQTBCLFVBQVBBLElBRTlCa3ZELElBQWtCLFVBQVBsdkQsR0FBMEIsY0FBUEEsR0FBOEIsY0FBUEEsSUFFdER5dUQsR0FBUXp1RCxFQUFLaFEsS0FFbEIyRixFQUFPMUIsS0FBSytMLEdBR2hCLE9BQU9ySyxDQUNULENBMjdCK0IyNUQsQ0FBY3p3QyxHQXR3QjdDLFNBQWtCQSxHQUNoQixHQXlaSTh2QyxHQURlMTdELEVBeFpGNHJCLElBeVpHNXJCLEVBQU1vWixZQUduQnBaLEtBRnFCLG1CQUFSMDdELEdBQXNCQSxFQUFLdjlELFdBQWM4MEQsR0F6WjNELE9BQU80RCxHQUFXanJDLEdBdVp0QixJQUFxQjVyQixFQUNmMDdELEVBdFpBaDVELEVBQVMsR0FDYixJQUFLLElBQUlxSyxLQUFPOU0sT0FBTzJyQixHQUNqQnBxQixFQUFlOUIsS0FBS2tzQixFQUFRN2UsSUFBZSxlQUFQQSxHQUN0Q3JLLEVBQU8xQixLQUFLK0wsR0FHaEIsT0FBT3JLLENBQ1QsQ0EydkJ1RDQ1RCxDQUFTMXdDLEdBM05oRSxJQUFxQjVyQixDQTROckIsQ0F5Q0EzRCxFQUFPQyxRQWxOUCxTQUFpQjBELEVBQU9pWCxHQUN0QixPQUFPbWhELEdBQVlwNEQsRUFBT2lYLEVBQzVCLG9CQ3ZtREMsSUFBZXNsRCxJQU1SLFdBRUosU0FBU0MsRUFBS3Y5RCxFQUFNdzlELEVBQVNDLEdBS3pCLE9BSkFoZ0UsS0FBS3FnQixLQUFPeS9DLEVBQUtHLFVBQ2pCamdFLEtBQUt1QyxLQUFPQSxFQUNadkMsS0FBSysvRCxRQUFVQSxFQUNmLy9ELEtBQUtnZ0UsWUFBY0EsRUFDWmhnRSxJQUNYLENBY0EsU0FBU21yRCxFQUFNbG5DLEVBQU1pOEMsRUFBS0MsRUFBV0MsR0FDakNwZ0UsS0FBS2lrQixLQUFPQSxFQUNaamtCLEtBQUtrZ0UsSUFBTUEsRUFDWGxnRSxLQUFLbWdFLFVBQVlBLEVBQ2pCbmdFLEtBQUswSCxLQUFPLEdBQ1oxSCxLQUFLb2dFLFNBQVdBLEVBQ2hCcGdFLEtBQUtxZ0UsV0FBYXJnRSxLQUFLa2dFLE1BQVFqOEMsRUFBSzg3QyxRQUFRMS9ELE1BQ2hELENBcUNBLFNBQVNpZ0UsRUFBT0MsRUFBUzF1RCxHQUNyQjdSLEtBQUt1Z0UsUUFBVUEsRUFDZnZnRSxLQUFLNlIsTUFBUUEsRUFDYjdSLEtBQUt3Z0UsT0FBUyxHQUNkeGdFLEtBQUt5Z0UsTUFBUSxDQUFDLEVBQ2R6Z0UsS0FBSzBnRSxVQUFZLEdBQ2pCMWdFLEtBQUsyZ0UsVUFBWSxDQUFDLENBQ3RCLENBeUVBLFNBQVNDLEVBQVE5OEMsRUFBT3pKLEdBQ3BCcmEsS0FBSzhqQixNQUFRQSxFQUNiOWpCLEtBQUtxYSxNQUFRQSxHQUFTcmEsS0FBSzhqQixNQUFNLEdBQUd2aEIsS0FDcEMsSUFBSXMrRCxFQUFTN2dFLEtBQUs2Z0UsT0FBUyxDQUFDLEVBQzVCN2dFLEtBQUs4akIsTUFBTWpiLFNBQVEsU0FBU29iLEdBQ25CNDhDLEVBQU8vN0QsZUFBZW1mLEVBQUsxaEIsUUFDNUJzK0QsRUFBTzU4QyxFQUFLMWhCLE1BQVEsSUFFeEJzK0QsRUFBTzU4QyxFQUFLMWhCLE1BQU0rQixLQUFLMmYsRUFDM0IsR0FDSixDQWdCQSxTQUFTNjhDLElBQ1A5Z0UsS0FBS3VuQixNQUFNLEdBQ2IsQ0E2REEsU0FBUzIvQixFQUFPcGpDLEVBQU96SixFQUFPelMsR0FDMUIsR0FBSWtjLGFBQWlCODhDLEVBQ2pCLEtBQUlMLEVBQVV6OEMsRUFDVmxjLEVBQVV5UyxDQURLLE1BR2ZrbUQsRUFBVUssRUFBUUcsYUFBYWo5QyxFQUFPekosR0FTOUMsSUFBSyxJQUFJaEssS0FQVHJRLEtBQUt1Z0UsUUFBVUEsRUFHZnZnRSxLQUFLNEgsUUFBVSxDQUNYbzVELGFBQWEsRUFDYkMsTUFBT1YsRUFBUVUsT0FBUyxJQUFJSCxHQUVmbDVELEdBQVcsQ0FBQyxFQUN6QjVILEtBQUs0SCxRQUFReUksR0FBT3pJLEVBQVF5SSxHQUloQ3JRLEtBQUtpaEUsTUFBUWpoRSxLQUFLNEgsUUFBUXE1RCxNQUMxQmpoRSxLQUFLa2hFLGdCQUFhOTdELEVBR2xCLElBQUkrN0QsRUFBUyxJQUFJYixFQUFPQyxFQUFTLEdBQ3JCdmdFLEtBQUtvaEUsTUFBUSxDQUFDRCxHQUcxQkEsRUFBT1YsTUFBTUYsRUFBUWxtRCxPQUFTLEdBQzlCOG1ELEVBQU9FLFFBQVFkLEVBQVFsbUQsT0FFdkI4bUQsRUFBT3JJLFVBQ1A5NEQsS0FBS2tsQixRQUFVLENBQ25CLENBeVFBLFNBQVNvOEMsRUFBc0IxQyxHQUMzQixJQUFJeDNELFNBQWN3M0QsRUFDbEIsR0FBYSxXQUFUeDNELEVBQ0EsT0FBT3czRCxFQUNKLEdBQWEsV0FBVHgzRCxFQUFtQixDQUMxQixHQUFJdzNELEVBQU8yQyxRQUNQLE9BQU96eUQsS0FBS3NTLFVBQVV3OUMsRUFBTzJDLFNBQzFCLEdBQUkzQyxhQUFrQno4QyxPQUN6QixPQUFPeThDLEVBQU94ckQsV0FDWCxHQUFJd3JELEVBQU94M0QsS0FDZCxNQUFPLElBQU13M0QsRUFBT3gzRCxLQUNqQixHQUFJdzNELEVBQU9ueEQsS0FDZCxNQUFPLElBQU1tQixPQUFPZ3dELEVBQU9ueEQsTUFBUSxJQUVuQyxNQUFNLElBQUkwQixNQUFNLHdCQUEwQnl2RCxFQUVsRCxDQUNKLENBRUEsT0E5aEJBa0IsRUFBS0csVUFBWSxFQUVqQkgsRUFBS3IrRCxVQUFVMlIsU0FBVyxTQUFTb3VELEdBQy9CLElBQUlDLE9BQTBDLElBQWpCRCxFQUNOeGhFLEtBQUsrL0QsUUFBUXIwRCxJQUFJNDFELEdBQXVCL3ZELEtBQUssS0FDekN2UixLQUFLKy9ELFFBQVF6NUQsTUFBTSxFQUFHazdELEdBQWM5MUQsSUFBSTQxRCxHQUF1Qi92RCxLQUFLLEtBQ3BFLE1BQ0F2UixLQUFLKy9ELFFBQVF6NUQsTUFBTWs3RCxHQUFjOTFELElBQUk0MUQsR0FBdUIvdkQsS0FBSyxLQUM1RixPQUFPdlIsS0FBS3VDLEtBQU8sTUFBUWsvRCxDQUMvQixFQWFBdFcsRUFBTTFwRCxVQUFVMlIsU0FBVyxXQUN2QixNQUFPLElBQU1wVCxLQUFLaWtCLEtBQUs3USxTQUFTcFQsS0FBS2tnRSxLQUFPLGFBQWVsZ0UsS0FBS21nRSxXQUFhLEVBQ2pGLEVBRUFoVixFQUFNMXBELFVBQVU2eEMsVUFBWSxTQUFTcjlCLEdBQ2pDLElBQUlqRSxFQUFRLElBQUltNUMsRUFBTW5yRCxLQUFLaWtCLEtBQU1qa0IsS0FBS2tnRSxJQUFNLEVBQUdsZ0UsS0FBS21nRSxVQUFXbmdFLEtBQUtvZ0UsVUFTcEUsT0FSQXB1RCxFQUFNb21DLEtBQU9wNEMsS0FDYmdTLEVBQU1xbUMsTUFBUXBpQyxFQUNWakUsRUFBTXF1RCxhQUNOcnVELEVBQU10SyxLQUFPc0ssRUFBTTB2RCxRQUduQjF2RCxFQUFNcW1DLFdBQVFqekMsR0FFWDRNLENBQ1gsRUFFQW01QyxFQUFNMXBELFVBQVVpZ0UsTUFBUSxXQUNwQixJQUFJL3pELEVBQVcsR0FDWC9KLEVBQU81RCxLQUNYLEdBQ0kyTixFQUFTckosS0FBS1YsRUFBS3kwQyxNQUFNM3dDLE1BQ3pCOUQsRUFBT0EsRUFBS3cwQyxXQUNQeDBDLEVBQUt3MEMsTUFFZCxPQURBenFDLEVBQVM4TCxVQUNGOUwsQ0FDWCxFQUVBdzlDLEVBQU0xcEQsVUFBVXVyRCxPQUFTLFdBQ2pCaHRELEtBQUtpa0IsS0FBSys3QyxjQUNWaGdFLEtBQUswSCxLQUFPMUgsS0FBS2lrQixLQUFLKzdDLFlBQVloZ0UsS0FBSzBILEtBQU0xSCxLQUFLbWdFLFVBQVdqWixFQUFPeWEsTUFFNUUsRUFhQXJCLEVBQU83K0QsVUFBVXEzRCxRQUFVLFNBQVM4SSxHQUtoQyxJQUpBLElBQUlwQixFQUFTeGdFLEtBQUt3Z0UsT0FDZEMsRUFBUXpnRSxLQUFLeWdFLE1BQ2JFLEVBQVkzZ0UsS0FBSzJnRSxVQUVaa0IsRUFBSSxFQUFHQSxFQUFJckIsRUFBT25nRSxPQUFRd2hFLElBQUssQ0FDcEMsSUFBSTd2RCxFQUFRd3VELEVBQU9xQixHQUVuQixHQUFJN3ZELEVBQU1xdUQsWUFFTixHQURBcnVELEVBQU1nN0MsU0FDRmg3QyxFQUFNdEssT0FBU3cvQyxFQUFPeWEsS0FBTSxDQUc1QixJQURBLElBQUl2QixFQUFXcHVELEVBQU1vdUQsU0FDWno3RCxFQUFJeTdELEVBQVMvL0QsT0FBUXNFLEtBQU8sQ0FDakMsSUFBSXl6QyxFQUFPZ29CLEVBQVN6N0QsR0FDcEIzRSxLQUFLOGhFLFNBQVMxcEIsRUFBTXBtQyxFQUN4QixDQUdBLEdBQUlBLEVBQU1tdUQsWUFBY25nRSxLQUFLNlIsTUFBTyxDQUVoQyxJQUFJa3dELEVBQU0vdkQsRUFBTWlTLEtBQUsxaEIsTUFDcEJ2QyxLQUFLMmdFLFVBQVVvQixHQUFPL2hFLEtBQUsyZ0UsVUFBVW9CLElBQVEsSUFBSXo5RCxLQUFLME4sRUFDM0QsQ0FDSixNQUVHLENBR0gsR0FBbUIsaUJBRGYrdkQsRUFBTS92RCxFQUFNaVMsS0FBSzg3QyxRQUFRL3RELEVBQU1rdUQsTUFDTixDQUN6QmxnRSxLQUFLMGdFLFVBQVVwOEQsS0FBSzBOLEdBQ3BCLFFBQ0osQ0FHQSxHQUFJeXVELEVBQU1zQixJQUdOLEdBRkF0QixFQUFNc0IsR0FBS3o5RCxLQUFLME4sR0FFWjJ1RCxFQUFVNzdELGVBQWVpOUQsR0FDekIsS0FBSUMsRUFBUXJCLEVBQVVvQixHQUN0QixJQUFTcDlELEVBQUksRUFBR0EsRUFBSXE5RCxFQUFNM2hFLE9BQVFzRSxJQUFLLENBQ25DLElBQUkwekMsRUFBUTJwQixFQUFNcjlELEdBQ2xCM0UsS0FBSzhoRSxTQUFTOXZELEVBQU9xbUMsRUFDekIsQ0FKMEIsT0FPOUJvb0IsRUFBTXNCLEdBQU8sQ0FBQy92RCxHQUNkaFMsS0FBS3FoRSxRQUFRVSxFQUVyQixDQUNKLENBQ0osRUFFQXpCLEVBQU83K0QsVUFBVTQvRCxRQUFVLFNBQVNVLEdBR2hDLElBRkEsSUFBSWorQyxFQUFROWpCLEtBQUt1Z0UsUUFBUU0sT0FBT2tCLElBQVEsR0FFL0JwOUQsRUFBSSxFQUFHQSxFQUFJbWYsRUFBTXpqQixPQUFRc0UsSUFBSyxDQUNuQyxJQUFJeVksRUFBSTBHLEVBQU1uZixHQUNWeTdELEVBQVdwZ0UsS0FBS3lnRSxNQUFNc0IsR0FDdEJyOUQsRUFBSSxJQUFJeW1ELEVBQU0vdEMsRUFBRyxFQUFHcGQsS0FBSzZSLE1BQU91dUQsR0FDcENwZ0UsS0FBS3dnRSxPQUFPbDhELEtBQUtJLEVBQ3JCLENBQ0osRUFFQTQ3RCxFQUFPNytELFVBQVVxZ0UsU0FBVyxTQUFTMXBCLEVBQU1DLEdBQ3ZDLElBQUk0cEIsRUFBTzdwQixFQUFLOUUsVUFBVStFLEdBQzFCcjRDLEtBQUt3Z0UsT0FBT2w4RCxLQUFLMjlELEVBQ3JCLEVBZ0JBckIsRUFBUUcsYUFBZSxTQUFTajlDLEVBQU96SixHQUNuQyxJQUFJNG1ELEVBQVFuOUMsRUFBTW8rQyxNQUNkcCtDLEVBQU1xK0MsY0FDUjluRCxFQUFReUosRUFBTXErQyxZQUNkcitDLEVBQVFBLEVBQU1zK0MsYUFFaEIsSUFDSTE0QixFQUFJLElBQUlrM0IsRUFEUjk4QyxFQUFRQSxFQUFNcFksS0FBSSxTQUFVMFIsR0FBSyxPQUFPLElBQUswaUQsRUFBSzFpRCxFQUFFN2EsS0FBTTZhLEVBQUUyaUQsUUFBUzNpRCxFQUFFNGlELFlBQWUsSUFDL0QzbEQsR0FFM0IsT0FEQXF2QixFQUFFdTNCLE1BQVFBLEVBQ0h2M0IsQ0FDWCxFQU9BbzNCLEVBQVlyL0QsVUFBVThsQixNQUFRLFNBQVM3ZixFQUFNc0ssR0FDekNoUyxLQUFLcXNELE9BQVMza0QsRUFDZDFILEtBQUs2UixNQUFRLEVBQ2I3UixLQUFLcWlFLEtBQU9yd0QsRUFBUUEsRUFBTXF3RCxLQUFPLEVBQ2pDcmlFLEtBQUtzaUUsY0FBZ0J0d0QsR0FBU0EsRUFBTXV3RCxJQUFNLENBQzlDLEVBRUF6QixFQUFZci9ELFVBQVUyVCxLQUFPLFdBQ3pCLEdBQUlwVixLQUFLNlIsTUFBUTdSLEtBQUtxc0QsT0FBT2hzRCxPQUFRLENBQ2pDLElBQUltaUUsRUFBS3hpRSxLQUFLcXNELE9BQU9yc0QsS0FBSzZSLFNBSzFCLE1BSlcsT0FBUDJ3RCxJQUNGeGlFLEtBQUtxaUUsTUFBUSxFQUNicmlFLEtBQUtzaUUsY0FBZ0J0aUUsS0FBSzZSLE9BRXJCLENBQUN2TyxNQUFPay9ELEVBQ25CLENBQ0osRUFFQTFCLEVBQVlyL0QsVUFBVWdoRSxLQUFPLFdBQzNCLE1BQU8sQ0FDTEosS0FBTXJpRSxLQUFLcWlFLEtBQ1hFLElBQUt2aUUsS0FBSzZSLE1BQVE3UixLQUFLc2lFLGNBRTNCLEVBRUF4QixFQUFZci9ELFVBQVVpaEUsWUFBYyxTQUFTci9DLEVBQU9vNUMsR0FHaEQsSUFBSXBRLEVBQVNyc0QsS0FBS3FzRCxPQUNsQixHQUFzQixpQkFBWEEsRUFBcUIsQ0FDNUIsSUFBSXNXLEVBQVF0VyxFQUNQbjlDLE1BQU0sTUFDTjVJLE1BQ0dpRSxLQUFLbXlCLElBQUksRUFBRzE4QixLQUFLcWlFLEtBQU8sR0FDeEJyaUUsS0FBS3FpRSxNQUdUTyxFQUFnQnZXLEVBQU9yN0MsUUFBUSxLQUFNaFIsS0FBSzZSLFFBQ3ZCLElBQW5CK3dELElBQXNCQSxFQUFnQnZXLEVBQU9oc0QsUUFDakQsSUFBSWtpRSxFQUFNdmlFLEtBQUs2UixNQUFRN1IsS0FBS3NpRSxjQUN4Qk8sRUFBaUJqMEQsT0FBTzVPLEtBQUtxaUUsTUFBTWhpRSxPQVF2QyxPQVBBbzhELEdBQVcsWUFBY3o4RCxLQUFLcWlFLEtBQU8sUUFBVUUsRUFBTSxTQUNyRDlGLEdBQVdrRyxFQUNOajNELEtBQUksU0FBUzIyRCxFQUFNMTlELEdBQ2hCLE9BQU9tK0QsRUFBSTlpRSxLQUFLcWlFLEtBQU9NLEVBQU10aUUsT0FBU3NFLEVBQUksRUFBR2srRCxHQUFrQixJQUFNUixDQUN6RSxHQUFHcmlFLE1BQ0Z1UixLQUFLLE9BQ0MsS0FBT3V4RCxFQUFJLEdBQUlELEVBQWlCTixHQUFPLEtBRXRELENBQ0ksT0FBTzlGLEVBQVUsY0FBZ0J6OEQsS0FBSzZSLE1BQVEsR0FHbEQsU0FBU2l4RCxFQUFJbCtELEVBQUd2RSxHQUNaLElBQUlxRSxFQUFJa0ssT0FBT2hLLEdBQ2YsT0FBT3BELE1BQU1uQixFQUFTcUUsRUFBRXJFLE9BQVMsR0FBR2tSLEtBQUssS0FBTzdNLENBQ3BELENBQ0osRUFxQ0F3aUQsRUFBT3lhLEtBQU8sQ0FBQyxFQUVmemEsRUFBT3psRCxVQUFVZ3pCLEtBQU8sU0FBU3EyQixHQUM3QixJQUdJem5DLEVBSEE0OUMsRUFBUWpoRSxLQUFLaWhFLE1BSWpCLElBSEFBLEVBQU0xNUMsTUFBTXVqQyxFQUFPOXFELEtBQUtraEUsY0FHWCxDQUNULElBRUksS0FEQTc5QyxFQUFRNDlDLEVBQU03ckQsUUFFVixLQUVSLENBQUUsTUFBTzFNLEdBR0wsSUFBSWs1RCxFQUFhLElBQUl0QixFQUFPdGdFLEtBQUt1Z0UsUUFBU3ZnRSxLQUFLa2xCLFFBQVUsR0FLekQsTUFKQWxsQixLQUFLb2hFLE1BQU05OEQsS0FBS3M5RCxJQUNaNzdCLEVBQU0sSUFBSTUyQixNQUFNblAsS0FBSytpRSxpQkFBaUJyNkQsS0FDdEM4akIsT0FBU3hzQixLQUFLa2xCLFFBQ2xCNmdCLEVBQUkxaUIsTUFBUTNhLEVBQUUyYSxNQUNSMGlCLENBQ1YsQ0FFQSxJQUFJbzdCLEVBQVNuaEUsS0FBS29oRSxNQUFNcGhFLEtBQUtrbEIsU0FHeEJsbEIsS0FBSzRILFFBQVFvNUQsb0JBQ1BoaEUsS0FBS29oRSxNQUFNcGhFLEtBQUtrbEIsUUFBVSxHQUdyQyxJQUFJdGdCLEVBQUk1RSxLQUFLa2xCLFFBQVUsRUFDbkIwOEMsRUFBYSxJQUFJdEIsRUFBT3RnRSxLQUFLdWdFLFFBQVMzN0QsR0FDMUM1RSxLQUFLb2hFLE1BQU05OEQsS0FBS3M5RCxHQU1oQixJQUhBLElBOEJRNzdCLEVBOUJKdzdCLE9BQXlCbjhELElBQWZpZSxFQUFNM1YsS0FBcUIyVixFQUFNM1YsS0FBTzJWLEVBQU0vZixNQUN4REEsRUFBUTI5RCxFQUFNdmtELGNBQWdCb2tELEVBQWN6OUMsRUFBTS9mLE1BQVErZixFQUMxRHE5QyxFQUFZUyxFQUFPVCxVQUNkbUIsRUFBSW5CLEVBQVVyZ0UsT0FBUXdoRSxLQUFPLENBQ2xDLElBQUk3dkQsRUFBUTB1RCxFQUFVbUIsR0FDbEJtQixFQUFTaHhELEVBQU1pUyxLQUFLODdDLFFBQVEvdEQsRUFBTWt1RCxLQUd0QyxHQUFJOEMsRUFBT3YxRCxLQUFPdTFELEVBQU92MUQsS0FBS25LLEdBQzFCMC9ELEVBQU81N0QsS0FBTzQ3RCxFQUFPNTdELE9BQVNpYyxFQUFNamMsS0FDdEI0N0QsRUFBT3pCLFVBQVlBLEVBQVMsQ0FFMUMsSUFBSW5zRCxFQUFPcEQsRUFBTXNoQyxVQUFVLENBQUM1ckMsS0FBTXBFLEVBQU8rZixNQUFPQSxFQUFPNC9DLFNBQVMsRUFBTTlDLFVBQVd2N0QsRUFBSSxJQUNyRmc5RCxFQUFXcEIsT0FBT2w4RCxLQUFLOFEsRUFDM0IsQ0FDSixDQWFBLEdBSEF3c0QsRUFBVzlJLFVBR3NCLElBQTdCOEksRUFBV3BCLE9BQU9uZ0UsT0FLbEIsTUFISTBsQyxFQUFNLElBQUk1MkIsTUFBTW5QLEtBQUtrakUsWUFBWTcvQyxLQUNqQ21KLE9BQVN4c0IsS0FBS2tsQixRQUNsQjZnQixFQUFJMWlCLE1BQVFBLEVBQ04waUIsRUFJTi9sQyxLQUFLNEgsUUFBUW81RCxjQUNmRyxFQUFPRCxXQUFhRCxFQUFNd0IsUUFHNUJ6aUUsS0FBS2tsQixTQUNULENBU0EsT0FSSWk4QyxJQUNGbmhFLEtBQUtraEUsV0FBYUQsRUFBTXdCLFFBSTFCemlFLEtBQUt5TCxRQUFVekwsS0FBS2d0RCxTQUdiaHRELElBQ1gsRUFFQWtuRCxFQUFPemxELFVBQVVzaEUsaUJBQW1CLFNBQVNJLEdBQ3pDLElBQUlDLEVBQWNDLEVBR2RoZ0QsRUFBUTgvQyxFQUFXOS9DLE1BUXZCLE9BUElBLEdBQ0ErL0MsRUFBZSxTQUFXdDBELEtBQUtzUyxVQUFVaUMsRUFBTTNWLEtBQUssSUFBTSxpQkFDMUQyMUQsRUFBZXJqRSxLQUFLaWhFLE1BQU15QixZQUFZci9DLEVBQU8sa0JBRTdDKy9DLEVBQWUsc0JBQ2ZDLEVBQWVGLEVBQVcxRyxTQUV2Qno4RCxLQUFLc2pFLGtCQUFrQkQsRUFBY0QsRUFDaEQsRUFFQWxjLEVBQU96bEQsVUFBVXloRSxZQUFjLFNBQVM3L0MsR0FDcEMsSUFBSSsvQyxHQUFnQi8vQyxFQUFNamMsS0FBT2ljLEVBQU1qYyxLQUFPLFdBQWEsSUFBTTBILEtBQUtzUyxlQUEwQmhjLElBQWhCaWUsRUFBTS9mLE1BQXNCK2YsRUFBTS9mLE1BQVErZixHQUN0SGdnRCxFQUFlcmpFLEtBQUtpaEUsTUFBTXlCLFlBQVlyL0MsRUFBTyxnQkFDakQsT0FBT3JqQixLQUFLc2pFLGtCQUFrQkQsRUFBY0QsRUFDaEQsRUFFQWxjLEVBQU96bEQsVUFBVTZoRSxrQkFBb0IsU0FBU0QsRUFBY0QsR0FDeEQsSUFBSVQsRUFBUSxHQUNaQSxFQUFNcitELEtBQUsrK0QsR0FDWCxJQUFJRSxFQUFrQnZqRSxLQUFLb2hFLE1BQU0vZ0UsT0FBUyxFQUN0Q21qRSxFQUFheGpFLEtBQUtvaEUsTUFBTW1DLEdBQ3hCRSxFQUFrQkQsRUFBV2hELE9BQzVCOStELFFBQU8sU0FBU3NRLEdBQ2IsSUFBSTB4RCxFQUFhMXhELEVBQU1pUyxLQUFLODdDLFFBQVEvdEQsRUFBTWt1RCxLQUMxQyxPQUFPd0QsR0FBb0MsaUJBQWZBLENBQ2hDLElBd0JKLE9BdEIrQixJQUEzQkQsRUFBZ0JwakUsUUFDaEJzaUUsRUFBTXIrRCxLQUFLLGNBQWdCOCtELEVBQWUsNkVBQzFDcGpFLEtBQUsyakUsa0JBQWtCSCxFQUFXaEQsT0FBUW1DLEtBRTFDQSxFQUFNcitELEtBQUssY0FBZ0I4K0QsRUFBZSw2REFJeEJLLEVBQ2IvM0QsS0FBSSxTQUFTc0csR0FDVixPQUFPaFMsS0FBSzRqRSxxQkFBcUI1eEQsRUFBTyxLQUFPLENBQUNBLEVBQ3BELEdBQUdoUyxNQUVLNkksU0FBUSxTQUFTZzdELEdBQ3pCLElBQUk3eEQsRUFBUTZ4RCxFQUFXLEdBQ25CSCxFQUFhMXhELEVBQU1pUyxLQUFLODdDLFFBQVEvdEQsRUFBTWt1RCxLQUN0QzRELEVBQWdCOWpFLEtBQUsrakUsaUJBQWlCTCxHQUMxQ2YsRUFBTXIrRCxLQUFLLEtBQU93L0QsRUFBZ0IsY0FDbEM5akUsS0FBSzJqRSxrQkFBa0JFLEVBQVlsQixFQUN2QyxHQUFHM2lFLE9BRVAyaUUsRUFBTXIrRCxLQUFLLElBQ0pxK0QsRUFBTXB4RCxLQUFLLEtBQ3RCLEVBRUEyMUMsRUFBT3psRCxVQUFVa2lFLGtCQUFvQixTQUFTRSxFQUFZbEIsR0FHdEQsSUFGQSxJQUFJcUIsRUFDQUMsRUFBbUIsRUFDZDV5RCxFQUFJLEVBQUdBLEVBQUl3eUQsRUFBV3hqRSxPQUFRZ1IsSUFBSyxDQUN4QyxJQUFJVyxFQUFRNnhELEVBQVd4eUQsR0FDbkI2eUQsRUFBVWx5RCxFQUFNaVMsS0FBSzdRLFNBQVNwQixFQUFNa3VELEtBQ3BDZ0UsSUFBWUYsRUFDWkMsS0FFSUEsRUFBbUIsR0FDbkJ0QixFQUFNcitELEtBQUssU0FBVzIvRCxFQUFtQixpQ0FFN0NBLEVBQW1CLEVBQ25CdEIsRUFBTXIrRCxLQUFLLE9BQVM0L0QsSUFFeEJGLEVBQWNFLENBQ2xCLENBQ0osRUFFQWhkLEVBQU96bEQsVUFBVXNpRSxpQkFBbUIsU0FBU25GLEdBQ3pDLE9BNEVKLFNBQThCQSxHQUMxQixJQUFJeDNELFNBQWN3M0QsRUFDbEIsR0FBYSxXQUFUeDNELEVBQ0EsT0FBT3czRCxFQUNKLEdBQWEsV0FBVHgzRCxFQUFtQixDQUMxQixHQUFJdzNELEVBQU8yQyxRQUNQLE9BQU96eUQsS0FBS3NTLFVBQVV3OUMsRUFBTzJDLFNBQzFCLEdBQUkzQyxhQUFrQno4QyxPQUN6QixNQUFPLHNCQUF3Qnk4QyxFQUM1QixHQUFJQSxFQUFPeDNELEtBQ2QsT0FBT3czRCxFQUFPeDNELEtBQU8sU0FDbEIsR0FBSXczRCxFQUFPbnhELEtBQ2QsTUFBTyxrQkFBb0JtQixPQUFPZ3dELEVBQU9ueEQsTUFFekMsTUFBTSxJQUFJMEIsTUFBTSx3QkFBMEJ5dkQsRUFFbEQsQ0FDSixDQTdGV3VGLENBQXFCdkYsRUFDaEMsRUFhQTFYLEVBQU96bEQsVUFBVW1pRSxxQkFBdUIsU0FBUzV4RCxFQUFPdVcsR0FDcEQsSUFBZ0MsSUFBNUJBLEVBQVF2WCxRQUFRZ0IsR0FJaEIsT0FBTyxLQUVYLEdBQThCLElBQTFCQSxFQUFNb3VELFNBQVMvL0QsT0FDZixNQUFPLENBQUMyUixHQUVaLElBQUlrZ0MsRUFBWWxnQyxFQUFNb3VELFNBQVMsR0FDM0JnRSxFQUFlLENBQUNweUQsR0FBT3pMLE9BQU9naUIsR0FDOUI4N0MsRUFBY3JrRSxLQUFLNGpFLHFCQUFxQjF4QixFQUFXa3lCLEdBQ3ZELE9BQW9CLE9BQWhCQyxFQUNPLEtBRUosQ0FBQ3J5RCxHQUFPekwsT0FBTzg5RCxFQUMxQixFQUVBbmQsRUFBT3psRCxVQUFVZ2hFLEtBQU8sV0FDcEIsSUFBSXRCLEVBQVNuaEUsS0FBS29oRSxNQUFNcGhFLEtBQUtrbEIsU0FFN0IsT0FEQWk4QyxFQUFPRCxXQUFhbGhFLEtBQUtraEUsV0FDbEJDLENBQ1gsRUFFQWphLEVBQU96bEQsVUFBVWl4QyxRQUFVLFNBQVN5dUIsR0FDaEMsSUFBSXR2RCxFQUFRc3ZELEVBQU90dkQsTUFDbkI3UixLQUFLa2xCLFFBQVVyVCxFQUNmN1IsS0FBS29oRSxNQUFNdnZELEdBQVNzdkQsRUFDcEJuaEUsS0FBS29oRSxNQUFNdHZELE9BQU9ELEVBQVEsR0FDMUI3UixLQUFLa2hFLFdBQWFDLEVBQU9ELFdBR3pCbGhFLEtBQUt5TCxRQUFVekwsS0FBS2d0RCxRQUN4QixFQUdBOUYsRUFBT3psRCxVQUFVNmlFLE9BQVMsU0FBU3p5RCxHQUMvQixJQUFLN1IsS0FBSzRILFFBQVFvNUQsWUFDZCxNQUFNLElBQUk3eEQsTUFBTSxnREFJcEJuUCxLQUFLMHlDLFFBQVExeUMsS0FBS29oRSxNQUFNdnZELEdBQzVCLEVBRUFxMUMsRUFBT3psRCxVQUFVdXJELE9BQVMsV0FFdEIsSUFBSXVYLEVBQWlCLEdBQ2pCbHFELEVBQVFyYSxLQUFLdWdFLFFBQVFsbUQsTUFVekIsT0FUYXJhLEtBQUtvaEUsTUFBTXBoRSxLQUFLb2hFLE1BQU0vZ0UsT0FBUyxHQUNyQ21nRSxPQUFPMzNELFNBQVEsU0FBVXBFLEdBQ3hCQSxFQUFFd2YsS0FBSzFoQixPQUFTOFgsR0FDVDVWLEVBQUV5N0QsTUFBUXo3RCxFQUFFd2YsS0FBSzg3QyxRQUFRMS9ELFFBQ1QsSUFBaEJvRSxFQUFFMDdELFdBQ0YxN0QsRUFBRWlELE9BQVN3L0MsRUFBT3lhLE1BQ3pCNEMsRUFBZWpnRSxLQUFLRyxFQUU1QixJQUNPOC9ELEVBQWU3NEQsS0FBSSxTQUFTd2dCLEdBQUksT0FBT0EsRUFBRXhrQixJQUFNLEdBQzFELEVBd0NPLENBQ0h3L0MsT0FBUUEsRUFDUjBaLFFBQVNBLEVBQ1RkLEtBQU1BLEVBR2QsRUFsakJzQ25nRSxFQUFPQyxRQUNyQ0QsRUFBT0MsUUFBVWlnRSxJQUl2QjcvRCxLQUZXd2tFLFFBQVUzRSx1Q0NIdkIsSUFBSTFrRCxFQUFtQm5iLE1BQVFBLEtBQUttYixpQkFBb0IsU0FBVXBWLEdBQzlELE9BQVFBLEdBQU9BLEVBQUlSLFdBQWNRLEVBQU0sQ0FBRSxRQUFXQSxFQUN4RCxFQUNBeEMsT0FBT0MsZUFBZTVELEVBQVMsYUFBYyxDQUFFMEQsT0FBTyxJQUN0RDFELEVBQVE2a0UsU0FBVzdrRSxFQUFRK2lCLGFBQVUsRUFDckMsSUFBSXBCLEVBQWFwRyxFQUFnQixFQUFRLE9Bc0R6Q3ZiLEVBQVEraUIsUUFqQ1IsU0FBaUIzRCxHQUNiLElBQUluVCxFQUFJbVQsRUFBTyxHQUVYbFQsRUFBSWtULEVBQU8sR0FBSyxFQVFwQixHQUFJbFQsRUFBSSxHQUFLRCxHQUFLLEVBQ2QsT0FBTzBWLEVBQVd0RixRQUFRN1osVUFFOUIsSUFBVyxJQUFQeUosRUFDQSxPQUFPLFNBQVVnRyxHQUFTLE9BQU9BLEdBQVMvRixDQUFHLEVBQ2pELEdBQVUsSUFBTkQsRUFDQSxPQUFPLFNBQVVnRyxHQUFTLE9BQU9BLElBQVUvRixDQUFHLEVBRWxELEdBQVUsSUFBTkQsRUFDQSxPQUFPQyxFQUFJLEVBQUl5VixFQUFXdEYsUUFBUTlaLFNBQVcsU0FBVTBQLEdBQVMsT0FBT0EsR0FBUy9GLENBQUcsRUFNdkYsSUFBSTQ0RCxFQUFPbjZELEtBQUtDLElBQUlxQixHQUVoQjg0RCxHQUFTNzRELEVBQUk0NEQsRUFBUUEsR0FBUUEsRUFDakMsT0FBTzc0RCxFQUFJLEVBQ0wsU0FBVWdHLEdBQVMsT0FBT0EsR0FBUy9GLEdBQUsrRixFQUFRNnlELElBQVNDLENBQU0sRUFDL0QsU0FBVTl5RCxHQUFTLE9BQU9BLEdBQVMvRixHQUFLK0YsRUFBUTZ5RCxJQUFTQyxDQUFNLENBQ3pFLEVBNERBL2tFLEVBQVE2a0UsU0ExQlIsU0FBa0J6bEQsR0FDZCxJQUFJblQsRUFBSW1ULEVBQU8sR0FFWGxULEVBQUlrVCxFQUFPLEdBQUssRUFDaEJwYSxFQUFJLEVBRVIsR0FBSWlILEVBQUksRUFBRyxDQUNQLElBQUkrNEQsR0FBVS80RCxFQUVWZzVELEdBQWUvNEQsRUFBSTg0RCxFQUFVQSxHQUFVQSxFQUMzQyxPQUFPLFdBQ0gsSUFBSXQ0RCxFQUFNdTRELEVBQWFELEVBQVNoZ0UsSUFDaEMsT0FBTzBILEVBQU1SLEVBQUksS0FBT1EsQ0FDNUIsQ0FDSixDQUNBLE9BQVUsSUFBTlQsRUFDT0MsRUFBSSxFQUVILFdBQWMsT0FBTyxJQUFNLEVBRTNCLFdBQWMsT0FBZ0IsR0FBUmxILElBQVlrSCxFQUFJLElBQU8sR0FDckRBLEVBQUksSUFDSkEsR0FBS0QsRUFBSXRCLEtBQUt1NkQsTUFBTWg1RCxFQUFJRCxJQUVyQixXQUFjLE9BQU9BLEVBQUlqSCxJQUFNa0gsQ0FBRyxFQUM3QywrQkNySEF2SSxPQUFPQyxlQUFlNUQsRUFBUyxhQUFjLENBQUUwRCxPQUFPLElBQ3REMUQsRUFBUTR1RCxTQUFXNXVELEVBQVE2a0UsU0FBVzdrRSxFQUFRK2lCLFFBQVUvaUIsRUFBUWtJLFdBQVEsRUFDeEUsSUFBSXVNLEVBQWEsRUFBUSxNQUN6QjlRLE9BQU9DLGVBQWU1RCxFQUFTLFFBQVMsQ0FBRThGLFlBQVksRUFBTUMsSUFBSyxXQUFjLE9BQU8wTyxFQUFXdk0sS0FBTyxJQUN4RyxJQUFJNmQsRUFBZSxFQUFRLE1BQzNCcGlCLE9BQU9DLGVBQWU1RCxFQUFTLFVBQVcsQ0FBRThGLFlBQVksRUFBTUMsSUFBSyxXQUFjLE9BQU9nZ0IsRUFBYWhELE9BQVMsSUFDOUdwZixPQUFPQyxlQUFlNUQsRUFBUyxXQUFZLENBQUU4RixZQUFZLEVBQU1DLElBQUssV0FBYyxPQUFPZ2dCLEVBQWE4K0MsUUFBVSxJQTJCaEg3a0UsRUFBQSxRQUhBLFNBQWtCbWxFLEdBQ2QsT0FBTyxFQUFJcC9DLEVBQWFoRCxVQUFTLEVBQUl0TyxFQUFXdk0sT0FBT2k5RCxHQUMzRCxFQW1DQW5sRSxFQUFRNHVELFNBSFIsU0FBa0J1VyxHQUNkLE9BQU8sRUFBSXAvQyxFQUFhOCtDLFdBQVUsRUFBSXB3RCxFQUFXdk0sT0FBT2k5RCxHQUM1RCw2QkNqRUF4aEUsT0FBT0MsZUFBZTVELEVBQVMsYUFBYyxDQUFFMEQsT0FBTyxJQUN0RDFELEVBQVFrSSxXQUFRLEVBRWhCLElBQUlrOUQsRUFBYSxJQUFJejhELElBQUksQ0FBQyxFQUFHLEdBQUksR0FBSSxHQUFJLEtBQ3JDeXhCLEVBQU8sSUFBSWxhLFdBQVcsR0FDdEJtYSxFQUFPLElBQUluYSxXQUFXLEdBb0UxQmxnQixFQUFRa0ksTUE1RFIsU0FBZWk5RCxHQUVYLEdBQWdCLFVBRGhCQSxFQUFVQSxFQUFROTFELE9BQU95USxlQUVyQixNQUFPLENBQUMsRUFBRyxHQUVWLEdBQWdCLFFBQVpxbEQsRUFDTCxNQUFPLENBQUMsRUFBRyxHQUdmLElBQUlyMkQsRUFBTSxFQUNON0MsRUFBSSxFQUNKbzVELEVBQU9DLElBQ1BsZ0IsRUFBU21nQixJQWViLEdBZEl6MkQsRUFBTXEyRCxFQUFRMWtFLFFBQWtDLE1BQXhCMGtFLEVBQVEvaUQsT0FBT3RULEtBQ3ZDQSxJQUNBN0MsRUFBSW81RCxHQUFRamdCLFFBQXVDQSxFQUFTLEdBQzVEb2dCLElBQ0kxMkQsRUFBTXEyRCxFQUFRMWtFLFFBQ2Q0a0UsRUFBT0MsSUFDUEUsSUFDQXBnQixFQUFTbWdCLEtBR1RGLEVBQU9qZ0IsRUFBUyxHQUlULE9BQVhBLEdBQW1CdDJDLEVBQU1xMkQsRUFBUTFrRSxPQUNqQyxNQUFNLElBQUk4TyxNQUFNLGtDQUFrQzVJLE9BQU93K0QsRUFBUyxPQUV0RSxNQUFPLENBQUNsNUQsRUFBR281RCxFQUFPamdCLEdBQ2xCLFNBQVNrZ0IsSUFDTCxNQUE0QixNQUF4QkgsRUFBUS9pRCxPQUFPdFQsSUFDZkEsS0FDUSxJQUVnQixNQUF4QnEyRCxFQUFRL2lELE9BQU90VCxJQUNmQSxJQUVHLEVBQ1gsQ0FDQSxTQUFTeTJELElBR0wsSUFGQSxJQUFJOXFELEVBQVEzTCxFQUNScEwsRUFBUSxFQUNMb0wsRUFBTXEyRCxFQUFRMWtFLFFBQ2pCMGtFLEVBQVFqbEQsV0FBV3BSLElBQVFzckIsR0FDM0IrcUMsRUFBUWpsRCxXQUFXcFIsSUFBUXVyQixHQUMzQjMyQixFQUFnQixHQUFSQSxHQUFjeWhFLEVBQVFqbEQsV0FBV3BSLEdBQU9zckIsR0FDaER0ckIsSUFHSixPQUFPQSxJQUFRMkwsRUFBUSxLQUFPL1csQ0FDbEMsQ0FDQSxTQUFTOGhFLElBQ0wsS0FBTzEyRCxFQUFNcTJELEVBQVExa0UsUUFDakIya0UsRUFBV3A4RCxJQUFJbThELEVBQVFqbEQsV0FBV3BSLEtBQ2xDQSxHQUVSLENBQ0osa0JDMUVBLElBQUkyMkQsRUFBd0IsbUJBQVJuN0MsS0FBc0JBLElBQUl6b0IsVUFDMUM2akUsRUFBb0IvaEUsT0FBTytCLDBCQUE0QisvRCxFQUFTOWhFLE9BQU8rQix5QkFBeUI0a0IsSUFBSXpvQixVQUFXLFFBQVUsS0FDekg4akUsRUFBVUYsR0FBVUMsR0FBc0QsbUJBQTFCQSxFQUFrQjMvRCxJQUFxQjIvRCxFQUFrQjMvRCxJQUFNLEtBQy9HNi9ELEVBQWFILEdBQVVuN0MsSUFBSXpvQixVQUFVb0gsUUFDckM0OEQsRUFBd0IsbUJBQVJsOUQsS0FBc0JBLElBQUk5RyxVQUMxQ2lrRSxFQUFvQm5pRSxPQUFPK0IsMEJBQTRCbWdFLEVBQVNsaUUsT0FBTytCLHlCQUF5QmlELElBQUk5RyxVQUFXLFFBQVUsS0FDekhra0UsRUFBVUYsR0FBVUMsR0FBc0QsbUJBQTFCQSxFQUFrQi8vRCxJQUFxQisvRCxFQUFrQi8vRCxJQUFNLEtBQy9HaWdFLEVBQWFILEdBQVVsOUQsSUFBSTlHLFVBQVVvSCxRQUVyQ2c5RCxFQURnQyxtQkFBWjdoQixTQUEwQkEsUUFBUXZpRCxVQUM1QnVpRCxRQUFRdmlELFVBQVVtSCxJQUFNLEtBRWxEazlELEVBRGdDLG1CQUFaN2dELFNBQTBCQSxRQUFReGpCLFVBQzVCd2pCLFFBQVF4akIsVUFBVW1ILElBQU0sS0FFbERtOUQsRUFEZ0MsbUJBQVo5aEIsU0FBMEJBLFFBQVF4aUQsVUFDMUJ3aUQsUUFBUXhpRCxVQUFVdWtFLE1BQVEsS0FDdERDLEVBQWlCNWpDLFFBQVE1Z0MsVUFBVTZnQyxRQUNuQ3N6QixFQUFpQnJ5RCxPQUFPOUIsVUFBVTJSLFNBQ2xDOHlELEVBQW1COWpDLFNBQVMzZ0MsVUFBVTJSLFNBQ3RDK3lELEVBQVN2M0QsT0FBT25OLFVBQVU2WCxNQUMxQm5ZLEVBQVN5TixPQUFPbk4sVUFBVTZFLE1BQzFCaytDLEVBQVc1MUMsT0FBT25OLFVBQVV3UixRQUM1Qm16RCxFQUFleDNELE9BQU9uTixVQUFVaU8sWUFDaEMyMkQsRUFBZXozRCxPQUFPbk4sVUFBVWllLFlBQ2hDNG1ELEVBQVFua0QsT0FBTzFnQixVQUFVZ00sS0FDekI2MkMsRUFBVTlpRCxNQUFNQyxVQUFVOEUsT0FDMUJnZ0UsRUFBUS9rRSxNQUFNQyxVQUFVOFAsS0FDeEJpMUQsRUFBWWhsRSxNQUFNQyxVQUFVNkUsTUFDNUJtZ0UsRUFBU2w4RCxLQUFLbThELE1BQ2RDLEVBQWtDLG1CQUFYamtCLE9BQXdCQSxPQUFPamhELFVBQVU2Z0MsUUFBVSxLQUMxRXNrQyxFQUFPcmpFLE9BQU9nc0Isc0JBQ2RzM0MsRUFBZ0MsbUJBQVg3ckQsUUFBb0QsaUJBQXBCQSxPQUFPQyxTQUF3QkQsT0FBT3ZaLFVBQVUyUixTQUFXLEtBQ2hIMHpELEVBQXNDLG1CQUFYOXJELFFBQW9ELGlCQUFwQkEsT0FBT0MsU0FFbEVnckMsRUFBZ0MsbUJBQVhqckMsUUFBeUJBLE9BQU9pckMsY0FBdUJqckMsT0FBT2lyQyxZQUFmLEdBQ2xFanJDLE9BQU9pckMsWUFDUCxLQUNGOGdCLEVBQWV4akUsT0FBTzlCLFVBQVV1a0QscUJBRWhDZ2hCLEdBQTBCLG1CQUFacGpCLFFBQXlCQSxRQUFRN1QsZUFBaUJ4c0MsT0FBT3dzQyxrQkFDdkUsR0FBR3Z6QixZQUFjaGIsTUFBTUMsVUFDakIsU0FBVTFCLEdBQ1IsT0FBT0EsRUFBRXljLFNBQ2IsRUFDRSxNQUdWLFNBQVN5cUQsRUFBb0I5OEQsRUFBS21JLEdBQzlCLEdBQ0luSSxJQUFRUCxLQUNMTyxLQUFRLEtBQ1JBLEdBQVFBLEdBQ1BBLEdBQU9BLEdBQU8sS0FBUUEsRUFBTSxLQUM3Qm04RCxFQUFNdGpFLEtBQUssSUFBS3NQLEdBRW5CLE9BQU9BLEVBRVgsSUFBSTQwRCxFQUFXLG1DQUNmLEdBQW1CLGlCQUFSLzhELEVBQWtCLENBQ3pCLElBQUlnOUQsRUFBTWg5RCxFQUFNLEdBQUtzOEQsR0FBUXQ4RCxHQUFPczhELEVBQU90OEQsR0FDM0MsR0FBSWc5RCxJQUFRaDlELEVBQUssQ0FDYixJQUFJaTlELEVBQVN4NEQsT0FBT3U0RCxHQUNoQkUsRUFBTWxtRSxFQUFPNkIsS0FBS3NQLEVBQUs4MEQsRUFBTy9tRSxPQUFTLEdBQzNDLE9BQU9ta0QsRUFBU3hoRCxLQUFLb2tFLEVBQVFGLEVBQVUsT0FBUyxJQUFNMWlCLEVBQVN4aEQsS0FBS3doRCxFQUFTeGhELEtBQUtxa0UsRUFBSyxjQUFlLE9BQVEsS0FBTSxHQUN4SCxDQUNKLENBQ0EsT0FBTzdpQixFQUFTeGhELEtBQUtzUCxFQUFLNDBELEVBQVUsTUFDeEMsQ0FFQSxJQUFJSSxFQUFjLEVBQVEsTUFDdEJDLEVBQWdCRCxFQUFZRSxPQUM1QkMsRUFBZ0Jwb0IsRUFBU2tvQixHQUFpQkEsRUFBZ0IsS0FvTTlELFNBQVNHLEVBQVdoakUsRUFBR2lqRSxFQUFjeitELEdBQ2pDLElBQUkwK0QsRUFBa0QsWUFBckMxK0QsRUFBS2k2QixZQUFjd2tDLEdBQTZCLElBQU0sSUFDdkUsT0FBT0MsRUFBWWxqRSxFQUFJa2pFLENBQzNCLENBRUEsU0FBU3Q2QyxFQUFNNW9CLEdBQ1gsT0FBTzgvQyxFQUFTeGhELEtBQUs0TCxPQUFPbEssR0FBSSxLQUFNLFNBQzFDLENBRUEsU0FBU3NGLEVBQVFxSSxHQUFPLFFBQXNCLG1CQUFmMGMsRUFBTTFjLElBQStCNHpDLEdBQWdDLGlCQUFSNXpDLEdBQW9CNHpDLEtBQWU1ekMsRUFBTyxDQUV0SSxTQUFTdzFELEVBQVN4MUQsR0FBTyxRQUFzQixvQkFBZjBjLEVBQU0xYyxJQUFnQzR6QyxHQUFnQyxpQkFBUjV6QyxHQUFvQjR6QyxLQUFlNXpDLEVBQU8sQ0FPeEksU0FBU2d0QyxFQUFTaHRDLEdBQ2QsR0FBSXkwRCxFQUNBLE9BQU96MEQsR0FBc0IsaUJBQVJBLEdBQW9CQSxhQUFlMkksT0FFNUQsR0FBbUIsaUJBQVIzSSxFQUNQLE9BQU8sRUFFWCxJQUFLQSxHQUFzQixpQkFBUkEsSUFBcUJ3MEQsRUFDcEMsT0FBTyxFQUVYLElBRUksT0FEQUEsRUFBWTdqRSxLQUFLcVAsSUFDVixDQUNYLENBQUUsTUFBTzNKLEdBQUksQ0FDYixPQUFPLENBQ1gsQ0FuT0EvSSxFQUFPQyxRQUFVLFNBQVNrb0UsRUFBU3oxRCxFQUFLekssRUFBUzY2QixFQUFPcTdCLEdBQ3BELElBQUk1MEQsRUFBT3RCLEdBQVcsQ0FBQyxFQUV2QixHQUFJZ0IsRUFBSU0sRUFBTSxlQUFzQyxXQUFwQkEsRUFBS2k2QixZQUErQyxXQUFwQmo2QixFQUFLaTZCLFdBQ2pFLE1BQU0sSUFBSWhqQyxVQUFVLG9EQUV4QixHQUNJeUksRUFBSU0sRUFBTSxxQkFBdUQsaUJBQXpCQSxFQUFLNitELGdCQUN2QzcrRCxFQUFLNitELGdCQUFrQixHQUFLNytELEVBQUs2K0Qsa0JBQW9CbitELElBQzVCLE9BQXpCVixFQUFLNitELGlCQUdYLE1BQU0sSUFBSTVuRSxVQUFVLDBGQUV4QixJQUFJNm5FLEdBQWdCcC9ELEVBQUlNLEVBQU0sa0JBQW1CQSxFQUFLOCtELGNBQ3RELEdBQTZCLGtCQUFsQkEsR0FBaUQsV0FBbEJBLEVBQ3RDLE1BQU0sSUFBSTduRSxVQUFVLGlGQUd4QixHQUNJeUksRUFBSU0sRUFBTSxXQUNTLE9BQWhCQSxFQUFLbzRCLFFBQ1csT0FBaEJwNEIsRUFBS280QixVQUNIbDNCLFNBQVNsQixFQUFLbzRCLE9BQVEsTUFBUXA0QixFQUFLbzRCLFFBQVVwNEIsRUFBS280QixPQUFTLEdBRWhFLE1BQU0sSUFBSW5oQyxVQUFVLDREQUV4QixHQUFJeUksRUFBSU0sRUFBTSxxQkFBd0Qsa0JBQTFCQSxFQUFLKytELGlCQUM3QyxNQUFNLElBQUk5bkUsVUFBVSxxRUFFeEIsSUFBSThuRSxFQUFtQi8rRCxFQUFLKytELGlCQUU1QixRQUFtQixJQUFSNTFELEVBQ1AsTUFBTyxZQUVYLEdBQVksT0FBUkEsRUFDQSxNQUFPLE9BRVgsR0FBbUIsa0JBQVJBLEVBQ1AsT0FBT0EsRUFBTSxPQUFTLFFBRzFCLEdBQW1CLGlCQUFSQSxFQUNQLE9BQU82MUQsRUFBYzcxRCxFQUFLbkosR0FFOUIsR0FBbUIsaUJBQVJtSixFQUFrQixDQUN6QixHQUFZLElBQVJBLEVBQ0EsT0FBT3pJLElBQVd5SSxFQUFNLEVBQUksSUFBTSxLQUV0QyxJQUFJQyxFQUFNMUQsT0FBT3lELEdBQ2pCLE9BQU80MUQsRUFBbUJoQixFQUFvQjUwRCxFQUFLQyxHQUFPQSxDQUM5RCxDQUNBLEdBQW1CLGlCQUFSRCxFQUFrQixDQUN6QixJQUFJODFELEVBQVl2NUQsT0FBT3lELEdBQU8sSUFDOUIsT0FBTzQxRCxFQUFtQmhCLEVBQW9CNTBELEVBQUs4MUQsR0FBYUEsQ0FDcEUsQ0FFQSxJQUFJQyxPQUFpQyxJQUFmbC9ELEVBQUt1NUIsTUFBd0IsRUFBSXY1QixFQUFLdTVCLE1BRTVELFFBRHFCLElBQVZBLElBQXlCQSxFQUFRLEdBQ3hDQSxHQUFTMmxDLEdBQVlBLEVBQVcsR0FBb0IsaUJBQVIvMUQsRUFDNUMsT0FBT3JJLEVBQVFxSSxHQUFPLFVBQVksV0FHdEMsSUFvUmVvTixFQXBSWDZoQixFQTBVUixTQUFtQnA0QixFQUFNdTVCLEdBQ3JCLElBQUk0bEMsRUFDSixHQUFvQixPQUFoQm4vRCxFQUFLbzRCLE9BQ0wrbUMsRUFBYSxTQUNWLE1BQTJCLGlCQUFoQm4vRCxFQUFLbzRCLFFBQXVCcDRCLEVBQUtvNEIsT0FBUyxHQUd4RCxPQUFPLEtBRlArbUMsRUFBYTlCLEVBQU12akUsS0FBS3hCLE1BQU0wSCxFQUFLbzRCLE9BQVMsR0FBSSxJQUdwRCxDQUNBLE1BQU8sQ0FDSDlGLEtBQU02c0MsRUFDTmx6RCxLQUFNb3hELEVBQU12akUsS0FBS3hCLE1BQU1paEMsRUFBUSxHQUFJNGxDLEdBRTNDLENBdlZpQkMsQ0FBVXAvRCxFQUFNdTVCLEdBRTdCLFFBQW9CLElBQVRxN0IsRUFDUEEsRUFBTyxRQUNKLEdBQUk5c0QsRUFBUThzRCxFQUFNenJELElBQVEsRUFDN0IsTUFBTyxhQUdYLFNBQVNrMkQsRUFBUWpsRSxFQUFPNEMsRUFBTXNpRSxHQUsxQixHQUpJdGlFLElBQ0E0M0QsRUFBTzBJLEVBQVV4akUsS0FBSzg2RCxJQUNqQng1RCxLQUFLNEIsR0FFVnNpRSxFQUFVLENBQ1YsSUFBSUMsRUFBVSxDQUNWaG1DLE1BQU92NUIsRUFBS3U1QixPQUtoQixPQUhJNzVCLEVBQUlNLEVBQU0sZ0JBQ1Z1L0QsRUFBUXRsQyxXQUFhajZCLEVBQUtpNkIsWUFFdkIya0MsRUFBU3hrRSxFQUFPbWxFLEVBQVNobUMsRUFBUSxFQUFHcTdCLEVBQy9DLENBQ0EsT0FBT2dLLEVBQVN4a0UsRUFBTzRGLEVBQU11NUIsRUFBUSxFQUFHcTdCLEVBQzVDLENBRUEsR0FBbUIsbUJBQVJ6ckQsSUFBdUJ3MUQsRUFBU3gxRCxHQUFNLENBQzdDLElBQUk5UCxHQWdLWixTQUFnQm1tRSxHQUNaLEdBQUlBLEVBQUVubUUsS0FBUSxPQUFPbW1FLEVBQUVubUUsS0FDdkIsSUFBSTJDLEVBQUlpaEUsRUFBT25qRSxLQUFLa2pFLEVBQWlCbGpFLEtBQUswbEUsR0FBSSx3QkFDOUMsT0FBSXhqRSxFQUFZQSxFQUFFLEdBQ1gsSUFDWCxDQXJLbUJ5akUsQ0FBT3QyRCxHQUNkakUsR0FBT3c2RCxFQUFXdjJELEVBQUtrMkQsR0FDM0IsTUFBTyxhQUFlaG1FLEdBQU8sS0FBT0EsR0FBTyxnQkFBa0IsS0FBTzZMLEdBQUsvTixPQUFTLEVBQUksTUFBUWttRSxFQUFNdmpFLEtBQUtvTCxHQUFNLE1BQVEsS0FBTyxHQUNsSSxDQUNBLEdBQUlpeEMsRUFBU2h0QyxHQUFNLENBQ2YsSUFBSXcyRCxHQUFZL0IsRUFBb0J0aUIsRUFBU3hoRCxLQUFLNEwsT0FBT3lELEdBQU0seUJBQTBCLE1BQVF3MEQsRUFBWTdqRSxLQUFLcVAsR0FDbEgsTUFBc0IsaUJBQVJBLEdBQXFCeTBELEVBQTJDK0IsR0FBdkJDLEVBQVVELEdBQ3JFLENBQ0EsSUFrUGVwcEQsRUFsUERwTixJQW1QUyxpQkFBTm9OLElBQ1Usb0JBQWhCbW5DLGFBQStCbm5DLGFBQWFtbkMsYUFHMUIsaUJBQWZubkMsRUFBRXNwRCxVQUFtRCxtQkFBbkJ0cEQsRUFBRXVwRCxjQXZQOUIsQ0FHaEIsSUFGQSxJQUFJdGtFLEdBQUksSUFBTTJoRSxFQUFhcmpFLEtBQUs0TCxPQUFPeUQsRUFBSTAyRCxXQUN2Q0UsR0FBUTUyRCxFQUFJOFgsWUFBYyxHQUNyQnhsQixHQUFJLEVBQUdBLEdBQUlza0UsR0FBTTVvRSxPQUFRc0UsS0FDOUJELElBQUssSUFBTXVrRSxHQUFNdGtFLElBQUdwQyxLQUFPLElBQU1tbEUsRUFBV3A2QyxFQUFNMjdDLEdBQU10a0UsSUFBR3JCLE9BQVEsU0FBVTRGLEdBS2pGLE9BSEF4RSxJQUFLLElBQ0QyTixFQUFJNjJELFlBQWM3MkQsRUFBSTYyRCxXQUFXN29FLFNBQVVxRSxJQUFLLE9BQ3BEQSxHQUFLLEtBQU8yaEUsRUFBYXJqRSxLQUFLNEwsT0FBT3lELEVBQUkwMkQsV0FBYSxHQUUxRCxDQUNBLEdBQUkvK0QsRUFBUXFJLEdBQU0sQ0FDZCxHQUFtQixJQUFmQSxFQUFJaFMsT0FBZ0IsTUFBTyxLQUMvQixJQUFJOG9FLEdBQUtQLEVBQVd2MkQsRUFBS2syRCxHQUN6QixPQUFJam5DLElBaVJaLFNBQTBCNm5DLEdBQ3RCLElBQUssSUFBSXhrRSxFQUFJLEVBQUdBLEVBQUl3a0UsRUFBRzlvRSxPQUFRc0UsSUFDM0IsR0FBSXFNLEVBQVFtNEQsRUFBR3hrRSxHQUFJLE9BQVMsRUFDeEIsT0FBTyxFQUdmLE9BQU8sQ0FDWCxDQXhSdUJ5a0UsQ0FBaUJELElBQ3JCLElBQU1FLEVBQWFGLEdBQUk3bkMsR0FBVSxJQUVyQyxLQUFPaWxDLEVBQU12akUsS0FBS21tRSxHQUFJLE1BQVEsSUFDekMsQ0FDQSxHQTBGSixTQUFpQjkyRCxHQUFPLFFBQXNCLG1CQUFmMGMsRUFBTTFjLElBQStCNHpDLEdBQWdDLGlCQUFSNXpDLEdBQW9CNHpDLEtBQWU1ekMsRUFBTyxDQTFGOUhpM0QsQ0FBUWozRCxHQUFNLENBQ2QsSUFBSTB5QyxHQUFRNmpCLEVBQVd2MkQsRUFBS2syRCxHQUM1QixNQUFNLFVBQVdwNUQsTUFBTTFOLGFBQWMsVUFBVzRRLElBQVEwMEQsRUFBYS9qRSxLQUFLcVAsRUFBSyxTQUcxRCxJQUFqQjB5QyxHQUFNMWtELE9BQXVCLElBQU11TyxPQUFPeUQsR0FBTyxJQUM5QyxNQUFRekQsT0FBT3lELEdBQU8sS0FBT2swRCxFQUFNdmpFLEtBQUsraEQsR0FBTyxNQUFRLEtBSG5ELE1BQVFuMkMsT0FBT3lELEdBQU8sS0FBT2swRCxFQUFNdmpFLEtBQUtzaEQsRUFBUXRoRCxLQUFLLFlBQWN1bEUsRUFBUWwyRCxFQUFJazNELE9BQVF4a0IsSUFBUSxNQUFRLElBSXRILENBQ0EsR0FBbUIsaUJBQVIxeUMsR0FBb0IyMUQsRUFBZSxDQUMxQyxHQUFJUCxHQUErQyxtQkFBdkJwMUQsRUFBSW8xRCxJQUFpQ0gsRUFDN0QsT0FBT0EsRUFBWWoxRCxFQUFLLENBQUVvd0IsTUFBTzJsQyxFQUFXM2xDLElBQ3pDLEdBQXNCLFdBQWxCdWxDLEdBQXFELG1CQUFoQjMxRCxFQUFJazJELFFBQ2hELE9BQU9sMkQsRUFBSWsyRCxTQUVuQixDQUNBLEdBcUlKLFNBQWU5b0QsR0FDWCxJQUFLOGxELElBQVk5bEQsR0FBa0IsaUJBQU5BLEVBQ3pCLE9BQU8sRUFFWCxJQUNJOGxELEVBQVF2aUUsS0FBS3ljLEdBQ2IsSUFDSWttRCxFQUFRM2lFLEtBQUt5YyxFQUNqQixDQUFFLE1BQU8vYSxHQUNMLE9BQU8sQ0FDWCxDQUNBLE9BQU8rYSxhQUFheUssR0FDeEIsQ0FBRSxNQUFPeGhCLEdBQUksQ0FDYixPQUFPLENBQ1gsQ0FuSlE4Z0UsQ0FBTW4zRCxHQUFNLENBQ1osSUFBSW8zRCxHQUFXLEdBTWYsT0FMSWpFLEdBQ0FBLEVBQVd4aUUsS0FBS3FQLEdBQUssU0FBVS9PLEVBQU8rTSxHQUNsQ281RCxHQUFTbmxFLEtBQUtpa0UsRUFBUWw0RCxFQUFLZ0MsR0FBSyxHQUFRLE9BQVNrMkQsRUFBUWpsRSxFQUFPK08sR0FDcEUsSUFFR3EzRCxFQUFhLE1BQU9uRSxFQUFRdmlFLEtBQUtxUCxHQUFNbzNELEdBQVVub0MsRUFDNUQsQ0FDQSxHQXVLSixTQUFlN2hCLEdBQ1gsSUFBS2ttRCxJQUFZbG1ELEdBQWtCLGlCQUFOQSxFQUN6QixPQUFPLEVBRVgsSUFDSWttRCxFQUFRM2lFLEtBQUt5YyxHQUNiLElBQ0k4bEQsRUFBUXZpRSxLQUFLeWMsRUFDakIsQ0FBRSxNQUFPdmEsR0FDTCxPQUFPLENBQ1gsQ0FDQSxPQUFPdWEsYUFBYWxYLEdBQ3hCLENBQUUsTUFBT0csR0FBSSxDQUNiLE9BQU8sQ0FDWCxDQXJMUWloRSxDQUFNdDNELEdBQU0sQ0FDWixJQUFJdTNELEdBQVcsR0FNZixPQUxJaEUsR0FDQUEsRUFBVzVpRSxLQUFLcVAsR0FBSyxTQUFVL08sR0FDM0JzbUUsR0FBU3RsRSxLQUFLaWtFLEVBQVFqbEUsRUFBTytPLEdBQ2pDLElBRUdxM0QsRUFBYSxNQUFPL0QsRUFBUTNpRSxLQUFLcVAsR0FBTXUzRCxHQUFVdG9DLEVBQzVELENBQ0EsR0FtSUosU0FBbUI3aEIsR0FDZixJQUFLb21ELElBQWVwbUQsR0FBa0IsaUJBQU5BLEVBQzVCLE9BQU8sRUFFWCxJQUNJb21ELEVBQVc3aUUsS0FBS3ljLEVBQUdvbUQsR0FDbkIsSUFDSUMsRUFBVzlpRSxLQUFLeWMsRUFBR3FtRCxFQUN2QixDQUFFLE1BQU9waEUsR0FDTCxPQUFPLENBQ1gsQ0FDQSxPQUFPK2EsYUFBYXVrQyxPQUN4QixDQUFFLE1BQU90N0MsR0FBSSxDQUNiLE9BQU8sQ0FDWCxDQWpKUW1oRSxDQUFVeDNELEdBQ1YsT0FBT3kzRCxFQUFpQixXQUU1QixHQTJLSixTQUFtQnJxRCxHQUNmLElBQUtxbUQsSUFBZXJtRCxHQUFrQixpQkFBTkEsRUFDNUIsT0FBTyxFQUVYLElBQ0lxbUQsRUFBVzlpRSxLQUFLeWMsRUFBR3FtRCxHQUNuQixJQUNJRCxFQUFXN2lFLEtBQUt5YyxFQUFHb21ELEVBQ3ZCLENBQUUsTUFBT25oRSxHQUNMLE9BQU8sQ0FDWCxDQUNBLE9BQU8rYSxhQUFhd0YsT0FDeEIsQ0FBRSxNQUFPdmMsR0FBSSxDQUNiLE9BQU8sQ0FDWCxDQXpMUXFoRSxDQUFVMTNELEdBQ1YsT0FBT3kzRCxFQUFpQixXQUU1QixHQTZJSixTQUFtQnJxRCxHQUNmLElBQUtzbUQsSUFBaUJ0bUQsR0FBa0IsaUJBQU5BLEVBQzlCLE9BQU8sRUFFWCxJQUVJLE9BREFzbUQsRUFBYS9pRSxLQUFLeWMsSUFDWCxDQUNYLENBQUUsTUFBTy9XLEdBQUksQ0FDYixPQUFPLENBQ1gsQ0F0SlFzaEUsQ0FBVTMzRCxHQUNWLE9BQU95M0QsRUFBaUIsV0FFNUIsR0FrREosU0FBa0J6M0QsR0FBTyxRQUFzQixvQkFBZjBjLEVBQU0xYyxJQUFnQzR6QyxHQUFnQyxpQkFBUjV6QyxHQUFvQjR6QyxLQUFlNXpDLEVBQU8sQ0FsRGhJeW5CLENBQVN6bkIsR0FDVCxPQUFPeTJELEVBQVVQLEVBQVExNUQsT0FBT3dELEtBRXBDLEdBb0VKLFNBQWtCQSxHQUNkLElBQUtBLEdBQXNCLGlCQUFSQSxJQUFxQnMwRCxFQUNwQyxPQUFPLEVBRVgsSUFFSSxPQURBQSxFQUFjM2pFLEtBQUtxUCxJQUNaLENBQ1gsQ0FBRSxNQUFPM0osR0FBSSxDQUNiLE9BQU8sQ0FDWCxDQTdFUXVoRSxDQUFTNTNELEdBQ1QsT0FBT3kyRCxFQUFVUCxFQUFRNUIsRUFBYzNqRSxLQUFLcVAsS0FFaEQsR0E2Q0osU0FBbUJBLEdBQU8sUUFBc0IscUJBQWYwYyxFQUFNMWMsSUFBaUM0ekMsR0FBZ0MsaUJBQVI1ekMsR0FBb0I0ekMsS0FBZTV6QyxFQUFPLENBN0NsSTYzRCxDQUFVNzNELEdBQ1YsT0FBT3kyRCxFQUFVN0MsRUFBZWpqRSxLQUFLcVAsSUFFekMsR0F3Q0osU0FBa0JBLEdBQU8sUUFBc0Isb0JBQWYwYyxFQUFNMWMsSUFBZ0M0ekMsR0FBZ0MsaUJBQVI1ekMsR0FBb0I0ekMsS0FBZTV6QyxFQUFPLENBeENoSS9TLENBQVMrUyxHQUNULE9BQU95MkQsRUFBVVAsRUFBUTM1RCxPQUFPeUQsS0FJcEMsR0FBc0Isb0JBQVhzM0IsUUFBMEJ0M0IsSUFBUXMzQixPQUN6QyxNQUFPLHNCQUVYLEdBQUl0M0IsSUFBUSxFQUFBcTNCLEVBQ1IsTUFBTywwQkFFWCxJQTBCSixTQUFnQnIzQixHQUFPLFFBQXNCLGtCQUFmMGMsRUFBTTFjLElBQThCNHpDLEdBQWdDLGlCQUFSNXpDLEdBQW9CNHpDLEtBQWU1ekMsRUFBTyxDQTFCM0grc0MsQ0FBTy9zQyxLQUFTdzFELEVBQVN4MUQsR0FBTSxDQUNoQyxJQUFJODNELEdBQUt2QixFQUFXdjJELEVBQUtrMkQsR0FDckI2QixHQUFnQnBELEVBQU1BLEVBQUkzMEQsS0FBUzlPLE9BQU85QixVQUFZNFEsYUFBZTlPLFFBQVU4TyxFQUFJcUssY0FBZ0JuWixPQUNuRzhtRSxHQUFXaDRELGFBQWU5TyxPQUFTLEdBQUssaUJBQ3hDMjBELElBQWFrUyxJQUFpQm5rQixHQUFlMWlELE9BQU84TyxLQUFTQSxHQUFPNHpDLEtBQWU1ekMsRUFBTWxSLEVBQU82QixLQUFLK3JCLEVBQU0xYyxHQUFNLEdBQUksR0FBS2c0RCxHQUFXLFNBQVcsR0FFaEp6NUMsSUFEaUJ3NUMsSUFBNEMsbUJBQXBCLzNELEVBQUlxSyxZQUE2QixHQUFLckssRUFBSXFLLFlBQVluYSxLQUFPOFAsRUFBSXFLLFlBQVluYSxLQUFPLElBQU0sS0FDM0cyMUQsSUFBYW1TLEdBQVcsSUFBTTlELEVBQU12akUsS0FBS3NoRCxFQUFRdGhELEtBQUssR0FBSWsxRCxJQUFhLEdBQUltUyxJQUFZLElBQUssTUFBUSxLQUFPLElBQ3ZJLE9BQWtCLElBQWRGLEdBQUc5cEUsT0FBdUJ1d0IsR0FBTSxLQUNoQzBRLEVBQ08xUSxHQUFNLElBQU15NEMsRUFBYWMsR0FBSTdvQyxHQUFVLElBRTNDMVEsR0FBTSxLQUFPMjFDLEVBQU12akUsS0FBS21uRSxHQUFJLE1BQVEsSUFDL0MsQ0FDQSxPQUFPdjdELE9BQU95RCxFQUNsQixFQWdEQSxJQUFJekYsRUFBU3JKLE9BQU85QixVQUFVcUQsZ0JBQWtCLFNBQVV1TCxHQUFPLE9BQU9BLEtBQU9yUSxJQUFNLEVBQ3JGLFNBQVM0SSxFQUFJeUosRUFBS2hDLEdBQ2QsT0FBT3pELEVBQU81SixLQUFLcVAsRUFBS2hDLEVBQzVCLENBRUEsU0FBUzBlLEVBQU0xYyxHQUNYLE9BQU91akQsRUFBZTV5RCxLQUFLcVAsRUFDL0IsQ0FTQSxTQUFTckIsRUFBUW00RCxFQUFJMXBELEdBQ2pCLEdBQUkwcEQsRUFBR240RCxRQUFXLE9BQU9tNEQsRUFBR240RCxRQUFReU8sR0FDcEMsSUFBSyxJQUFJOWEsRUFBSSxFQUFHMEIsRUFBSThpRSxFQUFHOW9FLE9BQVFzRSxFQUFJMEIsRUFBRzFCLElBQ2xDLEdBQUl3a0UsRUFBR3hrRSxLQUFPOGEsRUFBSyxPQUFPOWEsRUFFOUIsT0FBUSxDQUNaLENBcUZBLFNBQVN1akUsRUFBYzUxRCxFQUFLcEosR0FDeEIsR0FBSW9KLEVBQUlqUyxPQUFTNkksRUFBSzYrRCxnQkFBaUIsQ0FDbkMsSUFBSXVDLEVBQVloNEQsRUFBSWpTLE9BQVM2SSxFQUFLNitELGdCQUM5QndDLEVBQVUsT0FBU0QsRUFBWSxtQkFBcUJBLEVBQVksRUFBSSxJQUFNLElBQzlFLE9BQU9wQyxFQUFjL21FLEVBQU82QixLQUFLc1AsRUFBSyxFQUFHcEosRUFBSzYrRCxpQkFBa0I3K0QsR0FBUXFoRSxDQUM1RSxDQUdBLE9BQU83QyxFQURDbGpCLEVBQVN4aEQsS0FBS3doRCxFQUFTeGhELEtBQUtzUCxFQUFLLFdBQVksUUFBUyxlQUFnQms0RCxHQUN6RCxTQUFVdGhFLEVBQ25DLENBRUEsU0FBU3NoRSxFQUFRdCtDLEdBQ2IsSUFBSXRuQixFQUFJc25CLEVBQUVwTSxXQUFXLEdBQ2pCTCxFQUFJLENBQ0osRUFBRyxJQUNILEVBQUcsSUFDSCxHQUFJLElBQ0osR0FBSSxJQUNKLEdBQUksS0FDTjdhLEdBQ0YsT0FBSTZhLEVBQVksS0FBT0EsRUFDaEIsT0FBUzdhLEVBQUksR0FBTyxJQUFNLElBQU13aEUsRUFBYXBqRSxLQUFLNEIsRUFBRXdPLFNBQVMsSUFDeEUsQ0FFQSxTQUFTMDFELEVBQVV4MkQsR0FDZixNQUFPLFVBQVlBLEVBQU0sR0FDN0IsQ0FFQSxTQUFTdzNELEVBQWlCMWlFLEdBQ3RCLE9BQU9BLEVBQU8sUUFDbEIsQ0FFQSxTQUFTc2lFLEVBQWF0aUUsRUFBTW9CLEVBQU1zeUQsRUFBU3g1QixHQUV2QyxPQUFPbDZCLEVBQU8sS0FBT29CLEVBQU8sT0FEUjg0QixFQUFTK25DLEVBQWF2TyxFQUFTeDVCLEdBQVVpbEMsRUFBTXZqRSxLQUFLODNELEVBQVMsT0FDN0IsR0FDeEQsQ0EwQkEsU0FBU3VPLEVBQWFGLEVBQUk3bkMsR0FDdEIsR0FBa0IsSUFBZDZuQyxFQUFHOW9FLE9BQWdCLE1BQU8sR0FDOUIsSUFBSW9xRSxFQUFhLEtBQU9ucEMsRUFBT25zQixLQUFPbXNCLEVBQU85RixLQUM3QyxPQUFPaXZDLEVBQWFsRSxFQUFNdmpFLEtBQUttbUUsRUFBSSxJQUFNc0IsR0FBYyxLQUFPbnBDLEVBQU9uc0IsSUFDekUsQ0FFQSxTQUFTeXpELEVBQVd2MkQsRUFBS2syRCxHQUNyQixJQUFJbkosRUFBUXAxRCxFQUFRcUksR0FDaEI4MkQsRUFBSyxHQUNULEdBQUkvSixFQUFPLENBQ1ArSixFQUFHOW9FLE9BQVNnUyxFQUFJaFMsT0FDaEIsSUFBSyxJQUFJc0UsRUFBSSxFQUFHQSxFQUFJME4sRUFBSWhTLE9BQVFzRSxJQUM1QndrRSxFQUFHeGtFLEdBQUtpRSxFQUFJeUosRUFBSzFOLEdBQUs0akUsRUFBUWwyRCxFQUFJMU4sR0FBSTBOLEdBQU8sRUFFckQsQ0FDQSxJQUNJcTRELEVBREEza0IsRUFBdUIsbUJBQVQ2Z0IsRUFBc0JBLEVBQUt2MEQsR0FBTyxHQUVwRCxHQUFJeTBELEVBQW1CLENBQ25CNEQsRUFBUyxDQUFDLEVBQ1YsSUFBSyxJQUFJbnFFLEVBQUksRUFBR0EsRUFBSXdsRCxFQUFLMWxELE9BQVFFLElBQzdCbXFFLEVBQU8sSUFBTTNrQixFQUFLeGxELElBQU13bEQsRUFBS3hsRCxFQUVyQyxDQUVBLElBQUssSUFBSThQLEtBQU9nQyxFQUNQekosRUFBSXlKLEVBQUtoQyxLQUNWK3VELEdBQVN4d0QsT0FBT0MsT0FBT3dCLE1BQVVBLEdBQU9BLEVBQU1nQyxFQUFJaFMsUUFDbER5bUUsR0FBcUI0RCxFQUFPLElBQU1yNkQsYUFBZ0IySyxTQUczQ3NyRCxFQUFNdGpFLEtBQUssU0FBVXFOLEdBQzVCODRELEVBQUc3a0UsS0FBS2lrRSxFQUFRbDRELEVBQUtnQyxHQUFPLEtBQU9rMkQsRUFBUWwyRCxFQUFJaEMsR0FBTWdDLElBRXJEODJELEVBQUc3a0UsS0FBSytMLEVBQU0sS0FBT2s0RCxFQUFRbDJELEVBQUloQyxHQUFNZ0MsTUFHL0MsR0FBb0IsbUJBQVR1MEQsRUFDUCxJQUFLLElBQUl2MUQsRUFBSSxFQUFHQSxFQUFJMDBDLEVBQUsxbEQsT0FBUWdSLElBQ3pCMDFELEVBQWEvakUsS0FBS3FQLEVBQUswekMsRUFBSzEwQyxLQUM1QjgzRCxFQUFHN2tFLEtBQUssSUFBTWlrRSxFQUFReGlCLEVBQUsxMEMsSUFBTSxNQUFRazNELEVBQVFsMkQsRUFBSTB6QyxFQUFLMTBDLElBQUtnQixJQUkzRSxPQUFPODJELENBQ1gseUJDemdCQSxJQUFJd0IsRUFBYyxTQUFVcm5FLEdBQzNCLE9BQU9BLEdBQVVBLENBQ2xCLEVBRUEzRCxFQUFPQyxRQUFVLFNBQVlpTSxFQUFHQyxHQUMvQixPQUFVLElBQU5ELEdBQWlCLElBQU5DLEVBQ1AsRUFBSUQsR0FBTSxFQUFJQyxFQUVsQkQsSUFBTUMsTUFHTjYrRCxFQUFZOStELEtBQU04K0QsRUFBWTcrRCxHQUluQywrQkNmQSxJQUFJbkwsRUFBUyxFQUFRLE1BQ2pCRSxFQUFXLEVBQVEsS0FFbkJDLEVBQWlCLEVBQVEsTUFDekJDLEVBQWMsRUFBUSxNQUN0QkcsRUFBTyxFQUFRLE1BRWZGLEVBQVdILEVBQVNFLElBQWV3QyxRQUV2QzVDLEVBQU9LLEVBQVUsQ0FDaEJELFlBQWFBLEVBQ2JELGVBQWdCQSxFQUNoQkksS0FBTUEsSUFHUHZCLEVBQU9DLFFBQVVvQiwrQkNmakIsSUFBSUYsRUFBaUIsRUFBUSxNQUU3Qm5CLEVBQU9DLFFBQVUsV0FDaEIsTUFBNEIsbUJBQWQyRCxPQUFPa0QsR0FBb0JsRCxPQUFPa0QsR0FBSzNGLENBQ3RELCtCQ0pBLElBQUlDLEVBQWMsRUFBUSxNQUN0QkosRUFBUyxFQUFRLE1BRXJCaEIsRUFBT0MsUUFBVSxXQUNoQixJQUFJb0IsRUFBV0QsSUFNZixPQUxBSixFQUFPNEMsT0FBUSxDQUFFa0QsR0FBSXpGLEdBQVksQ0FDaEN5RixHQUFJLFdBQ0gsT0FBT2xELE9BQU9rRCxLQUFPekYsQ0FDdEIsSUFFTUEsQ0FDUiwrQkNYQSxJQUFJNHBFLEVBQ0osSUFBS3JuRSxPQUFPNkssS0FBTSxDQUVqQixJQUFJeEYsRUFBTXJGLE9BQU85QixVQUFVcUQsZUFDdkJpcUIsRUFBUXhyQixPQUFPOUIsVUFBVTJSLFNBQ3pCeTNELEVBQVMsRUFBUSxNQUNqQjlELEVBQWV4akUsT0FBTzlCLFVBQVV1a0QscUJBQ2hDOGtCLEdBQWtCL0QsRUFBYS9qRSxLQUFLLENBQUVvUSxTQUFVLE1BQVEsWUFDeEQyM0QsRUFBa0JoRSxFQUFhL2pFLE1BQUssV0FBYSxHQUFHLGFBQ3BEZ29FLEVBQVksQ0FDZixXQUNBLGlCQUNBLFVBQ0EsaUJBQ0EsZ0JBQ0EsdUJBQ0EsZUFFR0MsRUFBNkIsU0FBVWhtRSxHQUMxQyxJQUFJaW1FLEVBQU9qbUUsRUFBRXlYLFlBQ2IsT0FBT3d1RCxHQUFRQSxFQUFLenBFLFlBQWN3RCxDQUNuQyxFQUNJa21FLEVBQWUsQ0FDbEJDLG1CQUFtQixFQUNuQkMsVUFBVSxFQUNWQyxXQUFXLEVBQ1hDLFFBQVEsRUFDUkMsZUFBZSxFQUNmQyxTQUFTLEVBQ1RDLGNBQWMsRUFDZEMsYUFBYSxFQUNiQyx3QkFBd0IsRUFDeEJDLHVCQUF1QixFQUN2QkMsY0FBYyxFQUNkQyxhQUFhLEVBQ2JDLGNBQWMsRUFDZEMsY0FBYyxFQUNkQyxTQUFTLEVBQ1RDLGFBQWEsRUFDYkMsWUFBWSxFQUNaQyxVQUFVLEVBQ1ZDLFVBQVUsRUFDVkMsT0FBTyxFQUNQQyxrQkFBa0IsRUFDbEJDLG9CQUFvQixFQUNwQkMsU0FBUyxHQUVOQyxFQUE0QixXQUUvQixHQUFzQixvQkFBWGhqQyxPQUEwQixPQUFPLEVBQzVDLElBQUssSUFBSXBwQyxLQUFLb3BDLE9BQ2IsSUFDQyxJQUFLd2hDLEVBQWEsSUFBTTVxRSxJQUFNcUksRUFBSTVGLEtBQUsybUMsT0FBUXBwQyxJQUFvQixPQUFkb3BDLE9BQU9wcEMsSUFBb0MsaUJBQWRvcEMsT0FBT3BwQyxHQUN4RixJQUNDMHFFLEVBQTJCdGhDLE9BQU9wcEMsR0FDbkMsQ0FBRSxNQUFPbUksR0FDUixPQUFPLENBQ1IsQ0FFRixDQUFFLE1BQU9BLEdBQ1IsT0FBTyxDQUNSLENBRUQsT0FBTyxDQUNSLENBakIrQixHQThCL0JraUUsRUFBVyxTQUFjMTdDLEdBQ3hCLElBQUk0bkMsRUFBc0IsT0FBWDVuQyxHQUFxQyxpQkFBWEEsRUFDckM2bkMsRUFBb0Msc0JBQXZCaG9DLEVBQU0vckIsS0FBS2tzQixHQUN4QituQyxFQUFjNFQsRUFBTzM3QyxHQUNyQjV2QixFQUFXdzNELEdBQW1DLG9CQUF2Qi9uQyxFQUFNL3JCLEtBQUtrc0IsR0FDbEMwOUMsRUFBVSxHQUVkLElBQUs5VixJQUFhQyxJQUFlRSxFQUNoQyxNQUFNLElBQUk5MkQsVUFBVSxzQ0FHckIsSUFBSTBzRSxFQUFZOUIsR0FBbUJoVSxFQUNuQyxHQUFJejNELEdBQVk0dkIsRUFBTzd1QixPQUFTLElBQU11SSxFQUFJNUYsS0FBS2tzQixFQUFRLEdBQ3RELElBQUssSUFBSXZxQixFQUFJLEVBQUdBLEVBQUl1cUIsRUFBTzd1QixTQUFVc0UsRUFDcENpb0UsRUFBUXRvRSxLQUFLc0ssT0FBT2pLLElBSXRCLEdBQUlzeUQsR0FBZS9uQyxFQUFPN3VCLE9BQVMsRUFDbEMsSUFBSyxJQUFJZ1IsRUFBSSxFQUFHQSxFQUFJNmQsRUFBTzd1QixTQUFVZ1IsRUFDcEN1N0QsRUFBUXRvRSxLQUFLc0ssT0FBT3lDLFNBR3JCLElBQUssSUFBSTlPLEtBQVEyc0IsRUFDVjI5QyxHQUFzQixjQUFUdHFFLElBQXlCcUcsRUFBSTVGLEtBQUtrc0IsRUFBUTNzQixJQUM1RHFxRSxFQUFRdG9FLEtBQUtzSyxPQUFPck0sSUFLdkIsR0FBSXVvRSxFQUdILElBRkEsSUFBSWdDLEVBM0NxQyxTQUFVN25FLEdBRXBELEdBQXNCLG9CQUFYMGtDLFNBQTJCZ2pDLEVBQ3JDLE9BQU8xQixFQUEyQmhtRSxHQUVuQyxJQUNDLE9BQU9nbUUsRUFBMkJobUUsRUFDbkMsQ0FBRSxNQUFPeUQsR0FDUixPQUFPLENBQ1IsQ0FDRCxDQWlDd0Jxa0UsQ0FBcUM3OUMsR0FFbEQzdUIsRUFBSSxFQUFHQSxFQUFJeXFFLEVBQVUzcUUsU0FBVUUsRUFDakN1c0UsR0FBb0MsZ0JBQWpCOUIsRUFBVXpxRSxLQUF5QnFJLEVBQUk1RixLQUFLa3NCLEVBQVE4N0MsRUFBVXpxRSxLQUN0RnFzRSxFQUFRdG9FLEtBQUswbUUsRUFBVXpxRSxJQUkxQixPQUFPcXNFLENBQ1IsQ0FDRCxDQUNBanRFLEVBQU9DLFFBQVVnckUsK0JDdkhqQixJQUFJdGtFLEVBQVE5RSxNQUFNQyxVQUFVNkUsTUFDeEJ1a0UsRUFBUyxFQUFRLE1BRWpCbUMsRUFBV3pwRSxPQUFPNkssS0FDbEJ3OEQsRUFBV29DLEVBQVcsU0FBYy9uRSxHQUFLLE9BQU8rbkUsRUFBUy9uRSxFQUFJLEVBQUksRUFBUSxNQUV6RWdvRSxFQUFlMXBFLE9BQU82SyxLQUUxQnc4RCxFQUFTMXBFLEtBQU8sV0FDZixHQUFJcUMsT0FBTzZLLEtBQU0sQ0FDaEIsSUFBSTgrRCxFQUEwQixXQUU3QixJQUFJci9CLEVBQU90cUMsT0FBTzZLLEtBQUtoTyxXQUN2QixPQUFPeXRDLEdBQVFBLEVBQUt4dEMsU0FBV0QsVUFBVUMsTUFDMUMsQ0FKNkIsQ0FJM0IsRUFBRyxHQUNBNnNFLElBQ0ozcEUsT0FBTzZLLEtBQU8sU0FBYzhnQixHQUMzQixPQUFJMjdDLEVBQU8zN0MsR0FDSCs5QyxFQUFhM21FLEVBQU10RCxLQUFLa3NCLElBRXpCKzlDLEVBQWEvOUMsRUFDckIsRUFFRixNQUNDM3JCLE9BQU82SyxLQUFPdzhELEVBRWYsT0FBT3JuRSxPQUFPNkssTUFBUXc4RCxDQUN2QixFQUVBanJFLEVBQU9DLFFBQVVnckUseUJDN0JqQixJQUFJNzdDLEVBQVF4ckIsT0FBTzlCLFVBQVUyUixTQUU3QnpULEVBQU9DLFFBQVUsU0FBcUIwRCxHQUNyQyxJQUFJZ1AsRUFBTXljLEVBQU0vckIsS0FBS00sR0FDakJ1bkUsRUFBaUIsdUJBQVJ2NEQsRUFTYixPQVJLdTRELElBQ0pBLEVBQWlCLG1CQUFSdjRELEdBQ0UsT0FBVmhQLEdBQ2lCLGlCQUFWQSxHQUNpQixpQkFBakJBLEVBQU1qRCxRQUNiaUQsRUFBTWpELFFBQVUsR0FDYSxzQkFBN0IwdUIsRUFBTS9yQixLQUFLTSxFQUFNNnBFLFNBRVp0QyxDQUNSLCtCQ2JBLElBQUl1QyxFQUFhLEVBQVEsTUFDckJ0K0MsRUFBYSxFQUFRLEtBQVIsR0FDYnp2QixFQUFZLEVBQVEsTUFDcEJndUUsRUFBVzlwRSxPQUNYOGlELEVBQVFobkQsRUFBVSx3QkFDbEJpdUUsRUFBb0JqdUUsRUFBVSx5Q0FDOUJrdUUsRUFBcUJ6K0MsRUFBYXZyQixPQUFPZ3NCLHNCQUF3QixLQUdyRTV2QixFQUFPQyxRQUFVLFNBQWdCeVcsRUFBUW0zRCxHQUN4QyxHQUFjLE1BQVZuM0QsRUFBa0IsTUFBTSxJQUFJbFcsVUFBVSw0QkFDMUMsSUFBSUssRUFBSzZzRSxFQUFTaDNELEdBQ2xCLEdBQXlCLElBQXJCalcsVUFBVUMsT0FDYixPQUFPRyxFQUVSLElBQUssSUFBSWtFLEVBQUksRUFBR0EsRUFBSXRFLFVBQVVDLFNBQVVxRSxFQUFHLENBQzFDLElBQUl3QixFQUFPbW5FLEVBQVNqdEUsVUFBVXNFLElBRzFCMEosRUFBT2cvRCxFQUFXbG5FLEdBQ2xCazRELEVBQWF0dkMsSUFBZXZyQixPQUFPZ3NCLHVCQUF5QmcrQyxHQUNoRSxHQUFJblAsRUFFSCxJQURBLElBQUlyWSxFQUFPcVksRUFBV2w0RCxHQUNibUwsRUFBSSxFQUFHQSxFQUFJMDBDLEVBQUsxbEQsU0FBVWdSLEVBQUcsQ0FDckMsSUFBSWhCLEVBQU0wMUMsRUFBSzEwQyxHQUNYaThELEVBQWtCcG5FLEVBQU1tSyxJQUMzQmcyQyxFQUFNajRDLEVBQU1pQyxFQUVkLENBSUQsSUFBSyxJQUFJMUwsRUFBSSxFQUFHQSxFQUFJeUosRUFBSy9OLFNBQVVzRSxFQUFHLENBQ3JDLElBQUk4b0UsRUFBVXIvRCxFQUFLekosR0FDbkIsR0FBSTJvRSxFQUFrQnBuRSxFQUFNdW5FLEdBQVUsQ0FDckMsSUFBSXQvQixFQUFZam9DLEVBQUt1bkUsR0FDckJqdEUsRUFBR2l0RSxHQUFXdC9CLENBQ2YsQ0FDRCxDQUNELENBRUEsT0FBTzN0QyxDQUNSLCtCQzNDQSxJQUFJNHVCLEVBQW1CLEVBQVEsTUFDM0J2dUIsRUFBVyxFQUFRLEtBRW5CQyxFQUFpQixFQUFRLE1BQ3pCQyxFQUFjLEVBQVEsTUFDdEJHLEVBQU8sRUFBUSxLQUVmRixFQUFXSCxFQUFTSSxNQUFNRixLQUUxQkssRUFBUSxTQUFnQmlWLEVBQVFtM0QsR0FDbkMsT0FBT3hzRSxFQUFTdUMsT0FBUW5ELFVBQ3pCLEVBRUFndkIsRUFBaUJodUIsRUFBTyxDQUN2QkwsWUFBYUEsRUFDYkQsZUFBZ0JBLEVBQ2hCSSxLQUFNQSxJQUdQdkIsRUFBT0MsUUFBVXdCLCtCQ25CakIsSUFBSU4sRUFBaUIsRUFBUSxNQXlDN0JuQixFQUFPQyxRQUFVLFdBQ2hCLE9BQUsyRCxPQUFPaUIsT0F4Q3FCLFdBQ2pDLElBQUtqQixPQUFPaUIsT0FDWCxPQUFPLEVBU1IsSUFIQSxJQUFJOE4sRUFBTSx1QkFDTm83RCxFQUFVcDdELEVBQUlwRCxNQUFNLElBQ3BCeEQsRUFBTSxDQUFDLEVBQ0YvRyxFQUFJLEVBQUdBLEVBQUkrb0UsRUFBUXJ0RSxTQUFVc0UsRUFDckMrRyxFQUFJZ2lFLEVBQVEvb0UsSUFBTStvRSxFQUFRL29FLEdBRTNCLElBQUkwTixFQUFNOU8sT0FBT2lCLE9BQU8sQ0FBQyxFQUFHa0gsR0FDeEJnN0MsRUFBUyxHQUNiLElBQUssSUFBSW5tRCxLQUFLOFIsRUFDYnEwQyxHQUFVbm1ELEVBRVgsT0FBTytSLElBQVFvMEMsQ0FDaEIsQ0F1QktpbkIsSUFyQjRCLFdBQ2hDLElBQUtwcUUsT0FBT2lCLFNBQVdqQixPQUFPcXFFLGtCQUM3QixPQUFPLEVBTVIsSUFBSUMsRUFBVXRxRSxPQUFPcXFFLGtCQUFrQixDQUFFLEVBQUcsSUFDNUMsSUFDQ3JxRSxPQUFPaUIsT0FBT3FwRSxFQUFTLEtBQ3hCLENBQUUsTUFBT25sRSxHQUNSLE1BQXNCLE1BQWZtbEUsRUFBUSxFQUNoQixDQUNBLE9BQU8sQ0FDUixDQVNLQyxHQUZJaHRFLEVBS0R5QyxPQUFPaUIsT0FSTjFELENBU1QsOEJDcERBLElBQUlILEVBQVMsRUFBUSxNQUNqQkksRUFBYyxFQUFRLE1BRTFCcEIsRUFBT0MsUUFBVSxXQUNoQixJQUFJb0IsRUFBV0QsSUFNZixPQUxBSixFQUNDNEMsT0FDQSxDQUFFaUIsT0FBUXhELEdBQ1YsQ0FBRXdELE9BQVEsV0FBYyxPQUFPakIsT0FBT2lCLFNBQVd4RCxDQUFVLElBRXJEQSxDQUNSLCtCQ1hBLElBQUlKLEVBQXlCLEVBQVEsTUFDakN2QixFQUFZLEVBQVEsTUFDcEIwdUUsRUFBZ0IxdUUsRUFBVSx5Q0FDMUJnbkQsRUFBUWhuRCxFQUFVLHdCQUV0Qk0sRUFBT0MsUUFBVSxTQUFpQkcsR0FDakMsSUFBSXNTLEVBQU16UixFQUF1QmIsR0FDN0JpdUUsRUFBUyxHQUNiLElBQUssSUFBSTM5RCxLQUFPZ0MsRUFDWDA3RCxFQUFjMTdELEVBQUtoQyxJQUN0QmcyQyxFQUFNMm5CLEVBQVEsQ0FBQzM5RCxFQUFLZ0MsRUFBSWhDLEtBRzFCLE9BQU8yOUQsQ0FDUiwrQkNkQSxJQUFJcnRFLEVBQVMsRUFBUSxNQUNqQkUsRUFBVyxFQUFRLEtBRW5CQyxFQUFpQixFQUFRLE1BQ3pCQyxFQUFjLEVBQVEsTUFDdEJHLEVBQU8sRUFBUSxNQUVmRixFQUFXSCxFQUFTRSxJQUFld0MsUUFFdkM1QyxFQUFPSyxFQUFVLENBQ2hCRCxZQUFhQSxFQUNiRCxlQUFnQkEsRUFDaEJJLEtBQU1BLElBR1B2QixFQUFPQyxRQUFVb0IsK0JDZmpCLElBQUlGLEVBQWlCLEVBQVEsTUFFN0JuQixFQUFPQyxRQUFVLFdBQ2hCLE1BQWlDLG1CQUFuQjJELE9BQU91M0QsUUFBeUJ2M0QsT0FBT3UzRCxRQUFVaDZELENBQ2hFLCtCQ0pBLElBQUlDLEVBQWMsRUFBUSxNQUN0QkosRUFBUyxFQUFRLE1BRXJCaEIsRUFBT0MsUUFBVSxXQUNoQixJQUFJb0IsRUFBV0QsSUFNZixPQUxBSixFQUFPNEMsT0FBUSxDQUFFdTNELFFBQVM5NUQsR0FBWSxDQUNyQzg1RCxRQUFTLFdBQ1IsT0FBT3YzRCxPQUFPdTNELFVBQVk5NUQsQ0FDM0IsSUFFTUEsQ0FDUiwrQkNYQSxJQUFJSixFQUF5QixFQUFRLE1BQ2pDdkIsRUFBWSxFQUFRLE1BRXBCMHVFLEVBQWdCMXVFLEVBQVUseUNBQzFCZ25ELEVBQVFobkQsRUFBVSx3QkFFdEJNLEVBQU9DLFFBQVUsU0FBZ0JHLEdBQ2hDLElBQUlzUyxFQUFNelIsRUFBdUJiLEdBQzdCa3VFLEVBQU8sR0FDWCxJQUFLLElBQUk1OUQsS0FBT2dDLEVBQ1gwN0QsRUFBYzE3RCxFQUFLaEMsSUFDdEJnMkMsRUFBTTRuQixFQUFNNTdELEVBQUloQyxJQUdsQixPQUFPNDlELENBQ1IsK0JDZkEsSUFBSXR0RSxFQUFTLEVBQVEsTUFDakJFLEVBQVcsRUFBUSxLQUVuQkMsRUFBaUIsRUFBUSxNQUN6QkMsRUFBYyxFQUFRLE1BQ3RCRyxFQUFPLEVBQVEsTUFFZkYsRUFBV0gsRUFBU0UsSUFBZXdDLFFBRXZDNUMsRUFBT0ssRUFBVSxDQUNoQkQsWUFBYUEsRUFDYkQsZUFBZ0JBLEVBQ2hCSSxLQUFNQSxJQUdQdkIsRUFBT0MsUUFBVW9CLCtCQ2ZqQixJQUFJRixFQUFpQixFQUFRLE1BRTdCbkIsRUFBT0MsUUFBVSxXQUNoQixNQUFnQyxtQkFBbEIyRCxPQUFPa04sT0FBd0JsTixPQUFPa04sT0FBUzNQLENBQzlELCtCQ0pBLElBQUlDLEVBQWMsRUFBUSxNQUN0QkosRUFBUyxFQUFRLE1BRXJCaEIsRUFBT0MsUUFBVSxXQUNoQixJQUFJb0IsRUFBV0QsSUFNZixPQUxBSixFQUFPNEMsT0FBUSxDQUFFa04sT0FBUXpQLEdBQVksQ0FDcEN5UCxPQUFRLFdBQ1AsT0FBT2xOLE9BQU9rTixTQUFXelAsQ0FDMUIsSUFFTUEsQ0FDUiwrQkNKQSxJQUFJa3RFLEVBQXVCLEVBQVEsTUFFbkMsU0FBU0MsSUFBaUIsQ0FDMUIsU0FBU0MsSUFBMEIsQ0FDbkNBLEVBQXVCQyxrQkFBb0JGLEVBRTNDeHVFLEVBQU9DLFFBQVUsV0FDZixTQUFTc0IsRUFBS291QixFQUFPbWUsRUFBVXFGLEVBQWV3N0IsRUFBVUMsRUFBY0MsR0FDcEUsR0FBSUEsSUFBV04sRUFBZixDQUlBLElBQUlub0MsRUFBTSxJQUFJNTJCLE1BQ1osbUxBS0YsTUFEQTQyQixFQUFJeGpDLEtBQU8sc0JBQ0x3akMsQ0FQTixDQVFGLENBRUEsU0FBUzBvQyxJQUNQLE9BQU92dEUsQ0FDVCxDQUhBQSxFQUFLd3RFLFdBQWF4dEUsRUFNbEIsSUFBSXl0RSxFQUFpQixDQUNuQnR0RSxNQUFPSCxFQUNQMHRFLE9BQVExdEUsRUFDUjJ0RSxLQUFNM3RFLEVBQ05rQyxLQUFNbEMsRUFDTjhqRCxPQUFROWpELEVBQ1JndUIsT0FBUWh1QixFQUNSd2hDLE9BQVF4aEMsRUFDUjA5RCxPQUFRMTlELEVBRVJxaEIsSUFBS3JoQixFQUNMNHRFLFFBQVNMLEVBQ1RqakUsUUFBU3RLLEVBQ1Q2dEUsWUFBYTd0RSxFQUNiOHRFLFdBQVlQLEVBQ1o3cUUsS0FBTTFDLEVBQ04rdEUsU0FBVVIsRUFDVlMsTUFBT1QsRUFDUFUsVUFBV1YsRUFDWFcsTUFBT1gsRUFDUFksTUFBT1osRUFFUHo3QixlQUFnQm83QixFQUNoQkMsa0JBQW1CRixHQUtyQixPQUZBUSxFQUFlVyxVQUFZWCxFQUVwQkEsQ0FDVCxrQkMvQ0VodkUsRUFBT0MsUUFBVSxFQUFRLEtBQVIsMEJDTm5CRCxFQUFPQyxRQUZvQiw0RUNHZCxJQUFJMnZFLEVBQUcsRUFBUSxNQUFTQyxFQUFHLEVBQVEsTUFBYSxTQUFTM3FFLEVBQUVnSCxHQUFHLElBQUksSUFBSUMsRUFBRSx5REFBeURELEVBQUVxZ0IsRUFBRSxFQUFFQSxFQUFFOXJCLFVBQVVDLE9BQU82ckIsSUFBSXBnQixHQUFHLFdBQVdrSCxtQkFBbUI1UyxVQUFVOHJCLElBQUksTUFBTSx5QkFBeUJyZ0IsRUFBRSxXQUFXQyxFQUFFLGdIQUFnSCxDQUFDLElBQUkyakUsRUFBRyxJQUFJbG5FLElBQUltbkUsRUFBRyxDQUFDLEVBQUUsU0FBU0MsRUFBRzlqRSxFQUFFQyxHQUFHOGpFLEVBQUcvakUsRUFBRUMsR0FBRzhqRSxFQUFHL2pFLEVBQUUsVUFBVUMsRUFBRSxDQUN4YixTQUFTOGpFLEVBQUcvakUsRUFBRUMsR0FBVyxJQUFSNGpFLEVBQUc3akUsR0FBR0MsRUFBTUQsRUFBRSxFQUFFQSxFQUFFQyxFQUFFekwsT0FBT3dMLElBQUk0akUsRUFBRzFtRSxJQUFJK0MsRUFBRUQsR0FBRyxDQUM1RCxJQUFJZ2tFLElBQUssb0JBQXFCbG1DLGFBQVEsSUFBcUJBLE9BQU9DLGVBQVUsSUFBcUJELE9BQU9DLFNBQVNrUCxlQUFlZzNCLEVBQUd2c0UsT0FBTzlCLFVBQVVxRCxlQUFlaXJFLEVBQUcsOFZBQThWQyxFQUNwZ0IsQ0FBQyxFQUFFQyxFQUFHLENBQUMsRUFDaU4sU0FBU3BxRSxFQUFFZ0csRUFBRUMsRUFBRW9nQixFQUFFNVAsRUFBRTVULEVBQUVnZ0UsRUFBRWgvQixHQUFHMXBDLEtBQUtrd0UsZ0JBQWdCLElBQUlwa0UsR0FBRyxJQUFJQSxHQUFHLElBQUlBLEVBQUU5TCxLQUFLbXdFLGNBQWM3ekQsRUFBRXRjLEtBQUtvd0UsbUJBQW1CMW5FLEVBQUUxSSxLQUFLcXdFLGdCQUFnQm5rRCxFQUFFbHNCLEtBQUtzd0UsYUFBYXprRSxFQUFFN0wsS0FBS29ILEtBQUswRSxFQUFFOUwsS0FBS3V3RSxZQUFZN0gsRUFBRTFvRSxLQUFLd3dFLGtCQUFrQjltQyxDQUFDLENBQUMsSUFBSSttQyxFQUFFLENBQUMsRUFDcGIsdUlBQXVJdmhFLE1BQU0sS0FBS3JHLFNBQVEsU0FBU2dELEdBQUc0a0UsRUFBRTVrRSxHQUFHLElBQUloRyxFQUFFZ0csRUFBRSxHQUFFLEVBQUdBLEVBQUUsTUFBSyxHQUFHLEVBQUcsSUFBRyxDQUFDLENBQUMsZ0JBQWdCLGtCQUFrQixDQUFDLFlBQVksU0FBUyxDQUFDLFVBQVUsT0FBTyxDQUFDLFlBQVksZUFBZWhELFNBQVEsU0FBU2dELEdBQUcsSUFBSUMsRUFBRUQsRUFBRSxHQUFHNGtFLEVBQUUza0UsR0FBRyxJQUFJakcsRUFBRWlHLEVBQUUsR0FBRSxFQUFHRCxFQUFFLEdBQUcsTUFBSyxHQUFHLEVBQUcsSUFBRyxDQUFDLGtCQUFrQixZQUFZLGFBQWEsU0FBU2hELFNBQVEsU0FBU2dELEdBQUc0a0UsRUFBRTVrRSxHQUFHLElBQUloRyxFQUFFZ0csRUFBRSxHQUFFLEVBQUdBLEVBQUU2VCxjQUFjLE1BQUssR0FBRyxFQUFHLElBQzFlLENBQUMsY0FBYyw0QkFBNEIsWUFBWSxpQkFBaUI3VyxTQUFRLFNBQVNnRCxHQUFHNGtFLEVBQUU1a0UsR0FBRyxJQUFJaEcsRUFBRWdHLEVBQUUsR0FBRSxFQUFHQSxFQUFFLE1BQUssR0FBRyxFQUFHLElBQUcsOE9BQThPcUQsTUFBTSxLQUFLckcsU0FBUSxTQUFTZ0QsR0FBRzRrRSxFQUFFNWtFLEdBQUcsSUFBSWhHLEVBQUVnRyxFQUFFLEdBQUUsRUFBR0EsRUFBRTZULGNBQWMsTUFBSyxHQUFHLEVBQUcsSUFDeGIsQ0FBQyxVQUFVLFdBQVcsUUFBUSxZQUFZN1csU0FBUSxTQUFTZ0QsR0FBRzRrRSxFQUFFNWtFLEdBQUcsSUFBSWhHLEVBQUVnRyxFQUFFLEdBQUUsRUFBR0EsRUFBRSxNQUFLLEdBQUcsRUFBRyxJQUFHLENBQUMsVUFBVSxZQUFZaEQsU0FBUSxTQUFTZ0QsR0FBRzRrRSxFQUFFNWtFLEdBQUcsSUFBSWhHLEVBQUVnRyxFQUFFLEdBQUUsRUFBR0EsRUFBRSxNQUFLLEdBQUcsRUFBRyxJQUFHLENBQUMsT0FBTyxPQUFPLE9BQU8sUUFBUWhELFNBQVEsU0FBU2dELEdBQUc0a0UsRUFBRTVrRSxHQUFHLElBQUloRyxFQUFFZ0csRUFBRSxHQUFFLEVBQUdBLEVBQUUsTUFBSyxHQUFHLEVBQUcsSUFBRyxDQUFDLFVBQVUsU0FBU2hELFNBQVEsU0FBU2dELEdBQUc0a0UsRUFBRTVrRSxHQUFHLElBQUloRyxFQUFFZ0csRUFBRSxHQUFFLEVBQUdBLEVBQUU2VCxjQUFjLE1BQUssR0FBRyxFQUFHLElBQUcsSUFBSWd4RCxFQUFHLGdCQUFnQixTQUFTQyxFQUFHOWtFLEdBQUcsT0FBT0EsRUFBRSxHQUFHNkQsYUFBYSxDQUl4WixTQUFTa2hFLEVBQUcva0UsRUFBRUMsRUFBRW9nQixFQUFFNVAsR0FBRyxJQUFJNVQsRUFBRStuRSxFQUFFM3JFLGVBQWVnSCxHQUFHMmtFLEVBQUUza0UsR0FBRyxNQUFRLE9BQU9wRCxFQUFFLElBQUlBLEVBQUV0QixLQUFLa1YsS0FBSyxFQUFFeFEsRUFBRXpMLFNBQVMsTUFBTXlMLEVBQUUsSUFBSSxNQUFNQSxFQUFFLElBQUksTUFBTUEsRUFBRSxJQUFJLE1BQU1BLEVBQUUsTUFQOUksU0FBWUQsRUFBRUMsRUFBRW9nQixFQUFFNVAsR0FBRyxHQUFHLE1BQU94USxHQUQ2RixTQUFZRCxFQUFFQyxFQUFFb2dCLEVBQUU1UCxHQUFHLEdBQUcsT0FBTzRQLEdBQUcsSUFBSUEsRUFBRTlrQixLQUFLLE9BQU0sRUFBRyxjQUFjMEUsR0FBRyxJQUFLLFdBQVcsSUFBSyxTQUFTLE9BQU0sRUFBRyxJQUFLLFVBQVUsT0FBR3dRLElBQWMsT0FBTzRQLEdBQVNBLEVBQUVna0QsZ0JBQW1ELFdBQW5DcmtFLEVBQUVBLEVBQUU2VCxjQUFjcFosTUFBTSxFQUFFLEtBQXNCLFVBQVV1RixHQUFFLFFBQVEsT0FBTSxFQUFHLENBQy9UZ2xFLENBQUdobEUsRUFBRUMsRUFBRW9nQixFQUFFNVAsR0FBRyxPQUFNLEVBQUcsR0FBR0EsRUFBRSxPQUFNLEVBQUcsR0FBRyxPQUFPNFAsRUFBRSxPQUFPQSxFQUFFOWtCLE1BQU0sS0FBSyxFQUFFLE9BQU8wRSxFQUFFLEtBQUssRUFBRSxPQUFNLElBQUtBLEVBQUUsS0FBSyxFQUFFLE9BQU8wM0MsTUFBTTEzQyxHQUFHLEtBQUssRUFBRSxPQUFPMDNDLE1BQU0xM0MsSUFBSSxFQUFFQSxFQUFFLE9BQU0sQ0FBRSxDQU90RWdsRSxDQUFHaGxFLEVBQUVvZ0IsRUFBRXhqQixFQUFFNFQsS0FBSzRQLEVBQUUsTUFBTTVQLEdBQUcsT0FBTzVULEVBUnhLLFNBQVltRCxHQUFHLFFBQUdpa0UsRUFBRzlzRSxLQUFLaXRFLEVBQUdwa0UsS0FBZWlrRSxFQUFHOXNFLEtBQUtndEUsRUFBR25rRSxLQUFla2tFLEVBQUd0aUUsS0FBSzVCLEdBQVVva0UsRUFBR3BrRSxJQUFHLEdBQUdta0UsRUFBR25rRSxJQUFHLEdBQVMsR0FBRSxDQVF3RGtsRSxDQUFHamxFLEtBQUssT0FBT29nQixFQUFFcmdCLEVBQUVnQyxnQkFBZ0IvQixHQUFHRCxFQUFFbWxFLGFBQWFsbEUsRUFBRSxHQUFHb2dCLElBQUl4akIsRUFBRTJuRSxnQkFBZ0J4a0UsRUFBRW5ELEVBQUU0bkUsY0FBYyxPQUFPcGtELEVBQUUsSUFBSXhqQixFQUFFdEIsTUFBUSxHQUFHOGtCLEdBQUdwZ0IsRUFBRXBELEVBQUV5bkUsY0FBYzd6RCxFQUFFNVQsRUFBRTBuRSxtQkFBbUIsT0FBT2xrRCxFQUFFcmdCLEVBQUVnQyxnQkFBZ0IvQixJQUFhb2dCLEVBQUUsS0FBWHhqQixFQUFFQSxFQUFFdEIsT0FBYyxJQUFJc0IsSUFBRyxJQUFLd2pCLEVBQUUsR0FBRyxHQUFHQSxFQUFFNVAsRUFBRXpRLEVBQUVvbEUsZUFBZTMwRCxFQUFFeFEsRUFBRW9nQixHQUFHcmdCLEVBQUVtbEUsYUFBYWxsRSxFQUFFb2dCLEtBQUksQ0FIamQsMGpDQUEwakNoZCxNQUFNLEtBQUtyRyxTQUFRLFNBQVNnRCxHQUFHLElBQUlDLEVBQUVELEVBQUVvSCxRQUFReTlELEVBQ3ptQ0MsR0FBSUYsRUFBRTNrRSxHQUFHLElBQUlqRyxFQUFFaUcsRUFBRSxHQUFFLEVBQUdELEVBQUUsTUFBSyxHQUFHLEVBQUcsSUFBRywyRUFBMkVxRCxNQUFNLEtBQUtyRyxTQUFRLFNBQVNnRCxHQUFHLElBQUlDLEVBQUVELEVBQUVvSCxRQUFReTlELEVBQUdDLEdBQUlGLEVBQUUza0UsR0FBRyxJQUFJakcsRUFBRWlHLEVBQUUsR0FBRSxFQUFHRCxFQUFFLGdDQUErQixHQUFHLEVBQUcsSUFBRyxDQUFDLFdBQVcsV0FBVyxhQUFhaEQsU0FBUSxTQUFTZ0QsR0FBRyxJQUFJQyxFQUFFRCxFQUFFb0gsUUFBUXk5RCxFQUFHQyxHQUFJRixFQUFFM2tFLEdBQUcsSUFBSWpHLEVBQUVpRyxFQUFFLEdBQUUsRUFBR0QsRUFBRSx3Q0FBdUMsR0FBRyxFQUFHLElBQUcsQ0FBQyxXQUFXLGVBQWVoRCxTQUFRLFNBQVNnRCxHQUFHNGtFLEVBQUU1a0UsR0FBRyxJQUFJaEcsRUFBRWdHLEVBQUUsR0FBRSxFQUFHQSxFQUFFNlQsY0FBYyxNQUFLLEdBQUcsRUFBRyxJQUNsZCt3RCxFQUFFUyxVQUFVLElBQUlyckUsRUFBRSxZQUFZLEdBQUUsRUFBRyxhQUFhLGdDQUErQixHQUFHLEdBQUksQ0FBQyxNQUFNLE9BQU8sU0FBUyxjQUFjZ0QsU0FBUSxTQUFTZ0QsR0FBRzRrRSxFQUFFNWtFLEdBQUcsSUFBSWhHLEVBQUVnRyxFQUFFLEdBQUUsRUFBR0EsRUFBRTZULGNBQWMsTUFBSyxHQUFHLEVBQUcsSUFFNUwsSUFBSXl4RCxFQUFHNUIsRUFBRzZCLG1EQUFtREMsRUFBR3IyRCxPQUFPczJELElBQUksaUJBQWlCQyxFQUFHdjJELE9BQU9zMkQsSUFBSSxnQkFBZ0JFLEVBQUd4MkQsT0FBT3MyRCxJQUFJLGtCQUFrQkcsRUFBR3oyRCxPQUFPczJELElBQUkscUJBQXFCSSxFQUFHMTJELE9BQU9zMkQsSUFBSSxrQkFBa0JLLEVBQUczMkQsT0FBT3MyRCxJQUFJLGtCQUFrQk0sRUFBRzUyRCxPQUFPczJELElBQUksaUJBQWlCTyxFQUFHNzJELE9BQU9zMkQsSUFBSSxxQkFBcUJRLEVBQUc5MkQsT0FBT3MyRCxJQUFJLGtCQUFrQlMsRUFBRy8yRCxPQUFPczJELElBQUksdUJBQXVCVSxFQUFHaDNELE9BQU9zMkQsSUFBSSxjQUFjVyxFQUFHajNELE9BQU9zMkQsSUFBSSxjQUFjdDJELE9BQU9zMkQsSUFBSSxlQUFldDJELE9BQU9zMkQsSUFBSSwwQkFDamUsSUFBSVksRUFBR2wzRCxPQUFPczJELElBQUksbUJBQW1CdDJELE9BQU9zMkQsSUFBSSx1QkFBdUJ0MkQsT0FBT3MyRCxJQUFJLGVBQWV0MkQsT0FBT3MyRCxJQUFJLHdCQUF3QixJQUFJYSxFQUFHbjNELE9BQU9DLFNBQVMsU0FBU20zRCxFQUFHdm1FLEdBQUcsT0FBRyxPQUFPQSxHQUFHLGlCQUFrQkEsRUFBUyxLQUF3QyxtQkFBbkNBLEVBQUVzbUUsR0FBSXRtRSxFQUFFc21FLElBQUt0bUUsRUFBRSxlQUEwQ0EsRUFBRSxJQUFJLENBQUMsSUFBb0J3bUUsRUFBaEIveEUsRUFBRWlELE9BQU9pQixPQUFVLFNBQVM4dEUsRUFBR3ptRSxHQUFHLFFBQUcsSUFBU3dtRSxFQUFHLElBQUksTUFBTWxqRSxPQUFRLENBQUMsTUFBTStjLEdBQUcsSUFBSXBnQixFQUFFb2dCLEVBQUVpOEIsTUFBTWw1QyxPQUFPcUssTUFBTSxnQkFBZ0IrNEQsRUFBR3ZtRSxHQUFHQSxFQUFFLElBQUksRUFBRSxDQUFDLE1BQU0sS0FBS3VtRSxFQUFHeG1FLENBQUMsQ0FBQyxJQUFJMG1FLEdBQUcsRUFDemIsU0FBU0MsRUFBRzNtRSxFQUFFQyxHQUFHLElBQUlELEdBQUcwbUUsRUFBRyxNQUFNLEdBQUdBLEdBQUcsRUFBRyxJQUFJcm1ELEVBQUUvYyxNQUFNc2pFLGtCQUFrQnRqRSxNQUFNc2pFLHVCQUFrQixFQUFPLElBQUksR0FBRzNtRSxFQUFFLEdBQUdBLEVBQUUsV0FBVyxNQUFNcUQsT0FBUSxFQUFFNUwsT0FBT0MsZUFBZXNJLEVBQUVySyxVQUFVLFFBQVEsQ0FBQ2lZLElBQUksV0FBVyxNQUFNdkssT0FBUSxJQUFJLGlCQUFrQnkwQyxTQUFTQSxRQUFROHVCLFVBQVUsQ0FBQyxJQUFJOXVCLFFBQVE4dUIsVUFBVTVtRSxFQUFFLEdBQUcsQ0FBQyxNQUFNekYsR0FBRyxJQUFJaVcsRUFBRWpXLENBQUMsQ0FBQ3U5QyxRQUFROHVCLFVBQVU3bUUsRUFBRSxHQUFHQyxFQUFFLEtBQUssQ0FBQyxJQUFJQSxFQUFFOUksTUFBTSxDQUFDLE1BQU1xRCxHQUFHaVcsRUFBRWpXLENBQUMsQ0FBQ3dGLEVBQUU3SSxLQUFLOEksRUFBRXJLLFVBQVUsS0FBSyxDQUFDLElBQUksTUFBTTBOLE9BQVEsQ0FBQyxNQUFNOUksR0FBR2lXLEVBQUVqVyxDQUFDLENBQUN3RixHQUFHLENBQUMsQ0FBQyxNQUFNeEYsR0FBRyxHQUFHQSxHQUFHaVcsR0FBRyxpQkFBa0JqVyxFQUFFOGhELE1BQU0sQ0FBQyxJQUFJLElBQUl6L0MsRUFBRXJDLEVBQUU4aEQsTUFBTWo1QyxNQUFNLE1BQ25mdzVELEVBQUVwc0QsRUFBRTZyQyxNQUFNajVDLE1BQU0sTUFBTXc2QixFQUFFaGhDLEVBQUVySSxPQUFPLEVBQUVzeUUsRUFBRWpLLEVBQUVyb0UsT0FBTyxFQUFFLEdBQUdxcEMsR0FBRyxHQUFHaXBDLEdBQUdqcUUsRUFBRWdoQyxLQUFLZy9CLEVBQUVpSyxJQUFJQSxJQUFJLEtBQUssR0FBR2pwQyxHQUFHLEdBQUdpcEMsRUFBRWpwQyxJQUFJaXBDLElBQUksR0FBR2pxRSxFQUFFZ2hDLEtBQUtnL0IsRUFBRWlLLEdBQUcsQ0FBQyxHQUFHLElBQUlqcEMsR0FBRyxJQUFJaXBDLEVBQUcsTUFBTWpwQyxJQUFRLElBQUppcEMsR0FBU2pxRSxFQUFFZ2hDLEtBQUtnL0IsRUFBRWlLLEdBQUcsQ0FBQyxJQUFJcHlFLEVBQUUsS0FBS21JLEVBQUVnaEMsR0FBR3oyQixRQUFRLFdBQVcsUUFBNkYsT0FBckZwSCxFQUFFMjJCLGFBQWFqaUMsRUFBRTRLLFNBQVMsaUJBQWlCNUssRUFBRUEsRUFBRTBTLFFBQVEsY0FBY3BILEVBQUUyMkIsY0FBcUJqaUMsQ0FBQyxRQUFPLEdBQUdtcEMsR0FBRyxHQUFHaXBDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxRQUFRSixHQUFHLEVBQUdwakUsTUFBTXNqRSxrQkFBa0J2bUQsQ0FBQyxDQUFDLE9BQU9yZ0IsRUFBRUEsRUFBRUEsRUFBRTIyQixhQUFhMzJCLEVBQUV0SixLQUFLLElBQUkrdkUsRUFBR3ptRSxHQUFHLEVBQUUsQ0FDOVosU0FBUyttRSxFQUFHL21FLEdBQUcsT0FBT0EsRUFBRStrQixLQUFLLEtBQUssRUFBRSxPQUFPMGhELEVBQUd6bUUsRUFBRXpFLE1BQU0sS0FBSyxHQUFHLE9BQU9rckUsRUFBRyxRQUFRLEtBQUssR0FBRyxPQUFPQSxFQUFHLFlBQVksS0FBSyxHQUFHLE9BQU9BLEVBQUcsZ0JBQWdCLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxHQUFHLE9BQVNFLEVBQUczbUUsRUFBRXpFLE1BQUssR0FBTSxLQUFLLEdBQUcsT0FBU29yRSxFQUFHM21FLEVBQUV6RSxLQUFLeVYsUUFBTyxHQUFNLEtBQUssRUFBRSxPQUFTMjFELEVBQUczbUUsRUFBRXpFLE1BQUssR0FBTSxRQUFRLE1BQU0sR0FBRyxDQUN4UixTQUFTeXJFLEVBQUdobkUsR0FBRyxHQUFHLE1BQU1BLEVBQUUsT0FBTyxLQUFLLEdBQUcsbUJBQW9CQSxFQUFFLE9BQU9BLEVBQUUyMkIsYUFBYTMyQixFQUFFdEosTUFBTSxLQUFLLEdBQUcsaUJBQWtCc0osRUFBRSxPQUFPQSxFQUFFLE9BQU9BLEdBQUcsS0FBSzJsRSxFQUFHLE1BQU0sV0FBVyxLQUFLRCxFQUFHLE1BQU0sU0FBUyxLQUFLRyxFQUFHLE1BQU0sV0FBVyxLQUFLRCxFQUFHLE1BQU0sYUFBYSxLQUFLSyxFQUFHLE1BQU0sV0FBVyxLQUFLQyxFQUFHLE1BQU0sZUFBZSxHQUFHLGlCQUFrQmxtRSxFQUFFLE9BQU9BLEVBQUVpbkUsVUFBVSxLQUFLbEIsRUFBRyxPQUFPL2xFLEVBQUUyMkIsYUFBYSxXQUFXLFlBQVksS0FBS212QyxFQUFHLE9BQU85bEUsRUFBRTZkLFNBQVM4WSxhQUFhLFdBQVcsWUFBWSxLQUFLcXZDLEVBQUcsSUFBSS9sRSxFQUFFRCxFQUFFZ1IsT0FDN1osT0FEb2FoUixFQUFFQSxFQUFFMjJCLGVBQ25kMzJCLEVBQUUsTUFEaWVBLEVBQUVDLEVBQUUwMkIsYUFDbGYxMkIsRUFBRXZKLE1BQU0sSUFBWSxjQUFjc0osRUFBRSxJQUFJLGNBQXFCQSxFQUFFLEtBQUttbUUsRUFBRyxPQUE2QixRQUF0QmxtRSxFQUFFRCxFQUFFMjJCLGFBQWEsTUFBYzEyQixFQUFFK21FLEVBQUdobkUsRUFBRXpFLE9BQU8sT0FBTyxLQUFLNnFFLEVBQUdubUUsRUFBRUQsRUFBRWtuRSxTQUFTbG5FLEVBQUVBLEVBQUVtbkUsTUFBTSxJQUFJLE9BQU9ILEVBQUdobkUsRUFBRUMsR0FBRyxDQUFDLE1BQU1vZ0IsR0FBRyxFQUFFLE9BQU8sSUFBSSxDQUMzTSxTQUFTK21ELEVBQUdwbkUsR0FBRyxJQUFJQyxFQUFFRCxFQUFFekUsS0FBSyxPQUFPeUUsRUFBRStrQixLQUFLLEtBQUssR0FBRyxNQUFNLFFBQVEsS0FBSyxFQUFFLE9BQU85a0IsRUFBRTAyQixhQUFhLFdBQVcsWUFBWSxLQUFLLEdBQUcsT0FBTzEyQixFQUFFNGQsU0FBUzhZLGFBQWEsV0FBVyxZQUFZLEtBQUssR0FBRyxNQUFNLHFCQUFxQixLQUFLLEdBQUcsT0FBa0IzMkIsR0FBWEEsRUFBRUMsRUFBRStRLFFBQVcybEIsYUFBYTMyQixFQUFFdEosTUFBTSxHQUFHdUosRUFBRTAyQixjQUFjLEtBQUszMkIsRUFBRSxjQUFjQSxFQUFFLElBQUksY0FBYyxLQUFLLEVBQUUsTUFBTSxXQUFXLEtBQUssRUFBRSxPQUFPQyxFQUFFLEtBQUssRUFBRSxNQUFNLFNBQVMsS0FBSyxFQUFFLE1BQU0sT0FBTyxLQUFLLEVBQUUsTUFBTSxPQUFPLEtBQUssR0FBRyxPQUFPK21FLEVBQUcvbUUsR0FBRyxLQUFLLEVBQUUsT0FBT0EsSUFBSTJsRSxFQUFHLGFBQWEsT0FBTyxLQUFLLEdBQUcsTUFBTSxZQUN0ZixLQUFLLEdBQUcsTUFBTSxXQUFXLEtBQUssR0FBRyxNQUFNLFFBQVEsS0FBSyxHQUFHLE1BQU0sV0FBVyxLQUFLLEdBQUcsTUFBTSxlQUFlLEtBQUssR0FBRyxNQUFNLGdCQUFnQixLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssR0FBRyxLQUFLLEVBQUUsS0FBSyxHQUFHLEtBQUssR0FBRyxHQUFHLG1CQUFvQjNsRSxFQUFFLE9BQU9BLEVBQUUwMkIsYUFBYTEyQixFQUFFdkosTUFBTSxLQUFLLEdBQUcsaUJBQWtCdUosRUFBRSxPQUFPQSxFQUFFLE9BQU8sSUFBSSxDQUFDLFNBQVNvbkUsRUFBR3JuRSxHQUFHLGNBQWNBLEdBQUcsSUFBSyxVQUFVLElBQUssU0FBUyxJQUFLLFNBQVMsSUFBSyxZQUFxQixJQUFLLFNBQVMsT0FBT0EsRUFBRSxRQUFRLE1BQU0sR0FBRyxDQUNyYSxTQUFTc25FLEVBQUd0bkUsR0FBRyxJQUFJQyxFQUFFRCxFQUFFekUsS0FBSyxPQUFPeUUsRUFBRUEsRUFBRWs5RCxXQUFXLFVBQVVsOUQsRUFBRTZULGdCQUFnQixhQUFhNVQsR0FBRyxVQUFVQSxFQUFFLENBRXRGLFNBQVNzbkUsRUFBR3ZuRSxHQUFHQSxFQUFFd25FLGdCQUFnQnhuRSxFQUFFd25FLGNBRHZELFNBQVl4bkUsR0FBRyxJQUFJQyxFQUFFcW5FLEVBQUd0bkUsR0FBRyxVQUFVLFFBQVFxZ0IsRUFBRTNvQixPQUFPK0IseUJBQXlCdUcsRUFBRTZRLFlBQVlqYixVQUFVcUssR0FBR3dRLEVBQUUsR0FBR3pRLEVBQUVDLEdBQUcsSUFBSUQsRUFBRS9HLGVBQWVnSCxTQUFJLElBQXFCb2dCLEdBQUcsbUJBQW9CQSxFQUFFdm1CLEtBQUssbUJBQW9CdW1CLEVBQUV4UyxJQUFJLENBQUMsSUFBSWhSLEVBQUV3akIsRUFBRXZtQixJQUFJK2lFLEVBQUV4OEMsRUFBRXhTLElBQWlMLE9BQTdLblcsT0FBT0MsZUFBZXFJLEVBQUVDLEVBQUUsQ0FBQ3JHLGNBQWEsRUFBR0UsSUFBSSxXQUFXLE9BQU8rQyxFQUFFMUYsS0FBS2hELEtBQUssRUFBRTBaLElBQUksU0FBUzdOLEdBQUd5USxFQUFFLEdBQUd6USxFQUFFNjhELEVBQUUxbEUsS0FBS2hELEtBQUs2TCxFQUFFLElBQUl0SSxPQUFPQyxlQUFlcUksRUFBRUMsRUFBRSxDQUFDcEcsV0FBV3dtQixFQUFFeG1CLGFBQW1CLENBQUM0NEQsU0FBUyxXQUFXLE9BQU9oaUQsQ0FBQyxFQUFFZzNELFNBQVMsU0FBU3puRSxHQUFHeVEsRUFBRSxHQUFHelEsQ0FBQyxFQUFFMG5FLGFBQWEsV0FBVzFuRSxFQUFFd25FLGNBQ3hmLFlBQVl4bkUsRUFBRUMsRUFBRSxFQUFFLENBQUMsQ0FBa0QwbkUsQ0FBRzNuRSxHQUFHLENBQUMsU0FBUzRuRSxFQUFHNW5FLEdBQUcsSUFBSUEsRUFBRSxPQUFNLEVBQUcsSUFBSUMsRUFBRUQsRUFBRXduRSxjQUFjLElBQUl2bkUsRUFBRSxPQUFNLEVBQUcsSUFBSW9nQixFQUFFcGdCLEVBQUV3eUQsV0FBZWhpRCxFQUFFLEdBQXFELE9BQWxEelEsSUFBSXlRLEVBQUU2MkQsRUFBR3RuRSxHQUFHQSxFQUFFa2IsUUFBUSxPQUFPLFFBQVFsYixFQUFFdkksUUFBT3VJLEVBQUV5USxLQUFhNFAsSUFBR3BnQixFQUFFd25FLFNBQVN6bkUsSUFBRyxFQUFNLENBQUMsU0FBUzZuRSxFQUFHN25FLEdBQXdELFFBQUcsS0FBeERBLEVBQUVBLElBQUksb0JBQXFCKzlCLFNBQVNBLGNBQVMsSUFBa0MsT0FBTyxLQUFLLElBQUksT0FBTy85QixFQUFFNHhDLGVBQWU1eEMsRUFBRSt4QyxJQUFJLENBQUMsTUFBTTl4QyxHQUFHLE9BQU9ELEVBQUUreEMsSUFBSSxDQUFDLENBQ3BhLFNBQVMrMUIsRUFBRzluRSxFQUFFQyxHQUFHLElBQUlvZ0IsRUFBRXBnQixFQUFFaWIsUUFBUSxPQUFPem1CLEVBQUUsQ0FBQyxFQUFFd0wsRUFBRSxDQUFDOG5FLG9CQUFlLEVBQU9DLGtCQUFhLEVBQU92d0UsV0FBTSxFQUFPeWpCLFFBQVEsTUFBTW1GLEVBQUVBLEVBQUVyZ0IsRUFBRWlvRSxjQUFjQyxnQkFBZ0IsQ0FBQyxTQUFTQyxFQUFHbm9FLEVBQUVDLEdBQUcsSUFBSW9nQixFQUFFLE1BQU1wZ0IsRUFBRStuRSxhQUFhLEdBQUcvbkUsRUFBRStuRSxhQUFhdjNELEVBQUUsTUFBTXhRLEVBQUVpYixRQUFRamIsRUFBRWliLFFBQVFqYixFQUFFOG5FLGVBQWUxbkQsRUFBRWduRCxFQUFHLE1BQU1wbkUsRUFBRXhJLE1BQU13SSxFQUFFeEksTUFBTTRvQixHQUFHcmdCLEVBQUVpb0UsY0FBYyxDQUFDQyxlQUFlejNELEVBQUVxeUIsYUFBYXppQixFQUFFK25ELFdBQVcsYUFBYW5vRSxFQUFFMUUsTUFBTSxVQUFVMEUsRUFBRTFFLEtBQUssTUFBTTBFLEVBQUVpYixRQUFRLE1BQU1qYixFQUFFeEksTUFBTSxDQUFDLFNBQVM0d0UsRUFBR3JvRSxFQUFFQyxHQUFlLE9BQVpBLEVBQUVBLEVBQUVpYixVQUFpQjZwRCxFQUFHL2tFLEVBQUUsVUFBVUMsR0FBRSxFQUFHLENBQzlkLFNBQVNxb0UsRUFBR3RvRSxFQUFFQyxHQUFHb29FLEVBQUdyb0UsRUFBRUMsR0FBRyxJQUFJb2dCLEVBQUVnbkQsRUFBR3BuRSxFQUFFeEksT0FBT2daLEVBQUV4USxFQUFFMUUsS0FBSyxHQUFHLE1BQU04a0IsRUFBSyxXQUFXNVAsR0FBTSxJQUFJNFAsR0FBRyxLQUFLcmdCLEVBQUV2SSxPQUFPdUksRUFBRXZJLE9BQU80b0IsS0FBRXJnQixFQUFFdkksTUFBTSxHQUFHNG9CLEdBQU9yZ0IsRUFBRXZJLFFBQVEsR0FBRzRvQixJQUFJcmdCLEVBQUV2SSxNQUFNLEdBQUc0b0IsUUFBUSxHQUFHLFdBQVc1UCxHQUFHLFVBQVVBLEVBQThCLFlBQTNCelEsRUFBRWdDLGdCQUFnQixTQUFnQi9CLEVBQUVoSCxlQUFlLFNBQVNzdkUsR0FBR3ZvRSxFQUFFQyxFQUFFMUUsS0FBSzhrQixHQUFHcGdCLEVBQUVoSCxlQUFlLGlCQUFpQnN2RSxHQUFHdm9FLEVBQUVDLEVBQUUxRSxLQUFLOHJFLEVBQUdwbkUsRUFBRStuRSxlQUFlLE1BQU0vbkUsRUFBRWliLFNBQVMsTUFBTWpiLEVBQUU4bkUsaUJBQWlCL25FLEVBQUUrbkUsaUJBQWlCOW5FLEVBQUU4bkUsZUFBZSxDQUNsYSxTQUFTUyxFQUFHeG9FLEVBQUVDLEVBQUVvZ0IsR0FBRyxHQUFHcGdCLEVBQUVoSCxlQUFlLFVBQVVnSCxFQUFFaEgsZUFBZSxnQkFBZ0IsQ0FBQyxJQUFJd1gsRUFBRXhRLEVBQUUxRSxLQUFLLEtBQUssV0FBV2tWLEdBQUcsVUFBVUEsUUFBRyxJQUFTeFEsRUFBRXhJLE9BQU8sT0FBT3dJLEVBQUV4SSxPQUFPLE9BQU93SSxFQUFFLEdBQUdELEVBQUVpb0UsY0FBY25sQyxhQUFhemlCLEdBQUdwZ0IsSUFBSUQsRUFBRXZJLFFBQVF1SSxFQUFFdkksTUFBTXdJLEdBQUdELEVBQUVnb0UsYUFBYS9uRSxDQUFDLENBQVUsTUFBVG9nQixFQUFFcmdCLEVBQUV0SixRQUFjc0osRUFBRXRKLEtBQUssSUFBSXNKLEVBQUUrbkUsaUJBQWlCL25FLEVBQUVpb0UsY0FBY0MsZUFBZSxLQUFLN25ELElBQUlyZ0IsRUFBRXRKLEtBQUsycEIsRUFBRSxDQUN6VixTQUFTa29ELEdBQUd2b0UsRUFBRUMsRUFBRW9nQixHQUFNLFdBQVdwZ0IsR0FBRzRuRSxFQUFHN25FLEVBQUV5b0UsaUJBQWlCem9FLElBQUUsTUFBTXFnQixFQUFFcmdCLEVBQUVnb0UsYUFBYSxHQUFHaG9FLEVBQUVpb0UsY0FBY25sQyxhQUFhOWlDLEVBQUVnb0UsZUFBZSxHQUFHM25ELElBQUlyZ0IsRUFBRWdvRSxhQUFhLEdBQUczbkQsR0FBRSxDQUFDLElBQUlxb0QsR0FBRy95RSxNQUFNd0ksUUFDN0ssU0FBU3dxRSxHQUFHM29FLEVBQUVDLEVBQUVvZ0IsRUFBRTVQLEdBQWUsR0FBWnpRLEVBQUVBLEVBQUVqRSxRQUFXa0UsRUFBRSxDQUFDQSxFQUFFLENBQUMsRUFBRSxJQUFJLElBQUlwRCxFQUFFLEVBQUVBLEVBQUV3akIsRUFBRTdyQixPQUFPcUksSUFBSW9ELEVBQUUsSUFBSW9nQixFQUFFeGpCLEtBQUksRUFBRyxJQUFJd2pCLEVBQUUsRUFBRUEsRUFBRXJnQixFQUFFeEwsT0FBTzZyQixJQUFJeGpCLEVBQUVvRCxFQUFFaEgsZUFBZSxJQUFJK0csRUFBRXFnQixHQUFHNW9CLE9BQU91SSxFQUFFcWdCLEdBQUdoRixXQUFXeGUsSUFBSW1ELEVBQUVxZ0IsR0FBR2hGLFNBQVN4ZSxHQUFHQSxHQUFHNFQsSUFBSXpRLEVBQUVxZ0IsR0FBR3VvRCxpQkFBZ0IsRUFBRyxLQUFLLENBQW1CLElBQWxCdm9ELEVBQUUsR0FBR2duRCxFQUFHaG5ELEdBQUdwZ0IsRUFBRSxLQUFTcEQsRUFBRSxFQUFFQSxFQUFFbUQsRUFBRXhMLE9BQU9xSSxJQUFJLENBQUMsR0FBR21ELEVBQUVuRCxHQUFHcEYsUUFBUTRvQixFQUFpRCxPQUE5Q3JnQixFQUFFbkQsR0FBR3dlLFVBQVMsT0FBRzVLLElBQUl6USxFQUFFbkQsR0FBRytyRSxpQkFBZ0IsSUFBVyxPQUFPM29FLEdBQUdELEVBQUVuRCxHQUFHbWUsV0FBVy9hLEVBQUVELEVBQUVuRCxHQUFHLENBQUMsT0FBT29ELElBQUlBLEVBQUVvYixVQUFTLEVBQUcsQ0FBQyxDQUN4WSxTQUFTd3RELEdBQUc3b0UsRUFBRUMsR0FBRyxHQUFHLE1BQU1BLEVBQUU2b0Usd0JBQXdCLE1BQU14bEUsTUFBTXRLLEVBQUUsS0FBSyxPQUFPdkUsRUFBRSxDQUFDLEVBQUV3TCxFQUFFLENBQUN4SSxXQUFNLEVBQU91d0Usa0JBQWEsRUFBT2xtRSxTQUFTLEdBQUc5QixFQUFFaW9FLGNBQWNubEMsY0FBYyxDQUFDLFNBQVNpbUMsR0FBRy9vRSxFQUFFQyxHQUFHLElBQUlvZ0IsRUFBRXBnQixFQUFFeEksTUFBTSxHQUFHLE1BQU00b0IsRUFBRSxDQUErQixHQUE5QkEsRUFBRXBnQixFQUFFNkIsU0FBUzdCLEVBQUVBLEVBQUUrbkUsYUFBZ0IsTUFBTTNuRCxFQUFFLENBQUMsR0FBRyxNQUFNcGdCLEVBQUUsTUFBTXFELE1BQU10SyxFQUFFLEtBQUssR0FBRzB2RSxHQUFHcm9ELEdBQUcsQ0FBQyxHQUFHLEVBQUVBLEVBQUU3ckIsT0FBTyxNQUFNOE8sTUFBTXRLLEVBQUUsS0FBS3FuQixFQUFFQSxFQUFFLEVBQUUsQ0FBQ3BnQixFQUFFb2dCLENBQUMsQ0FBQyxNQUFNcGdCLElBQUlBLEVBQUUsSUFBSW9nQixFQUFFcGdCLENBQUMsQ0FBQ0QsRUFBRWlvRSxjQUFjLENBQUNubEMsYUFBYXVrQyxFQUFHaG5ELEdBQUcsQ0FDblksU0FBUzJvRCxHQUFHaHBFLEVBQUVDLEdBQUcsSUFBSW9nQixFQUFFZ25ELEVBQUdwbkUsRUFBRXhJLE9BQU9nWixFQUFFNDJELEVBQUdwbkUsRUFBRStuRSxjQUFjLE1BQU0zbkQsS0FBSUEsRUFBRSxHQUFHQSxLQUFNcmdCLEVBQUV2SSxRQUFRdUksRUFBRXZJLE1BQU00b0IsR0FBRyxNQUFNcGdCLEVBQUUrbkUsY0FBY2hvRSxFQUFFZ29FLGVBQWUzbkQsSUFBSXJnQixFQUFFZ29FLGFBQWEzbkQsSUFBSSxNQUFNNVAsSUFBSXpRLEVBQUVnb0UsYUFBYSxHQUFHdjNELEVBQUUsQ0FBQyxTQUFTdzRELEdBQUdqcEUsR0FBRyxJQUFJQyxFQUFFRCxFQUFFb0UsWUFBWW5FLElBQUlELEVBQUVpb0UsY0FBY25sQyxjQUFjLEtBQUs3aUMsR0FBRyxPQUFPQSxJQUFJRCxFQUFFdkksTUFBTXdJLEVBQUUsQ0FBQyxTQUFTaXBFLEdBQUdscEUsR0FBRyxPQUFPQSxHQUFHLElBQUssTUFBTSxNQUFNLDZCQUE2QixJQUFLLE9BQU8sTUFBTSxxQ0FBcUMsUUFBUSxNQUFNLCtCQUErQixDQUM3YyxTQUFTbXBFLEdBQUducEUsRUFBRUMsR0FBRyxPQUFPLE1BQU1ELEdBQUcsaUNBQWlDQSxFQUFFa3BFLEdBQUdqcEUsR0FBRywrQkFBK0JELEdBQUcsa0JBQWtCQyxFQUFFLCtCQUErQkQsQ0FBQyxDQUNoSyxJQUFJb3BFLEdBQWVwcEUsR0FBWnFwRSxJQUFZcnBFLEdBQXNKLFNBQVNBLEVBQUVDLEdBQUcsR0FBRywrQkFBK0JELEVBQUVzcEUsY0FBYyxjQUFjdHBFLEVBQUVBLEVBQUV1cEUsVUFBVXRwRSxNQUFNLENBQTJGLEtBQTFGbXBFLEdBQUdBLElBQUlyckMsU0FBU2tQLGNBQWMsUUFBVXM4QixVQUFVLFFBQVF0cEUsRUFBRXcyQixVQUFVbHZCLFdBQVcsU0FBYXRILEVBQUVtcEUsR0FBRy9yRCxXQUFXcmQsRUFBRXFkLFlBQVlyZCxFQUFFd3BFLFlBQVl4cEUsRUFBRXFkLFlBQVksS0FBS3BkLEVBQUVvZCxZQUFZcmQsRUFBRW9zQixZQUFZbnNCLEVBQUVvZCxXQUFXLENBQUMsRUFBdmIsb0JBQXFCb3NELE9BQU9BLE1BQU1DLHdCQUF3QixTQUFTenBFLEVBQUVvZ0IsRUFBRTVQLEVBQUU1VCxHQUFHNHNFLE1BQU1DLHlCQUF3QixXQUFXLE9BQU8xcEUsR0FBRUMsRUFBRW9nQixFQUFNLEdBQUUsRUFBRXJnQixJQUN0SyxTQUFTMnBFLEdBQUczcEUsRUFBRUMsR0FBRyxHQUFHQSxFQUFFLENBQUMsSUFBSW9nQixFQUFFcmdCLEVBQUVxZCxXQUFXLEdBQUdnRCxHQUFHQSxJQUFJcmdCLEVBQUU0cEUsV0FBVyxJQUFJdnBELEVBQUUyVyxTQUF3QixZQUFkM1csRUFBRXdwRCxVQUFVNXBFLEVBQVMsQ0FBQ0QsRUFBRW9FLFlBQVluRSxDQUFDLENBQ3RILElBQUk2cEUsR0FBRyxDQUFDQyx5QkFBd0IsRUFBR0MsYUFBWSxFQUFHQyxtQkFBa0IsRUFBR0Msa0JBQWlCLEVBQUdDLGtCQUFpQixFQUFHQyxTQUFRLEVBQUdDLGNBQWEsRUFBR0MsaUJBQWdCLEVBQUdDLGFBQVksRUFBR0MsU0FBUSxFQUFHQyxNQUFLLEVBQUdDLFVBQVMsRUFBR0MsY0FBYSxFQUFHQyxZQUFXLEVBQUdDLGNBQWEsRUFBR0MsV0FBVSxFQUFHQyxVQUFTLEVBQUdDLFNBQVEsRUFBR0MsWUFBVyxFQUFHQyxhQUFZLEVBQUdDLGNBQWEsRUFBR0MsWUFBVyxFQUFHQyxlQUFjLEVBQUdDLGdCQUFlLEVBQUdDLGlCQUFnQixFQUFHQyxZQUFXLEVBQUdDLFdBQVUsRUFBR0MsWUFBVyxFQUFHQyxTQUFRLEVBQUdDLE9BQU0sRUFBR0MsU0FBUSxFQUFHQyxTQUFRLEVBQUdDLFFBQU8sRUFBR0MsUUFBTyxFQUNsZkMsTUFBSyxFQUFHQyxhQUFZLEVBQUdDLGNBQWEsRUFBR0MsYUFBWSxFQUFHQyxpQkFBZ0IsRUFBR0Msa0JBQWlCLEVBQUdDLGtCQUFpQixFQUFHQyxlQUFjLEVBQUdDLGFBQVksR0FBSUMsR0FBRyxDQUFDLFNBQVMsS0FBSyxNQUFNLEtBQTZILFNBQVNDLEdBQUczc0UsRUFBRUMsRUFBRW9nQixHQUFHLE9BQU8sTUFBTXBnQixHQUFHLGtCQUFtQkEsR0FBRyxLQUFLQSxFQUFFLEdBQUdvZ0IsR0FBRyxpQkFBa0JwZ0IsR0FBRyxJQUFJQSxHQUFHNnBFLEdBQUc3d0UsZUFBZStHLElBQUk4cEUsR0FBRzlwRSxJQUFJLEdBQUdDLEdBQUdtRCxPQUFPbkQsRUFBRSxJQUFJLENBQ3piLFNBQVMyc0UsR0FBRzVzRSxFQUFFQyxHQUFhLElBQUksSUFBSW9nQixLQUFsQnJnQixFQUFFQSxFQUFFNnNFLE1BQW1CNXNFLEVBQUUsR0FBR0EsRUFBRWhILGVBQWVvbkIsR0FBRyxDQUFDLElBQUk1UCxFQUFFLElBQUk0UCxFQUFFbGIsUUFBUSxNQUFNdEksRUFBRTh2RSxHQUFHdHNELEVBQUVwZ0IsRUFBRW9nQixHQUFHNVAsR0FBRyxVQUFVNFAsSUFBSUEsRUFBRSxZQUFZNVAsRUFBRXpRLEVBQUU4c0UsWUFBWXpzRCxFQUFFeGpCLEdBQUdtRCxFQUFFcWdCLEdBQUd4akIsQ0FBQyxDQUFDLENBRFluRixPQUFPNkssS0FBS3VuRSxJQUFJOXNFLFNBQVEsU0FBU2dELEdBQUcwc0UsR0FBRzF2RSxTQUFRLFNBQVNpRCxHQUFHQSxFQUFFQSxFQUFFRCxFQUFFbVcsT0FBTyxHQUFHdFMsY0FBYzdELEVBQUU4eUIsVUFBVSxHQUFHZzNDLEdBQUc3cEUsR0FBRzZwRSxHQUFHOXBFLEVBQUUsR0FBRSxJQUNoSSxJQUFJK3NFLEdBQUd0NEUsRUFBRSxDQUFDdTRFLFVBQVMsR0FBSSxDQUFDQyxNQUFLLEVBQUd0OUMsTUFBSyxFQUFHdTlDLElBQUcsRUFBR3hXLEtBQUksRUFBR3lXLE9BQU0sRUFBR0MsSUFBRyxFQUFHQyxLQUFJLEVBQUd0eEQsT0FBTSxFQUFHdXhELFFBQU8sRUFBR3Z5RCxNQUFLLEVBQUd3eUQsTUFBSyxFQUFHQyxPQUFNLEVBQUc3akIsUUFBTyxFQUFHOGpCLE9BQU0sRUFBR0MsS0FBSSxJQUNsVCxTQUFTQyxHQUFHM3RFLEVBQUVDLEdBQUcsR0FBR0EsRUFBRSxDQUFDLEdBQUc4c0UsR0FBRy9zRSxLQUFLLE1BQU1DLEVBQUU2QixVQUFVLE1BQU03QixFQUFFNm9FLHlCQUF5QixNQUFNeGxFLE1BQU10SyxFQUFFLElBQUlnSCxJQUFJLEdBQUcsTUFBTUMsRUFBRTZvRSx3QkFBd0IsQ0FBQyxHQUFHLE1BQU03b0UsRUFBRTZCLFNBQVMsTUFBTXdCLE1BQU10SyxFQUFFLEtBQUssR0FBRyxpQkFBa0JpSCxFQUFFNm9FLDJCQUEyQixXQUFXN29FLEVBQUU2b0UseUJBQXlCLE1BQU14bEUsTUFBTXRLLEVBQUUsSUFBSyxDQUFDLEdBQUcsTUFBTWlILEVBQUU0c0UsT0FBTyxpQkFBa0I1c0UsRUFBRTRzRSxNQUFNLE1BQU12cEUsTUFBTXRLLEVBQUUsSUFBSyxDQUFDLENBQ2xXLFNBQVM0MEUsR0FBRzV0RSxFQUFFQyxHQUFHLElBQUksSUFBSUQsRUFBRW1GLFFBQVEsS0FBSyxNQUFNLGlCQUFrQmxGLEVBQUVyRixHQUFHLE9BQU9vRixHQUFHLElBQUssaUJBQWlCLElBQUssZ0JBQWdCLElBQUssWUFBWSxJQUFLLGdCQUFnQixJQUFLLGdCQUFnQixJQUFLLG1CQUFtQixJQUFLLGlCQUFpQixJQUFLLGdCQUFnQixPQUFNLEVBQUcsUUFBUSxPQUFNLEVBQUcsQ0FBQyxJQUFJNnRFLEdBQUcsS0FBSyxTQUFTQyxHQUFHOXRFLEdBQTZGLE9BQTFGQSxFQUFFQSxFQUFFd0ssUUFBUXhLLEVBQUUrdEUsWUFBWWp3QyxRQUFTa3dDLDBCQUEwQmh1RSxFQUFFQSxFQUFFZ3VFLHlCQUFnQyxJQUFJaHVFLEVBQUVnM0IsU0FBU2gzQixFQUFFaXVFLFdBQVdqdUUsQ0FBQyxDQUFDLElBQUlrdUUsR0FBRyxLQUFLQyxHQUFHLEtBQUtDLEdBQUcsS0FDcGMsU0FBU0MsR0FBR3J1RSxHQUFHLEdBQUdBLEVBQUVzdUUsR0FBR3R1RSxHQUFHLENBQUMsR0FBRyxtQkFBb0JrdUUsR0FBRyxNQUFNNXFFLE1BQU10SyxFQUFFLE1BQU0sSUFBSWlILEVBQUVELEVBQUV1dUUsVUFBVXR1RSxJQUFJQSxFQUFFdXVFLEdBQUd2dUUsR0FBR2l1RSxHQUFHbHVFLEVBQUV1dUUsVUFBVXZ1RSxFQUFFekUsS0FBSzBFLEdBQUcsQ0FBQyxDQUFDLFNBQVN3dUUsR0FBR3p1RSxHQUFHbXVFLEdBQUdDLEdBQUdBLEdBQUczMUUsS0FBS3VILEdBQUdvdUUsR0FBRyxDQUFDcHVFLEdBQUdtdUUsR0FBR251RSxDQUFDLENBQUMsU0FBUzB1RSxLQUFLLEdBQUdQLEdBQUcsQ0FBQyxJQUFJbnVFLEVBQUVtdUUsR0FBR2x1RSxFQUFFbXVFLEdBQW9CLEdBQWpCQSxHQUFHRCxHQUFHLEtBQUtFLEdBQUdydUUsR0FBTUMsRUFBRSxJQUFJRCxFQUFFLEVBQUVBLEVBQUVDLEVBQUV6TCxPQUFPd0wsSUFBSXF1RSxHQUFHcHVFLEVBQUVELEdBQUcsQ0FBQyxDQUFDLFNBQVMydUUsR0FBRzN1RSxFQUFFQyxHQUFHLE9BQU9ELEVBQUVDLEVBQUUsQ0FBQyxTQUFTMnVFLEtBQUssQ0FBQyxJQUFJQyxJQUFHLEVBQUcsU0FBU0MsR0FBRzl1RSxFQUFFQyxFQUFFb2dCLEdBQUcsR0FBR3d1RCxHQUFHLE9BQU83dUUsRUFBRUMsRUFBRW9nQixHQUFHd3VELElBQUcsRUFBRyxJQUFJLE9BQU9GLEdBQUczdUUsRUFBRUMsRUFBRW9nQixFQUFFLENBQUMsUUFBV3d1RCxJQUFHLEdBQUcsT0FBT1YsSUFBSSxPQUFPQyxNQUFHUSxLQUFLRixLQUFJLENBQUMsQ0FDaGIsU0FBU0ssR0FBRy91RSxFQUFFQyxHQUFHLElBQUlvZ0IsRUFBRXJnQixFQUFFdXVFLFVBQVUsR0FBRyxPQUFPbHVELEVBQUUsT0FBTyxLQUFLLElBQUk1UCxFQUFFKzlELEdBQUdudUQsR0FBRyxHQUFHLE9BQU81UCxFQUFFLE9BQU8sS0FBSzRQLEVBQUU1UCxFQUFFeFEsR0FBR0QsRUFBRSxPQUFPQyxHQUFHLElBQUssVUFBVSxJQUFLLGlCQUFpQixJQUFLLGdCQUFnQixJQUFLLHVCQUF1QixJQUFLLGNBQWMsSUFBSyxxQkFBcUIsSUFBSyxjQUFjLElBQUsscUJBQXFCLElBQUssWUFBWSxJQUFLLG1CQUFtQixJQUFLLGdCQUFnQndRLEdBQUdBLEVBQUV1SyxZQUFxQnZLLElBQUksWUFBYnpRLEVBQUVBLEVBQUV6RSxPQUF1QixVQUFVeUUsR0FBRyxXQUFXQSxHQUFHLGFBQWFBLElBQUlBLEdBQUd5USxFQUFFLE1BQU16USxFQUFFLFFBQVFBLEdBQUUsRUFBRyxHQUFHQSxFQUFFLE9BQU8sS0FBSyxHQUFHcWdCLEdBQUcsbUJBQ2xlQSxFQUFFLE1BQU0vYyxNQUFNdEssRUFBRSxJQUFJaUgsU0FBU29nQixJQUFJLE9BQU9BLENBQUMsQ0FBQyxJQUFJMnVELElBQUcsRUFBRyxHQUFHaEwsRUFBRyxJQUFJLElBQUlpTCxHQUFHLENBQUMsRUFBRXYzRSxPQUFPQyxlQUFlczNFLEdBQUcsVUFBVSxDQUFDbjFFLElBQUksV0FBV2sxRSxJQUFHLENBQUUsSUFBSWx4QyxPQUFPb3hDLGlCQUFpQixPQUFPRCxHQUFHQSxJQUFJbnhDLE9BQU9xeEMsb0JBQW9CLE9BQU9GLEdBQUdBLEdBQUcsQ0FBQyxNQUFNanZFLElBQUdndkUsSUFBRyxDQUFFLENBQUMsU0FBU0ksR0FBR3B2RSxFQUFFQyxFQUFFb2dCLEVBQUU1UCxFQUFFNVQsRUFBRWdnRSxFQUFFaC9CLEVBQUVpcEMsRUFBRXB5RSxHQUFHLElBQUk4RixFQUFFN0UsTUFBTUMsVUFBVTZFLE1BQU10RCxLQUFLNUMsVUFBVSxHQUFHLElBQUkwTCxFQUFFN0ssTUFBTWlyQixFQUFFN2xCLEVBQUUsQ0FBQyxNQUFNbkIsR0FBR2xGLEtBQUtrN0UsUUFBUWgyRSxFQUFFLENBQUMsQ0FBQyxJQUFJaTJFLElBQUcsRUFBR0MsR0FBRyxLQUFLQyxJQUFHLEVBQUdDLEdBQUcsS0FBS0MsR0FBRyxDQUFDTCxRQUFRLFNBQVNydkUsR0FBR3N2RSxJQUFHLEVBQUdDLEdBQUd2dkUsQ0FBQyxHQUFHLFNBQVMydkUsR0FBRzN2RSxFQUFFQyxFQUFFb2dCLEVBQUU1UCxFQUFFNVQsRUFBRWdnRSxFQUFFaC9CLEVBQUVpcEMsRUFBRXB5RSxHQUFHNDZFLElBQUcsRUFBR0MsR0FBRyxLQUFLSCxHQUFHaDZFLE1BQU1zNkUsR0FBR243RSxVQUFVLENBQ2pXLFNBQVNxN0UsR0FBRzV2RSxHQUFHLElBQUlDLEVBQUVELEVBQUVxZ0IsRUFBRXJnQixFQUFFLEdBQUdBLEVBQUVpN0MsVUFBVSxLQUFLaDdDLEVBQUU0dkUsUUFBUTV2RSxFQUFFQSxFQUFFNHZFLFdBQVcsQ0FBQzd2RSxFQUFFQyxFQUFFLE1BQW9CLE1BQWpCQSxFQUFFRCxHQUFTOHZFLFNBQWN6dkQsRUFBRXBnQixFQUFFNHZFLFFBQVE3dkUsRUFBRUMsRUFBRTR2RSxhQUFhN3ZFLEVBQUUsQ0FBQyxPQUFPLElBQUlDLEVBQUU4a0IsSUFBSTFFLEVBQUUsSUFBSSxDQUFDLFNBQVMwdkQsR0FBRy92RSxHQUFHLEdBQUcsS0FBS0EsRUFBRStrQixJQUFJLENBQUMsSUFBSTlrQixFQUFFRCxFQUFFZ3dFLGNBQXNFLEdBQXhELE9BQU8vdkUsR0FBa0IsUUFBZEQsRUFBRUEsRUFBRWk3QyxhQUFxQmg3QyxFQUFFRCxFQUFFZ3dFLGVBQW1CLE9BQU8vdkUsRUFBRSxPQUFPQSxFQUFFZ3dFLFVBQVUsQ0FBQyxPQUFPLElBQUksQ0FBQyxTQUFTQyxHQUFHbHdFLEdBQUcsR0FBRzR2RSxHQUFHNXZFLEtBQUtBLEVBQUUsTUFBTXNELE1BQU10SyxFQUFFLEtBQU0sQ0FFMVMsU0FBU20zRSxHQUFHbndFLEdBQVcsT0FBTyxRQUFmQSxFQUR0TixTQUFZQSxHQUFHLElBQUlDLEVBQUVELEVBQUVpN0MsVUFBVSxJQUFJaDdDLEVBQUUsQ0FBUyxHQUFHLFFBQVhBLEVBQUUydkUsR0FBRzV2RSxJQUFlLE1BQU1zRCxNQUFNdEssRUFBRSxNQUFNLE9BQU9pSCxJQUFJRCxFQUFFLEtBQUtBLENBQUMsQ0FBQyxJQUFJLElBQUlxZ0IsRUFBRXJnQixFQUFFeVEsRUFBRXhRLElBQUksQ0FBQyxJQUFJcEQsRUFBRXdqQixFQUFFd3ZELE9BQU8sR0FBRyxPQUFPaHpFLEVBQUUsTUFBTSxJQUFJZ2dFLEVBQUVoZ0UsRUFBRW8rQyxVQUFVLEdBQUcsT0FBTzRoQixFQUFFLENBQVksR0FBRyxRQUFkcHNELEVBQUU1VCxFQUFFZ3pFLFFBQW1CLENBQUN4dkQsRUFBRTVQLEVBQUUsUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHNVQsRUFBRXVOLFFBQVF5eUQsRUFBRXp5RCxNQUFNLENBQUMsSUFBSXl5RCxFQUFFaGdFLEVBQUV1TixNQUFNeXlELEdBQUcsQ0FBQyxHQUFHQSxJQUFJeDhDLEVBQUUsT0FBTzZ2RCxHQUFHcnpFLEdBQUdtRCxFQUFFLEdBQUc2OEQsSUFBSXBzRCxFQUFFLE9BQU95L0QsR0FBR3J6RSxHQUFHb0QsRUFBRTQ4RCxFQUFFQSxFQUFFdC9DLE9BQU8sQ0FBQyxNQUFNamEsTUFBTXRLLEVBQUUsS0FBTSxDQUFDLEdBQUdxbkIsRUFBRXd2RCxTQUFTcC9ELEVBQUVvL0QsT0FBT3h2RCxFQUFFeGpCLEVBQUU0VCxFQUFFb3NELE1BQU0sQ0FBQyxJQUFJLElBQUloL0IsR0FBRSxFQUFHaXBDLEVBQUVqcUUsRUFBRXVOLE1BQU0wOEQsR0FBRyxDQUFDLEdBQUdBLElBQUl6bUQsRUFBRSxDQUFDd2QsR0FBRSxFQUFHeGQsRUFBRXhqQixFQUFFNFQsRUFBRW9zRCxFQUFFLEtBQUssQ0FBQyxHQUFHaUssSUFBSXIyRCxFQUFFLENBQUNvdEIsR0FBRSxFQUFHcHRCLEVBQUU1VCxFQUFFd2pCLEVBQUV3OEMsRUFBRSxLQUFLLENBQUNpSyxFQUFFQSxFQUFFdnBELE9BQU8sQ0FBQyxJQUFJc2dCLEVBQUUsQ0FBQyxJQUFJaXBDLEVBQUVqSyxFQUFFenlELE1BQU0wOEQsR0FBRyxDQUFDLEdBQUdBLElBQzVmem1ELEVBQUUsQ0FBQ3dkLEdBQUUsRUFBR3hkLEVBQUV3OEMsRUFBRXBzRCxFQUFFNVQsRUFBRSxLQUFLLENBQUMsR0FBR2lxRSxJQUFJcjJELEVBQUUsQ0FBQ290QixHQUFFLEVBQUdwdEIsRUFBRW9zRCxFQUFFeDhDLEVBQUV4akIsRUFBRSxLQUFLLENBQUNpcUUsRUFBRUEsRUFBRXZwRCxPQUFPLENBQUMsSUFBSXNnQixFQUFFLE1BQU12NkIsTUFBTXRLLEVBQUUsS0FBTSxDQUFDLENBQUMsR0FBR3FuQixFQUFFNDZCLFlBQVl4cUMsRUFBRSxNQUFNbk4sTUFBTXRLLEVBQUUsS0FBTSxDQUFDLEdBQUcsSUFBSXFuQixFQUFFMEUsSUFBSSxNQUFNemhCLE1BQU10SyxFQUFFLE1BQU0sT0FBT3FuQixFQUFFa3VELFVBQVVsMUQsVUFBVWdILEVBQUVyZ0IsRUFBRUMsQ0FBQyxDQUFrQm13RSxDQUFHcHdFLElBQW1CcXdFLEdBQUdyd0UsR0FBRyxJQUFJLENBQUMsU0FBU3F3RSxHQUFHcndFLEdBQUcsR0FBRyxJQUFJQSxFQUFFK2tCLEtBQUssSUFBSS9rQixFQUFFK2tCLElBQUksT0FBTy9rQixFQUFFLElBQUlBLEVBQUVBLEVBQUVvSyxNQUFNLE9BQU9wSyxHQUFHLENBQUMsSUFBSUMsRUFBRW93RSxHQUFHcndFLEdBQUcsR0FBRyxPQUFPQyxFQUFFLE9BQU9BLEVBQUVELEVBQUVBLEVBQUV1ZCxPQUFPLENBQUMsT0FBTyxJQUFJLENBQzFYLElBQUkreUQsR0FBRzNNLEVBQUc0TSwwQkFBMEJDLEdBQUc3TSxFQUFHOE0sd0JBQXdCQyxHQUFHL00sRUFBR2dOLHFCQUFxQkMsR0FBR2pOLEVBQUdrTixzQkFBc0JDLEdBQUVuTixFQUFHb04sYUFBYUMsR0FBR3JOLEVBQUdzTixpQ0FBaUNDLEdBQUd2TixFQUFHd04sMkJBQTJCQyxHQUFHek4sRUFBRzBOLDhCQUE4QkMsR0FBRzNOLEVBQUc0Tix3QkFBd0JDLEdBQUc3TixFQUFHOE4scUJBQXFCQyxHQUFHL04sRUFBR2dPLHNCQUFzQkMsR0FBRyxLQUFLQyxHQUFHLEtBQ25WQyxHQUFHcHpFLEtBQUtxekUsTUFBTXJ6RSxLQUFLcXpFLE1BQWlDLFNBQVkveEUsR0FBVSxPQUFPLEtBQWRBLEtBQUssR0FBZSxHQUFHLElBQUlneUUsR0FBR2h5RSxHQUFHaXlFLEdBQUcsR0FBRyxDQUFDLEVBQS9FRCxHQUFHdHpFLEtBQUt3ekUsSUFBSUQsR0FBR3Z6RSxLQUFLeXpFLElBQWdFQyxHQUFHLEdBQUdDLEdBQUcsUUFDN0gsU0FBU0MsR0FBR3R5RSxHQUFHLE9BQU9BLEdBQUdBLEdBQUcsS0FBSyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxLQUFLLEdBQUcsT0FBTyxHQUFHLEtBQUssR0FBRyxPQUFPLEdBQUcsS0FBSyxHQUFHLEtBQUssSUFBSSxLQUFLLElBQUksS0FBSyxJQUFJLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLE1BQU0sS0FBSyxNQUFNLEtBQUssTUFBTSxLQUFLLE9BQU8sS0FBSyxPQUFPLEtBQUssT0FBTyxLQUFLLFFBQVEsS0FBSyxRQUFRLE9BQVMsUUFBRkEsRUFBVSxLQUFLLFFBQVEsS0FBSyxRQUFRLEtBQUssU0FBUyxLQUFLLFNBQVMsS0FBSyxTQUFTLE9BQVMsVUFBRkEsRUFBWSxLQUFLLFVBQVUsT0FBTyxVQUFVLEtBQUssVUFBVSxPQUFPLFVBQVUsS0FBSyxVQUFVLE9BQU8sVUFBVSxLQUFLLFdBQVcsT0FBTyxXQUN6Z0IsUUFBUSxPQUFPQSxFQUFFLENBQUMsU0FBU3V5RSxHQUFHdnlFLEVBQUVDLEdBQUcsSUFBSW9nQixFQUFFcmdCLEVBQUV3eUUsYUFBYSxHQUFHLElBQUlueUQsRUFBRSxPQUFPLEVBQUUsSUFBSTVQLEVBQUUsRUFBRTVULEVBQUVtRCxFQUFFeXlFLGVBQWU1VixFQUFFNzhELEVBQUUweUUsWUFBWTcwQyxFQUFJLFVBQUZ4ZCxFQUFZLEdBQUcsSUFBSXdkLEVBQUUsQ0FBQyxJQUFJaXBDLEVBQUVqcEMsR0FBR2hoQyxFQUFFLElBQUlpcUUsRUFBRXIyRCxFQUFFNmhFLEdBQUd4TCxHQUFTLElBQUxqSyxHQUFHaC9CLEtBQVVwdEIsRUFBRTZoRSxHQUFHelYsR0FBSSxNQUFhLElBQVBoL0IsRUFBRXhkLEdBQUd4akIsR0FBUTRULEVBQUU2aEUsR0FBR3owQyxHQUFHLElBQUlnL0IsSUFBSXBzRCxFQUFFNmhFLEdBQUd6VixJQUFJLEdBQUcsSUFBSXBzRCxFQUFFLE9BQU8sRUFBRSxHQUFHLElBQUl4USxHQUFHQSxJQUFJd1EsS0FBUXhRLEVBQUVwRCxNQUFLQSxFQUFFNFQsR0FBR0EsS0FBRW9zRCxFQUFFNThELEdBQUdBLElBQVEsS0FBS3BELEdBQVUsUUFBRmdnRSxHQUFZLE9BQU81OEQsRUFBMEMsR0FBakMsRUFBRndRLElBQU9BLEdBQUssR0FBRjRQLEdBQTRCLEtBQXRCcGdCLEVBQUVELEVBQUUyeUUsZ0JBQXdCLElBQUkzeUUsRUFBRUEsRUFBRTR5RSxjQUFjM3lFLEdBQUd3USxFQUFFLEVBQUV4USxHQUFjcEQsRUFBRSxJQUFid2pCLEVBQUUsR0FBR3l4RCxHQUFHN3hFLElBQVV3USxHQUFHelEsRUFBRXFnQixHQUFHcGdCLElBQUlwRCxFQUFFLE9BQU80VCxDQUFDLENBQ3ZjLFNBQVNvaUUsR0FBRzd5RSxFQUFFQyxHQUFHLE9BQU9ELEdBQUcsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsT0FBT0MsRUFBRSxJQUFJLEtBQUssRUFBRSxLQUFLLEdBQUcsS0FBSyxHQUFHLEtBQUssR0FBRyxLQUFLLElBQUksS0FBSyxJQUFJLEtBQUssSUFBSSxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxNQUFNLEtBQUssTUFBTSxLQUFLLE1BQU0sS0FBSyxPQUFPLEtBQUssT0FBTyxLQUFLLE9BQU8sS0FBSyxRQUFRLEtBQUssUUFBUSxPQUFPQSxFQUFFLElBQXVKLFFBQVEsT0FBTyxFQUFFLENBQ3JOLFNBQVM2eUUsR0FBRzl5RSxHQUFnQyxPQUFPLElBQXBDQSxHQUFrQixXQUFoQkEsRUFBRXd5RSxjQUFzQ3h5RSxFQUFJLFdBQUZBLEVBQWEsV0FBVyxDQUFDLENBQUMsU0FBUyt5RSxLQUFLLElBQUkveUUsRUFBRW95RSxHQUFvQyxRQUFsQixTQUFmQSxLQUFLLE1BQXFCQSxHQUFHLElBQVdweUUsQ0FBQyxDQUFDLFNBQVNnekUsR0FBR2h6RSxHQUFHLElBQUksSUFBSUMsRUFBRSxHQUFHb2dCLEVBQUUsRUFBRSxHQUFHQSxFQUFFQSxJQUFJcGdCLEVBQUV4SCxLQUFLdUgsR0FBRyxPQUFPQyxDQUFDLENBQzNhLFNBQVNnekUsR0FBR2p6RSxFQUFFQyxFQUFFb2dCLEdBQUdyZ0IsRUFBRXd5RSxjQUFjdnlFLEVBQUUsWUFBWUEsSUFBSUQsRUFBRXl5RSxlQUFlLEVBQUV6eUUsRUFBRTB5RSxZQUFZLElBQUcxeUUsRUFBRUEsRUFBRWt6RSxZQUFXanpFLEVBQUUsR0FBRzZ4RSxHQUFHN3hFLElBQVFvZ0IsQ0FBQyxDQUN6SCxTQUFTOHlELEdBQUduekUsRUFBRUMsR0FBRyxJQUFJb2dCLEVBQUVyZ0IsRUFBRTJ5RSxnQkFBZ0IxeUUsRUFBRSxJQUFJRCxFQUFFQSxFQUFFNHlFLGNBQWN2eUQsR0FBRyxDQUFDLElBQUk1UCxFQUFFLEdBQUdxaEUsR0FBR3p4RCxHQUFHeGpCLEVBQUUsR0FBRzRULEVBQUU1VCxFQUFFb0QsRUFBRUQsRUFBRXlRLEdBQUd4USxJQUFJRCxFQUFFeVEsSUFBSXhRLEdBQUdvZ0IsSUFBSXhqQixDQUFDLENBQUMsQ0FBQyxJQUFJdTJFLEdBQUUsRUFBRSxTQUFTQyxHQUFHcnpFLEdBQVMsT0FBTyxHQUFiQSxJQUFJQSxHQUFhLEVBQUVBLEVBQVMsVUFBRkEsRUFBYSxHQUFHLFVBQVUsRUFBRSxDQUFDLENBQUMsSUFBSXN6RSxHQUFHQyxHQUFHQyxHQUFHQyxHQUFHQyxHQUFHQyxJQUFHLEVBQUdDLEdBQUcsR0FBR0MsR0FBRyxLQUFLQyxHQUFHLEtBQUtDLEdBQUcsS0FBS0MsR0FBRyxJQUFJMzFELElBQUk0MUQsR0FBRyxJQUFJNTFELElBQUk2MUQsR0FBRyxHQUFHQyxHQUFHLDZQQUE2UDl3RSxNQUFNLEtBQ2hpQixTQUFTK3dFLEdBQUdwMEUsRUFBRUMsR0FBRyxPQUFPRCxHQUFHLElBQUssVUFBVSxJQUFLLFdBQVc2ekUsR0FBRyxLQUFLLE1BQU0sSUFBSyxZQUFZLElBQUssWUFBWUMsR0FBRyxLQUFLLE1BQU0sSUFBSyxZQUFZLElBQUssV0FBV0MsR0FBRyxLQUFLLE1BQU0sSUFBSyxjQUFjLElBQUssYUFBYUMsR0FBR0ssT0FBT3AwRSxFQUFFcTBFLFdBQVcsTUFBTSxJQUFLLG9CQUFvQixJQUFLLHFCQUFxQkwsR0FBR0ksT0FBT3AwRSxFQUFFcTBFLFdBQVcsQ0FDblQsU0FBU0MsR0FBR3YwRSxFQUFFQyxFQUFFb2dCLEVBQUU1UCxFQUFFNVQsRUFBRWdnRSxHQUFHLE9BQUcsT0FBTzc4RCxHQUFHQSxFQUFFdzBFLGNBQWMzWCxHQUFTNzhELEVBQUUsQ0FBQ3kwRSxVQUFVeDBFLEVBQUV5MEUsYUFBYXIwRCxFQUFFczBELGlCQUFpQmxrRSxFQUFFK2pFLFlBQVkzWCxFQUFFK1gsaUJBQWlCLENBQUMvM0UsSUFBSSxPQUFPb0QsR0FBWSxRQUFSQSxFQUFFcXVFLEdBQUdydUUsS0FBYXN6RSxHQUFHdHpFLEdBQUlELElBQUVBLEVBQUUyMEUsa0JBQWtCbGtFLEVBQUV4USxFQUFFRCxFQUFFNDBFLGlCQUFpQixPQUFPLzNFLElBQUksSUFBSW9ELEVBQUVrRixRQUFRdEksSUFBSW9ELEVBQUV4SCxLQUFLb0UsR0FBVW1ELEVBQUMsQ0FFcFIsU0FBUzYwRSxHQUFHNzBFLEdBQUcsSUFBSUMsRUFBRTYwRSxHQUFHOTBFLEVBQUV3SyxRQUFRLEdBQUcsT0FBT3ZLLEVBQUUsQ0FBQyxJQUFJb2dCLEVBQUV1dkQsR0FBRzN2RSxHQUFHLEdBQUcsT0FBT29nQixFQUFFLEdBQVcsTUFBUnBnQixFQUFFb2dCLEVBQUUwRSxNQUFZLEdBQVcsUUFBUjlrQixFQUFFOHZFLEdBQUcxdkQsSUFBNEQsT0FBL0NyZ0IsRUFBRXkwRSxVQUFVeDBFLE9BQUV5ekUsR0FBRzF6RSxFQUFFKzBFLFVBQVMsV0FBV3ZCLEdBQUduekQsRUFBRSxTQUFnQixHQUFHLElBQUlwZ0IsR0FBR29nQixFQUFFa3VELFVBQVVsMUQsUUFBUTIyRCxjQUFjZ0YsYUFBbUUsWUFBckRoMUUsRUFBRXkwRSxVQUFVLElBQUlwMEQsRUFBRTBFLElBQUkxRSxFQUFFa3VELFVBQVUwRyxjQUFjLEtBQVksQ0FBQ2oxRSxFQUFFeTBFLFVBQVUsSUFBSSxDQUNsVCxTQUFTUyxHQUFHbDFFLEdBQUcsR0FBRyxPQUFPQSxFQUFFeTBFLFVBQVUsT0FBTSxFQUFHLElBQUksSUFBSXgwRSxFQUFFRCxFQUFFNDBFLGlCQUFpQixFQUFFMzBFLEVBQUV6TCxRQUFRLENBQUMsSUFBSTZyQixFQUFFODBELEdBQUduMUUsRUFBRTAwRSxhQUFhMTBFLEVBQUUyMEUsaUJBQWlCMTBFLEVBQUUsR0FBR0QsRUFBRXcwRSxhQUFhLEdBQUcsT0FBT24wRCxFQUFpRyxPQUFlLFFBQVJwZ0IsRUFBRXF1RSxHQUFHanVELEtBQWFrekQsR0FBR3R6RSxHQUFHRCxFQUFFeTBFLFVBQVVwMEQsR0FBRSxFQUEzSCxJQUFJNVAsRUFBRSxJQUF0QjRQLEVBQUVyZ0IsRUFBRXcwRSxhQUF3QjNqRSxZQUFZd1AsRUFBRTlrQixLQUFLOGtCLEdBQUd3dEQsR0FBR3A5RCxFQUFFNFAsRUFBRTdWLE9BQU80cUUsY0FBYzNrRSxHQUFHbzlELEdBQUcsS0FBMEQ1dEUsRUFBRTBzQixPQUFPLENBQUMsT0FBTSxDQUFFLENBQUMsU0FBUzBvRCxHQUFHcjFFLEVBQUVDLEVBQUVvZ0IsR0FBRzYwRCxHQUFHbDFFLElBQUlxZ0IsRUFBRWcwRCxPQUFPcDBFLEVBQUUsQ0FBQyxTQUFTcTFFLEtBQUszQixJQUFHLEVBQUcsT0FBT0UsSUFBSXFCLEdBQUdyQixNQUFNQSxHQUFHLE1BQU0sT0FBT0MsSUFBSW9CLEdBQUdwQixNQUFNQSxHQUFHLE1BQU0sT0FBT0MsSUFBSW1CLEdBQUduQixNQUFNQSxHQUFHLE1BQU1DLEdBQUdoM0UsUUFBUXE0RSxJQUFJcEIsR0FBR2ozRSxRQUFRcTRFLEdBQUcsQ0FDbmYsU0FBU0UsR0FBR3YxRSxFQUFFQyxHQUFHRCxFQUFFeTBFLFlBQVl4MEUsSUFBSUQsRUFBRXkwRSxVQUFVLEtBQUtkLEtBQUtBLElBQUcsRUFBR2hRLEVBQUc0TSwwQkFBMEI1TSxFQUFHNE4sd0JBQXdCK0QsS0FBSyxDQUM1SCxTQUFTRSxHQUFHeDFFLEdBQUcsU0FBU0MsRUFBRUEsR0FBRyxPQUFPczFFLEdBQUd0MUUsRUFBRUQsRUFBRSxDQUFDLEdBQUcsRUFBRTR6RSxHQUFHcC9FLE9BQU8sQ0FBQytnRixHQUFHM0IsR0FBRyxHQUFHNXpFLEdBQUcsSUFBSSxJQUFJcWdCLEVBQUUsRUFBRUEsRUFBRXV6RCxHQUFHcC9FLE9BQU82ckIsSUFBSSxDQUFDLElBQUk1UCxFQUFFbWpFLEdBQUd2ekQsR0FBRzVQLEVBQUVna0UsWUFBWXowRSxJQUFJeVEsRUFBRWdrRSxVQUFVLEtBQUssQ0FBQyxDQUF5RixJQUF4RixPQUFPWixJQUFJMEIsR0FBRzFCLEdBQUc3ekUsR0FBRyxPQUFPOHpFLElBQUl5QixHQUFHekIsR0FBRzl6RSxHQUFHLE9BQU8rekUsSUFBSXdCLEdBQUd4QixHQUFHL3pFLEdBQUdnMEUsR0FBR2gzRSxRQUFRaUQsR0FBR2cwRSxHQUFHajNFLFFBQVFpRCxHQUFPb2dCLEVBQUUsRUFBRUEsRUFBRTZ6RCxHQUFHMS9FLE9BQU82ckIsS0FBSTVQLEVBQUV5akUsR0FBRzd6RCxJQUFLbzBELFlBQVl6MEUsSUFBSXlRLEVBQUVna0UsVUFBVSxNQUFNLEtBQUssRUFBRVAsR0FBRzEvRSxRQUFpQixRQUFSNnJCLEVBQUU2ekQsR0FBRyxJQUFZTyxXQUFZSSxHQUFHeDBELEdBQUcsT0FBT0EsRUFBRW8wRCxXQUFXUCxHQUFHdm5ELE9BQU8sQ0FBQyxJQUFJOG9ELEdBQUduUSxFQUFHb1Esd0JBQXdCQyxJQUFHLEVBQzVhLFNBQVNDLEdBQUc1MUUsRUFBRUMsRUFBRW9nQixFQUFFNVAsR0FBRyxJQUFJNVQsRUFBRXUyRSxHQUFFdlcsRUFBRTRZLEdBQUdJLFdBQVdKLEdBQUdJLFdBQVcsS0FBSyxJQUFJekMsR0FBRSxFQUFFMEMsR0FBRzkxRSxFQUFFQyxFQUFFb2dCLEVBQUU1UCxFQUFFLENBQUMsUUFBUTJpRSxHQUFFdjJFLEVBQUU0NEUsR0FBR0ksV0FBV2haLENBQUMsQ0FBQyxDQUFDLFNBQVNrWixHQUFHLzFFLEVBQUVDLEVBQUVvZ0IsRUFBRTVQLEdBQUcsSUFBSTVULEVBQUV1MkUsR0FBRXZXLEVBQUU0WSxHQUFHSSxXQUFXSixHQUFHSSxXQUFXLEtBQUssSUFBSXpDLEdBQUUsRUFBRTBDLEdBQUc5MUUsRUFBRUMsRUFBRW9nQixFQUFFNVAsRUFBRSxDQUFDLFFBQVEyaUUsR0FBRXYyRSxFQUFFNDRFLEdBQUdJLFdBQVdoWixDQUFDLENBQUMsQ0FDak8sU0FBU2laLEdBQUc5MUUsRUFBRUMsRUFBRW9nQixFQUFFNVAsR0FBRyxHQUFHa2xFLEdBQUcsQ0FBQyxJQUFJOTRFLEVBQUVzNEUsR0FBR24xRSxFQUFFQyxFQUFFb2dCLEVBQUU1UCxHQUFHLEdBQUcsT0FBTzVULEVBQUVtNUUsR0FBR2gyRSxFQUFFQyxFQUFFd1EsRUFBRStELEdBQUc2TCxHQUFHK3pELEdBQUdwMEUsRUFBRXlRLFFBQVEsR0FOdEYsU0FBWXpRLEVBQUVDLEVBQUVvZ0IsRUFBRTVQLEVBQUU1VCxHQUFHLE9BQU9vRCxHQUFHLElBQUssVUFBVSxPQUFPNHpFLEdBQUdVLEdBQUdWLEdBQUc3ekUsRUFBRUMsRUFBRW9nQixFQUFFNVAsRUFBRTVULElBQUcsRUFBRyxJQUFLLFlBQVksT0FBT2kzRSxHQUFHUyxHQUFHVCxHQUFHOXpFLEVBQUVDLEVBQUVvZ0IsRUFBRTVQLEVBQUU1VCxJQUFHLEVBQUcsSUFBSyxZQUFZLE9BQU9rM0UsR0FBR1EsR0FBR1IsR0FBRy96RSxFQUFFQyxFQUFFb2dCLEVBQUU1UCxFQUFFNVQsSUFBRyxFQUFHLElBQUssY0FBYyxJQUFJZ2dFLEVBQUVoZ0UsRUFBRXkzRSxVQUFrRCxPQUF4Q04sR0FBR25tRSxJQUFJZ3ZELEVBQUUwWCxHQUFHUCxHQUFHbDZFLElBQUkraUUsSUFBSSxLQUFLNzhELEVBQUVDLEVBQUVvZ0IsRUFBRTVQLEVBQUU1VCxLQUFVLEVBQUcsSUFBSyxvQkFBb0IsT0FBT2dnRSxFQUFFaGdFLEVBQUV5M0UsVUFBVUwsR0FBR3BtRSxJQUFJZ3ZELEVBQUUwWCxHQUFHTixHQUFHbjZFLElBQUkraUUsSUFBSSxLQUFLNzhELEVBQUVDLEVBQUVvZ0IsRUFBRTVQLEVBQUU1VCxLQUFJLEVBQUcsT0FBTSxDQUFFLENBTTFRbzVFLENBQUdwNUUsRUFBRW1ELEVBQUVDLEVBQUVvZ0IsRUFBRTVQLEdBQUdBLEVBQUV5bEUsdUJBQXVCLEdBQUc5QixHQUFHcDBFLEVBQUV5USxHQUFLLEVBQUZ4USxJQUFNLEVBQUVrMEUsR0FBR2h2RSxRQUFRbkYsR0FBRyxDQUFDLEtBQUssT0FBT25ELEdBQUcsQ0FBQyxJQUFJZ2dFLEVBQUV5UixHQUFHenhFLEdBQTBELEdBQXZELE9BQU9nZ0UsR0FBR3lXLEdBQUd6VyxHQUFpQixRQUFkQSxFQUFFc1ksR0FBR24xRSxFQUFFQyxFQUFFb2dCLEVBQUU1UCxLQUFhdWxFLEdBQUdoMkUsRUFBRUMsRUFBRXdRLEVBQUUrRCxHQUFHNkwsR0FBTXc4QyxJQUFJaGdFLEVBQUUsTUFBTUEsRUFBRWdnRSxDQUFDLENBQUMsT0FBT2hnRSxHQUFHNFQsRUFBRXlsRSxpQkFBaUIsTUFBTUYsR0FBR2gyRSxFQUFFQyxFQUFFd1EsRUFBRSxLQUFLNFAsRUFBRSxDQUFDLENBQUMsSUFBSTdMLEdBQUcsS0FDcFUsU0FBUzJnRSxHQUFHbjFFLEVBQUVDLEVBQUVvZ0IsRUFBRTVQLEdBQTJCLEdBQXhCK0QsR0FBRyxLQUF3QixRQUFYeFUsRUFBRTgwRSxHQUFWOTBFLEVBQUU4dEUsR0FBR3I5RCxLQUF1QixHQUFXLFFBQVJ4USxFQUFFMnZFLEdBQUc1dkUsSUFBWUEsRUFBRSxVQUFVLEdBQVcsTUFBUnFnQixFQUFFcGdCLEVBQUU4a0IsS0FBVyxDQUFTLEdBQUcsUUFBWC9rQixFQUFFK3ZFLEdBQUc5dkUsSUFBZSxPQUFPRCxFQUFFQSxFQUFFLElBQUksTUFBTSxHQUFHLElBQUlxZ0IsRUFBRSxDQUFDLEdBQUdwZ0IsRUFBRXN1RSxVQUFVbDFELFFBQVEyMkQsY0FBY2dGLGFBQWEsT0FBTyxJQUFJLzBFLEVBQUU4a0IsSUFBSTlrQixFQUFFc3VFLFVBQVUwRyxjQUFjLEtBQUtqMUUsRUFBRSxJQUFJLE1BQU1DLElBQUlELElBQUlBLEVBQUUsTUFBVyxPQUFMd1UsR0FBR3hVLEVBQVMsSUFBSSxDQUM3UyxTQUFTbTJFLEdBQUduMkUsR0FBRyxPQUFPQSxHQUFHLElBQUssU0FBUyxJQUFLLFFBQVEsSUFBSyxRQUFRLElBQUssY0FBYyxJQUFLLE9BQU8sSUFBSyxNQUFNLElBQUssV0FBVyxJQUFLLFdBQVcsSUFBSyxVQUFVLElBQUssWUFBWSxJQUFLLE9BQU8sSUFBSyxVQUFVLElBQUssV0FBVyxJQUFLLFFBQVEsSUFBSyxVQUFVLElBQUssVUFBVSxJQUFLLFdBQVcsSUFBSyxRQUFRLElBQUssWUFBWSxJQUFLLFVBQVUsSUFBSyxRQUFRLElBQUssUUFBUSxJQUFLLE9BQU8sSUFBSyxnQkFBZ0IsSUFBSyxjQUFjLElBQUssWUFBWSxJQUFLLGFBQWEsSUFBSyxRQUFRLElBQUssU0FBUyxJQUFLLFNBQVMsSUFBSyxTQUFTLElBQUssY0FBYyxJQUFLLFdBQVcsSUFBSyxhQUFhLElBQUssZUFBZSxJQUFLLFNBQVMsSUFBSyxrQkFBa0IsSUFBSyxZQUFZLElBQUssbUJBQW1CLElBQUssaUJBQWlCLElBQUssb0JBQW9CLElBQUssYUFBYSxJQUFLLFlBQVksSUFBSyxjQUFjLElBQUssT0FBTyxJQUFLLG1CQUFtQixJQUFLLFFBQVEsSUFBSyxhQUFhLElBQUssV0FBVyxJQUFLLFNBQVMsSUFBSyxjQUFjLE9BQU8sRUFBRSxJQUFLLE9BQU8sSUFBSyxZQUFZLElBQUssV0FBVyxJQUFLLFlBQVksSUFBSyxXQUFXLElBQUssWUFBWSxJQUFLLFdBQVcsSUFBSyxZQUFZLElBQUssY0FBYyxJQUFLLGFBQWEsSUFBSyxjQUFjLElBQUssU0FBUyxJQUFLLFNBQVMsSUFBSyxZQUFZLElBQUssUUFBUSxJQUFLLGFBQWEsSUFBSyxhQUFhLElBQUssZUFBZSxJQUFLLGVBQWUsT0FBTyxFQUNwcUMsSUFBSyxVQUFVLE9BQU9neEUsTUFBTSxLQUFLRSxHQUFHLE9BQU8sRUFBRSxLQUFLRSxHQUFHLE9BQU8sRUFBRSxLQUFLRSxHQUFHLEtBQUtFLEdBQUcsT0FBTyxHQUFHLEtBQUtFLEdBQUcsT0FBTyxVQUFVLFFBQVEsT0FBTyxHQUFHLFFBQVEsT0FBTyxHQUFHLENBQUMsSUFBSTBFLEdBQUcsS0FBS0MsR0FBRyxLQUFLQyxHQUFHLEtBQUssU0FBU0MsS0FBSyxHQUFHRCxHQUFHLE9BQU9BLEdBQUcsSUFBSXQyRSxFQUFrQnlRLEVBQWhCeFEsRUFBRW8yRSxHQUFHaDJELEVBQUVwZ0IsRUFBRXpMLE9BQVNxSSxFQUFFLFVBQVV1NUUsR0FBR0EsR0FBRzMrRSxNQUFNMitFLEdBQUdoeUUsWUFBWXk0RCxFQUFFaGdFLEVBQUVySSxPQUFPLElBQUl3TCxFQUFFLEVBQUVBLEVBQUVxZ0IsR0FBR3BnQixFQUFFRCxLQUFLbkQsRUFBRW1ELEdBQUdBLEtBQUssSUFBSTY5QixFQUFFeGQsRUFBRXJnQixFQUFFLElBQUl5USxFQUFFLEVBQUVBLEdBQUdvdEIsR0FBRzU5QixFQUFFb2dCLEVBQUU1UCxLQUFLNVQsRUFBRWdnRSxFQUFFcHNELEdBQUdBLEtBQUssT0FBTzZsRSxHQUFHejVFLEVBQUVwQyxNQUFNdUYsRUFBRSxFQUFFeVEsRUFBRSxFQUFFQSxPQUFFLEVBQU8sQ0FDeFksU0FBUytsRSxHQUFHeDJFLEdBQUcsSUFBSUMsRUFBRUQsRUFBRXkyRSxRQUErRSxNQUF2RSxhQUFhejJFLEVBQWdCLEtBQWJBLEVBQUVBLEVBQUUwMkUsV0FBZ0IsS0FBS3oyRSxJQUFJRCxFQUFFLElBQUtBLEVBQUVDLEVBQUUsS0FBS0QsSUFBSUEsRUFBRSxJQUFXLElBQUlBLEdBQUcsS0FBS0EsRUFBRUEsRUFBRSxDQUFDLENBQUMsU0FBUzIyRSxLQUFLLE9BQU0sQ0FBRSxDQUFDLFNBQVNDLEtBQUssT0FBTSxDQUFFLENBQzVLLFNBQVNDLEdBQUc3MkUsR0FBRyxTQUFTQyxFQUFFQSxFQUFFd1EsRUFBRTVULEVBQUVnZ0UsRUFBRWgvQixHQUE2RyxJQUFJLElBQUl4ZCxLQUFsSGxzQixLQUFLMmlGLFdBQVc3MkUsRUFBRTlMLEtBQUs0aUYsWUFBWWw2RSxFQUFFMUksS0FBS29ILEtBQUtrVixFQUFFdGMsS0FBS3FnRixZQUFZM1gsRUFBRTFvRSxLQUFLcVcsT0FBT3F6QixFQUFFMXBDLEtBQUs2aUYsY0FBYyxLQUFrQmgzRSxFQUFFQSxFQUFFL0csZUFBZW9uQixLQUFLcGdCLEVBQUVELEVBQUVxZ0IsR0FBR2xzQixLQUFLa3NCLEdBQUdwZ0IsRUFBRUEsRUFBRTQ4RCxHQUFHQSxFQUFFeDhDLElBQWdJLE9BQTVIbHNCLEtBQUs4aUYsb0JBQW9CLE1BQU1wYSxFQUFFcWEsaUJBQWlCcmEsRUFBRXFhLGtCQUFpQixJQUFLcmEsRUFBRXNhLGFBQWFSLEdBQUdDLEdBQUd6aUYsS0FBS2lqRixxQkFBcUJSLEdBQVV6aUYsSUFBSSxDQUM5RSxPQUQrRU0sRUFBRXdMLEVBQUVySyxVQUFVLENBQUN5aEYsZUFBZSxXQUFXbGpGLEtBQUsraUYsa0JBQWlCLEVBQUcsSUFBSWwzRSxFQUFFN0wsS0FBS3FnRixZQUFZeDBFLElBQUlBLEVBQUVxM0UsZUFBZXIzRSxFQUFFcTNFLGlCQUFpQixrQkFBbUJyM0UsRUFBRW0zRSxjQUM3ZW4zRSxFQUFFbTNFLGFBQVksR0FBSWhqRixLQUFLOGlGLG1CQUFtQk4sR0FBRyxFQUFFVCxnQkFBZ0IsV0FBVyxJQUFJbDJFLEVBQUU3TCxLQUFLcWdGLFlBQVl4MEUsSUFBSUEsRUFBRWsyRSxnQkFBZ0JsMkUsRUFBRWsyRSxrQkFBa0Isa0JBQW1CbDJFLEVBQUVzM0UsZUFBZXQzRSxFQUFFczNFLGNBQWEsR0FBSW5qRixLQUFLaWpGLHFCQUFxQlQsR0FBRyxFQUFFWSxRQUFRLFdBQVcsRUFBRUMsYUFBYWIsS0FBWTEyRSxDQUFDLENBQ2pSLElBQW9MdzNFLEdBQUdDLEdBQUdDLEdBQXRMQyxHQUFHLENBQUNDLFdBQVcsRUFBRUMsUUFBUSxFQUFFQyxXQUFXLEVBQUVDLFVBQVUsU0FBU2g0RSxHQUFHLE9BQU9BLEVBQUVnNEUsV0FBVzN1RCxLQUFLNHVELEtBQUssRUFBRWYsaUJBQWlCLEVBQUVnQixVQUFVLEdBQUdDLEdBQUd0QixHQUFHZSxJQUFJUSxHQUFHM2pGLEVBQUUsQ0FBQyxFQUFFbWpGLEdBQUcsQ0FBQ1MsS0FBSyxFQUFFQyxPQUFPLElBQUlDLEdBQUcxQixHQUFHdUIsSUFBYUksR0FBRy9qRixFQUFFLENBQUMsRUFBRTJqRixHQUFHLENBQUNLLFFBQVEsRUFBRUMsUUFBUSxFQUFFQyxRQUFRLEVBQUVDLFFBQVEsRUFBRUMsTUFBTSxFQUFFQyxNQUFNLEVBQUVDLFFBQVEsRUFBRUMsU0FBUyxFQUFFQyxPQUFPLEVBQUVDLFFBQVEsRUFBRUMsaUJBQWlCQyxHQUFHdDlELE9BQU8sRUFBRXU5RCxRQUFRLEVBQUVDLGNBQWMsU0FBU3Q1RSxHQUFHLFlBQU8sSUFBU0EsRUFBRXM1RSxjQUFjdDVFLEVBQUV1NUUsY0FBY3Y1RSxFQUFFK3RFLFdBQVcvdEUsRUFBRXc1RSxVQUFVeDVFLEVBQUV1NUUsWUFBWXY1RSxFQUFFczVFLGFBQWEsRUFBRUcsVUFBVSxTQUFTejVFLEdBQUcsTUFBRyxjQUMzZUEsRUFBU0EsRUFBRXk1RSxXQUFVejVFLElBQUkyM0UsS0FBS0EsSUFBSSxjQUFjMzNFLEVBQUV6RSxNQUFNazhFLEdBQUd6M0UsRUFBRXk0RSxRQUFRZCxHQUFHYyxRQUFRZixHQUFHMTNFLEVBQUUwNEUsUUFBUWYsR0FBR2UsU0FBU2hCLEdBQUdELEdBQUcsRUFBRUUsR0FBRzMzRSxHQUFVeTNFLEdBQUUsRUFBRWlDLFVBQVUsU0FBUzE1RSxHQUFHLE1BQU0sY0FBY0EsRUFBRUEsRUFBRTA1RSxVQUFVaEMsRUFBRSxJQUFJaUMsR0FBRzlDLEdBQUcyQixJQUFpQ29CLEdBQUcvQyxHQUE3QnBpRixFQUFFLENBQUMsRUFBRStqRixHQUFHLENBQUNxQixhQUFhLEtBQTRDQyxHQUFHakQsR0FBOUJwaUYsRUFBRSxDQUFDLEVBQUUyakYsR0FBRyxDQUFDa0IsY0FBYyxLQUEwRVMsR0FBR2xELEdBQTVEcGlGLEVBQUUsQ0FBQyxFQUFFbWpGLEdBQUcsQ0FBQ29DLGNBQWMsRUFBRUMsWUFBWSxFQUFFQyxjQUFjLEtBQWNDLEdBQUcxbEYsRUFBRSxDQUFDLEVBQUVtakYsR0FBRyxDQUFDd0MsY0FBYyxTQUFTcDZFLEdBQUcsTUFBTSxrQkFBa0JBLEVBQUVBLEVBQUVvNkUsY0FBY3Q4QyxPQUFPczhDLGFBQWEsSUFBSUMsR0FBR3hELEdBQUdzRCxJQUF5QkcsR0FBR3pELEdBQXJCcGlGLEVBQUUsQ0FBQyxFQUFFbWpGLEdBQUcsQ0FBQy83RSxLQUFLLEtBQWMwK0UsR0FBRyxDQUFDQyxJQUFJLFNBQ3hmQyxTQUFTLElBQUlDLEtBQUssWUFBWUMsR0FBRyxVQUFVQyxNQUFNLGFBQWFDLEtBQUssWUFBWUMsSUFBSSxTQUFTQyxJQUFJLEtBQUtDLEtBQUssY0FBY0MsS0FBSyxjQUFjQyxPQUFPLGFBQWFDLGdCQUFnQixnQkFBZ0JDLEdBQUcsQ0FBQyxFQUFFLFlBQVksRUFBRSxNQUFNLEdBQUcsUUFBUSxHQUFHLFFBQVEsR0FBRyxRQUFRLEdBQUcsVUFBVSxHQUFHLE1BQU0sR0FBRyxRQUFRLEdBQUcsV0FBVyxHQUFHLFNBQVMsR0FBRyxJQUFJLEdBQUcsU0FBUyxHQUFHLFdBQVcsR0FBRyxNQUFNLEdBQUcsT0FBTyxHQUFHLFlBQVksR0FBRyxVQUFVLEdBQUcsYUFBYSxHQUFHLFlBQVksR0FBRyxTQUFTLEdBQUcsU0FBUyxJQUFJLEtBQUssSUFBSSxLQUFLLElBQUksS0FBSyxJQUFJLEtBQUssSUFBSSxLQUFLLElBQUksS0FBSyxJQUFJLEtBQ3RmLElBQUksS0FBSyxJQUFJLEtBQUssSUFBSSxNQUFNLElBQUksTUFBTSxJQUFJLE1BQU0sSUFBSSxVQUFVLElBQUksYUFBYSxJQUFJLFFBQVFDLEdBQUcsQ0FBQ0MsSUFBSSxTQUFTQyxRQUFRLFVBQVVDLEtBQUssVUFBVUMsTUFBTSxZQUFZLFNBQVNDLEdBQUcxN0UsR0FBRyxJQUFJQyxFQUFFOUwsS0FBS3FnRixZQUFZLE9BQU92MEUsRUFBRWs1RSxpQkFBaUJsNUUsRUFBRWs1RSxpQkFBaUJuNUUsTUFBSUEsRUFBRXE3RSxHQUFHcjdFLE9BQU1DLEVBQUVELEVBQUssQ0FBQyxTQUFTbzVFLEtBQUssT0FBT3NDLEVBQUUsQ0FDaFMsSUFBSUMsR0FBR2xuRixFQUFFLENBQUMsRUFBRTJqRixHQUFHLENBQUM1ekUsSUFBSSxTQUFTeEUsR0FBRyxHQUFHQSxFQUFFd0UsSUFBSSxDQUFDLElBQUl2RSxFQUFFczZFLEdBQUd2NkUsRUFBRXdFLE1BQU14RSxFQUFFd0UsSUFBSSxHQUFHLGlCQUFpQnZFLEVBQUUsT0FBT0EsQ0FBQyxDQUFDLE1BQU0sYUFBYUQsRUFBRXpFLEtBQWMsTUFBUnlFLEVBQUV3MkUsR0FBR3gyRSxJQUFVLFFBQVErQyxPQUFPbWQsYUFBYWxnQixHQUFJLFlBQVlBLEVBQUV6RSxNQUFNLFVBQVV5RSxFQUFFekUsS0FBSzYvRSxHQUFHcDdFLEVBQUV5MkUsVUFBVSxlQUFlLEVBQUUsRUFBRXZvRCxLQUFLLEVBQUV1MEMsU0FBUyxFQUFFc1csUUFBUSxFQUFFQyxTQUFTLEVBQUVDLE9BQU8sRUFBRUMsUUFBUSxFQUFFMEMsT0FBTyxFQUFFQyxPQUFPLEVBQUUxQyxpQkFBaUJDLEdBQUcxQyxTQUFTLFNBQVMxMkUsR0FBRyxNQUFNLGFBQWFBLEVBQUV6RSxLQUFLaTdFLEdBQUd4MkUsR0FBRyxDQUFDLEVBQUV5MkUsUUFBUSxTQUFTejJFLEdBQUcsTUFBTSxZQUFZQSxFQUFFekUsTUFBTSxVQUFVeUUsRUFBRXpFLEtBQUt5RSxFQUFFeTJFLFFBQVEsQ0FBQyxFQUFFcUYsTUFBTSxTQUFTOTdFLEdBQUcsTUFBTSxhQUM3ZUEsRUFBRXpFLEtBQUtpN0UsR0FBR3gyRSxHQUFHLFlBQVlBLEVBQUV6RSxNQUFNLFVBQVV5RSxFQUFFekUsS0FBS3lFLEVBQUV5MkUsUUFBUSxDQUFDLElBQUlzRixHQUFHbEYsR0FBRzhFLElBQWlJSyxHQUFHbkYsR0FBN0hwaUYsRUFBRSxDQUFDLEVBQUUrakYsR0FBRyxDQUFDbEUsVUFBVSxFQUFFMkgsTUFBTSxFQUFFQyxPQUFPLEVBQUVDLFNBQVMsRUFBRUMsbUJBQW1CLEVBQUVDLE1BQU0sRUFBRUMsTUFBTSxFQUFFQyxNQUFNLEVBQUVDLFlBQVksRUFBRUMsVUFBVSxLQUFtSUMsR0FBRzdGLEdBQXJIcGlGLEVBQUUsQ0FBQyxFQUFFMmpGLEdBQUcsQ0FBQ3VFLFFBQVEsRUFBRUMsY0FBYyxFQUFFQyxlQUFlLEVBQUU1RCxPQUFPLEVBQUVDLFFBQVEsRUFBRUgsUUFBUSxFQUFFQyxTQUFTLEVBQUVHLGlCQUFpQkMsTUFBMEUwRCxHQUFHakcsR0FBM0RwaUYsRUFBRSxDQUFDLEVBQUVtakYsR0FBRyxDQUFDblQsYUFBYSxFQUFFd1YsWUFBWSxFQUFFQyxjQUFjLEtBQWM2QyxHQUFHdG9GLEVBQUUsQ0FBQyxFQUFFK2pGLEdBQUcsQ0FBQ3dFLE9BQU8sU0FBU2g5RSxHQUFHLE1BQU0sV0FBV0EsRUFBRUEsRUFBRWc5RSxPQUFPLGdCQUFnQmg5RSxHQUFHQSxFQUFFaTlFLFlBQVksQ0FBQyxFQUNuZkMsT0FBTyxTQUFTbDlFLEdBQUcsTUFBTSxXQUFXQSxFQUFFQSxFQUFFazlFLE9BQU8sZ0JBQWdCbDlFLEdBQUdBLEVBQUVtOUUsWUFBWSxlQUFlbjlFLEdBQUdBLEVBQUVvOUUsV0FBVyxDQUFDLEVBQUVDLE9BQU8sRUFBRUMsVUFBVSxJQUFJQyxHQUFHMUcsR0FBR2tHLElBQUlTLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxJQUFJQyxHQUFHelosR0FBSSxxQkFBcUJsbUMsT0FBTzQvQyxHQUFHLEtBQUsxWixHQUFJLGlCQUFpQmptQyxXQUFXMi9DLEdBQUczL0MsU0FBUzQvQyxjQUFjLElBQUlDLEdBQUc1WixHQUFJLGNBQWNsbUMsU0FBUzQvQyxHQUFHRyxHQUFHN1osS0FBTXlaLElBQUlDLElBQUksRUFBRUEsSUFBSSxJQUFJQSxJQUFJSSxHQUFHLzZFLE9BQU9tZCxhQUFhLElBQUk2OUQsSUFBRyxFQUMxVyxTQUFTQyxHQUFHaCtFLEVBQUVDLEdBQUcsT0FBT0QsR0FBRyxJQUFLLFFBQVEsT0FBTyxJQUFJdzlFLEdBQUdyNEUsUUFBUWxGLEVBQUV3MkUsU0FBUyxJQUFLLFVBQVUsT0FBTyxNQUFNeDJFLEVBQUV3MkUsUUFBUSxJQUFLLFdBQVcsSUFBSyxZQUFZLElBQUssV0FBVyxPQUFNLEVBQUcsUUFBUSxPQUFNLEVBQUcsQ0FBQyxTQUFTd0gsR0FBR2orRSxHQUFjLE1BQU0saUJBQWpCQSxFQUFFQSxFQUFFczRFLFNBQWtDLFNBQVN0NEUsRUFBRUEsRUFBRW5FLEtBQUssSUFBSSxDQUFDLElBQUlxaUYsSUFBRyxFQUUxUUMsR0FBRyxDQUFDQyxPQUFNLEVBQUdDLE1BQUssRUFBR0MsVUFBUyxFQUFHLGtCQUFpQixFQUFHQyxPQUFNLEVBQUdDLE9BQU0sRUFBR3JsQyxRQUFPLEVBQUczOUIsVUFBUyxFQUFHaWpFLE9BQU0sRUFBRy9zRSxRQUFPLEVBQUdndEUsS0FBSSxFQUFHNzhFLE1BQUssRUFBRzg4RSxNQUFLLEVBQUdDLEtBQUksRUFBR0MsTUFBSyxHQUFJLFNBQVNDLEdBQUc5K0UsR0FBRyxJQUFJQyxFQUFFRCxHQUFHQSxFQUFFazlELFVBQVVsOUQsRUFBRWs5RCxTQUFTcnBELGNBQWMsTUFBTSxVQUFVNVQsSUFBSWsrRSxHQUFHbitFLEVBQUV6RSxNQUFNLGFBQWEwRSxDQUFPLENBQUMsU0FBUzgrRSxHQUFHLytFLEVBQUVDLEVBQUVvZ0IsRUFBRTVQLEdBQUdnK0QsR0FBR2grRCxHQUFzQixHQUFuQnhRLEVBQUUrK0UsR0FBRy8rRSxFQUFFLGFBQWdCekwsU0FBUzZyQixFQUFFLElBQUk4M0QsR0FBRyxXQUFXLFNBQVMsS0FBSzkzRCxFQUFFNVAsR0FBR3pRLEVBQUV2SCxLQUFLLENBQUNnb0MsTUFBTXBnQixFQUFFNCtELFVBQVVoL0UsSUFBSSxDQUFDLElBQUlpL0UsR0FBRyxLQUFLQyxHQUFHLEtBQUssU0FBU0MsR0FBR3AvRSxHQUFHcS9FLEdBQUdyL0UsRUFBRSxFQUFFLENBQUMsU0FBU3MvRSxHQUFHdC9FLEdBQWUsR0FBRzRuRSxFQUFUMlgsR0FBR3YvRSxJQUFZLE9BQU9BLENBQUMsQ0FDcGUsU0FBU3cvRSxHQUFHeC9FLEVBQUVDLEdBQUcsR0FBRyxXQUFXRCxFQUFFLE9BQU9DLENBQUMsQ0FBQyxJQUFJdy9FLElBQUcsRUFBRyxHQUFHemIsRUFBRyxDQUFDLElBQUkwYixHQUFHLEdBQUcxYixFQUFHLENBQUMsSUFBSTJiLEdBQUcsWUFBWTVoRCxTQUFTLElBQUk0aEQsR0FBRyxDQUFDLElBQUlDLEdBQUc3aEQsU0FBU2tQLGNBQWMsT0FBTzJ5QyxHQUFHemEsYUFBYSxVQUFVLFdBQVd3YSxHQUFHLG1CQUFvQkMsR0FBR0MsT0FBTyxDQUFDSCxHQUFHQyxFQUFFLE1BQU1ELElBQUcsRUFBR0QsR0FBR0MsTUFBTTNoRCxTQUFTNC9DLGNBQWMsRUFBRTUvQyxTQUFTNC9DLGFBQWEsQ0FBQyxTQUFTbUMsS0FBS1osS0FBS0EsR0FBR2EsWUFBWSxtQkFBbUJDLElBQUliLEdBQUdELEdBQUcsS0FBSyxDQUFDLFNBQVNjLEdBQUdoZ0YsR0FBRyxHQUFHLFVBQVVBLEVBQUV5a0UsY0FBYzZhLEdBQUdILElBQUksQ0FBQyxJQUFJbC9FLEVBQUUsR0FBRzgrRSxHQUFHOStFLEVBQUVrL0UsR0FBR24vRSxFQUFFOHRFLEdBQUc5dEUsSUFBSTh1RSxHQUFHc1EsR0FBR24vRSxFQUFFLENBQUMsQ0FDL2IsU0FBU2dnRixHQUFHamdGLEVBQUVDLEVBQUVvZ0IsR0FBRyxZQUFZcmdCLEdBQUc4L0UsS0FBVVgsR0FBRzkrRCxHQUFSNitELEdBQUdqL0UsR0FBVWlnRixZQUFZLG1CQUFtQkYsS0FBSyxhQUFhaGdGLEdBQUc4L0UsSUFBSSxDQUFDLFNBQVNLLEdBQUduZ0YsR0FBRyxHQUFHLG9CQUFvQkEsR0FBRyxVQUFVQSxHQUFHLFlBQVlBLEVBQUUsT0FBT3MvRSxHQUFHSCxHQUFHLENBQUMsU0FBU2lCLEdBQUdwZ0YsRUFBRUMsR0FBRyxHQUFHLFVBQVVELEVBQUUsT0FBT3MvRSxHQUFHci9FLEVBQUUsQ0FBQyxTQUFTb2dGLEdBQUdyZ0YsRUFBRUMsR0FBRyxHQUFHLFVBQVVELEdBQUcsV0FBV0EsRUFBRSxPQUFPcy9FLEdBQUdyL0UsRUFBRSxDQUFpRSxJQUFJcWdGLEdBQUcsbUJBQW9CNW9GLE9BQU9rRCxHQUFHbEQsT0FBT2tELEdBQTVHLFNBQVlvRixFQUFFQyxHQUFHLE9BQU9ELElBQUlDLElBQUksSUFBSUQsR0FBRyxFQUFFQSxHQUFJLEVBQUVDLElBQUlELEdBQUlBLEdBQUdDLEdBQUlBLENBQUMsRUFDdFcsU0FBU3NnRixHQUFHdmdGLEVBQUVDLEdBQUcsR0FBR3FnRixHQUFHdGdGLEVBQUVDLEdBQUcsT0FBTSxFQUFHLEdBQUcsaUJBQWtCRCxHQUFHLE9BQU9BLEdBQUcsaUJBQWtCQyxHQUFHLE9BQU9BLEVBQUUsT0FBTSxFQUFHLElBQUlvZ0IsRUFBRTNvQixPQUFPNkssS0FBS3ZDLEdBQUd5USxFQUFFL1ksT0FBTzZLLEtBQUt0QyxHQUFHLEdBQUdvZ0IsRUFBRTdyQixTQUFTaWMsRUFBRWpjLE9BQU8sT0FBTSxFQUFHLElBQUlpYyxFQUFFLEVBQUVBLEVBQUU0UCxFQUFFN3JCLE9BQU9pYyxJQUFJLENBQUMsSUFBSTVULEVBQUV3akIsRUFBRTVQLEdBQUcsSUFBSXd6RCxFQUFHOXNFLEtBQUs4SSxFQUFFcEQsS0FBS3lqRixHQUFHdGdGLEVBQUVuRCxHQUFHb0QsRUFBRXBELElBQUksT0FBTSxDQUFFLENBQUMsT0FBTSxDQUFFLENBQUMsU0FBUzJqRixHQUFHeGdGLEdBQUcsS0FBS0EsR0FBR0EsRUFBRXFkLFlBQVlyZCxFQUFFQSxFQUFFcWQsV0FBVyxPQUFPcmQsQ0FBQyxDQUN0VSxTQUFTeWdGLEdBQUd6Z0YsRUFBRUMsR0FBRyxJQUF3QndRLEVBQXBCNFAsRUFBRW1nRSxHQUFHeGdGLEdBQU8sSUFBSkEsRUFBRSxFQUFZcWdCLEdBQUcsQ0FBQyxHQUFHLElBQUlBLEVBQUUyVyxTQUFTLENBQTBCLEdBQXpCdm1CLEVBQUV6USxFQUFFcWdCLEVBQUVqYyxZQUFZNVAsT0FBVXdMLEdBQUdDLEdBQUd3USxHQUFHeFEsRUFBRSxNQUFNLENBQUNsSSxLQUFLc29CLEVBQUVNLE9BQU8xZ0IsRUFBRUQsR0FBR0EsRUFBRXlRLENBQUMsQ0FBQ3pRLEVBQUUsQ0FBQyxLQUFLcWdCLEdBQUcsQ0FBQyxHQUFHQSxFQUFFcWdFLFlBQVksQ0FBQ3JnRSxFQUFFQSxFQUFFcWdFLFlBQVksTUFBTTFnRixDQUFDLENBQUNxZ0IsRUFBRUEsRUFBRTR0RCxVQUFVLENBQUM1dEQsT0FBRSxDQUFNLENBQUNBLEVBQUVtZ0UsR0FBR25nRSxFQUFFLENBQUMsQ0FBQyxTQUFTc2dFLEdBQUczZ0YsRUFBRUMsR0FBRyxTQUFPRCxJQUFHQyxLQUFFRCxJQUFJQyxLQUFLRCxHQUFHLElBQUlBLEVBQUVnM0IsWUFBWS8yQixHQUFHLElBQUlBLEVBQUUrMkIsU0FBUzJwRCxHQUFHM2dGLEVBQUVDLEVBQUVndUUsWUFBWSxhQUFhanVFLEVBQUVBLEVBQUUwTSxTQUFTek0sS0FBR0QsRUFBRWtxQiw0QkFBd0QsR0FBN0JscUIsRUFBRWtxQix3QkFBd0JqcUIsS0FBWSxDQUM5WixTQUFTMmdGLEtBQUssSUFBSSxJQUFJNWdGLEVBQUU4OUIsT0FBTzc5QixFQUFFNG5FLElBQUs1bkUsYUFBYUQsRUFBRTZnRixtQkFBbUIsQ0FBQyxJQUFJLElBQUl4Z0UsRUFBRSxpQkFBa0JwZ0IsRUFBRTZnRixjQUFjcmUsU0FBU3YrRCxJQUFJLENBQUMsTUFBTXVNLEdBQUc0UCxHQUFFLENBQUUsQ0FBQyxJQUFHQSxFQUF5QixNQUFNcGdCLEVBQUU0bkUsR0FBL0I3bkUsRUFBRUMsRUFBRTZnRixlQUFnQy9pRCxTQUFTLENBQUMsT0FBTzk5QixDQUFDLENBQUMsU0FBUzhnRixHQUFHL2dGLEdBQUcsSUFBSUMsRUFBRUQsR0FBR0EsRUFBRWs5RCxVQUFVbDlELEVBQUVrOUQsU0FBU3JwRCxjQUFjLE9BQU81VCxJQUFJLFVBQVVBLElBQUksU0FBU0QsRUFBRXpFLE1BQU0sV0FBV3lFLEVBQUV6RSxNQUFNLFFBQVF5RSxFQUFFekUsTUFBTSxRQUFReUUsRUFBRXpFLE1BQU0sYUFBYXlFLEVBQUV6RSxPQUFPLGFBQWEwRSxHQUFHLFNBQVNELEVBQUVnaEYsZ0JBQWdCLENBQ3hhLFNBQVNDLEdBQUdqaEYsR0FBRyxJQUFJQyxFQUFFMmdGLEtBQUt2Z0UsRUFBRXJnQixFQUFFa2hGLFlBQVl6d0UsRUFBRXpRLEVBQUVtaEYsZUFBZSxHQUFHbGhGLElBQUlvZ0IsR0FBR0EsR0FBR0EsRUFBRW9vRCxlQUFla1ksR0FBR3RnRSxFQUFFb29ELGNBQWMyWSxnQkFBZ0IvZ0UsR0FBRyxDQUFDLEdBQUcsT0FBTzVQLEdBQUdzd0UsR0FBRzFnRSxHQUFHLEdBQUdwZ0IsRUFBRXdRLEVBQUVqQyxXQUFjLEtBQVJ4TyxFQUFFeVEsRUFBRXJMLE9BQWlCcEYsRUFBRUMsR0FBRyxtQkFBbUJvZ0IsRUFBRUEsRUFBRWdoRSxlQUFlcGhGLEVBQUVvZ0IsRUFBRWloRSxhQUFhNWlGLEtBQUt5QixJQUFJSCxFQUFFcWdCLEVBQUU1b0IsTUFBTWpELGFBQWEsSUFBR3dMLEdBQUdDLEVBQUVvZ0IsRUFBRW9vRCxlQUFlMXFDLFdBQVc5OUIsRUFBRXNoRixhQUFhempELFFBQVMwakQsYUFBYSxDQUFDeGhGLEVBQUVBLEVBQUV3aEYsZUFBZSxJQUFJM2tGLEVBQUV3akIsRUFBRWpjLFlBQVk1UCxPQUFPcW9FLEVBQUVuK0QsS0FBS3lCLElBQUlzUSxFQUFFakMsTUFBTTNSLEdBQUc0VCxPQUFFLElBQVNBLEVBQUVyTCxJQUFJeTNELEVBQUVuK0QsS0FBS3lCLElBQUlzUSxFQUFFckwsSUFBSXZJLElBQUltRCxFQUFFeWhGLFFBQVE1a0IsRUFBRXBzRCxJQUFJNVQsRUFBRTRULEVBQUVBLEVBQUVvc0QsRUFBRUEsRUFBRWhnRSxHQUFHQSxFQUFFNGpGLEdBQUdwZ0UsRUFBRXc4QyxHQUFHLElBQUloL0IsRUFBRTRpRCxHQUFHcGdFLEVBQ3ZmNVAsR0FBRzVULEdBQUdnaEMsSUFBSSxJQUFJNzlCLEVBQUUwaEYsWUFBWTFoRixFQUFFMmhGLGFBQWE5a0YsRUFBRTlFLE1BQU1pSSxFQUFFNGhGLGVBQWUva0YsRUFBRThqQixRQUFRM2dCLEVBQUU2aEYsWUFBWWhrRCxFQUFFOWxDLE1BQU1pSSxFQUFFOGhGLGNBQWNqa0QsRUFBRWxkLFdBQVUxZ0IsRUFBRUEsRUFBRThoRixlQUFnQkMsU0FBU25sRixFQUFFOUUsS0FBSzhFLEVBQUU4akIsUUFBUTNnQixFQUFFaWlGLGtCQUFrQnBsQixFQUFFcHNELEdBQUd6USxFQUFFa2lGLFNBQVNqaUYsR0FBR0QsRUFBRXloRixPQUFPNWpELEVBQUU5bEMsS0FBSzhsQyxFQUFFbGQsVUFBVTFnQixFQUFFa2lGLE9BQU90a0QsRUFBRTlsQyxLQUFLOGxDLEVBQUVsZCxRQUFRM2dCLEVBQUVraUYsU0FBU2ppRixJQUFJLENBQU0sSUFBTEEsRUFBRSxHQUFPRCxFQUFFcWdCLEVBQUVyZ0IsRUFBRUEsRUFBRWl1RSxZQUFZLElBQUlqdUUsRUFBRWczQixVQUFVLzJCLEVBQUV4SCxLQUFLLENBQUNrSCxRQUFRSyxFQUFFdXNDLEtBQUt2c0MsRUFBRW9pRixXQUFXQyxJQUFJcmlGLEVBQUVzaUYsWUFBbUQsSUFBdkMsbUJBQW9CamlFLEVBQUVraUUsT0FBT2xpRSxFQUFFa2lFLFFBQVlsaUUsRUFBRSxFQUFFQSxFQUFFcGdCLEVBQUV6TCxPQUFPNnJCLEtBQUlyZ0IsRUFBRUMsRUFBRW9nQixJQUFLMWdCLFFBQVF5aUYsV0FBV3BpRixFQUFFdXNDLEtBQUt2c0MsRUFBRUwsUUFBUTJpRixVQUFVdGlGLEVBQUVxaUYsR0FBRyxDQUFDLENBQ3pmLElBQUlHLEdBQUd4ZSxHQUFJLGlCQUFpQmptQyxVQUFVLElBQUlBLFNBQVM0L0MsYUFBYThFLEdBQUcsS0FBS0MsR0FBRyxLQUFLQyxHQUFHLEtBQUtDLElBQUcsRUFDM0YsU0FBU0MsR0FBRzdpRixFQUFFQyxFQUFFb2dCLEdBQUcsSUFBSTVQLEVBQUU0UCxFQUFFeWQsU0FBU3pkLEVBQUVBLEVBQUUwZCxTQUFTLElBQUkxZCxFQUFFMlcsU0FBUzNXLEVBQUVBLEVBQUVvb0QsY0FBY21hLElBQUksTUFBTUgsSUFBSUEsS0FBSzVhLEVBQUdwM0QsS0FBc0NBLEVBQTVCLG1CQUFMQSxFQUFFZ3lFLEtBQXlCMUIsR0FBR3R3RSxHQUFLLENBQUNqQyxNQUFNaUMsRUFBRTR3RSxlQUFlajhFLElBQUlxTCxFQUFFNndFLGNBQXlGLENBQUNLLFlBQTNFbHhFLEdBQUdBLEVBQUVnNEQsZUFBZWg0RCxFQUFFZzRELGNBQWM4WSxhQUFhempELFFBQVEwakQsZ0JBQStCRyxXQUFXQyxhQUFhbnhFLEVBQUVteEUsYUFBYUMsVUFBVXB4RSxFQUFFb3hFLFVBQVVDLFlBQVlyeEUsRUFBRXF4RSxhQUFjYSxJQUFJcEMsR0FBR29DLEdBQUdseUUsS0FBS2t5RSxHQUFHbHlFLEVBQXNCLEdBQXBCQSxFQUFFdXVFLEdBQUcwRCxHQUFHLGFBQWdCbHVGLFNBQVN5TCxFQUFFLElBQUlrNEUsR0FBRyxXQUFXLFNBQVMsS0FBS2w0RSxFQUFFb2dCLEdBQUdyZ0IsRUFBRXZILEtBQUssQ0FBQ2dvQyxNQUFNeGdDLEVBQUVnL0UsVUFBVXh1RSxJQUFJeFEsRUFBRXVLLE9BQU9pNEUsS0FBSyxDQUN0ZixTQUFTSyxHQUFHOWlGLEVBQUVDLEdBQUcsSUFBSW9nQixFQUFFLENBQUMsRUFBaUYsT0FBL0VBLEVBQUVyZ0IsRUFBRTZULGVBQWU1VCxFQUFFNFQsY0FBY3dNLEVBQUUsU0FBU3JnQixHQUFHLFNBQVNDLEVBQUVvZ0IsRUFBRSxNQUFNcmdCLEdBQUcsTUFBTUMsRUFBU29nQixDQUFDLENBQUMsSUFBSTBpRSxHQUFHLENBQUNDLGFBQWFGLEdBQUcsWUFBWSxnQkFBZ0JHLG1CQUFtQkgsR0FBRyxZQUFZLHNCQUFzQkksZUFBZUosR0FBRyxZQUFZLGtCQUFrQkssY0FBY0wsR0FBRyxhQUFhLGtCQUFrQk0sR0FBRyxDQUFDLEVBQUVDLEdBQUcsQ0FBQyxFQUNwRixTQUFTQyxHQUFHdGpGLEdBQUcsR0FBR29qRixHQUFHcGpGLEdBQUcsT0FBT29qRixHQUFHcGpGLEdBQUcsSUFBSStpRixHQUFHL2lGLEdBQUcsT0FBT0EsRUFBRSxJQUFZcWdCLEVBQVJwZ0IsRUFBRThpRixHQUFHL2lGLEdBQUssSUFBSXFnQixLQUFLcGdCLEVBQUUsR0FBR0EsRUFBRWhILGVBQWVvbkIsSUFBSUEsS0FBS2dqRSxHQUFHLE9BQU9ELEdBQUdwakYsR0FBR0MsRUFBRW9nQixHQUFHLE9BQU9yZ0IsQ0FBQyxDQUEvWGdrRSxJQUFLcWYsR0FBR3RsRCxTQUFTa1AsY0FBYyxPQUFPNC9CLE1BQU0sbUJBQW1CL3VDLGdCQUFnQmlsRCxHQUFHQyxhQUFhTyxpQkFBaUJSLEdBQUdFLG1CQUFtQk0saUJBQWlCUixHQUFHRyxlQUFlSyxXQUFXLG9CQUFvQnpsRCxlQUFlaWxELEdBQUdJLGNBQWN0TixZQUF3SixJQUFJMk4sR0FBR0YsR0FBRyxnQkFBZ0JHLEdBQUdILEdBQUcsc0JBQXNCSSxHQUFHSixHQUFHLGtCQUFrQkssR0FBR0wsR0FBRyxpQkFBaUJNLEdBQUcsSUFBSXZsRSxJQUFJd2xFLEdBQUcsc21CQUFzbUJ4Z0YsTUFBTSxLQUMvbEMsU0FBU3lnRixHQUFHOWpGLEVBQUVDLEdBQUcyakYsR0FBRy8xRSxJQUFJN04sRUFBRUMsR0FBRzZqRSxFQUFHN2pFLEVBQUUsQ0FBQ0QsR0FBRyxDQUFDLElBQUksSUFBSStqRixHQUFHLEVBQUVBLEdBQUdGLEdBQUdydkYsT0FBT3V2RixLQUFLLENBQUMsSUFBSUMsR0FBR0gsR0FBR0UsSUFBMkRELEdBQXBERSxHQUFHbndFLGNBQXVELE1BQXRDbXdFLEdBQUcsR0FBR25nRixjQUFjbWdGLEdBQUd2cEYsTUFBTSxJQUFpQixDQUFDcXBGLEdBQUdOLEdBQUcsa0JBQWtCTSxHQUFHTCxHQUFHLHdCQUF3QkssR0FBR0osR0FBRyxvQkFBb0JJLEdBQUcsV0FBVyxpQkFBaUJBLEdBQUcsVUFBVSxXQUFXQSxHQUFHLFdBQVcsVUFBVUEsR0FBR0gsR0FBRyxtQkFBbUI1ZixFQUFHLGVBQWUsQ0FBQyxXQUFXLGNBQWNBLEVBQUcsZUFBZSxDQUFDLFdBQVcsY0FBY0EsRUFBRyxpQkFBaUIsQ0FBQyxhQUFhLGdCQUM3Y0EsRUFBRyxpQkFBaUIsQ0FBQyxhQUFhLGdCQUFnQkQsRUFBRyxXQUFXLG9FQUFvRXpnRSxNQUFNLE1BQU15Z0UsRUFBRyxXQUFXLHVGQUF1RnpnRSxNQUFNLE1BQU15Z0UsRUFBRyxnQkFBZ0IsQ0FBQyxpQkFBaUIsV0FBVyxZQUFZLFVBQVVBLEVBQUcsbUJBQW1CLDJEQUEyRHpnRSxNQUFNLE1BQU15Z0UsRUFBRyxxQkFBcUIsNkRBQTZEemdFLE1BQU0sTUFDL2Z5Z0UsRUFBRyxzQkFBc0IsOERBQThEemdFLE1BQU0sTUFBTSxJQUFJNGdGLEdBQUcsNk5BQTZONWdGLE1BQU0sS0FBSzZnRixHQUFHLElBQUl4bkYsSUFBSSwwQ0FBMEMyRyxNQUFNLEtBQUszSSxPQUFPdXBGLEtBQ3paLFNBQVNFLEdBQUdua0YsRUFBRUMsRUFBRW9nQixHQUFHLElBQUk1UCxFQUFFelEsRUFBRXpFLE1BQU0sZ0JBQWdCeUUsRUFBRWczRSxjQUFjMzJELEVBbERqRSxTQUFZcmdCLEVBQUVDLEVBQUVvZ0IsRUFBRTVQLEVBQUU1VCxFQUFFZ2dFLEVBQUVoL0IsRUFBRWlwQyxFQUFFcHlFLEdBQTRCLEdBQXpCaTdFLEdBQUd2NkUsTUFBTWpCLEtBQUtJLFdBQWMrNkUsR0FBRyxDQUFDLElBQUdBLEdBQWdDLE1BQU1oc0UsTUFBTXRLLEVBQUUsTUFBMUMsSUFBSXdCLEVBQUUrMEUsR0FBR0QsSUFBRyxFQUFHQyxHQUFHLEtBQThCQyxLQUFLQSxJQUFHLEVBQUdDLEdBQUdqMUUsRUFBRSxDQUFDLENBa0RwRTRwRixDQUFHM3pFLEVBQUV4USxPQUFFLEVBQU9ELEdBQUdBLEVBQUVnM0UsY0FBYyxJQUFJLENBQ3hHLFNBQVNxSSxHQUFHci9FLEVBQUVDLEdBQUdBLEtBQVMsRUFBRkEsR0FBSyxJQUFJLElBQUlvZ0IsRUFBRSxFQUFFQSxFQUFFcmdCLEVBQUV4TCxPQUFPNnJCLElBQUksQ0FBQyxJQUFJNVAsRUFBRXpRLEVBQUVxZ0IsR0FBR3hqQixFQUFFNFQsRUFBRWd3QixNQUFNaHdCLEVBQUVBLEVBQUV3dUUsVUFBVWovRSxFQUFFLENBQUMsSUFBSTY4RCxPQUFFLEVBQU8sR0FBRzU4RCxFQUFFLElBQUksSUFBSTQ5QixFQUFFcHRCLEVBQUVqYyxPQUFPLEVBQUUsR0FBR3FwQyxFQUFFQSxJQUFJLENBQUMsSUFBSWlwQyxFQUFFcjJELEVBQUVvdEIsR0FBR25wQyxFQUFFb3lFLEVBQUVyMUQsU0FBU2pYLEVBQUVzc0UsRUFBRWtRLGNBQTJCLEdBQWJsUSxFQUFFQSxFQUFFdWQsU0FBWTN2RixJQUFJbW9FLEdBQUdoZ0UsRUFBRXU2RSx1QkFBdUIsTUFBTXAzRSxFQUFFbWtGLEdBQUd0bkYsRUFBRWlxRSxFQUFFdHNFLEdBQUdxaUUsRUFBRW5vRSxDQUFDLE1BQU0sSUFBSW1wQyxFQUFFLEVBQUVBLEVBQUVwdEIsRUFBRWpjLE9BQU9xcEMsSUFBSSxDQUFvRCxHQUE1Q25wQyxHQUFQb3lFLEVBQUVyMkQsRUFBRW90QixJQUFPcHNCLFNBQVNqWCxFQUFFc3NFLEVBQUVrUSxjQUFjbFEsRUFBRUEsRUFBRXVkLFNBQVkzdkYsSUFBSW1vRSxHQUFHaGdFLEVBQUV1NkUsdUJBQXVCLE1BQU1wM0UsRUFBRW1rRixHQUFHdG5GLEVBQUVpcUUsRUFBRXRzRSxHQUFHcWlFLEVBQUVub0UsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHODZFLEdBQUcsTUFBTXh2RSxFQUFFeXZFLEdBQUdELElBQUcsRUFBR0MsR0FBRyxLQUFLenZFLENBQUUsQ0FDNWEsU0FBU3NrRixHQUFFdGtGLEVBQUVDLEdBQUcsSUFBSW9nQixFQUFFcGdCLEVBQUVza0YsU0FBSSxJQUFTbGtFLElBQUlBLEVBQUVwZ0IsRUFBRXNrRixJQUFJLElBQUk3bkYsS0FBSyxJQUFJK1QsRUFBRXpRLEVBQUUsV0FBV3FnQixFQUFFdGpCLElBQUkwVCxLQUFLK3pFLEdBQUd2a0YsRUFBRUQsRUFBRSxHQUFFLEdBQUlxZ0IsRUFBRW5qQixJQUFJdVQsR0FBRyxDQUFDLFNBQVNnMEUsR0FBR3prRixFQUFFQyxFQUFFb2dCLEdBQUcsSUFBSTVQLEVBQUUsRUFBRXhRLElBQUl3USxHQUFHLEdBQUcrekUsR0FBR25rRSxFQUFFcmdCLEVBQUV5USxFQUFFeFEsRUFBRSxDQUFDLElBQUl5a0YsR0FBRyxrQkFBa0JobUYsS0FBS2ltRixTQUFTcDlFLFNBQVMsSUFBSTlNLE1BQU0sR0FBRyxTQUFTbXFGLEdBQUc1a0YsR0FBRyxJQUFJQSxFQUFFMGtGLElBQUksQ0FBQzFrRixFQUFFMGtGLEtBQUksRUFBRzlnQixFQUFHNW1FLFNBQVEsU0FBU2lELEdBQUcsb0JBQW9CQSxJQUFJaWtGLEdBQUdubkYsSUFBSWtELElBQUl3a0YsR0FBR3hrRixHQUFFLEVBQUdELEdBQUd5a0YsR0FBR3hrRixHQUFFLEVBQUdELEdBQUcsSUFBRyxJQUFJQyxFQUFFLElBQUlELEVBQUVnM0IsU0FBU2gzQixFQUFFQSxFQUFFeW9FLGNBQWMsT0FBT3hvRSxHQUFHQSxFQUFFeWtGLE1BQU16a0YsRUFBRXlrRixLQUFJLEVBQUdELEdBQUcsbUJBQWtCLEVBQUd4a0YsR0FBRyxDQUFDLENBQ2piLFNBQVN1a0YsR0FBR3hrRixFQUFFQyxFQUFFb2dCLEVBQUU1UCxHQUFHLE9BQU8wbEUsR0FBR2wyRSxJQUFJLEtBQUssRUFBRSxJQUFJcEQsRUFBRSs0RSxHQUFHLE1BQU0sS0FBSyxFQUFFLzRFLEVBQUVrNUUsR0FBRyxNQUFNLFFBQVFsNUUsRUFBRWk1RSxHQUFHejFELEVBQUV4akIsRUFBRWhHLEtBQUssS0FBS29KLEVBQUVvZ0IsRUFBRXJnQixHQUFHbkQsT0FBRSxHQUFRbXlFLElBQUksZUFBZS91RSxHQUFHLGNBQWNBLEdBQUcsVUFBVUEsSUFBSXBELEdBQUUsR0FBSTRULE9BQUUsSUFBUzVULEVBQUVtRCxFQUFFa3ZFLGlCQUFpQmp2RSxFQUFFb2dCLEVBQUUsQ0FBQ3drRSxTQUFRLEVBQUdDLFFBQVFqb0YsSUFBSW1ELEVBQUVrdkUsaUJBQWlCanZFLEVBQUVvZ0IsR0FBRSxRQUFJLElBQVN4akIsRUFBRW1ELEVBQUVrdkUsaUJBQWlCanZFLEVBQUVvZ0IsRUFBRSxDQUFDeWtFLFFBQVFqb0YsSUFBSW1ELEVBQUVrdkUsaUJBQWlCanZFLEVBQUVvZ0IsR0FBRSxFQUFHLENBQ2xWLFNBQVMyMUQsR0FBR2gyRSxFQUFFQyxFQUFFb2dCLEVBQUU1UCxFQUFFNVQsR0FBRyxJQUFJZ2dFLEVBQUVwc0QsRUFBRSxLQUFVLEVBQUZ4USxHQUFhLEVBQUZBLEdBQU0sT0FBT3dRLEdBQUV6USxFQUFFLE9BQU8sQ0FBQyxHQUFHLE9BQU95USxFQUFFLE9BQU8sSUFBSW90QixFQUFFcHRCLEVBQUVzVSxJQUFJLEdBQUcsSUFBSThZLEdBQUcsSUFBSUEsRUFBRSxDQUFDLElBQUlpcEMsRUFBRXIyRCxFQUFFODlELFVBQVUwRyxjQUFjLEdBQUduTyxJQUFJanFFLEdBQUcsSUFBSWlxRSxFQUFFOXZDLFVBQVU4dkMsRUFBRW1ILGFBQWFweEUsRUFBRSxNQUFNLEdBQUcsSUFBSWdoQyxFQUFFLElBQUlBLEVBQUVwdEIsRUFBRW8vRCxPQUFPLE9BQU9oeUMsR0FBRyxDQUFDLElBQUlucEMsRUFBRW1wQyxFQUFFOVksSUFBSSxJQUFHLElBQUlyd0IsR0FBRyxJQUFJQSxNQUFLQSxFQUFFbXBDLEVBQUUwd0MsVUFBVTBHLGlCQUFrQnA0RSxHQUFHLElBQUluSSxFQUFFc2lDLFVBQVV0aUMsRUFBRXU1RSxhQUFhcHhFLEdBQUUsT0FBT2doQyxFQUFFQSxFQUFFZ3lDLE1BQU0sQ0FBQyxLQUFLLE9BQU8vSSxHQUFHLENBQVMsR0FBRyxRQUFYanBDLEVBQUVpM0MsR0FBR2hPLElBQWUsT0FBZSxHQUFHLEtBQVhweUUsRUFBRW1wQyxFQUFFOVksTUFBYyxJQUFJcndCLEVBQUUsQ0FBQytiLEVBQUVvc0QsRUFBRWgvQixFQUFFLFNBQVM3OUIsQ0FBQyxDQUFDOG1FLEVBQUVBLEVBQUVtSCxVQUFVLENBQUMsQ0FBQ3g5RCxFQUFFQSxFQUFFby9ELE1BQU0sQ0FBQ2YsSUFBRyxXQUFXLElBQUlyK0QsRUFBRW9zRCxFQUFFaGdFLEVBQUVpeEUsR0FBR3p0RCxHQUFHd2QsRUFBRSxHQUNwZjc5QixFQUFFLENBQUMsSUFBSThtRSxFQUFFOGMsR0FBRzlwRixJQUFJa0csR0FBRyxRQUFHLElBQVM4bUUsRUFBRSxDQUFDLElBQUlweUUsRUFBRXlqRixHQUFHcC9FLEVBQUVpSCxFQUFFLE9BQU9BLEdBQUcsSUFBSyxXQUFXLEdBQUcsSUFBSXcyRSxHQUFHbjJELEdBQUcsTUFBTXJnQixFQUFFLElBQUssVUFBVSxJQUFLLFFBQVF0TCxFQUFFcW5GLEdBQUcsTUFBTSxJQUFLLFVBQVVoakYsRUFBRSxRQUFRckUsRUFBRW9sRixHQUFHLE1BQU0sSUFBSyxXQUFXL2dGLEVBQUUsT0FBT3JFLEVBQUVvbEYsR0FBRyxNQUFNLElBQUssYUFBYSxJQUFLLFlBQVlwbEYsRUFBRW9sRixHQUFHLE1BQU0sSUFBSyxRQUFRLEdBQUcsSUFBSXo1RCxFQUFFdkUsT0FBTyxNQUFNOWIsRUFBRSxJQUFLLFdBQVcsSUFBSyxXQUFXLElBQUssWUFBWSxJQUFLLFlBQVksSUFBSyxVQUFVLElBQUssV0FBVyxJQUFLLFlBQVksSUFBSyxjQUFjdEwsRUFBRWlsRixHQUFHLE1BQU0sSUFBSyxPQUFPLElBQUssVUFBVSxJQUFLLFlBQVksSUFBSyxXQUFXLElBQUssWUFBWSxJQUFLLFdBQVcsSUFBSyxZQUFZLElBQUssT0FBT2psRixFQUMxaUJrbEYsR0FBRyxNQUFNLElBQUssY0FBYyxJQUFLLFdBQVcsSUFBSyxZQUFZLElBQUssYUFBYWxsRixFQUFFZ29GLEdBQUcsTUFBTSxLQUFLOEcsR0FBRyxLQUFLQyxHQUFHLEtBQUtDLEdBQUdodkYsRUFBRXFsRixHQUFHLE1BQU0sS0FBSzRKLEdBQUdqdkYsRUFBRW9vRixHQUFHLE1BQU0sSUFBSyxTQUFTcG9GLEVBQUU2akYsR0FBRyxNQUFNLElBQUssUUFBUTdqRixFQUFFNm9GLEdBQUcsTUFBTSxJQUFLLE9BQU8sSUFBSyxNQUFNLElBQUssUUFBUTdvRixFQUFFMmxGLEdBQUcsTUFBTSxJQUFLLG9CQUFvQixJQUFLLHFCQUFxQixJQUFLLGdCQUFnQixJQUFLLGNBQWMsSUFBSyxjQUFjLElBQUssYUFBYSxJQUFLLGNBQWMsSUFBSyxZQUFZM2xGLEVBQUVzbkYsR0FBRyxJQUFJcGpGLEtBQVMsRUFBRnFILEdBQUs4a0YsR0FBR25zRixHQUFHLFdBQVdvSCxFQUFFNFQsRUFBRWhiLEVBQUUsT0FBT2t1RSxFQUFFQSxFQUFFLFVBQVUsS0FBS0EsRUFBRWx1RSxFQUFFLEdBQUcsSUFBSSxJQUFRb3NGLEVBQUpodkIsRUFBRXZsRCxFQUFJLE9BQy9ldWxELEdBQUcsQ0FBSyxJQUFJaXZCLEdBQVJELEVBQUVodkIsR0FBVXVZLFVBQXNGLEdBQTVFLElBQUl5VyxFQUFFamdFLEtBQUssT0FBT2tnRSxJQUFJRCxFQUFFQyxFQUFFLE9BQU9yeEUsR0FBYyxPQUFWcXhFLEVBQUVsVyxHQUFHL1ksRUFBRXBpRCxLQUFZaGIsRUFBRUgsS0FBS3lzRixHQUFHbHZCLEVBQUVpdkIsRUFBRUQsS0FBU0QsRUFBRSxNQUFNL3VCLEVBQUVBLEVBQUU2WixNQUFNLENBQUMsRUFBRWozRSxFQUFFcEUsU0FBU3N5RSxFQUFFLElBQUlweUUsRUFBRW95RSxFQUFFL3RFLEVBQUUsS0FBS3NuQixFQUFFeGpCLEdBQUdnaEMsRUFBRXBsQyxLQUFLLENBQUNnb0MsTUFBTXFtQyxFQUFFbVksVUFBVXJtRixJQUFJLENBQUMsQ0FBQyxLQUFVLEVBQUZxSCxHQUFLLENBQTRFLEdBQW5DdkwsRUFBRSxhQUFhc0wsR0FBRyxlQUFlQSxLQUF0RThtRSxFQUFFLGNBQWM5bUUsR0FBRyxnQkFBZ0JBLElBQTJDcWdCLElBQUl3dEQsTUFBSzkwRSxFQUFFc25CLEVBQUVpNUQsZUFBZWo1RCxFQUFFazVELGVBQWV6RSxHQUFHLzdFLEtBQUlBLEVBQUVvc0YsT0FBZ0J6d0YsR0FBR295RSxLQUFHQSxFQUFFanFFLEVBQUVpaEMsU0FBU2poQyxFQUFFQSxHQUFHaXFFLEVBQUVqcUUsRUFBRTRyRSxlQUFlM0IsRUFBRXlhLGFBQWF6YSxFQUFFc2UsYUFBYXRuRCxPQUFVcHBDLEdBQXFDQSxFQUFFK2IsRUFBaUIsUUFBZjFYLEdBQW5DQSxFQUFFc25CLEVBQUVpNUQsZUFBZWo1RCxFQUFFbTVELFdBQWtCMUUsR0FBRy83RSxHQUFHLFFBQzlkQSxLQUFSZ3NGLEVBQUVuVixHQUFHNzJFLEtBQVUsSUFBSUEsRUFBRWdzQixLQUFLLElBQUloc0IsRUFBRWdzQixPQUFLaHNCLEVBQUUsUUFBVXJFLEVBQUUsS0FBS3FFLEVBQUUwWCxHQUFLL2IsSUFBSXFFLEdBQUUsQ0FBZ1UsR0FBL1RILEVBQUUrZ0YsR0FBR3NMLEVBQUUsZUFBZXJ4RSxFQUFFLGVBQWVvaUQsRUFBRSxRQUFXLGVBQWVoMkQsR0FBRyxnQkFBZ0JBLElBQUVwSCxFQUFFb2pGLEdBQUdpSixFQUFFLGlCQUFpQnJ4RSxFQUFFLGlCQUFpQm9pRCxFQUFFLFdBQVUrdUIsRUFBRSxNQUFNcndGLEVBQUVveUUsRUFBRXlZLEdBQUc3cUYsR0FBR3N3RixFQUFFLE1BQU1qc0YsRUFBRSt0RSxFQUFFeVksR0FBR3htRixJQUFHK3RFLEVBQUUsSUFBSWx1RSxFQUFFcXNGLEVBQUVqdkIsRUFBRSxRQUFRdGhFLEVBQUUyckIsRUFBRXhqQixJQUFLMk4sT0FBT3U2RSxFQUFFamUsRUFBRXdTLGNBQWMwTCxFQUFFQyxFQUFFLEtBQUtuUSxHQUFHajRFLEtBQUs0VCxLQUFJN1gsRUFBRSxJQUFJQSxFQUFFZ2IsRUFBRW9pRCxFQUFFLFFBQVFqOUQsRUFBRXNuQixFQUFFeGpCLElBQUsyTixPQUFPdzZFLEVBQUVwc0YsRUFBRTBnRixjQUFjeUwsRUFBRUUsRUFBRXJzRixHQUFHbXNGLEVBQUVFLEVBQUt2d0YsR0FBR3FFLEVBQUVrSCxFQUFFLENBQWEsSUFBUjJULEVBQUU3YSxFQUFFaTlELEVBQUUsRUFBTWd2QixFQUFoQnBzRixFQUFFbEUsRUFBa0Jzd0YsRUFBRUEsRUFBRUssR0FBR0wsR0FBR2h2QixJQUFRLElBQUpndkIsRUFBRSxFQUFNQyxFQUFFcnhFLEVBQUVxeEUsRUFBRUEsRUFBRUksR0FBR0osR0FBR0QsSUFBSSxLQUFLLEVBQUVodkIsRUFBRWd2QixHQUFHcHNGLEVBQUV5c0YsR0FBR3pzRixHQUFHbzlELElBQUksS0FBSyxFQUFFZ3ZCLEVBQUVodkIsR0FBR3BpRCxFQUNwZnl4RSxHQUFHenhFLEdBQUdveEUsSUFBSSxLQUFLaHZCLEtBQUssQ0FBQyxHQUFHcDlELElBQUlnYixHQUFHLE9BQU9BLEdBQUdoYixJQUFJZ2IsRUFBRXFuQyxVQUFVLE1BQU1oN0MsRUFBRXJILEVBQUV5c0YsR0FBR3pzRixHQUFHZ2IsRUFBRXl4RSxHQUFHenhFLEVBQUUsQ0FBQ2hiLEVBQUUsSUFBSSxNQUFNQSxFQUFFLEtBQUssT0FBT2xFLEdBQUc0d0YsR0FBR3puRCxFQUFFaXBDLEVBQUVweUUsRUFBRWtFLEdBQUUsR0FBSSxPQUFPRyxHQUFHLE9BQU9nc0YsR0FBR08sR0FBR3puRCxFQUFFa25ELEVBQUVoc0YsRUFBRUgsR0FBRSxFQUFHLENBQThELEdBQUcsWUFBMUNsRSxHQUFqQm95RSxFQUFFcjJELEVBQUU4dUUsR0FBRzl1RSxHQUFHcXRCLFFBQVdvL0IsVUFBVTRKLEVBQUU1SixTQUFTcnBELGdCQUErQixVQUFVbmYsR0FBRyxTQUFTb3lFLEVBQUV2ckUsS0FBSyxJQUFJZ3FGLEVBQUcvRixRQUFRLEdBQUdWLEdBQUdoWSxHQUFHLEdBQUcyWSxHQUFHOEYsRUFBR2xGLE9BQU8sQ0FBQ2tGLEVBQUdwRixHQUFHLElBQUlxRixFQUFHdkYsRUFBRSxNQUFNdnJGLEVBQUVveUUsRUFBRTVKLFdBQVcsVUFBVXhvRSxFQUFFbWYsZ0JBQWdCLGFBQWFpekQsRUFBRXZyRSxNQUFNLFVBQVV1ckUsRUFBRXZyRSxRQUFRZ3FGLEVBQUduRixJQUNyVixPQUQ0Vm1GLElBQUtBLEVBQUdBLEVBQUd2bEYsRUFBRXlRLElBQUtzdUUsR0FBR2xoRCxFQUFFMG5ELEVBQUdsbEUsRUFBRXhqQixJQUFXMm9GLEdBQUlBLEVBQUd4bEYsRUFBRThtRSxFQUFFcjJELEdBQUcsYUFBYXpRLElBQUl3bEYsRUFBRzFlLEVBQUVtQixnQkFDbGZ1ZCxFQUFHcGQsWUFBWSxXQUFXdEIsRUFBRXZyRSxNQUFNZ3RFLEdBQUd6QixFQUFFLFNBQVNBLEVBQUVydkUsUUFBTyt0RixFQUFHLzBFLEVBQUU4dUUsR0FBRzl1RSxHQUFHcXRCLE9BQWM5OUIsR0FBRyxJQUFLLFdBQWE4K0UsR0FBRzBHLElBQUssU0FBU0EsRUFBR3hFLG1CQUFnQnlCLEdBQUcrQyxFQUFHOUMsR0FBR2p5RSxFQUFFa3lFLEdBQUcsTUFBSyxNQUFNLElBQUssV0FBV0EsR0FBR0QsR0FBR0QsR0FBRyxLQUFLLE1BQU0sSUFBSyxZQUFZRyxJQUFHLEVBQUcsTUFBTSxJQUFLLGNBQWMsSUFBSyxVQUFVLElBQUssVUFBVUEsSUFBRyxFQUFHQyxHQUFHaGxELEVBQUV4ZCxFQUFFeGpCLEdBQUcsTUFBTSxJQUFLLGtCQUFrQixHQUFHMmxGLEdBQUcsTUFBTSxJQUFLLFVBQVUsSUFBSyxRQUFRSyxHQUFHaGxELEVBQUV4ZCxFQUFFeGpCLEdBQUcsSUFBSTRvRixFQUFHLEdBQUdoSSxHQUFHeDlFLEVBQUUsQ0FBQyxPQUFPRCxHQUFHLElBQUssbUJBQW1CLElBQUkwbEYsRUFBRyxxQkFBcUIsTUFBTXpsRixFQUFFLElBQUssaUJBQWlCeWxGLEVBQUcsbUJBQ3BlLE1BQU16bEYsRUFBRSxJQUFLLG9CQUFvQnlsRixFQUFHLHNCQUFzQixNQUFNemxGLEVBQUV5bEYsT0FBRyxDQUFNLE1BQU14SCxHQUFHRixHQUFHaCtFLEVBQUVxZ0IsS0FBS3FsRSxFQUFHLG9CQUFvQixZQUFZMWxGLEdBQUcsTUFBTXFnQixFQUFFbzJELFVBQVVpUCxFQUFHLHNCQUFzQkEsSUFBSzdILElBQUksT0FBT3g5RCxFQUFFdzdELFNBQVNxQyxJQUFJLHVCQUF1QndILEVBQUcscUJBQXFCQSxHQUFJeEgsS0FBS3VILEVBQUdsUCxPQUFZRixHQUFHLFVBQVJELEdBQUd2NUUsR0FBa0J1NUUsR0FBRzMrRSxNQUFNMitFLEdBQUdoeUUsWUFBWTg1RSxJQUFHLElBQWlCLEdBQVpzSCxFQUFHeEcsR0FBR3Z1RSxFQUFFaTFFLElBQVNseEYsU0FBU2t4RixFQUFHLElBQUlwTCxHQUFHb0wsRUFBRzFsRixFQUFFLEtBQUtxZ0IsRUFBRXhqQixHQUFHZ2hDLEVBQUVwbEMsS0FBSyxDQUFDZ29DLE1BQU1pbEQsRUFBR3pHLFVBQVV1RyxLQUFLQyxHQUF3QixRQUFUQSxFQUFHeEgsR0FBRzU5RCxPQUFsQnFsRSxFQUFHN3BGLEtBQUs0cEYsTUFBMkNBLEVBQUc3SCxHQTVCaE0sU0FBWTU5RSxFQUFFQyxHQUFHLE9BQU9ELEdBQUcsSUFBSyxpQkFBaUIsT0FBT2krRSxHQUFHaCtFLEdBQUcsSUFBSyxXQUFXLE9BQUcsS0FBS0EsRUFBRTY3RSxNQUFhLE1BQUtpQyxJQUFHLEVBQVVELElBQUcsSUFBSyxZQUFZLE9BQU85OUUsRUFBRUMsRUFBRXBFLFFBQVNpaUYsSUFBSUMsR0FBRyxLQUFLLzlFLEVBQUUsUUFBUSxPQUFPLEtBQUssQ0E0QkUybEYsQ0FBRzNsRixFQUFFcWdCLEdBM0J6ZCxTQUFZcmdCLEVBQUVDLEdBQUcsR0FBR2krRSxHQUFHLE1BQU0sbUJBQW1CbCtFLElBQUl5OUUsSUFBSU8sR0FBR2grRSxFQUFFQyxJQUFJRCxFQUFFdTJFLEtBQUtELEdBQUdELEdBQUdELEdBQUcsS0FBSzhILElBQUcsRUFBR2wrRSxHQUFHLEtBQUssT0FBT0EsR0FBRyxJQUFLLFFBQWdRLFFBQVEsT0FBTyxLQUEzUCxJQUFLLFdBQVcsS0FBS0MsRUFBRTg0RSxTQUFTOTRFLEVBQUVnNUUsUUFBUWg1RSxFQUFFaTVFLFVBQVVqNUUsRUFBRTg0RSxTQUFTOTRFLEVBQUVnNUUsT0FBTyxDQUFDLEdBQUdoNUUsRUFBRTh2QixNQUFNLEVBQUU5dkIsRUFBRTh2QixLQUFLdjdCLE9BQU8sT0FBT3lMLEVBQUU4dkIsS0FBSyxHQUFHOXZCLEVBQUU2N0UsTUFBTSxPQUFPLzRFLE9BQU9tZCxhQUFhamdCLEVBQUU2N0UsTUFBTSxDQUFDLE9BQU8sS0FBSyxJQUFLLGlCQUFpQixPQUFPK0IsSUFBSSxPQUFPNTlFLEVBQUU0N0UsT0FBTyxLQUFLNTdFLEVBQUVwRSxLQUF5QixDQTJCcUYrcEYsQ0FBRzVsRixFQUFFcWdCLEtBQ2plLEdBRG9lNVAsRUFBRXV1RSxHQUFHdnVFLEVBQUUsa0JBQ3ZlamMsU0FBU3FJLEVBQUUsSUFBSXk5RSxHQUFHLGdCQUFnQixjQUFjLEtBQUtqNkQsRUFBRXhqQixHQUFHZ2hDLEVBQUVwbEMsS0FBSyxDQUFDZ29DLE1BQU01akMsRUFBRW9pRixVQUFVeHVFLElBQUk1VCxFQUFFaEIsS0FBSzRwRixFQUFHLENBQUNwRyxHQUFHeGhELEVBQUU1OUIsRUFBRSxHQUFFLENBQUMsU0FBU2lsRixHQUFHbGxGLEVBQUVDLEVBQUVvZ0IsR0FBRyxNQUFNLENBQUM1TyxTQUFTelIsRUFBRXFrRixTQUFTcGtGLEVBQUUrMkUsY0FBYzMyRCxFQUFFLENBQUMsU0FBUzIrRCxHQUFHaC9FLEVBQUVDLEdBQUcsSUFBSSxJQUFJb2dCLEVBQUVwZ0IsRUFBRSxVQUFVd1EsRUFBRSxHQUFHLE9BQU96USxHQUFHLENBQUMsSUFBSW5ELEVBQUVtRCxFQUFFNjhELEVBQUVoZ0UsRUFBRTB4RSxVQUFVLElBQUkxeEUsRUFBRWtvQixLQUFLLE9BQU84M0MsSUFBSWhnRSxFQUFFZ2dFLEVBQVksT0FBVkEsRUFBRWtTLEdBQUcvdUUsRUFBRXFnQixLQUFZNVAsRUFBRXJSLFFBQVE4bEYsR0FBR2xsRixFQUFFNjhELEVBQUVoZ0UsSUFBYyxPQUFWZ2dFLEVBQUVrUyxHQUFHL3VFLEVBQUVDLEtBQVl3USxFQUFFaFksS0FBS3lzRixHQUFHbGxGLEVBQUU2OEQsRUFBRWhnRSxLQUFLbUQsRUFBRUEsRUFBRTZ2RSxNQUFNLENBQUMsT0FBT3AvRCxDQUFDLENBQUMsU0FBUzQwRSxHQUFHcmxGLEdBQUcsR0FBRyxPQUFPQSxFQUFFLE9BQU8sS0FBSyxHQUFHQSxFQUFFQSxFQUFFNnZFLGFBQWE3dkUsR0FBRyxJQUFJQSxFQUFFK2tCLEtBQUssT0FBTy9rQixHQUFJLElBQUksQ0FDbmQsU0FBU3NsRixHQUFHdGxGLEVBQUVDLEVBQUVvZ0IsRUFBRTVQLEVBQUU1VCxHQUFHLElBQUksSUFBSWdnRSxFQUFFNThELEVBQUU2MkUsV0FBV2o1QyxFQUFFLEdBQUcsT0FBT3hkLEdBQUdBLElBQUk1UCxHQUFHLENBQUMsSUFBSXEyRCxFQUFFem1ELEVBQUUzckIsRUFBRW95RSxFQUFFN3JCLFVBQVV6Z0QsRUFBRXNzRSxFQUFFeUgsVUFBVSxHQUFHLE9BQU83NUUsR0FBR0EsSUFBSStiLEVBQUUsTUFBTSxJQUFJcTJELEVBQUUvaEQsS0FBSyxPQUFPdnFCLElBQUlzc0UsRUFBRXRzRSxFQUFFcUMsRUFBYSxPQUFWbkksRUFBRXE2RSxHQUFHMXVELEVBQUV3OEMsS0FBWWgvQixFQUFFeitCLFFBQVE4bEYsR0FBRzdrRSxFQUFFM3JCLEVBQUVveUUsSUFBS2pxRSxHQUFjLE9BQVZuSSxFQUFFcTZFLEdBQUcxdUQsRUFBRXc4QyxLQUFZaC9CLEVBQUVwbEMsS0FBS3lzRixHQUFHN2tFLEVBQUUzckIsRUFBRW95RSxLQUFNem1ELEVBQUVBLEVBQUV3dkQsTUFBTSxDQUFDLElBQUloeUMsRUFBRXJwQyxRQUFRd0wsRUFBRXZILEtBQUssQ0FBQ2dvQyxNQUFNeGdDLEVBQUVnL0UsVUFBVXBoRCxHQUFHLENBQUMsSUFBSWdvRCxHQUFHLFNBQVNDLEdBQUcsaUJBQWlCLFNBQVNDLEdBQUcvbEYsR0FBRyxPQUFPLGlCQUFrQkEsRUFBRUEsRUFBRSxHQUFHQSxHQUFHb0gsUUFBUXkrRSxHQUFHLE1BQU16K0UsUUFBUTArRSxHQUFHLEdBQUcsQ0FBQyxTQUFTRSxHQUFHaG1GLEVBQUVDLEVBQUVvZ0IsR0FBVyxHQUFScGdCLEVBQUU4bEYsR0FBRzlsRixHQUFNOGxGLEdBQUcvbEYsS0FBS0MsR0FBR29nQixFQUFFLE1BQU0vYyxNQUFNdEssRUFBRSxLQUFNLENBQUMsU0FBU2l0RixLQUFLLENBQzllLElBQUlDLEdBQUcsS0FBS0MsR0FBRyxLQUFLLFNBQVNDLEdBQUdwbUYsRUFBRUMsR0FBRyxNQUFNLGFBQWFELEdBQUcsYUFBYUEsR0FBRyxpQkFBa0JDLEVBQUU2QixVQUFVLGlCQUFrQjdCLEVBQUU2QixVQUFVLGlCQUFrQjdCLEVBQUU2b0UseUJBQXlCLE9BQU83b0UsRUFBRTZvRSx5QkFBeUIsTUFBTTdvRSxFQUFFNm9FLHdCQUF3QnVkLE1BQU0sQ0FDNVAsSUFBSUMsR0FBRyxtQkFBb0JDLFdBQVdBLGdCQUFXLEVBQU9DLEdBQUcsbUJBQW9CQyxhQUFhQSxrQkFBYSxFQUFPQyxHQUFHLG1CQUFvQjd1QyxRQUFRQSxhQUFRLEVBQU84dUMsR0FBRyxtQkFBb0JDLGVBQWVBLG9CQUFlLElBQXFCRixHQUFHLFNBQVMxbUYsR0FBRyxPQUFPMG1GLEdBQUd4ekIsUUFBUSxNQUFNMnpCLEtBQUs3bUYsR0FBRzhtRixNQUFNQyxHQUFHLEVBQUVULEdBQUcsU0FBU1MsR0FBRy9tRixHQUFHdW1GLFlBQVcsV0FBVyxNQUFNdm1GLENBQUUsR0FBRSxDQUNwVixTQUFTZ25GLEdBQUdobkYsRUFBRUMsR0FBRyxJQUFJb2dCLEVBQUVwZ0IsRUFBRXdRLEVBQUUsRUFBRSxFQUFFLENBQUMsSUFBSTVULEVBQUV3akIsRUFBRXFnRSxZQUE2QixHQUFqQjFnRixFQUFFd3BFLFlBQVlucEQsR0FBTXhqQixHQUFHLElBQUlBLEVBQUVtNkIsU0FBUyxHQUFZLFFBQVQzVyxFQUFFeGpCLEVBQUVoQixNQUFjLENBQUMsR0FBRyxJQUFJNFUsRUFBMEIsT0FBdkJ6USxFQUFFd3BFLFlBQVkzc0UsUUFBRzI0RSxHQUFHdjFFLEdBQVV3USxHQUFHLEtBQUssTUFBTTRQLEdBQUcsT0FBT0EsR0FBRyxPQUFPQSxHQUFHNVAsSUFBSTRQLEVBQUV4akIsQ0FBQyxPQUFPd2pCLEdBQUdtMUQsR0FBR3YxRSxFQUFFLENBQUMsU0FBU2duRixHQUFHam5GLEdBQUcsS0FBSyxNQUFNQSxFQUFFQSxFQUFFQSxFQUFFMGdGLFlBQVksQ0FBQyxJQUFJemdGLEVBQUVELEVBQUVnM0IsU0FBUyxHQUFHLElBQUkvMkIsR0FBRyxJQUFJQSxFQUFFLE1BQU0sR0FBRyxJQUFJQSxFQUFFLENBQVUsR0FBRyxPQUFaQSxFQUFFRCxFQUFFbkUsT0FBaUIsT0FBT29FLEdBQUcsT0FBT0EsRUFBRSxNQUFNLEdBQUcsT0FBT0EsRUFBRSxPQUFPLElBQUksQ0FBQyxDQUFDLE9BQU9ELENBQUMsQ0FDalksU0FBU2tuRixHQUFHbG5GLEdBQUdBLEVBQUVBLEVBQUVxbkIsZ0JBQWdCLElBQUksSUFBSXBuQixFQUFFLEVBQUVELEdBQUcsQ0FBQyxHQUFHLElBQUlBLEVBQUVnM0IsU0FBUyxDQUFDLElBQUkzVyxFQUFFcmdCLEVBQUVuRSxLQUFLLEdBQUcsTUFBTXdrQixHQUFHLE9BQU9BLEdBQUcsT0FBT0EsRUFBRSxDQUFDLEdBQUcsSUFBSXBnQixFQUFFLE9BQU9ELEVBQUVDLEdBQUcsS0FBSyxPQUFPb2dCLEdBQUdwZ0IsR0FBRyxDQUFDRCxFQUFFQSxFQUFFcW5CLGVBQWUsQ0FBQyxPQUFPLElBQUksQ0FBQyxJQUFJOC9ELEdBQUd6b0YsS0FBS2ltRixTQUFTcDlFLFNBQVMsSUFBSTlNLE1BQU0sR0FBRzJzRixHQUFHLGdCQUFnQkQsR0FBR0UsR0FBRyxnQkFBZ0JGLEdBQUdoQyxHQUFHLG9CQUFvQmdDLEdBQUc1QyxHQUFHLGlCQUFpQjRDLEdBQUdHLEdBQUcsb0JBQW9CSCxHQUFHSSxHQUFHLGtCQUFrQkosR0FDbFgsU0FBU3JTLEdBQUc5MEUsR0FBRyxJQUFJQyxFQUFFRCxFQUFFb25GLElBQUksR0FBR25uRixFQUFFLE9BQU9BLEVBQUUsSUFBSSxJQUFJb2dCLEVBQUVyZ0IsRUFBRWl1RSxXQUFXNXRELEdBQUcsQ0FBQyxHQUFHcGdCLEVBQUVvZ0IsRUFBRThrRSxLQUFLOWtFLEVBQUUrbUUsSUFBSSxDQUFlLEdBQWQvbUUsRUFBRXBnQixFQUFFZzdDLFVBQWEsT0FBT2g3QyxFQUFFbUssT0FBTyxPQUFPaVcsR0FBRyxPQUFPQSxFQUFFalcsTUFBTSxJQUFJcEssRUFBRWtuRixHQUFHbG5GLEdBQUcsT0FBT0EsR0FBRyxDQUFDLEdBQUdxZ0IsRUFBRXJnQixFQUFFb25GLElBQUksT0FBTy9tRSxFQUFFcmdCLEVBQUVrbkYsR0FBR2xuRixFQUFFLENBQUMsT0FBT0MsQ0FBQyxDQUFLb2dCLEdBQUpyZ0IsRUFBRXFnQixHQUFNNHRELFVBQVUsQ0FBQyxPQUFPLElBQUksQ0FBQyxTQUFTSyxHQUFHdHVFLEdBQWtCLFFBQWZBLEVBQUVBLEVBQUVvbkYsS0FBS3BuRixFQUFFbWxGLE1BQWMsSUFBSW5sRixFQUFFK2tCLEtBQUssSUFBSS9rQixFQUFFK2tCLEtBQUssS0FBSy9rQixFQUFFK2tCLEtBQUssSUFBSS9rQixFQUFFK2tCLElBQUksS0FBSy9rQixDQUFDLENBQUMsU0FBU3UvRSxHQUFHdi9FLEdBQUcsR0FBRyxJQUFJQSxFQUFFK2tCLEtBQUssSUFBSS9rQixFQUFFK2tCLElBQUksT0FBTy9rQixFQUFFdXVFLFVBQVUsTUFBTWpyRSxNQUFNdEssRUFBRSxJQUFLLENBQUMsU0FBU3cxRSxHQUFHeHVFLEdBQUcsT0FBT0EsRUFBRXFuRixLQUFLLElBQUksQ0FBQyxJQUFJRyxHQUFHLEdBQUdDLElBQUksRUFBRSxTQUFTQyxHQUFHMW5GLEdBQUcsTUFBTSxDQUFDcVosUUFBUXJaLEVBQUUsQ0FDdmUsU0FBUzJuRixHQUFFM25GLEdBQUcsRUFBRXluRixLQUFLem5GLEVBQUVxWixRQUFRbXVFLEdBQUdDLElBQUlELEdBQUdDLElBQUksS0FBS0EsS0FBSyxDQUFDLFNBQVNHLEdBQUU1bkYsRUFBRUMsR0FBR3duRixLQUFLRCxHQUFHQyxJQUFJem5GLEVBQUVxWixRQUFRclosRUFBRXFaLFFBQVFwWixDQUFDLENBQUMsSUFBSTRuRixHQUFHLENBQUMsRUFBRUMsR0FBRUosR0FBR0csSUFBSUUsR0FBR0wsSUFBRyxHQUFJTSxHQUFHSCxHQUFHLFNBQVNJLEdBQUdqb0YsRUFBRUMsR0FBRyxJQUFJb2dCLEVBQUVyZ0IsRUFBRXpFLEtBQUsyc0YsYUFBYSxJQUFJN25FLEVBQUUsT0FBT3duRSxHQUFHLElBQUlwM0UsRUFBRXpRLEVBQUV1dUUsVUFBVSxHQUFHOTlELEdBQUdBLEVBQUUwM0UsOENBQThDbG9GLEVBQUUsT0FBT3dRLEVBQUUyM0UsMENBQTBDLElBQVN2ckIsRUFBTGhnRSxFQUFFLENBQUMsRUFBSSxJQUFJZ2dFLEtBQUt4OEMsRUFBRXhqQixFQUFFZ2dFLEdBQUc1OEQsRUFBRTQ4RCxHQUFvSCxPQUFqSHBzRCxLQUFJelEsRUFBRUEsRUFBRXV1RSxXQUFZNFosNENBQTRDbG9GLEVBQUVELEVBQUVvb0YsMENBQTBDdnJGLEdBQVVBLENBQUMsQ0FDOWQsU0FBU3dyRixHQUFHcm9GLEdBQXlCLE9BQU8sTUFBM0JBLEVBQUVrbkMsaUJBQTZDLENBQUMsU0FBU29oRCxLQUFLWCxHQUFFSSxJQUFJSixHQUFFRyxHQUFFLENBQUMsU0FBU1MsR0FBR3ZvRixFQUFFQyxFQUFFb2dCLEdBQUcsR0FBR3luRSxHQUFFenVFLFVBQVV3dUUsR0FBRyxNQUFNdmtGLE1BQU10SyxFQUFFLE1BQU00dUYsR0FBRUUsR0FBRTduRixHQUFHMm5GLEdBQUVHLEdBQUcxbkUsRUFBRSxDQUFDLFNBQVNtb0UsR0FBR3hvRixFQUFFQyxFQUFFb2dCLEdBQUcsSUFBSTVQLEVBQUV6USxFQUFFdXVFLFVBQWdDLEdBQXRCdHVFLEVBQUVBLEVBQUVpbkMsa0JBQXFCLG1CQUFvQnoyQixFQUFFdTFCLGdCQUFnQixPQUFPM2xCLEVBQXdCLElBQUksSUFBSXhqQixLQUE5QjRULEVBQUVBLEVBQUV1MUIsa0JBQWlDLEtBQUtucEMsS0FBS29ELEdBQUcsTUFBTXFELE1BQU10SyxFQUFFLElBQUlvdUUsRUFBR3BuRSxJQUFJLFVBQVVuRCxJQUFJLE9BQU9wSSxFQUFFLENBQUMsRUFBRTRyQixFQUFFNVAsRUFBRSxDQUN4WCxTQUFTZzRFLEdBQUd6b0YsR0FBMkcsT0FBeEdBLEdBQUdBLEVBQUVBLEVBQUV1dUUsWUFBWXZ1RSxFQUFFMG9GLDJDQUEyQ2IsR0FBR0csR0FBR0YsR0FBRXp1RSxRQUFRdXVFLEdBQUVFLEdBQUU5bkYsR0FBRzRuRixHQUFFRyxHQUFHQSxHQUFHMXVFLFVBQWUsQ0FBRSxDQUFDLFNBQVNzdkUsR0FBRzNvRixFQUFFQyxFQUFFb2dCLEdBQUcsSUFBSTVQLEVBQUV6USxFQUFFdXVFLFVBQVUsSUFBSTk5RCxFQUFFLE1BQU1uTixNQUFNdEssRUFBRSxNQUFNcW5CLEdBQUdyZ0IsRUFBRXdvRixHQUFHeG9GLEVBQUVDLEVBQUUrbkYsSUFBSXYzRSxFQUFFaTRFLDBDQUEwQzFvRixFQUFFMm5GLEdBQUVJLElBQUlKLEdBQUVHLElBQUdGLEdBQUVFLEdBQUU5bkYsSUFBSTJuRixHQUFFSSxJQUFJSCxHQUFFRyxHQUFHMW5FLEVBQUUsQ0FBQyxJQUFJdW9FLEdBQUcsS0FBS0MsSUFBRyxFQUFHQyxJQUFHLEVBQUcsU0FBU0MsR0FBRy9vRixHQUFHLE9BQU80b0YsR0FBR0EsR0FBRyxDQUFDNW9GLEdBQUc0b0YsR0FBR253RixLQUFLdUgsRUFBRSxDQUNoVyxTQUFTZ3BGLEtBQUssSUFBSUYsSUFBSSxPQUFPRixHQUFHLENBQUNFLElBQUcsRUFBRyxJQUFJOW9GLEVBQUUsRUFBRUMsRUFBRW16RSxHQUFFLElBQUksSUFBSS95RCxFQUFFdW9FLEdBQUcsSUFBSXhWLEdBQUUsRUFBRXB6RSxFQUFFcWdCLEVBQUU3ckIsT0FBT3dMLElBQUksQ0FBQyxJQUFJeVEsRUFBRTRQLEVBQUVyZ0IsR0FBRyxHQUFHeVEsRUFBRUEsR0FBRSxTQUFVLE9BQU9BLEVBQUUsQ0FBQ200RSxHQUFHLEtBQUtDLElBQUcsQ0FBRSxDQUFDLE1BQU1oc0YsR0FBRyxNQUFNLE9BQU8rckYsS0FBS0EsR0FBR0EsR0FBR251RixNQUFNdUYsRUFBRSxJQUFJc3dFLEdBQUdZLEdBQUc4WCxJQUFJbnNGLENBQUUsQ0FBQyxRQUFRdTJFLEdBQUVuekUsRUFBRTZvRixJQUFHLENBQUUsQ0FBQyxDQUFDLE9BQU8sSUFBSSxDQUFDLElBQUlHLEdBQUcsR0FBR0MsR0FBRyxFQUFFQyxHQUFHLEtBQUtDLEdBQUcsRUFBRUMsR0FBRyxHQUFHQyxHQUFHLEVBQUVDLEdBQUcsS0FBS0MsR0FBRyxFQUFFQyxHQUFHLEdBQUcsU0FBU0MsR0FBRzFwRixFQUFFQyxHQUFHZ3BGLEdBQUdDLE1BQU1FLEdBQUdILEdBQUdDLE1BQU1DLEdBQUdBLEdBQUducEYsRUFBRW9wRixHQUFHbnBGLENBQUMsQ0FDalYsU0FBUzBwRixHQUFHM3BGLEVBQUVDLEVBQUVvZ0IsR0FBR2dwRSxHQUFHQyxNQUFNRSxHQUFHSCxHQUFHQyxNQUFNRyxHQUFHSixHQUFHQyxNQUFNQyxHQUFHQSxHQUFHdnBGLEVBQUUsSUFBSXlRLEVBQUUrNEUsR0FBR3hwRixFQUFFeXBGLEdBQUcsSUFBSTVzRixFQUFFLEdBQUdpMUUsR0FBR3JoRSxHQUFHLEVBQUVBLEtBQUssR0FBRzVULEdBQUd3akIsR0FBRyxFQUFFLElBQUl3OEMsRUFBRSxHQUFHaVYsR0FBRzd4RSxHQUFHcEQsRUFBRSxHQUFHLEdBQUdnZ0UsRUFBRSxDQUFDLElBQUloL0IsRUFBRWhoQyxFQUFFQSxFQUFFLEVBQUVnZ0UsR0FBR3BzRCxHQUFHLEdBQUdvdEIsR0FBRyxHQUFHdDJCLFNBQVMsSUFBSWtKLElBQUlvdEIsRUFBRWhoQyxHQUFHZ2hDLEVBQUUyckQsR0FBRyxHQUFHLEdBQUcxWCxHQUFHN3hFLEdBQUdwRCxFQUFFd2pCLEdBQUd4akIsRUFBRTRULEVBQUVnNUUsR0FBRzVzQixFQUFFNzhELENBQUMsTUFBTXdwRixHQUFHLEdBQUczc0IsRUFBRXg4QyxHQUFHeGpCLEVBQUU0VCxFQUFFZzVFLEdBQUd6cEYsQ0FBQyxDQUFDLFNBQVM0cEYsR0FBRzVwRixHQUFHLE9BQU9BLEVBQUU2dkUsU0FBUzZaLEdBQUcxcEYsRUFBRSxHQUFHMnBGLEdBQUczcEYsRUFBRSxFQUFFLEdBQUcsQ0FBQyxTQUFTNnBGLEdBQUc3cEYsR0FBRyxLQUFLQSxJQUFJbXBGLElBQUlBLEdBQUdGLEtBQUtDLElBQUlELEdBQUdDLElBQUksS0FBS0UsR0FBR0gsS0FBS0MsSUFBSUQsR0FBR0MsSUFBSSxLQUFLLEtBQUtscEYsSUFBSXVwRixJQUFJQSxHQUFHRixLQUFLQyxJQUFJRCxHQUFHQyxJQUFJLEtBQUtHLEdBQUdKLEtBQUtDLElBQUlELEdBQUdDLElBQUksS0FBS0UsR0FBR0gsS0FBS0MsSUFBSUQsR0FBR0MsSUFBSSxJQUFJLENBQUMsSUFBSVEsR0FBRyxLQUFLQyxHQUFHLEtBQUtDLElBQUUsRUFBR0MsR0FBRyxLQUNqZSxTQUFTQyxHQUFHbHFGLEVBQUVDLEdBQUcsSUFBSW9nQixFQUFFOHBFLEdBQUcsRUFBRSxLQUFLLEtBQUssR0FBRzlwRSxFQUFFNmlELFlBQVksVUFBVTdpRCxFQUFFa3VELFVBQVV0dUUsRUFBRW9nQixFQUFFd3ZELE9BQU83dkUsRUFBZ0IsUUFBZEMsRUFBRUQsRUFBRW9xRixZQUFvQnBxRixFQUFFb3FGLFVBQVUsQ0FBQy9wRSxHQUFHcmdCLEVBQUU4dkUsT0FBTyxJQUFJN3ZFLEVBQUV4SCxLQUFLNG5CLEVBQUUsQ0FDeEosU0FBU2dxRSxHQUFHcnFGLEVBQUVDLEdBQUcsT0FBT0QsRUFBRStrQixLQUFLLEtBQUssRUFBRSxJQUFJMUUsRUFBRXJnQixFQUFFekUsS0FBeUUsT0FBTyxRQUEzRTBFLEVBQUUsSUFBSUEsRUFBRSsyQixVQUFVM1csRUFBRXhNLGdCQUFnQjVULEVBQUVpOUQsU0FBU3JwRCxjQUFjLEtBQUs1VCxLQUFtQkQsRUFBRXV1RSxVQUFVdHVFLEVBQUU2cEYsR0FBRzlwRixFQUFFK3BGLEdBQUc5QyxHQUFHaG5GLEVBQUVvZCxhQUFZLEdBQU8sS0FBSyxFQUFFLE9BQW9ELFFBQTdDcGQsRUFBRSxLQUFLRCxFQUFFc3FGLGNBQWMsSUFBSXJxRixFQUFFKzJCLFNBQVMsS0FBSy8yQixLQUFZRCxFQUFFdXVFLFVBQVV0dUUsRUFBRTZwRixHQUFHOXBGLEVBQUUrcEYsR0FBRyxNQUFLLEdBQU8sS0FBSyxHQUFHLE9BQStCLFFBQXhCOXBGLEVBQUUsSUFBSUEsRUFBRSsyQixTQUFTLEtBQUsvMkIsS0FBWW9nQixFQUFFLE9BQU9rcEUsR0FBRyxDQUFDLzBFLEdBQUdnMUUsR0FBR2UsU0FBU2QsSUFBSSxLQUFLenBGLEVBQUVnd0UsY0FBYyxDQUFDQyxXQUFXaHdFLEVBQUV1cUYsWUFBWW5xRSxFQUFFb3FFLFVBQVUsYUFBWXBxRSxFQUFFOHBFLEdBQUcsR0FBRyxLQUFLLEtBQUssSUFBSzViLFVBQVV0dUUsRUFBRW9nQixFQUFFd3ZELE9BQU83dkUsRUFBRUEsRUFBRW9LLE1BQU1pVyxFQUFFeXBFLEdBQUc5cEYsRUFBRStwRixHQUNsZixNQUFLLEdBQU8sUUFBUSxPQUFNLEVBQUcsQ0FBQyxTQUFTVyxHQUFHMXFGLEdBQUcsVUFBbUIsRUFBUEEsRUFBRWt5QixPQUFzQixJQUFSbHlCLEVBQUU4dkUsTUFBVSxDQUFDLFNBQVM2YSxHQUFHM3FGLEdBQUcsR0FBR2dxRixHQUFFLENBQUMsSUFBSS9wRixFQUFFOHBGLEdBQUcsR0FBRzlwRixFQUFFLENBQUMsSUFBSW9nQixFQUFFcGdCLEVBQUUsSUFBSW9xRixHQUFHcnFGLEVBQUVDLEdBQUcsQ0FBQyxHQUFHeXFGLEdBQUcxcUYsR0FBRyxNQUFNc0QsTUFBTXRLLEVBQUUsTUFBTWlILEVBQUVnbkYsR0FBRzVtRSxFQUFFcWdFLGFBQWEsSUFBSWp3RSxFQUFFcTVFLEdBQUc3cEYsR0FBR29xRixHQUFHcnFGLEVBQUVDLEdBQUdpcUYsR0FBR3o1RSxFQUFFNFAsSUFBSXJnQixFQUFFOHZFLE9BQWUsS0FBVDl2RSxFQUFFOHZFLE1BQVksRUFBRWthLElBQUUsRUFBR0YsR0FBRzlwRixFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcwcUYsR0FBRzFxRixHQUFHLE1BQU1zRCxNQUFNdEssRUFBRSxNQUFNZ0gsRUFBRTh2RSxPQUFlLEtBQVQ5dkUsRUFBRTh2RSxNQUFZLEVBQUVrYSxJQUFFLEVBQUdGLEdBQUc5cEYsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTNHFGLEdBQUc1cUYsR0FBRyxJQUFJQSxFQUFFQSxFQUFFNnZFLE9BQU8sT0FBTzd2RSxHQUFHLElBQUlBLEVBQUUra0IsS0FBSyxJQUFJL2tCLEVBQUUra0IsS0FBSyxLQUFLL2tCLEVBQUUra0IsS0FBSy9rQixFQUFFQSxFQUFFNnZFLE9BQU9pYSxHQUFHOXBGLENBQUMsQ0FDaGEsU0FBUzZxRixHQUFHN3FGLEdBQUcsR0FBR0EsSUFBSThwRixHQUFHLE9BQU0sRUFBRyxJQUFJRSxHQUFFLE9BQU9ZLEdBQUc1cUYsR0FBR2dxRixJQUFFLEdBQUcsRUFBRyxJQUFJL3BGLEVBQWtHLElBQS9GQSxFQUFFLElBQUlELEVBQUUra0IsUUFBUTlrQixFQUFFLElBQUlELEVBQUUra0IsT0FBZ0I5a0IsRUFBRSxVQUFYQSxFQUFFRCxFQUFFekUsT0FBbUIsU0FBUzBFLElBQUltbUYsR0FBR3BtRixFQUFFekUsS0FBS3lFLEVBQUU4cUYsZ0JBQW1CN3FGLElBQUlBLEVBQUU4cEYsSUFBSSxDQUFDLEdBQUdXLEdBQUcxcUYsR0FBRyxNQUFNK3FGLEtBQUt6bkYsTUFBTXRLLEVBQUUsTUFBTSxLQUFLaUgsR0FBR2lxRixHQUFHbHFGLEVBQUVDLEdBQUdBLEVBQUVnbkYsR0FBR2huRixFQUFFeWdGLFlBQVksQ0FBTyxHQUFOa0ssR0FBRzVxRixHQUFNLEtBQUtBLEVBQUUra0IsSUFBSSxDQUFnRCxLQUE3Qi9rQixFQUFFLFFBQXBCQSxFQUFFQSxFQUFFZ3dFLGVBQXlCaHdFLEVBQUVpd0UsV0FBVyxNQUFXLE1BQU0zc0UsTUFBTXRLLEVBQUUsTUFBTWdILEVBQUUsQ0FBaUIsSUFBaEJBLEVBQUVBLEVBQUUwZ0YsWUFBZ0J6Z0YsRUFBRSxFQUFFRCxHQUFHLENBQUMsR0FBRyxJQUFJQSxFQUFFZzNCLFNBQVMsQ0FBQyxJQUFJM1csRUFBRXJnQixFQUFFbkUsS0FBSyxHQUFHLE9BQU93a0IsRUFBRSxDQUFDLEdBQUcsSUFBSXBnQixFQUFFLENBQUM4cEYsR0FBRzlDLEdBQUdqbkYsRUFBRTBnRixhQUFhLE1BQU0xZ0YsQ0FBQyxDQUFDQyxHQUFHLEtBQUssTUFBTW9nQixHQUFHLE9BQU9BLEdBQUcsT0FBT0EsR0FBR3BnQixHQUFHLENBQUNELEVBQUVBLEVBQUUwZ0YsV0FBVyxDQUFDcUosR0FDamdCLElBQUksQ0FBQyxNQUFNQSxHQUFHRCxHQUFHN0MsR0FBR2puRixFQUFFdXVFLFVBQVVtUyxhQUFhLEtBQUssT0FBTSxDQUFFLENBQUMsU0FBU3FLLEtBQUssSUFBSSxJQUFJL3FGLEVBQUUrcEYsR0FBRy9wRixHQUFHQSxFQUFFaW5GLEdBQUdqbkYsRUFBRTBnRixZQUFZLENBQUMsU0FBU3NLLEtBQUtqQixHQUFHRCxHQUFHLEtBQUtFLElBQUUsQ0FBRSxDQUFDLFNBQVNpQixHQUFHanJGLEdBQUcsT0FBT2lxRixHQUFHQSxHQUFHLENBQUNqcUYsR0FBR2lxRixHQUFHeHhGLEtBQUt1SCxFQUFFLENBQUMsSUFBSWtyRixHQUFHNWxCLEVBQUdvUSx3QkFDaE0sU0FBU3lWLEdBQUduckYsRUFBRUMsRUFBRW9nQixHQUFXLEdBQUcsUUFBWHJnQixFQUFFcWdCLEVBQUUrcUUsTUFBaUIsbUJBQW9CcHJGLEdBQUcsaUJBQWtCQSxFQUFFLENBQUMsR0FBR3FnQixFQUFFZ3JFLE9BQU8sQ0FBWSxHQUFYaHJFLEVBQUVBLEVBQUVnckUsT0FBWSxDQUFDLEdBQUcsSUFBSWhyRSxFQUFFMEUsSUFBSSxNQUFNemhCLE1BQU10SyxFQUFFLE1BQU0sSUFBSXlYLEVBQUU0UCxFQUFFa3VELFNBQVMsQ0FBQyxJQUFJOTlELEVBQUUsTUFBTW5OLE1BQU10SyxFQUFFLElBQUlnSCxJQUFJLElBQUluRCxFQUFFNFQsRUFBRW9zRCxFQUFFLEdBQUc3OEQsRUFBRSxPQUFHLE9BQU9DLEdBQUcsT0FBT0EsRUFBRW1yRixLQUFLLG1CQUFvQm5yRixFQUFFbXJGLEtBQUtuckYsRUFBRW1yRixJQUFJRSxhQUFhenVCLEVBQVM1OEQsRUFBRW1yRixLQUFJbnJGLEVBQUUsU0FBU0QsR0FBRyxJQUFJQyxFQUFFcEQsRUFBRStoQyxLQUFLLE9BQU81K0IsU0FBU0MsRUFBRTQ4RCxHQUFHNThELEVBQUU0OEQsR0FBRzc4RCxDQUFDLEVBQUVDLEVBQUVxckYsV0FBV3p1QixFQUFTNThELEVBQUMsQ0FBQyxHQUFHLGlCQUFrQkQsRUFBRSxNQUFNc0QsTUFBTXRLLEVBQUUsTUFBTSxJQUFJcW5CLEVBQUVnckUsT0FBTyxNQUFNL25GLE1BQU10SyxFQUFFLElBQUlnSCxHQUFJLENBQUMsT0FBT0EsQ0FBQyxDQUMvYyxTQUFTdXJGLEdBQUd2ckYsRUFBRUMsR0FBdUMsTUFBcENELEVBQUV0SSxPQUFPOUIsVUFBVTJSLFNBQVNwUSxLQUFLOEksR0FBU3FELE1BQU10SyxFQUFFLEdBQUcsb0JBQW9CZ0gsRUFBRSxxQkFBcUJ0SSxPQUFPNkssS0FBS3RDLEdBQUd5RixLQUFLLE1BQU0sSUFBSTFGLEdBQUksQ0FBQyxTQUFTd3JGLEdBQUd4ckYsR0FBaUIsT0FBT0MsRUFBZkQsRUFBRW1uRSxPQUFlbm5FLEVBQUVrbkUsU0FBUyxDQUNyTSxTQUFTdWtCLEdBQUd6ckYsR0FBRyxTQUFTQyxFQUFFQSxFQUFFb2dCLEdBQUcsR0FBR3JnQixFQUFFLENBQUMsSUFBSXlRLEVBQUV4USxFQUFFbXFGLFVBQVUsT0FBTzM1RSxHQUFHeFEsRUFBRW1xRixVQUFVLENBQUMvcEUsR0FBR3BnQixFQUFFNnZFLE9BQU8sSUFBSXIvRCxFQUFFaFksS0FBSzRuQixFQUFFLENBQUMsQ0FBQyxTQUFTQSxFQUFFQSxFQUFFNVAsR0FBRyxJQUFJelEsRUFBRSxPQUFPLEtBQUssS0FBSyxPQUFPeVEsR0FBR3hRLEVBQUVvZ0IsRUFBRTVQLEdBQUdBLEVBQUVBLEVBQUU4TSxRQUFRLE9BQU8sSUFBSSxDQUFDLFNBQVM5TSxFQUFFelEsRUFBRUMsR0FBRyxJQUFJRCxFQUFFLElBQUlxZSxJQUFJLE9BQU9wZSxHQUFHLE9BQU9BLEVBQUV1RSxJQUFJeEUsRUFBRTZOLElBQUk1TixFQUFFdUUsSUFBSXZFLEdBQUdELEVBQUU2TixJQUFJNU4sRUFBRStGLE1BQU0vRixHQUFHQSxFQUFFQSxFQUFFc2QsUUFBUSxPQUFPdmQsQ0FBQyxDQUFDLFNBQVNuRCxFQUFFbUQsRUFBRUMsR0FBc0MsT0FBbkNELEVBQUUwckYsR0FBRzFyRixFQUFFQyxJQUFLK0YsTUFBTSxFQUFFaEcsRUFBRXVkLFFBQVEsS0FBWXZkLENBQUMsQ0FBQyxTQUFTNjhELEVBQUU1OEQsRUFBRW9nQixFQUFFNVAsR0FBYSxPQUFWeFEsRUFBRStGLE1BQU15SyxFQUFNelEsRUFBNkMsUUFBakJ5USxFQUFFeFEsRUFBRWc3QyxZQUE2QnhxQyxFQUFFQSxFQUFFekssT0FBUXFhLEdBQUdwZ0IsRUFBRTZ2RSxPQUFPLEVBQUV6dkQsR0FBRzVQLEdBQUV4USxFQUFFNnZFLE9BQU8sRUFBU3p2RCxJQUFyR3BnQixFQUFFNnZFLE9BQU8sUUFBUXp2RCxFQUFxRixDQUFDLFNBQVN3ZCxFQUFFNTlCLEdBQ3pkLE9BRDRkRCxHQUM3ZixPQUFPQyxFQUFFZzdDLFlBQVloN0MsRUFBRTZ2RSxPQUFPLEdBQVU3dkUsQ0FBQyxDQUFDLFNBQVM2bUUsRUFBRTltRSxFQUFFQyxFQUFFb2dCLEVBQUU1UCxHQUFHLE9BQUcsT0FBT3hRLEdBQUcsSUFBSUEsRUFBRThrQixNQUFXOWtCLEVBQUUwckYsR0FBR3RyRSxFQUFFcmdCLEVBQUVreUIsS0FBS3poQixJQUFLby9ELE9BQU83dkUsRUFBRUMsS0FBRUEsRUFBRXBELEVBQUVvRCxFQUFFb2dCLElBQUt3dkQsT0FBTzd2RSxFQUFTQyxFQUFDLENBQUMsU0FBU3ZMLEVBQUVzTCxFQUFFQyxFQUFFb2dCLEVBQUU1UCxHQUFHLElBQUlvc0QsRUFBRXg4QyxFQUFFOWtCLEtBQUssT0FBR3NoRSxJQUFJOEksRUFBVXRzRSxFQUFFMkcsRUFBRUMsRUFBRW9nQixFQUFFb0QsTUFBTTNoQixTQUFTMk8sRUFBRTRQLEVBQUU3YixLQUFRLE9BQU92RSxJQUFJQSxFQUFFaWpFLGNBQWNyRyxHQUFHLGlCQUFrQkEsR0FBRyxPQUFPQSxHQUFHQSxFQUFFb0ssV0FBV2IsR0FBSW9sQixHQUFHM3VCLEtBQUs1OEQsRUFBRTFFLFFBQWFrVixFQUFFNVQsRUFBRW9ELEVBQUVvZ0IsRUFBRW9ELFFBQVMybkUsSUFBSUQsR0FBR25yRixFQUFFQyxFQUFFb2dCLEdBQUc1UCxFQUFFby9ELE9BQU83dkUsRUFBRXlRLEtBQUVBLEVBQUVtN0UsR0FBR3ZyRSxFQUFFOWtCLEtBQUs4a0IsRUFBRTdiLElBQUk2YixFQUFFb0QsTUFBTSxLQUFLempCLEVBQUVreUIsS0FBS3poQixJQUFLMjZFLElBQUlELEdBQUduckYsRUFBRUMsRUFBRW9nQixHQUFHNVAsRUFBRW8vRCxPQUFPN3ZFLEVBQVN5USxFQUFDLENBQUMsU0FBU2pXLEVBQUV3RixFQUFFQyxFQUFFb2dCLEVBQUU1UCxHQUFHLE9BQUcsT0FBT3hRLEdBQUcsSUFBSUEsRUFBRThrQixLQUNqZjlrQixFQUFFc3VFLFVBQVUwRyxnQkFBZ0I1MEQsRUFBRTQwRCxlQUFlaDFFLEVBQUVzdUUsVUFBVXQ1RSxpQkFBaUJvckIsRUFBRXByQixpQkFBc0JnTCxFQUFFNHJGLEdBQUd4ckUsRUFBRXJnQixFQUFFa3lCLEtBQUt6aEIsSUFBS28vRCxPQUFPN3ZFLEVBQUVDLEtBQUVBLEVBQUVwRCxFQUFFb0QsRUFBRW9nQixFQUFFdmUsVUFBVSxLQUFNK3RFLE9BQU83dkUsRUFBU0MsRUFBQyxDQUFDLFNBQVM1RyxFQUFFMkcsRUFBRUMsRUFBRW9nQixFQUFFNVAsRUFBRW9zRCxHQUFHLE9BQUcsT0FBTzU4RCxHQUFHLElBQUlBLEVBQUU4a0IsTUFBVzlrQixFQUFFNnJGLEdBQUd6ckUsRUFBRXJnQixFQUFFa3lCLEtBQUt6aEIsRUFBRW9zRCxJQUFLZ1QsT0FBTzd2RSxFQUFFQyxLQUFFQSxFQUFFcEQsRUFBRW9ELEVBQUVvZ0IsSUFBS3d2RCxPQUFPN3ZFLEVBQVNDLEVBQUMsQ0FBQyxTQUFTOHJGLEVBQUUvckYsRUFBRUMsRUFBRW9nQixHQUFHLEdBQUcsaUJBQWtCcGdCLEdBQUcsS0FBS0EsR0FBRyxpQkFBa0JBLEVBQUUsT0FBT0EsRUFBRTByRixHQUFHLEdBQUcxckYsRUFBRUQsRUFBRWt5QixLQUFLN1IsSUFBS3d2RCxPQUFPN3ZFLEVBQUVDLEVBQUUsR0FBRyxpQkFBa0JBLEdBQUcsT0FBT0EsRUFBRSxDQUFDLE9BQU9BLEVBQUVnbkUsVUFBVSxLQUFLekIsRUFBRyxPQUFPbmxELEVBQUV1ckUsR0FBRzNyRixFQUFFMUUsS0FBSzBFLEVBQUV1RSxJQUFJdkUsRUFBRXdqQixNQUFNLEtBQUt6akIsRUFBRWt5QixLQUFLN1IsSUFDamYrcUUsSUFBSUQsR0FBR25yRixFQUFFLEtBQUtDLEdBQUdvZ0IsRUFBRXd2RCxPQUFPN3ZFLEVBQUVxZ0IsRUFBRSxLQUFLcWxELEVBQUcsT0FBT3psRSxFQUFFNHJGLEdBQUc1ckYsRUFBRUQsRUFBRWt5QixLQUFLN1IsSUFBS3d2RCxPQUFPN3ZFLEVBQUVDLEVBQUUsS0FBS21tRSxFQUFpQixPQUFPMmxCLEVBQUUvckYsR0FBRXlRLEVBQW5CeFEsRUFBRWtuRSxPQUFtQmxuRSxFQUFFaW5FLFVBQVU3bUQsR0FBRyxHQUFHcW9ELEdBQUd6b0UsSUFBSXNtRSxFQUFHdG1FLEdBQUcsT0FBT0EsRUFBRTZyRixHQUFHN3JGLEVBQUVELEVBQUVreUIsS0FBSzdSLEVBQUUsT0FBUXd2RCxPQUFPN3ZFLEVBQUVDLEVBQUVzckYsR0FBR3ZyRixFQUFFQyxFQUFFLENBQUMsT0FBTyxJQUFJLENBQUMsU0FBU3NSLEVBQUV2UixFQUFFQyxFQUFFb2dCLEVBQUU1UCxHQUFHLElBQUk1VCxFQUFFLE9BQU9vRCxFQUFFQSxFQUFFdUUsSUFBSSxLQUFLLEdBQUcsaUJBQWtCNmIsR0FBRyxLQUFLQSxHQUFHLGlCQUFrQkEsRUFBRSxPQUFPLE9BQU94akIsRUFBRSxLQUFLaXFFLEVBQUU5bUUsRUFBRUMsRUFBRSxHQUFHb2dCLEVBQUU1UCxHQUFHLEdBQUcsaUJBQWtCNFAsR0FBRyxPQUFPQSxFQUFFLENBQUMsT0FBT0EsRUFBRTRtRCxVQUFVLEtBQUt6QixFQUFHLE9BQU9ubEQsRUFBRTdiLE1BQU0zSCxFQUFFbkksRUFBRXNMLEVBQUVDLEVBQUVvZ0IsRUFBRTVQLEdBQUcsS0FBSyxLQUFLaTFELEVBQUcsT0FBT3JsRCxFQUFFN2IsTUFBTTNILEVBQUVyQyxFQUFFd0YsRUFBRUMsRUFBRW9nQixFQUFFNVAsR0FBRyxLQUFLLEtBQUsyMUQsRUFBRyxPQUFpQjcwRCxFQUFFdlIsRUFDcGZDLEdBRHdlcEQsRUFBRXdqQixFQUFFOG1ELE9BQ3hlOW1ELEVBQUU2bUQsVUFBVXoyRCxHQUFHLEdBQUdpNEQsR0FBR3JvRCxJQUFJa21ELEVBQUdsbUQsR0FBRyxPQUFPLE9BQU94akIsRUFBRSxLQUFLeEQsRUFBRTJHLEVBQUVDLEVBQUVvZ0IsRUFBRTVQLEVBQUUsTUFBTTg2RSxHQUFHdnJGLEVBQUVxZ0IsRUFBRSxDQUFDLE9BQU8sSUFBSSxDQUFDLFNBQVMyckUsRUFBRWhzRixFQUFFQyxFQUFFb2dCLEVBQUU1UCxFQUFFNVQsR0FBRyxHQUFHLGlCQUFrQjRULEdBQUcsS0FBS0EsR0FBRyxpQkFBa0JBLEVBQUUsT0FBd0JxMkQsRUFBRTdtRSxFQUFuQkQsRUFBRUEsRUFBRWxHLElBQUl1bUIsSUFBSSxLQUFXLEdBQUc1UCxFQUFFNVQsR0FBRyxHQUFHLGlCQUFrQjRULEdBQUcsT0FBT0EsRUFBRSxDQUFDLE9BQU9BLEVBQUV3MkQsVUFBVSxLQUFLekIsRUFBRyxPQUEyQzl3RSxFQUFFdUwsRUFBdENELEVBQUVBLEVBQUVsRyxJQUFJLE9BQU8yVyxFQUFFak0sSUFBSTZiLEVBQUU1UCxFQUFFak0sTUFBTSxLQUFXaU0sRUFBRTVULEdBQUcsS0FBSzZvRSxFQUFHLE9BQTJDbHJFLEVBQUV5RixFQUF0Q0QsRUFBRUEsRUFBRWxHLElBQUksT0FBTzJXLEVBQUVqTSxJQUFJNmIsRUFBRTVQLEVBQUVqTSxNQUFNLEtBQVdpTSxFQUFFNVQsR0FBRyxLQUFLdXBFLEVBQWlCLE9BQU80bEIsRUFBRWhzRixFQUFFQyxFQUFFb2dCLEdBQUV3OEMsRUFBdkJwc0QsRUFBRTAyRCxPQUF1QjEyRCxFQUFFeTJELFVBQVVycUUsR0FBRyxHQUFHNnJFLEdBQUdqNEQsSUFBSTgxRCxFQUFHOTFELEdBQUcsT0FBd0JwWCxFQUFFNEcsRUFBbkJELEVBQUVBLEVBQUVsRyxJQUFJdW1CLElBQUksS0FBVzVQLEVBQUU1VCxFQUFFLE1BQU0wdUYsR0FBR3RyRixFQUFFd1EsRUFBRSxDQUFDLE9BQU8sSUFBSSxDQUM5ZixTQUFTMVgsRUFBRThELEVBQUVnaEMsRUFBRWlwQyxFQUFFcHlFLEdBQUcsSUFBSSxJQUFJOEYsRUFBRSxLQUFLbkIsRUFBRSxLQUFLMnJGLEVBQUVubkQsRUFBRW00QixFQUFFbjRCLEVBQUUsRUFBRWpxQixFQUFFLEtBQUssT0FBT294RSxHQUFHaHZCLEVBQUU4USxFQUFFdHlFLE9BQU93aEUsSUFBSSxDQUFDZ3ZCLEVBQUVoL0UsTUFBTWd3RCxHQUFHcGlELEVBQUVveEUsRUFBRUEsRUFBRSxNQUFNcHhFLEVBQUVveEUsRUFBRXpuRSxRQUFRLElBQUl4a0IsRUFBRXdZLEVBQUUxVSxFQUFFbW9GLEVBQUVsZSxFQUFFOVEsR0FBR3RoRSxHQUFHLEdBQUcsT0FBT3FFLEVBQUUsQ0FBQyxPQUFPaXNGLElBQUlBLEVBQUVweEUsR0FBRyxLQUFLLENBQUM1VCxHQUFHZ2xGLEdBQUcsT0FBT2pzRixFQUFFa2lELFdBQVdoN0MsRUFBRXBELEVBQUVtb0YsR0FBR25uRCxFQUFFZy9CLEVBQUU5akUsRUFBRThrQyxFQUFFbTRCLEdBQUcsT0FBTzM4RCxFQUFFbUIsRUFBRXpCLEVBQUVNLEVBQUVra0IsUUFBUXhrQixFQUFFTSxFQUFFTixFQUFFaXNGLEVBQUVweEUsQ0FBQyxDQUFDLEdBQUdvaUQsSUFBSThRLEVBQUV0eUUsT0FBTyxPQUFPNnJCLEVBQUV4akIsRUFBRW1vRixHQUFHZ0YsSUFBR04sR0FBRzdzRixFQUFFbTVELEdBQUd4N0QsRUFBRSxHQUFHLE9BQU93cUYsRUFBRSxDQUFDLEtBQUtodkIsRUFBRThRLEVBQUV0eUUsT0FBT3doRSxJQUFrQixRQUFkZ3ZCLEVBQUUrRyxFQUFFbHZGLEVBQUVpcUUsRUFBRTlRLEdBQUd0aEUsTUFBY21wQyxFQUFFZy9CLEVBQUVtb0IsRUFBRW5uRCxFQUFFbTRCLEdBQUcsT0FBTzM4RCxFQUFFbUIsRUFBRXdxRixFQUFFM3JGLEVBQUVra0IsUUFBUXluRSxFQUFFM3JGLEVBQUUyckYsR0FBYyxPQUFYZ0YsSUFBR04sR0FBRzdzRixFQUFFbTVELEdBQVV4N0QsQ0FBQyxDQUFDLElBQUl3cUYsRUFBRXYwRSxFQUFFNVQsRUFBRW1vRixHQUFHaHZCLEVBQUU4USxFQUFFdHlFLE9BQU93aEUsSUFBc0IsUUFBbEJwaUQsRUFBRW80RSxFQUFFaEgsRUFBRW5vRixFQUFFbTVELEVBQUU4USxFQUFFOVEsR0FBR3RoRSxNQUFjc0wsR0FBRyxPQUFPNFQsRUFBRXFuQyxXQUFXK3BDLEVBQUUzUSxPQUFPLE9BQ3ZmemdFLEVBQUVwUCxJQUFJd3hELEVBQUVwaUQsRUFBRXBQLEtBQUtxNUIsRUFBRWcvQixFQUFFanBELEVBQUVpcUIsRUFBRW00QixHQUFHLE9BQU8zOEQsRUFBRW1CLEVBQUVvWixFQUFFdmEsRUFBRWtrQixRQUFRM0osRUFBRXZhLEVBQUV1YSxHQUF1RCxPQUFwRDVULEdBQUdnbEYsRUFBRWhvRixTQUFRLFNBQVNnRCxHQUFHLE9BQU9DLEVBQUVwRCxFQUFFbUQsRUFBRSxJQUFHZ3FGLElBQUdOLEdBQUc3c0YsRUFBRW01RCxHQUFVeDdELENBQUMsQ0FBQyxTQUFTNUIsRUFBRWlFLEVBQUVnaEMsRUFBRWlwQyxFQUFFcHlFLEdBQUcsSUFBSThGLEVBQUUrckUsRUFBR08sR0FBRyxHQUFHLG1CQUFvQnRzRSxFQUFFLE1BQU04SSxNQUFNdEssRUFBRSxNQUFrQixHQUFHLE9BQWY4dEUsRUFBRXRzRSxFQUFFckQsS0FBSzJ2RSxJQUFjLE1BQU14akUsTUFBTXRLLEVBQUUsTUFBTSxJQUFJLElBQUlnc0YsRUFBRXhxRixFQUFFLEtBQUtuQixFQUFFd2tDLEVBQUVtNEIsRUFBRW40QixFQUFFLEVBQUVqcUIsRUFBRSxLQUFLN2EsRUFBRSt0RSxFQUFFdjlELE9BQU8sT0FBT2xRLElBQUlOLEVBQUVtdEIsS0FBSzh2QyxJQUFJajlELEVBQUUrdEUsRUFBRXY5RCxPQUFPLENBQUNsUSxFQUFFMk0sTUFBTWd3RCxHQUFHcGlELEVBQUV2YSxFQUFFQSxFQUFFLE1BQU11YSxFQUFFdmEsRUFBRWtrQixRQUFRLElBQUkza0IsRUFBRTJZLEVBQUUxVSxFQUFFeEQsRUFBRU4sRUFBRXRCLE1BQU0vQyxHQUFHLEdBQUcsT0FBT2tFLEVBQUUsQ0FBQyxPQUFPUyxJQUFJQSxFQUFFdWEsR0FBRyxLQUFLLENBQUM1VCxHQUFHM0csR0FBRyxPQUFPVCxFQUFFcWlELFdBQVdoN0MsRUFBRXBELEVBQUV4RCxHQUFHd2tDLEVBQUVnL0IsRUFBRWprRSxFQUFFaWxDLEVBQUVtNEIsR0FBRyxPQUFPZ3ZCLEVBQUV4cUYsRUFBRTVCLEVBQUVvc0YsRUFBRXpuRSxRQUFRM2tCLEVBQUVvc0YsRUFBRXBzRixFQUFFUyxFQUFFdWEsQ0FBQyxDQUFDLEdBQUc3YSxFQUFFbXRCLEtBQUssT0FBTzdGLEVBQUV4akIsRUFDemZ4RCxHQUFHMndGLElBQUdOLEdBQUc3c0YsRUFBRW01RCxHQUFHeDdELEVBQUUsR0FBRyxPQUFPbkIsRUFBRSxDQUFDLE1BQU1OLEVBQUVtdEIsS0FBSzh2QyxJQUFJajlELEVBQUUrdEUsRUFBRXY5RCxPQUF3QixRQUFqQnhRLEVBQUVnekYsRUFBRWx2RixFQUFFOUQsRUFBRXRCLE1BQU0vQyxNQUFjbXBDLEVBQUVnL0IsRUFBRTlqRSxFQUFFOGtDLEVBQUVtNEIsR0FBRyxPQUFPZ3ZCLEVBQUV4cUYsRUFBRXpCLEVBQUVpc0YsRUFBRXpuRSxRQUFReGtCLEVBQUVpc0YsRUFBRWpzRixHQUFjLE9BQVhpeEYsSUFBR04sR0FBRzdzRixFQUFFbTVELEdBQVV4N0QsQ0FBQyxDQUFDLElBQUluQixFQUFFb1gsRUFBRTVULEVBQUV4RCxJQUFJTixFQUFFbXRCLEtBQUs4dkMsSUFBSWo5RCxFQUFFK3RFLEVBQUV2OUQsT0FBNEIsUUFBckJ4USxFQUFFaXpGLEVBQUUzeUYsRUFBRXdELEVBQUVtNUQsRUFBRWo5RCxFQUFFdEIsTUFBTS9DLE1BQWNzTCxHQUFHLE9BQU9qSCxFQUFFa2lELFdBQVc1aEQsRUFBRWc3RSxPQUFPLE9BQU90N0UsRUFBRXlMLElBQUl3eEQsRUFBRWo5RCxFQUFFeUwsS0FBS3E1QixFQUFFZy9CLEVBQUU5akUsRUFBRThrQyxFQUFFbTRCLEdBQUcsT0FBT2d2QixFQUFFeHFGLEVBQUV6QixFQUFFaXNGLEVBQUV6bkUsUUFBUXhrQixFQUFFaXNGLEVBQUVqc0YsR0FBdUQsT0FBcERpSCxHQUFHM0csRUFBRTJELFNBQVEsU0FBU2dELEdBQUcsT0FBT0MsRUFBRXBELEVBQUVtRCxFQUFFLElBQUdncUYsSUFBR04sR0FBRzdzRixFQUFFbTVELEdBQVV4N0QsQ0FBQyxDQUczVCxPQUg0VCxTQUFTdXFGLEVBQUUva0YsRUFBRXlRLEVBQUVvc0QsRUFBRWlLLEdBQWtGLEdBQS9FLGlCQUFrQmpLLEdBQUcsT0FBT0EsR0FBR0EsRUFBRXRoRSxPQUFPb3FFLEdBQUksT0FBTzlJLEVBQUVyNEQsTUFBTXE0RCxFQUFFQSxFQUFFcDVDLE1BQU0zaEIsVUFBYSxpQkFBa0IrNkQsR0FBRyxPQUFPQSxFQUFFLENBQUMsT0FBT0EsRUFBRW9LLFVBQVUsS0FBS3pCLEVBQUd4bEUsRUFBRSxDQUFDLElBQUksSUFBSXRMLEVBQzdoQm1vRSxFQUFFcjRELElBQUloSyxFQUFFaVcsRUFBRSxPQUFPalcsR0FBRyxDQUFDLEdBQUdBLEVBQUVnSyxNQUFNOVAsRUFBRSxDQUFVLElBQVRBLEVBQUVtb0UsRUFBRXRoRSxRQUFZb3FFLEdBQUksR0FBRyxJQUFJbnJFLEVBQUV1cUIsSUFBSSxDQUFDMUUsRUFBRXJnQixFQUFFeEYsRUFBRStpQixVQUFTOU0sRUFBRTVULEVBQUVyQyxFQUFFcWlFLEVBQUVwNUMsTUFBTTNoQixXQUFZK3RFLE9BQU83dkUsRUFBRUEsRUFBRXlRLEVBQUUsTUFBTXpRLENBQUMsT0FBTyxHQUFHeEYsRUFBRTBvRSxjQUFjeHVFLEdBQUcsaUJBQWtCQSxHQUFHLE9BQU9BLEdBQUdBLEVBQUV1eUUsV0FBV2IsR0FBSW9sQixHQUFHOTJGLEtBQUs4RixFQUFFZSxLQUFLLENBQUM4a0IsRUFBRXJnQixFQUFFeEYsRUFBRStpQixVQUFTOU0sRUFBRTVULEVBQUVyQyxFQUFFcWlFLEVBQUVwNUMsUUFBUzJuRSxJQUFJRCxHQUFHbnJGLEVBQUV4RixFQUFFcWlFLEdBQUdwc0QsRUFBRW8vRCxPQUFPN3ZFLEVBQUVBLEVBQUV5USxFQUFFLE1BQU16USxDQUFDLENBQUNxZ0IsRUFBRXJnQixFQUFFeEYsR0FBRyxLQUFLLENBQU15RixFQUFFRCxFQUFFeEYsR0FBR0EsRUFBRUEsRUFBRStpQixPQUFPLENBQUNzL0MsRUFBRXRoRSxPQUFPb3FFLElBQUlsMUQsRUFBRXE3RSxHQUFHanZCLEVBQUVwNUMsTUFBTTNoQixTQUFTOUIsRUFBRWt5QixLQUFLNDBDLEVBQUVqSyxFQUFFcjRELE1BQU9xckUsT0FBTzd2RSxFQUFFQSxFQUFFeVEsS0FBSXEyRCxFQUFFOGtCLEdBQUcvdUIsRUFBRXRoRSxLQUFLc2hFLEVBQUVyNEQsSUFBSXE0RCxFQUFFcDVDLE1BQU0sS0FBS3pqQixFQUFFa3lCLEtBQUs0MEMsSUFBS3NrQixJQUFJRCxHQUFHbnJGLEVBQUV5USxFQUFFb3NELEdBQUdpSyxFQUFFK0ksT0FBTzd2RSxFQUFFQSxFQUFFOG1FLEVBQUUsQ0FBQyxPQUFPanBDLEVBQUU3OUIsR0FBRyxLQUFLMGxFLEVBQUcxbEUsRUFBRSxDQUFDLElBQUl4RixFQUFFcWlFLEVBQUVyNEQsSUFBSSxPQUN6ZmlNLEdBQUcsQ0FBQyxHQUFHQSxFQUFFak0sTUFBTWhLLEVBQUUsSUFBRyxJQUFJaVcsRUFBRXNVLEtBQUt0VSxFQUFFODlELFVBQVUwRyxnQkFBZ0JwWSxFQUFFb1ksZUFBZXhrRSxFQUFFODlELFVBQVV0NUUsaUJBQWlCNG5FLEVBQUU1bkUsZUFBZSxDQUFDb3JCLEVBQUVyZ0IsRUFBRXlRLEVBQUU4TSxVQUFTOU0sRUFBRTVULEVBQUU0VCxFQUFFb3NELEVBQUUvNkQsVUFBVSxLQUFNK3RFLE9BQU83dkUsRUFBRUEsRUFBRXlRLEVBQUUsTUFBTXpRLENBQUMsQ0FBTXFnQixFQUFFcmdCLEVBQUV5USxHQUFHLEtBQUssQ0FBTXhRLEVBQUVELEVBQUV5USxHQUFHQSxFQUFFQSxFQUFFOE0sT0FBTyxFQUFDOU0sRUFBRW83RSxHQUFHaHZCLEVBQUU3OEQsRUFBRWt5QixLQUFLNDBDLElBQUsrSSxPQUFPN3ZFLEVBQUVBLEVBQUV5USxDQUFDLENBQUMsT0FBT290QixFQUFFNzlCLEdBQUcsS0FBS29tRSxFQUFHLE9BQWlCMmUsRUFBRS9rRixFQUFFeVEsR0FBZGpXLEVBQUVxaUUsRUFBRXNLLE9BQWN0SyxFQUFFcUssVUFBVUosR0FBRyxHQUFHNEIsR0FBRzdMLEdBQUcsT0FBTzlqRSxFQUFFaUgsRUFBRXlRLEVBQUVvc0QsRUFBRWlLLEdBQUcsR0FBR1AsRUFBRzFKLEdBQUcsT0FBT2prRSxFQUFFb0gsRUFBRXlRLEVBQUVvc0QsRUFBRWlLLEdBQUd5a0IsR0FBR3ZyRixFQUFFNjhELEVBQUUsQ0FBQyxNQUFNLGlCQUFrQkEsR0FBRyxLQUFLQSxHQUFHLGlCQUFrQkEsR0FBR0EsRUFBRSxHQUFHQSxFQUFFLE9BQU9wc0QsR0FBRyxJQUFJQSxFQUFFc1UsS0FBSzFFLEVBQUVyZ0IsRUFBRXlRLEVBQUU4TSxVQUFTOU0sRUFBRTVULEVBQUU0VCxFQUFFb3NELElBQUtnVCxPQUFPN3ZFLEVBQUVBLEVBQUV5USxJQUNuZjRQLEVBQUVyZ0IsRUFBRXlRLElBQUdBLEVBQUVrN0UsR0FBRzl1QixFQUFFNzhELEVBQUVreUIsS0FBSzQwQyxJQUFLK0ksT0FBTzd2RSxFQUFFQSxFQUFFeVEsR0FBR290QixFQUFFNzlCLElBQUlxZ0IsRUFBRXJnQixFQUFFeVEsRUFBRSxDQUFTLENBQUMsSUFBSXc3RSxHQUFHUixJQUFHLEdBQUlTLEdBQUdULElBQUcsR0FBSVUsR0FBR3pFLEdBQUcsTUFBTTBFLEdBQUcsS0FBS0MsR0FBRyxLQUFLQyxHQUFHLEtBQUssU0FBU0MsS0FBS0QsR0FBR0QsR0FBR0QsR0FBRyxJQUFJLENBQUMsU0FBU0ksR0FBR3hzRixHQUFHLElBQUlDLEVBQUVrc0YsR0FBRzl5RSxRQUFRc3VFLEdBQUV3RSxJQUFJbnNGLEVBQUV5c0YsY0FBY3hzRixDQUFDLENBQUMsU0FBU3lzRixHQUFHMXNGLEVBQUVDLEVBQUVvZ0IsR0FBRyxLQUFLLE9BQU9yZ0IsR0FBRyxDQUFDLElBQUl5USxFQUFFelEsRUFBRWk3QyxVQUErSCxJQUFwSGo3QyxFQUFFMnNGLFdBQVcxc0YsS0FBS0EsR0FBR0QsRUFBRTJzRixZQUFZMXNGLEVBQUUsT0FBT3dRLElBQUlBLEVBQUVrOEUsWUFBWTFzRixJQUFJLE9BQU93USxJQUFJQSxFQUFFazhFLFdBQVcxc0YsS0FBS0EsSUFBSXdRLEVBQUVrOEUsWUFBWTFzRixHQUFNRCxJQUFJcWdCLEVBQUUsTUFBTXJnQixFQUFFQSxFQUFFNnZFLE1BQU0sQ0FBQyxDQUNuWixTQUFTbFosR0FBRzMyRCxFQUFFQyxHQUFHbXNGLEdBQUdwc0YsRUFBRXNzRixHQUFHRCxHQUFHLEtBQXNCLFFBQWpCcnNGLEVBQUVBLEVBQUU0c0YsZUFBdUIsT0FBTzVzRixFQUFFNnNGLGtCQUFvQjdzRixFQUFFOHNGLE1BQU03c0YsS0FBSzhzRixJQUFHLEdBQUkvc0YsRUFBRTZzRixhQUFhLEtBQUssQ0FBQyxTQUFTRyxHQUFHaHRGLEdBQUcsSUFBSUMsRUFBRUQsRUFBRXlzRixjQUFjLEdBQUdILEtBQUt0c0YsRUFBRSxHQUFHQSxFQUFFLENBQUMxQyxRQUFRMEMsRUFBRWl0RixjQUFjaHRGLEVBQUVzSixLQUFLLE1BQU0sT0FBTzhpRixHQUFHLENBQUMsR0FBRyxPQUFPRCxHQUFHLE1BQU05b0YsTUFBTXRLLEVBQUUsTUFBTXF6RixHQUFHcnNGLEVBQUVvc0YsR0FBR1EsYUFBYSxDQUFDRSxNQUFNLEVBQUVELGFBQWE3c0YsRUFBRSxNQUFNcXNGLEdBQUdBLEdBQUc5aUYsS0FBS3ZKLEVBQUUsT0FBT0MsQ0FBQyxDQUFDLElBQUlpdEYsR0FBRyxLQUFLLFNBQVNDLEdBQUdudEYsR0FBRyxPQUFPa3RGLEdBQUdBLEdBQUcsQ0FBQ2x0RixHQUFHa3RGLEdBQUd6MEYsS0FBS3VILEVBQUUsQ0FDdlksU0FBU290RixHQUFHcHRGLEVBQUVDLEVBQUVvZ0IsRUFBRTVQLEdBQUcsSUFBSTVULEVBQUVvRCxFQUFFb3RGLFlBQStFLE9BQW5FLE9BQU94d0YsR0FBR3dqQixFQUFFOVcsS0FBSzhXLEVBQUU4c0UsR0FBR2x0RixLQUFLb2dCLEVBQUU5VyxLQUFLMU0sRUFBRTBNLEtBQUsxTSxFQUFFME0sS0FBSzhXLEdBQUdwZ0IsRUFBRW90RixZQUFZaHRFLEVBQVNpdEUsR0FBR3R0RixFQUFFeVEsRUFBRSxDQUFDLFNBQVM2OEUsR0FBR3R0RixFQUFFQyxHQUFHRCxFQUFFOHNGLE9BQU83c0YsRUFBRSxJQUFJb2dCLEVBQUVyZ0IsRUFBRWk3QyxVQUFxQyxJQUEzQixPQUFPNTZCLElBQUlBLEVBQUV5c0UsT0FBTzdzRixHQUFHb2dCLEVBQUVyZ0IsRUFBTUEsRUFBRUEsRUFBRTZ2RSxPQUFPLE9BQU83dkUsR0FBR0EsRUFBRTJzRixZQUFZMXNGLEVBQWdCLFFBQWRvZ0IsRUFBRXJnQixFQUFFaTdDLGFBQXFCNTZCLEVBQUVzc0UsWUFBWTFzRixHQUFHb2dCLEVBQUVyZ0IsRUFBRUEsRUFBRUEsRUFBRTZ2RSxPQUFPLE9BQU8sSUFBSXh2RCxFQUFFMEUsSUFBSTFFLEVBQUVrdUQsVUFBVSxJQUFJLENBQUMsSUFBSWdmLElBQUcsRUFBRyxTQUFTQyxHQUFHeHRGLEdBQUdBLEVBQUV5dEYsWUFBWSxDQUFDL3NDLFVBQVUxZ0QsRUFBRWd3RSxjQUFjMGQsZ0JBQWdCLEtBQUtDLGVBQWUsS0FBS0MsT0FBTyxDQUFDQyxRQUFRLEtBQUtSLFlBQVksS0FBS1AsTUFBTSxHQUFHZ0IsUUFBUSxLQUFLLENBQy9lLFNBQVNDLEdBQUcvdEYsRUFBRUMsR0FBR0QsRUFBRUEsRUFBRXl0RixZQUFZeHRGLEVBQUV3dEYsY0FBY3p0RixJQUFJQyxFQUFFd3RGLFlBQVksQ0FBQy9zQyxVQUFVMWdELEVBQUUwZ0QsVUFBVWd0QyxnQkFBZ0IxdEYsRUFBRTB0RixnQkFBZ0JDLGVBQWUzdEYsRUFBRTJ0RixlQUFlQyxPQUFPNXRGLEVBQUU0dEYsT0FBT0UsUUFBUTl0RixFQUFFOHRGLFNBQVMsQ0FBQyxTQUFTRSxHQUFHaHVGLEVBQUVDLEdBQUcsTUFBTSxDQUFDZ3VGLFVBQVVqdUYsRUFBRWt1RixLQUFLanVGLEVBQUU4a0IsSUFBSSxFQUFFb3BFLFFBQVEsS0FBS25vRSxTQUFTLEtBQUt6YyxLQUFLLEtBQUssQ0FDdFIsU0FBUzZrRixHQUFHcHVGLEVBQUVDLEVBQUVvZ0IsR0FBRyxJQUFJNVAsRUFBRXpRLEVBQUV5dEYsWUFBWSxHQUFHLE9BQU9oOUUsRUFBRSxPQUFPLEtBQWdCLEdBQVhBLEVBQUVBLEVBQUVtOUUsT0FBaUIsRUFBRlMsR0FBSyxDQUFDLElBQUl4eEYsRUFBRTRULEVBQUVvOUUsUUFBK0QsT0FBdkQsT0FBT2h4RixFQUFFb0QsRUFBRXNKLEtBQUt0SixHQUFHQSxFQUFFc0osS0FBSzFNLEVBQUUwTSxLQUFLMU0sRUFBRTBNLEtBQUt0SixHQUFHd1EsRUFBRW85RSxRQUFRNXRGLEVBQVNxdEYsR0FBR3R0RixFQUFFcWdCLEVBQUUsQ0FBb0YsT0FBbkUsUUFBaEJ4akIsRUFBRTRULEVBQUU0OEUsY0FBc0JwdEYsRUFBRXNKLEtBQUt0SixFQUFFa3RGLEdBQUcxOEUsS0FBS3hRLEVBQUVzSixLQUFLMU0sRUFBRTBNLEtBQUsxTSxFQUFFME0sS0FBS3RKLEdBQUd3USxFQUFFNDhFLFlBQVlwdEYsRUFBU3F0RixHQUFHdHRGLEVBQUVxZ0IsRUFBRSxDQUFDLFNBQVNpdUUsR0FBR3R1RixFQUFFQyxFQUFFb2dCLEdBQW1CLEdBQUcsUUFBbkJwZ0IsRUFBRUEsRUFBRXd0RixlQUEwQnh0RixFQUFFQSxFQUFFMnRGLE9BQWMsUUFBRnZ0RSxHQUFZLENBQUMsSUFBSTVQLEVBQUV4USxFQUFFNnNGLE1BQXdCenNFLEdBQWxCNVAsR0FBR3pRLEVBQUV3eUUsYUFBa0J2eUUsRUFBRTZzRixNQUFNenNFLEVBQUU4eUQsR0FBR256RSxFQUFFcWdCLEVBQUUsQ0FBQyxDQUNyWixTQUFTa3VFLEdBQUd2dUYsRUFBRUMsR0FBRyxJQUFJb2dCLEVBQUVyZ0IsRUFBRXl0RixZQUFZaDlFLEVBQUV6USxFQUFFaTdDLFVBQVUsR0FBRyxPQUFPeHFDLEdBQW9CNFAsS0FBaEI1UCxFQUFFQSxFQUFFZzlFLGFBQW1CLENBQUMsSUFBSTV3RixFQUFFLEtBQUtnZ0UsRUFBRSxLQUF5QixHQUFHLFFBQXZCeDhDLEVBQUVBLEVBQUVxdEUsaUJBQTRCLENBQUMsRUFBRSxDQUFDLElBQUk3dkQsRUFBRSxDQUFDb3dELFVBQVU1dEUsRUFBRTR0RSxVQUFVQyxLQUFLN3RFLEVBQUU2dEUsS0FBS25wRSxJQUFJMUUsRUFBRTBFLElBQUlvcEUsUUFBUTl0RSxFQUFFOHRFLFFBQVFub0UsU0FBUzNGLEVBQUUyRixTQUFTemMsS0FBSyxNQUFNLE9BQU9zekQsRUFBRWhnRSxFQUFFZ2dFLEVBQUVoL0IsRUFBRWcvQixFQUFFQSxFQUFFdHpELEtBQUtzMEIsRUFBRXhkLEVBQUVBLEVBQUU5VyxJQUFJLE9BQU8sT0FBTzhXLEdBQUcsT0FBT3c4QyxFQUFFaGdFLEVBQUVnZ0UsRUFBRTU4RCxFQUFFNDhELEVBQUVBLEVBQUV0ekQsS0FBS3RKLENBQUMsTUFBTXBELEVBQUVnZ0UsRUFBRTU4RCxFQUFpSCxPQUEvR29nQixFQUFFLENBQUNxZ0MsVUFBVWp3QyxFQUFFaXdDLFVBQVVndEMsZ0JBQWdCN3dGLEVBQUU4d0YsZUFBZTl3QixFQUFFK3dCLE9BQU9uOUUsRUFBRW05RSxPQUFPRSxRQUFRcjlFLEVBQUVxOUUsY0FBUzl0RixFQUFFeXRGLFlBQVlwdEUsRUFBUSxDQUFvQixRQUFuQnJnQixFQUFFcWdCLEVBQUVzdEUsZ0JBQXdCdHRFLEVBQUVxdEUsZ0JBQWdCenRGLEVBQUVELEVBQUV1SixLQUNuZnRKLEVBQUVvZ0IsRUFBRXN0RSxlQUFlMXRGLENBQUMsQ0FDcEIsU0FBU3V1RixHQUFHeHVGLEVBQUVDLEVBQUVvZ0IsRUFBRTVQLEdBQUcsSUFBSTVULEVBQUVtRCxFQUFFeXRGLFlBQVlGLElBQUcsRUFBRyxJQUFJMXdCLEVBQUVoZ0UsRUFBRTZ3RixnQkFBZ0I3dkQsRUFBRWhoQyxFQUFFOHdGLGVBQWU3bUIsRUFBRWpxRSxFQUFFK3dGLE9BQU9DLFFBQVEsR0FBRyxPQUFPL21CLEVBQUUsQ0FBQ2pxRSxFQUFFK3dGLE9BQU9DLFFBQVEsS0FBSyxJQUFJbjVGLEVBQUVveUUsRUFBRXRzRSxFQUFFOUYsRUFBRTZVLEtBQUs3VSxFQUFFNlUsS0FBSyxLQUFLLE9BQU9zMEIsRUFBRWcvQixFQUFFcmlFLEVBQUVxakMsRUFBRXQwQixLQUFLL08sRUFBRXFqQyxFQUFFbnBDLEVBQUUsSUFBSTJFLEVBQUUyRyxFQUFFaTdDLFVBQVUsT0FBTzVoRCxJQUFvQnl0RSxHQUFoQnp0RSxFQUFFQSxFQUFFbzBGLGFBQWdCRSxrQkFBbUI5dkQsSUFBSSxPQUFPaXBDLEVBQUV6dEUsRUFBRXEwRixnQkFBZ0JsekYsRUFBRXNzRSxFQUFFdjlELEtBQUsvTyxFQUFFbkIsRUFBRXMwRixlQUFlajVGLEVBQUcsQ0FBQyxHQUFHLE9BQU9tb0UsRUFBRSxDQUFDLElBQUlrdkIsRUFBRWx2RixFQUFFNmpELFVBQTZCLElBQW5CN2lCLEVBQUUsRUFBRXhrQyxFQUFFbUIsRUFBRTlGLEVBQUUsS0FBS295RSxFQUFFakssSUFBSSxDQUFDLElBQUl0ckQsRUFBRXUxRCxFQUFFb25CLEtBQUtsQyxFQUFFbGxCLEVBQUVtbkIsVUFBVSxJQUFJeDlFLEVBQUVjLEtBQUtBLEVBQUUsQ0FBQyxPQUFPbFksSUFBSUEsRUFBRUEsRUFBRWtRLEtBQUssQ0FBQzBrRixVQUFVakMsRUFBRWtDLEtBQUssRUFBRW5wRSxJQUFJK2hELEVBQUUvaEQsSUFBSW9wRSxRQUFRcm5CLEVBQUVxbkIsUUFBUW5vRSxTQUFTOGdELEVBQUU5Z0QsU0FDdmZ6YyxLQUFLLE9BQU92SixFQUFFLENBQUMsSUFBSWpILEVBQUVpSCxFQUFFcEgsRUFBRWt1RSxFQUFVLE9BQVJ2MUQsRUFBRXRSLEVBQUUrckYsRUFBRTNyRSxFQUFTem5CLEVBQUVtc0IsS0FBSyxLQUFLLEVBQWMsR0FBRyxtQkFBZmhzQixFQUFFSCxFQUFFdTFGLFNBQWlDLENBQUNwQyxFQUFFaHpGLEVBQUU1QixLQUFLNjBGLEVBQUVELEVBQUV4NkUsR0FBRyxNQUFNdlIsQ0FBQyxDQUFDK3JGLEVBQUVoekYsRUFBRSxNQUFNaUgsRUFBRSxLQUFLLEVBQUVqSCxFQUFFKzJFLE9BQWUsTUFBVC8yRSxFQUFFKzJFLE1BQWEsSUFBSSxLQUFLLEVBQXNELEdBQUcsT0FBM0N2K0QsRUFBRSxtQkFBZHhZLEVBQUVILEVBQUV1MUYsU0FBZ0NwMUYsRUFBRTVCLEtBQUs2MEYsRUFBRUQsRUFBRXg2RSxHQUFHeFksR0FBMEIsTUFBTWlILEVBQUUrckYsRUFBRXQzRixFQUFFLENBQUMsRUFBRXMzRixFQUFFeDZFLEdBQUcsTUFBTXZSLEVBQUUsS0FBSyxFQUFFdXRGLElBQUcsRUFBRyxDQUFDLE9BQU96bUIsRUFBRTlnRCxVQUFVLElBQUk4Z0QsRUFBRW9uQixPQUFPbHVGLEVBQUU4dkUsT0FBTyxHQUFlLFFBQVp2K0QsRUFBRTFVLEVBQUVpeEYsU0FBaUJqeEYsRUFBRWl4RixRQUFRLENBQUNobkIsR0FBR3YxRCxFQUFFOVksS0FBS3F1RSxHQUFHLE1BQU1rbEIsRUFBRSxDQUFDaUMsVUFBVWpDLEVBQUVrQyxLQUFLMzhFLEVBQUV3VCxJQUFJK2hELEVBQUUvaEQsSUFBSW9wRSxRQUFRcm5CLEVBQUVxbkIsUUFBUW5vRSxTQUFTOGdELEVBQUU5Z0QsU0FBU3pjLEtBQUssTUFBTSxPQUFPbFEsR0FBR21CLEVBQUVuQixFQUFFMnlGLEVBQUV0M0YsRUFBRXEzRixHQUFHMXlGLEVBQUVBLEVBQUVrUSxLQUFLeWlGLEVBQUVudUQsR0FBR3RzQixFQUMzZSxHQUFHLFFBQVp1MUQsRUFBRUEsRUFBRXY5RCxNQUFpQixJQUFzQixRQUFuQnU5RCxFQUFFanFFLEVBQUUrd0YsT0FBT0MsU0FBaUIsTUFBZS9tQixHQUFKdjFELEVBQUV1MUQsR0FBTXY5RCxLQUFLZ0ksRUFBRWhJLEtBQUssS0FBSzFNLEVBQUU4d0YsZUFBZXA4RSxFQUFFMVUsRUFBRSt3RixPQUFPQyxRQUFRLEtBQUksQ0FBc0csR0FBNUYsT0FBT3gwRixJQUFJM0UsRUFBRXEzRixHQUFHbHZGLEVBQUU2akQsVUFBVWhzRCxFQUFFbUksRUFBRTZ3RixnQkFBZ0JsekYsRUFBRXFDLEVBQUU4d0YsZUFBZXQwRixFQUE0QixRQUExQjRHLEVBQUVwRCxFQUFFK3dGLE9BQU9QLGFBQXdCLENBQUN4d0YsRUFBRW9ELEVBQUUsR0FBRzQ5QixHQUFHaGhDLEVBQUVxeEYsS0FBS3J4RixFQUFFQSxFQUFFME0sV0FBVzFNLElBQUlvRCxFQUFFLE1BQU0sT0FBTzQ4RCxJQUFJaGdFLEVBQUUrd0YsT0FBT2QsTUFBTSxHQUFHMkIsSUFBSTV3RCxFQUFFNzlCLEVBQUU4c0YsTUFBTWp2RCxFQUFFNzlCLEVBQUVnd0UsY0FBYytiLENBQUMsQ0FBQyxDQUM5VixTQUFTMkMsR0FBRzF1RixFQUFFQyxFQUFFb2dCLEdBQThCLEdBQTNCcmdCLEVBQUVDLEVBQUU2dEYsUUFBUTd0RixFQUFFNnRGLFFBQVEsS0FBUSxPQUFPOXRGLEVBQUUsSUFBSUMsRUFBRSxFQUFFQSxFQUFFRCxFQUFFeEwsT0FBT3lMLElBQUksQ0FBQyxJQUFJd1EsRUFBRXpRLEVBQUVDLEdBQUdwRCxFQUFFNFQsRUFBRXVWLFNBQVMsR0FBRyxPQUFPbnBCLEVBQUUsQ0FBcUIsR0FBcEI0VCxFQUFFdVYsU0FBUyxLQUFLdlYsRUFBRTRQLEVBQUssbUJBQW9CeGpCLEVBQUUsTUFBTXlHLE1BQU10SyxFQUFFLElBQUk2RCxJQUFJQSxFQUFFMUYsS0FBS3NaLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSWsrRSxHQUFHLENBQUMsRUFBRUMsR0FBR2xILEdBQUdpSCxJQUFJRSxHQUFHbkgsR0FBR2lILElBQUlHLEdBQUdwSCxHQUFHaUgsSUFBSSxTQUFTSSxHQUFHL3VGLEdBQUcsR0FBR0EsSUFBSTJ1RixHQUFHLE1BQU1yckYsTUFBTXRLLEVBQUUsTUFBTSxPQUFPZ0gsQ0FBQyxDQUNuUyxTQUFTZ3ZGLEdBQUdodkYsRUFBRUMsR0FBeUMsT0FBdEMybkYsR0FBRWtILEdBQUc3dUYsR0FBRzJuRixHQUFFaUgsR0FBRzd1RixHQUFHNG5GLEdBQUVnSCxHQUFHRCxJQUFJM3VGLEVBQUVDLEVBQUUrMkIsVUFBbUIsS0FBSyxFQUFFLEtBQUssR0FBRy8yQixHQUFHQSxFQUFFQSxFQUFFbWhGLGlCQUFpQm5oRixFQUFFcXBFLGFBQWFILEdBQUcsS0FBSyxJQUFJLE1BQU0sUUFBa0VscEUsRUFBRWtwRSxHQUFyQ2xwRSxHQUF2QkQsRUFBRSxJQUFJQSxFQUFFQyxFQUFFZ3VFLFdBQVdodUUsR0FBTXFwRSxjQUFjLEtBQUt0cEUsRUFBRUEsRUFBRWdFLFNBQWtCMmpGLEdBQUVpSCxJQUFJaEgsR0FBRWdILEdBQUczdUYsRUFBRSxDQUFDLFNBQVNndkYsS0FBS3RILEdBQUVpSCxJQUFJakgsR0FBRWtILElBQUlsSCxHQUFFbUgsR0FBRyxDQUFDLFNBQVNJLEdBQUdsdkYsR0FBRyt1RixHQUFHRCxHQUFHejFFLFNBQVMsSUFBSXBaLEVBQUU4dUYsR0FBR0gsR0FBR3YxRSxTQUFhZ0gsRUFBRThvRCxHQUFHbHBFLEVBQUVELEVBQUV6RSxNQUFNMEUsSUFBSW9nQixJQUFJdW5FLEdBQUVpSCxHQUFHN3VGLEdBQUc0bkYsR0FBRWdILEdBQUd2dUUsR0FBRyxDQUFDLFNBQVM4dUUsR0FBR252RixHQUFHNnVGLEdBQUd4MUUsVUFBVXJaLElBQUkybkYsR0FBRWlILElBQUlqSCxHQUFFa0gsSUFBSSxDQUFDLElBQUlPLEdBQUUxSCxHQUFHLEdBQ3haLFNBQVMySCxHQUFHcnZGLEdBQUcsSUFBSSxJQUFJQyxFQUFFRCxFQUFFLE9BQU9DLEdBQUcsQ0FBQyxHQUFHLEtBQUtBLEVBQUU4a0IsSUFBSSxDQUFDLElBQUkxRSxFQUFFcGdCLEVBQUUrdkUsY0FBYyxHQUFHLE9BQU8zdkQsSUFBbUIsUUFBZkEsRUFBRUEsRUFBRTR2RCxhQUFxQixPQUFPNXZELEVBQUV4a0IsTUFBTSxPQUFPd2tCLEVBQUV4a0IsTUFBTSxPQUFPb0UsQ0FBQyxNQUFNLEdBQUcsS0FBS0EsRUFBRThrQixVQUFLLElBQVM5a0IsRUFBRTZxRixjQUFjd0UsYUFBYSxHQUFnQixJQUFScnZGLEVBQUU2dkUsTUFBVyxPQUFPN3ZFLE9BQU8sR0FBRyxPQUFPQSxFQUFFbUssTUFBTSxDQUFDbkssRUFBRW1LLE1BQU15bEUsT0FBTzV2RSxFQUFFQSxFQUFFQSxFQUFFbUssTUFBTSxRQUFRLENBQUMsR0FBR25LLElBQUlELEVBQUUsTUFBTSxLQUFLLE9BQU9DLEVBQUVzZCxTQUFTLENBQUMsR0FBRyxPQUFPdGQsRUFBRTR2RSxRQUFRNXZFLEVBQUU0dkUsU0FBUzd2RSxFQUFFLE9BQU8sS0FBS0MsRUFBRUEsRUFBRTR2RSxNQUFNLENBQUM1dkUsRUFBRXNkLFFBQVFzeUQsT0FBTzV2RSxFQUFFNHZFLE9BQU81dkUsRUFBRUEsRUFBRXNkLE9BQU8sQ0FBQyxPQUFPLElBQUksQ0FBQyxJQUFJZ3lFLEdBQUcsR0FDcmMsU0FBU0MsS0FBSyxJQUFJLElBQUl4dkYsRUFBRSxFQUFFQSxFQUFFdXZGLEdBQUcvNkYsT0FBT3dMLElBQUl1dkYsR0FBR3Z2RixHQUFHeXZGLDhCQUE4QixLQUFLRixHQUFHLzZGLE9BQU8sQ0FBQyxDQUFDLElBQUlrN0YsR0FBR3BxQixFQUFHcXFCLHVCQUF1QkMsR0FBR3RxQixFQUFHb1Esd0JBQXdCbWEsR0FBRyxFQUFFQyxHQUFFLEtBQUtDLEdBQUUsS0FBSzc3RixHQUFFLEtBQUs4N0YsSUFBRyxFQUFHQyxJQUFHLEVBQUdDLEdBQUcsRUFBRUMsR0FBRyxFQUFFLFNBQVN2OEMsS0FBSSxNQUFNdHdDLE1BQU10SyxFQUFFLEtBQU0sQ0FBQyxTQUFTbzNGLEdBQUdwd0YsRUFBRUMsR0FBRyxHQUFHLE9BQU9BLEVBQUUsT0FBTSxFQUFHLElBQUksSUFBSW9nQixFQUFFLEVBQUVBLEVBQUVwZ0IsRUFBRXpMLFFBQVE2ckIsRUFBRXJnQixFQUFFeEwsT0FBTzZyQixJQUFJLElBQUlpZ0UsR0FBR3RnRixFQUFFcWdCLEdBQUdwZ0IsRUFBRW9nQixJQUFJLE9BQU0sRUFBRyxPQUFNLENBQUUsQ0FDaFcsU0FBU2d3RSxHQUFHcndGLEVBQUVDLEVBQUVvZ0IsRUFBRTVQLEVBQUU1VCxFQUFFZ2dFLEdBQXlILEdBQXRIZ3pCLEdBQUdoekIsRUFBRWl6QixHQUFFN3ZGLEVBQUVBLEVBQUUrdkUsY0FBYyxLQUFLL3ZFLEVBQUV3dEYsWUFBWSxLQUFLeHRGLEVBQUU2c0YsTUFBTSxFQUFFNEMsR0FBR3IyRSxRQUFRLE9BQU9yWixHQUFHLE9BQU9BLEVBQUVnd0UsY0FBY3NnQixHQUFHQyxHQUFHdndGLEVBQUVxZ0IsRUFBRTVQLEVBQUU1VCxHQUFNb3pGLEdBQUcsQ0FBQ3B6QixFQUFFLEVBQUUsRUFBRSxDQUFZLEdBQVhvekIsSUFBRyxFQUFHQyxHQUFHLEVBQUssSUFBSXJ6QixFQUFFLE1BQU12NUQsTUFBTXRLLEVBQUUsTUFBTTZqRSxHQUFHLEVBQUUzb0UsR0FBRTY3RixHQUFFLEtBQUs5dkYsRUFBRXd0RixZQUFZLEtBQUtpQyxHQUFHcjJFLFFBQVFtM0UsR0FBR3h3RixFQUFFcWdCLEVBQUU1UCxFQUFFNVQsRUFBRSxPQUFPb3pGLEdBQUcsQ0FBK0QsR0FBOURQLEdBQUdyMkUsUUFBUW8zRSxHQUFHeHdGLEVBQUUsT0FBTzh2RixJQUFHLE9BQU9BLEdBQUV4bUYsS0FBS3NtRixHQUFHLEVBQUUzN0YsR0FBRTY3RixHQUFFRCxHQUFFLEtBQUtFLElBQUcsRUFBTS92RixFQUFFLE1BQU1xRCxNQUFNdEssRUFBRSxNQUFNLE9BQU9nSCxDQUFDLENBQUMsU0FBUzB3RixLQUFLLElBQUkxd0YsRUFBRSxJQUFJa3dGLEdBQVEsT0FBTEEsR0FBRyxFQUFTbHdGLENBQUMsQ0FDL1ksU0FBUzJ3RixLQUFLLElBQUkzd0YsRUFBRSxDQUFDZ3dFLGNBQWMsS0FBS3R2QixVQUFVLEtBQUtrd0MsVUFBVSxLQUFLLzBELE1BQU0sS0FBS3R5QixLQUFLLE1BQThDLE9BQXhDLE9BQU9yVixHQUFFNDdGLEdBQUU5ZixjQUFjOTdFLEdBQUU4TCxFQUFFOUwsR0FBRUEsR0FBRXFWLEtBQUt2SixFQUFTOUwsRUFBQyxDQUFDLFNBQVMyOEYsS0FBSyxHQUFHLE9BQU9kLEdBQUUsQ0FBQyxJQUFJL3ZGLEVBQUU4dkYsR0FBRTcwQyxVQUFVajdDLEVBQUUsT0FBT0EsRUFBRUEsRUFBRWd3RSxjQUFjLElBQUksTUFBTWh3RSxFQUFFK3ZGLEdBQUV4bUYsS0FBSyxJQUFJdEosRUFBRSxPQUFPL0wsR0FBRTQ3RixHQUFFOWYsY0FBYzk3RSxHQUFFcVYsS0FBSyxHQUFHLE9BQU90SixFQUFFL0wsR0FBRStMLEVBQUU4dkYsR0FBRS92RixNQUFNLENBQUMsR0FBRyxPQUFPQSxFQUFFLE1BQU1zRCxNQUFNdEssRUFBRSxNQUFVZ0gsRUFBRSxDQUFDZ3dFLGVBQVArZixHQUFFL3ZGLEdBQXFCZ3dFLGNBQWN0dkIsVUFBVXF2QyxHQUFFcnZDLFVBQVVrd0MsVUFBVWIsR0FBRWEsVUFBVS8wRCxNQUFNazBELEdBQUVsMEQsTUFBTXR5QixLQUFLLE1BQU0sT0FBT3JWLEdBQUU0N0YsR0FBRTlmLGNBQWM5N0UsR0FBRThMLEVBQUU5TCxHQUFFQSxHQUFFcVYsS0FBS3ZKLENBQUMsQ0FBQyxPQUFPOUwsRUFBQyxDQUNqZSxTQUFTNDhGLEdBQUc5d0YsRUFBRUMsR0FBRyxNQUFNLG1CQUFvQkEsRUFBRUEsRUFBRUQsR0FBR0MsQ0FBQyxDQUNuRCxTQUFTOHdGLEdBQUcvd0YsR0FBRyxJQUFJQyxFQUFFNHdGLEtBQUt4d0UsRUFBRXBnQixFQUFFNDdCLE1BQU0sR0FBRyxPQUFPeGIsRUFBRSxNQUFNL2MsTUFBTXRLLEVBQUUsTUFBTXFuQixFQUFFMndFLG9CQUFvQmh4RixFQUFFLElBQUl5USxFQUFFcy9FLEdBQUVsekYsRUFBRTRULEVBQUVtZ0YsVUFBVS96QixFQUFFeDhDLEVBQUV3dEUsUUFBUSxHQUFHLE9BQU9oeEIsRUFBRSxDQUFDLEdBQUcsT0FBT2hnRSxFQUFFLENBQUMsSUFBSWdoQyxFQUFFaGhDLEVBQUUwTSxLQUFLMU0sRUFBRTBNLEtBQUtzekQsRUFBRXR6RCxLQUFLc3pELEVBQUV0ekQsS0FBS3MwQixDQUFDLENBQUNwdEIsRUFBRW1nRixVQUFVL3pGLEVBQUVnZ0UsRUFBRXg4QyxFQUFFd3RFLFFBQVEsSUFBSSxDQUFDLEdBQUcsT0FBT2h4RixFQUFFLENBQUNnZ0UsRUFBRWhnRSxFQUFFME0sS0FBS2tILEVBQUVBLEVBQUVpd0MsVUFBVSxJQUFJb21CLEVBQUVqcEMsRUFBRSxLQUFLbnBDLEVBQUUsS0FBSzhGLEVBQUVxaUUsRUFBRSxFQUFFLENBQUMsSUFBSXhqRSxFQUFFbUIsRUFBRTB6RixLQUFLLElBQUkyQixHQUFHeDJGLEtBQUtBLEVBQUUsT0FBTzNFLElBQUlBLEVBQUVBLEVBQUU2VSxLQUFLLENBQUMya0YsS0FBSyxFQUFFcDFFLE9BQU90ZSxFQUFFc2UsT0FBT200RSxjQUFjejJGLEVBQUV5MkYsY0FBY0MsV0FBVzEyRixFQUFFMDJGLFdBQVczbkYsS0FBSyxPQUFPa0gsRUFBRWpXLEVBQUV5MkYsY0FBY3oyRixFQUFFMDJGLFdBQVdseEYsRUFBRXlRLEVBQUVqVyxFQUFFc2UsWUFBWSxDQUFDLElBQUlpekUsRUFBRSxDQUFDbUMsS0FBSzcwRixFQUFFeWYsT0FBT3RlLEVBQUVzZSxPQUFPbTRFLGNBQWN6MkYsRUFBRXkyRixjQUNuZ0JDLFdBQVcxMkYsRUFBRTAyRixXQUFXM25GLEtBQUssTUFBTSxPQUFPN1UsR0FBR295RSxFQUFFcHlFLEVBQUVxM0YsRUFBRWx1RCxFQUFFcHRCLEdBQUcvYixFQUFFQSxFQUFFNlUsS0FBS3dpRixFQUFFK0QsR0FBRWhELE9BQU96ekYsRUFBRW8xRixJQUFJcDFGLENBQUMsQ0FBQ21CLEVBQUVBLEVBQUUrTyxJQUFJLE9BQU8sT0FBTy9PLEdBQUdBLElBQUlxaUUsR0FBRyxPQUFPbm9FLEVBQUVtcEMsRUFBRXB0QixFQUFFL2IsRUFBRTZVLEtBQUt1OUQsRUFBRXdaLEdBQUc3dkUsRUFBRXhRLEVBQUUrdkUsaUJBQWlCK2MsSUFBRyxHQUFJOXNGLEVBQUUrdkUsY0FBY3YvRCxFQUFFeFEsRUFBRXlnRCxVQUFVN2lCLEVBQUU1OUIsRUFBRTJ3RixVQUFVbDhGLEVBQUUyckIsRUFBRTh3RSxrQkFBa0IxZ0YsQ0FBQyxDQUFpQixHQUFHLFFBQW5CelEsRUFBRXFnQixFQUFFZ3RFLGFBQXdCLENBQUN4d0YsRUFBRW1ELEVBQUUsR0FBRzY4RCxFQUFFaGdFLEVBQUVxeEYsS0FBSzRCLEdBQUVoRCxPQUFPandCLEVBQUU0eEIsSUFBSTV4QixFQUFFaGdFLEVBQUVBLEVBQUUwTSxXQUFXMU0sSUFBSW1ELEVBQUUsTUFBTSxPQUFPbkQsSUFBSXdqQixFQUFFeXNFLE1BQU0sR0FBRyxNQUFNLENBQUM3c0YsRUFBRSt2RSxjQUFjM3ZELEVBQUUrd0UsU0FBUyxDQUM5WCxTQUFTQyxHQUFHcnhGLEdBQUcsSUFBSUMsRUFBRTR3RixLQUFLeHdFLEVBQUVwZ0IsRUFBRTQ3QixNQUFNLEdBQUcsT0FBT3hiLEVBQUUsTUFBTS9jLE1BQU10SyxFQUFFLE1BQU1xbkIsRUFBRTJ3RSxvQkFBb0JoeEYsRUFBRSxJQUFJeVEsRUFBRTRQLEVBQUUrd0UsU0FBU3YwRixFQUFFd2pCLEVBQUV3dEUsUUFBUWh4QixFQUFFNThELEVBQUUrdkUsY0FBYyxHQUFHLE9BQU9uekUsRUFBRSxDQUFDd2pCLEVBQUV3dEUsUUFBUSxLQUFLLElBQUlod0QsRUFBRWhoQyxFQUFFQSxFQUFFME0sS0FBSyxHQUFHc3pELEVBQUU3OEQsRUFBRTY4RCxFQUFFaC9CLEVBQUUva0IsUUFBUStrQixFQUFFQSxFQUFFdDBCLFdBQVdzMEIsSUFBSWhoQyxHQUFHeWpGLEdBQUd6akIsRUFBRTU4RCxFQUFFK3ZFLGlCQUFpQitjLElBQUcsR0FBSTlzRixFQUFFK3ZFLGNBQWNuVCxFQUFFLE9BQU81OEQsRUFBRTJ3RixZQUFZM3dGLEVBQUV5Z0QsVUFBVW1jLEdBQUd4OEMsRUFBRTh3RSxrQkFBa0J0MEIsQ0FBQyxDQUFDLE1BQU0sQ0FBQ0EsRUFBRXBzRCxFQUFFLENBQUMsU0FBUzZnRixLQUFLLENBQ3BXLFNBQVNDLEdBQUd2eEYsRUFBRUMsR0FBRyxJQUFJb2dCLEVBQUV5dkUsR0FBRXIvRSxFQUFFb2dGLEtBQUtoMEYsRUFBRW9ELElBQUk0OEQsR0FBR3lqQixHQUFHN3ZFLEVBQUV1L0QsY0FBY256RSxHQUFzRSxHQUFuRWdnRSxJQUFJcHNELEVBQUV1L0QsY0FBY256RSxFQUFFa3dGLElBQUcsR0FBSXQ4RSxFQUFFQSxFQUFFb3JCLE1BQU0yMUQsR0FBR0MsR0FBRzU2RixLQUFLLEtBQUt3cEIsRUFBRTVQLEVBQUV6USxHQUFHLENBQUNBLElBQU95USxFQUFFaWhGLGNBQWN6eEYsR0FBRzQ4RCxHQUFHLE9BQU8zb0UsSUFBdUIsRUFBcEJBLEdBQUU4N0UsY0FBY2pyRCxJQUFNLENBQXVELEdBQXREMUUsRUFBRXl2RCxPQUFPLEtBQUs2aEIsR0FBRyxFQUFFQyxHQUFHLzZGLEtBQUssS0FBS3dwQixFQUFFNVAsRUFBRTVULEVBQUVvRCxRQUFHLEVBQU8sTUFBUyxPQUFPNHhGLEdBQUUsTUFBTXZ1RixNQUFNdEssRUFBRSxNQUFjLEdBQUg2MkYsSUFBUWlDLEdBQUd6eEUsRUFBRXBnQixFQUFFcEQsRUFBRSxDQUFDLE9BQU9BLENBQUMsQ0FBQyxTQUFTaTFGLEdBQUc5eEYsRUFBRUMsRUFBRW9nQixHQUFHcmdCLEVBQUU4dkUsT0FBTyxNQUFNOXZFLEVBQUUsQ0FBQzB4RixZQUFZenhGLEVBQUV4SSxNQUFNNG9CLEdBQW1CLFFBQWhCcGdCLEVBQUU2dkYsR0FBRXJDLGNBQXNCeHRGLEVBQUUsQ0FBQzh4RixXQUFXLEtBQUtDLE9BQU8sTUFBTWxDLEdBQUVyQyxZQUFZeHRGLEVBQUVBLEVBQUUreEYsT0FBTyxDQUFDaHlGLElBQWdCLFFBQVhxZ0IsRUFBRXBnQixFQUFFK3hGLFFBQWdCL3hGLEVBQUUreEYsT0FBTyxDQUFDaHlGLEdBQUdxZ0IsRUFBRTVuQixLQUFLdUgsRUFBRyxDQUNsZixTQUFTNHhGLEdBQUc1eEYsRUFBRUMsRUFBRW9nQixFQUFFNVAsR0FBR3hRLEVBQUV4SSxNQUFNNG9CLEVBQUVwZ0IsRUFBRXl4RixZQUFZamhGLEVBQUV3aEYsR0FBR2h5RixJQUFJaXlGLEdBQUdseUYsRUFBRSxDQUFDLFNBQVN5eEYsR0FBR3p4RixFQUFFQyxFQUFFb2dCLEdBQUcsT0FBT0EsR0FBRSxXQUFXNHhFLEdBQUdoeUYsSUFBSWl5RixHQUFHbHlGLEVBQUUsR0FBRSxDQUFDLFNBQVNpeUYsR0FBR2p5RixHQUFHLElBQUlDLEVBQUVELEVBQUUweEYsWUFBWTF4RixFQUFFQSxFQUFFdkksTUFBTSxJQUFJLElBQUk0b0IsRUFBRXBnQixJQUFJLE9BQU9xZ0YsR0FBR3RnRixFQUFFcWdCLEVBQUUsQ0FBQyxNQUFNNVAsR0FBRyxPQUFNLENBQUUsQ0FBQyxDQUFDLFNBQVN5aEYsR0FBR2x5RixHQUFHLElBQUlDLEVBQUVxdEYsR0FBR3R0RixFQUFFLEdBQUcsT0FBT0MsR0FBR2t5RixHQUFHbHlGLEVBQUVELEVBQUUsR0FBRyxFQUFFLENBQ2xRLFNBQVM2eEIsR0FBRzd4QixHQUFHLElBQUlDLEVBQUUwd0YsS0FBOE0sTUFBek0sbUJBQW9CM3dGLElBQUlBLEVBQUVBLEtBQUtDLEVBQUUrdkUsY0FBYy92RSxFQUFFeWdELFVBQVUxZ0QsRUFBRUEsRUFBRSxDQUFDNnRGLFFBQVEsS0FBS1IsWUFBWSxLQUFLUCxNQUFNLEVBQUVzRSxTQUFTLEtBQUtKLG9CQUFvQkYsR0FBR0ssa0JBQWtCbnhGLEdBQUdDLEVBQUU0N0IsTUFBTTc3QixFQUFFQSxFQUFFQSxFQUFFb3hGLFNBQVNnQixHQUFHdjdGLEtBQUssS0FBS2k1RixHQUFFOXZGLEdBQVMsQ0FBQ0MsRUFBRSt2RSxjQUFjaHdFLEVBQUUsQ0FDNVAsU0FBUzJ4RixHQUFHM3hGLEVBQUVDLEVBQUVvZ0IsRUFBRTVQLEdBQThPLE9BQTNPelEsRUFBRSxDQUFDK2tCLElBQUkva0IsRUFBRTdHLE9BQU84RyxFQUFFb3lGLFFBQVFoeUUsRUFBRWl5RSxLQUFLN2hGLEVBQUVsSCxLQUFLLE1BQXNCLFFBQWhCdEosRUFBRTZ2RixHQUFFckMsY0FBc0J4dEYsRUFBRSxDQUFDOHhGLFdBQVcsS0FBS0MsT0FBTyxNQUFNbEMsR0FBRXJDLFlBQVl4dEYsRUFBRUEsRUFBRTh4RixXQUFXL3hGLEVBQUV1SixLQUFLdkosR0FBbUIsUUFBZnFnQixFQUFFcGdCLEVBQUU4eEYsWUFBb0I5eEYsRUFBRTh4RixXQUFXL3hGLEVBQUV1SixLQUFLdkosR0FBR3lRLEVBQUU0UCxFQUFFOVcsS0FBSzhXLEVBQUU5VyxLQUFLdkosRUFBRUEsRUFBRXVKLEtBQUtrSCxFQUFFeFEsRUFBRTh4RixXQUFXL3hGLEdBQVdBLENBQUMsQ0FBQyxTQUFTdXlGLEtBQUssT0FBTzFCLEtBQUs3Z0IsYUFBYSxDQUFDLFNBQVN3aUIsR0FBR3h5RixFQUFFQyxFQUFFb2dCLEVBQUU1UCxHQUFHLElBQUk1VCxFQUFFOHpGLEtBQUtiLEdBQUVoZ0IsT0FBTzl2RSxFQUFFbkQsRUFBRW16RSxjQUFjMmhCLEdBQUcsRUFBRTF4RixFQUFFb2dCLE9BQUUsT0FBTyxJQUFTNVAsRUFBRSxLQUFLQSxFQUFFLENBQzlZLFNBQVNnaUYsR0FBR3p5RixFQUFFQyxFQUFFb2dCLEVBQUU1UCxHQUFHLElBQUk1VCxFQUFFZzBGLEtBQUtwZ0YsT0FBRSxJQUFTQSxFQUFFLEtBQUtBLEVBQUUsSUFBSW9zRCxPQUFFLEVBQU8sR0FBRyxPQUFPa3pCLEdBQUUsQ0FBQyxJQUFJbHlELEVBQUVreUQsR0FBRS9mLGNBQTBCLEdBQVpuVCxFQUFFaC9CLEVBQUV3MEQsUUFBVyxPQUFPNWhGLEdBQUcyL0UsR0FBRzMvRSxFQUFFb3RCLEVBQUV5MEQsTUFBbUMsWUFBNUJ6MUYsRUFBRW16RSxjQUFjMmhCLEdBQUcxeEYsRUFBRW9nQixFQUFFdzhDLEVBQUVwc0QsR0FBVSxDQUFDcS9FLEdBQUVoZ0IsT0FBTzl2RSxFQUFFbkQsRUFBRW16RSxjQUFjMmhCLEdBQUcsRUFBRTF4RixFQUFFb2dCLEVBQUV3OEMsRUFBRXBzRCxFQUFFLENBQUMsU0FBU2lpRixHQUFHMXlGLEVBQUVDLEdBQUcsT0FBT3V5RixHQUFHLFFBQVEsRUFBRXh5RixFQUFFQyxFQUFFLENBQUMsU0FBU3V4RixHQUFHeHhGLEVBQUVDLEdBQUcsT0FBT3d5RixHQUFHLEtBQUssRUFBRXp5RixFQUFFQyxFQUFFLENBQUMsU0FBUzB5RixHQUFHM3lGLEVBQUVDLEdBQUcsT0FBT3d5RixHQUFHLEVBQUUsRUFBRXp5RixFQUFFQyxFQUFFLENBQUMsU0FBUzJ5RixHQUFHNXlGLEVBQUVDLEdBQUcsT0FBT3d5RixHQUFHLEVBQUUsRUFBRXp5RixFQUFFQyxFQUFFLENBQ2hYLFNBQVM0eUYsR0FBRzd5RixFQUFFQyxHQUFHLE1BQUcsbUJBQW9CQSxHQUFTRCxFQUFFQSxJQUFJQyxFQUFFRCxHQUFHLFdBQVdDLEVBQUUsS0FBSyxHQUFLLE1BQU9BLEdBQXFCRCxFQUFFQSxJQUFJQyxFQUFFb1osUUFBUXJaLEVBQUUsV0FBV0MsRUFBRW9aLFFBQVEsSUFBSSxRQUExRSxDQUEyRSxDQUFDLFNBQVN5NUUsR0FBRzl5RixFQUFFQyxFQUFFb2dCLEdBQTZDLE9BQTFDQSxFQUFFLE1BQU9BLEVBQWNBLEVBQUUzbEIsT0FBTyxDQUFDc0YsSUFBSSxLQUFZeXlGLEdBQUcsRUFBRSxFQUFFSSxHQUFHaDhGLEtBQUssS0FBS29KLEVBQUVELEdBQUdxZ0IsRUFBRSxDQUFDLFNBQVMweUUsS0FBSyxDQUFDLFNBQVNDLEdBQUdoekYsRUFBRUMsR0FBRyxJQUFJb2dCLEVBQUV3d0UsS0FBSzV3RixPQUFFLElBQVNBLEVBQUUsS0FBS0EsRUFBRSxJQUFJd1EsRUFBRTRQLEVBQUUydkQsY0FBYyxPQUFHLE9BQU92L0QsR0FBRyxPQUFPeFEsR0FBR213RixHQUFHbndGLEVBQUV3USxFQUFFLElBQVdBLEVBQUUsSUFBRzRQLEVBQUUydkQsY0FBYyxDQUFDaHdFLEVBQUVDLEdBQVVELEVBQUMsQ0FDN1osU0FBU2l6RixHQUFHanpGLEVBQUVDLEdBQUcsSUFBSW9nQixFQUFFd3dFLEtBQUs1d0YsT0FBRSxJQUFTQSxFQUFFLEtBQUtBLEVBQUUsSUFBSXdRLEVBQUU0UCxFQUFFMnZELGNBQWMsT0FBRyxPQUFPdi9ELEdBQUcsT0FBT3hRLEdBQUdtd0YsR0FBR253RixFQUFFd1EsRUFBRSxJQUFXQSxFQUFFLElBQUd6USxFQUFFQSxJQUFJcWdCLEVBQUUydkQsY0FBYyxDQUFDaHdFLEVBQUVDLEdBQVVELEVBQUMsQ0FBQyxTQUFTa3pGLEdBQUdsekYsRUFBRUMsRUFBRW9nQixHQUFHLE9BQVcsR0FBSHd2RSxJQUFvRXZQLEdBQUdqZ0UsRUFBRXBnQixLQUFLb2dCLEVBQUUweUQsS0FBSytjLEdBQUVoRCxPQUFPenNFLEVBQUVvdUUsSUFBSXB1RSxFQUFFcmdCLEVBQUUwZ0QsV0FBVSxHQUFXemdELElBQS9HRCxFQUFFMGdELFlBQVkxZ0QsRUFBRTBnRCxXQUFVLEVBQUdxc0MsSUFBRyxHQUFJL3NGLEVBQUVnd0UsY0FBYzN2RCxFQUE0RCxDQUFDLFNBQVM4eUUsR0FBR256RixFQUFFQyxHQUFHLElBQUlvZ0IsRUFBRSt5RCxHQUFFQSxHQUFFLElBQUkveUQsR0FBRyxFQUFFQSxFQUFFQSxFQUFFLEVBQUVyZ0IsR0FBRSxHQUFJLElBQUl5USxFQUFFbS9FLEdBQUcvWixXQUFXK1osR0FBRy9aLFdBQVcsQ0FBQyxFQUFFLElBQUk3MUUsR0FBRSxHQUFJQyxHQUFHLENBQUMsUUFBUW16RSxHQUFFL3lELEVBQUV1dkUsR0FBRy9aLFdBQVdwbEUsQ0FBQyxDQUFDLENBQUMsU0FBUzJpRixLQUFLLE9BQU92QyxLQUFLN2dCLGFBQWEsQ0FDMWQsU0FBU3FqQixHQUFHcnpGLEVBQUVDLEVBQUVvZ0IsR0FBRyxJQUFJNVAsRUFBRTZpRixHQUFHdHpGLEdBQUdxZ0IsRUFBRSxDQUFDNnRFLEtBQUt6OUUsRUFBRXFJLE9BQU91SCxFQUFFNHdFLGVBQWMsRUFBR0MsV0FBVyxLQUFLM25GLEtBQUssTUFBU2dxRixHQUFHdnpGLEdBQUd3ekYsR0FBR3Z6RixFQUFFb2dCLEdBQXlCLFFBQWRBLEVBQUUrc0UsR0FBR3B0RixFQUFFQyxFQUFFb2dCLEVBQUU1UCxNQUF1QjBoRixHQUFHOXhFLEVBQUVyZ0IsRUFBRXlRLEVBQVhnakYsTUFBZ0JDLEdBQUdyekUsRUFBRXBnQixFQUFFd1EsR0FBRyxDQUMvSyxTQUFTMmhGLEdBQUdweUYsRUFBRUMsRUFBRW9nQixHQUFHLElBQUk1UCxFQUFFNmlGLEdBQUd0ekYsR0FBR25ELEVBQUUsQ0FBQ3F4RixLQUFLejlFLEVBQUVxSSxPQUFPdUgsRUFBRTR3RSxlQUFjLEVBQUdDLFdBQVcsS0FBSzNuRixLQUFLLE1BQU0sR0FBR2dxRixHQUFHdnpGLEdBQUd3ekYsR0FBR3Z6RixFQUFFcEQsT0FBTyxDQUFDLElBQUlnZ0UsRUFBRTc4RCxFQUFFaTdDLFVBQVUsR0FBRyxJQUFJajdDLEVBQUU4c0YsUUFBUSxPQUFPandCLEdBQUcsSUFBSUEsRUFBRWl3QixRQUFpQyxRQUF4Qmp3QixFQUFFNThELEVBQUUrd0YscUJBQThCLElBQUksSUFBSW56RCxFQUFFNTlCLEVBQUVreEYsa0JBQWtCcnFCLEVBQUVqSyxFQUFFaC9CLEVBQUV4ZCxHQUFxQyxHQUFsQ3hqQixFQUFFbzBGLGVBQWMsRUFBR3AwRixFQUFFcTBGLFdBQVdwcUIsRUFBS3daLEdBQUd4WixFQUFFanBDLEdBQUcsQ0FBQyxJQUFJbnBDLEVBQUV1TCxFQUFFb3RGLFlBQStFLE9BQW5FLE9BQU8zNEYsR0FBR21JLEVBQUUwTSxLQUFLMU0sRUFBRXN3RixHQUFHbHRGLEtBQUtwRCxFQUFFME0sS0FBSzdVLEVBQUU2VSxLQUFLN1UsRUFBRTZVLEtBQUsxTSxRQUFHb0QsRUFBRW90RixZQUFZeHdGLEVBQVEsQ0FBQyxDQUFDLE1BQU1yQyxHQUFHLENBQXdCLFFBQWQ2bEIsRUFBRStzRSxHQUFHcHRGLEVBQUVDLEVBQUVwRCxFQUFFNFQsTUFBb0IwaEYsR0FBRzl4RSxFQUFFcmdCLEVBQUV5USxFQUFiNVQsRUFBRTQyRixNQUFnQkMsR0FBR3J6RSxFQUFFcGdCLEVBQUV3USxHQUFHLENBQUMsQ0FDL2MsU0FBUzhpRixHQUFHdnpGLEdBQUcsSUFBSUMsRUFBRUQsRUFBRWk3QyxVQUFVLE9BQU9qN0MsSUFBSTh2RixJQUFHLE9BQU83dkYsR0FBR0EsSUFBSTZ2RixFQUFDLENBQUMsU0FBUzBELEdBQUd4ekYsRUFBRUMsR0FBR2d3RixHQUFHRCxJQUFHLEVBQUcsSUFBSTN2RSxFQUFFcmdCLEVBQUU2dEYsUUFBUSxPQUFPeHRFLEVBQUVwZ0IsRUFBRXNKLEtBQUt0SixHQUFHQSxFQUFFc0osS0FBSzhXLEVBQUU5VyxLQUFLOFcsRUFBRTlXLEtBQUt0SixHQUFHRCxFQUFFNnRGLFFBQVE1dEYsQ0FBQyxDQUFDLFNBQVN5ekYsR0FBRzF6RixFQUFFQyxFQUFFb2dCLEdBQUcsR0FBVSxRQUFGQSxFQUFXLENBQUMsSUFBSTVQLEVBQUV4USxFQUFFNnNGLE1BQXdCenNFLEdBQWxCNVAsR0FBR3pRLEVBQUV3eUUsYUFBa0J2eUUsRUFBRTZzRixNQUFNenNFLEVBQUU4eUQsR0FBR256RSxFQUFFcWdCLEVBQUUsQ0FBQyxDQUM5UCxJQUFJb3dFLEdBQUcsQ0FBQ2tELFlBQVkzRyxHQUFHNEcsWUFBWWhnRCxHQUFFaWdELFdBQVdqZ0QsR0FBRWtnRCxVQUFVbGdELEdBQUVtZ0Qsb0JBQW9CbmdELEdBQUVvZ0QsbUJBQW1CcGdELEdBQUVxZ0QsZ0JBQWdCcmdELEdBQUVzZ0QsUUFBUXRnRCxHQUFFdWdELFdBQVd2Z0QsR0FBRXdnRCxPQUFPeGdELEdBQUV5Z0QsU0FBU3pnRCxHQUFFMGdELGNBQWMxZ0QsR0FBRTJnRCxpQkFBaUIzZ0QsR0FBRTRnRCxjQUFjNWdELEdBQUU2Z0QsaUJBQWlCN2dELEdBQUU4Z0QscUJBQXFCOWdELEdBQUUrZ0QsTUFBTS9nRCxHQUFFZ2hELDBCQUF5QixHQUFJdEUsR0FBRyxDQUFDcUQsWUFBWTNHLEdBQUc0RyxZQUFZLFNBQVM1ekYsRUFBRUMsR0FBNEMsT0FBekMwd0YsS0FBSzNnQixjQUFjLENBQUNod0UsT0FBRSxJQUFTQyxFQUFFLEtBQUtBLEdBQVVELENBQUMsRUFBRTZ6RixXQUFXN0csR0FBRzhHLFVBQVVwQixHQUFHcUIsb0JBQW9CLFNBQVMvekYsRUFBRUMsRUFBRW9nQixHQUE2QyxPQUExQ0EsRUFBRSxNQUFPQSxFQUFjQSxFQUFFM2xCLE9BQU8sQ0FBQ3NGLElBQUksS0FBWXd5RixHQUFHLFFBQzNmLEVBQUVLLEdBQUdoOEYsS0FBSyxLQUFLb0osRUFBRUQsR0FBR3FnQixFQUFFLEVBQUU0ekUsZ0JBQWdCLFNBQVNqMEYsRUFBRUMsR0FBRyxPQUFPdXlGLEdBQUcsUUFBUSxFQUFFeHlGLEVBQUVDLEVBQUUsRUFBRSt6RixtQkFBbUIsU0FBU2gwRixFQUFFQyxHQUFHLE9BQU91eUYsR0FBRyxFQUFFLEVBQUV4eUYsRUFBRUMsRUFBRSxFQUFFaTBGLFFBQVEsU0FBU2wwRixFQUFFQyxHQUFHLElBQUlvZ0IsRUFBRXN3RSxLQUFxRCxPQUFoRDF3RixPQUFFLElBQVNBLEVBQUUsS0FBS0EsRUFBRUQsRUFBRUEsSUFBSXFnQixFQUFFMnZELGNBQWMsQ0FBQ2h3RSxFQUFFQyxHQUFVRCxDQUFDLEVBQUVtMEYsV0FBVyxTQUFTbjBGLEVBQUVDLEVBQUVvZ0IsR0FBRyxJQUFJNVAsRUFBRWtnRixLQUFrTSxPQUE3TDF3RixPQUFFLElBQVNvZ0IsRUFBRUEsRUFBRXBnQixHQUFHQSxFQUFFd1EsRUFBRXUvRCxjQUFjdi9ELEVBQUVpd0MsVUFBVXpnRCxFQUFFRCxFQUFFLENBQUM2dEYsUUFBUSxLQUFLUixZQUFZLEtBQUtQLE1BQU0sRUFBRXNFLFNBQVMsS0FBS0osb0JBQW9CaHhGLEVBQUVteEYsa0JBQWtCbHhGLEdBQUd3USxFQUFFb3JCLE1BQU03N0IsRUFBRUEsRUFBRUEsRUFBRW94RixTQUFTaUMsR0FBR3g4RixLQUFLLEtBQUtpNUYsR0FBRTl2RixHQUFTLENBQUN5USxFQUFFdS9ELGNBQWNod0UsRUFBRSxFQUFFbzBGLE9BQU8sU0FBU3AwRixHQUMzZCxPQUFkQSxFQUFFLENBQUNxWixRQUFRclosR0FBaEIyd0YsS0FBNEIzZ0IsY0FBY2h3RSxDQUFDLEVBQUVxMEYsU0FBU3hpRSxHQUFHeWlFLGNBQWN2QixHQUFHd0IsaUJBQWlCLFNBQVN2MEYsR0FBRyxPQUFPMndGLEtBQUszZ0IsY0FBY2h3RSxDQUFDLEVBQUV3MEYsY0FBYyxXQUFXLElBQUl4MEYsRUFBRTZ4QixJQUFHLEdBQUk1eEIsRUFBRUQsRUFBRSxHQUE2QyxPQUExQ0EsRUFBRW16RixHQUFHdDhGLEtBQUssS0FBS21KLEVBQUUsSUFBSTJ3RixLQUFLM2dCLGNBQWNod0UsRUFBUSxDQUFDQyxFQUFFRCxFQUFFLEVBQUV5MEYsaUJBQWlCLFdBQVcsRUFBRUMscUJBQXFCLFNBQVMxMEYsRUFBRUMsRUFBRW9nQixHQUFHLElBQUk1UCxFQUFFcS9FLEdBQUVqekYsRUFBRTh6RixLQUFLLEdBQUczRyxHQUFFLENBQUMsUUFBRyxJQUFTM3BFLEVBQUUsTUFBTS9jLE1BQU10SyxFQUFFLE1BQU1xbkIsRUFBRUEsR0FBRyxLQUFLLENBQU8sR0FBTkEsRUFBRXBnQixJQUFPLE9BQU80eEYsR0FBRSxNQUFNdnVGLE1BQU10SyxFQUFFLE1BQWMsR0FBSDYyRixJQUFRaUMsR0FBR3JoRixFQUFFeFEsRUFBRW9nQixFQUFFLENBQUN4akIsRUFBRW16RSxjQUFjM3ZELEVBQUUsSUFBSXc4QyxFQUFFLENBQUNwbEUsTUFBTTRvQixFQUFFcXhFLFlBQVl6eEYsR0FDdlosT0FEMFpwRCxFQUFFZy9CLE1BQU1naEMsRUFBRTYxQixHQUFHakIsR0FBRzU2RixLQUFLLEtBQUs0WixFQUNwZm9zRCxFQUFFNzhELEdBQUcsQ0FBQ0EsSUFBSXlRLEVBQUVxL0QsT0FBTyxLQUFLNmhCLEdBQUcsRUFBRUMsR0FBRy82RixLQUFLLEtBQUs0WixFQUFFb3NELEVBQUV4OEMsRUFBRXBnQixRQUFHLEVBQU8sTUFBYW9nQixDQUFDLEVBQUVzMEUsTUFBTSxXQUFXLElBQUkzMEYsRUFBRTJ3RixLQUFLMXdGLEVBQUU0eEYsR0FBRWdELGlCQUFpQixHQUFHN0ssR0FBRSxDQUFDLElBQUkzcEUsRUFBRW9wRSxHQUFrRHhwRixFQUFFLElBQUlBLEVBQUUsS0FBOUNvZ0IsR0FBSG1wRSxLQUFVLEdBQUcsR0FBRzFYLEdBQWhCMFgsSUFBc0IsSUFBSWppRixTQUFTLElBQUk4WSxHQUF1QixHQUFQQSxFQUFFNnZFLFFBQVdqd0YsR0FBRyxJQUFJb2dCLEVBQUU5WSxTQUFTLEtBQUt0SCxHQUFHLEdBQUcsTUFBYUEsRUFBRSxJQUFJQSxFQUFFLEtBQWZvZ0IsRUFBRTh2RSxNQUFtQjVvRixTQUFTLElBQUksSUFBSSxPQUFPdkgsRUFBRWd3RSxjQUFjL3ZFLENBQUMsRUFBRTIwRiwwQkFBeUIsR0FBSXJFLEdBQUcsQ0FBQ29ELFlBQVkzRyxHQUFHNEcsWUFBWVosR0FBR2EsV0FBVzdHLEdBQUc4RyxVQUFVdEMsR0FBR3VDLG9CQUFvQmpCLEdBQUdrQixtQkFBbUJyQixHQUFHc0IsZ0JBQWdCckIsR0FBR3NCLFFBQVFqQixHQUFHa0IsV0FBV3BELEdBQUdxRCxPQUFPN0IsR0FBRzhCLFNBQVMsV0FBVyxPQUFPdEQsR0FBR0QsR0FBRyxFQUNyaEJ3RCxjQUFjdkIsR0FBR3dCLGlCQUFpQixTQUFTdjBGLEdBQWMsT0FBT2t6RixHQUFackMsS0FBaUJkLEdBQUUvZixjQUFjaHdFLEVBQUUsRUFBRXcwRixjQUFjLFdBQWdELE1BQU0sQ0FBckN6RCxHQUFHRCxJQUFJLEdBQUtELEtBQUs3Z0IsY0FBeUIsRUFBRXlrQixpQkFBaUJuRCxHQUFHb0QscUJBQXFCbkQsR0FBR29ELE1BQU12QixHQUFHd0IsMEJBQXlCLEdBQUlwRSxHQUFHLENBQUNtRCxZQUFZM0csR0FBRzRHLFlBQVlaLEdBQUdhLFdBQVc3RyxHQUFHOEcsVUFBVXRDLEdBQUd1QyxvQkFBb0JqQixHQUFHa0IsbUJBQW1CckIsR0FBR3NCLGdCQUFnQnJCLEdBQUdzQixRQUFRakIsR0FBR2tCLFdBQVc5QyxHQUFHK0MsT0FBTzdCLEdBQUc4QixTQUFTLFdBQVcsT0FBT2hELEdBQUdQLEdBQUcsRUFBRXdELGNBQWN2QixHQUFHd0IsaUJBQWlCLFNBQVN2MEYsR0FBRyxJQUFJQyxFQUFFNHdGLEtBQUssT0FBTyxPQUN6ZmQsR0FBRTl2RixFQUFFK3ZFLGNBQWNod0UsRUFBRWt6RixHQUFHanpGLEVBQUU4dkYsR0FBRS9mLGNBQWNod0UsRUFBRSxFQUFFdzBGLGNBQWMsV0FBZ0QsTUFBTSxDQUFyQ25ELEdBQUdQLElBQUksR0FBS0QsS0FBSzdnQixjQUF5QixFQUFFeWtCLGlCQUFpQm5ELEdBQUdvRCxxQkFBcUJuRCxHQUFHb0QsTUFBTXZCLEdBQUd3QiwwQkFBeUIsR0FBSSxTQUFTRSxHQUFHOTBGLEVBQUVDLEdBQUcsR0FBR0QsR0FBR0EsRUFBRSswRixhQUFhLENBQTRCLElBQUksSUFBSTEwRSxLQUFuQ3BnQixFQUFFeEwsRUFBRSxDQUFDLEVBQUV3TCxHQUFHRCxFQUFFQSxFQUFFKzBGLGtCQUE0QixJQUFTOTBGLEVBQUVvZ0IsS0FBS3BnQixFQUFFb2dCLEdBQUdyZ0IsRUFBRXFnQixJQUFJLE9BQU9wZ0IsQ0FBQyxDQUFDLE9BQU9BLENBQUMsQ0FBQyxTQUFTKzBGLEdBQUdoMUYsRUFBRUMsRUFBRW9nQixFQUFFNVAsR0FBOEI0UCxFQUFFLE9BQVhBLEVBQUVBLEVBQUU1UCxFQUF0QnhRLEVBQUVELEVBQUVnd0UsZ0JBQThDL3ZFLEVBQUV4TCxFQUFFLENBQUMsRUFBRXdMLEVBQUVvZ0IsR0FBR3JnQixFQUFFZ3dFLGNBQWMzdkQsRUFBRSxJQUFJcmdCLEVBQUU4c0YsUUFBUTlzRixFQUFFeXRGLFlBQVkvc0MsVUFBVXJnQyxFQUFFLENBQ3JkLElBQUk0MEUsR0FBRyxDQUFDQyxVQUFVLFNBQVNsMUYsR0FBRyxTQUFPQSxFQUFFQSxFQUFFbTFGLGtCQUFpQnZsQixHQUFHNXZFLEtBQUtBLENBQUksRUFBRW8xRixnQkFBZ0IsU0FBU3AxRixFQUFFQyxFQUFFb2dCLEdBQUdyZ0IsRUFBRUEsRUFBRW0xRixnQkFBZ0IsSUFBSTFrRixFQUFFZ2pGLEtBQUk1MkYsRUFBRXkyRixHQUFHdHpGLEdBQUc2OEQsRUFBRW14QixHQUFHdjlFLEVBQUU1VCxHQUFHZ2dFLEVBQUVzeEIsUUFBUWx1RixFQUFFLE1BQVNvZ0IsSUFBY3c4QyxFQUFFNzJDLFNBQVMzRixHQUFlLFFBQVpwZ0IsRUFBRW11RixHQUFHcHVGLEVBQUU2OEQsRUFBRWhnRSxNQUFjczFGLEdBQUdseUYsRUFBRUQsRUFBRW5ELEVBQUU0VCxHQUFHNjlFLEdBQUdydUYsRUFBRUQsRUFBRW5ELEdBQUcsRUFBRXc0RixvQkFBb0IsU0FBU3IxRixFQUFFQyxFQUFFb2dCLEdBQUdyZ0IsRUFBRUEsRUFBRW0xRixnQkFBZ0IsSUFBSTFrRixFQUFFZ2pGLEtBQUk1MkYsRUFBRXkyRixHQUFHdHpGLEdBQUc2OEQsRUFBRW14QixHQUFHdjlFLEVBQUU1VCxHQUFHZ2dFLEVBQUU5M0MsSUFBSSxFQUFFODNDLEVBQUVzeEIsUUFBUWx1RixFQUFFLE1BQVNvZ0IsSUFBY3c4QyxFQUFFNzJDLFNBQVMzRixHQUFlLFFBQVpwZ0IsRUFBRW11RixHQUFHcHVGLEVBQUU2OEQsRUFBRWhnRSxNQUFjczFGLEdBQUdseUYsRUFBRUQsRUFBRW5ELEVBQUU0VCxHQUFHNjlFLEdBQUdydUYsRUFBRUQsRUFBRW5ELEdBQUcsRUFBRXk0RixtQkFBbUIsU0FBU3QxRixFQUFFQyxHQUFHRCxFQUFFQSxFQUFFbTFGLGdCQUFnQixJQUFJOTBFLEVBQUVvekUsS0FBSWhqRixFQUNuZjZpRixHQUFHdHpGLEdBQUduRCxFQUFFbXhGLEdBQUczdEUsRUFBRTVQLEdBQUc1VCxFQUFFa29CLElBQUksRUFBRSxNQUFTOWtCLElBQWNwRCxFQUFFbXBCLFNBQVMvbEIsR0FBZSxRQUFaQSxFQUFFbXVGLEdBQUdwdUYsRUFBRW5ELEVBQUU0VCxNQUFjMGhGLEdBQUdseUYsRUFBRUQsRUFBRXlRLEVBQUU0UCxHQUFHaXVFLEdBQUdydUYsRUFBRUQsRUFBRXlRLEdBQUcsR0FBRyxTQUFTOGtGLEdBQUd2MUYsRUFBRUMsRUFBRW9nQixFQUFFNVAsRUFBRTVULEVBQUVnZ0UsRUFBRWgvQixHQUFpQixNQUFNLG1CQUFwQjc5QixFQUFFQSxFQUFFdXVFLFdBQXNDaGxDLHNCQUFzQnZwQyxFQUFFdXBDLHNCQUFzQjk0QixFQUFFb3NELEVBQUVoL0IsS0FBRzU5QixFQUFFckssV0FBV3FLLEVBQUVySyxVQUFVMndDLHNCQUFzQmc2QyxHQUFHbGdFLEVBQUU1UCxJQUFLOHZFLEdBQUcxakYsRUFBRWdnRSxHQUFLLENBQzFTLFNBQVMyNEIsR0FBR3gxRixFQUFFQyxFQUFFb2dCLEdBQUcsSUFBSTVQLEdBQUUsRUFBRzVULEVBQUVnckYsR0FBT2hyQixFQUFFNThELEVBQUV3MUYsWUFBMlcsTUFBL1YsaUJBQWtCNTRCLEdBQUcsT0FBT0EsRUFBRUEsRUFBRW13QixHQUFHbndCLElBQUloZ0UsRUFBRXdyRixHQUFHcG9GLEdBQUcrbkYsR0FBR0YsR0FBRXp1RSxRQUF5QndqRCxHQUFHcHNELEVBQUUsT0FBdEJBLEVBQUV4USxFQUFFaW9GLGVBQXdDRCxHQUFHam9GLEVBQUVuRCxHQUFHZ3JGLElBQUk1bkYsRUFBRSxJQUFJQSxFQUFFb2dCLEVBQUV3OEMsR0FBRzc4RCxFQUFFZ3dFLGNBQWMsT0FBTy92RSxFQUFFa0csWUFBTyxJQUFTbEcsRUFBRWtHLE1BQU1sRyxFQUFFa0csTUFBTSxLQUFLbEcsRUFBRStvQyxRQUFRaXNELEdBQUdqMUYsRUFBRXV1RSxVQUFVdHVFLEVBQUVBLEVBQUVrMUYsZ0JBQWdCbjFGLEVBQUV5USxLQUFJelEsRUFBRUEsRUFBRXV1RSxXQUFZNFosNENBQTRDdHJGLEVBQUVtRCxFQUFFb29GLDBDQUEwQ3ZyQixHQUFVNThELENBQUMsQ0FDNVosU0FBU3kxRixHQUFHMTFGLEVBQUVDLEVBQUVvZ0IsRUFBRTVQLEdBQUd6USxFQUFFQyxFQUFFa0csTUFBTSxtQkFBb0JsRyxFQUFFMDFGLDJCQUEyQjExRixFQUFFMDFGLDBCQUEwQnQxRSxFQUFFNVAsR0FBRyxtQkFBb0J4USxFQUFFMjFGLGtDQUFrQzMxRixFQUFFMjFGLGlDQUFpQ3YxRSxFQUFFNVAsR0FBR3hRLEVBQUVrRyxRQUFRbkcsR0FBR2kxRixHQUFHSSxvQkFBb0JwMUYsRUFBRUEsRUFBRWtHLE1BQU0sS0FBSyxDQUNwUSxTQUFTMHZGLEdBQUc3MUYsRUFBRUMsRUFBRW9nQixFQUFFNVAsR0FBRyxJQUFJNVQsRUFBRW1ELEVBQUV1dUUsVUFBVTF4RSxFQUFFNG1CLE1BQU1wRCxFQUFFeGpCLEVBQUVzSixNQUFNbkcsRUFBRWd3RSxjQUFjbnpFLEVBQUUraEMsS0FBSyxDQUFDLEVBQUU0dUQsR0FBR3h0RixHQUFHLElBQUk2OEQsRUFBRTU4RCxFQUFFdzFGLFlBQVksaUJBQWtCNTRCLEdBQUcsT0FBT0EsRUFBRWhnRSxFQUFFUyxRQUFRMHZGLEdBQUdud0IsSUFBSUEsRUFBRXdyQixHQUFHcG9GLEdBQUcrbkYsR0FBR0YsR0FBRXp1RSxRQUFReGMsRUFBRVMsUUFBUTJxRixHQUFHam9GLEVBQUU2OEQsSUFBSWhnRSxFQUFFc0osTUFBTW5HLEVBQUVnd0UsY0FBMkMsbUJBQTdCblQsRUFBRTU4RCxFQUFFNmxDLDRCQUFpRGt2RCxHQUFHaDFGLEVBQUVDLEVBQUU0OEQsRUFBRXg4QyxHQUFHeGpCLEVBQUVzSixNQUFNbkcsRUFBRWd3RSxlQUFlLG1CQUFvQi92RSxFQUFFNmxDLDBCQUEwQixtQkFBb0JqcEMsRUFBRTRzQyx5QkFBeUIsbUJBQW9CNXNDLEVBQUVpNUYsMkJBQTJCLG1CQUFvQmo1RixFQUFFazVGLHFCQUFxQjkxRixFQUFFcEQsRUFBRXNKLE1BQ3JmLG1CQUFvQnRKLEVBQUVrNUYsb0JBQW9CbDVGLEVBQUVrNUYscUJBQXFCLG1CQUFvQmw1RixFQUFFaTVGLDJCQUEyQmo1RixFQUFFaTVGLDRCQUE0QjcxRixJQUFJcEQsRUFBRXNKLE9BQU84dUYsR0FBR0ksb0JBQW9CeDRGLEVBQUVBLEVBQUVzSixNQUFNLE1BQU1xb0YsR0FBR3h1RixFQUFFcWdCLEVBQUV4akIsRUFBRTRULEdBQUc1VCxFQUFFc0osTUFBTW5HLEVBQUVnd0UsZUFBZSxtQkFBb0JuekUsRUFBRW9zQyxvQkFBb0JqcEMsRUFBRTh2RSxPQUFPLFFBQVEsQ0FBQyxTQUFTa21CLEdBQUdoMkYsRUFBRUMsR0FBRyxJQUFJLElBQUlvZ0IsRUFBRSxHQUFHNVAsRUFBRXhRLEVBQUUsR0FBR29nQixHQUFHMG1ELEVBQUd0MkQsR0FBR0EsRUFBRUEsRUFBRW8vRCxhQUFhcC9ELEdBQUcsSUFBSTVULEVBQUV3akIsQ0FBQyxDQUFDLE1BQU13OEMsR0FBR2hnRSxFQUFFLDZCQUE2QmdnRSxFQUFFak0sUUFBUSxLQUFLaU0sRUFBRXZnQixLQUFLLENBQUMsTUFBTSxDQUFDN2tELE1BQU11SSxFQUFFMnBELE9BQU8xcEQsRUFBRXE4QyxNQUFNei9DLEVBQUVvNUYsT0FBTyxLQUFLLENBQzFkLFNBQVNDLEdBQUdsMkYsRUFBRUMsRUFBRW9nQixHQUFHLE1BQU0sQ0FBQzVvQixNQUFNdUksRUFBRTJwRCxPQUFPLEtBQUtyTixNQUFNLE1BQU1qOEIsRUFBRUEsRUFBRSxLQUFLNDFFLE9BQU8sTUFBTWgyRixFQUFFQSxFQUFFLEtBQUssQ0FBQyxTQUFTazJGLEdBQUduMkYsRUFBRUMsR0FBRyxJQUFJd2lDLFFBQVEvYixNQUFNem1CLEVBQUV4SSxNQUFNLENBQUMsTUFBTTRvQixHQUFHa21FLFlBQVcsV0FBVyxNQUFNbG1FLENBQUUsR0FBRSxDQUFDLENBQUMsSUFBSSsxRSxHQUFHLG1CQUFvQmorQyxRQUFRQSxRQUFROTVCLElBQUksU0FBU2c0RSxHQUFHcjJGLEVBQUVDLEVBQUVvZ0IsSUFBR0EsRUFBRTJ0RSxJQUFJLEVBQUUzdEUsSUFBSzBFLElBQUksRUFBRTFFLEVBQUU4dEUsUUFBUSxDQUFDeHVGLFFBQVEsTUFBTSxJQUFJOFEsRUFBRXhRLEVBQUV4SSxNQUFzRCxPQUFoRDRvQixFQUFFMkYsU0FBUyxXQUFXc3dFLEtBQUtBLElBQUcsRUFBR0MsR0FBRzlsRixHQUFHMGxGLEdBQUduMkYsRUFBRUMsRUFBRSxFQUFTb2dCLENBQUMsQ0FDclcsU0FBU20yRSxHQUFHeDJGLEVBQUVDLEVBQUVvZ0IsSUFBR0EsRUFBRTJ0RSxJQUFJLEVBQUUzdEUsSUFBSzBFLElBQUksRUFBRSxJQUFJdFUsRUFBRXpRLEVBQUV6RSxLQUFLazdGLHlCQUF5QixHQUFHLG1CQUFvQmhtRixFQUFFLENBQUMsSUFBSTVULEVBQUVvRCxFQUFFeEksTUFBTTRvQixFQUFFOHRFLFFBQVEsV0FBVyxPQUFPMTlFLEVBQUU1VCxFQUFFLEVBQUV3akIsRUFBRTJGLFNBQVMsV0FBV213RSxHQUFHbjJGLEVBQUVDLEVBQUUsQ0FBQyxDQUFDLElBQUk0OEQsRUFBRTc4RCxFQUFFdXVFLFVBQThPLE9BQXBPLE9BQU8xUixHQUFHLG1CQUFvQkEsRUFBRTY1QixvQkFBb0JyMkUsRUFBRTJGLFNBQVMsV0FBV213RSxHQUFHbjJGLEVBQUVDLEdBQUcsbUJBQW9Cd1EsSUFBSSxPQUFPa21GLEdBQUdBLEdBQUcsSUFBSWo2RixJQUFJLENBQUN2SSxPQUFPd2lHLEdBQUd6NUYsSUFBSS9JLE9BQU8sSUFBSWtzQixFQUFFcGdCLEVBQUVxOEMsTUFBTW5vRCxLQUFLdWlHLGtCQUFrQnoyRixFQUFFeEksTUFBTSxDQUFDbS9GLGVBQWUsT0FBT3YyRSxFQUFFQSxFQUFFLElBQUksR0FBVUEsQ0FBQyxDQUNuYixTQUFTdzJFLEdBQUc3MkYsRUFBRUMsRUFBRW9nQixHQUFHLElBQUk1UCxFQUFFelEsRUFBRTgyRixVQUFVLEdBQUcsT0FBT3JtRixFQUFFLENBQUNBLEVBQUV6USxFQUFFODJGLFVBQVUsSUFBSVYsR0FBRyxJQUFJdjVGLEVBQUUsSUFBSUgsSUFBSStULEVBQUU1QyxJQUFJNU4sRUFBRXBELEVBQUUsV0FBaUIsS0FBWEEsRUFBRTRULEVBQUUzVyxJQUFJbUcsTUFBZ0JwRCxFQUFFLElBQUlILElBQUkrVCxFQUFFNUMsSUFBSTVOLEVBQUVwRCxJQUFJQSxFQUFFRSxJQUFJc2pCLEtBQUt4akIsRUFBRUssSUFBSW1qQixHQUFHcmdCLEVBQUUrMkYsR0FBR2xnRyxLQUFLLEtBQUttSixFQUFFQyxFQUFFb2dCLEdBQUdwZ0IsRUFBRTRtRixLQUFLN21GLEVBQUVBLEdBQUcsQ0FBQyxTQUFTZzNGLEdBQUdoM0YsR0FBRyxFQUFFLENBQUMsSUFBSUMsRUFBNEUsSUFBdkVBLEVBQUUsS0FBS0QsRUFBRStrQixPQUFzQjlrQixFQUFFLFFBQXBCQSxFQUFFRCxFQUFFZ3dFLGdCQUF5QixPQUFPL3ZFLEVBQUVnd0UsWUFBdUJod0UsRUFBRSxPQUFPRCxFQUFFQSxFQUFFQSxFQUFFNnZFLE1BQU0sT0FBTyxPQUFPN3ZFLEdBQUcsT0FBTyxJQUFJLENBQ2hXLFNBQVNpM0YsR0FBR2ozRixFQUFFQyxFQUFFb2dCLEVBQUU1UCxFQUFFNVQsR0FBRyxPQUFlLEVBQVBtRCxFQUFFa3lCLE1BQXdLbHlCLEVBQUU4dkUsT0FBTyxNQUFNOXZFLEVBQUU4c0YsTUFBTWp3RixFQUFTbUQsSUFBekxBLElBQUlDLEVBQUVELEVBQUU4dkUsT0FBTyxPQUFPOXZFLEVBQUU4dkUsT0FBTyxJQUFJenZELEVBQUV5dkQsT0FBTyxPQUFPenZELEVBQUV5dkQsUUFBUSxNQUFNLElBQUl6dkQsRUFBRTBFLE1BQU0sT0FBTzFFLEVBQUU0NkIsVUFBVTU2QixFQUFFMEUsSUFBSSxLQUFJOWtCLEVBQUUrdEYsSUFBSSxFQUFFLElBQUtqcEUsSUFBSSxFQUFFcXBFLEdBQUcvdEUsRUFBRXBnQixFQUFFLEtBQUtvZ0IsRUFBRXlzRSxPQUFPLEdBQUc5c0YsRUFBbUMsQ0FBQyxJQUFJazNGLEdBQUc1eEIsRUFBRzZ4QixrQkFBa0JwSyxJQUFHLEVBQUcsU0FBU3FLLEdBQUdwM0YsRUFBRUMsRUFBRW9nQixFQUFFNVAsR0FBR3hRLEVBQUVtSyxNQUFNLE9BQU9wSyxFQUFFa3NGLEdBQUdqc0YsRUFBRSxLQUFLb2dCLEVBQUU1UCxHQUFHdzdFLEdBQUdoc0YsRUFBRUQsRUFBRW9LLE1BQU1pVyxFQUFFNVAsRUFBRSxDQUNuVixTQUFTNG1GLEdBQUdyM0YsRUFBRUMsRUFBRW9nQixFQUFFNVAsRUFBRTVULEdBQUd3akIsRUFBRUEsRUFBRXJQLE9BQU8sSUFBSTZyRCxFQUFFNThELEVBQUVtckYsSUFBcUMsT0FBakN6MEIsR0FBRzEyRCxFQUFFcEQsR0FBRzRULEVBQUU0L0UsR0FBR3J3RixFQUFFQyxFQUFFb2dCLEVBQUU1UCxFQUFFb3NELEVBQUVoZ0UsR0FBR3dqQixFQUFFcXdFLEtBQVEsT0FBTzF3RixHQUFJK3NGLElBQTJFL0MsSUFBRzNwRSxHQUFHdXBFLEdBQUczcEYsR0FBR0EsRUFBRTZ2RSxPQUFPLEVBQUVzbkIsR0FBR3AzRixFQUFFQyxFQUFFd1EsRUFBRTVULEdBQVVvRCxFQUFFbUssUUFBN0duSyxFQUFFd3RGLFlBQVl6dEYsRUFBRXl0RixZQUFZeHRGLEVBQUU2dkUsUUFBUSxLQUFLOXZFLEVBQUU4c0YsUUFBUWp3RixFQUFFeTZGLEdBQUd0M0YsRUFBRUMsRUFBRXBELEdBQW9ELENBQ3pOLFNBQVMwNkYsR0FBR3YzRixFQUFFQyxFQUFFb2dCLEVBQUU1UCxFQUFFNVQsR0FBRyxHQUFHLE9BQU9tRCxFQUFFLENBQUMsSUFBSTY4RCxFQUFFeDhDLEVBQUU5a0IsS0FBSyxNQUFHLG1CQUFvQnNoRSxHQUFJMjZCLEdBQUczNkIsU0FBSSxJQUFTQSxFQUFFazRCLGNBQWMsT0FBTzEwRSxFQUFFbzNFLGNBQVMsSUFBU3AzRSxFQUFFMDBFLGVBQW9ELzBGLEVBQUU0ckYsR0FBR3ZyRSxFQUFFOWtCLEtBQUssS0FBS2tWLEVBQUV4USxFQUFFQSxFQUFFaXlCLEtBQUtyMUIsSUFBS3V1RixJQUFJbnJGLEVBQUVtckYsSUFBSXByRixFQUFFNnZFLE9BQU81dkUsRUFBU0EsRUFBRW1LLE1BQU1wSyxJQUFyR0MsRUFBRThrQixJQUFJLEdBQUc5a0IsRUFBRTFFLEtBQUtzaEUsRUFBRTY2QixHQUFHMTNGLEVBQUVDLEVBQUU0OEQsRUFBRXBzRCxFQUFFNVQsR0FBeUUsQ0FBVyxHQUFWZ2dFLEVBQUU3OEQsRUFBRW9LLFFBQWNwSyxFQUFFOHNGLE1BQU1qd0YsR0FBRyxDQUFDLElBQUlnaEMsRUFBRWcvQixFQUFFaXVCLGNBQTBDLElBQWhCenFFLEVBQUUsUUFBZEEsRUFBRUEsRUFBRW8zRSxTQUFtQnAzRSxFQUFFa2dFLElBQVExaUQsRUFBRXB0QixJQUFJelEsRUFBRW9yRixNQUFNbnJGLEVBQUVtckYsSUFBSSxPQUFPa00sR0FBR3QzRixFQUFFQyxFQUFFcEQsRUFBRSxDQUE2QyxPQUE1Q29ELEVBQUU2dkUsT0FBTyxHQUFFOXZFLEVBQUUwckYsR0FBRzd1QixFQUFFcHNELElBQUsyNkUsSUFBSW5yRixFQUFFbXJGLElBQUlwckYsRUFBRTZ2RSxPQUFPNXZFLEVBQVNBLEVBQUVtSyxNQUFNcEssQ0FBQyxDQUMxYixTQUFTMDNGLEdBQUcxM0YsRUFBRUMsRUFBRW9nQixFQUFFNVAsRUFBRTVULEdBQUcsR0FBRyxPQUFPbUQsRUFBRSxDQUFDLElBQUk2OEQsRUFBRTc4RCxFQUFFOHFGLGNBQWMsR0FBR3ZLLEdBQUcxakIsRUFBRXBzRCxJQUFJelEsRUFBRW9yRixNQUFNbnJGLEVBQUVtckYsSUFBSSxJQUFHMkIsSUFBRyxFQUFHOXNGLEVBQUVxcUYsYUFBYTc1RSxFQUFFb3NELElBQU83OEQsRUFBRThzRixNQUFNandGLEdBQXNDLE9BQU9vRCxFQUFFNnNGLE1BQU05c0YsRUFBRThzRixNQUFNd0ssR0FBR3QzRixFQUFFQyxFQUFFcEQsR0FBcEQsT0FBUm1ELEVBQUU4dkUsUUFBZ0JpZCxJQUFHLEVBQXdDLENBQUMsQ0FBQyxPQUFPNEssR0FBRzMzRixFQUFFQyxFQUFFb2dCLEVBQUU1UCxFQUFFNVQsRUFBRSxDQUN4TixTQUFTKzZGLEdBQUc1M0YsRUFBRUMsRUFBRW9nQixHQUFHLElBQUk1UCxFQUFFeFEsRUFBRXFxRixhQUFhenRGLEVBQUU0VCxFQUFFM08sU0FBUys2RCxFQUFFLE9BQU83OEQsRUFBRUEsRUFBRWd3RSxjQUFjLEtBQUssR0FBRyxXQUFXdi9ELEVBQUV5aEIsS0FBSyxHQUFlLEVBQVBqeUIsRUFBRWl5QixLQUF5RixDQUFDLEtBQVUsV0FBRjdSLEdBQWMsT0FBT3JnQixFQUFFLE9BQU82OEQsRUFBRUEsRUFBRWc3QixVQUFVeDNFLEVBQUVBLEVBQUVwZ0IsRUFBRTZzRixNQUFNN3NGLEVBQUUwc0YsV0FBVyxXQUFXMXNGLEVBQUUrdkUsY0FBYyxDQUFDNm5CLFVBQVU3M0YsRUFBRTgzRixVQUFVLEtBQUtDLFlBQVksTUFBTTkzRixFQUFFd3RGLFlBQVksS0FBSzdGLEdBQUVvUSxHQUFHQyxJQUFJQSxJQUFJajRGLEVBQUUsS0FBS0MsRUFBRSt2RSxjQUFjLENBQUM2bkIsVUFBVSxFQUFFQyxVQUFVLEtBQUtDLFlBQVksTUFBTXRuRixFQUFFLE9BQU9vc0QsRUFBRUEsRUFBRWc3QixVQUFVeDNFLEVBQUV1bkUsR0FBRW9RLEdBQUdDLElBQUlBLElBQUl4bkYsQ0FBQyxNQUFwWHhRLEVBQUUrdkUsY0FBYyxDQUFDNm5CLFVBQVUsRUFBRUMsVUFBVSxLQUFLQyxZQUFZLE1BQU1uUSxHQUFFb1EsR0FBR0MsSUFBSUEsSUFBSTUzRSxPQUErUyxPQUN0Znc4QyxHQUFHcHNELEVBQUVvc0QsRUFBRWc3QixVQUFVeDNFLEVBQUVwZ0IsRUFBRSt2RSxjQUFjLE1BQU12L0QsRUFBRTRQLEVBQUV1bkUsR0FBRW9RLEdBQUdDLElBQUlBLElBQUl4bkYsRUFBYyxPQUFaMm1GLEdBQUdwM0YsRUFBRUMsRUFBRXBELEVBQUV3akIsR0FBVXBnQixFQUFFbUssS0FBSyxDQUFDLFNBQVM4dEYsR0FBR2w0RixFQUFFQyxHQUFHLElBQUlvZ0IsRUFBRXBnQixFQUFFbXJGLEtBQU8sT0FBT3ByRixHQUFHLE9BQU9xZ0IsR0FBRyxPQUFPcmdCLEdBQUdBLEVBQUVvckYsTUFBTS9xRSxLQUFFcGdCLEVBQUU2dkUsT0FBTyxJQUFJN3ZFLEVBQUU2dkUsT0FBTyxRQUFPLENBQUMsU0FBUzZuQixHQUFHMzNGLEVBQUVDLEVBQUVvZ0IsRUFBRTVQLEVBQUU1VCxHQUFHLElBQUlnZ0UsRUFBRXdyQixHQUFHaG9FLEdBQUcybkUsR0FBR0YsR0FBRXp1RSxRQUFtRCxPQUEzQ3dqRCxFQUFFb3JCLEdBQUdob0YsRUFBRTQ4RCxHQUFHbEcsR0FBRzEyRCxFQUFFcEQsR0FBR3dqQixFQUFFZ3dFLEdBQUdyd0YsRUFBRUMsRUFBRW9nQixFQUFFNVAsRUFBRW9zRCxFQUFFaGdFLEdBQUc0VCxFQUFFaWdGLEtBQVEsT0FBTzF3RixHQUFJK3NGLElBQTJFL0MsSUFBR3Y1RSxHQUFHbTVFLEdBQUczcEYsR0FBR0EsRUFBRTZ2RSxPQUFPLEVBQUVzbkIsR0FBR3AzRixFQUFFQyxFQUFFb2dCLEVBQUV4akIsR0FBVW9ELEVBQUVtSyxRQUE3R25LLEVBQUV3dEYsWUFBWXp0RixFQUFFeXRGLFlBQVl4dEYsRUFBRTZ2RSxRQUFRLEtBQUs5dkUsRUFBRThzRixRQUFRandGLEVBQUV5NkYsR0FBR3QzRixFQUFFQyxFQUFFcEQsR0FBb0QsQ0FDbGEsU0FBU3M3RixHQUFHbjRGLEVBQUVDLEVBQUVvZ0IsRUFBRTVQLEVBQUU1VCxHQUFHLEdBQUd3ckYsR0FBR2hvRSxHQUFHLENBQUMsSUFBSXc4QyxHQUFFLEVBQUc0ckIsR0FBR3hvRixFQUFFLE1BQU00OEQsR0FBRSxFQUFXLEdBQVJsRyxHQUFHMTJELEVBQUVwRCxHQUFNLE9BQU9vRCxFQUFFc3VFLFVBQVU2cEIsR0FBR3A0RixFQUFFQyxHQUFHdTFGLEdBQUd2MUYsRUFBRW9nQixFQUFFNVAsR0FBR29sRixHQUFHNTFGLEVBQUVvZ0IsRUFBRTVQLEVBQUU1VCxHQUFHNFQsR0FBRSxPQUFRLEdBQUcsT0FBT3pRLEVBQUUsQ0FBQyxJQUFJNjlCLEVBQUU1OUIsRUFBRXN1RSxVQUFVekgsRUFBRTdtRSxFQUFFNnFGLGNBQWNqdEQsRUFBRXBhLE1BQU1xakQsRUFBRSxJQUFJcHlFLEVBQUVtcEMsRUFBRXZnQyxRQUFROUMsRUFBRTZsQixFQUFFbzFFLFlBQTBDajdGLEVBQTlCLGlCQUFrQkEsR0FBRyxPQUFPQSxFQUFJd3lGLEdBQUd4eUYsR0FBMkJ5dEYsR0FBR2hvRixFQUExQnpGLEVBQUU2dEYsR0FBR2hvRSxHQUFHMm5FLEdBQUdGLEdBQUV6dUUsU0FBbUIsSUFBSWhnQixFQUFFZ25CLEVBQUV5bEIseUJBQXlCaW1ELEVBQUUsbUJBQW9CMXlGLEdBQUcsbUJBQW9Cd2tDLEVBQUU0TCx3QkFBd0JzaUQsR0FBRyxtQkFBb0JsdUQsRUFBRSszRCxrQ0FBa0MsbUJBQW9CLzNELEVBQUU4M0QsNEJBQzFkN3VCLElBQUlyMkQsR0FBRy9iLElBQUk4RixJQUFJazdGLEdBQUd6MUYsRUFBRTQ5QixFQUFFcHRCLEVBQUVqVyxHQUFHK3lGLElBQUcsRUFBRyxJQUFJaDhFLEVBQUV0UixFQUFFK3ZFLGNBQWNueUMsRUFBRTEzQixNQUFNb0wsRUFBRWk5RSxHQUFHdnVGLEVBQUV3USxFQUFFb3RCLEVBQUVoaEMsR0FBR25JLEVBQUV1TCxFQUFFK3ZFLGNBQWNsSixJQUFJcjJELEdBQUdjLElBQUk3YyxHQUFHcXpGLEdBQUcxdUUsU0FBU2swRSxJQUFJLG1CQUFvQmwwRixJQUFJMjdGLEdBQUcvMEYsRUFBRW9nQixFQUFFaG5CLEVBQUVvWCxHQUFHL2IsRUFBRXVMLEVBQUUrdkUsZ0JBQWdCbEosRUFBRXltQixJQUFJZ0ksR0FBR3QxRixFQUFFb2dCLEVBQUV5bUQsRUFBRXIyRCxFQUFFYyxFQUFFN2MsRUFBRThGLEtBQUt1eEYsR0FBRyxtQkFBb0JsdUQsRUFBRWk0RCwyQkFBMkIsbUJBQW9CajRELEVBQUVrNEQscUJBQXFCLG1CQUFvQmw0RCxFQUFFazRELG9CQUFvQmw0RCxFQUFFazRELHFCQUFxQixtQkFBb0JsNEQsRUFBRWk0RCwyQkFBMkJqNEQsRUFBRWk0RCw2QkFBNkIsbUJBQW9CajRELEVBQUVvTCxvQkFBb0JocEMsRUFBRTZ2RSxPQUFPLFdBQ2xmLG1CQUFvQmp5QyxFQUFFb0wsb0JBQW9CaHBDLEVBQUU2dkUsT0FBTyxTQUFTN3ZFLEVBQUU2cUYsY0FBY3I2RSxFQUFFeFEsRUFBRSt2RSxjQUFjdDdFLEdBQUdtcEMsRUFBRXBhLE1BQU1oVCxFQUFFb3RCLEVBQUUxM0IsTUFBTXpSLEVBQUVtcEMsRUFBRXZnQyxRQUFROUMsRUFBRWlXLEVBQUVxMkQsSUFBSSxtQkFBb0JqcEMsRUFBRW9MLG9CQUFvQmhwQyxFQUFFNnZFLE9BQU8sU0FBU3IvRCxHQUFFLEVBQUcsS0FBSyxDQUFDb3RCLEVBQUU1OUIsRUFBRXN1RSxVQUFVd2YsR0FBRy90RixFQUFFQyxHQUFHNm1FLEVBQUU3bUUsRUFBRTZxRixjQUFjdHdGLEVBQUV5RixFQUFFMUUsT0FBTzBFLEVBQUVpakUsWUFBWTRELEVBQUVndUIsR0FBRzcwRixFQUFFMUUsS0FBS3VyRSxHQUFHanBDLEVBQUVwYSxNQUFNanBCLEVBQUV1eEYsRUFBRTlyRixFQUFFcXFGLGFBQWEvNEUsRUFBRXNzQixFQUFFdmdDLFFBQXNENUksRUFBOUIsaUJBQWhCQSxFQUFFMnJCLEVBQUVvMUUsY0FBaUMsT0FBTy9nRyxFQUFJczRGLEdBQUd0NEYsR0FBMkJ1ekYsR0FBR2hvRixFQUExQnZMLEVBQUUyekYsR0FBR2hvRSxHQUFHMm5FLEdBQUdGLEdBQUV6dUUsU0FBbUIsSUFBSTJ5RSxFQUFFM3JFLEVBQUV5bEIsMEJBQTBCenNDLEVBQUUsbUJBQW9CMnlGLEdBQUcsbUJBQW9CbnVELEVBQUU0TCwwQkFDOWUsbUJBQW9CNUwsRUFBRSszRCxrQ0FBa0MsbUJBQW9CLzNELEVBQUU4M0QsNEJBQTRCN3VCLElBQUlpbEIsR0FBR3g2RSxJQUFJN2MsSUFBSWdoRyxHQUFHejFGLEVBQUU0OUIsRUFBRXB0QixFQUFFL2IsR0FBRzY0RixJQUFHLEVBQUdoOEUsRUFBRXRSLEVBQUUrdkUsY0FBY255QyxFQUFFMTNCLE1BQU1vTCxFQUFFaTlFLEdBQUd2dUYsRUFBRXdRLEVBQUVvdEIsRUFBRWhoQyxHQUFHLElBQUk5RCxFQUFFa0gsRUFBRSt2RSxjQUFjbEosSUFBSWlsQixHQUFHeDZFLElBQUl4WSxHQUFHZ3ZGLEdBQUcxdUUsU0FBU2swRSxJQUFJLG1CQUFvQnZCLElBQUlnSixHQUFHLzBGLEVBQUVvZ0IsRUFBRTJyRSxFQUFFdjdFLEdBQUcxWCxFQUFFa0gsRUFBRSt2RSxnQkFBZ0J4MUUsRUFBRSt5RixJQUFJZ0ksR0FBR3QxRixFQUFFb2dCLEVBQUU3bEIsRUFBRWlXLEVBQUVjLEVBQUV4WSxFQUFFckUsS0FBSSxJQUFLMkUsR0FBRyxtQkFBb0J3a0MsRUFBRXc2RCw0QkFBNEIsbUJBQW9CeDZELEVBQUV5NkQsc0JBQXNCLG1CQUFvQno2RCxFQUFFeTZELHFCQUFxQno2RCxFQUFFeTZELG9CQUFvQjduRixFQUFFMVgsRUFBRXJFLEdBQUcsbUJBQW9CbXBDLEVBQUV3NkQsNEJBQzVmeDZELEVBQUV3NkQsMkJBQTJCNW5GLEVBQUUxWCxFQUFFckUsSUFBSSxtQkFBb0JtcEMsRUFBRTZILHFCQUFxQnpsQyxFQUFFNnZFLE9BQU8sR0FBRyxtQkFBb0JqeUMsRUFBRTRMLDBCQUEwQnhwQyxFQUFFNnZFLE9BQU8sUUFBUSxtQkFBb0JqeUMsRUFBRTZILG9CQUFvQm9oQyxJQUFJOW1FLEVBQUU4cUYsZUFBZXY1RSxJQUFJdlIsRUFBRWd3RSxnQkFBZ0IvdkUsRUFBRTZ2RSxPQUFPLEdBQUcsbUJBQW9CanlDLEVBQUU0TCx5QkFBeUJxOUIsSUFBSTltRSxFQUFFOHFGLGVBQWV2NUUsSUFBSXZSLEVBQUVnd0UsZ0JBQWdCL3ZFLEVBQUU2dkUsT0FBTyxNQUFNN3ZFLEVBQUU2cUYsY0FBY3I2RSxFQUFFeFEsRUFBRSt2RSxjQUFjajNFLEdBQUc4a0MsRUFBRXBhLE1BQU1oVCxFQUFFb3RCLEVBQUUxM0IsTUFBTXBOLEVBQUU4a0MsRUFBRXZnQyxRQUFRNUksRUFBRStiLEVBQUVqVyxJQUFJLG1CQUFvQnFqQyxFQUFFNkgsb0JBQW9Cb2hDLElBQUk5bUUsRUFBRThxRixlQUFldjVFLElBQ2pmdlIsRUFBRWd3RSxnQkFBZ0IvdkUsRUFBRTZ2RSxPQUFPLEdBQUcsbUJBQW9CanlDLEVBQUU0TCx5QkFBeUJxOUIsSUFBSTltRSxFQUFFOHFGLGVBQWV2NUUsSUFBSXZSLEVBQUVnd0UsZ0JBQWdCL3ZFLEVBQUU2dkUsT0FBTyxNQUFNci9ELEdBQUUsRUFBRyxDQUFDLE9BQU84bkYsR0FBR3Y0RixFQUFFQyxFQUFFb2dCLEVBQUU1UCxFQUFFb3NELEVBQUVoZ0UsRUFBRSxDQUNuSyxTQUFTMDdGLEdBQUd2NEYsRUFBRUMsRUFBRW9nQixFQUFFNVAsRUFBRTVULEVBQUVnZ0UsR0FBR3E3QixHQUFHbDRGLEVBQUVDLEdBQUcsSUFBSTQ5QixLQUFlLElBQVI1OUIsRUFBRTZ2RSxPQUFXLElBQUlyL0QsSUFBSW90QixFQUFFLE9BQU9oaEMsR0FBRzhyRixHQUFHMW9GLEVBQUVvZ0IsR0FBRSxHQUFJaTNFLEdBQUd0M0YsRUFBRUMsRUFBRTQ4RCxHQUFHcHNELEVBQUV4USxFQUFFc3VFLFVBQVUyb0IsR0FBRzc5RSxRQUFRcFosRUFBRSxJQUFJNm1FLEVBQUVqcEMsR0FBRyxtQkFBb0J4ZCxFQUFFbzJFLHlCQUF5QixLQUFLaG1GLEVBQUVPLFNBQXdJLE9BQS9IL1EsRUFBRTZ2RSxPQUFPLEVBQUUsT0FBTzl2RSxHQUFHNjlCLEdBQUc1OUIsRUFBRW1LLE1BQU02aEYsR0FBR2hzRixFQUFFRCxFQUFFb0ssTUFBTSxLQUFLeXlELEdBQUc1OEQsRUFBRW1LLE1BQU02aEYsR0FBR2hzRixFQUFFLEtBQUs2bUUsRUFBRWpLLElBQUl1NkIsR0FBR3AzRixFQUFFQyxFQUFFNm1FLEVBQUVqSyxHQUFHNThELEVBQUUrdkUsY0FBY3YvRCxFQUFFdEssTUFBTXRKLEdBQUc4ckYsR0FBRzFvRixFQUFFb2dCLEdBQUUsR0FBV3BnQixFQUFFbUssS0FBSyxDQUFDLFNBQVNvdUYsR0FBR3g0RixHQUFHLElBQUlDLEVBQUVELEVBQUV1dUUsVUFBVXR1RSxFQUFFdzRGLGVBQWVsUSxHQUFHdm9GLEVBQUVDLEVBQUV3NEYsZUFBZXg0RixFQUFFdzRGLGlCQUFpQng0RixFQUFFM0MsU0FBUzJDLEVBQUUzQyxTQUFTaXJGLEdBQUd2b0YsRUFBRUMsRUFBRTNDLFNBQVEsR0FBSTB4RixHQUFHaHZGLEVBQUVDLEVBQUVnMUUsY0FBYyxDQUM1ZSxTQUFTeWpCLEdBQUcxNEYsRUFBRUMsRUFBRW9nQixFQUFFNVAsRUFBRTVULEdBQXVDLE9BQXBDbXVGLEtBQUtDLEdBQUdwdUYsR0FBR29ELEVBQUU2dkUsT0FBTyxJQUFJc25CLEdBQUdwM0YsRUFBRUMsRUFBRW9nQixFQUFFNVAsR0FBVXhRLEVBQUVtSyxLQUFLLENBQUMsSUFhcUx1dUYsR0FBR0MsR0FBR0MsR0FBR0MsR0FiMUxDLEdBQUcsQ0FBQzlvQixXQUFXLEtBQUt1YSxZQUFZLEtBQUtDLFVBQVUsR0FBRyxTQUFTdU8sR0FBR2g1RixHQUFHLE1BQU0sQ0FBQzYzRixVQUFVNzNGLEVBQUU4M0YsVUFBVSxLQUFLQyxZQUFZLEtBQUssQ0FDbE0sU0FBU2tCLEdBQUdqNUYsRUFBRUMsRUFBRW9nQixHQUFHLElBQTBEeW1ELEVBQXREcjJELEVBQUV4USxFQUFFcXFGLGFBQWF6dEYsRUFBRXV5RixHQUFFLzFFLFFBQVF3akQsR0FBRSxFQUFHaC9CLEtBQWUsSUFBUjU5QixFQUFFNnZFLE9BQXFKLElBQXZJaEosRUFBRWpwQyxLQUFLaXBDLEdBQUUsT0FBTzltRSxHQUFHLE9BQU9BLEVBQUVnd0UsbUJBQXdCLEVBQUZuekUsSUFBU2lxRSxHQUFFakssR0FBRSxFQUFHNThELEVBQUU2dkUsUUFBUSxLQUFZLE9BQU85dkUsR0FBRyxPQUFPQSxFQUFFZ3dFLGdCQUFjbnpFLEdBQUcsR0FBRStxRixHQUFFd0gsR0FBSSxFQUFGdnlGLEdBQVEsT0FBT21ELEVBQTJCLE9BQXhCMnFGLEdBQUcxcUYsR0FBd0IsUUFBckJELEVBQUVDLEVBQUUrdkUsZ0JBQTJDLFFBQWZod0UsRUFBRUEsRUFBRWl3RSxhQUF3QyxFQUFQaHdFLEVBQUVpeUIsS0FBa0IsT0FBT2x5QixFQUFFbkUsS0FBS29FLEVBQUU2c0YsTUFBTSxFQUFFN3NGLEVBQUU2c0YsTUFBTSxXQUExQzdzRixFQUFFNnNGLE1BQU0sRUFBNkMsT0FBS2p2RCxFQUFFcHRCLEVBQUUzTyxTQUFTOUIsRUFBRXlRLEVBQUV5b0YsU0FBZ0JyOEIsR0FBR3BzRCxFQUFFeFEsRUFBRWl5QixLQUFLMnFDLEVBQUU1OEQsRUFBRW1LLE1BQU15ekIsRUFBRSxDQUFDM0wsS0FBSyxTQUFTcHdCLFNBQVMrN0IsR0FBVSxFQUFGcHRCLEdBQU0sT0FBT29zRCxFQUN0ZEEsRUFBRXM4QixHQUFHdDdELEVBQUVwdEIsRUFBRSxFQUFFLE9BRDhjb3NELEVBQUU4dkIsV0FBVyxFQUFFOXZCLEVBQUV5dEIsYUFDN2V6c0QsR0FBb0I3OUIsRUFBRThyRixHQUFHOXJGLEVBQUV5USxFQUFFNFAsRUFBRSxNQUFNdzhDLEVBQUVnVCxPQUFPNXZFLEVBQUVELEVBQUU2dkUsT0FBTzV2RSxFQUFFNDhELEVBQUV0L0MsUUFBUXZkLEVBQUVDLEVBQUVtSyxNQUFNeXlELEVBQUU1OEQsRUFBRW1LLE1BQU00bEUsY0FBY2dwQixHQUFHMzRFLEdBQUdwZ0IsRUFBRSt2RSxjQUFjK29CLEdBQUcvNEYsR0FBR281RixHQUFHbjVGLEVBQUU0OUIsSUFBcUIsR0FBRyxRQUFyQmhoQyxFQUFFbUQsRUFBRWd3RSxnQkFBMkMsUUFBZmxKLEVBQUVqcUUsRUFBRW96RSxZQUFxQixPQUdwTSxTQUFZandFLEVBQUVDLEVBQUVvZ0IsRUFBRTVQLEVBQUU1VCxFQUFFZ2dFLEVBQUVoL0IsR0FBRyxHQUFHeGQsRUFBRyxPQUFXLElBQVJwZ0IsRUFBRTZ2RSxPQUFpQjd2RSxFQUFFNnZFLFFBQVEsSUFBd0J1cEIsR0FBR3I1RixFQUFFQyxFQUFFNDlCLEVBQTNCcHRCLEVBQUV5bEYsR0FBRzV5RixNQUFNdEssRUFBRSxTQUFzQixPQUFPaUgsRUFBRSt2RSxlQUFxQi92RSxFQUFFbUssTUFBTXBLLEVBQUVvSyxNQUFNbkssRUFBRTZ2RSxPQUFPLElBQUksT0FBS2pULEVBQUVwc0QsRUFBRXlvRixTQUFTcjhGLEVBQUVvRCxFQUFFaXlCLEtBQUt6aEIsRUFBRTBvRixHQUFHLENBQUNqbkUsS0FBSyxVQUFVcHdCLFNBQVMyTyxFQUFFM08sVUFBVWpGLEVBQUUsRUFBRSxPQUFNZ2dFLEVBQUVpdkIsR0FBR2p2QixFQUFFaGdFLEVBQUVnaEMsRUFBRSxPQUFRaXlDLE9BQU8sRUFBRXIvRCxFQUFFby9ELE9BQU81dkUsRUFBRTQ4RCxFQUFFZ1QsT0FBTzV2RSxFQUFFd1EsRUFBRThNLFFBQVFzL0MsRUFBRTU4RCxFQUFFbUssTUFBTXFHLEVBQWMsRUFBUHhRLEVBQUVpeUIsTUFBUys1RCxHQUFHaHNGLEVBQUVELEVBQUVvSyxNQUFNLEtBQUt5ekIsR0FBRzU5QixFQUFFbUssTUFBTTRsRSxjQUFjZ3BCLEdBQUduN0QsR0FBRzU5QixFQUFFK3ZFLGNBQWMrb0IsR0FBVWw4QixHQUFFLEtBQWUsRUFBUDU4RCxFQUFFaXlCLE1BQVEsT0FBT21uRSxHQUFHcjVGLEVBQUVDLEVBQUU0OUIsRUFBRSxNQUFNLEdBQUcsT0FBT2hoQyxFQUFFaEIsS0FBSyxDQUNoZCxHQURpZDRVLEVBQUU1VCxFQUFFNmpGLGFBQWE3akYsRUFBRTZqRixZQUFZNFksUUFDM2UsSUFBSXh5QixFQUFFcjJELEVBQUU4b0YsS0FBMEMsT0FBckM5b0YsRUFBRXEyRCxFQUEwQ3V5QixHQUFHcjVGLEVBQUVDLEVBQUU0OUIsRUFBL0JwdEIsRUFBRXlsRixHQUFsQnI1QixFQUFFdjVELE1BQU10SyxFQUFFLE1BQWF5WCxPQUFFLEdBQTBCLENBQXdCLEdBQXZCcTJELEtBQU9qcEMsRUFBRTc5QixFQUFFMnNGLFlBQWVJLElBQUlqbUIsRUFBRSxDQUFLLEdBQUcsUUFBUHIyRCxFQUFFb2hGLElBQWMsQ0FBQyxPQUFPaDBELEdBQUdBLEdBQUcsS0FBSyxFQUFFaGhDLEVBQUUsRUFBRSxNQUFNLEtBQUssR0FBR0EsRUFBRSxFQUFFLE1BQU0sS0FBSyxHQUFHLEtBQUssSUFBSSxLQUFLLElBQUksS0FBSyxJQUFJLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLEtBQUssS0FBSyxLQUFLLE1BQU0sS0FBSyxNQUFNLEtBQUssTUFBTSxLQUFLLE9BQU8sS0FBSyxPQUFPLEtBQUssT0FBTyxLQUFLLFFBQVEsS0FBSyxRQUFRLEtBQUssUUFBUSxLQUFLLFFBQVEsS0FBSyxTQUFTLEtBQUssU0FBUyxLQUFLLFNBQVNBLEVBQUUsR0FBRyxNQUFNLEtBQUssVUFBVUEsRUFBRSxVQUFVLE1BQU0sUUFBUUEsRUFBRSxFQUNoZCxLQURrZEEsRUFBT0EsR0FBRzRULEVBQUVnaUUsZUFBZTUwQyxHQUFJLEVBQUVoaEMsSUFDNWVBLElBQUlnZ0UsRUFBRTR0QixZQUFZNXRCLEVBQUU0dEIsVUFBVTV0RixFQUFFeXdGLEdBQUd0dEYsRUFBRW5ELEdBQUdzMUYsR0FBRzFoRixFQUFFelEsRUFBRW5ELEdBQUcsR0FBRyxDQUEwQixPQUF6QjI4RixLQUFnQ0gsR0FBR3I1RixFQUFFQyxFQUFFNDlCLEVBQWxDcHRCLEVBQUV5bEYsR0FBRzV5RixNQUFNdEssRUFBRSxPQUF5QixDQUFDLE1BQUcsT0FBTzZELEVBQUVoQixNQUFZb0UsRUFBRTZ2RSxPQUFPLElBQUk3dkUsRUFBRW1LLE1BQU1wSyxFQUFFb0ssTUFBTW5LLEVBQUV3NUYsR0FBRzVpRyxLQUFLLEtBQUttSixHQUFHbkQsRUFBRTY4RixZQUFZejVGLEVBQUUsT0FBS0QsRUFBRTY4RCxFQUFFMnRCLFlBQVlULEdBQUc5QyxHQUFHcHFGLEVBQUU2akYsYUFBYW9KLEdBQUc3cEYsRUFBRStwRixJQUFFLEVBQUdDLEdBQUcsS0FBSyxPQUFPanFGLElBQUlxcEYsR0FBR0MsTUFBTUUsR0FBR0gsR0FBR0MsTUFBTUcsR0FBR0osR0FBR0MsTUFBTUMsR0FBR0MsR0FBR3hwRixFQUFFd1UsR0FBR2kxRSxHQUFHenBGLEVBQUV1cUYsU0FBU2hCLEdBQUd0cEYsSUFBR0EsRUFBRW01RixHQUFHbjVGLEVBQUV3USxFQUFFM08sV0FBWWd1RSxPQUFPLEtBQVk3dkUsRUFBQyxDQUxySzA1RixDQUFHMzVGLEVBQUVDLEVBQUU0OUIsRUFBRXB0QixFQUFFcTJELEVBQUVqcUUsRUFBRXdqQixHQUFHLEdBQUd3OEMsRUFBRSxDQUFDQSxFQUFFcHNELEVBQUV5b0YsU0FBU3I3RCxFQUFFNTlCLEVBQUVpeUIsS0FBZTQwQyxHQUFWanFFLEVBQUVtRCxFQUFFb0ssT0FBVW1ULFFBQVEsSUFBSTdvQixFQUFFLENBQUN3OUIsS0FBSyxTQUFTcHdCLFNBQVMyTyxFQUFFM08sVUFDaEYsT0FEaUcsRUFBRis3QixHQUFNNTlCLEVBQUVtSyxRQUFRdk4sR0FBZ0U0VCxFQUFFaTdFLEdBQUc3dUYsRUFBRW5JLElBQUtrbEcsYUFBNEIsU0FBZi84RixFQUFFKzhGLGVBQXhGbnBGLEVBQUV4USxFQUFFbUssT0FBUXVpRixXQUFXLEVBQUVsOEUsRUFBRTY1RSxhQUFhNTFGLEVBQUV1TCxFQUFFbXFGLFVBQVUsTUFBeUQsT0FBT3RqQixFQUFFakssRUFBRTZ1QixHQUFHNWtCLEVBQUVqSyxJQUFJQSxFQUFFaXZCLEdBQUdqdkIsRUFBRWgvQixFQUFFeGQsRUFBRSxPQUFReXZELE9BQU8sRUFBR2pULEVBQUVnVCxPQUNuZjV2RSxFQUFFd1EsRUFBRW8vRCxPQUFPNXZFLEVBQUV3USxFQUFFOE0sUUFBUXMvQyxFQUFFNThELEVBQUVtSyxNQUFNcUcsRUFBRUEsRUFBRW9zRCxFQUFFQSxFQUFFNThELEVBQUVtSyxNQUE4Qnl6QixFQUFFLFFBQTFCQSxFQUFFNzlCLEVBQUVvSyxNQUFNNGxFLGVBQXlCZ3BCLEdBQUczNEUsR0FBRyxDQUFDdzNFLFVBQVVoNkQsRUFBRWc2RCxVQUFVeDNFLEVBQUV5M0UsVUFBVSxLQUFLQyxZQUFZbDZELEVBQUVrNkQsYUFBYWw3QixFQUFFbVQsY0FBY255QyxFQUFFZy9CLEVBQUU4dkIsV0FBVzNzRixFQUFFMnNGLFlBQVl0c0UsRUFBRXBnQixFQUFFK3ZFLGNBQWMrb0IsR0FBVXRvRixDQUFDLENBQW9PLE9BQXpOelEsR0FBVjY4RCxFQUFFNzhELEVBQUVvSyxPQUFVbVQsUUFBUTlNLEVBQUVpN0UsR0FBRzd1QixFQUFFLENBQUMzcUMsS0FBSyxVQUFVcHdCLFNBQVMyTyxFQUFFM08sYUFBdUIsRUFBUDdCLEVBQUVpeUIsUUFBVXpoQixFQUFFcThFLE1BQU16c0UsR0FBRzVQLEVBQUVvL0QsT0FBTzV2RSxFQUFFd1EsRUFBRThNLFFBQVEsS0FBSyxPQUFPdmQsSUFBa0IsUUFBZHFnQixFQUFFcGdCLEVBQUVtcUYsWUFBb0JucUYsRUFBRW1xRixVQUFVLENBQUNwcUYsR0FBR0MsRUFBRTZ2RSxPQUFPLElBQUl6dkQsRUFBRTVuQixLQUFLdUgsSUFBSUMsRUFBRW1LLE1BQU1xRyxFQUFFeFEsRUFBRSt2RSxjQUFjLEtBQVl2L0QsQ0FBQyxDQUNuZCxTQUFTMm9GLEdBQUdwNUYsRUFBRUMsR0FBOEQsT0FBM0RBLEVBQUVrNUYsR0FBRyxDQUFDam5FLEtBQUssVUFBVXB3QixTQUFTN0IsR0FBR0QsRUFBRWt5QixLQUFLLEVBQUUsT0FBUTI5QyxPQUFPN3ZFLEVBQVNBLEVBQUVvSyxNQUFNbkssQ0FBQyxDQUFDLFNBQVNvNUYsR0FBR3I1RixFQUFFQyxFQUFFb2dCLEVBQUU1UCxHQUF3RyxPQUFyRyxPQUFPQSxHQUFHdzZFLEdBQUd4NkUsR0FBR3c3RSxHQUFHaHNGLEVBQUVELEVBQUVvSyxNQUFNLEtBQUtpVyxJQUFHcmdCLEVBQUVvNUYsR0FBR241RixFQUFFQSxFQUFFcXFGLGFBQWF4b0YsV0FBWWd1RSxPQUFPLEVBQUU3dkUsRUFBRSt2RSxjQUFjLEtBQVlod0UsQ0FBQyxDQUdrSixTQUFTNjVGLEdBQUc3NUYsRUFBRUMsRUFBRW9nQixHQUFHcmdCLEVBQUU4c0YsT0FBTzdzRixFQUFFLElBQUl3USxFQUFFelEsRUFBRWk3QyxVQUFVLE9BQU94cUMsSUFBSUEsRUFBRXE4RSxPQUFPN3NGLEdBQUd5c0YsR0FBRzFzRixFQUFFNnZFLE9BQU81dkUsRUFBRW9nQixFQUFFLENBQ3hjLFNBQVN5NUUsR0FBRzk1RixFQUFFQyxFQUFFb2dCLEVBQUU1UCxFQUFFNVQsR0FBRyxJQUFJZ2dFLEVBQUU3OEQsRUFBRWd3RSxjQUFjLE9BQU9uVCxFQUFFNzhELEVBQUVnd0UsY0FBYyxDQUFDK3BCLFlBQVk5NUYsRUFBRSs1RixVQUFVLEtBQUtDLG1CQUFtQixFQUFFbHdGLEtBQUswRyxFQUFFeXBGLEtBQUs3NUUsRUFBRTg1RSxTQUFTdDlGLElBQUlnZ0UsRUFBRWs5QixZQUFZOTVGLEVBQUU0OEQsRUFBRW05QixVQUFVLEtBQUtuOUIsRUFBRW85QixtQkFBbUIsRUFBRXA5QixFQUFFOXlELEtBQUswRyxFQUFFb3NELEVBQUVxOUIsS0FBSzc1RSxFQUFFdzhDLEVBQUVzOUIsU0FBU3Q5RixFQUFFLENBQzNPLFNBQVN1OUYsR0FBR3A2RixFQUFFQyxFQUFFb2dCLEdBQUcsSUFBSTVQLEVBQUV4USxFQUFFcXFGLGFBQWF6dEYsRUFBRTRULEVBQUU2K0UsWUFBWXp5QixFQUFFcHNELEVBQUV5cEYsS0FBc0MsR0FBakM5QyxHQUFHcDNGLEVBQUVDLEVBQUV3USxFQUFFM08sU0FBU3VlLEdBQXlCLEdBQXRCNVAsRUFBRTIrRSxHQUFFLzFFLFNBQXFCNUksRUFBSSxFQUFGQSxFQUFJLEVBQUV4USxFQUFFNnZFLE9BQU8sUUFBUSxDQUFDLEdBQUcsT0FBTzl2RSxHQUFnQixJQUFSQSxFQUFFOHZFLE1BQVc5dkUsRUFBRSxJQUFJQSxFQUFFQyxFQUFFbUssTUFBTSxPQUFPcEssR0FBRyxDQUFDLEdBQUcsS0FBS0EsRUFBRStrQixJQUFJLE9BQU8va0IsRUFBRWd3RSxlQUFlNnBCLEdBQUc3NUYsRUFBRXFnQixFQUFFcGdCLFFBQVEsR0FBRyxLQUFLRCxFQUFFK2tCLElBQUk4MEUsR0FBRzc1RixFQUFFcWdCLEVBQUVwZ0IsUUFBUSxHQUFHLE9BQU9ELEVBQUVvSyxNQUFNLENBQUNwSyxFQUFFb0ssTUFBTXlsRSxPQUFPN3ZFLEVBQUVBLEVBQUVBLEVBQUVvSyxNQUFNLFFBQVEsQ0FBQyxHQUFHcEssSUFBSUMsRUFBRSxNQUFNRCxFQUFFLEtBQUssT0FBT0EsRUFBRXVkLFNBQVMsQ0FBQyxHQUFHLE9BQU92ZCxFQUFFNnZFLFFBQVE3dkUsRUFBRTZ2RSxTQUFTNXZFLEVBQUUsTUFBTUQsRUFBRUEsRUFBRUEsRUFBRTZ2RSxNQUFNLENBQUM3dkUsRUFBRXVkLFFBQVFzeUQsT0FBTzd2RSxFQUFFNnZFLE9BQU83dkUsRUFBRUEsRUFBRXVkLE9BQU8sQ0FBQzlNLEdBQUcsQ0FBQyxDQUFRLEdBQVBtM0UsR0FBRXdILEdBQUUzK0UsR0FBa0IsRUFBUHhRLEVBQUVpeUIsS0FDM2QsT0FBT3IxQixHQUFHLElBQUssV0FBcUIsSUFBVndqQixFQUFFcGdCLEVBQUVtSyxNQUFVdk4sRUFBRSxLQUFLLE9BQU93akIsR0FBaUIsUUFBZHJnQixFQUFFcWdCLEVBQUU0NkIsWUFBb0IsT0FBT28wQyxHQUFHcnZGLEtBQUtuRCxFQUFFd2pCLEdBQUdBLEVBQUVBLEVBQUU5QyxRQUFZLFFBQUo4QyxFQUFFeGpCLElBQVlBLEVBQUVvRCxFQUFFbUssTUFBTW5LLEVBQUVtSyxNQUFNLE9BQU92TixFQUFFd2pCLEVBQUU5QyxRQUFROEMsRUFBRTlDLFFBQVEsTUFBTXU4RSxHQUFHNzVGLEdBQUUsRUFBR3BELEVBQUV3akIsRUFBRXc4QyxHQUFHLE1BQU0sSUFBSyxZQUE2QixJQUFqQng4QyxFQUFFLEtBQUt4akIsRUFBRW9ELEVBQUVtSyxNQUFVbkssRUFBRW1LLE1BQU0sS0FBSyxPQUFPdk4sR0FBRyxDQUFlLEdBQUcsUUFBakJtRCxFQUFFbkQsRUFBRW8rQyxZQUF1QixPQUFPbzBDLEdBQUdydkYsR0FBRyxDQUFDQyxFQUFFbUssTUFBTXZOLEVBQUUsS0FBSyxDQUFDbUQsRUFBRW5ELEVBQUUwZ0IsUUFBUTFnQixFQUFFMGdCLFFBQVE4QyxFQUFFQSxFQUFFeGpCLEVBQUVBLEVBQUVtRCxDQUFDLENBQUM4NUYsR0FBRzc1RixHQUFFLEVBQUdvZ0IsRUFBRSxLQUFLdzhDLEdBQUcsTUFBTSxJQUFLLFdBQVdpOUIsR0FBRzc1RixHQUFFLEVBQUcsS0FBSyxVQUFLLEdBQVEsTUFBTSxRQUFRQSxFQUFFK3ZFLGNBQWMsVUFEbUMvdkUsRUFBRSt2RSxjQUMvZSxLQUErYyxPQUFPL3ZFLEVBQUVtSyxLQUFLLENBQzdkLFNBQVNndUYsR0FBR3A0RixFQUFFQyxLQUFlLEVBQVBBLEVBQUVpeUIsT0FBUyxPQUFPbHlCLElBQUlBLEVBQUVpN0MsVUFBVSxLQUFLaDdDLEVBQUVnN0MsVUFBVSxLQUFLaDdDLEVBQUU2dkUsT0FBTyxFQUFFLENBQUMsU0FBU3duQixHQUFHdDNGLEVBQUVDLEVBQUVvZ0IsR0FBeUQsR0FBdEQsT0FBT3JnQixJQUFJQyxFQUFFMnNGLGFBQWE1c0YsRUFBRTRzRixjQUFjNkIsSUFBSXh1RixFQUFFNnNGLFFBQWN6c0UsRUFBRXBnQixFQUFFMHNGLFlBQVksT0FBTyxLQUFLLEdBQUcsT0FBTzNzRixHQUFHQyxFQUFFbUssUUFBUXBLLEVBQUVvSyxNQUFNLE1BQU05RyxNQUFNdEssRUFBRSxNQUFNLEdBQUcsT0FBT2lILEVBQUVtSyxNQUFNLENBQTRDLElBQWpDaVcsRUFBRXFyRSxHQUFaMXJGLEVBQUVDLEVBQUVtSyxNQUFhcEssRUFBRXNxRixjQUFjcnFGLEVBQUVtSyxNQUFNaVcsRUFBTUEsRUFBRXd2RCxPQUFPNXZFLEVBQUUsT0FBT0QsRUFBRXVkLFNBQVN2ZCxFQUFFQSxFQUFFdWQsU0FBUThDLEVBQUVBLEVBQUU5QyxRQUFRbXVFLEdBQUcxckYsRUFBRUEsRUFBRXNxRixlQUFnQnphLE9BQU81dkUsRUFBRW9nQixFQUFFOUMsUUFBUSxJQUFJLENBQUMsT0FBT3RkLEVBQUVtSyxLQUFLLENBTzlhLFNBQVNpd0YsR0FBR3I2RixFQUFFQyxHQUFHLElBQUkrcEYsR0FBRSxPQUFPaHFGLEVBQUVtNkYsVUFBVSxJQUFLLFNBQVNsNkYsRUFBRUQsRUFBRWs2RixLQUFLLElBQUksSUFBSTc1RSxFQUFFLEtBQUssT0FBT3BnQixHQUFHLE9BQU9BLEVBQUVnN0MsWUFBWTU2QixFQUFFcGdCLEdBQUdBLEVBQUVBLEVBQUVzZCxRQUFRLE9BQU84QyxFQUFFcmdCLEVBQUVrNkYsS0FBSyxLQUFLNzVFLEVBQUU5QyxRQUFRLEtBQUssTUFBTSxJQUFLLFlBQVk4QyxFQUFFcmdCLEVBQUVrNkYsS0FBSyxJQUFJLElBQUl6cEYsRUFBRSxLQUFLLE9BQU80UCxHQUFHLE9BQU9BLEVBQUU0NkIsWUFBWXhxQyxFQUFFNFAsR0FBR0EsRUFBRUEsRUFBRTlDLFFBQVEsT0FBTzlNLEVBQUV4USxHQUFHLE9BQU9ELEVBQUVrNkYsS0FBS2w2RixFQUFFazZGLEtBQUssS0FBS2w2RixFQUFFazZGLEtBQUszOEUsUUFBUSxLQUFLOU0sRUFBRThNLFFBQVEsS0FBSyxDQUM1VSxTQUFTKzhFLEdBQUV0NkYsR0FBRyxJQUFJQyxFQUFFLE9BQU9ELEVBQUVpN0MsV0FBV2o3QyxFQUFFaTdDLFVBQVU3d0MsUUFBUXBLLEVBQUVvSyxNQUFNaVcsRUFBRSxFQUFFNVAsRUFBRSxFQUFFLEdBQUd4USxFQUFFLElBQUksSUFBSXBELEVBQUVtRCxFQUFFb0ssTUFBTSxPQUFPdk4sR0FBR3dqQixHQUFHeGpCLEVBQUVpd0YsTUFBTWp3RixFQUFFOHZGLFdBQVdsOEUsR0FBa0IsU0FBZjVULEVBQUUrOEYsYUFBc0JucEYsR0FBVyxTQUFSNVQsRUFBRWl6RSxNQUFlanpFLEVBQUVnekUsT0FBTzd2RSxFQUFFbkQsRUFBRUEsRUFBRTBnQixhQUFhLElBQUkxZ0IsRUFBRW1ELEVBQUVvSyxNQUFNLE9BQU92TixHQUFHd2pCLEdBQUd4akIsRUFBRWl3RixNQUFNandGLEVBQUU4dkYsV0FBV2w4RSxHQUFHNVQsRUFBRSs4RixhQUFhbnBGLEdBQUc1VCxFQUFFaXpFLE1BQU1qekUsRUFBRWd6RSxPQUFPN3ZFLEVBQUVuRCxFQUFFQSxFQUFFMGdCLFFBQXlDLE9BQWpDdmQsRUFBRTQ1RixjQUFjbnBGLEVBQUV6USxFQUFFMnNGLFdBQVd0c0UsRUFBU3BnQixDQUFDLENBQzdWLFNBQVNzNkYsR0FBR3Y2RixFQUFFQyxFQUFFb2dCLEdBQUcsSUFBSTVQLEVBQUV4USxFQUFFcXFGLGFBQW1CLE9BQU5ULEdBQUc1cEYsR0FBVUEsRUFBRThrQixLQUFLLEtBQUssRUFBRSxLQUFLLEdBQUcsS0FBSyxHQUFHLEtBQUssRUFBRSxLQUFLLEdBQUcsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEdBQUcsS0FBSyxFQUFFLEtBQUssR0FBRyxPQUFPdTFFLEdBQUVyNkYsR0FBRyxLQUFLLEtBQUssRUFVdEQsS0FBSyxHQUFHLE9BQU9vb0YsR0FBR3BvRixFQUFFMUUsT0FBTytzRixLQUFLZ1MsR0FBRXI2RixHQUFHLEtBVnFELEtBQUssRUFBMlEsT0FBelF3USxFQUFFeFEsRUFBRXN1RSxVQUFVMGdCLEtBQUt0SCxHQUFFSSxJQUFJSixHQUFFRyxJQUFHMEgsS0FBSy8rRSxFQUFFZ29GLGlCQUFpQmhvRixFQUFFblQsUUFBUW1ULEVBQUVnb0YsZUFBZWhvRixFQUFFZ29GLGVBQWUsTUFBUyxPQUFPejRGLEdBQUcsT0FBT0EsRUFBRW9LLFFBQU15Z0YsR0FBRzVxRixHQUFHQSxFQUFFNnZFLE9BQU8sRUFBRSxPQUFPOXZFLEdBQUdBLEVBQUVnd0UsY0FBY2dGLGdCQUEyQixJQUFSLzBFLEVBQUU2dkUsU0FBYTd2RSxFQUFFNnZFLE9BQU8sS0FBSyxPQUFPbWEsS0FBS3VRLEdBQUd2USxJQUFJQSxHQUFHLFFBQU8yTyxHQUFHNTRGLEVBQUVDLEdBQUdxNkYsR0FBRXI2RixHQUFVLEtBQUssS0FBSyxFQUFFa3ZGLEdBQUdsdkYsR0FBRyxJQUFJcEQsRUFBRWt5RixHQUFHRCxHQUFHejFFLFNBQzdlLEdBQVRnSCxFQUFFcGdCLEVBQUUxRSxLQUFRLE9BQU95RSxHQUFHLE1BQU1DLEVBQUVzdUUsVUFBVXNxQixHQUFHNzRGLEVBQUVDLEVBQUVvZ0IsRUFBRTVQLEVBQUU1VCxHQUFHbUQsRUFBRW9yRixNQUFNbnJGLEVBQUVtckYsTUFBTW5yRixFQUFFNnZFLE9BQU8sSUFBSTd2RSxFQUFFNnZFLE9BQU8sYUFBYSxDQUFDLElBQUlyL0QsRUFBRSxDQUFDLEdBQUcsT0FBT3hRLEVBQUVzdUUsVUFBVSxNQUFNanJFLE1BQU10SyxFQUFFLE1BQVcsT0FBTHNoRyxHQUFFcjZGLEdBQVUsSUFBSSxDQUFrQixHQUFqQkQsRUFBRSt1RixHQUFHSCxHQUFHdjFFLFNBQVl3eEUsR0FBRzVxRixHQUFHLENBQUN3USxFQUFFeFEsRUFBRXN1RSxVQUFVbHVELEVBQUVwZ0IsRUFBRTFFLEtBQUssSUFBSXNoRSxFQUFFNThELEVBQUU2cUYsY0FBK0MsT0FBakNyNkUsRUFBRTIyRSxJQUFJbm5GLEVBQUV3USxFQUFFNDJFLElBQUl4cUIsRUFBRTc4RCxLQUFjLEVBQVBDLEVBQUVpeUIsTUFBZTdSLEdBQUcsSUFBSyxTQUFTaWtFLEdBQUUsU0FBUzd6RSxHQUFHNnpFLEdBQUUsUUFBUTd6RSxHQUFHLE1BQU0sSUFBSyxTQUFTLElBQUssU0FBUyxJQUFLLFFBQVE2ekUsR0FBRSxPQUFPN3pFLEdBQUcsTUFBTSxJQUFLLFFBQVEsSUFBSyxRQUFRLElBQUk1VCxFQUFFLEVBQUVBLEVBQUVvbkYsR0FBR3p2RixPQUFPcUksSUFBSXluRixHQUFFTCxHQUFHcG5GLEdBQUc0VCxHQUFHLE1BQU0sSUFBSyxTQUFTNnpFLEdBQUUsUUFBUTd6RSxHQUFHLE1BQU0sSUFBSyxNQUFNLElBQUssUUFBUSxJQUFLLE9BQU82ekUsR0FBRSxRQUNuaEI3ekUsR0FBRzZ6RSxHQUFFLE9BQU83ekUsR0FBRyxNQUFNLElBQUssVUFBVTZ6RSxHQUFFLFNBQVM3ekUsR0FBRyxNQUFNLElBQUssUUFBUTAzRCxFQUFHMTNELEVBQUVvc0QsR0FBR3luQixHQUFFLFVBQVU3ekUsR0FBRyxNQUFNLElBQUssU0FBU0EsRUFBRXczRCxjQUFjLENBQUN3eUIsY0FBYzU5QixFQUFFNjlCLFVBQVVwVyxHQUFFLFVBQVU3ekUsR0FBRyxNQUFNLElBQUssV0FBV3M0RCxHQUFHdDRELEVBQUVvc0QsR0FBR3luQixHQUFFLFVBQVU3ekUsR0FBa0IsSUFBSSxJQUFJb3RCLEtBQXZCOHZDLEdBQUd0dEQsRUFBRXc4QyxHQUFHaGdFLEVBQUUsS0FBa0JnZ0UsRUFBRSxHQUFHQSxFQUFFNWpFLGVBQWU0a0MsR0FBRyxDQUFDLElBQUlpcEMsRUFBRWpLLEVBQUVoL0IsR0FBRyxhQUFhQSxFQUFFLGlCQUFrQmlwQyxFQUFFcjJELEVBQUVyTSxjQUFjMGlFLEtBQUksSUFBS2pLLEVBQUU4OUIsMEJBQTBCM1UsR0FBR3YxRSxFQUFFck0sWUFBWTBpRSxFQUFFOW1FLEdBQUduRCxFQUFFLENBQUMsV0FBV2lxRSxJQUFJLGlCQUFrQkEsR0FBR3IyRCxFQUFFck0sY0FBYyxHQUFHMGlFLEtBQUksSUFBS2pLLEVBQUU4OUIsMEJBQTBCM1UsR0FBR3YxRSxFQUFFck0sWUFDMWUwaUUsRUFBRTltRSxHQUFHbkQsRUFBRSxDQUFDLFdBQVcsR0FBR2lxRSxJQUFJakQsRUFBRzVxRSxlQUFlNGtDLElBQUksTUFBTWlwQyxHQUFHLGFBQWFqcEMsR0FBR3ltRCxHQUFFLFNBQVM3ekUsRUFBRSxDQUFDLE9BQU80UCxHQUFHLElBQUssUUFBUWtuRCxFQUFHOTJELEdBQUcrM0QsRUFBRy8zRCxFQUFFb3NELEdBQUUsR0FBSSxNQUFNLElBQUssV0FBVzBLLEVBQUc5MkQsR0FBR3c0RCxHQUFHeDRELEdBQUcsTUFBTSxJQUFLLFNBQVMsSUFBSyxTQUFTLE1BQU0sUUFBUSxtQkFBb0Jvc0QsRUFBRSs5QixVQUFVbnFGLEVBQUVvcUYsUUFBUTVVLElBQUl4MUUsRUFBRTVULEVBQUVvRCxFQUFFd3RGLFlBQVloOUUsRUFBRSxPQUFPQSxJQUFJeFEsRUFBRTZ2RSxPQUFPLEVBQUUsS0FBSyxDQUFDanlDLEVBQUUsSUFBSWhoQyxFQUFFbTZCLFNBQVNuNkIsRUFBRUEsRUFBRTRyRSxjQUFjLGlDQUFpQ3pvRSxJQUFJQSxFQUFFa3BFLEdBQUc3b0QsSUFBSSxpQ0FBaUNyZ0IsRUFBRSxXQUFXcWdCLElBQUdyZ0IsRUFBRTY5QixFQUFFb1AsY0FBYyxRQUFTczhCLFVBQVUscUJBQXVCdnBFLEVBQUVBLEVBQUV3cEUsWUFBWXhwRSxFQUFFcWQsYUFDL2YsaUJBQWtCNU0sRUFBRTdWLEdBQUdvRixFQUFFNjlCLEVBQUVvUCxjQUFjNXNCLEVBQUUsQ0FBQ3psQixHQUFHNlYsRUFBRTdWLE1BQU1vRixFQUFFNjlCLEVBQUVvUCxjQUFjNXNCLEdBQUcsV0FBV0EsSUFBSXdkLEVBQUU3OUIsRUFBRXlRLEVBQUVpcUYsU0FBUzc4RCxFQUFFNjhELFVBQVMsRUFBR2pxRixFQUFFOVQsT0FBT2toQyxFQUFFbGhDLEtBQUs4VCxFQUFFOVQsUUFBUXFELEVBQUU2OUIsRUFBRWk5RCxnQkFBZ0I5NkYsRUFBRXFnQixHQUFHcmdCLEVBQUVvbkYsSUFBSW5uRixFQUFFRCxFQUFFcW5GLElBQUk1MkUsRUFBRWtvRixHQUFHMzRGLEVBQUVDLEdBQUUsR0FBRyxHQUFJQSxFQUFFc3VFLFVBQVV2dUUsRUFBRUEsRUFBRSxDQUFXLE9BQVY2OUIsRUFBRSt2QyxHQUFHdnRELEVBQUU1UCxHQUFVNFAsR0FBRyxJQUFLLFNBQVNpa0UsR0FBRSxTQUFTdGtGLEdBQUdza0YsR0FBRSxRQUFRdGtGLEdBQUduRCxFQUFFNFQsRUFBRSxNQUFNLElBQUssU0FBUyxJQUFLLFNBQVMsSUFBSyxRQUFRNnpFLEdBQUUsT0FBT3RrRixHQUFHbkQsRUFBRTRULEVBQUUsTUFBTSxJQUFLLFFBQVEsSUFBSyxRQUFRLElBQUk1VCxFQUFFLEVBQUVBLEVBQUVvbkYsR0FBR3p2RixPQUFPcUksSUFBSXluRixHQUFFTCxHQUFHcG5GLEdBQUdtRCxHQUFHbkQsRUFBRTRULEVBQUUsTUFBTSxJQUFLLFNBQVM2ekUsR0FBRSxRQUFRdGtGLEdBQUduRCxFQUFFNFQsRUFBRSxNQUFNLElBQUssTUFBTSxJQUFLLFFBQVEsSUFBSyxPQUFPNnpFLEdBQUUsUUFDbGZ0a0YsR0FBR3NrRixHQUFFLE9BQU90a0YsR0FBR25ELEVBQUU0VCxFQUFFLE1BQU0sSUFBSyxVQUFVNnpFLEdBQUUsU0FBU3RrRixHQUFHbkQsRUFBRTRULEVBQUUsTUFBTSxJQUFLLFFBQVEwM0QsRUFBR25vRSxFQUFFeVEsR0FBRzVULEVBQUVpckUsRUFBRzluRSxFQUFFeVEsR0FBRzZ6RSxHQUFFLFVBQVV0a0YsR0FBRyxNQUFNLElBQUssU0FBaUwsUUFBUW5ELEVBQUU0VCxRQUF4SyxJQUFLLFNBQVN6USxFQUFFaW9FLGNBQWMsQ0FBQ3d5QixjQUFjaHFGLEVBQUVpcUYsVUFBVTc5RixFQUFFcEksRUFBRSxDQUFDLEVBQUVnYyxFQUFFLENBQUNoWixXQUFNLElBQVM2c0YsR0FBRSxVQUFVdGtGLEdBQUcsTUFBTSxJQUFLLFdBQVcrb0UsR0FBRy9vRSxFQUFFeVEsR0FBRzVULEVBQUVnc0UsR0FBRzdvRSxFQUFFeVEsR0FBRzZ6RSxHQUFFLFVBQVV0a0YsR0FBaUMsSUFBSTY4RCxLQUFoQjhRLEdBQUd0dEQsRUFBRXhqQixHQUFHaXFFLEVBQUVqcUUsRUFBYSxHQUFHaXFFLEVBQUU3dEUsZUFBZTRqRSxHQUFHLENBQUMsSUFBSW5vRSxFQUFFb3lFLEVBQUVqSyxHQUFHLFVBQVVBLEVBQUUrUCxHQUFHNXNFLEVBQUV0TCxHQUFHLDRCQUE0Qm1vRSxFQUF1QixPQUFwQm5vRSxFQUFFQSxFQUFFQSxFQUFFMnhGLFlBQU8sSUFBZ0JoZCxHQUFHcnBFLEVBQUV0TCxHQUFJLGFBQWFtb0UsRUFBRSxpQkFBa0Jub0UsR0FBRyxhQUM3ZTJyQixHQUFHLEtBQUszckIsSUFBSWkxRSxHQUFHM3BFLEVBQUV0TCxHQUFHLGlCQUFrQkEsR0FBR2kxRSxHQUFHM3BFLEVBQUUsR0FBR3RMLEdBQUcsbUNBQW1DbW9FLEdBQUcsNkJBQTZCQSxHQUFHLGNBQWNBLElBQUlnSCxFQUFHNXFFLGVBQWU0akUsR0FBRyxNQUFNbm9FLEdBQUcsYUFBYW1vRSxHQUFHeW5CLEdBQUUsU0FBU3RrRixHQUFHLE1BQU10TCxHQUFHcXdFLEVBQUcva0UsRUFBRTY4RCxFQUFFbm9FLEVBQUVtcEMsR0FBRyxDQUFDLE9BQU94ZCxHQUFHLElBQUssUUFBUWtuRCxFQUFHdm5FLEdBQUd3b0UsRUFBR3hvRSxFQUFFeVEsR0FBRSxHQUFJLE1BQU0sSUFBSyxXQUFXODJELEVBQUd2bkUsR0FBR2lwRSxHQUFHanBFLEdBQUcsTUFBTSxJQUFLLFNBQVMsTUFBTXlRLEVBQUVoWixPQUFPdUksRUFBRW1sRSxhQUFhLFFBQVEsR0FBR2tDLEVBQUc1MkQsRUFBRWhaLFFBQVEsTUFBTSxJQUFLLFNBQVN1SSxFQUFFMDZGLFdBQVdqcUYsRUFBRWlxRixTQUFtQixPQUFWNzlCLEVBQUVwc0QsRUFBRWhaLE9BQWNreEUsR0FBRzNvRSxJQUFJeVEsRUFBRWlxRixTQUFTNzlCLEdBQUUsR0FBSSxNQUFNcHNELEVBQUV1M0QsY0FBY1csR0FBRzNvRSxJQUFJeVEsRUFBRWlxRixTQUFTanFGLEVBQUV1M0QsY0FDbGYsR0FBSSxNQUFNLFFBQVEsbUJBQW9CbnJFLEVBQUUrOUYsVUFBVTU2RixFQUFFNjZGLFFBQVE1VSxJQUFJLE9BQU81bEUsR0FBRyxJQUFLLFNBQVMsSUFBSyxRQUFRLElBQUssU0FBUyxJQUFLLFdBQVc1UCxJQUFJQSxFQUFFc3FGLFVBQVUsTUFBTS82RixFQUFFLElBQUssTUFBTXlRLEdBQUUsRUFBRyxNQUFNelEsRUFBRSxRQUFReVEsR0FBRSxFQUFHLENBQUNBLElBQUl4USxFQUFFNnZFLE9BQU8sRUFBRSxDQUFDLE9BQU83dkUsRUFBRW1yRixNQUFNbnJGLEVBQUU2dkUsT0FBTyxJQUFJN3ZFLEVBQUU2dkUsT0FBTyxRQUFRLENBQU0sT0FBTHdxQixHQUFFcjZGLEdBQVUsS0FBSyxLQUFLLEVBQUUsR0FBR0QsR0FBRyxNQUFNQyxFQUFFc3VFLFVBQVV1cUIsR0FBRzk0RixFQUFFQyxFQUFFRCxFQUFFOHFGLGNBQWNyNkUsT0FBTyxDQUFDLEdBQUcsaUJBQWtCQSxHQUFHLE9BQU94USxFQUFFc3VFLFVBQVUsTUFBTWpyRSxNQUFNdEssRUFBRSxNQUFzQyxHQUFoQ3FuQixFQUFFMHVFLEdBQUdELEdBQUd6MUUsU0FBUzAxRSxHQUFHSCxHQUFHdjFFLFNBQVl3eEUsR0FBRzVxRixHQUFHLENBQXlDLEdBQXhDd1EsRUFBRXhRLEVBQUVzdUUsVUFBVWx1RCxFQUFFcGdCLEVBQUU2cUYsY0FBY3I2RSxFQUFFMjJFLElBQUlubkYsR0FBSzQ4RCxFQUFFcHNELEVBQUVvNUQsWUFBWXhwRCxJQUMvZSxRQURvZnJnQixFQUN2ZjhwRixJQUFZLE9BQU85cEYsRUFBRStrQixLQUFLLEtBQUssRUFBRWloRSxHQUFHdjFFLEVBQUVvNUQsVUFBVXhwRCxLQUFjLEVBQVByZ0IsRUFBRWt5QixPQUFTLE1BQU0sS0FBSyxHQUFFLElBQUtseUIsRUFBRThxRixjQUFjNlAsMEJBQTBCM1UsR0FBR3YxRSxFQUFFbzVELFVBQVV4cEQsS0FBYyxFQUFQcmdCLEVBQUVreUIsT0FBUzJxQyxJQUFJNThELEVBQUU2dkUsT0FBTyxFQUFFLE1BQU1yL0QsR0FBRyxJQUFJNFAsRUFBRTJXLFNBQVMzVyxFQUFFQSxFQUFFb29ELGVBQWV1eUIsZUFBZXZxRixJQUFLMjJFLElBQUlubkYsRUFBRUEsRUFBRXN1RSxVQUFVOTlELENBQUMsQ0FBTSxPQUFMNnBGLEdBQUVyNkYsR0FBVSxLQUFLLEtBQUssR0FBMEIsR0FBdkIwbkYsR0FBRXlILElBQUczK0UsRUFBRXhRLEVBQUUrdkUsY0FBaUIsT0FBT2h3RSxHQUFHLE9BQU9BLEVBQUVnd0UsZUFBZSxPQUFPaHdFLEVBQUVnd0UsY0FBY0MsV0FBVyxDQUFDLEdBQUcrWixJQUFHLE9BQU9ELElBQWdCLEVBQVA5cEYsRUFBRWl5QixRQUFzQixJQUFSanlCLEVBQUU2dkUsT0FBV2liLEtBQUtDLEtBQUsvcUYsRUFBRTZ2RSxPQUFPLE1BQU1qVCxHQUFFLE9BQVEsR0FBR0EsRUFBRWd1QixHQUFHNXFGLEdBQUcsT0FBT3dRLEdBQUcsT0FBT0EsRUFBRXcvRCxXQUFXLENBQUMsR0FBRyxPQUM1Zmp3RSxFQUFFLENBQUMsSUFBSTY4RCxFQUFFLE1BQU12NUQsTUFBTXRLLEVBQUUsTUFBcUQsS0FBN0I2akUsRUFBRSxRQUFwQkEsRUFBRTU4RCxFQUFFK3ZFLGVBQXlCblQsRUFBRW9ULFdBQVcsTUFBVyxNQUFNM3NFLE1BQU10SyxFQUFFLE1BQU02akUsRUFBRXVxQixJQUFJbm5GLENBQUMsTUFBTStxRixPQUFrQixJQUFSL3FGLEVBQUU2dkUsU0FBYTd2RSxFQUFFK3ZFLGNBQWMsTUFBTS92RSxFQUFFNnZFLE9BQU8sRUFBRXdxQixHQUFFcjZGLEdBQUc0OEQsR0FBRSxDQUFFLE1BQU0sT0FBT290QixLQUFLdVEsR0FBR3ZRLElBQUlBLEdBQUcsTUFBTXB0QixHQUFFLEVBQUcsSUFBSUEsRUFBRSxPQUFlLE1BQVI1OEQsRUFBRTZ2RSxNQUFZN3ZFLEVBQUUsSUFBSSxDQUFDLE9BQWdCLElBQVJBLEVBQUU2dkUsT0FBa0I3dkUsRUFBRTZzRixNQUFNenNFLEVBQUVwZ0IsS0FBRXdRLEVBQUUsT0FBT0EsS0FBTyxPQUFPelEsR0FBRyxPQUFPQSxFQUFFZ3dFLGdCQUFnQnYvRCxJQUFJeFEsRUFBRW1LLE1BQU0wbEUsT0FBTyxLQUFpQixFQUFQN3ZFLEVBQUVpeUIsT0FBVSxPQUFPbHlCLEdBQWtCLEVBQVZvdkYsR0FBRS8xRSxRQUFXLElBQUk0aEYsS0FBSUEsR0FBRSxHQUFHekIsT0FBTyxPQUFPdjVGLEVBQUV3dEYsY0FBY3h0RixFQUFFNnZFLE9BQU8sR0FBR3dxQixHQUFFcjZGLEdBQVUsTUFBSyxLQUFLLEVBQUUsT0FBT2d2RixLQUNyZjJKLEdBQUc1NEYsRUFBRUMsR0FBRyxPQUFPRCxHQUFHNGtGLEdBQUcza0YsRUFBRXN1RSxVQUFVMEcsZUFBZXFsQixHQUFFcjZGLEdBQUcsS0FBSyxLQUFLLEdBQUcsT0FBT3VzRixHQUFHdnNGLEVBQUUxRSxLQUFLc2lCLFVBQVV5OEUsR0FBRXI2RixHQUFHLEtBQStDLEtBQUssR0FBMEIsR0FBdkIwbkYsR0FBRXlILElBQXdCLFFBQXJCdnlCLEVBQUU1OEQsRUFBRSt2RSxlQUEwQixPQUFPc3FCLEdBQUVyNkYsR0FBRyxLQUF1QyxHQUFsQ3dRLEtBQWUsSUFBUnhRLEVBQUU2dkUsT0FBNEIsUUFBakJqeUMsRUFBRWcvQixFQUFFbTlCLFdBQXNCLEdBQUd2cEYsRUFBRTRwRixHQUFHeDlCLEdBQUUsT0FBUSxDQUFDLEdBQUcsSUFBSW8rQixJQUFHLE9BQU9qN0YsR0FBZ0IsSUFBUkEsRUFBRTh2RSxNQUFXLElBQUk5dkUsRUFBRUMsRUFBRW1LLE1BQU0sT0FBT3BLLEdBQUcsQ0FBUyxHQUFHLFFBQVg2OUIsRUFBRXd4RCxHQUFHcnZGLElBQWUsQ0FBbUcsSUFBbEdDLEVBQUU2dkUsT0FBTyxJQUFJdXFCLEdBQUd4OUIsR0FBRSxHQUFvQixRQUFoQnBzRCxFQUFFb3RCLEVBQUU0dkQsZUFBdUJ4dEYsRUFBRXd0RixZQUFZaDlFLEVBQUV4USxFQUFFNnZFLE9BQU8sR0FBRzd2RSxFQUFFMjVGLGFBQWEsRUFBRW5wRixFQUFFNFAsRUFBTUEsRUFBRXBnQixFQUFFbUssTUFBTSxPQUFPaVcsR0FBT3JnQixFQUFFeVEsR0FBTm9zRCxFQUFFeDhDLEdBQVF5dkQsT0FBTyxTQUMvZCxRQUFkanlDLEVBQUVnL0IsRUFBRTVoQixZQUFvQjRoQixFQUFFOHZCLFdBQVcsRUFBRTl2QixFQUFFaXdCLE1BQU05c0YsRUFBRTY4RCxFQUFFenlELE1BQU0sS0FBS3l5RCxFQUFFKzhCLGFBQWEsRUFBRS84QixFQUFFaXVCLGNBQWMsS0FBS2p1QixFQUFFbVQsY0FBYyxLQUFLblQsRUFBRTR3QixZQUFZLEtBQUs1d0IsRUFBRSt2QixhQUFhLEtBQUsvdkIsRUFBRTBSLFVBQVUsT0FBTzFSLEVBQUU4dkIsV0FBVzl1RCxFQUFFOHVELFdBQVc5dkIsRUFBRWl3QixNQUFNanZELEVBQUVpdkQsTUFBTWp3QixFQUFFenlELE1BQU15ekIsRUFBRXp6QixNQUFNeXlELEVBQUUrOEIsYUFBYSxFQUFFLzhCLEVBQUV1dEIsVUFBVSxLQUFLdnRCLEVBQUVpdUIsY0FBY2p0RCxFQUFFaXRELGNBQWNqdUIsRUFBRW1ULGNBQWNueUMsRUFBRW15QyxjQUFjblQsRUFBRTR3QixZQUFZNXZELEVBQUU0dkQsWUFBWTV3QixFQUFFdGhFLEtBQUtzaUMsRUFBRXRpQyxLQUFLeUUsRUFBRTY5QixFQUFFK3VELGFBQWEvdkIsRUFBRSt2QixhQUFhLE9BQU81c0YsRUFBRSxLQUFLLENBQUM4c0YsTUFBTTlzRixFQUFFOHNGLE1BQU1ELGFBQWE3c0YsRUFBRTZzRixlQUFleHNFLEVBQUVBLEVBQUU5QyxRQUEyQixPQUFuQnFxRSxHQUFFd0gsR0FBWSxFQUFWQSxHQUFFLzFFLFFBQVUsR0FBVXBaLEVBQUVtSyxLQUFLLENBQUNwSyxFQUNsZ0JBLEVBQUV1ZCxPQUFPLENBQUMsT0FBT3MvQyxFQUFFcTlCLE1BQU1wcEIsS0FBSW9xQixLQUFLajdGLEVBQUU2dkUsT0FBTyxJQUFJci9ELEdBQUUsRUFBRzRwRixHQUFHeDlCLEdBQUUsR0FBSTU4RCxFQUFFNnNGLE1BQU0sUUFBUSxLQUFLLENBQUMsSUFBSXI4RSxFQUFFLEdBQVcsUUFBUnpRLEVBQUVxdkYsR0FBR3h4RCxLQUFhLEdBQUc1OUIsRUFBRTZ2RSxPQUFPLElBQUlyL0QsR0FBRSxFQUFtQixRQUFoQjRQLEVBQUVyZ0IsRUFBRXl0RixlQUF1Qnh0RixFQUFFd3RGLFlBQVlwdEUsRUFBRXBnQixFQUFFNnZFLE9BQU8sR0FBR3VxQixHQUFHeDlCLEdBQUUsR0FBSSxPQUFPQSxFQUFFcTlCLE1BQU0sV0FBV3I5QixFQUFFczlCLFdBQVd0OEQsRUFBRW9kLFlBQVkrdUMsR0FBRSxPQUFPc1EsR0FBRXI2RixHQUFHLFVBQVUsRUFBRTZ3RSxLQUFJalUsRUFBRW85QixtQkFBbUJpQixJQUFJLGFBQWE3NkUsSUFBSXBnQixFQUFFNnZFLE9BQU8sSUFBSXIvRCxHQUFFLEVBQUc0cEYsR0FBR3g5QixHQUFFLEdBQUk1OEQsRUFBRTZzRixNQUFNLFNBQVNqd0IsRUFBRWs5QixhQUFhbDhELEVBQUV0Z0IsUUFBUXRkLEVBQUVtSyxNQUFNbkssRUFBRW1LLE1BQU15ekIsSUFBYSxRQUFUeGQsRUFBRXc4QyxFQUFFOXlELE1BQWNzVyxFQUFFOUMsUUFBUXNnQixFQUFFNTlCLEVBQUVtSyxNQUFNeXpCLEVBQUVnL0IsRUFBRTl5RCxLQUFLOHpCLEVBQUUsQ0FBQyxPQUFHLE9BQU9nL0IsRUFBRXE5QixNQUFZajZGLEVBQUU0OEQsRUFBRXE5QixLQUFLcjlCLEVBQUVtOUIsVUFDOWUvNUYsRUFBRTQ4RCxFQUFFcTlCLEtBQUtqNkYsRUFBRXNkLFFBQVFzL0MsRUFBRW85QixtQkFBbUJucEIsS0FBSTd3RSxFQUFFc2QsUUFBUSxLQUFLOEMsRUFBRSt1RSxHQUFFLzFFLFFBQVF1dUUsR0FBRXdILEdBQUUzK0UsRUFBSSxFQUFGNFAsRUFBSSxFQUFJLEVBQUZBLEdBQUtwZ0IsSUFBRXE2RixHQUFFcjZGLEdBQVUsTUFBSyxLQUFLLEdBQUcsS0FBSyxHQUFHLE9BQU9rN0YsS0FBSzFxRixFQUFFLE9BQU94USxFQUFFK3ZFLGNBQWMsT0FBT2h3RSxHQUFHLE9BQU9BLEVBQUVnd0UsZ0JBQWdCdi9ELElBQUl4USxFQUFFNnZFLE9BQU8sTUFBTXIvRCxHQUFlLEVBQVB4USxFQUFFaXlCLFFBQWdCLFdBQUgrbEUsTUFBaUJxQyxHQUFFcjZGLEdBQWtCLEVBQWZBLEVBQUUyNUYsZUFBaUIzNUYsRUFBRTZ2RSxPQUFPLE9BQU93cUIsR0FBRXI2RixHQUFHLEtBQUssS0FBSyxHQUFlLEtBQUssR0FBRyxPQUFPLEtBQUssTUFBTXFELE1BQU10SyxFQUFFLElBQUlpSCxFQUFFOGtCLEtBQU0sQ0FDbFgsU0FBU3EyRSxHQUFHcDdGLEVBQUVDLEdBQVMsT0FBTjRwRixHQUFHNXBGLEdBQVVBLEVBQUU4a0IsS0FBSyxLQUFLLEVBQUUsT0FBT3NqRSxHQUFHcG9GLEVBQUUxRSxPQUFPK3NGLEtBQWlCLE9BQVp0b0YsRUFBRUMsRUFBRTZ2RSxRQUFlN3ZFLEVBQUU2dkUsT0FBUyxNQUFIOXZFLEVBQVMsSUFBSUMsR0FBRyxLQUFLLEtBQUssRUFBRSxPQUFPZ3ZGLEtBQUt0SCxHQUFFSSxJQUFJSixHQUFFRyxJQUFHMEgsS0FBc0IsT0FBakJ4dkYsRUFBRUMsRUFBRTZ2RSxVQUE0QixJQUFGOXZFLElBQVFDLEVBQUU2dkUsT0FBUyxNQUFIOXZFLEVBQVMsSUFBSUMsR0FBRyxLQUFLLEtBQUssRUFBRSxPQUFPa3ZGLEdBQUdsdkYsR0FBRyxLQUFLLEtBQUssR0FBMEIsR0FBdkIwbkYsR0FBRXlILElBQXdCLFFBQXJCcHZGLEVBQUVDLEVBQUUrdkUsZ0JBQTJCLE9BQU9od0UsRUFBRWl3RSxXQUFXLENBQUMsR0FBRyxPQUFPaHdFLEVBQUVnN0MsVUFBVSxNQUFNMzNDLE1BQU10SyxFQUFFLE1BQU1neUYsSUFBSSxDQUFXLE9BQVMsT0FBbkJockYsRUFBRUMsRUFBRTZ2RSxRQUFzQjd2RSxFQUFFNnZFLE9BQVMsTUFBSDl2RSxFQUFTLElBQUlDLEdBQUcsS0FBSyxLQUFLLEdBQUcsT0FBTzBuRixHQUFFeUgsSUFBRyxLQUFLLEtBQUssRUFBRSxPQUFPSCxLQUFLLEtBQUssS0FBSyxHQUFHLE9BQU96QyxHQUFHdnNGLEVBQUUxRSxLQUFLc2lCLFVBQVUsS0FBSyxLQUFLLEdBQUcsS0FBSyxHQUFHLE9BQU9zOUUsS0FDMWdCLEtBQXlCLFFBQVEsT0FBTyxLQUFLLENBckI3Q3hDLEdBQUcsU0FBUzM0RixFQUFFQyxHQUFHLElBQUksSUFBSW9nQixFQUFFcGdCLEVBQUVtSyxNQUFNLE9BQU9pVyxHQUFHLENBQUMsR0FBRyxJQUFJQSxFQUFFMEUsS0FBSyxJQUFJMUUsRUFBRTBFLElBQUkva0IsRUFBRW9zQixZQUFZL0wsRUFBRWt1RCxnQkFBZ0IsR0FBRyxJQUFJbHVELEVBQUUwRSxLQUFLLE9BQU8xRSxFQUFFalcsTUFBTSxDQUFDaVcsRUFBRWpXLE1BQU15bEUsT0FBT3h2RCxFQUFFQSxFQUFFQSxFQUFFalcsTUFBTSxRQUFRLENBQUMsR0FBR2lXLElBQUlwZ0IsRUFBRSxNQUFNLEtBQUssT0FBT29nQixFQUFFOUMsU0FBUyxDQUFDLEdBQUcsT0FBTzhDLEVBQUV3dkQsUUFBUXh2RCxFQUFFd3ZELFNBQVM1dkUsRUFBRSxPQUFPb2dCLEVBQUVBLEVBQUV3dkQsTUFBTSxDQUFDeHZELEVBQUU5QyxRQUFRc3lELE9BQU94dkQsRUFBRXd2RCxPQUFPeHZELEVBQUVBLEVBQUU5QyxPQUFPLENBQUMsRUFBRXE3RSxHQUFHLFdBQVcsRUFDeFRDLEdBQUcsU0FBUzc0RixFQUFFQyxFQUFFb2dCLEVBQUU1UCxHQUFHLElBQUk1VCxFQUFFbUQsRUFBRThxRixjQUFjLEdBQUdqdUYsSUFBSTRULEVBQUUsQ0FBQ3pRLEVBQUVDLEVBQUVzdUUsVUFBVXdnQixHQUFHSCxHQUFHdjFFLFNBQVMsSUFBNFJ3a0IsRUFBeFJnL0IsRUFBRSxLQUFLLE9BQU94OEMsR0FBRyxJQUFLLFFBQVF4akIsRUFBRWlyRSxFQUFHOW5FLEVBQUVuRCxHQUFHNFQsRUFBRXEzRCxFQUFHOW5FLEVBQUV5USxHQUFHb3NELEVBQUUsR0FBRyxNQUFNLElBQUssU0FBU2hnRSxFQUFFcEksRUFBRSxDQUFDLEVBQUVvSSxFQUFFLENBQUNwRixXQUFNLElBQVNnWixFQUFFaGMsRUFBRSxDQUFDLEVBQUVnYyxFQUFFLENBQUNoWixXQUFNLElBQVNvbEUsRUFBRSxHQUFHLE1BQU0sSUFBSyxXQUFXaGdFLEVBQUVnc0UsR0FBRzdvRSxFQUFFbkQsR0FBRzRULEVBQUVvNEQsR0FBRzdvRSxFQUFFeVEsR0FBR29zRCxFQUFFLEdBQUcsTUFBTSxRQUFRLG1CQUFvQmhnRSxFQUFFKzlGLFNBQVMsbUJBQW9CbnFGLEVBQUVtcUYsVUFBVTU2RixFQUFFNjZGLFFBQVE1VSxJQUF5QixJQUFJenJGLEtBQXpCbXpFLEdBQUd0dEQsRUFBRTVQLEdBQVM0UCxFQUFFLEtBQWN4akIsRUFBRSxJQUFJNFQsRUFBRXhYLGVBQWV1QixJQUFJcUMsRUFBRTVELGVBQWV1QixJQUFJLE1BQU1xQyxFQUFFckMsR0FBRyxHQUFHLFVBQVVBLEVBQUUsQ0FBQyxJQUFJc3NFLEVBQUVqcUUsRUFBRXJDLEdBQUcsSUFBSXFqQyxLQUFLaXBDLEVBQUVBLEVBQUU3dEUsZUFBZTRrQyxLQUNqZnhkLElBQUlBLEVBQUUsQ0FBQyxHQUFHQSxFQUFFd2QsR0FBRyxHQUFHLEtBQUssNEJBQTRCcmpDLEdBQUcsYUFBYUEsR0FBRyxtQ0FBbUNBLEdBQUcsNkJBQTZCQSxHQUFHLGNBQWNBLElBQUlxcEUsRUFBRzVxRSxlQUFldUIsR0FBR3FpRSxJQUFJQSxFQUFFLEtBQUtBLEVBQUVBLEdBQUcsSUFBSXBrRSxLQUFLK0IsRUFBRSxPQUFPLElBQUlBLEtBQUtpVyxFQUFFLENBQUMsSUFBSS9iLEVBQUUrYixFQUFFalcsR0FBeUIsR0FBdEJzc0UsRUFBRSxNQUFNanFFLEVBQUVBLEVBQUVyQyxRQUFHLEVBQVVpVyxFQUFFeFgsZUFBZXVCLElBQUk5RixJQUFJb3lFLElBQUksTUFBTXB5RSxHQUFHLE1BQU1veUUsR0FBRyxHQUFHLFVBQVV0c0UsRUFBRSxHQUFHc3NFLEVBQUUsQ0FBQyxJQUFJanBDLEtBQUtpcEMsR0FBR0EsRUFBRTd0RSxlQUFlNGtDLElBQUlucEMsR0FBR0EsRUFBRXVFLGVBQWU0a0MsS0FBS3hkLElBQUlBLEVBQUUsQ0FBQyxHQUFHQSxFQUFFd2QsR0FBRyxJQUFJLElBQUlBLEtBQUtucEMsRUFBRUEsRUFBRXVFLGVBQWU0a0MsSUFBSWlwQyxFQUFFanBDLEtBQUtucEMsRUFBRW1wQyxLQUFLeGQsSUFBSUEsRUFBRSxDQUFDLEdBQUdBLEVBQUV3ZCxHQUFHbnBDLEVBQUVtcEMsR0FBRyxNQUFNeGQsSUFBSXc4QyxJQUFJQSxFQUFFLElBQUlBLEVBQUVwa0UsS0FBSytCLEVBQ3BmNmxCLElBQUlBLEVBQUUzckIsTUFBTSw0QkFBNEI4RixHQUFHOUYsRUFBRUEsRUFBRUEsRUFBRTJ4RixZQUFPLEVBQU92ZixFQUFFQSxFQUFFQSxFQUFFdWYsWUFBTyxFQUFPLE1BQU0zeEYsR0FBR295RSxJQUFJcHlFLElBQUltb0UsRUFBRUEsR0FBRyxJQUFJcGtFLEtBQUsrQixFQUFFOUYsSUFBSSxhQUFhOEYsRUFBRSxpQkFBa0I5RixHQUFHLGlCQUFrQkEsSUFBSW1vRSxFQUFFQSxHQUFHLElBQUlwa0UsS0FBSytCLEVBQUUsR0FBRzlGLEdBQUcsbUNBQW1DOEYsR0FBRyw2QkFBNkJBLElBQUlxcEUsRUFBRzVxRSxlQUFldUIsSUFBSSxNQUFNOUYsR0FBRyxhQUFhOEYsR0FBRzhwRixHQUFFLFNBQVN0a0YsR0FBRzY4RCxHQUFHaUssSUFBSXB5RSxJQUFJbW9FLEVBQUUsTUFBTUEsRUFBRUEsR0FBRyxJQUFJcGtFLEtBQUsrQixFQUFFOUYsR0FBRyxDQUFDMnJCLElBQUl3OEMsRUFBRUEsR0FBRyxJQUFJcGtFLEtBQUssUUFBUTRuQixHQUFHLElBQUk3bEIsRUFBRXFpRSxHQUFLNThELEVBQUV3dEYsWUFBWWp6RixLQUFFeUYsRUFBRTZ2RSxPQUFPLEVBQUMsQ0FBQyxFQUFFZ3BCLEdBQUcsU0FBUzk0RixFQUFFQyxFQUFFb2dCLEVBQUU1UCxHQUFHNFAsSUFBSTVQLElBQUl4USxFQUFFNnZFLE9BQU8sRUFBRSxFQWtCbGIsSUFBSXVyQixJQUFHLEVBQUdDLElBQUUsRUFBR0MsR0FBRyxtQkFBb0JuaUYsUUFBUUEsUUFBUTFjLElBQUk4K0YsR0FBRSxLQUFLLFNBQVNDLEdBQUd6N0YsRUFBRUMsR0FBRyxJQUFJb2dCLEVBQUVyZ0IsRUFBRW9yRixJQUFJLEdBQUcsT0FBTy9xRSxFQUFFLEdBQUcsbUJBQW9CQSxFQUFFLElBQUlBLEVBQUUsS0FBSyxDQUFDLE1BQU01UCxHQUFHaXJGLEdBQUUxN0YsRUFBRUMsRUFBRXdRLEVBQUUsTUFBTTRQLEVBQUVoSCxRQUFRLElBQUksQ0FBQyxTQUFTc2lGLEdBQUczN0YsRUFBRUMsRUFBRW9nQixHQUFHLElBQUlBLEdBQUcsQ0FBQyxNQUFNNVAsR0FBR2lyRixHQUFFMTdGLEVBQUVDLEVBQUV3USxFQUFFLENBQUMsQ0FBQyxJQUFJbXJGLElBQUcsRUFJeFIsU0FBU0MsR0FBRzc3RixFQUFFQyxFQUFFb2dCLEdBQUcsSUFBSTVQLEVBQUV4USxFQUFFd3RGLFlBQXlDLEdBQUcsUUFBaENoOUUsRUFBRSxPQUFPQSxFQUFFQSxFQUFFc2hGLFdBQVcsTUFBaUIsQ0FBQyxJQUFJbDFGLEVBQUU0VCxFQUFFQSxFQUFFbEgsS0FBSyxFQUFFLENBQUMsSUFBSTFNLEVBQUVrb0IsSUFBSS9rQixLQUFLQSxFQUFFLENBQUMsSUFBSTY4RCxFQUFFaGdFLEVBQUV3MUYsUUFBUXgxRixFQUFFdzFGLGFBQVEsT0FBTyxJQUFTeDFCLEdBQUc4K0IsR0FBRzE3RixFQUFFb2dCLEVBQUV3OEMsRUFBRSxDQUFDaGdFLEVBQUVBLEVBQUUwTSxJQUFJLE9BQU8xTSxJQUFJNFQsRUFBRSxDQUFDLENBQUMsU0FBU3FyRixHQUFHOTdGLEVBQUVDLEdBQWdELEdBQUcsUUFBaENBLEVBQUUsUUFBbEJBLEVBQUVBLEVBQUV3dEYsYUFBdUJ4dEYsRUFBRTh4RixXQUFXLE1BQWlCLENBQUMsSUFBSTF4RSxFQUFFcGdCLEVBQUVBLEVBQUVzSixLQUFLLEVBQUUsQ0FBQyxJQUFJOFcsRUFBRTBFLElBQUkva0IsS0FBS0EsRUFBRSxDQUFDLElBQUl5USxFQUFFNFAsRUFBRWxuQixPQUFPa25CLEVBQUVneUUsUUFBUTVoRixHQUFHLENBQUM0UCxFQUFFQSxFQUFFOVcsSUFBSSxPQUFPOFcsSUFBSXBnQixFQUFFLENBQUMsQ0FBQyxTQUFTODdGLEdBQUcvN0YsR0FBRyxJQUFJQyxFQUFFRCxFQUFFb3JGLElBQUksR0FBRyxPQUFPbnJGLEVBQUUsQ0FBQyxJQUFJb2dCLEVBQUVyZ0IsRUFBRXV1RSxVQUFpQnZ1RSxFQUFFK2tCLElBQThCL2tCLEVBQUVxZ0IsRUFBRSxtQkFBb0JwZ0IsRUFBRUEsRUFBRUQsR0FBR0MsRUFBRW9aLFFBQVFyWixDQUFDLENBQUMsQ0FDbGYsU0FBU2c4RixHQUFHaDhGLEdBQUcsSUFBSUMsRUFBRUQsRUFBRWk3QyxVQUFVLE9BQU9oN0MsSUFBSUQsRUFBRWk3QyxVQUFVLEtBQUsrZ0QsR0FBRy83RixJQUFJRCxFQUFFb0ssTUFBTSxLQUFLcEssRUFBRW9xRixVQUFVLEtBQUtwcUYsRUFBRXVkLFFBQVEsS0FBSyxJQUFJdmQsRUFBRStrQixLQUFvQixRQUFkOWtCLEVBQUVELEVBQUV1dUUsb0JBQTRCdHVFLEVBQUVtbkYsV0FBV25uRixFQUFFb25GLFdBQVdwbkYsRUFBRXNrRixXQUFXdGtGLEVBQUVxbkYsV0FBV3JuRixFQUFFc25GLEtBQU12bkYsRUFBRXV1RSxVQUFVLEtBQUt2dUUsRUFBRTZ2RSxPQUFPLEtBQUs3dkUsRUFBRTRzRixhQUFhLEtBQUs1c0YsRUFBRThxRixjQUFjLEtBQUs5cUYsRUFBRWd3RSxjQUFjLEtBQUtod0UsRUFBRXNxRixhQUFhLEtBQUt0cUYsRUFBRXV1RSxVQUFVLEtBQUt2dUUsRUFBRXl0RixZQUFZLElBQUksQ0FBQyxTQUFTd08sR0FBR2o4RixHQUFHLE9BQU8sSUFBSUEsRUFBRStrQixLQUFLLElBQUkva0IsRUFBRStrQixLQUFLLElBQUkva0IsRUFBRStrQixHQUFHLENBQ25hLFNBQVNtM0UsR0FBR2w4RixHQUFHQSxFQUFFLE9BQU8sQ0FBQyxLQUFLLE9BQU9BLEVBQUV1ZCxTQUFTLENBQUMsR0FBRyxPQUFPdmQsRUFBRTZ2RSxRQUFRb3NCLEdBQUdqOEYsRUFBRTZ2RSxRQUFRLE9BQU8sS0FBSzd2RSxFQUFFQSxFQUFFNnZFLE1BQU0sQ0FBMkIsSUFBMUI3dkUsRUFBRXVkLFFBQVFzeUQsT0FBTzd2RSxFQUFFNnZFLE9BQVc3dkUsRUFBRUEsRUFBRXVkLFFBQVEsSUFBSXZkLEVBQUUra0IsS0FBSyxJQUFJL2tCLEVBQUUra0IsS0FBSyxLQUFLL2tCLEVBQUUra0IsS0FBSyxDQUFDLEdBQVcsRUFBUi9rQixFQUFFOHZFLE1BQVEsU0FBUzl2RSxFQUFFLEdBQUcsT0FBT0EsRUFBRW9LLE9BQU8sSUFBSXBLLEVBQUUra0IsSUFBSSxTQUFTL2tCLEVBQU9BLEVBQUVvSyxNQUFNeWxFLE9BQU83dkUsRUFBRUEsRUFBRUEsRUFBRW9LLEtBQUssQ0FBQyxLQUFhLEVBQVJwSyxFQUFFOHZFLE9BQVMsT0FBTzl2RSxFQUFFdXVFLFNBQVMsQ0FBQyxDQUN6VCxTQUFTNHRCLEdBQUduOEYsRUFBRUMsRUFBRW9nQixHQUFHLElBQUk1UCxFQUFFelEsRUFBRStrQixJQUFJLEdBQUcsSUFBSXRVLEdBQUcsSUFBSUEsRUFBRXpRLEVBQUVBLEVBQUV1dUUsVUFBVXR1RSxFQUFFLElBQUlvZ0IsRUFBRTJXLFNBQVMzVyxFQUFFNHRELFdBQVd0bUUsYUFBYTNILEVBQUVDLEdBQUdvZ0IsRUFBRTFZLGFBQWEzSCxFQUFFQyxJQUFJLElBQUlvZ0IsRUFBRTJXLFVBQVUvMkIsRUFBRW9nQixFQUFFNHRELFlBQWF0bUUsYUFBYTNILEVBQUVxZ0IsSUFBS3BnQixFQUFFb2dCLEdBQUkrTCxZQUFZcHNCLEdBQTRCLE9BQXhCcWdCLEVBQUVBLEVBQUUrN0Usc0JBQTBDLE9BQU9uOEYsRUFBRTQ2RixVQUFVNTZGLEVBQUU0NkYsUUFBUTVVLFVBQVUsR0FBRyxJQUFJeDFFLEdBQWMsUUFBVnpRLEVBQUVBLEVBQUVvSyxPQUFnQixJQUFJK3hGLEdBQUduOEYsRUFBRUMsRUFBRW9nQixHQUFHcmdCLEVBQUVBLEVBQUV1ZCxRQUFRLE9BQU92ZCxHQUFHbThGLEdBQUduOEYsRUFBRUMsRUFBRW9nQixHQUFHcmdCLEVBQUVBLEVBQUV1ZCxPQUFPLENBQzFYLFNBQVM4K0UsR0FBR3I4RixFQUFFQyxFQUFFb2dCLEdBQUcsSUFBSTVQLEVBQUV6USxFQUFFK2tCLElBQUksR0FBRyxJQUFJdFUsR0FBRyxJQUFJQSxFQUFFelEsRUFBRUEsRUFBRXV1RSxVQUFVdHVFLEVBQUVvZ0IsRUFBRTFZLGFBQWEzSCxFQUFFQyxHQUFHb2dCLEVBQUUrTCxZQUFZcHNCLFFBQVEsR0FBRyxJQUFJeVEsR0FBYyxRQUFWelEsRUFBRUEsRUFBRW9LLE9BQWdCLElBQUlpeUYsR0FBR3I4RixFQUFFQyxFQUFFb2dCLEdBQUdyZ0IsRUFBRUEsRUFBRXVkLFFBQVEsT0FBT3ZkLEdBQUdxOEYsR0FBR3I4RixFQUFFQyxFQUFFb2dCLEdBQUdyZ0IsRUFBRUEsRUFBRXVkLE9BQU8sQ0FBQyxJQUFJKytFLEdBQUUsS0FBS0MsSUFBRyxFQUFHLFNBQVNDLEdBQUd4OEYsRUFBRUMsRUFBRW9nQixHQUFHLElBQUlBLEVBQUVBLEVBQUVqVyxNQUFNLE9BQU9pVyxHQUFHbzhFLEdBQUd6OEYsRUFBRUMsRUFBRW9nQixHQUFHQSxFQUFFQSxFQUFFOUMsT0FBTyxDQUNuUixTQUFTay9FLEdBQUd6OEYsRUFBRUMsRUFBRW9nQixHQUFHLEdBQUd3eEQsSUFBSSxtQkFBb0JBLEdBQUc2cUIscUJBQXFCLElBQUk3cUIsR0FBRzZxQixxQkFBcUI5cUIsR0FBR3Z4RCxFQUFFLENBQUMsTUFBTXltRCxHQUFHLENBQUMsT0FBT3ptRCxFQUFFMEUsS0FBSyxLQUFLLEVBQUV1MkUsSUFBR0csR0FBR3A3RSxFQUFFcGdCLEdBQUcsS0FBSyxFQUFFLElBQUl3USxFQUFFNnJGLEdBQUV6L0YsRUFBRTAvRixHQUFHRCxHQUFFLEtBQUtFLEdBQUd4OEYsRUFBRUMsRUFBRW9nQixHQUFPazhFLEdBQUcxL0YsRUFBRSxRQUFUeS9GLEdBQUU3ckYsS0FBa0I4ckYsSUFBSXY4RixFQUFFczhGLEdBQUVqOEUsRUFBRUEsRUFBRWt1RCxVQUFVLElBQUl2dUUsRUFBRWczQixTQUFTaDNCLEVBQUVpdUUsV0FBV3pFLFlBQVlucEQsR0FBR3JnQixFQUFFd3BFLFlBQVlucEQsSUFBSWk4RSxHQUFFOXlCLFlBQVlucEQsRUFBRWt1RCxZQUFZLE1BQU0sS0FBSyxHQUFHLE9BQU8rdEIsS0FBSUMsSUFBSXY4RixFQUFFczhGLEdBQUVqOEUsRUFBRUEsRUFBRWt1RCxVQUFVLElBQUl2dUUsRUFBRWczQixTQUFTZ3dELEdBQUdobkYsRUFBRWl1RSxXQUFXNXRELEdBQUcsSUFBSXJnQixFQUFFZzNCLFVBQVVnd0QsR0FBR2huRixFQUFFcWdCLEdBQUdtMUQsR0FBR3gxRSxJQUFJZ25GLEdBQUdzVixHQUFFajhFLEVBQUVrdUQsWUFBWSxNQUFNLEtBQUssRUFBRTk5RCxFQUFFNnJGLEdBQUV6L0YsRUFBRTAvRixHQUFHRCxHQUFFajhFLEVBQUVrdUQsVUFBVTBHLGNBQWNzbkIsSUFBRyxFQUNsZkMsR0FBR3g4RixFQUFFQyxFQUFFb2dCLEdBQUdpOEUsR0FBRTdyRixFQUFFOHJGLEdBQUcxL0YsRUFBRSxNQUFNLEtBQUssRUFBRSxLQUFLLEdBQUcsS0FBSyxHQUFHLEtBQUssR0FBRyxJQUFJeStGLElBQW9CLFFBQWhCN3FGLEVBQUU0UCxFQUFFb3RFLGNBQXNDLFFBQWZoOUUsRUFBRUEsRUFBRXNoRixZQUFzQixDQUFDbDFGLEVBQUU0VCxFQUFFQSxFQUFFbEgsS0FBSyxFQUFFLENBQUMsSUFBSXN6RCxFQUFFaGdFLEVBQUVnaEMsRUFBRWcvQixFQUFFdzFCLFFBQVF4MUIsRUFBRUEsRUFBRTkzQyxTQUFJLElBQVM4WSxJQUFXLEVBQUZnL0IsR0FBc0IsRUFBRkEsSUFBZjgrQixHQUFHdDdFLEVBQUVwZ0IsRUFBRTQ5QixHQUF5QmhoQyxFQUFFQSxFQUFFME0sSUFBSSxPQUFPMU0sSUFBSTRULEVBQUUsQ0FBQytyRixHQUFHeDhGLEVBQUVDLEVBQUVvZ0IsR0FBRyxNQUFNLEtBQUssRUFBRSxJQUFJaTdFLEtBQUlHLEdBQUdwN0UsRUFBRXBnQixHQUFpQixtQkFBZHdRLEVBQUU0UCxFQUFFa3VELFdBQWdDb3VCLHNCQUFzQixJQUFJbHNGLEVBQUVnVCxNQUFNcEQsRUFBRXlxRSxjQUFjcjZFLEVBQUV0SyxNQUFNa2EsRUFBRTJ2RCxjQUFjdi9ELEVBQUVrc0Ysc0JBQXNCLENBQUMsTUFBTTcxQixHQUFHNDBCLEdBQUVyN0UsRUFBRXBnQixFQUFFNm1FLEVBQUUsQ0FBQzAxQixHQUFHeDhGLEVBQUVDLEVBQUVvZ0IsR0FBRyxNQUFNLEtBQUssR0FBR204RSxHQUFHeDhGLEVBQUVDLEVBQUVvZ0IsR0FBRyxNQUFNLEtBQUssR0FBVSxFQUFQQSxFQUFFNlIsTUFBUW9wRSxJQUFHN3FGLEVBQUU2cUYsS0FBSSxPQUNoZmo3RSxFQUFFMnZELGNBQWN3c0IsR0FBR3g4RixFQUFFQyxFQUFFb2dCLEdBQUdpN0UsR0FBRTdxRixHQUFHK3JGLEdBQUd4OEYsRUFBRUMsRUFBRW9nQixHQUFHLE1BQU0sUUFBUW04RSxHQUFHeDhGLEVBQUVDLEVBQUVvZ0IsR0FBRyxDQUFDLFNBQVN1OEUsR0FBRzU4RixHQUFHLElBQUlDLEVBQUVELEVBQUV5dEYsWUFBWSxHQUFHLE9BQU94dEYsRUFBRSxDQUFDRCxFQUFFeXRGLFlBQVksS0FBSyxJQUFJcHRFLEVBQUVyZ0IsRUFBRXV1RSxVQUFVLE9BQU9sdUQsSUFBSUEsRUFBRXJnQixFQUFFdXVFLFVBQVUsSUFBSWd0QixJQUFJdDdGLEVBQUVqRCxTQUFRLFNBQVNpRCxHQUFHLElBQUl3USxFQUFFb3NGLEdBQUdobUcsS0FBSyxLQUFLbUosRUFBRUMsR0FBR29nQixFQUFFdGpCLElBQUlrRCxLQUFLb2dCLEVBQUVuakIsSUFBSStDLEdBQUdBLEVBQUU0bUYsS0FBS3AyRSxFQUFFQSxHQUFHLEdBQUUsQ0FBQyxDQUN6USxTQUFTcXNGLEdBQUc5OEYsRUFBRUMsR0FBRyxJQUFJb2dCLEVBQUVwZ0IsRUFBRW1xRixVQUFVLEdBQUcsT0FBTy9wRSxFQUFFLElBQUksSUFBSTVQLEVBQUUsRUFBRUEsRUFBRTRQLEVBQUU3ckIsT0FBT2ljLElBQUksQ0FBQyxJQUFJNVQsRUFBRXdqQixFQUFFNVAsR0FBRyxJQUFJLElBQUlvc0QsRUFBRTc4RCxFQUFFNjlCLEVBQUU1OUIsRUFBRTZtRSxFQUFFanBDLEVBQUU3OUIsRUFBRSxLQUFLLE9BQU84bUUsR0FBRyxDQUFDLE9BQU9BLEVBQUUvaEQsS0FBSyxLQUFLLEVBQUV1M0UsR0FBRXgxQixFQUFFeUgsVUFBVWd1QixJQUFHLEVBQUcsTUFBTXY4RixFQUFFLEtBQUssRUFBNEMsS0FBSyxFQUFFczhGLEdBQUV4MUIsRUFBRXlILFVBQVUwRyxjQUFjc25CLElBQUcsRUFBRyxNQUFNdjhGLEVBQUU4bUUsRUFBRUEsRUFBRStJLE1BQU0sQ0FBQyxHQUFHLE9BQU95c0IsR0FBRSxNQUFNaDVGLE1BQU10SyxFQUFFLE1BQU15akcsR0FBRzUvQixFQUFFaC9CLEVBQUVoaEMsR0FBR3kvRixHQUFFLEtBQUtDLElBQUcsRUFBRyxJQUFJN25HLEVBQUVtSSxFQUFFbytDLFVBQVUsT0FBT3ZtRCxJQUFJQSxFQUFFbTdFLE9BQU8sTUFBTWh6RSxFQUFFZ3pFLE9BQU8sSUFBSSxDQUFDLE1BQU1yMUUsR0FBR2toRyxHQUFFNytGLEVBQUVvRCxFQUFFekYsRUFBRSxDQUFDLENBQUMsR0FBa0IsTUFBZnlGLEVBQUUyNUYsYUFBbUIsSUFBSTM1RixFQUFFQSxFQUFFbUssTUFBTSxPQUFPbkssR0FBRzg4RixHQUFHOThGLEVBQUVELEdBQUdDLEVBQUVBLEVBQUVzZCxPQUFPLENBQ2plLFNBQVN3L0UsR0FBRy84RixFQUFFQyxHQUFHLElBQUlvZ0IsRUFBRXJnQixFQUFFaTdDLFVBQVV4cUMsRUFBRXpRLEVBQUU4dkUsTUFBTSxPQUFPOXZFLEVBQUUra0IsS0FBSyxLQUFLLEVBQUUsS0FBSyxHQUFHLEtBQUssR0FBRyxLQUFLLEdBQWlCLEdBQWQrM0UsR0FBRzc4RixFQUFFRCxHQUFHZzlGLEdBQUdoOUYsR0FBUSxFQUFGeVEsRUFBSSxDQUFDLElBQUlvckYsR0FBRyxFQUFFNzdGLEVBQUVBLEVBQUU2dkUsUUFBUWlzQixHQUFHLEVBQUU5N0YsRUFBRSxDQUFDLE1BQU1wSCxHQUFHOGlHLEdBQUUxN0YsRUFBRUEsRUFBRTZ2RSxPQUFPajNFLEVBQUUsQ0FBQyxJQUFJaWpHLEdBQUcsRUFBRTc3RixFQUFFQSxFQUFFNnZFLE9BQU8sQ0FBQyxNQUFNajNFLEdBQUc4aUcsR0FBRTE3RixFQUFFQSxFQUFFNnZFLE9BQU9qM0UsRUFBRSxDQUFDLENBQUMsTUFBTSxLQUFLLEVBQUVra0csR0FBRzc4RixFQUFFRCxHQUFHZzlGLEdBQUdoOUYsR0FBSyxJQUFGeVEsR0FBTyxPQUFPNFAsR0FBR283RSxHQUFHcDdFLEVBQUVBLEVBQUV3dkQsUUFBUSxNQUFNLEtBQUssRUFBZ0QsR0FBOUNpdEIsR0FBRzc4RixFQUFFRCxHQUFHZzlGLEdBQUdoOUYsR0FBSyxJQUFGeVEsR0FBTyxPQUFPNFAsR0FBR283RSxHQUFHcDdFLEVBQUVBLEVBQUV3dkQsUUFBbUIsR0FBUjd2RSxFQUFFOHZFLE1BQVMsQ0FBQyxJQUFJanpFLEVBQUVtRCxFQUFFdXVFLFVBQVUsSUFBSTVFLEdBQUc5c0UsRUFBRSxHQUFHLENBQUMsTUFBTWpFLEdBQUc4aUcsR0FBRTE3RixFQUFFQSxFQUFFNnZFLE9BQU9qM0UsRUFBRSxDQUFDLENBQUMsR0FBSyxFQUFGNlgsR0FBb0IsT0FBZDVULEVBQUVtRCxFQUFFdXVFLFdBQW1CLENBQUMsSUFBSTFSLEVBQUU3OEQsRUFBRThxRixjQUFjanRELEVBQUUsT0FBT3hkLEVBQUVBLEVBQUV5cUUsY0FBY2p1QixFQUFFaUssRUFBRTltRSxFQUFFekUsS0FBSzdHLEVBQUVzTCxFQUFFeXRGLFlBQ2plLEdBQW5CenRGLEVBQUV5dEYsWUFBWSxLQUFRLE9BQU8vNEYsRUFBRSxJQUFJLFVBQVVveUUsR0FBRyxVQUFVakssRUFBRXRoRSxNQUFNLE1BQU1zaEUsRUFBRW5tRSxNQUFNMnhFLEVBQUd4ckUsRUFBRWdnRSxHQUFHK1EsR0FBRzlHLEVBQUVqcEMsR0FBRyxJQUFJcmpDLEVBQUVvekUsR0FBRzlHLEVBQUVqSyxHQUFHLElBQUloL0IsRUFBRSxFQUFFQSxFQUFFbnBDLEVBQUVGLE9BQU9xcEMsR0FBRyxFQUFFLENBQUMsSUFBSXhrQyxFQUFFM0UsRUFBRW1wQyxHQUFHa3VELEVBQUVyM0YsRUFBRW1wQyxFQUFFLEdBQUcsVUFBVXhrQyxFQUFFdXpFLEdBQUcvdkUsRUFBRWt2RixHQUFHLDRCQUE0QjF5RixFQUFFZ3dFLEdBQUd4c0UsRUFBRWt2RixHQUFHLGFBQWExeUYsRUFBRXN3RSxHQUFHOXNFLEVBQUVrdkYsR0FBR2huQixFQUFHbG9FLEVBQUV4RCxFQUFFMHlGLEVBQUV2eEYsRUFBRSxDQUFDLE9BQU9zc0UsR0FBRyxJQUFLLFFBQVF3QixFQUFHenJFLEVBQUVnZ0UsR0FBRyxNQUFNLElBQUssV0FBV21NLEdBQUduc0UsRUFBRWdnRSxHQUFHLE1BQU0sSUFBSyxTQUFTLElBQUl0ckQsRUFBRTFVLEVBQUVvckUsY0FBY3d5QixZQUFZNTlGLEVBQUVvckUsY0FBY3d5QixjQUFjNTlCLEVBQUU2OUIsU0FBUyxJQUFJMU8sRUFBRW52QixFQUFFcGxFLE1BQU0sTUFBTXUwRixFQUFFcmpCLEdBQUc5ckUsSUFBSWdnRSxFQUFFNjlCLFNBQVMxTyxHQUFFLEdBQUl6NkUsTUFBTXNyRCxFQUFFNjlCLFdBQVcsTUFBTTc5QixFQUFFbUwsYUFBYVcsR0FBRzlyRSxJQUFJZ2dFLEVBQUU2OUIsU0FDbmY3OUIsRUFBRW1MLGNBQWEsR0FBSVcsR0FBRzlyRSxJQUFJZ2dFLEVBQUU2OUIsU0FBUzc5QixFQUFFNjlCLFNBQVMsR0FBRyxJQUFHLElBQUs3OUYsRUFBRXdxRixJQUFJeHFCLENBQUMsQ0FBQyxNQUFNamtFLEdBQUc4aUcsR0FBRTE3RixFQUFFQSxFQUFFNnZFLE9BQU9qM0UsRUFBRSxDQUFDLENBQUMsTUFBTSxLQUFLLEVBQWdCLEdBQWRra0csR0FBRzc4RixFQUFFRCxHQUFHZzlGLEdBQUdoOUYsR0FBUSxFQUFGeVEsRUFBSSxDQUFDLEdBQUcsT0FBT3pRLEVBQUV1dUUsVUFBVSxNQUFNanJFLE1BQU10SyxFQUFFLE1BQU02RCxFQUFFbUQsRUFBRXV1RSxVQUFVMVIsRUFBRTc4RCxFQUFFOHFGLGNBQWMsSUFBSWp1RixFQUFFZ3RFLFVBQVVoTixDQUFDLENBQUMsTUFBTWprRSxHQUFHOGlHLEdBQUUxN0YsRUFBRUEsRUFBRTZ2RSxPQUFPajNFLEVBQUUsQ0FBQyxDQUFDLE1BQU0sS0FBSyxFQUFnQixHQUFka2tHLEdBQUc3OEYsRUFBRUQsR0FBR2c5RixHQUFHaDlGLEdBQVEsRUFBRnlRLEdBQUssT0FBTzRQLEdBQUdBLEVBQUUydkQsY0FBY2dGLGFBQWEsSUFBSVEsR0FBR3YxRSxFQUFFZzFFLGNBQWMsQ0FBQyxNQUFNcjhFLEdBQUc4aUcsR0FBRTE3RixFQUFFQSxFQUFFNnZFLE9BQU9qM0UsRUFBRSxDQUFDLE1BQU0sS0FBSyxFQUc0RyxRQUFRa2tHLEdBQUc3OEYsRUFDbmZELEdBQUdnOUYsR0FBR2g5RixTQUo0WSxLQUFLLEdBQUc4OEYsR0FBRzc4RixFQUFFRCxHQUFHZzlGLEdBQUdoOUYsR0FBcUIsTUFBbEJuRCxFQUFFbUQsRUFBRW9LLE9BQVEwbEUsUUFBYWpULEVBQUUsT0FBT2hnRSxFQUFFbXpFLGNBQWNuekUsRUFBRTB4RSxVQUFVMHVCLFNBQVNwZ0MsR0FBR0EsR0FDbGYsT0FBT2hnRSxFQUFFbytDLFdBQVcsT0FBT3ArQyxFQUFFbytDLFVBQVUrMEIsZ0JBQWdCa3RCLEdBQUdwc0IsT0FBUSxFQUFGcmdFLEdBQUttc0YsR0FBRzU4RixHQUFHLE1BQU0sS0FBSyxHQUFzRixHQUFuRjNHLEVBQUUsT0FBT2duQixHQUFHLE9BQU9BLEVBQUUydkQsY0FBcUIsRUFBUGh3RSxFQUFFa3lCLE1BQVFvcEUsSUFBRzlnRyxFQUFFOGdHLEtBQUlqaUcsRUFBRXlqRyxHQUFHNzhGLEVBQUVELEdBQUdzN0YsR0FBRTlnRyxHQUFHc2lHLEdBQUc3OEYsRUFBRUQsR0FBR2c5RixHQUFHaDlGLEdBQVEsS0FBRnlRLEVBQU8sQ0FBMEIsR0FBekJqVyxFQUFFLE9BQU93RixFQUFFZ3dFLGVBQWtCaHdFLEVBQUV1dUUsVUFBVTB1QixTQUFTemlHLEtBQUtuQixHQUFlLEVBQVAyRyxFQUFFa3lCLEtBQVEsSUFBSXNwRSxHQUFFeDdGLEVBQUUzRyxFQUFFMkcsRUFBRW9LLE1BQU0sT0FBTy9RLEdBQUcsQ0FBQyxJQUFJMHlGLEVBQUV5UCxHQUFFbmlHLEVBQUUsT0FBT21pRyxJQUFHLENBQWUsT0FBVnhQLEdBQUp6NkUsRUFBRWlxRixJQUFNcHhGLE1BQWFtSCxFQUFFd1QsS0FBSyxLQUFLLEVBQUUsS0FBSyxHQUFHLEtBQUssR0FBRyxLQUFLLEdBQUc4MkUsR0FBRyxFQUFFdHFGLEVBQUVBLEVBQUVzK0QsUUFBUSxNQUFNLEtBQUssRUFBRTRyQixHQUFHbHFGLEVBQUVBLEVBQUVzK0QsUUFBUSxJQUFJOTJFLEVBQUV3WSxFQUFFZzlELFVBQVUsR0FBRyxtQkFBb0J4MUUsRUFBRTRqRyxxQkFBcUIsQ0FBQ2xzRixFQUFFYyxFQUFFOE8sRUFBRTlPLEVBQUVzK0QsT0FBTyxJQUFJNXZFLEVBQUV3USxFQUFFMVgsRUFBRTBxQixNQUNwZnhqQixFQUFFNnFGLGNBQWMveEYsRUFBRW9OLE1BQU1sRyxFQUFFK3ZFLGNBQWNqM0UsRUFBRTRqRyxzQkFBc0IsQ0FBQyxNQUFNL2pHLEdBQUc4aUcsR0FBRWpyRixFQUFFNFAsRUFBRXpuQixFQUFFLENBQUMsQ0FBQyxNQUFNLEtBQUssRUFBRTZpRyxHQUFHbHFGLEVBQUVBLEVBQUVzK0QsUUFBUSxNQUFNLEtBQUssR0FBRyxHQUFHLE9BQU90K0QsRUFBRXkrRCxjQUFjLENBQUNtdEIsR0FBR3BSLEdBQUcsUUFBUSxFQUFFLE9BQU9DLEdBQUdBLEVBQUVuYyxPQUFPdCtELEVBQUVpcUYsR0FBRXhQLEdBQUdtUixHQUFHcFIsRUFBRSxDQUFDMXlGLEVBQUVBLEVBQUVra0IsT0FBTyxDQUFDdmQsRUFBRSxJQUFJM0csRUFBRSxLQUFLMHlGLEVBQUUvckYsSUFBSSxDQUFDLEdBQUcsSUFBSStyRixFQUFFaG5FLEtBQUssR0FBRyxPQUFPMXJCLEVBQUUsQ0FBQ0EsRUFBRTB5RixFQUFFLElBQUlsdkYsRUFBRWt2RixFQUFFeGQsVUFBVS96RSxFQUFhLG1CQUFWcWlFLEVBQUVoZ0UsRUFBRWd3RSxPQUE0QkMsWUFBWWpRLEVBQUVpUSxZQUFZLFVBQVUsT0FBTyxhQUFhalEsRUFBRXhFLFFBQVEsUUFBU3lPLEVBQUVpbEIsRUFBRXhkLFVBQWtDMXdDLEVBQUUsT0FBMUJucEMsRUFBRXEzRixFQUFFakIsY0FBY2plLFFBQThCbjRFLEVBQUV1RSxlQUFlLFdBQVd2RSxFQUFFMmpFLFFBQVEsS0FBS3lPLEVBQUUrRixNQUFNeFUsUUFDemZzVSxHQUFHLFVBQVU5dUMsR0FBRyxDQUFDLE1BQU1qbEMsR0FBRzhpRyxHQUFFMTdGLEVBQUVBLEVBQUU2dkUsT0FBT2ozRSxFQUFFLENBQUMsT0FBTyxHQUFHLElBQUltekYsRUFBRWhuRSxLQUFLLEdBQUcsT0FBTzFyQixFQUFFLElBQUkweUYsRUFBRXhkLFVBQVUxRSxVQUFVcnZFLEVBQUUsR0FBR3V4RixFQUFFakIsYUFBYSxDQUFDLE1BQU1seUYsR0FBRzhpRyxHQUFFMTdGLEVBQUVBLEVBQUU2dkUsT0FBT2ozRSxFQUFFLE9BQU8sSUFBSSxLQUFLbXpGLEVBQUVobkUsS0FBSyxLQUFLZ25FLEVBQUVobkUsS0FBSyxPQUFPZ25FLEVBQUUvYixlQUFlK2IsSUFBSS9yRixJQUFJLE9BQU8rckYsRUFBRTNoRixNQUFNLENBQUMyaEYsRUFBRTNoRixNQUFNeWxFLE9BQU9rYyxFQUFFQSxFQUFFQSxFQUFFM2hGLE1BQU0sUUFBUSxDQUFDLEdBQUcyaEYsSUFBSS9yRixFQUFFLE1BQU1BLEVBQUUsS0FBSyxPQUFPK3JGLEVBQUV4dUUsU0FBUyxDQUFDLEdBQUcsT0FBT3d1RSxFQUFFbGMsUUFBUWtjLEVBQUVsYyxTQUFTN3ZFLEVBQUUsTUFBTUEsRUFBRTNHLElBQUkweUYsSUFBSTF5RixFQUFFLE1BQU0weUYsRUFBRUEsRUFBRWxjLE1BQU0sQ0FBQ3gyRSxJQUFJMHlGLElBQUkxeUYsRUFBRSxNQUFNMHlGLEVBQUV4dUUsUUFBUXN5RCxPQUFPa2MsRUFBRWxjLE9BQU9rYyxFQUFFQSxFQUFFeHVFLE9BQU8sQ0FBQyxDQUFDLE1BQU0sS0FBSyxHQUFHdS9FLEdBQUc3OEYsRUFBRUQsR0FBR2c5RixHQUFHaDlGLEdBQUssRUFBRnlRLEdBQUttc0YsR0FBRzU4RixHQUFTLEtBQUssSUFDdGQsQ0FBQyxTQUFTZzlGLEdBQUdoOUYsR0FBRyxJQUFJQyxFQUFFRCxFQUFFOHZFLE1BQU0sR0FBSyxFQUFGN3ZFLEVBQUksQ0FBQyxJQUFJRCxFQUFFLENBQUMsSUFBSSxJQUFJcWdCLEVBQUVyZ0IsRUFBRTZ2RSxPQUFPLE9BQU94dkQsR0FBRyxDQUFDLEdBQUc0N0UsR0FBRzU3RSxHQUFHLENBQUMsSUFBSTVQLEVBQUU0UCxFQUFFLE1BQU1yZ0IsQ0FBQyxDQUFDcWdCLEVBQUVBLEVBQUV3dkQsTUFBTSxDQUFDLE1BQU12c0UsTUFBTXRLLEVBQUUsS0FBTSxDQUFDLE9BQU95WCxFQUFFc1UsS0FBSyxLQUFLLEVBQUUsSUFBSWxvQixFQUFFNFQsRUFBRTg5RCxVQUFrQixHQUFSOTlELEVBQUVxL0QsUUFBV25HLEdBQUc5c0UsRUFBRSxJQUFJNFQsRUFBRXEvRCxRQUFRLElBQWdCdXNCLEdBQUdyOEYsRUFBVGs4RixHQUFHbDhGLEdBQVVuRCxHQUFHLE1BQU0sS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFJZ2hDLEVBQUVwdEIsRUFBRTg5RCxVQUFVMEcsY0FBc0JrbkIsR0FBR244RixFQUFUazhGLEdBQUdsOEYsR0FBVTY5QixHQUFHLE1BQU0sUUFBUSxNQUFNdjZCLE1BQU10SyxFQUFFLE1BQU8sQ0FBQyxNQUFNdEUsR0FBR2duRyxHQUFFMTdGLEVBQUVBLEVBQUU2dkUsT0FBT243RSxFQUFFLENBQUNzTCxFQUFFOHZFLFFBQVEsQ0FBQyxDQUFHLEtBQUY3dkUsSUFBU0QsRUFBRTh2RSxRQUFRLEtBQUssQ0FBQyxTQUFTc3RCLEdBQUdwOUYsRUFBRUMsRUFBRW9nQixHQUFHbTdFLEdBQUV4N0YsRUFBRXE5RixHQUFHcjlGLEVBQUVDLEVBQUVvZ0IsRUFBRSxDQUN2YixTQUFTZzlFLEdBQUdyOUYsRUFBRUMsRUFBRW9nQixHQUFHLElBQUksSUFBSTVQLEtBQWMsRUFBUHpRLEVBQUVreUIsTUFBUSxPQUFPc3BFLElBQUcsQ0FBQyxJQUFJMytGLEVBQUUyK0YsR0FBRTMrQixFQUFFaGdFLEVBQUV1TixNQUFNLEdBQUcsS0FBS3ZOLEVBQUVrb0IsS0FBS3RVLEVBQUUsQ0FBQyxJQUFJb3RCLEVBQUUsT0FBT2hoQyxFQUFFbXpFLGVBQWVxckIsR0FBRyxJQUFJeDlELEVBQUUsQ0FBQyxJQUFJaXBDLEVBQUVqcUUsRUFBRW8rQyxVQUFVdm1ELEVBQUUsT0FBT295RSxHQUFHLE9BQU9BLEVBQUVrSixlQUFlc3JCLEdBQUV4MEIsRUFBRXUwQixHQUFHLElBQUk3Z0csRUFBRThnRyxHQUFPLEdBQUxELEdBQUd4OUQsR0FBTXk5RCxHQUFFNW1HLEtBQUs4RixFQUFFLElBQUlnaEcsR0FBRTMrRixFQUFFLE9BQU8yK0YsSUFBTzltRyxHQUFKbXBDLEVBQUUyOUQsSUFBTXB4RixNQUFNLEtBQUt5ekIsRUFBRTlZLEtBQUssT0FBTzhZLEVBQUVteUMsY0FBY3N0QixHQUFHemdHLEdBQUcsT0FBT25JLEdBQUdBLEVBQUVtN0UsT0FBT2h5QyxFQUFFMjlELEdBQUU5bUcsR0FBRzRvRyxHQUFHemdHLEdBQUcsS0FBSyxPQUFPZ2dFLEdBQUcyK0IsR0FBRTMrQixFQUFFd2dDLEdBQUd4Z0MsRUFBRTU4RCxFQUFFb2dCLEdBQUd3OEMsRUFBRUEsRUFBRXQvQyxRQUFRaStFLEdBQUUzK0YsRUFBRXcrRixHQUFHdjBCLEVBQUV3MEIsR0FBRTlnRyxDQUFDLENBQUMraUcsR0FBR3Y5RixFQUFNLE1BQTBCLEtBQWZuRCxFQUFFKzhGLGNBQW9CLE9BQU8vOEIsR0FBR0EsRUFBRWdULE9BQU9oekUsRUFBRTIrRixHQUFFMytCLEdBQUcwZ0MsR0FBR3Y5RixFQUFNLENBQUMsQ0FDdmMsU0FBU3U5RixHQUFHdjlGLEdBQUcsS0FBSyxPQUFPdzdGLElBQUcsQ0FBQyxJQUFJdjdGLEVBQUV1N0YsR0FBRSxHQUFnQixLQUFSdjdGLEVBQUU2dkUsTUFBWSxDQUFDLElBQUl6dkQsRUFBRXBnQixFQUFFZzdDLFVBQVUsSUFBSSxHQUFnQixLQUFSaDdDLEVBQUU2dkUsTUFBWSxPQUFPN3ZFLEVBQUU4a0IsS0FBSyxLQUFLLEVBQUUsS0FBSyxHQUFHLEtBQUssR0FBR3UyRSxJQUFHUSxHQUFHLEVBQUU3N0YsR0FBRyxNQUFNLEtBQUssRUFBRSxJQUFJd1EsRUFBRXhRLEVBQUVzdUUsVUFBVSxHQUFXLEVBQVJ0dUUsRUFBRTZ2RSxRQUFVd3JCLEdBQUUsR0FBRyxPQUFPajdFLEVBQUU1UCxFQUFFdzRCLHdCQUF3QixDQUFDLElBQUlwc0MsRUFBRW9ELEVBQUVpakUsY0FBY2pqRSxFQUFFMUUsS0FBSzhrQixFQUFFeXFFLGNBQWNnSyxHQUFHNzBGLEVBQUUxRSxLQUFLOGtCLEVBQUV5cUUsZUFBZXI2RSxFQUFFaTFCLG1CQUFtQjdvQyxFQUFFd2pCLEVBQUUydkQsY0FBY3YvRCxFQUFFK3NGLG9DQUFvQyxDQUFDLElBQUkzZ0MsRUFBRTU4RCxFQUFFd3RGLFlBQVksT0FBTzV3QixHQUFHNnhCLEdBQUd6dUYsRUFBRTQ4RCxFQUFFcHNELEdBQUcsTUFBTSxLQUFLLEVBQUUsSUFBSW90QixFQUFFNTlCLEVBQUV3dEYsWUFBWSxHQUFHLE9BQU81dkQsRUFBRSxDQUFRLEdBQVB4ZCxFQUFFLEtBQVEsT0FBT3BnQixFQUFFbUssTUFBTSxPQUFPbkssRUFBRW1LLE1BQU0yYSxLQUFLLEtBQUssRUFDdmYsS0FBSyxFQUFFMUUsRUFBRXBnQixFQUFFbUssTUFBTW1rRSxVQUFVbWdCLEdBQUd6dUYsRUFBRTQ5QixFQUFFeGQsRUFBRSxDQUFDLE1BQU0sS0FBSyxFQUFFLElBQUl5bUQsRUFBRTdtRSxFQUFFc3VFLFVBQVUsR0FBRyxPQUFPbHVELEdBQVcsRUFBUnBnQixFQUFFNnZFLE1BQVEsQ0FBQ3p2RCxFQUFFeW1ELEVBQUUsSUFBSXB5RSxFQUFFdUwsRUFBRTZxRixjQUFjLE9BQU83cUYsRUFBRTFFLE1BQU0sSUFBSyxTQUFTLElBQUssUUFBUSxJQUFLLFNBQVMsSUFBSyxXQUFXN0csRUFBRXFtRyxXQUFXMTZFLEVBQUVraUUsUUFBUSxNQUFNLElBQUssTUFBTTd0RixFQUFFK29HLE1BQU1wOUUsRUFBRW85RSxJQUFJL29HLEVBQUUrb0csS0FBSyxDQUFDLE1BQU0sS0FBSyxFQUFRLEtBQUssRUFBUSxLQUFLLEdBQXlKLEtBQUssR0FBRyxLQUFLLEdBQUcsS0FBSyxHQUFHLEtBQUssR0FBRyxLQUFLLEdBQUcsS0FBSyxHQUFHLE1BQWhNLEtBQUssR0FBRyxHQUFHLE9BQU94OUYsRUFBRSt2RSxjQUFjLENBQUMsSUFBSXgxRSxFQUFFeUYsRUFBRWc3QyxVQUFVLEdBQUcsT0FBT3pnRCxFQUFFLENBQUMsSUFBSW5CLEVBQUVtQixFQUFFdzFFLGNBQWMsR0FBRyxPQUFPMzJFLEVBQUUsQ0FBQyxJQUFJMHlGLEVBQUUxeUYsRUFBRTQyRSxXQUFXLE9BQU84YixHQUFHdlcsR0FBR3VXLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFDNWMsUUFBUSxNQUFNem9GLE1BQU10SyxFQUFFLE1BQU9zaUcsSUFBVyxJQUFScjdGLEVBQUU2dkUsT0FBV2lzQixHQUFHOTdGLEVBQUUsQ0FBQyxNQUFNc1IsR0FBR21xRixHQUFFejdGLEVBQUVBLEVBQUU0dkUsT0FBT3QrRCxFQUFFLENBQUMsQ0FBQyxHQUFHdFIsSUFBSUQsRUFBRSxDQUFDdzdGLEdBQUUsS0FBSyxLQUFLLENBQWEsR0FBRyxRQUFmbjdFLEVBQUVwZ0IsRUFBRXNkLFNBQW9CLENBQUM4QyxFQUFFd3ZELE9BQU81dkUsRUFBRTR2RSxPQUFPMnJCLEdBQUVuN0UsRUFBRSxLQUFLLENBQUNtN0UsR0FBRXY3RixFQUFFNHZFLE1BQU0sQ0FBQyxDQUFDLFNBQVNzdEIsR0FBR245RixHQUFHLEtBQUssT0FBT3c3RixJQUFHLENBQUMsSUFBSXY3RixFQUFFdTdGLEdBQUUsR0FBR3Y3RixJQUFJRCxFQUFFLENBQUN3N0YsR0FBRSxLQUFLLEtBQUssQ0FBQyxJQUFJbjdFLEVBQUVwZ0IsRUFBRXNkLFFBQVEsR0FBRyxPQUFPOEMsRUFBRSxDQUFDQSxFQUFFd3ZELE9BQU81dkUsRUFBRTR2RSxPQUFPMnJCLEdBQUVuN0UsRUFBRSxLQUFLLENBQUNtN0UsR0FBRXY3RixFQUFFNHZFLE1BQU0sQ0FBQyxDQUN2UyxTQUFTeXRCLEdBQUd0OUYsR0FBRyxLQUFLLE9BQU93N0YsSUFBRyxDQUFDLElBQUl2N0YsRUFBRXU3RixHQUFFLElBQUksT0FBT3Y3RixFQUFFOGtCLEtBQUssS0FBSyxFQUFFLEtBQUssR0FBRyxLQUFLLEdBQUcsSUFBSTFFLEVBQUVwZ0IsRUFBRTR2RSxPQUFPLElBQUlpc0IsR0FBRyxFQUFFNzdGLEVBQUUsQ0FBQyxNQUFNdkwsR0FBR2duRyxHQUFFejdGLEVBQUVvZ0IsRUFBRTNyQixFQUFFLENBQUMsTUFBTSxLQUFLLEVBQUUsSUFBSStiLEVBQUV4USxFQUFFc3VFLFVBQVUsR0FBRyxtQkFBb0I5OUQsRUFBRXc0QixrQkFBa0IsQ0FBQyxJQUFJcHNDLEVBQUVvRCxFQUFFNHZFLE9BQU8sSUFBSXAvRCxFQUFFdzRCLG1CQUFtQixDQUFDLE1BQU12MEMsR0FBR2duRyxHQUFFejdGLEVBQUVwRCxFQUFFbkksRUFBRSxDQUFDLENBQUMsSUFBSW1vRSxFQUFFNThELEVBQUU0dkUsT0FBTyxJQUFJa3NCLEdBQUc5N0YsRUFBRSxDQUFDLE1BQU12TCxHQUFHZ25HLEdBQUV6N0YsRUFBRTQ4RCxFQUFFbm9FLEVBQUUsQ0FBQyxNQUFNLEtBQUssRUFBRSxJQUFJbXBDLEVBQUU1OUIsRUFBRTR2RSxPQUFPLElBQUlrc0IsR0FBRzk3RixFQUFFLENBQUMsTUFBTXZMLEdBQUdnbkcsR0FBRXo3RixFQUFFNDlCLEVBQUVucEMsRUFBRSxFQUFFLENBQUMsTUFBTUEsR0FBR2duRyxHQUFFejdGLEVBQUVBLEVBQUU0dkUsT0FBT243RSxFQUFFLENBQUMsR0FBR3VMLElBQUlELEVBQUUsQ0FBQ3c3RixHQUFFLEtBQUssS0FBSyxDQUFDLElBQUkxMEIsRUFBRTdtRSxFQUFFc2QsUUFBUSxHQUFHLE9BQU91cEQsRUFBRSxDQUFDQSxFQUFFK0ksT0FBTzV2RSxFQUFFNHZFLE9BQU8yckIsR0FBRTEwQixFQUFFLEtBQUssQ0FBQzAwQixHQUFFdjdGLEVBQUU0dkUsTUFBTSxDQUFDLENBQzdkLElBd0JrTjZ0QixHQXhCOU1DLEdBQUdqL0YsS0FBS3U2RCxLQUFLMmtDLEdBQUd0NEIsRUFBR3FxQix1QkFBdUJrTyxHQUFHdjRCLEVBQUc2eEIsa0JBQWtCMkcsR0FBR3g0QixFQUFHb1Esd0JBQXdCMlksR0FBRSxFQUFFd0QsR0FBRSxLQUFLa00sR0FBRSxLQUFLQyxHQUFFLEVBQUUvRixHQUFHLEVBQUVELEdBQUd0USxHQUFHLEdBQUd1VCxHQUFFLEVBQUVnRCxHQUFHLEtBQUt4UCxHQUFHLEVBQUV5UCxHQUFHLEVBQUVDLEdBQUcsRUFBRUMsR0FBRyxLQUFLQyxHQUFHLEtBQUtuQixHQUFHLEVBQUVoQyxHQUFHbjlGLElBQVN1Z0csR0FBRyxLQUFLaEksSUFBRyxFQUFHQyxHQUFHLEtBQUtJLEdBQUcsS0FBSzRILElBQUcsRUFBR0MsR0FBRyxLQUFLQyxHQUFHLEVBQUVDLEdBQUcsRUFBRUMsR0FBRyxLQUFLQyxJQUFJLEVBQUVDLEdBQUcsRUFBRSxTQUFTcEwsS0FBSSxPQUFjLEVBQUZwRixHQUFLdmQsTUFBSyxJQUFJOHRCLEdBQUdBLEdBQUdBLEdBQUc5dEIsSUFBRyxDQUNoVSxTQUFTd2lCLEdBQUd0ekYsR0FBRyxPQUFlLEVBQVBBLEVBQUVreUIsS0FBMkIsRUFBRm04RCxJQUFNLElBQUkyUCxHQUFTQSxJQUFHQSxHQUFLLE9BQU85UyxHQUFHclYsWUFBa0IsSUFBSWdwQixLQUFLQSxHQUFHOXJCLE1BQU04ckIsSUFBVSxLQUFQNytGLEVBQUVvekUsSUFBa0JwekUsRUFBaUJBLE9BQUUsS0FBakJBLEVBQUU4OUIsT0FBTzJDLE9BQW1CLEdBQUcwMUMsR0FBR24yRSxFQUFFekUsTUFBaEosQ0FBOEosQ0FBQyxTQUFTNDJGLEdBQUdueUYsRUFBRUMsRUFBRW9nQixFQUFFNVAsR0FBRyxHQUFHLEdBQUdpdUYsR0FBRyxNQUFNQSxHQUFHLEVBQUVDLEdBQUcsS0FBS3I3RixNQUFNdEssRUFBRSxNQUFNaTZFLEdBQUdqekUsRUFBRXFnQixFQUFFNVAsR0FBYSxFQUFGNDlFLElBQU1ydUYsSUFBSTZ4RixLQUFFN3hGLElBQUk2eEYsT0FBVyxFQUFGeEQsTUFBTzZQLElBQUk3OUUsR0FBRyxJQUFJNDZFLElBQUc2RCxHQUFHOStGLEVBQUVnK0YsS0FBSWUsR0FBRy8rRixFQUFFeVEsR0FBRyxJQUFJNFAsR0FBRyxJQUFJZ3VFLE1BQWUsRUFBUHB1RixFQUFFaXlCLFFBQVVncEUsR0FBR3BxQixLQUFJLElBQUkrWCxJQUFJRyxNQUFLLENBQzFZLFNBQVMrVixHQUFHLytGLEVBQUVDLEdBQUcsSUFBSW9nQixFQUFFcmdCLEVBQUVnL0YsY0EzTXpCLFNBQVloL0YsRUFBRUMsR0FBRyxJQUFJLElBQUlvZ0IsRUFBRXJnQixFQUFFeXlFLGVBQWVoaUUsRUFBRXpRLEVBQUUweUUsWUFBWTcxRSxFQUFFbUQsRUFBRWkvRixnQkFBZ0JwaUMsRUFBRTc4RCxFQUFFd3lFLGFBQWEsRUFBRTNWLEdBQUcsQ0FBQyxJQUFJaC9CLEVBQUUsR0FBR2kwQyxHQUFHalYsR0FBR2lLLEVBQUUsR0FBR2pwQyxFQUFFbnBDLEVBQUVtSSxFQUFFZ2hDLElBQU8sSUFBSW5wQyxFQUFXb3lFLEVBQUV6bUQsS0FBU3ltRCxFQUFFcjJELEtBQUc1VCxFQUFFZ2hDLEdBQUdnMUMsR0FBRy9MLEVBQUU3bUUsSUFBUXZMLEdBQUd1TCxJQUFJRCxFQUFFay9GLGNBQWNwNEIsR0FBR2pLLElBQUlpSyxDQUFDLENBQUMsQ0EyTW5McTRCLENBQUduL0YsRUFBRUMsR0FBRyxJQUFJd1EsRUFBRThoRSxHQUFHdnlFLEVBQUVBLElBQUk2eEYsR0FBRW1NLEdBQUUsR0FBRyxHQUFHLElBQUl2dEYsRUFBRSxPQUFPNFAsR0FBR213RCxHQUFHbndELEdBQUdyZ0IsRUFBRWcvRixhQUFhLEtBQUtoL0YsRUFBRW8vRixpQkFBaUIsT0FBTyxHQUFHbi9GLEVBQUV3USxHQUFHQSxFQUFFelEsRUFBRW8vRixtQkFBbUJuL0YsRUFBRSxDQUFnQixHQUFmLE1BQU1vZ0IsR0FBR213RCxHQUFHbndELEdBQU0sSUFBSXBnQixFQUFFLElBQUlELEVBQUUra0IsSUE1SXNKLFNBQVkva0IsR0FBRzZvRixJQUFHLEVBQUdFLEdBQUcvb0YsRUFBRSxDQTRJNUtxL0YsQ0FBR0MsR0FBR3pvRyxLQUFLLEtBQUttSixJQUFJK29GLEdBQUd1VyxHQUFHem9HLEtBQUssS0FBS21KLElBQUkybUYsSUFBRyxhQUFrQixFQUFGMEgsS0FBTXJGLElBQUksSUFBRzNvRSxFQUFFLFNBQVMsQ0FBQyxPQUFPZ3pELEdBQUc1aUUsSUFBSSxLQUFLLEVBQUU0UCxFQUFFNndELEdBQUcsTUFBTSxLQUFLLEVBQUU3d0QsRUFBRSt3RCxHQUFHLE1BQU0sS0FBSyxHQUF3QyxRQUFRL3dELEVBQUVpeEQsU0FBcEMsS0FBSyxVQUFVanhELEVBQUVxeEQsR0FBc0JyeEQsRUFBRWsvRSxHQUFHbC9FLEVBQUVtL0UsR0FBRzNvRyxLQUFLLEtBQUttSixHQUFHLENBQUNBLEVBQUVvL0YsaUJBQWlCbi9GLEVBQUVELEVBQUVnL0YsYUFBYTMrRSxDQUFDLENBQUMsQ0FDN2MsU0FBU20vRSxHQUFHeC9GLEVBQUVDLEdBQWMsR0FBWDIrRixJQUFJLEVBQUVDLEdBQUcsRUFBWSxFQUFGeFEsR0FBSyxNQUFNL3FGLE1BQU10SyxFQUFFLE1BQU0sSUFBSXFuQixFQUFFcmdCLEVBQUVnL0YsYUFBYSxHQUFHUyxNQUFNei9GLEVBQUVnL0YsZUFBZTMrRSxFQUFFLE9BQU8sS0FBSyxJQUFJNVAsRUFBRThoRSxHQUFHdnlFLEVBQUVBLElBQUk2eEYsR0FBRW1NLEdBQUUsR0FBRyxHQUFHLElBQUl2dEYsRUFBRSxPQUFPLEtBQUssR0FBVSxHQUFGQSxHQUFZQSxFQUFFelEsRUFBRWsvRixjQUFlai9GLEVBQUVBLEVBQUV5L0YsR0FBRzEvRixFQUFFeVEsT0FBTyxDQUFDeFEsRUFBRXdRLEVBQUUsSUFBSTVULEVBQUV3eEYsR0FBRUEsSUFBRyxFQUFFLElBQUl4eEIsRUFBRThpQyxLQUFnRCxJQUF4QzlOLEtBQUk3eEYsR0FBR2crRixLQUFJLzlGLElBQUVxK0YsR0FBRyxLQUFLcEQsR0FBR3BxQixLQUFJLElBQUk4dUIsR0FBRzUvRixFQUFFQyxVQUFVNC9GLEtBQUssS0FBSyxDQUFDLE1BQU0vNEIsR0FBR2c1QixHQUFHOS9GLEVBQUU4bUUsRUFBRSxDQUFVeWxCLEtBQUtxUixHQUFHdmtGLFFBQVF3akQsRUFBRXd4QixHQUFFeHhGLEVBQUUsT0FBT2toRyxHQUFFOTlGLEVBQUUsR0FBRzR4RixHQUFFLEtBQUttTSxHQUFFLEVBQUUvOUYsRUFBRWc3RixHQUFFLENBQUMsR0FBRyxJQUFJaDdGLEVBQUUsQ0FBeUMsR0FBeEMsSUFBSUEsR0FBWSxLQUFScEQsRUFBRWkyRSxHQUFHOXlFLE1BQVd5USxFQUFFNVQsRUFBRW9ELEVBQUU4L0YsR0FBRy8vRixFQUFFbkQsSUFBUSxJQUFJb0QsRUFBRSxNQUFNb2dCLEVBQUU0OUUsR0FBRzJCLEdBQUc1L0YsRUFBRSxHQUFHOCtGLEdBQUc5K0YsRUFBRXlRLEdBQUdzdUYsR0FBRy8rRixFQUFFOHdFLE1BQUt6d0QsRUFBRSxHQUFHLElBQUlwZ0IsRUFBRTYrRixHQUFHOStGLEVBQUV5USxPQUNoZixDQUF1QixHQUF0QjVULEVBQUVtRCxFQUFFcVosUUFBUTRoQyxZQUFvQixHQUFGeHFDLEdBR25DLFNBQVl6USxHQUFHLElBQUksSUFBSUMsRUFBRUQsSUFBSSxDQUFDLEdBQVcsTUFBUkMsRUFBRTZ2RSxNQUFZLENBQUMsSUFBSXp2RCxFQUFFcGdCLEVBQUV3dEYsWUFBWSxHQUFHLE9BQU9wdEUsR0FBZSxRQUFYQSxFQUFFQSxFQUFFMnhFLFFBQWlCLElBQUksSUFBSXZoRixFQUFFLEVBQUVBLEVBQUU0UCxFQUFFN3JCLE9BQU9pYyxJQUFJLENBQUMsSUFBSTVULEVBQUV3akIsRUFBRTVQLEdBQUdvc0QsRUFBRWhnRSxFQUFFNjBGLFlBQVk3MEYsRUFBRUEsRUFBRXBGLE1BQU0sSUFBSSxJQUFJNm9GLEdBQUd6akIsSUFBSWhnRSxHQUFHLE9BQU0sQ0FBRSxDQUFDLE1BQU1naEMsR0FBRyxPQUFNLENBQUUsQ0FBQyxDQUFDLENBQVcsR0FBVnhkLEVBQUVwZ0IsRUFBRW1LLE1BQXdCLE1BQWZuSyxFQUFFMjVGLGNBQW9CLE9BQU92NUUsRUFBRUEsRUFBRXd2RCxPQUFPNXZFLEVBQUVBLEVBQUVvZ0IsTUFBTSxDQUFDLEdBQUdwZ0IsSUFBSUQsRUFBRSxNQUFNLEtBQUssT0FBT0MsRUFBRXNkLFNBQVMsQ0FBQyxHQUFHLE9BQU90ZCxFQUFFNHZFLFFBQVE1dkUsRUFBRTR2RSxTQUFTN3ZFLEVBQUUsT0FBTSxFQUFHQyxFQUFFQSxFQUFFNHZFLE1BQU0sQ0FBQzV2RSxFQUFFc2QsUUFBUXN5RCxPQUFPNXZFLEVBQUU0dkUsT0FBTzV2RSxFQUFFQSxFQUFFc2QsT0FBTyxDQUFDLENBQUMsT0FBTSxDQUFFLENBSHZYeWlGLENBQUduakcsS0FBS29ELEVBQUV5L0YsR0FBRzEvRixFQUFFeVEsR0FBRyxJQUFJeFEsSUFBSTQ4RCxFQUFFaVcsR0FBRzl5RSxHQUFHLElBQUk2OEQsSUFBSXBzRCxFQUFFb3NELEVBQUU1OEQsRUFBRTgvRixHQUFHLy9GLEVBQUU2OEQsS0FBSyxJQUFJNThELElBQUcsTUFBTW9nQixFQUFFNDlFLEdBQUcyQixHQUFHNS9GLEVBQUUsR0FBRzgrRixHQUFHOStGLEVBQUV5USxHQUFHc3VGLEdBQUcvK0YsRUFBRTh3RSxNQUFLendELEVBQXFDLE9BQW5DcmdCLEVBQUVpZ0csYUFBYXBqRyxFQUFFbUQsRUFBRWtnRyxjQUFjenZGLEVBQVN4USxHQUFHLEtBQUssRUFBRSxLQUFLLEVBQUUsTUFBTXFELE1BQU10SyxFQUFFLE1BQU0sS0FBSyxFQUM4QixLQUFLLEVBQUVwRSxHQUFHb0wsRUFBRXErRixHQUFHQyxJQUFJLE1BRDdCLEtBQUssRUFBVSxHQUFSUSxHQUFHOStGLEVBQUV5USxJQUFTLFVBQUZBLEtBQWVBLEdBQWlCLElBQWJ4USxFQUFFaTlGLEdBQUcsSUFBSXBzQixNQUFVLENBQUMsR0FBRyxJQUFJeUIsR0FBR3Z5RSxFQUFFLEdBQUcsTUFBeUIsS0FBbkJuRCxFQUFFbUQsRUFBRXl5RSxnQkFBcUJoaUUsS0FBS0EsRUFBRSxDQUFDZ2pGLEtBQUl6ekYsRUFBRTB5RSxhQUFhMXlFLEVBQUV5eUUsZUFBZTUxRSxFQUFFLEtBQUssQ0FBQ21ELEVBQUVtZ0csY0FBYzdaLEdBQUcxeEYsR0FBR2lDLEtBQUssS0FBS21KLEVBQUVxK0YsR0FBR0MsSUFBSXIrRixHQUFHLEtBQUssQ0FBQ3JMLEdBQUdvTCxFQUFFcStGLEdBQUdDLElBQUksTUFBTSxLQUFLLEVBQVUsR0FBUlEsR0FBRzkrRixFQUFFeVEsSUFBUyxRQUFGQSxLQUM5ZUEsRUFBRSxNQUFxQixJQUFmeFEsRUFBRUQsRUFBRWt6RSxXQUFlcjJFLEdBQUcsRUFBRSxFQUFFNFQsR0FBRyxDQUFDLElBQUlvdEIsRUFBRSxHQUFHaTBDLEdBQUdyaEUsR0FBR29zRCxFQUFFLEdBQUdoL0IsR0FBRUEsRUFBRTU5QixFQUFFNDlCLElBQUtoaEMsSUFBSUEsRUFBRWdoQyxHQUFHcHRCLElBQUlvc0QsQ0FBQyxDQUFxRyxHQUFwR3BzRCxFQUFFNVQsRUFBcUcsSUFBM0Y0VCxHQUFHLEtBQVhBLEVBQUVxZ0UsS0FBSXJnRSxHQUFXLElBQUksSUFBSUEsRUFBRSxJQUFJLEtBQUtBLEVBQUUsS0FBSyxLQUFLQSxFQUFFLEtBQUssSUFBSUEsRUFBRSxJQUFJLEtBQUtBLEVBQUUsS0FBSyxLQUFLa3RGLEdBQUdsdEYsRUFBRSxPQUFPQSxHQUFVLENBQUN6USxFQUFFbWdHLGNBQWM3WixHQUFHMXhGLEdBQUdpQyxLQUFLLEtBQUttSixFQUFFcStGLEdBQUdDLElBQUk3dEYsR0FBRyxLQUFLLENBQUM3YixHQUFHb0wsRUFBRXErRixHQUFHQyxJQUFJLE1BQStCLFFBQVEsTUFBTWg3RixNQUFNdEssRUFBRSxNQUFPLENBQUMsQ0FBVyxPQUFWK2xHLEdBQUcvK0YsRUFBRTh3RSxNQUFZOXdFLEVBQUVnL0YsZUFBZTMrRSxFQUFFbS9FLEdBQUczb0csS0FBSyxLQUFLbUosR0FBRyxJQUFJLENBQ3JYLFNBQVMrL0YsR0FBRy8vRixFQUFFQyxHQUFHLElBQUlvZ0IsRUFBRSs5RSxHQUEyRyxPQUF4R3ArRixFQUFFcVosUUFBUTIyRCxjQUFjZ0YsZUFBZTRxQixHQUFHNS9GLEVBQUVDLEdBQUc2dkUsT0FBTyxLQUFlLEtBQVY5dkUsRUFBRTAvRixHQUFHMS9GLEVBQUVDLE1BQVdBLEVBQUVvK0YsR0FBR0EsR0FBR2grRSxFQUFFLE9BQU9wZ0IsR0FBR3U2RixHQUFHdjZGLElBQVdELENBQUMsQ0FBQyxTQUFTdzZGLEdBQUd4NkYsR0FBRyxPQUFPcStGLEdBQUdBLEdBQUdyK0YsRUFBRXErRixHQUFHNWxHLEtBQUtyRCxNQUFNaXBHLEdBQUdyK0YsRUFBRSxDQUU1TCxTQUFTOCtGLEdBQUc5K0YsRUFBRUMsR0FBdUQsSUFBcERBLElBQUlrK0YsR0FBR2wrRixJQUFJaStGLEdBQUdsK0YsRUFBRXl5RSxnQkFBZ0J4eUUsRUFBRUQsRUFBRTB5RSxjQUFjenlFLEVBQU1ELEVBQUVBLEVBQUVpL0YsZ0JBQWdCLEVBQUVoL0YsR0FBRyxDQUFDLElBQUlvZ0IsRUFBRSxHQUFHeXhELEdBQUc3eEUsR0FBR3dRLEVBQUUsR0FBRzRQLEVBQUVyZ0IsRUFBRXFnQixJQUFJLEVBQUVwZ0IsSUFBSXdRLENBQUMsQ0FBQyxDQUFDLFNBQVM2dUYsR0FBR3QvRixHQUFHLEdBQVUsRUFBRnF1RixHQUFLLE1BQU0vcUYsTUFBTXRLLEVBQUUsTUFBTXltRyxLQUFLLElBQUl4L0YsRUFBRXN5RSxHQUFHdnlFLEVBQUUsR0FBRyxLQUFVLEVBQUZDLEdBQUssT0FBTzgrRixHQUFHLytGLEVBQUU4d0UsTUFBSyxLQUFLLElBQUl6d0QsRUFBRXEvRSxHQUFHMS9GLEVBQUVDLEdBQUcsR0FBRyxJQUFJRCxFQUFFK2tCLEtBQUssSUFBSTFFLEVBQUUsQ0FBQyxJQUFJNVAsRUFBRXFpRSxHQUFHOXlFLEdBQUcsSUFBSXlRLElBQUl4USxFQUFFd1EsRUFBRTRQLEVBQUUwL0UsR0FBRy8vRixFQUFFeVEsR0FBRyxDQUFDLEdBQUcsSUFBSTRQLEVBQUUsTUFBTUEsRUFBRTQ5RSxHQUFHMkIsR0FBRzUvRixFQUFFLEdBQUc4K0YsR0FBRzkrRixFQUFFQyxHQUFHOCtGLEdBQUcvK0YsRUFBRTh3RSxNQUFLendELEVBQUUsR0FBRyxJQUFJQSxFQUFFLE1BQU0vYyxNQUFNdEssRUFBRSxNQUFpRixPQUEzRWdILEVBQUVpZ0csYUFBYWpnRyxFQUFFcVosUUFBUTRoQyxVQUFVajdDLEVBQUVrZ0csY0FBY2pnRyxFQUFFckwsR0FBR29MLEVBQUVxK0YsR0FBR0MsSUFBSVMsR0FBRy8rRixFQUFFOHdFLE1BQVksSUFBSSxDQUN2ZCxTQUFTc3ZCLEdBQUdwZ0csRUFBRUMsR0FBRyxJQUFJb2dCLEVBQUVndUUsR0FBRUEsSUFBRyxFQUFFLElBQUksT0FBT3J1RixFQUFFQyxFQUFFLENBQUMsUUFBWSxLQUFKb3VGLEdBQUVodUUsS0FBVTY2RSxHQUFHcHFCLEtBQUksSUFBSStYLElBQUlHLEtBQUssQ0FBQyxDQUFDLFNBQVNxWCxHQUFHcmdHLEdBQUcsT0FBT3crRixJQUFJLElBQUlBLEdBQUd6NUUsT0FBWSxFQUFGc3BFLEtBQU1vUixLQUFLLElBQUl4L0YsRUFBRW91RixHQUFFQSxJQUFHLEVBQUUsSUFBSWh1RSxFQUFFeTlFLEdBQUdqb0IsV0FBV3BsRSxFQUFFMmlFLEdBQUUsSUFBSSxHQUFHMHFCLEdBQUdqb0IsV0FBVyxLQUFLekMsR0FBRSxFQUFFcHpFLEVBQUUsT0FBT0EsR0FBRyxDQUFDLFFBQVFvekUsR0FBRTNpRSxFQUFFcXRGLEdBQUdqb0IsV0FBV3gxRCxJQUFhLEdBQVhndUUsR0FBRXB1RixLQUFhK29GLElBQUksQ0FBQyxDQUFDLFNBQVNtUyxLQUFLbEQsR0FBR0QsR0FBRzMrRSxRQUFRc3VFLEdBQUVxUSxHQUFHLENBQ2hULFNBQVM0SCxHQUFHNS9GLEVBQUVDLEdBQUdELEVBQUVpZ0csYUFBYSxLQUFLamdHLEVBQUVrZ0csY0FBYyxFQUFFLElBQUk3L0UsRUFBRXJnQixFQUFFbWdHLGNBQWlELElBQWxDLElBQUk5L0UsSUFBSXJnQixFQUFFbWdHLGVBQWUsRUFBRTNaLEdBQUdubUUsSUFBTyxPQUFPMDlFLEdBQUUsSUFBSTE5RSxFQUFFMDlFLEdBQUVsdUIsT0FBTyxPQUFPeHZELEdBQUcsQ0FBQyxJQUFJNVAsRUFBRTRQLEVBQVEsT0FBTndwRSxHQUFHcDVFLEdBQVVBLEVBQUVzVSxLQUFLLEtBQUssRUFBNkIsT0FBM0J0VSxFQUFFQSxFQUFFbFYsS0FBSzJyQyxvQkFBd0NvaEQsS0FBSyxNQUFNLEtBQUssRUFBRTJHLEtBQUt0SCxHQUFFSSxJQUFJSixHQUFFRyxJQUFHMEgsS0FBSyxNQUFNLEtBQUssRUFBRUwsR0FBRzErRSxHQUFHLE1BQU0sS0FBSyxFQUFFdytFLEtBQUssTUFBTSxLQUFLLEdBQWMsS0FBSyxHQUFHdEgsR0FBRXlILElBQUcsTUFBTSxLQUFLLEdBQUc1QyxHQUFHLzdFLEVBQUVsVixLQUFLc2lCLFVBQVUsTUFBTSxLQUFLLEdBQUcsS0FBSyxHQUFHczlFLEtBQUs5NkUsRUFBRUEsRUFBRXd2RCxNQUFNLENBQXFFLEdBQXBFZ2lCLEdBQUU3eEYsRUFBRSs5RixHQUFFLzlGLEVBQUUwckYsR0FBRzFyRixFQUFFcVosUUFBUSxNQUFNMmtGLEdBQUUvRixHQUFHaDRGLEVBQUVnN0YsR0FBRSxFQUFFZ0QsR0FBRyxLQUFLRSxHQUFHRCxHQUFHelAsR0FBRyxFQUFFNFAsR0FBR0QsR0FBRyxLQUFRLE9BQU9sUixHQUFHLENBQUMsSUFBSWp0RixFQUMxZixFQUFFQSxFQUFFaXRGLEdBQUcxNEYsT0FBT3lMLElBQUksR0FBMkIsUUFBaEJ3USxHQUFSNFAsRUFBRTZzRSxHQUFHanRGLElBQU9vdEYsYUFBcUIsQ0FBQ2h0RSxFQUFFZ3RFLFlBQVksS0FBSyxJQUFJeHdGLEVBQUU0VCxFQUFFbEgsS0FBS3N6RCxFQUFFeDhDLEVBQUV3dEUsUUFBUSxHQUFHLE9BQU9oeEIsRUFBRSxDQUFDLElBQUloL0IsRUFBRWcvQixFQUFFdHpELEtBQUtzekQsRUFBRXR6RCxLQUFLMU0sRUFBRTRULEVBQUVsSCxLQUFLczBCLENBQUMsQ0FBQ3hkLEVBQUV3dEUsUUFBUXA5RSxDQUFDLENBQUN5OEUsR0FBRyxJQUFJLENBQUMsT0FBT2x0RixDQUFDLENBQzNLLFNBQVM4L0YsR0FBRzkvRixFQUFFQyxHQUFHLE9BQUUsQ0FBQyxJQUFJb2dCLEVBQUUwOUUsR0FBRSxJQUF1QixHQUFuQnhSLEtBQUttRCxHQUFHcjJFLFFBQVFvM0UsR0FBTVQsR0FBRyxDQUFDLElBQUksSUFBSXYvRSxFQUFFcS9FLEdBQUU5ZixjQUFjLE9BQU92L0QsR0FBRyxDQUFDLElBQUk1VCxFQUFFNFQsRUFBRW9yQixNQUFNLE9BQU9oL0IsSUFBSUEsRUFBRWd4RixRQUFRLE1BQU1wOUUsRUFBRUEsRUFBRWxILElBQUksQ0FBQ3ltRixJQUFHLENBQUUsQ0FBNEMsR0FBM0NILEdBQUcsRUFBRTM3RixHQUFFNjdGLEdBQUVELEdBQUUsS0FBS0csSUFBRyxFQUFHQyxHQUFHLEVBQUUyTixHQUFHeGtGLFFBQVEsS0FBUSxPQUFPZ0gsR0FBRyxPQUFPQSxFQUFFd3ZELE9BQU8sQ0FBQ29yQixHQUFFLEVBQUVnRCxHQUFHaCtGLEVBQUU4OUYsR0FBRSxLQUFLLEtBQUssQ0FBQy85RixFQUFFLENBQUMsSUFBSTY4RCxFQUFFNzhELEVBQUU2OUIsRUFBRXhkLEVBQUV3dkQsT0FBTy9JLEVBQUV6bUQsRUFBRTNyQixFQUFFdUwsRUFBcUIsR0FBbkJBLEVBQUUrOUYsR0FBRWwzQixFQUFFZ0osT0FBTyxNQUFTLE9BQU9wN0UsR0FBRyxpQkFBa0JBLEdBQUcsbUJBQW9CQSxFQUFFbXlGLEtBQUssQ0FBQyxJQUFJcnNGLEVBQUU5RixFQUFFMkUsRUFBRXl0RSxFQUFFaWxCLEVBQUUxeUYsRUFBRTByQixJQUFJLEtBQWUsRUFBUDFyQixFQUFFNjRCLE1BQVUsSUFBSTY1RCxHQUFHLEtBQUtBLEdBQUcsS0FBS0EsR0FBRyxDQUFDLElBQUl4NkUsRUFBRWxZLEVBQUU0aEQsVUFBVTFwQyxHQUFHbFksRUFBRW8wRixZQUFZbDhFLEVBQUVrOEUsWUFBWXAwRixFQUFFMjJFLGNBQWN6K0QsRUFBRXkrRCxjQUN4ZTMyRSxFQUFFeXpGLE1BQU12N0UsRUFBRXU3RSxRQUFRenpGLEVBQUVvMEYsWUFBWSxLQUFLcDBGLEVBQUUyMkUsY0FBYyxLQUFLLENBQUMsSUFBSWdjLEVBQUVnTCxHQUFHbjVELEdBQUcsR0FBRyxPQUFPbXVELEVBQUUsQ0FBQ0EsRUFBRWxjLFFBQVEsSUFBSW1uQixHQUFHakwsRUFBRW51RCxFQUFFaXBDLEVBQUVqSyxFQUFFNThELEdBQVUsRUFBUCtyRixFQUFFOTVELE1BQVEya0UsR0FBR2g2QixFQUFFcmlFLEVBQUV5RixHQUFPdkwsRUFBRThGLEVBQUUsSUFBSXpCLEdBQVprSCxFQUFFK3JGLEdBQWN5QixZQUFZLEdBQUcsT0FBTzEwRixFQUFFLENBQUMsSUFBSUgsRUFBRSxJQUFJOEQsSUFBSTlELEVBQUVzRSxJQUFJeEksR0FBR3VMLEVBQUV3dEYsWUFBWTcwRixDQUFDLE1BQU1HLEVBQUVtRSxJQUFJeEksR0FBRyxNQUFNc0wsQ0FBQyxDQUFNLEtBQVUsRUFBRkMsR0FBSyxDQUFDNDJGLEdBQUdoNkIsRUFBRXJpRSxFQUFFeUYsR0FBR3U1RixLQUFLLE1BQU14NUYsQ0FBQyxDQUFDdEwsRUFBRTRPLE1BQU10SyxFQUFFLEtBQU0sTUFBTSxHQUFHZ3hGLElBQVUsRUFBUGxqQixFQUFFNTBDLEtBQU8sQ0FBQyxJQUFJNnlELEVBQUVpUyxHQUFHbjVELEdBQUcsR0FBRyxPQUFPa25ELEVBQUUsR0FBYyxNQUFSQSxFQUFFalYsU0FBZWlWLEVBQUVqVixPQUFPLEtBQUttbkIsR0FBR2xTLEVBQUVsbkQsRUFBRWlwQyxFQUFFakssRUFBRTU4RCxHQUFHZ3JGLEdBQUcrSyxHQUFHdGhHLEVBQUVveUUsSUFBSSxNQUFNOW1FLENBQUMsQ0FBQyxDQUFDNjhELEVBQUVub0UsRUFBRXNoRyxHQUFHdGhHLEVBQUVveUUsR0FBRyxJQUFJbTBCLEtBQUlBLEdBQUUsR0FBRyxPQUFPbUQsR0FBR0EsR0FBRyxDQUFDdmhDLEdBQUd1aEMsR0FBRzNsRyxLQUFLb2tFLEdBQUdBLEVBQUVoL0IsRUFBRSxFQUFFLENBQUMsT0FBT2cvQixFQUFFOTNDLEtBQUssS0FBSyxFQUFFODNDLEVBQUVpVCxPQUFPLE1BQ3BmN3ZFLElBQUlBLEVBQUU0OEQsRUFBRWl3QixPQUFPN3NGLEVBQWtCc3VGLEdBQUcxeEIsRUFBYnc1QixHQUFHeDVCLEVBQUVub0UsRUFBRXVMLElBQVcsTUFBTUQsRUFBRSxLQUFLLEVBQUU4bUUsRUFBRXB5RSxFQUFFLElBQUlzaEUsRUFBRTZHLEVBQUV0aEUsS0FBS3lwRixFQUFFbm9CLEVBQUUwUixVQUFVLEtBQWdCLElBQVIxUixFQUFFaVQsT0FBYSxtQkFBb0I5WixFQUFFeWdDLDJCQUEwQixPQUFPelIsR0FBRyxtQkFBb0JBLEVBQUUwUixtQkFBb0IsT0FBT0MsSUFBS0EsR0FBRzU1RixJQUFJaW9GLEtBQUssQ0FBQ25vQixFQUFFaVQsT0FBTyxNQUFNN3ZFLElBQUlBLEVBQUU0OEQsRUFBRWl3QixPQUFPN3NGLEVBQWtCc3VGLEdBQUcxeEIsRUFBYjI1QixHQUFHMzVCLEVBQUVpSyxFQUFFN21FLElBQVcsTUFBTUQsQ0FBQyxFQUFFNjhELEVBQUVBLEVBQUVnVCxNQUFNLE9BQU8sT0FBT2hULEVBQUUsQ0FBQ3lqQyxHQUFHamdGLEVBQUUsQ0FBQyxNQUFNa2xFLEdBQUl0bEYsRUFBRXNsRixFQUFHd1ksS0FBSTE5RSxHQUFHLE9BQU9BLElBQUkwOUUsR0FBRTE5RSxFQUFFQSxFQUFFd3ZELFFBQVEsUUFBUSxDQUFDLEtBQUssQ0FBUyxDQUFDLFNBQVM4dkIsS0FBSyxJQUFJMy9GLEVBQUU0OUYsR0FBR3ZrRixRQUFzQixPQUFkdWtGLEdBQUd2a0YsUUFBUW8zRSxHQUFVLE9BQU96d0YsRUFBRXl3RixHQUFHendGLENBQUMsQ0FDcmQsU0FBU3c1RixLQUFRLElBQUl5QixJQUFHLElBQUlBLElBQUcsSUFBSUEsS0FBRUEsR0FBRSxHQUFFLE9BQU9wSixNQUFXLFVBQUhwRCxPQUF1QixVQUFIeVAsS0FBZVksR0FBR2pOLEdBQUVtTSxHQUFFLENBQUMsU0FBUzBCLEdBQUcxL0YsRUFBRUMsR0FBRyxJQUFJb2dCLEVBQUVndUUsR0FBRUEsSUFBRyxFQUFFLElBQUk1OUUsRUFBRWt2RixLQUFxQyxJQUE3QjlOLEtBQUk3eEYsR0FBR2crRixLQUFJLzlGLElBQUVxK0YsR0FBRyxLQUFLc0IsR0FBRzUvRixFQUFFQyxVQUFVc2dHLEtBQUssS0FBSyxDQUFDLE1BQU0xakcsR0FBR2lqRyxHQUFHOS9GLEVBQUVuRCxFQUFFLENBQWdDLEdBQXRCMHZGLEtBQUs4QixHQUFFaHVFLEVBQUV1OUUsR0FBR3ZrRixRQUFRNUksRUFBSyxPQUFPc3RGLEdBQUUsTUFBTXo2RixNQUFNdEssRUFBRSxNQUFpQixPQUFYNjRGLEdBQUUsS0FBS21NLEdBQUUsRUFBUy9DLEVBQUMsQ0FBQyxTQUFTc0YsS0FBSyxLQUFLLE9BQU94QyxJQUFHeUMsR0FBR3pDLEdBQUUsQ0FBQyxTQUFTOEIsS0FBSyxLQUFLLE9BQU85QixLQUFJcnRCLE1BQU04dkIsR0FBR3pDLEdBQUUsQ0FBQyxTQUFTeUMsR0FBR3hnRyxHQUFHLElBQUlDLEVBQUV5OUYsR0FBRzE5RixFQUFFaTdDLFVBQVVqN0MsRUFBRWk0RixJQUFJajRGLEVBQUU4cUYsY0FBYzlxRixFQUFFc3FGLGFBQWEsT0FBT3JxRixFQUFFcWdHLEdBQUd0Z0csR0FBRys5RixHQUFFOTlGLEVBQUU0OUYsR0FBR3hrRixRQUFRLElBQUksQ0FDMWQsU0FBU2luRixHQUFHdGdHLEdBQUcsSUFBSUMsRUFBRUQsRUFBRSxFQUFFLENBQUMsSUFBSXFnQixFQUFFcGdCLEVBQUVnN0MsVUFBcUIsR0FBWGo3QyxFQUFFQyxFQUFFNHZFLE9BQXVCLE1BQVI1dkUsRUFBRTZ2RSxNQUF3RCxDQUFXLEdBQUcsUUFBYnp2RCxFQUFFKzZFLEdBQUcvNkUsRUFBRXBnQixJQUFtQyxPQUFuQm9nQixFQUFFeXZELE9BQU8sV0FBTWl1QixHQUFFMTlFLEdBQVMsR0FBRyxPQUFPcmdCLEVBQW1FLE9BQVhpN0YsR0FBRSxPQUFFOEMsR0FBRSxNQUE1RC85RixFQUFFOHZFLE9BQU8sTUFBTTl2RSxFQUFFNDVGLGFBQWEsRUFBRTU1RixFQUFFb3FGLFVBQVUsSUFBNEIsTUFBaEwsR0FBZ0IsUUFBYi9wRSxFQUFFazZFLEdBQUdsNkUsRUFBRXBnQixFQUFFZzRGLEtBQWtCLFlBQUo4RixHQUFFMTlFLEdBQWlLLEdBQUcsUUFBZnBnQixFQUFFQSxFQUFFc2QsU0FBeUIsWUFBSndnRixHQUFFOTlGLEdBQVM4OUYsR0FBRTk5RixFQUFFRCxDQUFDLE9BQU8sT0FBT0MsR0FBRyxJQUFJZzdGLEtBQUlBLEdBQUUsRUFBRSxDQUFDLFNBQVNybUcsR0FBR29MLEVBQUVDLEVBQUVvZ0IsR0FBRyxJQUFJNVAsRUFBRTJpRSxHQUFFdjJFLEVBQUVpaEcsR0FBR2pvQixXQUFXLElBQUlpb0IsR0FBR2pvQixXQUFXLEtBQUt6QyxHQUFFLEVBQzNZLFNBQVlwekUsRUFBRUMsRUFBRW9nQixFQUFFNVAsR0FBRyxHQUFHZ3ZGLFdBQVcsT0FBT2pCLElBQUksR0FBVSxFQUFGblEsR0FBSyxNQUFNL3FGLE1BQU10SyxFQUFFLE1BQU1xbkIsRUFBRXJnQixFQUFFaWdHLGFBQWEsSUFBSXBqRyxFQUFFbUQsRUFBRWtnRyxjQUFjLEdBQUcsT0FBTzcvRSxFQUFFLE9BQU8sS0FBMkMsR0FBdENyZ0IsRUFBRWlnRyxhQUFhLEtBQUtqZ0csRUFBRWtnRyxjQUFjLEVBQUs3L0UsSUFBSXJnQixFQUFFcVosUUFBUSxNQUFNL1YsTUFBTXRLLEVBQUUsTUFBTWdILEVBQUVnL0YsYUFBYSxLQUFLaC9GLEVBQUVvL0YsaUJBQWlCLEVBQUUsSUFBSXZpQyxFQUFFeDhDLEVBQUV5c0UsTUFBTXpzRSxFQUFFc3NFLFdBQThKLEdBek50VCxTQUFZM3NGLEVBQUVDLEdBQUcsSUFBSW9nQixFQUFFcmdCLEVBQUV3eUUsY0FBY3Z5RSxFQUFFRCxFQUFFd3lFLGFBQWF2eUUsRUFBRUQsRUFBRXl5RSxlQUFlLEVBQUV6eUUsRUFBRTB5RSxZQUFZLEVBQUUxeUUsRUFBRWsvRixjQUFjai9GLEVBQUVELEVBQUV5Z0csa0JBQWtCeGdHLEVBQUVELEVBQUUyeUUsZ0JBQWdCMXlFLEVBQUVBLEVBQUVELEVBQUU0eUUsY0FBYyxJQUFJbmlFLEVBQUV6USxFQUFFa3pFLFdBQVcsSUFBSWx6RSxFQUFFQSxFQUFFaS9GLGdCQUFnQixFQUFFNStFLEdBQUcsQ0FBQyxJQUFJeGpCLEVBQUUsR0FBR2kxRSxHQUFHenhELEdBQUd3OEMsRUFBRSxHQUFHaGdFLEVBQUVvRCxFQUFFcEQsR0FBRyxFQUFFNFQsRUFBRTVULElBQUksRUFBRW1ELEVBQUVuRCxJQUFJLEVBQUV3akIsSUFBSXc4QyxDQUFDLENBQUMsQ0F5TjVHNmpDLENBQUcxZ0csRUFBRTY4RCxHQUFHNzhELElBQUk2eEYsS0FBSWtNLEdBQUVsTSxHQUFFLEtBQUttTSxHQUFFLEtBQXVCLEtBQWYzOUUsRUFBRXU1RSxpQkFBaUMsS0FBUnY1RSxFQUFFeXZELFFBQWF5dUIsS0FBS0EsSUFBRyxFQUFHZ0IsR0FBR2p1QixJQUFHLFdBQWdCLE9BQUxtdUIsS0FBWSxJQUFJLEtBQUk1aUMsS0FBZSxNQUFSeDhDLEVBQUV5dkQsT0FBb0MsTUFBZnp2RCxFQUFFdTVFLGNBQXFCLzhCLEVBQUUsQ0FBQ0EsRUFBRWloQyxHQUFHam9CLFdBQVdpb0IsR0FBR2pvQixXQUFXLEtBQ2hmLElBQUloNEMsRUFBRXUxQyxHQUFFQSxHQUFFLEVBQUUsSUFBSXRNLEVBQUV1bkIsR0FBRUEsSUFBRyxFQUFFd1AsR0FBR3hrRixRQUFRLEtBMUNwQyxTQUFZclosRUFBRUMsR0FBZ0IsR0FBYmltRixHQUFHdlEsR0FBYW9MLEdBQVYvZ0YsRUFBRTRnRixNQUFjLENBQUMsR0FBRyxtQkFBbUI1Z0YsRUFBRSxJQUFJcWdCLEVBQUUsQ0FBQzdSLE1BQU14TyxFQUFFcWhGLGVBQWVqOEUsSUFBSXBGLEVBQUVzaEYsbUJBQW1CdGhGLEVBQUUsQ0FBOEMsSUFBSXlRLEdBQWpENFAsR0FBR0EsRUFBRXJnQixFQUFFeW9FLGdCQUFnQnBvRCxFQUFFa2hFLGFBQWF6akQsUUFBZTBqRCxjQUFjbmhFLEVBQUVtaEUsZUFBZSxHQUFHL3dFLEdBQUcsSUFBSUEsRUFBRWl4RSxXQUFXLENBQUNyaEUsRUFBRTVQLEVBQUVreEUsV0FBVyxJQUFJOWtGLEVBQUU0VCxFQUFFbXhFLGFBQWEva0IsRUFBRXBzRCxFQUFFb3hFLFVBQVVweEUsRUFBRUEsRUFBRXF4RSxZQUFZLElBQUl6aEUsRUFBRTJXLFNBQVM2bEMsRUFBRTdsQyxRQUFRLENBQUMsTUFBTWl1RCxHQUFHNWtFLEVBQUUsS0FBSyxNQUFNcmdCLENBQUMsQ0FBQyxJQUFJNjlCLEVBQUUsRUFBRWlwQyxHQUFHLEVBQUVweUUsR0FBRyxFQUFFOEYsRUFBRSxFQUFFbkIsRUFBRSxFQUFFMHlGLEVBQUUvckYsRUFBRXVSLEVBQUUsS0FBS3RSLEVBQUUsT0FBTyxDQUFDLElBQUksSUFBSStyRixFQUFLRCxJQUFJMXJFLEdBQUcsSUFBSXhqQixHQUFHLElBQUlrdkYsRUFBRS8wRCxXQUFXOHZDLEVBQUVqcEMsRUFBRWhoQyxHQUFHa3ZGLElBQUlsdkIsR0FBRyxJQUFJcHNELEdBQUcsSUFBSXM3RSxFQUFFLzBELFdBQVd0aUMsRUFBRW1wQyxFQUFFcHRCLEdBQUcsSUFBSXM3RSxFQUFFLzBELFdBQVc2RyxHQUNuZmt1RCxFQUFFbGlCLFVBQVVyMUUsUUFBVyxRQUFRdzNGLEVBQUVELEVBQUUxdUUsYUFBa0I5TCxFQUFFdzZFLEVBQUVBLEVBQUVDLEVBQUUsT0FBTyxDQUFDLEdBQUdELElBQUkvckYsRUFBRSxNQUFNQyxFQUE4QyxHQUE1Q3NSLElBQUk4TyxLQUFLN2xCLElBQUlxQyxJQUFJaXFFLEVBQUVqcEMsR0FBR3RzQixJQUFJc3JELEtBQUt4akUsSUFBSW9YLElBQUkvYixFQUFFbXBDLEdBQU0sUUFBUW11RCxFQUFFRCxFQUFFckwsYUFBYSxNQUFVbnZFLEdBQUp3NkUsRUFBRXg2RSxHQUFNMDhELFVBQVUsQ0FBQzhkLEVBQUVDLENBQUMsQ0FBQzNyRSxHQUFHLElBQUl5bUQsSUFBSSxJQUFJcHlFLEVBQUUsS0FBSyxDQUFDOFosTUFBTXM0RCxFQUFFMWhFLElBQUkxUSxFQUFFLE1BQU0yckIsRUFBRSxJQUFJLENBQUNBLEVBQUVBLEdBQUcsQ0FBQzdSLE1BQU0sRUFBRXBKLElBQUksRUFBRSxNQUFNaWIsRUFBRSxLQUErQyxJQUExQzhsRSxHQUFHLENBQUNqRixZQUFZbGhGLEVBQUVtaEYsZUFBZTlnRSxHQUFHczFELElBQUcsRUFBTzZsQixHQUFFdjdGLEVBQUUsT0FBT3U3RixJQUFHLEdBQU94N0YsR0FBSkMsRUFBRXU3RixJQUFNcHhGLE1BQTBCLEtBQWZuSyxFQUFFMjVGLGNBQW9CLE9BQU81NUYsRUFBRUEsRUFBRTZ2RSxPQUFPNXZFLEVBQUV1N0YsR0FBRXg3RixPQUFPLEtBQUssT0FBT3c3RixJQUFHLENBQUN2N0YsRUFBRXU3RixHQUFFLElBQUksSUFBSXppRyxFQUFFa0gsRUFBRWc3QyxVQUFVLEdBQWdCLEtBQVJoN0MsRUFBRTZ2RSxNQUFZLE9BQU83dkUsRUFBRThrQixLQUFLLEtBQUssRUFBRSxLQUFLLEdBQUcsS0FBSyxHQUN2SyxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEdBQUcsTUFBM1csS0FBSyxFQUFFLEdBQUcsT0FBT2hzQixFQUFFLENBQUMsSUFBSUgsRUFBRUcsRUFBRSt4RixjQUFjL0YsRUFBRWhzRixFQUFFaTNFLGNBQWNwOEQsRUFBRTNULEVBQUVzdUUsVUFBVXZZLEVBQUVwaUQsRUFBRTYxQix3QkFBd0J4cEMsRUFBRWlqRSxjQUFjampFLEVBQUUxRSxLQUFLM0MsRUFBRWs4RixHQUFHNzBGLEVBQUUxRSxLQUFLM0MsR0FBR21zRixHQUFHbnhFLEVBQUU0cEYsb0NBQW9DeG5DLENBQUMsQ0FBQyxNQUFNLEtBQUssRUFBRSxJQUFJZ3ZCLEVBQUUva0YsRUFBRXN1RSxVQUFVMEcsY0FBYyxJQUFJK1AsRUFBRWh1RCxTQUFTZ3VELEVBQUU1Z0YsWUFBWSxHQUFHLElBQUk0Z0YsRUFBRWh1RCxVQUFVZ3VELEVBQUU1RCxpQkFBaUI0RCxFQUFFeGIsWUFBWXdiLEVBQUU1RCxpQkFBaUIsTUFBeUMsUUFBUSxNQUFNOTlFLE1BQU10SyxFQUFFLE1BQU8sQ0FBQyxNQUFNaXNGLEdBQUd5VyxHQUFFejdGLEVBQUVBLEVBQUU0dkUsT0FBT29WLEVBQUUsQ0FBYSxHQUFHLFFBQWZqbEYsRUFBRUMsRUFBRXNkLFNBQW9CLENBQUN2ZCxFQUFFNnZFLE9BQU81dkUsRUFBRTR2RSxPQUFPMnJCLEdBQUV4N0YsRUFBRSxLQUFLLENBQUN3N0YsR0FBRXY3RixFQUFFNHZFLE1BQU0sQ0FBQzkyRSxFQUFFNmlHLEdBQUdBLElBQUcsQ0FBVyxDQXdDbGQrRSxDQUFHM2dHLEVBQUVxZ0IsR0FBRzA4RSxHQUFHMThFLEVBQUVyZ0IsR0FBR2loRixHQUFHa0YsSUFBSXhRLEtBQUt1USxHQUFHQyxHQUFHRCxHQUFHLEtBQUtsbUYsRUFBRXFaLFFBQVFnSCxFQUFFKzhFLEdBQUcvOEUsRUFBRXJnQixFQUFFbkQsR0FBRyt6RSxLQUFLeWQsR0FBRXZuQixFQUFFc00sR0FBRXYxQyxFQUFFaWdFLEdBQUdqb0IsV0FBV2haLENBQUMsTUFBTTc4RCxFQUFFcVosUUFBUWdILEVBQXNGLEdBQXBGaytFLEtBQUtBLElBQUcsRUFBR0MsR0FBR3grRixFQUFFeStGLEdBQUc1aEcsR0FBb0IsS0FBakJnZ0UsRUFBRTc4RCxFQUFFd3lFLGdCQUFxQm1rQixHQUFHLE1BaE9tSixTQUFZMzJGLEdBQUcsR0FBRzZ4RSxJQUFJLG1CQUFvQkEsR0FBRyt1QixrQkFBa0IsSUFBSS91QixHQUFHK3VCLGtCQUFrQmh2QixHQUFHNXhFLE9BQUUsSUFBTyxLQUFPQSxFQUFFcVosUUFBUXkyRCxPQUFXLENBQUMsTUFBTTd2RSxHQUFHLENBQUMsQ0FnT3hSNGdHLENBQUd4Z0YsRUFBRWt1RCxXQUFhd3dCLEdBQUcvK0YsRUFBRTh3RSxNQUFRLE9BQU83d0UsRUFBRSxJQUFJd1EsRUFBRXpRLEVBQUU4Z0csbUJBQW1CemdGLEVBQUUsRUFBRUEsRUFBRXBnQixFQUFFekwsT0FBTzZyQixJQUFXNVAsR0FBUDVULEVBQUVvRCxFQUFFb2dCLElBQU81b0IsTUFBTSxDQUFDbS9GLGVBQWUvNUYsRUFBRXkvQyxNQUFNMjVDLE9BQU9wNUYsRUFBRW81RixTQUFTLEdBQUdLLEdBQUcsTUFBTUEsSUFBRyxFQUFHdDJGLEVBQUV1MkYsR0FBR0EsR0FBRyxLQUFLdjJGLEtBQVUsRUFBSHkrRixLQUFPLElBQUl6K0YsRUFBRStrQixLQUFLMDZFLEtBQTZCLEdBQXhCNWlDLEVBQUU3OEQsRUFBRXd5RSxjQUF1Qnh5RSxJQUFJMitGLEdBQUdELE1BQU1BLEdBQUcsRUFBRUMsR0FBRzMrRixHQUFHMCtGLEdBQUcsRUFBRTFWLElBQWdCLENBRnhGK1gsQ0FBRy9nRyxFQUFFQyxFQUFFb2dCLEVBQUU1UCxFQUFFLENBQUMsUUFBUXF0RixHQUFHam9CLFdBQVdoNUUsRUFBRXUyRSxHQUFFM2lFLENBQUMsQ0FBQyxPQUFPLElBQUksQ0FHaGMsU0FBU2d2RixLQUFLLEdBQUcsT0FBT2pCLEdBQUcsQ0FBQyxJQUFJeCtGLEVBQUVxekUsR0FBR29yQixJQUFJeCtGLEVBQUU2OUYsR0FBR2pvQixXQUFXeDFELEVBQUUreUQsR0FBRSxJQUFtQyxHQUEvQjBxQixHQUFHam9CLFdBQVcsS0FBS3pDLEdBQUUsR0FBR3B6RSxFQUFFLEdBQUdBLEVBQUssT0FBT3crRixHQUFHLElBQUkvdEYsR0FBRSxNQUFPLENBQW1CLEdBQWxCelEsRUFBRXcrRixHQUFHQSxHQUFHLEtBQUtDLEdBQUcsRUFBWSxFQUFGcFEsR0FBSyxNQUFNL3FGLE1BQU10SyxFQUFFLE1BQU0sSUFBSTZELEVBQUV3eEYsR0FBTyxJQUFMQSxJQUFHLEVBQU1tTixHQUFFeDdGLEVBQUVxWixRQUFRLE9BQU9taUYsSUFBRyxDQUFDLElBQUkzK0IsRUFBRTIrQixHQUFFMzlELEVBQUVnL0IsRUFBRXp5RCxNQUFNLEdBQWdCLEdBQVJveEYsR0FBRTFyQixNQUFVLENBQUMsSUFBSWhKLEVBQUVqSyxFQUFFdXRCLFVBQVUsR0FBRyxPQUFPdGpCLEVBQUUsQ0FBQyxJQUFJLElBQUlweUUsRUFBRSxFQUFFQSxFQUFFb3lFLEVBQUV0eUUsT0FBT0UsSUFBSSxDQUFDLElBQUk4RixFQUFFc3NFLEVBQUVweUUsR0FBRyxJQUFJOG1HLEdBQUVoaEcsRUFBRSxPQUFPZ2hHLElBQUcsQ0FBQyxJQUFJbmlHLEVBQUVtaUcsR0FBRSxPQUFPbmlHLEVBQUUwckIsS0FBSyxLQUFLLEVBQUUsS0FBSyxHQUFHLEtBQUssR0FBRzgyRSxHQUFHLEVBQUV4aUcsRUFBRXdqRSxHQUFHLElBQUlrdkIsRUFBRTF5RixFQUFFK1EsTUFBTSxHQUFHLE9BQU8yaEYsRUFBRUEsRUFBRWxjLE9BQU94MkUsRUFBRW1pRyxHQUFFelAsT0FBTyxLQUFLLE9BQU95UCxJQUFHLENBQUssSUFBSWpxRixHQUFSbFksRUFBRW1pRyxJQUFVaitFLFFBQVF5dUUsRUFBRTN5RixFQUFFdzJFLE9BQWEsR0FBTm1zQixHQUFHM2lHLEdBQU1BLElBQ25mbUIsRUFBRSxDQUFDZ2hHLEdBQUUsS0FBSyxLQUFLLENBQUMsR0FBRyxPQUFPanFGLEVBQUUsQ0FBQ0EsRUFBRXMrRCxPQUFPbWMsRUFBRXdQLEdBQUVqcUYsRUFBRSxLQUFLLENBQUNpcUYsR0FBRXhQLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSWp6RixFQUFFOGpFLEVBQUU1aEIsVUFBVSxHQUFHLE9BQU9saUQsRUFBRSxDQUFDLElBQUlILEVBQUVHLEVBQUVxUixNQUFNLEdBQUcsT0FBT3hSLEVBQUUsQ0FBQ0csRUFBRXFSLE1BQU0sS0FBSyxFQUFFLENBQUMsSUFBSTI2RSxFQUFFbnNGLEVBQUUya0IsUUFBUTNrQixFQUFFMmtCLFFBQVEsS0FBSzNrQixFQUFFbXNGLENBQUMsT0FBTyxPQUFPbnNGLEVBQUUsQ0FBQyxDQUFDNGlHLEdBQUUzK0IsQ0FBQyxDQUFDLENBQUMsR0FBdUIsS0FBZkEsRUFBRSs4QixjQUFvQixPQUFPLzdELEVBQUVBLEVBQUVneUMsT0FBT2hULEVBQUUyK0IsR0FBRTM5RCxPQUFPNTlCLEVBQUUsS0FBSyxPQUFPdTdGLElBQUcsQ0FBSyxHQUFnQixNQUFwQjMrQixFQUFFMitCLElBQVkxckIsTUFBWSxPQUFPalQsRUFBRTkzQyxLQUFLLEtBQUssRUFBRSxLQUFLLEdBQUcsS0FBSyxHQUFHODJFLEdBQUcsRUFBRWgvQixFQUFFQSxFQUFFZ1QsUUFBUSxJQUFJajhELEVBQUVpcEQsRUFBRXQvQyxRQUFRLEdBQUcsT0FBTzNKLEVBQUUsQ0FBQ0EsRUFBRWk4RCxPQUFPaFQsRUFBRWdULE9BQU8yckIsR0FBRTVuRixFQUFFLE1BQU0zVCxDQUFDLENBQUN1N0YsR0FBRTMrQixFQUFFZ1QsTUFBTSxDQUFDLENBQUMsSUFBSTdaLEVBQUVoMkQsRUFBRXFaLFFBQVEsSUFBSW1pRixHQUFFeGxDLEVBQUUsT0FBT3dsQyxJQUFHLENBQUssSUFBSXhXLEdBQVJubkQsRUFBRTI5RCxJQUFVcHhGLE1BQU0sR0FBdUIsS0FBZnl6QixFQUFFKzdELGNBQW9CLE9BQ2xmNVUsRUFBRUEsRUFBRW5WLE9BQU9oeUMsRUFBRTI5RCxHQUFFeFcsT0FBTy9rRixFQUFFLElBQUk0OUIsRUFBRW00QixFQUFFLE9BQU93bEMsSUFBRyxDQUFLLEdBQWdCLE1BQXBCMTBCLEVBQUUwMEIsSUFBWTFyQixNQUFZLElBQUksT0FBT2hKLEVBQUUvaEQsS0FBSyxLQUFLLEVBQUUsS0FBSyxHQUFHLEtBQUssR0FBRysyRSxHQUFHLEVBQUVoMUIsR0FBRyxDQUFDLE1BQU15ZSxHQUFJbVcsR0FBRTUwQixFQUFFQSxFQUFFK0ksT0FBTzBWLEVBQUcsQ0FBQyxHQUFHemUsSUFBSWpwQyxFQUFFLENBQUMyOUQsR0FBRSxLQUFLLE1BQU12N0YsQ0FBQyxDQUFDLElBQUlnbEYsRUFBRW5lLEVBQUV2cEQsUUFBUSxHQUFHLE9BQU8wbkUsRUFBRSxDQUFDQSxFQUFFcFYsT0FBTy9JLEVBQUUrSSxPQUFPMnJCLEdBQUV2VyxFQUFFLE1BQU1obEYsQ0FBQyxDQUFDdTdGLEdBQUUxMEIsRUFBRStJLE1BQU0sQ0FBQyxDQUFVLEdBQVR3ZSxHQUFFeHhGLEVBQUVtc0YsS0FBUW5YLElBQUksbUJBQW9CQSxHQUFHbXZCLHNCQUFzQixJQUFJbnZCLEdBQUdtdkIsc0JBQXNCcHZCLEdBQUc1eEUsRUFBRSxDQUFDLE1BQU11bEYsR0FBSSxDQUFDOTBFLEdBQUUsQ0FBRSxDQUFDLE9BQU9BLENBQUMsQ0FBQyxRQUFRMmlFLEdBQUUveUQsRUFBRXk5RSxHQUFHam9CLFdBQVc1MUUsQ0FBQyxDQUFDLENBQUMsT0FBTSxDQUFFLENBQUMsU0FBU2doRyxHQUFHamhHLEVBQUVDLEVBQUVvZ0IsR0FBeUJyZ0IsRUFBRW91RixHQUFHcHVGLEVBQWpCQyxFQUFFbzJGLEdBQUdyMkYsRUFBZkMsRUFBRSsxRixHQUFHMzFFLEVBQUVwZ0IsR0FBWSxHQUFZLEdBQUdBLEVBQUV3ekYsS0FBSSxPQUFPenpGLElBQUlpekUsR0FBR2p6RSxFQUFFLEVBQUVDLEdBQUc4K0YsR0FBRy8rRixFQUFFQyxHQUFHLENBQ3plLFNBQVN5N0YsR0FBRTE3RixFQUFFQyxFQUFFb2dCLEdBQUcsR0FBRyxJQUFJcmdCLEVBQUUra0IsSUFBSWs4RSxHQUFHamhHLEVBQUVBLEVBQUVxZ0IsUUFBUSxLQUFLLE9BQU9wZ0IsR0FBRyxDQUFDLEdBQUcsSUFBSUEsRUFBRThrQixJQUFJLENBQUNrOEUsR0FBR2hoRyxFQUFFRCxFQUFFcWdCLEdBQUcsS0FBSyxDQUFNLEdBQUcsSUFBSXBnQixFQUFFOGtCLElBQUksQ0FBQyxJQUFJdFUsRUFBRXhRLEVBQUVzdUUsVUFBVSxHQUFHLG1CQUFvQnR1RSxFQUFFMUUsS0FBS2s3RiwwQkFBMEIsbUJBQW9CaG1GLEVBQUVpbUYsb0JBQW9CLE9BQU9DLEtBQUtBLEdBQUc1NUYsSUFBSTBULElBQUksQ0FBdUJ4USxFQUFFbXVGLEdBQUdudUYsRUFBakJELEVBQUV3MkYsR0FBR3YyRixFQUFmRCxFQUFFZzJGLEdBQUczMUUsRUFBRXJnQixHQUFZLEdBQVksR0FBR0EsRUFBRXl6RixLQUFJLE9BQU94ekYsSUFBSWd6RSxHQUFHaHpFLEVBQUUsRUFBRUQsR0FBRysrRixHQUFHOStGLEVBQUVELElBQUksS0FBSyxDQUFDLENBQUNDLEVBQUVBLEVBQUU0dkUsTUFBTSxDQUFDLENBQ25WLFNBQVNrbkIsR0FBRy8yRixFQUFFQyxFQUFFb2dCLEdBQUcsSUFBSTVQLEVBQUV6USxFQUFFODJGLFVBQVUsT0FBT3JtRixHQUFHQSxFQUFFNGpFLE9BQU9wMEUsR0FBR0EsRUFBRXd6RixLQUFJenpGLEVBQUUweUUsYUFBYTF5RSxFQUFFeXlFLGVBQWVweUQsRUFBRXd4RSxLQUFJN3hGLElBQUlnK0YsR0FBRTM5RSxLQUFLQSxJQUFJLElBQUk0NkUsSUFBRyxJQUFJQSxLQUFNLFVBQUYrQyxNQUFlQSxJQUFHLElBQUlsdEIsS0FBSW9zQixHQUFHMEMsR0FBRzUvRixFQUFFLEdBQUdtK0YsSUFBSTk5RSxHQUFHMCtFLEdBQUcvK0YsRUFBRUMsRUFBRSxDQUFDLFNBQVNpaEcsR0FBR2xoRyxFQUFFQyxHQUFHLElBQUlBLElBQWdCLEVBQVBELEVBQUVreUIsTUFBYWp5QixFQUFFb3lFLEtBQWtCLFdBQWZBLEtBQUssTUFBdUJBLEdBQUcsVUFBekNweUUsRUFBRSxHQUFrRCxJQUFJb2dCLEVBQUVvekUsS0FBYyxRQUFWenpGLEVBQUVzdEYsR0FBR3R0RixFQUFFQyxNQUFjZ3pFLEdBQUdqekUsRUFBRUMsRUFBRW9nQixHQUFHMCtFLEdBQUcvK0YsRUFBRXFnQixHQUFHLENBQUMsU0FBU281RSxHQUFHejVGLEdBQUcsSUFBSUMsRUFBRUQsRUFBRWd3RSxjQUFjM3ZELEVBQUUsRUFBRSxPQUFPcGdCLElBQUlvZ0IsRUFBRXBnQixFQUFFd3FGLFdBQVd5VyxHQUFHbGhHLEVBQUVxZ0IsRUFBRSxDQUNqWixTQUFTdzhFLEdBQUc3OEYsRUFBRUMsR0FBRyxJQUFJb2dCLEVBQUUsRUFBRSxPQUFPcmdCLEVBQUUra0IsS0FBSyxLQUFLLEdBQUcsSUFBSXRVLEVBQUV6USxFQUFFdXVFLFVBQWMxeEUsRUFBRW1ELEVBQUVnd0UsY0FBYyxPQUFPbnpFLElBQUl3akIsRUFBRXhqQixFQUFFNHRGLFdBQVcsTUFBTSxLQUFLLEdBQUdoNkUsRUFBRXpRLEVBQUV1dUUsVUFBVSxNQUFNLFFBQVEsTUFBTWpyRSxNQUFNdEssRUFBRSxNQUFPLE9BQU95WCxHQUFHQSxFQUFFNGpFLE9BQU9wMEUsR0FBR2loRyxHQUFHbGhHLEVBQUVxZ0IsRUFBRSxDQVFxSyxTQUFTay9FLEdBQUd2L0YsRUFBRUMsR0FBRyxPQUFPcXdFLEdBQUd0d0UsRUFBRUMsRUFBRSxDQUNqWixTQUFTa2hHLEdBQUduaEcsRUFBRUMsRUFBRW9nQixFQUFFNVAsR0FBR3RjLEtBQUs0d0IsSUFBSS9rQixFQUFFN0wsS0FBS3FRLElBQUk2YixFQUFFbHNCLEtBQUtvcEIsUUFBUXBwQixLQUFLaVcsTUFBTWpXLEtBQUswN0UsT0FBTzE3RSxLQUFLbzZFLFVBQVVwNkUsS0FBS29ILEtBQUtwSCxLQUFLK3VFLFlBQVksS0FBSy91RSxLQUFLNlIsTUFBTSxFQUFFN1IsS0FBS2kzRixJQUFJLEtBQUtqM0YsS0FBS20yRixhQUFhcnFGLEVBQUU5TCxLQUFLeTRGLGFBQWF6NEYsS0FBSzY3RSxjQUFjNzdFLEtBQUtzNUYsWUFBWXQ1RixLQUFLMjJGLGNBQWMsS0FBSzMyRixLQUFLKzlCLEtBQUt6aEIsRUFBRXRjLEtBQUt5bEcsYUFBYXpsRyxLQUFLMjdFLE1BQU0sRUFBRTM3RSxLQUFLaTJGLFVBQVUsS0FBS2oyRixLQUFLdzRGLFdBQVd4NEYsS0FBSzI0RixNQUFNLEVBQUUzNEYsS0FBSzhtRCxVQUFVLElBQUksQ0FBQyxTQUFTa3ZDLEdBQUducUYsRUFBRUMsRUFBRW9nQixFQUFFNVAsR0FBRyxPQUFPLElBQUkwd0YsR0FBR25oRyxFQUFFQyxFQUFFb2dCLEVBQUU1UCxFQUFFLENBQUMsU0FBUyttRixHQUFHeDNGLEdBQWlCLFVBQWRBLEVBQUVBLEVBQUVwSyxhQUF1Qm9LLEVBQUVvaEcsaUJBQWlCLENBRXBkLFNBQVMxVixHQUFHMXJGLEVBQUVDLEdBQUcsSUFBSW9nQixFQUFFcmdCLEVBQUVpN0MsVUFDdUIsT0FEYixPQUFPNTZCLElBQUdBLEVBQUU4cEUsR0FBR25xRixFQUFFK2tCLElBQUk5a0IsRUFBRUQsRUFBRXdFLElBQUl4RSxFQUFFa3lCLE9BQVFneEMsWUFBWWxqRSxFQUFFa2pFLFlBQVk3aUQsRUFBRTlrQixLQUFLeUUsRUFBRXpFLEtBQUs4a0IsRUFBRWt1RCxVQUFVdnVFLEVBQUV1dUUsVUFBVWx1RCxFQUFFNDZCLFVBQVVqN0MsRUFBRUEsRUFBRWk3QyxVQUFVNTZCLElBQUlBLEVBQUVpcUUsYUFBYXJxRixFQUFFb2dCLEVBQUU5a0IsS0FBS3lFLEVBQUV6RSxLQUFLOGtCLEVBQUV5dkQsTUFBTSxFQUFFenZELEVBQUV1NUUsYUFBYSxFQUFFdjVFLEVBQUUrcEUsVUFBVSxNQUFNL3BFLEVBQUV5dkQsTUFBYyxTQUFSOXZFLEVBQUU4dkUsTUFBZXp2RCxFQUFFc3NFLFdBQVczc0YsRUFBRTJzRixXQUFXdHNFLEVBQUV5c0UsTUFBTTlzRixFQUFFOHNGLE1BQU16c0UsRUFBRWpXLE1BQU1wSyxFQUFFb0ssTUFBTWlXLEVBQUV5cUUsY0FBYzlxRixFQUFFOHFGLGNBQWN6cUUsRUFBRTJ2RCxjQUFjaHdFLEVBQUVnd0UsY0FBYzN2RCxFQUFFb3RFLFlBQVl6dEYsRUFBRXl0RixZQUFZeHRGLEVBQUVELEVBQUU0c0YsYUFBYXZzRSxFQUFFdXNFLGFBQWEsT0FBTzNzRixFQUFFLEtBQUssQ0FBQzZzRixNQUFNN3NGLEVBQUU2c0YsTUFBTUQsYUFBYTVzRixFQUFFNHNGLGNBQy9leHNFLEVBQUU5QyxRQUFRdmQsRUFBRXVkLFFBQVE4QyxFQUFFcmEsTUFBTWhHLEVBQUVnRyxNQUFNcWEsRUFBRStxRSxJQUFJcHJGLEVBQUVvckYsSUFBVy9xRSxDQUFDLENBQ3hELFNBQVN1ckUsR0FBRzVyRixFQUFFQyxFQUFFb2dCLEVBQUU1UCxFQUFFNVQsRUFBRWdnRSxHQUFHLElBQUloL0IsRUFBRSxFQUFNLEdBQUpwdEIsRUFBRXpRLEVBQUssbUJBQW9CQSxFQUFFdzNGLEdBQUd4M0YsS0FBSzY5QixFQUFFLFFBQVEsR0FBRyxpQkFBa0I3OUIsRUFBRTY5QixFQUFFLE9BQU83OUIsRUFBRSxPQUFPQSxHQUFHLEtBQUsybEUsRUFBRyxPQUFPbW1CLEdBQUd6ckUsRUFBRXZlLFNBQVNqRixFQUFFZ2dFLEVBQUU1OEQsR0FBRyxLQUFLMmxFLEVBQUcvbkMsRUFBRSxFQUFFaGhDLEdBQUcsRUFBRSxNQUFNLEtBQUtncEUsRUFBRyxPQUFPN2xFLEVBQUVtcUYsR0FBRyxHQUFHOXBFLEVBQUVwZ0IsRUFBSSxFQUFGcEQsSUFBT3FtRSxZQUFZMkMsRUFBRzdsRSxFQUFFOHNGLE1BQU1qd0IsRUFBRTc4RCxFQUFFLEtBQUtpbUUsRUFBRyxPQUFPam1FLEVBQUVtcUYsR0FBRyxHQUFHOXBFLEVBQUVwZ0IsRUFBRXBELElBQUtxbUUsWUFBWStDLEVBQUdqbUUsRUFBRThzRixNQUFNandCLEVBQUU3OEQsRUFBRSxLQUFLa21FLEVBQUcsT0FBT2xtRSxFQUFFbXFGLEdBQUcsR0FBRzlwRSxFQUFFcGdCLEVBQUVwRCxJQUFLcW1FLFlBQVlnRCxFQUFHbG1FLEVBQUU4c0YsTUFBTWp3QixFQUFFNzhELEVBQUUsS0FBS3FtRSxFQUFHLE9BQU84eUIsR0FBRzk0RSxFQUFFeGpCLEVBQUVnZ0UsRUFBRTU4RCxHQUFHLFFBQVEsR0FBRyxpQkFBa0JELEdBQUcsT0FBT0EsRUFBRSxPQUFPQSxFQUFFaW5FLFVBQVUsS0FBS25CLEVBQUdqb0MsRUFBRSxHQUFHLE1BQU03OUIsRUFBRSxLQUFLK2xFLEVBQUdsb0MsRUFBRSxFQUFFLE1BQU03OUIsRUFBRSxLQUFLZ21FLEVBQUdub0MsRUFBRSxHQUNwZixNQUFNNzlCLEVBQUUsS0FBS21tRSxFQUFHdG9DLEVBQUUsR0FBRyxNQUFNNzlCLEVBQUUsS0FBS29tRSxFQUFHdm9DLEVBQUUsR0FBR3B0QixFQUFFLEtBQUssTUFBTXpRLEVBQUUsTUFBTXNELE1BQU10SyxFQUFFLElBQUksTUFBTWdILEVBQUVBLFNBQVNBLEVBQUUsS0FBdUQsT0FBakRDLEVBQUVrcUYsR0FBR3RzRCxFQUFFeGQsRUFBRXBnQixFQUFFcEQsSUFBS3FtRSxZQUFZbGpFLEVBQUVDLEVBQUUxRSxLQUFLa1YsRUFBRXhRLEVBQUU2c0YsTUFBTWp3QixFQUFTNThELENBQUMsQ0FBQyxTQUFTNnJGLEdBQUc5ckYsRUFBRUMsRUFBRW9nQixFQUFFNVAsR0FBMkIsT0FBeEJ6USxFQUFFbXFGLEdBQUcsRUFBRW5xRixFQUFFeVEsRUFBRXhRLElBQUs2c0YsTUFBTXpzRSxFQUFTcmdCLENBQUMsQ0FBQyxTQUFTbTVGLEdBQUduNUYsRUFBRUMsRUFBRW9nQixFQUFFNVAsR0FBdUUsT0FBcEV6USxFQUFFbXFGLEdBQUcsR0FBR25xRixFQUFFeVEsRUFBRXhRLElBQUtpakUsWUFBWW1ELEVBQUdybUUsRUFBRThzRixNQUFNenNFLEVBQUVyZ0IsRUFBRXV1RSxVQUFVLENBQUMwdUIsVUFBUyxHQUFXajlGLENBQUMsQ0FBQyxTQUFTMnJGLEdBQUczckYsRUFBRUMsRUFBRW9nQixHQUE4QixPQUEzQnJnQixFQUFFbXFGLEdBQUcsRUFBRW5xRixFQUFFLEtBQUtDLElBQUs2c0YsTUFBTXpzRSxFQUFTcmdCLENBQUMsQ0FDNVcsU0FBUzZyRixHQUFHN3JGLEVBQUVDLEVBQUVvZ0IsR0FBOEosT0FBM0pwZ0IsRUFBRWtxRixHQUFHLEVBQUUsT0FBT25xRixFQUFFOEIsU0FBUzlCLEVBQUU4QixTQUFTLEdBQUc5QixFQUFFd0UsSUFBSXZFLElBQUs2c0YsTUFBTXpzRSxFQUFFcGdCLEVBQUVzdUUsVUFBVSxDQUFDMEcsY0FBY2oxRSxFQUFFaTFFLGNBQWNvc0IsZ0JBQWdCLEtBQUtwc0csZUFBZStLLEVBQUUvSyxnQkFBdUJnTCxDQUFDLENBQ3RMLFNBQVNxaEcsR0FBR3RoRyxFQUFFQyxFQUFFb2dCLEVBQUU1UCxFQUFFNVQsR0FBRzFJLEtBQUs0d0IsSUFBSTlrQixFQUFFOUwsS0FBSzhnRixjQUFjajFFLEVBQUU3TCxLQUFLOHJHLGFBQWE5ckcsS0FBSzJpRyxVQUFVM2lHLEtBQUtrbEIsUUFBUWxsQixLQUFLa3RHLGdCQUFnQixLQUFLbHRHLEtBQUtnc0csZUFBZSxFQUFFaHNHLEtBQUs2cUcsYUFBYTdxRyxLQUFLc2tHLGVBQWV0a0csS0FBS21KLFFBQVEsS0FBS25KLEtBQUtpckcsaUJBQWlCLEVBQUVqckcsS0FBSysrRSxXQUFXRixHQUFHLEdBQUc3K0UsS0FBSzhxRyxnQkFBZ0Jqc0IsSUFBSSxHQUFHNytFLEtBQUt3K0UsZUFBZXgrRSxLQUFLK3JHLGNBQWMvckcsS0FBS3NzRyxpQkFBaUJ0c0csS0FBSytxRyxhQUFhL3FHLEtBQUt1K0UsWUFBWXYrRSxLQUFLcytFLGVBQWV0K0UsS0FBS3ErRSxhQUFhLEVBQUVyK0UsS0FBS3krRSxjQUFjSSxHQUFHLEdBQUc3K0UsS0FBSzBnRyxpQkFBaUJwa0YsRUFBRXRjLEtBQUsyc0csbUJBQW1CamtHLEVBQUUxSSxLQUFLb3RHLGdDQUMvZSxJQUFJLENBQUMsU0FBU0MsR0FBR3hoRyxFQUFFQyxFQUFFb2dCLEVBQUU1UCxFQUFFNVQsRUFBRWdnRSxFQUFFaC9CLEVBQUVpcEMsRUFBRXB5RSxHQUFnTixPQUE3TXNMLEVBQUUsSUFBSXNoRyxHQUFHdGhHLEVBQUVDLEVBQUVvZ0IsRUFBRXltRCxFQUFFcHlFLEdBQUcsSUFBSXVMLEdBQUdBLEVBQUUsR0FBRSxJQUFLNDhELElBQUk1OEQsR0FBRyxJQUFJQSxFQUFFLEVBQUU0OEQsRUFBRXN0QixHQUFHLEVBQUUsS0FBSyxLQUFLbHFGLEdBQUdELEVBQUVxWixRQUFRd2pELEVBQUVBLEVBQUUwUixVQUFVdnVFLEVBQUU2OEQsRUFBRW1ULGNBQWMsQ0FBQ3J3RSxRQUFROFEsRUFBRXVrRSxhQUFhMzBELEVBQUVvaEYsTUFBTSxLQUFLMUosWUFBWSxLQUFLMkosMEJBQTBCLE1BQU1sVSxHQUFHM3dCLEdBQVU3OEQsQ0FBQyxDQUN6UCxTQUFTMmhHLEdBQUczaEcsR0FBRyxJQUFJQSxFQUFFLE9BQU82bkYsR0FBdUI3bkYsRUFBRSxDQUFDLEdBQUc0dkUsR0FBMUI1dkUsRUFBRUEsRUFBRW0xRixtQkFBOEJuMUYsR0FBRyxJQUFJQSxFQUFFK2tCLElBQUksTUFBTXpoQixNQUFNdEssRUFBRSxNQUFNLElBQUlpSCxFQUFFRCxFQUFFLEVBQUUsQ0FBQyxPQUFPQyxFQUFFOGtCLEtBQUssS0FBSyxFQUFFOWtCLEVBQUVBLEVBQUVzdUUsVUFBVWp4RSxRQUFRLE1BQU0wQyxFQUFFLEtBQUssRUFBRSxHQUFHcW9GLEdBQUdwb0YsRUFBRTFFLE1BQU0sQ0FBQzBFLEVBQUVBLEVBQUVzdUUsVUFBVW1hLDBDQUEwQyxNQUFNMW9GLENBQUMsRUFBRUMsRUFBRUEsRUFBRTR2RSxNQUFNLE9BQU8sT0FBTzV2RSxHQUFHLE1BQU1xRCxNQUFNdEssRUFBRSxLQUFNLENBQUMsR0FBRyxJQUFJZ0gsRUFBRStrQixJQUFJLENBQUMsSUFBSTFFLEVBQUVyZ0IsRUFBRXpFLEtBQUssR0FBRzhzRixHQUFHaG9FLEdBQUcsT0FBT21vRSxHQUFHeG9GLEVBQUVxZ0IsRUFBRXBnQixFQUFFLENBQUMsT0FBT0EsQ0FBQyxDQUNwVyxTQUFTaEQsR0FBRytDLEVBQUVDLEVBQUVvZ0IsRUFBRTVQLEVBQUU1VCxFQUFFZ2dFLEVBQUVoL0IsRUFBRWlwQyxFQUFFcHlFLEdBQXdLLE9BQXJLc0wsRUFBRXdoRyxHQUFHbmhGLEVBQUU1UCxHQUFFLEVBQUd6USxFQUFFbkQsRUFBRWdnRSxFQUFFaC9CLEVBQUVpcEMsRUFBRXB5RSxJQUFLNEksUUFBUXFrRyxHQUFHLE1BQU10aEYsRUFBRXJnQixFQUFFcVosU0FBc0J3akQsRUFBRW14QixHQUFoQnY5RSxFQUFFZ2pGLEtBQUk1MkYsRUFBRXkyRixHQUFHanpFLEtBQWUyRixTQUFTLE1BQVMvbEIsRUFBWUEsRUFBRSxLQUFLbXVGLEdBQUcvdEUsRUFBRXc4QyxFQUFFaGdFLEdBQUdtRCxFQUFFcVosUUFBUXl6RSxNQUFNandGLEVBQUVvMkUsR0FBR2p6RSxFQUFFbkQsRUFBRTRULEdBQUdzdUYsR0FBRy8rRixFQUFFeVEsR0FBVXpRLENBQUMsQ0FBQyxTQUFTNGhHLEdBQUc1aEcsRUFBRUMsRUFBRW9nQixFQUFFNVAsR0FBRyxJQUFJNVQsRUFBRW9ELEVBQUVvWixRQUFRd2pELEVBQUU0MkIsS0FBSTUxRCxFQUFFeTFELEdBQUd6MkYsR0FBc0wsT0FBbkx3akIsRUFBRXNoRixHQUFHdGhGLEdBQUcsT0FBT3BnQixFQUFFM0MsUUFBUTJDLEVBQUUzQyxRQUFRK2lCLEVBQUVwZ0IsRUFBRXc0RixlQUFlcDRFLEdBQUVwZ0IsRUFBRSt0RixHQUFHbnhCLEVBQUVoL0IsSUFBS3N3RCxRQUFRLENBQUN4dUYsUUFBUUssR0FBdUIsUUFBcEJ5USxPQUFFLElBQVNBLEVBQUUsS0FBS0EsS0FBYXhRLEVBQUUrbEIsU0FBU3ZWLEdBQWUsUUFBWnpRLEVBQUVvdUYsR0FBR3Z4RixFQUFFb0QsRUFBRTQ5QixNQUFjczBELEdBQUdueUYsRUFBRW5ELEVBQUVnaEMsRUFBRWcvQixHQUFHeXhCLEdBQUd0dUYsRUFBRW5ELEVBQUVnaEMsSUFBV0EsQ0FBQyxDQUMzYixTQUFTZ2tFLEdBQUc3aEcsR0FBZSxPQUFaQSxFQUFFQSxFQUFFcVosU0FBY2pQLE9BQXlCcEssRUFBRW9LLE1BQU0yYSxJQUFvRC9rQixFQUFFb0ssTUFBTW1rRSxXQUFoRixJQUEwRixDQUFDLFNBQVN1ekIsR0FBRzloRyxFQUFFQyxHQUFxQixHQUFHLFFBQXJCRCxFQUFFQSxFQUFFZ3dFLGdCQUEyQixPQUFPaHdFLEVBQUVpd0UsV0FBVyxDQUFDLElBQUk1dkQsRUFBRXJnQixFQUFFeXFGLFVBQVV6cUYsRUFBRXlxRixVQUFVLElBQUlwcUUsR0FBR0EsRUFBRXBnQixFQUFFb2dCLEVBQUVwZ0IsQ0FBQyxDQUFDLENBQUMsU0FBUzhoRyxHQUFHL2hHLEVBQUVDLEdBQUc2aEcsR0FBRzloRyxFQUFFQyxJQUFJRCxFQUFFQSxFQUFFaTdDLFlBQVk2bUQsR0FBRzloRyxFQUFFQyxFQUFFLENBbkI3U3k5RixHQUFHLFNBQVMxOUYsRUFBRUMsRUFBRW9nQixHQUFHLEdBQUcsT0FBT3JnQixFQUFFLEdBQUdBLEVBQUU4cUYsZ0JBQWdCN3FGLEVBQUVxcUYsY0FBY3ZDLEdBQUcxdUUsUUFBUTB6RSxJQUFHLE1BQU8sQ0FBQyxLQUFRL3NGLEVBQUU4c0YsTUFBTXpzRSxHQUFpQixJQUFScGdCLEVBQUU2dkUsT0FBVyxPQUFPaWQsSUFBRyxFQXpFMUksU0FBWS9zRixFQUFFQyxFQUFFb2dCLEdBQUcsT0FBT3BnQixFQUFFOGtCLEtBQUssS0FBSyxFQUFFeXpFLEdBQUd2NEYsR0FBRytxRixLQUFLLE1BQU0sS0FBSyxFQUFFa0UsR0FBR2p2RixHQUFHLE1BQU0sS0FBSyxFQUFFb29GLEdBQUdwb0YsRUFBRTFFLE9BQU9rdEYsR0FBR3hvRixHQUFHLE1BQU0sS0FBSyxFQUFFK3VGLEdBQUcvdUYsRUFBRUEsRUFBRXN1RSxVQUFVMEcsZUFBZSxNQUFNLEtBQUssR0FBRyxJQUFJeGtFLEVBQUV4USxFQUFFMUUsS0FBS3NpQixTQUFTaGhCLEVBQUVvRCxFQUFFNnFGLGNBQWNyekYsTUFBTW13RixHQUFFdUUsR0FBRzE3RSxFQUFFZzhFLGVBQWVoOEUsRUFBRWc4RSxjQUFjNXZGLEVBQUUsTUFBTSxLQUFLLEdBQXFCLEdBQUcsUUFBckI0VCxFQUFFeFEsRUFBRSt2RSxlQUEyQixPQUFHLE9BQU92L0QsRUFBRXcvRCxZQUFrQjJYLEdBQUV3SCxHQUFZLEVBQVZBLEdBQUUvMUUsU0FBV3BaLEVBQUU2dkUsT0FBTyxJQUFJLE1BQWF6dkQsRUFBRXBnQixFQUFFbUssTUFBTXVpRixXQUFtQnNNLEdBQUdqNUYsRUFBRUMsRUFBRW9nQixJQUFHdW5FLEdBQUV3SCxHQUFZLEVBQVZBLEdBQUUvMUUsU0FBOEIsUUFBbkJyWixFQUFFczNGLEdBQUd0M0YsRUFBRUMsRUFBRW9nQixJQUFtQnJnQixFQUFFdWQsUUFBUSxNQUFLcXFFLEdBQUV3SCxHQUFZLEVBQVZBLEdBQUUvMUUsU0FBVyxNQUFNLEtBQUssR0FDN2QsR0FEZ2U1SSxLQUFPNFAsRUFDcmZwZ0IsRUFBRTBzRixZQUE0QixJQUFSM3NGLEVBQUU4dkUsTUFBVyxDQUFDLEdBQUdyL0QsRUFBRSxPQUFPMnBGLEdBQUdwNkYsRUFBRUMsRUFBRW9nQixHQUFHcGdCLEVBQUU2dkUsT0FBTyxHQUFHLENBQTZGLEdBQTFFLFFBQWxCanpFLEVBQUVvRCxFQUFFK3ZFLGlCQUF5Qm56RSxFQUFFbTlGLFVBQVUsS0FBS245RixFQUFFcTlGLEtBQUssS0FBS3I5RixFQUFFazFGLFdBQVcsTUFBTW5LLEdBQUV3SCxHQUFFQSxHQUFFLzFFLFNBQVk1SSxFQUFFLE1BQVcsT0FBTyxLQUFLLEtBQUssR0FBRyxLQUFLLEdBQUcsT0FBT3hRLEVBQUU2c0YsTUFBTSxFQUFFOEssR0FBRzUzRixFQUFFQyxFQUFFb2dCLEdBQUcsT0FBT2kzRSxHQUFHdDNGLEVBQUVDLEVBQUVvZ0IsRUFBRSxDQXdFN0cyaEYsQ0FBR2hpRyxFQUFFQyxFQUFFb2dCLEdBQUcwc0UsTUFBZ0IsT0FBUi9zRixFQUFFOHZFLE1BQW1CLE1BQU1pZCxJQUFHLEVBQUcvQyxJQUFnQixRQUFSL3BGLEVBQUU2dkUsT0FBZ0I2WixHQUFHMXBGLEVBQUVtcEYsR0FBR25wRixFQUFFK0YsT0FBaUIsT0FBVi9GLEVBQUU2c0YsTUFBTSxFQUFTN3NGLEVBQUU4a0IsS0FBSyxLQUFLLEVBQUUsSUFBSXRVLEVBQUV4USxFQUFFMUUsS0FBSzY4RixHQUFHcDRGLEVBQUVDLEdBQUdELEVBQUVDLEVBQUVxcUYsYUFBYSxJQUFJenRGLEVBQUVvckYsR0FBR2hvRixFQUFFNm5GLEdBQUV6dUUsU0FBU3M5QyxHQUFHMTJELEVBQUVvZ0IsR0FBR3hqQixFQUFFd3pGLEdBQUcsS0FBS3B3RixFQUFFd1EsRUFBRXpRLEVBQUVuRCxFQUFFd2pCLEdBQUcsSUFBSXc4QyxFQUFFNnpCLEtBQ3ZJLE9BRDRJendGLEVBQUU2dkUsT0FBTyxFQUFFLGlCQUFrQmp6RSxHQUFHLE9BQU9BLEdBQUcsbUJBQW9CQSxFQUFFbVUsYUFBUSxJQUFTblUsRUFBRW9xRSxVQUFVaG5FLEVBQUU4a0IsSUFBSSxFQUFFOWtCLEVBQUUrdkUsY0FBYyxLQUFLL3ZFLEVBQUV3dEYsWUFDMWUsS0FBS3BGLEdBQUc1M0UsSUFBSW9zRCxHQUFFLEVBQUc0ckIsR0FBR3hvRixJQUFJNDhELEdBQUUsRUFBRzU4RCxFQUFFK3ZFLGNBQWMsT0FBT256RSxFQUFFc0osWUFBTyxJQUFTdEosRUFBRXNKLE1BQU10SixFQUFFc0osTUFBTSxLQUFLcW5GLEdBQUd2dEYsR0FBR3BELEVBQUVtc0MsUUFBUWlzRCxHQUFHaDFGLEVBQUVzdUUsVUFBVTF4RSxFQUFFQSxFQUFFczRGLGdCQUFnQmwxRixFQUFFNDFGLEdBQUc1MUYsRUFBRXdRLEVBQUV6USxFQUFFcWdCLEdBQUdwZ0IsRUFBRXM0RixHQUFHLEtBQUt0NEYsRUFBRXdRLEdBQUUsRUFBR29zRCxFQUFFeDhDLEtBQUtwZ0IsRUFBRThrQixJQUFJLEVBQUVpbEUsSUFBR250QixHQUFHK3NCLEdBQUczcEYsR0FBR20zRixHQUFHLEtBQUtuM0YsRUFBRXBELEVBQUV3akIsR0FBR3BnQixFQUFFQSxFQUFFbUssT0FBY25LLEVBQUUsS0FBSyxHQUFHd1EsRUFBRXhRLEVBQUVpakUsWUFBWWxqRSxFQUFFLENBQXFGLE9BQXBGbzRGLEdBQUdwNEYsRUFBRUMsR0FBR0QsRUFBRUMsRUFBRXFxRixhQUF1Qjc1RSxHQUFWNVQsRUFBRTRULEVBQUUwMkQsT0FBVTEyRCxFQUFFeTJELFVBQVVqbkUsRUFBRTFFLEtBQUtrVixFQUFFNVQsRUFBRW9ELEVBQUU4a0IsSUFRdFUsU0FBWS9rQixHQUFHLEdBQUcsbUJBQW9CQSxFQUFFLE9BQU93M0YsR0FBR3gzRixHQUFHLEVBQUUsRUFBRSxHQUFHLE1BQVNBLEVBQVksQ0FBYyxJQUFiQSxFQUFFQSxFQUFFaW5FLFlBQWdCakIsRUFBRyxPQUFPLEdBQUcsR0FBR2htRSxJQUFJbW1FLEVBQUcsT0FBTyxFQUFFLENBQUMsT0FBTyxDQUFDLENBUjJMODdCLENBQUd4eEYsR0FBR3pRLEVBQUU4MEYsR0FBR3JrRixFQUFFelEsR0FBVW5ELEdBQUcsS0FBSyxFQUFFb0QsRUFBRTAzRixHQUFHLEtBQUsxM0YsRUFBRXdRLEVBQUV6USxFQUFFcWdCLEdBQUcsTUFBTXJnQixFQUFFLEtBQUssRUFBRUMsRUFBRWs0RixHQUFHLEtBQUtsNEYsRUFBRXdRLEVBQUV6USxFQUFFcWdCLEdBQUcsTUFBTXJnQixFQUFFLEtBQUssR0FBR0MsRUFBRW8zRixHQUFHLEtBQUtwM0YsRUFBRXdRLEVBQUV6USxFQUFFcWdCLEdBQUcsTUFBTXJnQixFQUFFLEtBQUssR0FBR0MsRUFBRXMzRixHQUFHLEtBQUt0M0YsRUFBRXdRLEVBQUVxa0YsR0FBR3JrRixFQUFFbFYsS0FBS3lFLEdBQUdxZ0IsR0FBRyxNQUFNcmdCLEVBQUUsTUFBTXNELE1BQU10SyxFQUFFLElBQ3ZnQnlYLEVBQUUsSUFBSyxDQUFDLE9BQU94USxFQUFFLEtBQUssRUFBRSxPQUFPd1EsRUFBRXhRLEVBQUUxRSxLQUFLc0IsRUFBRW9ELEVBQUVxcUYsYUFBMkNxTixHQUFHMzNGLEVBQUVDLEVBQUV3USxFQUFyQzVULEVBQUVvRCxFQUFFaWpFLGNBQWN6eUQsRUFBRTVULEVBQUVpNEYsR0FBR3JrRixFQUFFNVQsR0FBY3dqQixHQUFHLEtBQUssRUFBRSxPQUFPNVAsRUFBRXhRLEVBQUUxRSxLQUFLc0IsRUFBRW9ELEVBQUVxcUYsYUFBMkM2TixHQUFHbjRGLEVBQUVDLEVBQUV3USxFQUFyQzVULEVBQUVvRCxFQUFFaWpFLGNBQWN6eUQsRUFBRTVULEVBQUVpNEYsR0FBR3JrRixFQUFFNVQsR0FBY3dqQixHQUFHLEtBQUssRUFBRXJnQixFQUFFLENBQU8sR0FBTnc0RixHQUFHdjRGLEdBQU0sT0FBT0QsRUFBRSxNQUFNc0QsTUFBTXRLLEVBQUUsTUFBTXlYLEVBQUV4USxFQUFFcXFGLGFBQStCenRGLEdBQWxCZ2dFLEVBQUU1OEQsRUFBRSt2RSxlQUFrQnJ3RSxRQUFRb3VGLEdBQUcvdEYsRUFBRUMsR0FBR3V1RixHQUFHdnVGLEVBQUV3USxFQUFFLEtBQUs0UCxHQUFHLElBQUl3ZCxFQUFFNTlCLEVBQUUrdkUsY0FBMEIsR0FBWnYvRCxFQUFFb3RCLEVBQUVsK0IsUUFBV2s5RCxFQUFFbVksYUFBYSxJQUFHblksRUFBRSxDQUFDbDlELFFBQVE4USxFQUFFdWtFLGNBQWEsRUFBR3lzQixNQUFNNWpFLEVBQUU0akUsTUFBTUMsMEJBQTBCN2pFLEVBQUU2akUsMEJBQTBCM0osWUFBWWw2RCxFQUFFazZELGFBQWE5M0YsRUFBRXd0RixZQUFZL3NDLFVBQ2hmbWMsRUFBRTU4RCxFQUFFK3ZFLGNBQWNuVCxFQUFVLElBQVI1OEQsRUFBRTZ2RSxNQUFVLENBQXVCN3ZFLEVBQUV5NEYsR0FBRzE0RixFQUFFQyxFQUFFd1EsRUFBRTRQLEVBQWpDeGpCLEVBQUVtNUYsR0FBRzF5RixNQUFNdEssRUFBRSxNQUFNaUgsSUFBbUIsTUFBTUQsQ0FBQyxDQUFNLEdBQUd5USxJQUFJNVQsRUFBRSxDQUF1Qm9ELEVBQUV5NEYsR0FBRzE0RixFQUFFQyxFQUFFd1EsRUFBRTRQLEVBQWpDeGpCLEVBQUVtNUYsR0FBRzF5RixNQUFNdEssRUFBRSxNQUFNaUgsSUFBbUIsTUFBTUQsQ0FBQyxDQUFNLElBQUkrcEYsR0FBRzlDLEdBQUdobkYsRUFBRXN1RSxVQUFVMEcsY0FBYzUzRCxZQUFZeXNFLEdBQUc3cEYsRUFBRStwRixJQUFFLEVBQUdDLEdBQUcsS0FBSzVwRSxFQUFFNnJFLEdBQUdqc0YsRUFBRSxLQUFLd1EsRUFBRTRQLEdBQUdwZ0IsRUFBRW1LLE1BQU1pVyxFQUFFQSxHQUFHQSxFQUFFeXZELE9BQWUsRUFBVHp2RCxFQUFFeXZELE1BQVMsS0FBS3p2RCxFQUFFQSxFQUFFOUMsT0FBTyxLQUFLLENBQU0sR0FBTHl0RSxLQUFRdjZFLElBQUk1VCxFQUFFLENBQUNvRCxFQUFFcTNGLEdBQUd0M0YsRUFBRUMsRUFBRW9nQixHQUFHLE1BQU1yZ0IsQ0FBQyxDQUFDbzNGLEdBQUdwM0YsRUFBRUMsRUFBRXdRLEVBQUU0UCxFQUFFLENBQUNwZ0IsRUFBRUEsRUFBRW1LLEtBQUssQ0FBQyxPQUFPbkssRUFBRSxLQUFLLEVBQUUsT0FBT2l2RixHQUFHanZGLEdBQUcsT0FBT0QsR0FBRzJxRixHQUFHMXFGLEdBQUd3USxFQUFFeFEsRUFBRTFFLEtBQUtzQixFQUFFb0QsRUFBRXFxRixhQUFhenRCLEVBQUUsT0FBTzc4RCxFQUFFQSxFQUFFOHFGLGNBQWMsS0FBS2p0RCxFQUFFaGhDLEVBQUVpRixTQUFTc2tGLEdBQUczMUUsRUFBRTVULEdBQUdnaEMsRUFBRSxLQUFLLE9BQU9nL0IsR0FBR3VwQixHQUFHMzFFLEVBQUVvc0QsS0FBSzU4RCxFQUFFNnZFLE9BQU8sSUFDbmZvb0IsR0FBR2w0RixFQUFFQyxHQUFHbTNGLEdBQUdwM0YsRUFBRUMsRUFBRTQ5QixFQUFFeGQsR0FBR3BnQixFQUFFbUssTUFBTSxLQUFLLEVBQUUsT0FBTyxPQUFPcEssR0FBRzJxRixHQUFHMXFGLEdBQUcsS0FBSyxLQUFLLEdBQUcsT0FBT2c1RixHQUFHajVGLEVBQUVDLEVBQUVvZ0IsR0FBRyxLQUFLLEVBQUUsT0FBTzJ1RSxHQUFHL3VGLEVBQUVBLEVBQUVzdUUsVUFBVTBHLGVBQWV4a0UsRUFBRXhRLEVBQUVxcUYsYUFBYSxPQUFPdHFGLEVBQUVDLEVBQUVtSyxNQUFNNmhGLEdBQUdoc0YsRUFBRSxLQUFLd1EsRUFBRTRQLEdBQUcrMkUsR0FBR3AzRixFQUFFQyxFQUFFd1EsRUFBRTRQLEdBQUdwZ0IsRUFBRW1LLE1BQU0sS0FBSyxHQUFHLE9BQU9xRyxFQUFFeFEsRUFBRTFFLEtBQUtzQixFQUFFb0QsRUFBRXFxRixhQUEyQytNLEdBQUdyM0YsRUFBRUMsRUFBRXdRLEVBQXJDNVQsRUFBRW9ELEVBQUVpakUsY0FBY3p5RCxFQUFFNVQsRUFBRWk0RixHQUFHcmtGLEVBQUU1VCxHQUFjd2pCLEdBQUcsS0FBSyxFQUFFLE9BQU8rMkUsR0FBR3AzRixFQUFFQyxFQUFFQSxFQUFFcXFGLGFBQWFqcUUsR0FBR3BnQixFQUFFbUssTUFBTSxLQUFLLEVBQW1ELEtBQUssR0FBRyxPQUFPZ3RGLEdBQUdwM0YsRUFBRUMsRUFBRUEsRUFBRXFxRixhQUFheG9GLFNBQVN1ZSxHQUFHcGdCLEVBQUVtSyxNQUFNLEtBQUssR0FBR3BLLEVBQUUsQ0FDeFosR0FEeVp5USxFQUFFeFEsRUFBRTFFLEtBQUtzaUIsU0FBU2hoQixFQUFFb0QsRUFBRXFxRixhQUFhenRCLEVBQUU1OEQsRUFBRTZxRixjQUNsZmp0RCxFQUFFaGhDLEVBQUVwRixNQUFNbXdGLEdBQUV1RSxHQUFHMTdFLEVBQUVnOEUsZUFBZWg4RSxFQUFFZzhFLGNBQWM1dUQsRUFBSyxPQUFPZy9CLEVBQUUsR0FBR3lqQixHQUFHempCLEVBQUVwbEUsTUFBTW9tQyxJQUFJLEdBQUdnL0IsRUFBRS82RCxXQUFXakYsRUFBRWlGLFdBQVdpbUYsR0FBRzF1RSxRQUFRLENBQUNwWixFQUFFcTNGLEdBQUd0M0YsRUFBRUMsRUFBRW9nQixHQUFHLE1BQU1yZ0IsQ0FBQyxPQUFPLElBQWMsUUFBVjY4RCxFQUFFNThELEVBQUVtSyxTQUFpQnl5RCxFQUFFZ1QsT0FBTzV2RSxHQUFHLE9BQU80OEQsR0FBRyxDQUFDLElBQUlpSyxFQUFFakssRUFBRSt2QixhQUFhLEdBQUcsT0FBTzlsQixFQUFFLENBQUNqcEMsRUFBRWcvQixFQUFFenlELE1BQU0sSUFBSSxJQUFJMVYsRUFBRW95RSxFQUFFK2xCLGFBQWEsT0FBT240RixHQUFHLENBQUMsR0FBR0EsRUFBRTRJLFVBQVVtVCxFQUFFLENBQUMsR0FBRyxJQUFJb3NELEVBQUU5M0MsSUFBSSxFQUFDcndCLEVBQUVzNUYsSUFBSSxFQUFFM3RFLEdBQUdBLElBQUswRSxJQUFJLEVBQUUsSUFBSXZxQixFQUFFcWlFLEVBQUU0d0IsWUFBWSxHQUFHLE9BQU9qekYsRUFBRSxDQUFZLElBQUluQixHQUFmbUIsRUFBRUEsRUFBRW96RixRQUFlQyxRQUFRLE9BQU94MEYsRUFBRTNFLEVBQUU2VSxLQUFLN1UsR0FBR0EsRUFBRTZVLEtBQUtsUSxFQUFFa1EsS0FBS2xRLEVBQUVrUSxLQUFLN1UsR0FBRzhGLEVBQUVxekYsUUFBUW41RixDQUFDLENBQUMsQ0FBQ21vRSxFQUFFaXdCLE9BQU96c0UsRUFBZ0IsUUFBZDNyQixFQUFFbW9FLEVBQUU1aEIsYUFBcUJ2bUQsRUFBRW80RixPQUFPenNFLEdBQUdxc0UsR0FBRzd2QixFQUFFZ1QsT0FDbGZ4dkQsRUFBRXBnQixHQUFHNm1FLEVBQUVnbUIsT0FBT3pzRSxFQUFFLEtBQUssQ0FBQzNyQixFQUFFQSxFQUFFNlUsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLc3pELEVBQUU5M0MsSUFBSThZLEVBQUVnL0IsRUFBRXRoRSxPQUFPMEUsRUFBRTFFLEtBQUssS0FBS3NoRSxFQUFFenlELFdBQVcsR0FBRyxLQUFLeXlELEVBQUU5M0MsSUFBSSxDQUFZLEdBQUcsUUFBZDhZLEVBQUVnL0IsRUFBRWdULFFBQW1CLE1BQU12c0UsTUFBTXRLLEVBQUUsTUFBTTZrQyxFQUFFaXZELE9BQU96c0UsRUFBZ0IsUUFBZHltRCxFQUFFanBDLEVBQUVvZCxhQUFxQjZyQixFQUFFZ21CLE9BQU96c0UsR0FBR3FzRSxHQUFHN3VELEVBQUV4ZCxFQUFFcGdCLEdBQUc0OUIsRUFBRWcvQixFQUFFdC9DLE9BQU8sTUFBTXNnQixFQUFFZy9CLEVBQUV6eUQsTUFBTSxHQUFHLE9BQU95ekIsRUFBRUEsRUFBRWd5QyxPQUFPaFQsT0FBTyxJQUFJaC9CLEVBQUVnL0IsRUFBRSxPQUFPaC9CLEdBQUcsQ0FBQyxHQUFHQSxJQUFJNTlCLEVBQUUsQ0FBQzQ5QixFQUFFLEtBQUssS0FBSyxDQUFhLEdBQUcsUUFBZmcvQixFQUFFaC9CLEVBQUV0Z0IsU0FBb0IsQ0FBQ3MvQyxFQUFFZ1QsT0FBT2h5QyxFQUFFZ3lDLE9BQU9oeUMsRUFBRWcvQixFQUFFLEtBQUssQ0FBQ2gvQixFQUFFQSxFQUFFZ3lDLE1BQU0sQ0FBQ2hULEVBQUVoL0IsQ0FBQyxDQUFDdTVELEdBQUdwM0YsRUFBRUMsRUFBRXBELEVBQUVpRixTQUFTdWUsR0FBR3BnQixFQUFFQSxFQUFFbUssS0FBSyxDQUFDLE9BQU9uSyxFQUFFLEtBQUssRUFBRSxPQUFPcEQsRUFBRW9ELEVBQUUxRSxLQUFLa1YsRUFBRXhRLEVBQUVxcUYsYUFBYXhvRixTQUFTNjBELEdBQUcxMkQsRUFBRW9nQixHQUFXNVAsRUFBRUEsRUFBVjVULEVBQUVtd0YsR0FBR253RixJQUFVb0QsRUFBRTZ2RSxPQUFPLEVBQUVzbkIsR0FBR3AzRixFQUFFQyxFQUFFd1EsRUFBRTRQLEdBQ3BmcGdCLEVBQUVtSyxNQUFNLEtBQUssR0FBRyxPQUFnQnZOLEVBQUVpNEYsR0FBWHJrRixFQUFFeFEsRUFBRTFFLEtBQVkwRSxFQUFFcXFGLGNBQTZCaU4sR0FBR3YzRixFQUFFQyxFQUFFd1EsRUFBdEI1VCxFQUFFaTRGLEdBQUdya0YsRUFBRWxWLEtBQUtzQixHQUFjd2pCLEdBQUcsS0FBSyxHQUFHLE9BQU9xM0UsR0FBRzEzRixFQUFFQyxFQUFFQSxFQUFFMUUsS0FBSzBFLEVBQUVxcUYsYUFBYWpxRSxHQUFHLEtBQUssR0FBRyxPQUFPNVAsRUFBRXhRLEVBQUUxRSxLQUFLc0IsRUFBRW9ELEVBQUVxcUYsYUFBYXp0RixFQUFFb0QsRUFBRWlqRSxjQUFjenlELEVBQUU1VCxFQUFFaTRGLEdBQUdya0YsRUFBRTVULEdBQUd1N0YsR0FBR3A0RixFQUFFQyxHQUFHQSxFQUFFOGtCLElBQUksRUFBRXNqRSxHQUFHNTNFLElBQUl6USxHQUFFLEVBQUd5b0YsR0FBR3hvRixJQUFJRCxHQUFFLEVBQUcyMkQsR0FBRzEyRCxFQUFFb2dCLEdBQUdtMUUsR0FBR3YxRixFQUFFd1EsRUFBRTVULEdBQUdnNUYsR0FBRzUxRixFQUFFd1EsRUFBRTVULEVBQUV3akIsR0FBR2s0RSxHQUFHLEtBQUt0NEYsRUFBRXdRLEdBQUUsRUFBR3pRLEVBQUVxZ0IsR0FBRyxLQUFLLEdBQUcsT0FBTys1RSxHQUFHcDZGLEVBQUVDLEVBQUVvZ0IsR0FBRyxLQUFLLEdBQUcsT0FBT3UzRSxHQUFHNTNGLEVBQUVDLEVBQUVvZ0IsR0FBRyxNQUFNL2MsTUFBTXRLLEVBQUUsSUFBSWlILEVBQUU4a0IsS0FBTSxFQVl4QyxJQUFJbTlFLEdBQUcsbUJBQW9CN3FDLFlBQVlBLFlBQVksU0FBU3IzRCxHQUFHeWlDLFFBQVEvYixNQUFNMW1CLEVBQUUsRUFBRSxTQUFTbWlHLEdBQUduaUcsR0FBRzdMLEtBQUtpdUcsY0FBY3BpRyxDQUFDLENBQ2pJLFNBQVNxaUcsR0FBR3JpRyxHQUFHN0wsS0FBS2l1RyxjQUFjcGlHLENBQUMsQ0FDNUosU0FBU3NpRyxHQUFHdGlHLEdBQUcsU0FBU0EsR0FBRyxJQUFJQSxFQUFFZzNCLFVBQVUsSUFBSWgzQixFQUFFZzNCLFVBQVUsS0FBS2gzQixFQUFFZzNCLFNBQVMsQ0FBQyxTQUFTdXJFLEdBQUd2aUcsR0FBRyxTQUFTQSxHQUFHLElBQUlBLEVBQUVnM0IsVUFBVSxJQUFJaDNCLEVBQUVnM0IsVUFBVSxLQUFLaDNCLEVBQUVnM0IsV0FBVyxJQUFJaDNCLEVBQUVnM0IsVUFBVSxpQ0FBaUNoM0IsRUFBRTZwRSxXQUFXLENBQUMsU0FBUzI0QixLQUFLLENBRXhhLFNBQVNDLEdBQUd6aUcsRUFBRUMsRUFBRW9nQixFQUFFNVAsRUFBRTVULEdBQUcsSUFBSWdnRSxFQUFFeDhDLEVBQUUrN0Usb0JBQW9CLEdBQUd2L0IsRUFBRSxDQUFDLElBQUloL0IsRUFBRWcvQixFQUFFLEdBQUcsbUJBQW9CaGdFLEVBQUUsQ0FBQyxJQUFJaXFFLEVBQUVqcUUsRUFBRUEsRUFBRSxXQUFXLElBQUltRCxFQUFFNmhHLEdBQUdoa0UsR0FBR2lwQyxFQUFFM3ZFLEtBQUs2SSxFQUFFLENBQUMsQ0FBQzRoRyxHQUFHM2hHLEVBQUU0OUIsRUFBRTc5QixFQUFFbkQsRUFBRSxNQUFNZ2hDLEVBRHhKLFNBQVk3OUIsRUFBRUMsRUFBRW9nQixFQUFFNVAsRUFBRTVULEdBQUcsR0FBR0EsRUFBRSxDQUFDLEdBQUcsbUJBQW9CNFQsRUFBRSxDQUFDLElBQUlvc0QsRUFBRXBzRCxFQUFFQSxFQUFFLFdBQVcsSUFBSXpRLEVBQUU2aEcsR0FBR2hrRSxHQUFHZy9CLEVBQUUxbEUsS0FBSzZJLEVBQUUsQ0FBQyxDQUFDLElBQUk2OUIsRUFBRTVnQyxHQUFHZ0QsRUFBRXdRLEVBQUV6USxFQUFFLEVBQUUsTUFBSyxFQUFHLEVBQUcsR0FBR3dpRyxJQUFtRixPQUEvRXhpRyxFQUFFbzhGLG9CQUFvQnYrRCxFQUFFNzlCLEVBQUVtbEYsSUFBSXRuRCxFQUFFeGtCLFFBQVF1ckUsR0FBRyxJQUFJNWtGLEVBQUVnM0IsU0FBU2gzQixFQUFFaXVFLFdBQVdqdUUsR0FBR3FnRyxLQUFZeGlFLENBQUMsQ0FBQyxLQUFLaGhDLEVBQUVtRCxFQUFFNHBFLFdBQVc1cEUsRUFBRXdwRSxZQUFZM3NFLEdBQUcsR0FBRyxtQkFBb0I0VCxFQUFFLENBQUMsSUFBSXEyRCxFQUFFcjJELEVBQUVBLEVBQUUsV0FBVyxJQUFJelEsRUFBRTZoRyxHQUFHbnRHLEdBQUdveUUsRUFBRTN2RSxLQUFLNkksRUFBRSxDQUFDLENBQUMsSUFBSXRMLEVBQUU4c0csR0FBR3hoRyxFQUFFLEdBQUUsRUFBRyxLQUFLLEdBQUssRUFBRyxFQUFHLEdBQUd3aUcsSUFBMEcsT0FBdEd4aUcsRUFBRW84RixvQkFBb0IxbkcsRUFBRXNMLEVBQUVtbEYsSUFBSXp3RixFQUFFMmtCLFFBQVF1ckUsR0FBRyxJQUFJNWtGLEVBQUVnM0IsU0FBU2gzQixFQUFFaXVFLFdBQVdqdUUsR0FBR3FnRyxJQUFHLFdBQVd1QixHQUFHM2hHLEVBQUV2TCxFQUFFMnJCLEVBQUU1UCxFQUFFLElBQVUvYixDQUFDLENBQ3BVZ3VHLENBQUdyaUYsRUFBRXBnQixFQUFFRCxFQUFFbkQsRUFBRTRULEdBQUcsT0FBT294RixHQUFHaGtFLEVBQUUsQ0FIcEx3a0UsR0FBR3pzRyxVQUFVb2IsT0FBT214RixHQUFHdnNHLFVBQVVvYixPQUFPLFNBQVNoUixHQUFHLElBQUlDLEVBQUU5TCxLQUFLaXVHLGNBQWMsR0FBRyxPQUFPbmlHLEVBQUUsTUFBTXFELE1BQU10SyxFQUFFLE1BQU00b0csR0FBRzVoRyxFQUFFQyxFQUFFLEtBQUssS0FBSyxFQUFFb2lHLEdBQUd6c0csVUFBVXFwQyxRQUFRa2pFLEdBQUd2c0csVUFBVXFwQyxRQUFRLFdBQVcsSUFBSWovQixFQUFFN0wsS0FBS2l1RyxjQUFjLEdBQUcsT0FBT3BpRyxFQUFFLENBQUM3TCxLQUFLaXVHLGNBQWMsS0FBSyxJQUFJbmlHLEVBQUVELEVBQUVpMUUsY0FBY29yQixJQUFHLFdBQVd1QixHQUFHLEtBQUs1aEcsRUFBRSxLQUFLLEtBQUssSUFBR0MsRUFBRWtsRixJQUFJLElBQUksQ0FBQyxFQUN6VGtkLEdBQUd6c0csVUFBVStzRywyQkFBMkIsU0FBUzNpRyxHQUFHLEdBQUdBLEVBQUUsQ0FBQyxJQUFJQyxFQUFFd3pFLEtBQUt6ekUsRUFBRSxDQUFDeTBFLFVBQVUsS0FBS2pxRSxPQUFPeEssRUFBRSswRSxTQUFTOTBFLEdBQUcsSUFBSSxJQUFJb2dCLEVBQUUsRUFBRUEsRUFBRTZ6RCxHQUFHMS9FLFFBQVEsSUFBSXlMLEdBQUdBLEVBQUVpMEUsR0FBRzd6RCxHQUFHMDBELFNBQVMxMEQsS0FBSzZ6RCxHQUFHanVFLE9BQU9vYSxFQUFFLEVBQUVyZ0IsR0FBRyxJQUFJcWdCLEdBQUd3MEQsR0FBRzcwRSxFQUFFLENBQUMsRUFFWHN6RSxHQUFHLFNBQVN0ekUsR0FBRyxPQUFPQSxFQUFFK2tCLEtBQUssS0FBSyxFQUFFLElBQUk5a0IsRUFBRUQsRUFBRXV1RSxVQUFVLEdBQUd0dUUsRUFBRW9aLFFBQVEyMkQsY0FBY2dGLGFBQWEsQ0FBQyxJQUFJMzBELEVBQUVpeUQsR0FBR3J5RSxFQUFFdXlFLGNBQWMsSUFBSW55RCxJQUFJOHlELEdBQUdsekUsRUFBSSxFQUFGb2dCLEdBQUswK0UsR0FBRzkrRixFQUFFNndFLFFBQVksRUFBRnVkLE1BQU82TSxHQUFHcHFCLEtBQUksSUFBSWtZLE1BQU0sQ0FBQyxNQUFNLEtBQUssR0FBR3FYLElBQUcsV0FBVyxJQUFJcGdHLEVBQUVxdEYsR0FBR3R0RixFQUFFLEdBQUcsR0FBRyxPQUFPQyxFQUFFLENBQUMsSUFBSW9nQixFQUFFb3pFLEtBQUl0QixHQUFHbHlGLEVBQUVELEVBQUUsRUFBRXFnQixFQUFFLENBQUMsSUFBRzBoRixHQUFHL2hHLEVBQUUsR0FBRyxFQUMvYnV6RSxHQUFHLFNBQVN2ekUsR0FBRyxHQUFHLEtBQUtBLEVBQUUra0IsSUFBSSxDQUFDLElBQUk5a0IsRUFBRXF0RixHQUFHdHRGLEVBQUUsV0FBYyxPQUFPQyxHQUFha3lGLEdBQUdseUYsRUFBRUQsRUFBRSxVQUFYeXpGLE1BQXdCc08sR0FBRy9oRyxFQUFFLFVBQVUsQ0FBQyxFQUFFd3pFLEdBQUcsU0FBU3h6RSxHQUFHLEdBQUcsS0FBS0EsRUFBRStrQixJQUFJLENBQUMsSUFBSTlrQixFQUFFcXpGLEdBQUd0ekYsR0FBR3FnQixFQUFFaXRFLEdBQUd0dEYsRUFBRUMsR0FBTSxPQUFPb2dCLEdBQWE4eEUsR0FBRzl4RSxFQUFFcmdCLEVBQUVDLEVBQVh3ekYsTUFBZ0JzTyxHQUFHL2hHLEVBQUVDLEVBQUUsQ0FBQyxFQUFFd3pFLEdBQUcsV0FBVyxPQUFPTCxFQUFDLEVBQUVNLEdBQUcsU0FBUzF6RSxFQUFFQyxHQUFHLElBQUlvZ0IsRUFBRSt5RCxHQUFFLElBQUksT0FBT0EsR0FBRXB6RSxFQUFFQyxHQUFHLENBQUMsUUFBUW16RSxHQUFFL3lELENBQUMsQ0FBQyxFQUNsUzZ0RCxHQUFHLFNBQVNsdUUsRUFBRUMsRUFBRW9nQixHQUFHLE9BQU9wZ0IsR0FBRyxJQUFLLFFBQXlCLEdBQWpCcW9FLEVBQUd0b0UsRUFBRXFnQixHQUFHcGdCLEVBQUVvZ0IsRUFBRTNwQixLQUFRLFVBQVUycEIsRUFBRTlrQixNQUFNLE1BQU0wRSxFQUFFLENBQUMsSUFBSW9nQixFQUFFcmdCLEVBQUVxZ0IsRUFBRTR0RCxZQUFZNXRELEVBQUVBLEVBQUU0dEQsV0FBc0YsSUFBM0U1dEQsRUFBRUEsRUFBRXVpRixpQkFBaUIsY0FBYzMvRixLQUFLc1MsVUFBVSxHQUFHdFYsR0FBRyxtQkFBdUJBLEVBQUUsRUFBRUEsRUFBRW9nQixFQUFFN3JCLE9BQU95TCxJQUFJLENBQUMsSUFBSXdRLEVBQUU0UCxFQUFFcGdCLEdBQUcsR0FBR3dRLElBQUl6USxHQUFHeVEsRUFBRW95RixPQUFPN2lHLEVBQUU2aUcsS0FBSyxDQUFDLElBQUlobUcsRUFBRTJ4RSxHQUFHLzlELEdBQUcsSUFBSTVULEVBQUUsTUFBTXlHLE1BQU10SyxFQUFFLEtBQUs0dUUsRUFBR24zRCxHQUFHNjNELEVBQUc3M0QsRUFBRTVULEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxJQUFLLFdBQVdtc0UsR0FBR2hwRSxFQUFFcWdCLEdBQUcsTUFBTSxJQUFLLFNBQW1CLE9BQVZwZ0IsRUFBRW9nQixFQUFFNW9CLFFBQWVreEUsR0FBRzNvRSxJQUFJcWdCLEVBQUVxNkUsU0FBU3o2RixHQUFFLEdBQUksRUFBRTB1RSxHQUFHeXhCLEdBQUd4eEIsR0FBR3l4QixHQUNwYSxJQUFJeUMsR0FBRyxDQUFDQyx1QkFBc0IsRUFBR0MsT0FBTyxDQUFDMTBCLEdBQUdpUixHQUFHL1EsR0FBR0MsR0FBR0MsR0FBRzB4QixLQUFLNkMsR0FBRyxDQUFDQyx3QkFBd0JwdUIsR0FBR3F1QixXQUFXLEVBQUVDLFFBQVEsU0FBU0Msb0JBQW9CLGFBQzFJQyxHQUFHLENBQUNILFdBQVdGLEdBQUdFLFdBQVdDLFFBQVFILEdBQUdHLFFBQVFDLG9CQUFvQkosR0FBR0ksb0JBQW9CRSxlQUFlTixHQUFHTSxlQUFlQyxrQkFBa0IsS0FBS0MsNEJBQTRCLEtBQUtDLDRCQUE0QixLQUFLQyxjQUFjLEtBQUtDLHdCQUF3QixLQUFLQyx3QkFBd0IsS0FBS0MsZ0JBQWdCLEtBQUtDLG1CQUFtQixLQUFLQyxlQUFlLEtBQUtDLHFCQUFxQjMrQixFQUFHcXFCLHVCQUF1QnVVLHdCQUF3QixTQUFTbGtHLEdBQVcsT0FBTyxRQUFmQSxFQUFFbXdFLEdBQUdud0UsSUFBbUIsS0FBS0EsRUFBRXV1RSxTQUFTLEVBQUUyMEIsd0JBQXdCRCxHQUFHQyx5QkFSak4sV0FBYyxPQUFPLElBQUksRUFTcFVpQiw0QkFBNEIsS0FBS0MsZ0JBQWdCLEtBQUtDLGFBQWEsS0FBS0Msa0JBQWtCLEtBQUtDLGdCQUFnQixLQUFLQyxrQkFBa0IsbUNBQW1DLEdBQUcsb0JBQXFCQywrQkFBK0IsQ0FBQyxJQUFJQyxHQUFHRCwrQkFBK0IsSUFBSUMsR0FBR0MsWUFBWUQsR0FBR0UsY0FBYyxJQUFJaHpCLEdBQUc4eUIsR0FBR0csT0FBT3ZCLElBQUl6eEIsR0FBRzZ5QixFQUFFLENBQUMsTUFBTTFrRyxJQUFHLENBQUMsQ0FBQ2pNLEVBQVF3eEUsbURBQW1EdTlCLEdBQy9ZL3VHLEVBQVErd0csYUFBYSxTQUFTOWtHLEVBQUVDLEdBQUcsSUFBSW9nQixFQUFFLEVBQUU5ckIsVUFBVUMsYUFBUSxJQUFTRCxVQUFVLEdBQUdBLFVBQVUsR0FBRyxLQUFLLElBQUkrdEcsR0FBR3JpRyxHQUFHLE1BQU1xRCxNQUFNdEssRUFBRSxNQUFNLE9BYnVILFNBQVlnSCxFQUFFQyxFQUFFb2dCLEdBQUcsSUFBSTVQLEVBQUUsRUFBRWxjLFVBQVVDLGFBQVEsSUFBU0QsVUFBVSxHQUFHQSxVQUFVLEdBQUcsS0FBSyxNQUFNLENBQUMweUUsU0FBU3ZCLEVBQUdsaEUsSUFBSSxNQUFNaU0sRUFBRSxLQUFLLEdBQUdBLEVBQUUzTyxTQUFTOUIsRUFBRWkxRSxjQUFjaDFFLEVBQUVoTCxlQUFlb3JCLEVBQUUsQ0FhMVIwa0YsQ0FBRy9rRyxFQUFFQyxFQUFFLEtBQUtvZ0IsRUFBRSxFQUFFdHNCLEVBQVFpeEcsV0FBVyxTQUFTaGxHLEVBQUVDLEdBQUcsSUFBSXFpRyxHQUFHdGlHLEdBQUcsTUFBTXNELE1BQU10SyxFQUFFLE1BQU0sSUFBSXFuQixHQUFFLEVBQUc1UCxFQUFFLEdBQUc1VCxFQUFFcWxHLEdBQTRQLE9BQXpQLE1BQU9qaUcsS0FBZ0IsSUFBS0EsRUFBRWdsRyxzQkFBc0I1a0YsR0FBRSxRQUFJLElBQVNwZ0IsRUFBRTQwRixtQkFBbUJwa0YsRUFBRXhRLEVBQUU0MEYsdUJBQWtCLElBQVM1MEYsRUFBRTZnRyxxQkFBcUJqa0csRUFBRW9ELEVBQUU2Z0cscUJBQXFCN2dHLEVBQUV1aEcsR0FBR3hoRyxFQUFFLEdBQUUsRUFBRyxLQUFLLEVBQUtxZ0IsRUFBRSxFQUFHNVAsRUFBRTVULEdBQUdtRCxFQUFFbWxGLElBQUlsbEYsRUFBRW9aLFFBQVF1ckUsR0FBRyxJQUFJNWtGLEVBQUVnM0IsU0FBU2gzQixFQUFFaXVFLFdBQVdqdUUsR0FBVSxJQUFJbWlHLEdBQUdsaUcsRUFBRSxFQUNyZmxNLEVBQVFteEcsWUFBWSxTQUFTbGxHLEdBQUcsR0FBRyxNQUFNQSxFQUFFLE9BQU8sS0FBSyxHQUFHLElBQUlBLEVBQUVnM0IsU0FBUyxPQUFPaDNCLEVBQUUsSUFBSUMsRUFBRUQsRUFBRW0xRixnQkFBZ0IsUUFBRyxJQUFTbDFGLEVBQUUsQ0FBQyxHQUFHLG1CQUFvQkQsRUFBRWdSLE9BQU8sTUFBTTFOLE1BQU10SyxFQUFFLE1BQWlDLE1BQTNCZ0gsRUFBRXRJLE9BQU82SyxLQUFLdkMsR0FBRzBGLEtBQUssS0FBV3BDLE1BQU10SyxFQUFFLElBQUlnSCxHQUFJLENBQXFDLE9BQTFCLFFBQVZBLEVBQUVtd0UsR0FBR2x3RSxJQUFjLEtBQUtELEVBQUV1dUUsU0FBa0IsRUFBRXg2RSxFQUFRb3hHLFVBQVUsU0FBU25sRyxHQUFHLE9BQU9xZ0csR0FBR3JnRyxFQUFFLEVBQUVqTSxFQUFRcXhHLFFBQVEsU0FBU3BsRyxFQUFFQyxFQUFFb2dCLEdBQUcsSUFBSWtpRixHQUFHdGlHLEdBQUcsTUFBTXFELE1BQU10SyxFQUFFLE1BQU0sT0FBT3lwRyxHQUFHLEtBQUt6aUcsRUFBRUMsR0FBRSxFQUFHb2dCLEVBQUUsRUFDL1l0c0IsRUFBUXN4RyxZQUFZLFNBQVNybEcsRUFBRUMsRUFBRW9nQixHQUFHLElBQUlpaUYsR0FBR3RpRyxHQUFHLE1BQU1zRCxNQUFNdEssRUFBRSxNQUFNLElBQUl5WCxFQUFFLE1BQU00UCxHQUFHQSxFQUFFaWxGLGlCQUFpQixLQUFLem9HLEdBQUUsRUFBR2dnRSxFQUFFLEdBQUdoL0IsRUFBRXFrRSxHQUF5TyxHQUF0TyxNQUFPN2hGLEtBQWdCLElBQUtBLEVBQUU0a0Ysc0JBQXNCcG9HLEdBQUUsUUFBSSxJQUFTd2pCLEVBQUV3MEUsbUJBQW1CaDRCLEVBQUV4OEMsRUFBRXcwRSx1QkFBa0IsSUFBU3gwRSxFQUFFeWdGLHFCQUFxQmpqRSxFQUFFeGQsRUFBRXlnRixxQkFBcUI3Z0csRUFBRWhELEdBQUdnRCxFQUFFLEtBQUtELEVBQUUsRUFBRSxNQUFNcWdCLEVBQUVBLEVBQUUsS0FBS3hqQixFQUFFLEVBQUdnZ0UsRUFBRWgvQixHQUFHNzlCLEVBQUVtbEYsSUFBSWxsRixFQUFFb1osUUFBUXVyRSxHQUFHNWtGLEdBQU15USxFQUFFLElBQUl6USxFQUFFLEVBQUVBLEVBQUV5USxFQUFFamMsT0FBT3dMLElBQTJCbkQsR0FBaEJBLEdBQVB3akIsRUFBRTVQLEVBQUV6USxJQUFPdWxHLGFBQWdCbGxGLEVBQUVtbEYsU0FBUyxNQUFNdmxHLEVBQUVzaEcsZ0NBQWdDdGhHLEVBQUVzaEcsZ0NBQWdDLENBQUNsaEYsRUFBRXhqQixHQUFHb0QsRUFBRXNoRyxnQ0FBZ0M5b0csS0FBSzRuQixFQUN2aEJ4akIsR0FBRyxPQUFPLElBQUl3bEcsR0FBR3BpRyxFQUFFLEVBQUVsTSxFQUFRaWQsT0FBTyxTQUFTaFIsRUFBRUMsRUFBRW9nQixHQUFHLElBQUlraUYsR0FBR3RpRyxHQUFHLE1BQU1xRCxNQUFNdEssRUFBRSxNQUFNLE9BQU95cEcsR0FBRyxLQUFLemlHLEVBQUVDLEdBQUUsRUFBR29nQixFQUFFLEVBQUV0c0IsRUFBUTB4Ryx1QkFBdUIsU0FBU3psRyxHQUFHLElBQUl1aUcsR0FBR3ZpRyxHQUFHLE1BQU1zRCxNQUFNdEssRUFBRSxLQUFLLFFBQU9nSCxFQUFFbzhGLHNCQUFxQmlFLElBQUcsV0FBV29DLEdBQUcsS0FBSyxLQUFLemlHLEdBQUUsR0FBRyxXQUFXQSxFQUFFbzhGLG9CQUFvQixLQUFLcDhGLEVBQUVtbEYsSUFBSSxJQUFJLEdBQUUsS0FBRyxFQUFNLEVBQUVweEYsRUFBUTJ4Ryx3QkFBd0J0RixHQUMvVXJzRyxFQUFRNHhHLG9DQUFvQyxTQUFTM2xHLEVBQUVDLEVBQUVvZ0IsRUFBRTVQLEdBQUcsSUFBSTh4RixHQUFHbGlGLEdBQUcsTUFBTS9jLE1BQU10SyxFQUFFLE1BQU0sR0FBRyxNQUFNZ0gsUUFBRyxJQUFTQSxFQUFFbTFGLGdCQUFnQixNQUFNN3hGLE1BQU10SyxFQUFFLEtBQUssT0FBT3lwRyxHQUFHemlHLEVBQUVDLEVBQUVvZ0IsR0FBRSxFQUFHNVAsRUFBRSxFQUFFMWMsRUFBUXF2RyxRQUFRLCtEQy9UN0wsSUFBSS9wRyxFQUFJLEVBQVEsS0FFZHRGLEVBQVFpeEcsV0FBYTNyRyxFQUFFMnJHLFdBQ3ZCanhHLEVBQVFzeEcsWUFBY2hzRyxFQUFFZ3NHLHlDQ0gxQixTQUFTTyxJQUVQLEdBQzRDLG9CQUFuQ25CLGdDQUM0QyxtQkFBNUNBLCtCQUErQm1CLFNBY3hDLElBRUVuQiwrQkFBK0JtQixTQUFTQSxFQUMxQyxDQUFFLE1BQU8xckUsR0FHUHVJLFFBQVEvYixNQUFNd1QsRUFDaEIsQ0FDRixDQUtFMHJFLEdBQ0E5eEcsRUFBT0MsUUFBVSxFQUFqQixpQ0N6QlcsSUFBSXlHLEVBQUUyVSxPQUFPczJELElBQUksaUJBQWlCMXNFLEVBQUVvVyxPQUFPczJELElBQUksZ0JBQWdCenNFLEVBQUVtVyxPQUFPczJELElBQUksa0JBQWtCc21CLEVBQUU1OEUsT0FBT3MyRCxJQUFJLHFCQUFxQmwwRCxFQUFFcEMsT0FBT3MyRCxJQUFJLGtCQUFrQjdzRSxFQUFFdVcsT0FBT3MyRCxJQUFJLGtCQUFrQnVmLEVBQUU3MUUsT0FBT3MyRCxJQUFJLGlCQUFpQnpyRSxFQUFFbVYsT0FBT3MyRCxJQUFJLHFCQUFxQnpQLEVBQUU3bUQsT0FBT3MyRCxJQUFJLGtCQUFrQjd4RCxFQUFFekUsT0FBT3MyRCxJQUFJLGNBQWN1bUIsRUFBRTc4RSxPQUFPczJELElBQUksY0FBY2IsRUFBRXoxRCxPQUFPQyxTQUNyVzBoRSxFQUFFLENBQUNva0IsVUFBVSxXQUFXLE9BQU0sQ0FBRSxFQUFFSSxtQkFBbUIsV0FBVyxFQUFFRCxvQkFBb0IsV0FBVyxFQUFFRCxnQkFBZ0IsV0FBVyxHQUFHaGlCLEVBQUUxN0UsT0FBT2lCLE9BQU8yckYsRUFBRSxDQUFDLEVBQUUsU0FBU3FELEVBQUUzbkYsRUFBRUMsRUFBRXBELEdBQUcxSSxLQUFLc3ZCLE1BQU16akIsRUFBRTdMLEtBQUttSixRQUFRMkMsRUFBRTlMLEtBQUt5cUMsS0FBSzBsRCxFQUFFbndGLEtBQUs2MEMsUUFBUW5zQyxHQUFHaTBFLENBQUMsQ0FDd0ksU0FBU21VLElBQUksQ0FBeUIsU0FBUzJDLEVBQUU1bkYsRUFBRUMsRUFBRXBELEdBQUcxSSxLQUFLc3ZCLE1BQU16akIsRUFBRTdMLEtBQUttSixRQUFRMkMsRUFBRTlMLEtBQUt5cUMsS0FBSzBsRCxFQUFFbndGLEtBQUs2MEMsUUFBUW5zQyxHQUFHaTBFLENBQUMsQ0FEeFA2VyxFQUFFL3hGLFVBQVV3ckcsaUJBQWlCLENBQUMsRUFDcFF6WixFQUFFL3hGLFVBQVUwcEMsU0FBUyxTQUFTdC9CLEVBQUVDLEdBQUcsR0FBRyxpQkFBa0JELEdBQUcsbUJBQW9CQSxHQUFHLE1BQU1BLEVBQUUsTUFBTXNELE1BQU0seUhBQXlIblAsS0FBSzYwQyxRQUFRb3NELGdCQUFnQmpoRyxLQUFLNkwsRUFBRUMsRUFBRSxXQUFXLEVBQUUwbkYsRUFBRS94RixVQUFVaXdHLFlBQVksU0FBUzdsRyxHQUFHN0wsS0FBSzYwQyxRQUFRc3NELG1CQUFtQm5oRyxLQUFLNkwsRUFBRSxjQUFjLEVBQWdCaWxGLEVBQUVydkYsVUFBVSt4RixFQUFFL3hGLFVBQXNGLElBQUlreUYsRUFBRUYsRUFBRWh5RixVQUFVLElBQUlxdkYsRUFDcmY2QyxFQUFFajNFLFlBQVkrMkUsRUFBRXhVLEVBQUUwVSxFQUFFSCxFQUFFL3hGLFdBQVdreUYsRUFBRXZoRCxzQkFBcUIsRUFBRyxJQUFJeWpELEVBQUVyMEYsTUFBTXdJLFFBQVE0bUYsRUFBRXJ0RixPQUFPOUIsVUFBVXFELGVBQWVvMUYsRUFBRSxDQUFDaDFFLFFBQVEsTUFBTSsxRSxFQUFFLENBQUM1cUYsS0FBSSxFQUFHNG1GLEtBQUksRUFBRzBhLFFBQU8sRUFBR0MsVUFBUyxHQUN0SyxTQUFTalcsRUFBRTl2RixFQUFFQyxFQUFFcEQsR0FBRyxJQUFJNFQsRUFBRTRQLEVBQUUsQ0FBQyxFQUFFM3JCLEVBQUUsS0FBS295RSxFQUFFLEtBQUssR0FBRyxNQUFNN21FLEVBQUUsSUFBSXdRLFVBQUssSUFBU3hRLEVBQUVtckYsTUFBTXRrQixFQUFFN21FLEVBQUVtckYsVUFBSyxJQUFTbnJGLEVBQUV1RSxNQUFNOVAsRUFBRSxHQUFHdUwsRUFBRXVFLEtBQUt2RSxFQUFFOGtGLEVBQUU1dEYsS0FBSzhJLEVBQUV3USxLQUFLMitFLEVBQUVuMkYsZUFBZXdYLEtBQUs0UCxFQUFFNVAsR0FBR3hRLEVBQUV3USxJQUFJLElBQUlvdEIsRUFBRXRwQyxVQUFVQyxPQUFPLEVBQUUsR0FBRyxJQUFJcXBDLEVBQUV4ZCxFQUFFdmUsU0FBU2pGLE9BQU8sR0FBRyxFQUFFZ2hDLEVBQUUsQ0FBQyxJQUFJLElBQUlnL0IsRUFBRWxuRSxNQUFNa29DLEdBQUd4a0MsRUFBRSxFQUFFQSxFQUFFd2tDLEVBQUV4a0MsSUFBSXdqRSxFQUFFeGpFLEdBQUc5RSxVQUFVOEUsRUFBRSxHQUFHZ25CLEVBQUV2ZSxTQUFTKzZELENBQUMsQ0FBQyxHQUFHNzhELEdBQUdBLEVBQUUrMEYsYUFBYSxJQUFJdGtGLEtBQUtvdEIsRUFBRTc5QixFQUFFKzBGLGtCQUFlLElBQVMxMEUsRUFBRTVQLEtBQUs0UCxFQUFFNVAsR0FBR290QixFQUFFcHRCLElBQUksTUFBTSxDQUFDdzJELFNBQVN6c0UsRUFBRWUsS0FBS3lFLEVBQUV3RSxJQUFJOVAsRUFBRTAyRixJQUFJdGtCLEVBQUVyakQsTUFBTXBELEVBQUVnckUsT0FBT2dELEVBQUVoMUUsUUFBUSxDQUNoVixTQUFTbmxCLEVBQUU4TCxHQUFHLE1BQU0saUJBQWtCQSxHQUFHLE9BQU9BLEdBQUdBLEVBQUVpbkUsV0FBV3pzRSxDQUFDLENBQW9HLElBQUlvNUMsRUFBRSxPQUFPLFNBQVNpK0MsRUFBRTd4RixFQUFFQyxHQUFHLE1BQU0saUJBQWtCRCxHQUFHLE9BQU9BLEdBQUcsTUFBTUEsRUFBRXdFLElBQTdLLFNBQWdCeEUsR0FBRyxJQUFJQyxFQUFFLENBQUMsSUFBSSxLQUFLLElBQUksTUFBTSxNQUFNLElBQUlELEVBQUVvSCxRQUFRLFNBQVEsU0FBU3BILEdBQUcsT0FBT0MsRUFBRUQsRUFBRSxHQUFFLENBQStFb3pCLENBQU8sR0FBR3B6QixFQUFFd0UsS0FBS3ZFLEVBQUVzSCxTQUFTLEdBQUcsQ0FDL1csU0FBU2tzRixFQUFFenpGLEVBQUVDLEVBQUVwRCxFQUFFNFQsRUFBRTRQLEdBQUcsSUFBSTNyQixTQUFTc0wsRUFBSyxjQUFjdEwsR0FBRyxZQUFZQSxJQUFFc0wsRUFBRSxNQUFLLElBQUk4bUUsR0FBRSxFQUFHLEdBQUcsT0FBTzltRSxFQUFFOG1FLEdBQUUsT0FBUSxPQUFPcHlFLEdBQUcsSUFBSyxTQUFTLElBQUssU0FBU295RSxHQUFFLEVBQUcsTUFBTSxJQUFLLFNBQVMsT0FBTzltRSxFQUFFaW5FLFVBQVUsS0FBS3pzRSxFQUFFLEtBQUt6QixFQUFFK3RFLEdBQUUsR0FBSSxHQUFHQSxFQUFFLE9BQVd6bUQsRUFBRUEsRUFBTnltRCxFQUFFOW1FLEdBQVNBLEVBQUUsS0FBS3lRLEVBQUUsSUFBSW9oRixFQUFFL3FCLEVBQUUsR0FBR3IyRCxFQUFFdTVFLEVBQUUzcEUsSUFBSXhqQixFQUFFLEdBQUcsTUFBTW1ELElBQUluRCxFQUFFbUQsRUFBRW9ILFFBQVF3c0MsRUFBRSxPQUFPLEtBQUs2L0MsRUFBRXB6RSxFQUFFcGdCLEVBQUVwRCxFQUFFLElBQUcsU0FBU21ELEdBQUcsT0FBT0EsQ0FBQyxLQUFJLE1BQU1xZ0IsSUFBSW5zQixFQUFFbXNCLEtBQUtBLEVBRG5XLFNBQVdyZ0IsRUFBRUMsR0FBRyxNQUFNLENBQUNnbkUsU0FBU3pzRSxFQUFFZSxLQUFLeUUsRUFBRXpFLEtBQUtpSixJQUFJdkUsRUFBRW1yRixJQUFJcHJGLEVBQUVvckYsSUFBSTNuRSxNQUFNempCLEVBQUV5akIsTUFBTTRuRSxPQUFPcnJGLEVBQUVxckYsT0FBTyxDQUN5UTBFLENBQUUxdkUsRUFBRXhqQixJQUFJd2pCLEVBQUU3YixLQUFLc2lFLEdBQUdBLEVBQUV0aUUsTUFBTTZiLEVBQUU3YixJQUFJLElBQUksR0FBRzZiLEVBQUU3YixLQUFLNEMsUUFBUXdzQyxFQUFFLE9BQU8sS0FBSzV6QyxJQUFJQyxFQUFFeEgsS0FBSzRuQixJQUFJLEVBQXlCLEdBQXZCeW1ELEVBQUUsRUFBRXIyRCxFQUFFLEtBQUtBLEVBQUUsSUFBSUEsRUFBRSxJQUFPdTVFLEVBQUVocUYsR0FBRyxJQUFJLElBQUk2OUIsRUFBRSxFQUFFQSxFQUFFNzlCLEVBQUV4TCxPQUFPcXBDLElBQUksQ0FDL2UsSUFBSWcvQixFQUFFcHNELEVBQUVvaEYsRUFEd2VuOUYsRUFDcmZzTCxFQUFFNjlCLEdBQWVBLEdBQUdpcEMsR0FBRzJzQixFQUFFLytGLEVBQUV1TCxFQUFFcEQsRUFBRWdnRSxFQUFFeDhDLEVBQUUsTUFBTSxHQUFHdzhDLEVBUHNVLFNBQVc3OEQsR0FBRyxPQUFHLE9BQU9BLEdBQUcsaUJBQWtCQSxFQUFTLEtBQXNDLG1CQUFqQ0EsRUFBRTRrRSxHQUFHNWtFLEVBQUU0a0UsSUFBSTVrRSxFQUFFLGVBQTBDQSxFQUFFLElBQUksQ0FPNWJ2TCxDQUFFdUwsR0FBRyxtQkFBb0I2OEQsRUFBRSxJQUFJNzhELEVBQUU2OEQsRUFBRTFsRSxLQUFLNkksR0FBRzY5QixFQUFFLElBQUlucEMsRUFBRXNMLEVBQUV1SixRQUFRMmMsTUFBNkI0Z0QsR0FBRzJzQixFQUExQi8rRixFQUFFQSxFQUFFK0MsTUFBMEJ3SSxFQUFFcEQsRUFBdEJnZ0UsRUFBRXBzRCxFQUFFb2hGLEVBQUVuOUYsRUFBRW1wQyxLQUFrQnhkLFFBQVEsR0FBRyxXQUFXM3JCLEVBQUUsTUFBTXVMLEVBQUU4QyxPQUFPL0MsR0FBR3NELE1BQU0sbURBQW1ELG9CQUFvQnJELEVBQUUscUJBQXFCdkksT0FBTzZLLEtBQUt2QyxHQUFHMEYsS0FBSyxNQUFNLElBQUl6RixHQUFHLDZFQUE2RSxPQUFPNm1FLENBQUMsQ0FDelosU0FBU3d6QixFQUFFdDZGLEVBQUVDLEVBQUVwRCxHQUFHLEdBQUcsTUFBTW1ELEVBQUUsT0FBT0EsRUFBRSxJQUFJeVEsRUFBRSxHQUFHNFAsRUFBRSxFQUFtRCxPQUFqRG96RSxFQUFFenpGLEVBQUV5USxFQUFFLEdBQUcsSUFBRyxTQUFTelEsR0FBRyxPQUFPQyxFQUFFOUksS0FBSzBGLEVBQUVtRCxFQUFFcWdCLElBQUksSUFBVTVQLENBQUMsQ0FBQyxTQUFTd3FGLEVBQUVqN0YsR0FBRyxJQUFJLElBQUlBLEVBQUVnbUcsUUFBUSxDQUFDLElBQUkvbEcsRUFBRUQsRUFBRWltRyxTQUFRaG1HLEVBQUVBLEtBQU00bUYsTUFBSyxTQUFTNW1GLEdBQU0sSUFBSUQsRUFBRWdtRyxVQUFVLElBQUlobUcsRUFBRWdtRyxVQUFRaG1HLEVBQUVnbUcsUUFBUSxFQUFFaG1HLEVBQUVpbUcsUUFBUWhtRyxFQUFDLElBQUUsU0FBU0EsR0FBTSxJQUFJRCxFQUFFZ21HLFVBQVUsSUFBSWhtRyxFQUFFZ21HLFVBQVFobUcsRUFBRWdtRyxRQUFRLEVBQUVobUcsRUFBRWltRyxRQUFRaG1HLEVBQUMsS0FBSSxJQUFJRCxFQUFFZ21HLFVBQVVobUcsRUFBRWdtRyxRQUFRLEVBQUVobUcsRUFBRWltRyxRQUFRaG1HLEVBQUUsQ0FBQyxHQUFHLElBQUlELEVBQUVnbUcsUUFBUSxPQUFPaG1HLEVBQUVpbUcsUUFBUTcxRixRQUFRLE1BQU1wUSxFQUFFaW1HLE9BQVEsQ0FDNVosSUFBSTNLLEVBQUUsQ0FBQ2ppRixRQUFRLE1BQU1taUYsRUFBRSxDQUFDM2xCLFdBQVcsTUFBTTZsQixFQUFFLENBQUMvTCx1QkFBdUIyTCxFQUFFNWxCLHdCQUF3QjhsQixFQUFFckUsa0JBQWtCOUksR0FBRyxTQUFTaU8sSUFBSSxNQUFNaDVGLE1BQU0sMkRBQTRELENBQ3pNdlAsRUFBUW15RyxTQUFTLENBQUNybUcsSUFBSXk2RixFQUFFdDlGLFFBQVEsU0FBU2dELEVBQUVDLEVBQUVwRCxHQUFHeTlGLEVBQUV0NkYsR0FBRSxXQUFXQyxFQUFFN0ssTUFBTWpCLEtBQUtJLFVBQVUsR0FBRXNJLEVBQUUsRUFBRTZnRCxNQUFNLFNBQVMxOUMsR0FBRyxJQUFJQyxFQUFFLEVBQXVCLE9BQXJCcTZGLEVBQUV0NkYsR0FBRSxXQUFXQyxHQUFHLElBQVVBLENBQUMsRUFBRTRFLFFBQVEsU0FBUzdFLEdBQUcsT0FBT3M2RixFQUFFdDZGLEdBQUUsU0FBU0EsR0FBRyxPQUFPQSxDQUFDLEtBQUksRUFBRSxFQUFFbW1HLEtBQUssU0FBU25tRyxHQUFHLElBQUk5TCxFQUFFOEwsR0FBRyxNQUFNc0QsTUFBTSx5RUFBeUUsT0FBT3RELENBQUMsR0FBR2pNLEVBQVFpekMsVUFBVTJnRCxFQUFFNXpGLEVBQVFxeUcsU0FBU3B0RyxFQUFFakYsRUFBUXN5RyxTQUFTOTBGLEVBQUV4ZCxFQUFRdXlHLGNBQWMxZSxFQUFFN3pGLEVBQVF3eUcsV0FBV3hhLEVBQUVoNEYsRUFBUXl5RyxTQUFTeHdDLEVBQ2xjamlFLEVBQVF3eEUsbURBQW1EbTJCLEVBQUUzbkcsRUFBUTB5RyxJQUFJbkssRUFDekV2b0csRUFBUXFyQyxhQUFhLFNBQVNwL0IsRUFBRUMsRUFBRXBELEdBQUcsR0FBRyxNQUFPbUQsRUFBYyxNQUFNc0QsTUFBTSxpRkFBaUZ0RCxFQUFFLEtBQUssSUFBSXlRLEVBQUUyaUUsRUFBRSxDQUFDLEVBQUVwekUsRUFBRXlqQixPQUFPcEQsRUFBRXJnQixFQUFFd0UsSUFBSTlQLEVBQUVzTCxFQUFFb3JGLElBQUl0a0IsRUFBRTltRSxFQUFFcXJGLE9BQU8sR0FBRyxNQUFNcHJGLEVBQUUsQ0FBb0UsUUFBbkUsSUFBU0EsRUFBRW1yRixNQUFNMTJGLEVBQUV1TCxFQUFFbXJGLElBQUl0a0IsRUFBRXVuQixFQUFFaDFFLGNBQVMsSUFBU3BaLEVBQUV1RSxNQUFNNmIsRUFBRSxHQUFHcGdCLEVBQUV1RSxLQUFReEUsRUFBRXpFLE1BQU15RSxFQUFFekUsS0FBS3c1RixhQUFhLElBQUlsM0QsRUFBRTc5QixFQUFFekUsS0FBS3c1RixhQUFhLElBQUlsNEIsS0FBSzU4RCxFQUFFOGtGLEVBQUU1dEYsS0FBSzhJLEVBQUU0OEQsS0FBS3V5QixFQUFFbjJGLGVBQWU0akUsS0FBS3BzRCxFQUFFb3NELFFBQUcsSUFBUzU4RCxFQUFFNDhELFNBQUksSUFBU2gvQixFQUFFQSxFQUFFZy9CLEdBQUc1OEQsRUFBRTQ4RCxHQUFHLENBQUMsSUFBSUEsRUFBRXRvRSxVQUFVQyxPQUFPLEVBQUUsR0FBRyxJQUFJcW9FLEVBQUVwc0QsRUFBRTNPLFNBQVNqRixPQUFPLEdBQUcsRUFBRWdnRSxFQUFFLENBQUNoL0IsRUFBRWxvQyxNQUFNa25FLEdBQ3JmLElBQUksSUFBSXhqRSxFQUFFLEVBQUVBLEVBQUV3akUsRUFBRXhqRSxJQUFJd2tDLEVBQUV4a0MsR0FBRzlFLFVBQVU4RSxFQUFFLEdBQUdvWCxFQUFFM08sU0FBUys3QixDQUFDLENBQUMsTUFBTSxDQUFDb3BDLFNBQVN6c0UsRUFBRWUsS0FBS3lFLEVBQUV6RSxLQUFLaUosSUFBSTZiLEVBQUUrcUUsSUFBSTEyRixFQUFFK3VCLE1BQU1oVCxFQUFFNDZFLE9BQU92a0IsRUFBRSxFQUFFL3lFLEVBQVEyeUcsY0FBYyxTQUFTMW1HLEdBQXFLLE9BQWxLQSxFQUFFLENBQUNpbkUsU0FBUytkLEVBQUV5SCxjQUFjenNGLEVBQUUybUcsZUFBZTNtRyxFQUFFNG1HLGFBQWEsRUFBRS83RCxTQUFTLEtBQUtELFNBQVMsS0FBS2k4RCxjQUFjLEtBQUtDLFlBQVksT0FBUWo4RCxTQUFTLENBQUNvOEIsU0FBU3J1RSxFQUFFaWxCLFNBQVM3ZCxHQUFVQSxFQUFFNHFDLFNBQVM1cUMsQ0FBQyxFQUFFak0sRUFBUWs1QyxjQUFjNmlELEVBQUUvN0YsRUFBUWd6RyxjQUFjLFNBQVMvbUcsR0FBRyxJQUFJQyxFQUFFNnZGLEVBQUVqNUYsS0FBSyxLQUFLbUosR0FBWSxPQUFUQyxFQUFFMUUsS0FBS3lFLEVBQVNDLENBQUMsRUFBRWxNLEVBQVFpekcsVUFBVSxXQUFXLE1BQU0sQ0FBQzN0RixRQUFRLEtBQUssRUFDOWR0bEIsRUFBUWt6RyxXQUFXLFNBQVNqbkcsR0FBRyxNQUFNLENBQUNpbkUsU0FBU2p0RSxFQUFFZ1gsT0FBT2hSLEVBQUUsRUFBRWpNLEVBQVFnakMsZUFBZTdpQyxFQUFFSCxFQUFRbXpHLEtBQUssU0FBU2xuRyxHQUFHLE1BQU0sQ0FBQ2luRSxTQUFTK2tCLEVBQUU5a0IsU0FBUyxDQUFDOCtCLFNBQVMsRUFBRUMsUUFBUWptRyxHQUFHbW5FLE1BQU04ekIsRUFBRSxFQUFFbG5HLEVBQVFvekcsS0FBSyxTQUFTbm5HLEVBQUVDLEdBQUcsTUFBTSxDQUFDZ25FLFNBQVNyekQsRUFBRXJZLEtBQUt5RSxFQUFFeTNGLGFBQVEsSUFBU3gzRixFQUFFLEtBQUtBLEVBQUUsRUFBRWxNLEVBQVFxekcsZ0JBQWdCLFNBQVNwbkcsR0FBRyxJQUFJQyxFQUFFdTdGLEVBQUUzbEIsV0FBVzJsQixFQUFFM2xCLFdBQVcsQ0FBQyxFQUFFLElBQUk3MUUsR0FBRyxDQUFDLFFBQVF3N0YsRUFBRTNsQixXQUFXNTFFLENBQUMsQ0FBQyxFQUFFbE0sRUFBUXN6RyxhQUFhL0ssRUFBRXZvRyxFQUFRNi9GLFlBQVksU0FBUzV6RixFQUFFQyxHQUFHLE9BQU9xN0YsRUFBRWppRixRQUFRdTZFLFlBQVk1ekYsRUFBRUMsRUFBRSxFQUFFbE0sRUFBUTgvRixXQUFXLFNBQVM3ekYsR0FBRyxPQUFPczdGLEVBQUVqaUYsUUFBUXc2RSxXQUFXN3pGLEVBQUUsRUFDM2ZqTSxFQUFRdWdHLGNBQWMsV0FBVyxFQUFFdmdHLEVBQVF3Z0csaUJBQWlCLFNBQVN2MEYsR0FBRyxPQUFPczdGLEVBQUVqaUYsUUFBUWs3RSxpQkFBaUJ2MEYsRUFBRSxFQUFFak0sRUFBUSsvRixVQUFVLFNBQVM5ekYsRUFBRUMsR0FBRyxPQUFPcTdGLEVBQUVqaUYsUUFBUXk2RSxVQUFVOXpGLEVBQUVDLEVBQUUsRUFBRWxNLEVBQVE0Z0csTUFBTSxXQUFXLE9BQU8yRyxFQUFFamlGLFFBQVFzN0UsT0FBTyxFQUFFNWdHLEVBQVFnZ0csb0JBQW9CLFNBQVMvekYsRUFBRUMsRUFBRXBELEdBQUcsT0FBT3krRixFQUFFamlGLFFBQVEwNkUsb0JBQW9CL3pGLEVBQUVDLEVBQUVwRCxFQUFFLEVBQUU5SSxFQUFRaWdHLG1CQUFtQixTQUFTaDBGLEVBQUVDLEdBQUcsT0FBT3E3RixFQUFFamlGLFFBQVEyNkUsbUJBQW1CaDBGLEVBQUVDLEVBQUUsRUFBRWxNLEVBQVFrZ0csZ0JBQWdCLFNBQVNqMEYsRUFBRUMsR0FBRyxPQUFPcTdGLEVBQUVqaUYsUUFBUTQ2RSxnQkFBZ0JqMEYsRUFBRUMsRUFBRSxFQUN6ZGxNLEVBQVFtZ0csUUFBUSxTQUFTbDBGLEVBQUVDLEdBQUcsT0FBT3E3RixFQUFFamlGLFFBQVE2NkUsUUFBUWwwRixFQUFFQyxFQUFFLEVBQUVsTSxFQUFRb2dHLFdBQVcsU0FBU24wRixFQUFFQyxFQUFFcEQsR0FBRyxPQUFPeStGLEVBQUVqaUYsUUFBUTg2RSxXQUFXbjBGLEVBQUVDLEVBQUVwRCxFQUFFLEVBQUU5SSxFQUFRcWdHLE9BQU8sU0FBU3AwRixHQUFHLE9BQU9zN0YsRUFBRWppRixRQUFRKzZFLE9BQU9wMEYsRUFBRSxFQUFFak0sRUFBUXNnRyxTQUFTLFNBQVNyMEYsR0FBRyxPQUFPczdGLEVBQUVqaUYsUUFBUWc3RSxTQUFTcjBGLEVBQUUsRUFBRWpNLEVBQVEyZ0cscUJBQXFCLFNBQVMxMEYsRUFBRUMsRUFBRXBELEdBQUcsT0FBT3krRixFQUFFamlGLFFBQVFxN0UscUJBQXFCMTBGLEVBQUVDLEVBQUVwRCxFQUFFLEVBQUU5SSxFQUFReWdHLGNBQWMsV0FBVyxPQUFPOEcsRUFBRWppRixRQUFRbTdFLGVBQWUsRUFBRXpnRyxFQUFRcXZHLFFBQVEsc0NDdEJsYXR2RyxFQUFPQyxRQUFVLEVBQWpCLGlDQ0RGMkQsT0FBT0MsZUFBZTVELEVBQVMsYUFBYyxDQUMzQzBELE9BQU8sSUFVVCxJQUFJNnZHLEVBQWMsU0FBcUI3dkcsR0FDckMsT0FBT3dMLEtBQUtzUyxVQUFVOWQsRUFDeEIsRUFFSTh2RyxFQUFpQixTQUF3QkMsR0FDM0MsSUFBSTltRixFQUFTOG1GLEVBQWN6MUQsS0FDdkJtSCxFQUFRLEdBRVJ1dUQsR0FBNEIsRUFDNUJDLEdBQW9CLEVBQ3BCQyxPQUFpQnB1RyxFQUVyQixJQUNFLElBQUssSUFBMkNxdUcsRUFBdkNDLEVBQVlubkYsRUFBT3ZSLE9BQU9DLGNBQXNCcTRGLEdBQTZCRyxFQUFRQyxFQUFVdCtGLFFBQVEyYyxNQUFPdWhGLEdBQTRCLEVBQU0sQ0FDdkosSUFBSWp3RixFQUFRb3dGLEVBQU1ud0csTUFFZGlpRCxPQUFPLEVBRVgsR0FBbUIsc0JBQWZsaUMsRUFBTWpjLEtBQ1JtK0MsRUFBTyxTQUNGLEdBQW1CLGlCQUFmbGlDLEVBQU1qYyxLQUNmbStDLEVBQU9saUMsRUFBTTlnQixVQUNSLEdBQW1CLGVBQWY4Z0IsRUFBTWpjLEtBQ2ZtK0MsRUFBTyxJQUFNbGlDLEVBQU05Z0IsVUFDZCxHQUFtQixrQkFBZjhnQixFQUFNamMsS0FDZm0rQyxFQUFPLElBQU1saUMsRUFBTTlnQixVQUNkLEdBQW1CLDhCQUFmOGdCLEVBQU1qYyxLQUNmbStDLEVBQU8sSUFBTWxpQyxFQUFNOWdCLEtBQU8sU0FDckIsR0FBbUIsMkJBQWY4Z0IsRUFBTWpjLEtBQ2ZtK0MsRUFBTyxJQUFNbGlDLEVBQU05Z0IsS0FBTzhnQixFQUFNODVCLFNBQVdnMkQsRUFBWTl2RixFQUFNL2YsT0FBUyxTQUNqRSxHQUFtQix3QkFBZitmLEVBQU1qYyxLQUNmbStDLEVBQU8sSUFBTWxpQyxFQUFNOWdCLEtBRWY4Z0IsRUFBTWs2QixXQUFXbDlDLFNBQ25Ca2xELEdBQVEsSUFBTWxpQyxFQUFNazZCLFdBQVc3eEMsSUFBSXluRyxHQUFhNWhHLEtBQUssTUFBUSxTQUUxRCxJQUFtQiwwQkFBZjhSLEVBQU1qYyxLQUdmLE1BQU0sSUFBSStILE1BQU0sa0JBRmhCbzJDLEVBQU8sS0FBT2xpQyxFQUFNOWdCLElBR3RCLENBRUF3aUQsRUFBTXpnRCxLQUFLaWhELEVBQ2IsQ0FDRixDQUFFLE1BQU94ZixHQUNQd3RFLEdBQW9CLEVBQ3BCQyxFQUFpQnp0RSxDQUNuQixDQUFFLFFBQ0EsS0FDT3V0RSxHQUE2QkksRUFBVWg0QixRQUMxQ2c0QixFQUFVaDRCLFFBRWQsQ0FBRSxRQUNBLEdBQUk2M0IsRUFDRixNQUFNQyxDQUVWLENBQ0YsQ0FFQSxPQUFPenVELEVBQU14ekMsS0FBSyxHQUNwQixFQUVBM1IsRUFBQSxRQUFrQixXQStDaEIsTUFBTyxDQUNMNmtFLFNBL0NhLFNBQWtCbDRDLEdBSS9CLElBQUlvbkYsRUFBZ0MsR0FFaENDLEdBQTZCLEVBQzdCQyxHQUFxQixFQUNyQkMsT0FBa0IxdUcsRUFFdEIsSUFDRSxJQUFLLElBQTRDMnVHLEVBQXhDQyxFQUFhem5GLEVBQU92UixPQUFPQyxjQUF1QjI0RixHQUE4QkcsRUFBU0MsRUFBVzUrRixRQUFRMmMsTUFBTzZoRixHQUE2QixFQUFNLENBQzdKLElBQUl2d0YsRUFBUTB3RixFQUFPendHLE1BRW5CLEdBQW1CLGFBQWYrZixFQUFNamMsS0FDUnVzRyxFQUFVcnZHLEtBQUs4dUcsRUFBZS92RixTQUN6QixHQUFtQix5QkFBZkEsRUFBTWpjLEtBQ2Z1c0csRUFBVXJ2RyxLQUFLLFVBQ1YsR0FBbUIsb0JBQWYrZSxFQUFNamMsS0FDZnVzRyxFQUFVcnZHLEtBQUssWUFDVixHQUFtQiw4QkFBZitlLEVBQU1qYyxLQUNmdXNHLEVBQVVydkcsS0FBSyxXQUNWLElBQW1CLDZCQUFmK2UsRUFBTWpjLEtBR2YsTUFBTSxJQUFJK0gsTUFBTSxrQkFGaEJ3a0csRUFBVXJ2RyxLQUFLLE1BR2pCLENBQ0YsQ0FDRixDQUFFLE1BQU95aEMsR0FDUDh0RSxHQUFxQixFQUNyQkMsRUFBa0IvdEUsQ0FDcEIsQ0FBRSxRQUNBLEtBQ082dEUsR0FBOEJJLEVBQVd0NEIsUUFDNUNzNEIsRUFBV3Q0QixRQUVmLENBQUUsUUFDQSxHQUFJbTRCLEVBQ0YsTUFBTUMsQ0FFVixDQUNGLENBRUEsT0FBT0gsRUFBVXBpRyxLQUFLLEdBQ3hCLEVBS0YsK0JDM0hBaE8sT0FBT0MsZUFBZTVELEVBQVMsYUFBYyxDQUMzQzBELE9BQU8sSUFHVCxJQU1nQytPLEVBTjVCNGhHLEVBQVcsRUFBUSxNQUluQkMsR0FFNEI3aEcsRUFKakIsRUFBUSxRQUk4QkEsRUFBSTlNLFdBQWE4TSxFQUFNLENBQUU0SixRQUFTNUosR0FPdkZ6UyxFQUFBLFFBQWtCLFdBaUJoQixNQUFPLENBQ0xrSSxNQWpCVSxTQUFlM0QsR0FDekIsSUFFSXNILEVBRlMsSUFBSXdvRyxFQUFTL3NELE9BQU9ndEQsRUFBVWo0RixRQUFRbW1ELFlBQWE4eEMsRUFBVWo0RixRQUFRa21ELGFBRTdEMXRDLEtBQUt0d0IsR0FBVXNILFFBRXBDLEdBQXVCLElBQW5CQSxFQUFRcEwsT0FDVixNQUFNLElBQUk4TyxNQUFNLHNCQUdsQixHQUFJMUQsRUFBUXBMLE9BQVMsRUFDbkIsTUFBTSxJQUFJOE8sTUFBTSxzQkFHbEIsT0FBTzFELEVBQVEsRUFDakIsRUFLRixnQ0NuQ0EsV0FDRSxTQUFTNFUsRUFBR1osR0FDVixPQUFPQSxFQUFFLEVBQ1gsQ0FFQSxJQUFJMDBGLEVBQWMsRUFBUSxNQVl0QnAzRixFQUFVLFNBQWlCVCxHQUk3QixPQUhBQSxFQUFJQSxFQUFFNWEsUUFBTyxTQUFVMGIsR0FDckIsT0FBYSxPQUFOQSxDQUNULElBQ08rMkYsRUFBWTczRixFQUNyQixFQUVJODNGLEVBQWdCLENBQ2xCLElBQUssdUJBQ0wsSUFBSyw0QkFDTCxJQUFLLGtCQUNMLElBQUssNEJBU0hDLEVBQWdCLFNBQXVCLzNGLEVBQUczWCxFQUFHMnZHLEdBQy9DLElBQUlDLEVBQVNKLEVBQVk3M0YsR0FBRy9LLEtBQUssSUFDN0J5TixFQUFTeWtDLFdBQVc4d0QsR0FDeEIsT0FBSS93RCxNQUFNeGtDLEdBQ0RzMUYsRUFFRnQxRixDQUNULEVBRUl3MUYsRUFBaUIsU0FBd0JsNEYsRUFBRzNYLEVBQUcydkcsR0FDakQsTUFBYSxTQUFUaDRGLEVBQUUsSUFDTyxVQUFUQSxFQUFFLElBQ0NnNEYsQ0FDVCxFQUVJRyxFQUFzQixTQUE2Qm40RixFQUFHM1gsRUFBRzJ2RyxHQUMzRCxNQUFhLFFBQVRoNEYsRUFBRSxHQUFxQmpTLElBQ2QsY0FBVGlTLEVBQUUsR0FDTyxTQUFUQSxFQUFFLEdBQXNCLEtBQ3JCZzRGLE9BRlAsQ0FHRixFQUNJL3pDLEVBQVUsQ0FDWjJCLFdBQU85OEQsRUFDUGc5RCxZQUFhLENBQUMsQ0FBRSxLQUFRLGFBQWMsUUFBVyxDQUFDLGFBQWUsQ0FBRSxLQUFRLGFBQWMsUUFBVyxDQUFDLGFBQWMsSUFBSyxTQUFVLElBQUssWUFBYSxZQTdCMUgsU0FBK0I5bEQsR0FDekQsT0FBUTlhLE1BQU13SSxRQUFRc1MsRUFBRSxJQUFNQSxFQUFFLEdBQUssQ0FBQ0EsRUFBRSxLQUFLL1YsT0FBTyxDQUNsRGEsS0FBTWd0RyxFQUFjOTNGLEVBQUUsTUFDckIvVixPQUFPK1YsRUFBRSxHQUNkLEdBeUI4TCxDQUFFLEtBQVEsV0FBWSxRQUFXLENBQUMsZ0JBQWlCLFlBQWUsU0FBcUJBLEdBQy9RLE1BQU8sQ0FBRWxWLEtBQU0sV0FBWXcyQyxLQUFNdGhDLEVBQUUsR0FDckMsR0FBSyxDQUFFLEtBQVEsc0JBQXVCLFFBQVcsQ0FBQyxnQkFBaUIsWUFBZStELEdBQU0sQ0FBRSxLQUFRLHNCQUF1QixRQUFXLEdBQUksWUFBZSxTQUFxQi9ELEdBQzFLLE9BQU8sSUFDVCxHQUFLLENBQUUsS0FBUSxzQkFBdUIsUUFBVyxJQUFNLENBQUUsS0FBUSxzQkFBdUIsUUFBVyxDQUFDLHNCQUF1QixrQkFBbUIsWUFBZSxTQUFpQkEsR0FDNUssT0FBT0EsRUFBRSxHQUFHL1YsT0FBTyxDQUFDK1YsRUFBRSxJQUN4QixHQUFLLENBQUUsS0FBUSxlQUFnQixRQUFXLENBQUMsc0JBQXVCLHVCQUF3QixZQUFlLFNBQXFCQSxFQUFHM1gsRUFBRzJ2RyxHQUNsSSxJQUFJeHdHLEVBQVlpWixFQUFRVCxHQUFHLE9BQUt4WSxFQUFVekQsT0FBNkJ5RCxFQUFkd3dHLENBQzNELEdBQUssQ0FBRSxLQUFRLHNCQUF1QixRQUFXLElBQU0sQ0FBRSxLQUFRLHNCQUF1QixRQUFXLENBQUMsc0JBQXVCLGtCQUFtQixZQUFlLFNBQWlCaDRGLEdBQzVLLE9BQU9BLEVBQUUsR0FBRy9WLE9BQU8sQ0FBQytWLEVBQUUsSUFDeEIsR0FBSyxDQUFFLEtBQVEsZUFBZ0IsUUFBVyxDQUFDLG9CQUFxQix1QkFBd0IsWUFBZVMsR0FBVyxDQUFFLEtBQVEsaUJBQWtCLFFBQVcsQ0FBQyxlQUFpQixDQUFFLEtBQVEsaUJBQWtCLFFBQVcsQ0FBQyxrQkFBb0IsQ0FBRSxLQUFRLGlCQUFrQixRQUFXLENBQUMsMkJBQTZCLENBQUUsS0FBUSxpQkFBa0IsUUFBVyxDQUFDLDhCQUFnQyxDQUFFLEtBQVEsaUJBQWtCLFFBQVcsQ0FBQyx3QkFBMEIsQ0FBRSxLQUFRLGlCQUFrQixRQUFXLENBQUMsMEJBQTRCLENBQUUsS0FBUSxlQUFnQixRQUFXLENBQUMsaUJBQWtCLFlBQWUsU0FBcUJULEdBQ3BsQixNQUFPLENBQUVsVixLQUFNLGVBQWdCN0UsS0FBTStaLEVBQUUsR0FDekMsR0FBSyxDQUFFLEtBQVEsbUJBQW9CLFFBQVcsQ0FBQyxDQUFFLFFBQVcsTUFBUSxZQUFlK0QsR0FBTSxDQUFFLEtBQVEsbUJBQW9CLFFBQVcsR0FBSSxZQUFlLFNBQXFCL0QsR0FDeEssT0FBTyxJQUNULEdBQUssQ0FBRSxLQUFRLG1CQUFvQixRQUFXLElBQU0sQ0FBRSxLQUFRLG1CQUFvQixRQUFXLENBQUMsbUJBQW9CLGlCQUFrQixZQUFlLFNBQWlCQSxHQUNsSyxPQUFPQSxFQUFFLEdBQUcvVixPQUFPLENBQUMrVixFQUFFLElBQ3hCLEdBQUssQ0FBRSxLQUFRLFlBQWEsUUFBVyxDQUFDLG1CQUFvQixZQUFhLG9CQUFxQixZQUFlLFNBQXFCQSxHQUNoSSxPQUFRQSxFQUFFLElBQU0sSUFBTUEsRUFBRSxHQUFLQSxFQUFFLEdBQUcvSyxLQUFLLEdBQ3pDLEdBQUssQ0FBRSxLQUFRLHVCQUF3QixRQUFXLElBQU0sQ0FBRSxLQUFRLHVCQUF3QixRQUFXLENBQUMsdUJBQXdCLG1CQUFvQixZQUFlLFNBQWlCK0ssR0FDaEwsT0FBT0EsRUFBRSxHQUFHL1YsT0FBTyxDQUFDK1YsRUFBRSxJQUN4QixHQUFLLENBQUUsS0FBUSxnQkFBaUIsUUFBVyxDQUFDLGNBQWUsd0JBQXlCLFlBQWUsU0FBcUJBLEdBQ3RILE9BQU9BLEVBQUUsR0FBS0EsRUFBRSxHQUFHL0ssS0FBSyxHQUMxQixHQUFLLENBQUUsS0FBUSxnQkFBaUIsUUFBVyxDQUFDLENBQUUsUUFBVyxLQUFPLGFBQWMsWUFBZSxTQUFxQitLLEdBQ2hILE1BQU8sQ0FBRWxWLEtBQU0sZ0JBQWlCN0UsS0FBTStaLEVBQUUsR0FDMUMsR0FBSyxDQUFFLEtBQVEsYUFBYyxRQUFXLENBQUMsQ0FBRSxRQUFXLEtBQU8saUJBQWtCLFlBQWUsU0FBcUJBLEdBQ2pILE1BQU8sQ0FBRWxWLEtBQU0sYUFBYzdFLEtBQU0rWixFQUFFLEdBQ3ZDLEdBQUssQ0FBRSxLQUFRLG9CQUFxQixRQUFXLENBQUMsQ0FBRSxRQUFXLE1BQVEsWUFBZSxTQUFxQkEsR0FDdkcsTUFBTyxDQUFFbFYsS0FBTSxvQkFDakIsR0FBSyxDQUFFLEtBQVEsNEJBQTZCLFFBQVcsQ0FBQyxDQUFFLFFBQVcsS0FBTyxnQkFBaUIsQ0FBRSxRQUFXLE1BQVEsWUFBZSxTQUFxQmtWLEdBQ3BKLE1BQU8sQ0FBRWxWLEtBQU0sNEJBQTZCN0UsS0FBTStaLEVBQUUsR0FDdEQsR0FBSyxDQUFFLEtBQVEsb0JBQXFCLFFBQVcsQ0FBQyxDQUFFLFFBQVcsT0FBVSxDQUFFLEtBQVEsNkJBQThCLFFBQVcsQ0FBQyxDQUFFLFFBQVcsS0FBTyxDQUFFLFFBQVcsTUFBUSxZQUFlLFNBQWdCQSxHQUNqTSxPQUFPQSxFQUFFL0ssS0FBSyxHQUNoQixHQUFLLENBQUUsS0FBUSxvQkFBcUIsUUFBVyxDQUFDLCtCQUFpQyxDQUFFLEtBQVEsNkJBQThCLFFBQVcsQ0FBQyxDQUFFLFFBQVcsS0FBTyxDQUFFLFFBQVcsTUFBUSxZQUFlLFNBQWdCK0ssR0FDM00sT0FBT0EsRUFBRS9LLEtBQUssR0FDaEIsR0FBSyxDQUFFLEtBQVEsb0JBQXFCLFFBQVcsQ0FBQywrQkFBaUMsQ0FBRSxLQUFRLDZCQUE4QixRQUFXLENBQUMsQ0FBRSxRQUFXLEtBQU8sQ0FBRSxRQUFXLE1BQVEsWUFBZSxTQUFnQitLLEdBQzNNLE9BQU9BLEVBQUUvSyxLQUFLLEdBQ2hCLEdBQUssQ0FBRSxLQUFRLG9CQUFxQixRQUFXLENBQUMsK0JBQWlDLENBQUUsS0FBUSw2QkFBOEIsUUFBVyxDQUFDLENBQUUsUUFBVyxLQUFPLENBQUUsUUFBVyxNQUFRLFlBQWUsU0FBZ0IrSyxHQUMzTSxPQUFPQSxFQUFFL0ssS0FBSyxHQUNoQixHQUFLLENBQUUsS0FBUSxvQkFBcUIsUUFBVyxDQUFDLCtCQUFpQyxDQUFFLEtBQVEsNkJBQThCLFFBQVcsQ0FBQyxDQUFFLFFBQVcsS0FBTyxDQUFFLFFBQVcsTUFBUSxZQUFlLFNBQWdCK0ssR0FDM00sT0FBT0EsRUFBRS9LLEtBQUssR0FDaEIsR0FBSyxDQUFFLEtBQVEsb0JBQXFCLFFBQVcsQ0FBQywrQkFBaUMsQ0FBRSxLQUFRLHlCQUEwQixRQUFXLENBQUMsQ0FBRSxRQUFXLEtBQU8sZ0JBQWlCLG9CQUFxQixpQkFBa0IsQ0FBRSxRQUFXLE1BQVEsWUFBZSxTQUFxQitLLEdBQ3BRLE1BQU8sQ0FDTGxWLEtBQU0seUJBQ043RSxLQUFNK1osRUFBRSxHQUNSaFosTUFBT2daLEVBQUUsR0FDVDZnQyxTQUFVN2dDLEVBQUUsR0FBRyxHQUVuQixHQUNDLENBQUUsS0FBUSxpQkFBa0IsUUFBVyxDQUFDLHlCQUEwQixZQUFlK0QsR0FBTSxDQUFFLEtBQVEsaUJBQWtCLFFBQVcsQ0FBQyxnQkFBaUIsWUFBZUEsR0FBTSxDQUFFLEtBQVEsaUJBQWtCLFFBQVcsQ0FBQyxZQUFhLFlBQWVBLEdBQU0sQ0FBRSxLQUFRLGlCQUFrQixRQUFXLENBQUMsWUFBYSxZQUFlQSxHQUFNLENBQUUsS0FBUSxpQ0FBa0MsUUFBVyxDQUFDLENBQUUsUUFBVyxLQUFPLENBQUUsUUFBVyxLQUFPLENBQUUsUUFBVyxLQUFPLENBQUUsUUFBVyxLQUFPLENBQUUsUUFBVyxNQUFRLFlBQWUsU0FBZ0IvRCxHQUNwZixPQUFPQSxFQUFFL0ssS0FBSyxHQUNoQixHQUFLLENBQUUsS0FBUSx3QkFBeUIsUUFBVyxDQUFDLGtDQUFtQyxZQUFlaWpHLEdBQWtCLENBQUUsS0FBUSxpQ0FBa0MsUUFBVyxDQUFDLENBQUUsUUFBVyxLQUFPLENBQUUsUUFBVyxLQUFPLENBQUUsUUFBVyxLQUFPLENBQUUsUUFBVyxNQUFRLFlBQWUsU0FBZ0JsNEYsR0FDOVIsT0FBT0EsRUFBRS9LLEtBQUssR0FDaEIsR0FBSyxDQUFFLEtBQVEsd0JBQXlCLFFBQVcsQ0FBQyxrQ0FBbUMsWUFBZWlqRyxHQUFrQixDQUFFLEtBQVEsaUNBQWtDLFFBQVcsQ0FBQyxDQUFFLFFBQVcsS0FBTyxDQUFFLFFBQVcsS0FBTyxDQUFFLFFBQVcsTUFBUSxZQUFlLFNBQWdCbDRGLEdBQzFRLE9BQU9BLEVBQUUvSyxLQUFLLEdBQ2hCLEdBQUssQ0FBRSxLQUFRLHdCQUF5QixRQUFXLENBQUMsa0NBQW1DLFlBQWVrakcsR0FBdUIsQ0FBRSxLQUFRLGlDQUFrQyxRQUFXLENBQUMsQ0FBRSxRQUFXLEtBQU8sQ0FBRSxRQUFXLEtBQU8sQ0FBRSxRQUFXLEtBQU8sQ0FBRSxRQUFXLE1BQVEsWUFBZSxTQUFnQm40RixHQUNuUyxPQUFPQSxFQUFFL0ssS0FBSyxHQUNoQixHQUFLLENBQUUsS0FBUSx3QkFBeUIsUUFBVyxDQUFDLGtDQUFtQyxZQUFla2pHLEdBQXVCLENBQUUsS0FBUSxpQ0FBa0MsUUFBVyxDQUFDLENBQUUsUUFBVyxLQUFPLENBQUUsUUFBVyxLQUFPLENBQUUsUUFBVyxLQUFPLENBQUUsUUFBVyxLQUFPLENBQUUsUUFBVyxLQUFPLENBQUUsUUFBVyxLQUFPLENBQUUsUUFBVyxLQUFPLENBQUUsUUFBVyxLQUFPLENBQUUsUUFBVyxNQUFRLFlBQWUsU0FBZ0JuNEYsR0FDdlksT0FBT0EsRUFBRS9LLEtBQUssR0FDaEIsR0FBSyxDQUFFLEtBQVEsd0JBQXlCLFFBQVcsQ0FBQyxrQ0FBbUMsWUFBZWtqRyxHQUF1QixDQUFFLEtBQVEsZUFBZ0IsUUFBVyxDQUFDLE1BQU8sQ0FBRSxRQUFXLEtBQU8sT0FBUSxZQUFlSixHQUFpQixDQUFFLEtBQVEsZUFBZ0IsUUFBVyxDQUFDLENBQUUsUUFBVyxLQUFPLE1BQU8sQ0FBRSxRQUFXLEtBQU8sT0FBUSxZQUFlQSxHQUFpQixDQUFFLEtBQVEsZUFBZ0IsUUFBVyxDQUFDLENBQUUsUUFBVyxLQUFPLE1BQU8sQ0FBRSxRQUFXLEtBQU8sT0FBUSxZQUFlQSxHQUFpQixDQUFFLEtBQVEsZUFBZ0IsUUFBVyxDQUFDLENBQUUsUUFBVyxLQUFPLE9BQVEsWUFBZUEsR0FBaUIsQ0FBRSxLQUFRLGVBQWdCLFFBQVcsQ0FBQyxPQUFRLFlBQWVBLEdBQWlCLENBQUUsS0FBUSxlQUFnQixRQUFXLENBQUMsQ0FBRSxRQUFXLEtBQU8sT0FBUSxZQUFlQSxHQUFpQixDQUFFLEtBQVEsd0JBQXlCLFFBQVcsQ0FBQyxDQUFFLFFBQVcsS0FBTyxDQUFFLFFBQVcsS0FBTyxDQUFFLFFBQVcsS0FBTyxDQUFFLFFBQVcsS0FBTyxDQUFFLFFBQVcsS0FBTyxDQUFFLFFBQVcsS0FBTyxDQUFFLFFBQVcsS0FBTyxDQUFFLFFBQVcsTUFBUSxZQUFlLFNBQWdCLzNGLEdBQy85QixPQUFPQSxFQUFFL0ssS0FBSyxHQUNoQixHQUFLLENBQUUsS0FBUSxlQUFnQixRQUFXLENBQUMseUJBQTBCLFlBQWU4aUcsR0FBaUIsQ0FBRSxLQUFRLHdCQUF5QixRQUFXLENBQUMsQ0FBRSxRQUFXLEtBQU8sQ0FBRSxRQUFXLEtBQU8sQ0FBRSxRQUFXLEtBQU8sQ0FBRSxRQUFXLEtBQU8sQ0FBRSxRQUFXLEtBQU8sQ0FBRSxRQUFXLEtBQU8sQ0FBRSxRQUFXLEtBQU8sQ0FBRSxRQUFXLEtBQU8sQ0FBRSxRQUFXLE1BQVEsWUFBZSxTQUFnQi8zRixHQUN0VyxPQUFPQSxFQUFFL0ssS0FBSyxHQUNoQixHQUFLLENBQUUsS0FBUSxlQUFnQixRQUFXLENBQUMseUJBQTBCLFlBQWU4aUcsR0FBaUIsQ0FBRSxLQUFRLHdCQUF5QixRQUFXLENBQUMsQ0FBRSxRQUFXLEtBQU8sQ0FBRSxRQUFXLEtBQU8sQ0FBRSxRQUFXLEtBQU8sQ0FBRSxRQUFXLEtBQU8sQ0FBRSxRQUFXLEtBQU8sQ0FBRSxRQUFXLEtBQU8sQ0FBRSxRQUFXLEtBQU8sQ0FBRSxRQUFXLEtBQU8sQ0FBRSxRQUFXLE1BQVEsWUFBZSxTQUFnQi8zRixHQUN0VyxPQUFPQSxFQUFFL0ssS0FBSyxHQUNoQixHQUFLLENBQUUsS0FBUSxlQUFnQixRQUFXLENBQUMseUJBQTBCLFlBQWU4aUcsR0FBaUIsQ0FBRSxLQUFRLGFBQWMsUUFBVyxDQUFDLFVBQVksQ0FBRSxLQUFRLGFBQWMsUUFBVyxDQUFDLGFBQWMsU0FBVSxZQUFlLFNBQWlCLzNGLEdBQy9PLE9BQU9BLEVBQUUsR0FBRy9WLE9BQU8sQ0FBQytWLEVBQUUsSUFDeEIsR0FBSyxDQUFFLEtBQVEsTUFBTyxRQUFXLENBQUMsZUFBaUIsQ0FBRSxLQUFRLGtCQUFtQixRQUFXLElBQU0sQ0FBRSxLQUFRLGtCQUFtQixRQUFXLENBQUMsbUJBQXFCLENBQUUsS0FBUSxrQkFBbUIsUUFBVyxDQUFDLGtCQUFtQixDQUFFLFFBQVcsS0FBTyxJQUFLLGtCQUFtQixhQUEwQixFQUFHLEVBdkgvUixTQUFVQSxHQUNmLE9BQU9BLEVBc0gwUixHQXRIclIvVixPQUFPLENBQUMrVixFQXNIZ1IsSUFySHRTLElBcUg0UyxDQUFFLEtBQVEsd0JBQXlCLFFBQVcsQ0FBQyxjQUFnQixDQUFFLEtBQVEsd0JBQXlCLFFBQVcsQ0FBQyx3QkFBeUIsYUFBYyxZQUFlLFNBQWlCQSxHQUM3ZCxPQUFPQSxFQUFFLEdBQUcvVixPQUFPLENBQUMrVixFQUFFLElBQ3hCLEdBQUssQ0FBRSxLQUFRLGlCQUFrQixRQUFXLENBQUMseUJBQTBCLFlBQWUsU0FBcUJBLEdBQ3pHLE9BQU9BLEVBQUUsR0FBRy9LLEtBQUssR0FDbkIsR0FBSyxDQUFFLEtBQVEsaUJBQWtCLFFBQVcsQ0FBQyxZQUFhLFlBQWU4TyxHQUFNLENBQUUsS0FBUSxpQkFBa0IsUUFBVyxDQUFDLFlBQWEsWUFBZUEsR0FBTSxDQUFFLEtBQVEsaUNBQWtDLFFBQVcsQ0FBQyxDQUFFLFFBQVcsS0FBTyxDQUFFLFFBQVcsTUFBUSxZQUFlLFNBQWdCL0QsR0FDdlIsT0FBT0EsRUFBRS9LLEtBQUssR0FDaEIsR0FBSyxDQUFFLEtBQVEsd0JBQXlCLFFBQVcsQ0FBQyxpQ0FBa0MsMkJBQTRCLFlBQWUsU0FBcUIrSyxHQUNwSixNQUFPLENBQUVsVixLQUFNLHdCQUF5QjdFLEtBQU0rWixFQUFFLEdBQ2xELEdBQUssQ0FBRSxLQUFRLHNCQUF1QixRQUFXLENBQUMsQ0FBRSxRQUFXLEtBQU8sMkJBQTRCLFlBQWUsU0FBcUJBLEdBQ3BJLE1BQU8sQ0FBRWxWLEtBQU0sc0JBQXVCN0UsS0FBTStaLEVBQUUsR0FDaEQsR0FBSyxDQUFFLEtBQVEsc0JBQXVCLFFBQVcsQ0FBQyxDQUFFLFFBQVcsS0FBTywwQkFBMkIsQ0FBRSxRQUFXLEtBQU8sa0JBQW1CLENBQUUsUUFBVyxNQUFRLFlBQWUsU0FBcUJBLEdBQy9MLE1BQU8sQ0FBRWxWLEtBQU0sc0JBQXVCN0UsS0FBTStaLEVBQUUsR0FBSWloQyxXQUFZamhDLEVBQUUsR0FDbEUsR0FBSyxDQUFFLEtBQVEsaUNBQWtDLFFBQVcsQ0FBQyxrQkFBb0IsQ0FBRSxLQUFRLGlDQUFrQyxRQUFXLENBQUMsaUNBQWtDLGlCQUFrQixZQUFlLFNBQWlCQSxHQUMzTixPQUFPQSxFQUFFLEdBQUcvVixPQUFPLENBQUMrVixFQUFFLElBQ3hCLEdBQUssQ0FBRSxLQUFRLDBCQUEyQixRQUFXLENBQUMsV0FBWSxrQ0FBbUMsWUFBZSxTQUFxQkEsR0FDdkksT0FBT0EsRUFBRSxHQUFLQSxFQUFFLEdBQUcvSyxLQUFLLEdBQzFCLEdBQUssQ0FBRSxLQUFRLGtCQUFtQixRQUFXLElBQU0sQ0FBRSxLQUFRLGtCQUFtQixRQUFXLENBQUMsa0JBQW1CLFlBQWEsWUFBZSxTQUFpQitLLEdBQzFKLE9BQU9BLEVBQUUsR0FBRy9WLE9BQU8sQ0FBQytWLEVBQUUsSUFDeEIsR0FBSyxDQUFFLEtBQVEsV0FBWSxRQUFXLENBQUMsQ0FBRSxRQUFXLEtBQVEsa0JBQW1CLENBQUUsUUFBVyxNQUFTLFlBQWUsU0FBcUJBLEdBQ3ZJLE9BQU9BLEVBQUUsR0FBRy9LLEtBQUssR0FDbkIsR0FBSyxDQUFFLEtBQVEsV0FBWSxRQUFXLENBQUMsUUFBUyxZQUFlOE8sR0FBTSxDQUFFLEtBQVEsb0JBQXFCLFFBQVcsQ0FBQyxDQUFFLFFBQVcsTUFBUSxDQUFFLFFBQVcsTUFBUyxZQUFlLFNBQWdCL0QsR0FDeEwsT0FBT0EsRUFBRS9LLEtBQUssR0FDaEIsR0FBSyxDQUFFLEtBQVEsV0FBWSxRQUFXLENBQUMscUJBQXNCLFlBQWUsU0FBcUIrSyxHQUMvRixNQUFPLEdBQ1QsR0FBSyxDQUFFLEtBQVEsa0JBQW1CLFFBQVcsSUFBTSxDQUFFLEtBQVEsa0JBQW1CLFFBQVcsQ0FBQyxrQkFBbUIsWUFBYSxZQUFlLFNBQWlCQSxHQUMxSixPQUFPQSxFQUFFLEdBQUcvVixPQUFPLENBQUMrVixFQUFFLElBQ3hCLEdBQUssQ0FBRSxLQUFRLFdBQVksUUFBVyxDQUFDLENBQUUsUUFBVyxLQUFPLGtCQUFtQixDQUFFLFFBQVcsTUFBUSxZQUFlLFNBQXFCQSxHQUNySSxPQUFPQSxFQUFFLEdBQUcvSyxLQUFLLEdBQ25CLEdBQUssQ0FBRSxLQUFRLFdBQVksUUFBVyxDQUFDLFFBQVMsWUFBZThPLEdBQU0sQ0FBRSxLQUFRLG9CQUFxQixRQUFXLENBQUMsQ0FBRSxRQUFXLE1BQVEsQ0FBRSxRQUFXLE1BQVEsWUFBZSxTQUFnQi9ELEdBQ3ZMLE9BQU9BLEVBQUUvSyxLQUFLLEdBQ2hCLEdBQUssQ0FBRSxLQUFRLFdBQVksUUFBVyxDQUFDLHFCQUFzQixZQUFlLFNBQXFCK0ssR0FDL0YsTUFBTyxHQUNULEdBQUssQ0FBRSxLQUFRLFdBQVksUUFBVyxJQUFNLENBQUUsS0FBUSxXQUFZLFFBQVcsQ0FBQyxXQUFZLE9BQVEsWUFBZSxTQUFpQkEsR0FDaEksT0FBT0EsRUFBRSxHQUFHL1YsT0FBTyxDQUFDK1YsRUFBRSxJQUN4QixHQUFLLENBQUUsS0FBUSxJQUFLLFFBQVcsQ0FBQyxZQUFhLFlBQWUsU0FBcUJBLEdBQy9FLE9BQU8sSUFDVCxJQUNGNmxELFlBQWEsbUJBRWdELElBQW5CeGlFLEVBQU9DLFFBQ2pERCxFQUFPQyxRQUFVMmdFLEVBRWpCNTJCLE9BQU80MkIsUUFBVUEsQ0FFcEIsQ0ExS0QsZ0NDRkFoOUQsT0FBT0MsZUFBZTVELEVBQVMsYUFBYyxDQUMzQzBELE9BQU8sSUFFVDFELEVBQVFpOEMsYUFBZWo4QyxFQUFRODBHLHFCQUFrQnR2RyxFQUVqRCxJQUVJdXZHLEVBQW9CeHpFLEVBRkQsRUFBUSxPQU0zQnl6RSxFQUFpQnp6RSxFQUZELEVBQVEsT0FJNUIsU0FBU0EsRUFBdUI5dUIsR0FBTyxPQUFPQSxHQUFPQSxFQUFJOU0sV0FBYThNLEVBQU0sQ0FBRTRKLFFBQVM1SixFQUFPLENBSTlGelMsRUFBUTgwRyxnQkFBa0JDLEVBQWtCMTRGLFFBQzVDcmMsRUFBUWk4QyxhQUFlKzRELEVBQWUzNEYscUNDbEJ0QyxJQUFJNWMsRUFBWSxFQUFRLE1BQ3BCdzFHLEVBQVUsRUFBUSxNQUVsQm53RCxFQUFRcmxELEVBQVUseUJBQ2xCdUQsRUFBYSxFQUFRLE1BRXpCakQsRUFBT0MsUUFBVSxTQUFxQnNpQixHQUNyQyxJQUFLMnlGLEVBQVEzeUYsR0FDWixNQUFNLElBQUl0ZixFQUFXLDRCQUV0QixPQUFPLFNBQWM4QixHQUNwQixPQUEyQixPQUFwQmdnRCxFQUFNeGlDLEVBQU94ZCxFQUNyQixDQUNELDZCQ05hLFNBQVNna0UsRUFBRTc4RCxFQUFFQyxHQUFHLElBQUlvZ0IsRUFBRXJnQixFQUFFeEwsT0FBT3dMLEVBQUV2SCxLQUFLd0gsR0FBR0QsRUFBRSxLQUFLLEVBQUVxZ0IsR0FBRyxDQUFDLElBQUk1UCxFQUFFNFAsRUFBRSxJQUFJLEVBQUV4akIsRUFBRW1ELEVBQUV5USxHQUFHLEtBQUcsRUFBRW90QixFQUFFaGhDLEVBQUVvRCxJQUEwQixNQUFNRCxFQUE3QkEsRUFBRXlRLEdBQUd4USxFQUFFRCxFQUFFcWdCLEdBQUd4akIsRUFBRXdqQixFQUFFNVAsQ0FBYyxDQUFDLENBQUMsU0FBU3EyRCxFQUFFOW1FLEdBQUcsT0FBTyxJQUFJQSxFQUFFeEwsT0FBTyxLQUFLd0wsRUFBRSxFQUFFLENBQUMsU0FBU3RMLEVBQUVzTCxHQUFHLEdBQUcsSUFBSUEsRUFBRXhMLE9BQU8sT0FBTyxLQUFLLElBQUl5TCxFQUFFRCxFQUFFLEdBQUdxZ0IsRUFBRXJnQixFQUFFcWhCLE1BQU0sR0FBR2hCLElBQUlwZ0IsRUFBRSxDQUFDRCxFQUFFLEdBQUdxZ0IsRUFBRXJnQixFQUFFLElBQUksSUFBSXlRLEVBQUUsRUFBRTVULEVBQUVtRCxFQUFFeEwsT0FBT3doRSxFQUFFbjVELElBQUksRUFBRTRULEVBQUV1bEQsR0FBRyxDQUFDLElBQUkzOEQsRUFBRSxHQUFHb1gsRUFBRSxHQUFHLEVBQUUyaUUsRUFBRXB6RSxFQUFFM0csR0FBR04sRUFBRU0sRUFBRSxFQUFFdWEsRUFBRTVULEVBQUVqSCxHQUFHLEdBQUcsRUFBRThrQyxFQUFFdTFDLEVBQUUveUQsR0FBR3RuQixFQUFFOEQsR0FBRyxFQUFFZ2hDLEVBQUVqcUIsRUFBRXcvRCxJQUFJcHpFLEVBQUV5USxHQUFHbUQsRUFBRTVULEVBQUVqSCxHQUFHc25CLEVBQUU1UCxFQUFFMVgsSUFBSWlILEVBQUV5USxHQUFHMmlFLEVBQUVwekUsRUFBRTNHLEdBQUdnbkIsRUFBRTVQLEVBQUVwWCxPQUFRLE1BQUdOLEVBQUU4RCxHQUFHLEVBQUVnaEMsRUFBRWpxQixFQUFFeU0sSUFBMEIsTUFBTXJnQixFQUE3QkEsRUFBRXlRLEdBQUdtRCxFQUFFNVQsRUFBRWpILEdBQUdzbkIsRUFBRTVQLEVBQUUxWCxDQUFhaUgsQ0FBQyxDQUFDLENBQUMsT0FBT0MsQ0FBQyxDQUMzYyxTQUFTNDlCLEVBQUU3OUIsRUFBRUMsR0FBRyxJQUFJb2dCLEVBQUVyZ0IsRUFBRWlwRyxVQUFVaHBHLEVBQUVncEcsVUFBVSxPQUFPLElBQUk1b0YsRUFBRUEsRUFBRXJnQixFQUFFd1UsR0FBR3ZVLEVBQUV1VSxFQUFFLENBQUMsR0FBRyxpQkFBa0IwMEYsYUFBYSxtQkFBb0JBLFlBQVlqeEIsSUFBSSxDQUFDLElBQUl6OUUsRUFBRTB1RyxZQUFZbjFHLEVBQVFnOUUsYUFBYSxXQUFXLE9BQU92MkUsRUFBRXk5RSxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUlqL0UsRUFBRXF3QixLQUFLMGlFLEVBQUUveUYsRUFBRWkvRSxNQUFNbGtGLEVBQVFnOUUsYUFBYSxXQUFXLE9BQU8vM0UsRUFBRWkvRSxNQUFNOFQsQ0FBQyxDQUFDLENBQUMsSUFBSXg2RSxFQUFFLEdBQUczWSxFQUFFLEdBQUdvc0YsRUFBRSxFQUFFaHJGLEVBQUUsS0FBS2d5RixFQUFFLEVBQUVwbkIsR0FBRSxFQUFHbndFLEdBQUUsRUFBR3E4RSxHQUFFLEVBQUd3VCxFQUFFLG1CQUFvQmlDLFdBQVdBLFdBQVcsS0FBS29CLEVBQUUsbUJBQW9CbEIsYUFBYUEsYUFBYSxLQUFLeEIsRUFBRSxvQkFBcUJra0IsYUFBYUEsYUFBYSxLQUNuVCxTQUFTdmhCLEVBQUU1bkYsR0FBRyxJQUFJLElBQUlDLEVBQUU2bUUsRUFBRWx1RSxHQUFHLE9BQU9xSCxHQUFHLENBQUMsR0FBRyxPQUFPQSxFQUFFK2xCLFNBQVN0eEIsRUFBRWtFLE9BQVEsTUFBR3FILEVBQUVtcEcsV0FBV3BwRyxHQUFnRCxNQUE5Q3RMLEVBQUVrRSxHQUFHcUgsRUFBRWdwRyxVQUFVaHBHLEVBQUVvcEcsZUFBZXhzQyxFQUFFdHJELEVBQUV0UixFQUFhLENBQUNBLEVBQUU2bUUsRUFBRWx1RSxFQUFFLENBQUMsQ0FBQyxTQUFTa3ZGLEVBQUU5bkYsR0FBYSxHQUFWOHdFLEdBQUUsRUFBRzhXLEVBQUU1bkYsSUFBT3ZMLEVBQUUsR0FBRyxPQUFPcXlFLEVBQUV2MUQsR0FBRzljLEdBQUUsRUFBR3UxRixFQUFFakYsT0FBTyxDQUFDLElBQUk5a0YsRUFBRTZtRSxFQUFFbHVFLEdBQUcsT0FBT3FILEdBQUdvdUYsRUFBRXZHLEVBQUU3bkYsRUFBRW1wRyxVQUFVcHBHLEVBQUUsQ0FBQyxDQUNyYSxTQUFTK2tGLEVBQUUva0YsRUFBRUMsR0FBR3hMLEdBQUUsRUFBR3E4RSxJQUFJQSxHQUFFLEVBQUc2VyxFQUFFeUgsR0FBR0EsR0FBRyxHQUFHeHFCLEdBQUUsRUFBRyxJQUFJdmtELEVBQUUyckUsRUFBRSxJQUFTLElBQUxwRSxFQUFFM25GLEdBQU9qRyxFQUFFOHNFLEVBQUV2MUQsR0FBRyxPQUFPdlgsTUFBTUEsRUFBRXF2RyxlQUFlcHBHLElBQUlELElBQUk4dkYsTUFBTSxDQUFDLElBQUlyL0UsRUFBRXpXLEVBQUVnc0IsU0FBUyxHQUFHLG1CQUFvQnZWLEVBQUUsQ0FBQ3pXLEVBQUVnc0IsU0FBUyxLQUFLZ21FLEVBQUVoeUYsRUFBRXN2RyxjQUFjLElBQUl6c0csRUFBRTRULEVBQUV6VyxFQUFFcXZHLGdCQUFnQnBwRyxHQUFHQSxFQUFFbE0sRUFBUWc5RSxlQUFlLG1CQUFvQmwwRSxFQUFFN0MsRUFBRWdzQixTQUFTbnBCLEVBQUU3QyxJQUFJOHNFLEVBQUV2MUQsSUFBSTdjLEVBQUU2YyxHQUFHcTJFLEVBQUUzbkYsRUFBRSxNQUFNdkwsRUFBRTZjLEdBQUd2WCxFQUFFOHNFLEVBQUV2MUQsRUFBRSxDQUFDLEdBQUcsT0FBT3ZYLEVBQUUsSUFBSWc4RCxHQUFFLE1BQU8sQ0FBQyxJQUFJMzhELEVBQUV5dEUsRUFBRWx1RSxHQUFHLE9BQU9TLEdBQUdnMUYsRUFBRXZHLEVBQUV6dUYsRUFBRSt2RyxVQUFVbnBHLEdBQUcrMUQsR0FBRSxDQUFFLENBQUMsT0FBT0EsQ0FBQyxDQUFDLFFBQVFoOEQsRUFBRSxLQUFLZ3lGLEVBQUUzckUsRUFBRXVrRCxHQUFFLENBQUUsQ0FBQyxDQUQxYSxvQkFBcUIya0MsZ0JBQVcsSUFBU0EsVUFBVUMsaUJBQVksSUFBU0QsVUFBVUMsV0FBV0MsZ0JBQWdCRixVQUFVQyxXQUFXQyxlQUFlNXlHLEtBQUsweUcsVUFBVUMsWUFDMlEsSUFDelBsUCxFQUQ2UHZLLEdBQUUsRUFBRzc3RixFQUFFLEtBQUtrN0YsR0FBRyxFQUFFeDdDLEVBQUUsRUFBRWkrQyxHQUFHLEVBQ3ZjLFNBQVMvQixJQUFJLFFBQU8vN0YsRUFBUWc5RSxlQUFlOGdCLEVBQUVqK0MsRUFBTyxDQUFDLFNBQVM2L0MsSUFBSSxHQUFHLE9BQU92L0YsRUFBRSxDQUFDLElBQUk4TCxFQUFFak0sRUFBUWc5RSxlQUFlOGdCLEVBQUU3eEYsRUFBRSxJQUFJQyxHQUFFLEVBQUcsSUFBSUEsRUFBRS9MLEdBQUUsRUFBRzhMLEVBQUUsQ0FBQyxRQUFRQyxFQUFFcTZGLEtBQUt2SyxHQUFFLEVBQUc3N0YsRUFBRSxLQUFLLENBQUMsTUFBTTY3RixHQUFFLENBQUUsQ0FBTyxHQUFHLG1CQUFvQjlLLEVBQUVxVixFQUFFLFdBQVdyVixFQUFFd08sRUFBRSxPQUFPLEdBQUcsb0JBQXFCaVcsZUFBZSxDQUFDLElBQUl6TyxFQUFFLElBQUl5TyxlQUFlcE8sRUFBRUwsRUFBRTBPLE1BQU0xTyxFQUFFMk8sTUFBTUMsVUFBVXBXLEVBQUU2RyxFQUFFLFdBQVdnQixFQUFFd08sWUFBWSxLQUFLLENBQUMsTUFBTXhQLEVBQUUsV0FBV2hXLEVBQUVtUCxFQUFFLEVBQUUsRUFBRSxTQUFTekosRUFBRWhxRixHQUFHOUwsRUFBRThMLEVBQUUrdkYsSUFBSUEsR0FBRSxFQUFHdUssSUFBSSxDQUFDLFNBQVNqTSxFQUFFcnVGLEVBQUVDLEdBQUdtdkYsRUFBRTlLLEdBQUUsV0FBV3RrRixFQUFFak0sRUFBUWc5RSxlQUFlLEdBQUU5d0UsRUFBRSxDQUM1ZGxNLEVBQVE0OUUsc0JBQXNCLEVBQUU1OUUsRUFBUW85RSwyQkFBMkIsRUFBRXA5RSxFQUFRMDlFLHFCQUFxQixFQUFFMTlFLEVBQVF3OUUsd0JBQXdCLEVBQUV4OUUsRUFBUWcyRyxtQkFBbUIsS0FBS2gyRyxFQUFRczlFLDhCQUE4QixFQUFFdDlFLEVBQVEwOEUsd0JBQXdCLFNBQVN6d0UsR0FBR0EsRUFBRWdtQixTQUFTLElBQUksRUFBRWp5QixFQUFRaTJHLDJCQUEyQixXQUFXdjFHLEdBQUdtd0UsSUFBSW53RSxHQUFFLEVBQUd1MUYsRUFBRWpGLEdBQUcsRUFDMVVoeEYsRUFBUWsyRyx3QkFBd0IsU0FBU2pxRyxHQUFHLEVBQUVBLEdBQUcsSUFBSUEsRUFBRXlpQyxRQUFRL2IsTUFBTSxtSEFBbUhrdEIsRUFBRSxFQUFFNXpDLEVBQUV0QixLQUFLbThELE1BQU0sSUFBSTc2RCxHQUFHLENBQUMsRUFBRWpNLEVBQVFrOUUsaUNBQWlDLFdBQVcsT0FBTythLENBQUMsRUFBRWo0RixFQUFRbTJHLDhCQUE4QixXQUFXLE9BQU9wakMsRUFBRXYxRCxFQUFFLEVBQUV4ZCxFQUFRbzJHLGNBQWMsU0FBU25xRyxHQUFHLE9BQU9nc0YsR0FBRyxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFJL3JGLEVBQUUsRUFBRSxNQUFNLFFBQVFBLEVBQUUrckYsRUFBRSxJQUFJM3JFLEVBQUUyckUsRUFBRUEsRUFBRS9yRixFQUFFLElBQUksT0FBT0QsR0FBRyxDQUFDLFFBQVFnc0YsRUFBRTNyRSxDQUFDLENBQUMsRUFBRXRzQixFQUFRcTJHLHdCQUF3QixXQUFXLEVBQzlmcjJHLEVBQVE4OEUsc0JBQXNCLFdBQVcsRUFBRTk4RSxFQUFRczJHLHlCQUF5QixTQUFTcnFHLEVBQUVDLEdBQUcsT0FBT0QsR0FBRyxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLE1BQU0sUUFBUUEsRUFBRSxFQUFFLElBQUlxZ0IsRUFBRTJyRSxFQUFFQSxFQUFFaHNGLEVBQUUsSUFBSSxPQUFPQyxHQUFHLENBQUMsUUFBUStyRixFQUFFM3JFLENBQUMsQ0FBQyxFQUNoTXRzQixFQUFRdzhFLDBCQUEwQixTQUFTdndFLEVBQUVDLEVBQUVvZ0IsR0FBRyxJQUFJNVAsRUFBRTFjLEVBQVFnOUUsZUFBOEYsT0FBdEMxd0QsRUFBekMsaUJBQWtCQSxHQUFHLE9BQU9BLEdBQWUsaUJBQVpBLEVBQUVBLEVBQUVpcUYsUUFBNkIsRUFBRWpxRixFQUFFNVAsRUFBRTRQLEVBQU81UCxFQUFTelEsR0FBRyxLQUFLLEVBQUUsSUFBSW5ELEdBQUcsRUFBRSxNQUFNLEtBQUssRUFBRUEsRUFBRSxJQUFJLE1BQU0sS0FBSyxFQUFFQSxFQUFFLFdBQVcsTUFBTSxLQUFLLEVBQUVBLEVBQUUsSUFBSSxNQUFNLFFBQVFBLEVBQUUsSUFBbU4sT0FBek1tRCxFQUFFLENBQUN3VSxHQUFHd3dFLElBQUloL0QsU0FBUy9sQixFQUFFcXBHLGNBQWN0cEcsRUFBRW9wRyxVQUFVL29GLEVBQUVncEYsZUFBdkR4c0csRUFBRXdqQixFQUFFeGpCLEVBQW9Fb3NHLFdBQVcsR0FBRzVvRixFQUFFNVAsR0FBR3pRLEVBQUVpcEcsVUFBVTVvRixFQUFFdzhDLEVBQUVqa0UsRUFBRW9ILEdBQUcsT0FBTzhtRSxFQUFFdjFELElBQUl2UixJQUFJOG1FLEVBQUVsdUUsS0FBS2s0RSxHQUFHNlcsRUFBRXlILEdBQUdBLEdBQUcsR0FBR3RlLEdBQUUsRUFBR3VkLEVBQUV2RyxFQUFFem5FLEVBQUU1UCxNQUFNelEsRUFBRWlwRyxVQUFVcHNHLEVBQUVnZ0UsRUFBRXRyRCxFQUFFdlIsR0FBR3ZMLEdBQUdtd0UsSUFBSW53RSxHQUFFLEVBQUd1MUYsRUFBRWpGLEtBQVkva0YsQ0FBQyxFQUNuZWpNLEVBQVE0OEUscUJBQXFCbWYsRUFBRS83RixFQUFRdzJHLHNCQUFzQixTQUFTdnFHLEdBQUcsSUFBSUMsRUFBRStyRixFQUFFLE9BQU8sV0FBVyxJQUFJM3JFLEVBQUUyckUsRUFBRUEsRUFBRS9yRixFQUFFLElBQUksT0FBT0QsRUFBRTVLLE1BQU1qQixLQUFLSSxVQUFVLENBQUMsUUFBUXkzRixFQUFFM3JFLENBQUMsQ0FBQyxDQUFDLCtCQ2Y3SnZzQixFQUFPQyxRQUFVLEVBQWpCLG1DQ0RGLElBQUl5QyxFQUFlLEVBQVEsS0FDdkIxQixFQUFTLEVBQVEsSUFDakIwMUcsRUFBaUIsRUFBUSxJQUFSLEdBQ2pCcjFELEVBQU8sRUFBUSxNQUVmcCtDLEVBQWEsRUFBUSxNQUNyQjZqRSxFQUFTcGtFLEVBQWEsZ0JBRzFCMUMsRUFBT0MsUUFBVSxTQUEyQnFZLEVBQUk1WCxHQUMvQyxHQUFrQixtQkFBUDRYLEVBQ1YsTUFBTSxJQUFJclYsRUFBVywwQkFFdEIsR0FBc0IsaUJBQVh2QyxHQUF1QkEsRUFBUyxHQUFLQSxFQUFTLFlBQWNvbUUsRUFBT3BtRSxLQUFZQSxFQUN6RixNQUFNLElBQUl1QyxFQUFXLDhDQUd0QixJQUFJaXNCLEVBQVF6dUIsVUFBVUMsT0FBUyxLQUFPRCxVQUFVLEdBRTVDazJHLEdBQStCLEVBQy9CQyxHQUEyQixFQUMvQixHQUFJLFdBQVl0K0YsR0FBTStvQyxFQUFNLENBQzNCLElBQUkzN0MsRUFBTzI3QyxFQUFLL29DLEVBQUksVUFDaEI1UyxJQUFTQSxFQUFLSSxlQUNqQjZ3RyxHQUErQixHQUU1Qmp4RyxJQUFTQSxFQUFLRyxXQUNqQit3RyxHQUEyQixFQUU3QixDQVNBLE9BUElELEdBQWdDQyxJQUE2QjFuRixLQUM1RHduRixFQUNIMTFHLEVBQTRDLEVBQU0sU0FBVU4sR0FBUSxHQUFNLEdBRTFFTSxFQUE0QyxFQUFNLFNBQVVOLElBR3ZENFgsQ0FDUiwrQkN2Q0EsSUFBSXJYLEVBQXlCLEVBQVEsTUFDakN4QixFQUFXLEVBQVEsTUFFbkJvbEQsRUFEWSxFQUFRLEtBQ1RubEQsQ0FBVSw0QkFFckJtM0csRUFBVSxPQUFTL29HLEtBQUssS0FFeEJncEcsRUFBaUJELEVBQ2xCLHFKQUNBLCtJQUNDRSxFQUFrQkYsRUFDbkIscUpBQ0EsK0lBR0g3MkcsRUFBT0MsUUFBVSxXQUNoQixJQUFJdW1HLEVBQUkvbUcsRUFBU3dCLEVBQXVCWixPQUN4QyxPQUFPd2tELEVBQVNBLEVBQVMyaEQsRUFBR3NRLEVBQWdCLElBQUtDLEVBQWlCLEdBQ25FLDhCQ2xCQSxJQUFJNzFHLEVBQVcsRUFBUSxLQUNuQkYsRUFBUyxFQUFRLE1BQ2pCQyxFQUF5QixFQUFRLE1BRWpDRSxFQUFpQixFQUFRLE1BQ3pCQyxFQUFjLEVBQVEsTUFDdEJHLEVBQU8sRUFBUSxNQUVmRSxFQUFRUCxFQUFTRSxLQUNqQjQxRyxFQUFjLFNBQWNubUUsR0FFL0IsT0FEQTV2QyxFQUF1QjR2QyxHQUNoQnB2QyxFQUFNb3ZDLEVBQ2QsRUFFQTd2QyxFQUFPZzJHLEVBQWEsQ0FDbkI1MUcsWUFBYUEsRUFDYkQsZUFBZ0JBLEVBQ2hCSSxLQUFNQSxJQUdQdkIsRUFBT0MsUUFBVSsyRywrQkNwQmpCLElBQUk3MUcsRUFBaUIsRUFBUSxNQUs3Qm5CLEVBQU9DLFFBQVUsV0FDaEIsT0FDQ2dQLE9BQU9uTixVQUFVd04sTUFMRSxVQU1EQSxRQUxVLFVBTURBLFFBQ21CLE9BQTNDLEtBQWdDQSxRQUNXLE9BQTNDLEtBQWdDQSxPQUU1QkwsT0FBT25OLFVBQVV3TixLQUVsQm5PLENBQ1IsK0JDaEJBLElBQUlILEVBQVMsRUFBUSxNQUNqQkksRUFBYyxFQUFRLE1BRTFCcEIsRUFBT0MsUUFBVSxXQUNoQixJQUFJb0IsRUFBV0QsSUFNZixPQUxBSixFQUFPaU8sT0FBT25OLFVBQVcsQ0FBRXdOLEtBQU1qTyxHQUFZLENBQzVDaU8sS0FBTSxXQUNMLE9BQU9MLE9BQU9uTixVQUFVd04sT0FBU2pPLENBQ2xDLElBRU1BLENBQ1IseUJDWEEsSUFBSTQxRyxFQUFjLEdBQ2xCLFNBQVNDLEVBQXFCQyxHQUU1QixJQURBLElBQUk5d0csR0FBVSxFQUNMckIsRUFBSSxFQUFHQSxFQUFJaXlHLEVBQVl2MkcsT0FBUXNFLElBQ3RDLEdBQUlpeUcsRUFBWWp5RyxHQUFHbXlHLGFBQWVBLEVBQVksQ0FDNUM5d0csRUFBU3JCLEVBQ1QsS0FDRixDQUVGLE9BQU9xQixDQUNULENBQ0EsU0FBUyt3RyxFQUFheDJGLEVBQU0zWSxHQUcxQixJQUZBLElBQUlvdkcsRUFBYSxDQUFDLEVBQ2RDLEVBQWMsR0FDVHR5RyxFQUFJLEVBQUdBLEVBQUk0YixFQUFLbGdCLE9BQVFzRSxJQUFLLENBQ3BDLElBQUkrTixFQUFPNk4sRUFBSzViLEdBQ1owYixFQUFLelksRUFBUTR6QixLQUFPOW9CLEVBQUssR0FBSzlLLEVBQVE0ekIsS0FBTzlvQixFQUFLLEdBQ2xENjJDLEVBQVF5dEQsRUFBVzMyRixJQUFPLEVBQzFCeTJGLEVBQWEsR0FBR3Z3RyxPQUFPOFosRUFBSSxLQUFLOVosT0FBT2dqRCxHQUMzQ3l0RCxFQUFXMzJGLEdBQU1rcEMsRUFBUSxFQUN6QixJQUFJMnRELEVBQW9CTCxFQUFxQkMsR0FDekN6a0csRUFBTSxDQUNSNUMsSUFBS2lELEVBQUssR0FDVmdPLE1BQU9oTyxFQUFLLEdBQ1p5a0csVUFBV3prRyxFQUFLLEdBQ2hCa08sU0FBVWxPLEVBQUssR0FDZm1PLE1BQU9uTyxFQUFLLElBRWQsSUFBMkIsSUFBdkJ3a0csRUFDRk4sRUFBWU0sR0FBbUJFLGFBQy9CUixFQUFZTSxHQUFtQnJpRSxRQUFReGlDLE9BQ2xDLENBQ0wsSUFBSXdpQyxFQUFVd2lFLEVBQWdCaGxHLEVBQUt6SyxHQUNuQ0EsRUFBUTB2RyxRQUFVM3lHLEVBQ2xCaXlHLEVBQVk5a0csT0FBT25OLEVBQUcsRUFBRyxDQUN2Qm15RyxXQUFZQSxFQUNaamlFLFFBQVNBLEVBQ1R1aUUsV0FBWSxHQUVoQixDQUNBSCxFQUFZM3lHLEtBQUt3eUcsRUFDbkIsQ0FDQSxPQUFPRyxDQUNULENBQ0EsU0FBU0ksRUFBZ0JobEcsRUFBS3pLLEdBQzVCLElBQUkydkcsRUFBTTN2RyxFQUFRNHZHLE9BQU81dkcsR0FZekIsT0FYQTJ2RyxFQUFJaGhHLE9BQU9sRSxHQUNHLFNBQWlCb2xHLEdBQzdCLEdBQUlBLEVBQVEsQ0FDVixHQUFJQSxFQUFPaG9HLE1BQVE0QyxFQUFJNUMsS0FBT2dvRyxFQUFPLzJGLFFBQVVyTyxFQUFJcU8sT0FBUysyRixFQUFPTixZQUFjOWtHLEVBQUk4a0csV0FBYU0sRUFBTzcyRixXQUFhdk8sRUFBSXVPLFVBQVk2MkYsRUFBTzUyRixRQUFVeE8sRUFBSXdPLE1BQ3pKLE9BRUYwMkYsRUFBSWhoRyxPQUFPbEUsRUFBTW9sRyxFQUNuQixNQUNFRixFQUFJaGtHLFFBRVIsQ0FFRixDQUNBNVQsRUFBT0MsUUFBVSxTQUFVMmdCLEVBQU0zWSxHQUcvQixJQUFJOHZHLEVBQWtCWCxFQUR0QngyRixFQUFPQSxHQUFRLEdBRGYzWSxFQUFVQSxHQUFXLENBQUMsR0FHdEIsT0FBTyxTQUFnQit2RyxHQUNyQkEsRUFBVUEsR0FBVyxHQUNyQixJQUFLLElBQUloekcsRUFBSSxFQUFHQSxFQUFJK3lHLEVBQWdCcjNHLE9BQVFzRSxJQUFLLENBQy9DLElBQ0lrTixFQUFRZ2xHLEVBREthLEVBQWdCL3lHLElBRWpDaXlHLEVBQVkva0csR0FBT3VsRyxZQUNyQixDQUVBLElBREEsSUFBSVEsRUFBcUJiLEVBQWFZLEVBQVMvdkcsR0FDdEMzRCxFQUFLLEVBQUdBLEVBQUt5ekcsRUFBZ0JyM0csT0FBUTRELElBQU0sQ0FDbEQsSUFDSTR6RyxFQUFTaEIsRUFES2EsRUFBZ0J6ekcsSUFFSyxJQUFuQzJ5RyxFQUFZaUIsR0FBUVQsYUFDdEJSLEVBQVlpQixHQUFRaGpFLFVBQ3BCK2hFLEVBQVk5a0csT0FBTytsRyxFQUFRLEdBRS9CLENBQ0FILEVBQWtCRSxDQUNwQixDQUNGLHlCQ2pGQSxJQUFJNUUsRUFBTyxDQUFDLEVBK0JacnpHLEVBQU9DLFFBUFAsU0FBMEI0VixFQUFRa2pFLEdBQ2hDLElBQUlyaUUsRUF0Qk4sU0FBbUJBLEdBQ2pCLFFBQTRCLElBQWpCMjhGLEVBQUszOEYsR0FBeUIsQ0FDdkMsSUFBSXloRyxFQUFjbHVFLFNBQVNtdUUsY0FBYzFoRyxHQUd6QyxHQUFJc3pCLE9BQU8raUQsbUJBQXFCb3JCLGFBQXVCbnVFLE9BQU8raUQsa0JBQzVELElBR0VvckIsRUFBY0EsRUFBWUUsZ0JBQWdCQyxJQUM1QyxDQUFFLE1BQU92dkcsR0FFUG92RyxFQUFjLElBQ2hCLENBRUY5RSxFQUFLMzhGLEdBQVV5aEcsQ0FDakIsQ0FDQSxPQUFPOUUsRUFBSzM4RixFQUNkLENBSWU2aEcsQ0FBVTFpRyxHQUN2QixJQUFLYSxFQUNILE1BQU0sSUFBSWxILE1BQU0sMkdBRWxCa0gsRUFBTzRoQixZQUFZeWdELEVBQ3JCLHdCQ3ZCQS80RSxFQUFPQyxRQU5QLFNBQTRCZ0ksR0FDMUIsSUFBSTRELEVBQVVvK0IsU0FBU2tQLGNBQWMsU0FHckMsT0FGQWx4QyxFQUFRdXdHLGNBQWMzc0csRUFBUzVELEVBQVF1aUIsWUFDdkN2aUIsRUFBUTROLE9BQU9oSyxFQUFTNUQsRUFBUUEsU0FDekI0RCxDQUNULCtCQ0NBN0wsRUFBT0MsUUFOUCxTQUF3Q3c0RyxHQUN0QyxJQUFJQyxFQUFtRCxLQUNuREEsR0FDRkQsRUFBYXBuQyxhQUFhLFFBQVNxbkMsRUFFdkMseUJDb0RBMTRHLEVBQU9DLFFBakJQLFNBQWdCZ0ksR0FDZCxHQUF3QixvQkFBYmdpQyxTQUNULE1BQU8sQ0FDTHJ6QixPQUFRLFdBQW1CLEVBQzNCaEQsT0FBUSxXQUFtQixHQUcvQixJQUFJNmtHLEVBQWV4d0csRUFBUTB3RyxtQkFBbUIxd0csR0FDOUMsTUFBTyxDQUNMMk8sT0FBUSxTQUFnQmxFLElBakQ1QixTQUFlK2xHLEVBQWN4d0csRUFBU3lLLEdBQ3BDLElBQUk1QyxFQUFNLEdBQ040QyxFQUFJdU8sV0FDTm5SLEdBQU8sY0FBY2xKLE9BQU84TCxFQUFJdU8sU0FBVSxRQUV4Q3ZPLEVBQUlxTyxRQUNOalIsR0FBTyxVQUFVbEosT0FBTzhMLEVBQUlxTyxNQUFPLE9BRXJDLElBQUlGLE9BQWlDLElBQWRuTyxFQUFJd08sTUFDdkJMLElBQ0YvUSxHQUFPLFNBQVNsSixPQUFPOEwsRUFBSXdPLE1BQU14Z0IsT0FBUyxFQUFJLElBQUlrRyxPQUFPOEwsRUFBSXdPLE9BQVMsR0FBSSxPQUU1RXBSLEdBQU80QyxFQUFJNUMsSUFDUCtRLElBQ0YvUSxHQUFPLEtBRUw0QyxFQUFJcU8sUUFDTmpSLEdBQU8sS0FFTDRDLEVBQUl1TyxXQUNOblIsR0FBTyxLQUVULElBQUkwbkcsRUFBWTlrRyxFQUFJOGtHLFVBQ2hCQSxHQUE2QixvQkFBVGwyRixPQUN0QnhSLEdBQU8sdURBQXVEbEosT0FBTzBhLEtBQUtFLFNBQVNuTyxtQkFBbUJsRSxLQUFLc1MsVUFBVSsxRixNQUFlLFFBS3RJdnZHLEVBQVEyd0csa0JBQWtCOW9HLEVBQUsyb0csRUFBY3h3RyxFQUFRQSxRQUN2RCxDQW9CTTNHLENBQU1tM0csRUFBY3h3RyxFQUFTeUssRUFDL0IsRUFDQWtCLE9BQVEsWUFyQlosU0FBNEI2a0csR0FFMUIsR0FBZ0MsT0FBNUJBLEVBQWF0K0IsV0FDZixPQUFPLEVBRVRzK0IsRUFBYXQrQixXQUFXekUsWUFBWStpQyxFQUN0QyxDQWdCTUksQ0FBbUJKLEVBQ3JCLEVBRUoseUJDOUNBejRHLEVBQU9DLFFBVlAsU0FBMkI2UCxFQUFLMm9HLEdBQzlCLEdBQUlBLEVBQWFLLFdBQ2ZMLEVBQWFLLFdBQVdDLFFBQVVqcEcsTUFDN0IsQ0FDTCxLQUFPMm9HLEVBQWFsdkYsWUFDbEJrdkYsRUFBYS9pQyxZQUFZK2lDLEVBQWFsdkYsWUFFeENrdkYsRUFBYW5nRixZQUFZMlIsU0FBU2k5RCxlQUFlcDNGLEdBQ25ELENBQ0YsMkNDVkEsSUFBSXBOLEVBQWUsRUFBUSxLQUV2QnMyRyxFQUFrQnQyRyxFQUFhLHFCQUMvQmkvQyxFQUFjLEVBQVEsTUFDdEIveUIsRUFBZSxFQUFRLE1BQ3ZCM3JCLEVBQWEsRUFBUSxNQUVyQmcyRyxFQUFZLEVBQVEsTUFFcEJDLEVBQW1CdHVHLEtBQUtteEIsSUFBSSxFQUFHLElBQU0sRUFFckN1bUIsRUFBVyxFQUFRLEdBQVIsR0FFWDYyRCxFQUFZejJHLEVBQWEsMkJBQTJCLEtBQ3ZENC9DLEVBQ0csU0FBVWxpRCxFQUFHZzVHLEdBRWQsT0FEQWg1RyxFQUFFeWMsVUFBWXU4RixFQUNQaDVHLENBQ1IsRUFDRSxNQUtKSixFQUFPQyxRQUFVLFNBQXFCUyxHQUNyQyxJQUFLdTRHLEVBQVV2NEcsSUFBV0EsRUFBUyxFQUNsQyxNQUFNLElBQUl1QyxFQUFXLDZEQUV0QixHQUFJdkMsRUFBU3c0RyxFQUNaLE1BQU0sSUFBSXYzRCxFQUFZLHNDQUV2QixJQUFJeTNELEVBQVEzNEcsVUFBVUMsT0FBUyxFQUFJRCxVQUFVLEdBQUt1NEcsRUFDOUNyNEcsRUFBSSxHQUNSLEdBQUl5NEcsSUFBVUosRUFBaUIsQ0FDOUIsSUFBS0csRUFDSixNQUFNLElBQUl2cUYsRUFBYSxvSkFFeEJ1cUYsRUFBVXg0RyxFQUFHeTRHLEVBQ2QsQ0FZQSxPQVhlLElBQVgxNEcsSUFDSEMsRUFBRUQsT0FBU0EsR0FVTEMsQ0FDUiwrQkNuREEsSUFFSTA0RyxFQUZlLEVBQVEsSUFFWjMyRyxDQUFhLG9CQUFvQixHQUM1Q08sRUFBYSxFQUFRLE1BRXJCcTJHLEVBQWMsRUFBUSxNQUN0Qm42RyxFQUFNLEVBQVEsTUFDZG82RyxFQUFVLEVBQVEsTUFDbEJDLEVBQWdCLEVBQVEsTUFDeEJDLEVBQU8sRUFBUSxNQUVmUixFQUFZLEVBQVEsTUFJeEJqNUcsRUFBT0MsUUFBVSxTQUE0Qnk1RyxFQUFlaDVHLEdBQzNELElBQUt1NEcsRUFBVXY0RyxJQUFXQSxFQUFTLEVBQ2xDLE1BQU0sSUFBSXVDLEVBQVcsb0RBSXRCLElBRGNzMkcsRUFBUUcsR0FFckIsT0FBT0osRUFBWTU0RyxHQUdwQixJQUFJNCtFLEVBQUluZ0YsRUFBSXU2RyxFQUFlLGVBYTNCLEdBUElMLEdBQXdCLFdBQVpJLEVBQUtuNkIsSUFFVixRQURWQSxFQUFJbmdGLEVBQUltZ0YsRUFBRys1QixNQUVWLzVCLE9BQUksUUFJVyxJQUFOQSxFQUNWLE9BQU9nNkIsRUFBWTU0RyxHQUVwQixJQUFLODRHLEVBQWNsNkIsR0FDbEIsTUFBTSxJQUFJcjhFLEVBQVcsMkJBRXRCLE9BQU8sSUFBSXE4RSxFQUFFNStFLEVBQ2QsOEJDN0NBLElBQUlnQyxFQUFlLEVBQVEsS0FDdkJoRCxFQUFZLEVBQVEsTUFFcEJ1RCxFQUFhLEVBQVEsTUFFckJzMkcsRUFBVSxFQUFRLE1BRWxCcjJHLEVBQVNSLEVBQWEsbUJBQW1CLElBQVNoRCxFQUFVLDRCQUloRU0sRUFBT0MsUUFBVSxTQUFja3hGLEVBQUd1VyxHQUNqQyxJQUFJaVMsRUFBZ0JsNUcsVUFBVUMsT0FBUyxFQUFJRCxVQUFVLEdBQUssR0FDMUQsSUFBSzg0RyxFQUFRSSxHQUNaLE1BQU0sSUFBSTEyRyxFQUFXLDJFQUV0QixPQUFPQyxFQUFPaXVGLEVBQUd1VyxFQUFHaVMsRUFDckIsK0JDakJBLElBQUkxMkcsRUFBYSxFQUFRLE1BRXJCMjJHLEVBQWdCLEVBQVEsTUFDeEJDLEVBQTRCLEVBQVEsTUFDcENKLEVBQU8sRUFBUSxNQUluQno1RyxFQUFPQyxRQUFVLFNBQTRCRyxFQUFHMC9DLEVBQUc0bkQsR0FDbEQsR0FBZ0IsV0FBWitSLEVBQUtyNUcsR0FDUixNQUFNLElBQUk2QyxFQUFXLDJDQUV0QixJQUFLMjJHLEVBQWM5NUQsR0FDbEIsTUFBTSxJQUFJNzhDLEVBQVcsa0RBUXRCLE9BQU80MkcsRUFBMEJ6NUcsRUFBRzAvQyxFQU50QixDQUNiLG9CQUFvQixFQUNwQixrQkFBa0IsRUFDbEIsWUFBYTRuRCxFQUNiLGdCQUFnQixHQUdsQiwrQkN0QkEsSUFBSXprRyxFQUFhLEVBQVEsTUFFckI2MkcsRUFBcUIsRUFBUSxNQUM3QkYsRUFBZ0IsRUFBUSxNQUN4QkgsRUFBTyxFQUFRLE1BSW5CejVHLEVBQU9DLFFBQVUsU0FBbUNHLEVBQUcwL0MsRUFBRzRuRCxHQUN6RCxHQUFnQixXQUFaK1IsRUFBS3I1RyxHQUNSLE1BQU0sSUFBSTZDLEVBQVcsMkNBRXRCLElBQUsyMkcsRUFBYzk1RCxHQUNsQixNQUFNLElBQUk3OEMsRUFBVyxrREFHdEIsSUFEYzYyRyxFQUFtQjE1RyxFQUFHMC9DLEVBQUc0bkQsR0FFdEMsTUFBTSxJQUFJemtHLEVBQVcsaUNBRXZCLCtCQ25CQSxJQUFJQSxFQUFhLEVBQVEsTUFFckI4MkcsRUFBdUIsRUFBUSxNQUMvQkMsRUFBb0IsRUFBUSxNQUU1QkMsRUFBeUIsRUFBUSxNQUNqQ0MsRUFBbUIsRUFBUSxNQUMzQk4sRUFBZ0IsRUFBUSxNQUN4Qk8sRUFBWSxFQUFRLE1BQ3BCQyxFQUF1QixFQUFRLE1BQy9CWCxFQUFPLEVBQVEsTUFJbkJ6NUcsRUFBT0MsUUFBVSxTQUErQkcsRUFBRzAvQyxFQUFHcDZDLEdBQ3JELEdBQWdCLFdBQVorekcsRUFBS3I1RyxHQUNSLE1BQU0sSUFBSTZDLEVBQVcsMkNBR3RCLElBQUsyMkcsRUFBYzk1RCxHQUNsQixNQUFNLElBQUk3OEMsRUFBVyxrREFHdEIsSUFBSW8zRyxFQUFPTixFQUFxQnIwRyxHQUFRQSxFQUFPMDBHLEVBQXFCMTBHLEdBQ3BFLElBQUtxMEcsRUFBcUJNLEdBQ3pCLE1BQU0sSUFBSXAzRyxFQUFXLDZEQUd0QixPQUFPKzJHLEVBQ05FLEVBQ0FDLEVBQ0FGLEVBQ0E3NUcsRUFDQTAvQyxFQUNBdTZELEVBRUYsK0JDcENBLElBQUlwM0csRUFBYSxFQUFRLE1BRXJCc3pELEVBQW1CLEVBQVEsTUFFM0J0M0QsRUFBTyxFQUFRLEtBQ2ZDLEVBQTRCLEVBQVEsTUFDcENDLEVBQU0sRUFBUSxNQUNkQyxFQUFjLEVBQVEsTUFDdEJtNkcsRUFBVSxFQUFRLE1BQ2xCajZHLEVBQW9CLEVBQVEsTUFDNUJHLEVBQVcsRUFBUSxNQUl2Qk8sRUFBT0MsUUFBVSxTQUFTK0IsRUFBaUIwVSxFQUFRbS9DLEVBQVExekQsRUFBV3VZLEVBQU9vb0IsR0FDNUUsSUFBSXczRSxFQUNBNzVHLFVBQVVDLE9BQVMsSUFDdEI0NUcsRUFBaUI3NUcsVUFBVSxJQUs1QixJQUZBLElBQUk4NUcsRUFBYzcvRixFQUNkOC9GLEVBQWMsRUFDWEEsRUFBY3I0RyxHQUFXLENBQy9CLElBQUkyOUMsRUFBSXJnRCxFQUFTKzZHLEdBRWpCLElBQWUsSUFERnA3RyxFQUFZeTJELEVBQVEvVixHQUNaLENBQ3BCLElBQUlqMEMsRUFBVTFNLEVBQUkwMkQsRUFBUS9WLEdBQzFCLFFBQThCLElBQW5CdzZELEVBQWdDLENBQzFDLEdBQUk3NUcsVUFBVUMsUUFBVSxFQUN2QixNQUFNLElBQUl1QyxFQUFXLHlFQUV0QjRJLEVBQVU1TSxFQUFLcTdHLEVBQWdCNzVHLFVBQVUsR0FBSSxDQUFDb0wsRUFBUzJ1RyxFQUFhM2tELEdBQ3JFLENBQ0EsSUFBSTRrRCxHQUFnQixFQUlwQixHQUhJMzNFLEVBQVEsSUFDWDIzRSxFQUFnQmxCLEVBQVExdEcsSUFFckI0dUcsRUFFSEYsRUFBY3Y0RyxFQUFpQjBVLEVBQVE3SyxFQUR0QnZNLEVBQWtCdU0sR0FDeUIwdUcsRUFBYXozRSxFQUFRLE9BQzNFLENBQ04sR0FBSXkzRSxHQUFlaGtELEVBQ2xCLE1BQU0sSUFBSXR6RCxFQUFXLG1CQUV0Qi9ELEVBQTBCd1gsRUFBUWpYLEVBQVM4NkcsR0FBYzF1RyxHQUN6RDB1RyxHQUFlLENBQ2hCLENBQ0QsQ0FDQUMsR0FBZSxDQUNoQixDQUVBLE9BQU9ELENBQ1IsK0JDcERBLElBQUl0M0csRUFBYSxFQUFRLE1BRXJCODJHLEVBQXVCLEVBQVEsTUFDL0JXLEVBQXlCLEVBQVEsTUFJckMxNkcsRUFBT0MsUUFBVSxTQUFnQ282RyxHQUNoRCxRQUFvQixJQUFUQSxJQUF5Qk4sRUFBcUJNLEdBQ3hELE1BQU0sSUFBSXAzRyxFQUFXLDBEQUd0QixPQUFPeTNHLEVBQXVCTCxFQUMvQiwrQkNiQSxJQUFJcDNHLEVBQWEsRUFBUSxNQUVyQjJsRSxFQUFVLEVBQVEsTUFFbEJneEMsRUFBZ0IsRUFBUSxNQUN4QkgsRUFBTyxFQUFRLE1BSW5CejVHLEVBQU9DLFFBQVUsU0FBYUcsRUFBRzAvQyxHQUVoQyxHQUFnQixXQUFaMjVELEVBQUtyNUcsR0FDUixNQUFNLElBQUk2QyxFQUFXLDJDQUd0QixJQUFLMjJHLEVBQWM5NUQsR0FDbEIsTUFBTSxJQUFJNzhDLEVBQVcsdURBQXlEMmxFLEVBQVE5b0IsSUFHdkYsT0FBTzEvQyxFQUFFMC9DLEVBQ1YsK0JDcEJBLElBQUk3OEMsRUFBYSxFQUFRLE1BRXJCZ0ssRUFBUyxFQUFRLE1BRWpCMnNHLEVBQWdCLEVBQVEsTUFDeEJILEVBQU8sRUFBUSxNQUluQno1RyxFQUFPQyxRQUFVLFNBQXdCRyxFQUFHMC9DLEdBQzNDLEdBQWdCLFdBQVoyNUQsRUFBS3I1RyxHQUNSLE1BQU0sSUFBSTZDLEVBQVcsMkNBRXRCLElBQUsyMkcsRUFBYzk1RCxHQUNsQixNQUFNLElBQUk3OEMsRUFBVyxnREFFdEIsT0FBT2dLLEVBQU83TSxFQUFHMC9DLEVBQ2xCLCtCQ2pCQSxJQUFJNzhDLEVBQWEsRUFBUSxNQUVyQjIyRyxFQUFnQixFQUFRLE1BQ3hCSCxFQUFPLEVBQVEsTUFJbkJ6NUcsRUFBT0MsUUFBVSxTQUFxQkcsRUFBRzAvQyxHQUN4QyxHQUFnQixXQUFaMjVELEVBQUtyNUcsR0FDUixNQUFNLElBQUk2QyxFQUFXLDJDQUV0QixJQUFLMjJHLEVBQWM5NUQsR0FDbEIsTUFBTSxJQUFJNzhDLEVBQVcsZ0RBRXRCLE9BQU82OEMsS0FBSzEvQyxDQUNiLCtCQ2ZBLElBQUk2QyxFQUFhLEVBQVEsTUFFckJnSyxFQUFTLEVBQVEsTUFFakI4c0csRUFBdUIsRUFBUSxNQUluQy81RyxFQUFPQyxRQUFVLFNBQThCbzZHLEdBQzlDLFFBQW9CLElBQVRBLEVBQ1YsT0FBTyxFQUdSLElBQUtOLEVBQXFCTSxHQUN6QixNQUFNLElBQUlwM0csRUFBVywwREFHdEIsU0FBS2dLLEVBQU9vdEcsRUFBTSxhQUFlcHRHLEVBQU9vdEcsRUFBTSxXQUsvQywrQkNyQkFyNkcsRUFBT0MsUUFBVSxFQUFqQixtQ0NDQUQsRUFBT0MsUUFBVSxFQUFqQixtQ0NGQSxJQUVJMDZHLEVBRmUsRUFBUSxLQUVWajRHLENBQWEsdUJBQXVCLEdBRWpEazRHLEVBQXdCLEVBQVEsTUFDcEMsSUFDQ0EsRUFBc0IsQ0FBQyxFQUFHLEdBQUksQ0FBRSxVQUFXLFdBQWEsR0FDekQsQ0FBRSxNQUFPN3hHLEdBRVI2eEcsRUFBd0IsSUFDekIsQ0FJQSxHQUFJQSxHQUF5QkQsRUFBWSxDQUN4QyxJQUFJRSxFQUFzQixDQUFDLEVBQ3ZCL21ELEVBQWUsQ0FBQyxFQUNwQjhtRCxFQUFzQjltRCxFQUFjLFNBQVUsQ0FDN0MsVUFBVyxXQUNWLE1BQU0rbUQsQ0FDUCxFQUNBLGtCQUFrQixJQUduQjc2RyxFQUFPQyxRQUFVLFNBQXVCNjZHLEdBQ3ZDLElBRUNILEVBQVdHLEVBQVVobkQsRUFDdEIsQ0FBRSxNQUFPMXRCLEdBQ1IsT0FBT0EsSUFBUXkwRSxDQUNoQixDQUNELENBQ0QsTUFDQzc2RyxFQUFPQyxRQUFVLFNBQXVCNjZHLEdBRXZDLE1BQTJCLG1CQUFiQSxLQUE2QkEsRUFBU2g1RyxTQUNyRCwrQkNwQ0QsSUFBSW1CLEVBQWEsRUFBUSxNQUVyQmdLLEVBQVMsRUFBUSxNQUVqQjhzRyxFQUF1QixFQUFRLE1BSW5DLzVHLEVBQU9DLFFBQVUsU0FBMEJvNkcsR0FDMUMsUUFBb0IsSUFBVEEsRUFDVixPQUFPLEVBR1IsSUFBS04sRUFBcUJNLEdBQ3pCLE1BQU0sSUFBSXAzRyxFQUFXLDBEQUd0QixTQUFLZ0ssRUFBT290RyxFQUFNLGVBQWlCcHRHLEVBQU9vdEcsRUFBTSxnQkFLakQsOEJDdEJBLElBQUkzM0csRUFBZSxFQUFRLEtBRXZCcTRHLEVBQXFCcjRHLEVBQWEsOEJBQThCLEdBQ2hFczRHLEVBQWdCdDRHLEVBQWEseUJBQXlCLEdBRXRENjhDLEVBQWMsRUFBUSxNQUkxQnYvQyxFQUFPQyxRQUFVODZHLEVBQ2QsU0FBc0Jyb0csR0FDdkIsT0FBUTZzQyxFQUFZN3NDLElBQVFzb0csRUFBY3RvRyxFQUMzQyxFQUNFLFNBQXNCQSxHQUN2QixPQUFRNnNDLEVBQVk3c0MsRUFDckIsK0JDZkQsSUFBSXpQLEVBQWEsRUFBUSxNQUVyQmc0RyxFQUF1QixFQUFRLE1BQy9CZixFQUFtQixFQUFRLE1BRTNCSCxFQUF1QixFQUFRLE1BSW5DLzVHLEVBQU9DLFFBQVUsU0FBNkJvNkcsR0FDN0MsUUFBb0IsSUFBVEEsRUFDVixPQUFPLEVBR1IsSUFBS04sRUFBcUJNLEdBQ3pCLE1BQU0sSUFBSXAzRyxFQUFXLDBEQUd0QixPQUFLZzRHLEVBQXFCWixLQUFVSCxFQUFpQkcsRUFLdEQseUJDckJBcjZHLEVBQU9DLFFBQVUsU0FBdUI2NkcsR0FDdkMsTUFBMkIsaUJBQWJBLEdBQTZDLGlCQUFiQSxDQUMvQywrQkNKQSxJQUFJNzNHLEVBQWEsRUFBUSxNQUVyQjlELEVBQU0sRUFBUSxNQUNkK0MsRUFBVyxFQUFRLE1BQ25CdTNHLEVBQU8sRUFBUSxNQUluQno1RyxFQUFPQyxRQUFVLFNBQTJCeVMsR0FDM0MsR0FBa0IsV0FBZCttRyxFQUFLL21HLEdBQ1IsTUFBTSxJQUFJelAsRUFBVyw2Q0FFdEIsT0FBT2YsRUFBUy9DLEVBQUl1VCxFQUFLLFVBQzFCLCtCQ2JBLElBQUl1dkMsRUFBUSxFQUFRLE1BQ2hCcnpCLEVBQWUsRUFBUSxNQUN2QjNyQixFQUFhLEVBQVEsTUFFckI4MkcsRUFBdUIsRUFBUSxNQUUvQmtCLEVBQXVCLEVBQVEsTUFDL0JDLEVBQWUsRUFBUSxLQUN2QnRCLEVBQWdCLEVBQVEsTUFDeEJRLEVBQXVCLEVBQVEsTUFDL0JELEVBQVksRUFBUSxNQUNwQlYsRUFBTyxFQUFRLE1BQ2YwQixFQUFxQyxFQUFRLE1BSWpEbjdHLEVBQU9DLFFBQVUsU0FBbUNHLEVBQUcwL0MsRUFBR3U2RCxHQUN6RCxHQUFnQixXQUFaWixFQUFLcjVHLEdBQ1IsTUFBTSxJQUFJNkMsRUFBVyx5Q0FFdEIsSUFBSzIyRyxFQUFjOTVELEdBQ2xCLE1BQU0sSUFBSTc4QyxFQUFXLDhDQUV0QixJQUFLODJHLEVBQXFCTSxHQUN6QixNQUFNLElBQUlwM0csRUFBVyx3REFFdEIsSUFBS2cvQyxFQUFPLENBRVgsR0FBSWc1RCxFQUFxQlosR0FDeEIsTUFBTSxJQUFJenJGLEVBQWEsb0VBRXhCLElBQUl3c0YsSUFBK0J0N0QsS0FBSzEvQyxJQUNwQ2k2RyxFQUFLLGlCQUNMQSxFQUFLLG1CQUNMQSxFQUFLLHFCQUNMLGNBQWVBLEVBQ2ZnQixFQUErQnY3RCxLQUFLMS9DLE1BQ2pDLHFCQUFzQmk2RyxJQUFTQSxFQUFLLHlCQUNwQyxtQkFBb0JBLElBQVNBLEVBQUssdUJBQ2xDLGlCQUFrQkEsSUFBU0EsRUFBSyxrQkFDbkMsY0FBZUEsRUFDbkIsR0FBSWUsR0FBOEJDLEVBRWpDLE9BREFqN0csRUFBRTAvQyxHQUFLdTZELEVBQUssYUFDTEYsRUFBVS81RyxFQUFFMC9DLEdBQUl1NkQsRUFBSyxjQUU3QixNQUFNLElBQUl6ckYsRUFBYSwwR0FDeEIsQ0FDQSxJQUFJbHBCLEVBQU91OEMsRUFBTTdoRCxFQUFHMC9DLEdBQ2hCdjZCLEVBQVU3ZixHQUFRMDBHLEVBQXFCMTBHLEdBQ3ZDNDFHLEVBQWFKLEVBQWE5NkcsR0FDOUIsT0FBTys2RyxFQUFtQy82RyxFQUFHMC9DLEVBQUd3N0QsRUFBWWpCLEVBQU05MEYsRUFDbkUsK0JDbkRBLElBQUlnMkYsRUFBUyxFQUFRLE1BSXJCdjdHLEVBQU9DLFFBQVUsU0FBbUI2ZixFQUFHbzRFLEdBQ3RDLE9BQUlwNEUsSUFBTW80RSxFQUNDLElBQU5wNEUsR0FBa0IsRUFBSUEsR0FBTSxFQUFJbzRFLEVBRzlCcWpCLEVBQU96N0YsSUFBTXk3RixFQUFPcmpCLEVBQzVCLCtCQ1ZBLElBQUl4MUYsRUFBZSxFQUFRLEtBRXZCODRHLEVBQVU5NEcsRUFBYSxZQUN2Qis0RyxFQUFVLzRHLEVBQWEsWUFDdkJPLEVBQWEsRUFBUSxNQUNyQnk0RyxFQUFnQmg1RyxFQUFhLGNBRTdCaEQsRUFBWSxFQUFRLE1BQ3BCaThHLEVBQWMsRUFBUSxNQUV0QjcyRCxFQUFZcGxELEVBQVUsMEJBQ3RCazhHLEVBQVdELEVBQVksY0FDdkJFLEVBQVVGLEVBQVksZUFDdEJHLEVBQXNCSCxFQUFZLHNCQUdsQ0ksRUFBV0osRUFERSxJQUFJRixFQUFRLElBRGpCLENBQUMsSUFBVSxJQUFVLEtBQVU3cEcsS0FBSyxJQUNMLElBQUssTUFHNUNvcUcsRUFBUSxFQUFRLEtBSXBCaDhHLEVBQU9DLFFBQVUsU0FBU2c4RyxFQUFlbkIsR0FDeEMsR0FBd0IsaUJBQWJBLEVBQ1YsTUFBTSxJQUFJNzNHLEVBQVcsZ0RBRXRCLEdBQUkyNEcsRUFBU2QsR0FDWixPQUFPVSxFQUFRRSxFQUFjNTJELEVBQVVnMkQsRUFBVSxHQUFJLElBRXRELEdBQUllLEVBQVFmLEdBQ1gsT0FBT1UsRUFBUUUsRUFBYzUyRCxFQUFVZzJELEVBQVUsR0FBSSxJQUV0RCxHQUFJaUIsRUFBU2pCLElBQWFnQixFQUFvQmhCLEdBQzdDLE9BQU9wd0csSUFFUixJQUFJa0ksRUFBVW9wRyxFQUFNbEIsR0FDcEIsT0FBSWxvRyxJQUFZa29HLEVBQ1JtQixFQUFlcnBHLEdBRWhCNG9HLEVBQVFWLEVBQ2hCLHlCQ3RDQTk2RyxFQUFPQyxRQUFVLFNBQW1CMEQsR0FBUyxRQUFTQSxDQUFPLDhCQ0Y3RCxJQUFJdTRHLEVBQVcsRUFBUSxNQUNuQkMsRUFBVyxFQUFRLE1BRW5CWixFQUFTLEVBQVEsTUFDakJhLEVBQVksRUFBUSxNQUl4QnA4RyxFQUFPQyxRQUFVLFNBQTZCMEQsR0FDN0MsSUFBSTBoRCxFQUFTNjJELEVBQVN2NEcsR0FDdEIsT0FBSTQzRyxFQUFPbDJELElBQXNCLElBQVhBLEVBQXVCLEVBQ3hDKzJELEVBQVUvMkQsR0FDUjgyRCxFQUFTOTJELEdBRGlCQSxDQUVsQywrQkNiQSxJQUFJa1IsRUFBbUIsRUFBUSxNQUUzQnQwRCxFQUFzQixFQUFRLEtBRWxDakMsRUFBT0MsUUFBVSxTQUFrQjY2RyxHQUNsQyxJQUFJdjZHLEVBQU0wQixFQUFvQjY0RyxHQUM5QixPQUFJdjZHLEdBQU8sRUFBWSxFQUNuQkEsRUFBTWcyRCxFQUEyQkEsRUFDOUJoMkQsQ0FDUiwrQkNUQSxJQUFJbUMsRUFBZSxFQUFRLEtBRXZCTyxFQUFhLEVBQVEsTUFDckJ1NEcsRUFBVTk0RyxFQUFhLFlBQ3ZCNjhDLEVBQWMsRUFBUSxNQUV0Qjg4RCxFQUFjLEVBQVEsTUFDdEJKLEVBQWlCLEVBQVEsTUFJN0JqOEcsRUFBT0MsUUFBVSxTQUFrQjY2RyxHQUNsQyxJQUFJbjNHLEVBQVE0N0MsRUFBWXU3RCxHQUFZQSxFQUFXdUIsRUFBWXZCLEVBQVVVLEdBQ3JFLEdBQXFCLGlCQUFWNzNHLEVBQ1YsTUFBTSxJQUFJVixFQUFXLDZDQUV0QixHQUFxQixpQkFBVlUsRUFDVixNQUFNLElBQUlWLEVBQVcsd0RBRXRCLE1BQXFCLGlCQUFWVSxFQUNIczRHLEVBQWV0NEcsR0FFaEI2M0csRUFBUTczRyxFQUNoQiwrQkNyQkEzRCxFQUFPQyxRQUFVLEVBQWpCLG1DQ0ZBLElBQUk0L0MsRUFBYyxFQUFRLE1BSTFCNy9DLEVBQU9DLFFBQVUsU0FBcUJnb0IsR0FDckMsT0FBSXhuQixVQUFVQyxPQUFTLEVBQ2ZtL0MsRUFBWTUzQixFQUFPeG5CLFVBQVUsSUFFOUJvL0MsRUFBWTUzQixFQUNwQiwrQkNUQSxJQUFJaGIsRUFBUyxFQUFRLE1BRWpCaEssRUFBYSxFQUFRLE1BRXJCdzJHLEVBQU8sRUFBUSxNQUNmbDZHLEVBQVksRUFBUSxNQUNwQkYsRUFBYSxFQUFRLE1BSXpCVyxFQUFPQyxRQUFVLFNBQThCcThHLEdBQzlDLEdBQWtCLFdBQWQ3QyxFQUFLNkMsR0FDUixNQUFNLElBQUlyNUcsRUFBVywyQ0FHdEIsSUFBSXlDLEVBQU8sQ0FBQyxFQWFaLEdBWkl1SCxFQUFPcXZHLEVBQUssZ0JBQ2Y1MkcsRUFBSyxrQkFBb0JuRyxFQUFVKzhHLEVBQUl2MkcsYUFFcENrSCxFQUFPcXZHLEVBQUssa0JBQ2Y1MkcsRUFBSyxvQkFBc0JuRyxFQUFVKzhHLEVBQUl4MkcsZUFFdENtSCxFQUFPcXZHLEVBQUssV0FDZjUyRyxFQUFLLGFBQWU0MkcsRUFBSTM0RyxPQUVyQnNKLEVBQU9xdkcsRUFBSyxjQUNmNTJHLEVBQUssZ0JBQWtCbkcsRUFBVSs4RyxFQUFJejJHLFdBRWxDb0gsRUFBT3F2RyxFQUFLLE9BQVEsQ0FDdkIsSUFBSXhyRSxFQUFTd3JFLEVBQUl0MkcsSUFDakIsUUFBc0IsSUFBWDhxQyxJQUEyQnp4QyxFQUFXeXhDLEdBQ2hELE1BQU0sSUFBSTd0QyxFQUFXLDZCQUV0QnlDLEVBQUssV0FBYW9yQyxDQUNuQixDQUNBLEdBQUk3akMsRUFBT3F2RyxFQUFLLE9BQVEsQ0FDdkIsSUFBSUMsRUFBU0QsRUFBSXZpRyxJQUNqQixRQUFzQixJQUFYd2lHLElBQTJCbDlHLEVBQVdrOUcsR0FDaEQsTUFBTSxJQUFJdDVHLEVBQVcsNkJBRXRCeUMsRUFBSyxXQUFhNjJHLENBQ25CLENBRUEsSUFBS3R2RyxFQUFPdkgsRUFBTSxZQUFjdUgsRUFBT3ZILEVBQU0sY0FBZ0J1SCxFQUFPdkgsRUFBTSxjQUFnQnVILEVBQU92SCxFQUFNLGlCQUN0RyxNQUFNLElBQUl6QyxFQUFXLGdHQUV0QixPQUFPeUMsQ0FDUiwrQkMvQ0EsSUFFSTgyRyxFQUZlLEVBQVEsSUFFYjk1RyxDQUFhLFlBQ3ZCTyxFQUFhLEVBQVEsTUFJekJqRCxFQUFPQyxRQUFVLFNBQWtCNjZHLEdBQ2xDLEdBQXdCLGlCQUFiQSxFQUNWLE1BQU0sSUFBSTczRyxFQUFXLDZDQUV0QixPQUFPdTVHLEVBQVExQixFQUNoQiwrQkNaQSxJQUFJMkIsRUFBVSxFQUFRLE1BSXRCejhHLEVBQU9DLFFBQVUsU0FBYzZmLEdBQzlCLE1BQWlCLGlCQUFOQSxFQUNILFNBRVMsaUJBQU5BLEVBQ0gsU0FFRDI4RixFQUFRMzhGLEVBQ2hCLCtCQ1pBLElBQUk3YyxFQUFhLEVBQVEsTUFFckIrMkcsRUFBb0IsRUFBUSxNQUM1QjBDLEVBQXFDLEVBQVEsTUFDN0MzQyxFQUF1QixFQUFRLE1BRS9CRSxFQUF5QixFQUFRLE1BQ2pDZ0IsRUFBdUIsRUFBUSxNQUMvQmYsRUFBbUIsRUFBUSxNQUMzQnlDLEVBQXNCLEVBQVEsTUFDOUIvQyxFQUFnQixFQUFRLE1BQ3hCTyxFQUFZLEVBQVEsTUFDcEJWLEVBQU8sRUFBUSxNQU9uQno1RyxFQUFPQyxRQUFVLFNBQTRDRyxFQUFHMC9DLEVBQUd3N0QsRUFBWWpCLEVBQU05MEYsR0FDcEYsSUFtR0t6ZixFQUNBQyxFQXBHRDYyRyxFQUFRbkQsRUFBS3I1RyxHQUNqQixHQUFjLGNBQVZ3OEcsR0FBbUMsV0FBVkEsRUFDNUIsTUFBTSxJQUFJMzVHLEVBQVcsc0RBRXRCLElBQUsyMkcsRUFBYzk1RCxHQUNsQixNQUFNLElBQUk3OEMsRUFBVyw4Q0FFdEIsR0FBMEIsa0JBQWZxNEcsRUFDVixNQUFNLElBQUlyNEcsRUFBVyxrREFFdEIsSUFBSzgyRyxFQUFxQk0sR0FDekIsTUFBTSxJQUFJcDNHLEVBQVcsd0RBRXRCLFFBQXVCLElBQVpzaUIsSUFBNEJ3MEYsRUFBcUJ4MEYsR0FDM0QsTUFBTSxJQUFJdGlCLEVBQVcseUVBR3RCLFFBQXVCLElBQVpzaUIsRUFDVixRQUFLKzFGLElBR1MsY0FBVnNCLElBR0EzQixFQUFxQlosR0FDakJMLEVBQ05FLEVBQ0FDLEVBQ0FGLEVBQ0E3NUcsRUFDQTAvQyxFQUNBdTZELEdBSUtMLEVBQ05FLEVBQ0FDLEVBQ0FGLEVBQ0E3NUcsRUFDQTAvQyxFQUNBLENBQ0MscUJBQXNCdTZELEVBQUssb0JBQzNCLG1CQUFvQkEsRUFBSyxrQkFDekIsWUFBYUEsRUFBSyxhQUNsQixpQkFBa0JBLEVBQUssb0JBTTFCLElBQ0VxQyxFQUNBLENBQ0N6QixxQkFBc0JBLEVBQ3RCZixpQkFBa0JBLEdBRW5CMzBGLEdBR0QsTUFBTSxJQUFJdGlCLEVBQVcsb0ZBT3RCLElBQUtzaUIsRUFBUSxvQkFBcUIsQ0FDakMsR0FBSSxxQkFBc0I4MEYsR0FBUUEsRUFBSyxvQkFFdEMsT0FBTyxFQUVSLEdBQUksbUJBQW9CQSxJQUFTRixFQUFVRSxFQUFLLGtCQUFtQjkwRixFQUFRLG1CQUUxRSxPQUFPLEVBRVIsSUFBS28zRixFQUFvQnRDLEtBQVVGLEVBQVVjLEVBQXFCWixHQUFPWSxFQUFxQjExRixJQUU3RixPQUFPLEVBRVIsR0FBSTAxRixFQUFxQjExRixHQUFVLENBQ2xDLEdBQUksWUFBYTgwRixJQUFTRixFQUFVRSxFQUFLLFdBQVk5MEYsRUFBUSxZQUM1RCxPQUFPLEVBRVIsR0FBSSxZQUFhODBGLElBQVNGLEVBQVVFLEVBQUssV0FBWTkwRixFQUFRLFlBQzVELE9BQU8sQ0FFVCxNQUFPLElBQUtBLEVBQVEsZ0JBQWlCLENBQ3BDLEdBQUksaUJBQWtCODBGLEdBQVFBLEVBQUssZ0JBQ2xDLE9BQU8sRUFFUixHQUFJLGNBQWVBLElBQVNGLEVBQVVFLEVBQUssYUFBYzkwRixFQUFRLGNBQ2hFLE9BQU8sQ0FFVCxDQUNELENBR0EsTUFBYyxjQUFWcTNGLElBR0MxQyxFQUFpQjMwRixJQUFZMDFGLEVBQXFCWixJQUNyRHYwRyxHQUFnQixxQkFBc0J1MEcsRUFBT0EsRUFBTzkwRixHQUFTLG9CQUM3RHhmLEdBQWMsbUJBQW9CczBHLEVBQU9BLEVBQU85MEYsR0FBUyxrQkFFbER5MEYsRUFDTkUsRUFDQUMsRUFDQUYsRUFDQTc1RyxFQUNBMC9DLEVBQ0EsQ0FDQyxxQkFBc0JoNkMsRUFDdEIsbUJBQW9CQyxFQUNwQixXQUFZLFlBQWFzMEcsRUFBT0EsRUFBTzkwRixHQUFTLFdBQ2hELFdBQVksWUFBYTgwRixFQUFPQSxFQUFPOTBGLEdBQVMsY0FHeEMwMUYsRUFBcUIxMUYsSUFBWTIwRixFQUFpQkcsSUFDNUR2MEcsR0FBZ0IscUJBQXNCdTBHLEVBQU9BLEVBQU85MEYsR0FBUyxvQkFDN0R4ZixHQUFjLG1CQUFvQnMwRyxFQUFPQSxFQUFPOTBGLEdBQVMsa0JBRWxEeTBGLEVBQ05FLEVBQ0FDLEVBQ0FGLEVBQ0E3NUcsRUFDQTAvQyxFQUNBLENBQ0MscUJBQXNCaDZDLEVBQ3RCLG1CQUFvQkMsRUFDcEIsYUFBYyxjQUFlczBHLEVBQU9BLEVBQU85MEYsR0FBUyxhQUNwRCxrQkFBbUIsaUJBQWtCODBGLEVBQU9BLEVBQU85MEYsR0FBUyxtQkFNeER5MEYsRUFDTkUsRUFDQUMsRUFDQUYsRUFDQTc1RyxFQUNBMC9DLEVBQ0F1NkQsR0FLSCx5QkN4S0EsSUFBSXZ6QyxFQUFTbDhELEtBQUttOEQsTUFJbEIvbUUsRUFBT0MsUUFBVSxTQUFlNmYsR0FFL0IsTUFBaUIsaUJBQU5BLEVBQ0hBLEVBRURnbkQsRUFBT2huRCxFQUNmLCtCQ1hBLElBQUlpbkQsRUFBUSxFQUFRLE1BRWhCOWpFLEVBQWEsRUFBUSxNQUl6QmpELEVBQU9DLFFBQVUsU0FBa0I2ZixHQUNsQyxHQUFpQixpQkFBTkEsR0FBK0IsaUJBQU5BLEVBQ25DLE1BQU0sSUFBSTdjLEVBQVcseUNBRXRCLElBQUlvRCxFQUFTeVosRUFBSSxHQUFLaW5ELEdBQU9qbkQsR0FBS2luRCxFQUFNam5ELEdBQ3hDLE9BQWtCLElBQVh6WixFQUFlLEVBQUlBLENBQzNCLCtCQ1pBLElBQUkzRCxFQUFlLEVBQVEsS0FFdkJzMkcsRUFBa0J0MkcsRUFBYSxxQkFDL0JpL0MsRUFBYyxFQUFRLE1BQ3RCL3lCLEVBQWUsRUFBUSxNQUN2QjNyQixFQUFhLEVBQVEsTUFFckJnMkcsRUFBWSxFQUFRLE1BRXBCQyxFQUFtQnR1RyxLQUFLbXhCLElBQUksRUFBRyxJQUFNLEVBRXJDdW1CLEVBQVcsRUFBUSxHQUFSLEdBRVg2MkQsRUFBWXoyRyxFQUFhLDJCQUEyQixLQUN2RDQvQyxFQUNHLFNBQVVsaUQsRUFBR2c1RyxHQUVkLE9BREFoNUcsRUFBRXljLFVBQVl1OEYsRUFDUGg1RyxDQUNSLEVBQ0UsTUFLSkosRUFBT0MsUUFBVSxTQUFxQlMsR0FDckMsSUFBS3U0RyxFQUFVdjRHLElBQVdBLEVBQVMsRUFDbEMsTUFBTSxJQUFJdUMsRUFBVyw2REFFdEIsR0FBSXZDLEVBQVN3NEcsRUFDWixNQUFNLElBQUl2M0QsRUFBWSxzQ0FFdkIsSUFBSXkzRCxFQUFRMzRHLFVBQVVDLE9BQVMsRUFBSUQsVUFBVSxHQUFLdTRHLEVBQzlDcjRHLEVBQUksR0FDUixHQUFJeTRHLElBQVVKLEVBQWlCLENBQzlCLElBQUtHLEVBQ0osTUFBTSxJQUFJdnFGLEVBQWEsb0pBRXhCdXFGLEVBQVV4NEcsRUFBR3k0RyxFQUNkLENBWUEsT0FYZSxJQUFYMTRHLElBQ0hDLEVBQUVELE9BQVNBLEdBVUxDLENBQ1IsK0JDbkRBLElBRUkwNEcsRUFGZSxFQUFRLElBRVozMkcsQ0FBYSxvQkFBb0IsR0FDNUNPLEVBQWEsRUFBUSxNQUVyQnEyRyxFQUFjLEVBQVEsTUFDdEJuNkcsRUFBTSxFQUFRLEtBQ2RvNkcsRUFBVSxFQUFRLEtBQ2xCQyxFQUFnQixFQUFRLE1BQ3hCQyxFQUFPLEVBQVEsTUFFZlIsRUFBWSxFQUFRLE1BSXhCajVHLEVBQU9DLFFBQVUsU0FBNEJ5NUcsRUFBZWg1RyxHQUMzRCxJQUFLdTRHLEVBQVV2NEcsSUFBV0EsRUFBUyxFQUNsQyxNQUFNLElBQUl1QyxFQUFXLG9EQUl0QixJQURjczJHLEVBQVFHLEdBRXJCLE9BQU9KLEVBQVk1NEcsR0FHcEIsSUFBSTQrRSxFQUFJbmdGLEVBQUl1NkcsRUFBZSxlQWEzQixHQVBJTCxHQUF3QixXQUFaSSxFQUFLbjZCLElBRVYsUUFEVkEsRUFBSW5nRixFQUFJbWdGLEVBQUcrNUIsTUFFVi81QixPQUFJLFFBSVcsSUFBTkEsRUFDVixPQUFPZzZCLEVBQVk1NEcsR0FFcEIsSUFBSzg0RyxFQUFjbDZCLEdBQ2xCLE1BQU0sSUFBSXI4RSxFQUFXLDJCQUV0QixPQUFPLElBQUlxOEUsRUFBRTUrRSxFQUNkLCtCQzdDQSxJQUFJZ0MsRUFBZSxFQUFRLEtBQ3ZCaEQsRUFBWSxFQUFRLE1BRXBCdUQsRUFBYSxFQUFRLE1BRXJCczJHLEVBQVUsRUFBUSxLQUVsQnIyRyxFQUFTUixFQUFhLG1CQUFtQixJQUFTaEQsRUFBVSw0QkFJaEVNLEVBQU9DLFFBQVUsU0FBY2t4RixFQUFHdVcsR0FDakMsSUFBSWlTLEVBQWdCbDVHLFVBQVVDLE9BQVMsRUFBSUQsVUFBVSxHQUFLLEdBQzFELElBQUs4NEcsRUFBUUksR0FDWixNQUFNLElBQUkxMkcsRUFBVywyRUFFdEIsT0FBT0MsRUFBT2l1RixFQUFHdVcsRUFBR2lTLEVBQ3JCLDhCQ2pCQSxJQUFJMTJHLEVBQWEsRUFBUSxNQUVyQjIyRyxFQUFnQixFQUFRLE1BQ3hCQyxFQUE0QixFQUFRLE1BQ3BDSixFQUFPLEVBQVEsTUFJbkJ6NUcsRUFBT0MsUUFBVSxTQUE0QkcsRUFBRzAvQyxFQUFHNG5ELEdBQ2xELEdBQWdCLFdBQVorUixFQUFLcjVHLEdBQ1IsTUFBTSxJQUFJNkMsRUFBVywyQ0FFdEIsSUFBSzIyRyxFQUFjOTVELEdBQ2xCLE1BQU0sSUFBSTc4QyxFQUFXLGtEQVF0QixPQUFPNDJHLEVBQTBCejVHLEVBQUcwL0MsRUFOdEIsQ0FDYixvQkFBb0IsRUFDcEIsa0JBQWtCLEVBQ2xCLFlBQWE0bkQsRUFDYixnQkFBZ0IsR0FHbEIsK0JDdEJBLElBQUl6a0csRUFBYSxFQUFRLE1BRXJCNjJHLEVBQXFCLEVBQVEsS0FDN0JGLEVBQWdCLEVBQVEsTUFDeEJILEVBQU8sRUFBUSxNQUluQno1RyxFQUFPQyxRQUFVLFNBQW1DRyxFQUFHMC9DLEVBQUc0bkQsR0FDekQsR0FBZ0IsV0FBWitSLEVBQUtyNUcsR0FDUixNQUFNLElBQUk2QyxFQUFXLDJDQUV0QixJQUFLMjJHLEVBQWM5NUQsR0FDbEIsTUFBTSxJQUFJNzhDLEVBQVcsa0RBR3RCLElBRGM2MkcsRUFBbUIxNUcsRUFBRzAvQyxFQUFHNG5ELEdBRXRDLE1BQU0sSUFBSXprRyxFQUFXLGlDQUV2Qiw4QkNuQkEsSUFBSUEsRUFBYSxFQUFRLE1BRXJCODJHLEVBQXVCLEVBQVEsTUFDL0JDLEVBQW9CLEVBQVEsTUFFNUJDLEVBQXlCLEVBQVEsTUFDakNDLEVBQW1CLEVBQVEsTUFDM0JOLEVBQWdCLEVBQVEsTUFDeEJPLEVBQVksRUFBUSxNQUNwQkMsRUFBdUIsRUFBUSxLQUMvQlgsRUFBTyxFQUFRLE1BSW5CejVHLEVBQU9DLFFBQVUsU0FBK0JHLEVBQUcwL0MsRUFBR3A2QyxHQUNyRCxHQUFnQixXQUFaK3pHLEVBQUtyNUcsR0FDUixNQUFNLElBQUk2QyxFQUFXLDJDQUd0QixJQUFLMjJHLEVBQWM5NUQsR0FDbEIsTUFBTSxJQUFJNzhDLEVBQVcsa0RBR3RCLElBQUlvM0csRUFBT04sRUFBcUJyMEcsR0FBUUEsRUFBTzAwRyxFQUFxQjEwRyxHQUNwRSxJQUFLcTBHLEVBQXFCTSxHQUN6QixNQUFNLElBQUlwM0csRUFBVyw2REFHdEIsT0FBTysyRyxFQUNORSxFQUNBQyxFQUNBRixFQUNBNzVHLEVBQ0EwL0MsRUFDQXU2RCxFQUVGLCtCQ3BDQSxJQUFJcDNHLEVBQWEsRUFBUSxNQUVyQjgyRyxFQUF1QixFQUFRLE1BQy9CVyxFQUF5QixFQUFRLE1BSXJDMTZHLEVBQU9DLFFBQVUsU0FBZ0NvNkcsR0FDaEQsUUFBb0IsSUFBVEEsSUFBeUJOLEVBQXFCTSxHQUN4RCxNQUFNLElBQUlwM0csRUFBVywwREFHdEIsT0FBT3kzRyxFQUF1QkwsRUFDL0IsOEJDYkEsSUFBSXAzRyxFQUFhLEVBQVEsTUFFckIybEUsRUFBVSxFQUFRLE1BRWxCZ3hDLEVBQWdCLEVBQVEsTUFDeEJILEVBQU8sRUFBUSxNQUluQno1RyxFQUFPQyxRQUFVLFNBQWFHLEVBQUcwL0MsR0FFaEMsR0FBZ0IsV0FBWjI1RCxFQUFLcjVHLEdBQ1IsTUFBTSxJQUFJNkMsRUFBVywyQ0FHdEIsSUFBSzIyRyxFQUFjOTVELEdBQ2xCLE1BQU0sSUFBSTc4QyxFQUFXLHVEQUF5RDJsRSxFQUFROW9CLElBR3ZGLE9BQU8xL0MsRUFBRTAvQyxFQUNWLCtCQ3BCQSxJQUFJNzhDLEVBQWEsRUFBUSxNQUVyQjIyRyxFQUFnQixFQUFRLE1BQ3hCSCxFQUFPLEVBQVEsTUFJbkJ6NUcsRUFBT0MsUUFBVSxTQUFxQkcsRUFBRzAvQyxHQUN4QyxHQUFnQixXQUFaMjVELEVBQUtyNUcsR0FDUixNQUFNLElBQUk2QyxFQUFXLDJDQUV0QixJQUFLMjJHLEVBQWM5NUQsR0FDbEIsTUFBTSxJQUFJNzhDLEVBQVcsZ0RBRXRCLE9BQU82OEMsS0FBSzEvQyxDQUNiLCtCQ2ZBLElBQUk2QyxFQUFhLEVBQVEsTUFFckJnSyxFQUFTLEVBQVEsTUFFakI4c0csRUFBdUIsRUFBUSxNQUluQy81RyxFQUFPQyxRQUFVLFNBQThCbzZHLEdBQzlDLFFBQW9CLElBQVRBLEVBQ1YsT0FBTyxFQUdSLElBQUtOLEVBQXFCTSxHQUN6QixNQUFNLElBQUlwM0csRUFBVywwREFHdEIsU0FBS2dLLEVBQU9vdEcsRUFBTSxhQUFlcHRHLEVBQU9vdEcsRUFBTSxXQUsvQyw4QkNyQkFyNkcsRUFBT0MsUUFBVSxFQUFqQixtQ0NDQUQsRUFBT0MsUUFBVSxFQUFqQixtQ0NGQSxJQUVJMDZHLEVBRmUsRUFBUSxLQUVWajRHLENBQWEsdUJBQXVCLEdBRWpEazRHLEVBQXdCLEVBQVEsS0FDcEMsSUFDQ0EsRUFBc0IsQ0FBQyxFQUFHLEdBQUksQ0FBRSxVQUFXLFdBQWEsR0FDekQsQ0FBRSxNQUFPN3hHLEdBRVI2eEcsRUFBd0IsSUFDekIsQ0FJQSxHQUFJQSxHQUF5QkQsRUFBWSxDQUN4QyxJQUFJRSxFQUFzQixDQUFDLEVBQ3ZCL21ELEVBQWUsQ0FBQyxFQUNwQjhtRCxFQUFzQjltRCxFQUFjLFNBQVUsQ0FDN0MsVUFBVyxXQUNWLE1BQU0rbUQsQ0FDUCxFQUNBLGtCQUFrQixJQUduQjc2RyxFQUFPQyxRQUFVLFNBQXVCNjZHLEdBQ3ZDLElBRUNILEVBQVdHLEVBQVVobkQsRUFDdEIsQ0FBRSxNQUFPMXRCLEdBQ1IsT0FBT0EsSUFBUXkwRSxDQUNoQixDQUNELENBQ0QsTUFDQzc2RyxFQUFPQyxRQUFVLFNBQXVCNjZHLEdBRXZDLE1BQTJCLG1CQUFiQSxLQUE2QkEsRUFBU2g1RyxTQUNyRCwrQkNwQ0QsSUFBSW1CLEVBQWEsRUFBUSxNQUVyQmdLLEVBQVMsRUFBUSxNQUVqQjhzRyxFQUF1QixFQUFRLE1BSW5DLzVHLEVBQU9DLFFBQVUsU0FBMEJvNkcsR0FDMUMsUUFBb0IsSUFBVEEsRUFDVixPQUFPLEVBR1IsSUFBS04sRUFBcUJNLEdBQ3pCLE1BQU0sSUFBSXAzRyxFQUFXLDBEQUd0QixTQUFLZ0ssRUFBT290RyxFQUFNLGVBQWlCcHRHLEVBQU9vdEcsRUFBTSxnQkFLakQsK0JDdEJBLElBQUkzM0csRUFBZSxFQUFRLEtBRXZCcTRHLEVBQXFCcjRHLEVBQWEsOEJBQThCLEdBQ2hFczRHLEVBQWdCdDRHLEVBQWEseUJBQXlCLEdBRXRENjhDLEVBQWMsRUFBUSxNQUkxQnYvQyxFQUFPQyxRQUFVODZHLEVBQ2QsU0FBc0Jyb0csR0FDdkIsT0FBUTZzQyxFQUFZN3NDLElBQVFzb0csRUFBY3RvRyxFQUMzQyxFQUNFLFNBQXNCQSxHQUN2QixPQUFRNnNDLEVBQVk3c0MsRUFDckIsK0JDZkQsSUFBSXpQLEVBQWEsRUFBUSxNQUVyQmc0RyxFQUF1QixFQUFRLE1BQy9CZixFQUFtQixFQUFRLE1BRTNCSCxFQUF1QixFQUFRLE1BSW5DLzVHLEVBQU9DLFFBQVUsU0FBNkJvNkcsR0FDN0MsUUFBb0IsSUFBVEEsRUFDVixPQUFPLEVBR1IsSUFBS04sRUFBcUJNLEdBQ3pCLE1BQU0sSUFBSXAzRyxFQUFXLDBEQUd0QixPQUFLZzRHLEVBQXFCWixLQUFVSCxFQUFpQkcsRUFLdEQseUJDckJBcjZHLEVBQU9DLFFBQVUsU0FBdUI2NkcsR0FDdkMsTUFBMkIsaUJBQWJBLEdBQTZDLGlCQUFiQSxDQUMvQywrQkNKQSxJQUFJNzNHLEVBQWEsRUFBUSxNQUVyQjlELEVBQU0sRUFBUSxLQUNkK0MsRUFBVyxFQUFRLE1BQ25CdTNHLEVBQU8sRUFBUSxNQUluQno1RyxFQUFPQyxRQUFVLFNBQTJCeVMsR0FDM0MsR0FBa0IsV0FBZCttRyxFQUFLL21HLEdBQ1IsTUFBTSxJQUFJelAsRUFBVyw2Q0FFdEIsT0FBT2YsRUFBUy9DLEVBQUl1VCxFQUFLLFVBQzFCLCtCQ2JBLElBQUl1dkMsRUFBUSxFQUFRLE1BQ2hCcnpCLEVBQWUsRUFBUSxNQUN2QjNyQixFQUFhLEVBQVEsTUFFckI4MkcsRUFBdUIsRUFBUSxNQUUvQmtCLEVBQXVCLEVBQVEsTUFDL0JDLEVBQWUsRUFBUSxNQUN2QnRCLEVBQWdCLEVBQVEsTUFDeEJRLEVBQXVCLEVBQVEsS0FDL0JELEVBQVksRUFBUSxNQUNwQlYsRUFBTyxFQUFRLE1BQ2YwQixFQUFxQyxFQUFRLE1BSWpEbjdHLEVBQU9DLFFBQVUsU0FBbUNHLEVBQUcwL0MsRUFBR3U2RCxHQUN6RCxHQUFnQixXQUFaWixFQUFLcjVHLEdBQ1IsTUFBTSxJQUFJNkMsRUFBVyx5Q0FFdEIsSUFBSzIyRyxFQUFjOTVELEdBQ2xCLE1BQU0sSUFBSTc4QyxFQUFXLDhDQUV0QixJQUFLODJHLEVBQXFCTSxHQUN6QixNQUFNLElBQUlwM0csRUFBVyx3REFFdEIsSUFBS2cvQyxFQUFPLENBRVgsR0FBSWc1RCxFQUFxQlosR0FDeEIsTUFBTSxJQUFJenJGLEVBQWEsb0VBRXhCLElBQUl3c0YsSUFBK0J0N0QsS0FBSzEvQyxJQUNwQ2k2RyxFQUFLLGlCQUNMQSxFQUFLLG1CQUNMQSxFQUFLLHFCQUNMLGNBQWVBLEVBQ2ZnQixFQUErQnY3RCxLQUFLMS9DLE1BQ2pDLHFCQUFzQmk2RyxJQUFTQSxFQUFLLHlCQUNwQyxtQkFBb0JBLElBQVNBLEVBQUssdUJBQ2xDLGlCQUFrQkEsSUFBU0EsRUFBSyxrQkFDbkMsY0FBZUEsRUFDbkIsR0FBSWUsR0FBOEJDLEVBRWpDLE9BREFqN0csRUFBRTAvQyxHQUFLdTZELEVBQUssYUFDTEYsRUFBVS81RyxFQUFFMC9DLEdBQUl1NkQsRUFBSyxjQUU3QixNQUFNLElBQUl6ckYsRUFBYSwwR0FDeEIsQ0FDQSxJQUFJbHBCLEVBQU91OEMsRUFBTTdoRCxFQUFHMC9DLEdBQ2hCdjZCLEVBQVU3ZixHQUFRMDBHLEVBQXFCMTBHLEdBQ3ZDNDFHLEVBQWFKLEVBQWE5NkcsR0FDOUIsT0FBTys2RyxFQUFtQy82RyxFQUFHMC9DLEVBQUd3N0QsRUFBWWpCLEVBQU05MEYsRUFDbkUsK0JDbkRBLElBQUlnMkYsRUFBUyxFQUFRLE1BSXJCdjdHLEVBQU9DLFFBQVUsU0FBbUI2ZixFQUFHbzRFLEdBQ3RDLE9BQUlwNEUsSUFBTW80RSxFQUNDLElBQU5wNEUsR0FBa0IsRUFBSUEsR0FBTSxFQUFJbzRFLEVBRzlCcWpCLEVBQU96N0YsSUFBTXk3RixFQUFPcmpCLEVBQzVCLCtCQ1ZBLElBQUl4MUYsRUFBZSxFQUFRLEtBRXZCODRHLEVBQVU5NEcsRUFBYSxZQUN2Qis0RyxFQUFVLzRHLEVBQWEsWUFDdkJPLEVBQWEsRUFBUSxNQUNyQnk0RyxFQUFnQmg1RyxFQUFhLGNBRTdCaEQsRUFBWSxFQUFRLE1BQ3BCaThHLEVBQWMsRUFBUSxNQUV0QjcyRCxFQUFZcGxELEVBQVUsMEJBQ3RCazhHLEVBQVdELEVBQVksY0FDdkJFLEVBQVVGLEVBQVksZUFDdEJHLEVBQXNCSCxFQUFZLHNCQUdsQ0ksRUFBV0osRUFERSxJQUFJRixFQUFRLElBRGpCLENBQUMsSUFBVSxJQUFVLEtBQVU3cEcsS0FBSyxJQUNMLElBQUssTUFHNUNvcUcsRUFBUSxFQUFRLEtBSXBCaDhHLEVBQU9DLFFBQVUsU0FBU2c4RyxFQUFlbkIsR0FDeEMsR0FBd0IsaUJBQWJBLEVBQ1YsTUFBTSxJQUFJNzNHLEVBQVcsZ0RBRXRCLEdBQUkyNEcsRUFBU2QsR0FDWixPQUFPVSxFQUFRRSxFQUFjNTJELEVBQVVnMkQsRUFBVSxHQUFJLElBRXRELEdBQUllLEVBQVFmLEdBQ1gsT0FBT1UsRUFBUUUsRUFBYzUyRCxFQUFVZzJELEVBQVUsR0FBSSxJQUV0RCxHQUFJaUIsRUFBU2pCLElBQWFnQixFQUFvQmhCLEdBQzdDLE9BQU9wd0csSUFFUixJQUFJa0ksRUFBVW9wRyxFQUFNbEIsR0FDcEIsT0FBSWxvRyxJQUFZa29HLEVBQ1JtQixFQUFlcnBHLEdBRWhCNG9HLEVBQVFWLEVBQ2hCLHlCQ3RDQTk2RyxFQUFPQyxRQUFVLFNBQW1CMEQsR0FBUyxRQUFTQSxDQUFPLCtCQ0Y3RCxJQUFJdTRHLEVBQVcsRUFBUSxNQUNuQkMsRUFBVyxFQUFRLE1BRW5CWixFQUFTLEVBQVEsTUFDakJhLEVBQVksRUFBUSxNQUl4QnA4RyxFQUFPQyxRQUFVLFNBQTZCMEQsR0FDN0MsSUFBSTBoRCxFQUFTNjJELEVBQVN2NEcsR0FDdEIsT0FBSTQzRyxFQUFPbDJELElBQXNCLElBQVhBLEVBQXVCLEVBQ3hDKzJELEVBQVUvMkQsR0FDUjgyRCxFQUFTOTJELEdBRGlCQSxDQUVsQywrQkNiQSxJQUFJa1IsRUFBbUIsRUFBUSxNQUUzQnQwRCxFQUFzQixFQUFRLE1BRWxDakMsRUFBT0MsUUFBVSxTQUFrQjY2RyxHQUNsQyxJQUFJdjZHLEVBQU0wQixFQUFvQjY0RyxHQUM5QixPQUFJdjZHLEdBQU8sRUFBWSxFQUNuQkEsRUFBTWcyRCxFQUEyQkEsRUFDOUJoMkQsQ0FDUiwrQkNUQSxJQUFJbUMsRUFBZSxFQUFRLEtBRXZCTyxFQUFhLEVBQVEsTUFDckJ1NEcsRUFBVTk0RyxFQUFhLFlBQ3ZCNjhDLEVBQWMsRUFBUSxNQUV0Qjg4RCxFQUFjLEVBQVEsS0FDdEJKLEVBQWlCLEVBQVEsTUFJN0JqOEcsRUFBT0MsUUFBVSxTQUFrQjY2RyxHQUNsQyxJQUFJbjNHLEVBQVE0N0MsRUFBWXU3RCxHQUFZQSxFQUFXdUIsRUFBWXZCLEVBQVVVLEdBQ3JFLEdBQXFCLGlCQUFWNzNHLEVBQ1YsTUFBTSxJQUFJVixFQUFXLDZDQUV0QixHQUFxQixpQkFBVlUsRUFDVixNQUFNLElBQUlWLEVBQVcsd0RBRXRCLE1BQXFCLGlCQUFWVSxFQUNIczRHLEVBQWV0NEcsR0FFaEI2M0csRUFBUTczRyxFQUNoQiw4QkN2QkEsSUFBSWs4QyxFQUFjLEVBQVEsTUFJMUI3L0MsRUFBT0MsUUFBVSxTQUFxQmdvQixHQUNyQyxPQUFJeG5CLFVBQVVDLE9BQVMsRUFDZm0vQyxFQUFZNTNCLEVBQU94bkIsVUFBVSxJQUU5Qm8vQyxFQUFZNTNCLEVBQ3BCLDhCQ1RBLElBQUloYixFQUFTLEVBQVEsTUFFakJoSyxFQUFhLEVBQVEsTUFFckJ3MkcsRUFBTyxFQUFRLE1BQ2ZsNkcsRUFBWSxFQUFRLE1BQ3BCRixFQUFhLEVBQVEsTUFJekJXLEVBQU9DLFFBQVUsU0FBOEJxOEcsR0FDOUMsR0FBa0IsV0FBZDdDLEVBQUs2QyxHQUNSLE1BQU0sSUFBSXI1RyxFQUFXLDJDQUd0QixJQUFJeUMsRUFBTyxDQUFDLEVBYVosR0FaSXVILEVBQU9xdkcsRUFBSyxnQkFDZjUyRyxFQUFLLGtCQUFvQm5HLEVBQVUrOEcsRUFBSXYyRyxhQUVwQ2tILEVBQU9xdkcsRUFBSyxrQkFDZjUyRyxFQUFLLG9CQUFzQm5HLEVBQVUrOEcsRUFBSXgyRyxlQUV0Q21ILEVBQU9xdkcsRUFBSyxXQUNmNTJHLEVBQUssYUFBZTQyRyxFQUFJMzRHLE9BRXJCc0osRUFBT3F2RyxFQUFLLGNBQ2Y1MkcsRUFBSyxnQkFBa0JuRyxFQUFVKzhHLEVBQUl6MkcsV0FFbENvSCxFQUFPcXZHLEVBQUssT0FBUSxDQUN2QixJQUFJeHJFLEVBQVN3ckUsRUFBSXQyRyxJQUNqQixRQUFzQixJQUFYOHFDLElBQTJCenhDLEVBQVd5eEMsR0FDaEQsTUFBTSxJQUFJN3RDLEVBQVcsNkJBRXRCeUMsRUFBSyxXQUFhb3JDLENBQ25CLENBQ0EsR0FBSTdqQyxFQUFPcXZHLEVBQUssT0FBUSxDQUN2QixJQUFJQyxFQUFTRCxFQUFJdmlHLElBQ2pCLFFBQXNCLElBQVh3aUcsSUFBMkJsOUcsRUFBV2s5RyxHQUNoRCxNQUFNLElBQUl0NUcsRUFBVyw2QkFFdEJ5QyxFQUFLLFdBQWE2MkcsQ0FDbkIsQ0FFQSxJQUFLdHZHLEVBQU92SCxFQUFNLFlBQWN1SCxFQUFPdkgsRUFBTSxjQUFnQnVILEVBQU92SCxFQUFNLGNBQWdCdUgsRUFBT3ZILEVBQU0saUJBQ3RHLE1BQU0sSUFBSXpDLEVBQVcsZ0dBRXRCLE9BQU95QyxDQUNSLCtCQy9DQSxJQUVJODJHLEVBRmUsRUFBUSxJQUViOTVHLENBQWEsWUFDdkJPLEVBQWEsRUFBUSxNQUl6QmpELEVBQU9DLFFBQVUsU0FBa0I2NkcsR0FDbEMsR0FBd0IsaUJBQWJBLEVBQ1YsTUFBTSxJQUFJNzNHLEVBQVcsNkNBRXRCLE9BQU91NUcsRUFBUTFCLEVBQ2hCLCtCQ1pBLElBQUkyQixFQUFVLEVBQVEsTUFJdEJ6OEcsRUFBT0MsUUFBVSxTQUFjNmYsR0FDOUIsTUFBaUIsaUJBQU5BLEVBQ0gsU0FFUyxpQkFBTkEsRUFDSCxTQUVEMjhGLEVBQVEzOEYsRUFDaEIsK0JDWkEsSUFBSTdjLEVBQWEsRUFBUSxNQUVyQisyRyxFQUFvQixFQUFRLE1BQzVCMEMsRUFBcUMsRUFBUSxNQUM3QzNDLEVBQXVCLEVBQVEsTUFFL0JFLEVBQXlCLEVBQVEsTUFDakNnQixFQUF1QixFQUFRLE1BQy9CZixFQUFtQixFQUFRLE1BQzNCeUMsRUFBc0IsRUFBUSxNQUM5Qi9DLEVBQWdCLEVBQVEsTUFDeEJPLEVBQVksRUFBUSxNQUNwQlYsRUFBTyxFQUFRLE1BT25CejVHLEVBQU9DLFFBQVUsU0FBNENHLEVBQUcwL0MsRUFBR3c3RCxFQUFZakIsRUFBTTkwRixHQUNwRixJQW1HS3pmLEVBQ0FDLEVBcEdENjJHLEVBQVFuRCxFQUFLcjVHLEdBQ2pCLEdBQWMsY0FBVnc4RyxHQUFtQyxXQUFWQSxFQUM1QixNQUFNLElBQUkzNUcsRUFBVyxzREFFdEIsSUFBSzIyRyxFQUFjOTVELEdBQ2xCLE1BQU0sSUFBSTc4QyxFQUFXLDhDQUV0QixHQUEwQixrQkFBZnE0RyxFQUNWLE1BQU0sSUFBSXI0RyxFQUFXLGtEQUV0QixJQUFLODJHLEVBQXFCTSxHQUN6QixNQUFNLElBQUlwM0csRUFBVyx3REFFdEIsUUFBdUIsSUFBWnNpQixJQUE0QncwRixFQUFxQngwRixHQUMzRCxNQUFNLElBQUl0aUIsRUFBVyx5RUFHdEIsUUFBdUIsSUFBWnNpQixFQUNWLFFBQUsrMUYsSUFHUyxjQUFWc0IsSUFHQTNCLEVBQXFCWixHQUNqQkwsRUFDTkUsRUFDQUMsRUFDQUYsRUFDQTc1RyxFQUNBMC9DLEVBQ0F1NkQsR0FJS0wsRUFDTkUsRUFDQUMsRUFDQUYsRUFDQTc1RyxFQUNBMC9DLEVBQ0EsQ0FDQyxxQkFBc0J1NkQsRUFBSyxvQkFDM0IsbUJBQW9CQSxFQUFLLGtCQUN6QixZQUFhQSxFQUFLLGFBQ2xCLGlCQUFrQkEsRUFBSyxvQkFNMUIsSUFDRXFDLEVBQ0EsQ0FDQ3pCLHFCQUFzQkEsRUFDdEJmLGlCQUFrQkEsR0FFbkIzMEYsR0FHRCxNQUFNLElBQUl0aUIsRUFBVyxvRkFPdEIsSUFBS3NpQixFQUFRLG9CQUFxQixDQUNqQyxHQUFJLHFCQUFzQjgwRixHQUFRQSxFQUFLLG9CQUV0QyxPQUFPLEVBRVIsR0FBSSxtQkFBb0JBLElBQVNGLEVBQVVFLEVBQUssa0JBQW1COTBGLEVBQVEsbUJBRTFFLE9BQU8sRUFFUixJQUFLbzNGLEVBQW9CdEMsS0FBVUYsRUFBVWMsRUFBcUJaLEdBQU9ZLEVBQXFCMTFGLElBRTdGLE9BQU8sRUFFUixHQUFJMDFGLEVBQXFCMTFGLEdBQVUsQ0FDbEMsR0FBSSxZQUFhODBGLElBQVNGLEVBQVVFLEVBQUssV0FBWTkwRixFQUFRLFlBQzVELE9BQU8sRUFFUixHQUFJLFlBQWE4MEYsSUFBU0YsRUFBVUUsRUFBSyxXQUFZOTBGLEVBQVEsWUFDNUQsT0FBTyxDQUVULE1BQU8sSUFBS0EsRUFBUSxnQkFBaUIsQ0FDcEMsR0FBSSxpQkFBa0I4MEYsR0FBUUEsRUFBSyxnQkFDbEMsT0FBTyxFQUVSLEdBQUksY0FBZUEsSUFBU0YsRUFBVUUsRUFBSyxhQUFjOTBGLEVBQVEsY0FDaEUsT0FBTyxDQUVULENBQ0QsQ0FHQSxNQUFjLGNBQVZxM0YsSUFHQzFDLEVBQWlCMzBGLElBQVkwMUYsRUFBcUJaLElBQ3JEdjBHLEdBQWdCLHFCQUFzQnUwRyxFQUFPQSxFQUFPOTBGLEdBQVMsb0JBQzdEeGYsR0FBYyxtQkFBb0JzMEcsRUFBT0EsRUFBTzkwRixHQUFTLGtCQUVsRHkwRixFQUNORSxFQUNBQyxFQUNBRixFQUNBNzVHLEVBQ0EwL0MsRUFDQSxDQUNDLHFCQUFzQmg2QyxFQUN0QixtQkFBb0JDLEVBQ3BCLFdBQVksWUFBYXMwRyxFQUFPQSxFQUFPOTBGLEdBQVMsV0FDaEQsV0FBWSxZQUFhODBGLEVBQU9BLEVBQU85MEYsR0FBUyxjQUd4QzAxRixFQUFxQjExRixJQUFZMjBGLEVBQWlCRyxJQUM1RHYwRyxHQUFnQixxQkFBc0J1MEcsRUFBT0EsRUFBTzkwRixHQUFTLG9CQUM3RHhmLEdBQWMsbUJBQW9CczBHLEVBQU9BLEVBQU85MEYsR0FBUyxrQkFFbER5MEYsRUFDTkUsRUFDQUMsRUFDQUYsRUFDQTc1RyxFQUNBMC9DLEVBQ0EsQ0FDQyxxQkFBc0JoNkMsRUFDdEIsbUJBQW9CQyxFQUNwQixhQUFjLGNBQWVzMEcsRUFBT0EsRUFBTzkwRixHQUFTLGFBQ3BELGtCQUFtQixpQkFBa0I4MEYsRUFBT0EsRUFBTzkwRixHQUFTLG1CQU14RHkwRixFQUNORSxFQUNBQyxFQUNBRixFQUNBNzVHLEVBQ0EwL0MsRUFDQXU2RCxHQUtILHlCQ3hLQSxJQUFJdnpDLEVBQVNsOEQsS0FBS204RCxNQUlsQi9tRSxFQUFPQyxRQUFVLFNBQWU2ZixHQUUvQixNQUFpQixpQkFBTkEsRUFDSEEsRUFFRGduRCxFQUFPaG5ELEVBQ2YsK0JDWEEsSUFBSWluRCxFQUFRLEVBQVEsTUFFaEI5akUsRUFBYSxFQUFRLE1BSXpCakQsRUFBT0MsUUFBVSxTQUFrQjZmLEdBQ2xDLEdBQWlCLGlCQUFOQSxHQUErQixpQkFBTkEsRUFDbkMsTUFBTSxJQUFJN2MsRUFBVyx5Q0FFdEIsSUFBSW9ELEVBQVN5WixFQUFJLEdBQUtpbkQsR0FBT2puRCxHQUFLaW5ELEVBQU1qbkQsR0FDeEMsT0FBa0IsSUFBWHpaLEVBQWUsRUFBSUEsQ0FDM0IseUJDVkFyRyxFQUFPQyxRQUFVLFNBQWM2ZixHQUM5QixPQUFVLE9BQU5BLEVBQ0ksWUFFUyxJQUFOQSxFQUNILFlBRVMsbUJBQU5BLEdBQWlDLGlCQUFOQSxFQUM5QixTQUVTLGlCQUFOQSxFQUNILFNBRVMsa0JBQU5BLEVBQ0gsVUFFUyxpQkFBTkEsRUFDSCxjQURSLENBR0QsK0JDbkJBOWYsRUFBT0MsUUFBVSxFQUFqQixrQ0NGQSxJQUFJNGxELEVBQXlCLEVBQVEsS0FFakN2aUQsRUFBa0IsRUFBUSxLQUUxQndpRCxFQUEwQkQsRUFBdUJDLDBCQUdqRHo3QyxFQUFVeTdDLEdBQTJCLEVBQVEsTUFJN0Nzb0IsRUFGWSxFQUFRLEtBRUoxdUUsQ0FBVSx5Q0FHOUJNLEVBQU9DLFFBQVUsU0FBMkJpNkcsRUFBa0JDLEVBQVdGLEVBQXdCNzVHLEVBQUcwL0MsRUFBR3A2QyxHQUN0RyxJQUFLcEMsRUFBaUIsQ0FDckIsSUFBSzQyRyxFQUFpQngwRyxHQUVyQixPQUFPLEVBRVIsSUFBS0EsRUFBSyxzQkFBd0JBLEVBQUssZ0JBQ3RDLE9BQU8sRUFJUixHQUFJbzZDLEtBQUsxL0MsR0FBS2d1RSxFQUFjaHVFLEVBQUcwL0MsT0FBU3A2QyxFQUFLLGtCQUU1QyxPQUFPLEVBSVIsSUFBSWdpRyxFQUFJaGlHLEVBQUssYUFHYixPQURBdEYsRUFBRTAvQyxHQUFLNG5ELEVBQ0F5UyxFQUFVLzVHLEVBQUUwL0MsR0FBSTRuRCxFQUN4QixDQUNBLE9BQ0M1aEQsR0FDUyxXQUFOaEcsR0FDQSxjQUFlcDZDLEdBQ2YyRSxFQUFRakssSUFDUkEsRUFBRU0sU0FBV2dGLEVBQUssY0FHckJ0RixFQUFFTSxPQUFTZ0YsRUFBSyxhQUNUdEYsRUFBRU0sU0FBV2dGLEVBQUssZUFHMUJwQyxFQUFnQmxELEVBQUcwL0MsRUFBR202RCxFQUF1QnYwRyxLQUN0QyxFQUNSLCtCQ2xEQSxJQUVJbTNHLEVBRmUsRUFBUSxJQUVkbjZHLENBQWEsV0FHdEIwc0IsR0FBU3l0RixFQUFPeHlHLFNBQVcsRUFBUSxLQUFSLENBQStCLDZCQUU5RHJLLEVBQU9DLFFBQVU0OEcsRUFBT3h5RyxTQUFXLFNBQWlCeXdHLEdBQ25ELE1BQTJCLG1CQUFwQjFyRixFQUFNMHJGLEVBQ2QseUJDVEE5NkcsRUFBT0MsUUFBVSxTQUFnQ282RyxHQUNoRCxRQUFvQixJQUFUQSxFQUNWLE9BQU9BLEVBRVIsSUFBSTNuRyxFQUFNLENBQUMsRUFtQlgsTUFsQkksY0FBZTJuRyxJQUNsQjNuRyxFQUFJL08sTUFBUTAyRyxFQUFLLGNBRWQsaUJBQWtCQSxJQUNyQjNuRyxFQUFJN00sV0FBYXcwRyxFQUFLLGlCQUVuQixZQUFhQSxJQUNoQjNuRyxFQUFJMU0sSUFBTXEwRyxFQUFLLFlBRVosWUFBYUEsSUFDaEIzbkcsRUFBSXFILElBQU1zZ0csRUFBSyxZQUVaLG1CQUFvQkEsSUFDdkIzbkcsRUFBSTNNLGFBQWVzMEcsRUFBSyxtQkFFckIscUJBQXNCQSxJQUN6QjNuRyxFQUFJNU0sZUFBaUJ1MEcsRUFBSyxxQkFFcEIzbkcsQ0FDUiwrQkN4QkEsSUFBSTZvRyxFQUFTLEVBQVEsTUFFckJ2N0csRUFBT0MsUUFBVSxTQUFVNmYsR0FBSyxPQUFxQixpQkFBTkEsR0FBK0IsaUJBQU5BLEtBQW9CeTdGLEVBQU96N0YsSUFBTUEsSUFBTTdWLEtBQVk2VixLQUFNLEdBQVcsK0JDRjVJLElBQUlpNkYsRUFBdUIsRUFBUSxNQUVuQy81RyxFQUFPQyxRQUFVLFNBQTRDNjhHLEVBQUl6QyxHQUNoRSxPQUFPTixFQUFxQk0sSUFDUixpQkFBVEEsR0FDUCxtQkFBb0JBLEdBQ3BCLHFCQUFzQkEsSUFDckJ5QyxFQUFHN0IscUJBQXFCWixJQUFTeUMsRUFBRzVDLGlCQUFpQkcsR0FDM0QsK0JDUkEsSUFBSTMzRyxFQUFlLEVBQVEsS0FFdkJxNkcsRUFBT3I2RyxFQUFhLGNBQ3BCb2tFLEVBQVNwa0UsRUFBYSxnQkFFdEI2NEcsRUFBUyxFQUFRLE1BQ2pCYSxFQUFZLEVBQVEsTUFFeEJwOEcsRUFBT0MsUUFBVSxTQUFtQjY2RyxHQUNuQyxHQUF3QixpQkFBYkEsR0FBeUJTLEVBQU9ULEtBQWNzQixFQUFVdEIsR0FDbEUsT0FBTyxFQUVSLElBQUlrQyxFQUFXRCxFQUFLakMsR0FDcEIsT0FBT2gwQyxFQUFPazJDLEtBQWNBLENBQzdCLHlCQ2RBaDlHLEVBQU9DLFFBQVVpUCxPQUFPMjBDLE9BQVMsU0FBZTMzQyxHQUMvQyxPQUFPQSxHQUFNQSxDQUNkLHlCQ0ZBbE0sRUFBT0MsUUFBVSxTQUFxQjBELEdBQ3JDLE9BQWlCLE9BQVZBLEdBQW9DLG1CQUFWQSxHQUF5QyxpQkFBVkEsQ0FDakUseUJDRkEzRCxFQUFPQyxRQUFVaVAsT0FBT3FuRCxrQkFBb0IsOENDQTVDLElBQUl0ekQsRUFBYSxFQUFRLE1BRXJCZ0ssRUFBUyxFQUFRLE1BRWpCZ3dHLEVBQVUsQ0FDYnBnRyxVQUFXLEtBQ1gsb0JBQW9CLEVBQ3BCLGtCQUFrQixFQUNsQixXQUFXLEVBQ1gsV0FBVyxFQUNYLGFBQWEsRUFDYixnQkFBZ0IsR0FLakI3YyxFQUFPQyxRQUFVLFNBQThCbzZHLEdBQzlDLElBQUtBLEdBQXdCLGlCQUFUQSxFQUNuQixPQUFPLEVBR1IsSUFBSyxJQUFJM3BHLEtBQU8ycEcsRUFDZixHQUFJcHRHLEVBQU9vdEcsRUFBTTNwRyxLQUFTdXNHLEVBQVF2c0csR0FDakMsT0FBTyxFQUlULElBQUl3c0csRUFBU2p3RyxFQUFPb3RHLEVBQU0sY0FBZ0JwdEcsRUFBT290RyxFQUFNLGdCQUNuRDhDLEVBQWFsd0csRUFBT290RyxFQUFNLFlBQWNwdEcsRUFBT290RyxFQUFNLFdBQ3pELEdBQUk2QyxHQUFVQyxFQUNiLE1BQU0sSUFBSWw2RyxFQUFXLHNFQUV0QixPQUFPLENBQ1IsK0JDbENBVyxPQUFPQyxlQUFlNUQsRUFBUyxhQUFjLENBQUUwRCxPQUFPLElBQ3REMUQsRUFBUTJlLFFBQVUzZSxFQUFRbTlHLDZCQUEwQixFQUNwRCxNQUFNNStGLEVBQVcsRUFBUSxNQUNuQi9KLEVBQWUsRUFBUSxNQUM3QixTQUFTeXlGLEVBQWV2akcsR0FDcEIsT0FBTyxJQUFJOFEsRUFBYThDLEtBQUs1VCxFQUNqQyxDQUNBLFNBQVMwNUcsRUFBaUIzOEYsR0FDdEIsTUFBTWlOLEVBQVFqTixFQUFHbFYsU0FBUyxLQUFPLElBQU0sSUFDdkMsT0FBT21pQixFQUFRak4sRUFBS2lOLENBQ3hCLENBRUEsU0FBU3l2RixFQUF3Qng2RyxFQUFNMDZHLEVBQVVDLEdBQzdDLElBQUk1cUcsRUFBTSxZQWFWLE9BWkkvUCxJQUNBK1AsR0FBTy9QLEdBRVAwNkcsRUFDQTNxRyxHQUFPLFdBQVcwcUcsRUFBaUJDLEtBRTlCQyxJQUNMNXFHLEdBQU8sV0FFUDRxRyxJQUNBNXFHLEdBQU8sSUFBSTBxRyxFQUFpQkUsTUFFekI1cUcsQ0FDWCxDQUNBMVMsRUFBUW05Ryx3QkFBMEJBLEVBQ2xDbjlHLEVBQVEyZSxRQUFVLENBRWQ0K0YsY0FBZS9vRyxFQUFhaWYsVUFDNUIrcEYsY0FBZWhwRyxFQUFhekwsTUFDNUIwMEcsV0FBWWpwRyxFQUFha2YsT0FFekIsY0FBQWdxRixHQUNJLE1BQU0xNUcsRUFBTyxJQUFJd1EsRUFBYThKLFNBQVMsSUFFdkMsT0FEQXRhLEVBQUssVUFBWXVhLEVBQVMvTixLQUFLbXRHLGNBQWNDLFVBQ3RDNTVHLENBQ1gsRUFDQTY1Ryx1QkFBc0IsSUFDWCxJQUFJcnBHLEVBQWE4SixTQUFTLElBRXJDLGFBQUE0NkIsQ0FBY2pwQyxFQUFTc2xFLEVBQWNsTSxHQUNqQyxNQUFNejdELEVBQVVqSyxPQUFPeUIsT0FBTyxNQUN4QjA0RyxFQUFtQm42RyxPQUFPeUIsT0FBTyxNQUNqQzI0RyxFQUFnQnA2RyxPQUFPeUIsT0FBTyxNQUNwQyxJQUFLLElBQUlMLEVBQUksRUFBR0EsRUFBSXNrRSxFQUFNNW9FLE9BQVFzRSxJQUFLLENBQ25DLE1BQU0wSixFQUFXNDZELEVBQU10a0UsR0FBR3BDLEtBQzFCaUwsRUFBUWEsR0FBWTQ2RCxFQUFNdGtFLEdBQUdyQixNQUM3Qm82RyxFQUFpQnJ2RyxHQUFZNDZELEVBQU10a0UsR0FBRzRDLFVBQ3RDbzJHLEVBQWN0dkcsR0FBWTQ2RCxFQUFNdGtFLEdBQUdpdkIsTUFDdkMsQ0FDQSxNQUFNaHdCLEVBQU8sSUFBSXdRLEVBQWFtWCxRQUFRMWIsRUFBU3JDLEVBQVMsSUFJeEQsT0FIQTVKLEVBQUsyRCxVQUFZNHRFLEVBQ2pCdnhFLEVBQUssc0JBQXdCODVHLEVBQzdCOTVHLEVBQUssbUJBQXFCKzVHLEVBQ25CLzVHLENBQ1gsRUFDQWc2RyxrQkFBa0JsMkcsR0FDUCxJQUFJME0sRUFBYWljLFFBQVEzb0IsR0FHcEMsV0FBQXV3QixDQUFZNmhELEVBQVkrakMsR0FDcEIsTUFBTTFvRyxFQUFPMmtFLEVBQVduc0UsU0FBU21zRSxFQUFXbnNFLFNBQVN0TixPQUFTLEdBQzFEOFUsSUFDQUEsRUFBS0MsS0FBT3lvRyxFQUNaQSxFQUFRMW9HLEtBQU9BLEdBRW5CMmtFLEVBQVduc0UsU0FBU3JKLEtBQUt1NUcsR0FDekJBLEVBQVFoNkcsT0FBU2kyRSxDQUNyQixFQUNBLFlBQUF0bUUsQ0FBYXNtRSxFQUFZK2pDLEVBQVNDLEdBQzlCLE1BQU1DLEVBQWVqa0MsRUFBV25zRSxTQUFTcUQsUUFBUThzRyxJQUMzQyxLQUFFM29HLEdBQVMyb0csRUFDYjNvRyxJQUNBQSxFQUFLQyxLQUFPeW9HLEVBQ1pBLEVBQVExb0csS0FBT0EsR0FFbkIyb0csRUFBYzNvRyxLQUFPMG9HLEVBQ3JCQSxFQUFRem9HLEtBQU8wb0csRUFDZmhrQyxFQUFXbnNFLFNBQVNtRSxPQUFPaXNHLEVBQWMsRUFBR0YsR0FDNUNBLEVBQVFoNkcsT0FBU2kyRSxDQUNyQixFQUNBLGtCQUFBa2tDLENBQW1CQyxFQUFpQkMsR0FDaEN0K0csRUFBUTJlLFFBQVEwWixZQUFZZ21GLEVBQWlCQyxFQUNqRCxFQUNBQyxtQkFBbUJGLEdBQ1JBLEVBQWdCdHdHLFNBQVMsR0FFcEMsZUFBQXl3RyxDQUFnQngwRSxFQUFVcm5DLEVBQU0wNkcsRUFBVUMsR0FDdEMsTUFBTXgxRyxFQUFPcTFHLEVBQXdCeDZHLEVBQU0wNkcsRUFBVUMsR0FDckQsSUFBSW1CLEVBQWN6MEUsRUFBU2o4QixTQUFTdkMsTUFBTXhILElBQVMsRUFBSXdRLEVBQWFnZixhQUFheHZCLElBQXVCLGFBQWRBLEVBQUtyQixPQUMzRjg3RyxFQUNBQSxFQUFZMzJHLEtBQU9BLFFBQW1DQSxFQUFPLE1BRzdEMjJHLEVBQWMsSUFBSWpxRyxFQUFhNmUsc0JBQXNCLFdBQVl2ckIsR0FDakU5SCxFQUFRMmUsUUFBUTBaLFlBQVkyUixFQUFVeTBFLElBRTFDQSxFQUFZLFVBQVk5N0csUUFBbUNBLE9BQU82QyxFQUNsRWk1RyxFQUFZLGNBQWdCcEIsUUFBMkNBLE9BQVc3M0csRUFDbEZpNUcsRUFBWSxjQUFnQm5CLFFBQTJDQSxPQUFXOTNHLENBQ3RGLEVBQ0EsZUFBQWs1RyxDQUFnQjEwRSxFQUFVN0wsR0FDdEI2TCxFQUFTLFVBQVk3TCxDQUN6QixFQUNBd2dGLGdCQUFnQjMwRSxHQUNMQSxFQUFTLFVBRXBCLFVBQUE0MEUsQ0FBVzU2RyxHQUNQLEdBQUlBLEVBQUtDLE9BQVEsQ0FDYixNQUFNNkssRUFBTTlLLEVBQUtDLE9BQU84SixTQUFTcUQsUUFBUXBOLElBQ25DLEtBQUV1UixFQUFJLEtBQUVDLEdBQVN4UixFQUN2QkEsRUFBS3VSLEtBQU8sS0FDWnZSLEVBQUt3UixLQUFPLEtBQ1JELElBQ0FBLEVBQUtDLEtBQU9BLEdBRVpBLElBQ0FBLEVBQUtELEtBQU9BLEdBRWhCdlIsRUFBS0MsT0FBTzhKLFNBQVNtRSxPQUFPcEQsRUFBSyxHQUNqQzlLLEVBQUtDLE9BQVMsSUFDbEIsQ0FDSixFQUNBLFVBQUE0NkcsQ0FBVzNrQyxFQUFZcHNFLEdBQ25CLE1BQU0rbkUsRUFBWXFFLEVBQVduc0UsU0FBU21zRSxFQUFXbnNFLFNBQVN0TixPQUFTLEdBQy9EbzFFLElBQWEsRUFBSXJoRSxFQUFha2YsUUFBUW1pRCxHQUN0Q0EsRUFBVS90RSxNQUFRZ0csRUFHbEI5TixFQUFRMmUsUUFBUTBaLFlBQVk2aEQsRUFBWStzQixFQUFlbjVGLEdBRS9ELEVBQ0EsZ0JBQUFneEcsQ0FBaUI1a0MsRUFBWXBzRSxFQUFNb3dHLEdBQy9CLE1BQU1hLEVBQVc3a0MsRUFBV25zRSxTQUFTbXNFLEVBQVduc0UsU0FBU3FELFFBQVE4c0csR0FBaUIsR0FDOUVhLElBQVksRUFBSXZxRyxFQUFha2YsUUFBUXFyRixHQUNyQ0EsRUFBU2ozRyxNQUFRZ0csRUFHakI5TixFQUFRMmUsUUFBUS9LLGFBQWFzbUUsRUFBWStzQixFQUFlbjVGLEdBQU9vd0csRUFFdkUsRUFDQSxlQUFBYyxDQUFnQkMsRUFBVzUxQyxHQUN2QixJQUFLLElBQUl0a0UsRUFBSSxFQUFHQSxFQUFJc2tFLEVBQU01b0UsT0FBUXNFLElBQUssQ0FDbkMsTUFBTTBKLEVBQVc0NkQsRUFBTXRrRSxHQUFHcEMsVUFDaUIsSUFBaENzOEcsRUFBVXJ4RyxRQUFRYSxLQUN6Qnd3RyxFQUFVcnhHLFFBQVFhLEdBQVk0NkQsRUFBTXRrRSxHQUFHckIsTUFDdkN1N0csRUFBVSxzQkFBc0J4d0csR0FBWTQ2RCxFQUFNdGtFLEdBQUc0QyxVQUNyRHMzRyxFQUFVLG1CQUFtQnh3RyxHQUFZNDZELEVBQU10a0UsR0FBR2l2QixPQUUxRCxDQUNKLEVBRUFrckYsY0FBY2w3RyxHQUNIQSxFQUFLK0osU0FBUyxHQUV6Qm94RyxjQUFjbjdHLEdBQ0hBLEVBQUsrSixTQUVoQnF4RyxjQUFjcDdHLEdBQ0hBLEVBQUtDLE9BRWhCbzdHLFlBQVl6ekcsR0FDREEsRUFBUTJlLFdBR25CKzBGLFdBQVcxekcsR0FDQUEsRUFBUWpKLEtBRW5CNDhHLGdCQUFnQjN6RyxHQUNMQSxFQUFRakUsVUFFbkI2M0csbUJBQW1Cbm9HLEdBQ1JBLEVBQVN2UCxLQUVwQjIzRyxzQkFBc0JDLEdBQ1hBLEVBQVk1M0csS0FFdkIsdUJBQUE2M0csQ0FBd0JsQixHQUNwQixJQUFJeDJHLEVBQ0osT0FBd0MsUUFBaENBLEVBQUt3MkcsRUFBWSxpQkFBOEIsSUFBUHgyRyxFQUFnQkEsRUFBSyxFQUN6RSxFQUNBLDJCQUFBMjNHLENBQTRCbkIsR0FDeEIsSUFBSXgyRyxFQUNKLE9BQTRDLFFBQXBDQSxFQUFLdzJHLEVBQVkscUJBQWtDLElBQVB4MkcsRUFBZ0JBLEVBQUssRUFDN0UsRUFDQSwyQkFBQTQzRyxDQUE0QnBCLEdBQ3hCLElBQUl4MkcsRUFDSixPQUE0QyxRQUFwQ0EsRUFBS3cyRyxFQUFZLHFCQUFrQyxJQUFQeDJHLEVBQWdCQSxFQUFLLEVBQzdFLEVBRUE2M0csbUJBQW1COTdHLElBQ1IsRUFBSXdRLEVBQWFnZixhQUFheHZCLElBQXVCLGFBQWRBLEVBQUtyQixLQUd2RCx5QkFBQW85RyxDQUEwQi83RyxFQUFNMHFFLEdBQ3hCQSxJQUNBMXFFLEVBQUt1dkIsV0FBYW03QyxFQUFTc3hDLFlBQzNCaDhHLEVBQUt3b0IsU0FBV2tpRCxFQUFTdXhDLFdBRTdCajhHLEVBQUtzd0IsbUJBQXFCbzZDLENBQzlCLEVBQ0F3eEMsMEJBQTBCbDhHLEdBQ2ZBLEVBQUtzd0IsbUJBRWhCLDRCQUFBNnJGLENBQTZCbjhHLEVBQU1vOEcsR0FDRixNQUF6QkEsRUFBWUgsWUFDWmo4RyxFQUFLd29CLFNBQVc0ekYsRUFBWUgsV0FDaENqOEcsRUFBS3N3QixtQkFBcUIzd0IsT0FBT2lCLE9BQU9qQixPQUFPaUIsT0FBTyxDQUFDLEVBQUdaLEVBQUtzd0Isb0JBQXFCOHJGLEVBQ3hGLGdDQ25OSno4RyxPQUFPQyxlQUFlNUQsRUFBUyxhQUFjLENBQUUwRCxPQUFPLElBQ3REMUQsRUFBUTIrRyxnQkFBa0IzK0csRUFBUXFnSCxrQkFBZSxFQUNqRCxNQUFNQyxFQUFZLEVBQVEsTUFFcEJDLEVBQXFCLE9BR3JCQyxFQUFpQyxDQUNuQyw2Q0FDQSw2Q0FDQSx1REFDQSxrQ0FDQSxrQ0FDQSx5Q0FDQSx5Q0FDQSxpQ0FDQSwwQkFDQSwyQkFDQSwwQkFDQSxnQ0FDQSwwQkFDQSx3QkFDQSw4QkFDQSw4QkFDQSw4QkFDQSw4QkFDQSxxQ0FDQSxxQ0FDQSxxQ0FDQSxxQ0FDQSw2QkFDQSxzQkFDQSwyQ0FDQSx3REFDQSxpREFDQSxtREFDQSx3REFDQSxpREFDQSxtREFDQSxzQ0FDQSw2Q0FDQSw2Q0FDQSxzREFDQSw4REFDQSw4Q0FDQSxpRkFDQSx3RUFDQSx1Q0FDQSxnREFDQSx1REFDQSxrQ0FDQSwrQkFDQSwrQkFDQSx5QkFDQSxnQ0FDQSxrQ0FDQSxzQ0FDQSwyQ0FDQSx5Q0FDQSx3QkFDQSw0QkFDQSxzQ0FDQSxtQ0FFRUMsRUFBOEMsSUFDN0NELEVBQ0gsbUNBQ0Esd0NBRUVFLEVBQXlCLElBQUkvM0csSUFBSSxDQUNuQyx1Q0FDQSxxQ0FDQSxTQUVFZzRHLEVBQW9DLENBQUMsbUNBQW9DLHdDQUN6RUMsRUFBbUQsSUFDbERELEVBQ0gsbUNBQ0Esd0NBR0osU0FBU0UsRUFBVXhELEVBQVV5RCxHQUN6QixPQUFPQSxFQUFTdDhHLE1BQU13dkIsR0FBV3FwRixFQUFTM3VHLFdBQVdzbEIsSUFDekQsQ0FPQWgwQixFQUFRcWdILGFBTFIsU0FBc0I1OEYsR0FDbEIsT0FBUUEsRUFBTTlnQixPQUFTNDlHLEdBQ0EsT0FBbkI5OEYsRUFBTTQ1RixXQUNjLE9BQW5CNTVGLEVBQU02NUYsVUFuRlMsd0JBbUZZNzVGLEVBQU02NUYsU0FDMUMsRUE0QkF0OUcsRUFBUTIrRyxnQkExQlIsU0FBeUJsN0YsR0FDckIsR0FBSUEsRUFBTTlnQixPQUFTNDlHLEVBQ2YsT0FBT0QsRUFBVTNDLGNBQWNvRCxPQUVuQyxNQUFNLFNBQUV6RCxHQUFhNzVGLEVBQ3JCLEdBQUk2NUYsR0ExRnNCLCtEQTBGVkEsRUFBU3g5RixjQUNyQixPQUFPd2dHLEVBQVUzQyxjQUFjb0QsT0FFbkMsSUFBSSxTQUFFMUQsR0FBYTU1RixFQUNuQixHQUFpQixPQUFiNDVGLEVBQW1CLENBRW5CLEdBREFBLEVBQVdBLEVBQVN2OUYsY0FDaEI0Z0csRUFBdUIxM0csSUFBSXEwRyxHQUMzQixPQUFPaUQsRUFBVTNDLGNBQWNvRCxPQUVuQyxJQUFJRCxFQUF3QixPQUFieEQsRUFBb0JtRCxFQUE4Q0QsRUFDakYsR0FBSUssRUFBVXhELEVBQVV5RCxHQUNwQixPQUFPUixFQUFVM0MsY0FBY29ELE9BSW5DLEdBRkFELEVBQ2lCLE9BQWJ4RCxFQUFvQnFELEVBQW9DQyxFQUN4REMsRUFBVXhELEVBQVV5RCxHQUNwQixPQUFPUixFQUFVM0MsY0FBY3FELGNBRXZDLENBQ0EsT0FBT1YsRUFBVTNDLGNBQWNDLFNBQ25DLDZCQ2pIQSxJQUFXcUQsRUFIWHQ5RyxPQUFPQyxlQUFlNUQsRUFBUyxhQUFjLENBQUUwRCxPQUFPLElBQ3REMUQsRUFBUWloSCxTQUFNLEdBRUhBLEVBNkRGamhILEVBQVFpaEgsTUFBUWpoSCxFQUFRaWhILElBQU0sQ0FBQyxJQTVERCw4QkFBSSxvQ0FDdkNBLEVBQStCLDBCQUFJLCtCQUNuQ0EsRUFBNEIsdUJBQUksNEJBQ2hDQSxFQUFtRCw4Q0FBSSx3REFDdkRBLEVBQTBCLHFCQUFJLDBCQUM5QkEsRUFBK0IsMEJBQUksZ0NBQ25DQSxFQUE0Qix1QkFBSSw0QkFDaENBLEVBQTZCLHdCQUFJLDRCQUNqQ0EsRUFBNEMsdUNBQUksK0NBQ2hEQSxFQUFvQywrQkFBSSxzQ0FDeENBLEVBQTZDLHdDQUFJLCtDQUNqREEsRUFBdUIsa0JBQUksdUJBQzNCQSxFQUF3QyxtQ0FBSSx5Q0FDNUNBLEVBQW9DLCtCQUFJLG9DQUN4Q0EsRUFBNkMsd0NBQUksOENBQ2pEQSxFQUFxRCxnREFBSSx1REFDekRBLEVBQWlELDRDQUFJLG1EQUNyREEsRUFBc0IsaUJBQUksc0JBQzFCQSxFQUFjLFNBQUksYUFDbEJBLEVBQTJCLHNCQUFJLDBCQUMvQkEsRUFBd0MsbUNBQUksd0NBQzVDQSxFQUFnRCwyQ0FBSSxrREFDcERBLEVBQStELDBEQUFJLG1FQUNuRUEsRUFBZ0QsMkNBQUksa0RBQ3BEQSxFQUErQywwQ0FBSSxpREFDbkRBLEVBQStDLDBDQUFJLGlEQUNuREEsRUFBb0MsK0JBQUksb0NBQ3hDQSxFQUFvQywrQkFBSSxvQ0FDeENBLEVBQW1DLDhCQUFJLG1DQUN2Q0EsRUFBbUMsOEJBQUksbUNBQ3ZDQSxFQUF3QixtQkFBSSx3QkFDNUJBLEVBQThCLHlCQUFJLDZCQUNsQ0EsRUFBb0MsK0JBQUksdUNBQ3hDQSxFQUFrQixhQUFJLGlCQUN0QkEsRUFBbUIsY0FBSSxpQkFDdkJBLEVBQWlDLDRCQUFJLGtDQUNyQ0EsRUFBa0IsYUFBSSxpQkFDdEJBLEVBQThCLHlCQUFJLDZCQUNsQ0EsRUFBZ0IsV0FBSSxlQUNwQkEsRUFBZ0QsMkNBQUksbURBQ3BEQSxFQUE0Qix1QkFBSSwyQkFDaENBLEVBQWlDLDRCQUFJLGdDQUNyQ0EsRUFBMkMsc0NBQUksNENBQy9DQSxFQUErQiwwQkFBSSw4QkFDbkNBLEVBQW9DLCtCQUFJLG1DQUN4Q0EsRUFBd0MsbUNBQUkseUNBQzVDQSxFQUF3QixtQkFBSSx1QkFDNUJBLEVBQThDLHlDQUFJLGdEQUNsREEsRUFBd0IsbUJBQUksc0JBQzVCQSxFQUEwQixxQkFBSSx5QkFDOUJBLEVBQW9CLGVBQUksa0JBQ3hCQSxFQUFzQixpQkFBSSxvQkFDMUJBLEVBQXNDLGlDQUFJLHdDQUMxQ0EsRUFBMkMsc0NBQUksOENBQy9DQSxFQUF1QyxrQ0FBSSx5Q0FDM0NBLEVBQThCLHlCQUFJLCtCQUNsQ0EsRUFBK0IsMEJBQUksK0JBQ25DQSxFQUFxQyxnQ0FBSSx1Q0FDekNBLEVBQTBCLHFCQUFJLDBCQUM5QkEsRUFBd0MsbUNBQUkseUVDL0RoRHQ5RyxPQUFPQyxlQUFlNUQsRUFBUyxhQUFjLENBQUUwRCxPQUFPLElBQ3REMUQsRUFBUWtoSCxtQkFBcUJsaEgsRUFBUW1oSCxzQkFBd0JuaEgsRUFBUW9oSCxvQkFBc0JwaEgsRUFBUXFoSCxvQkFBc0JyaEgsRUFBUXNoSCx1QkFBeUJ0aEgsRUFBUXVoSCxXQUFhdmhILEVBQVF3aEgsa0NBQStCLEVBQ3ROLE1BQU1sQixFQUFZLEVBQVEsTUFFcEJtQixFQUNTLFlBRFRBLEVBRWUsd0JBS2ZDLEVBQTJCLElBQUlwM0YsSUFBSSxDQUNyQyxnQkFDQSxnQkFDQSxnQkFDQSxjQUNBLFdBQ0EsZ0JBQ0Esa0JBQ0EsV0FDQSxjQUNBLFdBQ0Esb0JBQ0EsZ0JBQ0EsZUFDQSxtQkFDQSxZQUNBLGFBQ0EsV0FDQSxlQUNBLG9CQUNBLGVBQ0EsY0FDQSxjQUNBLG1CQUNBLFlBQ0EsYUFDQSxhQUNBLHNCQUNBLG1CQUNBLGVBQ0EsWUFDQSxZQUNBLFlBQ0EsZ0JBQ0Esc0JBQ0EsaUJBQ0EsT0FDQSxPQUNBLGNBQ0EsWUFDQSxxQkFDQSxtQkFDQSxtQkFDQSxtQkFDQSxlQUNBLGNBQ0EsZUFDQSxjQUNBLGVBQ0EsaUJBQ0EsY0FDQSxVQUNBLFVBQ0EsYUFDQSxVQUNBLGFBQ0EsbUJBQ0EsbUJBQ0EsY0FDRnhlLEtBQUtjLEdBQVMsQ0FBQ0EsRUFBS2tULGNBQWVsVCxNQUMvQiswRyxFQUEyQixJQUFJcjNGLElBQUksQ0FDckMsQ0FBQyxnQkFBaUIsQ0FBRTBKLE9BQVEsUUFBU3J4QixLQUFNLFVBQVdnRixVQUFXMjRHLEVBQVVzQixHQUFHQyxRQUM5RSxDQUFDLGdCQUFpQixDQUFFN3RGLE9BQVEsUUFBU3J4QixLQUFNLFVBQVdnRixVQUFXMjRHLEVBQVVzQixHQUFHQyxRQUM5RSxDQUFDLGFBQWMsQ0FBRTd0RixPQUFRLFFBQVNyeEIsS0FBTSxPQUFRZ0YsVUFBVzI0RyxFQUFVc0IsR0FBR0MsUUFDeEUsQ0FBQyxhQUFjLENBQUU3dEYsT0FBUSxRQUFTcnhCLEtBQU0sT0FBUWdGLFVBQVcyNEcsRUFBVXNCLEdBQUdDLFFBQ3hFLENBQUMsYUFBYyxDQUFFN3RGLE9BQVEsUUFBU3J4QixLQUFNLE9BQVFnRixVQUFXMjRHLEVBQVVzQixHQUFHQyxRQUN4RSxDQUFDLGNBQWUsQ0FBRTd0RixPQUFRLFFBQVNyeEIsS0FBTSxRQUFTZ0YsVUFBVzI0RyxFQUFVc0IsR0FBR0MsUUFDMUUsQ0FBQyxhQUFjLENBQUU3dEYsT0FBUSxRQUFTcnhCLEtBQU0sT0FBUWdGLFVBQVcyNEcsRUFBVXNCLEdBQUdDLFFBQ3hFLENBQUMsV0FBWSxDQUFFN3RGLE9BQVEsTUFBT3J4QixLQUFNLE9BQVFnRixVQUFXMjRHLEVBQVVzQixHQUFHcGhGLE1BQ3BFLENBQUMsV0FBWSxDQUFFeE0sT0FBUSxNQUFPcnhCLEtBQU0sT0FBUWdGLFVBQVcyNEcsRUFBVXNCLEdBQUdwaEYsTUFDcEUsQ0FBQyxZQUFhLENBQUV4TSxPQUFRLE1BQU9yeEIsS0FBTSxRQUFTZ0YsVUFBVzI0RyxFQUFVc0IsR0FBR3BoRixNQUN0RSxDQUFDLFFBQVMsQ0FBRXhNLE9BQVEsR0FBSXJ4QixLQUFNLFFBQVNnRixVQUFXMjRHLEVBQVVzQixHQUFHRSxRQUMvRCxDQUFDLGNBQWUsQ0FBRTl0RixPQUFRLFFBQVNyeEIsS0FBTSxRQUFTZ0YsVUFBVzI0RyxFQUFVc0IsR0FBR0UsVUFHOUU5aEgsRUFBUXdoSCw2QkFBK0IsSUFBSWwzRixJQUFJLENBQzNDLFdBQ0EsY0FDQSxlQUNBLGVBQ0EsZ0JBQ0EsbUJBQ0EsV0FDQSxVQUNBLGdCQUNBLHNCQUNBLGNBQ0EsbUJBQ0Esb0JBQ0Esb0JBQ0EsaUJBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLGlCQUNBLFVBQ0EsVUFDQSxjQUNBLGVBQ0EsV0FDQSxlQUNBLHFCQUNBLGNBQ0EsU0FDQSxlQUNBLGdCQUNBLFdBQ0EsaUJBQ0EsaUJBQ0EsWUFDRnhlLEtBQUtpMkcsR0FBTyxDQUFDQSxFQUFHamlHLGNBQWVpaUcsTUFFakMsTUFBTUMsRUFBd0IsSUFBSXI1RyxJQUFJLENBQ2xDMjNHLEVBQVUyQixPQUFPbGxDLEVBQ2pCdWpDLEVBQVUyQixPQUFPQyxJQUNqQjVCLEVBQVUyQixPQUFPRSxXQUNqQjdCLEVBQVUyQixPQUFPRyxLQUNqQjlCLEVBQVUyQixPQUFPSSxHQUNqQi9CLEVBQVUyQixPQUFPSyxPQUNqQmhDLEVBQVUyQixPQUFPTSxLQUNqQmpDLEVBQVUyQixPQUFPTyxHQUNqQmxDLEVBQVUyQixPQUFPUSxJQUNqQm5DLEVBQVUyQixPQUFPUyxHQUNqQnBDLEVBQVUyQixPQUFPVSxHQUNqQnJDLEVBQVUyQixPQUFPVyxHQUNqQnRDLEVBQVUyQixPQUFPWSxNQUNqQnZDLEVBQVUyQixPQUFPYSxHQUNqQnhDLEVBQVUyQixPQUFPYyxHQUNqQnpDLEVBQVUyQixPQUFPZSxHQUNqQjFDLEVBQVUyQixPQUFPZ0IsR0FDakIzQyxFQUFVMkIsT0FBT2lCLEdBQ2pCNUMsRUFBVTJCLE9BQU9rQixHQUNqQjdDLEVBQVUyQixPQUFPbUIsS0FDakI5QyxFQUFVMkIsT0FBT29CLEdBQ2pCL0MsRUFBVTJCLE9BQU9oc0IsRUFDakJxcUIsRUFBVTJCLE9BQU9xQixJQUNqQmhELEVBQVUyQixPQUFPc0IsR0FDakJqRCxFQUFVMkIsT0FBT3VCLFFBQ2pCbEQsRUFBVTJCLE9BQU93QixLQUNqQm5ELEVBQVUyQixPQUFPeUIsS0FDakJwRCxFQUFVMkIsT0FBTzBCLEtBQ2pCckQsRUFBVTJCLE9BQU8yQixHQUNqQnRELEVBQVUyQixPQUFPcGlFLEVBQ2pCeWdFLEVBQVUyQixPQUFPNEIsSUFDakJ2RCxFQUFVMkIsT0FBTzZCLEtBQ2pCeEQsRUFBVTJCLE9BQU8xYixFQUNqQitaLEVBQVUyQixPQUFPOEIsTUFDakJ6RCxFQUFVMkIsT0FBTytCLEtBQ2pCMUQsRUFBVTJCLE9BQU9nQyxPQUNqQjNELEVBQVUyQixPQUFPaUMsT0FDakI1RCxFQUFVMkIsT0FBT2tDLElBQ2pCN0QsRUFBVTJCLE9BQU9tQyxJQUNqQjlELEVBQVUyQixPQUFPb0MsTUFDakIvRCxFQUFVMkIsT0FBT3FDLEdBQ2pCaEUsRUFBVTJCLE9BQU8xYSxFQUNqQitZLEVBQVUyQixPQUFPc0MsR0FDakJqRSxFQUFVMkIsT0FBT3VDLE1BU3JCeGtILEVBQVF1aEgsV0FOUixTQUFvQmtELEdBQ2hCLE1BQU0xQyxFQUFLMEMsRUFBY0MsTUFHekIsT0FGd0IzQyxJQUFPekIsRUFBVTJCLE9BQU8wQyxNQUM1Q0YsRUFBY3A3QyxNQUFNN2tFLE1BQUssRUFBRzdCLFVBQVdBLElBQVMyOUcsRUFBVXNFLE1BQU1DLE9BQVNsaUgsSUFBUzI5RyxFQUFVc0UsTUFBTUUsTUFBUW5pSCxJQUFTMjlHLEVBQVVzRSxNQUFNRyxRQUM3Ry9DLEVBQXNCaDVHLElBQUkrNEcsRUFDeEQsRUFXQS9oSCxFQUFRc2hILHVCQVJSLFNBQWdDNzlGLEdBQzVCLElBQUssSUFBSTFlLEVBQUksRUFBR0EsRUFBSTBlLEVBQU00bEQsTUFBTTVvRSxPQUFRc0UsSUFDcEMsR0E3S29CLGtCQTZLaEIwZSxFQUFNNGxELE1BQU10a0UsR0FBR3BDLEtBQThCLENBQzdDOGdCLEVBQU00bEQsTUFBTXRrRSxHQUFHcEMsS0E3S1UsZ0JBOEt6QixLQUNKLENBRVIsRUFVQTNDLEVBQVFxaEgsb0JBUlIsU0FBNkI1OUYsR0FDekIsSUFBSyxJQUFJMWUsRUFBSSxFQUFHQSxFQUFJMGUsRUFBTTRsRCxNQUFNNW9FLE9BQVFzRSxJQUFLLENBQ3pDLE1BQU1pZ0gsRUFBbUJ0RCxFQUF5QjM3RyxJQUFJMGQsRUFBTTRsRCxNQUFNdGtFLEdBQUdwQyxNQUM3QyxNQUFwQnFpSCxJQUNBdmhHLEVBQU00bEQsTUFBTXRrRSxHQUFHcEMsS0FBT3FpSCxFQUU5QixDQUNKLEVBWUFobEgsRUFBUW9oSCxvQkFWUixTQUE2QjM5RixHQUN6QixJQUFLLElBQUkxZSxFQUFJLEVBQUdBLEVBQUkwZSxFQUFNNGxELE1BQU01b0UsT0FBUXNFLElBQUssQ0FDekMsTUFBTWtnSCxFQUFvQnRELEVBQXlCNTdHLElBQUkwZCxFQUFNNGxELE1BQU10a0UsR0FBR3BDLE1BQ2xFc2lILElBQ0F4aEcsRUFBTTRsRCxNQUFNdGtFLEdBQUdpdkIsT0FBU2l4RixFQUFrQmp4RixPQUMxQ3ZRLEVBQU00bEQsTUFBTXRrRSxHQUFHcEMsS0FBT3NpSCxFQUFrQnRpSCxLQUN4QzhnQixFQUFNNGxELE1BQU10a0UsR0FBRzRDLFVBQVlzOUcsRUFBa0J0OUcsVUFFckQsQ0FDSixFQVNBM0gsRUFBUW1oSCxzQkFQUixTQUErQjE5RixHQUMzQixNQUFNeWhHLEVBQWtCbGxILEVBQVF3aEgsNkJBQTZCejdHLElBQUkwZCxFQUFNeFQsU0FDaEQsTUFBbkJpMUcsSUFDQXpoRyxFQUFNeFQsUUFBVWkxRyxFQUNoQnpoRyxFQUFNaWhHLE9BQVEsRUFBSXBFLEVBQVU2RSxVQUFVMWhHLEVBQU14VCxTQUVwRCxFQXFCQWpRLEVBQVFraEgsbUJBSlIsU0FBNEJhLEVBQUlxRCxFQUFJLzdDLEVBQU9nOEMsR0FDdkMsUUFBV0EsR0FBYUEsSUFBYy9FLEVBQVVzQixHQUFHbGhGLE9BWnZELFNBQWdDcWhGLEVBQUlxRCxFQUFJLzdDLEdBQ3BDLEdBQUkrN0MsSUFBTzlFLEVBQVVzQixHQUFHMEQsUUFBVXZELElBQU96QixFQUFVMkIsT0FBT3NELGVBQ3RELElBQUssSUFBSXhnSCxFQUFJLEVBQUdBLEVBQUlza0UsRUFBTTVvRSxPQUFRc0UsSUFDOUIsR0FBSXNrRSxFQUFNdGtFLEdBQUdwQyxPQUFTMjlHLEVBQVVzRSxNQUFNWSxTQUFVLENBQzVDLE1BQU05aEgsRUFBUTJsRSxFQUFNdGtFLEdBQUdyQixNQUFNb2MsY0FDN0IsT0FBT3BjLElBQVUrOUcsR0FBd0IvOUcsSUFBVSs5RyxDQUN2RCxDQUdSLE9BQU8yRCxJQUFPOUUsRUFBVXNCLEdBQUc2RCxNQUFRMUQsSUFBT3pCLEVBQVUyQixPQUFPeUQsZ0JBQWtCM0QsSUFBT3pCLEVBQVUyQixPQUFPMEQsTUFBUTVELElBQU96QixFQUFVMkIsT0FBTzJELE1BQ3pJLENBRWdFQyxDQUF1QjlELEVBQUlxRCxFQUFJLzdDLE1BQ3BGZzhDLEdBQWFBLElBQWMvRSxFQUFVc0IsR0FBRzBELFNBaEJuRCxTQUFzQ3ZELEVBQUlxRCxHQUN0QyxPQUFPQSxJQUFPOUUsRUFBVXNCLEdBQUcwRCxTQUFXdkQsSUFBT3pCLEVBQVUyQixPQUFPNkQsSUFBTS9ELElBQU96QixFQUFVMkIsT0FBTzhELElBQU1oRSxJQUFPekIsRUFBVTJCLE9BQU8rRCxJQUFNakUsSUFBT3pCLEVBQVUyQixPQUFPZ0UsSUFBTWxFLElBQU96QixFQUFVMkIsT0FBT2lFLE1BQzFMLENBYzhEQyxDQUE2QnBFLEVBQUlxRCxFQUMvRiw2QkN4T0EsSUFBSXhELEVBK0JBd0UsRUFrSUFuRSxFQXZJT3RFLEVBaEJBaUgsRUFiWGpoSCxPQUFPQyxlQUFlNUQsRUFBUyxhQUFjLENBQUUwRCxPQUFPLElBQ3REMUQsRUFBUXFtSCxpQkFBbUJybUgsRUFBUXNtSCxpQkFBbUJ0bUgsRUFBUXVtSCxpQkFBbUJ2bUgsRUFBUW1sSCxTQUFXbmxILEVBQVFpaUgsT0FBU2ppSCxFQUFRb21ILFVBQVlwbUgsRUFBUTI5RyxjQUFnQjM5RyxFQUFRNGtILE1BQVE1a0gsRUFBUTRoSCxRQUFLLEVBRzlMLFNBQVdBLEdBQ1BBLEVBQVMsS0FBSSwrQkFDYkEsRUFBVyxPQUFJLHFDQUNmQSxFQUFRLElBQUksNkJBQ1pBLEVBQVUsTUFBSSwrQkFDZEEsRUFBUSxJQUFJLHVDQUNaQSxFQUFVLE1BQUksK0JBQ2pCLENBUEQsQ0FPR0EsRUFBSzVoSCxFQUFRNGhILEtBQU81aEgsRUFBUTRoSCxHQUFLLENBQUMsS0FFMUJnRCxFQVNBNWtILEVBQVE0a0gsUUFBVTVrSCxFQUFRNGtILE1BQVEsQ0FBQyxJQVI5QixLQUFJLE9BQ2hCQSxFQUFjLE9BQUksU0FDbEJBLEVBQWdCLFNBQUksV0FDcEJBLEVBQWMsT0FBSSxTQUNsQkEsRUFBWSxLQUFJLE9BQ2hCQSxFQUFhLE1BQUksUUFDakJBLEVBQVksS0FBSSxPQUNoQkEsRUFBWSxLQUFJLFFBUVRqSCxFQUlRMzlHLEVBQVEyOUcsZ0JBQWtCMzlHLEVBQVEyOUcsY0FBZ0IsQ0FBQyxJQUh6QyxVQUFJLFlBQzdCQSxFQUFzQixPQUFJLFNBQzFCQSxFQUE4QixlQUFJLGlCQUd0QyxTQUFXeUksR0FDUEEsRUFBYSxFQUFJLElBQ2pCQSxFQUFtQixRQUFJLFVBQ3ZCQSxFQUEwQixlQUFJLGlCQUM5QkEsRUFBa0IsT0FBSSxTQUN0QkEsRUFBZ0IsS0FBSSxPQUNwQkEsRUFBbUIsUUFBSSxVQUN2QkEsRUFBaUIsTUFBSSxRQUNyQkEsRUFBYSxFQUFJLElBQ2pCQSxFQUFnQixLQUFJLE9BQ3BCQSxFQUFvQixTQUFJLFdBQ3hCQSxFQUFtQixRQUFJLFVBQ3ZCQSxFQUFlLElBQUksTUFDbkJBLEVBQXNCLFdBQUksYUFDMUJBLEVBQWdCLEtBQUksT0FDcEJBLEVBQWMsR0FBSSxLQUNsQkEsRUFBa0IsT0FBSSxTQUN0QkEsRUFBbUIsUUFBSSxVQUN2QkEsRUFBa0IsT0FBSSxTQUN0QkEsRUFBZ0IsS0FBSSxPQUNwQkEsRUFBZSxJQUFJLE1BQ25CQSxFQUFvQixTQUFJLFdBQ3hCQSxFQUFjLEdBQUksS0FDbEJBLEVBQWdCLEtBQUksT0FDcEJBLEVBQW1CLFFBQUksVUFDdkJBLEVBQWtCLE9BQUksU0FDdEJBLEVBQWUsSUFBSSxNQUNuQkEsRUFBZSxJQUFJLE1BQ25CQSxFQUFjLEdBQUksS0FDbEJBLEVBQWMsR0FBSSxLQUNsQkEsRUFBYyxHQUFJLEtBQ2xCQSxFQUFpQixNQUFJLFFBQ3JCQSxFQUFvQixTQUFJLFdBQ3hCQSxFQUFzQixXQUFJLGFBQzFCQSxFQUFrQixPQUFJLFNBQ3RCQSxFQUFnQixLQUFJLE9BQ3BCQSxFQUFrQixPQUFJLFNBQ3RCQSxFQUEwQixlQUFJLGdCQUM5QkEsRUFBZ0IsS0FBSSxPQUNwQkEsRUFBaUIsTUFBSSxRQUNyQkEsRUFBb0IsU0FBSSxXQUN4QkEsRUFBYyxHQUFJLEtBQ2xCQSxFQUFjLEdBQUksS0FDbEJBLEVBQWMsR0FBSSxLQUNsQkEsRUFBYyxHQUFJLEtBQ2xCQSxFQUFjLEdBQUksS0FDbEJBLEVBQWMsR0FBSSxLQUNsQkEsRUFBZ0IsS0FBSSxPQUNwQkEsRUFBa0IsT0FBSSxTQUN0QkEsRUFBa0IsT0FBSSxTQUN0QkEsRUFBYyxHQUFJLEtBQ2xCQSxFQUFnQixLQUFJLE9BQ3BCQSxFQUFhLEVBQUksSUFDakJBLEVBQWUsSUFBSSxNQUNuQkEsRUFBaUIsTUFBSSxRQUNyQkEsRUFBaUIsTUFBSSxRQUNyQkEsRUFBa0IsT0FBSSxTQUN0QkEsRUFBa0IsT0FBSSxTQUN0QkEsRUFBaUIsTUFBSSxRQUNyQkEsRUFBYyxHQUFJLEtBQ2xCQSxFQUFnQixLQUFJLE9BQ3BCQSxFQUFtQixRQUFJLFVBQ3ZCQSxFQUFnQixLQUFJLE9BQ3BCQSxFQUFzQixXQUFJLGFBQzFCQSxFQUFtQixRQUFJLFVBQ3ZCQSxFQUFnQixLQUFJLE9BQ3BCQSxFQUFnQixLQUFJLE9BQ3BCQSxFQUFnQixLQUFJLE9BQ3BCQSxFQUFrQixPQUFJLFNBQ3RCQSxFQUFjLEdBQUksS0FDbEJBLEVBQWMsR0FBSSxLQUNsQkEsRUFBYyxHQUFJLEtBQ2xCQSxFQUFjLEdBQUksS0FDbEJBLEVBQWlCLE1BQUksUUFDckJBLEVBQWUsSUFBSSxNQUNuQkEsRUFBZ0IsS0FBSSxPQUNwQkEsRUFBb0IsU0FBSSxXQUN4QkEsRUFBbUIsUUFBSSxVQUN2QkEsRUFBb0IsU0FBSSxXQUN4QkEsRUFBa0IsT0FBSSxTQUN0QkEsRUFBYyxHQUFJLEtBQ2xCQSxFQUFvQixTQUFJLFdBQ3hCQSxFQUFrQixPQUFJLFNBQ3RCQSxFQUFhLEVBQUksSUFDakJBLEVBQWlCLE1BQUksUUFDckJBLEVBQXFCLFVBQUksWUFDekJBLEVBQWUsSUFBSSxNQUNuQkEsRUFBYyxHQUFJLEtBQ2xCQSxFQUFjLEdBQUksS0FDbEJBLEVBQWMsR0FBSSxLQUNsQkEsRUFBZSxJQUFJLE1BQ25CQSxFQUFnQixLQUFJLE9BQ3BCQSxFQUFhLEVBQUksSUFDakJBLEVBQWtCLE9BQUksU0FDdEJBLEVBQW1CLFFBQUksVUFDdkJBLEVBQWtCLE9BQUksU0FDdEJBLEVBQWtCLE9BQUksU0FDdEJBLEVBQWlCLE1BQUksUUFDckJBLEVBQWdCLEtBQUksT0FDcEJBLEVBQWtCLE9BQUksU0FDdEJBLEVBQWtCLE9BQUksU0FDdEJBLEVBQWlCLE1BQUksUUFDckJBLEVBQWUsSUFBSSxNQUNuQkEsRUFBbUIsUUFBSSxVQUN2QkEsRUFBZSxJQUFJLE1BQ25CQSxFQUFpQixNQUFJLFFBQ3JCQSxFQUFpQixNQUFJLFFBQ3JCQSxFQUFvQixTQUFJLFdBQ3hCQSxFQUFvQixTQUFJLFdBQ3hCQSxFQUFpQixNQUFJLFFBQ3JCQSxFQUFjLEdBQUksS0FDbEJBLEVBQWMsR0FBSSxLQUNsQkEsRUFBaUIsTUFBSSxRQUNyQkEsRUFBaUIsTUFBSSxRQUNyQkEsRUFBYyxHQUFJLEtBQ2xCQSxFQUFpQixNQUFJLFFBQ3JCQSxFQUFjLEdBQUksS0FDbEJBLEVBQWEsRUFBSSxJQUNqQkEsRUFBYyxHQUFJLEtBQ2xCQSxFQUFlLElBQUksTUFDbkJBLEVBQWUsSUFBSSxNQUNuQkEsRUFBZSxJQUFJLE1BQ25CQSxFQUFlLElBQUksS0FDdEIsQ0EzSEQsQ0EySEdBLEVBQVlwbUgsRUFBUW9tSCxZQUFjcG1ILEVBQVFvbUgsVUFBWSxDQUFDLElBTzFELFNBQVduRSxHQUNQQSxFQUFPQSxFQUFnQixRQUFJLEdBQUssVUFDaENBLEVBQU9BLEVBQVUsRUFBSSxHQUFLLElBQzFCQSxFQUFPQSxFQUFnQixRQUFJLEdBQUssVUFDaENBLEVBQU9BLEVBQXVCLGVBQUksR0FBSyxpQkFDdkNBLEVBQU9BLEVBQWUsT0FBSSxHQUFLLFNBQy9CQSxFQUFPQSxFQUFhLEtBQUksR0FBSyxPQUM3QkEsRUFBT0EsRUFBZ0IsUUFBSSxHQUFLLFVBQ2hDQSxFQUFPQSxFQUFjLE1BQUksR0FBSyxRQUM5QkEsRUFBT0EsRUFBVSxFQUFJLEdBQUssSUFDMUJBLEVBQU9BLEVBQWEsS0FBSSxHQUFLLE9BQzdCQSxFQUFPQSxFQUFpQixTQUFJLElBQU0sV0FDbENBLEVBQU9BLEVBQWdCLFFBQUksSUFBTSxVQUNqQ0EsRUFBT0EsRUFBWSxJQUFJLElBQU0sTUFDN0JBLEVBQU9BLEVBQW1CLFdBQUksSUFBTSxhQUNwQ0EsRUFBT0EsRUFBYSxLQUFJLElBQU0sT0FDOUJBLEVBQU9BLEVBQVcsR0FBSSxJQUFNLEtBQzVCQSxFQUFPQSxFQUFlLE9BQUksSUFBTSxTQUNoQ0EsRUFBT0EsRUFBZ0IsUUFBSSxJQUFNLFVBQ2pDQSxFQUFPQSxFQUFlLE9BQUksSUFBTSxTQUNoQ0EsRUFBT0EsRUFBYSxLQUFJLElBQU0sT0FDOUJBLEVBQU9BLEVBQVksSUFBSSxJQUFNLE1BQzdCQSxFQUFPQSxFQUFpQixTQUFJLElBQU0sV0FDbENBLEVBQU9BLEVBQVcsR0FBSSxJQUFNLEtBQzVCQSxFQUFPQSxFQUFhLEtBQUksSUFBTSxPQUM5QkEsRUFBT0EsRUFBZ0IsUUFBSSxJQUFNLFVBQ2pDQSxFQUFPQSxFQUFlLE9BQUksSUFBTSxTQUNoQ0EsRUFBT0EsRUFBWSxJQUFJLElBQU0sTUFDN0JBLEVBQU9BLEVBQVksSUFBSSxJQUFNLE1BQzdCQSxFQUFPQSxFQUFXLEdBQUksSUFBTSxLQUM1QkEsRUFBT0EsRUFBVyxHQUFJLElBQU0sS0FDNUJBLEVBQU9BLEVBQVcsR0FBSSxJQUFNLEtBQzVCQSxFQUFPQSxFQUFjLE1BQUksSUFBTSxRQUMvQkEsRUFBT0EsRUFBaUIsU0FBSSxJQUFNLFdBQ2xDQSxFQUFPQSxFQUFtQixXQUFJLElBQU0sYUFDcENBLEVBQU9BLEVBQWUsT0FBSSxJQUFNLFNBQ2hDQSxFQUFPQSxFQUFhLEtBQUksSUFBTSxPQUM5QkEsRUFBT0EsRUFBZSxPQUFJLElBQU0sU0FDaENBLEVBQU9BLEVBQXVCLGVBQUksSUFBTSxpQkFDeENBLEVBQU9BLEVBQWEsS0FBSSxJQUFNLE9BQzlCQSxFQUFPQSxFQUFjLE1BQUksSUFBTSxRQUMvQkEsRUFBT0EsRUFBaUIsU0FBSSxJQUFNLFdBQ2xDQSxFQUFPQSxFQUFXLEdBQUksSUFBTSxLQUM1QkEsRUFBT0EsRUFBVyxHQUFJLElBQU0sS0FDNUJBLEVBQU9BLEVBQVcsR0FBSSxJQUFNLEtBQzVCQSxFQUFPQSxFQUFXLEdBQUksSUFBTSxLQUM1QkEsRUFBT0EsRUFBVyxHQUFJLElBQU0sS0FDNUJBLEVBQU9BLEVBQVcsR0FBSSxJQUFNLEtBQzVCQSxFQUFPQSxFQUFhLEtBQUksSUFBTSxPQUM5QkEsRUFBT0EsRUFBZSxPQUFJLElBQU0sU0FDaENBLEVBQU9BLEVBQWUsT0FBSSxJQUFNLFNBQ2hDQSxFQUFPQSxFQUFXLEdBQUksSUFBTSxLQUM1QkEsRUFBT0EsRUFBYSxLQUFJLElBQU0sT0FDOUJBLEVBQU9BLEVBQVUsRUFBSSxJQUFNLElBQzNCQSxFQUFPQSxFQUFZLElBQUksSUFBTSxNQUM3QkEsRUFBT0EsRUFBYyxNQUFJLElBQU0sUUFDL0JBLEVBQU9BLEVBQWMsTUFBSSxJQUFNLFFBQy9CQSxFQUFPQSxFQUFlLE9BQUksSUFBTSxTQUNoQ0EsRUFBT0EsRUFBZSxPQUFJLElBQU0sU0FDaENBLEVBQU9BLEVBQWMsTUFBSSxJQUFNLFFBQy9CQSxFQUFPQSxFQUFXLEdBQUksSUFBTSxLQUM1QkEsRUFBT0EsRUFBYSxLQUFJLElBQU0sT0FDOUJBLEVBQU9BLEVBQWdCLFFBQUksSUFBTSxVQUNqQ0EsRUFBT0EsRUFBYSxLQUFJLElBQU0sT0FDOUJBLEVBQU9BLEVBQW1CLFdBQUksSUFBTSxhQUNwQ0EsRUFBT0EsRUFBZ0IsUUFBSSxJQUFNLFVBQ2pDQSxFQUFPQSxFQUFhLEtBQUksSUFBTSxPQUM5QkEsRUFBT0EsRUFBYSxLQUFJLElBQU0sT0FDOUJBLEVBQU9BLEVBQWEsS0FBSSxJQUFNLE9BQzlCQSxFQUFPQSxFQUFlLE9BQUksSUFBTSxTQUNoQ0EsRUFBT0EsRUFBVyxHQUFJLElBQU0sS0FDNUJBLEVBQU9BLEVBQVcsR0FBSSxJQUFNLEtBQzVCQSxFQUFPQSxFQUFXLEdBQUksSUFBTSxLQUM1QkEsRUFBT0EsRUFBVyxHQUFJLElBQU0sS0FDNUJBLEVBQU9BLEVBQWMsTUFBSSxJQUFNLFFBQy9CQSxFQUFPQSxFQUFZLElBQUksSUFBTSxNQUM3QkEsRUFBT0EsRUFBYSxLQUFJLElBQU0sT0FDOUJBLEVBQU9BLEVBQWlCLFNBQUksSUFBTSxXQUNsQ0EsRUFBT0EsRUFBZ0IsUUFBSSxJQUFNLFVBQ2pDQSxFQUFPQSxFQUFpQixTQUFJLElBQU0sV0FDbENBLEVBQU9BLEVBQWUsT0FBSSxJQUFNLFNBQ2hDQSxFQUFPQSxFQUFXLEdBQUksSUFBTSxLQUM1QkEsRUFBT0EsRUFBaUIsU0FBSSxJQUFNLFdBQ2xDQSxFQUFPQSxFQUFlLE9BQUksSUFBTSxTQUNoQ0EsRUFBT0EsRUFBVSxFQUFJLElBQU0sSUFDM0JBLEVBQU9BLEVBQWMsTUFBSSxJQUFNLFFBQy9CQSxFQUFPQSxFQUFrQixVQUFJLElBQU0sWUFDbkNBLEVBQU9BLEVBQVksSUFBSSxJQUFNLE1BQzdCQSxFQUFPQSxFQUFXLEdBQUksSUFBTSxLQUM1QkEsRUFBT0EsRUFBVyxHQUFJLElBQU0sS0FDNUJBLEVBQU9BLEVBQVcsR0FBSSxJQUFNLEtBQzVCQSxFQUFPQSxFQUFZLElBQUksSUFBTSxNQUM3QkEsRUFBT0EsRUFBYSxLQUFJLElBQU0sT0FDOUJBLEVBQU9BLEVBQVUsRUFBSSxJQUFNLElBQzNCQSxFQUFPQSxFQUFlLE9BQUksSUFBTSxTQUNoQ0EsRUFBT0EsRUFBZ0IsUUFBSSxJQUFNLFVBQ2pDQSxFQUFPQSxFQUFlLE9BQUksSUFBTSxTQUNoQ0EsRUFBT0EsRUFBZSxPQUFJLElBQU0sU0FDaENBLEVBQU9BLEVBQWMsTUFBSSxJQUFNLFFBQy9CQSxFQUFPQSxFQUFhLEtBQUksSUFBTSxPQUM5QkEsRUFBT0EsRUFBZSxPQUFJLElBQU0sU0FDaENBLEVBQU9BLEVBQWUsT0FBSSxLQUFPLFNBQ2pDQSxFQUFPQSxFQUFjLE1BQUksS0FBTyxRQUNoQ0EsRUFBT0EsRUFBWSxJQUFJLEtBQU8sTUFDOUJBLEVBQU9BLEVBQWdCLFFBQUksS0FBTyxVQUNsQ0EsRUFBT0EsRUFBWSxJQUFJLEtBQU8sTUFDOUJBLEVBQU9BLEVBQWMsTUFBSSxLQUFPLFFBQ2hDQSxFQUFPQSxFQUFjLE1BQUksS0FBTyxRQUNoQ0EsRUFBT0EsRUFBaUIsU0FBSSxLQUFPLFdBQ25DQSxFQUFPQSxFQUFpQixTQUFJLEtBQU8sV0FDbkNBLEVBQU9BLEVBQWMsTUFBSSxLQUFPLFFBQ2hDQSxFQUFPQSxFQUFXLEdBQUksS0FBTyxLQUM3QkEsRUFBT0EsRUFBVyxHQUFJLEtBQU8sS0FDN0JBLEVBQU9BLEVBQWMsTUFBSSxLQUFPLFFBQ2hDQSxFQUFPQSxFQUFjLE1BQUksS0FBTyxRQUNoQ0EsRUFBT0EsRUFBVyxHQUFJLEtBQU8sS0FDN0JBLEVBQU9BLEVBQWMsTUFBSSxLQUFPLFFBQ2hDQSxFQUFPQSxFQUFXLEdBQUksS0FBTyxLQUM3QkEsRUFBT0EsRUFBVSxFQUFJLEtBQU8sSUFDNUJBLEVBQU9BLEVBQVcsR0FBSSxLQUFPLEtBQzdCQSxFQUFPQSxFQUFZLElBQUksS0FBTyxNQUM5QkEsRUFBT0EsRUFBWSxJQUFJLEtBQU8sTUFDOUJBLEVBQU9BLEVBQVksSUFBSSxLQUFPLE1BQzlCQSxFQUFPQSxFQUFZLElBQUksS0FBTyxLQUNqQyxDQTVIRCxDQTRIR0EsRUFBU2ppSCxFQUFRaWlILFNBQVdqaUgsRUFBUWlpSCxPQUFTLENBQUMsSUFDakQsTUFBTXVFLEVBQWlCLElBQUlsOEYsSUFBSSxDQUMzQixDQUFDODdGLEVBQVUxbEgsRUFBR3VoSCxFQUFPdmhILEdBQ3JCLENBQUMwbEgsRUFBVUssUUFBU3hFLEVBQU93RSxTQUMzQixDQUFDTCxFQUFVYixlQUFnQnRELEVBQU9zRCxnQkFDbEMsQ0FBQ2EsRUFBVU0sT0FBUXpFLEVBQU95RSxRQUMxQixDQUFDTixFQUFVTyxLQUFNMUUsRUFBTzBFLE1BQ3hCLENBQUNQLEVBQVVRLFFBQVMzRSxFQUFPMkUsU0FDM0IsQ0FBQ1IsRUFBVVMsTUFBTzVFLEVBQU80RSxPQUN6QixDQUFDVCxFQUFVcnBDLEVBQUdrbEMsRUFBT2xsQyxHQUNyQixDQUFDcXBDLEVBQVVVLEtBQU03RSxFQUFPNkUsTUFDeEIsQ0FBQ1YsRUFBVVcsU0FBVTlFLEVBQU84RSxVQUM1QixDQUFDWCxFQUFVWSxRQUFTL0UsRUFBTytFLFNBQzNCLENBQUNaLEVBQVVsRSxJQUFLRCxFQUFPQyxLQUN2QixDQUFDa0UsRUFBVWpFLFdBQVlGLEVBQU9FLFlBQzlCLENBQUNpRSxFQUFVaEUsS0FBTUgsRUFBT0csTUFDeEIsQ0FBQ2dFLEVBQVUvRCxHQUFJSixFQUFPSSxJQUN0QixDQUFDK0QsRUFBVWEsT0FBUWhGLEVBQU9nRixRQUMxQixDQUFDYixFQUFVYyxRQUFTakYsRUFBT2lGLFNBQzNCLENBQUNkLEVBQVU5RCxPQUFRTCxFQUFPSyxRQUMxQixDQUFDOEQsRUFBVTdELEtBQU1OLEVBQU9NLE1BQ3hCLENBQUM2RCxFQUFVZSxJQUFLbEYsRUFBT2tGLEtBQ3ZCLENBQUNmLEVBQVVnQixTQUFVbkYsRUFBT21GLFVBQzVCLENBQUNoQixFQUFVNUQsR0FBSVAsRUFBT08sSUFDdEIsQ0FBQzRELEVBQVVULEtBQU0xRCxFQUFPMEQsTUFDeEIsQ0FBQ1MsRUFBVWlCLFFBQVNwRixFQUFPb0YsU0FDM0IsQ0FBQ2pCLEVBQVVrQixPQUFRckYsRUFBT3FGLFFBQzFCLENBQUNsQixFQUFVbUIsSUFBS3RGLEVBQU9zRixLQUN2QixDQUFDbkIsRUFBVTNELElBQUtSLEVBQU9RLEtBQ3ZCLENBQUMyRCxFQUFVMUQsR0FBSVQsRUFBT1MsSUFDdEIsQ0FBQzBELEVBQVV6RCxHQUFJVixFQUFPVSxJQUN0QixDQUFDeUQsRUFBVXhELEdBQUlYLEVBQU9XLElBQ3RCLENBQUN3RCxFQUFVdkQsTUFBT1osRUFBT1ksT0FDekIsQ0FBQ3VELEVBQVVvQixTQUFVdkYsRUFBT3VGLFVBQzVCLENBQUNwQixFQUFVcUIsV0FBWXhGLEVBQU93RixZQUM5QixDQUFDckIsRUFBVXNCLE9BQVF6RixFQUFPeUYsUUFDMUIsQ0FBQ3RCLEVBQVV6QixLQUFNMUMsRUFBTzBDLE1BQ3hCLENBQUN5QixFQUFVdUIsT0FBUTFGLEVBQU8wRixRQUMxQixDQUFDdkIsRUFBVVYsZUFBZ0J6RCxFQUFPeUQsZ0JBQ2xDLENBQUNVLEVBQVV3QixLQUFNM0YsRUFBTzJGLE1BQ3hCLENBQUN4QixFQUFVeUIsTUFBTzVGLEVBQU80RixPQUN6QixDQUFDekIsRUFBVTBCLFNBQVU3RixFQUFPNkYsVUFDNUIsQ0FBQzFCLEVBQVV0RCxHQUFJYixFQUFPYSxJQUN0QixDQUFDc0QsRUFBVXJELEdBQUlkLEVBQU9jLElBQ3RCLENBQUNxRCxFQUFVcEQsR0FBSWYsRUFBT2UsSUFDdEIsQ0FBQ29ELEVBQVVuRCxHQUFJaEIsRUFBT2dCLElBQ3RCLENBQUNtRCxFQUFVbEQsR0FBSWpCLEVBQU9pQixJQUN0QixDQUFDa0QsRUFBVWpELEdBQUlsQixFQUFPa0IsSUFDdEIsQ0FBQ2lELEVBQVVoRCxLQUFNbkIsRUFBT21CLE1BQ3hCLENBQUNnRCxFQUFVMkIsT0FBUTlGLEVBQU84RixRQUMxQixDQUFDM0IsRUFBVTRCLE9BQVEvRixFQUFPK0YsUUFDMUIsQ0FBQzVCLEVBQVUvQyxHQUFJcEIsRUFBT29CLElBQ3RCLENBQUMrQyxFQUFVMWxGLEtBQU11aEYsRUFBT3ZoRixNQUN4QixDQUFDMGxGLEVBQVVud0IsRUFBR2dzQixFQUFPaHNCLEdBQ3JCLENBQUNtd0IsRUFBVTlDLElBQUtyQixFQUFPcUIsS0FDdkIsQ0FBQzhDLEVBQVU2QixNQUFPaEcsRUFBT2dHLE9BQ3pCLENBQUM3QixFQUFVOEIsTUFBT2pHLEVBQU9pRyxPQUN6QixDQUFDOUIsRUFBVStCLE9BQVFsRyxFQUFPa0csUUFDMUIsQ0FBQy9CLEVBQVVnQyxPQUFRbkcsRUFBT21HLFFBQzFCLENBQUNoQyxFQUFVaUMsTUFBT3BHLEVBQU9vRyxPQUN6QixDQUFDakMsRUFBVTdDLEdBQUl0QixFQUFPc0IsSUFDdEIsQ0FBQzZDLEVBQVVrQyxLQUFNckcsRUFBT3FHLE1BQ3hCLENBQUNsQyxFQUFVNUMsUUFBU3ZCLEVBQU91QixTQUMzQixDQUFDNEMsRUFBVW1DLEtBQU10RyxFQUFPc0csTUFDeEIsQ0FBQ25DLEVBQVVvQyxXQUFZdkcsRUFBT3VHLFlBQzlCLENBQUNwQyxFQUFVcUMsUUFBU3hHLEVBQU93RyxTQUMzQixDQUFDckMsRUFBVXNDLEtBQU16RyxFQUFPeUcsTUFDeEIsQ0FBQ3RDLEVBQVUzQyxLQUFNeEIsRUFBT3dCLE1BQ3hCLENBQUMyQyxFQUFVMUMsS0FBTXpCLEVBQU95QixNQUN4QixDQUFDMEMsRUFBVXVDLE9BQVExRyxFQUFPMEcsUUFDMUIsQ0FBQ3ZDLEVBQVVOLEdBQUk3RCxFQUFPNkQsSUFDdEIsQ0FBQ00sRUFBVUwsR0FBSTlELEVBQU84RCxJQUN0QixDQUFDSyxFQUFVSixHQUFJL0QsRUFBTytELElBQ3RCLENBQUNJLEVBQVVILEdBQUloRSxFQUFPZ0UsSUFDdEIsQ0FBQ0csRUFBVUYsTUFBT2pFLEVBQU9pRSxPQUN6QixDQUFDRSxFQUFVd0MsSUFBSzNHLEVBQU8yRyxLQUN2QixDQUFDeEMsRUFBVXpDLEtBQU0xQixFQUFPMEIsTUFDeEIsQ0FBQ3lDLEVBQVV5QyxTQUFVNUcsRUFBTzRHLFVBQzVCLENBQUN6QyxFQUFVMEMsUUFBUzdHLEVBQU82RyxTQUMzQixDQUFDMUMsRUFBVTJDLFNBQVU5RyxFQUFPOEcsVUFDNUIsQ0FBQzNDLEVBQVU0QyxPQUFRL0csRUFBTytHLFFBQzFCLENBQUM1QyxFQUFVeEMsR0FBSTNCLEVBQU8yQixJQUN0QixDQUFDd0MsRUFBVTZDLFNBQVVoSCxFQUFPZ0gsVUFDNUIsQ0FBQzdDLEVBQVU4QyxPQUFRakgsRUFBT2lILFFBQzFCLENBQUM5QyxFQUFVdm1FLEVBQUdvaUUsRUFBT3BpRSxHQUNyQixDQUFDdW1FLEVBQVUrQyxNQUFPbEgsRUFBT2tILE9BQ3pCLENBQUMvQyxFQUFVZ0QsVUFBV25ILEVBQU9tSCxXQUM3QixDQUFDaEQsRUFBVXZDLElBQUs1QixFQUFPNEIsS0FDdkIsQ0FBQ3VDLEVBQVVpRCxHQUFJcEgsRUFBT29ILElBQ3RCLENBQUNqRCxFQUFVa0QsR0FBSXJILEVBQU9xSCxJQUN0QixDQUFDbEQsRUFBVW1ELEdBQUl0SCxFQUFPc0gsSUFDdEIsQ0FBQ25ELEVBQVVvRCxJQUFLdkgsRUFBT3VILEtBQ3ZCLENBQUNwRCxFQUFVdEMsS0FBTTdCLEVBQU82QixNQUN4QixDQUFDc0MsRUFBVTdmLEVBQUcwYixFQUFPMWIsR0FDckIsQ0FBQzZmLEVBQVVxRCxPQUFReEgsRUFBT3dILFFBQzFCLENBQUNyRCxFQUFVc0QsUUFBU3pILEVBQU95SCxTQUMzQixDQUFDdEQsRUFBVXVELE9BQVExSCxFQUFPMEgsUUFDMUIsQ0FBQ3ZELEVBQVV3RCxPQUFRM0gsRUFBTzJILFFBQzFCLENBQUN4RCxFQUFVckMsTUFBTzlCLEVBQU84QixPQUN6QixDQUFDcUMsRUFBVXBDLEtBQU0vQixFQUFPK0IsTUFDeEIsQ0FBQ29DLEVBQVVsQyxPQUFRakMsRUFBT2lDLFFBQzFCLENBQUNrQyxFQUFVbkMsT0FBUWhDLEVBQU9nQyxRQUMxQixDQUFDbUMsRUFBVXlELE1BQU81SCxFQUFPNEgsT0FDekIsQ0FBQ3pELEVBQVVqQyxJQUFLbEMsRUFBT2tDLEtBQ3ZCLENBQUNpQyxFQUFVMEQsUUFBUzdILEVBQU82SCxTQUMzQixDQUFDMUQsRUFBVWhDLElBQUtuQyxFQUFPbUMsS0FDdkIsQ0FBQ2dDLEVBQVUvQixNQUFPcEMsRUFBT29DLE9BQ3pCLENBQUMrQixFQUFVMkQsTUFBTzlILEVBQU84SCxPQUN6QixDQUFDM0QsRUFBVTRELFNBQVUvSCxFQUFPK0gsVUFDNUIsQ0FBQzVELEVBQVU2RCxTQUFVaEksRUFBT2dJLFVBQzVCLENBQUM3RCxFQUFVOEQsTUFBT2pJLEVBQU9pSSxPQUN6QixDQUFDOUQsRUFBVStELEdBQUlsSSxFQUFPa0ksSUFDdEIsQ0FBQy9ELEVBQVVnRSxHQUFJbkksRUFBT21JLElBQ3RCLENBQUNoRSxFQUFVaUUsTUFBT3BJLEVBQU9vSSxPQUN6QixDQUFDakUsRUFBVVIsTUFBTzNELEVBQU8yRCxPQUN6QixDQUFDUSxFQUFVa0UsR0FBSXJJLEVBQU9xSSxJQUN0QixDQUFDbEUsRUFBVW1FLE1BQU90SSxFQUFPc0ksT0FDekIsQ0FBQ25FLEVBQVU5QixHQUFJckMsRUFBT3FDLElBQ3RCLENBQUM4QixFQUFVN2UsRUFBRzBhLEVBQU8xYSxHQUNyQixDQUFDNmUsRUFBVTdCLEdBQUl0QyxFQUFPc0MsSUFDdEIsQ0FBQzZCLEVBQVVYLElBQUt4RCxFQUFPd0QsS0FDdkIsQ0FBQ1csRUFBVTVCLElBQUt2QyxFQUFPdUMsS0FDdkIsQ0FBQzRCLEVBQVVvRSxJQUFLdkksRUFBT3VJLEtBQ3ZCLENBQUNwRSxFQUFVcUUsSUFBS3hJLEVBQU93SSxPQU0zQnpxSCxFQUFRbWxILFNBSlIsU0FBa0JsMUcsR0FDZCxJQUFJaEksRUFDSixPQUE4QyxRQUF0Q0EsRUFBS3UrRyxFQUFlemdILElBQUlrSyxVQUE2QixJQUFQaEksRUFBZ0JBLEVBQUtnNkcsRUFBT3lJLE9BQ3RGLEVBRUEsTUFBTUMsRUFBSTFJLEVBQ1ZqaUgsRUFBUXVtSCxpQkFBbUIsQ0FDdkIsQ0FBQzNFLEVBQUdsaEYsTUFBTyxJQUFJLzNCLElBQUksQ0FDZmdpSCxFQUFFbEUsUUFDRmtFLEVBQUVqRSxPQUNGaUUsRUFBRWhFLEtBQ0ZnRSxFQUFFL0QsUUFDRitELEVBQUU5RCxNQUNGOEQsRUFBRTdELEtBQ0Y2RCxFQUFFNUQsU0FDRjRELEVBQUUzRCxRQUNGMkQsRUFBRXhJLFdBQ0Z3SSxFQUFFdkksS0FDRnVJLEVBQUV0SSxHQUNGc0ksRUFBRTFELE9BQ0YwRCxFQUFFekQsUUFDRnlELEVBQUVySSxPQUNGcUksRUFBRXhELElBQ0Z3RCxFQUFFdkQsU0FDRnVELEVBQUVuSSxHQUNGbUksRUFBRXRELFFBQ0ZzRCxFQUFFcEQsSUFDRm9ELEVBQUVsSSxJQUNGa0ksRUFBRWpJLEdBQ0ZpSSxFQUFFaEksR0FDRmdJLEVBQUU5SCxNQUNGOEgsRUFBRW5ELFNBQ0ZtRCxFQUFFbEQsV0FDRmtELEVBQUVqRCxPQUNGaUQsRUFBRWhELE9BQ0ZnRCxFQUFFL0MsS0FDRitDLEVBQUU5QyxNQUNGOEMsRUFBRTdDLFNBQ0Y2QyxFQUFFN0gsR0FDRjZILEVBQUU1SCxHQUNGNEgsRUFBRTNILEdBQ0YySCxFQUFFMUgsR0FDRjBILEVBQUV6SCxHQUNGeUgsRUFBRXhILEdBQ0Z3SCxFQUFFdkgsS0FDRnVILEVBQUU1QyxPQUNGNEMsRUFBRTNDLE9BQ0YyQyxFQUFFdEgsR0FDRnNILEVBQUVqcUYsS0FDRmlxRixFQUFFeEMsT0FDRndDLEVBQUVySCxJQUNGcUgsRUFBRXpDLE1BQ0Z5QyxFQUFFcEgsR0FDRm9ILEVBQUVyQyxLQUNGcUMsRUFBRW5ILFFBQ0ZtSCxFQUFFcEMsS0FDRm9DLEVBQUVsQyxRQUNGa0MsRUFBRWxILEtBQ0ZrSCxFQUFFakgsS0FDRmlILEVBQUUvQixJQUNGK0IsRUFBRTdCLFFBQ0Y2QixFQUFFOUIsU0FDRjhCLEVBQUU1QixTQUNGNEIsRUFBRTNCLE9BQ0YyQixFQUFFL0csR0FDRitHLEVBQUU5cUUsRUFDRjhxRSxFQUFFeEIsTUFDRndCLEVBQUV2QixVQUNGdUIsRUFBRTlHLElBQ0Y4RyxFQUFFbEIsT0FDRmtCLEVBQUVqQixRQUNGaUIsRUFBRWhCLE9BQ0ZnQixFQUFFZixPQUNGZSxFQUFFZCxNQUNGYyxFQUFFYixRQUNGYSxFQUFFdEcsTUFDRnNHLEVBQUVaLE1BQ0ZZLEVBQUVSLEdBQ0ZRLEVBQUVYLFNBQ0ZXLEVBQUVWLFNBQ0ZVLEVBQUVULE1BQ0ZTLEVBQUVQLEdBQ0ZPLEVBQUVOLE1BQ0ZNLEVBQUUvRSxNQUNGK0UsRUFBRUwsR0FDRkssRUFBRUosTUFDRkksRUFBRXBHLEdBQ0ZvRyxFQUFFSCxJQUNGRyxFQUFFRixNQUVOLENBQUM3SSxFQUFHMEQsUUFBUyxJQUFJMzhHLElBQUksQ0FBQ2dpSCxFQUFFN0UsR0FBSTZFLEVBQUU1RSxHQUFJNEUsRUFBRTNFLEdBQUkyRSxFQUFFMUUsR0FBSTBFLEVBQUV6RSxNQUFPeUUsRUFBRXBGLGlCQUN6RCxDQUFDM0QsRUFBRzZELEtBQU0sSUFBSTk4RyxJQUFJLENBQUNnaUgsRUFBRS9FLE1BQU8rRSxFQUFFakYsZUFBZ0JpRixFQUFFaEYsT0FDaEQsQ0FBQy9ELEVBQUdDLE9BQVEsSUFBSWw1RyxJQUNoQixDQUFDaTVHLEVBQUdwaEYsS0FBTSxJQUFJNzNCLElBQ2QsQ0FBQ2k1RyxFQUFHRSxPQUFRLElBQUluNUcsS0FLcEIzSSxFQUFRc21ILGlCQUhSLFNBQTBCdkUsR0FDdEIsT0FBT0EsSUFBTzRJLEVBQUU3SCxJQUFNZixJQUFPNEksRUFBRTVILElBQU1oQixJQUFPNEksRUFBRTNILElBQU1qQixJQUFPNEksRUFBRTFILElBQU1sQixJQUFPNEksRUFBRXpILElBQU1uQixJQUFPNEksRUFBRXhILEVBQy9GLEVBRUEsTUFBTXlILEVBQWlCLElBQUlqaUgsSUFBSSxDQUMzQnk5RyxFQUFVeUQsTUFDVnpELEVBQVVxRCxPQUNWckQsRUFBVXFFLElBQ1ZyRSxFQUFVK0IsT0FDVi9CLEVBQVUwQyxRQUNWMUMsRUFBVXlDLFNBQ1Z6QyxFQUFVZ0QsWUFLZHBwSCxFQUFRcW1ILGlCQUhSLFNBQTBCdEUsRUFBSXRqRyxHQUMxQixPQUFPbXNHLEVBQWU1aEgsSUFBSSs0RyxJQUFRdGpHLEdBQW9Cc2pHLElBQU9xRSxFQUFVMkMsUUFDM0UsNkJDMWdCQSxJQUFXOEIsRUFIWGxuSCxPQUFPQyxlQUFlNUQsRUFBUyxhQUFjLENBQUUwRCxPQUFPLElBQ3REMUQsRUFBUThxSCxhQUFlOXFILEVBQVE2cUgsZUFBWSxHQUVoQ0EsRUFVSTdxSCxFQUFRNnFILFlBQWM3cUgsRUFBUTZxSCxVQUFZLENBQUMsSUFUNUNBLEVBQXFCLFVBQUksR0FBSyxZQUN4Q0EsRUFBVUEsRUFBMEIsZUFBSSxHQUFLLGlCQUM3Q0EsRUFBVUEsRUFBZ0MscUJBQUksR0FBSyx1QkFDbkRBLEVBQVVBLEVBQXFCLFVBQUksR0FBSyxZQUN4Q0EsRUFBVUEsRUFBbUIsUUFBSSxHQUFLLFVBQ3RDQSxFQUFVQSxFQUFtQixRQUFJLEdBQUssVUFDdENBLEVBQVVBLEVBQW1CLFFBQUksR0FBSyxVQUN0Q0EsRUFBVUEsRUFBZSxJQUFJLEdBQUssTUFDbENBLEVBQVVBLEVBQXVCLFlBQUksR0FBSyxjQVU5QzdxSCxFQUFROHFILGFBUlIsU0FBc0JybkcsRUFBT2hWLEdBQ3pCLElBQUssSUFBSTFKLEVBQUkwZSxFQUFNNGxELE1BQU01b0UsT0FBUyxFQUFHc0UsR0FBSyxFQUFHQSxJQUN6QyxHQUFJMGUsRUFBTTRsRCxNQUFNdGtFLEdBQUdwQyxPQUFTOEwsRUFDeEIsT0FBT2dWLEVBQU00bEQsTUFBTXRrRSxHQUFHckIsTUFHOUIsT0FBTyxJQUNYLDRCQ3JCQUMsT0FBT0MsZUFBZTVELEVBQVMsYUFBYyxDQUFFMEQsT0FBTyxJQUN0RDFELEVBQVErcUgscUJBQXVCL3FILEVBQVFnckgsbUJBQXFCaHJILEVBQVFpckgsMEJBQTRCanJILEVBQVFrckgsZ0JBQWtCbHJILEVBQVFtckgsWUFBY25ySCxFQUFRb3JILFVBQVlwckgsRUFBUXFySCxZQUFjcnJILEVBQVFzckgsMkJBQXdCLEVBQzFOLE1BQU1DLEVBQXdCLElBQUk1aUgsSUFBSSxDQUNsQyxNQUFPLE1BQU8sT0FBUSxPQUFRLE9BQVEsT0FBUSxPQUFRLE9BQVEsT0FBUSxPQUFRLE9BQzlFLE9BQVEsT0FBUSxPQUFRLE9BQVEsT0FBUSxPQUFRLE9BQVEsT0FBUSxPQUFRLE9BQ3hFLE9BQVEsT0FBUSxPQUFRLE9BQVEsT0FBUSxPQUFRLE9BQVEsT0FBUSxPQUFRLFFBQ3hFLFFBQVMsUUFBUyxVQUl0QixJQUFXMGlILEVBRlhyckgsRUFBUXNySCxzQkFBd0IsS0FFckJELEVBaUNNcnJILEVBQVFxckgsY0FBZ0JyckgsRUFBUXFySCxZQUFjLENBQUMsSUFoQ2hEQSxFQUFpQixLQUFLLEdBQUssTUFDdkNBLEVBQVlBLEVBQWtCLEtBQUksR0FBSyxPQUN2Q0EsRUFBWUEsRUFBd0IsV0FBSSxHQUFLLGFBQzdDQSxFQUFZQSxFQUE2QixnQkFBSSxJQUFNLGtCQUNuREEsRUFBWUEsRUFBdUIsVUFBSSxJQUFNLFlBQzdDQSxFQUFZQSxFQUF1QixVQUFJLElBQU0sWUFDN0NBLEVBQVlBLEVBQW1CLE1BQUksSUFBTSxRQUN6Q0EsRUFBWUEsRUFBOEIsaUJBQUksSUFBTSxtQkFDcERBLEVBQVlBLEVBQTRCLGVBQUksSUFBTSxpQkFDbERBLEVBQVlBLEVBQXlCLFlBQUksSUFBTSxjQUMvQ0EsRUFBWUEsRUFBdUIsVUFBSSxJQUFNLFlBQzdDQSxFQUFZQSxFQUF3QixXQUFJLElBQU0sYUFDOUNBLEVBQVlBLEVBQTBCLGFBQUksSUFBTSxlQUNoREEsRUFBWUEsRUFBcUIsUUFBSSxJQUFNLFVBQzNDQSxFQUFZQSxFQUFxQixRQUFJLElBQU0sVUFDM0NBLEVBQVlBLEVBQXFCLFFBQUksSUFBTSxVQUMzQ0EsRUFBWUEsRUFBdUIsVUFBSSxJQUFNLFlBQzdDQSxFQUFZQSxFQUE0QixlQUFJLElBQU0saUJBQ2xEQSxFQUFZQSxFQUF5QixZQUFJLElBQU0sY0FDL0NBLEVBQVlBLEVBQStCLGtCQUFJLElBQU0sb0JBQ3JEQSxFQUFZQSxFQUEyQixjQUFJLElBQU0sZ0JBQ2pEQSxFQUFZQSxFQUE2QixnQkFBSSxJQUFNLGtCQUNuREEsRUFBWUEsRUFBNkIsZ0JBQUksSUFBTSxrQkFDbkRBLEVBQVlBLEVBQTZCLGdCQUFJLElBQU0sa0JBQ25EQSxFQUFZQSxFQUE2QixnQkFBSSxJQUFNLGtCQUNuREEsRUFBWUEsRUFBa0MscUJBQUksSUFBTSx1QkFDeERBLEVBQVlBLEVBQTBCLGFBQUksSUFBTSxlQUNoREEsRUFBWUEsRUFBMkIsY0FBSSxJQUFNLGdCQUNqREEsRUFBWUEsRUFBMkIsY0FBSSxLQUFPLGdCQUNsREEsRUFBWUEsRUFBMkIsY0FBSSxLQUFPLGdCQUNsREEsRUFBWUEsRUFBMkIsY0FBSSxLQUFPLGdCQUNsREEsRUFBWUEsRUFBbUMsc0JBQUksT0FBUyx3QkFFaEVyckgsRUFBUW9ySCxVQUFZLENBQ2hCSSxVQUFXLEtBQ1hDLFlBQWEsVUFDYkMsUUFBUyxVQUNUakMsT0FBUSxTQUNSa0MsT0FBUSxTQUNSQyxPQUFRLFVBTVo1ckgsRUFBUW1ySCxZQUhSLFNBQXFCbHNGLEdBQ2pCLE9BQU9BLEdBQU0sT0FBU0EsR0FBTSxLQUNoQyxFQUtBai9CLEVBQVFrckgsZ0JBSFIsU0FBeUJqc0YsR0FDckIsT0FBT0EsR0FBTSxPQUFTQSxHQUFNLEtBQ2hDLEVBS0FqL0IsRUFBUWlySCwwQkFIUixTQUFtQ1ksRUFBS0MsR0FDcEMsT0FBdUIsTUFBZkQsRUFBTSxPQUFnQixLQUFPQyxDQUN6QyxFQU9BOXJILEVBQVFnckgsbUJBSlIsU0FBNEIvckYsR0FDeEIsT0FBZ0IsS0FBUEEsR0FBc0IsS0FBUEEsR0FBc0IsS0FBUEEsR0FBc0IsSUFBUEEsR0FBc0IsS0FBUEEsR0FBZUEsR0FBTSxHQUFRQSxHQUFNLElBQ25HQSxHQUFNLEtBQVFBLEdBQU0sR0FDN0IsRUFLQWovQixFQUFRK3FILHFCQUhSLFNBQThCOXJGLEdBQzFCLE9BQVFBLEdBQU0sT0FBU0EsR0FBTSxPQUFVc3NGLEVBQXNCdmlILElBQUlpMkIsRUFDckUsK0JDekVBdDdCLE9BQU9DLGVBQWU1RCxFQUFTLGFBQWMsQ0FBRTBELE9BQU8sSUFDdEQxRCxFQUFRNmUsY0FBZ0I3ZSxFQUFRa0ksTUFBUWxJLEVBQVErckgsY0FBZ0IvckgsRUFBUStvRCxVQUFZL29ELEVBQVFnc0gsTUFBUWhzSCxFQUFRd1EsS0FBT3hRLEVBQVFpc0gsZUFBaUJqc0gsRUFBUWtzSCxXQUFhbHNILEVBQVErZSxlQUFpQi9lLEVBQVFnVCxVQUFZaFQsRUFBUXNuRCxPQUFTdG5ELEVBQVFtc0gsd0JBQXFCLEVBQzVQLE1BQU16bkcsRUFBYSxFQUFRLE1BQzNCLElBQUkwbkcsRUFBZSxFQUFRLE1BQzNCem9ILE9BQU9DLGVBQWU1RCxFQUFTLHFCQUFzQixDQUFFOEYsWUFBWSxFQUFNQyxJQUFLLFdBQWMsT0FBT3FtSCxFQUFhRCxrQkFBb0IsSUFDcEksSUFBSUUsRUFBYSxFQUFRLE1BQ3pCMW9ILE9BQU9DLGVBQWU1RCxFQUFTLFNBQVUsQ0FBRThGLFlBQVksRUFBTUMsSUFBSyxXQUFjLE9BQU9zbUgsRUFBVy9rRSxNQUFRLElBQzFHLElBQUlnbEUsRUFBYSxFQUFRLEtBQ3pCM29ILE9BQU9DLGVBQWU1RCxFQUFTLFlBQWEsQ0FBRThGLFlBQVksRUFBTUMsSUFBSyxXQUFjLE9BQU91bUgsRUFBV3Q1RyxTQUFXLElBQ2hIclAsT0FBT0MsZUFBZTVELEVBQVMsaUJBQWtCLENBQUU4RixZQUFZLEVBQU1DLElBQUssV0FBYyxPQUFPdW1ILEVBQVd2dEcsY0FBZ0IsSUFDMUgsSUFBSXd0RyxFQUFtQixFQUFRLE1BQy9CNW9ILE9BQU9DLGVBQWU1RCxFQUFTLGFBQWMsQ0FBRThGLFlBQVksRUFBTUMsSUFBSyxXQUFjLE9BQU93bUgsRUFBaUJ0TCxHQUFLLElBRWpIamhILEVBQVFpc0gsZUFBaUIsRUFBekIsTUFFQWpzSCxFQUFRd1EsS0FBTyxFQUFmLE1BRUF4USxFQUFRZ3NILE1BQVEsRUFBaEIsTUFFQSxJQUFJUSxFQUFhLEVBQVEsTUFDekI3b0gsT0FBT0MsZUFBZTVELEVBQVMsWUFBYSxDQUFFOEYsWUFBWSxFQUFNQyxJQUFLLFdBQWMsT0FBT3ltSCxFQUFXempFLFNBQVcsSUFDaEhwbEQsT0FBT0MsZUFBZTVELEVBQVMsZ0JBQWlCLENBQUU4RixZQUFZLEVBQU1DLElBQUssV0FBYyxPQUFPeW1ILEVBQVdULGFBQWUsSUFzQnhIL3JILEVBQVFrSSxNQUhSLFNBQWVzSSxFQUFNeEksR0FDakIsT0FBTzBjLEVBQVc0aUMsT0FBT3AvQyxNQUFNc0ksRUFBTXhJLEVBQ3pDLEVBWUFoSSxFQUFRNmUsY0FWUixTQUF1QjR0RyxFQUFpQmo4RyxFQUFNeEksR0FDWCxpQkFBcEJ5a0gsSUFDUHprSCxFQUFVd0ksRUFDVkEsRUFBT2k4RyxFQUNQQSxFQUFrQixNQUV0QixNQUFNdnVHLEVBQVN3RyxFQUFXNGlDLE9BQU9vbEUsa0JBQWtCRCxFQUFpQnprSCxHQUVwRSxPQURBa1csRUFBTzRxQyxVQUFVOXRCLE1BQU14cUIsR0FBTSxHQUN0QjBOLEVBQU95dUcsYUFDbEIsNEJDakRBLElBQUlDLEVBSkpqcEgsT0FBT0MsZUFBZTVELEVBQVMsYUFBYyxDQUFFMEQsT0FBTyxJQUN0RDFELEVBQVE2c0gsc0JBQXdCN3NILEVBQVE0c0gsZUFBWSxFQUlwRCxTQUFXQSxHQUNQQSxFQUFVQSxFQUFrQixPQUFJLEdBQUssU0FDckNBLEVBQVVBLEVBQW1CLFFBQUksR0FBSyxTQUN6QyxDQUhELENBR0dBLEVBQVk1c0gsRUFBUTRzSCxZQUFjNXNILEVBQVE0c0gsVUFBWSxDQUFDLElBQzFELE1BQU1FLEVBQVMsQ0FBRXRsSCxLQUFNb2xILEVBQVVHLFFBdUdqQy9zSCxFQUFRNnNILHNCQXJHUixNQUNJLFdBQUEvdkcsQ0FBWTRCLEdBQ1J0ZSxLQUFLc2UsWUFBY0EsRUFDbkJ0ZSxLQUFLODZELFFBQVUsR0FDZjk2RCxLQUFLNHNILFNBQVcsSUFDcEIsQ0FJQSw4QkFBQUMsQ0FBK0JDLEVBQVlDLEdBQ3ZDLE1BQU1DLEVBQWEsR0FDYkMsRUFBZ0JGLEVBQVExc0gsT0FDeEI2c0gsRUFBWWx0SCxLQUFLc2UsWUFBWTRnRyxXQUFXNE4sR0FDeENLLEVBQWlCbnRILEtBQUtzZSxZQUFZNmdHLGdCQUFnQjJOLEdBQ3hELElBQUssSUFBSW5vSCxFQUFJLEVBQUdBLEVBQUkzRSxLQUFLODZELFFBQVF6NkQsT0FBUXNFLElBQUssQ0FDMUMsTUFBTWl3QixFQUFRNTBCLEtBQUs4NkQsUUFBUW4yRCxHQUMzQixHQUFJaXdCLEVBQU14dEIsT0FBU29sSCxFQUFVRyxPQUN6QixNQUVKLE1BQU0sUUFBRW5oSCxHQUFZb3BCLEVBQ3BCLEdBQUk1MEIsS0FBS3NlLFlBQVk0Z0csV0FBVzF6RyxLQUFhMGhILEdBQ3pDbHRILEtBQUtzZSxZQUFZNmdHLGdCQUFnQjN6RyxLQUFhMmhILEVBQWdCLENBQzlELE1BQU1DLEVBQWVwdEgsS0FBS3NlLFlBQVkyZ0csWUFBWXp6RyxHQUM5QzRoSCxFQUFhL3NILFNBQVc0c0gsR0FDeEJELEVBQVcxb0gsS0FBSyxDQUFFb0ssSUFBSy9KLEVBQUdza0UsTUFBT21rRCxHQUV6QyxDQUNKLENBQ0EsT0FBT0osQ0FDWCxDQUNBLHVCQUFBSyxDQUF3QlAsR0FDcEIsR0FBSTlzSCxLQUFLODZELFFBQVF6NkQsT0F2Q0MsRUF3Q2QsT0FDSixNQUFNMHNILEVBQVUvc0gsS0FBS3NlLFlBQVkyZ0csWUFBWTZOLEdBQ3ZDRSxFQUFhaHRILEtBQUs2c0gsK0JBQStCQyxFQUFZQyxHQUNuRSxHQUFJQyxFQUFXM3NILE9BM0NHLEVBNENkLE9BRUosTUFBTWl0SCxFQUFhLElBQUlwakcsSUFBSTZpRyxFQUFRcmhILEtBQUs2aEgsR0FBVyxDQUFDQSxFQUFPaHJILEtBQU1nckgsRUFBT2pxSCxVQUN4RSxJQUFJa3FILEVBQWtCLEVBRXRCLElBQUssSUFBSTdvSCxFQUFJLEVBQUdBLEVBQUlxb0gsRUFBVzNzSCxPQUFRc0UsSUFBSyxDQUN4QyxNQUFNOG9ILEVBQVlULEVBQVdyb0gsR0FFekI4b0gsRUFBVXhrRCxNQUFNeGxELE9BQU9pcUcsR0FBVUosRUFBVzNuSCxJQUFJK25ILEVBQU1uckgsUUFBVW1ySCxFQUFNcHFILFVBQ3RFa3FILEdBQW1CLEVBQ2ZBLEdBdERNLEdBdUROeHRILEtBQUs4NkQsUUFBUWhwRCxPQUFPMjdHLEVBQVUvK0csSUFBSyxHQUcvQyxDQUNKLENBRUEsWUFBQWkvRyxHQUNJM3RILEtBQUs4NkQsUUFBUTd2RCxRQUFReWhILEVBQ3pCLENBQ0EsV0FBQWtCLENBQVlwaUgsRUFBUzZYLEdBQ2pCcmpCLEtBQUtxdEgsd0JBQXdCN2hILEdBQzdCeEwsS0FBSzg2RCxRQUFRN3ZELFFBQVEsQ0FDakI3RCxLQUFNb2xILEVBQVVqaEcsUUFDaEIvZixVQUNBNlgsU0FFUixDQUNBLDBCQUFBd3FHLENBQTJCcmlILEVBQVM2WCxHQUNoQyxNQUFNeXFHLEVBQWM5dEgsS0FBSzg2RCxRQUFROXBELFFBQVFoUixLQUFLNHNILFVBQzlDNXNILEtBQUs4NkQsUUFBUWhwRCxPQUFPZzhHLEVBQWEsRUFBRyxDQUNoQzFtSCxLQUFNb2xILEVBQVVqaEcsUUFDaEIvZixVQUNBNlgsU0FFUixDQUNBLFdBQUEwcUcsQ0FBWW41RixHQUNSLE1BQU1vNUYsRUFBYWh1SCxLQUFLODZELFFBQVE5cEQsUUFBUTRqQixHQUNwQ281RixHQUFjLEdBQ2RodUgsS0FBSzg2RCxRQUFRaHBELE9BQU9rOEcsRUFBWSxFQUV4QyxDQU1BLGlCQUFBQyxHQUNJLE1BQU1DLEVBQVlsdUgsS0FBSzg2RCxRQUFROXBELFFBQVEwN0csR0FDbkN3QixHQUFhLEVBQ2JsdUgsS0FBSzg2RCxRQUFRaHBELE9BQU8sRUFBR284RyxFQUFZLEdBR25DbHVILEtBQUs4NkQsUUFBUXo2RCxPQUFTLENBRTlCLENBRUEsaUNBQUE4dEgsQ0FBa0N0K0csR0FDOUIsTUFBTStrQixFQUFRNTBCLEtBQUs4NkQsUUFBUTF2RCxNQUFNd3BCLEdBQVVBLEVBQU14dEIsT0FBU29sSCxFQUFVRyxRQUFVM3NILEtBQUtzZSxZQUFZNGdHLFdBQVd0cUYsRUFBTXBwQixXQUFhcUUsSUFDN0gsT0FBTytrQixHQUFTQSxFQUFNeHRCLE9BQVNvbEgsRUFBVWpoRyxRQUFVcUosRUFBUSxJQUMvRCxDQUNBLGVBQUF3NUYsQ0FBZ0I1aUgsR0FDWixPQUFPeEwsS0FBSzg2RCxRQUFRMXZELE1BQU13cEIsR0FBVUEsRUFBTXh0QixPQUFTb2xILEVBQVVqaEcsU0FBV3FKLEVBQU1wcEIsVUFBWUEsR0FDOUYsZ0NDOUdKakksT0FBT0MsZUFBZTVELEVBQVMsYUFBYyxDQUFFMEQsT0FBTyxJQUN0RDFELEVBQVFzbkQsWUFBUyxFQUNqQixNQUFNNWlDLEVBQWEsRUFBUSxNQUNyQitwRyxFQUEwQixFQUFRLE1BQ2xDQyxFQUErQixFQUFRLEtBQ3ZDdEMsRUFBZSxFQUFRLE1BQ3ZCdUMsRUFBVSxFQUFRLE1BQ2xCMUMsRUFBaUIsRUFBUSxNQUN6Qk0sRUFBbUIsRUFBUSxNQUMzQnFDLEVBQVUsRUFBUSxLQUNsQnRPLEVBQVksRUFBUSxNQUNwQnVPLEVBQWEsRUFBUSxNQUVyQkMsRUFBb0IsU0FFcEJDLEVBQXFCLEVBQ3JCQyxFQUFxQixFQUUzQixJQUFJQyxHQUNKLFNBQVdBLEdBQ1BBLEVBQWNBLEVBQXVCLFFBQUksR0FBSyxVQUM5Q0EsRUFBY0EsRUFBMkIsWUFBSSxHQUFLLGNBQ2xEQSxFQUFjQSxFQUEyQixZQUFJLEdBQUssY0FDbERBLEVBQWNBLEVBQXVCLFFBQUksR0FBSyxVQUM5Q0EsRUFBY0EsRUFBaUMsa0JBQUksR0FBSyxvQkFDeERBLEVBQWNBLEVBQTBCLFdBQUksR0FBSyxhQUNqREEsRUFBY0EsRUFBdUIsUUFBSSxHQUFLLFVBQzlDQSxFQUFjQSxFQUFvQixLQUFJLEdBQUssT0FDM0NBLEVBQWNBLEVBQXdCLFNBQUksR0FBSyxXQUMvQ0EsRUFBY0EsRUFBNkIsY0FBSSxHQUFLLGdCQUNwREEsRUFBY0EsRUFBMEIsV0FBSSxJQUFNLGFBQ2xEQSxFQUFjQSxFQUErQixnQkFBSSxJQUFNLGtCQUN2REEsRUFBY0EsRUFBNkIsY0FBSSxJQUFNLGdCQUNyREEsRUFBY0EsRUFBc0IsT0FBSSxJQUFNLFNBQzlDQSxFQUFjQSxFQUF1QixRQUFJLElBQU0sVUFDL0NBLEVBQWNBLEVBQXlCLFVBQUksSUFBTSxZQUNqREEsRUFBY0EsRUFBa0MsbUJBQUksSUFBTSxxQkFDMURBLEVBQWNBLEVBQTJCLFlBQUksSUFBTSxjQUNuREEsRUFBY0EsRUFBMEIsV0FBSSxJQUFNLGFBQ2xEQSxFQUFjQSxFQUEyQixZQUFJLElBQU0sY0FDbkRBLEVBQWNBLEVBQThCLGVBQUksSUFBTSxpQkFDdERBLEVBQWNBLEVBQWdDLGlCQUFJLElBQU0sbUJBQ3hEQSxFQUFjQSxFQUFvQyxxQkFBSSxJQUFNLHNCQUMvRCxDQXhCRCxDQXdCR0EsSUFBa0JBLEVBQWdCLENBQUMsSUFDdEMsTUFBTUMsRUFBVyxDQUNiQyxXQUFZLEVBQ1pDLFVBQVcsRUFDWHBQLGFBQWMsRUFDZHFQLFNBQVUsRUFDVkMsUUFBUyxFQUNUclAsV0FBWSxHQUVWc1AsRUFBdUIsSUFBSTVtSCxJQUFJLENBQUMyM0csRUFBVTJCLE9BQU9vQyxNQUFPL0QsRUFBVTJCLE9BQU84SCxNQUFPekosRUFBVTJCLE9BQU9pSSxNQUFPNUosRUFBVTJCLE9BQU9vSSxNQUFPL0osRUFBVTJCLE9BQU9xSSxLQUNqSmtGLEVBQXVCLENBQ3pCL3dHLGtCQUFrQixFQUNsQkcsd0JBQXdCLEVBQ3hCRixZQUFhMHRHLEVBQWFELG1CQUMxQnNELGFBQWMsTUE4aENsQixTQUFTQyxFQUErQnpxSCxFQUFHd2UsR0FDdkMsSUFBSWtzRyxFQUF5QjFxSCxFQUFFMnFILHlCQUF5QnJCLGtDQUFrQzlxRyxFQUFNeFQsU0FhaEcsT0FaSTAvRyxFQUNLMXFILEVBQUU0cUgsYUFBYWwzRyxTQUFTZzNHLEVBQXVCL2pILFNBSTFDM0csRUFBRTRxSCxhQUFhQyxXQUFXcnNHLEVBQU1paEcsU0FDdENpTCxFQUF5QixPQUp6QjFxSCxFQUFFMnFILHlCQUF5QnpCLFlBQVl3QixHQUN2Q0EsRUFBeUIsTUFPN0JJLEVBQW9COXFILEVBQUd3ZSxHQUVwQmtzRyxDQUNYLENBRUEsU0FBU0ssRUFBc0IvcUgsRUFBRzBxSCxHQUM5QixJQUFJTSxFQUFnQixLQUNoQm5oSCxFQUFNN0osRUFBRTRxSCxhQUFhSyxTQUN6QixLQUFPcGhILEdBQU8sRUFBR0EsSUFBTyxDQUNwQixNQUFNbEQsRUFBVTNHLEVBQUU0cUgsYUFBYS82RixNQUFNaG1CLEdBQ3JDLEdBQUlsRCxJQUFZK2pILEVBQXVCL2pILFFBQ25DLE1BRUEzRyxFQUFFa3JILGtCQUFrQnZrSCxFQUFTM0csRUFBRTRxSCxhQUFhTyxPQUFPdGhILE1BQ25EbWhILEVBQWdCcmtILEVBRXhCLENBS0EsT0FKS3FrSCxJQUNEaHJILEVBQUU0cUgsYUFBYVEsZ0JBQWdCdmhILEVBQU0sRUFBSSxFQUFJQSxHQUM3QzdKLEVBQUUycUgseUJBQXlCekIsWUFBWXdCLElBRXBDTSxDQUNYLENBRUEsU0FBU0ssRUFBWXJySCxFQUFHZ3JILEVBQWVNLEdBQ25DLElBQUk1cUcsRUFBY3NxRyxFQUNkTyxFQUFjdnJILEVBQUU0cUgsYUFBYVksa0JBQWtCUixHQUNuRCxJQUFLLElBQUlsckgsRUFBSSxFQUFHNkcsRUFBVTRrSCxFQUFhNWtILElBQVkya0gsRUFBbUJ4ckgsSUFBSzZHLEVBQVU0a0gsRUFBYSxDQUU5RkEsRUFBY3ZySCxFQUFFNHFILGFBQWFZLGtCQUFrQjdrSCxHQUMvQyxNQUFNOGtILEVBQWV6ckgsRUFBRTJxSCx5QkFBeUJwQixnQkFBZ0I1aUgsR0FDMUQra0gsRUFBa0JELEdBQWdCM3JILEdBQUtpcUgsR0FDUDBCLEdBQWdCQyxHQUU5Q0EsR0FDQTFySCxFQUFFMnFILHlCQUF5QnpCLFlBQVl1QyxHQUUzQ3pySCxFQUFFNHFILGFBQWFsOEcsT0FBTy9ILEtBR3RCQSxFQUFVZ2xILEVBQTJCM3JILEVBQUd5ckgsR0FDcEMvcUcsSUFBZ0JzcUcsSUFDaEJockgsRUFBRTJxSCx5QkFBeUI1QyxTQUFXMEQsR0FFMUN6ckgsRUFBRXlaLFlBQVlrZ0csV0FBV2o1RixHQUN6QjFnQixFQUFFeVosWUFBWTJaLFlBQVl6c0IsRUFBUytaLEdBQ25DQSxFQUFjL1osRUFFdEIsQ0FDQSxPQUFPK1osQ0FDWCxDQUVBLFNBQVNpckcsRUFBMkIzckgsRUFBR3lySCxHQUNuQyxNQUFNdEwsRUFBS25nSCxFQUFFeVosWUFBWTZnRyxnQkFBZ0JtUixFQUFhOWtILFNBQ2hEc2hILEVBQWFqb0gsRUFBRXlaLFlBQVl3NkIsY0FBY3czRSxFQUFhanRHLE1BQU14VCxRQUFTbTFHLEVBQUlzTCxFQUFhanRHLE1BQU00bEQsT0FHbEcsT0FGQXBrRSxFQUFFNHFILGFBQWF4OEcsUUFBUXE5RyxFQUFhOWtILFFBQVNzaEgsR0FDN0N3RCxFQUFhOWtILFFBQVVzaEgsRUFDaEJBLENBQ1gsQ0FFQSxTQUFTMkQsRUFBaUM1ckgsRUFBRzZySCxFQUFnQm5yRyxHQUN6RCxNQUFNbzhGLEVBQUs5OEcsRUFBRXlaLFlBQVk0Z0csV0FBV3dSLEdBQzlCQyxHQUFNLEVBQUl6USxFQUFVNkUsVUFBVXBELEdBQ3BDLEdBQUk5OEcsRUFBRStySCxnQ0FBZ0NELEdBQ2xDOXJILEVBQUVnc0gscUJBQXFCdHJHLE9BRXRCLENBQ0QsTUFBTXkvRixFQUFLbmdILEVBQUV5WixZQUFZNmdHLGdCQUFnQnVSLEdBQ3JDQyxJQUFRelEsRUFBVTJCLE9BQU8rSCxVQUFZNUUsSUFBTzlFLEVBQVVzQixHQUFHbGhGLE9BQ3pEb3dGLEVBQWlCN3JILEVBQUV5WixZQUFZNi9GLG1CQUFtQnVTLElBRXREN3JILEVBQUV5WixZQUFZMlosWUFBWXk0RixFQUFnQm5yRyxFQUM5QyxDQUNKLENBRUEsU0FBU3VyRyxFQUEyQmpzSCxFQUFHZ3JILEVBQWVOLEdBQ2xELE1BQU12SyxFQUFLbmdILEVBQUV5WixZQUFZNmdHLGdCQUFnQm9RLEVBQXVCL2pILFVBQzFELE1BQUU2WCxHQUFVa3NHLEVBQ1p6QyxFQUFham9ILEVBQUV5WixZQUFZdzZCLGNBQWN6MUIsRUFBTXhULFFBQVNtMUcsRUFBSTNoRyxFQUFNNGxELE9BQ3hFcGtFLEVBQUVrc0gsWUFBWWxCLEVBQWUvQyxHQUM3QmpvSCxFQUFFeVosWUFBWTJaLFlBQVk0M0YsRUFBZS9DLEdBQ3pDam9ILEVBQUUycUgseUJBQXlCM0IsMkJBQTJCZixFQUFZenBHLEdBQ2xFeGUsRUFBRTJxSCx5QkFBeUJ6QixZQUFZd0IsR0FDdkMxcUgsRUFBRTRxSCxhQUFhbDhHLE9BQU9nOEcsRUFBdUIvakgsU0FDN0MzRyxFQUFFNHFILGFBQWEvN0csWUFBWW04RyxFQUFlL0MsRUFBWXpwRyxFQUFNaWhHLE1BQ2hFLENBRUEsU0FBUzBNLEVBQW1CbnNILEVBQUd3ZSxHQUMzQixJQUFLLElBQUkxZSxFQUFJLEVBQUdBLEVBQUlncUgsRUFBb0JocUgsSUFBSyxDQUN6QyxNQUFNNHFILEVBQXlCRCxFQUErQnpxSCxFQUFHd2UsR0FDakUsSUFBS2tzRyxFQUNELE1BRUosTUFBTU0sRUFBZ0JELEVBQXNCL3FILEVBQUcwcUgsR0FDL0MsSUFBS00sRUFDRCxNQUVKaHJILEVBQUUycUgseUJBQXlCNUMsU0FBVzJDLEVBQ3RDLE1BQU1ocUcsRUFBYzJxRyxFQUFZcnJILEVBQUdnckgsRUFBZU4sRUFBdUIvakgsU0FDbkVrbEgsRUFBaUI3ckgsRUFBRTRxSCxhQUFhWSxrQkFBa0JkLEVBQXVCL2pILFNBQy9FM0csRUFBRXlaLFlBQVlrZ0csV0FBV2o1RixHQUNyQm1yRyxHQUNBRCxFQUFpQzVySCxFQUFHNnJILEVBQWdCbnJHLEdBQ3hEdXJHLEVBQTJCanNILEVBQUdnckgsRUFBZU4sRUFDakQsQ0FDSixDQUdBLFNBQVMwQixFQUFjcHNILEVBQUd3ZSxHQUN0QnhlLEVBQUVxc0gsbUJBQW1CN3RHLEVBQU94ZSxFQUFFNHFILGFBQWEwQix5QkFDL0MsQ0FPQSxTQUFTQyxFQUFZdnNILEVBQUd3ZSxHQUdwQixHQUZBeGUsRUFBRXdzSCxTQUFVLEVBRVJodUcsRUFBTWlyRCxTQUFVLENBR2hCLE1BQU1qNEQsRUFBU3hSLEVBQUV3bkgsZ0JBQWtCLEVBQUksRUFDdkMsSUFBSyxJQUFJMW5ILEVBQUlFLEVBQUU0cUgsYUFBYUssU0FBVW5ySCxHQUFLMFIsRUFBUTFSLElBQy9DRSxFQUFFeXNILGdCQUFnQnpzSCxFQUFFNHFILGFBQWEvNkYsTUFBTS92QixHQUFJMGUsR0FHL0MsSUFBS3hlLEVBQUV3bkgsaUJBQW1CeG5ILEVBQUU0cUgsYUFBYUssVUFBWSxFQUFHLENBQ3BELE1BQU15QixFQUFjMXNILEVBQUU0cUgsYUFBYS82RixNQUFNLEdBQ25DODhGLEVBQWUzc0gsRUFBRXlaLFlBQVl3aEcsMEJBQTBCeVIsR0FDN0QsR0FBSUMsSUFBaUJBLEVBQWFDLFNBQzlCNXNILEVBQUV5c0gsZ0JBQWdCQyxFQUFhbHVHLEdBQzNCeGUsRUFBRTRxSCxhQUFhSyxVQUFZLEdBQUcsQ0FDOUIsTUFBTTRCLEVBQWM3c0gsRUFBRTRxSCxhQUFhLzZGLE1BQU0sR0FDbkNpOUYsRUFBZTlzSCxFQUFFeVosWUFBWXdoRywwQkFBMEI0UixHQUN6REMsSUFBaUJBLEVBQWFGLFFBQzlCNXNILEVBQUV5c0gsZ0JBQWdCSSxFQUFhcnVHLEVBRXZDLENBRVIsQ0FDSixDQUNKLENBWUEsU0FBU3V1RyxFQUFtQi9zSCxFQUFHd2UsR0FDM0J4ZSxFQUFFZ3RILEtBQUt4dUcsRUFBTzhvRyxFQUFpQnRMLElBQUlpUixnQkFBZ0IsR0FDbkRqdEgsRUFBRXlaLFlBQVlnZ0csZ0JBQWdCejVHLEVBQUUra0MsU0FBVXMyRSxFQUFVM0MsY0FBY29ELFFBQ2xFOTdHLEVBQUVrdEgsY0FBZ0JsRCxFQUFjbUQsWUFDaENudEgsRUFBRW90SCxjQUFjNXVHLEVBQ3BCLENBa0JBLFNBQVM2dUcsRUFBZ0JydEgsRUFBR3dlLEdBQ3hCeGUsRUFBRXN0SCx5QkFDRnR0SCxFQUFFa3RILGNBQWdCbEQsRUFBY3VELFlBQ2hDdnRILEVBQUVvdEgsY0FBYzV1RyxFQUNwQixDQTZCQSxTQUFTZ3ZHLEVBQWdCeHRILEVBQUd3ZSxHQUN4QnhlLEVBQUV5dEgsbUJBQW1CcFMsRUFBVThGLFVBQVVoRCxLQUFNOUMsRUFBVTJCLE9BQU9tQixNQUNoRW4rRyxFQUFFMHRILFlBQWMxdEgsRUFBRTRxSCxhQUFhdnFHLFFBQy9CcmdCLEVBQUVrdEgsY0FBZ0JsRCxFQUFjMkQsUUFDaEMzdEgsRUFBRW90SCxjQUFjNXVHLEVBQ3BCLENBR0EsU0FBU292RyxFQUFlNXRILEVBQUd3ZSxHQUN2QixPQUFRQSxFQUFNaWhHLE9BQ1YsS0FBS3BFLEVBQVUyQixPQUFPdmhGLEtBQ2xCb3lGLEVBQWU3dEgsRUFBR3dlLEdBQ2xCLE1BRUosS0FBSzY4RixFQUFVMkIsT0FBTzZFLEtBQ3RCLEtBQUt4RyxFQUFVMkIsT0FBTzhFLFNBQ3RCLEtBQUt6RyxFQUFVMkIsT0FBTytFLFFBQ3RCLEtBQUsxRyxFQUFVMkIsT0FBT3FHLEtBQ3RCLEtBQUtoSSxFQUFVMkIsT0FBT3lCLEtBQ2xCeitHLEVBQUU4dEgsZUFBZXR2RyxFQUFPNjhGLEVBQVVzQixHQUFHbGhGLE1BQ3JDamQsRUFBTXV2RyxnQkFBaUIsRUFDdkIsTUFFSixLQUFLMVMsRUFBVTJCLE9BQU8yRCxNQUNsQjNnSCxFQUFFZ3VILHFCQUFxQnh2RyxFQUFPaUIsRUFBV3FuRyxjQUFjbUgsUUFDdkQsTUFFSixLQUFLNVMsRUFBVTJCLE9BQU84RyxTQUNkOWpILEVBQUUrQyxRQUFReVcsaUJBQ1Z4WixFQUFFZ3VILHFCQUFxQnh2RyxFQUFPaUIsRUFBV3FuRyxjQUFjb0gsVUFHdkRsdUgsRUFBRW11SCxlQUFlM3ZHLEVBQU82OEYsRUFBVXNCLEdBQUdsaEYsTUFDckN6N0IsRUFBRWt0SCxjQUFnQmxELEVBQWNvRSxtQkFFcEMsTUFFSixLQUFLL1MsRUFBVTJCLE9BQU80RyxTQUN0QixLQUFLdkksRUFBVTJCLE9BQU80SCxNQUNsQjVrSCxFQUFFZ3VILHFCQUFxQnh2RyxFQUFPaUIsRUFBV3FuRyxjQUFjb0gsU0FDdkQsTUFFSixLQUFLN1MsRUFBVTJCLE9BQU93SCxPQUNsQnhrSCxFQUFFZ3VILHFCQUFxQnh2RyxFQUFPaUIsRUFBV3FuRyxjQUFjdUgsYUFDdkQsTUFFSixLQUFLaFQsRUFBVTJCLE9BQU8rSCxTQUNsQi9rSCxFQUFFc3VILGdCQUFnQjl2RyxHQUNsQnhlLEVBQUUycUgseUJBQXlCN0IsZUFDM0I5b0gsRUFBRXV1SCxZQUFhLEVBQ2Z2dUgsRUFBRWt0SCxjQUFnQmxELEVBQWN3RSxZQUNoQ3h1SCxFQUFFeXVILHVCQUF1QnJvSCxRQUFRNGpILEVBQWN3RSxhQUMvQyxNQUVKLEtBQUtuVCxFQUFVMkIsT0FBT21CLEtBQ2xCbitHLEVBQUVndEgsS0FBS3h1RyxFQUFPOG9HLEVBQWlCdEwsSUFBSTBTLGlDQUNuQyxNQUVKLFFBQ0lDLEVBQVkzdUgsRUFBR3dlLEdBRzNCLENBdUJBLFNBQVNvd0csRUFBcUI1dUgsRUFBR3dlLEdBQ3pCeGUsRUFBRTRxSCxhQUFhaUUsVUFBWSxHQUMzQjd1SCxFQUFFNHFILGFBQWFrRSxtQ0FDWDl1SCxFQUFFNHFILGFBQWFtRSxlQUFpQjFULEVBQVUyQixPQUFPK0gsVUFDakQva0gsRUFBRWd0SCxLQUFLeHVHLEVBQU84b0csRUFBaUJ0TCxJQUFJZ1QsdUNBRXZDaHZILEVBQUU0cUgsYUFBYXFFLHNCQUFzQjVULEVBQVUyQixPQUFPK0gsVUFDdEQva0gsRUFBRTJxSCx5QkFBeUJ2QixvQkFDM0JwcEgsRUFBRXl1SCx1QkFBdUI5NkYsUUFDekIzekIsRUFBRWt2SCx1QkFHRmx2SCxFQUFFZ3RILEtBQUt4dUcsRUFBTzhvRyxFQUFpQnRMLElBQUltVCxpQ0FFM0MsQ0FDQSxTQUFTUixFQUFZM3VILEVBQUd3ZSxHQUNwQnhlLEVBQUU0cUgsYUFBYXZpRyxNQUNmcm9CLEVBQUVrdEgsY0FBZ0JsRCxFQUFjb0YsV0FDaENwdkgsRUFBRW90SCxjQUFjNXVHLEVBQ3BCLENBNENBLFNBQVM2d0csRUFBb0JydkgsRUFBR3dlLEdBQzVCLE1BQU04d0csRUFBVTl3RyxFQUFNamMsT0FBU3FuSCxFQUFXaEUsVUFBVTJKLElBQU1qSSxFQUFpQnRMLElBQUl3VCx5QkFBMkJsSSxFQUFpQnRMLElBQUl5VCxrQ0FDL0h6dkgsRUFBRWd0SCxLQUFLeHVHLEVBQU84d0csR0FDZHR2SCxFQUFFNHFILGFBQWF2aUcsTUFDZnJvQixFQUFFa3RILGNBQWdCbEQsRUFBYzJELFFBQ2hDM3RILEVBQUVvdEgsY0FBYzV1RyxFQUNwQixDQThEQSxTQUFTa3hHLEVBQWUxdkgsRUFBR3dlLEdBQ3ZCeGUsRUFBRXl0SCxtQkFBbUJwUyxFQUFVOEYsVUFBVWhFLEtBQU05QixFQUFVMkIsT0FBT0csTUFDaEVuOUcsRUFBRWt0SCxjQUFnQmxELEVBQWMyRixRQUNoQ0MsRUFBVzV2SCxFQUFHd2UsRUFDbEIsQ0FHQSxTQUFTb3hHLEVBQVc1dkgsRUFBR3dlLEdBQ25CLE9BQVFBLEVBQU1qYyxNQUNWLEtBQUtxbkgsRUFBV2hFLFVBQVVpSyxVQUN0QkMsRUFBZ0I5dkgsRUFBR3dlLEdBQ25CLE1BRUosS0FBS29yRyxFQUFXaEUsVUFBVW1LLHFCQUN0QkMsRUFBMEJod0gsRUFBR3dlLEdBQzdCLE1BRUosS0FBS29yRyxFQUFXaEUsVUFBVXFLLFFBQ3RCN0QsRUFBY3BzSCxFQUFHd2UsR0FDakIsTUFFSixLQUFLb3JHLEVBQVdoRSxVQUFVc0ssVUFDdEJyQyxFQUFlN3RILEVBQUd3ZSxHQUNsQixNQUVKLEtBQUtvckcsRUFBV2hFLFVBQVV1SyxRQUN0QkMsRUFBYXB3SCxFQUFHd2UsR0FDaEIsTUFFSixLQUFLb3JHLEVBQVdoRSxVQUFVMkosSUFDdEJjLEVBQVVyd0gsRUFBR3dlLEdBTXpCLENBQ0EsU0FBU3d4RyxFQUEwQmh3SCxFQUFHd2UsR0FDbEN4ZSxFQUFFc3dILHVDQUNGdHdILEVBQUV1d0gsa0JBQWtCL3hHLEVBQ3hCLENBQ0EsU0FBU3N4RyxFQUFnQjl2SCxFQUFHd2UsR0FDeEJ4ZSxFQUFFc3dILHVDQUNGdHdILEVBQUV1d0gsa0JBQWtCL3hHLEdBQ3BCeGUsRUFBRXV1SCxZQUFhLENBQ25CLENBeUlBLFNBQVNpQyxFQUFtQnh3SCxFQUFHd2UsR0FDM0J4ZSxFQUFFc3dILHVDQUNGdHdILEVBQUU4dEgsZUFBZXR2RyxFQUFPNjhGLEVBQVVzQixHQUFHbGhGLE1BQ3JDejdCLEVBQUV1dUgsWUFBYSxFQUNmL3ZHLEVBQU11dkcsZ0JBQWlCLENBQzNCLENBQ0EsU0FBUzBDLEVBQWNqeUcsR0FDbkIsTUFBTWt5RyxHQUFZLEVBQUk5RyxFQUFXL0QsY0FBY3JuRyxFQUFPNjhGLEVBQVVzRSxNQUFNZ1IsTUFDdEUsT0FBb0IsTUFBYkQsR0FBcUJBLEVBQVU3MUcsZ0JBQWtCZ3ZHLENBQzVELENBa0RBLFNBQVMrRyxFQUFzQjV3SCxFQUFHd2UsR0FDOUJ4ZSxFQUFFZ3VILHFCQUFxQnh2RyxFQUFPaUIsRUFBV3FuRyxjQUFjb0gsUUFDM0QsQ0F5REEsU0FBUzJDLEVBQXNCN3dILEVBQUd3ZSxHQUM5QnhlLEVBQUVzd0gsdUNBQ0Z0d0gsRUFBRW11SCxlQUFlM3ZHLEVBQU82OEYsRUFBVXNCLEdBQUdsaEYsS0FDekMsQ0FDQSxTQUFTb3lGLEVBQWU3dEgsRUFBR3dlLEdBQ3ZCLE9BQVFBLEVBQU1paEcsT0FDVixLQUFLcEUsRUFBVTJCLE9BQU9oc0IsRUFDdEIsS0FBS3FxQixFQUFVMkIsT0FBTzFiLEVBQ3RCLEtBQUsrWixFQUFVMkIsT0FBT2xsQyxFQUN0QixLQUFLdWpDLEVBQVUyQixPQUFPMWEsRUFDdEIsS0FBSytZLEVBQVUyQixPQUFPVyxHQUN0QixLQUFLdEMsRUFBVTJCLE9BQU9xQyxHQUN0QixLQUFLaEUsRUFBVTJCLE9BQU9DLElBQ3RCLEtBQUs1QixFQUFVMkIsT0FBT00sS0FDdEIsS0FBS2pDLEVBQVUyQixPQUFPMEMsS0FDdEIsS0FBS3JFLEVBQVUyQixPQUFPOEIsTUFDdEIsS0FBS3pELEVBQVUyQixPQUFPaUMsT0FDdEIsS0FBSzVELEVBQVUyQixPQUFPZ0MsUUFuSzlCLFNBQXlCaC9HLEVBQUd3ZSxHQUN4QnhlLEVBQUVzd0gsdUNBQ0Z0d0gsRUFBRW11SCxlQUFlM3ZHLEVBQU82OEYsRUFBVXNCLEdBQUdsaEYsTUFDckN6N0IsRUFBRTJxSCx5QkFBeUI1QixZQUFZL29ILEVBQUU0cUgsYUFBYXZxRyxRQUFTN0IsRUFDbkUsQ0FnS1lzeUcsQ0FBZ0I5d0gsRUFBR3dlLEdBQ25CLE1BRUosS0FBSzY4RixFQUFVMkIsT0FBT3ZoSCxHQWxMOUIsU0FBeUJ1RSxFQUFHd2UsR0FDeEIsTUFBTXV5RyxFQUFxQi93SCxFQUFFMnFILHlCQUF5QnJCLGtDQUFrQ2pPLEVBQVU4RixVQUFVMWxILEdBQ3hHczFILElBQ0E1RSxFQUFtQm5zSCxFQUFHd2UsR0FDdEJ4ZSxFQUFFNHFILGFBQWFsOEcsT0FBT3FpSCxFQUFtQnBxSCxTQUN6QzNHLEVBQUUycUgseUJBQXlCekIsWUFBWTZILElBRTNDL3dILEVBQUVzd0gsdUNBQ0Z0d0gsRUFBRW11SCxlQUFlM3ZHLEVBQU82OEYsRUFBVXNCLEdBQUdsaEYsTUFDckN6N0IsRUFBRTJxSCx5QkFBeUI1QixZQUFZL29ILEVBQUU0cUgsYUFBYXZxRyxRQUFTN0IsRUFDbkUsQ0F5S1l3eUcsQ0FBZ0JoeEgsRUFBR3dlLEdBQ25CLE1BRUosS0FBSzY4RixFQUFVMkIsT0FBT2EsR0FDdEIsS0FBS3hDLEVBQVUyQixPQUFPYyxHQUN0QixLQUFLekMsRUFBVTJCLE9BQU9lLEdBQ3RCLEtBQUsxQyxFQUFVMkIsT0FBT2dCLEdBQ3RCLEtBQUszQyxFQUFVMkIsT0FBT2lCLEdBQ3RCLEtBQUs1QyxFQUFVMkIsT0FBT2tCLElBalE5QixTQUFzQ2wrRyxFQUFHd2UsR0FDakN4ZSxFQUFFNHFILGFBQWFxRyxpQkFBaUI1VixFQUFVMkIsT0FBT3BpRSxJQUNqRDU2QyxFQUFFa3hILGtCQUVGLEVBQUk3VixFQUFVZ0csa0JBQWtCcmhILEVBQUU0cUgsYUFBYW1FLGVBQy9DL3VILEVBQUU0cUgsYUFBYXZpRyxNQUVuQnJvQixFQUFFbXVILGVBQWUzdkcsRUFBTzY4RixFQUFVc0IsR0FBR2xoRixLQUN6QyxDQTBQWTAxRixDQUE2Qm54SCxFQUFHd2UsR0FDaEMsTUFFSixLQUFLNjhGLEVBQVUyQixPQUFPcGlFLEVBQ3RCLEtBQUt5Z0UsRUFBVTJCLE9BQU9TLEdBQ3RCLEtBQUtwQyxFQUFVMkIsT0FBTzJCLEdBQ3RCLEtBQUt0RCxFQUFVMkIsT0FBT3NDLEdBQ3RCLEtBQUtqRSxFQUFVMkIsT0FBT1EsSUFDdEIsS0FBS25DLEVBQVUyQixPQUFPc0YsSUFDdEIsS0FBS2pILEVBQVUyQixPQUFPMkcsSUFDdEIsS0FBS3RJLEVBQVUyQixPQUFPc0csS0FDdEIsS0FBS2pJLEVBQVUyQixPQUFPd0IsS0FDdEIsS0FBS25ELEVBQVUyQixPQUFPNEUsTUFDdEIsS0FBS3ZHLEVBQVUyQixPQUFPSyxPQUN0QixLQUFLaEMsRUFBVTJCLE9BQU95RixPQUN0QixLQUFLcEgsRUFBVTJCLE9BQU8wRixPQUN0QixLQUFLckgsRUFBVTJCLE9BQU84RixPQUN0QixLQUFLekgsRUFBVTJCLE9BQU8rRixPQUN0QixLQUFLMUgsRUFBVTJCLE9BQU9xRixPQUN0QixLQUFLaEgsRUFBVTJCLE9BQU9vRixRQUN0QixLQUFLL0csRUFBVTJCLE9BQU93RSxRQUN0QixLQUFLbkcsRUFBVTJCLE9BQU8yRSxRQUN0QixLQUFLdEcsRUFBVTJCLE9BQU95SCxRQUN0QixLQUFLcEosRUFBVTJCLE9BQU82SCxRQUN0QixLQUFLeEosRUFBVTJCLE9BQU91RixTQUN0QixLQUFLbEgsRUFBVTJCLE9BQU9FLFdBQ3RCLEtBQUs3QixFQUFVMkIsT0FBT3dGLFlBbFM5QixTQUErQnhpSCxFQUFHd2UsR0FDMUJ4ZSxFQUFFNHFILGFBQWFxRyxpQkFBaUI1VixFQUFVMkIsT0FBT3BpRSxJQUNqRDU2QyxFQUFFa3hILGlCQUVObHhILEVBQUVtdUgsZUFBZTN2RyxFQUFPNjhGLEVBQVVzQixHQUFHbGhGLEtBQ3pDLENBOFJZMjFGLENBQXNCcHhILEVBQUd3ZSxHQUN6QixNQUVKLEtBQUs2OEYsRUFBVTJCLE9BQU9zQixHQUN0QixLQUFLakQsRUFBVTJCLE9BQU9PLEdBQ3RCLEtBQUtsQyxFQUFVMkIsT0FBT1UsSUFuUTlCLFNBQWdDMTlHLEVBQUd3ZSxHQUMvQnhlLEVBQUV1dUgsWUFBYSxFQUNmLE1BQU16UixFQUFLdCtGLEVBQU1paEcsTUFDakIsSUFBSyxJQUFJMy9HLEVBQUlFLEVBQUU0cUgsYUFBYUssU0FBVW5ySCxHQUFLLEVBQUdBLElBQUssQ0FDL0MsTUFBTXV4SCxFQUFZcnhILEVBQUU0cUgsYUFBYU8sT0FBT3JySCxHQUN4QyxHQUFLZzlHLElBQU96QixFQUFVMkIsT0FBT3NCLElBQU0rUyxJQUFjaFcsRUFBVTJCLE9BQU9zQixLQUM1RHhCLElBQU96QixFQUFVMkIsT0FBT08sSUFBTVQsSUFBT3pCLEVBQVUyQixPQUFPVSxNQUFRMlQsSUFBY2hXLEVBQVUyQixPQUFPTyxJQUFNOFQsSUFBY2hXLEVBQVUyQixPQUFPVSxJQUFNLENBQzFJMTlHLEVBQUU0cUgsYUFBYTBHLG9DQUFvQ0QsR0FDbkRyeEgsRUFBRTRxSCxhQUFhcUUsc0JBQXNCb0MsR0FDckMsS0FDSixDQUNBLEdBQUlBLElBQWNoVyxFQUFVMkIsT0FBT3dFLFNBQy9CNlAsSUFBY2hXLEVBQVUyQixPQUFPUSxLQUMvQjZULElBQWNoVyxFQUFVMkIsT0FBT3BpRSxHQUMvQjU2QyxFQUFFa3JILGtCQUFrQmxySCxFQUFFNHFILGFBQWEvNkYsTUFBTS92QixHQUFJdXhILEdBQzdDLEtBRVIsQ0FDSXJ4SCxFQUFFNHFILGFBQWFxRyxpQkFBaUI1VixFQUFVMkIsT0FBT3BpRSxJQUNqRDU2QyxFQUFFa3hILGlCQUVObHhILEVBQUVtdUgsZUFBZTN2RyxFQUFPNjhGLEVBQVVzQixHQUFHbGhGLEtBQ3pDLENBOE9ZODFGLENBQXVCdnhILEVBQUd3ZSxHQUMxQixNQUVKLEtBQUs2OEYsRUFBVTJCLE9BQU9JLEdBQ3RCLEtBQUsvQixFQUFVMkIsT0FBT3FCLElBQ3RCLEtBQUtoRCxFQUFVMkIsT0FBT3VJLElBQ3RCLEtBQUtsSyxFQUFVMkIsT0FBTzBFLEtBQ3RCLEtBQUtyRyxFQUFVMkIsT0FBT1ksTUFDdEIsS0FBS3ZDLEVBQVUyQixPQUFPbUcsT0FDbEJxTixFQUFtQnh3SCxFQUFHd2UsR0FDdEIsTUFFSixLQUFLNjhGLEVBQVUyQixPQUFPb0IsSUE1SzlCLFNBQTBCcCtHLEVBQUd3ZSxHQUNyQnhlLEVBQUU0cUgsYUFBYXFHLGlCQUFpQjVWLEVBQVUyQixPQUFPcGlFLElBQ2pENTZDLEVBQUVreEgsaUJBRU5seEgsRUFBRTh0SCxlQUFldHZHLEVBQU82OEYsRUFBVXNCLEdBQUdsaEYsTUFDckN6N0IsRUFBRXV1SCxZQUFhLEVBQ2YvdkcsRUFBTXV2RyxnQkFBaUIsQ0FDM0IsQ0FzS1l5RCxDQUFpQnh4SCxFQUFHd2UsR0FDcEIsTUFFSixLQUFLNjhGLEVBQVUyQixPQUFPb0gsR0FDdEIsS0FBSy9JLEVBQVUyQixPQUFPdUgsS0FySDlCLFNBQTBCdmtILEVBQUd3ZSxHQUNyQnhlLEVBQUU0cUgsYUFBYUMsV0FBV3hQLEVBQVUyQixPQUFPNkIsT0FDM0M3K0csRUFBRTRxSCxhQUFhNkcseUJBRW5CenhILEVBQUVtdUgsZUFBZTN2RyxFQUFPNjhGLEVBQVVzQixHQUFHbGhGLEtBQ3pDLENBaUhZaTJGLENBQWlCMXhILEVBQUd3ZSxHQUNwQixNQUVKLEtBQUs2OEYsRUFBVTJCLE9BQU9zSCxHQUN0QixLQUFLakosRUFBVTJCLE9BQU9xSCxJQXBIOUIsU0FBMEJya0gsRUFBR3dlLEdBQ3JCeGUsRUFBRTRxSCxhQUFhQyxXQUFXeFAsRUFBVTJCLE9BQU82QixPQUMzQzcrRyxFQUFFNHFILGFBQWEwRyxvQ0FBb0NqVyxFQUFVMkIsT0FBT3VILEtBRXhFdmtILEVBQUVtdUgsZUFBZTN2RyxFQUFPNjhGLEVBQVVzQixHQUFHbGhGLEtBQ3pDLENBZ0hZazJGLENBQWlCM3hILEVBQUd3ZSxHQUNwQixNQUVKLEtBQUs2OEYsRUFBVTJCLE9BQU80QixJQUN0QixLQUFLdkQsRUFBVTJCLE9BQU91QixTQXJUOUIsU0FBMkJ2K0csRUFBR3dlLEdBQ3RCeGUsRUFBRTRxSCxhQUFhcUcsaUJBQWlCNVYsRUFBVTJCLE9BQU9waUUsSUFDakQ1NkMsRUFBRWt4SCxpQkFFTmx4SCxFQUFFbXVILGVBQWUzdkcsRUFBTzY4RixFQUFVc0IsR0FBR2xoRixNQUdyQ3o3QixFQUFFNHhILGlCQUFrQixFQUNwQjV4SCxFQUFFdXVILFlBQWEsQ0FDbkIsQ0E2U1lzRCxDQUFrQjd4SCxFQUFHd2UsR0FDckIsTUFFSixLQUFLNjhGLEVBQVUyQixPQUFPd0ksS0F4SzlCLFNBQTJCeGxILEVBQUd3ZSxHQUN0QnhlLEVBQUU0cUgsYUFBYXFHLGlCQUFpQjVWLEVBQVUyQixPQUFPcGlFLElBQ2pENTZDLEVBQUVreEgsaUJBRU5seEgsRUFBRXN3SCx1Q0FDRnR3SCxFQUFFdXVILFlBQWEsRUFDZnZ1SCxFQUFFZ3VILHFCQUFxQnh2RyxFQUFPaUIsRUFBV3FuRyxjQUFjb0gsUUFDM0QsQ0FrS1k0RCxDQUFrQjl4SCxFQUFHd2UsR0FDckIsTUFFSixLQUFLNjhGLEVBQVUyQixPQUFPd0QsS0EvRzlCLFNBQTJCeGdILEVBQUd3ZSxHQUMxQnhlLEVBQUVzd0gsdUNBQ0Z0SixFQUFlNUssb0JBQW9CNTlGLEdBQ25Dd29HLEVBQWU3SyxvQkFBb0IzOUYsR0FDL0JBLEVBQU11ekcsWUFDTi94SCxFQUFFOHRILGVBQWV0dkcsRUFBTzY4RixFQUFVc0IsR0FBRzZELEtBR3JDeGdILEVBQUVtdUgsZUFBZTN2RyxFQUFPNjhGLEVBQVVzQixHQUFHNkQsS0FFekNoaUcsRUFBTXV2RyxnQkFBaUIsQ0FDM0IsQ0FxR1lpRSxDQUFrQmh5SCxFQUFHd2UsR0FDckIsTUFFSixLQUFLNjhGLEVBQVUyQixPQUFPdmhGLE1Bclc5QixTQUE0Qno3QixFQUFHd2UsR0FDTSxJQUE3QnhlLEVBQUU0cUgsYUFBYWlFLFdBQ2Y3dUgsRUFBRXlaLFlBQVlzZ0csZ0JBQWdCLzVHLEVBQUU0cUgsYUFBYS82RixNQUFNLEdBQUlyUixFQUFNNGxELE1BRXJFLENBa1dZNnRELENBQW1CanlILEVBQUd3ZSxHQUN0QixNQUVKLEtBQUs2OEYsRUFBVTJCLE9BQU82RSxLQUN0QixLQUFLeEcsRUFBVTJCLE9BQU9xRyxLQUN0QixLQUFLaEksRUFBVTJCLE9BQU95QixLQUN0QixLQUFLcEQsRUFBVTJCLE9BQU80SCxNQUN0QixLQUFLdkosRUFBVTJCLE9BQU8yRCxNQUN0QixLQUFLdEYsRUFBVTJCLE9BQU93SCxPQUN0QixLQUFLbkosRUFBVTJCLE9BQU8rRSxRQUN0QixLQUFLMUcsRUFBVTJCLE9BQU84RSxTQUN0QixLQUFLekcsRUFBVTJCLE9BQU8rSCxTQUNsQjZJLEVBQWU1dEgsRUFBR3dlLEdBQ2xCLE1BRUosS0FBSzY4RixFQUFVMkIsT0FBT0csTUFoWDlCLFNBQTRCbjlHLEVBQUd3ZSxHQUMzQixNQUFNcXVHLEVBQWM3c0gsRUFBRTRxSCxhQUFhc0gsbUNBQy9CckYsR0FBNEMsSUFBN0I3c0gsRUFBRTRxSCxhQUFhaUUsWUFDOUI3dUgsRUFBRXV1SCxZQUFhLEVBQ2Z2dUgsRUFBRXlaLFlBQVlzZ0csZ0JBQWdCOFMsRUFBYXJ1RyxFQUFNNGxELE9BRXpELENBMldZK3RELENBQW1CbnlILEVBQUd3ZSxHQUN0QixNQUVKLEtBQUs2OEYsRUFBVTJCLE9BQU8yRixNQTNVOUIsU0FBNEIzaUgsRUFBR3dlLEdBQzNCLE1BQU00ekcsRUFBYXB5SCxFQUFFNHFILGFBQWFpRSxVQUFZLEVBQ3pDN3VILEVBQUVxeUgsY0FBZUQsSUFDZHB5SCxFQUFFNHFILGFBQWFxRyxpQkFBaUI1VixFQUFVMkIsT0FBT3BpRSxJQUNqRDU2QyxFQUFFa3hILGlCQUVObHhILEVBQUVtdUgsZUFBZTN2RyxFQUFPNjhGLEVBQVVzQixHQUFHbGhGLE1BQ2hDMjJGLElBQ0RweUgsRUFBRXF5SCxZQUFjcnlILEVBQUU0cUgsYUFBYXZxRyxTQUczQyxDQWlVWWl5RyxDQUFtQnR5SCxFQUFHd2UsR0FDdEIsTUFFSixLQUFLNjhGLEVBQVUyQixPQUFPMEIsTUE1UTlCLFNBQTRCMStHLEVBQUd3ZSxHQUMzQnhlLEVBQUVzd0gsdUNBQ0V0d0gsRUFBRTRxSCxhQUFhQyxXQUFXeFAsRUFBVTJCLE9BQU8wQixRQUMzQ3lOLEVBQW1CbnNILEVBQUd3ZSxHQUN0QnhlLEVBQUVzd0gsd0NBRU50d0gsRUFBRW11SCxlQUFlM3ZHLEVBQU82OEYsRUFBVXNCLEdBQUdsaEYsTUFDckN6N0IsRUFBRTJxSCx5QkFBeUI1QixZQUFZL29ILEVBQUU0cUgsYUFBYXZxRyxRQUFTN0IsRUFDbkUsQ0FxUVkrekcsQ0FBbUJ2eUgsRUFBR3dlLEdBQ3RCLE1BRUosS0FBSzY4RixFQUFVMkIsT0FBT3lHLE1BM0o5QixTQUE0QnpqSCxFQUFHd2UsR0FDM0J4ZSxFQUFFc3dILHVDQUNGdEosRUFBZTNLLHVCQUF1Qjc5RixHQUN0Q3dvRyxFQUFlN0ssb0JBQW9CMzlGLEdBQy9CQSxFQUFNdXpHLFlBQ04veEgsRUFBRTh0SCxlQUFldHZHLEVBQU82OEYsRUFBVXNCLEdBQUcwRCxRQUdyQ3JnSCxFQUFFbXVILGVBQWUzdkcsRUFBTzY4RixFQUFVc0IsR0FBRzBELFFBRXpDN2hHLEVBQU11dkcsZ0JBQWlCLENBQzNCLENBaUpZeUUsQ0FBbUJ4eUgsRUFBR3dlLEdBQ3RCLE1BRUosS0FBSzY4RixFQUFVMkIsT0FBT29DLE9BclE5QixTQUE2QnAvRyxFQUFHd2UsR0FDeEJ4ZSxFQUFFeVosWUFBWWlnRyxnQkFBZ0IxNUcsRUFBRStrQyxZQUFjczJFLEVBQVUzQyxjQUFjb0QsUUFBVTk3RyxFQUFFNHFILGFBQWFxRyxpQkFBaUI1VixFQUFVMkIsT0FBT3BpRSxJQUNqSTU2QyxFQUFFa3hILGlCQUVObHhILEVBQUVtdUgsZUFBZTN2RyxFQUFPNjhGLEVBQVVzQixHQUFHbGhGLE1BQ3JDejdCLEVBQUV1dUgsWUFBYSxFQUNmdnVILEVBQUVrdEgsY0FBZ0JsRCxFQUFjeUksUUFDcEMsQ0ErUFlDLENBQW9CMXlILEVBQUd3ZSxHQUN2QixNQUVKLEtBQUs2OEYsRUFBVTJCLE9BQU9pRyxPQXZQOUIsU0FBNkJqakgsRUFBR3dlLEdBQzVCeGUsRUFBRXN3SCx1Q0FDRnR3SCxFQUFFOHRILGVBQWV0dkcsRUFBTzY4RixFQUFVc0IsR0FBR2xoRixNQUNoQ2cxRixFQUFjanlHLEtBQ2Z4ZSxFQUFFdXVILFlBQWEsR0FFbkIvdkcsRUFBTXV2RyxnQkFBaUIsQ0FDM0IsQ0FpUFk0RSxDQUFvQjN5SCxFQUFHd2UsR0FDdkIsTUFFSixLQUFLNjhGLEVBQVUyQixPQUFPa0gsTUFDdEIsS0FBSzdJLEVBQVUyQixPQUFPc0ksTUFDdEIsS0FBS2pLLEVBQVUyQixPQUFPMkgsUUFyUDlCLFNBQTZCM2tILEVBQUd3ZSxHQUM1QnhlLEVBQUU4dEgsZUFBZXR2RyxFQUFPNjhGLEVBQVVzQixHQUFHbGhGLE1BQ3JDamQsRUFBTXV2RyxnQkFBaUIsQ0FDM0IsQ0FtUFk2RSxDQUFvQjV5SCxFQUFHd2UsR0FDdkIsTUFFSixLQUFLNjhGLEVBQVUyQixPQUFPZ0csT0E3TzlCLFNBQTZCaGpILEVBQUd3ZSxHQUM1QkEsRUFBTXhULFFBQVVxd0csRUFBVThGLFVBQVU5QyxJQUNwQzcvRixFQUFNaWhHLE1BQVFwRSxFQUFVMkIsT0FBT3FCLElBQy9CbVMsRUFBbUJ4d0gsRUFBR3dlLEVBQzFCLENBME9ZcTBHLENBQW9CN3lILEVBQUd3ZSxHQUN2QixNQUVKLEtBQUs2OEYsRUFBVTJCLE9BQU9nRixRQS9UOUIsU0FBOEJoaUgsRUFBR3dlLEdBQ3pCeGUsRUFBRTRxSCxhQUFhQyxXQUFXeFAsRUFBVTJCLE9BQU9nRixVQUMzQ2hpSCxFQUFFNHFILGFBQWE2Ryx5QkFDZnp4SCxFQUFFNHFILGFBQWFxRSxzQkFBc0I1VCxFQUFVMkIsT0FBT2dGLFNBRTFEaGlILEVBQUVzd0gsdUNBQ0Z0d0gsRUFBRW11SCxlQUFlM3ZHLEVBQU82OEYsRUFBVXNCLEdBQUdsaEYsTUFDckN6N0IsRUFBRXV1SCxZQUFhLENBQ25CLENBd1RZdUUsQ0FBcUI5eUgsRUFBR3dlLEdBQ3hCLE1BRUosS0FBSzY4RixFQUFVMkIsT0FBT3lFLE9BQ3RCLEtBQUtwRyxFQUFVMkIsT0FBTytHLE9BQ3RCLEtBQUsxSSxFQUFVMkIsT0FBT3dHLFNBblM5QixTQUE4QnhqSCxFQUFHd2UsR0FDN0J4ZSxFQUFFc3dILHVDQUNGdHdILEVBQUVtdUgsZUFBZTN2RyxFQUFPNjhGLEVBQVVzQixHQUFHbGhGLE1BQ3JDejdCLEVBQUUycUgseUJBQXlCN0IsZUFDM0I5b0gsRUFBRXV1SCxZQUFhLENBQ25CLENBK1JZd0UsQ0FBcUIveUgsRUFBR3dlLEdBQ3hCLE1BRUosS0FBSzY4RixFQUFVMkIsT0FBT2tHLFFBcE85QixTQUE4QmxqSCxFQUFHd2UsR0FDN0J4ZSxFQUFFdXVILFlBQWEsRUFDZnZ1SCxFQUFFZ3VILHFCQUFxQnh2RyxFQUFPaUIsRUFBV3FuRyxjQUFjb0gsUUFDM0QsQ0FrT1k4RSxDQUFxQmh6SCxFQUFHd2UsR0FDeEIsTUFFSixLQUFLNjhGLEVBQVUyQixPQUFPMEgsUUEvTjlCLFNBQThCMWtILEVBQUd3ZSxHQUM3QnhlLEVBQUVzd0gsdUNBQ0Z0d0gsRUFBRW11SCxlQUFlM3ZHLEVBQU82OEYsRUFBVXNCLEdBQUdsaEYsTUFDckN6N0IsRUFBRXV1SCxZQUFhLEVBQ2Z2dUgsRUFBRWt0SCxjQUNFbHRILEVBQUVrdEgsZ0JBQWtCbEQsRUFBY3lJLFVBQzlCenlILEVBQUVrdEgsZ0JBQWtCbEQsRUFBY2lKLFlBQ2xDanpILEVBQUVrdEgsZ0JBQWtCbEQsRUFBY2tKLGVBQ2xDbHpILEVBQUVrdEgsZ0JBQWtCbEQsRUFBY21KLFFBQ2xDbnpILEVBQUVrdEgsZ0JBQWtCbEQsRUFBY29KLFFBQ2hDcEosRUFBY3FKLG1CQUNkckosRUFBY3NKLFNBQzVCLENBb05ZQyxDQUFxQnZ6SCxFQUFHd2UsR0FDeEIsTUFFSixLQUFLNjhGLEVBQVUyQixPQUFPaUgsT0FDdEIsS0FBSzVJLEVBQVUyQixPQUFPZ0gsVUF2TjlCLFNBQWdDaGtILEVBQUd3ZSxHQUMzQnhlLEVBQUU0cUgsYUFBYW1FLGVBQWlCMVQsRUFBVTJCLE9BQU9pSCxRQUNqRGprSCxFQUFFNHFILGFBQWF2aUcsTUFFbkJyb0IsRUFBRXN3SCx1Q0FDRnR3SCxFQUFFbXVILGVBQWUzdkcsRUFBTzY4RixFQUFVc0IsR0FBR2xoRixLQUN6QyxDQWtOWSszRixDQUF1Qnh6SCxFQUFHd2UsR0FDMUIsTUFFSixLQUFLNjhGLEVBQVUyQixPQUFPNkcsUUFDbEIrTSxFQUFzQjV3SCxFQUFHd2UsR0FDekIsTUFFSixLQUFLNjhGLEVBQVUyQixPQUFPNkYsVUF0YTlCLFNBQWdDN2lILEVBQUd3ZSxHQUMvQixNQUFNcXVHLEVBQWM3c0gsRUFBRTRxSCxhQUFhc0gsbUNBQy9CbHlILEVBQUV1dUgsWUFBYzFCLElBQ2hCN3NILEVBQUV5WixZQUFZa2dHLFdBQVdrVCxHQUN6QjdzSCxFQUFFNHFILGFBQWE2SSx3QkFDZnp6SCxFQUFFbXVILGVBQWUzdkcsRUFBTzY4RixFQUFVc0IsR0FBR2xoRixNQUNyQ3o3QixFQUFFa3RILGNBQWdCbEQsRUFBYzBKLFlBRXhDLENBK1pZQyxDQUF1QjN6SCxFQUFHd2UsR0FDMUIsTUFFSixLQUFLNjhGLEVBQVUyQixPQUFPZ0ksVUEzUTlCLFNBQWdDaGxILEVBQUd3ZSxHQUMvQnhlLEVBQUVtdUgsZUFBZTN2RyxFQUFPNjhGLEVBQVVzQixHQUFHbGhGLE1BR3JDejdCLEVBQUU0eEgsaUJBQWtCLEVBQ3BCNXhILEVBQUU2akQsVUFBVTEyQyxNQUFRc1MsRUFBV3FuRyxjQUFjbUgsT0FDN0NqdUgsRUFBRTR6SCxzQkFBd0I1ekgsRUFBRWt0SCxjQUM1Qmx0SCxFQUFFdXVILFlBQWEsRUFDZnZ1SCxFQUFFa3RILGNBQWdCbEQsRUFBYzZKLElBQ3BDLENBbVFZQyxDQUF1Qjl6SCxFQUFHd2UsR0FDMUIsTUFFSixLQUFLNjhGLEVBQVUyQixPQUFPOEcsU0FDZDlqSCxFQUFFK0MsUUFBUXlXLGlCQUNWbzNHLEVBQXNCNXdILEVBQUd3ZSxHQUd6QnF5RyxFQUFzQjd3SCxFQUFHd2UsR0FFN0IsTUFFSixLQUFLNjhGLEVBQVUyQixPQUFPbUgsV0FsWDlCLFNBQWlDbmtILEVBQUd3ZSxHQUM1QnhlLEVBQUU0cUgsYUFBYXFHLGlCQUFpQjVWLEVBQVUyQixPQUFPcGlFLElBQ2pENTZDLEVBQUVreEgsaUJBRU5seEgsRUFBRW11SCxlQUFlM3ZHLEVBQU82OEYsRUFBVXNCLEdBQUdsaEYsTUFDckN6N0IsRUFBRTZqRCxVQUFVMTJDLE1BQVFzUyxFQUFXcW5HLGNBQWMzQyxTQUNqRCxDQTZXWTRQLENBQXdCL3pILEVBQUd3ZSxHQUMzQixNQUVKLEtBQUs2OEYsRUFBVTJCLE9BQU9rRixJQUN0QixLQUFLN0csRUFBVTJCLE9BQU9tSSxHQUN0QixLQUFLOUosRUFBVTJCLE9BQU9rSSxHQUN0QixLQUFLN0osRUFBVTJCLE9BQU9xSSxHQUN0QixLQUFLaEssRUFBVTJCLE9BQU9tQixLQUN0QixLQUFLOUMsRUFBVTJCLE9BQU80RixNQUN0QixLQUFLdkgsRUFBVTJCLE9BQU84SCxNQUN0QixLQUFLekosRUFBVTJCLE9BQU9pSSxNQUN0QixLQUFLNUosRUFBVTJCLE9BQU9vSSxNQUN0QixLQUFLL0osRUFBVTJCLE9BQU9pRixRQUN0QixLQUFLNUcsRUFBVTJCLE9BQU9tRixTQUVsQixNQUVKLFFBQ0kwTyxFQUFzQjd3SCxFQUFHd2UsR0FHckMsQ0FrRkEsU0FBU3NzRyxFQUFvQjlxSCxFQUFHd2UsR0FDNUIsTUFBTXMrRixFQUFLdCtGLEVBQU14VCxRQUNYOGdILEVBQU10dEcsRUFBTWloRyxNQUNsQixJQUFLLElBQUkzL0csRUFBSUUsRUFBRTRxSCxhQUFhSyxTQUFVbnJILEVBQUksRUFBR0EsSUFBSyxDQUM5QyxNQUFNNkcsRUFBVTNHLEVBQUU0cUgsYUFBYS82RixNQUFNL3ZCLEdBQy9CdXhILEVBQVlyeEgsRUFBRTRxSCxhQUFhTyxPQUFPcnJILEdBRXhDLEdBQUlnc0gsSUFBUXVGLElBQWN2RixJQUFRelEsRUFBVTJCLE9BQU95SSxTQUFXemxILEVBQUV5WixZQUFZNGdHLFdBQVcxekcsS0FBYW0yRyxHQUFLLENBQ3JHOThHLEVBQUU0cUgsYUFBYTBHLG9DQUFvQ3hGLEdBQy9DOXJILEVBQUU0cUgsYUFBYUssVUFBWW5ySCxHQUMzQkUsRUFBRTRxSCxhQUFhUSxnQkFBZ0J0ckgsR0FDbkMsS0FDSixDQUNBLEdBQUlFLEVBQUVrckgsa0JBQWtCdmtILEVBQVMwcUgsR0FDN0IsS0FFUixDQUNKLENBQ0EsU0FBU2pCLEVBQWFwd0gsRUFBR3dlLEdBQ3JCLE9BQVFBLEVBQU1paEcsT0FDVixLQUFLcEUsRUFBVTJCLE9BQU92aEgsRUFDdEIsS0FBSzQvRyxFQUFVMkIsT0FBT2xsQyxFQUN0QixLQUFLdWpDLEVBQVUyQixPQUFPaHNCLEVBQ3RCLEtBQUtxcUIsRUFBVTJCLE9BQU8xYixFQUN0QixLQUFLK1osRUFBVTJCLE9BQU8xYSxFQUN0QixLQUFLK1ksRUFBVTJCLE9BQU9XLEdBQ3RCLEtBQUt0QyxFQUFVMkIsT0FBT3FDLEdBQ3RCLEtBQUtoRSxFQUFVMkIsT0FBT0MsSUFDdEIsS0FBSzVCLEVBQVUyQixPQUFPTSxLQUN0QixLQUFLakMsRUFBVTJCLE9BQU8wQyxLQUN0QixLQUFLckUsRUFBVTJCLE9BQU8wQixLQUN0QixLQUFLckQsRUFBVTJCLE9BQU84QixNQUN0QixLQUFLekQsRUFBVTJCLE9BQU9pQyxPQUN0QixLQUFLNUQsRUFBVTJCLE9BQU9nQyxPQUNsQm1OLEVBQW1CbnNILEVBQUd3ZSxHQUN0QixNQUVKLEtBQUs2OEYsRUFBVTJCLE9BQU9waUUsR0E1RTlCLFNBQXVCNTZDLEdBQ2RBLEVBQUU0cUgsYUFBYXFHLGlCQUFpQjVWLEVBQVUyQixPQUFPcGlFLElBQ2xENTZDLEVBQUV5dEgsbUJBQW1CcFMsRUFBVThGLFVBQVV2bUUsRUFBR3lnRSxFQUFVMkIsT0FBT3BpRSxHQUVqRTU2QyxFQUFFa3hILGdCQUNOLENBd0VZOEMsQ0FBY2gwSCxHQUNkLE1BRUosS0FBS3E3RyxFQUFVMkIsT0FBT1MsR0FDdEIsS0FBS3BDLEVBQVUyQixPQUFPc0MsR0FDdEIsS0FBS2pFLEVBQVUyQixPQUFPMkIsR0FDdEIsS0FBS3RELEVBQVUyQixPQUFPc0YsSUFDdEIsS0FBS2pILEVBQVUyQixPQUFPUSxJQUN0QixLQUFLbkMsRUFBVTJCLE9BQU8yRyxJQUN0QixLQUFLdEksRUFBVTJCLE9BQU80QixJQUN0QixLQUFLdkQsRUFBVTJCLE9BQU9zRyxLQUN0QixLQUFLakksRUFBVTJCLE9BQU93QixLQUN0QixLQUFLbkQsRUFBVTJCLE9BQU80RSxNQUN0QixLQUFLdkcsRUFBVTJCLE9BQU9nRixPQUN0QixLQUFLM0csRUFBVTJCLE9BQU9LLE9BQ3RCLEtBQUtoQyxFQUFVMkIsT0FBT3lGLE9BQ3RCLEtBQUtwSCxFQUFVMkIsT0FBTzBGLE9BQ3RCLEtBQUtySCxFQUFVMkIsT0FBTzhGLE9BQ3RCLEtBQUt6SCxFQUFVMkIsT0FBTytGLE9BQ3RCLEtBQUsxSCxFQUFVMkIsT0FBT3FGLE9BQ3RCLEtBQUtoSCxFQUFVMkIsT0FBT3dFLFFBQ3RCLEtBQUtuRyxFQUFVMkIsT0FBTzJFLFFBQ3RCLEtBQUt0RyxFQUFVMkIsT0FBT29GLFFBQ3RCLEtBQUsvRyxFQUFVMkIsT0FBT3lILFFBQ3RCLEtBQUtwSixFQUFVMkIsT0FBTzZILFFBQ3RCLEtBQUt4SixFQUFVMkIsT0FBT3VCLFFBQ3RCLEtBQUtsRCxFQUFVMkIsT0FBT3VGLFNBQ3RCLEtBQUtsSCxFQUFVMkIsT0FBT0UsV0FDdEIsS0FBSzdCLEVBQVUyQixPQUFPd0YsWUFoSTlCLFNBQTZCeGlILEVBQUd3ZSxHQUM1QixNQUFNcytGLEVBQUt0K0YsRUFBTWloRyxNQUNiei9HLEVBQUU0cUgsYUFBYUMsV0FBVy9OLEtBQzFCOThHLEVBQUU0cUgsYUFBYTZHLHlCQUNmenhILEVBQUU0cUgsYUFBYXFFLHNCQUFzQm5TLEdBRTdDLENBMkhZbVgsQ0FBb0JqMEgsRUFBR3dlLEdBQ3ZCLE1BRUosS0FBSzY4RixFQUFVMkIsT0FBT3NCLElBdkc5QixTQUF3QnQrRyxHQUNoQkEsRUFBRTRxSCxhQUFhc0osbUJBQW1CN1ksRUFBVTJCLE9BQU9zQixNQUNuRHQrRyxFQUFFNHFILGFBQWEwRyxvQ0FBb0NqVyxFQUFVMkIsT0FBT3NCLElBQ3BFdCtHLEVBQUU0cUgsYUFBYXFFLHNCQUFzQjVULEVBQVUyQixPQUFPc0IsSUFFOUQsQ0FtR1k2VixDQUFlbjBILEdBQ2YsTUFFSixLQUFLcTdHLEVBQVUyQixPQUFPTyxHQUN0QixLQUFLbEMsRUFBVTJCLE9BQU9VLElBdEc5QixTQUF3QjE5RyxFQUFHd2UsR0FDdkIsTUFBTXMrRixFQUFLdCtGLEVBQU1paEcsTUFDYnovRyxFQUFFNHFILGFBQWFDLFdBQVcvTixLQUMxQjk4RyxFQUFFNHFILGFBQWEwRyxvQ0FBb0N4VSxHQUNuRDk4RyxFQUFFNHFILGFBQWFxRSxzQkFBc0JuUyxHQUU3QyxDQWlHWXNYLENBQWVwMEgsRUFBR3dlLEdBQ2xCLE1BRUosS0FBSzY4RixFQUFVMkIsT0FBT2EsR0FDdEIsS0FBS3hDLEVBQVUyQixPQUFPYyxHQUN0QixLQUFLekMsRUFBVTJCLE9BQU9lLEdBQ3RCLEtBQUsxQyxFQUFVMkIsT0FBT2dCLEdBQ3RCLEtBQUszQyxFQUFVMkIsT0FBT2lCLEdBQ3RCLEtBQUs1QyxFQUFVMkIsT0FBT2tCLElBeEc5QixTQUFvQ2wrRyxHQUM1QkEsRUFBRTRxSCxhQUFheUosNkJBQ2ZyMEgsRUFBRTRxSCxhQUFhNkcseUJBQ2Z6eEgsRUFBRTRxSCxhQUFhMEosK0JBRXZCLENBb0dZQyxDQUEyQnYwSCxHQUMzQixNQUVKLEtBQUtxN0csRUFBVTJCLE9BQU9JLElBOUY5QixTQUF3QnA5RyxHQUNwQkEsRUFBRXN3SCx1Q0FDRnR3SCxFQUFFeXRILG1CQUFtQnBTLEVBQVU4RixVQUFVL0QsR0FBSS9CLEVBQVUyQixPQUFPSSxJQUM5RHA5RyxFQUFFNHFILGFBQWF2aUcsTUFDZnJvQixFQUFFdXVILFlBQWEsQ0FDbkIsQ0EwRllpRyxDQUFleDBILEdBQ2YsTUFFSixLQUFLcTdHLEVBQVUyQixPQUFPRyxNQTdLOUIsU0FBMEJuOUcsRUFBR3dlLEdBQ3pCLEdBQUl4ZSxFQUFFNHFILGFBQWFDLFdBQVd4UCxFQUFVMkIsT0FBT0csUUFDM0NuOUcsRUFBRWt0SCxjQUFnQmxELEVBQWN5SyxXQUc1QnowSCxFQUFFK0MsUUFBUTRXLHdCQUF3QixDQUNsQyxNQUFNa3pHLEVBQWM3c0gsRUFBRTRxSCxhQUFhc0gsbUNBQy9CckYsR0FDQTdzSCxFQUFFeXNILGdCQUFnQkksRUFBYXJ1RyxFQUV2QyxDQUVSLENBa0tZazJHLENBQWlCMTBILEVBQUd3ZSxHQUNwQixNQUVKLEtBQUs2OEYsRUFBVTJCLE9BQU92aEYsTUFwSzlCLFNBQTBCejdCLEVBQUd3ZSxHQUNyQnhlLEVBQUU0cUgsYUFBYUMsV0FBV3hQLEVBQVUyQixPQUFPRyxRQUMzQ245RyxFQUFFa3RILGNBQWdCbEQsRUFBY3lLLFdBQ2hDRSxHQUFnQjMwSCxFQUFHd2UsR0FFM0IsQ0FnS1lvMkcsQ0FBaUI1MEgsRUFBR3dlLEdBQ3BCLE1BRUosS0FBSzY4RixFQUFVMkIsT0FBTzJGLE1BM0o5QixTQUEwQjNpSCxHQUN0QixNQUFNb3lILEVBQWFweUgsRUFBRTRxSCxhQUFhaUUsVUFBWSxHQUN4QyxZQUFFd0QsR0FBZ0JyeUgsRUFDbkJveUgsSUFDRHB5SCxFQUFFcXlILFlBQWMsT0FFZkEsR0FBZUQsSUFBZXB5SCxFQUFFNHFILGFBQWFDLFdBQVd4UCxFQUFVMkIsT0FBTzJGLFFBQzFFM2lILEVBQUU0cUgsYUFBYTZHLHlCQUNYVyxFQUNBcHlILEVBQUU0cUgsYUFBYXFFLHNCQUFzQjVULEVBQVUyQixPQUFPMkYsTUFFakQwUCxHQUNMcnlILEVBQUU0cUgsYUFBYWw4RyxPQUFPMmpILEdBR2xDLENBNklZd0MsQ0FBaUI3MEgsR0FDakIsTUFFSixLQUFLcTdHLEVBQVUyQixPQUFPeUUsT0FDdEIsS0FBS3BHLEVBQVUyQixPQUFPK0csT0FDdEIsS0FBSzFJLEVBQVUyQixPQUFPd0csU0F4SDlCLFNBQTRCeGpILEVBQUd3ZSxHQUMzQixNQUFNcytGLEVBQUt0K0YsRUFBTWloRyxNQUNiei9HLEVBQUU0cUgsYUFBYUMsV0FBVy9OLEtBQzFCOThHLEVBQUU0cUgsYUFBYTZHLHlCQUNmenhILEVBQUU0cUgsYUFBYXFFLHNCQUFzQm5TLEdBQ3JDOThHLEVBQUUycUgseUJBQXlCdkIsb0JBRW5DLENBa0hZMEwsQ0FBbUI5MEgsRUFBR3dlLEdBQ3RCLE1BRUosS0FBSzY4RixFQUFVMkIsT0FBTytILFNBQ2xCNkosRUFBcUI1dUgsRUFBR3dlLEdBQ3hCLE1BRUosUUFDSXNzRyxFQUFvQjlxSCxFQUFHd2UsR0FHbkMsQ0FDQSxTQUFTNnhHLEVBQVVyd0gsRUFBR3dlLEdBQ2R4ZSxFQUFFeXVILHVCQUF1Qmp6SCxPQUFTLEVBQ2xDdTVILEdBQWMvMEgsRUFBR3dlLEdBR2pCK3RHLEVBQVl2c0gsRUFBR3dlLEVBRXZCLENBbUJBLFNBQVN3MkcsRUFBaUJoMUgsRUFBR3dlLEdBQ3pCLEdBQUk4ckcsRUFBcUJ2bUgsSUFBSS9ELEVBQUU0cUgsYUFBYW1FLGNBS3hDLE9BSkEvdUgsRUFBRWkxSCx1QkFBdUJ6NUgsT0FBUyxFQUNsQ3dFLEVBQUVrMUgsdUNBQXdDLEVBQzFDbDFILEVBQUU0ekgsc0JBQXdCNXpILEVBQUVrdEgsY0FDNUJsdEgsRUFBRWt0SCxjQUFnQmxELEVBQWNtTCxjQUN4QjMyRyxFQUFNamMsTUFDVixLQUFLcW5ILEVBQVdoRSxVQUFVaUssVUFDdEJ1RixFQUFxQnAxSCxFQUFHd2UsR0FDeEIsTUFFSixLQUFLb3JHLEVBQVdoRSxVQUFVbUsscUJBQ3RCc0YsRUFBK0JyMUgsRUFBR3dlLFFBTzFDODJHLEVBQWF0MUgsRUFBR3dlLEVBRXhCLENBb0RBLFNBQVMrMkcsRUFBZ0J2MUgsRUFBR3dlLEdBQ3hCLE9BQVFBLEVBQU1paEcsT0FDVixLQUFLcEUsRUFBVTJCLE9BQU9rSSxHQUN0QixLQUFLN0osRUFBVTJCLE9BQU9tSSxHQUN0QixLQUFLOUosRUFBVTJCLE9BQU9xSSxJQWpDOUIsU0FBMkJybEgsRUFBR3dlLEdBQzFCeGUsRUFBRTRxSCxhQUFhNEssMEJBQ2Z4MUgsRUFBRXl0SCxtQkFBbUJwUyxFQUFVOEYsVUFBVTJELE1BQU96SixFQUFVMkIsT0FBTzhILE9BQ2pFOWtILEVBQUVrdEgsY0FBZ0JsRCxFQUFja0osY0FDaEN1QyxHQUFvQnoxSCxFQUFHd2UsRUFDM0IsQ0E2QllrM0csQ0FBa0IxMUgsRUFBR3dlLEdBQ3JCLE1BRUosS0FBSzY4RixFQUFVMkIsT0FBTzRILE1BQ3RCLEtBQUt2SixFQUFVMkIsT0FBT3dILE9BQ3RCLEtBQUtuSixFQUFVMkIsT0FBTytILFNBQ2xCNkksRUFBZTV0SCxFQUFHd2UsR0FDbEIsTUFFSixLQUFLNjhGLEVBQVUyQixPQUFPa0YsS0F0RDlCLFNBQTRCbGlILEVBQUd3ZSxHQUMzQnhlLEVBQUU0cUgsYUFBYTRLLDBCQUNmeDFILEVBQUV5dEgsbUJBQW1CcFMsRUFBVThGLFVBQVVnQixTQUFVOUcsRUFBVTJCLE9BQU9tRixVQUNwRW5pSCxFQUFFa3RILGNBQWdCbEQsRUFBYzJMLGdCQUNoQ0MsR0FBc0I1MUgsRUFBR3dlLEVBQzdCLENBa0RZcTNHLENBQW1CNzFILEVBQUd3ZSxHQUN0QixNQUVKLEtBQUs2OEYsRUFBVTJCLE9BQU8yRixNQXpCOUIsU0FBNkIzaUgsRUFBR3dlLEdBQ3ZCeGUsRUFBRXF5SCxhQUE0QyxJQUE3QnJ5SCxFQUFFNHFILGFBQWFpRSxZQUNqQzd1SCxFQUFFbXVILGVBQWUzdkcsRUFBTzY4RixFQUFVc0IsR0FBR2xoRixNQUNyQ3o3QixFQUFFcXlILFlBQWNyeUgsRUFBRTRxSCxhQUFhdnFHLFFBQy9CcmdCLEVBQUU0cUgsYUFBYXZpRyxNQUV2QixDQW9CWXl0RyxDQUFvQjkxSCxFQUFHd2UsR0FDdkIsTUFFSixLQUFLNjhGLEVBQVUyQixPQUFPb0MsT0E3QzlCLFNBQThCcC9HLEVBQUd3ZSxHQUN6QnhlLEVBQUU0cUgsYUFBYW1MLGdCQUFnQjFhLEVBQVUyQixPQUFPb0MsU0FDaERwL0csRUFBRTRxSCxhQUFhcUUsc0JBQXNCNVQsRUFBVTJCLE9BQU9vQyxPQUN0RHAvRyxFQUFFa3ZILHNCQUNGbHZILEVBQUVnMkgsaUJBQWlCeDNHLEdBRTNCLENBd0NZeTNHLENBQXFCajJILEVBQUd3ZSxHQUN4QixNQUVKLEtBQUs2OEYsRUFBVTJCLE9BQU84SCxNQUN0QixLQUFLekosRUFBVTJCLE9BQU9pSSxNQUN0QixLQUFLNUosRUFBVTJCLE9BQU9vSSxPQTlEOUIsU0FBOEJwbEgsRUFBR3dlLEdBQzdCeGUsRUFBRTRxSCxhQUFhNEssMEJBQ2Z4MUgsRUFBRW11SCxlQUFlM3ZHLEVBQU82OEYsRUFBVXNCLEdBQUdsaEYsTUFDckN6N0IsRUFBRWt0SCxjQUFnQmxELEVBQWNrSixhQUNwQyxDQTJEWWdELENBQXFCbDJILEVBQUd3ZSxHQUN4QixNQUVKLEtBQUs2OEYsRUFBVTJCLE9BQU9pRyxPQWhEOUIsU0FBOEJqakgsRUFBR3dlLEdBQ3pCaXlHLEVBQWNqeUcsR0FDZHhlLEVBQUU4dEgsZUFBZXR2RyxFQUFPNjhGLEVBQVVzQixHQUFHbGhGLE1BR3JDNjVGLEVBQWF0MUgsRUFBR3dlLEdBRXBCQSxFQUFNdXZHLGdCQUFpQixDQUMzQixDQXlDWW9JLENBQXFCbjJILEVBQUd3ZSxHQUN4QixNQUVKLEtBQUs2OEYsRUFBVTJCLE9BQU9pRixTQXZGOUIsU0FBZ0NqaUgsRUFBR3dlLEdBQy9CeGUsRUFBRTRxSCxhQUFhNEssMEJBQ2Z4MUgsRUFBRTJxSCx5QkFBeUI3QixlQUMzQjlvSCxFQUFFbXVILGVBQWUzdkcsRUFBTzY4RixFQUFVc0IsR0FBR2xoRixNQUNyQ3o3QixFQUFFa3RILGNBQWdCbEQsRUFBY2lKLFVBQ3BDLENBbUZZbUQsQ0FBdUJwMkgsRUFBR3dlLEdBQzFCLE1BRUosS0FBSzY4RixFQUFVMkIsT0FBT21GLFVBckY5QixTQUFpQ25pSCxFQUFHd2UsR0FDaEN4ZSxFQUFFNHFILGFBQWE0SywwQkFDZngxSCxFQUFFbXVILGVBQWUzdkcsRUFBTzY4RixFQUFVc0IsR0FBR2xoRixNQUNyQ3o3QixFQUFFa3RILGNBQWdCbEQsRUFBYzJMLGVBQ3BDLENBa0ZZVSxDQUF3QnIySCxFQUFHd2UsR0FDM0IsTUFFSixRQUNJODJHLEVBQWF0MUgsRUFBR3dlLEdBRzVCLENBQ0EsU0FBUzgzRyxFQUFjdDJILEVBQUd3ZSxHQUN0QixPQUFRQSxFQUFNaWhHLE9BQ1YsS0FBS3BFLEVBQVUyQixPQUFPb0MsTUFDZHAvRyxFQUFFNHFILGFBQWFtTCxnQkFBZ0IxYSxFQUFVMkIsT0FBT29DLFNBQ2hEcC9HLEVBQUU0cUgsYUFBYXFFLHNCQUFzQjVULEVBQVUyQixPQUFPb0MsT0FDdERwL0csRUFBRWt2SCx1QkFFTixNQUVKLEtBQUs3VCxFQUFVMkIsT0FBTytILFNBQ2xCNkosRUFBcUI1dUgsRUFBR3dlLEdBQ3hCLE1BRUosS0FBSzY4RixFQUFVMkIsT0FBT0csS0FDdEIsS0FBSzlCLEVBQVUyQixPQUFPaUYsUUFDdEIsS0FBSzVHLEVBQVUyQixPQUFPa0YsSUFDdEIsS0FBSzdHLEVBQVUyQixPQUFPbUYsU0FDdEIsS0FBSzlHLEVBQVUyQixPQUFPdmhGLEtBQ3RCLEtBQUs0L0UsRUFBVTJCLE9BQU84SCxNQUN0QixLQUFLekosRUFBVTJCLE9BQU9rSSxHQUN0QixLQUFLN0osRUFBVTJCLE9BQU9pSSxNQUN0QixLQUFLNUosRUFBVTJCLE9BQU9tSSxHQUN0QixLQUFLOUosRUFBVTJCLE9BQU9vSSxNQUN0QixLQUFLL0osRUFBVTJCLE9BQU9xSSxHQUVsQixNQUVKLFFBQ0lpUSxFQUFhdDFILEVBQUd3ZSxHQUc1QixDQUNBLFNBQVM4MkcsRUFBYXQxSCxFQUFHd2UsR0FDckIsTUFBTSszRyxFQUE0QnYySCxFQUFFdzJILHVCQUNwQ3gySCxFQUFFdzJILHdCQUF5QixFQUUzQjVHLEVBQVc1dkgsRUFBR3dlLEdBQ2R4ZSxFQUFFdzJILHVCQUF5QkQsQ0FDL0IsQ0FHQSxTQUFTbEIsRUFBK0JyMUgsRUFBR3dlLEdBQ3ZDeGUsRUFBRWkxSCx1QkFBdUJ4MUgsS0FBSytlLEVBQ2xDLENBQ0EsU0FBUzQyRyxFQUFxQnAxSCxFQUFHd2UsR0FDN0J4ZSxFQUFFaTFILHVCQUF1QngxSCxLQUFLK2UsR0FDOUJ4ZSxFQUFFazFILHVDQUF3QyxDQUM5QyxDQUNBLFNBQVN1QixHQUFpQnoySCxFQUFHd2UsR0FDekIsSUFBSTFlLEVBQUksRUFDUixHQUFJRSxFQUFFazFILHNDQUNGLEtBQU9wMUgsRUFBSUUsRUFBRWkxSCx1QkFBdUJ6NUgsT0FBUXNFLElBQ3hDdzFILEVBQWF0MUgsRUFBR0EsRUFBRWkxSCx1QkFBdUJuMUgsU0FJN0MsS0FBT0EsRUFBSUUsRUFBRWkxSCx1QkFBdUJ6NUgsT0FBUXNFLElBQ3hDRSxFQUFFdXdILGtCQUFrQnZ3SCxFQUFFaTFILHVCQUF1Qm4xSCxJQUdyREUsRUFBRWt0SCxjQUFnQmx0SCxFQUFFNHpILHNCQUNwQjV6SCxFQUFFb3RILGNBQWM1dUcsRUFDcEIsQ0E5MUNBempCLEVBQVFzbkQsT0F0aENSLE1BQ0ksV0FBQXhxQyxDQUFZOVUsRUFBU2dpQyxFQUFVeWlGLEVBQWtCLEtBQU1rUCxFQUFnQixNQUNuRXY3SCxLQUFLcXNILGdCQUFrQkEsRUFDdkJyc0gsS0FBS3U3SCxjQUFnQkEsRUFDckJ2N0gsS0FBS3c3SCxhQUFlLEtBQ3BCeDdILEtBQUtxeEgsU0FBVSxFQUNmcnhILEtBQUsreEgsY0FBZ0JsRCxFQUFjNE0sUUFDbkN6N0gsS0FBS3k0SCxzQkFBd0I1SixFQUFjNE0sUUFDM0N6N0gsS0FBS3V5SCxZQUFjLEtBQ25CdnlILEtBQUtrM0gsWUFBYyxLQUVuQmwzSCxLQUFLMDdILGtCQUFtQixFQUt4QjE3SCxLQUFLc3pILHVCQUF5QixHQUM5QnR6SCxLQUFLODVILHVCQUF5QixHQUM5Qjk1SCxLQUFLKzVILHVDQUF3QyxFQUM3Qy81SCxLQUFLb3pILFlBQWEsRUFDbEJwekgsS0FBS3kySCxpQkFBa0IsRUFDdkJ6MkgsS0FBS3E3SCx3QkFBeUIsRUFDOUJyN0gsS0FBSzRILFFBQVVyRSxPQUFPaUIsT0FBT2pCLE9BQU9pQixPQUFPLENBQUMsRUFBRzRxSCxHQUF1QnhuSCxHQUN0RTVILEtBQUtzZSxZQUFjdGUsS0FBSzRILFFBQVEwVyxZQUNoQ3RlLEtBQUtxdkgsYUFBZXJ2SCxLQUFLNEgsUUFBUXluSCxhQUU3QnJ2SCxLQUFLcXZILGVBQ0xydkgsS0FBSzRILFFBQVE0Vyx3QkFBeUIsR0FFMUN4ZSxLQUFLNHBDLFNBQVdBLFFBQTJDQSxFQUFXNXBDLEtBQUtzZSxZQUFZZy9GLGlCQUN2RnQ5RyxLQUFLMG9ELFVBQVksSUFBSXBrQyxFQUFXcWtDLFVBQVUzb0QsS0FBSzRILFFBQVM1SCxNQUN4REEsS0FBS3d2SCx5QkFBMkIsSUFBSWxCLEVBQTZCN0Isc0JBQXNCenNILEtBQUtzZSxhQUM1RnRlLEtBQUsyN0gsa0JBQW9CdFAsR0FBa0IsRUFBSW5NLEVBQVU2RSxVQUFVL2tILEtBQUtzZSxZQUFZNGdHLFdBQVdtTixJQUFvQm5NLEVBQVUyQixPQUFPeUksUUFDcEl0cUgsS0FBSzQ3SCxpQkFBaUJ2UCxRQUF5REEsRUFBa0Jyc0gsS0FBSzRwQyxTQUFVNXBDLEtBQUsyN0gsbUJBQ3JIMzdILEtBQUt5dkgsYUFBZSxJQUFJcEIsRUFBd0J3TixpQkFBaUI3N0gsS0FBSzRwQyxTQUFVNXBDLEtBQUtzZSxZQUFhdGUsS0FDdEcsQ0FFQSxZQUFPOEgsQ0FBTXNJLEVBQU14SSxHQUNmLE1BQU1rVyxFQUFTLElBQUk5ZCxLQUFLNEgsR0FFeEIsT0FEQWtXLEVBQU80cUMsVUFBVTl0QixNQUFNeHFCLEdBQU0sR0FDdEIwTixFQUFPOHJCLFFBQ2xCLENBQ0Esd0JBQU8waUYsQ0FBa0JELEVBQWlCemtILEdBQ3RDLE1BQU1zQixFQUFPM0YsT0FBT2lCLE9BQU9qQixPQUFPaUIsT0FBTyxDQUFDLEVBQUc0cUgsR0FBdUJ4bkgsR0FHcEV5a0gsVUFBNEVBLEVBQWtCbmpILEVBQUtvVixZQUFZdzZCLGNBQWNvbkUsRUFBVThGLFVBQVU0RCxTQUFVMUosRUFBVXNCLEdBQUdsaEYsS0FBTSxLQUk5SyxNQUFNdzdGLEVBQWU1eUgsRUFBS29WLFlBQVl3NkIsY0FBYyxlQUFnQm9uRSxFQUFVc0IsR0FBR2xoRixLQUFNLElBQ2pGeGlCLEVBQVMsSUFBSTlkLEtBQUtrSixFQUFNNHlILEVBQWN6UCxHQVE1QyxPQVBJdnVHLEVBQU82OUcsb0JBQXNCemIsRUFBVTJCLE9BQU8rSCxVQUM5QzlyRyxFQUFPdzFHLHVCQUF1QnJvSCxRQUFRNGpILEVBQWN3RSxhQUV4RHYxRyxFQUFPaStHLG1DQUNQaitHLEVBQU9xMEcseUJBQ1ByMEcsRUFBT2kyRyxzQkFDUGoyRyxFQUFPaytHLDZCQUNBbCtHLENBQ1gsQ0FDQSxXQUFBeXVHLEdBQ0ksTUFBTTBQLEVBQWNqOEgsS0FBS3NlLFlBQVl3Z0csY0FBYzkrRyxLQUFLNHBDLFVBQ2xEc3lGLEVBQVdsOEgsS0FBS3NlLFlBQVltL0YseUJBRWxDLE9BREF6OUcsS0FBSyt3SCxZQUFZa0wsRUFBYUMsR0FDdkJBLENBQ1gsQ0FFQSxJQUFBckssQ0FBS3h1RyxFQUFPMFcsRUFBTW9pRyxHQUNkLElBQUl0MEgsRUFDSixJQUFLN0gsS0FBS3F2SCxhQUNOLE9BQ0osTUFBTStNLEVBQWdDLFFBQXpCdjBILEVBQUt3YixFQUFNaXJELGdCQUE2QixJQUFQem1FLEVBQWdCQSxFQUFLaW5ILEVBQzdEL29GLEVBQU0sQ0FDUmhNLE9BQ0FnMUYsVUFBV3FOLEVBQUlyTixVQUNmQyxTQUFVb04sRUFBSXBOLFNBQ2RwUCxZQUFhd2MsRUFBSXhjLFlBQ2pCcVAsUUFBU2tOLEVBQWNDLEVBQUlyTixVQUFZcU4sRUFBSW5OLFFBQzNDQyxPQUFRaU4sRUFBY0MsRUFBSXBOLFNBQVdvTixFQUFJbE4sT0FDekNyUCxVQUFXc2MsRUFBY0MsRUFBSXhjLFlBQWN3YyxFQUFJdmMsV0FFbkQ3L0csS0FBS3F2SCxhQUFhdHBGLEVBQ3RCLENBRUEsVUFBQXMyRixDQUFXejRILEVBQU0rc0gsRUFBSzJMLEdBQ2xCLElBQUl6MEgsRUFBSW9OLEVBQ3NDLFFBQTdDQSxHQUFNcE4sRUFBSzdILEtBQUtzZSxhQUFhKzlHLGtCQUErQixJQUFQcG5ILEdBQXlCQSxFQUFHalMsS0FBSzZFLEVBQUlqRSxHQUN2RjA0SCxHQUFTdDhILEtBQUt5dkgsYUFBYUssU0FBVyxHQUN0Qzl2SCxLQUFLNDdILGlCQUFpQmg0SCxFQUFNK3NILEVBQ3BDLENBQ0EsU0FBQTRMLENBQVUzNEgsRUFBTTA0SCxHQUNaLElBQUl6MEgsRUFBSW9OLEVBS1IsR0FKSWpWLEtBQUs0SCxRQUFRNFcsd0JBQ2J4ZSxLQUFLc3hILGdCQUFnQjF0SCxFQUFNNUQsS0FBS3c3SCxjQUVTLFFBQTVDdm1ILEdBQU1wTixFQUFLN0gsS0FBS3NlLGFBQWFpK0csaUJBQThCLElBQVB0bkgsR0FBeUJBLEVBQUdqUyxLQUFLNkUsRUFBSWpFLEVBQU01RCxLQUFLeXZILGFBQWF2cUcsU0FDOUdvM0csRUFBTyxDQUNQLElBQUlwM0csRUFDQTB1RyxFQUMrQixJQUEvQjV6SCxLQUFLeXZILGFBQWFLLFVBQWtCOXZILEtBQUtxc0gsaUJBQ3pDbm5HLEVBQVVsbEIsS0FBS3FzSCxnQkFDZnVILEVBQWU1ekgsS0FBSzI3SCxxQkFHakJ6MkcsVUFBUzB1RyxnQkFBaUI1ekgsS0FBS3l2SCxjQUV0Q3p2SCxLQUFLNDdILGlCQUFpQjEyRyxFQUFTMHVHLEVBQ25DLENBQ0osQ0FDQSxnQkFBQWdJLENBQWlCMTJHLEVBQVN5ckcsR0FDdEIsTUFBTTZMLEVBQVN0M0csSUFBWWxsQixLQUFLNHBDLFVBQVk1cEMsS0FBS3NlLFlBQVk2Z0csZ0JBQWdCajZGLEtBQWFnN0YsRUFBVXNCLEdBQUdsaEYsS0FDdkd0Z0MsS0FBSzA3SCxrQkFBb0JjLEVBQ3pCeDhILEtBQUswb0QsVUFBVSt6RSxlQUFpQkQsSUFBV3g4SCxLQUFLMDhILG9CQUFvQi9MLEVBQUt6ckcsRUFDN0UsQ0FDQSxvQkFBQTJ0RyxDQUFxQjJJLEVBQWNtQixHQUMvQjM4SCxLQUFLZ3pILGVBQWV3SSxFQUFjdGIsRUFBVXNCLEdBQUdsaEYsTUFDL0N0Z0MsS0FBSzBvRCxVQUFVMTJDLE1BQVEycUgsRUFDdkIzOEgsS0FBS3k0SCxzQkFBd0J6NEgsS0FBSyt4SCxjQUNsQy94SCxLQUFLK3hILGNBQWdCbEQsRUFBYzZKLElBQ3ZDLENBQ0Esd0JBQUFrRSxHQUNJNThILEtBQUsreEgsY0FBZ0JsRCxFQUFjNkosS0FDbkMxNEgsS0FBS3k0SCxzQkFBd0I1SixFQUFjMkYsUUFDM0N4MEgsS0FBSzBvRCxVQUFVMTJDLE1BQVFzUyxFQUFXcW5HLGNBQWMzQyxTQUNwRCxDQUVBLDBCQUFBNlQsR0FDSSxPQUFzQyxJQUEvQjc4SCxLQUFLeXZILGFBQWFLLFVBQWtCOXZILEtBQUtxc0gsZ0JBQzFDcnNILEtBQUtxc0gsZ0JBQ0xyc0gsS0FBS3l2SCxhQUFhdnFHLE9BQzVCLENBQ0EsMEJBQUE4MkcsR0FDSSxJQUFJcDRILEVBQU81RCxLQUFLcXNILGdCQUNoQixLQUFPem9ILEdBQU0sQ0FDVCxHQUFJNUQsS0FBS3NlLFlBQVk0Z0csV0FBV3Q3RyxLQUFVczhHLEVBQVU4RixVQUFVd0IsS0FBTSxDQUNoRXhuSCxLQUFLazNILFlBQWN0ekgsRUFDbkIsS0FDSixDQUNBQSxFQUFPNUQsS0FBS3NlLFlBQVkwZ0csY0FBY3A3RyxFQUMxQyxDQUNKLENBQ0EsZ0NBQUFtNEgsR0FDSSxHQUFLLzdILEtBQUtxc0gsaUJBQW1CcnNILEtBQUtzZSxZQUFZNmdHLGdCQUFnQm4vRyxLQUFLcXNILG1CQUFxQm5NLEVBQVVzQixHQUFHbGhGLEtBR3JHLE9BQVF0Z0MsS0FBSzI3SCxtQkFDVCxLQUFLemIsRUFBVTJCLE9BQU8yRCxNQUN0QixLQUFLdEYsRUFBVTJCLE9BQU9nSSxTQUNsQjdwSCxLQUFLMG9ELFVBQVUxMkMsTUFBUXNTLEVBQVdxbkcsY0FBY21ILE9BQ2hELE1BRUosS0FBSzVTLEVBQVUyQixPQUFPNEgsTUFDdEIsS0FBS3ZKLEVBQVUyQixPQUFPd0ksSUFDdEIsS0FBS25LLEVBQVUyQixPQUFPa0csT0FDdEIsS0FBSzdILEVBQVUyQixPQUFPNkcsUUFDdEIsS0FBS3hJLEVBQVUyQixPQUFPNEcsU0FDdEIsS0FBS3ZJLEVBQVUyQixPQUFPOEcsU0FDbEIzb0gsS0FBSzBvRCxVQUFVMTJDLE1BQVFzUyxFQUFXcW5HLGNBQWNvSCxRQUNoRCxNQUVKLEtBQUs3UyxFQUFVMkIsT0FBT3dILE9BQ2xCcnBILEtBQUswb0QsVUFBVTEyQyxNQUFRc1MsRUFBV3FuRyxjQUFjdUgsWUFDaEQsTUFFSixLQUFLaFQsRUFBVTJCLE9BQU9tSCxVQUNsQmhwSCxLQUFLMG9ELFVBQVUxMkMsTUFBUXNTLEVBQVdxbkcsY0FBYzNDLFVBTTVELENBRUEsZ0JBQUE4VCxDQUFpQno1RyxHQUNiLE1BQU05Z0IsRUFBTzhnQixFQUFNOWdCLE1BQVEsR0FDckIwNkcsRUFBVzU1RixFQUFNNDVGLFVBQVksR0FDN0JDLEVBQVc3NUYsRUFBTTY1RixVQUFZLEdBRW5DLEdBREFsOUcsS0FBS3NlLFlBQVk4L0YsZ0JBQWdCcCtHLEtBQUs0cEMsU0FBVXJuQyxFQUFNMDZHLEVBQVVDLEdBQzVENzVGLEVBQU1pckQsU0FBVSxDQUNoQixNQUNNeXVELEVBRG1CLzhILEtBQUtzZSxZQUFZeWdHLGNBQWMvK0csS0FBSzRwQyxVQUN4QngrQixNQUFNeEgsR0FBUzVELEtBQUtzZSxZQUFZb2hHLG1CQUFtQjk3RyxLQUNwRm01SCxHQUNBLzhILEtBQUtzZSxZQUFZcWhHLDBCQUEwQm9kLEVBQWExNUcsRUFBTWlyRCxTQUV0RSxDQUNKLENBQ0Esb0JBQUEwdUQsQ0FBcUJ4eEgsRUFBUzhpRSxHQUMxQixHQUFJdHVFLEtBQUs0SCxRQUFRNFcsdUJBQXdCLENBQ3JDLE1BQU00OUcsRUFBTTl0RCxHQUFZL3FFLE9BQU9pQixPQUFPakIsT0FBT2lCLE9BQU8sQ0FBQyxFQUFHOHBFLEdBQVcsQ0FBRTJ1RCxTQUFVM3VELElBQy9FdHVFLEtBQUtzZSxZQUFZcWhHLDBCQUEwQm4wRyxFQUFTNHdILEVBQ3hELENBQ0EsR0FBSXA4SCxLQUFLazlILGlDQUNMbDlILEtBQUs2d0gscUJBQXFCcmxILE9BRXpCLENBQ0QsTUFBTTNILEVBQVM3RCxLQUFLeXZILGFBQWEwQix5QkFDakNueEgsS0FBS3NlLFlBQVkyWixZQUFZcDBCLEVBQVEySCxFQUN6QyxDQUNKLENBQ0EsY0FBQW1uSCxDQUFldHZHLEVBQU84eEQsR0FDbEIsTUFBTTNwRSxFQUFVeEwsS0FBS3NlLFlBQVl3NkIsY0FBY3oxQixFQUFNeFQsUUFBU3NsRSxFQUFjOXhELEVBQU00bEQsT0FDbEZqcEUsS0FBS2c5SCxxQkFBcUJ4eEgsRUFBUzZYLEVBQU1pckQsU0FDN0MsQ0FDQSxjQUFBMGtELENBQWUzdkcsRUFBTzh4RCxHQUNsQixNQUFNM3BFLEVBQVV4TCxLQUFLc2UsWUFBWXc2QixjQUFjejFCLEVBQU14VCxRQUFTc2xFLEVBQWM5eEQsRUFBTTRsRCxPQUNsRmpwRSxLQUFLZzlILHFCQUFxQnh4SCxFQUFTNlgsRUFBTWlyRCxVQUN6Q3R1RSxLQUFLeXZILGFBQWFuckgsS0FBS2tILEVBQVM2WCxFQUFNaWhHLE1BQzFDLENBQ0Esa0JBQUFnTyxDQUFtQnppSCxFQUFTeTBHLEdBQ3hCLE1BQU05NEcsRUFBVXhMLEtBQUtzZSxZQUFZdzZCLGNBQWNqcEMsRUFBU3F3RyxFQUFVc0IsR0FBR2xoRixLQUFNLElBQzNFdGdDLEtBQUtnOUgscUJBQXFCeHhILEVBQVMsTUFDbkN4TCxLQUFLeXZILGFBQWFuckgsS0FBS2tILEVBQVM4NEcsRUFDcEMsQ0FDQSxlQUFBNk8sQ0FBZ0I5dkcsR0FDWixNQUFNODVHLEVBQU9uOUgsS0FBS3NlLFlBQVl3NkIsY0FBY3oxQixFQUFNeFQsUUFBU3F3RyxFQUFVc0IsR0FBR2xoRixLQUFNamQsRUFBTTRsRCxPQUM5RWx5RCxFQUFVL1csS0FBS3NlLFlBQVltL0YseUJBQ2pDejlHLEtBQUtzZSxZQUFZMC9GLG1CQUFtQm1mLEVBQU1wbUgsR0FDMUMvVyxLQUFLZzlILHFCQUFxQkcsRUFBTTk1RyxFQUFNaXJELFVBQ3RDdHVFLEtBQUt5dkgsYUFBYW5ySCxLQUFLNjRILEVBQU05NUcsRUFBTWloRyxPQUMvQnRrSCxLQUFLNEgsUUFBUTRXLHdCQUNieGUsS0FBS3NlLFlBQVlxaEcsMEJBQTBCNW9HLEVBQVMsS0FDNUQsQ0FDQSxzQkFBQW83RyxHQUNJLE1BQU0zbUgsRUFBVXhMLEtBQUtzZSxZQUFZdzZCLGNBQWNvbkUsRUFBVThGLFVBQVUxbEYsS0FBTTQvRSxFQUFVc0IsR0FBR2xoRixLQUFNLElBQ3hGdGdDLEtBQUs0SCxRQUFRNFcsd0JBQ2J4ZSxLQUFLc2UsWUFBWXFoRywwQkFBMEJuMEcsRUFBUyxNQUN4RHhMLEtBQUtzZSxZQUFZMlosWUFBWWo0QixLQUFLeXZILGFBQWF2cUcsUUFBUzFaLEdBQ3hEeEwsS0FBS3l2SCxhQUFhbnJILEtBQUtrSCxFQUFTMDBHLEVBQVUyQixPQUFPdmhGLEtBQ3JELENBQ0Esa0JBQUE0d0YsQ0FBbUI3dEcsRUFBT3hmLEdBQ3RCLE1BQU15N0csRUFBY3QvRyxLQUFLc2UsWUFBWXMvRixrQkFBa0J2NkYsRUFBTTNiLE1BQzdEMUgsS0FBS3NlLFlBQVkyWixZQUFZcDBCLEVBQVF5N0csR0FDakN0L0csS0FBSzRILFFBQVE0Vyx3QkFDYnhlLEtBQUtzZSxZQUFZcWhHLDBCQUEwQkwsRUFBYWo4RixFQUFNaXJELFNBRXRFLENBQ0EsaUJBQUE4bUQsQ0FBa0IveEcsR0FDZCxJQUFJeGYsRUFDQXU1SCxFQWNKLEdBYklwOUgsS0FBS2s5SCxvQ0FDRnI1SCxTQUFRdTVILGlCQUFrQnA5SCxLQUFLcTlILGdDQUM5QkQsRUFDQXA5SCxLQUFLc2UsWUFBWW9nRyxpQkFBaUI3NkcsRUFBUXdmLEVBQU1pNkcsTUFBT0YsR0FHdkRwOUgsS0FBS3NlLFlBQVltZ0csV0FBVzU2RyxFQUFRd2YsRUFBTWk2RyxTQUk5Q3o1SCxFQUFTN0QsS0FBS3l2SCxhQUFhMEIseUJBQzNCbnhILEtBQUtzZSxZQUFZbWdHLFdBQVc1NkcsRUFBUXdmLEVBQU1pNkcsU0FFekNqNkcsRUFBTWlyRCxTQUNQLE9BQ0osTUFBTWg0RCxFQUFXdFcsS0FBS3NlLFlBQVl5Z0csY0FBY2w3RyxHQUMxQzA1SCxFQUFjSCxFQUFnQjltSCxFQUFTd2dCLFlBQVlzbUcsR0FBaUI5bUgsRUFBU2pXLE9BQzdFNFcsRUFBV1gsRUFBU2luSCxFQUFjLEdBR3hDLEdBRGN2OUgsS0FBS3NlLFlBQVl3aEcsMEJBQTBCN29HLEdBQzlDLENBQ1AsTUFBTSxRQUFFZzRHLEVBQU8sT0FBRUMsRUFBTSxVQUFFclAsR0FBY3g4RixFQUFNaXJELFNBQzdDdHVFLEtBQUtzZSxZQUFZeWhHLDZCQUE2QjlvRyxFQUFVLENBQUVnNEcsVUFBU0MsU0FBUXJQLGFBQy9FLE1BQ1M3L0csS0FBSzRILFFBQVE0Vyx3QkFDbEJ4ZSxLQUFLc2UsWUFBWXFoRywwQkFBMEIxb0csRUFBVW9NLEVBQU1pckQsU0FFbkUsQ0FDQSxXQUFBeWlELENBQVl5TSxFQUFPM2UsR0FDZixJQUFLLElBQUk1b0csRUFBUWpXLEtBQUtzZSxZQUFZd2dHLGNBQWMwZSxHQUFRdm5ILEVBQU9BLEVBQVFqVyxLQUFLc2UsWUFBWXdnRyxjQUFjMGUsR0FDbEd4OUgsS0FBS3NlLFlBQVlrZ0csV0FBV3ZvRyxHQUM1QmpXLEtBQUtzZSxZQUFZMlosWUFBWTRtRixFQUFXNW9HLEVBRWhELENBQ0EsZUFBQXE3RyxDQUFnQjlsSCxFQUFTaXlILEdBQ3JCLEdBQUl6OUgsS0FBS3NlLFlBQVl3aEcsMEJBQTBCdDBHLElBQVlpeUgsRUFBYW52RCxTQUFVLENBQzlFLE1BQU1vdkQsRUFBUUQsRUFBYW52RCxTQUNyQnF6QyxFQUFLM2hILEtBQUtzZSxZQUFZNGdHLFdBQVcxekcsR0FDakNteUgsRUFHTkYsRUFBYXIySCxPQUFTcW5ILEVBQVdoRSxVQUFVdUssU0FBV3JULElBQU84YixFQUFhNXRILFFBQ3BFLENBQ0U0aEgsT0FBUWx1SCxPQUFPaUIsT0FBTyxDQUFDLEVBQUdrNUgsR0FDMUJ6TyxRQUFTeU8sRUFBTXpPLFFBQ2ZDLE9BQVF3TyxFQUFNeE8sT0FDZHJQLFVBQVc2ZCxFQUFNN2QsV0FFbkIsQ0FDRW9QLFFBQVN5TyxFQUFNM08sVUFDZkcsT0FBUXdPLEVBQU0xTyxTQUNkblAsVUFBVzZkLEVBQU05ZCxhQUV6QjUvRyxLQUFLc2UsWUFBWXloRyw2QkFBNkJ2MEcsRUFBU215SCxFQUMzRCxDQUNKLENBRUEsMENBQUFDLENBQTJDdjZHLEdBRXZDLElBQUtyakIsS0FBSzA3SCxpQkFDTixPQUFPLEVBQ1gsSUFBSXgyRyxFQUNBMHVHLEVBUUosT0FQbUMsSUFBL0I1ekgsS0FBS3l2SCxhQUFhSyxVQUFrQjl2SCxLQUFLcXNILGlCQUN6Q25uRyxFQUFVbGxCLEtBQUtxc0gsZ0JBQ2Z1SCxFQUFlNXpILEtBQUsyN0gscUJBR2pCejJHLFVBQVMwdUcsZ0JBQWlCNXpILEtBQUt5dkgsZUFFbENwc0csRUFBTWloRyxRQUFVcEUsRUFBVTJCLE9BQU93RCxLQUNqQ3JsSCxLQUFLc2UsWUFBWTRnRyxXQUFXaDZGLEtBQWFnN0YsRUFBVThGLFVBQVViLGdCQUM3RG5sSCxLQUFLc2UsWUFBWTZnRyxnQkFBZ0JqNkYsS0FBYWc3RixFQUFVc0IsR0FBRzBELFVBSy9EbGxILEtBQUswb0QsVUFBVSt6RSxnQkFHVHA1RyxFQUFNaWhHLFFBQVVwRSxFQUFVMkIsT0FBTzBHLFFBQVVsbEcsRUFBTWloRyxRQUFVcEUsRUFBVTJCLE9BQU91RyxjQUN6RXBvSCxLQUFLMDhILG9CQUFvQjlJLEVBQWMxdUcsRUFBU2c3RixFQUFVc0IsR0FBR2xoRixNQUMxRSxDQUNBLGFBQUEyeEYsQ0FBYzV1RyxHQUNWLE9BQVFBLEVBQU1qYyxNQUNWLEtBQUtxbkgsRUFBV2hFLFVBQVVpSyxVQUN0QjEwSCxLQUFLNjlILFlBQVl4NkcsR0FDakIsTUFFSixLQUFLb3JHLEVBQVdoRSxVQUFVcVQsZUFDdEI5OUgsS0FBSys5SCxnQkFBZ0IxNkcsR0FDckIsTUFFSixLQUFLb3JHLEVBQVdoRSxVQUFVcUssUUFDdEI5MEgsS0FBS2crSCxVQUFVMzZHLEdBQ2YsTUFFSixLQUFLb3JHLEVBQVdoRSxVQUFVYSxRQUN0QnRySCxLQUFLaStILFVBQVU1NkcsR0FDZixNQUVKLEtBQUtvckcsRUFBV2hFLFVBQVVzSyxVQUN0Qi8wSCxLQUFLNjZILGlCQUFpQngzRyxHQUN0QixNQUVKLEtBQUtvckcsRUFBV2hFLFVBQVV1SyxRQUN0QmgxSCxLQUFLaytILFNBQVM3NkcsR0FDZCxNQUVKLEtBQUtvckcsRUFBV2hFLFVBQVUySixJQUN0QnAwSCxLQUFLbStILE1BQU05NkcsR0FDWCxNQUVKLEtBQUtvckcsRUFBV2hFLFVBQVVtSyxxQkFDdEI1MEgsS0FBS28rSCxzQkFBc0IvNkcsR0FJdkMsQ0FFQSxtQkFBQXE1RyxDQUFvQi9MLEVBQUtubEgsRUFBU3k1RyxHQUM5QixNQUFNRCxFQUFLaGxILEtBQUtzZSxZQUFZNmdHLGdCQUFnQjN6RyxHQUN0Q3k5RCxFQUFRanBFLEtBQUtzZSxZQUFZMmdHLFlBQVl6ekcsR0FDM0MsT0FBT3FnSCxFQUFlL0ssbUJBQW1CNlAsRUFBSzNMLEVBQUkvN0MsRUFBT2c4QyxFQUM3RCxDQUVBLG9DQUFBa1EsR0FDSSxNQUFNa0osRUFBYXIrSCxLQUFLd3ZILHlCQUF5QjEwRCxRQUFRejZELE9BQ3pELEdBQUlnK0gsRUFBWSxDQUNaLE1BQU1qeUcsRUFBV3BzQixLQUFLd3ZILHlCQUF5QjEwRCxRQUFRcnhELFdBQVdtckIsR0FBVUEsRUFBTXh0QixPQUFTa25ILEVBQTZCOUIsVUFBVUcsUUFBVTNzSCxLQUFLeXZILGFBQWFsM0csU0FBU3FjLEVBQU1wcEIsV0FFN0ssSUFBSyxJQUFJN0csRUFEU3luQixFQUFXLEVBQUlpeUcsRUFBYSxFQUFJanlHLEVBQVcsRUFDckN6bkIsR0FBSyxFQUFHQSxJQUFLLENBQ2pDLE1BQU1pd0IsRUFBUTUwQixLQUFLd3ZILHlCQUF5QjEwRCxRQUFRbjJELEdBQ3BEM0UsS0FBS2d6SCxlQUFlcCtGLEVBQU12UixNQUFPcmpCLEtBQUtzZSxZQUFZNmdHLGdCQUFnQnZxRixFQUFNcHBCLFVBQ3hFb3BCLEVBQU1wcEIsUUFBVXhMLEtBQUt5dkgsYUFBYXZxRyxPQUN0QyxDQUNKLENBQ0osQ0FFQSxlQUFBbzVHLEdBQ0l0K0gsS0FBS3l2SCxhQUFhNkcseUJBQ2xCdDJILEtBQUt5dkgsYUFBYThPLDBCQUNsQnYrSCxLQUFLd3ZILHlCQUF5QnZCLG9CQUM5Qmp1SCxLQUFLK3hILGNBQWdCbEQsRUFBY21KLE1BQ3ZDLENBQ0EsY0FBQWpDLEdBQ0kvMUgsS0FBS3l2SCxhQUFhMEcsb0NBQW9DalcsRUFBVTJCLE9BQU9waUUsR0FDdkV6L0MsS0FBS3l2SCxhQUFhcUUsc0JBQXNCNVQsRUFBVTJCLE9BQU9waUUsRUFDN0QsQ0FFQSxtQkFBQXMwRSxHQUNJLElBQUssSUFBSXB2SCxFQUFJM0UsS0FBS3l2SCxhQUFhSyxTQUFVbnJILEdBQUssRUFBR0EsSUFFN0MsT0FBYyxJQUFOQSxHQUFXM0UsS0FBS3FzSCxnQkFBa0Jyc0gsS0FBSzI3SCxrQkFBb0IzN0gsS0FBS3l2SCxhQUFhTyxPQUFPcnJILElBQ3hGLEtBQUt1N0csRUFBVTJCLE9BQU9xSSxHQUVsQixZQURBbHFILEtBQUsreEgsY0FBZ0JsRCxFQUFjbUosUUFHdkMsS0FBSzlYLEVBQVUyQixPQUFPOEgsTUFDdEIsS0FBS3pKLEVBQVUyQixPQUFPb0ksTUFDdEIsS0FBSy9KLEVBQVUyQixPQUFPaUksTUFFbEIsWUFEQTlwSCxLQUFLK3hILGNBQWdCbEQsRUFBY2tKLGVBR3ZDLEtBQUs3WCxFQUFVMkIsT0FBT2lGLFFBRWxCLFlBREE5bUgsS0FBSyt4SCxjQUFnQmxELEVBQWNpSixZQUd2QyxLQUFLNVgsRUFBVTJCLE9BQU9tRixTQUVsQixZQURBaG5ILEtBQUsreEgsY0FBZ0JsRCxFQUFjMkwsaUJBR3ZDLEtBQUt0YSxFQUFVMkIsT0FBT29DLE1BRWxCLFlBREFqa0gsS0FBSyt4SCxjQUFnQmxELEVBQWN5SSxVQUd2QyxLQUFLcFgsRUFBVTJCLE9BQU9HLEtBRWxCLFlBREFoaUgsS0FBSyt4SCxjQUFnQmxELEVBQWMyRixTQUd2QyxLQUFLdFUsRUFBVTJCLE9BQU82RixTQUVsQixZQURBMW5ILEtBQUsreEgsY0FBZ0JsRCxFQUFjMEosYUFHdkMsS0FBS3JZLEVBQVUyQixPQUFPMEgsT0FFbEIsWUFEQXZwSCxLQUFLdytILDZCQUE2Qjc1SCxHQUd0QyxLQUFLdTdHLEVBQVUyQixPQUFPK0gsU0FFbEIsWUFEQTVwSCxLQUFLK3hILGNBQWdCL3hILEtBQUtzekgsdUJBQXVCLElBR3JELEtBQUtwVCxFQUFVMkIsT0FBT3ZoRixLQUVsQixZQURBdGdDLEtBQUsreEgsY0FBZ0IveEgsS0FBS3V5SCxZQUFjMUQsRUFBY29GLFdBQWFwRixFQUFjdUQsYUFHckYsS0FBS2xTLEVBQVUyQixPQUFPa0ksR0FDdEIsS0FBSzdKLEVBQVUyQixPQUFPbUksR0FDbEIsR0FBSXJsSCxFQUFJLEVBRUosWUFEQTNFLEtBQUsreEgsY0FBZ0JsRCxFQUFjb0osU0FHdkMsTUFFSixLQUFLL1gsRUFBVTJCLE9BQU9tQixLQUNsQixHQUFJcitHLEVBQUksRUFFSixZQURBM0UsS0FBSyt4SCxjQUFnQmxELEVBQWMyRCxTQU9uRHh5SCxLQUFLK3hILGNBQWdCbEQsRUFBYzJGLE9BQ3ZDLENBQ0EsNEJBQUFnSyxDQUE2QkMsR0FDekIsR0FBSUEsRUFBWSxFQUNaLElBQUssSUFBSTk1SCxFQUFJODVILEVBQVksRUFBRzk1SCxFQUFJLEVBQUdBLElBQUssQ0FDcEMsTUFBTWc5RyxFQUFLM2hILEtBQUt5dkgsYUFBYU8sT0FBT3JySCxHQUNwQyxHQUFJZzlHLElBQU96QixFQUFVMkIsT0FBTytILFNBQ3hCLE1BRUMsR0FBSWpJLElBQU96QixFQUFVMkIsT0FBT29DLE1BRTdCLFlBREFqa0gsS0FBSyt4SCxjQUFnQmxELEVBQWNxSixtQkFHM0MsQ0FFSmw0SCxLQUFLK3hILGNBQWdCbEQsRUFBY3NKLFNBQ3ZDLENBRUEsK0JBQUF2SCxDQUFnQ2pQLEdBQzVCLE9BQU93TixFQUFxQnZtSCxJQUFJKzRHLEVBQ3BDLENBQ0EsOEJBQUF1YixHQUNJLE9BQU9sOUgsS0FBS3E3SCx3QkFBMEJyN0gsS0FBSzR3SCxnQ0FBZ0M1d0gsS0FBS3l2SCxhQUFhbUUsYUFDakcsQ0FDQSw0QkFBQXlKLEdBQ0ksSUFBSyxJQUFJMTRILEVBQUkzRSxLQUFLeXZILGFBQWFLLFNBQVVuckgsR0FBSyxFQUFHQSxJQUFLLENBQ2xELE1BQU0rNUgsRUFBYzErSCxLQUFLeXZILGFBQWEvNkYsTUFBTS92QixHQUM1QyxPQUFRM0UsS0FBS3l2SCxhQUFhTyxPQUFPcnJILElBQzdCLEtBQUt1N0csRUFBVTJCLE9BQU8rSCxTQUNsQixHQUFJNXBILEtBQUtzZSxZQUFZNmdHLGdCQUFnQnVmLEtBQWlCeGUsRUFBVXNCLEdBQUdsaEYsS0FDL0QsTUFBTyxDQUFFejhCLE9BQVE3RCxLQUFLc2UsWUFBWTYvRixtQkFBbUJ1Z0IsR0FBY3RCLGNBQWUsTUFFdEYsTUFFSixLQUFLbGQsRUFBVTJCLE9BQU9vQyxNQUFPLENBQ3pCLE1BQU1wZ0gsRUFBUzdELEtBQUtzZSxZQUFZMGdHLGNBQWMwZixHQUM5QyxPQUFJNzZILEVBQ08sQ0FBRUEsU0FBUXU1SCxjQUFlc0IsR0FFN0IsQ0FBRTc2SCxPQUFRN0QsS0FBS3l2SCxhQUFhLzZGLE1BQU0vdkIsRUFBSSxHQUFJeTRILGNBQWUsS0FDcEUsRUFJUixDQUNBLE1BQU8sQ0FBRXY1SCxPQUFRN0QsS0FBS3l2SCxhQUFhLzZGLE1BQU0sR0FBSTBvRyxjQUFlLEtBQ2hFLENBQ0Esb0JBQUF2TSxDQUFxQnJsSCxHQUNqQixNQUFNOGlFLEVBQVd0dUUsS0FBS3E5SCwrQkFDbEIvdUQsRUFBUzh1RCxjQUNUcDlILEtBQUtzZSxZQUFZOUssYUFBYTg2RCxFQUFTenFFLE9BQVEySCxFQUFTOGlFLEVBQVM4dUQsZUFHakVwOUgsS0FBS3NlLFlBQVkyWixZQUFZcTJDLEVBQVN6cUUsT0FBUTJILEVBRXRELENBRUEsaUJBQUF1a0gsQ0FBa0J2a0gsRUFBUzZVLEdBQ3ZCLE1BQU0ya0csRUFBS2hsSCxLQUFLc2UsWUFBWTZnRyxnQkFBZ0IzekcsR0FDNUMsT0FBTzAwRyxFQUFVaUcsaUJBQWlCbkIsR0FBSXA4RyxJQUFJeVgsRUFDOUMsQ0FDQSxXQUFBdzlHLENBQVl4NkcsR0FFUixHQURBcmpCLEtBQUt5MkgsaUJBQWtCLEVBQ25CejJILEtBQUswb0QsVUFBVSt6RSxlQWkrRTNCLFNBQW1DNTNILEVBQUd3ZSxHQUNsQ3hlLEVBQUV1d0gsa0JBQWtCL3hHLEdBQ3BCeGUsRUFBRXV1SCxZQUFhLENBQ25CLENBbitFWXVMLENBQTBCMytILEtBQU1xakIsUUFHcEMsT0FBUXJqQixLQUFLK3hILGVBQ1QsS0FBS2xELEVBQWM0TSxRQUNmN0osRUFBbUI1eEgsS0FBTXFqQixHQUN6QixNQUVKLEtBQUt3ckcsRUFBY21ELFlBQ2ZFLEVBQWdCbHlILEtBQU1xakIsR0FDdEIsTUFFSixLQUFLd3JHLEVBQWN1RCxZQUNmQyxFQUFnQnJ5SCxLQUFNcWpCLEdBQ3RCLE1BRUosS0FBS3dyRyxFQUFjMkQsUUFDZmdCLEVBQVl4ekgsS0FBTXFqQixHQUNsQixNQUVKLEtBQUt3ckcsRUFBY29FLGtCQUNmaUIsRUFBb0JsMEgsS0FBTXFqQixHQUMxQixNQUVKLEtBQUt3ckcsRUFBY29GLFdBQ2ZNLEVBQWV2MEgsS0FBTXFqQixHQUNyQixNQUVKLEtBQUt3ckcsRUFBYzJGLFFBQ25CLEtBQUszRixFQUFjaUosV0FDbkIsS0FBS2pKLEVBQWNvSixRQUNuQixLQUFLcEosRUFBY3dFLFlBQ2ZzQixFQUFnQjMwSCxLQUFNcWpCLEdBQ3RCLE1BRUosS0FBS3dyRyxFQUFjNkosS0FDbkIsS0FBSzdKLEVBQWNzSixVQUNuQixLQUFLdEosRUFBY3FKLG1CQUNmbDRILEtBQUtvMUgsa0JBQWtCL3hHLEdBQ3ZCLE1BRUosS0FBS3dyRyxFQUFjeUksU0FDbkIsS0FBS3pJLEVBQWNrSixjQUNuQixLQUFLbEosRUFBY21KLE9BQ2Y2QixFQUFpQjc1SCxLQUFNcWpCLEdBQ3ZCLE1BRUosS0FBS3dyRyxFQUFjbUwsY0FDZkMsRUFBcUJqNkgsS0FBTXFqQixHQUMzQixNQUVKLEtBQUt3ckcsRUFBYzJMLGdCQUNmb0UsR0FBbUI1K0gsS0FBTXFqQixHQUN6QixNQUVKLEtBQUt3ckcsRUFBY3lLLFdBQ2Z1RixHQUFlNytILEtBQU1xakIsR0FDckIsTUFFSixLQUFLd3JHLEVBQWNpUSxpQkFDZkMsR0FBb0IvK0gsS0FBTXFqQixHQU10QyxDQUNBLGVBQUEwNkcsQ0FBZ0IxNkcsR0FFWixHQURBcmpCLEtBQUt5MkgsaUJBQWtCLEVBQ25CejJILEtBQUswb0QsVUFBVSt6RSxlQXU1RTNCLFNBQXVDNTNILEVBQUd3ZSxHQUN0Q0EsRUFBTWk2RyxNQUFROU8sRUFBUXRELHNCQUN0QnJtSCxFQUFFdXdILGtCQUFrQi94RyxFQUN4QixDQXo1RVkyN0csQ0FBOEJoL0gsS0FBTXFqQixRQUd4QyxPQUFRcmpCLEtBQUsreEgsZUFDVCxLQUFLbEQsRUFBYzRNLFFBQ2Y3SixFQUFtQjV4SCxLQUFNcWpCLEdBQ3pCLE1BRUosS0FBS3dyRyxFQUFjbUQsWUFDZkUsRUFBZ0JseUgsS0FBTXFqQixHQUN0QixNQUVKLEtBQUt3ckcsRUFBY3VELFlBQ2ZDLEVBQWdCcnlILEtBQU1xakIsR0FDdEIsTUFFSixLQUFLd3JHLEVBQWMyRCxRQUNmZ0IsRUFBWXh6SCxLQUFNcWpCLEdBQ2xCLE1BRUosS0FBS3dyRyxFQUFjb0Usa0JBQ2ZpQixFQUFvQmwwSCxLQUFNcWpCLEdBQzFCLE1BRUosS0FBS3dyRyxFQUFjb0YsV0FDZk0sRUFBZXYwSCxLQUFNcWpCLEdBQ3JCLE1BRUosS0FBS3dyRyxFQUFjNkosS0FDZjE0SCxLQUFLbzFILGtCQUFrQi94RyxHQUN2QixNQUVKLEtBQUt3ckcsRUFBY3lJLFNBQ25CLEtBQUt6SSxFQUFja0osY0FDbkIsS0FBS2xKLEVBQWNtSixPQUNmNkIsRUFBaUI3NUgsS0FBTXFqQixHQUN2QixNQUVKLEtBQUt3ckcsRUFBYzJMLGdCQUNmb0UsR0FBbUI1K0gsS0FBTXFqQixHQUN6QixNQUVKLEtBQUt3ckcsRUFBY3lLLFdBQ2Z1RixHQUFlNytILEtBQU1xakIsR0FDckIsTUFFSixLQUFLd3JHLEVBQWNpUSxpQkFDZkMsR0FBb0IvK0gsS0FBTXFqQixHQU10QyxDQUNBLFNBQUEyNkcsQ0FBVTM2RyxHQUVOLEdBREFyakIsS0FBS3kySCxpQkFBa0IsRUFDbkJ6MkgsS0FBSzA3SCxpQkFDTHpLLEVBQWNqeEgsS0FBTXFqQixRQUd4QixPQUFRcmpCLEtBQUsreEgsZUFDVCxLQUFLbEQsRUFBYzRNLFFBQ25CLEtBQUs1TSxFQUFjbUQsWUFDbkIsS0FBS25ELEVBQWN1RCxZQUNuQixLQUFLdkQsRUFBYzJELFFBQ25CLEtBQUszRCxFQUFjb0Usa0JBQ25CLEtBQUtwRSxFQUFjb0YsV0FDbkIsS0FBS3BGLEVBQWMyRixRQUNuQixLQUFLM0YsRUFBY3lJLFNBQ25CLEtBQUt6SSxFQUFjaUosV0FDbkIsS0FBS2pKLEVBQWMyTCxnQkFDbkIsS0FBSzNMLEVBQWNrSixjQUNuQixLQUFLbEosRUFBY21KLE9BQ25CLEtBQUtuSixFQUFjb0osUUFDbkIsS0FBS3BKLEVBQWNzSixVQUNuQixLQUFLdEosRUFBY3FKLG1CQUNuQixLQUFLckosRUFBY3dFLFlBQ25CLEtBQUt4RSxFQUFjMEosWUFDbkIsS0FBSzFKLEVBQWNvUSxlQUNmaE8sRUFBY2p4SCxLQUFNcWpCLEdBQ3BCLE1BRUosS0FBS3dyRyxFQUFjbUwsY0FDZnNCLEdBQWlCdDdILEtBQU1xakIsR0FDdkIsTUFFSixLQUFLd3JHLEVBQWN5SyxZQXFmL0IsU0FBd0N6MEgsRUFBR3dlLEdBQ3ZDeGUsRUFBRXFzSCxtQkFBbUI3dEcsRUFBT3hlLEVBQUU0cUgsYUFBYS82RixNQUFNLEdBQ3JELENBdGZnQndxRyxDQUErQmwvSCxLQUFNcWpCLEdBQ3JDLE1BRUosS0FBS3dyRyxFQUFjaVEsaUJBQ25CLEtBQUtqUSxFQUFjc1Esc0JBbWYvQixTQUFpQ3Q2SCxFQUFHd2UsR0FDaEN4ZSxFQUFFcXNILG1CQUFtQjd0RyxFQUFPeGUsRUFBRStrQyxTQUNsQyxDQXBmZ0J3MUYsQ0FBd0JwL0gsS0FBTXFqQixHQU0xQyxDQUNBLFNBQUE0NkcsQ0FBVTU2RyxHQUVOLE9BREFyakIsS0FBS3kySCxpQkFBa0IsRUFDZnoySCxLQUFLK3hILGVBQ1QsS0FBS2xELEVBQWM0TSxTQXdnQi9CLFNBQThCNTJILEVBQUd3ZSxHQUM3QnhlLEVBQUVpNEgsaUJBQWlCejVHLEdBQ25CLE1BQU0wYSxFQUFPMWEsRUFBTWc4RyxZQUFjbmYsRUFBVTNDLGNBQWNvRCxPQUFTNE4sRUFBUWhRLGdCQUFnQmw3RixHQUNyRmtyRyxFQUFRdE8sYUFBYTU4RixJQUN0QnhlLEVBQUVndEgsS0FBS3h1RyxFQUFPOG9HLEVBQWlCdEwsSUFBSXllLHNCQUV2Q3o2SCxFQUFFeVosWUFBWWdnRyxnQkFBZ0J6NUcsRUFBRStrQyxTQUFVN0wsR0FDMUNsNUIsRUFBRWt0SCxjQUFnQmxELEVBQWNtRCxXQUNwQyxDQS9nQmdCdU4sQ0FBcUJ2L0gsS0FBTXFqQixHQUMzQixNQUVKLEtBQUt3ckcsRUFBY3VELFlBQ25CLEtBQUt2RCxFQUFjMkQsUUFDbkIsS0FBSzNELEVBQWNvRSxrQkFDbkIsS0FBS3BFLEVBQWNvRixXQUNmajBILEtBQUs2eEgsS0FBS3h1RyxFQUFPOG9HLEVBQWlCdEwsSUFBSTJlLGtCQUN0QyxNQUVKLEtBQUszUSxFQUFjbUwsY0FDZnNCLEdBQWlCdDdILEtBQU1xakIsR0FNbkMsQ0FDQSxVQUFBbzhHLENBQVdwOEcsR0FDUHJqQixLQUFLeTJILGlCQUFrQixFQUN2QnoySCxLQUFLdzdILGFBQWVuNEcsRUFDcEJyakIsS0FBSzY2SCxpQkFBaUJ4M0csR0FDbEJBLEVBQU11ekcsY0FBZ0J2ekcsRUFBTXV2RyxnQkFDNUI1eUgsS0FBSzZ4SCxLQUFLeHVHLEVBQU84b0csRUFBaUJ0TCxJQUFJNmUsOENBRTlDLENBV0EsZ0JBQUE3RSxDQUFpQngzRyxHQUNUcmpCLEtBQUs0OUgsMkNBQTJDdjZHLEdBd3hFNUQsU0FBa0N4ZSxFQUFHd2UsR0FDakMsR0FBSXdvRyxFQUFlMUssV0FBVzk5RixHQUMxQnM4RyxHQUErQjk2SCxHQUMvQkEsRUFBRSs2SCwrQkFBK0J2OEcsT0FFaEMsQ0FDRCxNQUFNNkIsRUFBVXJnQixFQUFFZzRILDZCQUNaZ0QsRUFBWWg3SCxFQUFFeVosWUFBWTZnRyxnQkFBZ0JqNkYsR0FDNUMyNkcsSUFBYzNmLEVBQVVzQixHQUFHMEQsT0FDM0IyRyxFQUFlM0ssdUJBQXVCNzlGLEdBRWpDdzhHLElBQWMzZixFQUFVc0IsR0FBRzZELE1BQ2hDd0csRUFBZTlLLHNCQUFzQjE5RixHQUNyQ3dvRyxFQUFlNUssb0JBQW9CNTlGLElBRXZDd29HLEVBQWU3SyxvQkFBb0IzOUYsR0FDL0JBLEVBQU11ekcsWUFDTi94SCxFQUFFOHRILGVBQWV0dkcsRUFBT3c4RyxHQUd4Qmg3SCxFQUFFbXVILGVBQWUzdkcsRUFBT3c4RyxHQUU1Qng4RyxFQUFNdXZHLGdCQUFpQixDQUMzQixDQUNKLENBL3lFWWtOLENBQXlCOS9ILEtBQU1xakIsR0FHL0JyakIsS0FBSzQvSCwrQkFBK0J2OEcsRUFFNUMsQ0FDQSw4QkFBQXU4RyxDQUErQnY4RyxHQUMzQixPQUFRcmpCLEtBQUsreEgsZUFDVCxLQUFLbEQsRUFBYzRNLFFBQ2Y3SixFQUFtQjV4SCxLQUFNcWpCLEdBQ3pCLE1BRUosS0FBS3dyRyxFQUFjbUQsYUFzZS9CLFNBQTRCbnRILEVBQUd3ZSxHQUN2QkEsRUFBTWloRyxRQUFVcEUsRUFBVTJCLE9BQU92aEYsTUFDakN6N0IsRUFBRW11SCxlQUFlM3ZHLEVBQU82OEYsRUFBVXNCLEdBQUdsaEYsTUFDckN6N0IsRUFBRWt0SCxjQUFnQmxELEVBQWN1RCxhQUdoQ0YsRUFBZ0JydEgsRUFBR3dlLEVBRTNCLENBN2VnQjA4RyxDQUFtQi8vSCxLQUFNcWpCLEdBQ3pCLE1BRUosS0FBS3dyRyxFQUFjdUQsYUF3Zi9CLFNBQTRCdnRILEVBQUd3ZSxHQUMzQixPQUFRQSxFQUFNaWhHLE9BQ1YsS0FBS3BFLEVBQVUyQixPQUFPdmhGLEtBQ2xCb3lGLEVBQWU3dEgsRUFBR3dlLEdBQ2xCLE1BRUosS0FBSzY4RixFQUFVMkIsT0FBT21CLEtBQ2xCbitHLEVBQUVtdUgsZUFBZTN2RyxFQUFPNjhGLEVBQVVzQixHQUFHbGhGLE1BQ3JDejdCLEVBQUUwdEgsWUFBYzF0SCxFQUFFNHFILGFBQWF2cUcsUUFDL0JyZ0IsRUFBRWt0SCxjQUFnQmxELEVBQWMyRCxRQUNoQyxNQUVKLFFBQ0lILEVBQWdCeHRILEVBQUd3ZSxHQUcvQixDQXZnQmdCMjhHLENBQW1CaGdJLEtBQU1xakIsR0FDekIsTUFFSixLQUFLd3JHLEVBQWMyRCxRQUNmQyxFQUFlenlILEtBQU1xakIsR0FDckIsTUFFSixLQUFLd3JHLEVBQWNvRSxtQkFxbkIvQixTQUFnQ3B1SCxFQUFHd2UsR0FDL0IsT0FBUUEsRUFBTWloRyxPQUNWLEtBQUtwRSxFQUFVMkIsT0FBT3ZoRixLQUNsQm95RixFQUFlN3RILEVBQUd3ZSxHQUNsQixNQUVKLEtBQUs2OEYsRUFBVTJCLE9BQU84RSxTQUN0QixLQUFLekcsRUFBVTJCLE9BQU8rRSxRQUN0QixLQUFLMUcsRUFBVTJCLE9BQU9tQixLQUN0QixLQUFLOUMsRUFBVTJCLE9BQU9xRyxLQUN0QixLQUFLaEksRUFBVTJCLE9BQU95QixLQUN0QixLQUFLcEQsRUFBVTJCLE9BQU80RyxTQUN0QixLQUFLdkksRUFBVTJCLE9BQU80SCxNQUNsQmdKLEVBQWU1dEgsRUFBR3dlLEdBQ2xCLE1BRUosS0FBSzY4RixFQUFVMkIsT0FBTzhHLFNBQ2xCOWpILEVBQUVndEgsS0FBS3h1RyxFQUFPOG9HLEVBQWlCdEwsSUFBSW9mLHNCQUNuQyxNQUVKLFFBQ0kvTCxFQUFvQnJ2SCxFQUFHd2UsR0FHbkMsQ0E1b0JnQjY4RyxDQUF1QmxnSSxLQUFNcWpCLEdBQzdCLE1BRUosS0FBS3dyRyxFQUFjb0YsWUFtcUIvQixTQUEyQnB2SCxFQUFHd2UsR0FDMUIsT0FBUUEsRUFBTWloRyxPQUNWLEtBQUtwRSxFQUFVMkIsT0FBT3ZoRixLQUNsQm95RixFQUFlN3RILEVBQUd3ZSxHQUNsQixNQUVKLEtBQUs2OEYsRUFBVTJCLE9BQU9HLEtBQ2xCbjlHLEVBQUVtdUgsZUFBZTN2RyxFQUFPNjhGLEVBQVVzQixHQUFHbGhGLE1BQ3JDejdCLEVBQUV1dUgsWUFBYSxFQUNmdnVILEVBQUVrdEgsY0FBZ0JsRCxFQUFjMkYsUUFDaEMsTUFFSixLQUFLdFUsRUFBVTJCLE9BQU82RixTQUNsQjdpSCxFQUFFbXVILGVBQWUzdkcsRUFBTzY4RixFQUFVc0IsR0FBR2xoRixNQUNyQ3o3QixFQUFFa3RILGNBQWdCbEQsRUFBYzBKLFlBQ2hDLE1BRUosS0FBS3JZLEVBQVUyQixPQUFPNkUsS0FDdEIsS0FBS3hHLEVBQVUyQixPQUFPOEUsU0FDdEIsS0FBS3pHLEVBQVUyQixPQUFPK0UsUUFDdEIsS0FBSzFHLEVBQVUyQixPQUFPcUcsS0FDdEIsS0FBS2hJLEVBQVUyQixPQUFPeUIsS0FDdEIsS0FBS3BELEVBQVUyQixPQUFPNEcsU0FDdEIsS0FBS3ZJLEVBQVUyQixPQUFPd0gsT0FDdEIsS0FBS25KLEVBQVUyQixPQUFPNEgsTUFDdEIsS0FBS3ZKLEVBQVUyQixPQUFPK0gsU0FDdEIsS0FBSzFKLEVBQVUyQixPQUFPMkQsTUFDbEIzZ0gsRUFBRWd0SCxLQUFLeHVHLEVBQU84b0csRUFBaUJ0TCxJQUFJc2YsMkJBQ25DdDdILEVBQUU0cUgsYUFBYW5ySCxLQUFLTyxFQUFFMHRILFlBQWFyUyxFQUFVMkIsT0FBT21CLE1BQ3BEeVAsRUFBZTV0SCxFQUFHd2UsR0FDbEJ4ZSxFQUFFNHFILGFBQWFsOEcsT0FBTzFPLEVBQUUwdEgsYUFDeEIsTUFFSixLQUFLclMsRUFBVTJCLE9BQU9tQixLQUNsQm4rRyxFQUFFZ3RILEtBQUt4dUcsRUFBTzhvRyxFQUFpQnRMLElBQUkwUyxpQ0FDbkMsTUFFSixRQUNJZ0IsRUFBZTF2SCxFQUFHd2UsR0FHOUIsQ0Ezc0JnQis4RyxDQUFrQnBnSSxLQUFNcWpCLEdBQ3hCLE1BRUosS0FBS3dyRyxFQUFjMkYsUUFDZjlCLEVBQWUxeUgsS0FBTXFqQixHQUNyQixNQUVKLEtBQUt3ckcsRUFBY3lJLFNBQ2Y4QyxFQUFnQnA2SCxLQUFNcWpCLEdBQ3RCLE1BRUosS0FBS3dyRyxFQUFjbUwsY0FDZnNCLEdBQWlCdDdILEtBQU1xakIsR0FDdkIsTUFFSixLQUFLd3JHLEVBQWNpSixZQW9uRC9CLFNBQTJCanpILEVBQUd3ZSxHQUMxQixNQUFNcytGLEVBQUt0K0YsRUFBTWloRyxNQUNiK2IsR0FBb0J6M0gsSUFBSSs0RyxHQUNwQjk4RyxFQUFFNHFILGFBQWFtTCxnQkFBZ0IxYSxFQUFVMkIsT0FBT2lGLFdBQ2hEamlILEVBQUU0cUgsYUFBYTZHLHlCQUNmenhILEVBQUU0cUgsYUFBYXFFLHNCQUFzQjVULEVBQVUyQixPQUFPaUYsU0FDdERqaUgsRUFBRTJxSCx5QkFBeUJ2QixvQkFDM0JwcEgsRUFBRWt0SCxjQUFnQmxELEVBQWN5SSxTQUNoQzhDLEVBQWdCdjFILEVBQUd3ZSxJQUl2QnF2RyxFQUFlN3RILEVBQUd3ZSxFQUUxQixDQWpvRGdCaTlHLENBQWtCdGdJLEtBQU1xakIsR0FDeEIsTUFFSixLQUFLd3JHLEVBQWMyTCxnQkFDZkMsR0FBc0J6NkgsS0FBTXFqQixHQUM1QixNQUVKLEtBQUt3ckcsRUFBY2tKLGNBQ2Z1QyxHQUFvQnQ2SCxLQUFNcWpCLEdBQzFCLE1BRUosS0FBS3dyRyxFQUFjbUosT0FDZnVJLEdBQWN2Z0ksS0FBTXFqQixHQUNwQixNQUVKLEtBQUt3ckcsRUFBY29KLFNBazJEL0IsU0FBd0JwekgsRUFBR3dlLEdBQ3ZCLE1BQU1zK0YsRUFBS3QrRixFQUFNaWhHLE1BQ2IrYixHQUFvQnozSCxJQUFJKzRHLElBQ3BCOThHLEVBQUU0cUgsYUFBYW1MLGdCQUFnQjFhLEVBQVUyQixPQUFPa0ksS0FBT2xsSCxFQUFFNHFILGFBQWFtTCxnQkFBZ0IxYSxFQUFVMkIsT0FBT21JLE9BQ3ZHbmxILEVBQUV5NUgsa0JBQ0ZpQyxHQUFjMTdILEVBQUd3ZSxJQUlyQnF2RyxFQUFlN3RILEVBQUd3ZSxFQUUxQixDQTUyRGdCbTlHLENBQWV4Z0ksS0FBTXFqQixHQUNyQixNQUVKLEtBQUt3ckcsRUFBY3NKLFVBQ2ZzSSxHQUFpQnpnSSxLQUFNcWpCLEdBQ3ZCLE1BRUosS0FBS3dyRyxFQUFjcUosb0JBODlEL0IsU0FBaUNyekgsRUFBR3dlLEdBQ2hDLE1BQU1zK0YsRUFBS3QrRixFQUFNaWhHLE1BQ2IzQyxJQUFPekIsRUFBVTJCLE9BQU9pRixTQUN4Qm5GLElBQU96QixFQUFVMkIsT0FBT29DLE9BQ3hCdEMsSUFBT3pCLEVBQVUyQixPQUFPOEgsT0FDeEJoSSxJQUFPekIsRUFBVTJCLE9BQU9pSSxPQUN4Qm5JLElBQU96QixFQUFVMkIsT0FBT29JLE9BQ3hCdEksSUFBT3pCLEVBQVUyQixPQUFPcUksSUFDeEJ2SSxJQUFPekIsRUFBVTJCLE9BQU9rSSxJQUN4QnBJLElBQU96QixFQUFVMkIsT0FBT21JLElBQ3hCbmxILEVBQUU0cUgsYUFBYXFFLHNCQUFzQjVULEVBQVUyQixPQUFPMEgsUUFDdEQxa0gsRUFBRWt2SCxzQkFDRmx2SCxFQUFFZzJILGlCQUFpQngzRyxJQUduQm85RyxHQUFpQjU3SCxFQUFHd2UsRUFFNUIsQ0E5K0RnQnE5RyxDQUF3QjFnSSxLQUFNcWpCLEdBQzlCLE1BRUosS0FBS3dyRyxFQUFjd0UsYUFrZ0UvQixTQUE0Qnh1SCxFQUFHd2UsR0FDM0IsT0FBUUEsRUFBTWloRyxPQUVWLEtBQUtwRSxFQUFVMkIsT0FBTzZFLEtBQ3RCLEtBQUt4RyxFQUFVMkIsT0FBTzhFLFNBQ3RCLEtBQUt6RyxFQUFVMkIsT0FBTytFLFFBQ3RCLEtBQUsxRyxFQUFVMkIsT0FBT3FHLEtBQ3RCLEtBQUtoSSxFQUFVMkIsT0FBT3lCLEtBQ3RCLEtBQUtwRCxFQUFVMkIsT0FBTzRHLFNBQ3RCLEtBQUt2SSxFQUFVMkIsT0FBT3dILE9BQ3RCLEtBQUtuSixFQUFVMkIsT0FBTzRILE1BQ3RCLEtBQUt2SixFQUFVMkIsT0FBTytILFNBQ3RCLEtBQUsxSixFQUFVMkIsT0FBTzJELE1BQ2xCaU4sRUFBZTV0SCxFQUFHd2UsR0FDbEIsTUFHSixLQUFLNjhGLEVBQVUyQixPQUFPaUYsUUFDdEIsS0FBSzVHLEVBQVUyQixPQUFPbUYsU0FDdEIsS0FBSzlHLEVBQVUyQixPQUFPOEgsTUFDdEIsS0FBS3pKLEVBQVUyQixPQUFPaUksTUFDdEIsS0FBSzVKLEVBQVUyQixPQUFPb0ksTUFDbEJwbEgsRUFBRXl1SCx1QkFBdUIsR0FBS3pFLEVBQWN5SSxTQUM1Q3p5SCxFQUFFa3RILGNBQWdCbEQsRUFBY3lJLFNBQ2hDOEMsRUFBZ0J2MUgsRUFBR3dlLEdBQ25CLE1BRUosS0FBSzY4RixFQUFVMkIsT0FBT2tGLElBQ2xCbGlILEVBQUV5dUgsdUJBQXVCLEdBQUt6RSxFQUFjMkwsZ0JBQzVDMzFILEVBQUVrdEgsY0FBZ0JsRCxFQUFjMkwsZ0JBQ2hDQyxHQUFzQjUxSCxFQUFHd2UsR0FDekIsTUFFSixLQUFLNjhGLEVBQVUyQixPQUFPcUksR0FDbEJybEgsRUFBRXl1SCx1QkFBdUIsR0FBS3pFLEVBQWNrSixjQUM1Q2x6SCxFQUFFa3RILGNBQWdCbEQsRUFBY2tKLGNBQ2hDdUMsR0FBb0J6MUgsRUFBR3dlLEdBQ3ZCLE1BRUosS0FBSzY4RixFQUFVMkIsT0FBT2tJLEdBQ3RCLEtBQUs3SixFQUFVMkIsT0FBT21JLEdBQ2xCbmxILEVBQUV5dUgsdUJBQXVCLEdBQUt6RSxFQUFjbUosT0FDNUNuekgsRUFBRWt0SCxjQUFnQmxELEVBQWNtSixPQUNoQ3VJLEdBQWMxN0gsRUFBR3dlLEdBQ2pCLE1BRUosUUFDSXhlLEVBQUV5dUgsdUJBQXVCLEdBQUt6RSxFQUFjMkYsUUFDNUMzdkgsRUFBRWt0SCxjQUFnQmxELEVBQWMyRixRQUNoQzlCLEVBQWU3dEgsRUFBR3dlLEdBRzlCLENBcmpFZ0JzOUcsQ0FBbUIzZ0ksS0FBTXFqQixHQUN6QixNQUVKLEtBQUt3ckcsRUFBY3lLLFlBc2tFL0IsU0FBMkJ6MEgsRUFBR3dlLEdBQ3RCQSxFQUFNaWhHLFFBQVVwRSxFQUFVMkIsT0FBT3ZoRixLQUNqQ295RixFQUFlN3RILEVBQUd3ZSxHQUdsQnc3RyxHQUFlaDZILEVBQUd3ZSxFQUUxQixDQTVrRWdCdTlHLENBQWtCNWdJLEtBQU1xakIsR0FDeEIsTUFFSixLQUFLd3JHLEVBQWMwSixhQXFtRS9CLFNBQTRCMXpILEVBQUd3ZSxHQUMzQixPQUFRQSxFQUFNaWhHLE9BQ1YsS0FBS3BFLEVBQVUyQixPQUFPdmhGLEtBQ2xCb3lGLEVBQWU3dEgsRUFBR3dlLEdBQ2xCLE1BRUosS0FBSzY4RixFQUFVMkIsT0FBTzZGLFNBQ2xCN2lILEVBQUVtdUgsZUFBZTN2RyxFQUFPNjhGLEVBQVVzQixHQUFHbGhGLE1BQ3JDLE1BRUosS0FBSzQvRSxFQUFVMkIsT0FBTzRGLE1BQ2xCNWlILEVBQUU4dEgsZUFBZXR2RyxFQUFPNjhGLEVBQVVzQixHQUFHbGhGLE1BQ3JDamQsRUFBTXV2RyxnQkFBaUIsRUFDdkIsTUFFSixLQUFLMVMsRUFBVTJCLE9BQU80RyxTQUNsQmdLLEVBQWU1dEgsRUFBR3dlLEdBTTlCLENBMW5FZ0J3OUcsQ0FBbUI3Z0ksS0FBTXFqQixHQUN6QixNQUVKLEtBQUt3ckcsRUFBY29RLGdCQWtvRS9CLFNBQStCcDZILEVBQUd3ZSxHQUM5QixPQUFRQSxFQUFNaWhHLE9BQ1YsS0FBS3BFLEVBQVUyQixPQUFPdmhGLEtBQ2xCb3lGLEVBQWU3dEgsRUFBR3dlLEdBQ2xCLE1BRUosS0FBSzY4RixFQUFVMkIsT0FBTzRHLFNBQ2xCZ0ssRUFBZTV0SCxFQUFHd2UsR0FNOUIsQ0E5b0VnQnk5RyxDQUFzQjlnSSxLQUFNcWpCLEdBQzVCLE1BRUosS0FBS3dyRyxFQUFjaVEsa0JBbXBFL0IsU0FBZ0NqNkgsRUFBR3dlLEdBQzNCQSxFQUFNaWhHLFFBQVVwRSxFQUFVMkIsT0FBT3ZoRixLQUNqQ295RixFQUFlN3RILEVBQUd3ZSxHQUdsQjA3RyxHQUFvQmw2SCxFQUFHd2UsRUFFL0IsQ0F6cEVnQjA5RyxDQUF1Qi9nSSxLQUFNcWpCLEdBQzdCLE1BRUosS0FBS3dyRyxFQUFjc1Esc0JBNnBFL0IsU0FBb0N0NkgsRUFBR3dlLEdBQ25DLE9BQVFBLEVBQU1paEcsT0FDVixLQUFLcEUsRUFBVTJCLE9BQU92aEYsS0FDbEJveUYsRUFBZTd0SCxFQUFHd2UsR0FDbEIsTUFFSixLQUFLNjhGLEVBQVUyQixPQUFPNEcsU0FDbEJnSyxFQUFlNXRILEVBQUd3ZSxHQU05QixDQXpxRWdCMjlHLENBQTJCaGhJLEtBQU1xakIsR0FNN0MsQ0FDQSxRQUFBNjZHLENBQVM3NkcsR0FDTHJqQixLQUFLeTJILGlCQUFrQixFQUN2QnoySCxLQUFLdzdILGFBQWVuNEcsRUFDaEJyakIsS0FBSzA3SCxpQkF5c0VqQixTQUFnQzcySCxFQUFHd2UsR0FDL0IsR0FBSUEsRUFBTWloRyxRQUFVcEUsRUFBVTJCLE9BQU9waUUsR0FBS3A4QixFQUFNaWhHLFFBQVVwRSxFQUFVMkIsT0FBT0ksR0FHdkUsT0FGQTBkLEdBQStCOTZILFFBQy9CQSxFQUFFbzhILDZCQUE2QjU5RyxHQUduQyxJQUFLLElBQUkxZSxFQUFJRSxFQUFFNHFILGFBQWFLLFNBQVVuckgsRUFBSSxFQUFHQSxJQUFLLENBQzlDLE1BQU02RyxFQUFVM0csRUFBRTRxSCxhQUFhLzZGLE1BQU0vdkIsR0FDckMsR0FBSUUsRUFBRXlaLFlBQVk2Z0csZ0JBQWdCM3pHLEtBQWEwMEcsRUFBVXNCLEdBQUdsaEYsS0FBTSxDQUM5RHo3QixFQUFFbzhILDZCQUE2QjU5RyxHQUMvQixLQUNKLENBQ0EsTUFBTXhULEVBQVVoTCxFQUFFeVosWUFBWTRnRyxXQUFXMXpHLEdBQ3pDLEdBQUlxRSxFQUFRNlAsZ0JBQWtCMkQsRUFBTXhULFFBQVMsQ0FFekN3VCxFQUFNeFQsUUFBVUEsRUFDaEJoTCxFQUFFNHFILGFBQWFRLGdCQUFnQnRySCxHQUMvQixLQUNKLENBQ0osQ0FDSixDQTV0RVl1OEgsQ0FBdUJsaEksS0FBTXFqQixHQUc3QnJqQixLQUFLaWhJLDZCQUE2QjU5RyxFQUUxQyxDQUNBLDRCQUFBNDlHLENBQTZCNTlHLEdBQ3pCLE9BQVFyakIsS0FBSyt4SCxlQUNULEtBQUtsRCxFQUFjNE0sUUFDZjdKLEVBQW1CNXhILEtBQU1xakIsR0FDekIsTUFFSixLQUFLd3JHLEVBQWNtRCxhQXVZL0IsU0FBMEJudEgsRUFBR3dlLEdBQ3pCLE1BQU1zK0YsRUFBS3QrRixFQUFNaWhHLE1BQ2IzQyxJQUFPekIsRUFBVTJCLE9BQU92aEYsTUFBUXFoRixJQUFPekIsRUFBVTJCLE9BQU9tQixNQUFRckIsSUFBT3pCLEVBQVUyQixPQUFPRyxNQUFRTCxJQUFPekIsRUFBVTJCLE9BQU9JLElBQ3hIaVEsRUFBZ0JydEgsRUFBR3dlLEVBRTNCLENBM1lnQjg5RyxDQUFpQm5oSSxLQUFNcWpCLEdBQ3ZCLE1BRUosS0FBS3dyRyxFQUFjdUQsYUFpYS9CLFNBQTBCdnRILEVBQUd3ZSxHQUN6QixNQUFNcytGLEVBQUt0K0YsRUFBTWloRyxNQUNiM0MsSUFBT3pCLEVBQVUyQixPQUFPbUIsTUFBUXJCLElBQU96QixFQUFVMkIsT0FBT0csTUFBUUwsSUFBT3pCLEVBQVUyQixPQUFPdmhGLE1BQVFxaEYsSUFBT3pCLEVBQVUyQixPQUFPSSxHQUN4SG9RLEVBQWdCeHRILEVBQUd3ZSxHQUduQnhlLEVBQUVndEgsS0FBS3h1RyxFQUFPOG9HLEVBQWlCdEwsSUFBSW1ULGlDQUUzQyxDQXhhZ0JvTixDQUFpQnBoSSxLQUFNcWpCLEdBQ3ZCLE1BRUosS0FBS3dyRyxFQUFjMkQsU0FxZS9CLFNBQXNCM3RILEVBQUd3ZSxHQUNyQixPQUFRQSxFQUFNaWhHLE9BQ1YsS0FBS3BFLEVBQVUyQixPQUFPbUIsS0FDbEJuK0csRUFBRTRxSCxhQUFhdmlHLE1BQ2Zyb0IsRUFBRWt0SCxjQUFnQmxELEVBQWNvRixXQUNoQyxNQUVKLEtBQUsvVCxFQUFVMkIsT0FBT0csS0FDdEIsS0FBSzlCLEVBQVUyQixPQUFPSSxHQUN0QixLQUFLL0IsRUFBVTJCLE9BQU92aEYsS0FDbEJrekYsRUFBWTN1SCxFQUFHd2UsR0FDZixNQUVKLEtBQUs2OEYsRUFBVTJCLE9BQU8rSCxTQUNsQjZKLEVBQXFCNXVILEVBQUd3ZSxHQUN4QixNQUVKLFFBQ0l4ZSxFQUFFZ3RILEtBQUt4dUcsRUFBTzhvRyxFQUFpQnRMLElBQUltVCxrQ0FHL0MsQ0F6ZmdCcU4sQ0FBYXJoSSxLQUFNcWpCLEdBQ25CLE1BRUosS0FBS3dyRyxFQUFjb0UsbUJBc2lCL0IsU0FBOEJwdUgsRUFBR3dlLEdBQzdCLE9BQVFBLEVBQU1paEcsT0FDVixLQUFLcEUsRUFBVTJCLE9BQU84RyxTQUNsQjlqSCxFQUFFNHFILGFBQWF2aUcsTUFDZnJvQixFQUFFa3RILGNBQWdCbEQsRUFBYzJELFFBQ2hDLE1BRUosS0FBS3RTLEVBQVUyQixPQUFPSSxHQUNsQmlTLEVBQW9CcnZILEVBQUd3ZSxHQUN2QixNQUVKLFFBQ0l4ZSxFQUFFZ3RILEtBQUt4dUcsRUFBTzhvRyxFQUFpQnRMLElBQUltVCxrQ0FHL0MsQ0FwakJnQnNOLENBQXFCdGhJLEtBQU1xakIsR0FDM0IsTUFFSixLQUFLd3JHLEVBQWNvRixZQXFtQi9CLFNBQXlCcHZILEVBQUd3ZSxHQUN4QixPQUFRQSxFQUFNaWhHLE9BQ1YsS0FBS3BFLEVBQVUyQixPQUFPRyxLQUN0QixLQUFLOUIsRUFBVTJCLE9BQU92aEYsS0FDdEIsS0FBSzQvRSxFQUFVMkIsT0FBT0ksR0FDbEJzUyxFQUFlMXZILEVBQUd3ZSxHQUNsQixNQUVKLEtBQUs2OEYsRUFBVTJCLE9BQU8rSCxTQUNsQjZKLEVBQXFCNXVILEVBQUd3ZSxHQUN4QixNQUVKLFFBQ0l4ZSxFQUFFZ3RILEtBQUt4dUcsRUFBTzhvRyxFQUFpQnRMLElBQUltVCxrQ0FHL0MsQ0FwbkJnQnVOLENBQWdCdmhJLEtBQU1xakIsR0FDdEIsTUFFSixLQUFLd3JHLEVBQWMyRixRQUNmUyxFQUFhajFILEtBQU1xakIsR0FDbkIsTUFFSixLQUFLd3JHLEVBQWM2SixNQXcwQy9CLFNBQXNCN3pILEVBQUd3ZSxHQUNyQixJQUFJeGIsRUFDQXdiLEVBQU1paEcsUUFBVXBFLEVBQVUyQixPQUFPd0gsU0FDTixRQUExQnhoSCxFQUFLaEQsRUFBRTAySCxxQkFBa0MsSUFBUDF6SCxHQUF5QkEsRUFBRzdFLEtBQUs2QixFQUFHQSxFQUFFNHFILGFBQWF2cUcsVUFFMUZyZ0IsRUFBRTRxSCxhQUFhdmlHLE1BQ2Zyb0IsRUFBRWt0SCxjQUFnQmx0SCxFQUFFNHpILHFCQUN4QixDQTkwQ2dCK0ksQ0FBYXhoSSxLQUFNcWpCLEdBQ25CLE1BRUosS0FBS3dyRyxFQUFjeUksU0FDZjZELEVBQWNuN0gsS0FBTXFqQixHQUNwQixNQUVKLEtBQUt3ckcsRUFBY21MLGNBQ2ZzQixHQUFpQnQ3SCxLQUFNcWpCLEdBQ3ZCLE1BRUosS0FBS3dyRyxFQUFjaUosWUF1aEQvQixTQUF5Qmp6SCxFQUFHd2UsR0FDeEIsTUFBTXMrRixFQUFLdCtGLEVBQU1paEcsTUFDakIsT0FBUTNDLEdBQ0osS0FBS3pCLEVBQVUyQixPQUFPaUYsUUFDdEIsS0FBSzVHLEVBQVUyQixPQUFPb0MsTUFDZHAvRyxFQUFFNHFILGFBQWFtTCxnQkFBZ0IxYSxFQUFVMkIsT0FBT2lGLFdBQ2hEamlILEVBQUU0cUgsYUFBYTZHLHlCQUNmenhILEVBQUU0cUgsYUFBYXFFLHNCQUFzQjVULEVBQVUyQixPQUFPaUYsU0FDdERqaUgsRUFBRTJxSCx5QkFBeUJ2QixvQkFDM0JwcEgsRUFBRWt0SCxjQUFnQmxELEVBQWN5SSxTQUM1QjNWLElBQU96QixFQUFVMkIsT0FBT29DLE9BQ3hCa1gsRUFBY3QySCxFQUFHd2UsSUFHekIsTUFFSixLQUFLNjhGLEVBQVUyQixPQUFPRyxLQUN0QixLQUFLOUIsRUFBVTJCLE9BQU9rRixJQUN0QixLQUFLN0csRUFBVTJCLE9BQU9tRixTQUN0QixLQUFLOUcsRUFBVTJCLE9BQU92aEYsS0FDdEIsS0FBSzQvRSxFQUFVMkIsT0FBTzhILE1BQ3RCLEtBQUt6SixFQUFVMkIsT0FBT2tJLEdBQ3RCLEtBQUs3SixFQUFVMkIsT0FBT2lJLE1BQ3RCLEtBQUs1SixFQUFVMkIsT0FBT21JLEdBQ3RCLEtBQUs5SixFQUFVMkIsT0FBT29JLE1BQ3RCLEtBQUsvSixFQUFVMkIsT0FBT3FJLEdBRWxCLE1BRUosUUFDSStLLEVBQWFwd0gsRUFBR3dlLEdBRzVCLENBdmpEZ0JvK0csQ0FBZ0J6aEksS0FBTXFqQixHQUN0QixNQUVKLEtBQUt3ckcsRUFBYzJMLGlCQTJrRC9CLFNBQTZCMzFILEVBQUd3ZSxHQUM1QixPQUFRQSxFQUFNaWhHLE9BQ1YsS0FBS3BFLEVBQVUyQixPQUFPbUYsU0FDZG5pSCxFQUFFNHFILGFBQWFtRSxlQUFpQjFULEVBQVUyQixPQUFPbUYsV0FDakRuaUgsRUFBRTRxSCxhQUFhdmlHLE1BQ2Zyb0IsRUFBRWt0SCxjQUFnQmxELEVBQWN5SSxVQUVwQyxNQUVKLEtBQUtwWCxFQUFVMkIsT0FBTytILFNBQ2xCNkosRUFBcUI1dUgsRUFBR3dlLEdBQ3hCLE1BRUosS0FBSzY4RixFQUFVMkIsT0FBT2tGLElBRWxCLE1BRUosUUFDSTZYLEdBQW1CLzVILEVBQUd3ZSxHQUdsQyxDQS9sRGdCcStHLENBQW9CMWhJLEtBQU1xakIsR0FDMUIsTUFFSixLQUFLd3JHLEVBQWNrSixjQUNmNEosR0FBa0IzaEksS0FBTXFqQixHQUN4QixNQUVKLEtBQUt3ckcsRUFBY21KLE9BQ2Y0SixHQUFZNWhJLEtBQU1xakIsR0FDbEIsTUFFSixLQUFLd3JHLEVBQWNvSixTQWt3RC9CLFNBQXNCcHpILEVBQUd3ZSxHQUNyQixNQUFNcytGLEVBQUt0K0YsRUFBTWloRyxNQUNqQixPQUFRM0MsR0FDSixLQUFLekIsRUFBVTJCLE9BQU9rSSxHQUN0QixLQUFLN0osRUFBVTJCLE9BQU9tSSxHQUNkbmxILEVBQUU0cUgsYUFBYW1MLGdCQUFnQmpaLEtBQy9COThHLEVBQUU0cUgsYUFBYTZHLHlCQUNmenhILEVBQUU0cUgsYUFBYXFFLHNCQUFzQm5TLEdBQ3JDOThHLEVBQUUycUgseUJBQXlCdkIsb0JBQzNCcHBILEVBQUVrdEgsY0FBZ0JsRCxFQUFjbUosUUFFcEMsTUFFSixLQUFLOVgsRUFBVTJCLE9BQU9vQyxNQUN0QixLQUFLL0QsRUFBVTJCLE9BQU84SCxNQUN0QixLQUFLekosRUFBVTJCLE9BQU9pSSxNQUN0QixLQUFLNUosRUFBVTJCLE9BQU9vSSxNQUN0QixLQUFLL0osRUFBVTJCLE9BQU9xSSxHQUNkcmxILEVBQUU0cUgsYUFBYW1MLGdCQUFnQmpaLEtBQy9COThHLEVBQUV5NUgsa0JBQ0ZzRCxHQUFZLzhILEVBQUd3ZSxJQUVuQixNQUVKLEtBQUs2OEYsRUFBVTJCLE9BQU9HLEtBQ3RCLEtBQUs5QixFQUFVMkIsT0FBT2lGLFFBQ3RCLEtBQUs1RyxFQUFVMkIsT0FBT2tGLElBQ3RCLEtBQUs3RyxFQUFVMkIsT0FBT21GLFNBQ3RCLEtBQUs5RyxFQUFVMkIsT0FBT3ZoRixLQUVsQixNQUVKLFFBQ0kyMEYsRUFBYXB3SCxFQUFHd2UsR0FHNUIsQ0FyeURnQncrRyxDQUFhN2hJLEtBQU1xakIsR0FDbkIsTUFFSixLQUFLd3JHLEVBQWNzSixVQUNmMkosR0FBZTloSSxLQUFNcWpCLEdBQ3JCLE1BRUosS0FBS3dyRyxFQUFjcUosb0JBbzREL0IsU0FBK0JyekgsRUFBR3dlLEdBQzlCLE1BQU1zK0YsRUFBS3QrRixFQUFNaWhHLE1BQ2IzQyxJQUFPekIsRUFBVTJCLE9BQU9pRixTQUN4Qm5GLElBQU96QixFQUFVMkIsT0FBT29DLE9BQ3hCdEMsSUFBT3pCLEVBQVUyQixPQUFPOEgsT0FDeEJoSSxJQUFPekIsRUFBVTJCLE9BQU9pSSxPQUN4Qm5JLElBQU96QixFQUFVMkIsT0FBT29JLE9BQ3hCdEksSUFBT3pCLEVBQVUyQixPQUFPcUksSUFDeEJ2SSxJQUFPekIsRUFBVTJCLE9BQU9rSSxJQUN4QnBJLElBQU96QixFQUFVMkIsT0FBT21JLEdBQ3BCbmxILEVBQUU0cUgsYUFBYW1MLGdCQUFnQmpaLEtBQy9COThHLEVBQUU0cUgsYUFBYXFFLHNCQUFzQjVULEVBQVUyQixPQUFPMEgsUUFDdEQxa0gsRUFBRWt2SCxzQkFDRmx2SCxFQUFFcTVILFNBQVM3NkcsSUFJZnkrRyxHQUFlajlILEVBQUd3ZSxFQUUxQixDQXQ1RGdCMCtHLENBQXNCL2hJLEtBQU1xakIsR0FDNUIsTUFFSixLQUFLd3JHLEVBQWN3RSxhQTI4RC9CLFNBQTBCeHVILEVBQUd3ZSxHQUNyQkEsRUFBTWloRyxRQUFVcEUsRUFBVTJCLE9BQU8rSCxVQUNqQzZKLEVBQXFCNXVILEVBQUd3ZSxFQUVoQyxDQTk4RGdCMitHLENBQWlCaGlJLEtBQU1xakIsR0FDdkIsTUFFSixLQUFLd3JHLEVBQWN5SyxXQUNmRSxHQUFnQng1SCxLQUFNcWpCLEdBQ3RCLE1BRUosS0FBS3dyRyxFQUFjMEosYUFnaEUvQixTQUEwQjF6SCxFQUFHd2UsR0FDckJBLEVBQU1paEcsUUFBVXBFLEVBQVUyQixPQUFPNkYsVUFBYTdpSCxFQUFFNHFILGFBQWF3Uyw2QkFDN0RwOUgsRUFBRTRxSCxhQUFhdmlHLE1BQ1Zyb0IsRUFBRXduSCxpQkFBbUJ4bkgsRUFBRTRxSCxhQUFhbUUsZUFBaUIxVCxFQUFVMkIsT0FBTzZGLFdBQ3ZFN2lILEVBQUVrdEgsY0FBZ0JsRCxFQUFjb1EsZ0JBRzVDLENBdGhFZ0JpRCxDQUFpQmxpSSxLQUFNcWpCLEdBQ3ZCLE1BRUosS0FBS3dyRyxFQUFjb1EsZ0JBb2lFL0IsU0FBNkJwNkgsRUFBR3dlLEdBQ3hCQSxFQUFNaWhHLFFBQVVwRSxFQUFVMkIsT0FBT3ZoRixPQUNqQ3o3QixFQUFFa3RILGNBQWdCbEQsRUFBY3NRLHFCQUV4QyxDQXZpRWdCZ0QsQ0FBb0JuaUksS0FBTXFqQixHQUMxQixNQUVKLEtBQUt3ckcsRUFBY2lRLGlCQUNmQyxHQUFvQi8rSCxLQUFNcWpCLEdBTXRDLENBQ0EsS0FBQTg2RyxDQUFNOTZHLEdBQ0YsT0FBUXJqQixLQUFLK3hILGVBQ1QsS0FBS2xELEVBQWM0TSxRQUNmN0osRUFBbUI1eEgsS0FBTXFqQixHQUN6QixNQUVKLEtBQUt3ckcsRUFBY21ELFlBQ2ZFLEVBQWdCbHlILEtBQU1xakIsR0FDdEIsTUFFSixLQUFLd3JHLEVBQWN1RCxZQUNmQyxFQUFnQnJ5SCxLQUFNcWpCLEdBQ3RCLE1BRUosS0FBS3dyRyxFQUFjMkQsUUFDZmdCLEVBQVl4ekgsS0FBTXFqQixHQUNsQixNQUVKLEtBQUt3ckcsRUFBY29FLGtCQUNmaUIsRUFBb0JsMEgsS0FBTXFqQixHQUMxQixNQUVKLEtBQUt3ckcsRUFBY29GLFdBQ2ZNLEVBQWV2MEgsS0FBTXFqQixHQUNyQixNQUVKLEtBQUt3ckcsRUFBYzJGLFFBQ25CLEtBQUszRixFQUFjeUksU0FDbkIsS0FBS3pJLEVBQWNpSixXQUNuQixLQUFLakosRUFBYzJMLGdCQUNuQixLQUFLM0wsRUFBY2tKLGNBQ25CLEtBQUtsSixFQUFjbUosT0FDbkIsS0FBS25KLEVBQWNvSixRQUNuQixLQUFLcEosRUFBY3NKLFVBQ25CLEtBQUt0SixFQUFjcUosbUJBQ2ZoRCxFQUFVbDFILEtBQU1xakIsR0FDaEIsTUFFSixLQUFLd3JHLEVBQWM2SixNQTB1Qy9CLFNBQW1CN3pILEVBQUd3ZSxHQUNsQnhlLEVBQUVndEgsS0FBS3h1RyxFQUFPOG9HLEVBQWlCdEwsSUFBSXVoQixvQ0FDbkN2OUgsRUFBRTRxSCxhQUFhdmlHLE1BQ2Zyb0IsRUFBRWt0SCxjQUFnQmx0SCxFQUFFNHpILHNCQUNwQjV6SCxFQUFFczVILE1BQU05NkcsRUFDWixDQTl1Q2dCZy9HLENBQVVyaUksS0FBTXFqQixHQUNoQixNQUVKLEtBQUt3ckcsRUFBY21MLGNBQ2ZzQixHQUFpQnQ3SCxLQUFNcWpCLEdBQ3ZCLE1BRUosS0FBS3dyRyxFQUFjd0UsWUFDZnVHLEdBQWM1NUgsS0FBTXFqQixHQUNwQixNQUVKLEtBQUt3ckcsRUFBY3lLLFdBQ25CLEtBQUt6SyxFQUFjMEosWUFDbkIsS0FBSzFKLEVBQWNvUSxlQUNuQixLQUFLcFEsRUFBY2lRLGlCQUNuQixLQUFLalEsRUFBY3NRLHFCQUNmL04sRUFBWXB4SCxLQUFNcWpCLEdBTTlCLENBQ0EscUJBQUErNkcsQ0FBc0IvNkcsR0FDbEIsR0FBSXJqQixLQUFLeTJILGtCQUNMejJILEtBQUt5MkgsaUJBQWtCLEVBQ25CcHpHLEVBQU1pNkcsTUFBTXg5RyxXQUFXLEtBQU8wdUcsRUFBUXZELFlBQVlxWCxXQUFXLENBQzdELEdBQTJCLElBQXZCai9HLEVBQU1pNkcsTUFBTWo5SCxPQUNaLE9BRUpnakIsRUFBTWk2RyxNQUFRajZHLEVBQU1pNkcsTUFBTXI3RyxPQUFPLEVBQ3JDLENBRUosR0FBSWppQixLQUFLMG9ELFVBQVUrekUsY0FDZno4SCxLQUFLbzFILGtCQUFrQi94RyxRQUczQixPQUFRcmpCLEtBQUsreEgsZUFDVCxLQUFLbEQsRUFBYzJELFFBQ25CLEtBQUszRCxFQUFjb0Usa0JBQ25CLEtBQUtwRSxFQUFjb0YsV0FDbkIsS0FBS3BGLEVBQWM2SixLQUNuQixLQUFLN0osRUFBYzJMLGdCQUNuQixLQUFLM0wsRUFBY3NKLFVBQ25CLEtBQUt0SixFQUFjcUosbUJBQ25CLEtBQUtySixFQUFjMEosWUFDbkIsS0FBSzFKLEVBQWNvUSxlQUNmai9ILEtBQUtvMUgsa0JBQWtCL3hHLEdBQ3ZCLE1BRUosS0FBS3dyRyxFQUFjMkYsUUFDbkIsS0FBSzNGLEVBQWNpSixXQUNuQixLQUFLakosRUFBY29KLFFBQ25CLEtBQUtwSixFQUFjd0UsWUFDbkIsS0FBS3hFLEVBQWN5SyxXQUNuQixLQUFLekssRUFBY2lRLGlCQUNuQixLQUFLalEsRUFBY3NRLHFCQUNmdEssRUFBMEI3MEgsS0FBTXFqQixHQUNoQyxNQUVKLEtBQUt3ckcsRUFBY3lJLFNBQ25CLEtBQUt6SSxFQUFja0osY0FDbkIsS0FBS2xKLEVBQWNtSixPQUNmNkIsRUFBaUI3NUgsS0FBTXFqQixHQUN2QixNQUVKLEtBQUt3ckcsRUFBY21MLGNBQ2ZFLEVBQStCbDZILEtBQU1xakIsR0FNakQsR0FtMkNKLE1BQU1nOUcsR0FBc0IsSUFBSTkzSCxJQUFJLENBQUMyM0csRUFBVTJCLE9BQU9pRixRQUFTNUcsRUFBVTJCLE9BQU9rRixJQUFLN0csRUFBVTJCLE9BQU9tRixTQUFVOUcsRUFBVTJCLE9BQU84SCxNQUFPekosRUFBVTJCLE9BQU9rSSxHQUFJN0osRUFBVTJCLE9BQU9pSSxNQUFPNUosRUFBVTJCLE9BQU9tSSxHQUFJOUosRUFBVTJCLE9BQU9vSSxNQUFPL0osRUFBVTJCLE9BQU9xSSxLQW9EblAsU0FBU3VRLEdBQXNCNTFILEVBQUd3ZSxHQUM5QixPQUFRQSxFQUFNaWhHLE9BQ1YsS0FBS3BFLEVBQVUyQixPQUFPdmhGLEtBQ2xCb3lGLEVBQWU3dEgsRUFBR3dlLEdBQ2xCLE1BRUosS0FBSzY4RixFQUFVMkIsT0FBT2tGLElBQ2xCbGlILEVBQUU4dEgsZUFBZXR2RyxFQUFPNjhGLEVBQVVzQixHQUFHbGhGLE1BQ3JDamQsRUFBTXV2RyxnQkFBaUIsRUFDdkIsTUFFSixLQUFLMVMsRUFBVTJCLE9BQU8rSCxTQUNsQjZJLEVBQWU1dEgsRUFBR3dlLEdBQ2xCLE1BRUosUUFDSXU3RyxHQUFtQi81SCxFQUFHd2UsR0FHbEMsQ0F1QkEsU0FBU3U3RyxHQUFtQi81SCxFQUFHd2UsR0FDdkJ4ZSxFQUFFNHFILGFBQWFtRSxlQUFpQjFULEVBQVUyQixPQUFPbUYsV0FDakRuaUgsRUFBRTRxSCxhQUFhdmlHLE1BQ2Zyb0IsRUFBRWt0SCxjQUFnQmxELEVBQWN5SSxTQUNoQ3p5SCxFQUFFb3RILGNBQWM1dUcsR0FFeEIsQ0FHQSxTQUFTaTNHLEdBQW9CejFILEVBQUd3ZSxHQUM1QixPQUFRQSxFQUFNaWhHLE9BQ1YsS0FBS3BFLEVBQVUyQixPQUFPcUksR0FDbEJybEgsRUFBRTRxSCxhQUFhOFMsOEJBQ2YxOUgsRUFBRW11SCxlQUFlM3ZHLEVBQU82OEYsRUFBVXNCLEdBQUdsaEYsTUFDckN6N0IsRUFBRWt0SCxjQUFnQmxELEVBQWNtSixPQUNoQyxNQUVKLEtBQUs5WCxFQUFVMkIsT0FBT21JLEdBQ3RCLEtBQUs5SixFQUFVMkIsT0FBT2tJLEdBQ2xCbGxILEVBQUU0cUgsYUFBYThTLDhCQUNmMTlILEVBQUV5dEgsbUJBQW1CcFMsRUFBVThGLFVBQVVrRSxHQUFJaEssRUFBVTJCLE9BQU9xSSxJQUM5RHJsSCxFQUFFa3RILGNBQWdCbEQsRUFBY21KLE9BQ2hDdUksR0FBYzE3SCxFQUFHd2UsR0FDakIsTUFFSixLQUFLNjhGLEVBQVUyQixPQUFPaUYsUUFDdEIsS0FBSzVHLEVBQVUyQixPQUFPa0YsSUFDdEIsS0FBSzdHLEVBQVUyQixPQUFPbUYsU0FDdEIsS0FBSzlHLEVBQVUyQixPQUFPOEgsTUFDdEIsS0FBS3pKLEVBQVUyQixPQUFPaUksTUFDdEIsS0FBSzVKLEVBQVUyQixPQUFPb0ksTUFDZHBsSCxFQUFFNHFILGFBQWErUyxvQ0FDZjM5SCxFQUFFNHFILGFBQWE4Uyw4QkFDZjE5SCxFQUFFNHFILGFBQWF2aUcsTUFDZnJvQixFQUFFa3RILGNBQWdCbEQsRUFBY3lJLFNBQ2hDOEMsRUFBZ0J2MUgsRUFBR3dlLElBRXZCLE1BRUosUUFDSSsyRyxFQUFnQnYxSCxFQUFHd2UsR0FHL0IsQ0FDQSxTQUFTcytHLEdBQWtCOThILEVBQUd3ZSxHQUMxQixNQUFNcytGLEVBQUt0K0YsRUFBTWloRyxNQUNqQixPQUFRamhHLEVBQU1paEcsT0FDVixLQUFLcEUsRUFBVTJCLE9BQU84SCxNQUN0QixLQUFLekosRUFBVTJCLE9BQU9pSSxNQUN0QixLQUFLNUosRUFBVTJCLE9BQU9vSSxNQUNkcGxILEVBQUU0cUgsYUFBYW1MLGdCQUFnQmpaLEtBQy9COThHLEVBQUU0cUgsYUFBYThTLDhCQUNmMTlILEVBQUU0cUgsYUFBYXZpRyxNQUNmcm9CLEVBQUVrdEgsY0FBZ0JsRCxFQUFjeUksVUFFcEMsTUFFSixLQUFLcFgsRUFBVTJCLE9BQU9vQyxNQUNkcC9HLEVBQUU0cUgsYUFBYStTLG9DQUNmMzlILEVBQUU0cUgsYUFBYThTLDhCQUNmMTlILEVBQUU0cUgsYUFBYXZpRyxNQUNmcm9CLEVBQUVrdEgsY0FBZ0JsRCxFQUFjeUksU0FDaEM2RCxFQUFjdDJILEVBQUd3ZSxJQUVyQixNQUVKLEtBQUs2OEYsRUFBVTJCLE9BQU9HLEtBQ3RCLEtBQUs5QixFQUFVMkIsT0FBT2lGLFFBQ3RCLEtBQUs1RyxFQUFVMkIsT0FBT2tGLElBQ3RCLEtBQUs3RyxFQUFVMkIsT0FBT21GLFNBQ3RCLEtBQUs5RyxFQUFVMkIsT0FBT3ZoRixLQUN0QixLQUFLNC9FLEVBQVUyQixPQUFPa0ksR0FDdEIsS0FBSzdKLEVBQVUyQixPQUFPbUksR0FDdEIsS0FBSzlKLEVBQVUyQixPQUFPcUksR0FFbEIsTUFFSixRQUNJaVIsRUFBY3QySCxFQUFHd2UsR0FHN0IsQ0FHQSxTQUFTazlHLEdBQWMxN0gsRUFBR3dlLEdBQ3RCLE9BQVFBLEVBQU1paEcsT0FDVixLQUFLcEUsRUFBVTJCLE9BQU9tSSxHQUN0QixLQUFLOUosRUFBVTJCLE9BQU9rSSxHQUNsQmxsSCxFQUFFNHFILGFBQWFnVCw2QkFDZjU5SCxFQUFFbXVILGVBQWUzdkcsRUFBTzY4RixFQUFVc0IsR0FBR2xoRixNQUNyQ3o3QixFQUFFa3RILGNBQWdCbEQsRUFBY29KLFFBQ2hDcHpILEVBQUUycUgseUJBQXlCN0IsZUFDM0IsTUFFSixLQUFLek4sRUFBVTJCLE9BQU9pRixRQUN0QixLQUFLNUcsRUFBVTJCLE9BQU9rRixJQUN0QixLQUFLN0csRUFBVTJCLE9BQU9tRixTQUN0QixLQUFLOUcsRUFBVTJCLE9BQU84SCxNQUN0QixLQUFLekosRUFBVTJCLE9BQU9pSSxNQUN0QixLQUFLNUosRUFBVTJCLE9BQU9vSSxNQUN0QixLQUFLL0osRUFBVTJCLE9BQU9xSSxHQUNkcmxILEVBQUU0cUgsYUFBYW1MLGdCQUFnQjFhLEVBQVUyQixPQUFPcUksTUFDaERybEgsRUFBRTRxSCxhQUFhZ1QsNkJBQ2Y1OUgsRUFBRTRxSCxhQUFhdmlHLE1BQ2Zyb0IsRUFBRWt0SCxjQUFnQmxELEVBQWNrSixjQUNoQ3VDLEdBQW9CejFILEVBQUd3ZSxJQUUzQixNQUVKLFFBQ0krMkcsRUFBZ0J2MUgsRUFBR3dlLEdBRy9CLENBQ0EsU0FBU3UrRyxHQUFZLzhILEVBQUd3ZSxHQUNwQixPQUFRQSxFQUFNaWhHLE9BQ1YsS0FBS3BFLEVBQVUyQixPQUFPcUksR0FDZHJsSCxFQUFFNHFILGFBQWFtTCxnQkFBZ0IxYSxFQUFVMkIsT0FBT3FJLE1BQ2hEcmxILEVBQUU0cUgsYUFBYWdULDZCQUNmNTlILEVBQUU0cUgsYUFBYXZpRyxNQUNmcm9CLEVBQUVrdEgsY0FBZ0JsRCxFQUFja0osZUFFcEMsTUFFSixLQUFLN1gsRUFBVTJCLE9BQU9vQyxNQUNkcC9HLEVBQUU0cUgsYUFBYW1MLGdCQUFnQjFhLEVBQVUyQixPQUFPcUksTUFDaERybEgsRUFBRTRxSCxhQUFhZ1QsNkJBQ2Y1OUgsRUFBRTRxSCxhQUFhdmlHLE1BQ2Zyb0IsRUFBRWt0SCxjQUFnQmxELEVBQWNrSixjQUNoQzRKLEdBQWtCOThILEVBQUd3ZSxJQUV6QixNQUVKLEtBQUs2OEYsRUFBVTJCLE9BQU84SCxNQUN0QixLQUFLekosRUFBVTJCLE9BQU9pSSxNQUN0QixLQUFLNUosRUFBVTJCLE9BQU9vSSxPQUNkcGxILEVBQUU0cUgsYUFBYW1MLGdCQUFnQnYzRyxFQUFNaWhHLFFBQVV6L0csRUFBRTRxSCxhQUFhbUwsZ0JBQWdCMWEsRUFBVTJCLE9BQU9xSSxPQUMvRnJsSCxFQUFFNHFILGFBQWFnVCw2QkFDZjU5SCxFQUFFNHFILGFBQWF2aUcsTUFDZnJvQixFQUFFa3RILGNBQWdCbEQsRUFBY2tKLGNBQ2hDNEosR0FBa0I5OEgsRUFBR3dlLElBRXpCLE1BRUosS0FBSzY4RixFQUFVMkIsT0FBT0csS0FDdEIsS0FBSzlCLEVBQVUyQixPQUFPaUYsUUFDdEIsS0FBSzVHLEVBQVUyQixPQUFPa0YsSUFDdEIsS0FBSzdHLEVBQVUyQixPQUFPbUYsU0FDdEIsS0FBSzlHLEVBQVUyQixPQUFPdmhGLEtBQ3RCLEtBQUs0L0UsRUFBVTJCLE9BQU9rSSxHQUN0QixLQUFLN0osRUFBVTJCLE9BQU9tSSxHQUVsQixNQUVKLFFBQ0ltUixFQUFjdDJILEVBQUd3ZSxHQUc3QixDQXNEQSxTQUFTbzlHLEdBQWlCNTdILEVBQUd3ZSxHQUN6QixPQUFRQSxFQUFNaWhHLE9BQ1YsS0FBS3BFLEVBQVUyQixPQUFPdmhGLEtBQ2xCb3lGLEVBQWU3dEgsRUFBR3dlLEdBQ2xCLE1BRUosS0FBSzY4RixFQUFVMkIsT0FBT2lILE9BQ2Rqa0gsRUFBRTRxSCxhQUFhbUUsZUFBaUIxVCxFQUFVMkIsT0FBT2lILFFBQ2pEamtILEVBQUU0cUgsYUFBYXZpRyxNQUVuQnJvQixFQUFFbXVILGVBQWUzdkcsRUFBTzY4RixFQUFVc0IsR0FBR2xoRixNQUNyQyxNQUVKLEtBQUs0L0UsRUFBVTJCLE9BQU9nSCxTQUNkaGtILEVBQUU0cUgsYUFBYW1FLGVBQWlCMVQsRUFBVTJCLE9BQU9pSCxRQUNqRGprSCxFQUFFNHFILGFBQWF2aUcsTUFFZnJvQixFQUFFNHFILGFBQWFtRSxlQUFpQjFULEVBQVUyQixPQUFPZ0gsVUFDakRoa0gsRUFBRTRxSCxhQUFhdmlHLE1BRW5Ccm9CLEVBQUVtdUgsZUFBZTN2RyxFQUFPNjhGLEVBQVVzQixHQUFHbGhGLE1BQ3JDLE1BRUosS0FBSzQvRSxFQUFVMkIsT0FBT2lHLE1BQ3RCLEtBQUs1SCxFQUFVMkIsT0FBT21HLE9BQ3RCLEtBQUs5SCxFQUFVMkIsT0FBT2dJLFNBQ3RCLEtBQUszSixFQUFVMkIsT0FBTzBILE9BQ2Qxa0gsRUFBRTRxSCxhQUFhaVQsaUJBQWlCeGlCLEVBQVUyQixPQUFPMEgsVUFDakQxa0gsRUFBRTRxSCxhQUFhcUUsc0JBQXNCNVQsRUFBVTJCLE9BQU8wSCxRQUN0RDFrSCxFQUFFa3ZILHNCQUNFMXdHLEVBQU1paEcsUUFBVXBFLEVBQVUyQixPQUFPMEgsUUFDakMxa0gsRUFBRWcySCxpQkFBaUJ4M0csSUFHM0IsTUFFSixLQUFLNjhGLEVBQVUyQixPQUFPd0gsT0FDdEIsS0FBS25KLEVBQVUyQixPQUFPK0gsU0FDbEI2SSxFQUFlNXRILEVBQUd3ZSxHQU05QixDQUNBLFNBQVN5K0csR0FBZWo5SCxFQUFHd2UsR0FDdkIsT0FBUUEsRUFBTWloRyxPQUNWLEtBQUtwRSxFQUFVMkIsT0FBT2dILFNBQ2Roa0gsRUFBRTRxSCxhQUFhSyxTQUFXLEdBQzFCanJILEVBQUU0cUgsYUFBYW1FLGVBQWlCMVQsRUFBVTJCLE9BQU9pSCxRQUNqRGprSCxFQUFFNHFILGFBQWFPLE9BQU9uckgsRUFBRTRxSCxhQUFhSyxTQUFXLEtBQU81UCxFQUFVMkIsT0FBT2dILFVBQ3hFaGtILEVBQUU0cUgsYUFBYXZpRyxNQUVmcm9CLEVBQUU0cUgsYUFBYW1FLGVBQWlCMVQsRUFBVTJCLE9BQU9nSCxVQUNqRGhrSCxFQUFFNHFILGFBQWF2aUcsTUFFbkIsTUFFSixLQUFLZ3pGLEVBQVUyQixPQUFPaUgsT0FDZGprSCxFQUFFNHFILGFBQWFtRSxlQUFpQjFULEVBQVUyQixPQUFPaUgsUUFDakRqa0gsRUFBRTRxSCxhQUFhdmlHLE1BRW5CLE1BRUosS0FBS2d6RixFQUFVMkIsT0FBTzBILE9BQ2Qxa0gsRUFBRTRxSCxhQUFhaVQsaUJBQWlCeGlCLEVBQVUyQixPQUFPMEgsVUFDakQxa0gsRUFBRTRxSCxhQUFhcUUsc0JBQXNCNVQsRUFBVTJCLE9BQU8wSCxRQUN0RDFrSCxFQUFFa3ZILHVCQUVOLE1BRUosS0FBSzdULEVBQVUyQixPQUFPK0gsU0FDbEI2SixFQUFxQjV1SCxFQUFHd2UsR0FNcEMsQ0FxR0EsU0FBU3UyRyxHQUFjLzBILEVBQUd3ZSxHQUNsQnhlLEVBQUU0cUgsYUFBYWlFLFVBQVksR0FDM0I3dUgsRUFBRTRxSCxhQUFhcUUsc0JBQXNCNVQsRUFBVTJCLE9BQU8rSCxVQUN0RC9rSCxFQUFFMnFILHlCQUF5QnZCLG9CQUMzQnBwSCxFQUFFeXVILHVCQUF1Qjk2RixRQUN6QjN6QixFQUFFa3ZILHNCQUNGbHZILEVBQUVzNUgsTUFBTTk2RyxJQUdSK3RHLEVBQVl2c0gsRUFBR3dlLEVBRXZCLENBV0EsU0FBU20yRyxHQUFnQjMwSCxFQUFHd2UsR0FDeEIsSUFBSXhiLEVBQ0osR0FBSXdiLEVBQU1paEcsUUFBVXBFLEVBQVUyQixPQUFPdmhGLE1BTWpDLEdBTEt6N0IsRUFBRXduSCxrQkFDSHhuSCxFQUFFa3RILGNBQWdCbEQsRUFBY2lRLGtCQUloQ2o2SCxFQUFFK0MsUUFBUTRXLHdCQUEwQjNaLEVBQUU0cUgsYUFBYU8sT0FBTyxLQUFPOVAsRUFBVTJCLE9BQU92aEYsS0FBTSxDQUN4Rno3QixFQUFFeXNILGdCQUFnQnpzSCxFQUFFNHFILGFBQWEvNkYsTUFBTSxHQUFJclIsR0FFM0MsTUFBTXF1RyxFQUFjN3NILEVBQUU0cUgsYUFBYS82RixNQUFNLEdBQ3JDZzlGLEtBQWlGLFFBQS9EN3BILEVBQUtoRCxFQUFFeVosWUFBWXdoRywwQkFBMEI0UixVQUFpQyxJQUFQN3BILE9BQWdCLEVBQVNBLEVBQUc0cEgsU0FDckg1c0gsRUFBRXlzSCxnQkFBZ0JJLEVBQWFydUcsRUFFdkMsT0FHQXc3RyxHQUFlaDZILEVBQUd3ZSxFQUUxQixDQUNBLFNBQVN3N0csR0FBZWg2SCxFQUFHd2UsR0FDdkJ4ZSxFQUFFa3RILGNBQWdCbEQsRUFBYzJGLFFBQ2hDQyxFQUFXNXZILEVBQUd3ZSxFQUNsQixDQWlFQSxTQUFTMDdHLEdBQW9CbDZILEVBQUd3ZSxHQUM1QnhlLEVBQUVrdEgsY0FBZ0JsRCxFQUFjMkYsUUFDaENDLEVBQVc1dkgsRUFBR3dlLEVBQ2xCLENBMkJBLFNBQVNzOEcsR0FBK0I5NkgsR0FDcEMsS0FBT0EsRUFBRXlaLFlBQVk2Z0csZ0JBQWdCdDZHLEVBQUU0cUgsYUFBYXZxRyxXQUFhZzdGLEVBQVVzQixHQUFHbGhGLE9BQ3pFejdCLEVBQUU2M0gsb0JBQW9CNzNILEVBQUU0cUgsYUFBYW1FLGFBQWMvdUgsRUFBRTRxSCxhQUFhdnFHLFVBQ25FcmdCLEVBQUU0cUgsYUFBYXZpRyxLQUV2QiwrQkMxaUdBM3BCLE9BQU9DLGVBQWU1RCxFQUFTLGFBQWMsQ0FBRTBELE9BQU8sSUFDdEQxRCxFQUFRaThILHNCQUFtQixFQUMzQixNQUFNM2IsRUFBWSxFQUFRLE1BRXBCeWlCLEVBQTRCLElBQUlwNkgsSUFBSSxDQUFDMjNHLEVBQVUyQixPQUFPTyxHQUFJbEMsRUFBVTJCLE9BQU9VLEdBQUlyQyxFQUFVMkIsT0FBT3NCLEdBQUlqRCxFQUFVMkIsT0FBT2dILFNBQVUzSSxFQUFVMkIsT0FBT2lILE9BQVE1SSxFQUFVMkIsT0FBT3BpRSxFQUFHeWdFLEVBQVUyQixPQUFPb0gsR0FBSS9JLEVBQVUyQixPQUFPcUgsR0FBSWhKLEVBQVUyQixPQUFPc0gsR0FBSWpKLEVBQVUyQixPQUFPdUgsTUFDNVB3WixFQUF1QyxJQUFJcjZILElBQUksSUFDOUNvNkgsRUFDSHppQixFQUFVMkIsT0FBT2lGLFFBQ2pCNUcsRUFBVTJCLE9BQU9tRixTQUNqQjlHLEVBQVUyQixPQUFPOEgsTUFDakJ6SixFQUFVMkIsT0FBT2tJLEdBQ2pCN0osRUFBVTJCLE9BQU9pSSxNQUNqQjVKLEVBQVUyQixPQUFPbUksR0FDakI5SixFQUFVMkIsT0FBT29JLE1BQ2pCL0osRUFBVTJCLE9BQU9xSSxLQUVmMlksRUFBcUIsSUFBSTM0RyxJQUFJLENBQy9CLENBQUNnMkYsRUFBVTJCLE9BQU95RSxPQUFRcEcsRUFBVXNCLEdBQUdsaEYsTUFDdkMsQ0FBQzQvRSxFQUFVMkIsT0FBT2lGLFFBQVM1RyxFQUFVc0IsR0FBR2xoRixNQUN4QyxDQUFDNC9FLEVBQVUyQixPQUFPdmhGLEtBQU00L0UsRUFBVXNCLEdBQUdsaEYsTUFDckMsQ0FBQzQvRSxFQUFVMkIsT0FBT3dHLFFBQVNuSSxFQUFVc0IsR0FBR2xoRixNQUN4QyxDQUFDNC9FLEVBQVUyQixPQUFPK0csT0FBUTFJLEVBQVVzQixHQUFHbGhGLE1BQ3ZDLENBQUM0L0UsRUFBVTJCLE9BQU9vQyxNQUFPL0QsRUFBVXNCLEdBQUdsaEYsTUFDdEMsQ0FBQzQvRSxFQUFVMkIsT0FBT2tJLEdBQUk3SixFQUFVc0IsR0FBR2xoRixNQUNuQyxDQUFDNC9FLEVBQVUyQixPQUFPK0gsU0FBVTFKLEVBQVVzQixHQUFHbGhGLE1BQ3pDLENBQUM0L0UsRUFBVTJCLE9BQU9tSSxHQUFJOUosRUFBVXNCLEdBQUdsaEYsTUFDbkMsQ0FBQzQvRSxFQUFVMkIsT0FBT3NELGVBQWdCakYsRUFBVXNCLEdBQUcwRCxRQUMvQyxDQUFDaEYsRUFBVTJCLE9BQU82RCxHQUFJeEYsRUFBVXNCLEdBQUcwRCxRQUNuQyxDQUFDaEYsRUFBVTJCLE9BQU8rRCxHQUFJMUYsRUFBVXNCLEdBQUcwRCxRQUNuQyxDQUFDaEYsRUFBVTJCLE9BQU84RCxHQUFJekYsRUFBVXNCLEdBQUcwRCxRQUNuQyxDQUFDaEYsRUFBVTJCLE9BQU9nRSxHQUFJM0YsRUFBVXNCLEdBQUcwRCxRQUNuQyxDQUFDaEYsRUFBVTJCLE9BQU9pRSxNQUFPNUYsRUFBVXNCLEdBQUcwRCxRQUN0QyxDQUFDaEYsRUFBVTJCLE9BQU8wRCxLQUFNckYsRUFBVXNCLEdBQUc2RCxLQUNyQyxDQUFDbkYsRUFBVTJCLE9BQU95RCxlQUFnQnBGLEVBQVVzQixHQUFHNkQsS0FDL0MsQ0FBQ25GLEVBQVUyQixPQUFPMkQsTUFBT3RGLEVBQVVzQixHQUFHNkQsT0FFcEN5ZCxFQUFnQixDQUFDNWlCLEVBQVUyQixPQUFPYSxHQUFJeEMsRUFBVTJCLE9BQU9jLEdBQUl6QyxFQUFVMkIsT0FBT2UsR0FBSTFDLEVBQVUyQixPQUFPZ0IsR0FBSTNDLEVBQVUyQixPQUFPaUIsR0FBSTVDLEVBQVUyQixPQUFPa0IsSUFDM0lnZ0IsRUFBb0IsQ0FBQzdpQixFQUFVMkIsT0FBT3FJLEdBQUloSyxFQUFVMkIsT0FBTytILFNBQVUxSixFQUFVMkIsT0FBT3ZoRixNQUN0RjBpRyxFQUFxQixDQUFDOWlCLEVBQVUyQixPQUFPOEgsTUFBT3pKLEVBQVUyQixPQUFPaUksTUFBTzVKLEVBQVUyQixPQUFPb0ksTUFBTy9KLEVBQVUyQixPQUFPK0gsU0FBVTFKLEVBQVUyQixPQUFPdmhGLE1BQzFJMmlHLEVBQWdCLENBQUMvaUIsRUFBVTJCLE9BQU9vQyxNQUFPL0QsRUFBVTJCLE9BQU8rSCxTQUFVMUosRUFBVTJCLE9BQU92aEYsTUFDckY0aUcsRUFBYyxDQUFDaGpCLEVBQVUyQixPQUFPa0ksR0FBSTdKLEVBQVUyQixPQUFPbUksSUFpUjNEcHFILEVBQVFpOEgsaUJBL1FSLE1BQ0ksNEJBQUkxSyxHQUNBLE9BQU9ueEgsS0FBS21qSSxnQkFBa0JuakksS0FBS3NlLFlBQVk2L0YsbUJBQW1CbitHLEtBQUtrbEIsU0FBV2xsQixLQUFLa2xCLE9BQzNGLENBQ0EsV0FBQXhJLENBQVlrdEIsRUFBVXRyQixFQUFhcXZCLEdBQy9CM3RDLEtBQUtzZSxZQUFjQSxFQUNuQnRlLEtBQUsydEMsUUFBVUEsRUFDZjN0QyxLQUFLMDBCLE1BQVEsR0FDYjEwQixLQUFLZ3dILE9BQVMsR0FDZGh3SCxLQUFLOHZILFVBQVksRUFDakI5dkgsS0FBSzB6SCxVQUFZLEVBQ2pCMXpILEtBQUs0ekgsYUFBZTFULEVBQVUyQixPQUFPeUksUUFDckN0cUgsS0FBS2tsQixRQUFVMGtCLENBQ25CLENBRUEsUUFBQXc1RixDQUFTNTNILEdBQ0wsT0FBT3hMLEtBQUswMEIsTUFBTW9DLFlBQVl0ckIsRUFBU3hMLEtBQUs4dkgsU0FDaEQsQ0FFQSxhQUFBcVQsR0FDSSxPQUFPbmpJLEtBQUs0ekgsZUFBaUIxVCxFQUFVMkIsT0FBTytILFVBQVk1cEgsS0FBS3NlLFlBQVk2Z0csZ0JBQWdCbi9HLEtBQUtrbEIsV0FBYWc3RixFQUFVc0IsR0FBR2xoRixJQUM5SCxDQUNBLHFCQUFBK2lHLEdBQ0lyakksS0FBS2tsQixRQUFVbGxCLEtBQUswMEIsTUFBTTEwQixLQUFLOHZILFVBQy9COXZILEtBQUs0ekgsYUFBZTV6SCxLQUFLZ3dILE9BQU9od0gsS0FBSzh2SCxTQUN6QyxDQUVBLElBQUF4ckgsQ0FBS2tILEVBQVM4NEcsR0FDVnRrSCxLQUFLOHZILFdBQ0w5dkgsS0FBSzAwQixNQUFNMTBCLEtBQUs4dkgsVUFBWXRrSCxFQUM1QnhMLEtBQUtrbEIsUUFBVTFaLEVBQ2Z4TCxLQUFLZ3dILE9BQU9od0gsS0FBSzh2SCxVQUFZeEwsRUFDN0J0a0gsS0FBSzR6SCxhQUFldFAsRUFDaEJ0a0gsS0FBS21qSSxpQkFDTG5qSSxLQUFLMHpILFlBRVQxekgsS0FBSzJ0QyxRQUFRMHVGLFdBQVc3d0gsRUFBUzg0RyxHQUFPLEVBQzVDLENBQ0EsR0FBQXAzRixHQUNJLE1BQU1vMkcsRUFBU3RqSSxLQUFLa2xCLFFBQ2hCbGxCLEtBQUswekgsVUFBWSxHQUFLMXpILEtBQUttakksaUJBQzNCbmpJLEtBQUswekgsWUFFVDF6SCxLQUFLOHZILFdBQ0w5dkgsS0FBS3FqSSx3QkFDTHJqSSxLQUFLMnRDLFFBQVE0dUYsVUFBVStHLEdBQVEsRUFDbkMsQ0FDQSxPQUFBcndILENBQVFzd0gsRUFBWXpXLEdBQ2hCLE1BQU1wK0csRUFBTTFPLEtBQUtvakksU0FBU0csR0FDMUJ2akksS0FBSzAwQixNQUFNaG1CLEdBQU9vK0csRUFDZHArRyxJQUFRMU8sS0FBSzh2SCxXQUNiOXZILEtBQUtrbEIsUUFBVTRuRyxFQUV2QixDQUNBLFdBQUFwNUcsQ0FBWTh2SCxFQUFrQjFXLEVBQVkyVyxHQUN0QyxNQUFNMWxCLEVBQWUvOUcsS0FBS29qSSxTQUFTSSxHQUFvQixFQUN2RHhqSSxLQUFLMDBCLE1BQU01aUIsT0FBT2lzRyxFQUFjLEVBQUcrTyxHQUNuQzlzSCxLQUFLZ3dILE9BQU9sK0csT0FBT2lzRyxFQUFjLEVBQUcwbEIsR0FDcEN6akksS0FBSzh2SCxXQUNEL1IsSUFBaUIvOUcsS0FBSzh2SCxVQUN0Qjl2SCxLQUFLcWpJLHdCQUVUcmpJLEtBQUsydEMsUUFBUTB1RixXQUFXcjhILEtBQUtrbEIsUUFBU2xsQixLQUFLNHpILGFBQWM3VixJQUFpQi85RyxLQUFLOHZILFNBQ25GLENBQ0EscUJBQUFnRSxDQUFzQmprSCxHQUNsQixJQUFJNnpILEVBQVkxakksS0FBSzh2SCxTQUFXLEVBQ2hDLEdBQ0k0VCxFQUFZMWpJLEtBQUtnd0gsT0FBT2w1RixZQUFZam5CLEVBQVM2ekgsRUFBWSxTQUNwREEsRUFBWSxHQUFLMWpJLEtBQUtzZSxZQUFZNmdHLGdCQUFnQm4vRyxLQUFLMDBCLE1BQU1ndkcsTUFBZ0J4akIsRUFBVXNCLEdBQUdsaEYsTUFDbkd0Z0MsS0FBS2l3SCxnQkFBZ0J5VCxFQUFZLEVBQUksRUFBSUEsRUFDN0MsQ0FDQSxlQUFBelQsQ0FBZ0J2aEgsR0FDWixLQUFPMU8sS0FBSzh2SCxVQUFZcGhILEdBQUssQ0FDekIsTUFBTTQwSCxFQUFTdGpJLEtBQUtrbEIsUUFDaEJsbEIsS0FBSzB6SCxVQUFZLEdBQUsxekgsS0FBS21qSSxrQkFDM0JuakksS0FBSzB6SCxXQUFhLEdBRXRCMXpILEtBQUs4dkgsV0FDTDl2SCxLQUFLcWpJLHdCQUNMcmpJLEtBQUsydEMsUUFBUTR1RixVQUFVK0csRUFBUXRqSSxLQUFLOHZILFNBQVdwaEgsRUFDbkQsQ0FDSixDQUNBLHFCQUFBaTFILENBQXNCbjRILEdBQ2xCLE1BQU1rRCxFQUFNMU8sS0FBS29qSSxTQUFTNTNILEdBQzFCeEwsS0FBS2l3SCxnQkFBZ0J2aEgsRUFBTSxFQUFJLEVBQUlBLEVBQ3ZDLENBQ0EsY0FBQWsxSCxDQUFlQyxFQUFVQyxHQUNyQixNQUFNcDFILEVBQU0xTyxLQUFLK2pJLGlCQUFpQkYsRUFBVUMsR0FDNUM5akksS0FBS2l3SCxnQkFBZ0J2aEgsRUFBTSxFQUFJLEVBQUlBLEVBQ3ZDLENBQ0EsNEJBQUF5cUgsR0FDSW41SCxLQUFLNGpJLGVBQWVkLEVBQWU1aUIsRUFBVXNCLEdBQUdsaEYsS0FDcEQsQ0FDQSx1QkFBQWkrRixHQUNJditILEtBQUs0akksZUFBZVYsRUFBYWhqQixFQUFVc0IsR0FBR2xoRixLQUNsRCxDQUNBLHFCQUFBZzRGLEdBR0l0NEgsS0FBSzB6SCxVQUFZLEVBQ2pCMXpILEtBQUtpd0gsZ0JBQWdCLEVBQ3pCLENBQ0EsZ0JBQUE4VCxDQUFpQkYsRUFBVXQ4SCxHQUN2QixJQUFLLElBQUk1QyxFQUFJM0UsS0FBSzh2SCxTQUFVbnJILEdBQUssRUFBR0EsSUFDaEMsR0FBSWsvSCxFQUFTMTRILFNBQVNuTCxLQUFLZ3dILE9BQU9yckgsS0FBTzNFLEtBQUtzZSxZQUFZNmdHLGdCQUFnQm4vRyxLQUFLMDBCLE1BQU0vdkIsTUFBUTRDLEVBQ3pGLE9BQU81QyxFQUdmLE9BQVEsQ0FDWixDQUNBLFdBQUFxL0gsQ0FBWUgsRUFBVUMsR0FDbEIsTUFBTXAxSCxFQUFNMU8sS0FBSytqSSxpQkFBaUJGLEVBQVVDLEdBQzVDOWpJLEtBQUtpd0gsZ0JBQWdCdmhILEVBQU0sRUFDL0IsQ0FDQSx1QkFBQTJySCxHQUNJcjZILEtBQUtna0ksWUFBWWYsRUFBZS9pQixFQUFVc0IsR0FBR2xoRixLQUNqRCxDQUNBLDJCQUFBaWlHLEdBQ0l2aUksS0FBS2drSSxZQUFZaEIsRUFBb0I5aUIsRUFBVXNCLEdBQUdsaEYsS0FDdEQsQ0FDQSwwQkFBQW1pRyxHQUNJemlJLEtBQUtna0ksWUFBWWpCLEVBQW1CN2lCLEVBQVVzQixHQUFHbGhGLEtBQ3JELENBQ0EsTUFBQS9zQixDQUFPL0gsR0FDSCxNQUFNa0QsRUFBTTFPLEtBQUtvakksU0FBUzUzSCxHQUN0QmtELEdBQU8sSUFDSEEsSUFBUTFPLEtBQUs4dkgsU0FDYjl2SCxLQUFLa3RCLE9BR0xsdEIsS0FBSzAwQixNQUFNNWlCLE9BQU9wRCxFQUFLLEdBQ3ZCMU8sS0FBS2d3SCxPQUFPbCtHLE9BQU9wRCxFQUFLLEdBQ3hCMU8sS0FBSzh2SCxXQUNMOXZILEtBQUtxakksd0JBQ0xyakksS0FBSzJ0QyxRQUFRNHVGLFVBQVUvd0gsR0FBUyxJQUc1QyxDQUVBLGdDQUFBdXJILEdBRUksT0FBTy8ySCxLQUFLOHZILFVBQVksR0FBSzl2SCxLQUFLZ3dILE9BQU8sS0FBTzlQLEVBQVUyQixPQUFPRyxLQUFPaGlILEtBQUswMEIsTUFBTSxHQUFLLElBQzVGLENBQ0EsUUFBQW5jLENBQVMvTSxHQUNMLE9BQU94TCxLQUFLb2pJLFNBQVM1M0gsSUFBWSxDQUNyQyxDQUNBLGlCQUFBNmtILENBQWtCN2tILEdBQ2QsTUFBTXk0SCxFQUFhamtJLEtBQUtvakksU0FBUzUzSCxHQUFXLEVBQzVDLE9BQU95NEgsR0FBYyxFQUFJamtJLEtBQUswMEIsTUFBTXV2RyxHQUFjLElBQ3RELENBQ0Esd0JBQUFoQyxHQUNJLE9BQXlCLElBQWxCamlJLEtBQUs4dkgsVUFBa0I5dkgsS0FBS2d3SCxPQUFPLEtBQU85UCxFQUFVMkIsT0FBT3ZoRixJQUN0RSxDQUVBLFVBQUFvdkYsQ0FBVzcvRyxHQUNQLElBQUssSUFBSWxMLEVBQUkzRSxLQUFLOHZILFNBQVVuckgsR0FBSyxFQUFHQSxJQUFLLENBQ3JDLE1BQU1nOUcsRUFBSzNoSCxLQUFLZ3dILE9BQU9yckgsR0FDakJxZ0gsRUFBS2hsSCxLQUFLc2UsWUFBWTZnRyxnQkFBZ0JuL0csS0FBSzAwQixNQUFNL3ZCLElBQ3ZELEdBQUlnOUcsSUFBTzl4RyxHQUFXbTFHLElBQU85RSxFQUFVc0IsR0FBR2xoRixLQUN0QyxPQUFPLEVBRVgsR0FBSXVpRyxFQUFtQmw5SCxJQUFJZzhHLEtBQVFxRCxFQUMvQixPQUFPLENBRWYsQ0FDQSxPQUFPLENBQ1gsQ0FDQSx3QkFBQWtVLEdBQ0ksSUFBSyxJQUFJdjBILEVBQUkzRSxLQUFLOHZILFNBQVVuckgsR0FBSyxFQUFHQSxJQUFLLENBQ3JDLE1BQU1nOUcsRUFBSzNoSCxLQUFLZ3dILE9BQU9yckgsR0FDakJxZ0gsRUFBS2hsSCxLQUFLc2UsWUFBWTZnRyxnQkFBZ0JuL0csS0FBSzAwQixNQUFNL3ZCLElBQ3ZELElBQUksRUFBSXU3RyxFQUFVZ0csa0JBQWtCdkUsSUFBT3FELElBQU85RSxFQUFVc0IsR0FBR2xoRixLQUMzRCxPQUFPLEVBRVgsR0FBSXVpRyxFQUFtQmw5SCxJQUFJZzhHLEtBQVFxRCxFQUMvQixPQUFPLENBRWYsQ0FDQSxPQUFPLENBQ1gsQ0FDQSxrQkFBQStULENBQW1CbHBILEdBQ2YsSUFBSyxJQUFJbEwsRUFBSTNFLEtBQUs4dkgsU0FBVW5ySCxHQUFLLEVBQUdBLElBQUssQ0FDckMsTUFBTWc5RyxFQUFLM2hILEtBQUtnd0gsT0FBT3JySCxHQUNqQnFnSCxFQUFLaGxILEtBQUtzZSxZQUFZNmdHLGdCQUFnQm4vRyxLQUFLMDBCLE1BQU0vdkIsSUFDdkQsR0FBSWc5RyxJQUFPOXhHLEdBQVdtMUcsSUFBTzlFLEVBQVVzQixHQUFHbGhGLEtBQ3RDLE9BQU8sRUFFWCxJQUFNcWhGLElBQU96QixFQUFVMkIsT0FBT3NDLElBQU14QyxJQUFPekIsRUFBVTJCLE9BQU8yQixLQUFPd0IsSUFBTzlFLEVBQVVzQixHQUFHbGhGLE1BQVN1aUcsRUFBbUJsOUgsSUFBSWc4RyxLQUFRcUQsRUFDM0gsT0FBTyxDQUVmLENBQ0EsT0FBTyxDQUNYLENBQ0EsZ0JBQUE4USxDQUFpQmptSCxHQUNiLElBQUssSUFBSWxMLEVBQUkzRSxLQUFLOHZILFNBQVVuckgsR0FBSyxFQUFHQSxJQUFLLENBQ3JDLE1BQU1nOUcsRUFBSzNoSCxLQUFLZ3dILE9BQU9yckgsR0FDakJxZ0gsRUFBS2hsSCxLQUFLc2UsWUFBWTZnRyxnQkFBZ0JuL0csS0FBSzAwQixNQUFNL3ZCLElBQ3ZELEdBQUlnOUcsSUFBTzl4RyxHQUFXbTFHLElBQU85RSxFQUFVc0IsR0FBR2xoRixLQUN0QyxPQUFPLEVBRVgsR0FBS3FoRixJQUFPekIsRUFBVTJCLE9BQU9nRixRQUFVN0IsSUFBTzlFLEVBQVVzQixHQUFHbGhGLE1BQVN1aUcsRUFBbUJsOUgsSUFBSWc4RyxLQUFRcUQsRUFDL0YsT0FBTyxDQUVmLENBQ0EsT0FBTyxDQUNYLENBQ0EsZUFBQTRWLENBQWdCL3FILEdBQ1osSUFBSyxJQUFJbEwsRUFBSTNFLEtBQUs4dkgsU0FBVW5ySCxHQUFLLEVBQUdBLElBQUssQ0FDckMsTUFBTWc5RyxFQUFLM2hILEtBQUtnd0gsT0FBT3JySCxHQUV2QixHQURXM0UsS0FBS3NlLFlBQVk2Z0csZ0JBQWdCbi9HLEtBQUswMEIsTUFBTS92QixNQUM1Q3U3RyxFQUFVc0IsR0FBR2xoRixLQUF4QixDQUdBLEdBQUlxaEYsSUFBTzl4RyxFQUNQLE9BQU8sRUFFWCxHQUFJOHhHLElBQU96QixFQUFVMkIsT0FBT29DLE9BQVN0QyxJQUFPekIsRUFBVTJCLE9BQU8rSCxVQUFZakksSUFBT3pCLEVBQVUyQixPQUFPdmhGLEtBQzdGLE9BQU8sQ0FMWCxDQU9KLENBQ0EsT0FBTyxDQUNYLENBQ0EsK0JBQUFraUcsR0FDSSxJQUFLLElBQUk3OUgsRUFBSTNFLEtBQUs4dkgsU0FBVW5ySCxHQUFLLEVBQUdBLElBQUssQ0FDckMsTUFBTWc5RyxFQUFLM2hILEtBQUtnd0gsT0FBT3JySCxHQUV2QixHQURXM0UsS0FBS3NlLFlBQVk2Z0csZ0JBQWdCbi9HLEtBQUswMEIsTUFBTS92QixNQUM1Q3U3RyxFQUFVc0IsR0FBR2xoRixLQUF4QixDQUdBLEdBQUlxaEYsSUFBT3pCLEVBQVUyQixPQUFPOEgsT0FBU2hJLElBQU96QixFQUFVMkIsT0FBT29JLE9BQVN0SSxJQUFPekIsRUFBVTJCLE9BQU9pSSxNQUMxRixPQUFPLEVBRVgsR0FBSW5JLElBQU96QixFQUFVMkIsT0FBT29DLE9BQVN0QyxJQUFPekIsRUFBVTJCLE9BQU92aEYsS0FDekQsT0FBTyxDQUxYLENBT0osQ0FDQSxPQUFPLENBQ1gsQ0FDQSxnQkFBQW9pRyxDQUFpQjd5SCxHQUNiLElBQUssSUFBSWxMLEVBQUkzRSxLQUFLOHZILFNBQVVuckgsR0FBSyxFQUFHQSxJQUFLLENBQ3JDLE1BQU1nOUcsRUFBSzNoSCxLQUFLZ3dILE9BQU9yckgsR0FFdkIsR0FEVzNFLEtBQUtzZSxZQUFZNmdHLGdCQUFnQm4vRyxLQUFLMDBCLE1BQU0vdkIsTUFDNUN1N0csRUFBVXNCLEdBQUdsaEYsS0FBeEIsQ0FHQSxHQUFJcWhGLElBQU85eEcsRUFDUCxPQUFPLEVBRVgsR0FBSTh4RyxJQUFPekIsRUFBVTJCLE9BQU9pSCxRQUFVbkgsSUFBT3pCLEVBQVUyQixPQUFPZ0gsU0FDMUQsT0FBTyxDQUxYLENBT0osQ0FDQSxPQUFPLENBQ1gsQ0FFQSxzQkFBQXlOLEdBQ0ksS0FBT3FNLEVBQTBCLzVILElBQUk1SSxLQUFLNHpILGVBQ3RDNXpILEtBQUtrdEIsS0FFYixDQUNBLGdDQUFBeW1HLEdBQ0ksS0FBT2lQLEVBQXFDaDZILElBQUk1SSxLQUFLNHpILGVBQ2pENXpILEtBQUtrdEIsS0FFYixDQUNBLG1DQUFBaXBHLENBQW9DK04sR0FDaEMsS0FBT2xrSSxLQUFLNHpILGVBQWlCc1EsR0FBZXRCLEVBQXFDaDZILElBQUk1SSxLQUFLNHpILGVBQ3RGNXpILEtBQUtrdEIsS0FFYiwrQkN2VEozcEIsT0FBT0MsZUFBZTVELEVBQVMsYUFBYyxDQUFFMEQsT0FBTyxJQUN0RDFELEVBQVErZSxlQUFpQi9lLEVBQVFnVCxlQUFZLEVBQzdDLE1BQU1zdEcsRUFBWSxFQUFRLE1BQ3BCNWhGLEVBQWMsRUFBUSxNQUN0QjB0RixFQUFlLEVBQVEsTUFFdkJtWSxFQUFnQixJQUFJNTdILElBQUksQ0FDMUIyM0csRUFBVThGLFVBQVVPLEtBQ3BCckcsRUFBVThGLFVBQVVVLEtBQ3BCeEcsRUFBVThGLFVBQVVXLFNBQ3BCekcsRUFBVThGLFVBQVVZLFFBQ3BCMUcsRUFBVThGLFVBQVUvRCxHQUNwQi9CLEVBQVU4RixVQUFVZSxJQUNwQjdHLEVBQVU4RixVQUFVdkQsTUFDcEJ2QyxFQUFVOEYsVUFBVXlCLE1BQ3BCdkgsRUFBVThGLFVBQVUvQyxHQUNwQi9DLEVBQVU4RixVQUFVOUMsSUFDcEJoRCxFQUFVOEYsVUFBVThCLE1BQ3BCNUgsRUFBVThGLFVBQVVnQyxPQUNwQjlILEVBQVU4RixVQUFVa0MsS0FDcEJoSSxFQUFVOEYsVUFBVTFDLEtBQ3BCcEQsRUFBVThGLFVBQVUrQyxNQUNwQjdJLEVBQVU4RixVQUFVd0QsT0FDcEJ0SixFQUFVOEYsVUFBVW1FLE1BQ3BCakssRUFBVThGLFVBQVVvRSxNQUV4QixTQUFTcmhFLEVBQWNubEQsRUFBTWdFLEdBQ3pCLE9BQVFBLEVBQVEwVyxZQUFZOCtGLGNBQWN4NUcsSUFDdENnRSxFQUFRMFcsWUFBWTZnRyxnQkFBZ0J2N0csS0FBVXM4RyxFQUFVc0IsR0FBR2xoRixNQUMzRDZqRyxFQUFjdjdILElBQUloQixFQUFRMFcsWUFBWTRnRyxXQUFXdDdHLEdBQ3pELENBQ0EsTUFBTTh0QixFQUFjLENBQUVwVCxZQUFhMHRHLEVBQWFELG1CQUFvQjF0RyxrQkFBa0IsR0F1RHRGLFNBQVMrbEgsRUFBb0J0cUQsRUFBWWx5RSxHQUNyQyxJQUFJd0ksRUFBTyxHQUVYLE1BQU02TyxFQUFZclgsRUFBUTBXLFlBQVk4K0YsY0FBY3RqQyxJQUNoRGx5RSxFQUFRMFcsWUFBWTRnRyxXQUFXcGxDLEtBQWdCb21DLEVBQVU4RixVQUFVNEQsVUFDbkVoaUgsRUFBUTBXLFlBQVk2Z0csZ0JBQWdCcmxDLEtBQWdCb21DLEVBQVVzQixHQUFHbGhGLEtBQy9EMTRCLEVBQVEwVyxZQUFZNi9GLG1CQUFtQnJrQyxHQUN2Q0EsRUFDQTVRLEVBQWF0aEUsRUFBUTBXLFlBQVl5Z0csY0FBYzkvRixHQUNyRCxHQUFJaXFELEVBQ0EsSUFBSyxNQUFNbTdELEtBQWVuN0QsRUFDdEI5NEQsR0FBUWswSCxFQUFjRCxFQUFhejhILEdBRzNDLE9BQU93SSxDQUNYLENBQ0EsU0FBU2swSCxFQUFjMWdJLEVBQU1nRSxHQUN6QixPQUFJQSxFQUFRMFcsWUFBWTgrRixjQUFjeDVHLEdBZTFDLFNBQTBCQSxFQUFNZ0UsR0FDNUIsTUFBTSs1RyxFQUFLLzVHLEVBQVEwVyxZQUFZNGdHLFdBQVd0N0csR0FDMUMsTUFBTyxJQUFJKzlHLElBRWYsU0FBNkIvOUcsR0FBTSxZQUFFMGEsSUFDakMsSUFBSWxPLEVBQU8sR0FDWCxJQUFLLE1BQU01RCxLQUFROFIsRUFBWTJnRyxZQUFZcjdHLEdBQU8sQ0FFOUMsR0FEQXdNLEdBQVEsSUFDSDVELEVBQUtqRixVQUlOLE9BQVFpRixFQUFLakYsV0FDVCxLQUFLMjRHLEVBQVVzQixHQUFHcGhGLElBQ2Rod0IsR0FBUSxPQUFPNUQsRUFBS2pLLE9BQ3BCLE1BRUosS0FBSzI5RyxFQUFVc0IsR0FBR0UsTUFDSSxVQUFkbDFHLEVBQUtqSyxPQUNMNk4sR0FBUSxVQUVaQSxHQUFRNUQsRUFBS2pLLEtBQ2IsTUFFSixLQUFLMjlHLEVBQVVzQixHQUFHQyxNQUNkcnhHLEdBQVEsU0FBUzVELEVBQUtqSyxPQUN0QixNQUVKLFFBQ0k2TixHQUFRLEdBQUc1RCxFQUFLb25CLFVBQVVwbkIsRUFBS2pLLFlBcEJ2QzZOLEdBQVE1RCxFQUFLakssS0F1QmpCNk4sR0FBUSxNQUFLLEVBQUlrdUIsRUFBWXROLGlCQUFpQnhrQixFQUFLbEosU0FDdkQsQ0FDQSxPQUFPOE0sQ0FDWCxDQWpDb0JtMEgsQ0FBb0IzZ0ksRUFBTWdFLE1BQVltaEQsRUFBY25sRCxFQUFNZ0UsR0FBVyxHQUFLLEdBQUd3OEgsRUFBb0J4Z0ksRUFBTWdFLE9BQWErNUcsTUFDeEksQ0FqQmU2aUIsQ0FBaUI1Z0ksRUFBTWdFLEdBRTlCQSxFQUFRMFcsWUFBWSsrRixXQUFXejVHLEdBZ0R2QyxTQUEyQkEsRUFBTWdFLEdBQzdCLE1BQU0sWUFBRTBXLEdBQWdCMVcsRUFDbEJtUCxFQUFVdUgsRUFBWThnRyxtQkFBbUJ4N0csR0FDekNDLEVBQVN5YSxFQUFZMGdHLGNBQWNwN0csR0FDbkM2Z0ksRUFBVzVnSSxHQUFVeWEsRUFBWTgrRixjQUFjdjVHLElBQVd5YSxFQUFZNGdHLFdBQVdyN0csR0FDdkYsT0FBTzRnSSxHQUNIbm1ILEVBQVk2Z0csZ0JBQWdCdDdHLEtBQVlxOEcsRUFBVXNCLEdBQUdsaEYsT0FDckQsRUFBSTQvRSxFQUFVK0Ysa0JBQWtCd2UsRUFBVTc4SCxFQUFReVcsa0JBQ2hEdEgsR0FDQSxFQUFJdW5CLEVBQVlqTixZQUFZdGEsRUFDdEMsQ0F6RGUydEgsQ0FBa0I5Z0ksRUFBTWdFLEdBRS9CQSxFQUFRMFcsWUFBWTYrRixjQUFjdjVHLEdBd0QxQyxTQUE4QkEsR0FBTSxZQUFFMGEsSUFDbEMsTUFBTyxVQUFPQSxFQUFZK2dHLHNCQUFzQno3RyxVQUNwRCxDQXpEZStnSSxDQUFxQi9nSSxFQUFNZ0UsR0FFbENBLEVBQVEwVyxZQUFZb2hHLG1CQUFtQjk3RyxHQXdEL0MsU0FBbUNBLEdBQU0sWUFBRTBhLElBQ3ZDLE1BQU8sYUFBYUEsRUFBWWloRyx3QkFBd0IzN0csS0FDNUQsQ0F6RGVnaEksQ0FBMEJoaEksRUFBTWdFLEdBR3BDLEVBQ1gsQ0F4REFoSSxFQUFRZ1QsVUFQUixTQUFtQmhQLEVBQU1nRSxHQUNyQixNQUFNc0IsRUFBTzNGLE9BQU9pQixPQUFPakIsT0FBT2lCLE9BQU8sQ0FBQyxFQUFHa3RCLEdBQWM5cEIsR0FDM0QsT0FBSW1oRCxFQUFjbmxELEVBQU1zRixHQUNiLEdBRUprN0gsRUFBb0J4Z0ksRUFBTXNGLEVBQ3JDLEVBeUJBdEosRUFBUStlLGVBSlIsU0FBd0IvYSxFQUFNZ0UsR0FFMUIsT0FBTzA4SCxFQUFjMWdJLEVBRFJMLE9BQU9pQixPQUFPakIsT0FBT2lCLE9BQU8sQ0FBQyxFQUFHa3RCLEdBQWM5cEIsR0FFL0QsK0JDcEZBckUsT0FBT0MsZUFBZTVELEVBQVMsYUFBYyxDQUFFMEQsT0FBTyxJQUN0RDFELEVBQVErb0QsVUFBWS9vRCxFQUFRK3JILG1CQUFnQixFQUM1QyxNQUFNa1osRUFBb0IsRUFBUSxNQUM1QkMsRUFBZSxFQUFRLEtBQ3ZCclcsRUFBYSxFQUFRLE1BQ3JCdnVGLEVBQWMsRUFBUSxNQUN0QmlzRixFQUFtQixFQUFRLE1BQzNCak0sRUFBWSxFQUFRLE1BRXBCNmtCLEVBQXFDLElBQUk3NkcsSUFBSSxDQUMvQyxDQUFDLElBQU0sTUFDUCxDQUFDLElBQU0sTUFDUCxDQUFDLElBQU0sS0FDUCxDQUFDLElBQU0sTUFDUCxDQUFDLElBQU0sTUFDUCxDQUFDLElBQU0sTUFDUCxDQUFDLElBQU0sTUFDUCxDQUFDLElBQU0sS0FDUCxDQUFDLElBQU0sTUFDUCxDQUFDLElBQU0sS0FDUCxDQUFDLElBQU0sTUFDUCxDQUFDLElBQU0sS0FDUCxDQUFDLElBQU0sS0FDUCxDQUFDLElBQU0sTUFDUCxDQUFDLElBQU0sTUFDUCxDQUFDLElBQU0sTUFDUCxDQUFDLElBQU0sTUFDUCxDQUFDLElBQU0sTUFDUCxDQUFDLElBQU0sTUFDUCxDQUFDLElBQU0sTUFDUCxDQUFDLElBQU0sS0FDUCxDQUFDLElBQU0sTUFDUCxDQUFDLElBQU0sS0FDUCxDQUFDLElBQU0sTUFDUCxDQUFDLElBQU0sS0FDUCxDQUFDLElBQU0sS0FDUCxDQUFDLElBQU0sT0FHWCxJQUFJaWhDLEVBK0ZKLFNBQVM2NUUsRUFBYW5tRyxHQUNsQixPQUFPQSxHQUFNaW1HLEVBQWE3WixZQUFZZ2EsU0FBV3BtRyxHQUFNaW1HLEVBQWE3WixZQUFZaWEsT0FDcEYsQ0FDQSxTQUFTQyxFQUFhdG1HLEdBQ2xCLE9BQU9BLEdBQU1pbUcsRUFBYTdaLFlBQVltYSxpQkFBbUJ2bUcsR0FBTWltRyxFQUFhN1osWUFBWW9hLGVBQzVGLENBSUEsU0FBU0MsRUFBY3ptRyxHQUNuQixPQUpKLFNBQXNCQSxHQUNsQixPQUFPQSxHQUFNaW1HLEVBQWE3WixZQUFZc2EsZUFBaUIxbUcsR0FBTWltRyxFQUFhN1osWUFBWXVhLGFBQzFGLENBRVdDLENBQWE1bUcsSUFBT3NtRyxFQUFhdG1HLEVBQzVDLENBQ0EsU0FBUy9CLEVBQW9CK0IsR0FDekIsT0FBT3ltRyxFQUFjem1HLElBQU9tbUcsRUFBYW5tRyxFQUM3QyxDQUNBLFNBQVM2bUcsRUFBcUI3bUcsR0FDMUIsT0FBT0EsR0FBTWltRyxFQUFhN1osWUFBWW1hLGlCQUFtQnZtRyxHQUFNaW1HLEVBQWE3WixZQUFZMGEsZUFDNUYsQ0FDQSxTQUFTQyxFQUFxQi9tRyxHQUMxQixPQUFPQSxHQUFNaW1HLEVBQWE3WixZQUFZc2EsZUFBaUIxbUcsR0FBTWltRyxFQUFhN1osWUFBWTRhLGFBQzFGLENBSUEsU0FBU0MsRUFBYWpuRyxHQUNsQixPQUFPQSxFQUFLLEVBQ2hCLENBQ0EsU0FBUzFTLEVBQWEwUyxHQUNsQixPQUFPQSxJQUFPaW1HLEVBQWE3WixZQUFZOGEsT0FBU2xuRyxJQUFPaW1HLEVBQWE3WixZQUFZcVgsV0FBYXpqRyxJQUFPaW1HLEVBQWE3WixZQUFZK2EsWUFBY25uRyxJQUFPaW1HLEVBQWE3WixZQUFZZ2IsU0FDL0ssQ0FJQSxTQUFTQyxFQUFvQ3JuRyxHQUN6QyxPQUFPMVMsRUFBYTBTLElBQU9BLElBQU9pbUcsRUFBYTdaLFlBQVlrYixTQUFXdG5HLElBQU9pbUcsRUFBYTdaLFlBQVltYixpQkFDMUcsRUFqSUEsU0FBV2o3RSxHQUNQQSxFQUFNQSxFQUFZLEtBQUksR0FBSyxPQUMzQkEsRUFBTUEsRUFBYyxPQUFJLEdBQUssU0FDN0JBLEVBQU1BLEVBQWUsUUFBSSxHQUFLLFVBQzlCQSxFQUFNQSxFQUFtQixZQUFJLEdBQUssY0FDbENBLEVBQU1BLEVBQWlCLFVBQUksR0FBSyxZQUNoQ0EsRUFBTUEsRUFBZ0IsU0FBSSxHQUFLLFdBQy9CQSxFQUFNQSxFQUFvQixhQUFJLEdBQUssZUFDbkNBLEVBQU1BLEVBQWdCLFNBQUksR0FBSyxXQUMvQkEsRUFBTUEsRUFBNkIsc0JBQUksR0FBSyx3QkFDNUNBLEVBQU1BLEVBQTJCLG9CQUFJLEdBQUssc0JBQzFDQSxFQUFNQSxFQUEyQixvQkFBSSxJQUFNLHNCQUMzQ0EsRUFBTUEsRUFBOEIsdUJBQUksSUFBTSx5QkFDOUNBLEVBQU1BLEVBQTRCLHFCQUFJLElBQU0sdUJBQzVDQSxFQUFNQSxFQUE0QixxQkFBSSxJQUFNLHVCQUM1Q0EsRUFBTUEsRUFBa0MsMkJBQUksSUFBTSw2QkFDbERBLEVBQU1BLEVBQWdDLHlCQUFJLElBQU0sMkJBQ2hEQSxFQUFNQSxFQUFnQyx5QkFBSSxJQUFNLDJCQUNoREEsRUFBTUEsRUFBZ0MseUJBQUksSUFBTSwyQkFDaERBLEVBQU1BLEVBQXFDLDhCQUFJLElBQU0sZ0NBQ3JEQSxFQUFNQSxFQUEyQixvQkFBSSxJQUFNLHNCQUMzQ0EsRUFBTUEsRUFBZ0MseUJBQUksSUFBTSwyQkFDaERBLEVBQU1BLEVBQXFDLDhCQUFJLElBQU0sZ0NBQ3JEQSxFQUFNQSxFQUEwQyxtQ0FBSSxJQUFNLHFDQUMxREEsRUFBTUEsRUFBd0MsaUNBQUksSUFBTSxtQ0FDeERBLEVBQU1BLEVBQXdDLGlDQUFJLElBQU0sbUNBQ3hEQSxFQUFNQSxFQUF1QyxnQ0FBSSxJQUFNLGtDQUN2REEsRUFBTUEsRUFBa0MsMkJBQUksSUFBTSw2QkFDbERBLEVBQU1BLEVBQXVDLGdDQUFJLElBQU0sa0NBQ3ZEQSxFQUFNQSxFQUE0QyxxQ0FBSSxJQUFNLHVDQUM1REEsRUFBTUEsRUFBaUQsMENBQUksSUFBTSw0Q0FDakVBLEVBQU1BLEVBQXFDLDhCQUFJLElBQU0sZ0NBQ3JEQSxFQUFNQSxFQUE2QixzQkFBSSxJQUFNLHdCQUM3Q0EsRUFBTUEsRUFBc0IsZUFBSSxJQUFNLGlCQUN0Q0EsRUFBTUEsRUFBNEIscUJBQUksSUFBTSx1QkFDNUNBLEVBQU1BLEVBQThCLHVCQUFJLElBQU0seUJBQzlDQSxFQUFNQSxFQUFxQyw4QkFBSSxJQUFNLGdDQUNyREEsRUFBTUEsRUFBcUMsOEJBQUksSUFBTSxnQ0FDckRBLEVBQU1BLEVBQWdDLHlCQUFJLElBQU0sMkJBQ2hEQSxFQUFNQSxFQUFvQyw2QkFBSSxJQUFNLCtCQUNwREEsRUFBTUEsRUFBOEIsdUJBQUksSUFBTSx5QkFDOUNBLEVBQU1BLEVBQXFCLGNBQUksSUFBTSxnQkFDckNBLEVBQU1BLEVBQStCLHdCQUFJLElBQU0sMEJBQy9DQSxFQUFNQSxFQUFxQixjQUFJLElBQU0sZ0JBQ3JDQSxFQUFNQSxFQUEwQixtQkFBSSxJQUFNLHFCQUMxQ0EsRUFBTUEsRUFBZSxRQUFJLElBQU0sVUFDL0JBLEVBQU1BLEVBQThCLHVCQUFJLElBQU0seUJBQzlDQSxFQUFNQSxFQUFtQyw0QkFBSSxJQUFNLDhCQUNuREEsRUFBTUEsRUFBd0MsaUNBQUksSUFBTSxtQ0FDeERBLEVBQU1BLEVBQTZDLHNDQUFJLElBQU0sd0NBQzdEQSxFQUFNQSxFQUF3QixpQkFBSSxJQUFNLG1CQUN4Q0EsRUFBTUEsRUFBbUIsWUFBSSxJQUFNLGNBQ25DQSxFQUFNQSxFQUF3QixpQkFBSSxJQUFNLG1CQUN4Q0EsRUFBTUEsRUFBZSxRQUFJLElBQU0sVUFDL0JBLEVBQU1BLEVBQTJCLG9CQUFJLElBQU0sc0JBQzNDQSxFQUFNQSxFQUFvQixhQUFJLElBQU0sZUFDcENBLEVBQU1BLEVBQTBCLG1CQUFJLElBQU0scUJBQzFDQSxFQUFNQSxFQUFvQyw2QkFBSSxJQUFNLCtCQUNwREEsRUFBTUEsRUFBd0MsaUNBQUksSUFBTSxtQ0FDeERBLEVBQU1BLEVBQStDLHdDQUFJLElBQU0sMENBQy9EQSxFQUFNQSxFQUErQyx3Q0FBSSxJQUFNLDBDQUMvREEsRUFBTUEsRUFBdUMsZ0NBQUksSUFBTSxrQ0FDdkRBLEVBQU1BLEVBQXFELDhDQUFJLElBQU0sZ0RBQ3JFQSxFQUFNQSxFQUFvQyw2QkFBSSxJQUFNLCtCQUNwREEsRUFBTUEsRUFBd0MsaUNBQUksSUFBTSxtQ0FDeERBLEVBQU1BLEVBQStDLHdDQUFJLElBQU0sMENBQy9EQSxFQUFNQSxFQUErQyx3Q0FBSSxJQUFNLDBDQUMvREEsRUFBTUEsRUFBdUMsZ0NBQUksSUFBTSxrQ0FDdkRBLEVBQU1BLEVBQXFCLGNBQUksSUFBTSxnQkFDckNBLEVBQU1BLEVBQXFCLGNBQUksSUFBTSxnQkFDckNBLEVBQU1BLEVBQTZCLHNCQUFJLElBQU0sd0JBQzdDQSxFQUFNQSxFQUF5QixrQkFBSSxJQUFNLG9CQUN6Q0EsRUFBTUEsRUFBMkIsb0JBQUksSUFBTSxzQkFDM0NBLEVBQU1BLEVBQWlDLDBCQUFJLElBQU0sNEJBQ2pEQSxFQUFNQSxFQUEyQixvQkFBSSxJQUFNLHNCQUMzQ0EsRUFBTUEsRUFBbUMsNEJBQUksSUFBTSw4QkFDbkRBLEVBQU1BLEVBQTZDLHNDQUFJLElBQU0sd0NBQzdEQSxFQUFNQSxFQUF1QyxnQ0FBSSxJQUFNLGtDQUN2REEsRUFBTUEsRUFBbUMsNEJBQUksSUFBTSw4QkFDbkRBLEVBQU1BLEVBQXVDLGdDQUFJLElBQU0saUNBQzFELENBaEZELENBZ0ZHQSxJQUFVQSxFQUFRLENBQUMsSUFFdEJ2ckQsRUFBUStySCxjQUFnQixDQUNwQjBhLEtBQU1sN0UsRUFBTWs3RSxLQUNadlQsT0FBUTNuRSxFQUFNMm5FLE9BQ2RDLFFBQVM1bkUsRUFBTTRuRSxRQUNmRyxZQUFhL25FLEVBQU0rbkUsWUFDbkJsSyxVQUFXNzlELEVBQU02OUQsVUFDakJzZCxjQUFlbjdFLEVBQU1tN0UsZUF5dEZ6QjFtSSxFQUFRK29ELFVBOXFGUixNQUNJLFdBQUFqc0MsQ0FBWTlVLEVBQVMrbEMsR0FDakIzdEMsS0FBSzRILFFBQVVBLEVBQ2Y1SCxLQUFLMnRDLFFBQVVBLEVBQ2YzdEMsS0FBS3VtSSxRQUFTLEVBRWR2bUksS0FBS3dtSSxRQUFTLEVBT2R4bUksS0FBS3k4SCxlQUFnQixFQUNyQno4SCxLQUFLeW1JLGlCQUFtQixHQUN4QnptSSxLQUFLd29CLFFBQVMsRUFDZHhvQixLQUFLZ1MsTUFBUW01QyxFQUFNazdFLEtBQ25Ccm1JLEtBQUswbUksWUFBY3Y3RSxFQUFNazdFLEtBQ3pCcm1JLEtBQUsybUksYUFBZSxFQUNwQjNtSSxLQUFLNG1JLHVCQUF5QixFQUM5QjVtSSxLQUFLNm1JLHNCQUF3QixLQUM3QjdtSSxLQUFLdzdILGFBQWUsS0FDcEJ4N0gsS0FBSzhtSSxZQUFjLENBQUV2a0ksS0FBTSxHQUFJZSxNQUFPLElBQ3RDdEQsS0FBSyttSSxhQUFlLElBQUlsQyxFQUFrQm1DLGFBQWFyNUYsR0FDdkQzdEMsS0FBS2luSSxnQkFBa0JqbkksS0FBS2tuSSxvQkFBb0IsRUFDcEQsQ0FFQSxJQUFBclYsQ0FBSzkzRixHQUNELElBQUlseUIsRUFBSW9OLEVBQ29DLFFBQTNDQSxHQUFNcE4sRUFBSzdILEtBQUsydEMsU0FBUzBoRixvQkFBaUMsSUFBUHA2RyxHQUF5QkEsRUFBR2pTLEtBQUs2RSxFQUFJN0gsS0FBSyttSSxhQUFhSSxTQUFTcHRHLEdBQ3hILENBRUEsa0JBQUFtdEcsQ0FBbUIxNkcsR0FDZixPQUFLeHNCLEtBQUs0SCxRQUFRNFcsdUJBR1gsQ0FDSHV3RyxVQUFXL3VILEtBQUsrbUksYUFBYTFrRSxLQUM3QjJzRCxTQUFVaHZILEtBQUsrbUksYUFBYXhrRSxJQUFNLzFDLEVBQ2xDb3pGLFlBQWE1L0csS0FBSyttSSxhQUFhdjZHLE9BQVNBLEVBQ3hDeWlHLFNBQVUsRUFDVkMsUUFBUyxFQUNUclAsV0FBWSxHQVJMLElBVWYsQ0FDQSxlQUFBdW5CLEdBQ0ksSUFBSXBuSSxLQUFLd21JLE9BQVQsQ0FHQSxJQURBeG1JLEtBQUt3bUksUUFBUyxFQUNQeG1JLEtBQUt3b0IsU0FBV3hvQixLQUFLdW1JLFFBQVEsQ0FDaEN2bUksS0FBSzRtSSxzQkFBd0IsRUFDN0IsTUFBTS9uRyxFQUFLNytCLEtBQUtxbkksV0FDWHJuSSxLQUFLc25JLHNCQUNOdG5JLEtBQUt1bkksV0FBVzFvRyxFQUV4QixDQUNBNytCLEtBQUt3bUksUUFBUyxDQVRKLENBVWQsQ0FFQSxLQUFBeDdFLEdBQ0lockQsS0FBS3VtSSxRQUFTLENBQ2xCLENBQ0EsTUFBQXQ3RSxDQUFPdThFLEdBQ0gsSUFBS3huSSxLQUFLdW1JLE9BQ04sTUFBTSxJQUFJcDNILE1BQU0sOEJBRXBCblAsS0FBS3VtSSxRQUFTLEVBRVZ2bUksS0FBS3dtSSxTQUVUeG1JLEtBQUtvbkksa0JBQ0FwbkksS0FBS3VtSSxRQUNOaUIsU0FBOERBLElBRXRFLENBQ0EsS0FBQTVzRyxDQUFNa3dCLEVBQU8yOEUsRUFBYUQsR0FDdEJ4bkksS0FBS3dvQixRQUFTLEVBQ2R4b0IsS0FBSyttSSxhQUFhbnNHLE1BQU1rd0IsRUFBTzI4RSxHQUMvQnpuSSxLQUFLb25JLGtCQUNBcG5JLEtBQUt1bUksUUFDTmlCLFNBQThEQSxHQUV0RSxDQUNBLHNCQUFBRSxDQUF1QjU4RSxHQUNuQjlxRCxLQUFLd29CLFFBQVMsRUFDZHhvQixLQUFLK21JLGFBQWFXLHVCQUF1QjU4RSxHQUN6QzlxRCxLQUFLb25JLGlCQUNULENBRUEsa0JBQUFFLEdBQ0ksUUFBSXRuSSxLQUFLK21JLGFBQWFZLGdCQUNsQjNuSSxLQUFLNG5JLFdBQVc1bkksS0FBSzRtSSx1QkFDckI1bUksS0FBS3dvQixRQUFTLEdBQ1AsRUFHZixDQUVBLFFBQUE2K0csR0FFSSxPQURBcm5JLEtBQUs0bUksd0JBQ0U1bUksS0FBSyttSSxhQUFhYyxTQUM3QixDQUNBLFVBQUFELENBQVdyK0UsR0FDUHZwRCxLQUFLNG1JLHVCQUF5QnI5RSxFQUM5QnZwRCxLQUFLK21JLGFBQWFlLFFBQVF2K0UsRUFDOUIsQ0FDQSxpQkFBQXcrRSxDQUFrQi8xSCxFQUFPNnNCLEdBQ3JCNytCLEtBQUtnUyxNQUFRQSxFQUNiaFMsS0FBS3VuSSxXQUFXMW9HLEVBQ3BCLENBQ0EsVUFBQW1wRyxDQUFXeitFLEdBQ1B2cEQsS0FBSzRtSSx1QkFBeUJyOUUsRUFDOUIsSUFBSyxJQUFJNWtELEVBQUksRUFBR0EsRUFBSTRrRCxFQUFPNWtELElBQ3ZCM0UsS0FBSyttSSxhQUFhYyxTQUUxQixDQUNBLHVCQUFBSSxDQUF3QkMsRUFBU0MsR0FDN0IsUUFBSW5vSSxLQUFLK21JLGFBQWF6NEgsV0FBVzQ1SCxFQUFTQyxLQUV0Q25vSSxLQUFLZ29JLFdBQVdFLEVBQVE3bkksT0FBUyxJQUMxQixFQUdmLENBRUEsb0JBQUErbkksR0FDSXBvSSxLQUFLdzdILGFBQWUsQ0FDaEJwMEgsS0FBTXFuSCxFQUFXaEUsVUFBVXNLLFVBQzNCbGxILFFBQVMsR0FDVHkwRyxNQUFPcEUsRUFBVTJCLE9BQU95SSxRQUN4QnNNLGFBQWEsRUFDYmhFLGdCQUFnQixFQUNoQjNwRCxNQUFPLEdBQ1BxRixTQUFVdHVFLEtBQUtrbkksbUJBQW1CLEdBRTFDLENBQ0Esa0JBQUFtQixHQUNJcm9JLEtBQUt3N0gsYUFBZSxDQUNoQnAwSCxLQUFNcW5ILEVBQVdoRSxVQUFVdUssUUFDM0JubEgsUUFBUyxHQUNUeTBHLE1BQU9wRSxFQUFVMkIsT0FBT3lJLFFBQ3hCc00sYUFBYSxFQUNiaEUsZ0JBQWdCLEVBQ2hCM3BELE1BQU8sR0FDUHFGLFNBQVV0dUUsS0FBS2tuSSxtQkFBbUIsR0FFMUMsQ0FDQSxtQkFBQW9CLENBQW9COTdHLEdBQ2hCeHNCLEtBQUt3N0gsYUFBZSxDQUNoQnAwSCxLQUFNcW5ILEVBQVdoRSxVQUFVcUssUUFDM0JwdEgsS0FBTSxHQUNONG1FLFNBQVV0dUUsS0FBS2tuSSxtQkFBbUIxNkcsR0FFMUMsQ0FDQSxtQkFBQSs3RyxDQUFvQkMsR0FDaEJ4b0ksS0FBS3c3SCxhQUFlLENBQ2hCcDBILEtBQU1xbkgsRUFBV2hFLFVBQVVhLFFBQzNCL29ILEtBQU1pbUksRUFDTm5KLGFBQWEsRUFDYnBpQixTQUFVLEtBQ1ZDLFNBQVUsS0FDVjV1QyxTQUFVdHVFLEtBQUtpbkksZ0JBRXZCLENBQ0EscUJBQUF3QixDQUFzQnJoSSxFQUFNazJILEdBQ3hCdDlILEtBQUs2bUksc0JBQXdCLENBQ3pCei9ILE9BQ0FrMkgsUUFDQWh2RCxTQUFVdHVFLEtBQUtpbkksZ0JBRXZCLENBRUEsV0FBQXlCLENBQVlDLEdBQ1Izb0ksS0FBSzhtSSxZQUFjLENBQ2Z2a0ksS0FBTW9tSSxFQUNOcmxJLE1BQU8sSUFFWHRELEtBQUtpbkksZ0JBQWtCam5JLEtBQUtrbkksbUJBQW1CLEVBQ25ELENBQ0EsY0FBQTBCLEdBQ0ksSUFBSS9nSSxFQUNBb04sRUFDSixNQUFNb08sRUFBUXJqQixLQUFLdzdILGFBQ2dELFFBQS9ELEVBQUkvTSxFQUFXL0QsY0FBY3JuRyxFQUFPcmpCLEtBQUs4bUksWUFBWXZrSSxPQUNyRDhnQixFQUFNNGxELE1BQU0za0UsS0FBS3RFLEtBQUs4bUksYUFDbEJ6akgsRUFBTWlyRCxVQUFZdHVFLEtBQUtpbkksbUJBQ3VDLFFBQXRDcC9ILEdBQU1vTixFQUFLb08sRUFBTWlyRCxVQUFVckYsYUFBMEIsSUFBUHBoRSxFQUFnQkEsRUFBTW9OLEVBQUdnMEQsTUFBUTFsRSxPQUFPeUIsT0FBTyxPQUN2R2hGLEtBQUs4bUksWUFBWXZrSSxNQUFRdkMsS0FBS2luSSxnQkFFNUNqbkksS0FBSzZvSSxvQkFJVDdvSSxLQUFLNnhILEtBQUsxRixFQUFpQnRMLElBQUlpb0IsbUJBRXZDLENBQ0EsZUFBQUQsR0FDUTdvSSxLQUFLaW5JLGtCQUNMam5JLEtBQUtpbkksZ0JBQWdCaFksUUFBVWp2SCxLQUFLK21JLGFBQWExa0UsS0FDakRyaUUsS0FBS2luSSxnQkFBZ0IvWCxPQUFTbHZILEtBQUsrbUksYUFBYXhrRSxJQUNoRHZpRSxLQUFLaW5JLGdCQUFnQnBuQixVQUFZNy9HLEtBQUsrbUksYUFBYXY2RyxPQUUzRCxDQUVBLFlBQUF1OEcsQ0FBYUMsR0FDVGhwSSxLQUFLaXBJLDJCQUEyQkQsRUFBRzE2RCxVQUNuQ3R1RSxLQUFLdzdILGFBQWUsS0FDaEJ3TixFQUFHMTZELFdBQ0gwNkQsRUFBRzE2RCxTQUFTMmdELFFBQVVqdkgsS0FBSyttSSxhQUFhMWtFLEtBQ3hDMm1FLEVBQUcxNkQsU0FBUzRnRCxPQUFTbHZILEtBQUsrbUksYUFBYXhrRSxJQUFNLEVBQzdDeW1FLEVBQUcxNkQsU0FBU3V4QyxVQUFZNy9HLEtBQUsrbUksYUFBYXY2RyxPQUFTLEdBRXZEeHNCLEtBQUtpbkksZ0JBQWtCam5JLEtBQUtrbkksb0JBQW9CLEVBQ3BELENBQ0EsbUJBQUFnQyxHQUNJLE1BQU1GLEVBQUtocEksS0FBS3c3SCxhQUNoQng3SCxLQUFLK29JLGFBQWFDLEdBQ2xCQSxFQUFHMWtCLE9BQVEsRUFBSXBFLEVBQVU2RSxVQUFVaWtCLEVBQUduNUgsU0FDbENtNUgsRUFBRzVoSSxPQUFTcW5ILEVBQVdoRSxVQUFVc0ssV0FDakMvMEgsS0FBS3ltSSxpQkFBbUJ1QyxFQUFHbjVILFFBQzNCN1AsS0FBSzJ0QyxRQUFROHhGLFdBQVd1SixLQUdwQkEsRUFBRy8vRCxNQUFNNW9FLE9BQVMsR0FDbEJMLEtBQUs2eEgsS0FBSzFGLEVBQWlCdEwsSUFBSXNvQixzQkFFL0JILEVBQUdwUyxhQUNINTJILEtBQUs2eEgsS0FBSzFGLEVBQWlCdEwsSUFBSXVvQiwyQkFFbkNwcEksS0FBSzJ0QyxRQUFRdXdGLFNBQVM4SyxJQUUxQmhwSSxLQUFLK21JLGFBQWFzQyxpQkFDdEIsQ0FDQSxrQkFBQUMsQ0FBbUJOLEdBQ2ZocEksS0FBSytvSSxhQUFhQyxHQUNsQmhwSSxLQUFLMnRDLFFBQVFxd0YsVUFBVWdMLEdBQ3ZCaHBJLEtBQUsrbUksYUFBYXNDLGlCQUN0QixDQUNBLGtCQUFBRSxDQUFtQlAsR0FDZmhwSSxLQUFLK29JLGFBQWFDLEdBQ2xCaHBJLEtBQUsydEMsUUFBUXN3RixVQUFVK0ssR0FDdkJocEksS0FBSyttSSxhQUFhc0MsaUJBQ3RCLENBQ0EsMEJBQUFKLENBQTJCTyxHQUN2QixHQUFJeHBJLEtBQUs2bUksc0JBQXVCLENBUTVCLE9BTEkyQyxHQUFnQnhwSSxLQUFLNm1JLHNCQUFzQnY0RCxXQUMzQ3R1RSxLQUFLNm1JLHNCQUFzQnY0RCxTQUFTMmdELFFBQVV1YSxFQUFhemEsVUFDM0QvdUgsS0FBSzZtSSxzQkFBc0J2NEQsU0FBUzRnRCxPQUFTc2EsRUFBYXhhLFNBQzFEaHZILEtBQUs2bUksc0JBQXNCdjRELFNBQVN1eEMsVUFBWTJwQixFQUFhNXBCLGFBRXpENS9HLEtBQUs2bUksc0JBQXNCei9ILE1BQy9CLEtBQUtxbkgsRUFBV2hFLFVBQVVpSyxVQUN0QjEwSCxLQUFLMnRDLFFBQVFrd0YsWUFBWTc5SCxLQUFLNm1JLHVCQUM5QixNQUVKLEtBQUtwWSxFQUFXaEUsVUFBVXFULGVBQ3RCOTlILEtBQUsydEMsUUFBUW93RixnQkFBZ0IvOUgsS0FBSzZtSSx1QkFDbEMsTUFFSixLQUFLcFksRUFBV2hFLFVBQVVtSyxxQkFDdEI1MEgsS0FBSzJ0QyxRQUFReXdGLHNCQUFzQnArSCxLQUFLNm1JLHVCQUloRDdtSSxLQUFLNm1JLHNCQUF3QixJQUNqQyxDQUNKLENBQ0EsYUFBQTRDLEdBQ0ksTUFBTW43RCxFQUFXdHVFLEtBQUtrbkksbUJBQW1CLEdBQ3JDNTRELElBQ0FBLEVBQVMyZ0QsUUFBVTNnRCxFQUFTeWdELFVBQzVCemdELEVBQVM0Z0QsT0FBUzVnRCxFQUFTMGdELFNBQzNCMWdELEVBQVN1eEMsVUFBWXZ4QyxFQUFTc3hDLGFBRWxDNS9HLEtBQUtpcEksMkJBQTJCMzZELEdBQ2hDdHVFLEtBQUsydEMsUUFBUXd3RixNQUFNLENBQUUvMkgsS0FBTXFuSCxFQUFXaEUsVUFBVTJKLElBQUs5bEQsYUFDckR0dUUsS0FBS3dvQixRQUFTLENBQ2xCLENBVUEsa0NBQUFraEgsQ0FBbUN0aUksRUFBTW83RCxHQUNyQyxHQUFJeGlFLEtBQUs2bUksc0JBQXVCLENBQzVCLEdBQUk3bUksS0FBSzZtSSxzQkFBc0J6L0gsT0FBU0EsRUFPcEMsWUFEQXBILEtBQUs2bUksc0JBQXNCdkosT0FBUzk2RCxHQUxwQ3hpRSxLQUFLaW5JLGdCQUFrQmpuSSxLQUFLa25JLG1CQUFtQixHQUMvQ2xuSSxLQUFLaXBJLDJCQUEyQmpwSSxLQUFLaW5JLGlCQUNyQ2puSSxLQUFLK21JLGFBQWFzQyxpQkFNMUIsQ0FDQXJwSSxLQUFLeW9JLHNCQUFzQnJoSSxFQUFNbzdELEVBQ3JDLENBQ0EsY0FBQW1uRSxDQUFlOXFHLEdBQ1gsTUFBTXozQixFQUFPK2tCLEVBQWEwUyxHQUNwQjR2RixFQUFXaEUsVUFBVW1LLHFCQUNyQi8xRixJQUFPaW1HLEVBQWE3WixZQUFZMmUsS0FDNUJuYixFQUFXaEUsVUFBVXFULGVBQ3JCclAsRUFBV2hFLFVBQVVpSyxVQUMvQjEwSCxLQUFLMHBJLG1DQUFtQ3RpSSxFQUFNd0gsT0FBT3VxQixjQUFjMEYsR0FDdkUsQ0FHQSxVQUFBZ3JHLENBQVdybkUsR0FDUHhpRSxLQUFLMHBJLG1DQUFtQ2piLEVBQVdoRSxVQUFVaUssVUFBV2x5RCxFQUM1RSxDQUVBLDZCQUFBc25FLENBQThCanJHLEdBQzFCLElBQUk3NEIsRUFBUyxLQUNUdzBCLEVBQVMsRUFDVHV2RyxHQUFtQixFQUN2QixJQUFLLElBQUlwbEksRUFBSSxFQUFHdWdCLEVBQVVnYixFQUFZM0csZUFBZSxHQUFJNTBCLEdBQUssSUFDMURBLEdBQUksRUFBSXU3QixFQUFZbkgsaUJBQWlCbUgsRUFBWTNHLGVBQWdCclUsRUFBU3ZnQixFQUFJLEVBQUdrNkIsS0FDN0VsNkIsRUFBSSxJQUZxRGs2QixFQUFLNytCLEtBQUtxbkksV0FBWSxDQUluRjdzRyxHQUFVLEVBQ1Z0VixFQUFVZ2IsRUFBWTNHLGVBQWU1MEIsR0FDckMsTUFBTWd0RCxFQUFTenNDLEVBQVVnYixFQUFZaEgsYUFBYXVELGFBRWxELEdBQUlrMUIsRUFBUSxDQUVSLE1BQU1uMUIsR0FBZW0xQixHQUFVLElBQU0sRUF1QnJDLEdBcEJJOXlCLElBQU9pbUcsRUFBYTdaLFlBQVkrZSxXQUNoQ2hxSSxLQUFLaXFJLHNDQXRWY0MsRUF1VldscUksS0FBSyttSSxhQUFhb0QsS0FBSyxNQXRWbkRyRixFQUFhN1osWUFBWW1mLGFBQWV0dEcsRUFBb0JvdEcsS0F5VjlEbGtJLEVBQVMsQ0FBQzgrSCxFQUFhN1osWUFBWW9mLFdBRW5DMWxJLEdBQUs2M0IsSUFJTHgyQixFQUNvQixJQUFoQncyQixFQUNNLENBQUMwRCxFQUFZM0csZUFBZTUwQixJQUFNdTdCLEVBQVloSCxhQUFhdUQsY0FDM0MsSUFBaEJELEVBQ0ksQ0FBQzBELEVBQVkzRyxpQkFBaUI1MEIsSUFDOUIsQ0FBQ3U3QixFQUFZM0csaUJBQWlCNTBCLEdBQUl1N0IsRUFBWTNHLGlCQUFpQjUwQixJQUM3RTYxQixFQUFTLEVBQ1R1dkcsRUFBbUJsckcsSUFBT2ltRyxFQUFhN1osWUFBWStlLFdBRW5DLElBQWhCeHRHLEVBQW1CLENBRW5CeDhCLEtBQUtxbkksV0FDTCxLQUNKLENBQ0osQ0FDSixDQS9XUixJQUF1QzZDLEVBd1gvQixPQVJBbHFJLEtBQUs0bkksV0FBV3B0RyxHQUNadXZHLElBQXFCL3BJLEtBQUsrbUksYUFBYVksZUFDdkMzbkksS0FBSzZ4SCxLQUFLMUYsRUFBaUJ0TCxJQUFJdmtGLHlDQUtuQ3Q4QixLQUFLNG5JLFdBQVcsR0FDVDVoSSxDQUNYLENBQ0EsZ0NBQUFpa0ksR0FDSSxPQUFRanFJLEtBQUswbUksY0FBZ0J2N0UsRUFBTW0vRSwrQkFDL0J0cUksS0FBSzBtSSxjQUFnQnY3RSxFQUFNby9FLCtCQUMzQnZxSSxLQUFLMG1JLGNBQWdCdjdFLEVBQU1xL0Usd0JBQ25DLENBQ0EsMkNBQUFDLENBQTRDNXJHLEdBQ3BDNytCLEtBQUtpcUksbUNBQ0xqcUksS0FBSzhtSSxZQUFZeGpJLE9BQVNzTCxPQUFPdXFCLGNBQWMwRixHQUcvQzcrQixLQUFLMnBJLGVBQWU5cUcsRUFFNUIsQ0FFQSxVQUFBMG9HLENBQVcxb0csR0FDUCxPQUFRNytCLEtBQUtnUyxPQUNULEtBQUttNUMsRUFBTWs3RSxLQUNQcm1JLEtBQUswcUksV0FBVzdyRyxHQUNoQixNQUVKLEtBQUtzc0IsRUFBTTJuRSxPQUNQOXlILEtBQUsycUksYUFBYTlyRyxHQUNsQixNQUVKLEtBQUtzc0IsRUFBTTRuRSxRQUNQL3lILEtBQUs0cUksY0FBYy9yRyxHQUNuQixNQUVKLEtBQUtzc0IsRUFBTStuRSxZQUNQbHpILEtBQUs2cUksaUJBQWlCaHNHLEdBQ3RCLE1BRUosS0FBS3NzQixFQUFNNjlELFVBQ1BocEgsS0FBSzhxSSxnQkFBZ0Jqc0csR0FDckIsTUFFSixLQUFLc3NCLEVBQU00L0UsU0FDUC9xSSxLQUFLZ3JJLGNBQWNuc0csR0FDbkIsTUFFSixLQUFLc3NCLEVBQU04L0UsYUFDUGpySSxLQUFLa3JJLGlCQUFpQnJzRyxHQUN0QixNQUVKLEtBQUtzc0IsRUFBTWdnRixTQUNQbnJJLEtBQUtvckksY0FBY3ZzRyxHQUNuQixNQUVKLEtBQUtzc0IsRUFBTWtnRixzQkFDUHJySSxLQUFLc3JJLHlCQUF5QnpzRyxHQUM5QixNQUVKLEtBQUtzc0IsRUFBTW9nRixvQkFDUHZySSxLQUFLd3JJLHVCQUF1QjNzRyxHQUM1QixNQUVKLEtBQUtzc0IsRUFBTXNnRixvQkFDUHpySSxLQUFLMHJJLHVCQUF1QjdzRyxHQUM1QixNQUVKLEtBQUtzc0IsRUFBTXdnRix1QkFDUDNySSxLQUFLNHJJLDBCQUEwQi9zRyxHQUMvQixNQUVKLEtBQUtzc0IsRUFBTTBnRixxQkFDUDdySSxLQUFLOHJJLHdCQUF3Qmp0RyxHQUM3QixNQUVKLEtBQUtzc0IsRUFBTTRnRixxQkFDUC9ySSxLQUFLZ3NJLHdCQUF3Qm50RyxHQUM3QixNQUVKLEtBQUtzc0IsRUFBTThnRiwyQkFDUGpzSSxLQUFLa3NJLDZCQUE2QnJ0RyxHQUNsQyxNQUVKLEtBQUtzc0IsRUFBTWdoRix5QkFDUG5zSSxLQUFLb3NJLDJCQUEyQnZ0RyxHQUNoQyxNQUVKLEtBQUtzc0IsRUFBTWtoRix5QkFDUHJzSSxLQUFLc3NJLDJCQUEyQnp0RyxHQUNoQyxNQUVKLEtBQUtzc0IsRUFBTW9oRix5QkFDUHZzSSxLQUFLd3NJLDRCQUE0QjN0RyxHQUNqQyxNQUVKLEtBQUtzc0IsRUFBTXNoRiw4QkFDUHpzSSxLQUFLMHNJLGdDQUFnQzd0RyxHQUNyQyxNQUVKLEtBQUtzc0IsRUFBTXdoRixvQkFDUDNzSSxLQUFLNHNJLHdCQUF3Qi90RyxHQUM3QixNQUVKLEtBQUtzc0IsRUFBTTBoRix5QkFDUDdzSSxLQUFLOHNJLDRCQUE0Qmp1RyxHQUNqQyxNQUVKLEtBQUtzc0IsRUFBTTRoRiw4QkFDUC9zSSxLQUFLZ3RJLGdDQUFnQ251RyxHQUNyQyxNQUVKLEtBQUtzc0IsRUFBTThoRixtQ0FDUGp0SSxLQUFLa3RJLG9DQUFvQ3J1RyxHQUN6QyxNQUVKLEtBQUtzc0IsRUFBTWdpRixpQ0FDUG50SSxLQUFLb3RJLGtDQUFrQ3Z1RyxHQUN2QyxNQUVKLEtBQUtzc0IsRUFBTWtpRixpQ0FDUHJ0SSxLQUFLc3RJLGtDQUFrQ3p1RyxHQUN2QyxNQUVKLEtBQUtzc0IsRUFBTW9pRixnQ0FDUHZ0SSxLQUFLd3RJLGtDQUFrQzN1RyxHQUN2QyxNQUVKLEtBQUtzc0IsRUFBTXNpRiwyQkFDUHp0SSxLQUFLMHRJLDhCQUE4Qjd1RyxHQUNuQyxNQUVKLEtBQUtzc0IsRUFBTXdpRixnQ0FDUDN0SSxLQUFLNHRJLGtDQUFrQy91RyxHQUN2QyxNQUVKLEtBQUtzc0IsRUFBTTBpRixxQ0FDUDd0SSxLQUFLOHRJLHNDQUFzQ2p2RyxHQUMzQyxNQUVKLEtBQUtzc0IsRUFBTTRpRiwwQ0FDUC90SSxLQUFLZ3VJLDBDQUEwQ252RyxHQUMvQyxNQUVKLEtBQUtzc0IsRUFBTThpRiw4QkFDUGp1SSxLQUFLa3VJLGdDQUFnQ3J2RyxHQUNyQyxNQUVKLEtBQUtzc0IsRUFBTWdqRixzQkFDUG51SSxLQUFLb3VJLDBCQUEwQnZ2RyxHQUMvQixNQUVKLEtBQUtzc0IsRUFBTWtqRixlQUNQcnVJLEtBQUtzdUksb0JBQW9CenZHLEdBQ3pCLE1BRUosS0FBS3NzQixFQUFNb2pGLHFCQUNQdnVJLEtBQUt3dUkseUJBQXlCM3ZHLEdBQzlCLE1BRUosS0FBS3NzQixFQUFNc2pGLHVCQUNQenVJLEtBQUswdUksMkJBQTJCN3ZHLEdBQ2hDLE1BRUosS0FBS3NzQixFQUFNbS9FLDhCQUNQdHFJLEtBQUsydUksaUNBQWlDOXZHLEdBQ3RDLE1BRUosS0FBS3NzQixFQUFNby9FLDhCQUNQdnFJLEtBQUs0dUksaUNBQWlDL3ZHLEdBQ3RDLE1BRUosS0FBS3NzQixFQUFNcS9FLHlCQUNQeHFJLEtBQUs2dUksNkJBQTZCaHdHLEdBQ2xDLE1BRUosS0FBS3NzQixFQUFNMmpGLDZCQUNQOXVJLEtBQUsrdUksZ0NBQWdDbHdHLEdBQ3JDLE1BRUosS0FBS3NzQixFQUFNNmpGLHVCQUNQaHZJLEtBQUtpdkksMEJBQTBCcHdHLEdBQy9CLE1BRUosS0FBS3NzQixFQUFNK2pGLGNBQ1BsdkksS0FBS212SSxtQkFBbUJ0d0csR0FDeEIsTUFFSixLQUFLc3NCLEVBQU1pa0Ysd0JBQ1BwdkksS0FBS3F2SSw0QkFBNEJ4d0csR0FDakMsTUFFSixLQUFLc3NCLEVBQU1ta0YsY0FDUHR2SSxLQUFLdXZJLG1CQUFtQjF3RyxHQUN4QixNQUVKLEtBQUtzc0IsRUFBTXFrRixtQkFDUHh2SSxLQUFLeXZJLHVCQUF1QjV3RyxHQUM1QixNQUVKLEtBQUtzc0IsRUFBTTJwRSxRQUNQOTBILEtBQUswdkksY0FBYzd3RyxHQUNuQixNQUVKLEtBQUtzc0IsRUFBTXdrRix1QkFDUDN2SSxLQUFLNHZJLDBCQUEwQi93RyxHQUMvQixNQUVKLEtBQUtzc0IsRUFBTTBrRiw0QkFDUDd2SSxLQUFLOHZJLDhCQUE4Qmp4RyxHQUNuQyxNQUVKLEtBQUtzc0IsRUFBTTRrRixpQ0FDUC92SSxLQUFLZ3dJLGtDQUFrQ254RyxHQUN2QyxNQUVKLEtBQUtzc0IsRUFBTThrRixzQ0FDUGp3SSxLQUFLa3dJLHNDQUFzQ3J4RyxHQUMzQyxNQUVKLEtBQUtzc0IsRUFBTWdsRixpQkFDUG53SSxLQUFLb3dJLHFCQUFxQnZ4RyxHQUMxQixNQUVKLEtBQUtzc0IsRUFBTWtsRixZQUNQcndJLEtBQUtzd0ksaUJBQWlCenhHLEdBQ3RCLE1BRUosS0FBS3NzQixFQUFNb2xGLGlCQUNQdndJLEtBQUt3d0kscUJBQXFCM3hHLEdBQzFCLE1BRUosS0FBS3NzQixFQUFNbWdFLFFBQ1B0ckgsS0FBS3l3SSxjQUFjNXhHLEdBQ25CLE1BRUosS0FBS3NzQixFQUFNdWxGLG9CQUNQMXdJLEtBQUsyd0ksd0JBQXdCOXhHLEdBQzdCLE1BRUosS0FBS3NzQixFQUFNeWxGLGFBQ1A1d0ksS0FBSzZ3SSxrQkFBa0JoeUcsR0FDdkIsTUFFSixLQUFLc3NCLEVBQU0ybEYsbUJBQ1A5d0ksS0FBSyt3SSx1QkFBdUJseUcsR0FDNUIsTUFFSixLQUFLc3NCLEVBQU02bEYsNkJBQ1BoeEksS0FBS2l4SSxnQ0FBZ0NweUcsR0FDckMsTUFFSixLQUFLc3NCLEVBQU0rbEYsaUNBQ1BseEksS0FBS214SSxvQ0FBb0N0eUcsR0FDekMsTUFFSixLQUFLc3NCLEVBQU1pbUYsd0NBQ1BweEksS0FBS3F4SSwwQ0FBMEN4eUcsR0FDL0MsTUFFSixLQUFLc3NCLEVBQU1tbUYsd0NBQ1B0eEksS0FBS3V4SSwwQ0FBMEMxeUcsR0FDL0MsTUFFSixLQUFLc3NCLEVBQU1xbUYsZ0NBQ1B4eEksS0FBS3l4SSxtQ0FBbUM1eUcsR0FDeEMsTUFFSixLQUFLc3NCLEVBQU11bUYsOENBQ1AxeEksS0FBSzJ4SSwrQ0FBK0M5eUcsR0FDcEQsTUFFSixLQUFLc3NCLEVBQU15bUYsNkJBQ1A1eEksS0FBSzZ4SSxnQ0FBZ0NoekcsR0FDckMsTUFFSixLQUFLc3NCLEVBQU0ybUYsaUNBQ1A5eEksS0FBSyt4SSxvQ0FBb0NsekcsR0FDekMsTUFFSixLQUFLc3NCLEVBQU02bUYsd0NBQ1BoeUksS0FBS2l5SSwwQ0FBMENwekcsR0FDL0MsTUFFSixLQUFLc3NCLEVBQU0rbUYsd0NBQ1BseUksS0FBS215SSwwQ0FBMEN0ekcsR0FDL0MsTUFFSixLQUFLc3NCLEVBQU1pbkYsZ0NBQ1BweUksS0FBS3F5SSxtQ0FBbUN4ekcsR0FDeEMsTUFFSixLQUFLc3NCLEVBQU1tbkYsY0FDUHR5SSxLQUFLdXlJLG1CQUFtQjF6RyxHQUN4QixNQUVKLEtBQUtzc0IsRUFBTW03RSxjQUNQdG1JLEtBQUt3eUksbUJBQW1CM3pHLEdBQ3hCLE1BRUosS0FBS3NzQixFQUFNc25GLHNCQUNQenlJLEtBQUsweUksMEJBQTBCN3pHLEdBQy9CLE1BRUosS0FBS3NzQixFQUFNd25GLGtCQUNQM3lJLEtBQUs0eUksc0JBQXNCL3pHLEdBQzNCLE1BRUosS0FBS3NzQixFQUFNMG5GLG9CQUNQN3lJLEtBQUs4eUkseUJBQXlCajBHLEdBQzlCLE1BRUosS0FBS3NzQixFQUFNNG5GLDBCQUNQL3lJLEtBQUtnekksOEJBQThCbjBHLEdBQ25DLE1BRUosS0FBS3NzQixFQUFNOG5GLG9CQUNQanpJLEtBQUtrekkseUJBQXlCcjBHLEdBQzlCLE1BRUosS0FBS3NzQixFQUFNZ29GLDRCQUNQbnpJLEtBQUtvekksZ0NBQWdDdjBHLEdBQ3JDLE1BRUosS0FBS3NzQixFQUFNa29GLHNDQUNQcnpJLEtBQUtzekkseUNBQXlDejBHLEdBQzlDLE1BRUosS0FBS3NzQixFQUFNb29GLGdDQUNQdnpJLEtBQUt3ekksb0NBQW9DMzBHLEdBQ3pDLE1BRUosS0FBS3NzQixFQUFNc29GLDRCQUNQenpJLEtBQUswekksZ0NBQWdDNzBHLEdBQ3JDLE1BRUosS0FBS3NzQixFQUFNd29GLGdDQUNQM3pJLEtBQUs0ekksbUNBQW1DLzBHLEdBQ3hDLE1BRUosUUFDSSxNQUFNLElBQUkxdkIsTUFBTSxpQkFHNUIsQ0FJQSxVQUFBdTdILENBQVc3ckcsR0FDUCxPQUFRQSxHQUNKLEtBQUtpbUcsRUFBYTdaLFlBQVk0b0IsZUFDMUI3ekksS0FBS2dTLE1BQVFtNUMsRUFBTTQvRSxTQUNuQixNQUVKLEtBQUtqRyxFQUFhN1osWUFBWW9mLFVBQzFCcnFJLEtBQUswbUksWUFBY3Y3RSxFQUFNazdFLEtBQ3pCcm1JLEtBQUtnUyxNQUFRbTVDLEVBQU0wbkYsb0JBQ25CLE1BRUosS0FBSy9OLEVBQWE3WixZQUFZMmUsS0FDMUI1cEksS0FBSzZ4SCxLQUFLMUYsRUFBaUJ0TCxJQUFJaXpCLHlCQUMvQjl6SSxLQUFLMnBJLGVBQWU5cUcsR0FDcEIsTUFFSixLQUFLaW1HLEVBQWE3WixZQUFZbUosSUFDMUJwMEgsS0FBS3lwSSxnQkFDTCxNQUVKLFFBQ0l6cEksS0FBSzJwSSxlQUFlOXFHLEdBR2hDLENBR0EsWUFBQThyRyxDQUFhOXJHLEdBQ1QsT0FBUUEsR0FDSixLQUFLaW1HLEVBQWE3WixZQUFZb2YsVUFDMUJycUksS0FBSzBtSSxZQUFjdjdFLEVBQU0ybkUsT0FDekI5eUgsS0FBS2dTLE1BQVFtNUMsRUFBTTBuRixvQkFDbkIsTUFFSixLQUFLL04sRUFBYTdaLFlBQVk0b0IsZUFDMUI3ekksS0FBS2dTLE1BQVFtNUMsRUFBTWtnRixzQkFDbkIsTUFFSixLQUFLdkcsRUFBYTdaLFlBQVkyZSxLQUMxQjVwSSxLQUFLNnhILEtBQUsxRixFQUFpQnRMLElBQUlpekIseUJBQy9COXpJLEtBQUs2cEksV0FBVy9FLEVBQWE1Wix1QkFDN0IsTUFFSixLQUFLNFosRUFBYTdaLFlBQVltSixJQUMxQnAwSCxLQUFLeXBJLGdCQUNMLE1BRUosUUFDSXpwSSxLQUFLMnBJLGVBQWU5cUcsR0FHaEMsQ0FHQSxhQUFBK3JHLENBQWMvckcsR0FDVixPQUFRQSxHQUNKLEtBQUtpbUcsRUFBYTdaLFlBQVk0b0IsZUFDMUI3ekksS0FBS2dTLE1BQVFtNUMsRUFBTXdnRix1QkFDbkIsTUFFSixLQUFLN0csRUFBYTdaLFlBQVkyZSxLQUMxQjVwSSxLQUFLNnhILEtBQUsxRixFQUFpQnRMLElBQUlpekIseUJBQy9COXpJLEtBQUs2cEksV0FBVy9FLEVBQWE1Wix1QkFDN0IsTUFFSixLQUFLNFosRUFBYTdaLFlBQVltSixJQUMxQnAwSCxLQUFLeXBJLGdCQUNMLE1BRUosUUFDSXpwSSxLQUFLMnBJLGVBQWU5cUcsR0FHaEMsQ0FHQSxnQkFBQWdzRyxDQUFpQmhzRyxHQUNiLE9BQVFBLEdBQ0osS0FBS2ltRyxFQUFhN1osWUFBWTRvQixlQUMxQjd6SSxLQUFLZ1MsTUFBUW01QyxFQUFNOGdGLDJCQUNuQixNQUVKLEtBQUtuSCxFQUFhN1osWUFBWTJlLEtBQzFCNXBJLEtBQUs2eEgsS0FBSzFGLEVBQWlCdEwsSUFBSWl6Qix5QkFDL0I5ekksS0FBSzZwSSxXQUFXL0UsRUFBYTVaLHVCQUM3QixNQUVKLEtBQUs0WixFQUFhN1osWUFBWW1KLElBQzFCcDBILEtBQUt5cEksZ0JBQ0wsTUFFSixRQUNJenBJLEtBQUsycEksZUFBZTlxRyxHQUdoQyxDQUdBLGVBQUFpc0csQ0FBZ0Jqc0csR0FDWixPQUFRQSxHQUNKLEtBQUtpbUcsRUFBYTdaLFlBQVkyZSxLQUMxQjVwSSxLQUFLNnhILEtBQUsxRixFQUFpQnRMLElBQUlpekIseUJBQy9COXpJLEtBQUs2cEksV0FBVy9FLEVBQWE1Wix1QkFDN0IsTUFFSixLQUFLNFosRUFBYTdaLFlBQVltSixJQUMxQnAwSCxLQUFLeXBJLGdCQUNMLE1BRUosUUFDSXpwSSxLQUFLMnBJLGVBQWU5cUcsR0FHaEMsQ0FHQSxhQUFBbXNHLENBQWNuc0csR0FDVixHQUFJeW1HLEVBQWN6bUcsR0FDZDcrQixLQUFLb29JLHVCQUNMcG9JLEtBQUtnUyxNQUFRbTVDLEVBQU1nZ0YsU0FDbkJuckksS0FBS29ySSxjQUFjdnNHLFFBR25CLE9BQVFBLEdBQ0osS0FBS2ltRyxFQUFhN1osWUFBWThvQixpQkFDMUIvekksS0FBS2dTLE1BQVFtNUMsRUFBTWlrRix3QkFDbkIsTUFFSixLQUFLdEssRUFBYTdaLFlBQVlrYixRQUMxQm5tSSxLQUFLZ1MsTUFBUW01QyxFQUFNOC9FLGFBQ25CLE1BRUosS0FBS25HLEVBQWE3WixZQUFZK29CLGNBQzFCaDBJLEtBQUs2eEgsS0FBSzFGLEVBQWlCdEwsSUFBSW96Qix3Q0FDL0JqMEksS0FBS3NvSSxvQkFBb0IsR0FDekJ0b0ksS0FBS2dTLE1BQVFtNUMsRUFBTStqRixjQUNuQmx2SSxLQUFLbXZJLG1CQUFtQnR3RyxHQUN4QixNQUVKLEtBQUtpbUcsRUFBYTdaLFlBQVltSixJQUMxQnAwSCxLQUFLNnhILEtBQUsxRixFQUFpQnRMLElBQUlxekIsa0JBQy9CbDBJLEtBQUs2cEksV0FBVyxLQUNoQjdwSSxLQUFLeXBJLGdCQUNMLE1BRUosUUFDSXpwSSxLQUFLNnhILEtBQUsxRixFQUFpQnRMLElBQUlzekIsZ0NBQy9CbjBJLEtBQUs2cEksV0FBVyxLQUNoQjdwSSxLQUFLZ1MsTUFBUW01QyxFQUFNazdFLEtBQ25Ccm1JLEtBQUswcUksV0FBVzdyRyxHQUdoQyxDQUdBLGdCQUFBcXNHLENBQWlCcnNHLEdBQ2IsR0FBSXltRyxFQUFjem1HLEdBQ2Q3K0IsS0FBS3FvSSxxQkFDTHJvSSxLQUFLZ1MsTUFBUW01QyxFQUFNZ2dGLFNBQ25CbnJJLEtBQUtvckksY0FBY3ZzRyxRQUduQixPQUFRQSxHQUNKLEtBQUtpbUcsRUFBYTdaLFlBQVltYixrQkFDMUJwbUksS0FBSzZ4SCxLQUFLMUYsRUFBaUJ0TCxJQUFJdXpCLG1CQUMvQnAwSSxLQUFLZ1MsTUFBUW01QyxFQUFNazdFLEtBQ25CLE1BRUosS0FBS3ZCLEVBQWE3WixZQUFZbUosSUFDMUJwMEgsS0FBSzZ4SCxLQUFLMUYsRUFBaUJ0TCxJQUFJcXpCLGtCQUMvQmwwSSxLQUFLNnBJLFdBQVcsTUFDaEI3cEksS0FBS3lwSSxnQkFDTCxNQUVKLFFBQ0l6cEksS0FBSzZ4SCxLQUFLMUYsRUFBaUJ0TCxJQUFJc3pCLGdDQUMvQm4wSSxLQUFLc29JLG9CQUFvQixHQUN6QnRvSSxLQUFLZ1MsTUFBUW01QyxFQUFNK2pGLGNBQ25CbHZJLEtBQUttdkksbUJBQW1CdHdHLEdBR3hDLENBR0EsYUFBQXVzRyxDQUFjdnNHLEdBQ1YsTUFBTXhiLEVBQVFyakIsS0FBS3c3SCxhQUNuQixPQUFRMzhGLEdBQ0osS0FBS2ltRyxFQUFhN1osWUFBWThhLE1BQzlCLEtBQUtqQixFQUFhN1osWUFBWXFYLFVBQzlCLEtBQUt3QyxFQUFhN1osWUFBWSthLFdBQzlCLEtBQUtsQixFQUFhN1osWUFBWWdiLFVBQzFCam1JLEtBQUtnUyxNQUFRbTVDLEVBQU1nakYsc0JBQ25CLE1BRUosS0FBS3JKLEVBQWE3WixZQUFZa2IsUUFDMUJubUksS0FBS2dTLE1BQVFtNUMsRUFBTTZqRix1QkFDbkIsTUFFSixLQUFLbEssRUFBYTdaLFlBQVltYixrQkFDMUJwbUksS0FBS2dTLE1BQVFtNUMsRUFBTWs3RSxLQUNuQnJtSSxLQUFLa3BJLHNCQUNMLE1BRUosS0FBS3BFLEVBQWE3WixZQUFZMmUsS0FDMUI1cEksS0FBSzZ4SCxLQUFLMUYsRUFBaUJ0TCxJQUFJaXpCLHlCQUMvQnp3SCxFQUFNeFQsU0FBV2kxSCxFQUFhNVosc0JBQzlCLE1BRUosS0FBSzRaLEVBQWE3WixZQUFZbUosSUFDMUJwMEgsS0FBSzZ4SCxLQUFLMUYsRUFBaUJ0TCxJQUFJd3pCLFVBQy9CcjBJLEtBQUt5cEksZ0JBQ0wsTUFFSixRQUNJcG1ILEVBQU14VCxTQUFXakIsT0FBT3VxQixjQUFjZ3NHLEVBQWF0bUcsR0FBTWluRyxFQUFham5HLEdBQU1BLEdBR3hGLENBR0Esd0JBQUF5c0csQ0FBeUJ6c0csR0FDakJBLElBQU9pbUcsRUFBYTdaLFlBQVlrYixRQUNoQ25tSSxLQUFLZ1MsTUFBUW01QyxFQUFNb2dGLHFCQUduQnZySSxLQUFLNnBJLFdBQVcsS0FDaEI3cEksS0FBS2dTLE1BQVFtNUMsRUFBTTJuRSxPQUNuQjl5SCxLQUFLMnFJLGFBQWE5ckcsR0FFMUIsQ0FHQSxzQkFBQTJzRyxDQUF1QjNzRyxHQUNmeW1HLEVBQWN6bUcsSUFDZDcrQixLQUFLZ1MsTUFBUW01QyxFQUFNc2dGLG9CQUNuQnpySSxLQUFLMHJJLHVCQUF1QjdzRyxLQUc1QjcrQixLQUFLNnBJLFdBQVcsTUFDaEI3cEksS0FBS2dTLE1BQVFtNUMsRUFBTTJuRSxPQUNuQjl5SCxLQUFLMnFJLGFBQWE5ckcsR0FFMUIsQ0FDQSxtQkFBQXkxRyxDQUFvQkMsR0FDaEIsSUFBS3YwSSxLQUFLK21JLGFBQWF6NEgsV0FBV3RPLEtBQUt5bUksa0JBQWtCLEdBQ3JELE9BQVF6bUksS0FBS3NuSSxxQkFNakIsT0FKQXRuSSxLQUFLcW9JLHFCQUNTcm9JLEtBQUt3N0gsYUFDYjNySCxRQUFVN1AsS0FBS3ltSSxpQkFDVnptSSxLQUFLK21JLGFBQWFvRCxLQUFLbnFJLEtBQUt5bUksaUJBQWlCcG1JLFNBRXBELEtBQUt5a0ksRUFBYTdaLFlBQVk4YSxNQUM5QixLQUFLakIsRUFBYTdaLFlBQVlxWCxVQUM5QixLQUFLd0MsRUFBYTdaLFlBQVkrYSxXQUM5QixLQUFLbEIsRUFBYTdaLFlBQVlnYixVQUcxQixPQUZBam1JLEtBQUtnb0ksV0FBV2hvSSxLQUFLeW1JLGlCQUFpQnBtSSxRQUN0Q0wsS0FBS2dTLE1BQVFtNUMsRUFBTWdqRix1QkFDWixFQUVYLEtBQUtySixFQUFhN1osWUFBWWtiLFFBRzFCLE9BRkFubUksS0FBS2dvSSxXQUFXaG9JLEtBQUt5bUksaUJBQWlCcG1JLFFBQ3RDTCxLQUFLZ1MsTUFBUW01QyxFQUFNNmpGLHdCQUNaLEVBRVgsS0FBS2xLLEVBQWE3WixZQUFZbWIsa0JBSTFCLE9BSEFwbUksS0FBS2dvSSxXQUFXaG9JLEtBQUt5bUksaUJBQWlCcG1JLFFBQ3RDTCxLQUFLa3BJLHNCQUNMbHBJLEtBQUtnUyxNQUFRbTVDLEVBQU1rN0UsTUFDWixFQUVYLFFBQ0ksT0FBUXJtSSxLQUFLc25JLHFCQUd6QixDQUdBLHNCQUFBb0UsQ0FBdUI3c0csR0FDZjcrQixLQUFLczBJLG9CQUFvQnoxRyxLQUN6QjcrQixLQUFLNnBJLFdBQVcsTUFDaEI3cEksS0FBS2dTLE1BQVFtNUMsRUFBTTJuRSxPQUNuQjl5SCxLQUFLMnFJLGFBQWE5ckcsR0FFMUIsQ0FHQSx5QkFBQStzRyxDQUEwQi9zRyxHQUNsQkEsSUFBT2ltRyxFQUFhN1osWUFBWWtiLFFBQ2hDbm1JLEtBQUtnUyxNQUFRbTVDLEVBQU0wZ0Ysc0JBR25CN3JJLEtBQUs2cEksV0FBVyxLQUNoQjdwSSxLQUFLZ1MsTUFBUW01QyxFQUFNNG5FLFFBQ25CL3lILEtBQUs0cUksY0FBYy9yRyxHQUUzQixDQUdBLHVCQUFBaXRHLENBQXdCanRHLEdBQ2hCeW1HLEVBQWN6bUcsSUFDZDcrQixLQUFLZ1MsTUFBUW01QyxFQUFNNGdGLHFCQUNuQi9ySSxLQUFLZ3NJLHdCQUF3Qm50RyxLQUc3QjcrQixLQUFLNnBJLFdBQVcsTUFDaEI3cEksS0FBS2dTLE1BQVFtNUMsRUFBTTRuRSxRQUNuQi95SCxLQUFLNHFJLGNBQWMvckcsR0FFM0IsQ0FHQSx1QkFBQW10RyxDQUF3Qm50RyxHQUNoQjcrQixLQUFLczBJLG9CQUFvQnoxRyxLQUN6QjcrQixLQUFLNnBJLFdBQVcsTUFDaEI3cEksS0FBS2dTLE1BQVFtNUMsRUFBTTRuRSxRQUNuQi95SCxLQUFLNHFJLGNBQWMvckcsR0FFM0IsQ0FHQSw0QkFBQXF0RyxDQUE2QnJ0RyxHQUN6QixPQUFRQSxHQUNKLEtBQUtpbUcsRUFBYTdaLFlBQVlrYixRQUMxQm5tSSxLQUFLZ1MsTUFBUW01QyxFQUFNZ2hGLHlCQUNuQixNQUVKLEtBQUtySCxFQUFhN1osWUFBWThvQixpQkFDMUIvekksS0FBS2dTLE1BQVFtNUMsRUFBTW9oRix5QkFDbkJ2c0ksS0FBSzZwSSxXQUFXLE1BQ2hCLE1BRUosUUFDSTdwSSxLQUFLNnBJLFdBQVcsS0FDaEI3cEksS0FBS2dTLE1BQVFtNUMsRUFBTStuRSxZQUNuQmx6SCxLQUFLNnFJLGlCQUFpQmhzRyxHQUdsQyxDQUdBLDBCQUFBdXRHLENBQTJCdnRHLEdBQ25CeW1HLEVBQWN6bUcsSUFDZDcrQixLQUFLZ1MsTUFBUW01QyxFQUFNa2hGLHlCQUNuQnJzSSxLQUFLc3NJLDJCQUEyQnp0RyxLQUdoQzcrQixLQUFLNnBJLFdBQVcsTUFDaEI3cEksS0FBS2dTLE1BQVFtNUMsRUFBTStuRSxZQUNuQmx6SCxLQUFLNnFJLGlCQUFpQmhzRyxHQUU5QixDQUdBLDBCQUFBeXRHLENBQTJCenRHLEdBQ25CNytCLEtBQUtzMEksb0JBQW9CejFHLEtBQ3pCNytCLEtBQUs2cEksV0FBVyxNQUNoQjdwSSxLQUFLZ1MsTUFBUW01QyxFQUFNK25FLFlBQ25CbHpILEtBQUs2cUksaUJBQWlCaHNHLEdBRTlCLENBR0EsMkJBQUEydEcsQ0FBNEIzdEcsR0FDcEJBLElBQU9pbUcsRUFBYTdaLFlBQVl1cEIsY0FDaEN4MEksS0FBS2dTLE1BQVFtNUMsRUFBTXNoRiw4QkFDbkJ6c0ksS0FBSzZwSSxXQUFXLE9BR2hCN3BJLEtBQUtnUyxNQUFRbTVDLEVBQU0rbkUsWUFDbkJsekgsS0FBSzZxSSxpQkFBaUJoc0csR0FFOUIsQ0FHQSwrQkFBQTZ0RyxDQUFnQzd0RyxHQUN4QkEsSUFBT2ltRyxFQUFhN1osWUFBWXVwQixjQUNoQ3gwSSxLQUFLZ1MsTUFBUW01QyxFQUFNNGhGLDhCQUNuQi9zSSxLQUFLNnBJLFdBQVcsT0FHaEI3cEksS0FBS2dTLE1BQVFtNUMsRUFBTStuRSxZQUNuQmx6SCxLQUFLNnFJLGlCQUFpQmhzRyxHQUU5QixDQUdBLHVCQUFBK3RHLENBQXdCL3RHLEdBQ3BCLE9BQVFBLEdBQ0osS0FBS2ltRyxFQUFhN1osWUFBWXVwQixhQUMxQngwSSxLQUFLZ1MsTUFBUW01QyxFQUFNMGhGLHlCQUNuQjdzSSxLQUFLNnBJLFdBQVcsS0FDaEIsTUFFSixLQUFLL0UsRUFBYTdaLFlBQVk0b0IsZUFDMUI3ekksS0FBS2dTLE1BQVFtNUMsRUFBTThoRixtQ0FDbkIsTUFFSixLQUFLbkksRUFBYTdaLFlBQVkyZSxLQUMxQjVwSSxLQUFLNnhILEtBQUsxRixFQUFpQnRMLElBQUlpekIseUJBQy9COXpJLEtBQUs2cEksV0FBVy9FLEVBQWE1Wix1QkFDN0IsTUFFSixLQUFLNFosRUFBYTdaLFlBQVltSixJQUMxQnAwSCxLQUFLNnhILEtBQUsxRixFQUFpQnRMLElBQUk0ekIsZ0NBQy9CejBJLEtBQUt5cEksZ0JBQ0wsTUFFSixRQUNJenBJLEtBQUsycEksZUFBZTlxRyxHQUdoQyxDQUdBLDJCQUFBaXVHLENBQTRCanVHLEdBQ3hCLE9BQVFBLEdBQ0osS0FBS2ltRyxFQUFhN1osWUFBWXVwQixhQUMxQngwSSxLQUFLZ1MsTUFBUW01QyxFQUFNNGhGLDhCQUNuQi9zSSxLQUFLNnBJLFdBQVcsS0FDaEIsTUFFSixLQUFLL0UsRUFBYTdaLFlBQVk0b0IsZUFDMUI3ekksS0FBS2dTLE1BQVFtNUMsRUFBTThoRixtQ0FDbkIsTUFFSixLQUFLbkksRUFBYTdaLFlBQVkyZSxLQUMxQjVwSSxLQUFLNnhILEtBQUsxRixFQUFpQnRMLElBQUlpekIseUJBQy9COXpJLEtBQUtnUyxNQUFRbTVDLEVBQU13aEYsb0JBQ25CM3NJLEtBQUs2cEksV0FBVy9FLEVBQWE1Wix1QkFDN0IsTUFFSixLQUFLNFosRUFBYTdaLFlBQVltSixJQUMxQnAwSCxLQUFLNnhILEtBQUsxRixFQUFpQnRMLElBQUk0ekIsZ0NBQy9CejBJLEtBQUt5cEksZ0JBQ0wsTUFFSixRQUNJenBJLEtBQUtnUyxNQUFRbTVDLEVBQU13aEYsb0JBQ25CM3NJLEtBQUsycEksZUFBZTlxRyxHQUdoQyxDQUdBLCtCQUFBbXVHLENBQWdDbnVHLEdBQzVCLE9BQVFBLEdBQ0osS0FBS2ltRyxFQUFhN1osWUFBWXVwQixhQUMxQngwSSxLQUFLNnBJLFdBQVcsS0FDaEIsTUFFSixLQUFLL0UsRUFBYTdaLFlBQVk0b0IsZUFDMUI3ekksS0FBS2dTLE1BQVFtNUMsRUFBTThoRixtQ0FDbkIsTUFFSixLQUFLbkksRUFBYTdaLFlBQVltYixrQkFDMUJwbUksS0FBS2dTLE1BQVFtNUMsRUFBTStuRSxZQUNuQmx6SCxLQUFLNnBJLFdBQVcsS0FDaEIsTUFFSixLQUFLL0UsRUFBYTdaLFlBQVkyZSxLQUMxQjVwSSxLQUFLNnhILEtBQUsxRixFQUFpQnRMLElBQUlpekIseUJBQy9COXpJLEtBQUtnUyxNQUFRbTVDLEVBQU13aEYsb0JBQ25CM3NJLEtBQUs2cEksV0FBVy9FLEVBQWE1Wix1QkFDN0IsTUFFSixLQUFLNFosRUFBYTdaLFlBQVltSixJQUMxQnAwSCxLQUFLNnhILEtBQUsxRixFQUFpQnRMLElBQUk0ekIsZ0NBQy9CejBJLEtBQUt5cEksZ0JBQ0wsTUFFSixRQUNJenBJLEtBQUtnUyxNQUFRbTVDLEVBQU13aEYsb0JBQ25CM3NJLEtBQUsycEksZUFBZTlxRyxHQUdoQyxDQUdBLG1DQUFBcXVHLENBQW9DcnVHLEdBQzVCQSxJQUFPaW1HLEVBQWE3WixZQUFZa2IsUUFDaENubUksS0FBS2dTLE1BQVFtNUMsRUFBTWdpRixpQ0FFZDdILEVBQWN6bUcsSUFDbkI3K0IsS0FBSzZwSSxXQUFXLEtBQ2hCN3BJLEtBQUtnUyxNQUFRbTVDLEVBQU1vaUYsZ0NBQ25CdnRJLEtBQUt3dEksa0NBQWtDM3VHLEtBR3ZDNytCLEtBQUs2cEksV0FBVyxLQUNoQjdwSSxLQUFLZ1MsTUFBUW01QyxFQUFNd2hGLG9CQUNuQjNzSSxLQUFLNHNJLHdCQUF3Qi90RyxHQUVyQyxDQUdBLGlDQUFBdXVHLENBQWtDdnVHLEdBQzFCeW1HLEVBQWN6bUcsSUFDZDcrQixLQUFLZ1MsTUFBUW01QyxFQUFNa2lGLGlDQUNuQnJ0SSxLQUFLc3RJLGtDQUFrQ3p1RyxLQUd2QzcrQixLQUFLNnBJLFdBQVcsTUFDaEI3cEksS0FBS2dTLE1BQVFtNUMsRUFBTXdoRixvQkFDbkIzc0ksS0FBSzRzSSx3QkFBd0IvdEcsR0FFckMsQ0FHQSxpQ0FBQXl1RyxDQUFrQ3p1RyxHQUMxQjcrQixLQUFLczBJLG9CQUFvQnoxRyxLQUN6QjcrQixLQUFLNnBJLFdBQVcsTUFDaEI3cEksS0FBS2dTLE1BQVFtNUMsRUFBTXdoRixvQkFDbkIzc0ksS0FBSzRzSSx3QkFBd0IvdEcsR0FFckMsQ0FHQSxpQ0FBQTJ1RyxDQUFrQzN1RyxHQUM5QixHQUFJNytCLEtBQUsrbUksYUFBYXo0SCxXQUFXdzJILEVBQWE5WixVQUFVM0IsUUFBUSxJQUM1RDZjLEVBQW9DbG1JLEtBQUsrbUksYUFBYW9ELEtBQUtyRixFQUFhOVosVUFBVTNCLE9BQU9ocEgsU0FBVSxDQUNuR0wsS0FBSzJwSSxlQUFlOXFHLEdBQ3BCLElBQUssSUFBSWw2QixFQUFJLEVBQUdBLEVBQUltZ0ksRUFBYTlaLFVBQVUzQixPQUFPaHBILE9BQVFzRSxJQUN0RDNFLEtBQUsycEksZUFBZTNwSSxLQUFLcW5JLFlBRTdCcm5JLEtBQUtnUyxNQUFRbTVDLEVBQU1zaUYsMEJBQ3ZCLE1BQ1V6dEksS0FBS3NuSSx1QkFDWHRuSSxLQUFLZ1MsTUFBUW01QyxFQUFNd2hGLG9CQUNuQjNzSSxLQUFLNHNJLHdCQUF3Qi90RyxHQUVyQyxDQUdBLDZCQUFBNnVHLENBQThCN3VHLEdBQzFCLE9BQVFBLEdBQ0osS0FBS2ltRyxFQUFhN1osWUFBWXVwQixhQUMxQngwSSxLQUFLZ1MsTUFBUW01QyxFQUFNd2lGLGdDQUNuQjN0SSxLQUFLNnBJLFdBQVcsS0FDaEIsTUFFSixLQUFLL0UsRUFBYTdaLFlBQVk0b0IsZUFDMUI3ekksS0FBS2dTLE1BQVFtNUMsRUFBTTRpRiwwQ0FDbkIvdEksS0FBSzZwSSxXQUFXLEtBQ2hCLE1BRUosS0FBSy9FLEVBQWE3WixZQUFZMmUsS0FDMUI1cEksS0FBSzZ4SCxLQUFLMUYsRUFBaUJ0TCxJQUFJaXpCLHlCQUMvQjl6SSxLQUFLNnBJLFdBQVcvRSxFQUFhNVosdUJBQzdCLE1BRUosS0FBSzRaLEVBQWE3WixZQUFZbUosSUFDMUJwMEgsS0FBSzZ4SCxLQUFLMUYsRUFBaUJ0TCxJQUFJNHpCLGdDQUMvQnowSSxLQUFLeXBJLGdCQUNMLE1BRUosUUFDSXpwSSxLQUFLMnBJLGVBQWU5cUcsR0FHaEMsQ0FHQSxpQ0FBQSt1RyxDQUFrQy91RyxHQUM5QixPQUFRQSxHQUNKLEtBQUtpbUcsRUFBYTdaLFlBQVl1cEIsYUFDMUJ4MEksS0FBS2dTLE1BQVFtNUMsRUFBTTBpRixxQ0FDbkI3dEksS0FBSzZwSSxXQUFXLEtBQ2hCLE1BRUosS0FBSy9FLEVBQWE3WixZQUFZNG9CLGVBQzFCN3pJLEtBQUtnUyxNQUFRbTVDLEVBQU00aUYsMENBQ25CL3RJLEtBQUs2cEksV0FBVyxLQUNoQixNQUVKLEtBQUsvRSxFQUFhN1osWUFBWTJlLEtBQzFCNXBJLEtBQUs2eEgsS0FBSzFGLEVBQWlCdEwsSUFBSWl6Qix5QkFDL0I5ekksS0FBS2dTLE1BQVFtNUMsRUFBTXNpRiwyQkFDbkJ6dEksS0FBSzZwSSxXQUFXL0UsRUFBYTVaLHVCQUM3QixNQUVKLEtBQUs0WixFQUFhN1osWUFBWW1KLElBQzFCcDBILEtBQUs2eEgsS0FBSzFGLEVBQWlCdEwsSUFBSTR6QixnQ0FDL0J6MEksS0FBS3lwSSxnQkFDTCxNQUVKLFFBQ0l6cEksS0FBS2dTLE1BQVFtNUMsRUFBTXNpRiwyQkFDbkJ6dEksS0FBSzJwSSxlQUFlOXFHLEdBR2hDLENBR0EscUNBQUFpdkcsQ0FBc0NqdkcsR0FDbEMsT0FBUUEsR0FDSixLQUFLaW1HLEVBQWE3WixZQUFZdXBCLGFBQzFCeDBJLEtBQUs2cEksV0FBVyxLQUNoQixNQUVKLEtBQUsvRSxFQUFhN1osWUFBWTRvQixlQUMxQjd6SSxLQUFLZ1MsTUFBUW01QyxFQUFNNGlGLDBDQUNuQi90SSxLQUFLNnBJLFdBQVcsS0FDaEIsTUFFSixLQUFLL0UsRUFBYTdaLFlBQVltYixrQkFDMUJwbUksS0FBS2dTLE1BQVFtNUMsRUFBTStuRSxZQUNuQmx6SCxLQUFLNnBJLFdBQVcsS0FDaEIsTUFFSixLQUFLL0UsRUFBYTdaLFlBQVkyZSxLQUMxQjVwSSxLQUFLNnhILEtBQUsxRixFQUFpQnRMLElBQUlpekIseUJBQy9COXpJLEtBQUtnUyxNQUFRbTVDLEVBQU1zaUYsMkJBQ25CenRJLEtBQUs2cEksV0FBVy9FLEVBQWE1Wix1QkFDN0IsTUFFSixLQUFLNFosRUFBYTdaLFlBQVltSixJQUMxQnAwSCxLQUFLNnhILEtBQUsxRixFQUFpQnRMLElBQUk0ekIsZ0NBQy9CejBJLEtBQUt5cEksZ0JBQ0wsTUFFSixRQUNJenBJLEtBQUtnUyxNQUFRbTVDLEVBQU1zaUYsMkJBQ25CenRJLEtBQUsycEksZUFBZTlxRyxHQUdoQyxDQUdBLHlDQUFBbXZHLENBQTBDbnZHLEdBQ2xDQSxJQUFPaW1HLEVBQWE3WixZQUFZa2IsU0FDaENubUksS0FBS2dTLE1BQVFtNUMsRUFBTThpRiw4QkFDbkJqdUksS0FBSzZwSSxXQUFXLE9BR2hCN3BJLEtBQUtnUyxNQUFRbTVDLEVBQU1zaUYsMkJBQ25CenRJLEtBQUswdEksOEJBQThCN3VHLEdBRTNDLENBR0EsK0JBQUFxdkcsQ0FBZ0NydkcsR0FDNUIsR0FBSTcrQixLQUFLK21JLGFBQWF6NEgsV0FBV3cySCxFQUFhOVosVUFBVTNCLFFBQVEsSUFDNUQ2YyxFQUFvQ2xtSSxLQUFLK21JLGFBQWFvRCxLQUFLckYsRUFBYTlaLFVBQVUzQixPQUFPaHBILFNBQVUsQ0FDbkdMLEtBQUsycEksZUFBZTlxRyxHQUNwQixJQUFLLElBQUlsNkIsRUFBSSxFQUFHQSxFQUFJbWdJLEVBQWE5WixVQUFVM0IsT0FBT2hwSCxPQUFRc0UsSUFDdEQzRSxLQUFLMnBJLGVBQWUzcEksS0FBS3FuSSxZQUU3QnJuSSxLQUFLZ1MsTUFBUW01QyxFQUFNd2hGLG1CQUN2QixNQUNVM3NJLEtBQUtzbkksdUJBQ1h0bkksS0FBS2dTLE1BQVFtNUMsRUFBTXNpRiwyQkFDbkJ6dEksS0FBSzB0SSw4QkFBOEI3dUcsR0FFM0MsQ0FHQSx5QkFBQXV2RyxDQUEwQnZ2RyxHQUN0QixPQUFRQSxHQUNKLEtBQUtpbUcsRUFBYTdaLFlBQVk4YSxNQUM5QixLQUFLakIsRUFBYTdaLFlBQVlxWCxVQUM5QixLQUFLd0MsRUFBYTdaLFlBQVkrYSxXQUM5QixLQUFLbEIsRUFBYTdaLFlBQVlnYixVQUUxQixNQUVKLEtBQUtuQixFQUFhN1osWUFBWWtiLFFBQzlCLEtBQUtyQixFQUFhN1osWUFBWW1iLGtCQUM5QixLQUFLdEIsRUFBYTdaLFlBQVltSixJQUMxQnAwSCxLQUFLZ1MsTUFBUW01QyxFQUFNb2pGLHFCQUNuQnZ1SSxLQUFLd3VJLHlCQUF5QjN2RyxHQUM5QixNQUVKLEtBQUtpbUcsRUFBYTdaLFlBQVltZixZQUMxQnBxSSxLQUFLNnhILEtBQUsxRixFQUFpQnRMLElBQUk2ekIseUNBQy9CMTBJLEtBQUswb0ksWUFBWSxLQUNqQjFvSSxLQUFLZ1MsTUFBUW01QyxFQUFNa2pGLGVBQ25CLE1BRUosUUFDSXJ1SSxLQUFLMG9JLFlBQVksSUFDakIxb0ksS0FBS2dTLE1BQVFtNUMsRUFBTWtqRixlQUNuQnJ1SSxLQUFLc3VJLG9CQUFvQnp2RyxHQUdyQyxDQUdBLG1CQUFBeXZHLENBQW9CenZHLEdBQ2hCLE9BQVFBLEdBQ0osS0FBS2ltRyxFQUFhN1osWUFBWThhLE1BQzlCLEtBQUtqQixFQUFhN1osWUFBWXFYLFVBQzlCLEtBQUt3QyxFQUFhN1osWUFBWSthLFdBQzlCLEtBQUtsQixFQUFhN1osWUFBWWdiLFVBQzlCLEtBQUtuQixFQUFhN1osWUFBWWtiLFFBQzlCLEtBQUtyQixFQUFhN1osWUFBWW1iLGtCQUM5QixLQUFLdEIsRUFBYTdaLFlBQVltSixJQUMxQnAwSCxLQUFLNG9JLGlCQUNMNW9JLEtBQUtnUyxNQUFRbTVDLEVBQU1vakYscUJBQ25CdnVJLEtBQUt3dUkseUJBQXlCM3ZHLEdBQzlCLE1BRUosS0FBS2ltRyxFQUFhN1osWUFBWW1mLFlBQzFCcHFJLEtBQUs0b0ksaUJBQ0w1b0ksS0FBS2dTLE1BQVFtNUMsRUFBTXNqRix1QkFDbkIsTUFFSixLQUFLM0osRUFBYTdaLFlBQVkwcEIsZUFDOUIsS0FBSzdQLEVBQWE3WixZQUFZMnBCLFdBQzlCLEtBQUs5UCxFQUFhN1osWUFBWTRvQixlQUMxQjd6SSxLQUFLNnhILEtBQUsxRixFQUFpQnRMLElBQUlnMEIsb0NBQy9CNzBJLEtBQUs4bUksWUFBWXZrSSxNQUFRcU0sT0FBT3VxQixjQUFjMEYsR0FDOUMsTUFFSixLQUFLaW1HLEVBQWE3WixZQUFZMmUsS0FDMUI1cEksS0FBSzZ4SCxLQUFLMUYsRUFBaUJ0TCxJQUFJaXpCLHlCQUMvQjl6SSxLQUFLOG1JLFlBQVl2a0ksTUFBUXVpSSxFQUFhNVosc0JBQ3RDLE1BRUosUUFDSWxySCxLQUFLOG1JLFlBQVl2a0ksTUFBUXFNLE9BQU91cUIsY0FBY2dzRyxFQUFhdG1HLEdBQU1pbkcsRUFBYWpuRyxHQUFNQSxHQUdoRyxDQUdBLHdCQUFBMnZHLENBQXlCM3ZHLEdBQ3JCLE9BQVFBLEdBQ0osS0FBS2ltRyxFQUFhN1osWUFBWThhLE1BQzlCLEtBQUtqQixFQUFhN1osWUFBWXFYLFVBQzlCLEtBQUt3QyxFQUFhN1osWUFBWSthLFdBQzlCLEtBQUtsQixFQUFhN1osWUFBWWdiLFVBRTFCLE1BRUosS0FBS25CLEVBQWE3WixZQUFZa2IsUUFDMUJubUksS0FBS2dTLE1BQVFtNUMsRUFBTTZqRix1QkFDbkIsTUFFSixLQUFLbEssRUFBYTdaLFlBQVltZixZQUMxQnBxSSxLQUFLZ1MsTUFBUW01QyxFQUFNc2pGLHVCQUNuQixNQUVKLEtBQUszSixFQUFhN1osWUFBWW1iLGtCQUMxQnBtSSxLQUFLZ1MsTUFBUW01QyxFQUFNazdFLEtBQ25Ccm1JLEtBQUtrcEksc0JBQ0wsTUFFSixLQUFLcEUsRUFBYTdaLFlBQVltSixJQUMxQnAwSCxLQUFLNnhILEtBQUsxRixFQUFpQnRMLElBQUl3ekIsVUFDL0JyMEksS0FBS3lwSSxnQkFDTCxNQUVKLFFBQ0l6cEksS0FBSzBvSSxZQUFZLElBQ2pCMW9JLEtBQUtnUyxNQUFRbTVDLEVBQU1rakYsZUFDbkJydUksS0FBS3N1SSxvQkFBb0J6dkcsR0FHckMsQ0FHQSwwQkFBQTZ2RyxDQUEyQjd2RyxHQUN2QixPQUFRQSxHQUNKLEtBQUtpbUcsRUFBYTdaLFlBQVk4YSxNQUM5QixLQUFLakIsRUFBYTdaLFlBQVlxWCxVQUM5QixLQUFLd0MsRUFBYTdaLFlBQVkrYSxXQUM5QixLQUFLbEIsRUFBYTdaLFlBQVlnYixVQUUxQixNQUVKLEtBQUtuQixFQUFhN1osWUFBWTBwQixlQUMxQjMwSSxLQUFLZ1MsTUFBUW01QyxFQUFNbS9FLDhCQUNuQixNQUVKLEtBQUt4RixFQUFhN1osWUFBWTJwQixXQUMxQjUwSSxLQUFLZ1MsTUFBUW01QyxFQUFNby9FLDhCQUNuQixNQUVKLEtBQUt6RixFQUFhN1osWUFBWW1iLGtCQUMxQnBtSSxLQUFLNnhILEtBQUsxRixFQUFpQnRMLElBQUlpMEIsdUJBQy9COTBJLEtBQUtnUyxNQUFRbTVDLEVBQU1rN0UsS0FDbkJybUksS0FBS2twSSxzQkFDTCxNQUVKLFFBQ0lscEksS0FBS2dTLE1BQVFtNUMsRUFBTXEvRSx5QkFDbkJ4cUksS0FBSzZ1SSw2QkFBNkJod0csR0FHOUMsQ0FHQSxnQ0FBQTh2RyxDQUFpQzl2RyxHQUM3QixPQUFRQSxHQUNKLEtBQUtpbUcsRUFBYTdaLFlBQVkwcEIsZUFDMUIzMEksS0FBS2dTLE1BQVFtNUMsRUFBTTJqRiw2QkFDbkIsTUFFSixLQUFLaEssRUFBYTdaLFlBQVlvZixVQUMxQnJxSSxLQUFLMG1JLFlBQWN2N0UsRUFBTW0vRSw4QkFDekJ0cUksS0FBS2dTLE1BQVFtNUMsRUFBTTBuRixvQkFDbkIsTUFFSixLQUFLL04sRUFBYTdaLFlBQVkyZSxLQUMxQjVwSSxLQUFLNnhILEtBQUsxRixFQUFpQnRMLElBQUlpekIseUJBQy9COXpJLEtBQUs4bUksWUFBWXhqSSxPQUFTd2hJLEVBQWE1WixzQkFDdkMsTUFFSixLQUFLNFosRUFBYTdaLFlBQVltSixJQUMxQnAwSCxLQUFLNnhILEtBQUsxRixFQUFpQnRMLElBQUl3ekIsVUFDL0JyMEksS0FBS3lwSSxnQkFDTCxNQUVKLFFBQ0l6cEksS0FBSzhtSSxZQUFZeGpJLE9BQVNzTCxPQUFPdXFCLGNBQWMwRixHQUczRCxDQUdBLGdDQUFBK3ZHLENBQWlDL3ZHLEdBQzdCLE9BQVFBLEdBQ0osS0FBS2ltRyxFQUFhN1osWUFBWTJwQixXQUMxQjUwSSxLQUFLZ1MsTUFBUW01QyxFQUFNMmpGLDZCQUNuQixNQUVKLEtBQUtoSyxFQUFhN1osWUFBWW9mLFVBQzFCcnFJLEtBQUswbUksWUFBY3Y3RSxFQUFNby9FLDhCQUN6QnZxSSxLQUFLZ1MsTUFBUW01QyxFQUFNMG5GLG9CQUNuQixNQUVKLEtBQUsvTixFQUFhN1osWUFBWTJlLEtBQzFCNXBJLEtBQUs2eEgsS0FBSzFGLEVBQWlCdEwsSUFBSWl6Qix5QkFDL0I5ekksS0FBSzhtSSxZQUFZeGpJLE9BQVN3aEksRUFBYTVaLHNCQUN2QyxNQUVKLEtBQUs0WixFQUFhN1osWUFBWW1KLElBQzFCcDBILEtBQUs2eEgsS0FBSzFGLEVBQWlCdEwsSUFBSXd6QixVQUMvQnIwSSxLQUFLeXBJLGdCQUNMLE1BRUosUUFDSXpwSSxLQUFLOG1JLFlBQVl4akksT0FBU3NMLE9BQU91cUIsY0FBYzBGLEdBRzNELENBR0EsNEJBQUFnd0csQ0FBNkJod0csR0FDekIsT0FBUUEsR0FDSixLQUFLaW1HLEVBQWE3WixZQUFZOGEsTUFDOUIsS0FBS2pCLEVBQWE3WixZQUFZcVgsVUFDOUIsS0FBS3dDLEVBQWE3WixZQUFZK2EsV0FDOUIsS0FBS2xCLEVBQWE3WixZQUFZZ2IsVUFDMUJqbUksS0FBSzZvSSxrQkFDTDdvSSxLQUFLZ1MsTUFBUW01QyxFQUFNZ2pGLHNCQUNuQixNQUVKLEtBQUtySixFQUFhN1osWUFBWW9mLFVBQzFCcnFJLEtBQUswbUksWUFBY3Y3RSxFQUFNcS9FLHlCQUN6QnhxSSxLQUFLZ1MsTUFBUW01QyxFQUFNMG5GLG9CQUNuQixNQUVKLEtBQUsvTixFQUFhN1osWUFBWW1iLGtCQUMxQnBtSSxLQUFLNm9JLGtCQUNMN29JLEtBQUtnUyxNQUFRbTVDLEVBQU1rN0UsS0FDbkJybUksS0FBS2twSSxzQkFDTCxNQUVKLEtBQUtwRSxFQUFhN1osWUFBWTJlLEtBQzFCNXBJLEtBQUs2eEgsS0FBSzFGLEVBQWlCdEwsSUFBSWl6Qix5QkFDL0I5ekksS0FBSzhtSSxZQUFZeGpJLE9BQVN3aEksRUFBYTVaLHNCQUN2QyxNQUVKLEtBQUs0WixFQUFhN1osWUFBWTBwQixlQUM5QixLQUFLN1AsRUFBYTdaLFlBQVkycEIsV0FDOUIsS0FBSzlQLEVBQWE3WixZQUFZNG9CLGVBQzlCLEtBQUsvTyxFQUFhN1osWUFBWW1mLFlBQzlCLEtBQUt0RixFQUFhN1osWUFBWThwQixhQUMxQi8wSSxLQUFLNnhILEtBQUsxRixFQUFpQnRMLElBQUltMEIsNkNBQy9CaDFJLEtBQUs4bUksWUFBWXhqSSxPQUFTc0wsT0FBT3VxQixjQUFjMEYsR0FDL0MsTUFFSixLQUFLaW1HLEVBQWE3WixZQUFZbUosSUFDMUJwMEgsS0FBSzZ4SCxLQUFLMUYsRUFBaUJ0TCxJQUFJd3pCLFVBQy9CcjBJLEtBQUt5cEksZ0JBQ0wsTUFFSixRQUNJenBJLEtBQUs4bUksWUFBWXhqSSxPQUFTc0wsT0FBT3VxQixjQUFjMEYsR0FHM0QsQ0FHQSwrQkFBQWt3RyxDQUFnQ2x3RyxHQUM1QixPQUFRQSxHQUNKLEtBQUtpbUcsRUFBYTdaLFlBQVk4YSxNQUM5QixLQUFLakIsRUFBYTdaLFlBQVlxWCxVQUM5QixLQUFLd0MsRUFBYTdaLFlBQVkrYSxXQUM5QixLQUFLbEIsRUFBYTdaLFlBQVlnYixVQUMxQmptSSxLQUFLNm9JLGtCQUNMN29JLEtBQUtnUyxNQUFRbTVDLEVBQU1nakYsc0JBQ25CLE1BRUosS0FBS3JKLEVBQWE3WixZQUFZa2IsUUFDMUJubUksS0FBSzZvSSxrQkFDTDdvSSxLQUFLZ1MsTUFBUW01QyxFQUFNNmpGLHVCQUNuQixNQUVKLEtBQUtsSyxFQUFhN1osWUFBWW1iLGtCQUMxQnBtSSxLQUFLNm9JLGtCQUNMN29JLEtBQUtnUyxNQUFRbTVDLEVBQU1rN0UsS0FDbkJybUksS0FBS2twSSxzQkFDTCxNQUVKLEtBQUtwRSxFQUFhN1osWUFBWW1KLElBQzFCcDBILEtBQUs2eEgsS0FBSzFGLEVBQWlCdEwsSUFBSXd6QixVQUMvQnIwSSxLQUFLeXBJLGdCQUNMLE1BRUosUUFDSXpwSSxLQUFLNnhILEtBQUsxRixFQUFpQnRMLElBQUlvMEIsb0NBQy9CajFJLEtBQUtnUyxNQUFRbTVDLEVBQU1nakYsc0JBQ25CbnVJLEtBQUtvdUksMEJBQTBCdnZHLEdBRzNDLENBR0EseUJBQUFvd0csQ0FBMEJwd0csR0FDdEIsT0FBUUEsR0FDSixLQUFLaW1HLEVBQWE3WixZQUFZbWIsa0JBQ1pwbUksS0FBS3c3SCxhQUNiNUUsYUFBYyxFQUNwQjUySCxLQUFLZ1MsTUFBUW01QyxFQUFNazdFLEtBQ25Ccm1JLEtBQUtrcEksc0JBQ0wsTUFFSixLQUFLcEUsRUFBYTdaLFlBQVltSixJQUMxQnAwSCxLQUFLNnhILEtBQUsxRixFQUFpQnRMLElBQUl3ekIsVUFDL0JyMEksS0FBS3lwSSxnQkFDTCxNQUVKLFFBQ0l6cEksS0FBSzZ4SCxLQUFLMUYsRUFBaUJ0TCxJQUFJcTBCLHdCQUMvQmwxSSxLQUFLZ1MsTUFBUW01QyxFQUFNZ2pGLHNCQUNuQm51SSxLQUFLb3VJLDBCQUEwQnZ2RyxHQUczQyxDQUdBLGtCQUFBc3dHLENBQW1CdHdHLEdBQ2YsTUFBTXhiLEVBQVFyakIsS0FBS3c3SCxhQUNuQixPQUFRMzhGLEdBQ0osS0FBS2ltRyxFQUFhN1osWUFBWW1iLGtCQUMxQnBtSSxLQUFLZ1MsTUFBUW01QyxFQUFNazdFLEtBQ25Ccm1JLEtBQUtzcEksbUJBQW1Cam1ILEdBQ3hCLE1BRUosS0FBS3loSCxFQUFhN1osWUFBWW1KLElBQzFCcDBILEtBQUtzcEksbUJBQW1Cam1ILEdBQ3hCcmpCLEtBQUt5cEksZ0JBQ0wsTUFFSixLQUFLM0UsRUFBYTdaLFlBQVkyZSxLQUMxQjVwSSxLQUFLNnhILEtBQUsxRixFQUFpQnRMLElBQUlpekIseUJBQy9CendILEVBQU0zYixNQUFRbzlILEVBQWE1WixzQkFDM0IsTUFFSixRQUNJN25HLEVBQU0zYixNQUFRa0gsT0FBT3VxQixjQUFjMEYsR0FHL0MsQ0FHQSwyQkFBQXd3RyxDQUE0Qnh3RyxHQUNwQjcrQixLQUFLaW9JLHdCQUF3Qm5ELEVBQWE5WixVQUFVSSxXQUFXLElBQy9EcHJILEtBQUtzb0ksb0JBQW9CeEQsRUFBYTlaLFVBQVVJLFVBQVUvcUgsT0FBUyxHQUNuRUwsS0FBS2dTLE1BQVFtNUMsRUFBTW1rRixlQUVkdHZJLEtBQUtpb0ksd0JBQXdCbkQsRUFBYTlaLFVBQVVNLFNBQVMsSUFFbEV0ckgsS0FBS2luSSxnQkFBa0JqbkksS0FBS2tuSSxtQkFBbUJwQyxFQUFhOVosVUFBVU0sUUFBUWpySCxPQUFTLEdBQ3ZGTCxLQUFLZ1MsTUFBUW01QyxFQUFNbWdFLFNBRWR0ckgsS0FBS2lvSSx3QkFBd0JuRCxFQUFhOVosVUFBVUssYUFBYSxHQUNsRXJySCxLQUFLeThILGNBQ0x6OEgsS0FBS2dTLE1BQVFtNUMsRUFBTW03RSxlQUduQnRtSSxLQUFLNnhILEtBQUsxRixFQUFpQnRMLElBQUlzMEIsb0JBQy9CbjFJLEtBQUtzb0ksb0JBQW9CeEQsRUFBYTlaLFVBQVVLLFlBQVlockgsT0FBUyxHQUNyRUwsS0FBS3c3SCxhQUFhOXpILEtBQU8sVUFDekIxSCxLQUFLZ1MsTUFBUW01QyxFQUFNK2pGLGVBS2pCbHZJLEtBQUtzbkksdUJBQ1h0bkksS0FBSzZ4SCxLQUFLMUYsRUFBaUJ0TCxJQUFJdTBCLDBCQUMvQnAxSSxLQUFLc29JLG9CQUFvQixHQUN6QnRvSSxLQUFLZ1MsTUFBUW01QyxFQUFNK2pGLGNBQ25CbHZJLEtBQUttdkksbUJBQW1CdHdHLEdBRWhDLENBR0Esa0JBQUEwd0csQ0FBbUIxd0csR0FDZixPQUFRQSxHQUNKLEtBQUtpbUcsRUFBYTdaLFlBQVl1cEIsYUFDMUJ4MEksS0FBS2dTLE1BQVFtNUMsRUFBTXFrRixtQkFDbkIsTUFFSixLQUFLMUssRUFBYTdaLFlBQVltYixrQkFBbUIsQ0FDN0NwbUksS0FBSzZ4SCxLQUFLMUYsRUFBaUJ0TCxJQUFJdzBCLDZCQUMvQnIxSSxLQUFLZ1MsTUFBUW01QyxFQUFNazdFLEtBQ25CLE1BQU1oakgsRUFBUXJqQixLQUFLdzdILGFBQ25CeDdILEtBQUtzcEksbUJBQW1Cam1ILEdBQ3hCLEtBQ0osQ0FDQSxRQUNJcmpCLEtBQUtnUyxNQUFRbTVDLEVBQU0ycEUsUUFDbkI5MEgsS0FBSzB2SSxjQUFjN3dHLEdBRy9CLENBR0Esc0JBQUE0d0csQ0FBdUI1d0csR0FDbkIsTUFBTXhiLEVBQVFyakIsS0FBS3c3SCxhQUNuQixPQUFRMzhGLEdBQ0osS0FBS2ltRyxFQUFhN1osWUFBWXVwQixhQUMxQngwSSxLQUFLZ1MsTUFBUW01QyxFQUFNa2xGLFlBQ25CLE1BRUosS0FBS3ZMLEVBQWE3WixZQUFZbWIsa0JBQzFCcG1JLEtBQUs2eEgsS0FBSzFGLEVBQWlCdEwsSUFBSXcwQiw2QkFDL0JyMUksS0FBS2dTLE1BQVFtNUMsRUFBTWs3RSxLQUNuQnJtSSxLQUFLc3BJLG1CQUFtQmptSCxHQUN4QixNQUVKLEtBQUt5aEgsRUFBYTdaLFlBQVltSixJQUMxQnAwSCxLQUFLNnhILEtBQUsxRixFQUFpQnRMLElBQUl5MEIsY0FDL0J0MUksS0FBS3NwSSxtQkFBbUJqbUgsR0FDeEJyakIsS0FBS3lwSSxnQkFDTCxNQUVKLFFBQ0lwbUgsRUFBTTNiLE1BQVEsSUFDZDFILEtBQUtnUyxNQUFRbTVDLEVBQU0ycEUsUUFDbkI5MEgsS0FBSzB2SSxjQUFjN3dHLEdBRy9CLENBR0EsYUFBQTZ3RyxDQUFjN3dHLEdBQ1YsTUFBTXhiLEVBQVFyakIsS0FBS3c3SCxhQUNuQixPQUFRMzhGLEdBQ0osS0FBS2ltRyxFQUFhN1osWUFBWXVwQixhQUMxQngwSSxLQUFLZ1MsTUFBUW01QyxFQUFNZ2xGLGlCQUNuQixNQUVKLEtBQUtyTCxFQUFhN1osWUFBWTRvQixlQUMxQnh3SCxFQUFNM2IsTUFBUSxJQUNkMUgsS0FBS2dTLE1BQVFtNUMsRUFBTXdrRix1QkFDbkIsTUFFSixLQUFLN0ssRUFBYTdaLFlBQVkyZSxLQUMxQjVwSSxLQUFLNnhILEtBQUsxRixFQUFpQnRMLElBQUlpekIseUJBQy9CendILEVBQU0zYixNQUFRbzlILEVBQWE1WixzQkFDM0IsTUFFSixLQUFLNFosRUFBYTdaLFlBQVltSixJQUMxQnAwSCxLQUFLNnhILEtBQUsxRixFQUFpQnRMLElBQUl5MEIsY0FDL0J0MUksS0FBS3NwSSxtQkFBbUJqbUgsR0FDeEJyakIsS0FBS3lwSSxnQkFDTCxNQUVKLFFBQ0lwbUgsRUFBTTNiLE1BQVFrSCxPQUFPdXFCLGNBQWMwRixHQUcvQyxDQUdBLHlCQUFBK3dHLENBQTBCL3dHLEdBQ3RCLE1BQU14YixFQUFRcmpCLEtBQUt3N0gsYUFDbkIsT0FBUTM4RixHQUNKLEtBQUtpbUcsRUFBYTdaLFlBQVk4b0IsaUJBQzFCMXdILEVBQU0zYixNQUFRLElBQ2QxSCxLQUFLZ1MsTUFBUW01QyxFQUFNMGtGLDRCQUNuQixNQUVKLEtBQUsvSyxFQUFhN1osWUFBWTRvQixlQUMxQnh3SCxFQUFNM2IsTUFBUSxJQUNkLE1BRUosUUFDSTFILEtBQUtnUyxNQUFRbTVDLEVBQU0ycEUsUUFDbkI5MEgsS0FBSzB2SSxjQUFjN3dHLEdBRy9CLENBR0EsNkJBQUFpeEcsQ0FBOEJqeEcsR0FDdEJBLElBQU9pbUcsRUFBYTdaLFlBQVl1cEIsYUFDaEN4MEksS0FBS2dTLE1BQVFtNUMsRUFBTTRrRixrQ0FHbkIvdkksS0FBS2dTLE1BQVFtNUMsRUFBTTJwRSxRQUNuQjkwSCxLQUFLMHZJLGNBQWM3d0csR0FFM0IsQ0FHQSxpQ0FBQW14RyxDQUFrQ254RyxHQUMxQkEsSUFBT2ltRyxFQUFhN1osWUFBWXVwQixhQUNoQ3gwSSxLQUFLZ1MsTUFBUW01QyxFQUFNOGtGLHVDQUduQmp3SSxLQUFLZ1MsTUFBUW01QyxFQUFNZ2xGLGlCQUNuQm53SSxLQUFLb3dJLHFCQUFxQnZ4RyxHQUVsQyxDQUdBLHFDQUFBcXhHLENBQXNDcnhHLEdBQzlCQSxJQUFPaW1HLEVBQWE3WixZQUFZbWIsbUJBQXFCdm5HLElBQU9pbUcsRUFBYTdaLFlBQVltSixLQUNyRnAwSCxLQUFLNnhILEtBQUsxRixFQUFpQnRMLElBQUkwMEIsZUFFbkN2MUksS0FBS2dTLE1BQVFtNUMsRUFBTWtsRixZQUNuQnJ3SSxLQUFLc3dJLGlCQUFpQnp4RyxFQUMxQixDQUdBLG9CQUFBdXhHLENBQXFCdnhHLEdBQ2pCLE1BQU14YixFQUFRcmpCLEtBQUt3N0gsYUFDbkIsT0FBUTM4RixHQUNKLEtBQUtpbUcsRUFBYTdaLFlBQVl1cEIsYUFDMUJ4MEksS0FBS2dTLE1BQVFtNUMsRUFBTWtsRixZQUNuQixNQUVKLEtBQUt2TCxFQUFhN1osWUFBWW1KLElBQzFCcDBILEtBQUs2eEgsS0FBSzFGLEVBQWlCdEwsSUFBSXkwQixjQUMvQnQxSSxLQUFLc3BJLG1CQUFtQmptSCxHQUN4QnJqQixLQUFLeXBJLGdCQUNMLE1BRUosUUFDSXBtSCxFQUFNM2IsTUFBUSxJQUNkMUgsS0FBS2dTLE1BQVFtNUMsRUFBTTJwRSxRQUNuQjkwSCxLQUFLMHZJLGNBQWM3d0csR0FHL0IsQ0FHQSxnQkFBQXl4RyxDQUFpQnp4RyxHQUNiLE1BQU14YixFQUFRcmpCLEtBQUt3N0gsYUFDbkIsT0FBUTM4RixHQUNKLEtBQUtpbUcsRUFBYTdaLFlBQVltYixrQkFDMUJwbUksS0FBS2dTLE1BQVFtNUMsRUFBTWs3RSxLQUNuQnJtSSxLQUFLc3BJLG1CQUFtQmptSCxHQUN4QixNQUVKLEtBQUt5aEgsRUFBYTdaLFlBQVk4b0IsaUJBQzFCL3pJLEtBQUtnUyxNQUFRbTVDLEVBQU1vbEYsaUJBQ25CLE1BRUosS0FBS3pMLEVBQWE3WixZQUFZdXBCLGFBQzFCbnhILEVBQU0zYixNQUFRLElBQ2QsTUFFSixLQUFLbzlILEVBQWE3WixZQUFZbUosSUFDMUJwMEgsS0FBSzZ4SCxLQUFLMUYsRUFBaUJ0TCxJQUFJeTBCLGNBQy9CdDFJLEtBQUtzcEksbUJBQW1Cam1ILEdBQ3hCcmpCLEtBQUt5cEksZ0JBQ0wsTUFFSixRQUNJcG1ILEVBQU0zYixNQUFRLEtBQ2QxSCxLQUFLZ1MsTUFBUW01QyxFQUFNMnBFLFFBQ25COTBILEtBQUswdkksY0FBYzd3RyxHQUcvQixDQUdBLG9CQUFBMnhHLENBQXFCM3hHLEdBQ2pCLE1BQU14YixFQUFRcmpCLEtBQUt3N0gsYUFDbkIsT0FBUTM4RixHQUNKLEtBQUtpbUcsRUFBYTdaLFlBQVl1cEIsYUFDMUJueEgsRUFBTTNiLE1BQVEsTUFDZDFILEtBQUtnUyxNQUFRbTVDLEVBQU1nbEYsaUJBQ25CLE1BRUosS0FBS3JMLEVBQWE3WixZQUFZbWIsa0JBQzFCcG1JLEtBQUs2eEgsS0FBSzFGLEVBQWlCdEwsSUFBSTIwQiwwQkFDL0J4MUksS0FBS2dTLE1BQVFtNUMsRUFBTWs3RSxLQUNuQnJtSSxLQUFLc3BJLG1CQUFtQmptSCxHQUN4QixNQUVKLEtBQUt5aEgsRUFBYTdaLFlBQVltSixJQUMxQnAwSCxLQUFLNnhILEtBQUsxRixFQUFpQnRMLElBQUl5MEIsY0FDL0J0MUksS0FBS3NwSSxtQkFBbUJqbUgsR0FDeEJyakIsS0FBS3lwSSxnQkFDTCxNQUVKLFFBQ0lwbUgsRUFBTTNiLE1BQVEsTUFDZDFILEtBQUtnUyxNQUFRbTVDLEVBQU0ycEUsUUFDbkI5MEgsS0FBSzB2SSxjQUFjN3dHLEdBRy9CLENBR0EsYUFBQTR4RyxDQUFjNXhHLEdBQ1YsT0FBUUEsR0FDSixLQUFLaW1HLEVBQWE3WixZQUFZOGEsTUFDOUIsS0FBS2pCLEVBQWE3WixZQUFZcVgsVUFDOUIsS0FBS3dDLEVBQWE3WixZQUFZK2EsV0FDOUIsS0FBS2xCLEVBQWE3WixZQUFZZ2IsVUFDMUJqbUksS0FBS2dTLE1BQVFtNUMsRUFBTXVsRixvQkFDbkIsTUFFSixLQUFLNUwsRUFBYTdaLFlBQVltYixrQkFDMUJwbUksS0FBS2dTLE1BQVFtNUMsRUFBTXVsRixvQkFDbkIxd0ksS0FBSzJ3SSx3QkFBd0I5eEcsR0FDN0IsTUFFSixLQUFLaW1HLEVBQWE3WixZQUFZbUosSUFBSyxDQUMvQnAwSCxLQUFLNnhILEtBQUsxRixFQUFpQnRMLElBQUk0MEIsY0FDL0J6MUksS0FBS3VvSSxvQkFBb0IsTUFDekIsTUFBTWxsSCxFQUFRcmpCLEtBQUt3N0gsYUFDbkJuNEcsRUFBTWc4RyxhQUFjLEVBQ3BCci9ILEtBQUt1cEksbUJBQW1CbG1ILEdBQ3hCcmpCLEtBQUt5cEksZ0JBQ0wsS0FDSixDQUNBLFFBQ0l6cEksS0FBSzZ4SCxLQUFLMUYsRUFBaUJ0TCxJQUFJNjBCLG9DQUMvQjExSSxLQUFLZ1MsTUFBUW01QyxFQUFNdWxGLG9CQUNuQjF3SSxLQUFLMndJLHdCQUF3Qjl4RyxHQUd6QyxDQUdBLHVCQUFBOHhHLENBQXdCOXhHLEdBQ3BCLEdBQUlzbUcsRUFBYXRtRyxHQUNiNytCLEtBQUt1b0ksb0JBQW9CMzVILE9BQU9tZCxhQUFhKzVHLEVBQWFqbkcsS0FDMUQ3K0IsS0FBS2dTLE1BQVFtNUMsRUFBTXlsRixrQkFHbkIsT0FBUS94RyxHQUNKLEtBQUtpbUcsRUFBYTdaLFlBQVk4YSxNQUM5QixLQUFLakIsRUFBYTdaLFlBQVlxWCxVQUM5QixLQUFLd0MsRUFBYTdaLFlBQVkrYSxXQUM5QixLQUFLbEIsRUFBYTdaLFlBQVlnYixVQUUxQixNQUVKLEtBQUtuQixFQUFhN1osWUFBWTJlLEtBQzFCNXBJLEtBQUs2eEgsS0FBSzFGLEVBQWlCdEwsSUFBSWl6Qix5QkFDL0I5ekksS0FBS3VvSSxvQkFBb0J6RCxFQUFhNVosdUJBQ3RDbHJILEtBQUtnUyxNQUFRbTVDLEVBQU15bEYsYUFDbkIsTUFFSixLQUFLOUwsRUFBYTdaLFlBQVltYixrQkFBbUIsQ0FDN0NwbUksS0FBSzZ4SCxLQUFLMUYsRUFBaUJ0TCxJQUFJODBCLG9CQUMvQjMxSSxLQUFLdW9JLG9CQUFvQixNQUN6QixNQUFNbGxILEVBQVFyakIsS0FBS3c3SCxhQUNuQm40RyxFQUFNZzhHLGFBQWMsRUFDcEJyL0gsS0FBS3VwSSxtQkFBbUJsbUgsR0FDeEJyakIsS0FBS2dTLE1BQVFtNUMsRUFBTWs3RSxLQUNuQixLQUNKLENBQ0EsS0FBS3ZCLEVBQWE3WixZQUFZbUosSUFBSyxDQUMvQnAwSCxLQUFLNnhILEtBQUsxRixFQUFpQnRMLElBQUk0MEIsY0FDL0J6MUksS0FBS3VvSSxvQkFBb0IsTUFDekIsTUFBTWxsSCxFQUFRcmpCLEtBQUt3N0gsYUFDbkJuNEcsRUFBTWc4RyxhQUFjLEVBQ3BCci9ILEtBQUt1cEksbUJBQW1CbG1ILEdBQ3hCcmpCLEtBQUt5cEksZ0JBQ0wsS0FDSixDQUNBLFFBQ0l6cEksS0FBS3VvSSxvQkFBb0IzNUgsT0FBT3VxQixjQUFjMEYsSUFDOUM3K0IsS0FBS2dTLE1BQVFtNUMsRUFBTXlsRixhQUduQyxDQUdBLGlCQUFBQyxDQUFrQmh5RyxHQUNkLE1BQU14YixFQUFRcmpCLEtBQUt3N0gsYUFDbkIsT0FBUTM4RixHQUNKLEtBQUtpbUcsRUFBYTdaLFlBQVk4YSxNQUM5QixLQUFLakIsRUFBYTdaLFlBQVlxWCxVQUM5QixLQUFLd0MsRUFBYTdaLFlBQVkrYSxXQUM5QixLQUFLbEIsRUFBYTdaLFlBQVlnYixVQUMxQmptSSxLQUFLZ1MsTUFBUW01QyxFQUFNMmxGLG1CQUNuQixNQUVKLEtBQUtoTSxFQUFhN1osWUFBWW1iLGtCQUMxQnBtSSxLQUFLZ1MsTUFBUW01QyxFQUFNazdFLEtBQ25Ccm1JLEtBQUt1cEksbUJBQW1CbG1ILEdBQ3hCLE1BRUosS0FBS3loSCxFQUFhN1osWUFBWTJlLEtBQzFCNXBJLEtBQUs2eEgsS0FBSzFGLEVBQWlCdEwsSUFBSWl6Qix5QkFDL0J6d0gsRUFBTTlnQixNQUFRdWlJLEVBQWE1WixzQkFDM0IsTUFFSixLQUFLNFosRUFBYTdaLFlBQVltSixJQUMxQnAwSCxLQUFLNnhILEtBQUsxRixFQUFpQnRMLElBQUk0MEIsY0FDL0JweUgsRUFBTWc4RyxhQUFjLEVBQ3BCci9ILEtBQUt1cEksbUJBQW1CbG1ILEdBQ3hCcmpCLEtBQUt5cEksZ0JBQ0wsTUFFSixRQUNJcG1ILEVBQU05Z0IsTUFBUXFNLE9BQU91cUIsY0FBY2dzRyxFQUFhdG1HLEdBQU1pbkcsRUFBYWpuRyxHQUFNQSxHQUdyRixDQUdBLHNCQUFBa3lHLENBQXVCbHlHLEdBQ25CLE1BQU14YixFQUFRcmpCLEtBQUt3N0gsYUFDbkIsT0FBUTM4RixHQUNKLEtBQUtpbUcsRUFBYTdaLFlBQVk4YSxNQUM5QixLQUFLakIsRUFBYTdaLFlBQVlxWCxVQUM5QixLQUFLd0MsRUFBYTdaLFlBQVkrYSxXQUM5QixLQUFLbEIsRUFBYTdaLFlBQVlnYixVQUUxQixNQUVKLEtBQUtuQixFQUFhN1osWUFBWW1iLGtCQUMxQnBtSSxLQUFLZ1MsTUFBUW01QyxFQUFNazdFLEtBQ25Ccm1JLEtBQUt1cEksbUJBQW1CbG1ILEdBQ3hCLE1BRUosS0FBS3loSCxFQUFhN1osWUFBWW1KLElBQzFCcDBILEtBQUs2eEgsS0FBSzFGLEVBQWlCdEwsSUFBSTQwQixjQUMvQnB5SCxFQUFNZzhHLGFBQWMsRUFDcEJyL0gsS0FBS3VwSSxtQkFBbUJsbUgsR0FDeEJyakIsS0FBS3lwSSxnQkFDTCxNQUVKLFFBQ1F6cEksS0FBS2lvSSx3QkFBd0JuRCxFQUFhOVosVUFBVU8sUUFBUSxHQUM1RHZySCxLQUFLZ1MsTUFBUW01QyxFQUFNNmxGLDZCQUVkaHhJLEtBQUtpb0ksd0JBQXdCbkQsRUFBYTlaLFVBQVVRLFFBQVEsR0FDakV4ckgsS0FBS2dTLE1BQVFtNUMsRUFBTXltRiw2QkFJYjV4SSxLQUFLc25JLHVCQUNYdG5JLEtBQUs2eEgsS0FBSzFGLEVBQWlCdEwsSUFBSSswQiwwQ0FDL0J2eUgsRUFBTWc4RyxhQUFjLEVBQ3BCci9ILEtBQUtnUyxNQUFRbTVDLEVBQU1tbkYsY0FDbkJ0eUksS0FBS3V5SSxtQkFBbUIxekcsSUFJeEMsQ0FHQSwrQkFBQW95RyxDQUFnQ3B5RyxHQUM1QixNQUFNeGIsRUFBUXJqQixLQUFLdzdILGFBQ25CLE9BQVEzOEYsR0FDSixLQUFLaW1HLEVBQWE3WixZQUFZOGEsTUFDOUIsS0FBS2pCLEVBQWE3WixZQUFZcVgsVUFDOUIsS0FBS3dDLEVBQWE3WixZQUFZK2EsV0FDOUIsS0FBS2xCLEVBQWE3WixZQUFZZ2IsVUFDMUJqbUksS0FBS2dTLE1BQVFtNUMsRUFBTStsRixpQ0FDbkIsTUFFSixLQUFLcE0sRUFBYTdaLFlBQVkwcEIsZUFDMUIzMEksS0FBSzZ4SCxLQUFLMUYsRUFBaUJ0TCxJQUFJZzFCLDRDQUMvQnh5SCxFQUFNNDVGLFNBQVcsR0FDakJqOUcsS0FBS2dTLE1BQVFtNUMsRUFBTWltRix3Q0FDbkIsTUFFSixLQUFLdE0sRUFBYTdaLFlBQVkycEIsV0FDMUI1MEksS0FBSzZ4SCxLQUFLMUYsRUFBaUJ0TCxJQUFJZzFCLDRDQUMvQnh5SCxFQUFNNDVGLFNBQVcsR0FDakJqOUcsS0FBS2dTLE1BQVFtNUMsRUFBTW1tRix3Q0FDbkIsTUFFSixLQUFLeE0sRUFBYTdaLFlBQVltYixrQkFDMUJwbUksS0FBSzZ4SCxLQUFLMUYsRUFBaUJ0TCxJQUFJaTFCLGdDQUMvQnp5SCxFQUFNZzhHLGFBQWMsRUFDcEJyL0gsS0FBS2dTLE1BQVFtNUMsRUFBTWs3RSxLQUNuQnJtSSxLQUFLdXBJLG1CQUFtQmxtSCxHQUN4QixNQUVKLEtBQUt5aEgsRUFBYTdaLFlBQVltSixJQUMxQnAwSCxLQUFLNnhILEtBQUsxRixFQUFpQnRMLElBQUk0MEIsY0FDL0JweUgsRUFBTWc4RyxhQUFjLEVBQ3BCci9ILEtBQUt1cEksbUJBQW1CbG1ILEdBQ3hCcmpCLEtBQUt5cEksZ0JBQ0wsTUFFSixRQUNJenBJLEtBQUs2eEgsS0FBSzFGLEVBQWlCdEwsSUFBSWsxQiwyQ0FDL0IxeUgsRUFBTWc4RyxhQUFjLEVBQ3BCci9ILEtBQUtnUyxNQUFRbTVDLEVBQU1tbkYsY0FDbkJ0eUksS0FBS3V5SSxtQkFBbUIxekcsR0FHcEMsQ0FHQSxtQ0FBQXN5RyxDQUFvQ3R5RyxHQUNoQyxNQUFNeGIsRUFBUXJqQixLQUFLdzdILGFBQ25CLE9BQVEzOEYsR0FDSixLQUFLaW1HLEVBQWE3WixZQUFZOGEsTUFDOUIsS0FBS2pCLEVBQWE3WixZQUFZcVgsVUFDOUIsS0FBS3dDLEVBQWE3WixZQUFZK2EsV0FDOUIsS0FBS2xCLEVBQWE3WixZQUFZZ2IsVUFFMUIsTUFFSixLQUFLbkIsRUFBYTdaLFlBQVkwcEIsZUFDMUJ0eEgsRUFBTTQ1RixTQUFXLEdBQ2pCajlHLEtBQUtnUyxNQUFRbTVDLEVBQU1pbUYsd0NBQ25CLE1BRUosS0FBS3RNLEVBQWE3WixZQUFZMnBCLFdBQzFCdnhILEVBQU00NUYsU0FBVyxHQUNqQmo5RyxLQUFLZ1MsTUFBUW01QyxFQUFNbW1GLHdDQUNuQixNQUVKLEtBQUt4TSxFQUFhN1osWUFBWW1iLGtCQUMxQnBtSSxLQUFLNnhILEtBQUsxRixFQUFpQnRMLElBQUlpMUIsZ0NBQy9CenlILEVBQU1nOEcsYUFBYyxFQUNwQnIvSCxLQUFLZ1MsTUFBUW01QyxFQUFNazdFLEtBQ25Ccm1JLEtBQUt1cEksbUJBQW1CbG1ILEdBQ3hCLE1BRUosS0FBS3loSCxFQUFhN1osWUFBWW1KLElBQzFCcDBILEtBQUs2eEgsS0FBSzFGLEVBQWlCdEwsSUFBSTQwQixjQUMvQnB5SCxFQUFNZzhHLGFBQWMsRUFDcEJyL0gsS0FBS3VwSSxtQkFBbUJsbUgsR0FDeEJyakIsS0FBS3lwSSxnQkFDTCxNQUVKLFFBQ0l6cEksS0FBSzZ4SCxLQUFLMUYsRUFBaUJ0TCxJQUFJazFCLDJDQUMvQjF5SCxFQUFNZzhHLGFBQWMsRUFDcEJyL0gsS0FBS2dTLE1BQVFtNUMsRUFBTW1uRixjQUNuQnR5SSxLQUFLdXlJLG1CQUFtQjF6RyxHQUdwQyxDQUdBLHlDQUFBd3lHLENBQTBDeHlHLEdBQ3RDLE1BQU14YixFQUFRcmpCLEtBQUt3N0gsYUFDbkIsT0FBUTM4RixHQUNKLEtBQUtpbUcsRUFBYTdaLFlBQVkwcEIsZUFDMUIzMEksS0FBS2dTLE1BQVFtNUMsRUFBTXFtRixnQ0FDbkIsTUFFSixLQUFLMU0sRUFBYTdaLFlBQVkyZSxLQUMxQjVwSSxLQUFLNnhILEtBQUsxRixFQUFpQnRMLElBQUlpekIseUJBQy9CendILEVBQU00NUYsVUFBWTZuQixFQUFhNVosc0JBQy9CLE1BRUosS0FBSzRaLEVBQWE3WixZQUFZbWIsa0JBQzFCcG1JLEtBQUs2eEgsS0FBSzFGLEVBQWlCdEwsSUFBSW0xQiwrQkFDL0IzeUgsRUFBTWc4RyxhQUFjLEVBQ3BCci9ILEtBQUt1cEksbUJBQW1CbG1ILEdBQ3hCcmpCLEtBQUtnUyxNQUFRbTVDLEVBQU1rN0UsS0FDbkIsTUFFSixLQUFLdkIsRUFBYTdaLFlBQVltSixJQUMxQnAwSCxLQUFLNnhILEtBQUsxRixFQUFpQnRMLElBQUk0MEIsY0FDL0JweUgsRUFBTWc4RyxhQUFjLEVBQ3BCci9ILEtBQUt1cEksbUJBQW1CbG1ILEdBQ3hCcmpCLEtBQUt5cEksZ0JBQ0wsTUFFSixRQUNJcG1ILEVBQU00NUYsVUFBWXJ1RyxPQUFPdXFCLGNBQWMwRixHQUduRCxDQUdBLHlDQUFBMHlHLENBQTBDMXlHLEdBQ3RDLE1BQU14YixFQUFRcmpCLEtBQUt3N0gsYUFDbkIsT0FBUTM4RixHQUNKLEtBQUtpbUcsRUFBYTdaLFlBQVkycEIsV0FDMUI1MEksS0FBS2dTLE1BQVFtNUMsRUFBTXFtRixnQ0FDbkIsTUFFSixLQUFLMU0sRUFBYTdaLFlBQVkyZSxLQUMxQjVwSSxLQUFLNnhILEtBQUsxRixFQUFpQnRMLElBQUlpekIseUJBQy9CendILEVBQU00NUYsVUFBWTZuQixFQUFhNVosc0JBQy9CLE1BRUosS0FBSzRaLEVBQWE3WixZQUFZbWIsa0JBQzFCcG1JLEtBQUs2eEgsS0FBSzFGLEVBQWlCdEwsSUFBSW0xQiwrQkFDL0IzeUgsRUFBTWc4RyxhQUFjLEVBQ3BCci9ILEtBQUt1cEksbUJBQW1CbG1ILEdBQ3hCcmpCLEtBQUtnUyxNQUFRbTVDLEVBQU1rN0UsS0FDbkIsTUFFSixLQUFLdkIsRUFBYTdaLFlBQVltSixJQUMxQnAwSCxLQUFLNnhILEtBQUsxRixFQUFpQnRMLElBQUk0MEIsY0FDL0JweUgsRUFBTWc4RyxhQUFjLEVBQ3BCci9ILEtBQUt1cEksbUJBQW1CbG1ILEdBQ3hCcmpCLEtBQUt5cEksZ0JBQ0wsTUFFSixRQUNJcG1ILEVBQU00NUYsVUFBWXJ1RyxPQUFPdXFCLGNBQWMwRixHQUduRCxDQUdBLGtDQUFBNHlHLENBQW1DNXlHLEdBQy9CLE1BQU14YixFQUFRcmpCLEtBQUt3N0gsYUFDbkIsT0FBUTM4RixHQUNKLEtBQUtpbUcsRUFBYTdaLFlBQVk4YSxNQUM5QixLQUFLakIsRUFBYTdaLFlBQVlxWCxVQUM5QixLQUFLd0MsRUFBYTdaLFlBQVkrYSxXQUM5QixLQUFLbEIsRUFBYTdaLFlBQVlnYixVQUMxQmptSSxLQUFLZ1MsTUFBUW01QyxFQUFNdW1GLDhDQUNuQixNQUVKLEtBQUs1TSxFQUFhN1osWUFBWW1iLGtCQUMxQnBtSSxLQUFLZ1MsTUFBUW01QyxFQUFNazdFLEtBQ25Ccm1JLEtBQUt1cEksbUJBQW1CbG1ILEdBQ3hCLE1BRUosS0FBS3loSCxFQUFhN1osWUFBWTBwQixlQUMxQjMwSSxLQUFLNnhILEtBQUsxRixFQUFpQnRMLElBQUlvMUIsMkRBQy9CNXlILEVBQU02NUYsU0FBVyxHQUNqQmw5RyxLQUFLZ1MsTUFBUW01QyxFQUFNNm1GLHdDQUNuQixNQUVKLEtBQUtsTixFQUFhN1osWUFBWTJwQixXQUMxQjUwSSxLQUFLNnhILEtBQUsxRixFQUFpQnRMLElBQUlvMUIsMkRBQy9CNXlILEVBQU02NUYsU0FBVyxHQUNqQmw5RyxLQUFLZ1MsTUFBUW01QyxFQUFNK21GLHdDQUNuQixNQUVKLEtBQUtwTixFQUFhN1osWUFBWW1KLElBQzFCcDBILEtBQUs2eEgsS0FBSzFGLEVBQWlCdEwsSUFBSTQwQixjQUMvQnB5SCxFQUFNZzhHLGFBQWMsRUFDcEJyL0gsS0FBS3VwSSxtQkFBbUJsbUgsR0FDeEJyakIsS0FBS3lwSSxnQkFDTCxNQUVKLFFBQ0l6cEksS0FBSzZ4SCxLQUFLMUYsRUFBaUJ0TCxJQUFJcTFCLDJDQUMvQjd5SCxFQUFNZzhHLGFBQWMsRUFDcEJyL0gsS0FBS2dTLE1BQVFtNUMsRUFBTW1uRixjQUNuQnR5SSxLQUFLdXlJLG1CQUFtQjF6RyxHQUdwQyxDQUdBLDhDQUFBOHlHLENBQStDOXlHLEdBQzNDLE1BQU14YixFQUFRcmpCLEtBQUt3N0gsYUFDbkIsT0FBUTM4RixHQUNKLEtBQUtpbUcsRUFBYTdaLFlBQVk4YSxNQUM5QixLQUFLakIsRUFBYTdaLFlBQVlxWCxVQUM5QixLQUFLd0MsRUFBYTdaLFlBQVkrYSxXQUM5QixLQUFLbEIsRUFBYTdaLFlBQVlnYixVQUUxQixNQUVKLEtBQUtuQixFQUFhN1osWUFBWW1iLGtCQUMxQnBtSSxLQUFLdXBJLG1CQUFtQmxtSCxHQUN4QnJqQixLQUFLZ1MsTUFBUW01QyxFQUFNazdFLEtBQ25CLE1BRUosS0FBS3ZCLEVBQWE3WixZQUFZMHBCLGVBQzFCdHhILEVBQU02NUYsU0FBVyxHQUNqQmw5RyxLQUFLZ1MsTUFBUW01QyxFQUFNNm1GLHdDQUNuQixNQUVKLEtBQUtsTixFQUFhN1osWUFBWTJwQixXQUMxQnZ4SCxFQUFNNjVGLFNBQVcsR0FDakJsOUcsS0FBS2dTLE1BQVFtNUMsRUFBTSttRix3Q0FDbkIsTUFFSixLQUFLcE4sRUFBYTdaLFlBQVltSixJQUMxQnAwSCxLQUFLNnhILEtBQUsxRixFQUFpQnRMLElBQUk0MEIsY0FDL0JweUgsRUFBTWc4RyxhQUFjLEVBQ3BCci9ILEtBQUt1cEksbUJBQW1CbG1ILEdBQ3hCcmpCLEtBQUt5cEksZ0JBQ0wsTUFFSixRQUNJenBJLEtBQUs2eEgsS0FBSzFGLEVBQWlCdEwsSUFBSXExQiwyQ0FDL0I3eUgsRUFBTWc4RyxhQUFjLEVBQ3BCci9ILEtBQUtnUyxNQUFRbTVDLEVBQU1tbkYsY0FDbkJ0eUksS0FBS3V5SSxtQkFBbUIxekcsR0FHcEMsQ0FHQSwrQkFBQWd6RyxDQUFnQ2h6RyxHQUM1QixNQUFNeGIsRUFBUXJqQixLQUFLdzdILGFBQ25CLE9BQVEzOEYsR0FDSixLQUFLaW1HLEVBQWE3WixZQUFZOGEsTUFDOUIsS0FBS2pCLEVBQWE3WixZQUFZcVgsVUFDOUIsS0FBS3dDLEVBQWE3WixZQUFZK2EsV0FDOUIsS0FBS2xCLEVBQWE3WixZQUFZZ2IsVUFDMUJqbUksS0FBS2dTLE1BQVFtNUMsRUFBTTJtRixpQ0FDbkIsTUFFSixLQUFLaE4sRUFBYTdaLFlBQVkwcEIsZUFDMUIzMEksS0FBSzZ4SCxLQUFLMUYsRUFBaUJ0TCxJQUFJczFCLDRDQUMvQjl5SCxFQUFNNjVGLFNBQVcsR0FDakJsOUcsS0FBS2dTLE1BQVFtNUMsRUFBTTZtRix3Q0FDbkIsTUFFSixLQUFLbE4sRUFBYTdaLFlBQVkycEIsV0FDMUI1MEksS0FBSzZ4SCxLQUFLMUYsRUFBaUJ0TCxJQUFJczFCLDRDQUMvQjl5SCxFQUFNNjVGLFNBQVcsR0FDakJsOUcsS0FBS2dTLE1BQVFtNUMsRUFBTSttRix3Q0FDbkIsTUFFSixLQUFLcE4sRUFBYTdaLFlBQVltYixrQkFDMUJwbUksS0FBSzZ4SCxLQUFLMUYsRUFBaUJ0TCxJQUFJdTFCLGdDQUMvQi95SCxFQUFNZzhHLGFBQWMsRUFDcEJyL0gsS0FBS2dTLE1BQVFtNUMsRUFBTWs3RSxLQUNuQnJtSSxLQUFLdXBJLG1CQUFtQmxtSCxHQUN4QixNQUVKLEtBQUt5aEgsRUFBYTdaLFlBQVltSixJQUMxQnAwSCxLQUFLNnhILEtBQUsxRixFQUFpQnRMLElBQUk0MEIsY0FDL0JweUgsRUFBTWc4RyxhQUFjLEVBQ3BCci9ILEtBQUt1cEksbUJBQW1CbG1ILEdBQ3hCcmpCLEtBQUt5cEksZ0JBQ0wsTUFFSixRQUNJenBJLEtBQUs2eEgsS0FBSzFGLEVBQWlCdEwsSUFBSXExQiwyQ0FDL0I3eUgsRUFBTWc4RyxhQUFjLEVBQ3BCci9ILEtBQUtnUyxNQUFRbTVDLEVBQU1tbkYsY0FDbkJ0eUksS0FBS3V5SSxtQkFBbUIxekcsR0FHcEMsQ0FHQSxtQ0FBQWt6RyxDQUFvQ2x6RyxHQUNoQyxNQUFNeGIsRUFBUXJqQixLQUFLdzdILGFBQ25CLE9BQVEzOEYsR0FDSixLQUFLaW1HLEVBQWE3WixZQUFZOGEsTUFDOUIsS0FBS2pCLEVBQWE3WixZQUFZcVgsVUFDOUIsS0FBS3dDLEVBQWE3WixZQUFZK2EsV0FDOUIsS0FBS2xCLEVBQWE3WixZQUFZZ2IsVUFFMUIsTUFFSixLQUFLbkIsRUFBYTdaLFlBQVkwcEIsZUFDMUJ0eEgsRUFBTTY1RixTQUFXLEdBQ2pCbDlHLEtBQUtnUyxNQUFRbTVDLEVBQU02bUYsd0NBQ25CLE1BRUosS0FBS2xOLEVBQWE3WixZQUFZMnBCLFdBQzFCdnhILEVBQU02NUYsU0FBVyxHQUNqQmw5RyxLQUFLZ1MsTUFBUW01QyxFQUFNK21GLHdDQUNuQixNQUVKLEtBQUtwTixFQUFhN1osWUFBWW1iLGtCQUMxQnBtSSxLQUFLNnhILEtBQUsxRixFQUFpQnRMLElBQUl1MUIsZ0NBQy9CL3lILEVBQU1nOEcsYUFBYyxFQUNwQnIvSCxLQUFLZ1MsTUFBUW01QyxFQUFNazdFLEtBQ25Ccm1JLEtBQUt1cEksbUJBQW1CbG1ILEdBQ3hCLE1BRUosS0FBS3loSCxFQUFhN1osWUFBWW1KLElBQzFCcDBILEtBQUs2eEgsS0FBSzFGLEVBQWlCdEwsSUFBSTQwQixjQUMvQnB5SCxFQUFNZzhHLGFBQWMsRUFDcEJyL0gsS0FBS3VwSSxtQkFBbUJsbUgsR0FDeEJyakIsS0FBS3lwSSxnQkFDTCxNQUVKLFFBQ0l6cEksS0FBSzZ4SCxLQUFLMUYsRUFBaUJ0TCxJQUFJcTFCLDJDQUMvQjd5SCxFQUFNZzhHLGFBQWMsRUFDcEJyL0gsS0FBS2dTLE1BQVFtNUMsRUFBTW1uRixjQUNuQnR5SSxLQUFLdXlJLG1CQUFtQjF6RyxHQUdwQyxDQUdBLHlDQUFBb3pHLENBQTBDcHpHLEdBQ3RDLE1BQU14YixFQUFRcmpCLEtBQUt3N0gsYUFDbkIsT0FBUTM4RixHQUNKLEtBQUtpbUcsRUFBYTdaLFlBQVkwcEIsZUFDMUIzMEksS0FBS2dTLE1BQVFtNUMsRUFBTWluRixnQ0FDbkIsTUFFSixLQUFLdE4sRUFBYTdaLFlBQVkyZSxLQUMxQjVwSSxLQUFLNnhILEtBQUsxRixFQUFpQnRMLElBQUlpekIseUJBQy9CendILEVBQU02NUYsVUFBWTRuQixFQUFhNVosc0JBQy9CLE1BRUosS0FBSzRaLEVBQWE3WixZQUFZbWIsa0JBQzFCcG1JLEtBQUs2eEgsS0FBSzFGLEVBQWlCdEwsSUFBSXcxQiwrQkFDL0JoekgsRUFBTWc4RyxhQUFjLEVBQ3BCci9ILEtBQUt1cEksbUJBQW1CbG1ILEdBQ3hCcmpCLEtBQUtnUyxNQUFRbTVDLEVBQU1rN0UsS0FDbkIsTUFFSixLQUFLdkIsRUFBYTdaLFlBQVltSixJQUMxQnAwSCxLQUFLNnhILEtBQUsxRixFQUFpQnRMLElBQUk0MEIsY0FDL0JweUgsRUFBTWc4RyxhQUFjLEVBQ3BCci9ILEtBQUt1cEksbUJBQW1CbG1ILEdBQ3hCcmpCLEtBQUt5cEksZ0JBQ0wsTUFFSixRQUNJcG1ILEVBQU02NUYsVUFBWXR1RyxPQUFPdXFCLGNBQWMwRixHQUduRCxDQUdBLHlDQUFBc3pHLENBQTBDdHpHLEdBQ3RDLE1BQU14YixFQUFRcmpCLEtBQUt3N0gsYUFDbkIsT0FBUTM4RixHQUNKLEtBQUtpbUcsRUFBYTdaLFlBQVkycEIsV0FDMUI1MEksS0FBS2dTLE1BQVFtNUMsRUFBTWluRixnQ0FDbkIsTUFFSixLQUFLdE4sRUFBYTdaLFlBQVkyZSxLQUMxQjVwSSxLQUFLNnhILEtBQUsxRixFQUFpQnRMLElBQUlpekIseUJBQy9CendILEVBQU02NUYsVUFBWTRuQixFQUFhNVosc0JBQy9CLE1BRUosS0FBSzRaLEVBQWE3WixZQUFZbWIsa0JBQzFCcG1JLEtBQUs2eEgsS0FBSzFGLEVBQWlCdEwsSUFBSXcxQiwrQkFDL0JoekgsRUFBTWc4RyxhQUFjLEVBQ3BCci9ILEtBQUt1cEksbUJBQW1CbG1ILEdBQ3hCcmpCLEtBQUtnUyxNQUFRbTVDLEVBQU1rN0UsS0FDbkIsTUFFSixLQUFLdkIsRUFBYTdaLFlBQVltSixJQUMxQnAwSCxLQUFLNnhILEtBQUsxRixFQUFpQnRMLElBQUk0MEIsY0FDL0JweUgsRUFBTWc4RyxhQUFjLEVBQ3BCci9ILEtBQUt1cEksbUJBQW1CbG1ILEdBQ3hCcmpCLEtBQUt5cEksZ0JBQ0wsTUFFSixRQUNJcG1ILEVBQU02NUYsVUFBWXR1RyxPQUFPdXFCLGNBQWMwRixHQUduRCxDQUdBLGtDQUFBd3pHLENBQW1DeHpHLEdBQy9CLE1BQU14YixFQUFRcmpCLEtBQUt3N0gsYUFDbkIsT0FBUTM4RixHQUNKLEtBQUtpbUcsRUFBYTdaLFlBQVk4YSxNQUM5QixLQUFLakIsRUFBYTdaLFlBQVlxWCxVQUM5QixLQUFLd0MsRUFBYTdaLFlBQVkrYSxXQUM5QixLQUFLbEIsRUFBYTdaLFlBQVlnYixVQUUxQixNQUVKLEtBQUtuQixFQUFhN1osWUFBWW1iLGtCQUMxQnBtSSxLQUFLdXBJLG1CQUFtQmxtSCxHQUN4QnJqQixLQUFLZ1MsTUFBUW01QyxFQUFNazdFLEtBQ25CLE1BRUosS0FBS3ZCLEVBQWE3WixZQUFZbUosSUFDMUJwMEgsS0FBSzZ4SCxLQUFLMUYsRUFBaUJ0TCxJQUFJNDBCLGNBQy9CcHlILEVBQU1nOEcsYUFBYyxFQUNwQnIvSCxLQUFLdXBJLG1CQUFtQmxtSCxHQUN4QnJqQixLQUFLeXBJLGdCQUNMLE1BRUosUUFDSXpwSSxLQUFLNnhILEtBQUsxRixFQUFpQnRMLElBQUl5MUIsaURBQy9CdDJJLEtBQUtnUyxNQUFRbTVDLEVBQU1tbkYsY0FDbkJ0eUksS0FBS3V5SSxtQkFBbUIxekcsR0FHcEMsQ0FHQSxrQkFBQTB6RyxDQUFtQjF6RyxHQUNmLE1BQU14YixFQUFRcmpCLEtBQUt3N0gsYUFDbkIsT0FBUTM4RixHQUNKLEtBQUtpbUcsRUFBYTdaLFlBQVltYixrQkFDMUJwbUksS0FBS3VwSSxtQkFBbUJsbUgsR0FDeEJyakIsS0FBS2dTLE1BQVFtNUMsRUFBTWs3RSxLQUNuQixNQUVKLEtBQUt2QixFQUFhN1osWUFBWTJlLEtBQzFCNXBJLEtBQUs2eEgsS0FBSzFGLEVBQWlCdEwsSUFBSWl6Qix5QkFDL0IsTUFFSixLQUFLaFAsRUFBYTdaLFlBQVltSixJQUMxQnAwSCxLQUFLdXBJLG1CQUFtQmxtSCxHQUN4QnJqQixLQUFLeXBJLGdCQU1qQixDQUdBLGtCQUFBK0ksQ0FBbUIzekcsR0FDZixPQUFRQSxHQUNKLEtBQUtpbUcsRUFBYTdaLFlBQVlzckIscUJBQzFCdjJJLEtBQUtnUyxNQUFRbTVDLEVBQU1zbkYsc0JBQ25CLE1BRUosS0FBSzNOLEVBQWE3WixZQUFZbUosSUFDMUJwMEgsS0FBSzZ4SCxLQUFLMUYsRUFBaUJ0TCxJQUFJMjFCLFlBQy9CeDJJLEtBQUt5cEksZ0JBQ0wsTUFFSixRQUNJenBJLEtBQUsycEksZUFBZTlxRyxHQUdoQyxDQUdBLHlCQUFBNnpHLENBQTBCN3pHLEdBQ2xCQSxJQUFPaW1HLEVBQWE3WixZQUFZc3JCLHFCQUNoQ3YySSxLQUFLZ1MsTUFBUW01QyxFQUFNd25GLG1CQUduQjN5SSxLQUFLNnBJLFdBQVcsS0FDaEI3cEksS0FBS2dTLE1BQVFtNUMsRUFBTW03RSxjQUNuQnRtSSxLQUFLd3lJLG1CQUFtQjN6RyxHQUVoQyxDQUdBLHFCQUFBK3pHLENBQXNCL3pHLEdBQ2xCLE9BQVFBLEdBQ0osS0FBS2ltRyxFQUFhN1osWUFBWW1iLGtCQUMxQnBtSSxLQUFLZ1MsTUFBUW01QyxFQUFNazdFLEtBQ25CLE1BRUosS0FBS3ZCLEVBQWE3WixZQUFZc3JCLHFCQUMxQnYySSxLQUFLNnBJLFdBQVcsS0FDaEIsTUFFSixRQUNJN3BJLEtBQUs2cEksV0FBVyxNQUNoQjdwSSxLQUFLZ1MsTUFBUW01QyxFQUFNbTdFLGNBQ25CdG1JLEtBQUt3eUksbUJBQW1CM3pHLEdBR3BDLENBR0Esd0JBQUFpMEcsQ0FBeUJqMEcsR0FDakJBLElBQU9pbUcsRUFBYTdaLFlBQVl3ckIsWUFDaEN6MkksS0FBS2dTLE1BQVFtNUMsRUFBTWdvRiw0QkFFZHIyRyxFQUFvQitCLElBQ3pCNytCLEtBQUtnUyxNQUFRbTVDLEVBQU00bkYsMEJBQ25CL3lJLEtBQUtnekksOEJBQThCbjBHLEtBR25DNytCLEtBQUt5cUksNENBQTRDM0YsRUFBYTdaLFlBQVlvZixXQUMxRXJxSSxLQUFLK25JLGtCQUFrQi9uSSxLQUFLMG1JLFlBQWE3bkcsR0FFakQsQ0FHQSw2QkFBQW0wRyxDQUE4Qm4wRyxHQUMxQixNQUFNNjNHLEVBQWMxMkksS0FBSzhwSSw4QkFBOEJqckcsR0FHdkQsR0FBSTcrQixLQUFLc25JLDJCQUdKLEdBQUlvUCxFQUFhLENBQ2xCLElBQUssSUFBSS94SSxFQUFJLEVBQUdBLEVBQUkreEksRUFBWXIySSxPQUFRc0UsSUFDcEMzRSxLQUFLeXFJLDRDQUE0Q2lNLEVBQVkveEksSUFFakUzRSxLQUFLZ1MsTUFBUWhTLEtBQUswbUksV0FDdEIsTUFFSTFtSSxLQUFLeXFJLDRDQUE0QzNGLEVBQWE3WixZQUFZb2YsV0FDMUVycUksS0FBS2dTLE1BQVFtNUMsRUFBTThuRixtQkFFM0IsQ0FHQSx3QkFBQUMsQ0FBeUJyMEcsR0FDakIvQixFQUFvQitCLEdBQ3BCNytCLEtBQUt5cUksNENBQTRDNXJHLElBRzdDQSxJQUFPaW1HLEVBQWE3WixZQUFZK2UsV0FDaENocUksS0FBSzZ4SCxLQUFLMUYsRUFBaUJ0TCxJQUFJODFCLGdDQUVuQzMySSxLQUFLK25JLGtCQUFrQi9uSSxLQUFLMG1JLFlBQWE3bkcsR0FFakQsQ0FHQSwrQkFBQXUwRyxDQUFnQ3YwRyxHQUM1QjcrQixLQUFLMm1JLFlBQWMsRUFDZjluRyxJQUFPaW1HLEVBQWE3WixZQUFZMnJCLGVBQWlCLzNHLElBQU9pbUcsRUFBYTdaLFlBQVk0ckIsZ0JBQ2pGNzJJLEtBQUtnUyxNQUFRbTVDLEVBQU1rb0Ysc0NBR2RyTyxFQUFhbm1HLElBQ2xCNytCLEtBQUtnUyxNQUFRbTVDLEVBQU1zb0YsNEJBQ25CenpJLEtBQUswekksZ0NBQWdDNzBHLEtBR3JDNytCLEtBQUs2eEgsS0FBSzFGLEVBQWlCdEwsSUFBSXprRiw0Q0FDL0JwOEIsS0FBS3lxSSw0Q0FBNEMzRixFQUFhN1osWUFBWW9mLFdBQzFFcnFJLEtBQUt5cUksNENBQTRDM0YsRUFBYTdaLFlBQVl3ckIsYUFDMUV6MkksS0FBSytuSSxrQkFBa0IvbkksS0FBSzBtSSxZQUFhN25HLEdBRWpELENBR0Esd0NBQUF5MEcsQ0FBeUN6MEcsSUFobkY3QyxTQUF5QkEsR0FDckIsT0FBT21tRyxFQUFhbm1HLElBQU82bUcsRUFBcUI3bUcsSUFBTyttRyxFQUFxQi9tRyxFQUNoRixDQSttRllpNEcsQ0FBZ0JqNEcsSUFLaEI3K0IsS0FBSzZ4SCxLQUFLMUYsRUFBaUJ0TCxJQUFJemtGLDRDQUMvQnA4QixLQUFLeXFJLDRDQUE0QzNGLEVBQWE3WixZQUFZb2YsV0FDMUVycUksS0FBS3lxSSw0Q0FBNEMzRixFQUFhN1osWUFBWXdyQixhQUMxRXoySSxLQUFLNG5JLFdBQVcsR0FDaEI1bkksS0FBS2dTLE1BQVFoUyxLQUFLMG1JLGNBUmxCMW1JLEtBQUtnUyxNQUFRbTVDLEVBQU1vb0YsZ0NBQ25CdnpJLEtBQUt3ekksb0NBQW9DMzBHLEdBU2pELENBR0EsbUNBQUEyMEcsQ0FBb0MzMEcsR0FDNUI2bUcsRUFBcUI3bUcsR0FDckI3K0IsS0FBSzJtSSxZQUFpQyxHQUFuQjNtSSxLQUFLMm1JLFlBQW1COW5HLEVBQUssR0FFM0MrbUcsRUFBcUIvbUcsR0FDMUI3K0IsS0FBSzJtSSxZQUFpQyxHQUFuQjNtSSxLQUFLMm1JLFlBQW1COW5HLEVBQUssR0FFM0NtbUcsRUFBYW5tRyxHQUNsQjcrQixLQUFLMm1JLFlBQWlDLEdBQW5CM21JLEtBQUsybUksWUFBbUI5bkcsRUFBSyxHQUUzQ0EsSUFBT2ltRyxFQUFhN1osWUFBWStlLFVBQ3JDaHFJLEtBQUtnUyxNQUFRbTVDLEVBQU13b0YsaUNBR25CM3pJLEtBQUs2eEgsS0FBSzFGLEVBQWlCdEwsSUFBSXZrRix5Q0FDL0J0OEIsS0FBS2dTLE1BQVFtNUMsRUFBTXdvRixnQ0FDbkIzekksS0FBSzR6SSxtQ0FBbUMvMEcsR0FFaEQsQ0FHQSwrQkFBQTYwRyxDQUFnQzcwRyxHQUN4Qm1tRyxFQUFhbm1HLEdBQ2I3K0IsS0FBSzJtSSxZQUFpQyxHQUFuQjNtSSxLQUFLMm1JLFlBQW1COW5HLEVBQUssR0FFM0NBLElBQU9pbUcsRUFBYTdaLFlBQVkrZSxVQUNyQ2hxSSxLQUFLZ1MsTUFBUW01QyxFQUFNd29GLGlDQUduQjN6SSxLQUFLNnhILEtBQUsxRixFQUFpQnRMLElBQUl2a0YseUNBQy9CdDhCLEtBQUtnUyxNQUFRbTVDLEVBQU13b0YsZ0NBQ25CM3pJLEtBQUs0ekksbUNBQW1DLzBHLEdBRWhELENBR0Esa0NBQUErMEcsQ0FBbUMvMEcsR0FDL0IsR0FBSTcrQixLQUFLMm1JLGNBQWdCN0IsRUFBYTdaLFlBQVkyZSxLQUM5QzVwSSxLQUFLNnhILEtBQUsxRixFQUFpQnRMLElBQUlrMkIsd0JBQy9CLzJJLEtBQUsybUksWUFBYzdCLEVBQWE3WixZQUFZQywyQkFFM0MsR0FBSWxySCxLQUFLMm1JLFlBQWMsUUFDeEIzbUksS0FBSzZ4SCxLQUFLMUYsRUFBaUJ0TCxJQUFJbTJCLHVDQUMvQmgzSSxLQUFLMm1JLFlBQWM3QixFQUFhN1osWUFBWUMsMkJBRTNDLElBQUksRUFBSTRaLEVBQWEvWixhQUFhL3FILEtBQUsybUksYUFDeEMzbUksS0FBSzZ4SCxLQUFLMUYsRUFBaUJ0TCxJQUFJbzJCLDZCQUMvQmozSSxLQUFLMm1JLFlBQWM3QixFQUFhN1osWUFBWUMsMkJBRTNDLElBQUksRUFBSTRaLEVBQWFuYSxzQkFBc0IzcUgsS0FBSzJtSSxhQUNqRDNtSSxLQUFLNnhILEtBQUsxRixFQUFpQnRMLElBQUlxMkIscUNBRTlCLElBQUksRUFBSXBTLEVBQWFsYSxvQkFBb0I1cUgsS0FBSzJtSSxjQUFnQjNtSSxLQUFLMm1JLGNBQWdCN0IsRUFBYTdaLFlBQVlrc0IsZ0JBQWlCLENBQzlIbjNJLEtBQUs2eEgsS0FBSzFGLEVBQWlCdEwsSUFBSXUyQiwyQkFDL0IsTUFBTWovRyxFQUFjNHNHLEVBQW1DcC9ILElBQUkzRixLQUFLMm1JLGtCQUM1Q3ZoSSxJQUFoQit5QixJQUNBbjRCLEtBQUsybUksWUFBY3h1RyxFQUUzQixDQUNBbjRCLEtBQUt5cUksNENBQTRDenFJLEtBQUsybUksYUFDdEQzbUksS0FBSytuSSxrQkFBa0IvbkksS0FBSzBtSSxZQUFhN25HLEVBQzdDLGdDQ3YxRkp0N0IsT0FBT0MsZUFBZTVELEVBQVMsYUFBYyxDQUFFMEQsT0FBTyxJQUN0RDFELEVBQVFvbkksa0JBQWUsRUFDdkIsTUFBTWxDLEVBQWUsRUFBUSxLQUN2QjNZLEVBQW1CLEVBQVEsTUFpTWpDdnNILEVBQVFvbkksYUEzTFIsTUFDSSxXQUFBdHFILENBQVlpeEIsR0FDUjN0QyxLQUFLMnRDLFFBQVVBLEVBQ2YzdEMsS0FBS29RLEtBQU8sR0FDWnBRLEtBQUtvb0IsS0FBTyxFQUVacG9CLEtBQUtxM0ksWUFBYyxFQUNuQnIzSSxLQUFLczNJLFNBQVcsR0FDaEJ0M0ksS0FBS3kySCxpQkFBa0IsRUFDdkJ6MkgsS0FBS3UzSSxrQkFBbUIsRUFDeEJ2M0ksS0FBSzJuSSxlQUFnQixFQUNyQjNuSSxLQUFLdzNJLGdCQWZvQixNQWdCekJ4M0ksS0FBS3kzSSxPQUFRLEVBQ2J6M0ksS0FBSzAzSSxhQUFlLEVBQ3BCMTNJLEtBQUsyM0ksa0JBQW9CLEVBQ3pCMzNJLEtBQUtxaUUsS0FBTyxFQUVacmlFLEtBQUs0M0ksZUFBaUIsQ0FDMUIsQ0FFQSxPQUFJcjFFLEdBQ0EsT0FBT3ZpRSxLQUFLb29CLElBQU1wb0IsS0FBSzAzSSxhQUFlN29JLE9BQU83TyxLQUFLcTNJLGFBQWVyM0ksS0FBS29vQixJQUMxRSxDQUNBLFVBQUlvRSxHQUNBLE9BQU94c0IsS0FBSzIzSSxrQkFBb0IzM0ksS0FBS29vQixHQUN6QyxDQUNBLFFBQUErK0csQ0FBU3B0RyxHQUNMLE1BQU0sS0FBRXNvQyxFQUFJLElBQUVFLEVBQUcsT0FBRS8xQyxHQUFXeHNCLEtBQzlCLE1BQU8sQ0FDSCs1QixPQUNBZzFGLFVBQVcxc0QsRUFDWDRzRCxRQUFTNXNELEVBQ1Qyc0QsU0FBVXpzRCxFQUNWMnNELE9BQVEzc0QsRUFDUnE5QyxZQUFhcHpGLEVBQ2JxekYsVUFBV3J6RixFQUVuQixDQUNBLElBQUFxbEcsQ0FBSzkzRixHQUNHLzVCLEtBQUsydEMsUUFBUTBoRixjQUFnQnJ2SCxLQUFLNDNJLGdCQUFrQjUzSSxLQUFLd3NCLFNBQ3pEeHNCLEtBQUs0M0ksY0FBZ0I1M0ksS0FBS3dzQixPQUMxQnhzQixLQUFLMnRDLFFBQVEwaEYsYUFBYXJ2SCxLQUFLbW5JLFNBQVNwdEcsSUFFaEQsQ0FDQSxPQUFBODlHLEdBQ0k3M0ksS0FBS3MzSSxTQUFTaHpJLEtBQUt0RSxLQUFLcTNJLFlBQ3hCcjNJLEtBQUtxM0ksV0FBYXIzSSxLQUFLb29CLEdBQzNCLENBQ0EsaUJBQUEwdkgsQ0FBa0JqNUcsR0FFZCxHQUFJNytCLEtBQUtvb0IsTUFBUXBvQixLQUFLb1EsS0FBSy9QLE9BQVMsRUFBRyxDQUNuQyxNQUFNNnBJLEVBQVNscUksS0FBS29RLEtBQUswUCxXQUFXOWYsS0FBS29vQixJQUFNLEdBQy9DLElBQUksRUFBSTA4RyxFQUFhaGEsaUJBQWlCb2YsR0FLbEMsT0FIQWxxSSxLQUFLb29CLE1BRUxwb0IsS0FBSzYzSSxXQUNFLEVBQUkvUyxFQUFhamEsMkJBQTJCaHNGLEVBQUlxckcsRUFFL0QsTUFFSyxJQUFLbHFJLEtBQUt1M0ksaUJBRVgsT0FEQXYzSSxLQUFLMm5JLGVBQWdCLEVBQ2Q3QyxFQUFhN1osWUFBWW1KLElBSXBDLE9BREFwMEgsS0FBSzZ4SCxLQUFLMUYsRUFBaUJ0TCxJQUFJazNCLHdCQUN4Qmw1RyxDQUNYLENBQ0EsbUJBQUFtNUcsR0FDSSxPQUFPaDRJLEtBQUtvb0IsSUFBTXBvQixLQUFLdzNJLGVBQzNCLENBQ0EsZUFBQW5PLEdBQ1FycEksS0FBS2c0SSx3QkFDTGg0SSxLQUFLb1EsS0FBT3BRLEtBQUtvUSxLQUFLdXVCLFVBQVUzK0IsS0FBS29vQixLQUNyQ3BvQixLQUFLMDNJLGNBQWdCMTNJLEtBQUtvb0IsSUFDMUJwb0IsS0FBSzIzSSxtQkFBcUIzM0ksS0FBS29vQixJQUMvQnBvQixLQUFLb29CLElBQU0sRUFDWHBvQixLQUFLcTNJLFlBQWMsRUFDbkJyM0ksS0FBS3MzSSxTQUFTajNJLE9BQVMsRUFFL0IsQ0FDQSxLQUFBdTZCLENBQU1rd0IsRUFBTzI4RSxHQUNMem5JLEtBQUtvUSxLQUFLL1AsT0FBUyxFQUNuQkwsS0FBS29RLE1BQVEwNkMsRUFHYjlxRCxLQUFLb1EsS0FBTzA2QyxFQUVoQjlxRCxLQUFLMm5JLGVBQWdCLEVBQ3JCM25JLEtBQUt1M0ksaUJBQW1COVAsQ0FDNUIsQ0FDQSxzQkFBQUMsQ0FBdUI1OEUsR0FDbkI5cUQsS0FBS29RLEtBQU9wUSxLQUFLb1EsS0FBS3V1QixVQUFVLEVBQUczK0IsS0FBS29vQixJQUFNLEdBQUswaUMsRUFBUTlxRCxLQUFLb1EsS0FBS3V1QixVQUFVMytCLEtBQUtvb0IsSUFBTSxHQUMxRnBvQixLQUFLMm5JLGVBQWdCLENBQ3pCLENBQ0EsVUFBQXI1SCxDQUFXNDVILEVBQVNDLEdBRWhCLEdBQUlub0ksS0FBS29vQixJQUFNOC9HLEVBQVE3bkksT0FBU0wsS0FBS29RLEtBQUsvUCxPQUV0QyxPQURBTCxLQUFLMm5JLGVBQWlCM25JLEtBQUt1M0ksa0JBQ3BCLEVBRVgsR0FBSXBQLEVBQ0EsT0FBT25vSSxLQUFLb1EsS0FBSzlCLFdBQVc0NUgsRUFBU2xvSSxLQUFLb29CLEtBRTlDLElBQUssSUFBSXpqQixFQUFJLEVBQUdBLEVBQUl1akksRUFBUTduSSxPQUFRc0UsSUFFaEMsSUFEZ0QsR0FBckMzRSxLQUFLb1EsS0FBSzBQLFdBQVc5ZixLQUFLb29CLElBQU16akIsTUFDaEN1akksRUFBUXBvSCxXQUFXbmIsR0FDMUIsT0FBTyxFQUdmLE9BQU8sQ0FDWCxDQUNBLElBQUF3bEksQ0FBSzM5RyxHQUNELE1BQU1wRSxFQUFNcG9CLEtBQUtvb0IsSUFBTW9FLEVBQ3ZCLEdBQUlwRSxHQUFPcG9CLEtBQUtvUSxLQUFLL1AsT0FFakIsT0FEQUwsS0FBSzJuSSxlQUFpQjNuSSxLQUFLdTNJLGlCQUNwQnpTLEVBQWE3WixZQUFZbUosSUFFcEMsTUFBTXI2RixFQUFPLzVCLEtBQUtvUSxLQUFLMFAsV0FBV3NJLEdBQ2xDLE9BQU8yUixJQUFTK3FHLEVBQWE3WixZQUFZa3NCLGdCQUFrQnJTLEVBQWE3WixZQUFZcVgsVUFBWXZvRyxDQUNwRyxDQUNBLE9BQUE4dEcsR0FRSSxHQVBBN25JLEtBQUtvb0IsTUFFRHBvQixLQUFLeTNJLFFBQ0x6M0ksS0FBS3kzSSxPQUFRLEVBQ2J6M0ksS0FBS3FpRSxPQUNMcmlFLEtBQUswM0ksYUFBZTEzSSxLQUFLb29CLEtBRXpCcG9CLEtBQUtvb0IsS0FBT3BvQixLQUFLb1EsS0FBSy9QLE9BRXRCLE9BREFMLEtBQUsybkksZUFBaUIzbkksS0FBS3UzSSxpQkFDcEJ6UyxFQUFhN1osWUFBWW1KLElBRXBDLElBQUl2MUYsRUFBSzcrQixLQUFLb1EsS0FBSzBQLFdBQVc5ZixLQUFLb29CLEtBRW5DLE9BQUl5VyxJQUFPaW1HLEVBQWE3WixZQUFZa3NCLGlCQUNoQ24zSSxLQUFLeTNJLE9BQVEsRUFDYnozSSxLQUFLeTJILGlCQUFrQixFQUNoQnFPLEVBQWE3WixZQUFZcVgsV0FJaEN6akcsSUFBT2ltRyxFQUFhN1osWUFBWXFYLFlBQ2hDdGlJLEtBQUt5M0ksT0FBUSxFQUNUejNJLEtBQUt5Mkgsa0JBRUx6MkgsS0FBS3FpRSxPQUNMcmlFLEtBQUt5MkgsaUJBQWtCLEVBQ3ZCejJILEtBQUs2M0ksVUFDRTczSSxLQUFLNm5JLFlBR3BCN25JLEtBQUt5MkgsaUJBQWtCLEdBQ25CLEVBQUlxTyxFQUFhL1osYUFBYWxzRixLQUM5QkEsRUFBSzcrQixLQUFLODNJLGtCQUFrQmo1RyxJQUt5QixPQUE5QjcrQixLQUFLMnRDLFFBQVEwaEYsY0FDbkN4d0YsRUFBSyxJQUFRQSxFQUFLLEtBQ25CQSxJQUFPaW1HLEVBQWE3WixZQUFZcVgsV0FDaEN6akcsSUFBT2ltRyxFQUFhN1osWUFBWWtzQixpQkFDL0J0NEcsRUFBSyxLQUFRQSxFQUFLLE9BRW5CNytCLEtBQUtpNEksK0JBQStCcDVHLEdBRWpDQSxFQUNYLENBQ0EsOEJBQUFvNUcsQ0FBK0JwNUcsSUFDdkIsRUFBSWltRyxFQUFhbGEsb0JBQW9CL3JGLEdBQ3JDNytCLEtBQUs2eEgsS0FBSzFGLEVBQWlCdEwsSUFBSXEzQixnQ0FFMUIsRUFBSXBULEVBQWFuYSxzQkFBc0I5ckYsSUFDNUM3K0IsS0FBSzZ4SCxLQUFLMUYsRUFBaUJ0TCxJQUFJczNCLDBCQUV2QyxDQUNBLE9BQUFyUSxDQUFRditFLEdBRUosSUFEQXZwRCxLQUFLb29CLEtBQU9taEMsRUFDTHZwRCxLQUFLb29CLElBQU1wb0IsS0FBS3EzSSxZQUNuQnIzSSxLQUFLcTNJLFdBQWFyM0ksS0FBS3MzSSxTQUFTcHFILE1BQ2hDbHRCLEtBQUtvb0IsTUFFVHBvQixLQUFLeTNJLE9BQVEsQ0FDakIsZ0NDbE1KbDBJLE9BQU9DLGVBQWU1RCxFQUFTLGFBQWMsQ0FBRTBELE9BQU8sSUFDdEQxRCxFQUFRbXNILHdCQUFxQixFQUM3QixNQUFNN0wsRUFBWSxFQUFRLE1BQzFCLFNBQVNyWixFQUFldmpHLEdBQ3BCLE1BQU8sQ0FDSHlsRSxTQUFVLFFBQ1Z6bEUsUUFDQXcyRSxXQUFZLEtBRXBCLENBQ0FsNkUsRUFBUW1zSCxtQkFBcUIsQ0FFekJ6TyxlQUFjLEtBQ0gsQ0FDSHYwQyxTQUFVLFlBQ1ZockMsS0FBTW1pRixFQUFVM0MsY0FBY0MsVUFDOUJ0MEMsV0FBWSxLQUdwQnUwQyx1QkFBc0IsS0FDWCxDQUNIMTBDLFNBQVUscUJBQ1ZHLFdBQVksS0FHcEJwd0IsY0FBYSxDQUFDanBDLEVBQVNzbEUsRUFBY2xNLEtBQzFCLENBQ0hGLFNBQVVsNUQsRUFDVkEsVUFDQW81RCxRQUNBa00sZUFDQWpNLFdBQVksR0FDWjRRLFdBQVksT0FHcEI4akMsa0JBQWtCbDJHLElBQ1AsQ0FDSHFoRSxTQUFVLFdBQ1ZyaEUsT0FDQW95RSxXQUFZLE9BSXBCLFdBQUE3aEQsQ0FBWTZoRCxFQUFZK2pDLEdBQ3BCL2pDLEVBQVc1USxXQUFXNWtFLEtBQUt1NUcsR0FDM0JBLEVBQVEvakMsV0FBYUEsQ0FDekIsRUFDQSxZQUFBdG1FLENBQWFzbUUsRUFBWStqQyxFQUFTQyxHQUM5QixNQUFNQyxFQUFlamtDLEVBQVc1USxXQUFXbDRELFFBQVE4c0csR0FDbkRoa0MsRUFBVzVRLFdBQVdwM0QsT0FBT2lzRyxFQUFjLEVBQUdGLEdBQzlDQSxFQUFRL2pDLFdBQWFBLENBQ3pCLEVBQ0Esa0JBQUFra0MsQ0FBbUJDLEVBQWlCQyxHQUNoQ0QsRUFBZ0JsbkcsUUFBVW1uRyxDQUM5QixFQUNBQyxtQkFBbUJGLEdBQ1JBLEVBQWdCbG5HLFFBRTNCLGVBQUFxbkcsQ0FBZ0J4MEUsRUFBVXJuQyxFQUFNMDZHLEVBQVVDLEdBQ3RDLE1BQU1tQixFQUFjejBFLEVBQVNzL0IsV0FBVzk5RCxNQUFNeEgsR0FBMkIsa0JBQWxCQSxFQUFLbWxFLFdBQzVELEdBQUlzMUMsRUFDQUEsRUFBWTk3RyxLQUFPQSxFQUNuQjg3RyxFQUFZcEIsU0FBV0EsRUFDdkJvQixFQUFZbkIsU0FBV0EsTUFFdEIsQ0FDRCxNQUFNdDVHLEVBQU8sQ0FDVG1sRSxTQUFVLGdCQUNWeG1FLE9BQ0EwNkcsV0FDQUMsV0FDQXBqQyxXQUFZLE1BRWhCbDZFLEVBQVFtc0gsbUJBQW1COXpGLFlBQVkyUixFQUFVaG1DLEVBQ3JELENBQ0osRUFDQSxlQUFBMDZHLENBQWdCMTBFLEVBQVU3TCxHQUN0QjZMLEVBQVM3TCxLQUFPQSxDQUNwQixFQUNBd2dGLGdCQUFnQjMwRSxHQUNMQSxFQUFTN0wsS0FFcEIsVUFBQXlnRixDQUFXNTZHLEdBQ1AsR0FBSUEsRUFBS2syRSxXQUFZLENBQ2pCLE1BQU1wckUsRUFBTTlLLEVBQUtrMkUsV0FBVzVRLFdBQVdsNEQsUUFBUXBOLEdBQy9DQSxFQUFLazJFLFdBQVc1USxXQUFXcDNELE9BQU9wRCxFQUFLLEdBQ3ZDOUssRUFBS2syRSxXQUFhLElBQ3RCLENBQ0osRUFDQSxVQUFBMmtDLENBQVcza0MsRUFBWXBzRSxHQUNuQixHQUFJb3NFLEVBQVc1USxXQUFXN29FLE9BQVMsRUFBRyxDQUNsQyxNQUFNcytHLEVBQVc3a0MsRUFBVzVRLFdBQVc0USxFQUFXNVEsV0FBVzdvRSxPQUFTLEdBQ3RFLEdBQUlULEVBQVFtc0gsbUJBQW1CMU8sV0FBV3NCLEdBRXRDLFlBREFBLEVBQVNyN0csT0FBU29LLEVBRzFCLENBQ0E5TixFQUFRbXNILG1CQUFtQjl6RixZQUFZNmhELEVBQVkrc0IsRUFBZW41RixHQUN0RSxFQUNBLGdCQUFBZ3hHLENBQWlCNWtDLEVBQVlwc0UsRUFBTW93RyxHQUMvQixNQUFNYSxFQUFXN2tDLEVBQVc1USxXQUFXNFEsRUFBVzVRLFdBQVdsNEQsUUFBUThzRyxHQUFpQixHQUNsRmEsR0FBWS8rRyxFQUFRbXNILG1CQUFtQjFPLFdBQVdzQixHQUNsREEsRUFBU3I3RyxPQUFTb0ssRUFHbEI5TixFQUFRbXNILG1CQUFtQnY0RyxhQUFhc21FLEVBQVkrc0IsRUFBZW41RixHQUFPb3dHLEVBRWxGLEVBQ0EsZUFBQWMsQ0FBZ0JDLEVBQVc1MUMsR0FDdkIsTUFBTW12RSxFQUFvQixJQUFJN3ZJLElBQUlzMkcsRUFBVTUxQyxNQUFNdjlELEtBQUtjLEdBQVNBLEVBQUtqSyxRQUNyRSxJQUFLLElBQUk4TyxFQUFJLEVBQUdBLEVBQUk0M0QsRUFBTTVvRSxPQUFRZ1IsSUFDekIrbUksRUFBa0J4dkksSUFBSXFnRSxFQUFNNTNELEdBQUc5TyxPQUNoQ3M4RyxFQUFVNTFDLE1BQU0za0UsS0FBSzJrRSxFQUFNNTNELEdBR3ZDLEVBRUF5dEcsY0FBY2w3RyxHQUNIQSxFQUFLc2xFLFdBQVcsR0FFM0I2MUMsY0FBY243RyxHQUNIQSxFQUFLc2xFLFdBRWhCODFDLGNBQWNwN0csR0FDSEEsRUFBS2syRSxXQUVoQm1sQyxZQUFZenpHLEdBQ0RBLEVBQVF5OUQsTUFHbkJpMkMsV0FBVzF6RyxHQUNBQSxFQUFRcUUsUUFFbkJzdkcsZ0JBQWdCM3pHLEdBQ0xBLEVBQVEycEUsYUFFbkJpcUMsbUJBQW1Cbm9HLEdBQ1JBLEVBQVMzVCxNQUVwQis3RyxzQkFBc0JDLEdBQ1hBLEVBQVk1M0csS0FFdkI2M0csd0JBQXdCbEIsR0FDYkEsRUFBWTk3RyxLQUV2Qmk5Ryw0QkFBNEJuQixHQUNqQkEsRUFBWXBCLFNBRXZCd0MsNEJBQTRCcEIsR0FDakJBLEVBQVluQixTQUd2QkcsV0FBV3o1RyxHQUNrQixVQUFsQkEsRUFBS21sRSxTQUVoQm8wQyxjQUFjdjVHLEdBQ2UsYUFBbEJBLEVBQUttbEUsU0FFaEIyMkMsbUJBQW1COTdHLEdBQ1Usa0JBQWxCQSxFQUFLbWxFLFNBRWhCcTBDLGNBQWN4NUcsR0FDSEwsT0FBTzlCLFVBQVVxRCxlQUFlOUIsS0FBS1ksRUFBTSxXQUd0RCx5QkFBQSs3RyxDQUEwQi83RyxFQUFNMHFFLEdBQzVCMXFFLEVBQUtzd0IsbUJBQXFCbzZDLENBQzlCLEVBQ0F3eEMsMEJBQTBCbDhHLEdBQ2ZBLEVBQUtzd0IsbUJBRWhCLDRCQUFBNnJGLENBQTZCbjhHLEVBQU1vOEcsR0FDL0JwOEcsRUFBS3N3QixtQkFBcUIzd0IsT0FBT2lCLE9BQU9qQixPQUFPaUIsT0FBTyxDQUFDLEVBQUdaLEVBQUtzd0Isb0JBQXFCOHJGLEVBQ3hGLEtDN0tBcTRCLEVBQTJCLENBQUMsRUFHaEMsU0FBU0MsRUFBb0JDLEdBRTVCLElBQUlDLEVBQWVILEVBQXlCRSxHQUM1QyxRQUFxQm56SSxJQUFqQm96SSxFQUNILE9BQU9BLEVBQWE1NEksUUFHckIsSUFBSUQsRUFBUzA0SSxFQUF5QkUsR0FBWSxDQUNqRGw0SCxHQUFJazRILEVBQ0pFLFFBQVEsRUFDUjc0SSxRQUFTLENBQUMsR0FVWCxPQU5BODRJLEVBQW9CSCxHQUFVdjFJLEtBQUtyRCxFQUFPQyxRQUFTRCxFQUFRQSxFQUFPQyxRQUFTMDRJLEdBRzNFMzRJLEVBQU84NEksUUFBUyxFQUdUOTRJLEVBQU9DLE9BQ2YsQ0N4QkEwNEksRUFBb0IxekksRUFBS2pGLElBQ3hCLElBQUk4d0MsRUFBUzl3QyxHQUFVQSxFQUFPNEYsV0FDN0IsSUFBTzVGLEVBQWlCLFFBQ3hCLElBQU0sRUFFUCxPQURBMjRJLEVBQW9CaDhILEVBQUVtMEIsRUFBUSxDQUFFNWtDLEVBQUc0a0MsSUFDNUJBLENBQU0sRUNMZDZuRyxFQUFvQmg4SCxFQUFJLENBQUMxYyxFQUFTKzRJLEtBQ2pDLElBQUksSUFBSXRvSSxLQUFPc29JLEVBQ1hMLEVBQW9CcnpJLEVBQUUwekksRUFBWXRvSSxLQUFTaW9JLEVBQW9CcnpJLEVBQUVyRixFQUFTeVEsSUFDNUU5TSxPQUFPQyxlQUFlNUQsRUFBU3lRLEVBQUssQ0FBRTNLLFlBQVksRUFBTUMsSUFBS2d6SSxFQUFXdG9JLElBRTFFLEVDTkRpb0ksRUFBb0I1dUcsRUFBSSxXQUN2QixHQUEwQixpQkFBZmt2RyxXQUF5QixPQUFPQSxXQUMzQyxJQUNDLE9BQU81NEksTUFBUSxJQUFJb2lDLFNBQVMsY0FBYixFQUNoQixDQUFFLE1BQU8xNUIsR0FDUixHQUFzQixpQkFBWGloQyxPQUFxQixPQUFPQSxNQUN4QyxDQUNBLENBUHVCLEdDQXhCMnVHLEVBQW9CcnpJLEVBQUksQ0FBQ29OLEVBQUs5RixJQUFVaEosT0FBTzlCLFVBQVVxRCxlQUFlOUIsS0FBS3FQLEVBQUs5RixHQ0NsRitySSxFQUFvQmw3SCxFQUFLeGQsSUFDSCxvQkFBWG9iLFFBQTBCQSxPQUFPaXJDLGFBQzFDMWlELE9BQU9DLGVBQWU1RCxFQUFTb2IsT0FBT2lyQyxZQUFhLENBQUUzaUQsTUFBTyxXQUU3REMsT0FBT0MsZUFBZTVELEVBQVMsYUFBYyxDQUFFMEQsT0FBTyxHQUFPLEVDTDlEZzFJLEVBQW9CTyxJQUFPbDVJLElBQzFCQSxFQUFPbTVJLE1BQVEsR0FDVm41SSxFQUFPZ08sV0FBVWhPLEVBQU9nTyxTQUFXLElBQ2pDaE8sU0NIUixJQUFJbzVJLEVBQ0FULEVBQW9CNXVHLEVBQUVzdkcsZ0JBQWVELEVBQVlULEVBQW9CNXVHLEVBQUU0a0MsU0FBVyxJQUN0RixJQUFJMWtDLEVBQVcwdUcsRUFBb0I1dUcsRUFBRUUsU0FDckMsSUFBS212RyxHQUFhbnZHLElBQ2JBLEVBQVNxdkcsZ0JBQ1pGLEVBQVludkcsRUFBU3F2RyxjQUFjM3ZDLE1BQy9CeXZDLEdBQVcsQ0FDZixJQUFJRyxFQUFVdHZHLEVBQVNqVixxQkFBcUIsVUFDNUMsR0FBR3VrSCxFQUFRNzRJLE9BRVYsSUFEQSxJQUFJc0UsRUFBSXUwSSxFQUFRNzRJLE9BQVMsRUFDbEJzRSxHQUFLLEtBQU9vMEksSUFBYyxhQUFhdHJJLEtBQUtzckksS0FBYUEsRUFBWUcsRUFBUXYwSSxLQUFLMmtHLEdBRTNGLENBSUQsSUFBS3l2QyxFQUFXLE1BQU0sSUFBSTVwSSxNQUFNLHlEQUNoQzRwSSxFQUFZQSxFQUFVOWxJLFFBQVEsT0FBUSxJQUFJQSxRQUFRLFFBQVMsSUFBSUEsUUFBUSxZQUFhLEtBQ3BGcWxJLEVBQW9CenpJLEVBQUlrMEksTUNsQnhCVCxFQUFvQmEsUUFBSy96SSxxTUNXckJ3QyxFQUFVLENBQUMsRUNQZixTQUFTd3hJLEVBQWdCM3pHLEdBQXdCLElBQXJCcitCLEVBQUlxK0IsRUFBSnIrQixLQUFNOUQsRUFBS21pQyxFQUFMbmlDLE1BQU84TSxFQUFJcTFCLEVBQUpyMUIsS0FDdkMsT0FBSUEsRUFDS2lwSSxFQUFBQSxjQUFBLE1BQUkseUJBQXdCanlJLEVBQU11dEUsd0JBQXlCdmtFLElBRTdEaXBJLEVBQUFBLGNBQUEsTUFBSSx5QkFBd0JqeUksR0FBTzlELEVBQzVDLENESUFzRSxFQUFRMndHLGtCQUFvQixJQUM1QjN3RyxFQUFRdXdHLGNBQWdCLElBQ3hCdndHLEVBQVE0TixPQUFTLFNBQWMsS0FBTSxRQUNyQzVOLEVBQVE0dkcsT0FBUyxJQUNqQjV2RyxFQUFRMHdHLG1CQUFxQixJQUVoQixJQUFJLElBQVMxd0csR0FLSixLQUFXLElBQVEweEksUUFBUyxJQUFRQSxPQ2IxREYsRUFBaUJHLFVBQVksQ0FDM0JueUksS0FBTWtvRSxJQUFBQSxPQUFpQlosV0FDdkJwckUsTUFBT2dzRSxJQUFBQSxPQUNQbC9ELEtBQU1rL0QsSUFBQUEsTUFBZ0IsQ0FDcEI0aUIsT0FBUTVpQixJQUFBQSxVQUlaOHBFLEVBQWlCeDRDLGFBQWUsQ0FDOUJ4NUYsS0FBTSxXQUdSLFVDcEJPLElBQU1veUksRUFBd0JscUUsSUFBQUEsTUFBZ0IsQ0FDbkRqdkQsR0FBSWl2RCxJQUFBQSxPQUFpQlosV0FDckJ0K0QsS0FBTWsvRCxJQUFBQSxNQUFnQixDQUFFNGlCLE9BQVE1aUIsSUFBQUEsU0FDaENsb0UsS0FBTWtvRSxJQUFBQSxPQUFpQlosV0FDdkJwckUsTUFBT2dzRSxJQUFBQSxTQ0FULFNBQVNtcUUsRUFBYWgwRyxHQUFvRCxJQUFBaTBHLEVBQUFqMEcsRUFBakRrMEcsa0JBQUFBLE9BQWlCLElBQUFELEVBQUcsR0FBRUEsRUFBQUUsRUFBQW4wRyxFQUFFbzBHLGNBQUFBLE9BQWEsSUFBQUQsR0FBUUEsRUFNcEUsT0FDRVAsRUFBQUEsY0FBQUEsRUFBQUEsU0FBQSxLQUNFQSxFQUFBQSxjQUFBLFdBQ0VBLEVBQUFBLGNBQUEsT0FBS3ZvSSxVQUFVLFlBQVcsdUJBRTNCK29JLEdBQ0NSLEVBQUFBLGNBQUEsT0FBS3ZvSSxVQUFVLGlCQUNidW9JLEVBQUFBLGNBQUEsVUFDRTNnRSxNQUFPLENBQ0xvaEUsTUFBTyxRQUNQQyxPQUFRLE9BQ1JDLGdCQUFpQixTQUVuQixhQUFXLFFBQ1h2ekMsUUFsQlYsV0FDRW40RCxRQUFReXZDLElBQUksZ0NBQ2QsR0FpQlMsS0FHRHM3RCxFQUFBQSxjQUFBLFNBQUcscUNBQ0hBLEVBQUFBLGNBQUEsVUFDZ0MsSUFBN0JNLEVBQWtCdDVJLE9BQ2pCZzVJLEVBQUFBLGNBQUNELEVBQWdCLENBQUM5MUksTUFBTSxnQ0FFeEJxMkksRUFBa0JqdUksS0FBSSxTQUFDdXVJLEdBQVksT0FDakNaLEVBQUFBLGNBQUNELEVBQWdCLENBQ2Yvb0ksSUFBSzRwSSxFQUFhNTVILEdBQ2xCalosS0FBTTZ5SSxFQUFhN3lJLEtBQ25COUQsTUFBTzIySSxFQUFhMzJJLE1BQ3BCOE0sS0FBTTZwSSxFQUFhN3BJLE1BQ25CLE1BUWxCLENBRUFxcEksRUFBY0YsVUFBWSxDQUN4Qk0sY0FBZXZxRSxJQUFBQSxLQUNmcXFFLG1CQUFtQnpxRSxFQUFBQSxFQUFBQSxPQUFNLENBQ3ZCSSxJQUFBQSxRQUFrQkEsSUFBQUEsTUFBZ0JrcUUsSUFDbENscUUsSUFBQUEsUUFBa0JrcUUsTUFJdEJDLEVBQWM3NEMsYUFBZSxDQUMzQmk1QyxlQUFlLEVBQ2ZGLGtCQUFtQixJQUdyQix3QkN0REksRUFBVSxDQUFDLEVBRWYsRUFBUXBoQyxrQkFBb0IsSUFDNUIsRUFBUUosY0FBZ0IsSUFDeEIsRUFBUTNpRyxPQUFTLFNBQWMsS0FBTSxRQUNyQyxFQUFRZ2lHLE9BQVMsSUFDakIsRUFBUWMsbUJBQXFCLElBRWhCLElBQUksSUFBUyxHQUtKLEtBQVcsSUFBUWdoQyxRQUFTLElBQVFBLE9BQW5ELE1DeEJQLEVBQWUsSUFBMEIsdUNDYXpDLEVBVEEsV0FDRSxPQUNFRCxFQUFBQSxjQUFBLFVBQVF2b0ksVUFBVSxjQUNoQnVvSSxFQUFBQSxjQUFBLE9BQUsvdkMsSUFBSzR3QyxFQUFNcHBJLFVBQVUsV0FBV3FwSSxJQUFJLFNBQ3pDZCxFQUFBQSxjQUFBLE1BQUl2b0ksVUFBVSxVQUFTLG9CQUc3QixnQkNBSSxFQUFVLENBQUMsRUFFZixFQUFReW5HLGtCQUFvQixJQUM1QixFQUFRSixjQUFnQixJQUN4QixFQUFRM2lHLE9BQVMsU0FBYyxLQUFNLFFBQ3JDLEVBQVFnaUcsT0FBUyxJQUNqQixFQUFRYyxtQkFBcUIsSUFFaEIsSUFBSSxJQUFTLEdBS0osS0FBVyxJQUFRZ2hDLFFBQVMsSUFBUUEsT0NZMUQsUUFqQ0EsV0FDRSxPQUNFRCxFQUFBQSxjQUFBQSxFQUFBQSxTQUFBLEtBQ0VBLEVBQUFBLGNBQUEsUUFBTXZvSSxVQUFVLFlBQ2R1b0ksRUFBQUEsY0FBQSxTQUFHLHNDQUNIQSxFQUFBQSxjQUFBLFdBQ0VBLEVBQUFBLGNBQUEsU0FDRWUsUUFBUSxRQUNSM3pDLFFBQVMsa0JBQU03OEQsU0FBU3pTLGVBQWUsU0FBU2kzRCxPQUFPLEdBQ3hELFVBR0RpckQsRUFBQUEsY0FBQSxTQUFPanlJLEtBQUssUUFBUWlaLEdBQUcsUUFBUTlkLEtBQUssUUFBUTgzSSxhQUFhLE9BRXpEaEIsRUFBQUEsY0FBQSxTQUNFZSxRQUFRLFdBQ1IzekMsUUFBUyxrQkFBTTc4RCxTQUFTelMsZUFBZSxZQUFZaTNELE9BQU8sR0FDM0QsYUFHRGlyRCxFQUFBQSxjQUFBLFNBQ0VqeUksS0FBSyxXQUNMaVosR0FBRyxXQUNIOWQsS0FBSyxXQUNMODNJLGFBQWEsUUFFZmhCLEVBQUFBLGNBQUEsY0FBUSxRQUtsQixnQkN2QkksRUFBVSxDQUFDLEVDSlIsU0FBU2lCLEVBQWN4N0UsR0FDNUIsT0FBSUEsRUFDSyxtQkFFQSxpQ0FFWCxDREFBLEVBQVF5NUMsa0JBQW9CLElBQzVCLEVBQVFKLGNBQWdCLElBQ3hCLEVBQVEzaUcsT0FBUyxTQUFjLEtBQU0sUUFDckMsRUFBUWdpRyxPQUFTLElBQ2pCLEVBQVFjLG1CQUFxQixJQUVoQixJQUFJLElBQVMsR0FLSixLQUFXLElBQVFnaEMsUUFBUyxJQUFRQSxPRVQxRCxRQVhBLFdBQ0UsT0FDRUQsRUFBQUEsY0FBQSxVQUFRdm9JLFVBQVUsY0FDaEJ1b0ksRUFBQUEsY0FBQSxTQUFJaUIsR0FBYyxJQUNsQmpCLEVBQUFBLGNBQUEsU0FBRyxjREpBLElBQUlua0gsTUFBT3FsSCxjQ0thLE1BQUlELEdBQWMsSUFJbkQsRUNWQSxTQUFTRSxFQUFhLzBHLEdBQXFELElBQWxEZzFHLEVBQVFoMUcsRUFBUmcxRyxTQUFVQyxFQUFhajFHLEVBQWJpMUcsY0FBYUMsRUFBQWwxRyxFQUFFbTFHLGVBQUFBLE9BQWMsSUFBQUQsRUFBRyxLQUFJQSxFQUNyRSxPQUFJRixFQUNxQixPQUFuQkcsRUFFQXZCLEVBQUFBLGNBQUEsVUFDRUEsRUFBQUEsY0FBQSxNQUFJd0IsUUFBUSxLQUFLSCxJQUtuQnJCLEVBQUFBLGNBQUEsVUFDRUEsRUFBQUEsY0FBQSxVQUFLcUIsR0FDTHJCLEVBQUFBLGNBQUEsVUFBS3VCLElBTVR2QixFQUFBQSxjQUFBLFVBQ0VBLEVBQUFBLGNBQUEsVUFBS3FCLEdBQ0xyQixFQUFBQSxjQUFBLFVBQUt1QixHQUliLENBRUFKLEVBQWNqQixVQUFZLENBQ3hCa0IsU0FBVW5yRSxJQUFBQSxLQUNWb3JFLGNBQWVwckUsSUFBQUEsT0FBaUJaLFdBQ2hDa3NFLGVBQWdCdHJFLElBQUFBLFVBQW9CLENBQUNBLElBQUFBLE9BQWtCQSxJQUFBQSxVQUd6RGtyRSxFQUFjNTVDLGFBQWUsQ0FDM0I2NUMsVUFBVSxFQUNWRyxlQUFnQixNQUdsQix1QkM3QkksRUFBVSxDQUFDLEVBRWYsRUFBUXJpQyxrQkFBb0IsSUFDNUIsRUFBUUosY0FBZ0IsSUFDeEIsRUFBUTNpRyxPQUFTLFNBQWMsS0FBTSxRQUNyQyxFQUFRZ2lHLE9BQVMsSUFDakIsRUFBUWMsbUJBQXFCLElBRWhCLElBQUksSUFBUyxHQUtKLEtBQVcsSUFBUWdoQyxRQUFTLElBQVFBLE9DdEJuRCxJQUFNd0IsRUFBY3hyRSxJQUFBQSxNQUFnQixDQUN6Q2p2RCxHQUFJaXZELElBQUFBLE9BQWlCWixXQUNyQm5zRSxLQUFNK3NFLElBQUFBLE9BQWlCWixXQUN2QnFzRSxPQUFRenJFLElBQUFBLE9BQWlCWixhQ0MzQixTQUFTc3NFLEVBQVV2MUcsR0FBdUIsSUFBQXcxRyxFQUFBeDFHLEVBQXBCeTFHLFlBQUFBLE9BQVcsSUFBQUQsRUFBRyxHQUFFQSxFQUNwQyxPQUNFNUIsRUFBQUEsY0FBQSxTQUFPaDVILEdBQUcsY0FDUmc1SCxFQUFBQSxjQUFBLGFBQ0VBLEVBQUFBLGNBQUNtQixFQUFhLENBQUNDLFVBQVEsRUFBQ0MsY0FBYyxzQkFDdENyQixFQUFBQSxjQUFDbUIsRUFBYSxDQUNaQyxVQUFRLEVBQ1JDLGNBQWMsY0FDZEUsZUFBZSxZQUduQnZCLEVBQUFBLGNBQUEsYUFDMEIsSUFBdkI2QixFQUFZNzZJLE9BQ1hnNUksRUFBQUEsY0FBQ21CLEVBQWEsQ0FBQ0UsY0FBYyw0QkFFN0JRLEVBQVl4dkksS0FBSSxTQUFDeXZJLEdBQU0sT0FDckI5QixFQUFBQSxjQUFDbUIsRUFBYSxDQUNabnFJLElBQUs4cUksRUFBTzk2SCxHQUNacTZILGNBQWVTLEVBQU81NEksS0FDdEJxNEksZUFBZ0JPLEVBQU9KLFFBQ3ZCLEtBTWQsQ0FFQUMsRUFBV3pCLFVBQVksQ0FDckIyQixZQUFhNXJFLElBQUFBLFFBQWtCQSxJQUFBQSxNQUFnQndyRSxJQUFjcHNFLFlBRy9Ec3NFLEVBQVdwNkMsYUFBZSxDQUN4QnM2QyxZQUFhLElBR2YseThDQ3hDbUMsSUFFN0JFLEVBQVcsU0FBQUMsR0FBQSxTQUFBRCxJQUFBLG1HQUFBLzJHLENBQUEsS0FBQSsyRyxHQUFBRSxFQUFBLEtBQUFGLEVBQUFoN0ksVUFBQSw2UkFBQTh2QyxDQUFBa3JHLEVBQUFDLEtBQUFELEtBQUEsRUFBQS9xSSxJQUFBLFNBQUEvTSxNQUNmLFdBQ0UsSUFBQWk0SSxFQUE0QnY3SSxLQUFLc3ZCLE1BQXpCa3NILEVBQUtELEVBQUxDLE1BQU83dEksRUFBUTR0SSxFQUFSNXRJLFNBRWYsT0FDRTBySSxFQUFBQSxjQUFBLE9BQUt2b0ksVUFBVSxlQUNidW9JLEVBQUFBLGNBQUEsVUFBS21DLEdBQ0o3dEksRUFHUCxtRkFBQyxDQVZjLENBQVMwckksRUFBQUEsV0FhMUIrQixFQUFZN0IsVUFBWSxDQUN0QmlDLE1BQU9sc0UsSUFBQUEsT0FBaUJaLFdBQ3hCL2dFLFNBQVUyaEUsSUFBQUEsTUFHWix3QkNYSSxFQUFVLENBQUMsdWNDTGYsU0FBU21zRSxHQUE0Qm5zSCxHQUNuQyxPQUNFK3BILEVBQUFBLGNBQUEsT0FBS3ZvSSxVQUFVLHlCQUNidW9JLEVBQUFBLGNBQUMrQixFQUFnQjlySCxHQUd2QixDRENBLEVBQVFpcEYsa0JBQW9CLElBQzVCLEVBQVFKLGNBQWdCLElBQ3hCLEVBQVEzaUcsT0FBUyxTQUFjLEtBQU0sUUFDckMsRUFBUWdpRyxPQUFTLElBQ2pCLEVBQVFjLG1CQUFxQixJQUVoQixJQUFJLElBQVMsR0FLSixLQUFXLElBQVFnaEMsUUFBUyxJQUFRQSxPQ1YxRG1DLEdBQTRCbEMscXRCQUFTbUMsQ0FBQSxHQUNoQ04sRUFBWTdCLFdBR2pCLDJCQ1BJLEdBQVUsQ0FBQyx1OUNBRWYsR0FBUWhoQyxrQkFBb0IsSUFDNUIsR0FBUUosY0FBZ0IsSUFDeEIsR0FBUTNpRyxPQUFTLFNBQWMsS0FBTSxRQUNyQyxHQUFRZ2lHLE9BQVMsSUFDakIsR0FBUWMsbUJBQXFCLElBRWhCLElBQUksS0FBUyxJQUtKLE1BQVcsS0FBUWdoQyxRQUFTLEtBQVFBLE9DVG5ELElBQU00QixHQUFjLENBQ3pCLENBQUU3NkgsR0FBSSxFQUFHOWQsS0FBTSxNQUFPdzRJLE9BQVEsSUFDOUIsQ0FBRTE2SCxHQUFJLEVBQUc5ZCxLQUFNLFVBQVd3NEksT0FBUSxJQUNsQyxDQUFFMTZILEdBQUksRUFBRzlkLEtBQU0sUUFBU3c0SSxPQUFRLEtBR3JCcEIsR0FBb0IsQ0FDL0IsQ0FBRXQ1SCxHQUFJLEVBQUdqWixLQUFNLFVBQVc5RCxNQUFPLHdCQUNqQyxDQUFFK2MsR0FBSSxFQUFHalosS0FBTSxTQUFVOUQsTUFBTyx3QkFDaEMsQ0FBRStjLEdBQUksRUFBR2paLEtBQU0sU0FBVWdKLEtBQU0sQ0FBRThoRixPVlIxQiwyRFVXSHlwRCxHQUFHLFNBQUFOLEdBQUEsU0FBQU0sSUFBQSxJQUFBcHNJLHFHQUFBODBCLENBQUEsS0FBQXMzRyxHQUFBLFFBQUEvdEcsRUFBQXh0QyxVQUFBQyxPQUFBd3RDLEVBQUEsSUFBQXJzQyxNQUFBb3NDLEdBQUFFLEVBQUEsRUFBQUEsRUFBQUYsRUFBQUUsSUFBQUQsRUFBQUMsR0FBQTF0QyxVQUFBMHRDLEdBaUJOLFNBakJNditCLEVBQUErckksR0FBQSxLQUFBSyxFQUFBLEdBQUFwMUksT0FBQXNuQyxNQVdVLFNBQUN2QixHQUNaQSxFQUFNczRDLFNBQXlCLE1BQWR0NEMsRUFBTWo4QixNQUN6Qmk4QixFQUFNNDJDLGlCQUNOMDRELE1BQU0sbUJBQ05yc0ksRUFBSytmLE1BQU11c0gsU0FFZixVQWpCTyw2R0FpQk50c0ksQ0FBQSw4UkFBQTJnQyxDQUFBeXJHLEVBQUFOLEtBQUFNLEtBQUEsRUFBQXRySSxJQUFBLG9CQUFBL00sTUFoQkQsV0FDRXNtQyxTQUFTbXhDLGlCQUFpQixVQUFXLzZFLEtBQUs4N0ksZ0JBQzFDeHRHLFFBQVF5dkMsSUFBSSxzQkFDZCxHQUFDLENBQUExdEUsSUFBQSx1QkFBQS9NLE1BRUQsV0FDRXNtQyxTQUFTb3hDLG9CQUFvQixVQUFXaDdFLEtBQUs4N0ksZ0JBQzdDeHRHLFFBQVF5dkMsSUFBSSxhQUNkLEdBQUMsQ0FBQTF0RSxJQUFBLFNBQUEvTSxNQVVELFdBQ0UsSUFBUXk0SSxFQUFlLzdJLEtBQUtzdkIsTUFBcEJ5c0gsV0FFUixPQUNFMUMsRUFBQUEsY0FBQUEsRUFBQUEsU0FBQSxLQUNFQSxFQUFBQSxjQUFBLE9BQUt2b0ksVUFBVSxPQUNidW9JLEVBQUFBLGNBQUNJLEVBQWEsQ0FBQ0Usa0JBQW1CQSxLQUNsQ04sRUFBQUEsY0FBQzJDLEVBQU0sTUFDTkQsRUFDQzFDLEVBQUFBLGNBQUNvQyxHQUEyQixDQUFDRCxNQUFNLGVBQ2pDbkMsRUFBQUEsY0FBQzJCLEVBQVUsQ0FBQ0UsWUFBYUEsTUFHM0I3QixFQUFBQSxjQUFDb0MsR0FBMkIsQ0FBQ0QsTUFBTSxzQkFDakNuQyxFQUFBQSxjQUFDNEMsRUFBSyxPQUdWNUMsRUFBQUEsY0FBQytCLEVBQVcsQ0FBQ0ksTUFBTSx3QkFDakJuQyxFQUFBQSxjQUFBLFNBQUcsMkRBRUxBLEVBQUFBLGNBQUMrQixFQUFXLENBQUNJLE1BQU0sUUFDakJuQyxFQUFBQSxjQUFBLFNBQUcsU0FFTEEsRUFBQUEsY0FBQ29DLEdBQTJCLENBQUNELE1BQU0sY0FDakNuQyxFQUFBQSxjQUFBLFNBQUcsbURBRUxBLEVBQUFBLGNBQUM2QyxFQUFNLE9BSWYsb0ZBQUMsQ0FqRE0sQ0FBUzdDLEVBQUFBLFdBb0RsQnNDLEdBQUlwQyxVQUFZLENBQ2R3QyxXQUFZenNFLElBQUFBLEtBQ1p1c0UsT0FBUXZzRSxJQUFBQSxNQUdWcXNFLEdBQUlRLFlBQWMsQ0FDaEJKLFlBQVksRUFDWkYsT0FBUSxXQUFPLEdBR2pCLFlDckZhTyxFQUFBQSxXQUFvQnh5RyxTQUFTelMsZUFBZSxTQUNwRHRhLE9BQ0h3OEgsRUFBQUEsY0FBQ0EsRUFBQUEsV0FBZ0IsS0FDZkEsRUFBQUEsY0FBQ3NDLEdBQUcsQ0FBQ0ksWUFBWSIsInNvdXJjZXMiOlsid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9hcnJheS5wcm90b3R5cGUuZmlsdGVyL2ltcGxlbWVudGF0aW9uLmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9hcnJheS5wcm90b3R5cGUuZmlsdGVyL2luZGV4LmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9hcnJheS5wcm90b3R5cGUuZmlsdGVyL3BvbHlmaWxsLmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9hcnJheS5wcm90b3R5cGUuZmlsdGVyL3NoaW0uanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL2FycmF5LnByb3RvdHlwZS5mbGF0L2ltcGxlbWVudGF0aW9uLmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9hcnJheS5wcm90b3R5cGUuZmxhdC9pbmRleC5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvYXJyYXkucHJvdG90eXBlLmZsYXQvcG9seWZpbGwuanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL2FycmF5LnByb3RvdHlwZS5mbGF0L3NoaW0uanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL2Jvb2xiYXNlL2luZGV4LmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9jYWxsLWJpbmQvY2FsbEJvdW5kLmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9jYWxsLWJpbmQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL2NoZWVyaW8tc2VsZWN0L2xpYi9oZWxwZXJzLmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9jaGVlcmlvLXNlbGVjdC9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL2NoZWVyaW8tc2VsZWN0L2xpYi9wb3NpdGlvbmFscy5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvY2hlZXJpby9saWIvYXBpL2F0dHJpYnV0ZXMuanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL2NoZWVyaW8vbGliL2FwaS9jc3MuanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL2NoZWVyaW8vbGliL2FwaS9mb3Jtcy5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvY2hlZXJpby9saWIvYXBpL21hbmlwdWxhdGlvbi5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvY2hlZXJpby9saWIvYXBpL3RyYXZlcnNpbmcuanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL2NoZWVyaW8vbGliL2NoZWVyaW8uanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL2NoZWVyaW8vbGliL2luZGV4LmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9jaGVlcmlvL2xpYi9sb2FkLmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9jaGVlcmlvL2xpYi9vcHRpb25zLmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9jaGVlcmlvL2xpYi9wYXJzZS5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvY2hlZXJpby9saWIvcGFyc2Vycy9wYXJzZTUtYWRhcHRlci5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvY2hlZXJpby9saWIvc3RhdGljLmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9jaGVlcmlvL2xpYi90eXBlcy5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvY2hlZXJpby9saWIvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vc3JjL0FwcC9BcHAuY3NzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL3NyYy9Cb2R5U2VjdGlvbi9Cb2R5U2VjdGlvbldpdGhNYXJnaW5Cb3R0b20uY3NzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL3NyYy9Db3Vyc2VMaXN0L0NvdXJzZUxpc3QuY3NzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL3NyYy9Gb290ZXIvRm9vdGVyLmNzcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9zcmMvSGVhZGVyL0hlYWRlci5jc3MiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vc3JjL0xvZ2luL0xvZ2luLmNzcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9zcmMvTm90aWZpY2F0aW9ucy9Ob3RpZmljYXRpb25zLmNzcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9jc3Mtc2VsZWN0L2xpYi9hdHRyaWJ1dGVzLmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9jc3Mtc2VsZWN0L2xpYi9jb21waWxlLmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9jc3Mtc2VsZWN0L2xpYi9nZW5lcmFsLmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9jc3Mtc2VsZWN0L2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvY3NzLXNlbGVjdC9saWIvcHNldWRvLXNlbGVjdG9ycy9hbGlhc2VzLmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9jc3Mtc2VsZWN0L2xpYi9wc2V1ZG8tc2VsZWN0b3JzL2ZpbHRlcnMuanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL2Nzcy1zZWxlY3QvbGliL3BzZXVkby1zZWxlY3RvcnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL2Nzcy1zZWxlY3QvbGliL3BzZXVkby1zZWxlY3RvcnMvcHNldWRvcy5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvY3NzLXNlbGVjdC9saWIvcHNldWRvLXNlbGVjdG9ycy9zdWJzZWxlY3RzLmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9jc3Mtc2VsZWN0L2xpYi9zb3J0LmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9jc3Mtd2hhdC9saWIvZXMvdHlwZXMuanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL2Nzcy13aGF0L2xpYi9lcy9wYXJzZS5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvY3NzLXdoYXQvbGliL2VzL3N0cmluZ2lmeS5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvZGVmaW5lLWRhdGEtcHJvcGVydHkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL2RlZmluZS1wcm9wZXJ0aWVzL2luZGV4LmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9kb20tc2VyaWFsaXplci9saWIvZm9yZWlnbk5hbWVzLmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9kb20tc2VyaWFsaXplci9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL2RvbWVsZW1lbnR0eXBlL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvZG9taGFuZGxlci9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL2RvbWhhbmRsZXIvbGliL25vZGUuanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL2RvbXV0aWxzL2xpYi9mZWVkcy5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvZG9tdXRpbHMvbGliL2hlbHBlcnMuanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL2RvbXV0aWxzL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvZG9tdXRpbHMvbGliL2xlZ2FjeS5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvZG9tdXRpbHMvbGliL21hbmlwdWxhdGlvbi5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvZG9tdXRpbHMvbGliL3F1ZXJ5aW5nLmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9kb211dGlscy9saWIvc3RyaW5naWZ5LmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9kb211dGlscy9saWIvdHJhdmVyc2FsLmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9lbnRpdGllcy9saWIvZGVjb2RlLmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9lbnRpdGllcy9saWIvZGVjb2RlX2NvZGVwb2ludC5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvZW50aXRpZXMvbGliL2VuY29kZS5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvZW50aXRpZXMvbGliL2VzY2FwZS5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvZW50aXRpZXMvbGliL2dlbmVyYXRlZC9kZWNvZGUtZGF0YS1odG1sLmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9lbnRpdGllcy9saWIvZ2VuZXJhdGVkL2RlY29kZS1kYXRhLXhtbC5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvZW50aXRpZXMvbGliL2dlbmVyYXRlZC9lbmNvZGUtaHRtbC5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvZW50aXRpZXMvbGliL2luZGV4LmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9lbnp5bWUtc2hhbGxvdy1lcXVhbC9idWlsZC9pbmRleC5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvZW56eW1lL2J1aWxkL0RlYnVnLmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9lbnp5bWUvYnVpbGQvRW56eW1lQWRhcHRlci5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvZW56eW1lL2J1aWxkL1JTVFRyYXZlcnNhbC5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvZW56eW1lL2J1aWxkL1JlYWN0V3JhcHBlci5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvZW56eW1lL2J1aWxkL1NoYWxsb3dXcmFwcGVyLmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9lbnp5bWUvYnVpbGQvVXRpbHMuanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL2VuenltZS9idWlsZC9jb25maWd1cmF0aW9uLmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9lbnp5bWUvYnVpbGQvZ2V0QWRhcHRlci5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvZW56eW1lL2J1aWxkL2luZGV4LmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9lbnp5bWUvYnVpbGQvbW91bnQuanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL2VuenltZS9idWlsZC9yZW5kZXIuanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL2VuenltZS9idWlsZC9zZWxlY3RvcnMuanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL2VuenltZS9idWlsZC9zaGFsbG93LmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9lbnp5bWUvYnVpbGQvdmFsaWRhdGVBZGFwdGVyLmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9lcy1hcnJheS1tZXRob2QtYm94ZXMtcHJvcGVybHkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL2VzLWRlZmluZS1wcm9wZXJ0eS9pbmRleC5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvZXMtZXJyb3JzL2V2YWwuanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL2VzLWVycm9ycy9pbmRleC5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvZXMtZXJyb3JzL3JhbmdlLmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9lcy1lcnJvcnMvcmVmLmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9lcy1lcnJvcnMvc3ludGF4LmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9lcy1lcnJvcnMvdHlwZS5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvZXMtZXJyb3JzL3VyaS5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvZXMtb2JqZWN0LWF0b21zL1JlcXVpcmVPYmplY3RDb2VyY2libGUuanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL2VzLW9iamVjdC1hdG9tcy9Ub09iamVjdC5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvZXMtb2JqZWN0LWF0b21zL2luZGV4LmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9lcy1zaGltLXVuc2NvcGFibGVzL2luZGV4LmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9lcy10by1wcmltaXRpdmUvZXMyMDE1LmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9lcy10by1wcmltaXRpdmUvaGVscGVycy9pc1ByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvZnVuY3Rpb24tYmluZC9pbXBsZW1lbnRhdGlvbi5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvZnVuY3Rpb24tYmluZC9pbmRleC5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvZnVuY3Rpb24ucHJvdG90eXBlLm5hbWUvaW1wbGVtZW50YXRpb24uanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL2Z1bmN0aW9uLnByb3RvdHlwZS5uYW1lL2luZGV4LmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9mdW5jdGlvbi5wcm90b3R5cGUubmFtZS9wb2x5ZmlsbC5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvZnVuY3Rpb24ucHJvdG90eXBlLm5hbWUvc2hpbS5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvZnVuY3Rpb25zLWhhdmUtbmFtZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL2dldC1pbnRyaW5zaWMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL2dvcGQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL2hhcy1wcm9wZXJ0eS1kZXNjcmlwdG9ycy9pbmRleC5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvaGFzLXByb3RvL2luZGV4LmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9oYXMtc3ltYm9scy9pbmRleC5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvaGFzLXN5bWJvbHMvc2hhbXMuanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL2hhcy10b3N0cmluZ3RhZy9zaGFtcy5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvaGFzL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvaGFzb3duL2luZGV4LmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9odG1sLWVsZW1lbnQtbWFwL2J5Q29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL2h0bWwtZWxlbWVudC1tYXAvZ2V0RGF0YS5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvaHRtbHBhcnNlcjIvbGliL1BhcnNlci5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvaHRtbHBhcnNlcjIvbGliL1Rva2VuaXplci5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvaHRtbHBhcnNlcjIvbGliL2luZGV4LmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9pcy1ib29sZWFuLW9iamVjdC9pbmRleC5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvaXMtY2FsbGFibGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL2lzLWRhdGUtb2JqZWN0L2luZGV4LmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9pcy1udW1iZXItb2JqZWN0L2luZGV4LmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9pcy1yZWdleC9pbmRleC5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvaXMtc3RyaW5nL2luZGV4LmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9pcy1zdWJzZXQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL2lzLXN5bWJvbC9pbmRleC5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvbG9kYXNoLmVzY2FwZS9pbmRleC5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvbG9kYXNoLmZsYXR0ZW5kZWVwL2luZGV4LmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9sb2Rhc2guaXNlcXVhbC9pbmRleC5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvbmVhcmxleS9saWIvbmVhcmxleS5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvbnRoLWNoZWNrL2xpYi9jb21waWxlLmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9udGgtY2hlY2svbGliL2luZGV4LmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9udGgtY2hlY2svbGliL3BhcnNlLmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9vYmplY3QtaW5zcGVjdC9pbmRleC5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvb2JqZWN0LWlzL2ltcGxlbWVudGF0aW9uLmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9vYmplY3QtaXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL29iamVjdC1pcy9wb2x5ZmlsbC5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvb2JqZWN0LWlzL3NoaW0uanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL29iamVjdC1rZXlzL2ltcGxlbWVudGF0aW9uLmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9vYmplY3Qta2V5cy9pbmRleC5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvb2JqZWN0LWtleXMvaXNBcmd1bWVudHMuanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL29iamVjdC5hc3NpZ24vaW1wbGVtZW50YXRpb24uanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL29iamVjdC5hc3NpZ24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL29iamVjdC5hc3NpZ24vcG9seWZpbGwuanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL29iamVjdC5hc3NpZ24vc2hpbS5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvb2JqZWN0LmVudHJpZXMvaW1wbGVtZW50YXRpb24uanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL29iamVjdC5lbnRyaWVzL2luZGV4LmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9vYmplY3QuZW50cmllcy9wb2x5ZmlsbC5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvb2JqZWN0LmVudHJpZXMvc2hpbS5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvb2JqZWN0LnZhbHVlcy9pbXBsZW1lbnRhdGlvbi5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvb2JqZWN0LnZhbHVlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvb2JqZWN0LnZhbHVlcy9wb2x5ZmlsbC5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvb2JqZWN0LnZhbHVlcy9zaGltLmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcy5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQuanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2xpZW50LmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvcmVhY3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL3JzdC1zZWxlY3Rvci1wYXJzZXIvZGlzdC9jcmVhdGVHZW5lcmF0b3IuanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL3JzdC1zZWxlY3Rvci1wYXJzZXIvZGlzdC9jcmVhdGVQYXJzZXIuanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL3JzdC1zZWxlY3Rvci1wYXJzZXIvZGlzdC9ncmFtbWFyLmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9yc3Qtc2VsZWN0b3ItcGFyc2VyL2Rpc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL3NhZmUtcmVnZXgtdGVzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9pbmRleC5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvc2V0LWZ1bmN0aW9uLWxlbmd0aC9pbmRleC5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvc3RyaW5nLnByb3RvdHlwZS50cmltL2ltcGxlbWVudGF0aW9uLmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9zdHJpbmcucHJvdG90eXBlLnRyaW0vaW5kZXguanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL3N0cmluZy5wcm90b3R5cGUudHJpbS9wb2x5ZmlsbC5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvc3RyaW5nLnByb3RvdHlwZS50cmltL3NoaW0uanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAyMy9BcnJheUNyZWF0ZS5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAyMy9BcnJheVNwZWNpZXNDcmVhdGUuanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMjMvQ2FsbC5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAyMy9DcmVhdGVEYXRhUHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMjMvQ3JlYXRlRGF0YVByb3BlcnR5T3JUaHJvdy5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAyMy9EZWZpbmVQcm9wZXJ0eU9yVGhyb3cuanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMjMvRmxhdHRlbkludG9BcnJheS5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAyMy9Gcm9tUHJvcGVydHlEZXNjcmlwdG9yLmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC8yMDIzL0dldC5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAyMy9IYXNPd25Qcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAyMy9IYXNQcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAyMy9Jc0FjY2Vzc29yRGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAyMy9Jc0FycmF5LmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC8yMDIzL0lzQ2FsbGFibGUuanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMjMvSXNDb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAyMy9Jc0RhdGFEZXNjcmlwdG9yLmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC8yMDIzL0lzRXh0ZW5zaWJsZS5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAyMy9Jc0dlbmVyaWNEZXNjcmlwdG9yLmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC8yMDIzL0lzUHJvcGVydHlLZXkuanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMjMvTGVuZ3RoT2ZBcnJheUxpa2UuanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMjMvT3JkaW5hcnlEZWZpbmVPd25Qcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAyMy9TYW1lVmFsdWUuanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMjMvU3RyaW5nVG9OdW1iZXIuanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMjMvVG9Cb29sZWFuLmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC8yMDIzL1RvSW50ZWdlck9ySW5maW5pdHkuanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMjMvVG9MZW5ndGguanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMjMvVG9OdW1iZXIuanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMjMvVG9PYmplY3QuanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMjMvVG9QcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMjMvVG9Qcm9wZXJ0eURlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMjMvVG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMjMvVHlwZS5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAyMy9WYWxpZGF0ZUFuZEFwcGx5UHJvcGVydHlEZXNjcmlwdG9yLmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC8yMDIzL2Zsb29yLmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC8yMDIzL3RydW5jYXRlLmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC8yMDI0L0FycmF5Q3JlYXRlLmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC8yMDI0L0FycmF5U3BlY2llc0NyZWF0ZS5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAyNC9DYWxsLmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC8yMDI0L0NyZWF0ZURhdGFQcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAyNC9DcmVhdGVEYXRhUHJvcGVydHlPclRocm93LmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC8yMDI0L0RlZmluZVByb3BlcnR5T3JUaHJvdy5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAyNC9Gcm9tUHJvcGVydHlEZXNjcmlwdG9yLmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC8yMDI0L0dldC5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAyNC9IYXNQcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAyNC9Jc0FjY2Vzc29yRGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAyNC9Jc0FycmF5LmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC8yMDI0L0lzQ2FsbGFibGUuanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMjQvSXNDb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAyNC9Jc0RhdGFEZXNjcmlwdG9yLmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC8yMDI0L0lzRXh0ZW5zaWJsZS5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAyNC9Jc0dlbmVyaWNEZXNjcmlwdG9yLmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC8yMDI0L0lzUHJvcGVydHlLZXkuanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMjQvTGVuZ3RoT2ZBcnJheUxpa2UuanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMjQvT3JkaW5hcnlEZWZpbmVPd25Qcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAyNC9TYW1lVmFsdWUuanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMjQvU3RyaW5nVG9OdW1iZXIuanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMjQvVG9Cb29sZWFuLmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC8yMDI0L1RvSW50ZWdlck9ySW5maW5pdHkuanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMjQvVG9MZW5ndGguanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMjQvVG9OdW1iZXIuanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMjQvVG9QcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMjQvVG9Qcm9wZXJ0eURlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMjQvVG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMjQvVHlwZS5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAyNC9WYWxpZGF0ZUFuZEFwcGx5UHJvcGVydHlEZXNjcmlwdG9yLmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC8yMDI0L2Zsb29yLmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC8yMDI0L3RydW5jYXRlLmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC81L1R5cGUuanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0L0dldEludHJpbnNpYy5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvaGVscGVycy9EZWZpbmVPd25Qcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvaGVscGVycy9Jc0FycmF5LmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC9oZWxwZXJzL2Zyb21Qcm9wZXJ0eURlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0L2hlbHBlcnMvaXNGaW5pdGUuanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0L2hlbHBlcnMvaXNGdWxseVBvcHVsYXRlZFByb3BlcnR5RGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvaGVscGVycy9pc0ludGVnZXIuanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0L2hlbHBlcnMvaXNOYU4uanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0L2hlbHBlcnMvaXNQcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0L2hlbHBlcnMvbWF4U2FmZUludGVnZXIuanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0L2hlbHBlcnMvcmVjb3Jkcy9wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9wYXJzZTUtaHRtbHBhcnNlcjItdHJlZS1hZGFwdGVyL2Rpc3QvY2pzL2luZGV4LmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9wYXJzZTUvZGlzdC9janMvY29tbW9uL2RvY3R5cGUuanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL3BhcnNlNS9kaXN0L2Nqcy9jb21tb24vZXJyb3ItY29kZXMuanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL3BhcnNlNS9kaXN0L2Nqcy9jb21tb24vZm9yZWlnbi1jb250ZW50LmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9wYXJzZTUvZGlzdC9janMvY29tbW9uL2h0bWwuanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL3BhcnNlNS9kaXN0L2Nqcy9jb21tb24vdG9rZW4uanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL3BhcnNlNS9kaXN0L2Nqcy9jb21tb24vdW5pY29kZS5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvcGFyc2U1L2Rpc3QvY2pzL2luZGV4LmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9wYXJzZTUvZGlzdC9janMvcGFyc2VyL2Zvcm1hdHRpbmctZWxlbWVudC1saXN0LmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9wYXJzZTUvZGlzdC9janMvcGFyc2VyL2luZGV4LmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9wYXJzZTUvZGlzdC9janMvcGFyc2VyL29wZW4tZWxlbWVudC1zdGFjay5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvcGFyc2U1L2Rpc3QvY2pzL3NlcmlhbGl6ZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL3BhcnNlNS9kaXN0L2Nqcy90b2tlbml6ZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL3BhcnNlNS9kaXN0L2Nqcy90b2tlbml6ZXIvcHJlcHJvY2Vzc29yLmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9wYXJzZTUvZGlzdC9janMvdHJlZS1hZGFwdGVycy9kZWZhdWx0LmpzIiwid2VicGFjazovL2Rhc2hib2FyZC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvd2VicGFjay9ydW50aW1lL25vZGUgbW9kdWxlIGRlY29yYXRvciIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvd2VicGFjay9ydW50aW1lL3B1YmxpY1BhdGgiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkL3dlYnBhY2svcnVudGltZS9ub25jZSIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9zcmMvTm90aWZpY2F0aW9ucy9Ob3RpZmljYXRpb25zLmNzcz9iMTFmIiwid2VicGFjazovL2Rhc2hib2FyZC8uL3NyYy9Ob3RpZmljYXRpb25zL05vdGlmaWNhdGlvbkl0ZW0uanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vc3JjL05vdGlmaWNhdGlvbnMvTm90aWZpY2F0aW9uSXRlbVNoYXBlLmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL3NyYy9Ob3RpZmljYXRpb25zL05vdGlmaWNhdGlvbnMuanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vc3JjL0hlYWRlci9IZWFkZXIuY3NzPzI5NzIiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vc3JjL2Fzc2V0cy9ob2xiZXJ0b25fbG9nby5qcGciLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vc3JjL0hlYWRlci9IZWFkZXIuanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vc3JjL0xvZ2luL0xvZ2luLmNzcz9jMGYxIiwid2VicGFjazovL2Rhc2hib2FyZC8uL3NyYy9Mb2dpbi9Mb2dpbi5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9zcmMvRm9vdGVyL0Zvb3Rlci5jc3M/MWJhNiIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9zcmMvdXRpbHMvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vc3JjL0Zvb3Rlci9Gb290ZXIuanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vc3JjL0NvdXJzZUxpc3QvQ291cnNlTGlzdFJvdy5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9zcmMvQ291cnNlTGlzdC9Db3Vyc2VMaXN0LmNzcz8xMjA1Iiwid2VicGFjazovL2Rhc2hib2FyZC8uL3NyYy9Db3Vyc2VMaXN0L0NvdXJzZVNoYXBlLmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL3NyYy9Db3Vyc2VMaXN0L0NvdXJzZUxpc3QuanMiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vc3JjL0JvZHlTZWN0aW9uL0JvZHlTZWN0aW9uLmpzIiwid2VicGFjazovL2Rhc2hib2FyZC8uL3NyYy9Cb2R5U2VjdGlvbi9Cb2R5U2VjdGlvbldpdGhNYXJnaW5Cb3R0b20uY3NzPzFhNmEiLCJ3ZWJwYWNrOi8vZGFzaGJvYXJkLy4vc3JjL0JvZHlTZWN0aW9uL0JvZHlTZWN0aW9uV2l0aE1hcmdpbkJvdHRvbS5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9zcmMvQXBwL0FwcC5jc3M/ZTI2YSIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9zcmMvQXBwL0FwcC5qcyIsIndlYnBhY2s6Ly9kYXNoYm9hcmQvLi9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQXJyYXlTcGVjaWVzQ3JlYXRlID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAyNC9BcnJheVNwZWNpZXNDcmVhdGUnKTtcbnZhciBDYWxsID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAyNC9DYWxsJyk7XG52YXIgQ3JlYXRlRGF0YVByb3BlcnR5T3JUaHJvdyA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0LzIwMjQvQ3JlYXRlRGF0YVByb3BlcnR5T3JUaHJvdycpO1xudmFyIEdldCA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0LzIwMjQvR2V0Jyk7XG52YXIgSGFzUHJvcGVydHkgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC8yMDI0L0hhc1Byb3BlcnR5Jyk7XG52YXIgSXNDYWxsYWJsZSA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0LzIwMjQvSXNDYWxsYWJsZScpO1xudmFyIExlbmd0aE9mQXJyYXlMaWtlID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAyNC9MZW5ndGhPZkFycmF5TGlrZScpO1xudmFyIFRvQm9vbGVhbiA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0LzIwMjQvVG9Cb29sZWFuJyk7XG52YXIgVG9PYmplY3QgPSByZXF1aXJlKCdlcy1vYmplY3QtYXRvbXMvVG9PYmplY3QnKTtcbnZhciBUb1N0cmluZyA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0LzIwMjQvVG9TdHJpbmcnKTtcblxudmFyIGNhbGxCb3VuZCA9IHJlcXVpcmUoJ2NhbGwtYmluZC9jYWxsQm91bmQnKTtcbnZhciBpc1N0cmluZyA9IHJlcXVpcmUoJ2lzLXN0cmluZycpO1xudmFyICRPYmplY3QgPSByZXF1aXJlKCdlcy1vYmplY3QtYXRvbXMnKTtcblxuLy8gQ2hlY2sgZmFpbHVyZSBvZiBieS1pbmRleCBhY2Nlc3Mgb2Ygc3RyaW5nIGNoYXJhY3RlcnMgKElFIDwgOSkgYW5kIGZhaWx1cmUgb2YgYDAgaW4gYm94ZWRTdHJpbmdgIChSaGlubylcbnZhciBib3hlZFN0cmluZyA9ICRPYmplY3QoJ2EnKTtcbnZhciBzcGxpdFN0cmluZyA9IGJveGVkU3RyaW5nWzBdICE9PSAnYScgfHwgISgwIGluIGJveGVkU3RyaW5nKTtcblxudmFyIHN0clNwbGl0ID0gY2FsbEJvdW5kKCdTdHJpbmcucHJvdG90eXBlLnNwbGl0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZmlsdGVyKGNhbGxiYWNrZm4pIHtcblx0dmFyIE8gPSBUb09iamVjdCh0aGlzKTtcblx0dmFyIHNlbGYgPSBzcGxpdFN0cmluZyAmJiBpc1N0cmluZyhPKSA/IHN0clNwbGl0KE8sICcnKSA6IE87XG5cdHZhciBsZW4gPSBMZW5ndGhPZkFycmF5TGlrZShzZWxmKTtcblxuXHQvLyBJZiBubyBjYWxsYmFjayBmdW5jdGlvbiBvciBpZiBjYWxsYmFjayBpcyBub3QgYSBjYWxsYWJsZSBmdW5jdGlvblxuXHRpZiAoIUlzQ2FsbGFibGUoY2FsbGJhY2tmbikpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdBcnJheS5wcm90b3R5cGUuZmlsdGVyIGNhbGxiYWNrIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuXHR9XG5cblx0dmFyIHRoaXNBcmc7XG5cdGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuXHRcdHRoaXNBcmcgPSBhcmd1bWVudHNbMV07XG5cdH1cblxuXHR2YXIgQSA9IEFycmF5U3BlY2llc0NyZWF0ZShPLCAwKTtcblx0dmFyIGsgPSAwO1xuXHR2YXIgdG8gPSAwO1xuXG5cdHdoaWxlIChrIDwgbGVuKSB7XG5cdFx0dmFyIFBrID0gVG9TdHJpbmcoayk7XG5cdFx0dmFyIGtQcmVzZW50ID0gSGFzUHJvcGVydHkoTywgUGspO1xuXHRcdGlmIChrUHJlc2VudCkge1xuXHRcdFx0dmFyIGtWYWx1ZSA9IEdldChPLCBQayk7XG5cdFx0XHR2YXIgc2VsZWN0ZWQgPSBUb0Jvb2xlYW4oQ2FsbChjYWxsYmFja2ZuLCB0aGlzQXJnLCBba1ZhbHVlLCBrLCBPXSkpO1xuXHRcdFx0aWYgKHNlbGVjdGVkKSB7XG5cdFx0XHRcdENyZWF0ZURhdGFQcm9wZXJ0eU9yVGhyb3coQSwgVG9TdHJpbmcodG8pLCBrVmFsdWUpO1xuXHRcdFx0XHR0byArPSAxO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRrICs9IDE7XG5cdH1cblxuXHRyZXR1cm4gQTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBkZWZpbmUgPSByZXF1aXJlKCdkZWZpbmUtcHJvcGVydGllcycpO1xudmFyIFJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCdlcy1vYmplY3QtYXRvbXMvUmVxdWlyZU9iamVjdENvZXJjaWJsZScpO1xudmFyIGNhbGxCaW5kID0gcmVxdWlyZSgnY2FsbC1iaW5kJyk7XG52YXIgY2FsbEJvdW5kID0gcmVxdWlyZSgnY2FsbC1iaW5kL2NhbGxCb3VuZCcpO1xuXG52YXIgaW1wbGVtZW50YXRpb24gPSByZXF1aXJlKCcuL2ltcGxlbWVudGF0aW9uJyk7XG52YXIgZ2V0UG9seWZpbGwgPSByZXF1aXJlKCcuL3BvbHlmaWxsJyk7XG52YXIgcG9seWZpbGwgPSBjYWxsQmluZC5hcHBseShnZXRQb2x5ZmlsbCgpKTtcbnZhciBzaGltID0gcmVxdWlyZSgnLi9zaGltJyk7XG5cbnZhciAkc2xpY2UgPSBjYWxsQm91bmQoJ0FycmF5LnByb3RvdHlwZS5zbGljZScpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbnZhciBib3VuZCA9IGZ1bmN0aW9uIGZpbHRlcihhcnJheSwgY2FsbGJhY2tmbikge1xuXHRSZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFycmF5KTtcblx0cmV0dXJuIHBvbHlmaWxsKGFycmF5LCAkc2xpY2UoYXJndW1lbnRzLCAxKSk7XG59O1xuZGVmaW5lKGJvdW5kLCB7XG5cdGdldFBvbHlmaWxsOiBnZXRQb2x5ZmlsbCxcblx0aW1wbGVtZW50YXRpb246IGltcGxlbWVudGF0aW9uLFxuXHRzaGltOiBzaGltXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBib3VuZDtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGFycmF5TWV0aG9kQm94ZXNQcm9wZXJseSA9IHJlcXVpcmUoJ2VzLWFycmF5LW1ldGhvZC1ib3hlcy1wcm9wZXJseScpO1xuXG52YXIgaW1wbGVtZW50YXRpb24gPSByZXF1aXJlKCcuL2ltcGxlbWVudGF0aW9uJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2V0UG9seWZpbGwoKSB7XG5cdHZhciBtZXRob2QgPSBBcnJheS5wcm90b3R5cGUuZmlsdGVyO1xuXHRyZXR1cm4gYXJyYXlNZXRob2RCb3hlc1Byb3Blcmx5KG1ldGhvZCkgPyBtZXRob2QgOiBpbXBsZW1lbnRhdGlvbjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBkZWZpbmUgPSByZXF1aXJlKCdkZWZpbmUtcHJvcGVydGllcycpO1xudmFyIGdldFBvbHlmaWxsID0gcmVxdWlyZSgnLi9wb2x5ZmlsbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNoaW1BcnJheVByb3RvdHlwZU1hcCgpIHtcblx0dmFyIHBvbHlmaWxsID0gZ2V0UG9seWZpbGwoKTtcblx0ZGVmaW5lKFxuXHRcdEFycmF5LnByb3RvdHlwZSxcblx0XHR7IGZpbHRlcjogcG9seWZpbGwgfSxcblx0XHR7IGZpbHRlcjogZnVuY3Rpb24gKCkgeyByZXR1cm4gQXJyYXkucHJvdG90eXBlLmZpbHRlciAhPT0gcG9seWZpbGw7IH0gfVxuXHQpO1xuXHRyZXR1cm4gcG9seWZpbGw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQXJyYXlTcGVjaWVzQ3JlYXRlID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAyMy9BcnJheVNwZWNpZXNDcmVhdGUnKTtcbnZhciBGbGF0dGVuSW50b0FycmF5ID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAyMy9GbGF0dGVuSW50b0FycmF5Jyk7XG52YXIgR2V0ID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAyMy9HZXQnKTtcbnZhciBUb0ludGVnZXJPckluZmluaXR5ID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAyMy9Ub0ludGVnZXJPckluZmluaXR5Jyk7XG52YXIgVG9MZW5ndGggPSByZXF1aXJlKCdlcy1hYnN0cmFjdC8yMDIzL1RvTGVuZ3RoJyk7XG52YXIgVG9PYmplY3QgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC8yMDIzL1RvT2JqZWN0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZmxhdCgpIHtcblx0dmFyIE8gPSBUb09iamVjdCh0aGlzKTtcblx0dmFyIHNvdXJjZUxlbiA9IFRvTGVuZ3RoKEdldChPLCAnbGVuZ3RoJykpO1xuXG5cdHZhciBkZXB0aE51bSA9IDE7XG5cdGlmIChhcmd1bWVudHMubGVuZ3RoID4gMCAmJiB0eXBlb2YgYXJndW1lbnRzWzBdICE9PSAndW5kZWZpbmVkJykge1xuXHRcdGRlcHRoTnVtID0gVG9JbnRlZ2VyT3JJbmZpbml0eShhcmd1bWVudHNbMF0pO1xuXHR9XG5cblx0dmFyIEEgPSBBcnJheVNwZWNpZXNDcmVhdGUoTywgMCk7XG5cdEZsYXR0ZW5JbnRvQXJyYXkoQSwgTywgc291cmNlTGVuLCAwLCBkZXB0aE51bSk7XG5cdHJldHVybiBBO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGRlZmluZSA9IHJlcXVpcmUoJ2RlZmluZS1wcm9wZXJ0aWVzJyk7XG52YXIgY2FsbEJpbmQgPSByZXF1aXJlKCdjYWxsLWJpbmQnKTtcblxudmFyIGltcGxlbWVudGF0aW9uID0gcmVxdWlyZSgnLi9pbXBsZW1lbnRhdGlvbicpO1xudmFyIGdldFBvbHlmaWxsID0gcmVxdWlyZSgnLi9wb2x5ZmlsbCcpO1xudmFyIHBvbHlmaWxsID0gZ2V0UG9seWZpbGwoKTtcbnZhciBzaGltID0gcmVxdWlyZSgnLi9zaGltJyk7XG5cbnZhciBib3VuZEZsYXQgPSBjYWxsQmluZChwb2x5ZmlsbCk7XG5cbmRlZmluZShib3VuZEZsYXQsIHtcblx0Z2V0UG9seWZpbGw6IGdldFBvbHlmaWxsLFxuXHRpbXBsZW1lbnRhdGlvbjogaW1wbGVtZW50YXRpb24sXG5cdHNoaW06IHNoaW1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGJvdW5kRmxhdDtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGltcGxlbWVudGF0aW9uID0gcmVxdWlyZSgnLi9pbXBsZW1lbnRhdGlvbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdldFBvbHlmaWxsKCkge1xuXHRyZXR1cm4gQXJyYXkucHJvdG90eXBlLmZsYXQgfHwgaW1wbGVtZW50YXRpb247XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZGVmaW5lID0gcmVxdWlyZSgnZGVmaW5lLXByb3BlcnRpZXMnKTtcbnZhciBzaGltVW5zY29wYWJsZXMgPSByZXF1aXJlKCdlcy1zaGltLXVuc2NvcGFibGVzJyk7XG5cbnZhciBnZXRQb2x5ZmlsbCA9IHJlcXVpcmUoJy4vcG9seWZpbGwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzaGltRmxhdCgpIHtcblx0dmFyIHBvbHlmaWxsID0gZ2V0UG9seWZpbGwoKTtcblxuXHRkZWZpbmUoXG5cdFx0QXJyYXkucHJvdG90eXBlLFxuXHRcdHsgZmxhdDogcG9seWZpbGwgfSxcblx0XHR7IGZsYXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5mbGF0ICE9PSBwb2x5ZmlsbDsgfSB9XG5cdCk7XG5cblx0c2hpbVVuc2NvcGFibGVzKCdmbGF0Jyk7XG5cblx0cmV0dXJuIHBvbHlmaWxsO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge1xuXHR0cnVlRnVuYzogZnVuY3Rpb24gdHJ1ZUZ1bmMoKXtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSxcblx0ZmFsc2VGdW5jOiBmdW5jdGlvbiBmYWxzZUZ1bmMoKXtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnZ2V0LWludHJpbnNpYycpO1xuXG52YXIgY2FsbEJpbmQgPSByZXF1aXJlKCcuLycpO1xuXG52YXIgJGluZGV4T2YgPSBjYWxsQmluZChHZXRJbnRyaW5zaWMoJ1N0cmluZy5wcm90b3R5cGUuaW5kZXhPZicpKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjYWxsQm91bmRJbnRyaW5zaWMobmFtZSwgYWxsb3dNaXNzaW5nKSB7XG5cdHZhciBpbnRyaW5zaWMgPSBHZXRJbnRyaW5zaWMobmFtZSwgISFhbGxvd01pc3NpbmcpO1xuXHRpZiAodHlwZW9mIGludHJpbnNpYyA9PT0gJ2Z1bmN0aW9uJyAmJiAkaW5kZXhPZihuYW1lLCAnLnByb3RvdHlwZS4nKSA+IC0xKSB7XG5cdFx0cmV0dXJuIGNhbGxCaW5kKGludHJpbnNpYyk7XG5cdH1cblx0cmV0dXJuIGludHJpbnNpYztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBiaW5kID0gcmVxdWlyZSgnZnVuY3Rpb24tYmluZCcpO1xudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJ2dldC1pbnRyaW5zaWMnKTtcbnZhciBzZXRGdW5jdGlvbkxlbmd0aCA9IHJlcXVpcmUoJ3NldC1mdW5jdGlvbi1sZW5ndGgnKTtcblxudmFyICRUeXBlRXJyb3IgPSByZXF1aXJlKCdlcy1lcnJvcnMvdHlwZScpO1xudmFyICRhcHBseSA9IEdldEludHJpbnNpYygnJUZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseSUnKTtcbnZhciAkY2FsbCA9IEdldEludHJpbnNpYygnJUZ1bmN0aW9uLnByb3RvdHlwZS5jYWxsJScpO1xudmFyICRyZWZsZWN0QXBwbHkgPSBHZXRJbnRyaW5zaWMoJyVSZWZsZWN0LmFwcGx5JScsIHRydWUpIHx8IGJpbmQuY2FsbCgkY2FsbCwgJGFwcGx5KTtcblxudmFyICRkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJ2VzLWRlZmluZS1wcm9wZXJ0eScpO1xudmFyICRtYXggPSBHZXRJbnRyaW5zaWMoJyVNYXRoLm1heCUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjYWxsQmluZChvcmlnaW5hbEZ1bmN0aW9uKSB7XG5cdGlmICh0eXBlb2Ygb3JpZ2luYWxGdW5jdGlvbiAhPT0gJ2Z1bmN0aW9uJykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdhIGZ1bmN0aW9uIGlzIHJlcXVpcmVkJyk7XG5cdH1cblx0dmFyIGZ1bmMgPSAkcmVmbGVjdEFwcGx5KGJpbmQsICRjYWxsLCBhcmd1bWVudHMpO1xuXHRyZXR1cm4gc2V0RnVuY3Rpb25MZW5ndGgoXG5cdFx0ZnVuYyxcblx0XHQxICsgJG1heCgwLCBvcmlnaW5hbEZ1bmN0aW9uLmxlbmd0aCAtIChhcmd1bWVudHMubGVuZ3RoIC0gMSkpLFxuXHRcdHRydWVcblx0KTtcbn07XG5cbnZhciBhcHBseUJpbmQgPSBmdW5jdGlvbiBhcHBseUJpbmQoKSB7XG5cdHJldHVybiAkcmVmbGVjdEFwcGx5KGJpbmQsICRhcHBseSwgYXJndW1lbnRzKTtcbn07XG5cbmlmICgkZGVmaW5lUHJvcGVydHkpIHtcblx0JGRlZmluZVByb3BlcnR5KG1vZHVsZS5leHBvcnRzLCAnYXBwbHknLCB7IHZhbHVlOiBhcHBseUJpbmQgfSk7XG59IGVsc2Uge1xuXHRtb2R1bGUuZXhwb3J0cy5hcHBseSA9IGFwcGx5QmluZDtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5ncm91cFNlbGVjdG9ycyA9IGV4cG9ydHMuZ2V0RG9jdW1lbnRSb290ID0gdm9pZCAwO1xudmFyIHBvc2l0aW9uYWxzX2pzXzEgPSByZXF1aXJlKFwiLi9wb3NpdGlvbmFscy5qc1wiKTtcbmZ1bmN0aW9uIGdldERvY3VtZW50Um9vdChub2RlKSB7XG4gICAgd2hpbGUgKG5vZGUucGFyZW50KVxuICAgICAgICBub2RlID0gbm9kZS5wYXJlbnQ7XG4gICAgcmV0dXJuIG5vZGU7XG59XG5leHBvcnRzLmdldERvY3VtZW50Um9vdCA9IGdldERvY3VtZW50Um9vdDtcbmZ1bmN0aW9uIGdyb3VwU2VsZWN0b3JzKHNlbGVjdG9ycykge1xuICAgIHZhciBmaWx0ZXJlZFNlbGVjdG9ycyA9IFtdO1xuICAgIHZhciBwbGFpblNlbGVjdG9ycyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMCwgc2VsZWN0b3JzXzEgPSBzZWxlY3RvcnM7IF9pIDwgc2VsZWN0b3JzXzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIHZhciBzZWxlY3RvciA9IHNlbGVjdG9yc18xW19pXTtcbiAgICAgICAgaWYgKHNlbGVjdG9yLnNvbWUocG9zaXRpb25hbHNfanNfMS5pc0ZpbHRlcikpIHtcbiAgICAgICAgICAgIGZpbHRlcmVkU2VsZWN0b3JzLnB1c2goc2VsZWN0b3IpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcGxhaW5TZWxlY3RvcnMucHVzaChzZWxlY3Rvcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIFtwbGFpblNlbGVjdG9ycywgZmlsdGVyZWRTZWxlY3RvcnNdO1xufVxuZXhwb3J0cy5ncm91cFNlbGVjdG9ycyA9IGdyb3VwU2VsZWN0b3JzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aGVscGVycy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2Fzc2lnbiA9ICh0aGlzICYmIHRoaXMuX19hc3NpZ24pIHx8IGZ1bmN0aW9uICgpIHtcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXG4gICAgICAgICAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHQ7XG4gICAgfTtcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn07XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19zZXRNb2R1bGVEZWZhdWx0KSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCB2KSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xufSkgOiBmdW5jdGlvbihvLCB2KSB7XG4gICAgb1tcImRlZmF1bHRcIl0gPSB2O1xufSk7XG52YXIgX19pbXBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydFN0YXIpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoayAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwgayk7XG4gICAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufTtcbnZhciBfX3NwcmVhZEFycmF5ID0gKHRoaXMgJiYgdGhpcy5fX3NwcmVhZEFycmF5KSB8fCBmdW5jdGlvbiAodG8sIGZyb20sIHBhY2spIHtcbiAgICBpZiAocGFjayB8fCBhcmd1bWVudHMubGVuZ3RoID09PSAyKSBmb3IgKHZhciBpID0gMCwgbCA9IGZyb20ubGVuZ3RoLCBhcjsgaSA8IGw7IGkrKykge1xuICAgICAgICBpZiAoYXIgfHwgIShpIGluIGZyb20pKSB7XG4gICAgICAgICAgICBpZiAoIWFyKSBhciA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZyb20sIDAsIGkpO1xuICAgICAgICAgICAgYXJbaV0gPSBmcm9tW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0by5jb25jYXQoYXIgfHwgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZnJvbSkpO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc2VsZWN0ID0gZXhwb3J0cy5maWx0ZXIgPSBleHBvcnRzLnNvbWUgPSBleHBvcnRzLmlzID0gZXhwb3J0cy5hbGlhc2VzID0gZXhwb3J0cy5wc2V1ZG9zID0gZXhwb3J0cy5maWx0ZXJzID0gdm9pZCAwO1xudmFyIGNzc193aGF0XzEgPSByZXF1aXJlKFwiY3NzLXdoYXRcIik7XG52YXIgY3NzX3NlbGVjdF8xID0gcmVxdWlyZShcImNzcy1zZWxlY3RcIik7XG52YXIgRG9tVXRpbHMgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcImRvbXV0aWxzXCIpKTtcbnZhciBib29sYmFzZSA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiYm9vbGJhc2VcIikpO1xudmFyIGhlbHBlcnNfanNfMSA9IHJlcXVpcmUoXCIuL2hlbHBlcnMuanNcIik7XG52YXIgcG9zaXRpb25hbHNfanNfMSA9IHJlcXVpcmUoXCIuL3Bvc2l0aW9uYWxzLmpzXCIpO1xuLy8gUmUtZXhwb3J0IHBzZXVkbyBleHRlbnNpb24gcG9pbnRzXG52YXIgY3NzX3NlbGVjdF8yID0gcmVxdWlyZShcImNzcy1zZWxlY3RcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJmaWx0ZXJzXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjc3Nfc2VsZWN0XzIuZmlsdGVyczsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInBzZXVkb3NcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNzc19zZWxlY3RfMi5wc2V1ZG9zOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiYWxpYXNlc1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY3NzX3NlbGVjdF8yLmFsaWFzZXM7IH0gfSk7XG52YXIgVU5JVkVSU0FMX1NFTEVDVE9SID0ge1xuICAgIHR5cGU6IGNzc193aGF0XzEuU2VsZWN0b3JUeXBlLlVuaXZlcnNhbCxcbiAgICBuYW1lc3BhY2U6IG51bGwsXG59O1xudmFyIFNDT1BFX1BTRVVETyA9IHtcbiAgICB0eXBlOiBjc3Nfd2hhdF8xLlNlbGVjdG9yVHlwZS5Qc2V1ZG8sXG4gICAgbmFtZTogXCJzY29wZVwiLFxuICAgIGRhdGE6IG51bGwsXG59O1xuZnVuY3Rpb24gaXMoZWxlbWVudCwgc2VsZWN0b3IsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgIHJldHVybiBzb21lKFtlbGVtZW50XSwgc2VsZWN0b3IsIG9wdGlvbnMpO1xufVxuZXhwb3J0cy5pcyA9IGlzO1xuZnVuY3Rpb24gc29tZShlbGVtZW50cywgc2VsZWN0b3IsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgIGlmICh0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIilcbiAgICAgICAgcmV0dXJuIGVsZW1lbnRzLnNvbWUoc2VsZWN0b3IpO1xuICAgIHZhciBfYSA9ICgwLCBoZWxwZXJzX2pzXzEuZ3JvdXBTZWxlY3RvcnMpKCgwLCBjc3Nfd2hhdF8xLnBhcnNlKShzZWxlY3RvcikpLCBwbGFpbiA9IF9hWzBdLCBmaWx0ZXJlZCA9IF9hWzFdO1xuICAgIHJldHVybiAoKHBsYWluLmxlbmd0aCA+IDAgJiYgZWxlbWVudHMuc29tZSgoMCwgY3NzX3NlbGVjdF8xLl9jb21waWxlVG9rZW4pKHBsYWluLCBvcHRpb25zKSkpIHx8XG4gICAgICAgIGZpbHRlcmVkLnNvbWUoZnVuY3Rpb24gKHNlbCkgeyByZXR1cm4gZmlsdGVyQnlTZWxlY3RvcihzZWwsIGVsZW1lbnRzLCBvcHRpb25zKS5sZW5ndGggPiAwOyB9KSk7XG59XG5leHBvcnRzLnNvbWUgPSBzb21lO1xuZnVuY3Rpb24gZmlsdGVyQnlQb3NpdGlvbihmaWx0ZXIsIGVsZW1zLCBkYXRhLCBvcHRpb25zKSB7XG4gICAgdmFyIG51bSA9IHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiID8gcGFyc2VJbnQoZGF0YSwgMTApIDogTmFOO1xuICAgIHN3aXRjaCAoZmlsdGVyKSB7XG4gICAgICAgIGNhc2UgXCJmaXJzdFwiOlxuICAgICAgICBjYXNlIFwibHRcIjpcbiAgICAgICAgICAgIC8vIEFscmVhZHkgZG9uZSBpbiBgZ2V0TGltaXRgXG4gICAgICAgICAgICByZXR1cm4gZWxlbXM7XG4gICAgICAgIGNhc2UgXCJsYXN0XCI6XG4gICAgICAgICAgICByZXR1cm4gZWxlbXMubGVuZ3RoID4gMCA/IFtlbGVtc1tlbGVtcy5sZW5ndGggLSAxXV0gOiBlbGVtcztcbiAgICAgICAgY2FzZSBcIm50aFwiOlxuICAgICAgICBjYXNlIFwiZXFcIjpcbiAgICAgICAgICAgIHJldHVybiBpc0Zpbml0ZShudW0pICYmIE1hdGguYWJzKG51bSkgPCBlbGVtcy5sZW5ndGhcbiAgICAgICAgICAgICAgICA/IFtudW0gPCAwID8gZWxlbXNbZWxlbXMubGVuZ3RoICsgbnVtXSA6IGVsZW1zW251bV1dXG4gICAgICAgICAgICAgICAgOiBbXTtcbiAgICAgICAgY2FzZSBcImd0XCI6XG4gICAgICAgICAgICByZXR1cm4gaXNGaW5pdGUobnVtKSA/IGVsZW1zLnNsaWNlKG51bSArIDEpIDogW107XG4gICAgICAgIGNhc2UgXCJldmVuXCI6XG4gICAgICAgICAgICByZXR1cm4gZWxlbXMuZmlsdGVyKGZ1bmN0aW9uIChfLCBpKSB7IHJldHVybiBpICUgMiA9PT0gMDsgfSk7XG4gICAgICAgIGNhc2UgXCJvZGRcIjpcbiAgICAgICAgICAgIHJldHVybiBlbGVtcy5maWx0ZXIoZnVuY3Rpb24gKF8sIGkpIHsgcmV0dXJuIGkgJSAyID09PSAxOyB9KTtcbiAgICAgICAgY2FzZSBcIm5vdFwiOiB7XG4gICAgICAgICAgICB2YXIgZmlsdGVyZWRfMSA9IG5ldyBTZXQoZmlsdGVyUGFyc2VkKGRhdGEsIGVsZW1zLCBvcHRpb25zKSk7XG4gICAgICAgICAgICByZXR1cm4gZWxlbXMuZmlsdGVyKGZ1bmN0aW9uIChlKSB7IHJldHVybiAhZmlsdGVyZWRfMS5oYXMoZSk7IH0pO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gZmlsdGVyKHNlbGVjdG9yLCBlbGVtZW50cywgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgcmV0dXJuIGZpbHRlclBhcnNlZCgoMCwgY3NzX3doYXRfMS5wYXJzZSkoc2VsZWN0b3IpLCBlbGVtZW50cywgb3B0aW9ucyk7XG59XG5leHBvcnRzLmZpbHRlciA9IGZpbHRlcjtcbi8qKlxuICogRmlsdGVyIGEgc2V0IG9mIGVsZW1lbnRzIGJ5IGEgc2VsZWN0b3IuXG4gKlxuICogV2lsbCByZXR1cm4gZWxlbWVudHMgaW4gdGhlIG9yaWdpbmFsIG9yZGVyLlxuICpcbiAqIEBwYXJhbSBzZWxlY3RvciBTZWxlY3RvciB0byBmaWx0ZXIgYnkuXG4gKiBAcGFyYW0gZWxlbWVudHMgRWxlbWVudHMgdG8gZmlsdGVyLlxuICogQHBhcmFtIG9wdGlvbnMgT3B0aW9ucyBmb3Igc2VsZWN0b3IuXG4gKi9cbmZ1bmN0aW9uIGZpbHRlclBhcnNlZChzZWxlY3RvciwgZWxlbWVudHMsIG9wdGlvbnMpIHtcbiAgICBpZiAoZWxlbWVudHMubGVuZ3RoID09PSAwKVxuICAgICAgICByZXR1cm4gW107XG4gICAgdmFyIF9hID0gKDAsIGhlbHBlcnNfanNfMS5ncm91cFNlbGVjdG9ycykoc2VsZWN0b3IpLCBwbGFpblNlbGVjdG9ycyA9IF9hWzBdLCBmaWx0ZXJlZFNlbGVjdG9ycyA9IF9hWzFdO1xuICAgIHZhciBmb3VuZDtcbiAgICBpZiAocGxhaW5TZWxlY3RvcnMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBmaWx0ZXJlZCA9IGZpbHRlckVsZW1lbnRzKGVsZW1lbnRzLCBwbGFpblNlbGVjdG9ycywgb3B0aW9ucyk7XG4gICAgICAgIC8vIElmIHRoZXJlIGFyZSBubyBmaWx0ZXJzLCBqdXN0IHJldHVyblxuICAgICAgICBpZiAoZmlsdGVyZWRTZWxlY3RvcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gZmlsdGVyZWQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gT3RoZXJ3aXNlLCB3ZSBoYXZlIHRvIGRvIHNvbWUgZmlsdGVyaW5nXG4gICAgICAgIGlmIChmaWx0ZXJlZC5sZW5ndGgpIHtcbiAgICAgICAgICAgIGZvdW5kID0gbmV3IFNldChmaWx0ZXJlZCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBmaWx0ZXJlZFNlbGVjdG9ycy5sZW5ndGggJiYgKGZvdW5kID09PSBudWxsIHx8IGZvdW5kID09PSB2b2lkIDAgPyB2b2lkIDAgOiBmb3VuZC5zaXplKSAhPT0gZWxlbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGZpbHRlcmVkU2VsZWN0b3IgPSBmaWx0ZXJlZFNlbGVjdG9yc1tpXTtcbiAgICAgICAgdmFyIG1pc3NpbmcgPSBmb3VuZFxuICAgICAgICAgICAgPyBlbGVtZW50cy5maWx0ZXIoZnVuY3Rpb24gKGUpIHsgcmV0dXJuIERvbVV0aWxzLmlzVGFnKGUpICYmICFmb3VuZC5oYXMoZSk7IH0pXG4gICAgICAgICAgICA6IGVsZW1lbnRzO1xuICAgICAgICBpZiAobWlzc2luZy5sZW5ndGggPT09IDApXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgdmFyIGZpbHRlcmVkID0gZmlsdGVyQnlTZWxlY3RvcihmaWx0ZXJlZFNlbGVjdG9yLCBlbGVtZW50cywgb3B0aW9ucyk7XG4gICAgICAgIGlmIChmaWx0ZXJlZC5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmICghZm91bmQpIHtcbiAgICAgICAgICAgICAgICAvKlxuICAgICAgICAgICAgICAgICAqIElmIHdlIGhhdmVuJ3QgZm91bmQgYW55dGhpbmcgYmVmb3JlIHRoZSBsYXN0IHNlbGVjdG9yLFxuICAgICAgICAgICAgICAgICAqIGp1c3QgcmV0dXJuIHdoYXQgd2UgZm91bmQgbm93LlxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIGlmIChpID09PSBmaWx0ZXJlZFNlbGVjdG9ycy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmaWx0ZXJlZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm91bmQgPSBuZXcgU2V0KGZpbHRlcmVkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGZpbHRlcmVkLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7IHJldHVybiBmb3VuZC5hZGQoZWwpOyB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHlwZW9mIGZvdW5kICE9PSBcInVuZGVmaW5lZFwiXG4gICAgICAgID8gKGZvdW5kLnNpemUgPT09IGVsZW1lbnRzLmxlbmd0aFxuICAgICAgICAgICAgPyBlbGVtZW50c1xuICAgICAgICAgICAgOiAvLyBGaWx0ZXIgZWxlbWVudHMgdG8gcHJlc2VydmUgb3JkZXJcbiAgICAgICAgICAgICAgICBlbGVtZW50cy5maWx0ZXIoZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmb3VuZC5oYXMoZWwpO1xuICAgICAgICAgICAgICAgIH0pKVxuICAgICAgICA6IFtdO1xufVxuZnVuY3Rpb24gZmlsdGVyQnlTZWxlY3RvcihzZWxlY3RvciwgZWxlbWVudHMsIG9wdGlvbnMpIHtcbiAgICB2YXIgX2E7XG4gICAgaWYgKHNlbGVjdG9yLnNvbWUoY3NzX3doYXRfMS5pc1RyYXZlcnNhbCkpIHtcbiAgICAgICAgLypcbiAgICAgICAgICogR2V0IHJvb3Qgbm9kZSwgcnVuIHNlbGVjdG9yIHdpdGggdGhlIHNjb3BlXG4gICAgICAgICAqIHNldCB0byBhbGwgb2Ygb3VyIG5vZGVzLlxuICAgICAgICAgKi9cbiAgICAgICAgdmFyIHJvb3QgPSAoX2EgPSBvcHRpb25zLnJvb3QpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6ICgwLCBoZWxwZXJzX2pzXzEuZ2V0RG9jdW1lbnRSb290KShlbGVtZW50c1swXSk7XG4gICAgICAgIHZhciBvcHRzID0gX19hc3NpZ24oX19hc3NpZ24oe30sIG9wdGlvbnMpLCB7IGNvbnRleHQ6IGVsZW1lbnRzLCByZWxhdGl2ZVNlbGVjdG9yOiBmYWxzZSB9KTtcbiAgICAgICAgc2VsZWN0b3IucHVzaChTQ09QRV9QU0VVRE8pO1xuICAgICAgICByZXR1cm4gZmluZEZpbHRlckVsZW1lbnRzKHJvb3QsIHNlbGVjdG9yLCBvcHRzLCB0cnVlLCBlbGVtZW50cy5sZW5ndGgpO1xuICAgIH1cbiAgICAvLyBQZXJmb3JtYW5jZSBvcHRpbWl6YXRpb246IElmIHdlIGRvbid0IGhhdmUgdG8gdHJhdmVyc2UsIGp1c3QgZmlsdGVyIHNldC5cbiAgICByZXR1cm4gZmluZEZpbHRlckVsZW1lbnRzKGVsZW1lbnRzLCBzZWxlY3Rvciwgb3B0aW9ucywgZmFsc2UsIGVsZW1lbnRzLmxlbmd0aCk7XG59XG5mdW5jdGlvbiBzZWxlY3Qoc2VsZWN0b3IsIHJvb3QsIG9wdGlvbnMsIGxpbWl0KSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICBpZiAobGltaXQgPT09IHZvaWQgMCkgeyBsaW1pdCA9IEluZmluaXR5OyB9XG4gICAgaWYgKHR5cGVvZiBzZWxlY3RvciA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiBmaW5kKHJvb3QsIHNlbGVjdG9yKTtcbiAgICB9XG4gICAgdmFyIF9hID0gKDAsIGhlbHBlcnNfanNfMS5ncm91cFNlbGVjdG9ycykoKDAsIGNzc193aGF0XzEucGFyc2UpKHNlbGVjdG9yKSksIHBsYWluID0gX2FbMF0sIGZpbHRlcmVkID0gX2FbMV07XG4gICAgdmFyIHJlc3VsdHMgPSBmaWx0ZXJlZC5tYXAoZnVuY3Rpb24gKHNlbCkge1xuICAgICAgICByZXR1cm4gZmluZEZpbHRlckVsZW1lbnRzKHJvb3QsIHNlbCwgb3B0aW9ucywgdHJ1ZSwgbGltaXQpO1xuICAgIH0pO1xuICAgIC8vIFBsYWluIHNlbGVjdG9ycyBjYW4gYmUgcXVlcmllZCBpbiBhIHNpbmdsZSBnb1xuICAgIGlmIChwbGFpbi5sZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0cy5wdXNoKGZpbmRFbGVtZW50cyhyb290LCBwbGFpbiwgb3B0aW9ucywgbGltaXQpKTtcbiAgICB9XG4gICAgaWYgKHJlc3VsdHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgLy8gSWYgdGhlcmUgd2FzIG9ubHkgYSBzaW5nbGUgc2VsZWN0b3IsIGp1c3QgcmV0dXJuIHRoZSByZXN1bHRcbiAgICBpZiAocmVzdWx0cy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdHNbMF07XG4gICAgfVxuICAgIC8vIFNvcnQgcmVzdWx0cywgZmlsdGVyaW5nIGZvciBkdXBsaWNhdGVzXG4gICAgcmV0dXJuIERvbVV0aWxzLnVuaXF1ZVNvcnQocmVzdWx0cy5yZWR1Y2UoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIF9fc3ByZWFkQXJyYXkoX19zcHJlYWRBcnJheShbXSwgYSwgdHJ1ZSksIGIsIHRydWUpOyB9KSk7XG59XG5leHBvcnRzLnNlbGVjdCA9IHNlbGVjdDtcbi8qKlxuICpcbiAqIEBwYXJhbSByb290IEVsZW1lbnQocykgdG8gc2VhcmNoIGZyb20uXG4gKiBAcGFyYW0gc2VsZWN0b3IgU2VsZWN0b3IgdG8gbG9vayBmb3IuXG4gKiBAcGFyYW0gb3B0aW9ucyBPcHRpb25zIGZvciBxdWVyeWluZy5cbiAqIEBwYXJhbSBxdWVyeUZvclNlbGVjdG9yIFF1ZXJ5IG11bHRpcGxlIGxldmVscyBkZWVwIGZvciB0aGUgaW5pdGlhbCBzZWxlY3RvciwgZXZlbiBpZiBpdCBkb2Vzbid0IGNvbnRhaW4gYSB0cmF2ZXJzYWwuXG4gKi9cbmZ1bmN0aW9uIGZpbmRGaWx0ZXJFbGVtZW50cyhyb290LCBzZWxlY3Rvciwgb3B0aW9ucywgcXVlcnlGb3JTZWxlY3RvciwgdG90YWxMaW1pdCkge1xuICAgIHZhciBmaWx0ZXJJbmRleCA9IHNlbGVjdG9yLmZpbmRJbmRleChwb3NpdGlvbmFsc19qc18xLmlzRmlsdGVyKTtcbiAgICB2YXIgc3ViID0gc2VsZWN0b3Iuc2xpY2UoMCwgZmlsdGVySW5kZXgpO1xuICAgIHZhciBmaWx0ZXIgPSBzZWxlY3RvcltmaWx0ZXJJbmRleF07XG4gICAgLy8gSWYgd2UgYXJlIGF0IHRoZSBlbmQgb2YgdGhlIHNlbGVjdG9yLCB3ZSBjYW4gbGltaXQgdGhlIG51bWJlciBvZiBlbGVtZW50cyB0byByZXRyaWV2ZS5cbiAgICB2YXIgcGFydExpbWl0ID0gc2VsZWN0b3IubGVuZ3RoIC0gMSA9PT0gZmlsdGVySW5kZXggPyB0b3RhbExpbWl0IDogSW5maW5pdHk7XG4gICAgLypcbiAgICAgKiBTZXQgdGhlIG51bWJlciBvZiBlbGVtZW50cyB0byByZXRyaWV2ZS5cbiAgICAgKiBFZy4gZm9yIDpmaXJzdCwgd2Ugb25seSBoYXZlIHRvIGdldCBhIHNpbmdsZSBlbGVtZW50LlxuICAgICAqL1xuICAgIHZhciBsaW1pdCA9ICgwLCBwb3NpdGlvbmFsc19qc18xLmdldExpbWl0KShmaWx0ZXIubmFtZSwgZmlsdGVyLmRhdGEsIHBhcnRMaW1pdCk7XG4gICAgaWYgKGxpbWl0ID09PSAwKVxuICAgICAgICByZXR1cm4gW107XG4gICAgLypcbiAgICAgKiBTa2lwIGBmaW5kRWxlbWVudHNgIGNhbGwgaWYgb3VyIHNlbGVjdG9yIHN0YXJ0cyB3aXRoIGEgcG9zaXRpb25hbFxuICAgICAqIHBzZXVkby5cbiAgICAgKi9cbiAgICB2YXIgZWxlbXNOb0xpbWl0ID0gc3ViLmxlbmd0aCA9PT0gMCAmJiAhQXJyYXkuaXNBcnJheShyb290KVxuICAgICAgICA/IERvbVV0aWxzLmdldENoaWxkcmVuKHJvb3QpLmZpbHRlcihEb21VdGlscy5pc1RhZylcbiAgICAgICAgOiBzdWIubGVuZ3RoID09PSAwXG4gICAgICAgICAgICA/IChBcnJheS5pc0FycmF5KHJvb3QpID8gcm9vdCA6IFtyb290XSkuZmlsdGVyKERvbVV0aWxzLmlzVGFnKVxuICAgICAgICAgICAgOiBxdWVyeUZvclNlbGVjdG9yIHx8IHN1Yi5zb21lKGNzc193aGF0XzEuaXNUcmF2ZXJzYWwpXG4gICAgICAgICAgICAgICAgPyBmaW5kRWxlbWVudHMocm9vdCwgW3N1Yl0sIG9wdGlvbnMsIGxpbWl0KVxuICAgICAgICAgICAgICAgIDogZmlsdGVyRWxlbWVudHMocm9vdCwgW3N1Yl0sIG9wdGlvbnMpO1xuICAgIHZhciBlbGVtcyA9IGVsZW1zTm9MaW1pdC5zbGljZSgwLCBsaW1pdCk7XG4gICAgdmFyIHJlc3VsdCA9IGZpbHRlckJ5UG9zaXRpb24oZmlsdGVyLm5hbWUsIGVsZW1zLCBmaWx0ZXIuZGF0YSwgb3B0aW9ucyk7XG4gICAgaWYgKHJlc3VsdC5sZW5ndGggPT09IDAgfHwgc2VsZWN0b3IubGVuZ3RoID09PSBmaWx0ZXJJbmRleCArIDEpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgdmFyIHJlbWFpbmluZ1NlbGVjdG9yID0gc2VsZWN0b3Iuc2xpY2UoZmlsdGVySW5kZXggKyAxKTtcbiAgICB2YXIgcmVtYWluaW5nSGFzVHJhdmVyc2FsID0gcmVtYWluaW5nU2VsZWN0b3Iuc29tZShjc3Nfd2hhdF8xLmlzVHJhdmVyc2FsKTtcbiAgICBpZiAocmVtYWluaW5nSGFzVHJhdmVyc2FsKSB7XG4gICAgICAgIGlmICgoMCwgY3NzX3doYXRfMS5pc1RyYXZlcnNhbCkocmVtYWluaW5nU2VsZWN0b3JbMF0pKSB7XG4gICAgICAgICAgICB2YXIgdHlwZSA9IHJlbWFpbmluZ1NlbGVjdG9yWzBdLnR5cGU7XG4gICAgICAgICAgICBpZiAodHlwZSA9PT0gY3NzX3doYXRfMS5TZWxlY3RvclR5cGUuU2libGluZyB8fFxuICAgICAgICAgICAgICAgIHR5cGUgPT09IGNzc193aGF0XzEuU2VsZWN0b3JUeXBlLkFkamFjZW50KSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgd2UgaGF2ZSBhIHNpYmxpbmcgdHJhdmVyc2FsLCB3ZSBuZWVkIHRvIGFsc28gbG9vayBhdCB0aGUgc2libGluZ3MuXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gKDAsIGNzc19zZWxlY3RfMS5wcmVwYXJlQ29udGV4dCkocmVzdWx0LCBEb21VdGlscywgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBBdm9pZCBhIHRyYXZlcnNhbC1maXJzdCBzZWxlY3RvciBlcnJvci5cbiAgICAgICAgICAgIHJlbWFpbmluZ1NlbGVjdG9yLnVuc2hpZnQoVU5JVkVSU0FMX1NFTEVDVE9SKTtcbiAgICAgICAgfVxuICAgICAgICBvcHRpb25zID0gX19hc3NpZ24oX19hc3NpZ24oe30sIG9wdGlvbnMpLCB7IFxuICAgICAgICAgICAgLy8gQXZvaWQgYWJzb2x1dGl6aW5nIHRoZSBzZWxlY3RvclxuICAgICAgICAgICAgcmVsYXRpdmVTZWxlY3RvcjogZmFsc2UsIFxuICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAqIEFkZCBhIGN1c3RvbSByb290IGZ1bmMsIHRvIG1ha2Ugc3VyZSB0cmF2ZXJzYWxzIGRvbid0IG1hdGNoIGVsZW1lbnRzXG4gICAgICAgICAgICAgKiB0aGF0IGFyZW4ndCBhIHBhcnQgb2YgdGhlIGNvbnNpZGVyZWQgdHJlZS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgcm9vdEZ1bmM6IGZ1bmN0aW9uIChlbCkgeyByZXR1cm4gcmVzdWx0LmluY2x1ZGVzKGVsKTsgfSB9KTtcbiAgICB9XG4gICAgZWxzZSBpZiAob3B0aW9ucy5yb290RnVuYyAmJiBvcHRpb25zLnJvb3RGdW5jICE9PSBib29sYmFzZS50cnVlRnVuYykge1xuICAgICAgICBvcHRpb25zID0gX19hc3NpZ24oX19hc3NpZ24oe30sIG9wdGlvbnMpLCB7IHJvb3RGdW5jOiBib29sYmFzZS50cnVlRnVuYyB9KTtcbiAgICB9XG4gICAgLypcbiAgICAgKiBJZiB3ZSBoYXZlIGFub3RoZXIgZmlsdGVyLCByZWN1cnNpdmVseSBjYWxsIGBmaW5kRmlsdGVyRWxlbWVudHNgLFxuICAgICAqIHdpdGggdGhlIGByZWN1cnNpdmVgIGZsYWcgZGlzYWJsZWQuIFdlIG9ubHkgaGF2ZSB0byBsb29rIGZvciBtb3JlXG4gICAgICogZWxlbWVudHMgd2hlbiB3ZSBzZWUgYSB0cmF2ZXJzYWwuXG4gICAgICpcbiAgICAgKiBPdGhlcndpc2UsXG4gICAgICovXG4gICAgcmV0dXJuIHJlbWFpbmluZ1NlbGVjdG9yLnNvbWUocG9zaXRpb25hbHNfanNfMS5pc0ZpbHRlcilcbiAgICAgICAgPyBmaW5kRmlsdGVyRWxlbWVudHMocmVzdWx0LCByZW1haW5pbmdTZWxlY3Rvciwgb3B0aW9ucywgZmFsc2UsIHRvdGFsTGltaXQpXG4gICAgICAgIDogcmVtYWluaW5nSGFzVHJhdmVyc2FsXG4gICAgICAgICAgICA/IC8vIFF1ZXJ5IGV4aXN0aW5nIGVsZW1lbnRzIHRvIHJlc29sdmUgdHJhdmVyc2FsLlxuICAgICAgICAgICAgICAgIGZpbmRFbGVtZW50cyhyZXN1bHQsIFtyZW1haW5pbmdTZWxlY3Rvcl0sIG9wdGlvbnMsIHRvdGFsTGltaXQpXG4gICAgICAgICAgICA6IC8vIElmIHdlIGRvbid0IGhhdmUgYW55IG1vcmUgdHJhdmVyc2Fscywgc2ltcGx5IGZpbHRlciBlbGVtZW50cy5cbiAgICAgICAgICAgICAgICBmaWx0ZXJFbGVtZW50cyhyZXN1bHQsIFtyZW1haW5pbmdTZWxlY3Rvcl0sIG9wdGlvbnMpO1xufVxuZnVuY3Rpb24gZmluZEVsZW1lbnRzKHJvb3QsIHNlbCwgb3B0aW9ucywgbGltaXQpIHtcbiAgICB2YXIgcXVlcnkgPSAoMCwgY3NzX3NlbGVjdF8xLl9jb21waWxlVG9rZW4pKHNlbCwgb3B0aW9ucywgcm9vdCk7XG4gICAgcmV0dXJuIGZpbmQocm9vdCwgcXVlcnksIGxpbWl0KTtcbn1cbmZ1bmN0aW9uIGZpbmQocm9vdCwgcXVlcnksIGxpbWl0KSB7XG4gICAgaWYgKGxpbWl0ID09PSB2b2lkIDApIHsgbGltaXQgPSBJbmZpbml0eTsgfVxuICAgIHZhciBlbGVtcyA9ICgwLCBjc3Nfc2VsZWN0XzEucHJlcGFyZUNvbnRleHQpKHJvb3QsIERvbVV0aWxzLCBxdWVyeS5zaG91bGRUZXN0TmV4dFNpYmxpbmdzKTtcbiAgICByZXR1cm4gRG9tVXRpbHMuZmluZChmdW5jdGlvbiAobm9kZSkgeyByZXR1cm4gRG9tVXRpbHMuaXNUYWcobm9kZSkgJiYgcXVlcnkobm9kZSk7IH0sIGVsZW1zLCB0cnVlLCBsaW1pdCk7XG59XG5mdW5jdGlvbiBmaWx0ZXJFbGVtZW50cyhlbGVtZW50cywgc2VsLCBvcHRpb25zKSB7XG4gICAgdmFyIGVscyA9IChBcnJheS5pc0FycmF5KGVsZW1lbnRzKSA/IGVsZW1lbnRzIDogW2VsZW1lbnRzXSkuZmlsdGVyKERvbVV0aWxzLmlzVGFnKTtcbiAgICBpZiAoZWxzLmxlbmd0aCA9PT0gMClcbiAgICAgICAgcmV0dXJuIGVscztcbiAgICB2YXIgcXVlcnkgPSAoMCwgY3NzX3NlbGVjdF8xLl9jb21waWxlVG9rZW4pKHNlbCwgb3B0aW9ucyk7XG4gICAgcmV0dXJuIHF1ZXJ5ID09PSBib29sYmFzZS50cnVlRnVuYyA/IGVscyA6IGVscy5maWx0ZXIocXVlcnkpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdldExpbWl0ID0gZXhwb3J0cy5pc0ZpbHRlciA9IGV4cG9ydHMuZmlsdGVyTmFtZXMgPSB2b2lkIDA7XG5leHBvcnRzLmZpbHRlck5hbWVzID0gbmV3IFNldChbXG4gICAgXCJmaXJzdFwiLFxuICAgIFwibGFzdFwiLFxuICAgIFwiZXFcIixcbiAgICBcImd0XCIsXG4gICAgXCJudGhcIixcbiAgICBcImx0XCIsXG4gICAgXCJldmVuXCIsXG4gICAgXCJvZGRcIixcbl0pO1xuZnVuY3Rpb24gaXNGaWx0ZXIocykge1xuICAgIGlmIChzLnR5cGUgIT09IFwicHNldWRvXCIpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBpZiAoZXhwb3J0cy5maWx0ZXJOYW1lcy5oYXMocy5uYW1lKSlcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgaWYgKHMubmFtZSA9PT0gXCJub3RcIiAmJiBBcnJheS5pc0FycmF5KHMuZGF0YSkpIHtcbiAgICAgICAgLy8gT25seSBjb25zaWRlciBgOm5vdGAgd2l0aCBlbWJlZGRlZCBmaWx0ZXJzXG4gICAgICAgIHJldHVybiBzLmRhdGEuc29tZShmdW5jdGlvbiAocykgeyByZXR1cm4gcy5zb21lKGlzRmlsdGVyKTsgfSk7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmV4cG9ydHMuaXNGaWx0ZXIgPSBpc0ZpbHRlcjtcbmZ1bmN0aW9uIGdldExpbWl0KGZpbHRlciwgZGF0YSwgcGFydExpbWl0KSB7XG4gICAgdmFyIG51bSA9IGRhdGEgIT0gbnVsbCA/IHBhcnNlSW50KGRhdGEsIDEwKSA6IE5hTjtcbiAgICBzd2l0Y2ggKGZpbHRlcikge1xuICAgICAgICBjYXNlIFwiZmlyc3RcIjpcbiAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICBjYXNlIFwibnRoXCI6XG4gICAgICAgIGNhc2UgXCJlcVwiOlxuICAgICAgICAgICAgcmV0dXJuIGlzRmluaXRlKG51bSkgPyAobnVtID49IDAgPyBudW0gKyAxIDogSW5maW5pdHkpIDogMDtcbiAgICAgICAgY2FzZSBcImx0XCI6XG4gICAgICAgICAgICByZXR1cm4gaXNGaW5pdGUobnVtKVxuICAgICAgICAgICAgICAgID8gbnVtID49IDBcbiAgICAgICAgICAgICAgICAgICAgPyBNYXRoLm1pbihudW0sIHBhcnRMaW1pdClcbiAgICAgICAgICAgICAgICAgICAgOiBJbmZpbml0eVxuICAgICAgICAgICAgICAgIDogMDtcbiAgICAgICAgY2FzZSBcImd0XCI6XG4gICAgICAgICAgICByZXR1cm4gaXNGaW5pdGUobnVtKSA/IEluZmluaXR5IDogMDtcbiAgICAgICAgY2FzZSBcIm9kZFwiOlxuICAgICAgICAgICAgcmV0dXJuIDIgKiBwYXJ0TGltaXQ7XG4gICAgICAgIGNhc2UgXCJldmVuXCI6XG4gICAgICAgICAgICByZXR1cm4gMiAqIHBhcnRMaW1pdCAtIDE7XG4gICAgICAgIGNhc2UgXCJsYXN0XCI6XG4gICAgICAgIGNhc2UgXCJub3RcIjpcbiAgICAgICAgICAgIHJldHVybiBJbmZpbml0eTtcbiAgICB9XG59XG5leHBvcnRzLmdldExpbWl0ID0gZ2V0TGltaXQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wb3NpdGlvbmFscy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogTWV0aG9kcyBmb3IgZ2V0dGluZyBhbmQgbW9kaWZ5aW5nIGF0dHJpYnV0ZXMuXG4gKlxuICogQG1vZHVsZSBjaGVlcmlvL2F0dHJpYnV0ZXNcbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy50b2dnbGVDbGFzcyA9IGV4cG9ydHMucmVtb3ZlQ2xhc3MgPSBleHBvcnRzLmFkZENsYXNzID0gZXhwb3J0cy5oYXNDbGFzcyA9IGV4cG9ydHMucmVtb3ZlQXR0ciA9IGV4cG9ydHMudmFsID0gZXhwb3J0cy5kYXRhID0gZXhwb3J0cy5wcm9wID0gZXhwb3J0cy5hdHRyID0gdm9pZCAwO1xudmFyIHN0YXRpY19qc18xID0gcmVxdWlyZShcIi4uL3N0YXRpYy5qc1wiKTtcbnZhciB1dGlsc19qc18xID0gcmVxdWlyZShcIi4uL3V0aWxzLmpzXCIpO1xudmFyIGRvbXV0aWxzXzEgPSByZXF1aXJlKFwiZG9tdXRpbHNcIik7XG52YXIgaGFzT3duID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciByc3BhY2UgPSAvXFxzKy87XG52YXIgZGF0YUF0dHJQcmVmaXggPSAnZGF0YS0nO1xuLypcbiAqIExvb2t1cCB0YWJsZSBmb3IgY29lcmNpbmcgc3RyaW5nIGRhdGEtKiBhdHRyaWJ1dGVzIHRvIHRoZWlyIGNvcnJlc3BvbmRpbmdcbiAqIEphdmFTY3JpcHQgcHJpbWl0aXZlc1xuICovXG52YXIgcHJpbWl0aXZlcyA9IHtcbiAgICBudWxsOiBudWxsLFxuICAgIHRydWU6IHRydWUsXG4gICAgZmFsc2U6IGZhbHNlLFxufTtcbi8vIEF0dHJpYnV0ZXMgdGhhdCBhcmUgYm9vbGVhbnNcbnZhciByYm9vbGVhbiA9IC9eKD86YXV0b2ZvY3VzfGF1dG9wbGF5fGFzeW5jfGNoZWNrZWR8Y29udHJvbHN8ZGVmZXJ8ZGlzYWJsZWR8aGlkZGVufGxvb3B8bXVsdGlwbGV8b3BlbnxyZWFkb25seXxyZXF1aXJlZHxzY29wZWR8c2VsZWN0ZWQpJC9pO1xuLy8gTWF0Y2hlcyBzdHJpbmdzIHRoYXQgbG9vayBsaWtlIEpTT04gb2JqZWN0cyBvciBhcnJheXNcbnZhciByYnJhY2UgPSAvXntbXl0qfSR8XlxcW1teXSpdJC87XG5mdW5jdGlvbiBnZXRBdHRyKGVsZW0sIG5hbWUsIHhtbE1vZGUpIHtcbiAgICB2YXIgX2E7XG4gICAgaWYgKCFlbGVtIHx8ICEoMCwgdXRpbHNfanNfMS5pc1RhZykoZWxlbSkpXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgKF9hID0gZWxlbS5hdHRyaWJzKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAoZWxlbS5hdHRyaWJzID0ge30pO1xuICAgIC8vIFJldHVybiB0aGUgZW50aXJlIGF0dHJpYnMgb2JqZWN0IGlmIG5vIGF0dHJpYnV0ZSBzcGVjaWZpZWRcbiAgICBpZiAoIW5hbWUpIHtcbiAgICAgICAgcmV0dXJuIGVsZW0uYXR0cmlicztcbiAgICB9XG4gICAgaWYgKGhhc093bi5jYWxsKGVsZW0uYXR0cmlicywgbmFtZSkpIHtcbiAgICAgICAgLy8gR2V0IHRoZSAoZGVjb2RlZCkgYXR0cmlidXRlXG4gICAgICAgIHJldHVybiAheG1sTW9kZSAmJiByYm9vbGVhbi50ZXN0KG5hbWUpID8gbmFtZSA6IGVsZW0uYXR0cmlic1tuYW1lXTtcbiAgICB9XG4gICAgLy8gTWltaWMgdGhlIERPTSBhbmQgcmV0dXJuIHRleHQgY29udGVudCBhcyB2YWx1ZSBmb3IgYG9wdGlvbidzYFxuICAgIGlmIChlbGVtLm5hbWUgPT09ICdvcHRpb24nICYmIG5hbWUgPT09ICd2YWx1ZScpIHtcbiAgICAgICAgcmV0dXJuICgwLCBzdGF0aWNfanNfMS50ZXh0KShlbGVtLmNoaWxkcmVuKTtcbiAgICB9XG4gICAgLy8gTWltaWMgRE9NIHdpdGggZGVmYXVsdCB2YWx1ZSBmb3IgcmFkaW9zL2NoZWNrYm94ZXNcbiAgICBpZiAoZWxlbS5uYW1lID09PSAnaW5wdXQnICYmXG4gICAgICAgIChlbGVtLmF0dHJpYnNbJ3R5cGUnXSA9PT0gJ3JhZGlvJyB8fCBlbGVtLmF0dHJpYnNbJ3R5cGUnXSA9PT0gJ2NoZWNrYm94JykgJiZcbiAgICAgICAgbmFtZSA9PT0gJ3ZhbHVlJykge1xuICAgICAgICByZXR1cm4gJ29uJztcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cbi8qKlxuICogU2V0cyB0aGUgdmFsdWUgb2YgYW4gYXR0cmlidXRlLiBUaGUgYXR0cmlidXRlIHdpbGwgYmUgZGVsZXRlZCBpZiB0aGUgdmFsdWUgaXMgYG51bGxgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0gZWwgLSBUaGUgZWxlbWVudCB0byBzZXQgdGhlIGF0dHJpYnV0ZSBvbi5cbiAqIEBwYXJhbSBuYW1lIC0gVGhlIGF0dHJpYnV0ZSdzIG5hbWUuXG4gKiBAcGFyYW0gdmFsdWUgLSBUaGUgYXR0cmlidXRlJ3MgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIHNldEF0dHIoZWwsIG5hbWUsIHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgICAgIHJlbW92ZUF0dHJpYnV0ZShlbCwgbmFtZSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBlbC5hdHRyaWJzW25hbWVdID0gXCJcIi5jb25jYXQodmFsdWUpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGF0dHIobmFtZSwgdmFsdWUpIHtcbiAgICAvLyBTZXQgdGhlIHZhbHVlICh3aXRoIGF0dHIgbWFwIHN1cHBvcnQpXG4gICAgaWYgKHR5cGVvZiBuYW1lID09PSAnb2JqZWN0JyB8fCB2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgbmFtZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQmFkIGNvbWJpbmF0aW9uIG9mIGFyZ3VtZW50cy4nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gKDAsIHV0aWxzX2pzXzEuZG9tRWFjaCkodGhpcywgZnVuY3Rpb24gKGVsLCBpKSB7XG4gICAgICAgICAgICAgICAgaWYgKCgwLCB1dGlsc19qc18xLmlzVGFnKShlbCkpXG4gICAgICAgICAgICAgICAgICAgIHNldEF0dHIoZWwsIG5hbWUsIHZhbHVlLmNhbGwoZWwsIGksIGVsLmF0dHJpYnNbbmFtZV0pKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoMCwgdXRpbHNfanNfMS5kb21FYWNoKSh0aGlzLCBmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgICAgIGlmICghKDAsIHV0aWxzX2pzXzEuaXNUYWcpKGVsKSlcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBpZiAodHlwZW9mIG5hbWUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgT2JqZWN0LmtleXMobmFtZSkuZm9yRWFjaChmdW5jdGlvbiAob2JqTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgb2JqVmFsdWUgPSBuYW1lW29iak5hbWVdO1xuICAgICAgICAgICAgICAgICAgICBzZXRBdHRyKGVsLCBvYmpOYW1lLCBvYmpWYWx1ZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzZXRBdHRyKGVsLCBuYW1lLCB2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDFcbiAgICAgICAgPyB0aGlzXG4gICAgICAgIDogZ2V0QXR0cih0aGlzWzBdLCBuYW1lLCB0aGlzLm9wdGlvbnMueG1sTW9kZSk7XG59XG5leHBvcnRzLmF0dHIgPSBhdHRyO1xuLyoqXG4gKiBHZXRzIGEgbm9kZSdzIHByb3AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjYXRlZ29yeSBBdHRyaWJ1dGVzXG4gKiBAcGFyYW0gZWwgLSBFbGVtZW50IHRvIGdldCB0aGUgcHJvcCBvZi5cbiAqIEBwYXJhbSBuYW1lIC0gTmFtZSBvZiB0aGUgcHJvcC5cbiAqIEByZXR1cm5zIFRoZSBwcm9wJ3MgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGdldFByb3AoZWwsIG5hbWUsIHhtbE1vZGUpIHtcbiAgICByZXR1cm4gbmFtZSBpbiBlbFxuICAgICAgICA/IC8vIEB0cy1leHBlY3QtZXJyb3IgVFMgZG9lc24ndCBsaWtlIHVzIGFjY2Vzc2luZyB0aGUgdmFsdWUgZGlyZWN0bHkgaGVyZS5cbiAgICAgICAgICAgIGVsW25hbWVdXG4gICAgICAgIDogIXhtbE1vZGUgJiYgcmJvb2xlYW4udGVzdChuYW1lKVxuICAgICAgICAgICAgPyBnZXRBdHRyKGVsLCBuYW1lLCBmYWxzZSkgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgOiBnZXRBdHRyKGVsLCBuYW1lLCB4bWxNb2RlKTtcbn1cbi8qKlxuICogU2V0cyB0aGUgdmFsdWUgb2YgYSBwcm9wLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0gZWwgLSBUaGUgZWxlbWVudCB0byBzZXQgdGhlIHByb3Agb24uXG4gKiBAcGFyYW0gbmFtZSAtIFRoZSBwcm9wJ3MgbmFtZS5cbiAqIEBwYXJhbSB2YWx1ZSAtIFRoZSBwcm9wJ3MgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIHNldFByb3AoZWwsIG5hbWUsIHZhbHVlLCB4bWxNb2RlKSB7XG4gICAgaWYgKG5hbWUgaW4gZWwpIHtcbiAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBPdmVycmlkaW5nIHZhbHVlXG4gICAgICAgIGVsW25hbWVdID0gdmFsdWU7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBzZXRBdHRyKGVsLCBuYW1lLCAheG1sTW9kZSAmJiByYm9vbGVhbi50ZXN0KG5hbWUpID8gKHZhbHVlID8gJycgOiBudWxsKSA6IFwiXCIuY29uY2F0KHZhbHVlKSk7XG4gICAgfVxufVxuZnVuY3Rpb24gcHJvcChuYW1lLCB2YWx1ZSkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgdmFyIF9hO1xuICAgIGlmICh0eXBlb2YgbmFtZSA9PT0gJ3N0cmluZycgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB2YXIgZWwgPSB0aGlzWzBdO1xuICAgICAgICBpZiAoIWVsIHx8ICEoMCwgdXRpbHNfanNfMS5pc1RhZykoZWwpKVxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgc3dpdGNoIChuYW1lKSB7XG4gICAgICAgICAgICBjYXNlICdzdHlsZSc6IHtcbiAgICAgICAgICAgICAgICB2YXIgcHJvcGVydHlfMSA9IHRoaXMuY3NzKCk7XG4gICAgICAgICAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhwcm9wZXJ0eV8xKTtcbiAgICAgICAgICAgICAgICBrZXlzLmZvckVhY2goZnVuY3Rpb24gKHAsIGkpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHlfMVtpXSA9IHA7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcHJvcGVydHlfMS5sZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJvcGVydHlfMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgJ3RhZ05hbWUnOlxuICAgICAgICAgICAgY2FzZSAnbm9kZU5hbWUnOiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVsLm5hbWUudG9VcHBlckNhc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgJ2hyZWYnOlxuICAgICAgICAgICAgY2FzZSAnc3JjJzoge1xuICAgICAgICAgICAgICAgIHZhciBwcm9wXzEgPSAoX2EgPSBlbC5hdHRyaWJzKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2FbbmFtZV07XG4gICAgICAgICAgICAgICAgLyogZXNsaW50LWRpc2FibGUgbm9kZS9uby11bnN1cHBvcnRlZC1mZWF0dXJlcy9ub2RlLWJ1aWx0aW5zICovXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBVUkwgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgICAgICAgICAgICgobmFtZSA9PT0gJ2hyZWYnICYmIChlbC50YWdOYW1lID09PSAnYScgfHwgZWwubmFtZSA9PT0gJ2xpbmsnKSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIChuYW1lID09PSAnc3JjJyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChlbC50YWdOYW1lID09PSAnaW1nJyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbC50YWdOYW1lID09PSAnaWZyYW1lJyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbC50YWdOYW1lID09PSAnYXVkaW8nIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsLnRhZ05hbWUgPT09ICd2aWRlbycgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWwudGFnTmFtZSA9PT0gJ3NvdXJjZScpKSkgJiZcbiAgICAgICAgICAgICAgICAgICAgcHJvcF8xICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLmJhc2VVUkkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBVUkwocHJvcF8xLCB0aGlzLm9wdGlvbnMuYmFzZVVSSSkuaHJlZjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLyogZXNsaW50LWVuYWJsZSBub2RlL25vLXVuc3VwcG9ydGVkLWZlYXR1cmVzL25vZGUtYnVpbHRpbnMgKi9cbiAgICAgICAgICAgICAgICByZXR1cm4gcHJvcF8xO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAnaW5uZXJUZXh0Jzoge1xuICAgICAgICAgICAgICAgIHJldHVybiAoMCwgZG9tdXRpbHNfMS5pbm5lclRleHQpKGVsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgJ3RleHRDb250ZW50Jzoge1xuICAgICAgICAgICAgICAgIHJldHVybiAoMCwgZG9tdXRpbHNfMS50ZXh0Q29udGVudCkoZWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAnb3V0ZXJIVE1MJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jbG9uZSgpLndyYXAoJzxjb250YWluZXIgLz4nKS5wYXJlbnQoKS5odG1sKCk7XG4gICAgICAgICAgICBjYXNlICdpbm5lckhUTUwnOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmh0bWwoKTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldFByb3AoZWwsIG5hbWUsIHRoaXMub3B0aW9ucy54bWxNb2RlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAodHlwZW9mIG5hbWUgPT09ICdvYmplY3QnIHx8IHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBuYW1lID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQmFkIGNvbWJpbmF0aW9uIG9mIGFyZ3VtZW50cy4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAoMCwgdXRpbHNfanNfMS5kb21FYWNoKSh0aGlzLCBmdW5jdGlvbiAoZWwsIGkpIHtcbiAgICAgICAgICAgICAgICBpZiAoKDAsIHV0aWxzX2pzXzEuaXNUYWcpKGVsKSkge1xuICAgICAgICAgICAgICAgICAgICBzZXRQcm9wKGVsLCBuYW1lLCB2YWx1ZS5jYWxsKGVsLCBpLCBnZXRQcm9wKGVsLCBuYW1lLCBfdGhpcy5vcHRpb25zLnhtbE1vZGUpKSwgX3RoaXMub3B0aW9ucy54bWxNb2RlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKDAsIHV0aWxzX2pzXzEuZG9tRWFjaCkodGhpcywgZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgICAgICBpZiAoISgwLCB1dGlsc19qc18xLmlzVGFnKShlbCkpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBuYW1lID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKG5hbWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdmFsID0gbmFtZVtrZXldO1xuICAgICAgICAgICAgICAgICAgICBzZXRQcm9wKGVsLCBrZXksIHZhbCwgX3RoaXMub3B0aW9ucy54bWxNb2RlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHNldFByb3AoZWwsIG5hbWUsIHZhbHVlLCBfdGhpcy5vcHRpb25zLnhtbE1vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cbmV4cG9ydHMucHJvcCA9IHByb3A7XG4vKipcbiAqIFNldHMgdGhlIHZhbHVlIG9mIGEgZGF0YSBhdHRyaWJ1dGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSBlbCAtIFRoZSBlbGVtZW50IHRvIHNldCB0aGUgZGF0YSBhdHRyaWJ1dGUgb24uXG4gKiBAcGFyYW0gbmFtZSAtIFRoZSBkYXRhIGF0dHJpYnV0ZSdzIG5hbWUuXG4gKiBAcGFyYW0gdmFsdWUgLSBUaGUgZGF0YSBhdHRyaWJ1dGUncyB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gc2V0RGF0YShlbCwgbmFtZSwgdmFsdWUpIHtcbiAgICB2YXIgX2E7XG4gICAgdmFyIGVsZW0gPSBlbDtcbiAgICAoX2EgPSBlbGVtLmRhdGEpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IChlbGVtLmRhdGEgPSB7fSk7XG4gICAgaWYgKHR5cGVvZiBuYW1lID09PSAnb2JqZWN0JylcbiAgICAgICAgT2JqZWN0LmFzc2lnbihlbGVtLmRhdGEsIG5hbWUpO1xuICAgIGVsc2UgaWYgKHR5cGVvZiBuYW1lID09PSAnc3RyaW5nJyAmJiB2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGVsZW0uZGF0YVtuYW1lXSA9IHZhbHVlO1xuICAgIH1cbn1cbi8qKlxuICogUmVhZCB0aGUgc3BlY2lmaWVkIGF0dHJpYnV0ZSBmcm9tIHRoZSBlcXVpdmFsZW50IEhUTUw1IGBkYXRhLSpgIGF0dHJpYnV0ZSxcbiAqIGFuZCAoaWYgcHJlc2VudCkgY2FjaGUgdGhlIHZhbHVlIGluIHRoZSBub2RlJ3MgaW50ZXJuYWwgZGF0YSBzdG9yZS4gSWYgbm9cbiAqIGF0dHJpYnV0ZSBuYW1lIGlzIHNwZWNpZmllZCwgcmVhZCBfYWxsXyBIVE1MNSBgZGF0YS0qYCBhdHRyaWJ1dGVzIGluIHRoaXMgbWFubmVyLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY2F0ZWdvcnkgQXR0cmlidXRlc1xuICogQHBhcmFtIGVsIC0gRWxlbWVudCB0byBnZXQgdGhlIGRhdGEgYXR0cmlidXRlIG9mLlxuICogQHBhcmFtIG5hbWUgLSBOYW1lIG9mIHRoZSBkYXRhIGF0dHJpYnV0ZS5cbiAqIEByZXR1cm5zIFRoZSBkYXRhIGF0dHJpYnV0ZSdzIHZhbHVlLCBvciBhIG1hcCB3aXRoIGFsbCBvZiB0aGUgZGF0YSBhdHRyaWJ1dGVzLlxuICovXG5mdW5jdGlvbiByZWFkRGF0YShlbCwgbmFtZSkge1xuICAgIHZhciBkb21OYW1lcztcbiAgICB2YXIganNOYW1lcztcbiAgICB2YXIgdmFsdWU7XG4gICAgaWYgKG5hbWUgPT0gbnVsbCkge1xuICAgICAgICBkb21OYW1lcyA9IE9iamVjdC5rZXlzKGVsLmF0dHJpYnMpLmZpbHRlcihmdW5jdGlvbiAoYXR0ck5hbWUpIHtcbiAgICAgICAgICAgIHJldHVybiBhdHRyTmFtZS5zdGFydHNXaXRoKGRhdGFBdHRyUHJlZml4KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGpzTmFtZXMgPSBkb21OYW1lcy5tYXAoZnVuY3Rpb24gKGRvbU5hbWUpIHtcbiAgICAgICAgICAgIHJldHVybiAoMCwgdXRpbHNfanNfMS5jYW1lbENhc2UpKGRvbU5hbWUuc2xpY2UoZGF0YUF0dHJQcmVmaXgubGVuZ3RoKSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZG9tTmFtZXMgPSBbZGF0YUF0dHJQcmVmaXggKyAoMCwgdXRpbHNfanNfMS5jc3NDYXNlKShuYW1lKV07XG4gICAgICAgIGpzTmFtZXMgPSBbbmFtZV07XG4gICAgfVxuICAgIGZvciAodmFyIGlkeCA9IDA7IGlkeCA8IGRvbU5hbWVzLmxlbmd0aDsgKytpZHgpIHtcbiAgICAgICAgdmFyIGRvbU5hbWUgPSBkb21OYW1lc1tpZHhdO1xuICAgICAgICB2YXIganNOYW1lID0ganNOYW1lc1tpZHhdO1xuICAgICAgICBpZiAoaGFzT3duLmNhbGwoZWwuYXR0cmlicywgZG9tTmFtZSkgJiZcbiAgICAgICAgICAgICFoYXNPd24uY2FsbChlbC5kYXRhLCBqc05hbWUpKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGVsLmF0dHJpYnNbZG9tTmFtZV07XG4gICAgICAgICAgICBpZiAoaGFzT3duLmNhbGwocHJpbWl0aXZlcywgdmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBwcmltaXRpdmVzW3ZhbHVlXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHZhbHVlID09PSBTdHJpbmcoTnVtYmVyKHZhbHVlKSkpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IE51bWJlcih2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChyYnJhY2UudGVzdCh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IEpTT04ucGFyc2UodmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAvKiBJZ25vcmUgKi9cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbC5kYXRhW2pzTmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbmFtZSA9PSBudWxsID8gZWwuZGF0YSA6IHZhbHVlO1xufVxuZnVuY3Rpb24gZGF0YShuYW1lLCB2YWx1ZSkge1xuICAgIHZhciBfYTtcbiAgICB2YXIgZWxlbSA9IHRoaXNbMF07XG4gICAgaWYgKCFlbGVtIHx8ICEoMCwgdXRpbHNfanNfMS5pc1RhZykoZWxlbSkpXG4gICAgICAgIHJldHVybjtcbiAgICB2YXIgZGF0YUVsID0gZWxlbTtcbiAgICAoX2EgPSBkYXRhRWwuZGF0YSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogKGRhdGFFbC5kYXRhID0ge30pO1xuICAgIC8vIFJldHVybiB0aGUgZW50aXJlIGRhdGEgb2JqZWN0IGlmIG5vIGRhdGEgc3BlY2lmaWVkXG4gICAgaWYgKCFuYW1lKSB7XG4gICAgICAgIHJldHVybiByZWFkRGF0YShkYXRhRWwpO1xuICAgIH1cbiAgICAvLyBTZXQgdGhlIHZhbHVlICh3aXRoIGF0dHIgbWFwIHN1cHBvcnQpXG4gICAgaWYgKHR5cGVvZiBuYW1lID09PSAnb2JqZWN0JyB8fCB2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICgwLCB1dGlsc19qc18xLmRvbUVhY2gpKHRoaXMsIGZ1bmN0aW9uIChlbCkge1xuICAgICAgICAgICAgaWYgKCgwLCB1dGlsc19qc18xLmlzVGFnKShlbCkpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG5hbWUgPT09ICdvYmplY3QnKVxuICAgICAgICAgICAgICAgICAgICBzZXREYXRhKGVsLCBuYW1lKTtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIHNldERhdGEoZWwsIG5hbWUsIHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBpZiAoaGFzT3duLmNhbGwoZGF0YUVsLmRhdGEsIG5hbWUpKSB7XG4gICAgICAgIHJldHVybiBkYXRhRWwuZGF0YVtuYW1lXTtcbiAgICB9XG4gICAgcmV0dXJuIHJlYWREYXRhKGRhdGFFbCwgbmFtZSk7XG59XG5leHBvcnRzLmRhdGEgPSBkYXRhO1xuZnVuY3Rpb24gdmFsKHZhbHVlKSB7XG4gICAgdmFyIHF1ZXJ5aW5nID0gYXJndW1lbnRzLmxlbmd0aCA9PT0gMDtcbiAgICB2YXIgZWxlbWVudCA9IHRoaXNbMF07XG4gICAgaWYgKCFlbGVtZW50IHx8ICEoMCwgdXRpbHNfanNfMS5pc1RhZykoZWxlbWVudCkpXG4gICAgICAgIHJldHVybiBxdWVyeWluZyA/IHVuZGVmaW5lZCA6IHRoaXM7XG4gICAgc3dpdGNoIChlbGVtZW50Lm5hbWUpIHtcbiAgICAgICAgY2FzZSAndGV4dGFyZWEnOlxuICAgICAgICAgICAgcmV0dXJuIHRoaXMudGV4dCh2YWx1ZSk7XG4gICAgICAgIGNhc2UgJ3NlbGVjdCc6IHtcbiAgICAgICAgICAgIHZhciBvcHRpb24gPSB0aGlzLmZpbmQoJ29wdGlvbjpzZWxlY3RlZCcpO1xuICAgICAgICAgICAgaWYgKCFxdWVyeWluZykge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmF0dHIoJ211bHRpcGxlJykgPT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLmZpbmQoJ29wdGlvbicpLnJlbW92ZUF0dHIoJ3NlbGVjdGVkJyk7XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlcyA9IHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcgPyBbdmFsdWVdIDogdmFsdWU7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YWx1ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5maW5kKFwib3B0aW9uW3ZhbHVlPVxcXCJcIi5jb25jYXQodmFsdWVzW2ldLCBcIlxcXCJdXCIpKS5hdHRyKCdzZWxlY3RlZCcsICcnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hdHRyKCdtdWx0aXBsZScpXG4gICAgICAgICAgICAgICAgPyBvcHRpb24udG9BcnJheSgpLm1hcChmdW5jdGlvbiAoZWwpIHsgcmV0dXJuICgwLCBzdGF0aWNfanNfMS50ZXh0KShlbC5jaGlsZHJlbik7IH0pXG4gICAgICAgICAgICAgICAgOiBvcHRpb24uYXR0cigndmFsdWUnKTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlICdpbnB1dCc6XG4gICAgICAgIGNhc2UgJ29wdGlvbic6XG4gICAgICAgICAgICByZXR1cm4gcXVlcnlpbmdcbiAgICAgICAgICAgICAgICA/IHRoaXMuYXR0cigndmFsdWUnKVxuICAgICAgICAgICAgICAgIDogdGhpcy5hdHRyKCd2YWx1ZScsIHZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cbmV4cG9ydHMudmFsID0gdmFsO1xuLyoqXG4gKiBSZW1vdmUgYW4gYXR0cmlidXRlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0gZWxlbSAtIE5vZGUgdG8gcmVtb3ZlIGF0dHJpYnV0ZSBmcm9tLlxuICogQHBhcmFtIG5hbWUgLSBOYW1lIG9mIHRoZSBhdHRyaWJ1dGUgdG8gcmVtb3ZlLlxuICovXG5mdW5jdGlvbiByZW1vdmVBdHRyaWJ1dGUoZWxlbSwgbmFtZSkge1xuICAgIGlmICghZWxlbS5hdHRyaWJzIHx8ICFoYXNPd24uY2FsbChlbGVtLmF0dHJpYnMsIG5hbWUpKVxuICAgICAgICByZXR1cm47XG4gICAgZGVsZXRlIGVsZW0uYXR0cmlic1tuYW1lXTtcbn1cbi8qKlxuICogU3BsaXRzIGEgc3BhY2Utc2VwYXJhdGVkIGxpc3Qgb2YgbmFtZXMgdG8gaW5kaXZpZHVhbCBuYW1lcy5cbiAqXG4gKiBAY2F0ZWdvcnkgQXR0cmlidXRlc1xuICogQHBhcmFtIG5hbWVzIC0gTmFtZXMgdG8gc3BsaXQuXG4gKiBAcmV0dXJucyAtIFNwbGl0IG5hbWVzLlxuICovXG5mdW5jdGlvbiBzcGxpdE5hbWVzKG5hbWVzKSB7XG4gICAgcmV0dXJuIG5hbWVzID8gbmFtZXMudHJpbSgpLnNwbGl0KHJzcGFjZSkgOiBbXTtcbn1cbi8qKlxuICogTWV0aG9kIGZvciByZW1vdmluZyBhdHRyaWJ1dGVzIGJ5IGBuYW1lYC5cbiAqXG4gKiBAY2F0ZWdvcnkgQXR0cmlidXRlc1xuICogQGV4YW1wbGVcbiAqXG4gKiBgYGBqc1xuICogJCgnLnBlYXInKS5yZW1vdmVBdHRyKCdjbGFzcycpLmh0bWwoKTtcbiAqIC8vPT4gPGxpPlBlYXI8L2xpPlxuICpcbiAqICQoJy5hcHBsZScpLmF0dHIoJ2lkJywgJ2Zhdm9yaXRlJyk7XG4gKiAkKCcuYXBwbGUnKS5yZW1vdmVBdHRyKCdpZCBjbGFzcycpLmh0bWwoKTtcbiAqIC8vPT4gPGxpPkFwcGxlPC9saT5cbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBuYW1lIC0gTmFtZSBvZiB0aGUgYXR0cmlidXRlLlxuICogQHJldHVybnMgVGhlIGluc3RhbmNlIGl0c2VsZi5cbiAqIEBzZWUge0BsaW5rIGh0dHBzOi8vYXBpLmpxdWVyeS5jb20vcmVtb3ZlQXR0ci99XG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUF0dHIobmFtZSkge1xuICAgIHZhciBhdHRyTmFtZXMgPSBzcGxpdE5hbWVzKG5hbWUpO1xuICAgIHZhciBfbG9vcF8xID0gZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgKDAsIHV0aWxzX2pzXzEuZG9tRWFjaCkodGhpc18xLCBmdW5jdGlvbiAoZWxlbSkge1xuICAgICAgICAgICAgaWYgKCgwLCB1dGlsc19qc18xLmlzVGFnKShlbGVtKSlcbiAgICAgICAgICAgICAgICByZW1vdmVBdHRyaWJ1dGUoZWxlbSwgYXR0ck5hbWVzW2ldKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICB2YXIgdGhpc18xID0gdGhpcztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGF0dHJOYW1lcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBfbG9vcF8xKGkpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbn1cbmV4cG9ydHMucmVtb3ZlQXR0ciA9IHJlbW92ZUF0dHI7XG4vKipcbiAqIENoZWNrIHRvIHNlZSBpZiBfYW55XyBvZiB0aGUgbWF0Y2hlZCBlbGVtZW50cyBoYXZlIHRoZSBnaXZlbiBgY2xhc3NOYW1lYC5cbiAqXG4gKiBAY2F0ZWdvcnkgQXR0cmlidXRlc1xuICogQGV4YW1wbGVcbiAqXG4gKiBgYGBqc1xuICogJCgnLnBlYXInKS5oYXNDbGFzcygncGVhcicpO1xuICogLy89PiB0cnVlXG4gKlxuICogJCgnYXBwbGUnKS5oYXNDbGFzcygnZnJ1aXQnKTtcbiAqIC8vPT4gZmFsc2VcbiAqXG4gKiAkKCdsaScpLmhhc0NsYXNzKCdwZWFyJyk7XG4gKiAvLz0+IHRydWVcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBjbGFzc05hbWUgLSBOYW1lIG9mIHRoZSBjbGFzcy5cbiAqIEByZXR1cm5zIEluZGljYXRlcyBpZiBhbiBlbGVtZW50IGhhcyB0aGUgZ2l2ZW4gYGNsYXNzTmFtZWAuXG4gKiBAc2VlIHtAbGluayBodHRwczovL2FwaS5qcXVlcnkuY29tL2hhc0NsYXNzL31cbiAqL1xuZnVuY3Rpb24gaGFzQ2xhc3MoY2xhc3NOYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMudG9BcnJheSgpLnNvbWUoZnVuY3Rpb24gKGVsZW0pIHtcbiAgICAgICAgdmFyIGNsYXp6ID0gKDAsIHV0aWxzX2pzXzEuaXNUYWcpKGVsZW0pICYmIGVsZW0uYXR0cmlic1snY2xhc3MnXTtcbiAgICAgICAgdmFyIGlkeCA9IC0xO1xuICAgICAgICBpZiAoY2xhenogJiYgY2xhc3NOYW1lLmxlbmd0aCkge1xuICAgICAgICAgICAgd2hpbGUgKChpZHggPSBjbGF6ei5pbmRleE9mKGNsYXNzTmFtZSwgaWR4ICsgMSkpID4gLTEpIHtcbiAgICAgICAgICAgICAgICB2YXIgZW5kID0gaWR4ICsgY2xhc3NOYW1lLmxlbmd0aDtcbiAgICAgICAgICAgICAgICBpZiAoKGlkeCA9PT0gMCB8fCByc3BhY2UudGVzdChjbGF6eltpZHggLSAxXSkpICYmXG4gICAgICAgICAgICAgICAgICAgIChlbmQgPT09IGNsYXp6Lmxlbmd0aCB8fCByc3BhY2UudGVzdChjbGF6eltlbmRdKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9KTtcbn1cbmV4cG9ydHMuaGFzQ2xhc3MgPSBoYXNDbGFzcztcbi8qKlxuICogQWRkcyBjbGFzcyhlcykgdG8gYWxsIG9mIHRoZSBtYXRjaGVkIGVsZW1lbnRzLiBBbHNvIGFjY2VwdHMgYSBgZnVuY3Rpb25gLlxuICpcbiAqIEBjYXRlZ29yeSBBdHRyaWJ1dGVzXG4gKiBAZXhhbXBsZVxuICpcbiAqIGBgYGpzXG4gKiAkKCcucGVhcicpLmFkZENsYXNzKCdmcnVpdCcpLmh0bWwoKTtcbiAqIC8vPT4gPGxpIGNsYXNzPVwicGVhciBmcnVpdFwiPlBlYXI8L2xpPlxuICpcbiAqICQoJy5hcHBsZScpLmFkZENsYXNzKCdmcnVpdCByZWQnKS5odG1sKCk7XG4gKiAvLz0+IDxsaSBjbGFzcz1cImFwcGxlIGZydWl0IHJlZFwiPkFwcGxlPC9saT5cbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB2YWx1ZSAtIE5hbWUgb2YgbmV3IGNsYXNzLlxuICogQHJldHVybnMgVGhlIGluc3RhbmNlIGl0c2VsZi5cbiAqIEBzZWUge0BsaW5rIGh0dHBzOi8vYXBpLmpxdWVyeS5jb20vYWRkQ2xhc3MvfVxuICovXG5mdW5jdGlvbiBhZGRDbGFzcyh2YWx1ZSkge1xuICAgIC8vIFN1cHBvcnQgZnVuY3Rpb25zXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gKDAsIHV0aWxzX2pzXzEuZG9tRWFjaCkodGhpcywgZnVuY3Rpb24gKGVsLCBpKSB7XG4gICAgICAgICAgICBpZiAoKDAsIHV0aWxzX2pzXzEuaXNUYWcpKGVsKSkge1xuICAgICAgICAgICAgICAgIHZhciBjbGFzc05hbWUgPSBlbC5hdHRyaWJzWydjbGFzcyddIHx8ICcnO1xuICAgICAgICAgICAgICAgIGFkZENsYXNzLmNhbGwoW2VsXSwgdmFsdWUuY2FsbChlbCwgaSwgY2xhc3NOYW1lKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvLyBSZXR1cm4gaWYgbm8gdmFsdWUgb3Igbm90IGEgc3RyaW5nIG9yIGZ1bmN0aW9uXG4gICAgaWYgKCF2YWx1ZSB8fCB0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnKVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB2YXIgY2xhc3NOYW1lcyA9IHZhbHVlLnNwbGl0KHJzcGFjZSk7XG4gICAgdmFyIG51bUVsZW1lbnRzID0gdGhpcy5sZW5ndGg7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW1FbGVtZW50czsgaSsrKSB7XG4gICAgICAgIHZhciBlbCA9IHRoaXNbaV07XG4gICAgICAgIC8vIElmIHNlbGVjdGVkIGVsZW1lbnQgaXNuJ3QgYSB0YWcsIG1vdmUgb25cbiAgICAgICAgaWYgKCEoMCwgdXRpbHNfanNfMS5pc1RhZykoZWwpKVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIC8vIElmIHdlIGRvbid0IGFscmVhZHkgaGF2ZSBjbGFzc2VzIOKAlCBhbHdheXMgc2V0IHhtbE1vZGUgdG8gZmFsc2UgaGVyZSwgYXMgaXQgZG9lc24ndCBtYXR0ZXIgZm9yIGNsYXNzZXNcbiAgICAgICAgdmFyIGNsYXNzTmFtZSA9IGdldEF0dHIoZWwsICdjbGFzcycsIGZhbHNlKTtcbiAgICAgICAgaWYgKCFjbGFzc05hbWUpIHtcbiAgICAgICAgICAgIHNldEF0dHIoZWwsICdjbGFzcycsIGNsYXNzTmFtZXMuam9pbignICcpLnRyaW0oKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgc2V0Q2xhc3MgPSBcIiBcIi5jb25jYXQoY2xhc3NOYW1lLCBcIiBcIik7XG4gICAgICAgICAgICAvLyBDaGVjayBpZiBjbGFzcyBhbHJlYWR5IGV4aXN0c1xuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBjbGFzc05hbWVzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFwcGVuZENsYXNzID0gXCJcIi5jb25jYXQoY2xhc3NOYW1lc1tqXSwgXCIgXCIpO1xuICAgICAgICAgICAgICAgIGlmICghc2V0Q2xhc3MuaW5jbHVkZXMoXCIgXCIuY29uY2F0KGFwcGVuZENsYXNzKSkpXG4gICAgICAgICAgICAgICAgICAgIHNldENsYXNzICs9IGFwcGVuZENsYXNzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2V0QXR0cihlbCwgJ2NsYXNzJywgc2V0Q2xhc3MudHJpbSgpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbn1cbmV4cG9ydHMuYWRkQ2xhc3MgPSBhZGRDbGFzcztcbi8qKlxuICogUmVtb3ZlcyBvbmUgb3IgbW9yZSBzcGFjZS1zZXBhcmF0ZWQgY2xhc3NlcyBmcm9tIHRoZSBzZWxlY3RlZCBlbGVtZW50cy4gSWYgbm9cbiAqIGBjbGFzc05hbWVgIGlzIGRlZmluZWQsIGFsbCBjbGFzc2VzIHdpbGwgYmUgcmVtb3ZlZC4gQWxzbyBhY2NlcHRzIGEgYGZ1bmN0aW9uYC5cbiAqXG4gKiBAY2F0ZWdvcnkgQXR0cmlidXRlc1xuICogQGV4YW1wbGVcbiAqXG4gKiBgYGBqc1xuICogJCgnLnBlYXInKS5yZW1vdmVDbGFzcygncGVhcicpLmh0bWwoKTtcbiAqIC8vPT4gPGxpIGNsYXNzPVwiXCI+UGVhcjwvbGk+XG4gKlxuICogJCgnLmFwcGxlJykuYWRkQ2xhc3MoJ3JlZCcpLnJlbW92ZUNsYXNzKCkuaHRtbCgpO1xuICogLy89PiA8bGkgY2xhc3M9XCJcIj5BcHBsZTwvbGk+XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gbmFtZSAtIE5hbWUgb2YgdGhlIGNsYXNzLiBJZiBub3Qgc3BlY2lmaWVkLCByZW1vdmVzIGFsbCBlbGVtZW50cy5cbiAqIEByZXR1cm5zIFRoZSBpbnN0YW5jZSBpdHNlbGYuXG4gKiBAc2VlIHtAbGluayBodHRwczovL2FwaS5qcXVlcnkuY29tL3JlbW92ZUNsYXNzL31cbiAqL1xuZnVuY3Rpb24gcmVtb3ZlQ2xhc3MobmFtZSkge1xuICAgIC8vIEhhbmRsZSBpZiB2YWx1ZSBpcyBhIGZ1bmN0aW9uXG4gICAgaWYgKHR5cGVvZiBuYW1lID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiAoMCwgdXRpbHNfanNfMS5kb21FYWNoKSh0aGlzLCBmdW5jdGlvbiAoZWwsIGkpIHtcbiAgICAgICAgICAgIGlmICgoMCwgdXRpbHNfanNfMS5pc1RhZykoZWwpKSB7XG4gICAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3MuY2FsbChbZWxdLCBuYW1lLmNhbGwoZWwsIGksIGVsLmF0dHJpYnNbJ2NsYXNzJ10gfHwgJycpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHZhciBjbGFzc2VzID0gc3BsaXROYW1lcyhuYW1lKTtcbiAgICB2YXIgbnVtQ2xhc3NlcyA9IGNsYXNzZXMubGVuZ3RoO1xuICAgIHZhciByZW1vdmVBbGwgPSBhcmd1bWVudHMubGVuZ3RoID09PSAwO1xuICAgIHJldHVybiAoMCwgdXRpbHNfanNfMS5kb21FYWNoKSh0aGlzLCBmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgaWYgKCEoMCwgdXRpbHNfanNfMS5pc1RhZykoZWwpKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBpZiAocmVtb3ZlQWxsKSB7XG4gICAgICAgICAgICAvLyBTaG9ydCBjaXJjdWl0IHRoZSByZW1vdmUgYWxsIGNhc2UgYXMgdGhpcyBpcyB0aGUgbmljZSBvbmVcbiAgICAgICAgICAgIGVsLmF0dHJpYnNbJ2NsYXNzJ10gPSAnJztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciBlbENsYXNzZXMgPSBzcGxpdE5hbWVzKGVsLmF0dHJpYnNbJ2NsYXNzJ10pO1xuICAgICAgICAgICAgdmFyIGNoYW5nZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbnVtQ2xhc3NlczsgaisrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gZWxDbGFzc2VzLmluZGV4T2YoY2xhc3Nlc1tqXSk7XG4gICAgICAgICAgICAgICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgZWxDbGFzc2VzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICAgICAgICAgIGNoYW5nZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAvKlxuICAgICAgICAgICAgICAgICAgICAgKiBXZSBoYXZlIHRvIGRvIGFub3RoZXIgcGFzcyB0byBlbnN1cmUgdGhhdCB0aGVyZSBhcmUgbm90IGR1cGxpY2F0ZVxuICAgICAgICAgICAgICAgICAgICAgKiBjbGFzc2VzIGxpc3RlZFxuICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgai0tO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjaGFuZ2VkKSB7XG4gICAgICAgICAgICAgICAgZWwuYXR0cmlic1snY2xhc3MnXSA9IGVsQ2xhc3Nlcy5qb2luKCcgJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbmV4cG9ydHMucmVtb3ZlQ2xhc3MgPSByZW1vdmVDbGFzcztcbi8qKlxuICogQWRkIG9yIHJlbW92ZSBjbGFzcyhlcykgZnJvbSB0aGUgbWF0Y2hlZCBlbGVtZW50cywgZGVwZW5kaW5nIG9uIGVpdGhlciB0aGVcbiAqIGNsYXNzJ3MgcHJlc2VuY2Ugb3IgdGhlIHZhbHVlIG9mIHRoZSBzd2l0Y2ggYXJndW1lbnQuIEFsc28gYWNjZXB0cyBhIGBmdW5jdGlvbmAuXG4gKlxuICogQGNhdGVnb3J5IEF0dHJpYnV0ZXNcbiAqIEBleGFtcGxlXG4gKlxuICogYGBganNcbiAqICQoJy5hcHBsZS5ncmVlbicpLnRvZ2dsZUNsYXNzKCdmcnVpdCBncmVlbiByZWQnKS5odG1sKCk7XG4gKiAvLz0+IDxsaSBjbGFzcz1cImFwcGxlIGZydWl0IHJlZFwiPkFwcGxlPC9saT5cbiAqXG4gKiAkKCcuYXBwbGUuZ3JlZW4nKS50b2dnbGVDbGFzcygnZnJ1aXQgZ3JlZW4gcmVkJywgdHJ1ZSkuaHRtbCgpO1xuICogLy89PiA8bGkgY2xhc3M9XCJhcHBsZSBncmVlbiBmcnVpdCByZWRcIj5BcHBsZTwvbGk+XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gdmFsdWUgLSBOYW1lIG9mIHRoZSBjbGFzcy4gQ2FuIGFsc28gYmUgYSBmdW5jdGlvbi5cbiAqIEBwYXJhbSBzdGF0ZVZhbCAtIElmIHNwZWNpZmllZCB0aGUgc3RhdGUgb2YgdGhlIGNsYXNzLlxuICogQHJldHVybnMgVGhlIGluc3RhbmNlIGl0c2VsZi5cbiAqIEBzZWUge0BsaW5rIGh0dHBzOi8vYXBpLmpxdWVyeS5jb20vdG9nZ2xlQ2xhc3MvfVxuICovXG5mdW5jdGlvbiB0b2dnbGVDbGFzcyh2YWx1ZSwgc3RhdGVWYWwpIHtcbiAgICAvLyBTdXBwb3J0IGZ1bmN0aW9uc1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuICgwLCB1dGlsc19qc18xLmRvbUVhY2gpKHRoaXMsIGZ1bmN0aW9uIChlbCwgaSkge1xuICAgICAgICAgICAgaWYgKCgwLCB1dGlsc19qc18xLmlzVGFnKShlbCkpIHtcbiAgICAgICAgICAgICAgICB0b2dnbGVDbGFzcy5jYWxsKFtlbF0sIHZhbHVlLmNhbGwoZWwsIGksIGVsLmF0dHJpYnNbJ2NsYXNzJ10gfHwgJycsIHN0YXRlVmFsKSwgc3RhdGVWYWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLy8gUmV0dXJuIGlmIG5vIHZhbHVlIG9yIG5vdCBhIHN0cmluZyBvciBmdW5jdGlvblxuICAgIGlmICghdmFsdWUgfHwgdHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJylcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgdmFyIGNsYXNzTmFtZXMgPSB2YWx1ZS5zcGxpdChyc3BhY2UpO1xuICAgIHZhciBudW1DbGFzc2VzID0gY2xhc3NOYW1lcy5sZW5ndGg7XG4gICAgdmFyIHN0YXRlID0gdHlwZW9mIHN0YXRlVmFsID09PSAnYm9vbGVhbicgPyAoc3RhdGVWYWwgPyAxIDogLTEpIDogMDtcbiAgICB2YXIgbnVtRWxlbWVudHMgPSB0aGlzLmxlbmd0aDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bUVsZW1lbnRzOyBpKyspIHtcbiAgICAgICAgdmFyIGVsID0gdGhpc1tpXTtcbiAgICAgICAgLy8gSWYgc2VsZWN0ZWQgZWxlbWVudCBpc24ndCBhIHRhZywgbW92ZSBvblxuICAgICAgICBpZiAoISgwLCB1dGlsc19qc18xLmlzVGFnKShlbCkpXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgdmFyIGVsZW1lbnRDbGFzc2VzID0gc3BsaXROYW1lcyhlbC5hdHRyaWJzWydjbGFzcyddKTtcbiAgICAgICAgLy8gQ2hlY2sgaWYgY2xhc3MgYWxyZWFkeSBleGlzdHNcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBudW1DbGFzc2VzOyBqKyspIHtcbiAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBjbGFzcyBuYW1lIGlzIGN1cnJlbnRseSBkZWZpbmVkXG4gICAgICAgICAgICB2YXIgaW5kZXggPSBlbGVtZW50Q2xhc3Nlcy5pbmRleE9mKGNsYXNzTmFtZXNbal0pO1xuICAgICAgICAgICAgLy8gQWRkIGlmIHN0YXRlVmFsdWUgPT09IHRydWUgb3Igd2UgYXJlIHRvZ2dsaW5nIGFuZCB0aGVyZSBpcyBubyB2YWx1ZVxuICAgICAgICAgICAgaWYgKHN0YXRlID49IDAgJiYgaW5kZXggPCAwKSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudENsYXNzZXMucHVzaChjbGFzc05hbWVzW2pdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHN0YXRlIDw9IDAgJiYgaW5kZXggPj0gMCkge1xuICAgICAgICAgICAgICAgIC8vIE90aGVyd2lzZSByZW1vdmUgYnV0IG9ubHkgaWYgdGhlIGl0ZW0gZXhpc3RzXG4gICAgICAgICAgICAgICAgZWxlbWVudENsYXNzZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbC5hdHRyaWJzWydjbGFzcyddID0gZWxlbWVudENsYXNzZXMuam9pbignICcpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbn1cbmV4cG9ydHMudG9nZ2xlQ2xhc3MgPSB0b2dnbGVDbGFzcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWF0dHJpYnV0ZXMuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNzcyA9IHZvaWQgMDtcbnZhciB1dGlsc19qc18xID0gcmVxdWlyZShcIi4uL3V0aWxzLmpzXCIpO1xuLyoqXG4gKiBTZXQgbXVsdGlwbGUgQ1NTIHByb3BlcnRpZXMgZm9yIGV2ZXJ5IG1hdGNoZWQgZWxlbWVudC5cbiAqXG4gKiBAY2F0ZWdvcnkgQ1NTXG4gKiBAcGFyYW0gcHJvcCAtIFRoZSBuYW1lcyBvZiB0aGUgcHJvcGVydGllcy5cbiAqIEBwYXJhbSB2YWwgLSBUaGUgbmV3IHZhbHVlcy5cbiAqIEByZXR1cm5zIFRoZSBpbnN0YW5jZSBpdHNlbGYuXG4gKiBAc2VlIHtAbGluayBodHRwczovL2FwaS5qcXVlcnkuY29tL2Nzcy99XG4gKi9cbmZ1bmN0aW9uIGNzcyhwcm9wLCB2YWwpIHtcbiAgICBpZiAoKHByb3AgIT0gbnVsbCAmJiB2YWwgIT0gbnVsbCkgfHxcbiAgICAgICAgLy8gV2hlbiBgcHJvcGAgaXMgYSBcInBsYWluXCIgb2JqZWN0XG4gICAgICAgICh0eXBlb2YgcHJvcCA9PT0gJ29iamVjdCcgJiYgIUFycmF5LmlzQXJyYXkocHJvcCkpKSB7XG4gICAgICAgIHJldHVybiAoMCwgdXRpbHNfanNfMS5kb21FYWNoKSh0aGlzLCBmdW5jdGlvbiAoZWwsIGkpIHtcbiAgICAgICAgICAgIGlmICgoMCwgdXRpbHNfanNfMS5pc1RhZykoZWwpKSB7XG4gICAgICAgICAgICAgICAgLy8gYHByb3BgIGNhbid0IGJlIGFuIGFycmF5IGhlcmUgYW55bW9yZS5cbiAgICAgICAgICAgICAgICBzZXRDc3MoZWwsIHByb3AsIHZhbCwgaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgcmV0dXJuIGdldENzcyh0aGlzWzBdLCBwcm9wKTtcbn1cbmV4cG9ydHMuY3NzID0gY3NzO1xuLyoqXG4gKiBTZXQgc3R5bGVzIG9mIGFsbCBlbGVtZW50cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIGVsIC0gRWxlbWVudCB0byBzZXQgc3R5bGUgb2YuXG4gKiBAcGFyYW0gcHJvcCAtIE5hbWUgb2YgcHJvcGVydHkuXG4gKiBAcGFyYW0gdmFsdWUgLSBWYWx1ZSB0byBzZXQgcHJvcGVydHkgdG8uXG4gKiBAcGFyYW0gaWR4IC0gT3B0aW9uYWwgaW5kZXggd2l0aGluIHRoZSBzZWxlY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIHNldENzcyhlbCwgcHJvcCwgdmFsdWUsIGlkeCkge1xuICAgIGlmICh0eXBlb2YgcHJvcCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdmFyIHN0eWxlcyA9IGdldENzcyhlbCk7XG4gICAgICAgIHZhciB2YWwgPSB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicgPyB2YWx1ZS5jYWxsKGVsLCBpZHgsIHN0eWxlc1twcm9wXSkgOiB2YWx1ZTtcbiAgICAgICAgaWYgKHZhbCA9PT0gJycpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBzdHlsZXNbcHJvcF07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodmFsICE9IG51bGwpIHtcbiAgICAgICAgICAgIHN0eWxlc1twcm9wXSA9IHZhbDtcbiAgICAgICAgfVxuICAgICAgICBlbC5hdHRyaWJzWydzdHlsZSddID0gc3RyaW5naWZ5KHN0eWxlcyk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBwcm9wID09PSAnb2JqZWN0Jykge1xuICAgICAgICBPYmplY3Qua2V5cyhwcm9wKS5mb3JFYWNoKGZ1bmN0aW9uIChrLCBpKSB7XG4gICAgICAgICAgICBzZXRDc3MoZWwsIGssIHByb3Bba10sIGkpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5mdW5jdGlvbiBnZXRDc3MoZWwsIHByb3ApIHtcbiAgICBpZiAoIWVsIHx8ICEoMCwgdXRpbHNfanNfMS5pc1RhZykoZWwpKVxuICAgICAgICByZXR1cm47XG4gICAgdmFyIHN0eWxlcyA9IHBhcnNlKGVsLmF0dHJpYnNbJ3N0eWxlJ10pO1xuICAgIGlmICh0eXBlb2YgcHJvcCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIHN0eWxlc1twcm9wXTtcbiAgICB9XG4gICAgaWYgKEFycmF5LmlzQXJyYXkocHJvcCkpIHtcbiAgICAgICAgdmFyIG5ld1N0eWxlc18xID0ge307XG4gICAgICAgIHByb3AuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgICAgaWYgKHN0eWxlc1tpdGVtXSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbmV3U3R5bGVzXzFbaXRlbV0gPSBzdHlsZXNbaXRlbV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gbmV3U3R5bGVzXzE7XG4gICAgfVxuICAgIHJldHVybiBzdHlsZXM7XG59XG4vKipcbiAqIFN0cmluZ2lmeSBgb2JqYCB0byBzdHlsZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjYXRlZ29yeSBDU1NcbiAqIEBwYXJhbSBvYmogLSBPYmplY3QgdG8gc3RyaW5naWZ5LlxuICogQHJldHVybnMgVGhlIHNlcmlhbGl6ZWQgc3R5bGVzLlxuICovXG5mdW5jdGlvbiBzdHJpbmdpZnkob2JqKSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaikucmVkdWNlKGZ1bmN0aW9uIChzdHIsIHByb3ApIHsgcmV0dXJuIFwiXCIuY29uY2F0KHN0cikuY29uY2F0KHN0ciA/ICcgJyA6ICcnKS5jb25jYXQocHJvcCwgXCI6IFwiKS5jb25jYXQob2JqW3Byb3BdLCBcIjtcIik7IH0sICcnKTtcbn1cbi8qKlxuICogUGFyc2UgYHN0eWxlc2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjYXRlZ29yeSBDU1NcbiAqIEBwYXJhbSBzdHlsZXMgLSBTdHlsZXMgdG8gYmUgcGFyc2VkLlxuICogQHJldHVybnMgVGhlIHBhcnNlZCBzdHlsZXMuXG4gKi9cbmZ1bmN0aW9uIHBhcnNlKHN0eWxlcykge1xuICAgIHN0eWxlcyA9IChzdHlsZXMgfHwgJycpLnRyaW0oKTtcbiAgICBpZiAoIXN0eWxlcylcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgIHZhciBvYmogPSB7fTtcbiAgICB2YXIga2V5O1xuICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBzdHlsZXMuc3BsaXQoJzsnKTsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFyIHN0ciA9IF9hW19pXTtcbiAgICAgICAgdmFyIG4gPSBzdHIuaW5kZXhPZignOicpO1xuICAgICAgICAvLyBJZiB0aGVyZSBpcyBubyA6LCBvciBpZiBpdCBpcyB0aGUgZmlyc3QvbGFzdCBjaGFyYWN0ZXIsIGFkZCB0byB0aGUgcHJldmlvdXMgaXRlbSdzIHZhbHVlXG4gICAgICAgIGlmIChuIDwgMSB8fCBuID09PSBzdHIubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgdmFyIHRyaW1tZWQgPSBzdHIudHJpbUVuZCgpO1xuICAgICAgICAgICAgaWYgKHRyaW1tZWQubGVuZ3RoID4gMCAmJiBrZXkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIG9ialtrZXldICs9IFwiO1wiLmNvbmNhdCh0cmltbWVkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGtleSA9IHN0ci5zbGljZSgwLCBuKS50cmltKCk7XG4gICAgICAgICAgICBvYmpba2V5XSA9IHN0ci5zbGljZShuICsgMSkudHJpbSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvYmo7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jc3MuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnNlcmlhbGl6ZUFycmF5ID0gZXhwb3J0cy5zZXJpYWxpemUgPSB2b2lkIDA7XG52YXIgdXRpbHNfanNfMSA9IHJlcXVpcmUoXCIuLi91dGlscy5qc1wiKTtcbi8qXG4gKiBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS9ibG9iLzIuMS4zL3NyYy9tYW5pcHVsYXRpb24vdmFyL3JjaGVja2FibGVUeXBlLmpzXG4gKiBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS9ibG9iLzIuMS4zL3NyYy9zZXJpYWxpemUuanNcbiAqL1xudmFyIHN1Ym1pdHRhYmxlU2VsZWN0b3IgPSAnaW5wdXQsc2VsZWN0LHRleHRhcmVhLGtleWdlbic7XG52YXIgcjIwID0gLyUyMC9nO1xudmFyIHJDUkxGID0gL1xccj9cXG4vZztcbi8qKlxuICogRW5jb2RlIGEgc2V0IG9mIGZvcm0gZWxlbWVudHMgYXMgYSBzdHJpbmcgZm9yIHN1Ym1pc3Npb24uXG4gKlxuICogQGNhdGVnb3J5IEZvcm1zXG4gKiBAZXhhbXBsZVxuICpcbiAqIGBgYGpzXG4gKiAkKCc8Zm9ybT48aW5wdXQgbmFtZT1cImZvb1wiIHZhbHVlPVwiYmFyXCIgLz48L2Zvcm0+Jykuc2VyaWFsaXplKCk7XG4gKiAvLz0+ICdmb289YmFyJ1xuICogYGBgXG4gKlxuICogQHJldHVybnMgVGhlIHNlcmlhbGl6ZWQgZm9ybS5cbiAqIEBzZWUge0BsaW5rIGh0dHBzOi8vYXBpLmpxdWVyeS5jb20vc2VyaWFsaXplL31cbiAqL1xuZnVuY3Rpb24gc2VyaWFsaXplKCkge1xuICAgIC8vIENvbnZlcnQgZm9ybSBlbGVtZW50cyBpbnRvIG5hbWUvdmFsdWUgb2JqZWN0c1xuICAgIHZhciBhcnIgPSB0aGlzLnNlcmlhbGl6ZUFycmF5KCk7XG4gICAgLy8gU2VyaWFsaXplIGVhY2ggZWxlbWVudCBpbnRvIGEga2V5L3ZhbHVlIHN0cmluZ1xuICAgIHZhciByZXRBcnIgPSBhcnIubWFwKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIHJldHVybiBcIlwiLmNvbmNhdChlbmNvZGVVUklDb21wb25lbnQoZGF0YS5uYW1lKSwgXCI9XCIpLmNvbmNhdChlbmNvZGVVUklDb21wb25lbnQoZGF0YS52YWx1ZSkpO1xuICAgIH0pO1xuICAgIC8vIFJldHVybiB0aGUgcmVzdWx0aW5nIHNlcmlhbGl6YXRpb25cbiAgICByZXR1cm4gcmV0QXJyLmpvaW4oJyYnKS5yZXBsYWNlKHIyMCwgJysnKTtcbn1cbmV4cG9ydHMuc2VyaWFsaXplID0gc2VyaWFsaXplO1xuLyoqXG4gKiBFbmNvZGUgYSBzZXQgb2YgZm9ybSBlbGVtZW50cyBhcyBhbiBhcnJheSBvZiBuYW1lcyBhbmQgdmFsdWVzLlxuICpcbiAqIEBjYXRlZ29yeSBGb3Jtc1xuICogQGV4YW1wbGVcbiAqXG4gKiBgYGBqc1xuICogJCgnPGZvcm0+PGlucHV0IG5hbWU9XCJmb29cIiB2YWx1ZT1cImJhclwiIC8+PC9mb3JtPicpLnNlcmlhbGl6ZUFycmF5KCk7XG4gKiAvLz0+IFsgeyBuYW1lOiAnZm9vJywgdmFsdWU6ICdiYXInIH0gXVxuICogYGBgXG4gKlxuICogQHJldHVybnMgVGhlIHNlcmlhbGl6ZWQgZm9ybS5cbiAqIEBzZWUge0BsaW5rIGh0dHBzOi8vYXBpLmpxdWVyeS5jb20vc2VyaWFsaXplQXJyYXkvfVxuICovXG5mdW5jdGlvbiBzZXJpYWxpemVBcnJheSgpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIC8vIFJlc29sdmUgYWxsIGZvcm0gZWxlbWVudHMgZnJvbSBlaXRoZXIgZm9ybXMgb3IgY29sbGVjdGlvbnMgb2YgZm9ybSBlbGVtZW50c1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoXywgZWxlbSkge1xuICAgICAgICB2YXIgJGVsZW0gPSBfdGhpcy5fbWFrZShlbGVtKTtcbiAgICAgICAgaWYgKCgwLCB1dGlsc19qc18xLmlzVGFnKShlbGVtKSAmJiBlbGVtLm5hbWUgPT09ICdmb3JtJykge1xuICAgICAgICAgICAgcmV0dXJuICRlbGVtLmZpbmQoc3VibWl0dGFibGVTZWxlY3RvcikudG9BcnJheSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAkZWxlbS5maWx0ZXIoc3VibWl0dGFibGVTZWxlY3RvcikudG9BcnJheSgpO1xuICAgIH0pXG4gICAgICAgIC5maWx0ZXIoXG4gICAgLy8gVmVyaWZ5IGVsZW1lbnRzIGhhdmUgYSBuYW1lIChgYXR0ci5uYW1lYCkgYW5kIGFyZSBub3QgZGlzYWJsZWQgKGA6ZW5hYmxlZGApXG4gICAgJ1tuYW1lIT1cIlwiXTplbmFibGVkJyArXG4gICAgICAgIC8vIEFuZCBjYW5ub3QgYmUgY2xpY2tlZCAoYFt0eXBlPXN1Ym1pdF1gKSBvciBhcmUgdXNlZCBpbiBgeC13d3ctZm9ybS11cmxlbmNvZGVkYCAoYFt0eXBlPWZpbGVdYClcbiAgICAgICAgJzpub3QoOnN1Ym1pdCwgOmJ1dHRvbiwgOmltYWdlLCA6cmVzZXQsIDpmaWxlKScgK1xuICAgICAgICAvLyBBbmQgYXJlIGVpdGhlciBjaGVja2VkL2Rvbid0IGhhdmUgYSBjaGVja2FibGUgc3RhdGVcbiAgICAgICAgJzptYXRjaGVzKFtjaGVja2VkXSwgOm5vdCg6Y2hlY2tib3gsIDpyYWRpbykpJ1xuICAgIC8vIENvbnZlcnQgZWFjaCBvZiB0aGUgZWxlbWVudHMgdG8gaXRzIHZhbHVlKHMpXG4gICAgKVxuICAgICAgICAubWFwKGZ1bmN0aW9uIChfLCBlbGVtKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgdmFyICRlbGVtID0gX3RoaXMuX21ha2UoZWxlbSk7XG4gICAgICAgIHZhciBuYW1lID0gJGVsZW0uYXR0cignbmFtZScpOyAvLyBXZSBoYXZlIGZpbHRlcmVkIGZvciBlbGVtZW50cyB3aXRoIGEgbmFtZSBiZWZvcmUuXG4gICAgICAgIC8vIElmIHRoZXJlIGlzIG5vIHZhbHVlIHNldCAoZS5nLiBgdW5kZWZpbmVkYCwgYG51bGxgKSwgdGhlbiBkZWZhdWx0IHZhbHVlIHRvIGVtcHR5XG4gICAgICAgIHZhciB2YWx1ZSA9IChfYSA9ICRlbGVtLnZhbCgpKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAnJztcbiAgICAgICAgLy8gSWYgd2UgaGF2ZSBhbiBhcnJheSBvZiB2YWx1ZXMgKGUuZy4gYDxzZWxlY3QgbXVsdGlwbGU+YCksIHJldHVybiBhbiBhcnJheSBvZiBrZXkvdmFsdWUgcGFpcnNcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWUubWFwKGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgICAgICAgICAvKlxuICAgICAgICAgICAgICAgICAqIFdlIHRyaW0gcmVwbGFjZSBhbnkgbGluZSBlbmRpbmdzIChlLmcuIGBcXHJgIG9yIGBcXHJcXG5gIHdpdGggYFxcclxcbmApIHRvIGd1YXJhbnRlZSBjb25zaXN0ZW5jeSBhY3Jvc3MgcGxhdGZvcm1zXG4gICAgICAgICAgICAgICAgICogVGhlc2UgY2FuIG9jY3VyIGluc2lkZSBvZiBgPHRleHRhcmVhPidzYFxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIHJldHVybiAoeyBuYW1lOiBuYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UockNSTEYsICdcXHJcXG4nKSB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIC8vIE90aGVyd2lzZSAoZS5nLiBgPGlucHV0IHR5cGU9XCJ0ZXh0XCI+YCwgcmV0dXJuIG9ubHkgb25lIGtleS92YWx1ZSBwYWlyXG4gICAgICAgIHJldHVybiB7IG5hbWU6IG5hbWUsIHZhbHVlOiB2YWx1ZS5yZXBsYWNlKHJDUkxGLCAnXFxyXFxuJykgfTtcbiAgICB9KVxuICAgICAgICAudG9BcnJheSgpO1xufVxuZXhwb3J0cy5zZXJpYWxpemVBcnJheSA9IHNlcmlhbGl6ZUFycmF5O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Zm9ybXMuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIE1ldGhvZHMgZm9yIG1vZGlmeWluZyB0aGUgRE9NIHN0cnVjdHVyZS5cbiAqXG4gKiBAbW9kdWxlIGNoZWVyaW8vbWFuaXB1bGF0aW9uXG4gKi9cbnZhciBfX3NwcmVhZEFycmF5ID0gKHRoaXMgJiYgdGhpcy5fX3NwcmVhZEFycmF5KSB8fCBmdW5jdGlvbiAodG8sIGZyb20sIHBhY2spIHtcbiAgICBpZiAocGFjayB8fCBhcmd1bWVudHMubGVuZ3RoID09PSAyKSBmb3IgKHZhciBpID0gMCwgbCA9IGZyb20ubGVuZ3RoLCBhcjsgaSA8IGw7IGkrKykge1xuICAgICAgICBpZiAoYXIgfHwgIShpIGluIGZyb20pKSB7XG4gICAgICAgICAgICBpZiAoIWFyKSBhciA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZyb20sIDAsIGkpO1xuICAgICAgICAgICAgYXJbaV0gPSBmcm9tW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0by5jb25jYXQoYXIgfHwgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZnJvbSkpO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY2xvbmUgPSBleHBvcnRzLnRleHQgPSBleHBvcnRzLnRvU3RyaW5nID0gZXhwb3J0cy5odG1sID0gZXhwb3J0cy5lbXB0eSA9IGV4cG9ydHMucmVwbGFjZVdpdGggPSBleHBvcnRzLnJlbW92ZSA9IGV4cG9ydHMuaW5zZXJ0QmVmb3JlID0gZXhwb3J0cy5iZWZvcmUgPSBleHBvcnRzLmluc2VydEFmdGVyID0gZXhwb3J0cy5hZnRlciA9IGV4cG9ydHMud3JhcEFsbCA9IGV4cG9ydHMudW53cmFwID0gZXhwb3J0cy53cmFwSW5uZXIgPSBleHBvcnRzLndyYXAgPSBleHBvcnRzLnByZXBlbmQgPSBleHBvcnRzLmFwcGVuZCA9IGV4cG9ydHMucHJlcGVuZFRvID0gZXhwb3J0cy5hcHBlbmRUbyA9IGV4cG9ydHMuX21ha2VEb21BcnJheSA9IHZvaWQgMDtcbnZhciBkb21oYW5kbGVyXzEgPSByZXF1aXJlKFwiZG9taGFuZGxlclwiKTtcbnZhciBwYXJzZV9qc18xID0gcmVxdWlyZShcIi4uL3BhcnNlLmpzXCIpO1xudmFyIHN0YXRpY19qc18xID0gcmVxdWlyZShcIi4uL3N0YXRpYy5qc1wiKTtcbnZhciB1dGlsc19qc18xID0gcmVxdWlyZShcIi4uL3V0aWxzLmpzXCIpO1xudmFyIGRvbXV0aWxzXzEgPSByZXF1aXJlKFwiZG9tdXRpbHNcIik7XG4vKipcbiAqIENyZWF0ZSBhbiBhcnJheSBvZiBub2RlcywgcmVjdXJzaW5nIGludG8gYXJyYXlzIGFuZCBwYXJzaW5nIHN0cmluZ3MgaWYgbmVjZXNzYXJ5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY2F0ZWdvcnkgTWFuaXB1bGF0aW9uXG4gKiBAcGFyYW0gZWxlbSAtIEVsZW1lbnRzIHRvIG1ha2UgYW4gYXJyYXkgb2YuXG4gKiBAcGFyYW0gY2xvbmUgLSBPcHRpb25hbGx5IGNsb25lIG5vZGVzLlxuICogQHJldHVybnMgVGhlIGFycmF5IG9mIG5vZGVzLlxuICovXG5mdW5jdGlvbiBfbWFrZURvbUFycmF5KGVsZW0sIGNsb25lKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICBpZiAoZWxlbSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgaWYgKCgwLCB1dGlsc19qc18xLmlzQ2hlZXJpbykoZWxlbSkpIHtcbiAgICAgICAgcmV0dXJuIGNsb25lID8gKDAsIHV0aWxzX2pzXzEuY2xvbmVEb20pKGVsZW0uZ2V0KCkpIDogZWxlbS5nZXQoKTtcbiAgICB9XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZWxlbSkpIHtcbiAgICAgICAgcmV0dXJuIGVsZW0ucmVkdWNlKGZ1bmN0aW9uIChuZXdFbGVtcywgZWwpIHsgcmV0dXJuIG5ld0VsZW1zLmNvbmNhdChfdGhpcy5fbWFrZURvbUFycmF5KGVsLCBjbG9uZSkpOyB9LCBbXSk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgZWxlbSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BhcnNlKGVsZW0sIHRoaXMub3B0aW9ucywgZmFsc2UsIG51bGwpLmNoaWxkcmVuO1xuICAgIH1cbiAgICByZXR1cm4gY2xvbmUgPyAoMCwgdXRpbHNfanNfMS5jbG9uZURvbSkoW2VsZW1dKSA6IFtlbGVtXTtcbn1cbmV4cG9ydHMuX21ha2VEb21BcnJheSA9IF9tYWtlRG9tQXJyYXk7XG5mdW5jdGlvbiBfaW5zZXJ0KGNvbmNhdGVuYXRvcikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBlbGVtcyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgZWxlbXNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbGFzdElkeCA9IHRoaXMubGVuZ3RoIC0gMTtcbiAgICAgICAgcmV0dXJuICgwLCB1dGlsc19qc18xLmRvbUVhY2gpKHRoaXMsIGZ1bmN0aW9uIChlbCwgaSkge1xuICAgICAgICAgICAgaWYgKCEoMCwgZG9taGFuZGxlcl8xLmhhc0NoaWxkcmVuKShlbCkpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgdmFyIGRvbVNyYyA9IHR5cGVvZiBlbGVtc1swXSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgICAgID8gZWxlbXNbMF0uY2FsbChlbCwgaSwgX3RoaXMuX3JlbmRlcihlbC5jaGlsZHJlbikpXG4gICAgICAgICAgICAgICAgOiBlbGVtcztcbiAgICAgICAgICAgIHZhciBkb20gPSBfdGhpcy5fbWFrZURvbUFycmF5KGRvbVNyYywgaSA8IGxhc3RJZHgpO1xuICAgICAgICAgICAgY29uY2F0ZW5hdG9yKGRvbSwgZWwuY2hpbGRyZW4sIGVsKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbn1cbi8qKlxuICogTW9kaWZ5IGFuIGFycmF5IGluLXBsYWNlLCByZW1vdmluZyBzb21lIG51bWJlciBvZiBlbGVtZW50cyBhbmQgYWRkaW5nIG5ld1xuICogZWxlbWVudHMgZGlyZWN0bHkgZm9sbG93aW5nIHRoZW0uXG4gKlxuICogQHByaXZhdGVcbiAqIEBjYXRlZ29yeSBNYW5pcHVsYXRpb25cbiAqIEBwYXJhbSBhcnJheSAtIFRhcmdldCBhcnJheSB0byBzcGxpY2UuXG4gKiBAcGFyYW0gc3BsaWNlSWR4IC0gSW5kZXggYXQgd2hpY2ggdG8gYmVnaW4gY2hhbmdpbmcgdGhlIGFycmF5LlxuICogQHBhcmFtIHNwbGljZUNvdW50IC0gTnVtYmVyIG9mIGVsZW1lbnRzIHRvIHJlbW92ZSBmcm9tIHRoZSBhcnJheS5cbiAqIEBwYXJhbSBuZXdFbGVtcyAtIEVsZW1lbnRzIHRvIGluc2VydCBpbnRvIHRoZSBhcnJheS5cbiAqIEBwYXJhbSBwYXJlbnQgLSBUaGUgcGFyZW50IG9mIHRoZSBub2RlLlxuICogQHJldHVybnMgVGhlIHNwbGljZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIHVuaXF1ZVNwbGljZShhcnJheSwgc3BsaWNlSWR4LCBzcGxpY2VDb3VudCwgbmV3RWxlbXMsIHBhcmVudCkge1xuICAgIHZhciBfYSwgX2I7XG4gICAgdmFyIHNwbGljZUFyZ3MgPSBfX3NwcmVhZEFycmF5KFtcbiAgICAgICAgc3BsaWNlSWR4LFxuICAgICAgICBzcGxpY2VDb3VudFxuICAgIF0sIG5ld0VsZW1zLCB0cnVlKTtcbiAgICB2YXIgcHJldiA9IHNwbGljZUlkeCA9PT0gMCA/IG51bGwgOiBhcnJheVtzcGxpY2VJZHggLSAxXTtcbiAgICB2YXIgbmV4dCA9IHNwbGljZUlkeCArIHNwbGljZUNvdW50ID49IGFycmF5Lmxlbmd0aFxuICAgICAgICA/IG51bGxcbiAgICAgICAgOiBhcnJheVtzcGxpY2VJZHggKyBzcGxpY2VDb3VudF07XG4gICAgLypcbiAgICAgKiBCZWZvcmUgc3BsaWNpbmcgaW4gbmV3IGVsZW1lbnRzLCBlbnN1cmUgdGhleSBkbyBub3QgYWxyZWFkeSBhcHBlYXIgaW4gdGhlXG4gICAgICogY3VycmVudCBhcnJheS5cbiAgICAgKi9cbiAgICBmb3IgKHZhciBpZHggPSAwOyBpZHggPCBuZXdFbGVtcy5sZW5ndGg7ICsraWR4KSB7XG4gICAgICAgIHZhciBub2RlID0gbmV3RWxlbXNbaWR4XTtcbiAgICAgICAgdmFyIG9sZFBhcmVudCA9IG5vZGUucGFyZW50O1xuICAgICAgICBpZiAob2xkUGFyZW50KSB7XG4gICAgICAgICAgICB2YXIgb2xkU2libGluZ3MgPSBvbGRQYXJlbnQuY2hpbGRyZW47XG4gICAgICAgICAgICB2YXIgcHJldklkeCA9IG9sZFNpYmxpbmdzLmluZGV4T2Yobm9kZSk7XG4gICAgICAgICAgICBpZiAocHJldklkeCA+IC0xKSB7XG4gICAgICAgICAgICAgICAgb2xkUGFyZW50LmNoaWxkcmVuLnNwbGljZShwcmV2SWR4LCAxKTtcbiAgICAgICAgICAgICAgICBpZiAocGFyZW50ID09PSBvbGRQYXJlbnQgJiYgc3BsaWNlSWR4ID4gcHJldklkeCkge1xuICAgICAgICAgICAgICAgICAgICBzcGxpY2VBcmdzWzBdLS07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIG5vZGUucGFyZW50ID0gcGFyZW50O1xuICAgICAgICBpZiAobm9kZS5wcmV2KSB7XG4gICAgICAgICAgICBub2RlLnByZXYubmV4dCA9IChfYSA9IG5vZGUubmV4dCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAobm9kZS5uZXh0KSB7XG4gICAgICAgICAgICBub2RlLm5leHQucHJldiA9IChfYiA9IG5vZGUucHJldikgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBub2RlLnByZXYgPSBpZHggPT09IDAgPyBwcmV2IDogbmV3RWxlbXNbaWR4IC0gMV07XG4gICAgICAgIG5vZGUubmV4dCA9IGlkeCA9PT0gbmV3RWxlbXMubGVuZ3RoIC0gMSA/IG5leHQgOiBuZXdFbGVtc1tpZHggKyAxXTtcbiAgICB9XG4gICAgaWYgKHByZXYpIHtcbiAgICAgICAgcHJldi5uZXh0ID0gbmV3RWxlbXNbMF07XG4gICAgfVxuICAgIGlmIChuZXh0KSB7XG4gICAgICAgIG5leHQucHJldiA9IG5ld0VsZW1zW25ld0VsZW1zLmxlbmd0aCAtIDFdO1xuICAgIH1cbiAgICByZXR1cm4gYXJyYXkuc3BsaWNlLmFwcGx5KGFycmF5LCBzcGxpY2VBcmdzKTtcbn1cbi8qKlxuICogSW5zZXJ0IGV2ZXJ5IGVsZW1lbnQgaW4gdGhlIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzIHRvIHRoZSBlbmQgb2YgdGhlIHRhcmdldC5cbiAqXG4gKiBAY2F0ZWdvcnkgTWFuaXB1bGF0aW9uXG4gKiBAZXhhbXBsZVxuICpcbiAqIGBgYGpzXG4gKiAkKCc8bGkgY2xhc3M9XCJwbHVtXCI+UGx1bTwvbGk+JykuYXBwZW5kVG8oJyNmcnVpdHMnKTtcbiAqICQuaHRtbCgpO1xuICogLy89PiAgPHVsIGlkPVwiZnJ1aXRzXCI+XG4gKiAvLyAgICAgIDxsaSBjbGFzcz1cImFwcGxlXCI+QXBwbGU8L2xpPlxuICogLy8gICAgICA8bGkgY2xhc3M9XCJvcmFuZ2VcIj5PcmFuZ2U8L2xpPlxuICogLy8gICAgICA8bGkgY2xhc3M9XCJwZWFyXCI+UGVhcjwvbGk+XG4gKiAvLyAgICAgIDxsaSBjbGFzcz1cInBsdW1cIj5QbHVtPC9saT5cbiAqIC8vICAgIDwvdWw+XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gdGFyZ2V0IC0gRWxlbWVudCB0byBhcHBlbmQgZWxlbWVudHMgdG8uXG4gKiBAcmV0dXJucyBUaGUgaW5zdGFuY2UgaXRzZWxmLlxuICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9hcGkuanF1ZXJ5LmNvbS9hcHBlbmRUby99XG4gKi9cbmZ1bmN0aW9uIGFwcGVuZFRvKHRhcmdldCkge1xuICAgIHZhciBhcHBlbmRUYXJnZXQgPSAoMCwgdXRpbHNfanNfMS5pc0NoZWVyaW8pKHRhcmdldCkgPyB0YXJnZXQgOiB0aGlzLl9tYWtlKHRhcmdldCk7XG4gICAgYXBwZW5kVGFyZ2V0LmFwcGVuZCh0aGlzKTtcbiAgICByZXR1cm4gdGhpcztcbn1cbmV4cG9ydHMuYXBwZW5kVG8gPSBhcHBlbmRUbztcbi8qKlxuICogSW5zZXJ0IGV2ZXJ5IGVsZW1lbnQgaW4gdGhlIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzIHRvIHRoZSBiZWdpbm5pbmcgb2YgdGhlIHRhcmdldC5cbiAqXG4gKiBAY2F0ZWdvcnkgTWFuaXB1bGF0aW9uXG4gKiBAZXhhbXBsZVxuICpcbiAqIGBgYGpzXG4gKiAkKCc8bGkgY2xhc3M9XCJwbHVtXCI+UGx1bTwvbGk+JykucHJlcGVuZFRvKCcjZnJ1aXRzJyk7XG4gKiAkLmh0bWwoKTtcbiAqIC8vPT4gIDx1bCBpZD1cImZydWl0c1wiPlxuICogLy8gICAgICA8bGkgY2xhc3M9XCJwbHVtXCI+UGx1bTwvbGk+XG4gKiAvLyAgICAgIDxsaSBjbGFzcz1cImFwcGxlXCI+QXBwbGU8L2xpPlxuICogLy8gICAgICA8bGkgY2xhc3M9XCJvcmFuZ2VcIj5PcmFuZ2U8L2xpPlxuICogLy8gICAgICA8bGkgY2xhc3M9XCJwZWFyXCI+UGVhcjwvbGk+XG4gKiAvLyAgICA8L3VsPlxuICogYGBgXG4gKlxuICogQHBhcmFtIHRhcmdldCAtIEVsZW1lbnQgdG8gcHJlcGVuZCBlbGVtZW50cyB0by5cbiAqIEByZXR1cm5zIFRoZSBpbnN0YW5jZSBpdHNlbGYuXG4gKiBAc2VlIHtAbGluayBodHRwczovL2FwaS5qcXVlcnkuY29tL3ByZXBlbmRUby99XG4gKi9cbmZ1bmN0aW9uIHByZXBlbmRUbyh0YXJnZXQpIHtcbiAgICB2YXIgcHJlcGVuZFRhcmdldCA9ICgwLCB1dGlsc19qc18xLmlzQ2hlZXJpbykodGFyZ2V0KSA/IHRhcmdldCA6IHRoaXMuX21ha2UodGFyZ2V0KTtcbiAgICBwcmVwZW5kVGFyZ2V0LnByZXBlbmQodGhpcyk7XG4gICAgcmV0dXJuIHRoaXM7XG59XG5leHBvcnRzLnByZXBlbmRUbyA9IHByZXBlbmRUbztcbi8qKlxuICogSW5zZXJ0cyBjb250ZW50IGFzIHRoZSBfbGFzdF8gY2hpbGQgb2YgZWFjaCBvZiB0aGUgc2VsZWN0ZWQgZWxlbWVudHMuXG4gKlxuICogQGNhdGVnb3J5IE1hbmlwdWxhdGlvblxuICogQGV4YW1wbGVcbiAqXG4gKiBgYGBqc1xuICogJCgndWwnKS5hcHBlbmQoJzxsaSBjbGFzcz1cInBsdW1cIj5QbHVtPC9saT4nKTtcbiAqICQuaHRtbCgpO1xuICogLy89PiAgPHVsIGlkPVwiZnJ1aXRzXCI+XG4gKiAvLyAgICAgIDxsaSBjbGFzcz1cImFwcGxlXCI+QXBwbGU8L2xpPlxuICogLy8gICAgICA8bGkgY2xhc3M9XCJvcmFuZ2VcIj5PcmFuZ2U8L2xpPlxuICogLy8gICAgICA8bGkgY2xhc3M9XCJwZWFyXCI+UGVhcjwvbGk+XG4gKiAvLyAgICAgIDxsaSBjbGFzcz1cInBsdW1cIj5QbHVtPC9saT5cbiAqIC8vICAgIDwvdWw+XG4gKiBgYGBcbiAqXG4gKiBAc2VlIHtAbGluayBodHRwczovL2FwaS5qcXVlcnkuY29tL2FwcGVuZC99XG4gKi9cbmV4cG9ydHMuYXBwZW5kID0gX2luc2VydChmdW5jdGlvbiAoZG9tLCBjaGlsZHJlbiwgcGFyZW50KSB7XG4gICAgdW5pcXVlU3BsaWNlKGNoaWxkcmVuLCBjaGlsZHJlbi5sZW5ndGgsIDAsIGRvbSwgcGFyZW50KTtcbn0pO1xuLyoqXG4gKiBJbnNlcnRzIGNvbnRlbnQgYXMgdGhlIF9maXJzdF8gY2hpbGQgb2YgZWFjaCBvZiB0aGUgc2VsZWN0ZWQgZWxlbWVudHMuXG4gKlxuICogQGNhdGVnb3J5IE1hbmlwdWxhdGlvblxuICogQGV4YW1wbGVcbiAqXG4gKiBgYGBqc1xuICogJCgndWwnKS5wcmVwZW5kKCc8bGkgY2xhc3M9XCJwbHVtXCI+UGx1bTwvbGk+Jyk7XG4gKiAkLmh0bWwoKTtcbiAqIC8vPT4gIDx1bCBpZD1cImZydWl0c1wiPlxuICogLy8gICAgICA8bGkgY2xhc3M9XCJwbHVtXCI+UGx1bTwvbGk+XG4gKiAvLyAgICAgIDxsaSBjbGFzcz1cImFwcGxlXCI+QXBwbGU8L2xpPlxuICogLy8gICAgICA8bGkgY2xhc3M9XCJvcmFuZ2VcIj5PcmFuZ2U8L2xpPlxuICogLy8gICAgICA8bGkgY2xhc3M9XCJwZWFyXCI+UGVhcjwvbGk+XG4gKiAvLyAgICA8L3VsPlxuICogYGBgXG4gKlxuICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9hcGkuanF1ZXJ5LmNvbS9wcmVwZW5kL31cbiAqL1xuZXhwb3J0cy5wcmVwZW5kID0gX2luc2VydChmdW5jdGlvbiAoZG9tLCBjaGlsZHJlbiwgcGFyZW50KSB7XG4gICAgdW5pcXVlU3BsaWNlKGNoaWxkcmVuLCAwLCAwLCBkb20sIHBhcmVudCk7XG59KTtcbmZ1bmN0aW9uIF93cmFwKGluc2VydCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAod3JhcHBlcikge1xuICAgICAgICB2YXIgbGFzdElkeCA9IHRoaXMubGVuZ3RoIC0gMTtcbiAgICAgICAgdmFyIGxhc3RQYXJlbnQgPSB0aGlzLnBhcmVudHMoKS5sYXN0KCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGVsID0gdGhpc1tpXTtcbiAgICAgICAgICAgIHZhciB3cmFwXzEgPSB0eXBlb2Ygd3JhcHBlciA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgICAgID8gd3JhcHBlci5jYWxsKGVsLCBpLCBlbClcbiAgICAgICAgICAgICAgICA6IHR5cGVvZiB3cmFwcGVyID09PSAnc3RyaW5nJyAmJiAhKDAsIHV0aWxzX2pzXzEuaXNIdG1sKSh3cmFwcGVyKVxuICAgICAgICAgICAgICAgICAgICA/IGxhc3RQYXJlbnQuZmluZCh3cmFwcGVyKS5jbG9uZSgpXG4gICAgICAgICAgICAgICAgICAgIDogd3JhcHBlcjtcbiAgICAgICAgICAgIHZhciB3cmFwcGVyRG9tID0gdGhpcy5fbWFrZURvbUFycmF5KHdyYXBfMSwgaSA8IGxhc3RJZHgpWzBdO1xuICAgICAgICAgICAgaWYgKCF3cmFwcGVyRG9tIHx8ICEoMCwgZG9taGFuZGxlcl8xLmhhc0NoaWxkcmVuKSh3cmFwcGVyRG9tKSlcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIHZhciBlbEluc2VydExvY2F0aW9uID0gd3JhcHBlckRvbTtcbiAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgKiBGaW5kIHRoZSBkZWVwZXN0IGNoaWxkLiBPbmx5IGNvbnNpZGVyIHRoZSBmaXJzdCB0YWcgY2hpbGQgb2YgZWFjaCBub2RlXG4gICAgICAgICAgICAgKiAoaWdub3JlIHRleHQpOyBzdG9wIGlmIG5vIGNoaWxkcmVuIGFyZSBmb3VuZC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgdmFyIGogPSAwO1xuICAgICAgICAgICAgd2hpbGUgKGogPCBlbEluc2VydExvY2F0aW9uLmNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHZhciBjaGlsZCA9IGVsSW5zZXJ0TG9jYXRpb24uY2hpbGRyZW5bal07XG4gICAgICAgICAgICAgICAgaWYgKCgwLCB1dGlsc19qc18xLmlzVGFnKShjaGlsZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgZWxJbnNlcnRMb2NhdGlvbiA9IGNoaWxkO1xuICAgICAgICAgICAgICAgICAgICBqID0gMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGorKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpbnNlcnQoZWwsIGVsSW5zZXJ0TG9jYXRpb24sIFt3cmFwcGVyRG9tXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbn1cbi8qKlxuICogVGhlIC53cmFwKCkgZnVuY3Rpb24gY2FuIHRha2UgYW55IHN0cmluZyBvciBvYmplY3QgdGhhdCBjb3VsZCBiZSBwYXNzZWQgdG9cbiAqIHRoZSAkKCkgZmFjdG9yeSBmdW5jdGlvbiB0byBzcGVjaWZ5IGEgRE9NIHN0cnVjdHVyZS4gVGhpcyBzdHJ1Y3R1cmUgbWF5IGJlXG4gKiBuZXN0ZWQgc2V2ZXJhbCBsZXZlbHMgZGVlcCwgYnV0IHNob3VsZCBjb250YWluIG9ubHkgb25lIGlubW9zdCBlbGVtZW50LiBBXG4gKiBjb3B5IG9mIHRoaXMgc3RydWN0dXJlIHdpbGwgYmUgd3JhcHBlZCBhcm91bmQgZWFjaCBvZiB0aGUgZWxlbWVudHMgaW4gdGhlIHNldFxuICogb2YgbWF0Y2hlZCBlbGVtZW50cy4gVGhpcyBtZXRob2QgcmV0dXJucyB0aGUgb3JpZ2luYWwgc2V0IG9mIGVsZW1lbnRzIGZvclxuICogY2hhaW5pbmcgcHVycG9zZXMuXG4gKlxuICogQGNhdGVnb3J5IE1hbmlwdWxhdGlvblxuICogQGV4YW1wbGVcbiAqXG4gKiBgYGBqc1xuICogY29uc3QgcmVkRnJ1aXQgPSAkKCc8ZGl2IGNsYXNzPVwicmVkLWZydWl0XCI+PC9kaXY+Jyk7XG4gKiAkKCcuYXBwbGUnKS53cmFwKHJlZEZydWl0KTtcbiAqXG4gKiAvLz0+IDx1bCBpZD1cImZydWl0c1wiPlxuICogLy8gICAgIDxkaXYgY2xhc3M9XCJyZWQtZnJ1aXRcIj5cbiAqIC8vICAgICAgPGxpIGNsYXNzPVwiYXBwbGVcIj5BcHBsZTwvbGk+XG4gKiAvLyAgICAgPC9kaXY+XG4gKiAvLyAgICAgPGxpIGNsYXNzPVwib3JhbmdlXCI+T3JhbmdlPC9saT5cbiAqIC8vICAgICA8bGkgY2xhc3M9XCJwbHVtXCI+UGx1bTwvbGk+XG4gKiAvLyAgIDwvdWw+XG4gKlxuICogY29uc3QgaGVhbHRoeSA9ICQoJzxkaXYgY2xhc3M9XCJoZWFsdGh5XCI+PC9kaXY+Jyk7XG4gKiAkKCdsaScpLndyYXAoaGVhbHRoeSk7XG4gKlxuICogLy89PiA8dWwgaWQ9XCJmcnVpdHNcIj5cbiAqIC8vICAgICA8ZGl2IGNsYXNzPVwiaGVhbHRoeVwiPlxuICogLy8gICAgICAgPGxpIGNsYXNzPVwiYXBwbGVcIj5BcHBsZTwvbGk+XG4gKiAvLyAgICAgPC9kaXY+XG4gKiAvLyAgICAgPGRpdiBjbGFzcz1cImhlYWx0aHlcIj5cbiAqIC8vICAgICAgIDxsaSBjbGFzcz1cIm9yYW5nZVwiPk9yYW5nZTwvbGk+XG4gKiAvLyAgICAgPC9kaXY+XG4gKiAvLyAgICAgPGRpdiBjbGFzcz1cImhlYWx0aHlcIj5cbiAqIC8vICAgICAgICA8bGkgY2xhc3M9XCJwbHVtXCI+UGx1bTwvbGk+XG4gKiAvLyAgICAgPC9kaXY+XG4gKiAvLyAgIDwvdWw+XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gd3JhcHBlciAtIFRoZSBET00gc3RydWN0dXJlIHRvIHdyYXAgYXJvdW5kIGVhY2ggZWxlbWVudCBpbiB0aGUgc2VsZWN0aW9uLlxuICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9hcGkuanF1ZXJ5LmNvbS93cmFwL31cbiAqL1xuZXhwb3J0cy53cmFwID0gX3dyYXAoZnVuY3Rpb24gKGVsLCBlbEluc2VydExvY2F0aW9uLCB3cmFwcGVyRG9tKSB7XG4gICAgdmFyIHBhcmVudCA9IGVsLnBhcmVudDtcbiAgICBpZiAoIXBhcmVudClcbiAgICAgICAgcmV0dXJuO1xuICAgIHZhciBzaWJsaW5ncyA9IHBhcmVudC5jaGlsZHJlbjtcbiAgICB2YXIgaW5kZXggPSBzaWJsaW5ncy5pbmRleE9mKGVsKTtcbiAgICAoMCwgcGFyc2VfanNfMS51cGRhdGUpKFtlbF0sIGVsSW5zZXJ0TG9jYXRpb24pO1xuICAgIC8qXG4gICAgICogVGhlIHByZXZpb3VzIG9wZXJhdGlvbiByZW1vdmVkIHRoZSBjdXJyZW50IGVsZW1lbnQgZnJvbSB0aGUgYHNpYmxpbmdzYFxuICAgICAqIGFycmF5LCBzbyB0aGUgYGRvbWAgYXJyYXkgY2FuIGJlIGluc2VydGVkIHdpdGhvdXQgcmVtb3ZpbmcgYW55XG4gICAgICogYWRkaXRpb25hbCBlbGVtZW50cy5cbiAgICAgKi9cbiAgICB1bmlxdWVTcGxpY2Uoc2libGluZ3MsIGluZGV4LCAwLCB3cmFwcGVyRG9tLCBwYXJlbnQpO1xufSk7XG4vKipcbiAqIFRoZSAud3JhcElubmVyKCkgZnVuY3Rpb24gY2FuIHRha2UgYW55IHN0cmluZyBvciBvYmplY3QgdGhhdCBjb3VsZCBiZSBwYXNzZWRcbiAqIHRvIHRoZSAkKCkgZmFjdG9yeSBmdW5jdGlvbiB0byBzcGVjaWZ5IGEgRE9NIHN0cnVjdHVyZS4gVGhpcyBzdHJ1Y3R1cmUgbWF5IGJlXG4gKiBuZXN0ZWQgc2V2ZXJhbCBsZXZlbHMgZGVlcCwgYnV0IHNob3VsZCBjb250YWluIG9ubHkgb25lIGlubW9zdCBlbGVtZW50LiBUaGVcbiAqIHN0cnVjdHVyZSB3aWxsIGJlIHdyYXBwZWQgYXJvdW5kIHRoZSBjb250ZW50IG9mIGVhY2ggb2YgdGhlIGVsZW1lbnRzIGluIHRoZVxuICogc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMuXG4gKlxuICogQGNhdGVnb3J5IE1hbmlwdWxhdGlvblxuICogQGV4YW1wbGVcbiAqXG4gKiBgYGBqc1xuICogY29uc3QgcmVkRnJ1aXQgPSAkKCc8ZGl2IGNsYXNzPVwicmVkLWZydWl0XCI+PC9kaXY+Jyk7XG4gKiAkKCcuYXBwbGUnKS53cmFwSW5uZXIocmVkRnJ1aXQpO1xuICpcbiAqIC8vPT4gPHVsIGlkPVwiZnJ1aXRzXCI+XG4gKiAvLyAgICAgPGxpIGNsYXNzPVwiYXBwbGVcIj5cbiAqIC8vICAgICAgIDxkaXYgY2xhc3M9XCJyZWQtZnJ1aXRcIj5BcHBsZTwvZGl2PlxuICogLy8gICAgIDwvbGk+XG4gKiAvLyAgICAgPGxpIGNsYXNzPVwib3JhbmdlXCI+T3JhbmdlPC9saT5cbiAqIC8vICAgICA8bGkgY2xhc3M9XCJwZWFyXCI+UGVhcjwvbGk+XG4gKiAvLyAgIDwvdWw+XG4gKlxuICogY29uc3QgaGVhbHRoeSA9ICQoJzxkaXYgY2xhc3M9XCJoZWFsdGh5XCI+PC9kaXY+Jyk7XG4gKiAkKCdsaScpLndyYXBJbm5lcihoZWFsdGh5KTtcbiAqXG4gKiAvLz0+IDx1bCBpZD1cImZydWl0c1wiPlxuICogLy8gICAgIDxsaSBjbGFzcz1cImFwcGxlXCI+XG4gKiAvLyAgICAgICA8ZGl2IGNsYXNzPVwiaGVhbHRoeVwiPkFwcGxlPC9kaXY+XG4gKiAvLyAgICAgPC9saT5cbiAqIC8vICAgICA8bGkgY2xhc3M9XCJvcmFuZ2VcIj5cbiAqIC8vICAgICAgIDxkaXYgY2xhc3M9XCJoZWFsdGh5XCI+T3JhbmdlPC9kaXY+XG4gKiAvLyAgICAgPC9saT5cbiAqIC8vICAgICA8bGkgY2xhc3M9XCJwZWFyXCI+XG4gKiAvLyAgICAgICA8ZGl2IGNsYXNzPVwiaGVhbHRoeVwiPlBlYXI8L2Rpdj5cbiAqIC8vICAgICA8L2xpPlxuICogLy8gICA8L3VsPlxuICogYGBgXG4gKlxuICogQHBhcmFtIHdyYXBwZXIgLSBUaGUgRE9NIHN0cnVjdHVyZSB0byB3cmFwIGFyb3VuZCB0aGUgY29udGVudCBvZiBlYWNoIGVsZW1lbnRcbiAqICAgaW4gdGhlIHNlbGVjdGlvbi5cbiAqIEByZXR1cm5zIFRoZSBpbnN0YW5jZSBpdHNlbGYsIGZvciBjaGFpbmluZy5cbiAqIEBzZWUge0BsaW5rIGh0dHBzOi8vYXBpLmpxdWVyeS5jb20vd3JhcElubmVyL31cbiAqL1xuZXhwb3J0cy53cmFwSW5uZXIgPSBfd3JhcChmdW5jdGlvbiAoZWwsIGVsSW5zZXJ0TG9jYXRpb24sIHdyYXBwZXJEb20pIHtcbiAgICBpZiAoISgwLCBkb21oYW5kbGVyXzEuaGFzQ2hpbGRyZW4pKGVsKSlcbiAgICAgICAgcmV0dXJuO1xuICAgICgwLCBwYXJzZV9qc18xLnVwZGF0ZSkoZWwuY2hpbGRyZW4sIGVsSW5zZXJ0TG9jYXRpb24pO1xuICAgICgwLCBwYXJzZV9qc18xLnVwZGF0ZSkod3JhcHBlckRvbSwgZWwpO1xufSk7XG4vKipcbiAqIFRoZSAudW53cmFwKCkgZnVuY3Rpb24sIHJlbW92ZXMgdGhlIHBhcmVudHMgb2YgdGhlIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzXG4gKiBmcm9tIHRoZSBET00sIGxlYXZpbmcgdGhlIG1hdGNoZWQgZWxlbWVudHMgaW4gdGhlaXIgcGxhY2UuXG4gKlxuICogQGNhdGVnb3J5IE1hbmlwdWxhdGlvblxuICogQGV4YW1wbGUgPGNhcHRpb24+d2l0aG91dCBzZWxlY3RvcjwvY2FwdGlvbj5cbiAqXG4gKiBgYGBqc1xuICogY29uc3QgJCA9IGNoZWVyaW8ubG9hZChcbiAqICAgJzxkaXYgaWQ9dGVzdD5cXG4gIDxkaXY+PHA+SGVsbG88L3A+PC9kaXY+XFxuICA8ZGl2PjxwPldvcmxkPC9wPjwvZGl2PlxcbjwvZGl2PidcbiAqICk7XG4gKiAkKCcjdGVzdCBwJykudW53cmFwKCk7XG4gKlxuICogLy89PiA8ZGl2IGlkPXRlc3Q+XG4gKiAvLyAgICAgPHA+SGVsbG88L3A+XG4gKiAvLyAgICAgPHA+V29ybGQ8L3A+XG4gKiAvLyAgIDwvZGl2PlxuICogYGBgXG4gKlxuICogQGV4YW1wbGUgPGNhcHRpb24+d2l0aCBzZWxlY3RvcjwvY2FwdGlvbj5cbiAqXG4gKiBgYGBqc1xuICogY29uc3QgJCA9IGNoZWVyaW8ubG9hZChcbiAqICAgJzxkaXYgaWQ9dGVzdD5cXG4gIDxwPkhlbGxvPC9wPlxcbiAgPGI+PHA+V29ybGQ8L3A+PC9iPlxcbjwvZGl2PidcbiAqICk7XG4gKiAkKCcjdGVzdCBwJykudW53cmFwKCdiJyk7XG4gKlxuICogLy89PiA8ZGl2IGlkPXRlc3Q+XG4gKiAvLyAgICAgPHA+SGVsbG88L3A+XG4gKiAvLyAgICAgPHA+V29ybGQ8L3A+XG4gKiAvLyAgIDwvZGl2PlxuICogYGBgXG4gKlxuICogQHBhcmFtIHNlbGVjdG9yIC0gQSBzZWxlY3RvciB0byBjaGVjayB0aGUgcGFyZW50IGVsZW1lbnQgYWdhaW5zdC4gSWYgYW5cbiAqICAgZWxlbWVudCdzIHBhcmVudCBkb2VzIG5vdCBtYXRjaCB0aGUgc2VsZWN0b3IsIHRoZSBlbGVtZW50IHdvbid0IGJlIHVud3JhcHBlZC5cbiAqIEByZXR1cm5zIFRoZSBpbnN0YW5jZSBpdHNlbGYsIGZvciBjaGFpbmluZy5cbiAqIEBzZWUge0BsaW5rIGh0dHBzOi8vYXBpLmpxdWVyeS5jb20vdW53cmFwL31cbiAqL1xuZnVuY3Rpb24gdW53cmFwKHNlbGVjdG9yKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICB0aGlzLnBhcmVudChzZWxlY3RvcilcbiAgICAgICAgLm5vdCgnYm9keScpXG4gICAgICAgIC5lYWNoKGZ1bmN0aW9uIChfLCBlbCkge1xuICAgICAgICBfdGhpcy5fbWFrZShlbCkucmVwbGFjZVdpdGgoZWwuY2hpbGRyZW4pO1xuICAgIH0pO1xuICAgIHJldHVybiB0aGlzO1xufVxuZXhwb3J0cy51bndyYXAgPSB1bndyYXA7XG4vKipcbiAqIFRoZSAud3JhcEFsbCgpIGZ1bmN0aW9uIGNhbiB0YWtlIGFueSBzdHJpbmcgb3Igb2JqZWN0IHRoYXQgY291bGQgYmUgcGFzc2VkIHRvXG4gKiB0aGUgJCgpIGZ1bmN0aW9uIHRvIHNwZWNpZnkgYSBET00gc3RydWN0dXJlLiBUaGlzIHN0cnVjdHVyZSBtYXkgYmUgbmVzdGVkXG4gKiBzZXZlcmFsIGxldmVscyBkZWVwLCBidXQgc2hvdWxkIGNvbnRhaW4gb25seSBvbmUgaW5tb3N0IGVsZW1lbnQuIFRoZVxuICogc3RydWN0dXJlIHdpbGwgYmUgd3JhcHBlZCBhcm91bmQgYWxsIG9mIHRoZSBlbGVtZW50cyBpbiB0aGUgc2V0IG9mIG1hdGNoZWRcbiAqIGVsZW1lbnRzLCBhcyBhIHNpbmdsZSBncm91cC5cbiAqXG4gKiBAY2F0ZWdvcnkgTWFuaXB1bGF0aW9uXG4gKiBAZXhhbXBsZSA8Y2FwdGlvbj5XaXRoIG1hcmt1cCBwYXNzZWQgdG8gYHdyYXBBbGxgPC9jYXB0aW9uPlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCAkID0gY2hlZXJpby5sb2FkKFxuICogICAnPGRpdiBjbGFzcz1cImNvbnRhaW5lclwiPjxkaXYgY2xhc3M9XCJpbm5lclwiPkZpcnN0PC9kaXY+PGRpdiBjbGFzcz1cImlubmVyXCI+U2Vjb25kPC9kaXY+PC9kaXY+J1xuICogKTtcbiAqICQoJy5pbm5lcicpLndyYXBBbGwoXCI8ZGl2IGNsYXNzPSduZXcnPjwvZGl2PlwiKTtcbiAqXG4gKiAvLz0+IDxkaXYgY2xhc3M9XCJjb250YWluZXJcIj5cbiAqIC8vICAgICA8ZGl2IGNsYXNzPSduZXcnPlxuICogLy8gICAgICAgPGRpdiBjbGFzcz1cImlubmVyXCI+Rmlyc3Q8L2Rpdj5cbiAqIC8vICAgICAgIDxkaXYgY2xhc3M9XCJpbm5lclwiPlNlY29uZDwvZGl2PlxuICogLy8gICAgIDwvZGl2PlxuICogLy8gICA8L2Rpdj5cbiAqIGBgYFxuICpcbiAqIEBleGFtcGxlIDxjYXB0aW9uPldpdGggYW4gZXhpc3RpbmcgY2hlZXJpbyBpbnN0YW5jZTwvY2FwdGlvbj5cbiAqXG4gKiBgYGBqc1xuICogY29uc3QgJCA9IGNoZWVyaW8ubG9hZChcbiAqICAgJzxzcGFuPlNwYW4gMTwvc3Bhbj48c3Ryb25nPlN0cm9uZzwvc3Ryb25nPjxzcGFuPlNwYW4gMjwvc3Bhbj4nXG4gKiApO1xuICogY29uc3Qgd3JhcCA9ICQoJzxkaXY+PHA+PGVtPjxiPjwvYj48L2VtPjwvcD48L2Rpdj4nKTtcbiAqICQoJ3NwYW4nKS53cmFwQWxsKHdyYXApO1xuICpcbiAqIC8vPT4gPGRpdj5cbiAqIC8vICAgICA8cD5cbiAqIC8vICAgICAgIDxlbT5cbiAqIC8vICAgICAgICAgPGI+XG4gKiAvLyAgICAgICAgICAgPHNwYW4+U3BhbiAxPC9zcGFuPlxuICogLy8gICAgICAgICAgIDxzcGFuPlNwYW4gMjwvc3Bhbj5cbiAqIC8vICAgICAgICAgPC9iPlxuICogLy8gICAgICAgPC9lbT5cbiAqIC8vICAgICA8L3A+XG4gKiAvLyAgIDwvZGl2PlxuICogLy8gICA8c3Ryb25nPlN0cm9uZzwvc3Ryb25nPlxuICogYGBgXG4gKlxuICogQHBhcmFtIHdyYXBwZXIgLSBUaGUgRE9NIHN0cnVjdHVyZSB0byB3cmFwIGFyb3VuZCBhbGwgbWF0Y2hlZCBlbGVtZW50cyBpbiB0aGVcbiAqICAgc2VsZWN0aW9uLlxuICogQHJldHVybnMgVGhlIGluc3RhbmNlIGl0c2VsZi5cbiAqIEBzZWUge0BsaW5rIGh0dHBzOi8vYXBpLmpxdWVyeS5jb20vd3JhcEFsbC99XG4gKi9cbmZ1bmN0aW9uIHdyYXBBbGwod3JhcHBlcikge1xuICAgIHZhciBlbCA9IHRoaXNbMF07XG4gICAgaWYgKGVsKSB7XG4gICAgICAgIHZhciB3cmFwXzIgPSB0aGlzLl9tYWtlKHR5cGVvZiB3cmFwcGVyID09PSAnZnVuY3Rpb24nID8gd3JhcHBlci5jYWxsKGVsLCAwLCBlbCkgOiB3cmFwcGVyKS5pbnNlcnRCZWZvcmUoZWwpO1xuICAgICAgICAvLyBJZiBodG1sIGlzIGdpdmVuIGFzIHdyYXBwZXIsIHdyYXAgbWF5IGNvbnRhaW4gdGV4dCBlbGVtZW50c1xuICAgICAgICB2YXIgZWxJbnNlcnRMb2NhdGlvbiA9IHZvaWQgMDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB3cmFwXzIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmICh3cmFwXzJbaV0udHlwZSA9PT0gJ3RhZycpXG4gICAgICAgICAgICAgICAgZWxJbnNlcnRMb2NhdGlvbiA9IHdyYXBfMltpXTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaiA9IDA7XG4gICAgICAgIC8qXG4gICAgICAgICAqIEZpbmQgdGhlIGRlZXBlc3QgY2hpbGQuIE9ubHkgY29uc2lkZXIgdGhlIGZpcnN0IHRhZyBjaGlsZCBvZiBlYWNoIG5vZGVcbiAgICAgICAgICogKGlnbm9yZSB0ZXh0KTsgc3RvcCBpZiBubyBjaGlsZHJlbiBhcmUgZm91bmQuXG4gICAgICAgICAqL1xuICAgICAgICB3aGlsZSAoZWxJbnNlcnRMb2NhdGlvbiAmJiBqIDwgZWxJbnNlcnRMb2NhdGlvbi5jaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgICAgICAgIHZhciBjaGlsZCA9IGVsSW5zZXJ0TG9jYXRpb24uY2hpbGRyZW5bal07XG4gICAgICAgICAgICBpZiAoY2hpbGQudHlwZSA9PT0gJ3RhZycpIHtcbiAgICAgICAgICAgICAgICBlbEluc2VydExvY2F0aW9uID0gY2hpbGQ7XG4gICAgICAgICAgICAgICAgaiA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBqKys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVsSW5zZXJ0TG9jYXRpb24pXG4gICAgICAgICAgICB0aGlzLl9tYWtlKGVsSW5zZXJ0TG9jYXRpb24pLmFwcGVuZCh0aGlzKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG59XG5leHBvcnRzLndyYXBBbGwgPSB3cmFwQWxsO1xuLyogZXNsaW50LWRpc2FibGUganNkb2MvY2hlY2stcGFyYW0tbmFtZXMqL1xuLyoqXG4gKiBJbnNlcnQgY29udGVudCBuZXh0IHRvIGVhY2ggZWxlbWVudCBpbiB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMuXG4gKlxuICogQGNhdGVnb3J5IE1hbmlwdWxhdGlvblxuICogQGV4YW1wbGVcbiAqXG4gKiBgYGBqc1xuICogJCgnLmFwcGxlJykuYWZ0ZXIoJzxsaSBjbGFzcz1cInBsdW1cIj5QbHVtPC9saT4nKTtcbiAqICQuaHRtbCgpO1xuICogLy89PiAgPHVsIGlkPVwiZnJ1aXRzXCI+XG4gKiAvLyAgICAgIDxsaSBjbGFzcz1cImFwcGxlXCI+QXBwbGU8L2xpPlxuICogLy8gICAgICA8bGkgY2xhc3M9XCJwbHVtXCI+UGx1bTwvbGk+XG4gKiAvLyAgICAgIDxsaSBjbGFzcz1cIm9yYW5nZVwiPk9yYW5nZTwvbGk+XG4gKiAvLyAgICAgIDxsaSBjbGFzcz1cInBlYXJcIj5QZWFyPC9saT5cbiAqIC8vICAgIDwvdWw+XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gY29udGVudCAtIEhUTUwgc3RyaW5nLCBET00gZWxlbWVudCwgYXJyYXkgb2YgRE9NIGVsZW1lbnRzIG9yIENoZWVyaW9cbiAqICAgdG8gaW5zZXJ0IGFmdGVyIGVhY2ggZWxlbWVudCBpbiB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMuXG4gKiBAcmV0dXJucyBUaGUgaW5zdGFuY2UgaXRzZWxmLlxuICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9hcGkuanF1ZXJ5LmNvbS9hZnRlci99XG4gKi9cbmZ1bmN0aW9uIGFmdGVyKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgdmFyIGVsZW1zID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgZWxlbXNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgdmFyIGxhc3RJZHggPSB0aGlzLmxlbmd0aCAtIDE7XG4gICAgcmV0dXJuICgwLCB1dGlsc19qc18xLmRvbUVhY2gpKHRoaXMsIGZ1bmN0aW9uIChlbCwgaSkge1xuICAgICAgICB2YXIgcGFyZW50ID0gZWwucGFyZW50O1xuICAgICAgICBpZiAoISgwLCBkb21oYW5kbGVyXzEuaGFzQ2hpbGRyZW4pKGVsKSB8fCAhcGFyZW50KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHNpYmxpbmdzID0gcGFyZW50LmNoaWxkcmVuO1xuICAgICAgICB2YXIgaW5kZXggPSBzaWJsaW5ncy5pbmRleE9mKGVsKTtcbiAgICAgICAgLy8gSWYgbm90IGZvdW5kLCBtb3ZlIG9uXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAgIGlmIChpbmRleCA8IDApXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHZhciBkb21TcmMgPSB0eXBlb2YgZWxlbXNbMF0gPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgID8gZWxlbXNbMF0uY2FsbChlbCwgaSwgX3RoaXMuX3JlbmRlcihlbC5jaGlsZHJlbikpXG4gICAgICAgICAgICA6IGVsZW1zO1xuICAgICAgICB2YXIgZG9tID0gX3RoaXMuX21ha2VEb21BcnJheShkb21TcmMsIGkgPCBsYXN0SWR4KTtcbiAgICAgICAgLy8gQWRkIGVsZW1lbnQgYWZ0ZXIgYHRoaXNgIGVsZW1lbnRcbiAgICAgICAgdW5pcXVlU3BsaWNlKHNpYmxpbmdzLCBpbmRleCArIDEsIDAsIGRvbSwgcGFyZW50KTtcbiAgICB9KTtcbn1cbmV4cG9ydHMuYWZ0ZXIgPSBhZnRlcjtcbi8qIGVzbGludC1lbmFibGUganNkb2MvY2hlY2stcGFyYW0tbmFtZXMqL1xuLyoqXG4gKiBJbnNlcnQgZXZlcnkgZWxlbWVudCBpbiB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMgYWZ0ZXIgdGhlIHRhcmdldC5cbiAqXG4gKiBAY2F0ZWdvcnkgTWFuaXB1bGF0aW9uXG4gKiBAZXhhbXBsZVxuICpcbiAqIGBgYGpzXG4gKiAkKCc8bGkgY2xhc3M9XCJwbHVtXCI+UGx1bTwvbGk+JykuaW5zZXJ0QWZ0ZXIoJy5hcHBsZScpO1xuICogJC5odG1sKCk7XG4gKiAvLz0+ICA8dWwgaWQ9XCJmcnVpdHNcIj5cbiAqIC8vICAgICAgPGxpIGNsYXNzPVwiYXBwbGVcIj5BcHBsZTwvbGk+XG4gKiAvLyAgICAgIDxsaSBjbGFzcz1cInBsdW1cIj5QbHVtPC9saT5cbiAqIC8vICAgICAgPGxpIGNsYXNzPVwib3JhbmdlXCI+T3JhbmdlPC9saT5cbiAqIC8vICAgICAgPGxpIGNsYXNzPVwicGVhclwiPlBlYXI8L2xpPlxuICogLy8gICAgPC91bD5cbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB0YXJnZXQgLSBFbGVtZW50IHRvIGluc2VydCBlbGVtZW50cyBhZnRlci5cbiAqIEByZXR1cm5zIFRoZSBzZXQgb2YgbmV3bHkgaW5zZXJ0ZWQgZWxlbWVudHMuXG4gKiBAc2VlIHtAbGluayBodHRwczovL2FwaS5qcXVlcnkuY29tL2luc2VydEFmdGVyL31cbiAqL1xuZnVuY3Rpb24gaW5zZXJ0QWZ0ZXIodGFyZ2V0KSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICBpZiAodHlwZW9mIHRhcmdldCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGFyZ2V0ID0gdGhpcy5fbWFrZSh0YXJnZXQpO1xuICAgIH1cbiAgICB0aGlzLnJlbW92ZSgpO1xuICAgIHZhciBjbG9uZXMgPSBbXTtcbiAgICB0aGlzLl9tYWtlRG9tQXJyYXkodGFyZ2V0KS5mb3JFYWNoKGZ1bmN0aW9uIChlbCkge1xuICAgICAgICB2YXIgY2xvbmVkU2VsZiA9IF90aGlzLmNsb25lKCkudG9BcnJheSgpO1xuICAgICAgICB2YXIgcGFyZW50ID0gZWwucGFyZW50O1xuICAgICAgICBpZiAoIXBhcmVudCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzaWJsaW5ncyA9IHBhcmVudC5jaGlsZHJlbjtcbiAgICAgICAgdmFyIGluZGV4ID0gc2libGluZ3MuaW5kZXhPZihlbCk7XG4gICAgICAgIC8vIElmIG5vdCBmb3VuZCwgbW92ZSBvblxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICBpZiAoaW5kZXggPCAwKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAvLyBBZGQgY2xvbmVkIGB0aGlzYCBlbGVtZW50KHMpIGFmdGVyIHRhcmdldCBlbGVtZW50XG4gICAgICAgIHVuaXF1ZVNwbGljZShzaWJsaW5ncywgaW5kZXggKyAxLCAwLCBjbG9uZWRTZWxmLCBwYXJlbnQpO1xuICAgICAgICBjbG9uZXMucHVzaC5hcHBseShjbG9uZXMsIGNsb25lZFNlbGYpO1xuICAgIH0pO1xuICAgIHJldHVybiB0aGlzLl9tYWtlKGNsb25lcyk7XG59XG5leHBvcnRzLmluc2VydEFmdGVyID0gaW5zZXJ0QWZ0ZXI7XG4vKiBlc2xpbnQtZGlzYWJsZSBqc2RvYy9jaGVjay1wYXJhbS1uYW1lcyovXG4vKipcbiAqIEluc2VydCBjb250ZW50IHByZXZpb3VzIHRvIGVhY2ggZWxlbWVudCBpbiB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMuXG4gKlxuICogQGNhdGVnb3J5IE1hbmlwdWxhdGlvblxuICogQGV4YW1wbGVcbiAqXG4gKiBgYGBqc1xuICogJCgnLmFwcGxlJykuYmVmb3JlKCc8bGkgY2xhc3M9XCJwbHVtXCI+UGx1bTwvbGk+Jyk7XG4gKiAkLmh0bWwoKTtcbiAqIC8vPT4gIDx1bCBpZD1cImZydWl0c1wiPlxuICogLy8gICAgICA8bGkgY2xhc3M9XCJwbHVtXCI+UGx1bTwvbGk+XG4gKiAvLyAgICAgIDxsaSBjbGFzcz1cImFwcGxlXCI+QXBwbGU8L2xpPlxuICogLy8gICAgICA8bGkgY2xhc3M9XCJvcmFuZ2VcIj5PcmFuZ2U8L2xpPlxuICogLy8gICAgICA8bGkgY2xhc3M9XCJwZWFyXCI+UGVhcjwvbGk+XG4gKiAvLyAgICA8L3VsPlxuICogYGBgXG4gKlxuICogQHBhcmFtIGNvbnRlbnQgLSBIVE1MIHN0cmluZywgRE9NIGVsZW1lbnQsIGFycmF5IG9mIERPTSBlbGVtZW50cyBvciBDaGVlcmlvXG4gKiAgIHRvIGluc2VydCBiZWZvcmUgZWFjaCBlbGVtZW50IGluIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cy5cbiAqIEByZXR1cm5zIFRoZSBpbnN0YW5jZSBpdHNlbGYuXG4gKiBAc2VlIHtAbGluayBodHRwczovL2FwaS5qcXVlcnkuY29tL2JlZm9yZS99XG4gKi9cbmZ1bmN0aW9uIGJlZm9yZSgpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIHZhciBlbGVtcyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIGVsZW1zW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHZhciBsYXN0SWR4ID0gdGhpcy5sZW5ndGggLSAxO1xuICAgIHJldHVybiAoMCwgdXRpbHNfanNfMS5kb21FYWNoKSh0aGlzLCBmdW5jdGlvbiAoZWwsIGkpIHtcbiAgICAgICAgdmFyIHBhcmVudCA9IGVsLnBhcmVudDtcbiAgICAgICAgaWYgKCEoMCwgZG9taGFuZGxlcl8xLmhhc0NoaWxkcmVuKShlbCkgfHwgIXBhcmVudCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzaWJsaW5ncyA9IHBhcmVudC5jaGlsZHJlbjtcbiAgICAgICAgdmFyIGluZGV4ID0gc2libGluZ3MuaW5kZXhPZihlbCk7XG4gICAgICAgIC8vIElmIG5vdCBmb3VuZCwgbW92ZSBvblxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICBpZiAoaW5kZXggPCAwKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB2YXIgZG9tU3JjID0gdHlwZW9mIGVsZW1zWzBdID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICA/IGVsZW1zWzBdLmNhbGwoZWwsIGksIF90aGlzLl9yZW5kZXIoZWwuY2hpbGRyZW4pKVxuICAgICAgICAgICAgOiBlbGVtcztcbiAgICAgICAgdmFyIGRvbSA9IF90aGlzLl9tYWtlRG9tQXJyYXkoZG9tU3JjLCBpIDwgbGFzdElkeCk7XG4gICAgICAgIC8vIEFkZCBlbGVtZW50IGJlZm9yZSBgZWxgIGVsZW1lbnRcbiAgICAgICAgdW5pcXVlU3BsaWNlKHNpYmxpbmdzLCBpbmRleCwgMCwgZG9tLCBwYXJlbnQpO1xuICAgIH0pO1xufVxuZXhwb3J0cy5iZWZvcmUgPSBiZWZvcmU7XG4vKiBlc2xpbnQtZW5hYmxlIGpzZG9jL2NoZWNrLXBhcmFtLW5hbWVzKi9cbi8qKlxuICogSW5zZXJ0IGV2ZXJ5IGVsZW1lbnQgaW4gdGhlIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzIGJlZm9yZSB0aGUgdGFyZ2V0LlxuICpcbiAqIEBjYXRlZ29yeSBNYW5pcHVsYXRpb25cbiAqIEBleGFtcGxlXG4gKlxuICogYGBganNcbiAqICQoJzxsaSBjbGFzcz1cInBsdW1cIj5QbHVtPC9saT4nKS5pbnNlcnRCZWZvcmUoJy5hcHBsZScpO1xuICogJC5odG1sKCk7XG4gKiAvLz0+ICA8dWwgaWQ9XCJmcnVpdHNcIj5cbiAqIC8vICAgICAgPGxpIGNsYXNzPVwicGx1bVwiPlBsdW08L2xpPlxuICogLy8gICAgICA8bGkgY2xhc3M9XCJhcHBsZVwiPkFwcGxlPC9saT5cbiAqIC8vICAgICAgPGxpIGNsYXNzPVwib3JhbmdlXCI+T3JhbmdlPC9saT5cbiAqIC8vICAgICAgPGxpIGNsYXNzPVwicGVhclwiPlBlYXI8L2xpPlxuICogLy8gICAgPC91bD5cbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB0YXJnZXQgLSBFbGVtZW50IHRvIGluc2VydCBlbGVtZW50cyBiZWZvcmUuXG4gKiBAcmV0dXJucyBUaGUgc2V0IG9mIG5ld2x5IGluc2VydGVkIGVsZW1lbnRzLlxuICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9hcGkuanF1ZXJ5LmNvbS9pbnNlcnRCZWZvcmUvfVxuICovXG5mdW5jdGlvbiBpbnNlcnRCZWZvcmUodGFyZ2V0KSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICB2YXIgdGFyZ2V0QXJyID0gdGhpcy5fbWFrZSh0YXJnZXQpO1xuICAgIHRoaXMucmVtb3ZlKCk7XG4gICAgdmFyIGNsb25lcyA9IFtdO1xuICAgICgwLCB1dGlsc19qc18xLmRvbUVhY2gpKHRhcmdldEFyciwgZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgIHZhciBjbG9uZWRTZWxmID0gX3RoaXMuY2xvbmUoKS50b0FycmF5KCk7XG4gICAgICAgIHZhciBwYXJlbnQgPSBlbC5wYXJlbnQ7XG4gICAgICAgIGlmICghcGFyZW50KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHNpYmxpbmdzID0gcGFyZW50LmNoaWxkcmVuO1xuICAgICAgICB2YXIgaW5kZXggPSBzaWJsaW5ncy5pbmRleE9mKGVsKTtcbiAgICAgICAgLy8gSWYgbm90IGZvdW5kLCBtb3ZlIG9uXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAgIGlmIChpbmRleCA8IDApXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIC8vIEFkZCBjbG9uZWQgYHRoaXNgIGVsZW1lbnQocykgYWZ0ZXIgdGFyZ2V0IGVsZW1lbnRcbiAgICAgICAgdW5pcXVlU3BsaWNlKHNpYmxpbmdzLCBpbmRleCwgMCwgY2xvbmVkU2VsZiwgcGFyZW50KTtcbiAgICAgICAgY2xvbmVzLnB1c2guYXBwbHkoY2xvbmVzLCBjbG9uZWRTZWxmKTtcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5fbWFrZShjbG9uZXMpO1xufVxuZXhwb3J0cy5pbnNlcnRCZWZvcmUgPSBpbnNlcnRCZWZvcmU7XG4vKipcbiAqIFJlbW92ZXMgdGhlIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzIGZyb20gdGhlIERPTSBhbmQgYWxsIHRoZWlyIGNoaWxkcmVuLlxuICogYHNlbGVjdG9yYCBmaWx0ZXJzIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cyB0byBiZSByZW1vdmVkLlxuICpcbiAqIEBjYXRlZ29yeSBNYW5pcHVsYXRpb25cbiAqIEBleGFtcGxlXG4gKlxuICogYGBganNcbiAqICQoJy5wZWFyJykucmVtb3ZlKCk7XG4gKiAkLmh0bWwoKTtcbiAqIC8vPT4gIDx1bCBpZD1cImZydWl0c1wiPlxuICogLy8gICAgICA8bGkgY2xhc3M9XCJhcHBsZVwiPkFwcGxlPC9saT5cbiAqIC8vICAgICAgPGxpIGNsYXNzPVwib3JhbmdlXCI+T3JhbmdlPC9saT5cbiAqIC8vICAgIDwvdWw+XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gc2VsZWN0b3IgLSBPcHRpb25hbCBzZWxlY3RvciBmb3IgZWxlbWVudHMgdG8gcmVtb3ZlLlxuICogQHJldHVybnMgVGhlIGluc3RhbmNlIGl0c2VsZi5cbiAqIEBzZWUge0BsaW5rIGh0dHBzOi8vYXBpLmpxdWVyeS5jb20vcmVtb3ZlL31cbiAqL1xuZnVuY3Rpb24gcmVtb3ZlKHNlbGVjdG9yKSB7XG4gICAgLy8gRmlsdGVyIGlmIHdlIGhhdmUgc2VsZWN0b3JcbiAgICB2YXIgZWxlbXMgPSBzZWxlY3RvciA/IHRoaXMuZmlsdGVyKHNlbGVjdG9yKSA6IHRoaXM7XG4gICAgKDAsIHV0aWxzX2pzXzEuZG9tRWFjaCkoZWxlbXMsIGZ1bmN0aW9uIChlbCkge1xuICAgICAgICAoMCwgZG9tdXRpbHNfMS5yZW1vdmVFbGVtZW50KShlbCk7XG4gICAgICAgIGVsLnByZXYgPSBlbC5uZXh0ID0gZWwucGFyZW50ID0gbnVsbDtcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcztcbn1cbmV4cG9ydHMucmVtb3ZlID0gcmVtb3ZlO1xuLyoqXG4gKiBSZXBsYWNlcyBtYXRjaGVkIGVsZW1lbnRzIHdpdGggYGNvbnRlbnRgLlxuICpcbiAqIEBjYXRlZ29yeSBNYW5pcHVsYXRpb25cbiAqIEBleGFtcGxlXG4gKlxuICogYGBganNcbiAqIGNvbnN0IHBsdW0gPSAkKCc8bGkgY2xhc3M9XCJwbHVtXCI+UGx1bTwvbGk+Jyk7XG4gKiAkKCcucGVhcicpLnJlcGxhY2VXaXRoKHBsdW0pO1xuICogJC5odG1sKCk7XG4gKiAvLz0+IDx1bCBpZD1cImZydWl0c1wiPlxuICogLy8gICAgIDxsaSBjbGFzcz1cImFwcGxlXCI+QXBwbGU8L2xpPlxuICogLy8gICAgIDxsaSBjbGFzcz1cIm9yYW5nZVwiPk9yYW5nZTwvbGk+XG4gKiAvLyAgICAgPGxpIGNsYXNzPVwicGx1bVwiPlBsdW08L2xpPlxuICogLy8gICA8L3VsPlxuICogYGBgXG4gKlxuICogQHBhcmFtIGNvbnRlbnQgLSBSZXBsYWNlbWVudCBmb3IgbWF0Y2hlZCBlbGVtZW50cy5cbiAqIEByZXR1cm5zIFRoZSBpbnN0YW5jZSBpdHNlbGYuXG4gKiBAc2VlIHtAbGluayBodHRwczovL2FwaS5qcXVlcnkuY29tL3JlcGxhY2VXaXRoL31cbiAqL1xuZnVuY3Rpb24gcmVwbGFjZVdpdGgoY29udGVudCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgcmV0dXJuICgwLCB1dGlsc19qc18xLmRvbUVhY2gpKHRoaXMsIGZ1bmN0aW9uIChlbCwgaSkge1xuICAgICAgICB2YXIgcGFyZW50ID0gZWwucGFyZW50O1xuICAgICAgICBpZiAoIXBhcmVudCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzaWJsaW5ncyA9IHBhcmVudC5jaGlsZHJlbjtcbiAgICAgICAgdmFyIGNvbnQgPSB0eXBlb2YgY29udGVudCA9PT0gJ2Z1bmN0aW9uJyA/IGNvbnRlbnQuY2FsbChlbCwgaSwgZWwpIDogY29udGVudDtcbiAgICAgICAgdmFyIGRvbSA9IF90aGlzLl9tYWtlRG9tQXJyYXkoY29udCk7XG4gICAgICAgIC8qXG4gICAgICAgICAqIEluIHRoZSBjYXNlIHRoYXQgYGRvbWAgY29udGFpbnMgbm9kZXMgdGhhdCBhbHJlYWR5IGV4aXN0IGluIG90aGVyXG4gICAgICAgICAqIHN0cnVjdHVyZXMsIGVuc3VyZSB0aG9zZSBub2RlcyBhcmUgcHJvcGVybHkgcmVtb3ZlZC5cbiAgICAgICAgICovXG4gICAgICAgICgwLCBwYXJzZV9qc18xLnVwZGF0ZSkoZG9tLCBudWxsKTtcbiAgICAgICAgdmFyIGluZGV4ID0gc2libGluZ3MuaW5kZXhPZihlbCk7XG4gICAgICAgIC8vIENvbXBsZXRlbHkgcmVtb3ZlIG9sZCBlbGVtZW50XG4gICAgICAgIHVuaXF1ZVNwbGljZShzaWJsaW5ncywgaW5kZXgsIDEsIGRvbSwgcGFyZW50KTtcbiAgICAgICAgaWYgKCFkb20uaW5jbHVkZXMoZWwpKSB7XG4gICAgICAgICAgICBlbC5wYXJlbnQgPSBlbC5wcmV2ID0gZWwubmV4dCA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbmV4cG9ydHMucmVwbGFjZVdpdGggPSByZXBsYWNlV2l0aDtcbi8qKlxuICogRW1wdGllcyBhbiBlbGVtZW50LCByZW1vdmluZyBhbGwgaXRzIGNoaWxkcmVuLlxuICpcbiAqIEBjYXRlZ29yeSBNYW5pcHVsYXRpb25cbiAqIEBleGFtcGxlXG4gKlxuICogYGBganNcbiAqICQoJ3VsJykuZW1wdHkoKTtcbiAqICQuaHRtbCgpO1xuICogLy89PiAgPHVsIGlkPVwiZnJ1aXRzXCI+PC91bD5cbiAqIGBgYFxuICpcbiAqIEByZXR1cm5zIFRoZSBpbnN0YW5jZSBpdHNlbGYuXG4gKiBAc2VlIHtAbGluayBodHRwczovL2FwaS5qcXVlcnkuY29tL2VtcHR5L31cbiAqL1xuZnVuY3Rpb24gZW1wdHkoKSB7XG4gICAgcmV0dXJuICgwLCB1dGlsc19qc18xLmRvbUVhY2gpKHRoaXMsIGZ1bmN0aW9uIChlbCkge1xuICAgICAgICBpZiAoISgwLCBkb21oYW5kbGVyXzEuaGFzQ2hpbGRyZW4pKGVsKSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgZWwuY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgICAgIGNoaWxkLm5leHQgPSBjaGlsZC5wcmV2ID0gY2hpbGQucGFyZW50ID0gbnVsbDtcbiAgICAgICAgfSk7XG4gICAgICAgIGVsLmNoaWxkcmVuLmxlbmd0aCA9IDA7XG4gICAgfSk7XG59XG5leHBvcnRzLmVtcHR5ID0gZW1wdHk7XG5mdW5jdGlvbiBodG1sKHN0cikge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgaWYgKHN0ciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHZhciBlbCA9IHRoaXNbMF07XG4gICAgICAgIGlmICghZWwgfHwgISgwLCBkb21oYW5kbGVyXzEuaGFzQ2hpbGRyZW4pKGVsKSlcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVuZGVyKGVsLmNoaWxkcmVuKTtcbiAgICB9XG4gICAgcmV0dXJuICgwLCB1dGlsc19qc18xLmRvbUVhY2gpKHRoaXMsIGZ1bmN0aW9uIChlbCkge1xuICAgICAgICBpZiAoISgwLCBkb21oYW5kbGVyXzEuaGFzQ2hpbGRyZW4pKGVsKSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgZWwuY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgICAgIGNoaWxkLm5leHQgPSBjaGlsZC5wcmV2ID0gY2hpbGQucGFyZW50ID0gbnVsbDtcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBjb250ZW50ID0gKDAsIHV0aWxzX2pzXzEuaXNDaGVlcmlvKShzdHIpXG4gICAgICAgICAgICA/IHN0ci50b0FycmF5KClcbiAgICAgICAgICAgIDogX3RoaXMuX3BhcnNlKFwiXCIuY29uY2F0KHN0ciksIF90aGlzLm9wdGlvbnMsIGZhbHNlLCBlbCkuY2hpbGRyZW47XG4gICAgICAgICgwLCBwYXJzZV9qc18xLnVwZGF0ZSkoY29udGVudCwgZWwpO1xuICAgIH0pO1xufVxuZXhwb3J0cy5odG1sID0gaHRtbDtcbi8qKlxuICogVHVybnMgdGhlIGNvbGxlY3Rpb24gdG8gYSBzdHJpbmcuIEFsaWFzIGZvciBgLmh0bWwoKWAuXG4gKlxuICogQGNhdGVnb3J5IE1hbmlwdWxhdGlvblxuICogQHJldHVybnMgVGhlIHJlbmRlcmVkIGRvY3VtZW50LlxuICovXG5mdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5fcmVuZGVyKHRoaXMpO1xufVxuZXhwb3J0cy50b1N0cmluZyA9IHRvU3RyaW5nO1xuZnVuY3Rpb24gdGV4dChzdHIpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIC8vIElmIGBzdHJgIGlzIHVuZGVmaW5lZCwgYWN0IGFzIGEgXCJnZXR0ZXJcIlxuICAgIGlmIChzdHIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gKDAsIHN0YXRpY19qc18xLnRleHQpKHRoaXMpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHN0ciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAvLyBGdW5jdGlvbiBzdXBwb3J0XG4gICAgICAgIHJldHVybiAoMCwgdXRpbHNfanNfMS5kb21FYWNoKSh0aGlzLCBmdW5jdGlvbiAoZWwsIGkpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5fbWFrZShlbCkudGV4dChzdHIuY2FsbChlbCwgaSwgKDAsIHN0YXRpY19qc18xLnRleHQpKFtlbF0pKSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvLyBBcHBlbmQgdGV4dCBub2RlIHRvIGVhY2ggc2VsZWN0ZWQgZWxlbWVudHNcbiAgICByZXR1cm4gKDAsIHV0aWxzX2pzXzEuZG9tRWFjaCkodGhpcywgZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgIGlmICghKDAsIGRvbWhhbmRsZXJfMS5oYXNDaGlsZHJlbikoZWwpKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBlbC5jaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICAgICAgY2hpbGQubmV4dCA9IGNoaWxkLnByZXYgPSBjaGlsZC5wYXJlbnQgPSBudWxsO1xuICAgICAgICB9KTtcbiAgICAgICAgdmFyIHRleHROb2RlID0gbmV3IGRvbWhhbmRsZXJfMS5UZXh0KFwiXCIuY29uY2F0KHN0cikpO1xuICAgICAgICAoMCwgcGFyc2VfanNfMS51cGRhdGUpKHRleHROb2RlLCBlbCk7XG4gICAgfSk7XG59XG5leHBvcnRzLnRleHQgPSB0ZXh0O1xuLyoqXG4gKiBDbG9uZSB0aGUgY2hlZXJpbyBvYmplY3QuXG4gKlxuICogQGNhdGVnb3J5IE1hbmlwdWxhdGlvblxuICogQGV4YW1wbGVcbiAqXG4gKiBgYGBqc1xuICogY29uc3QgbW9yZUZydWl0ID0gJCgnI2ZydWl0cycpLmNsb25lKCk7XG4gKiBgYGBcbiAqXG4gKiBAcmV0dXJucyBUaGUgY2xvbmVkIG9iamVjdC5cbiAqIEBzZWUge0BsaW5rIGh0dHBzOi8vYXBpLmpxdWVyeS5jb20vY2xvbmUvfVxuICovXG5mdW5jdGlvbiBjbG9uZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fbWFrZSgoMCwgdXRpbHNfanNfMS5jbG9uZURvbSkodGhpcy5nZXQoKSkpO1xufVxuZXhwb3J0cy5jbG9uZSA9IGNsb25lO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWFuaXB1bGF0aW9uLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBNZXRob2RzIGZvciB0cmF2ZXJzaW5nIHRoZSBET00gc3RydWN0dXJlLlxuICpcbiAqIEBtb2R1bGUgY2hlZXJpby90cmF2ZXJzaW5nXG4gKi9cbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59KTtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xudmFyIF9fc3ByZWFkQXJyYXkgPSAodGhpcyAmJiB0aGlzLl9fc3ByZWFkQXJyYXkpIHx8IGZ1bmN0aW9uICh0bywgZnJvbSwgcGFjaykge1xuICAgIGlmIChwYWNrIHx8IGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIGZvciAodmFyIGkgPSAwLCBsID0gZnJvbS5sZW5ndGgsIGFyOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGlmIChhciB8fCAhKGkgaW4gZnJvbSkpIHtcbiAgICAgICAgICAgIGlmICghYXIpIGFyID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZnJvbSwgMCwgaSk7XG4gICAgICAgICAgICBhcltpXSA9IGZyb21baV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRvLmNvbmNhdChhciB8fCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmcm9tKSk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5hZGRCYWNrID0gZXhwb3J0cy5hZGQgPSBleHBvcnRzLmVuZCA9IGV4cG9ydHMuc2xpY2UgPSBleHBvcnRzLmluZGV4ID0gZXhwb3J0cy50b0FycmF5ID0gZXhwb3J0cy5nZXQgPSBleHBvcnRzLmVxID0gZXhwb3J0cy5sYXN0ID0gZXhwb3J0cy5maXJzdCA9IGV4cG9ydHMuaGFzID0gZXhwb3J0cy5ub3QgPSBleHBvcnRzLmlzID0gZXhwb3J0cy5maWx0ZXJBcnJheSA9IGV4cG9ydHMuZmlsdGVyID0gZXhwb3J0cy5tYXAgPSBleHBvcnRzLmVhY2ggPSBleHBvcnRzLmNvbnRlbnRzID0gZXhwb3J0cy5jaGlsZHJlbiA9IGV4cG9ydHMuc2libGluZ3MgPSBleHBvcnRzLnByZXZVbnRpbCA9IGV4cG9ydHMucHJldkFsbCA9IGV4cG9ydHMucHJldiA9IGV4cG9ydHMubmV4dFVudGlsID0gZXhwb3J0cy5uZXh0QWxsID0gZXhwb3J0cy5uZXh0ID0gZXhwb3J0cy5jbG9zZXN0ID0gZXhwb3J0cy5wYXJlbnRzVW50aWwgPSBleHBvcnRzLnBhcmVudHMgPSBleHBvcnRzLnBhcmVudCA9IGV4cG9ydHMuZmluZCA9IHZvaWQgMDtcbnZhciBkb21oYW5kbGVyXzEgPSByZXF1aXJlKFwiZG9taGFuZGxlclwiKTtcbnZhciBzZWxlY3QgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcImNoZWVyaW8tc2VsZWN0XCIpKTtcbnZhciB1dGlsc19qc18xID0gcmVxdWlyZShcIi4uL3V0aWxzLmpzXCIpO1xudmFyIHN0YXRpY19qc18xID0gcmVxdWlyZShcIi4uL3N0YXRpYy5qc1wiKTtcbnZhciBkb211dGlsc18xID0gcmVxdWlyZShcImRvbXV0aWxzXCIpO1xudmFyIHJlU2libGluZ1NlbGVjdG9yID0gL15cXHMqW34rXS87XG4vKipcbiAqIEdldCB0aGUgZGVzY2VuZGFudHMgb2YgZWFjaCBlbGVtZW50IGluIHRoZSBjdXJyZW50IHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzLFxuICogZmlsdGVyZWQgYnkgYSBzZWxlY3RvciwgalF1ZXJ5IG9iamVjdCwgb3IgZWxlbWVudC5cbiAqXG4gKiBAY2F0ZWdvcnkgVHJhdmVyc2luZ1xuICogQGV4YW1wbGVcbiAqXG4gKiBgYGBqc1xuICogJCgnI2ZydWl0cycpLmZpbmQoJ2xpJykubGVuZ3RoO1xuICogLy89PiAzXG4gKiAkKCcjZnJ1aXRzJykuZmluZCgkKCcuYXBwbGUnKSkubGVuZ3RoO1xuICogLy89PiAxXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gc2VsZWN0b3JPckhheXN0YWNrIC0gRWxlbWVudCB0byBsb29rIGZvci5cbiAqIEByZXR1cm5zIFRoZSBmb3VuZCBlbGVtZW50cy5cbiAqIEBzZWUge0BsaW5rIGh0dHBzOi8vYXBpLmpxdWVyeS5jb20vZmluZC99XG4gKi9cbmZ1bmN0aW9uIGZpbmQoc2VsZWN0b3JPckhheXN0YWNrKSB7XG4gICAgdmFyIF9hO1xuICAgIGlmICghc2VsZWN0b3JPckhheXN0YWNrKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tYWtlKFtdKTtcbiAgICB9XG4gICAgdmFyIGNvbnRleHQgPSB0aGlzLnRvQXJyYXkoKTtcbiAgICBpZiAodHlwZW9mIHNlbGVjdG9yT3JIYXlzdGFjayAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgdmFyIGhheXN0YWNrID0gKDAsIHV0aWxzX2pzXzEuaXNDaGVlcmlvKShzZWxlY3Rvck9ySGF5c3RhY2spXG4gICAgICAgICAgICA/IHNlbGVjdG9yT3JIYXlzdGFjay50b0FycmF5KClcbiAgICAgICAgICAgIDogW3NlbGVjdG9yT3JIYXlzdGFja107XG4gICAgICAgIHJldHVybiB0aGlzLl9tYWtlKGhheXN0YWNrLmZpbHRlcihmdW5jdGlvbiAoZWxlbSkgeyByZXR1cm4gY29udGV4dC5zb21lKGZ1bmN0aW9uIChub2RlKSB7IHJldHVybiAoMCwgc3RhdGljX2pzXzEuY29udGFpbnMpKG5vZGUsIGVsZW0pOyB9KTsgfSkpO1xuICAgIH1cbiAgICB2YXIgZWxlbXMgPSByZVNpYmxpbmdTZWxlY3Rvci50ZXN0KHNlbGVjdG9yT3JIYXlzdGFjaylcbiAgICAgICAgPyBjb250ZXh0XG4gICAgICAgIDogdGhpcy5jaGlsZHJlbigpLnRvQXJyYXkoKTtcbiAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgY29udGV4dDogY29udGV4dCxcbiAgICAgICAgcm9vdDogKF9hID0gdGhpcy5fcm9vdCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hWzBdLFxuICAgICAgICAvLyBQYXNzIG9wdGlvbnMgdGhhdCBhcmUgcmVjb2duaXplZCBieSBgY2hlZXJpby1zZWxlY3RgXG4gICAgICAgIHhtbE1vZGU6IHRoaXMub3B0aW9ucy54bWxNb2RlLFxuICAgICAgICBsb3dlckNhc2VUYWdzOiB0aGlzLm9wdGlvbnMubG93ZXJDYXNlVGFncyxcbiAgICAgICAgbG93ZXJDYXNlQXR0cmlidXRlTmFtZXM6IHRoaXMub3B0aW9ucy5sb3dlckNhc2VBdHRyaWJ1dGVOYW1lcyxcbiAgICAgICAgcHNldWRvczogdGhpcy5vcHRpb25zLnBzZXVkb3MsXG4gICAgICAgIHF1aXJrc01vZGU6IHRoaXMub3B0aW9ucy5xdWlya3NNb2RlLFxuICAgIH07XG4gICAgcmV0dXJuIHRoaXMuX21ha2Uoc2VsZWN0LnNlbGVjdChzZWxlY3Rvck9ySGF5c3RhY2ssIGVsZW1zLCBvcHRpb25zKSk7XG59XG5leHBvcnRzLmZpbmQgPSBmaW5kO1xuLyoqXG4gKiBDcmVhdGVzIGEgbWF0Y2hlciwgdXNpbmcgYSBwYXJ0aWN1bGFyIG1hcHBpbmcgZnVuY3Rpb24uIE1hdGNoZXJzIHByb3ZpZGUgYVxuICogZnVuY3Rpb24gdGhhdCBmaW5kcyBlbGVtZW50cyB1c2luZyBhIGdlbmVyYXRpbmcgZnVuY3Rpb24sIHN1cHBvcnRpbmcgZmlsdGVyaW5nLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0gbWF0Y2hNYXAgLSBNYXBwaW5nIGZ1bmN0aW9uLlxuICogQHJldHVybnMgLSBGdW5jdGlvbiBmb3Igd3JhcHBpbmcgZ2VuZXJhdGluZyBmdW5jdGlvbnMuXG4gKi9cbmZ1bmN0aW9uIF9nZXRNYXRjaGVyKG1hdGNoTWFwKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChmbikge1xuICAgICAgICB2YXIgcG9zdEZucyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDE7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgcG9zdEZuc1tfaSAtIDFdID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHNlbGVjdG9yKSB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICB2YXIgbWF0Y2hlZCA9IG1hdGNoTWFwKGZuLCB0aGlzKTtcbiAgICAgICAgICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgICAgICAgICAgIG1hdGNoZWQgPSBmaWx0ZXJBcnJheShtYXRjaGVkLCBzZWxlY3RvciwgdGhpcy5vcHRpb25zLnhtbE1vZGUsIChfYSA9IHRoaXMuX3Jvb3QpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYVswXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbWFrZShcbiAgICAgICAgICAgIC8vIFBvc3QgcHJvY2Vzc2luZyBpcyBvbmx5IG5lY2Vzc2FyeSBpZiB0aGVyZSBpcyBtb3JlIHRoYW4gb25lIGVsZW1lbnQuXG4gICAgICAgICAgICB0aGlzLmxlbmd0aCA+IDEgJiYgbWF0Y2hlZC5sZW5ndGggPiAxXG4gICAgICAgICAgICAgICAgPyBwb3N0Rm5zLnJlZHVjZShmdW5jdGlvbiAoZWxlbXMsIGZuKSB7IHJldHVybiBmbihlbGVtcyk7IH0sIG1hdGNoZWQpXG4gICAgICAgICAgICAgICAgOiBtYXRjaGVkKTtcbiAgICAgICAgfTtcbiAgICB9O1xufVxuLyoqIE1hdGNoZXIgdGhhdCBhZGRzIG11bHRpcGxlIGVsZW1lbnRzIGZvciBlYWNoIGVudHJ5IGluIHRoZSBpbnB1dC4gKi9cbnZhciBfbWF0Y2hlciA9IF9nZXRNYXRjaGVyKGZ1bmN0aW9uIChmbiwgZWxlbXMpIHtcbiAgICB2YXIgX2E7XG4gICAgdmFyIHJldCA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWxlbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHZhbHVlID0gZm4oZWxlbXNbaV0pO1xuICAgICAgICByZXQucHVzaCh2YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiAoX2EgPSBuZXcgQXJyYXkoKSkuY29uY2F0LmFwcGx5KF9hLCByZXQpO1xufSk7XG4vKiogTWF0Y2hlciB0aGF0IGFkZHMgYXQgbW9zdCBvbmUgZWxlbWVudCBmb3IgZWFjaCBlbnRyeSBpbiB0aGUgaW5wdXQuICovXG52YXIgX3NpbmdsZU1hdGNoZXIgPSBfZ2V0TWF0Y2hlcihmdW5jdGlvbiAoZm4sIGVsZW1zKSB7XG4gICAgdmFyIHJldCA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWxlbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHZhbHVlID0gZm4oZWxlbXNbaV0pO1xuICAgICAgICBpZiAodmFsdWUgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmV0O1xufSk7XG4vKipcbiAqIE1hdGNoZXIgdGhhdCBzdXBwb3J0cyB0cmF2ZXJzaW5nIHVudGlsIGEgY29uZGl0aW9uIGlzIG1ldC5cbiAqXG4gKiBAcmV0dXJucyBBIGZ1bmN0aW9uIHVzYWJsZSBmb3IgYCpVbnRpbGAgbWV0aG9kcy5cbiAqL1xuZnVuY3Rpb24gX21hdGNoVW50aWwobmV4dEVsZW0pIHtcbiAgICB2YXIgcG9zdEZucyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMTsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIHBvc3RGbnNbX2kgLSAxXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIC8vIFdlIHVzZSBhIHZhcmlhYmxlIGhlcmUgdGhhdCBpcyB1c2VkIGZyb20gd2l0aGluIHRoZSBtYXRjaGVyLlxuICAgIHZhciBtYXRjaGVzID0gbnVsbDtcbiAgICB2YXIgaW5uZXJNYXRjaGVyID0gX2dldE1hdGNoZXIoZnVuY3Rpb24gKG5leHRFbGVtLCBlbGVtcykge1xuICAgICAgICB2YXIgbWF0Y2hlZCA9IFtdO1xuICAgICAgICAoMCwgdXRpbHNfanNfMS5kb21FYWNoKShlbGVtcywgZnVuY3Rpb24gKGVsZW0pIHtcbiAgICAgICAgICAgIGZvciAodmFyIG5leHRfMTsgKG5leHRfMSA9IG5leHRFbGVtKGVsZW0pKTsgZWxlbSA9IG5leHRfMSkge1xuICAgICAgICAgICAgICAgIC8vIEZJWE1FOiBgbWF0Y2hlZGAgbWlnaHQgY29udGFpbiBkdXBsaWNhdGVzIGhlcmUgYW5kIHRoZSBpbmRleCBpcyB0b28gbGFyZ2UuXG4gICAgICAgICAgICAgICAgaWYgKG1hdGNoZXMgPT09IG51bGwgfHwgbWF0Y2hlcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogbWF0Y2hlcyhuZXh0XzEsIG1hdGNoZWQubGVuZ3RoKSlcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgbWF0Y2hlZC5wdXNoKG5leHRfMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gbWF0Y2hlZDtcbiAgICB9KS5hcHBseSh2b2lkIDAsIF9fc3ByZWFkQXJyYXkoW25leHRFbGVtXSwgcG9zdEZucywgZmFsc2UpKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNlbGVjdG9yLCBmaWx0ZXJTZWxlY3Rvcikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAvLyBPdmVycmlkZSBgbWF0Y2hlc2AgdmFyaWFibGUgd2l0aCB0aGUgbmV3IHRhcmdldC5cbiAgICAgICAgbWF0Y2hlcyA9XG4gICAgICAgICAgICB0eXBlb2Ygc2VsZWN0b3IgPT09ICdzdHJpbmcnXG4gICAgICAgICAgICAgICAgPyBmdW5jdGlvbiAoZWxlbSkgeyByZXR1cm4gc2VsZWN0LmlzKGVsZW0sIHNlbGVjdG9yLCBfdGhpcy5vcHRpb25zKTsgfVxuICAgICAgICAgICAgICAgIDogc2VsZWN0b3JcbiAgICAgICAgICAgICAgICAgICAgPyBnZXRGaWx0ZXJGbihzZWxlY3RvcilcbiAgICAgICAgICAgICAgICAgICAgOiBudWxsO1xuICAgICAgICB2YXIgcmV0ID0gaW5uZXJNYXRjaGVyLmNhbGwodGhpcywgZmlsdGVyU2VsZWN0b3IpO1xuICAgICAgICAvLyBTZXQgYG1hdGNoZXNgIHRvIGBudWxsYCwgc28gd2UgZG9uJ3Qgd2FzdGUgbWVtb3J5LlxuICAgICAgICBtYXRjaGVzID0gbnVsbDtcbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9O1xufVxuZnVuY3Rpb24gX3JlbW92ZUR1cGxpY2F0ZXMoZWxlbXMpIHtcbiAgICByZXR1cm4gQXJyYXkuZnJvbShuZXcgU2V0KGVsZW1zKSk7XG59XG4vKipcbiAqIEdldCB0aGUgcGFyZW50IG9mIGVhY2ggZWxlbWVudCBpbiB0aGUgY3VycmVudCBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cyxcbiAqIG9wdGlvbmFsbHkgZmlsdGVyZWQgYnkgYSBzZWxlY3Rvci5cbiAqXG4gKiBAY2F0ZWdvcnkgVHJhdmVyc2luZ1xuICogQGV4YW1wbGVcbiAqXG4gKiBgYGBqc1xuICogJCgnLnBlYXInKS5wYXJlbnQoKS5hdHRyKCdpZCcpO1xuICogLy89PiBmcnVpdHNcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBzZWxlY3RvciAtIElmIHNwZWNpZmllZCBmaWx0ZXIgZm9yIHBhcmVudC5cbiAqIEByZXR1cm5zIFRoZSBwYXJlbnRzLlxuICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9hcGkuanF1ZXJ5LmNvbS9wYXJlbnQvfVxuICovXG5leHBvcnRzLnBhcmVudCA9IF9zaW5nbGVNYXRjaGVyKGZ1bmN0aW9uIChfYSkge1xuICAgIHZhciBwYXJlbnQgPSBfYS5wYXJlbnQ7XG4gICAgcmV0dXJuIChwYXJlbnQgJiYgISgwLCBkb21oYW5kbGVyXzEuaXNEb2N1bWVudCkocGFyZW50KSA/IHBhcmVudCA6IG51bGwpO1xufSwgX3JlbW92ZUR1cGxpY2F0ZXMpO1xuLyoqXG4gKiBHZXQgYSBzZXQgb2YgcGFyZW50cyBmaWx0ZXJlZCBieSBgc2VsZWN0b3JgIG9mIGVhY2ggZWxlbWVudCBpbiB0aGUgY3VycmVudFxuICogc2V0IG9mIG1hdGNoIGVsZW1lbnRzLlxuICpcbiAqIEBjYXRlZ29yeSBUcmF2ZXJzaW5nXG4gKiBAZXhhbXBsZVxuICpcbiAqIGBgYGpzXG4gKiAkKCcub3JhbmdlJykucGFyZW50cygpLmxlbmd0aDtcbiAqIC8vPT4gMlxuICogJCgnLm9yYW5nZScpLnBhcmVudHMoJyNmcnVpdHMnKS5sZW5ndGg7XG4gKiAvLz0+IDFcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBzZWxlY3RvciAtIElmIHNwZWNpZmllZCBmaWx0ZXIgZm9yIHBhcmVudHMuXG4gKiBAcmV0dXJucyBUaGUgcGFyZW50cy5cbiAqIEBzZWUge0BsaW5rIGh0dHBzOi8vYXBpLmpxdWVyeS5jb20vcGFyZW50cy99XG4gKi9cbmV4cG9ydHMucGFyZW50cyA9IF9tYXRjaGVyKGZ1bmN0aW9uIChlbGVtKSB7XG4gICAgdmFyIG1hdGNoZWQgPSBbXTtcbiAgICB3aGlsZSAoZWxlbS5wYXJlbnQgJiYgISgwLCBkb21oYW5kbGVyXzEuaXNEb2N1bWVudCkoZWxlbS5wYXJlbnQpKSB7XG4gICAgICAgIG1hdGNoZWQucHVzaChlbGVtLnBhcmVudCk7XG4gICAgICAgIGVsZW0gPSBlbGVtLnBhcmVudDtcbiAgICB9XG4gICAgcmV0dXJuIG1hdGNoZWQ7XG59LCBkb211dGlsc18xLnVuaXF1ZVNvcnQsIGZ1bmN0aW9uIChlbGVtcykgeyByZXR1cm4gZWxlbXMucmV2ZXJzZSgpOyB9KTtcbi8qKlxuICogR2V0IHRoZSBhbmNlc3RvcnMgb2YgZWFjaCBlbGVtZW50IGluIHRoZSBjdXJyZW50IHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzLCB1cFxuICogdG8gYnV0IG5vdCBpbmNsdWRpbmcgdGhlIGVsZW1lbnQgbWF0Y2hlZCBieSB0aGUgc2VsZWN0b3IsIERPTSBub2RlLCBvciBjaGVlcmlvIG9iamVjdC5cbiAqXG4gKiBAY2F0ZWdvcnkgVHJhdmVyc2luZ1xuICogQGV4YW1wbGVcbiAqXG4gKiBgYGBqc1xuICogJCgnLm9yYW5nZScpLnBhcmVudHNVbnRpbCgnI2Zvb2QnKS5sZW5ndGg7XG4gKiAvLz0+IDFcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBzZWxlY3RvciAtIFNlbGVjdG9yIGZvciBlbGVtZW50IHRvIHN0b3AgYXQuXG4gKiBAcGFyYW0gZmlsdGVyU2VsZWN0b3IgLSBPcHRpb25hbCBmaWx0ZXIgZm9yIHBhcmVudHMuXG4gKiBAcmV0dXJucyBUaGUgcGFyZW50cy5cbiAqIEBzZWUge0BsaW5rIGh0dHBzOi8vYXBpLmpxdWVyeS5jb20vcGFyZW50c1VudGlsL31cbiAqL1xuZXhwb3J0cy5wYXJlbnRzVW50aWwgPSBfbWF0Y2hVbnRpbChmdW5jdGlvbiAoX2EpIHtcbiAgICB2YXIgcGFyZW50ID0gX2EucGFyZW50O1xuICAgIHJldHVybiAocGFyZW50ICYmICEoMCwgZG9taGFuZGxlcl8xLmlzRG9jdW1lbnQpKHBhcmVudCkgPyBwYXJlbnQgOiBudWxsKTtcbn0sIGRvbXV0aWxzXzEudW5pcXVlU29ydCwgZnVuY3Rpb24gKGVsZW1zKSB7IHJldHVybiBlbGVtcy5yZXZlcnNlKCk7IH0pO1xuLyoqXG4gKiBGb3IgZWFjaCBlbGVtZW50IGluIHRoZSBzZXQsIGdldCB0aGUgZmlyc3QgZWxlbWVudCB0aGF0IG1hdGNoZXMgdGhlIHNlbGVjdG9yXG4gKiBieSB0ZXN0aW5nIHRoZSBlbGVtZW50IGl0c2VsZiBhbmQgdHJhdmVyc2luZyB1cCB0aHJvdWdoIGl0cyBhbmNlc3RvcnMgaW4gdGhlIERPTSB0cmVlLlxuICpcbiAqIEBjYXRlZ29yeSBUcmF2ZXJzaW5nXG4gKiBAZXhhbXBsZVxuICpcbiAqIGBgYGpzXG4gKiAkKCcub3JhbmdlJykuY2xvc2VzdCgpO1xuICogLy89PiBbXVxuICpcbiAqICQoJy5vcmFuZ2UnKS5jbG9zZXN0KCcuYXBwbGUnKTtcbiAqIC8vID0+IFtdXG4gKlxuICogJCgnLm9yYW5nZScpLmNsb3Nlc3QoJ2xpJyk7XG4gKiAvLz0+IFs8bGkgY2xhc3M9XCJvcmFuZ2VcIj5PcmFuZ2U8L2xpPl1cbiAqXG4gKiAkKCcub3JhbmdlJykuY2xvc2VzdCgnI2ZydWl0cycpO1xuICogLy89PiBbPHVsIGlkPVwiZnJ1aXRzXCI+IC4uLiA8L3VsPl1cbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBzZWxlY3RvciAtIFNlbGVjdG9yIGZvciB0aGUgZWxlbWVudCB0byBmaW5kLlxuICogQHJldHVybnMgVGhlIGNsb3Nlc3Qgbm9kZXMuXG4gKiBAc2VlIHtAbGluayBodHRwczovL2FwaS5qcXVlcnkuY29tL2Nsb3Nlc3QvfVxuICovXG5mdW5jdGlvbiBjbG9zZXN0KHNlbGVjdG9yKSB7XG4gICAgdmFyIF9hO1xuICAgIHZhciBzZXQgPSBbXTtcbiAgICBpZiAoIXNlbGVjdG9yKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tYWtlKHNldCk7XG4gICAgfVxuICAgIHZhciBzZWxlY3RPcHRzID0ge1xuICAgICAgICB4bWxNb2RlOiB0aGlzLm9wdGlvbnMueG1sTW9kZSxcbiAgICAgICAgcm9vdDogKF9hID0gdGhpcy5fcm9vdCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hWzBdLFxuICAgIH07XG4gICAgdmFyIHNlbGVjdEZuID0gdHlwZW9mIHNlbGVjdG9yID09PSAnc3RyaW5nJ1xuICAgICAgICA/IGZ1bmN0aW9uIChlbGVtKSB7IHJldHVybiBzZWxlY3QuaXMoZWxlbSwgc2VsZWN0b3IsIHNlbGVjdE9wdHMpOyB9XG4gICAgICAgIDogZ2V0RmlsdGVyRm4oc2VsZWN0b3IpO1xuICAgICgwLCB1dGlsc19qc18xLmRvbUVhY2gpKHRoaXMsIGZ1bmN0aW9uIChlbGVtKSB7XG4gICAgICAgIHdoaWxlIChlbGVtICYmICgwLCB1dGlsc19qc18xLmlzVGFnKShlbGVtKSkge1xuICAgICAgICAgICAgaWYgKHNlbGVjdEZuKGVsZW0sIDApKSB7XG4gICAgICAgICAgICAgICAgLy8gRG8gbm90IGFkZCBkdXBsaWNhdGUgZWxlbWVudHMgdG8gdGhlIHNldFxuICAgICAgICAgICAgICAgIGlmICghc2V0LmluY2x1ZGVzKGVsZW0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHNldC5wdXNoKGVsZW0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsZW0gPSBlbGVtLnBhcmVudDtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiB0aGlzLl9tYWtlKHNldCk7XG59XG5leHBvcnRzLmNsb3Nlc3QgPSBjbG9zZXN0O1xuLyoqXG4gKiBHZXRzIHRoZSBuZXh0IHNpYmxpbmcgb2YgdGhlIGZpcnN0IHNlbGVjdGVkIGVsZW1lbnQsIG9wdGlvbmFsbHkgZmlsdGVyZWQgYnkgYSBzZWxlY3Rvci5cbiAqXG4gKiBAY2F0ZWdvcnkgVHJhdmVyc2luZ1xuICogQGV4YW1wbGVcbiAqXG4gKiBgYGBqc1xuICogJCgnLmFwcGxlJykubmV4dCgpLmhhc0NsYXNzKCdvcmFuZ2UnKTtcbiAqIC8vPT4gdHJ1ZVxuICogYGBgXG4gKlxuICogQHBhcmFtIHNlbGVjdG9yIC0gSWYgc3BlY2lmaWVkIGZpbHRlciBmb3Igc2libGluZy5cbiAqIEByZXR1cm5zIFRoZSBuZXh0IG5vZGVzLlxuICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9hcGkuanF1ZXJ5LmNvbS9uZXh0L31cbiAqL1xuZXhwb3J0cy5uZXh0ID0gX3NpbmdsZU1hdGNoZXIoZnVuY3Rpb24gKGVsZW0pIHsgcmV0dXJuICgwLCBkb211dGlsc18xLm5leHRFbGVtZW50U2libGluZykoZWxlbSk7IH0pO1xuLyoqXG4gKiBHZXRzIGFsbCB0aGUgZm9sbG93aW5nIHNpYmxpbmdzIG9mIHRoZSBmaXJzdCBzZWxlY3RlZCBlbGVtZW50LCBvcHRpb25hbGx5XG4gKiBmaWx0ZXJlZCBieSBhIHNlbGVjdG9yLlxuICpcbiAqIEBjYXRlZ29yeSBUcmF2ZXJzaW5nXG4gKiBAZXhhbXBsZVxuICpcbiAqIGBgYGpzXG4gKiAkKCcuYXBwbGUnKS5uZXh0QWxsKCk7XG4gKiAvLz0+IFs8bGkgY2xhc3M9XCJvcmFuZ2VcIj5PcmFuZ2U8L2xpPiwgPGxpIGNsYXNzPVwicGVhclwiPlBlYXI8L2xpPl1cbiAqICQoJy5hcHBsZScpLm5leHRBbGwoJy5vcmFuZ2UnKTtcbiAqIC8vPT4gWzxsaSBjbGFzcz1cIm9yYW5nZVwiPk9yYW5nZTwvbGk+XVxuICogYGBgXG4gKlxuICogQHBhcmFtIHNlbGVjdG9yIC0gSWYgc3BlY2lmaWVkIGZpbHRlciBmb3Igc2libGluZ3MuXG4gKiBAcmV0dXJucyBUaGUgbmV4dCBub2Rlcy5cbiAqIEBzZWUge0BsaW5rIGh0dHBzOi8vYXBpLmpxdWVyeS5jb20vbmV4dEFsbC99XG4gKi9cbmV4cG9ydHMubmV4dEFsbCA9IF9tYXRjaGVyKGZ1bmN0aW9uIChlbGVtKSB7XG4gICAgdmFyIG1hdGNoZWQgPSBbXTtcbiAgICB3aGlsZSAoZWxlbS5uZXh0KSB7XG4gICAgICAgIGVsZW0gPSBlbGVtLm5leHQ7XG4gICAgICAgIGlmICgoMCwgdXRpbHNfanNfMS5pc1RhZykoZWxlbSkpXG4gICAgICAgICAgICBtYXRjaGVkLnB1c2goZWxlbSk7XG4gICAgfVxuICAgIHJldHVybiBtYXRjaGVkO1xufSwgX3JlbW92ZUR1cGxpY2F0ZXMpO1xuLyoqXG4gKiBHZXRzIGFsbCB0aGUgZm9sbG93aW5nIHNpYmxpbmdzIHVwIHRvIGJ1dCBub3QgaW5jbHVkaW5nIHRoZSBlbGVtZW50IG1hdGNoZWRcbiAqIGJ5IHRoZSBzZWxlY3Rvciwgb3B0aW9uYWxseSBmaWx0ZXJlZCBieSBhbm90aGVyIHNlbGVjdG9yLlxuICpcbiAqIEBjYXRlZ29yeSBUcmF2ZXJzaW5nXG4gKiBAZXhhbXBsZVxuICpcbiAqIGBgYGpzXG4gKiAkKCcuYXBwbGUnKS5uZXh0VW50aWwoJy5wZWFyJyk7XG4gKiAvLz0+IFs8bGkgY2xhc3M9XCJvcmFuZ2VcIj5PcmFuZ2U8L2xpPl1cbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBzZWxlY3RvciAtIFNlbGVjdG9yIGZvciBlbGVtZW50IHRvIHN0b3AgYXQuXG4gKiBAcGFyYW0gZmlsdGVyU2VsZWN0b3IgLSBJZiBzcGVjaWZpZWQgZmlsdGVyIGZvciBzaWJsaW5ncy5cbiAqIEByZXR1cm5zIFRoZSBuZXh0IG5vZGVzLlxuICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9hcGkuanF1ZXJ5LmNvbS9uZXh0VW50aWwvfVxuICovXG5leHBvcnRzLm5leHRVbnRpbCA9IF9tYXRjaFVudGlsKGZ1bmN0aW9uIChlbCkgeyByZXR1cm4gKDAsIGRvbXV0aWxzXzEubmV4dEVsZW1lbnRTaWJsaW5nKShlbCk7IH0sIF9yZW1vdmVEdXBsaWNhdGVzKTtcbi8qKlxuICogR2V0cyB0aGUgcHJldmlvdXMgc2libGluZyBvZiB0aGUgZmlyc3Qgc2VsZWN0ZWQgZWxlbWVudCBvcHRpb25hbGx5IGZpbHRlcmVkXG4gKiBieSBhIHNlbGVjdG9yLlxuICpcbiAqIEBjYXRlZ29yeSBUcmF2ZXJzaW5nXG4gKiBAZXhhbXBsZVxuICpcbiAqIGBgYGpzXG4gKiAkKCcub3JhbmdlJykucHJldigpLmhhc0NsYXNzKCdhcHBsZScpO1xuICogLy89PiB0cnVlXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gc2VsZWN0b3IgLSBJZiBzcGVjaWZpZWQgZmlsdGVyIGZvciBzaWJsaW5ncy5cbiAqIEByZXR1cm5zIFRoZSBwcmV2aW91cyBub2Rlcy5cbiAqIEBzZWUge0BsaW5rIGh0dHBzOi8vYXBpLmpxdWVyeS5jb20vcHJldi99XG4gKi9cbmV4cG9ydHMucHJldiA9IF9zaW5nbGVNYXRjaGVyKGZ1bmN0aW9uIChlbGVtKSB7IHJldHVybiAoMCwgZG9tdXRpbHNfMS5wcmV2RWxlbWVudFNpYmxpbmcpKGVsZW0pOyB9KTtcbi8qKlxuICogR2V0cyBhbGwgdGhlIHByZWNlZGluZyBzaWJsaW5ncyBvZiB0aGUgZmlyc3Qgc2VsZWN0ZWQgZWxlbWVudCwgb3B0aW9uYWxseVxuICogZmlsdGVyZWQgYnkgYSBzZWxlY3Rvci5cbiAqXG4gKiBAY2F0ZWdvcnkgVHJhdmVyc2luZ1xuICogQGV4YW1wbGVcbiAqXG4gKiBgYGBqc1xuICogJCgnLnBlYXInKS5wcmV2QWxsKCk7XG4gKiAvLz0+IFs8bGkgY2xhc3M9XCJvcmFuZ2VcIj5PcmFuZ2U8L2xpPiwgPGxpIGNsYXNzPVwiYXBwbGVcIj5BcHBsZTwvbGk+XVxuICpcbiAqICQoJy5wZWFyJykucHJldkFsbCgnLm9yYW5nZScpO1xuICogLy89PiBbPGxpIGNsYXNzPVwib3JhbmdlXCI+T3JhbmdlPC9saT5dXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gc2VsZWN0b3IgLSBJZiBzcGVjaWZpZWQgZmlsdGVyIGZvciBzaWJsaW5ncy5cbiAqIEByZXR1cm5zIFRoZSBwcmV2aW91cyBub2Rlcy5cbiAqIEBzZWUge0BsaW5rIGh0dHBzOi8vYXBpLmpxdWVyeS5jb20vcHJldkFsbC99XG4gKi9cbmV4cG9ydHMucHJldkFsbCA9IF9tYXRjaGVyKGZ1bmN0aW9uIChlbGVtKSB7XG4gICAgdmFyIG1hdGNoZWQgPSBbXTtcbiAgICB3aGlsZSAoZWxlbS5wcmV2KSB7XG4gICAgICAgIGVsZW0gPSBlbGVtLnByZXY7XG4gICAgICAgIGlmICgoMCwgdXRpbHNfanNfMS5pc1RhZykoZWxlbSkpXG4gICAgICAgICAgICBtYXRjaGVkLnB1c2goZWxlbSk7XG4gICAgfVxuICAgIHJldHVybiBtYXRjaGVkO1xufSwgX3JlbW92ZUR1cGxpY2F0ZXMpO1xuLyoqXG4gKiBHZXRzIGFsbCB0aGUgcHJlY2VkaW5nIHNpYmxpbmdzIHVwIHRvIGJ1dCBub3QgaW5jbHVkaW5nIHRoZSBlbGVtZW50IG1hdGNoZWRcbiAqIGJ5IHRoZSBzZWxlY3Rvciwgb3B0aW9uYWxseSBmaWx0ZXJlZCBieSBhbm90aGVyIHNlbGVjdG9yLlxuICpcbiAqIEBjYXRlZ29yeSBUcmF2ZXJzaW5nXG4gKiBAZXhhbXBsZVxuICpcbiAqIGBgYGpzXG4gKiAkKCcucGVhcicpLnByZXZVbnRpbCgnLmFwcGxlJyk7XG4gKiAvLz0+IFs8bGkgY2xhc3M9XCJvcmFuZ2VcIj5PcmFuZ2U8L2xpPl1cbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBzZWxlY3RvciAtIFNlbGVjdG9yIGZvciBlbGVtZW50IHRvIHN0b3AgYXQuXG4gKiBAcGFyYW0gZmlsdGVyU2VsZWN0b3IgLSBJZiBzcGVjaWZpZWQgZmlsdGVyIGZvciBzaWJsaW5ncy5cbiAqIEByZXR1cm5zIFRoZSBwcmV2aW91cyBub2Rlcy5cbiAqIEBzZWUge0BsaW5rIGh0dHBzOi8vYXBpLmpxdWVyeS5jb20vcHJldlVudGlsL31cbiAqL1xuZXhwb3J0cy5wcmV2VW50aWwgPSBfbWF0Y2hVbnRpbChmdW5jdGlvbiAoZWwpIHsgcmV0dXJuICgwLCBkb211dGlsc18xLnByZXZFbGVtZW50U2libGluZykoZWwpOyB9LCBfcmVtb3ZlRHVwbGljYXRlcyk7XG4vKipcbiAqIEdldCB0aGUgc2libGluZ3Mgb2YgZWFjaCBlbGVtZW50IChleGNsdWRpbmcgdGhlIGVsZW1lbnQpIGluIHRoZSBzZXQgb2ZcbiAqIG1hdGNoZWQgZWxlbWVudHMsIG9wdGlvbmFsbHkgZmlsdGVyZWQgYnkgYSBzZWxlY3Rvci5cbiAqXG4gKiBAY2F0ZWdvcnkgVHJhdmVyc2luZ1xuICogQGV4YW1wbGVcbiAqXG4gKiBgYGBqc1xuICogJCgnLnBlYXInKS5zaWJsaW5ncygpLmxlbmd0aDtcbiAqIC8vPT4gMlxuICpcbiAqICQoJy5wZWFyJykuc2libGluZ3MoJy5vcmFuZ2UnKS5sZW5ndGg7XG4gKiAvLz0+IDFcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBzZWxlY3RvciAtIElmIHNwZWNpZmllZCBmaWx0ZXIgZm9yIHNpYmxpbmdzLlxuICogQHJldHVybnMgVGhlIHNpYmxpbmdzLlxuICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9hcGkuanF1ZXJ5LmNvbS9zaWJsaW5ncy99XG4gKi9cbmV4cG9ydHMuc2libGluZ3MgPSBfbWF0Y2hlcihmdW5jdGlvbiAoZWxlbSkge1xuICAgIHJldHVybiAoMCwgZG9tdXRpbHNfMS5nZXRTaWJsaW5ncykoZWxlbSkuZmlsdGVyKGZ1bmN0aW9uIChlbCkgeyByZXR1cm4gKDAsIHV0aWxzX2pzXzEuaXNUYWcpKGVsKSAmJiBlbCAhPT0gZWxlbTsgfSk7XG59LCBkb211dGlsc18xLnVuaXF1ZVNvcnQpO1xuLyoqXG4gKiBHZXRzIHRoZSBlbGVtZW50IGNoaWxkcmVuIG9mIGVhY2ggZWxlbWVudCBpbiB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMuXG4gKlxuICogQGNhdGVnb3J5IFRyYXZlcnNpbmdcbiAqIEBleGFtcGxlXG4gKlxuICogYGBganNcbiAqICQoJyNmcnVpdHMnKS5jaGlsZHJlbigpLmxlbmd0aDtcbiAqIC8vPT4gM1xuICpcbiAqICQoJyNmcnVpdHMnKS5jaGlsZHJlbignLnBlYXInKS50ZXh0KCk7XG4gKiAvLz0+IFBlYXJcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBzZWxlY3RvciAtIElmIHNwZWNpZmllZCBmaWx0ZXIgZm9yIGNoaWxkcmVuLlxuICogQHJldHVybnMgVGhlIGNoaWxkcmVuLlxuICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9hcGkuanF1ZXJ5LmNvbS9jaGlsZHJlbi99XG4gKi9cbmV4cG9ydHMuY2hpbGRyZW4gPSBfbWF0Y2hlcihmdW5jdGlvbiAoZWxlbSkgeyByZXR1cm4gKDAsIGRvbXV0aWxzXzEuZ2V0Q2hpbGRyZW4pKGVsZW0pLmZpbHRlcih1dGlsc19qc18xLmlzVGFnKTsgfSwgX3JlbW92ZUR1cGxpY2F0ZXMpO1xuLyoqXG4gKiBHZXRzIHRoZSBjaGlsZHJlbiBvZiBlYWNoIGVsZW1lbnQgaW4gdGhlIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzLCBpbmNsdWRpbmdcbiAqIHRleHQgYW5kIGNvbW1lbnQgbm9kZXMuXG4gKlxuICogQGNhdGVnb3J5IFRyYXZlcnNpbmdcbiAqIEBleGFtcGxlXG4gKlxuICogYGBganNcbiAqICQoJyNmcnVpdHMnKS5jb250ZW50cygpLmxlbmd0aDtcbiAqIC8vPT4gM1xuICogYGBgXG4gKlxuICogQHJldHVybnMgVGhlIGNoaWxkcmVuLlxuICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9hcGkuanF1ZXJ5LmNvbS9jb250ZW50cy99XG4gKi9cbmZ1bmN0aW9uIGNvbnRlbnRzKCkge1xuICAgIHZhciBlbGVtcyA9IHRoaXMudG9BcnJheSgpLnJlZHVjZShmdW5jdGlvbiAobmV3RWxlbXMsIGVsZW0pIHtcbiAgICAgICAgcmV0dXJuICgwLCBkb21oYW5kbGVyXzEuaGFzQ2hpbGRyZW4pKGVsZW0pID8gbmV3RWxlbXMuY29uY2F0KGVsZW0uY2hpbGRyZW4pIDogbmV3RWxlbXM7XG4gICAgfSwgW10pO1xuICAgIHJldHVybiB0aGlzLl9tYWtlKGVsZW1zKTtcbn1cbmV4cG9ydHMuY29udGVudHMgPSBjb250ZW50cztcbi8qKlxuICogSXRlcmF0ZXMgb3ZlciBhIGNoZWVyaW8gb2JqZWN0LCBleGVjdXRpbmcgYSBmdW5jdGlvbiBmb3IgZWFjaCBtYXRjaGVkXG4gKiBlbGVtZW50LiBXaGVuIHRoZSBjYWxsYmFjayBpcyBmaXJlZCwgdGhlIGZ1bmN0aW9uIGlzIGZpcmVkIGluIHRoZSBjb250ZXh0IG9mXG4gKiB0aGUgRE9NIGVsZW1lbnQsIHNvIGB0aGlzYCByZWZlcnMgdG8gdGhlIGN1cnJlbnQgZWxlbWVudCwgd2hpY2ggaXMgZXF1aXZhbGVudFxuICogdG8gdGhlIGZ1bmN0aW9uIHBhcmFtZXRlciBgZWxlbWVudGAuIFRvIGJyZWFrIG91dCBvZiB0aGUgYGVhY2hgIGxvb3AgZWFybHksXG4gKiByZXR1cm4gd2l0aCBgZmFsc2VgLlxuICpcbiAqIEBjYXRlZ29yeSBUcmF2ZXJzaW5nXG4gKiBAZXhhbXBsZVxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBmcnVpdHMgPSBbXTtcbiAqXG4gKiAkKCdsaScpLmVhY2goZnVuY3Rpb24gKGksIGVsZW0pIHtcbiAqICAgZnJ1aXRzW2ldID0gJCh0aGlzKS50ZXh0KCk7XG4gKiB9KTtcbiAqXG4gKiBmcnVpdHMuam9pbignLCAnKTtcbiAqIC8vPT4gQXBwbGUsIE9yYW5nZSwgUGVhclxuICogYGBgXG4gKlxuICogQHBhcmFtIGZuIC0gRnVuY3Rpb24gdG8gZXhlY3V0ZS5cbiAqIEByZXR1cm5zIFRoZSBpbnN0YW5jZSBpdHNlbGYsIHVzZWZ1bCBmb3IgY2hhaW5pbmcuXG4gKiBAc2VlIHtAbGluayBodHRwczovL2FwaS5qcXVlcnkuY29tL2VhY2gvfVxuICovXG5mdW5jdGlvbiBlYWNoKGZuKSB7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBsZW4gPSB0aGlzLmxlbmd0aDtcbiAgICB3aGlsZSAoaSA8IGxlbiAmJiBmbi5jYWxsKHRoaXNbaV0sIGksIHRoaXNbaV0pICE9PSBmYWxzZSlcbiAgICAgICAgKytpO1xuICAgIHJldHVybiB0aGlzO1xufVxuZXhwb3J0cy5lYWNoID0gZWFjaDtcbi8qKlxuICogUGFzcyBlYWNoIGVsZW1lbnQgaW4gdGhlIGN1cnJlbnQgbWF0Y2hlZCBzZXQgdGhyb3VnaCBhIGZ1bmN0aW9uLCBwcm9kdWNpbmcgYVxuICogbmV3IENoZWVyaW8gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIHJldHVybiB2YWx1ZXMuIFRoZSBmdW5jdGlvbiBjYW4gcmV0dXJuIGFuXG4gKiBpbmRpdmlkdWFsIGRhdGEgaXRlbSBvciBhbiBhcnJheSBvZiBkYXRhIGl0ZW1zIHRvIGJlIGluc2VydGVkIGludG8gdGhlXG4gKiByZXN1bHRpbmcgc2V0LiBJZiBhbiBhcnJheSBpcyByZXR1cm5lZCwgdGhlIGVsZW1lbnRzIGluc2lkZSB0aGUgYXJyYXkgYXJlXG4gKiBpbnNlcnRlZCBpbnRvIHRoZSBzZXQuIElmIHRoZSBmdW5jdGlvbiByZXR1cm5zIG51bGwgb3IgdW5kZWZpbmVkLCBubyBlbGVtZW50XG4gKiB3aWxsIGJlIGluc2VydGVkLlxuICpcbiAqIEBjYXRlZ29yeSBUcmF2ZXJzaW5nXG4gKiBAZXhhbXBsZVxuICpcbiAqIGBgYGpzXG4gKiAkKCdsaScpXG4gKiAgIC5tYXAoZnVuY3Rpb24gKGksIGVsKSB7XG4gKiAgICAgLy8gdGhpcyA9PT0gZWxcbiAqICAgICByZXR1cm4gJCh0aGlzKS50ZXh0KCk7XG4gKiAgIH0pXG4gKiAgIC50b0FycmF5KClcbiAqICAgLmpvaW4oJyAnKTtcbiAqIC8vPT4gXCJhcHBsZSBvcmFuZ2UgcGVhclwiXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gZm4gLSBGdW5jdGlvbiB0byBleGVjdXRlLlxuICogQHJldHVybnMgVGhlIG1hcHBlZCBlbGVtZW50cywgd3JhcHBlZCBpbiBhIENoZWVyaW8gY29sbGVjdGlvbi5cbiAqIEBzZWUge0BsaW5rIGh0dHBzOi8vYXBpLmpxdWVyeS5jb20vbWFwL31cbiAqL1xuZnVuY3Rpb24gbWFwKGZuKSB7XG4gICAgdmFyIGVsZW1zID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBlbCA9IHRoaXNbaV07XG4gICAgICAgIHZhciB2YWwgPSBmbi5jYWxsKGVsLCBpLCBlbCk7XG4gICAgICAgIGlmICh2YWwgIT0gbnVsbCkge1xuICAgICAgICAgICAgZWxlbXMgPSBlbGVtcy5jb25jYXQodmFsKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fbWFrZShlbGVtcyk7XG59XG5leHBvcnRzLm1hcCA9IG1hcDtcbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRvIHRlc3QgaWYgYSBmaWx0ZXIgaXMgbWF0Y2hlZC5cbiAqXG4gKiBAcGFyYW0gbWF0Y2ggLSBBIGZpbHRlci5cbiAqIEByZXR1cm5zIEEgZnVuY3Rpb24gdGhhdCBkZXRlcm1pbmVzIGlmIGEgZmlsdGVyIGhhcyBiZWVuIG1hdGNoZWQuXG4gKi9cbmZ1bmN0aW9uIGdldEZpbHRlckZuKG1hdGNoKSB7XG4gICAgaWYgKHR5cGVvZiBtYXRjaCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGVsLCBpKSB7IHJldHVybiBtYXRjaC5jYWxsKGVsLCBpLCBlbCk7IH07XG4gICAgfVxuICAgIGlmICgoMCwgdXRpbHNfanNfMS5pc0NoZWVyaW8pKG1hdGNoKSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGVsKSB7IHJldHVybiBBcnJheS5wcm90b3R5cGUuaW5jbHVkZXMuY2FsbChtYXRjaCwgZWwpOyB9O1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgIHJldHVybiBtYXRjaCA9PT0gZWw7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIGZpbHRlcihtYXRjaCkge1xuICAgIHZhciBfYTtcbiAgICByZXR1cm4gdGhpcy5fbWFrZShmaWx0ZXJBcnJheSh0aGlzLnRvQXJyYXkoKSwgbWF0Y2gsIHRoaXMub3B0aW9ucy54bWxNb2RlLCAoX2EgPSB0aGlzLl9yb290KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2FbMF0pKTtcbn1cbmV4cG9ydHMuZmlsdGVyID0gZmlsdGVyO1xuZnVuY3Rpb24gZmlsdGVyQXJyYXkobm9kZXMsIG1hdGNoLCB4bWxNb2RlLCByb290KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBtYXRjaCA9PT0gJ3N0cmluZydcbiAgICAgICAgPyBzZWxlY3QuZmlsdGVyKG1hdGNoLCBub2RlcywgeyB4bWxNb2RlOiB4bWxNb2RlLCByb290OiByb290IH0pXG4gICAgICAgIDogbm9kZXMuZmlsdGVyKGdldEZpbHRlckZuKG1hdGNoKSk7XG59XG5leHBvcnRzLmZpbHRlckFycmF5ID0gZmlsdGVyQXJyYXk7XG4vKipcbiAqIENoZWNrcyB0aGUgY3VycmVudCBsaXN0IG9mIGVsZW1lbnRzIGFuZCByZXR1cm5zIGB0cnVlYCBpZiBfYW55XyBvZiB0aGVcbiAqIGVsZW1lbnRzIG1hdGNoIHRoZSBzZWxlY3Rvci4gSWYgdXNpbmcgYW4gZWxlbWVudCBvciBDaGVlcmlvIHNlbGVjdGlvbixcbiAqIHJldHVybnMgYHRydWVgIGlmIF9hbnlfIG9mIHRoZSBlbGVtZW50cyBtYXRjaC4gSWYgdXNpbmcgYSBwcmVkaWNhdGUgZnVuY3Rpb24sXG4gKiB0aGUgZnVuY3Rpb24gaXMgZXhlY3V0ZWQgaW4gdGhlIGNvbnRleHQgb2YgdGhlIHNlbGVjdGVkIGVsZW1lbnQsIHNvIGB0aGlzYFxuICogcmVmZXJzIHRvIHRoZSBjdXJyZW50IGVsZW1lbnQuXG4gKlxuICogQGNhdGVnb3J5IEF0dHJpYnV0ZXNcbiAqIEBwYXJhbSBzZWxlY3RvciAtIFNlbGVjdG9yIGZvciB0aGUgc2VsZWN0aW9uLlxuICogQHJldHVybnMgV2hldGhlciBvciBub3QgdGhlIHNlbGVjdG9yIG1hdGNoZXMgYW4gZWxlbWVudCBvZiB0aGUgaW5zdGFuY2UuXG4gKiBAc2VlIHtAbGluayBodHRwczovL2FwaS5qcXVlcnkuY29tL2lzL31cbiAqL1xuZnVuY3Rpb24gaXMoc2VsZWN0b3IpIHtcbiAgICB2YXIgbm9kZXMgPSB0aGlzLnRvQXJyYXkoKTtcbiAgICByZXR1cm4gdHlwZW9mIHNlbGVjdG9yID09PSAnc3RyaW5nJ1xuICAgICAgICA/IHNlbGVjdC5zb21lKG5vZGVzLmZpbHRlcih1dGlsc19qc18xLmlzVGFnKSwgc2VsZWN0b3IsIHRoaXMub3B0aW9ucylcbiAgICAgICAgOiBzZWxlY3RvclxuICAgICAgICAgICAgPyBub2Rlcy5zb21lKGdldEZpbHRlckZuKHNlbGVjdG9yKSlcbiAgICAgICAgICAgIDogZmFsc2U7XG59XG5leHBvcnRzLmlzID0gaXM7XG4vKipcbiAqIFJlbW92ZSBlbGVtZW50cyBmcm9tIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cy4gR2l2ZW4gYSBDaGVlcmlvIG9iamVjdCB0aGF0XG4gKiByZXByZXNlbnRzIGEgc2V0IG9mIERPTSBlbGVtZW50cywgdGhlIGAubm90KClgIG1ldGhvZCBjb25zdHJ1Y3RzIGEgbmV3XG4gKiBDaGVlcmlvIG9iamVjdCBmcm9tIGEgc3Vic2V0IG9mIHRoZSBtYXRjaGluZyBlbGVtZW50cy4gVGhlIHN1cHBsaWVkIHNlbGVjdG9yXG4gKiBpcyB0ZXN0ZWQgYWdhaW5zdCBlYWNoIGVsZW1lbnQ7IHRoZSBlbGVtZW50cyB0aGF0IGRvbid0IG1hdGNoIHRoZSBzZWxlY3RvclxuICogd2lsbCBiZSBpbmNsdWRlZCBpbiB0aGUgcmVzdWx0LlxuICpcbiAqIFRoZSBgLm5vdCgpYCBtZXRob2QgY2FuIHRha2UgYSBmdW5jdGlvbiBhcyBpdHMgYXJndW1lbnQgaW4gdGhlIHNhbWUgd2F5IHRoYXRcbiAqIGAuZmlsdGVyKClgIGRvZXMuIEVsZW1lbnRzIGZvciB3aGljaCB0aGUgZnVuY3Rpb24gcmV0dXJucyBgdHJ1ZWAgYXJlIGV4Y2x1ZGVkXG4gKiBmcm9tIHRoZSBmaWx0ZXJlZCBzZXQ7IGFsbCBvdGhlciBlbGVtZW50cyBhcmUgaW5jbHVkZWQuXG4gKlxuICogQGNhdGVnb3J5IFRyYXZlcnNpbmdcbiAqIEBleGFtcGxlIDxjYXB0aW9uPlNlbGVjdG9yPC9jYXB0aW9uPlxuICpcbiAqIGBgYGpzXG4gKiAkKCdsaScpLm5vdCgnLmFwcGxlJykubGVuZ3RoO1xuICogLy89PiAyXG4gKiBgYGBcbiAqXG4gKiBAZXhhbXBsZSA8Y2FwdGlvbj5GdW5jdGlvbjwvY2FwdGlvbj5cbiAqXG4gKiBgYGBqc1xuICogJCgnbGknKS5ub3QoZnVuY3Rpb24gKGksIGVsKSB7XG4gKiAgIC8vIHRoaXMgPT09IGVsXG4gKiAgIHJldHVybiAkKHRoaXMpLmF0dHIoJ2NsYXNzJykgPT09ICdvcmFuZ2UnO1xuICogfSkubGVuZ3RoOyAvLz0+IDJcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBtYXRjaCAtIFZhbHVlIHRvIGxvb2sgZm9yLCBmb2xsb3dpbmcgdGhlIHJ1bGVzIGFib3ZlLlxuICogQHBhcmFtIGNvbnRhaW5lciAtIE9wdGlvbmFsIG5vZGUgdG8gZmlsdGVyIGluc3RlYWQuXG4gKiBAcmV0dXJucyBUaGUgZmlsdGVyZWQgY29sbGVjdGlvbi5cbiAqIEBzZWUge0BsaW5rIGh0dHBzOi8vYXBpLmpxdWVyeS5jb20vbm90L31cbiAqL1xuZnVuY3Rpb24gbm90KG1hdGNoKSB7XG4gICAgdmFyIG5vZGVzID0gdGhpcy50b0FycmF5KCk7XG4gICAgaWYgKHR5cGVvZiBtYXRjaCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdmFyIG1hdGNoZXNfMSA9IG5ldyBTZXQoc2VsZWN0LmZpbHRlcihtYXRjaCwgbm9kZXMsIHRoaXMub3B0aW9ucykpO1xuICAgICAgICBub2RlcyA9IG5vZGVzLmZpbHRlcihmdW5jdGlvbiAoZWwpIHsgcmV0dXJuICFtYXRjaGVzXzEuaGFzKGVsKTsgfSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB2YXIgZmlsdGVyRm5fMSA9IGdldEZpbHRlckZuKG1hdGNoKTtcbiAgICAgICAgbm9kZXMgPSBub2Rlcy5maWx0ZXIoZnVuY3Rpb24gKGVsLCBpKSB7IHJldHVybiAhZmlsdGVyRm5fMShlbCwgaSk7IH0pO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fbWFrZShub2Rlcyk7XG59XG5leHBvcnRzLm5vdCA9IG5vdDtcbi8qKlxuICogRmlsdGVycyB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMgdG8gb25seSB0aG9zZSB3aGljaCBoYXZlIHRoZSBnaXZlbiBET01cbiAqIGVsZW1lbnQgYXMgYSBkZXNjZW5kYW50IG9yIHdoaWNoIGhhdmUgYSBkZXNjZW5kYW50IHRoYXQgbWF0Y2hlcyB0aGUgZ2l2ZW5cbiAqIHNlbGVjdG9yLiBFcXVpdmFsZW50IHRvIGAuZmlsdGVyKCc6aGFzKHNlbGVjdG9yKScpYC5cbiAqXG4gKiBAY2F0ZWdvcnkgVHJhdmVyc2luZ1xuICogQGV4YW1wbGUgPGNhcHRpb24+U2VsZWN0b3I8L2NhcHRpb24+XG4gKlxuICogYGBganNcbiAqICQoJ3VsJykuaGFzKCcucGVhcicpLmF0dHIoJ2lkJyk7XG4gKiAvLz0+IGZydWl0c1xuICogYGBgXG4gKlxuICogQGV4YW1wbGUgPGNhcHRpb24+RWxlbWVudDwvY2FwdGlvbj5cbiAqXG4gKiBgYGBqc1xuICogJCgndWwnKS5oYXMoJCgnLnBlYXInKVswXSkuYXR0cignaWQnKTtcbiAqIC8vPT4gZnJ1aXRzXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gc2VsZWN0b3JPckhheXN0YWNrIC0gRWxlbWVudCB0byBsb29rIGZvci5cbiAqIEByZXR1cm5zIFRoZSBmaWx0ZXJlZCBjb2xsZWN0aW9uLlxuICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9hcGkuanF1ZXJ5LmNvbS9oYXMvfVxuICovXG5mdW5jdGlvbiBoYXMoc2VsZWN0b3JPckhheXN0YWNrKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICByZXR1cm4gdGhpcy5maWx0ZXIodHlwZW9mIHNlbGVjdG9yT3JIYXlzdGFjayA9PT0gJ3N0cmluZydcbiAgICAgICAgPyAvLyBVc2luZyB0aGUgYDpoYXNgIHNlbGVjdG9yIGhlcmUgc2hvcnQtY2lyY3VpdHMgc2VhcmNoZXMuXG4gICAgICAgICAgICBcIjpoYXMoXCIuY29uY2F0KHNlbGVjdG9yT3JIYXlzdGFjaywgXCIpXCIpXG4gICAgICAgIDogZnVuY3Rpb24gKF8sIGVsKSB7IHJldHVybiBfdGhpcy5fbWFrZShlbCkuZmluZChzZWxlY3Rvck9ySGF5c3RhY2spLmxlbmd0aCA+IDA7IH0pO1xufVxuZXhwb3J0cy5oYXMgPSBoYXM7XG4vKipcbiAqIFdpbGwgc2VsZWN0IHRoZSBmaXJzdCBlbGVtZW50IG9mIGEgY2hlZXJpbyBvYmplY3QuXG4gKlxuICogQGNhdGVnb3J5IFRyYXZlcnNpbmdcbiAqIEBleGFtcGxlXG4gKlxuICogYGBganNcbiAqICQoJyNmcnVpdHMnKS5jaGlsZHJlbigpLmZpcnN0KCkudGV4dCgpO1xuICogLy89PiBBcHBsZVxuICogYGBgXG4gKlxuICogQHJldHVybnMgVGhlIGZpcnN0IGVsZW1lbnQuXG4gKiBAc2VlIHtAbGluayBodHRwczovL2FwaS5qcXVlcnkuY29tL2ZpcnN0L31cbiAqL1xuZnVuY3Rpb24gZmlyc3QoKSB7XG4gICAgcmV0dXJuIHRoaXMubGVuZ3RoID4gMSA/IHRoaXMuX21ha2UodGhpc1swXSkgOiB0aGlzO1xufVxuZXhwb3J0cy5maXJzdCA9IGZpcnN0O1xuLyoqXG4gKiBXaWxsIHNlbGVjdCB0aGUgbGFzdCBlbGVtZW50IG9mIGEgY2hlZXJpbyBvYmplY3QuXG4gKlxuICogQGNhdGVnb3J5IFRyYXZlcnNpbmdcbiAqIEBleGFtcGxlXG4gKlxuICogYGBganNcbiAqICQoJyNmcnVpdHMnKS5jaGlsZHJlbigpLmxhc3QoKS50ZXh0KCk7XG4gKiAvLz0+IFBlYXJcbiAqIGBgYFxuICpcbiAqIEByZXR1cm5zIFRoZSBsYXN0IGVsZW1lbnQuXG4gKiBAc2VlIHtAbGluayBodHRwczovL2FwaS5qcXVlcnkuY29tL2xhc3QvfVxuICovXG5mdW5jdGlvbiBsYXN0KCkge1xuICAgIHJldHVybiB0aGlzLmxlbmd0aCA+IDAgPyB0aGlzLl9tYWtlKHRoaXNbdGhpcy5sZW5ndGggLSAxXSkgOiB0aGlzO1xufVxuZXhwb3J0cy5sYXN0ID0gbGFzdDtcbi8qKlxuICogUmVkdWNlIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cyB0byB0aGUgb25lIGF0IHRoZSBzcGVjaWZpZWQgaW5kZXguIFVzZVxuICogYC5lcSgtaSlgIHRvIGNvdW50IGJhY2t3YXJkcyBmcm9tIHRoZSBsYXN0IHNlbGVjdGVkIGVsZW1lbnQuXG4gKlxuICogQGNhdGVnb3J5IFRyYXZlcnNpbmdcbiAqIEBleGFtcGxlXG4gKlxuICogYGBganNcbiAqICQoJ2xpJykuZXEoMCkudGV4dCgpO1xuICogLy89PiBBcHBsZVxuICpcbiAqICQoJ2xpJykuZXEoLTEpLnRleHQoKTtcbiAqIC8vPT4gUGVhclxuICogYGBgXG4gKlxuICogQHBhcmFtIGkgLSBJbmRleCBvZiB0aGUgZWxlbWVudCB0byBzZWxlY3QuXG4gKiBAcmV0dXJucyBUaGUgZWxlbWVudCBhdCB0aGUgYGlgdGggcG9zaXRpb24uXG4gKiBAc2VlIHtAbGluayBodHRwczovL2FwaS5qcXVlcnkuY29tL2VxL31cbiAqL1xuZnVuY3Rpb24gZXEoaSkge1xuICAgIHZhciBfYTtcbiAgICBpID0gK2k7XG4gICAgLy8gVXNlIHRoZSBmaXJzdCBpZGVudGl0eSBvcHRpbWl6YXRpb24gaWYgcG9zc2libGVcbiAgICBpZiAoaSA9PT0gMCAmJiB0aGlzLmxlbmd0aCA8PSAxKVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICBpZiAoaSA8IDApXG4gICAgICAgIGkgPSB0aGlzLmxlbmd0aCArIGk7XG4gICAgcmV0dXJuIHRoaXMuX21ha2UoKF9hID0gdGhpc1tpXSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogW10pO1xufVxuZXhwb3J0cy5lcSA9IGVxO1xuZnVuY3Rpb24gZ2V0KGkpIHtcbiAgICBpZiAoaSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRvQXJyYXkoKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXNbaSA8IDAgPyB0aGlzLmxlbmd0aCArIGkgOiBpXTtcbn1cbmV4cG9ydHMuZ2V0ID0gZ2V0O1xuLyoqXG4gKiBSZXRyaWV2ZSBhbGwgdGhlIERPTSBlbGVtZW50cyBjb250YWluZWQgaW4gdGhlIGpRdWVyeSBzZXQgYXMgYW4gYXJyYXkuXG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiBgYGBqc1xuICogJCgnbGknKS50b0FycmF5KCk7XG4gKiAvLz0+IFsgey4uLn0sIHsuLi59LCB7Li4ufSBdXG4gKiBgYGBcbiAqXG4gKiBAcmV0dXJucyBUaGUgY29udGFpbmVkIGl0ZW1zLlxuICovXG5mdW5jdGlvbiB0b0FycmF5KCkge1xuICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0aGlzKTtcbn1cbmV4cG9ydHMudG9BcnJheSA9IHRvQXJyYXk7XG4vKipcbiAqIFNlYXJjaCBmb3IgYSBnaXZlbiBlbGVtZW50IGZyb20gYW1vbmcgdGhlIG1hdGNoZWQgZWxlbWVudHMuXG4gKlxuICogQGNhdGVnb3J5IFRyYXZlcnNpbmdcbiAqIEBleGFtcGxlXG4gKlxuICogYGBganNcbiAqICQoJy5wZWFyJykuaW5kZXgoKTtcbiAqIC8vPT4gMiAkKCcub3JhbmdlJykuaW5kZXgoJ2xpJyk7XG4gKiAvLz0+IDFcbiAqICQoJy5hcHBsZScpLmluZGV4KCQoJyNmcnVpdCwgbGknKSk7XG4gKiAvLz0+IDFcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBzZWxlY3Rvck9yTmVlZGxlIC0gRWxlbWVudCB0byBsb29rIGZvci5cbiAqIEByZXR1cm5zIFRoZSBpbmRleCBvZiB0aGUgZWxlbWVudC5cbiAqIEBzZWUge0BsaW5rIGh0dHBzOi8vYXBpLmpxdWVyeS5jb20vaW5kZXgvfVxuICovXG5mdW5jdGlvbiBpbmRleChzZWxlY3Rvck9yTmVlZGxlKSB7XG4gICAgdmFyICRoYXlzdGFjaztcbiAgICB2YXIgbmVlZGxlO1xuICAgIGlmIChzZWxlY3Rvck9yTmVlZGxlID09IG51bGwpIHtcbiAgICAgICAgJGhheXN0YWNrID0gdGhpcy5wYXJlbnQoKS5jaGlsZHJlbigpO1xuICAgICAgICBuZWVkbGUgPSB0aGlzWzBdO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2Ygc2VsZWN0b3JPck5lZWRsZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgJGhheXN0YWNrID0gdGhpcy5fbWFrZShzZWxlY3Rvck9yTmVlZGxlKTtcbiAgICAgICAgbmVlZGxlID0gdGhpc1swXTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdGhpcy1hbGlhc1xuICAgICAgICAkaGF5c3RhY2sgPSB0aGlzO1xuICAgICAgICBuZWVkbGUgPSAoMCwgdXRpbHNfanNfMS5pc0NoZWVyaW8pKHNlbGVjdG9yT3JOZWVkbGUpXG4gICAgICAgICAgICA/IHNlbGVjdG9yT3JOZWVkbGVbMF1cbiAgICAgICAgICAgIDogc2VsZWN0b3JPck5lZWRsZTtcbiAgICB9XG4gICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwoJGhheXN0YWNrLCBuZWVkbGUpO1xufVxuZXhwb3J0cy5pbmRleCA9IGluZGV4O1xuLyoqXG4gKiBHZXRzIHRoZSBlbGVtZW50cyBtYXRjaGluZyB0aGUgc3BlY2lmaWVkIHJhbmdlICgwLWJhc2VkIHBvc2l0aW9uKS5cbiAqXG4gKiBAY2F0ZWdvcnkgVHJhdmVyc2luZ1xuICogQGV4YW1wbGVcbiAqXG4gKiBgYGBqc1xuICogJCgnbGknKS5zbGljZSgxKS5lcSgwKS50ZXh0KCk7XG4gKiAvLz0+ICdPcmFuZ2UnXG4gKlxuICogJCgnbGknKS5zbGljZSgxLCAyKS5sZW5ndGg7XG4gKiAvLz0+IDFcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBzdGFydCAtIEEgcG9zaXRpb24gYXQgd2hpY2ggdGhlIGVsZW1lbnRzIGJlZ2luIHRvIGJlIHNlbGVjdGVkLiBJZlxuICogICBuZWdhdGl2ZSwgaXQgaW5kaWNhdGVzIGFuIG9mZnNldCBmcm9tIHRoZSBlbmQgb2YgdGhlIHNldC5cbiAqIEBwYXJhbSBlbmQgLSBBIHBvc2l0aW9uIGF0IHdoaWNoIHRoZSBlbGVtZW50cyBzdG9wIGJlaW5nIHNlbGVjdGVkLiBJZlxuICogICBuZWdhdGl2ZSwgaXQgaW5kaWNhdGVzIGFuIG9mZnNldCBmcm9tIHRoZSBlbmQgb2YgdGhlIHNldC4gSWYgb21pdHRlZCwgdGhlXG4gKiAgIHJhbmdlIGNvbnRpbnVlcyB1bnRpbCB0aGUgZW5kIG9mIHRoZSBzZXQuXG4gKiBAcmV0dXJucyBUaGUgZWxlbWVudHMgbWF0Y2hpbmcgdGhlIHNwZWNpZmllZCByYW5nZS5cbiAqIEBzZWUge0BsaW5rIGh0dHBzOi8vYXBpLmpxdWVyeS5jb20vc2xpY2UvfVxuICovXG5mdW5jdGlvbiBzbGljZShzdGFydCwgZW5kKSB7XG4gICAgcmV0dXJuIHRoaXMuX21ha2UoQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodGhpcywgc3RhcnQsIGVuZCkpO1xufVxuZXhwb3J0cy5zbGljZSA9IHNsaWNlO1xuLyoqXG4gKiBFbmQgdGhlIG1vc3QgcmVjZW50IGZpbHRlcmluZyBvcGVyYXRpb24gaW4gdGhlIGN1cnJlbnQgY2hhaW4gYW5kIHJldHVybiB0aGVcbiAqIHNldCBvZiBtYXRjaGVkIGVsZW1lbnRzIHRvIGl0cyBwcmV2aW91cyBzdGF0ZS5cbiAqXG4gKiBAY2F0ZWdvcnkgVHJhdmVyc2luZ1xuICogQGV4YW1wbGVcbiAqXG4gKiBgYGBqc1xuICogJCgnbGknKS5lcSgwKS5lbmQoKS5sZW5ndGg7XG4gKiAvLz0+IDNcbiAqIGBgYFxuICpcbiAqIEByZXR1cm5zIFRoZSBwcmV2aW91cyBzdGF0ZSBvZiB0aGUgc2V0IG9mIG1hdGNoZWQgZWxlbWVudHMuXG4gKiBAc2VlIHtAbGluayBodHRwczovL2FwaS5qcXVlcnkuY29tL2VuZC99XG4gKi9cbmZ1bmN0aW9uIGVuZCgpIHtcbiAgICB2YXIgX2E7XG4gICAgcmV0dXJuIChfYSA9IHRoaXMucHJldk9iamVjdCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogdGhpcy5fbWFrZShbXSk7XG59XG5leHBvcnRzLmVuZCA9IGVuZDtcbi8qKlxuICogQWRkIGVsZW1lbnRzIHRvIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbGVtZW50cy5cbiAqXG4gKiBAY2F0ZWdvcnkgVHJhdmVyc2luZ1xuICogQGV4YW1wbGVcbiAqXG4gKiBgYGBqc1xuICogJCgnLmFwcGxlJykuYWRkKCcub3JhbmdlJykubGVuZ3RoO1xuICogLy89PiAyXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gb3RoZXIgLSBFbGVtZW50cyB0byBhZGQuXG4gKiBAcGFyYW0gY29udGV4dCAtIE9wdGlvbmFsbHkgdGhlIGNvbnRleHQgb2YgdGhlIG5ldyBzZWxlY3Rpb24uXG4gKiBAcmV0dXJucyBUaGUgY29tYmluZWQgc2V0LlxuICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9hcGkuanF1ZXJ5LmNvbS9hZGQvfVxuICovXG5mdW5jdGlvbiBhZGQob3RoZXIsIGNvbnRleHQpIHtcbiAgICB2YXIgc2VsZWN0aW9uID0gdGhpcy5fbWFrZShvdGhlciwgY29udGV4dCk7XG4gICAgdmFyIGNvbnRlbnRzID0gKDAsIGRvbXV0aWxzXzEudW5pcXVlU29ydCkoX19zcHJlYWRBcnJheShfX3NwcmVhZEFycmF5KFtdLCB0aGlzLmdldCgpLCB0cnVlKSwgc2VsZWN0aW9uLmdldCgpLCB0cnVlKSk7XG4gICAgcmV0dXJuIHRoaXMuX21ha2UoY29udGVudHMpO1xufVxuZXhwb3J0cy5hZGQgPSBhZGQ7XG4vKipcbiAqIEFkZCB0aGUgcHJldmlvdXMgc2V0IG9mIGVsZW1lbnRzIG9uIHRoZSBzdGFjayB0byB0aGUgY3VycmVudCBzZXQsIG9wdGlvbmFsbHlcbiAqIGZpbHRlcmVkIGJ5IGEgc2VsZWN0b3IuXG4gKlxuICogQGNhdGVnb3J5IFRyYXZlcnNpbmdcbiAqIEBleGFtcGxlXG4gKlxuICogYGBganNcbiAqICQoJ2xpJykuZXEoMCkuYWRkQmFjaygnLm9yYW5nZScpLmxlbmd0aDtcbiAqIC8vPT4gMlxuICogYGBgXG4gKlxuICogQHBhcmFtIHNlbGVjdG9yIC0gU2VsZWN0b3IgZm9yIHRoZSBlbGVtZW50cyB0byBhZGQuXG4gKiBAcmV0dXJucyBUaGUgY29tYmluZWQgc2V0LlxuICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9hcGkuanF1ZXJ5LmNvbS9hZGRCYWNrL31cbiAqL1xuZnVuY3Rpb24gYWRkQmFjayhzZWxlY3Rvcikge1xuICAgIHJldHVybiB0aGlzLnByZXZPYmplY3RcbiAgICAgICAgPyB0aGlzLmFkZChzZWxlY3RvciA/IHRoaXMucHJldk9iamVjdC5maWx0ZXIoc2VsZWN0b3IpIDogdGhpcy5wcmV2T2JqZWN0KVxuICAgICAgICA6IHRoaXM7XG59XG5leHBvcnRzLmFkZEJhY2sgPSBhZGRCYWNrO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHJhdmVyc2luZy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59KTtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5DaGVlcmlvID0gdm9pZCAwO1xudmFyIEF0dHJpYnV0ZXMgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4vYXBpL2F0dHJpYnV0ZXMuanNcIikpO1xudmFyIFRyYXZlcnNpbmcgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4vYXBpL3RyYXZlcnNpbmcuanNcIikpO1xudmFyIE1hbmlwdWxhdGlvbiA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiLi9hcGkvbWFuaXB1bGF0aW9uLmpzXCIpKTtcbnZhciBDc3MgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4vYXBpL2Nzcy5qc1wiKSk7XG52YXIgRm9ybXMgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4vYXBpL2Zvcm1zLmpzXCIpKTtcbnZhciBDaGVlcmlvID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIC8qKlxuICAgICAqIEluc3RhbmNlIG9mIGNoZWVyaW8uIE1ldGhvZHMgYXJlIHNwZWNpZmllZCBpbiB0aGUgbW9kdWxlcy4gVXNhZ2Ugb2YgdGhpc1xuICAgICAqIGNvbnN0cnVjdG9yIGlzIG5vdCByZWNvbW1lbmRlZC4gUGxlYXNlIHVzZSBgJC5sb2FkYCBpbnN0ZWFkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0gZWxlbWVudHMgLSBUaGUgbmV3IHNlbGVjdGlvbi5cbiAgICAgKiBAcGFyYW0gcm9vdCAtIFNldHMgdGhlIHJvb3Qgbm9kZS5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbnMgZm9yIHRoZSBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBDaGVlcmlvKGVsZW1lbnRzLCByb290LCBvcHRpb25zKSB7XG4gICAgICAgIHRoaXMubGVuZ3RoID0gMDtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5fcm9vdCA9IHJvb3Q7XG4gICAgICAgIGlmIChlbGVtZW50cykge1xuICAgICAgICAgICAgZm9yICh2YXIgaWR4ID0gMDsgaWR4IDwgZWxlbWVudHMubGVuZ3RoOyBpZHgrKykge1xuICAgICAgICAgICAgICAgIHRoaXNbaWR4XSA9IGVsZW1lbnRzW2lkeF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmxlbmd0aCA9IGVsZW1lbnRzLmxlbmd0aDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gQ2hlZXJpbztcbn0oKSk7XG5leHBvcnRzLkNoZWVyaW8gPSBDaGVlcmlvO1xuLyoqIFNldCBhIHNpZ25hdHVyZSBvZiB0aGUgb2JqZWN0LiAqL1xuQ2hlZXJpby5wcm90b3R5cGUuY2hlZXJpbyA9ICdbY2hlZXJpbyBvYmplY3RdJztcbi8qXG4gKiBNYWtlIGNoZWVyaW8gYW4gYXJyYXktbGlrZSBvYmplY3RcbiAqL1xuQ2hlZXJpby5wcm90b3R5cGUuc3BsaWNlID0gQXJyYXkucHJvdG90eXBlLnNwbGljZTtcbi8vIFN1cHBvcnQgZm9yIChjb25zdCBlbGVtZW50IG9mICQoLi4uKSkgaXRlcmF0aW9uOlxuQ2hlZXJpby5wcm90b3R5cGVbU3ltYm9sLml0ZXJhdG9yXSA9IEFycmF5LnByb3RvdHlwZVtTeW1ib2wuaXRlcmF0b3JdO1xuLy8gUGx1ZyBpbiB0aGUgQVBJXG5PYmplY3QuYXNzaWduKENoZWVyaW8ucHJvdG90eXBlLCBBdHRyaWJ1dGVzLCBUcmF2ZXJzaW5nLCBNYW5pcHVsYXRpb24sIENzcywgRm9ybXMpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2hlZXJpby5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59KTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG52YXIgX19pbXBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydFN0YXIpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoayAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwgayk7XG4gICAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufTtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucm9vdCA9IGV4cG9ydHMucGFyc2VIVE1MID0gZXhwb3J0cy5tZXJnZSA9IGV4cG9ydHMuY29udGFpbnMgPSBleHBvcnRzLnRleHQgPSBleHBvcnRzLnhtbCA9IGV4cG9ydHMuaHRtbCA9IGV4cG9ydHMubG9hZCA9IHZvaWQgMDtcbi8qKlxuICogVHlwZXMgdXNlZCBpbiBzaWduYXR1cmVzIG9mIENoZWVyaW8gbWV0aG9kcy5cbiAqXG4gKiBAY2F0ZWdvcnkgQ2hlZXJpb1xuICovXG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vdHlwZXMuanNcIiksIGV4cG9ydHMpO1xudmFyIGxvYWRfanNfMSA9IHJlcXVpcmUoXCIuL2xvYWQuanNcIik7XG52YXIgcGFyc2VfanNfMSA9IHJlcXVpcmUoXCIuL3BhcnNlLmpzXCIpO1xudmFyIHBhcnNlNV9hZGFwdGVyX2pzXzEgPSByZXF1aXJlKFwiLi9wYXJzZXJzL3BhcnNlNS1hZGFwdGVyLmpzXCIpO1xudmFyIGRvbV9zZXJpYWxpemVyXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImRvbS1zZXJpYWxpemVyXCIpKTtcbnZhciBodG1scGFyc2VyMl8xID0gcmVxdWlyZShcImh0bWxwYXJzZXIyXCIpO1xudmFyIHBhcnNlID0gKDAsIHBhcnNlX2pzXzEuZ2V0UGFyc2UpKGZ1bmN0aW9uIChjb250ZW50LCBvcHRpb25zLCBpc0RvY3VtZW50LCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIG9wdGlvbnMueG1sTW9kZSB8fCBvcHRpb25zLl91c2VIdG1sUGFyc2VyMlxuICAgICAgICA/ICgwLCBodG1scGFyc2VyMl8xLnBhcnNlRG9jdW1lbnQpKGNvbnRlbnQsIG9wdGlvbnMpXG4gICAgICAgIDogKDAsIHBhcnNlNV9hZGFwdGVyX2pzXzEucGFyc2VXaXRoUGFyc2U1KShjb250ZW50LCBvcHRpb25zLCBpc0RvY3VtZW50LCBjb250ZXh0KTtcbn0pO1xuLy8gRHVwbGljYXRlIGRvY3MgZHVlIHRvIGh0dHBzOi8vZ2l0aHViLmNvbS9UeXBlU3Ryb25nL3R5cGVkb2MvaXNzdWVzLzE2MTZcbi8qKlxuICogQ3JlYXRlIGEgcXVlcnlpbmcgZnVuY3Rpb24sIGJvdW5kIHRvIGEgZG9jdW1lbnQgY3JlYXRlZCBmcm9tIHRoZSBwcm92aWRlZCBtYXJrdXAuXG4gKlxuICogTm90ZSB0aGF0IHNpbWlsYXIgdG8gd2ViIGJyb3dzZXIgY29udGV4dHMsIHRoaXMgb3BlcmF0aW9uIG1heSBpbnRyb2R1Y2VcbiAqIGA8aHRtbD5gLCBgPGhlYWQ+YCwgYW5kIGA8Ym9keT5gIGVsZW1lbnRzOyBzZXQgYGlzRG9jdW1lbnRgIHRvIGBmYWxzZWAgdG9cbiAqIHN3aXRjaCB0byBmcmFnbWVudCBtb2RlIGFuZCBkaXNhYmxlIHRoaXMuXG4gKlxuICogQHBhcmFtIGNvbnRlbnQgLSBNYXJrdXAgdG8gYmUgbG9hZGVkLlxuICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25zIGZvciB0aGUgY3JlYXRlZCBpbnN0YW5jZS5cbiAqIEBwYXJhbSBpc0RvY3VtZW50IC0gQWxsb3dzIHBhcnNlciB0byBiZSBzd2l0Y2hlZCB0byBmcmFnbWVudCBtb2RlLlxuICogQHJldHVybnMgVGhlIGxvYWRlZCBkb2N1bWVudC5cbiAqIEBzZWUge0BsaW5rIGh0dHBzOi8vY2hlZXJpby5qcy5vcmcjbG9hZGluZ30gZm9yIGFkZGl0aW9uYWwgdXNhZ2UgaW5mb3JtYXRpb24uXG4gKi9cbmV4cG9ydHMubG9hZCA9ICgwLCBsb2FkX2pzXzEuZ2V0TG9hZCkocGFyc2UsIGZ1bmN0aW9uIChkb20sIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gb3B0aW9ucy54bWxNb2RlIHx8IG9wdGlvbnMuX3VzZUh0bWxQYXJzZXIyXG4gICAgICAgID8gKDAsIGRvbV9zZXJpYWxpemVyXzEuZGVmYXVsdCkoZG9tLCBvcHRpb25zKVxuICAgICAgICA6ICgwLCBwYXJzZTVfYWRhcHRlcl9qc18xLnJlbmRlcldpdGhQYXJzZTUpKGRvbSk7XG59KTtcbi8qKlxuICogVGhlIGRlZmF1bHQgY2hlZXJpbyBpbnN0YW5jZS5cbiAqXG4gKiBAZGVwcmVjYXRlZCBVc2UgdGhlIGZ1bmN0aW9uIHJldHVybmVkIGJ5IGBsb2FkYCBpbnN0ZWFkLlxuICovXG5leHBvcnRzLmRlZmF1bHQgPSAoMCwgZXhwb3J0cy5sb2FkKShbXSk7XG52YXIgc3RhdGljX2pzXzEgPSByZXF1aXJlKFwiLi9zdGF0aWMuanNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJodG1sXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBzdGF0aWNfanNfMS5odG1sOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwieG1sXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBzdGF0aWNfanNfMS54bWw7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ0ZXh0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBzdGF0aWNfanNfMS50ZXh0OyB9IH0pO1xudmFyIHN0YXRpY01ldGhvZHMgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4vc3RhdGljLmpzXCIpKTtcbi8qKlxuICogSW4gb3JkZXIgdG8gcHJvbW90ZSBjb25zaXN0ZW5jeSB3aXRoIHRoZSBqUXVlcnkgbGlicmFyeSwgdXNlcnMgYXJlIGVuY291cmFnZWRcbiAqIHRvIGluc3RlYWQgdXNlIHRoZSBzdGF0aWMgbWV0aG9kIG9mIHRoZSBzYW1lIG5hbWUuXG4gKlxuICogQGRlcHJlY2F0ZWRcbiAqIEBleGFtcGxlXG4gKlxuICogYGBganNcbiAqIGNvbnN0ICQgPSBjaGVlcmlvLmxvYWQoJzxkaXY+PHA+PC9wPjwvZGl2PicpO1xuICpcbiAqICQuY29udGFpbnMoJCgnZGl2JykuZ2V0KDApLCAkKCdwJykuZ2V0KDApKTtcbiAqIC8vPT4gdHJ1ZVxuICpcbiAqICQuY29udGFpbnMoJCgncCcpLmdldCgwKSwgJCgnZGl2JykuZ2V0KDApKTtcbiAqIC8vPT4gZmFsc2VcbiAqIGBgYFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5leHBvcnRzLmNvbnRhaW5zID0gc3RhdGljTWV0aG9kcy5jb250YWlucztcbi8qKlxuICogSW4gb3JkZXIgdG8gcHJvbW90ZSBjb25zaXN0ZW5jeSB3aXRoIHRoZSBqUXVlcnkgbGlicmFyeSwgdXNlcnMgYXJlIGVuY291cmFnZWRcbiAqIHRvIGluc3RlYWQgdXNlIHRoZSBzdGF0aWMgbWV0aG9kIG9mIHRoZSBzYW1lIG5hbWUuXG4gKlxuICogQGRlcHJlY2F0ZWRcbiAqIEBleGFtcGxlXG4gKlxuICogYGBganNcbiAqIGNvbnN0ICQgPSBjaGVlcmlvLmxvYWQoJycpO1xuICpcbiAqICQubWVyZ2UoWzEsIDJdLCBbMywgNF0pO1xuICogLy89PiBbMSwgMiwgMywgNF1cbiAqIGBgYFxuICovXG5leHBvcnRzLm1lcmdlID0gc3RhdGljTWV0aG9kcy5tZXJnZTtcbi8qKlxuICogSW4gb3JkZXIgdG8gcHJvbW90ZSBjb25zaXN0ZW5jeSB3aXRoIHRoZSBqUXVlcnkgbGlicmFyeSwgdXNlcnMgYXJlIGVuY291cmFnZWRcbiAqIHRvIGluc3RlYWQgdXNlIHRoZSBzdGF0aWMgbWV0aG9kIG9mIHRoZSBzYW1lIG5hbWUgYXMgaXQgaXMgZGVmaW5lZCBvbiB0aGVcbiAqIFwibG9hZGVkXCIgQ2hlZXJpbyBmYWN0b3J5IGZ1bmN0aW9uLlxuICpcbiAqIEBkZXByZWNhdGVkIFNlZSB7QGxpbmsgc3RhdGljL3BhcnNlSFRNTH0uXG4gKiBAZXhhbXBsZVxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCAkID0gY2hlZXJpby5sb2FkKCcnKTtcbiAqICQucGFyc2VIVE1MKCc8Yj5tYXJrdXA8L2I+Jyk7XG4gKiBgYGBcbiAqL1xuZXhwb3J0cy5wYXJzZUhUTUwgPSBzdGF0aWNNZXRob2RzLnBhcnNlSFRNTDtcbi8qKlxuICogVXNlcnMgc2Vla2luZyB0byBhY2Nlc3MgdGhlIHRvcC1sZXZlbCBlbGVtZW50IG9mIGEgcGFyc2VkIGRvY3VtZW50IHNob3VsZFxuICogaW5zdGVhZCB1c2UgdGhlIGByb290YCBzdGF0aWMgbWV0aG9kIG9mIGEgXCJsb2FkZWRcIiBDaGVlcmlvIGZ1bmN0aW9uLlxuICpcbiAqIEBkZXByZWNhdGVkXG4gKiBAZXhhbXBsZVxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCAkID0gY2hlZXJpby5sb2FkKCcnKTtcbiAqICQucm9vdCgpO1xuICogYGBgXG4gKi9cbmV4cG9ydHMucm9vdCA9IHN0YXRpY01ldGhvZHMucm9vdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKGIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbnZhciBfX2Fzc2lnbiA9ICh0aGlzICYmIHRoaXMuX19hc3NpZ24pIHx8IGZ1bmN0aW9uICgpIHtcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXG4gICAgICAgICAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHQ7XG4gICAgfTtcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn07XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19zZXRNb2R1bGVEZWZhdWx0KSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCB2KSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xufSkgOiBmdW5jdGlvbihvLCB2KSB7XG4gICAgb1tcImRlZmF1bHRcIl0gPSB2O1xufSk7XG52YXIgX19pbXBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydFN0YXIpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoayAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwgayk7XG4gICAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0TG9hZCA9IHZvaWQgMDtcbnZhciBvcHRpb25zX2pzXzEgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4vb3B0aW9ucy5qc1wiKSk7XG52YXIgc3RhdGljTWV0aG9kcyA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiLi9zdGF0aWMuanNcIikpO1xudmFyIGNoZWVyaW9fanNfMSA9IHJlcXVpcmUoXCIuL2NoZWVyaW8uanNcIik7XG52YXIgdXRpbHNfanNfMSA9IHJlcXVpcmUoXCIuL3V0aWxzLmpzXCIpO1xuZnVuY3Rpb24gZ2V0TG9hZChwYXJzZSwgcmVuZGVyKSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgcXVlcnlpbmcgZnVuY3Rpb24sIGJvdW5kIHRvIGEgZG9jdW1lbnQgY3JlYXRlZCBmcm9tIHRoZSBwcm92aWRlZCBtYXJrdXAuXG4gICAgICpcbiAgICAgKiBOb3RlIHRoYXQgc2ltaWxhciB0byB3ZWIgYnJvd3NlciBjb250ZXh0cywgdGhpcyBvcGVyYXRpb24gbWF5IGludHJvZHVjZVxuICAgICAqIGA8aHRtbD5gLCBgPGhlYWQ+YCwgYW5kIGA8Ym9keT5gIGVsZW1lbnRzOyBzZXQgYGlzRG9jdW1lbnRgIHRvIGBmYWxzZWAgdG9cbiAgICAgKiBzd2l0Y2ggdG8gZnJhZ21lbnQgbW9kZSBhbmQgZGlzYWJsZSB0aGlzLlxuICAgICAqXG4gICAgICogQHBhcmFtIGNvbnRlbnQgLSBNYXJrdXAgdG8gYmUgbG9hZGVkLlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9ucyBmb3IgdGhlIGNyZWF0ZWQgaW5zdGFuY2UuXG4gICAgICogQHBhcmFtIGlzRG9jdW1lbnQgLSBBbGxvd3MgcGFyc2VyIHRvIGJlIHN3aXRjaGVkIHRvIGZyYWdtZW50IG1vZGUuXG4gICAgICogQHJldHVybnMgVGhlIGxvYWRlZCBkb2N1bWVudC5cbiAgICAgKiBAc2VlIHtAbGluayBodHRwczovL2NoZWVyaW8uanMub3JnI2xvYWRpbmd9IGZvciBhZGRpdGlvbmFsIHVzYWdlIGluZm9ybWF0aW9uLlxuICAgICAqL1xuICAgIHJldHVybiBmdW5jdGlvbiBsb2FkKGNvbnRlbnQsIG9wdGlvbnMsIGlzRG9jdW1lbnQpIHtcbiAgICAgICAgaWYgKGlzRG9jdW1lbnQgPT09IHZvaWQgMCkgeyBpc0RvY3VtZW50ID0gdHJ1ZTsgfVxuICAgICAgICBpZiAoY29udGVudCA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NoZWVyaW8ubG9hZCgpIGV4cGVjdHMgYSBzdHJpbmcnKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaW50ZXJuYWxPcHRzID0gX19hc3NpZ24oX19hc3NpZ24oe30sIG9wdGlvbnNfanNfMS5kZWZhdWx0KSwgKDAsIG9wdGlvbnNfanNfMS5mbGF0dGVuKShvcHRpb25zKSk7XG4gICAgICAgIHZhciBpbml0aWFsUm9vdCA9IHBhcnNlKGNvbnRlbnQsIGludGVybmFsT3B0cywgaXNEb2N1bWVudCwgbnVsbCk7XG4gICAgICAgIC8qKiBDcmVhdGUgYW4gZXh0ZW5kZWQgY2xhc3MgaGVyZSwgc28gdGhhdCBleHRlbnNpb25zIG9ubHkgbGl2ZSBvbiBvbmUgaW5zdGFuY2UuICovXG4gICAgICAgIHZhciBMb2FkZWRDaGVlcmlvID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICAgICAgX19leHRlbmRzKExvYWRlZENoZWVyaW8sIF9zdXBlcik7XG4gICAgICAgICAgICBmdW5jdGlvbiBMb2FkZWRDaGVlcmlvKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIExvYWRlZENoZWVyaW8ucHJvdG90eXBlLl9tYWtlID0gZnVuY3Rpb24gKHNlbGVjdG9yLCBjb250ZXh0KSB7XG4gICAgICAgICAgICAgICAgdmFyIGNoZWVyaW8gPSBpbml0aWFsaXplKHNlbGVjdG9yLCBjb250ZXh0KTtcbiAgICAgICAgICAgICAgICBjaGVlcmlvLnByZXZPYmplY3QgPSB0aGlzO1xuICAgICAgICAgICAgICAgIHJldHVybiBjaGVlcmlvO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIExvYWRlZENoZWVyaW8ucHJvdG90eXBlLl9wYXJzZSA9IGZ1bmN0aW9uIChjb250ZW50LCBvcHRpb25zLCBpc0RvY3VtZW50LCBjb250ZXh0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlKGNvbnRlbnQsIG9wdGlvbnMsIGlzRG9jdW1lbnQsIGNvbnRleHQpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIExvYWRlZENoZWVyaW8ucHJvdG90eXBlLl9yZW5kZXIgPSBmdW5jdGlvbiAoZG9tKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlbmRlcihkb20sIHRoaXMub3B0aW9ucyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIExvYWRlZENoZWVyaW87XG4gICAgICAgIH0oY2hlZXJpb19qc18xLkNoZWVyaW8pKTtcbiAgICAgICAgZnVuY3Rpb24gaW5pdGlhbGl6ZShzZWxlY3RvciwgY29udGV4dCwgcm9vdCwgb3B0cykge1xuICAgICAgICAgICAgaWYgKHJvb3QgPT09IHZvaWQgMCkgeyByb290ID0gaW5pdGlhbFJvb3Q7IH1cbiAgICAgICAgICAgIC8vICQoJClcbiAgICAgICAgICAgIGlmIChzZWxlY3RvciAmJiAoMCwgdXRpbHNfanNfMS5pc0NoZWVyaW8pKHNlbGVjdG9yKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gc2VsZWN0b3I7XG4gICAgICAgICAgICB2YXIgb3B0aW9ucyA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCBpbnRlcm5hbE9wdHMpLCAoMCwgb3B0aW9uc19qc18xLmZsYXR0ZW4pKG9wdHMpKTtcbiAgICAgICAgICAgIHZhciByID0gdHlwZW9mIHJvb3QgPT09ICdzdHJpbmcnXG4gICAgICAgICAgICAgICAgPyBbcGFyc2Uocm9vdCwgb3B0aW9ucywgZmFsc2UsIG51bGwpXVxuICAgICAgICAgICAgICAgIDogJ2xlbmd0aCcgaW4gcm9vdFxuICAgICAgICAgICAgICAgICAgICA/IHJvb3RcbiAgICAgICAgICAgICAgICAgICAgOiBbcm9vdF07XG4gICAgICAgICAgICB2YXIgcm9vdEluc3RhbmNlID0gKDAsIHV0aWxzX2pzXzEuaXNDaGVlcmlvKShyKVxuICAgICAgICAgICAgICAgID8gclxuICAgICAgICAgICAgICAgIDogbmV3IExvYWRlZENoZWVyaW8ociwgbnVsbCwgb3B0aW9ucyk7XG4gICAgICAgICAgICAvLyBBZGQgYSBjeWNsaWMgcmVmZXJlbmNlLCBzbyB0aGF0IGNhbGxpbmcgbWV0aG9kcyBvbiBgX3Jvb3RgIG5ldmVyIGZhaWxzLlxuICAgICAgICAgICAgcm9vdEluc3RhbmNlLl9yb290ID0gcm9vdEluc3RhbmNlO1xuICAgICAgICAgICAgLy8gJCgpLCAkKG51bGwpLCAkKHVuZGVmaW5lZCksICQoZmFsc2UpXG4gICAgICAgICAgICBpZiAoIXNlbGVjdG9yKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBMb2FkZWRDaGVlcmlvKHVuZGVmaW5lZCwgcm9vdEluc3RhbmNlLCBvcHRpb25zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBlbGVtZW50cyA9IHR5cGVvZiBzZWxlY3RvciA9PT0gJ3N0cmluZycgJiYgKDAsIHV0aWxzX2pzXzEuaXNIdG1sKShzZWxlY3RvcilcbiAgICAgICAgICAgICAgICA/IC8vICQoPGh0bWw+KVxuICAgICAgICAgICAgICAgICAgICBwYXJzZShzZWxlY3Rvciwgb3B0aW9ucywgZmFsc2UsIG51bGwpLmNoaWxkcmVuXG4gICAgICAgICAgICAgICAgOiBpc05vZGUoc2VsZWN0b3IpXG4gICAgICAgICAgICAgICAgICAgID8gLy8gJChkb20pXG4gICAgICAgICAgICAgICAgICAgICAgICBbc2VsZWN0b3JdXG4gICAgICAgICAgICAgICAgICAgIDogQXJyYXkuaXNBcnJheShzZWxlY3RvcilcbiAgICAgICAgICAgICAgICAgICAgICAgID8gLy8gJChbZG9tXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RvclxuICAgICAgICAgICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB2YXIgaW5zdGFuY2UgPSBuZXcgTG9hZGVkQ2hlZXJpbyhlbGVtZW50cywgcm9vdEluc3RhbmNlLCBvcHRpb25zKTtcbiAgICAgICAgICAgIGlmIChlbGVtZW50cykge1xuICAgICAgICAgICAgICAgIHJldHVybiBpbnN0YW5jZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc2VsZWN0b3IgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmV4cGVjdGVkIHR5cGUgb2Ygc2VsZWN0b3InKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFdlIGtub3cgdGhhdCBvdXIgc2VsZWN0b3IgaXMgYSBzdHJpbmcgbm93LlxuICAgICAgICAgICAgdmFyIHNlYXJjaCA9IHNlbGVjdG9yO1xuICAgICAgICAgICAgdmFyIHNlYXJjaENvbnRleHQgPSAhY29udGV4dFxuICAgICAgICAgICAgICAgID8gLy8gSWYgd2UgZG9uJ3QgaGF2ZSBhIGNvbnRleHQsIG1heWJlIHdlIGhhdmUgYSByb290LCBmcm9tIGxvYWRpbmdcbiAgICAgICAgICAgICAgICAgICAgcm9vdEluc3RhbmNlXG4gICAgICAgICAgICAgICAgOiB0eXBlb2YgY29udGV4dCA9PT0gJ3N0cmluZydcbiAgICAgICAgICAgICAgICAgICAgPyAoMCwgdXRpbHNfanNfMS5pc0h0bWwpKGNvbnRleHQpXG4gICAgICAgICAgICAgICAgICAgICAgICA/IC8vICQoJ2xpJywgJzx1bD4uLi48L3VsPicpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IExvYWRlZENoZWVyaW8oW3BhcnNlKGNvbnRleHQsIG9wdGlvbnMsIGZhbHNlLCBudWxsKV0sIHJvb3RJbnN0YW5jZSwgb3B0aW9ucylcbiAgICAgICAgICAgICAgICAgICAgICAgIDogLy8gJCgnbGknLCAndWwnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICgoc2VhcmNoID0gXCJcIi5jb25jYXQoY29udGV4dCwgXCIgXCIpLmNvbmNhdChzZWFyY2gpKSwgcm9vdEluc3RhbmNlKVxuICAgICAgICAgICAgICAgICAgICA6ICgwLCB1dGlsc19qc18xLmlzQ2hlZXJpbykoY29udGV4dClcbiAgICAgICAgICAgICAgICAgICAgICAgID8gLy8gJCgnbGknLCAkKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHRcbiAgICAgICAgICAgICAgICAgICAgICAgIDogLy8gJCgnbGknLCBub2RlKSwgJCgnbGknLCBbbm9kZXNdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBMb2FkZWRDaGVlcmlvKEFycmF5LmlzQXJyYXkoY29udGV4dCkgPyBjb250ZXh0IDogW2NvbnRleHRdLCByb290SW5zdGFuY2UsIG9wdGlvbnMpO1xuICAgICAgICAgICAgLy8gSWYgd2Ugc3RpbGwgZG9uJ3QgaGF2ZSBhIGNvbnRleHQsIHJldHVyblxuICAgICAgICAgICAgaWYgKCFzZWFyY2hDb250ZXh0KVxuICAgICAgICAgICAgICAgIHJldHVybiBpbnN0YW5jZTtcbiAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgKiAjaWQsIC5jbGFzcywgdGFnXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHJldHVybiBzZWFyY2hDb250ZXh0LmZpbmQoc2VhcmNoKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBBZGQgaW4gc3RhdGljIG1ldGhvZHMgJiBwcm9wZXJ0aWVzXG4gICAgICAgIE9iamVjdC5hc3NpZ24oaW5pdGlhbGl6ZSwgc3RhdGljTWV0aG9kcywge1xuICAgICAgICAgICAgbG9hZDogbG9hZCxcbiAgICAgICAgICAgIC8vIGBfcm9vdGAgYW5kIGBfb3B0aW9uc2AgYXJlIHVzZWQgaW4gc3RhdGljIG1ldGhvZHMuXG4gICAgICAgICAgICBfcm9vdDogaW5pdGlhbFJvb3QsXG4gICAgICAgICAgICBfb3B0aW9uczogaW50ZXJuYWxPcHRzLFxuICAgICAgICAgICAgLy8gQWRkIGBmbmAgZm9yIHBsdWdpbnNcbiAgICAgICAgICAgIGZuOiBMb2FkZWRDaGVlcmlvLnByb3RvdHlwZSxcbiAgICAgICAgICAgIC8vIEFkZCB0aGUgcHJvdG90eXBlIGhlcmUgdG8gbWFpbnRhaW4gYGluc3RhbmNlb2ZgIGJlaGF2aW9yLlxuICAgICAgICAgICAgcHJvdG90eXBlOiBMb2FkZWRDaGVlcmlvLnByb3RvdHlwZSxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBpbml0aWFsaXplO1xuICAgIH07XG59XG5leHBvcnRzLmdldExvYWQgPSBnZXRMb2FkO1xuZnVuY3Rpb24gaXNOb2RlKG9iaikge1xuICAgIHJldHVybiAoISFvYmoubmFtZSB8fFxuICAgICAgICBvYmoudHlwZSA9PT0gJ3Jvb3QnIHx8XG4gICAgICAgIG9iai50eXBlID09PSAndGV4dCcgfHxcbiAgICAgICAgb2JqLnR5cGUgPT09ICdjb21tZW50Jyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sb2FkLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgZnVuY3Rpb24gKCkge1xuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbih0KSB7XG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSlcbiAgICAgICAgICAgICAgICB0W3BdID0gc1twXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdDtcbiAgICB9O1xuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZmxhdHRlbiA9IHZvaWQgMDtcbnZhciBkZWZhdWx0T3B0cyA9IHtcbiAgICB4bWw6IGZhbHNlLFxuICAgIGRlY29kZUVudGl0aWVzOiB0cnVlLFxufTtcbi8qKiBDaGVlcmlvIGRlZmF1bHQgb3B0aW9ucy4gKi9cbmV4cG9ydHMuZGVmYXVsdCA9IGRlZmF1bHRPcHRzO1xudmFyIHhtbE1vZGVEZWZhdWx0ID0ge1xuICAgIF91c2VIdG1sUGFyc2VyMjogdHJ1ZSxcbiAgICB4bWxNb2RlOiB0cnVlLFxufTtcbi8qKlxuICogRmxhdHRlbiB0aGUgb3B0aW9ucyBmb3IgQ2hlZXJpby5cbiAqXG4gKiBUaGlzIHdpbGwgc2V0IGBfdXNlSHRtbFBhcnNlcjJgIHRvIHRydWUgaWYgYHhtbGAgaXMgc2V0IHRvIHRydWUuXG4gKlxuICogQHBhcmFtIG9wdGlvbnMgLSBUaGUgb3B0aW9ucyB0byBmbGF0dGVuLlxuICogQHJldHVybnMgVGhlIGZsYXR0ZW5lZCBvcHRpb25zLlxuICovXG5mdW5jdGlvbiBmbGF0dGVuKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy54bWwpXG4gICAgICAgID8gdHlwZW9mIG9wdGlvbnMueG1sID09PSAnYm9vbGVhbidcbiAgICAgICAgICAgID8geG1sTW9kZURlZmF1bHRcbiAgICAgICAgICAgIDogX19hc3NpZ24oX19hc3NpZ24oe30sIHhtbE1vZGVEZWZhdWx0KSwgb3B0aW9ucy54bWwpXG4gICAgICAgIDogb3B0aW9ucyAhPT0gbnVsbCAmJiBvcHRpb25zICE9PSB2b2lkIDAgPyBvcHRpb25zIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0cy5mbGF0dGVuID0gZmxhdHRlbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9wdGlvbnMuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnVwZGF0ZSA9IGV4cG9ydHMuZ2V0UGFyc2UgPSB2b2lkIDA7XG52YXIgZG9tdXRpbHNfMSA9IHJlcXVpcmUoXCJkb211dGlsc1wiKTtcbnZhciBkb21oYW5kbGVyXzEgPSByZXF1aXJlKFwiZG9taGFuZGxlclwiKTtcbi8qKlxuICogR2V0IHRoZSBwYXJzZSBmdW5jdGlvbiB3aXRoIG9wdGlvbnMuXG4gKlxuICogQHBhcmFtIHBhcnNlciAtIFRoZSBwYXJzZXIgZnVuY3Rpb24uXG4gKiBAcmV0dXJucyBUaGUgcGFyc2UgZnVuY3Rpb24gd2l0aCBvcHRpb25zLlxuICovXG5mdW5jdGlvbiBnZXRQYXJzZShwYXJzZXIpIHtcbiAgICAvKipcbiAgICAgKiBQYXJzZSBhIEhUTUwgc3RyaW5nIG9yIGEgbm9kZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjb250ZW50IC0gVGhlIEhUTUwgc3RyaW5nIG9yIG5vZGUuXG4gICAgICogQHBhcmFtIG9wdGlvbnMgLSBUaGUgcGFyc2VyIG9wdGlvbnMuXG4gICAgICogQHBhcmFtIGlzRG9jdW1lbnQgLSBJZiBgY29udGVudGAgaXMgYSBkb2N1bWVudC5cbiAgICAgKiBAcGFyYW0gY29udGV4dCAtIFRoZSBjb250ZXh0IG5vZGUgaW4gdGhlIERPTSB0cmVlLlxuICAgICAqIEByZXR1cm5zIFRoZSBwYXJzZWQgZG9jdW1lbnQgbm9kZS5cbiAgICAgKi9cbiAgICByZXR1cm4gZnVuY3Rpb24gcGFyc2UoY29udGVudCwgb3B0aW9ucywgaXNEb2N1bWVudCwgY29udGV4dCkge1xuICAgICAgICBpZiAodHlwZW9mIEJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgQnVmZmVyLmlzQnVmZmVyKGNvbnRlbnQpKSB7XG4gICAgICAgICAgICBjb250ZW50ID0gY29udGVudC50b1N0cmluZygpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJldHVybiBwYXJzZXIoY29udGVudCwgb3B0aW9ucywgaXNEb2N1bWVudCwgY29udGV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGRvYyA9IGNvbnRlbnQ7XG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheShkb2MpICYmICgwLCBkb21oYW5kbGVyXzEuaXNEb2N1bWVudCkoZG9jKSkge1xuICAgICAgICAgICAgLy8gSWYgYGRvY2AgaXMgYWxyZWFkeSBhIHJvb3QsIGp1c3QgcmV0dXJuIGl0XG4gICAgICAgICAgICByZXR1cm4gZG9jO1xuICAgICAgICB9XG4gICAgICAgIC8vIEFkZCBjb25lbnQgdG8gbmV3IHJvb3QgZWxlbWVudFxuICAgICAgICB2YXIgcm9vdCA9IG5ldyBkb21oYW5kbGVyXzEuRG9jdW1lbnQoW10pO1xuICAgICAgICAvLyBVcGRhdGUgdGhlIERPTSB1c2luZyB0aGUgcm9vdFxuICAgICAgICB1cGRhdGUoZG9jLCByb290KTtcbiAgICAgICAgcmV0dXJuIHJvb3Q7XG4gICAgfTtcbn1cbmV4cG9ydHMuZ2V0UGFyc2UgPSBnZXRQYXJzZTtcbi8qKlxuICogVXBkYXRlIHRoZSBkb20gc3RydWN0dXJlLCBmb3Igb25lIGNoYW5nZWQgbGF5ZXIuXG4gKlxuICogQHBhcmFtIG5ld0NoaWxkcyAtIFRoZSBuZXcgY2hpbGRyZW4uXG4gKiBAcGFyYW0gcGFyZW50IC0gVGhlIG5ldyBwYXJlbnQuXG4gKiBAcmV0dXJucyBUaGUgcGFyZW50IG5vZGUuXG4gKi9cbmZ1bmN0aW9uIHVwZGF0ZShuZXdDaGlsZHMsIHBhcmVudCkge1xuICAgIC8vIE5vcm1hbGl6ZVxuICAgIHZhciBhcnIgPSBBcnJheS5pc0FycmF5KG5ld0NoaWxkcykgPyBuZXdDaGlsZHMgOiBbbmV3Q2hpbGRzXTtcbiAgICAvLyBVcGRhdGUgcGFyZW50XG4gICAgaWYgKHBhcmVudCkge1xuICAgICAgICBwYXJlbnQuY2hpbGRyZW4gPSBhcnI7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBwYXJlbnQgPSBudWxsO1xuICAgIH1cbiAgICAvLyBVcGRhdGUgbmVpZ2hib3JzXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIG5vZGUgPSBhcnJbaV07XG4gICAgICAgIC8vIENsZWFubHkgcmVtb3ZlIGV4aXN0aW5nIG5vZGVzIGZyb20gdGhlaXIgcHJldmlvdXMgc3RydWN0dXJlcy5cbiAgICAgICAgaWYgKG5vZGUucGFyZW50ICYmIG5vZGUucGFyZW50LmNoaWxkcmVuICE9PSBhcnIpIHtcbiAgICAgICAgICAgICgwLCBkb211dGlsc18xLnJlbW92ZUVsZW1lbnQpKG5vZGUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJlbnQpIHtcbiAgICAgICAgICAgIG5vZGUucHJldiA9IGFycltpIC0gMV0gfHwgbnVsbDtcbiAgICAgICAgICAgIG5vZGUubmV4dCA9IGFycltpICsgMV0gfHwgbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG5vZGUucHJldiA9IG5vZGUubmV4dCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgbm9kZS5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgfVxuICAgIHJldHVybiBwYXJlbnQ7XG59XG5leHBvcnRzLnVwZGF0ZSA9IHVwZGF0ZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhcnNlLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fc3ByZWFkQXJyYXkgPSAodGhpcyAmJiB0aGlzLl9fc3ByZWFkQXJyYXkpIHx8IGZ1bmN0aW9uICh0bywgZnJvbSwgcGFjaykge1xuICAgIGlmIChwYWNrIHx8IGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIGZvciAodmFyIGkgPSAwLCBsID0gZnJvbS5sZW5ndGgsIGFyOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGlmIChhciB8fCAhKGkgaW4gZnJvbSkpIHtcbiAgICAgICAgICAgIGlmICghYXIpIGFyID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZnJvbSwgMCwgaSk7XG4gICAgICAgICAgICBhcltpXSA9IGZyb21baV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRvLmNvbmNhdChhciB8fCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmcm9tKSk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5yZW5kZXJXaXRoUGFyc2U1ID0gZXhwb3J0cy5wYXJzZVdpdGhQYXJzZTUgPSB2b2lkIDA7XG52YXIgZG9taGFuZGxlcl8xID0gcmVxdWlyZShcImRvbWhhbmRsZXJcIik7XG52YXIgcGFyc2U1XzEgPSByZXF1aXJlKFwicGFyc2U1XCIpO1xudmFyIHBhcnNlNV9odG1scGFyc2VyMl90cmVlX2FkYXB0ZXJfMSA9IHJlcXVpcmUoXCJwYXJzZTUtaHRtbHBhcnNlcjItdHJlZS1hZGFwdGVyXCIpO1xuLyoqXG4gKiBQYXJzZSB0aGUgY29udGVudCB3aXRoIGBwYXJzZTVgIGluIHRoZSBjb250ZXh0IG9mIHRoZSBnaXZlbiBgUGFyZW50Tm9kZWAuXG4gKlxuICogQHBhcmFtIGNvbnRlbnQgLSBUaGUgY29udGVudCB0byBwYXJzZS5cbiAqIEBwYXJhbSBvcHRpb25zIC0gQSBzZXQgb2Ygb3B0aW9ucyB0byB1c2UgdG8gcGFyc2UuXG4gKiBAcGFyYW0gaXNEb2N1bWVudCAtIFdoZXRoZXIgdG8gcGFyc2UgdGhlIGNvbnRlbnQgYXMgYSBmdWxsIEhUTUwgZG9jdW1lbnQuXG4gKiBAcGFyYW0gY29udGV4dCAtIFRoZSBjb250ZXh0IGluIHdoaWNoIHRvIHBhcnNlIHRoZSBjb250ZW50LlxuICogQHJldHVybnMgVGhlIHBhcnNlZCBjb250ZW50LlxuICovXG5mdW5jdGlvbiBwYXJzZVdpdGhQYXJzZTUoY29udGVudCwgb3B0aW9ucywgaXNEb2N1bWVudCwgY29udGV4dCkge1xuICAgIHZhciBvcHRzID0ge1xuICAgICAgICBzY3JpcHRpbmdFbmFibGVkOiB0eXBlb2Ygb3B0aW9ucy5zY3JpcHRpbmdFbmFibGVkID09PSAnYm9vbGVhbidcbiAgICAgICAgICAgID8gb3B0aW9ucy5zY3JpcHRpbmdFbmFibGVkXG4gICAgICAgICAgICA6IHRydWUsXG4gICAgICAgIHRyZWVBZGFwdGVyOiBwYXJzZTVfaHRtbHBhcnNlcjJfdHJlZV9hZGFwdGVyXzEuYWRhcHRlcixcbiAgICAgICAgc291cmNlQ29kZUxvY2F0aW9uSW5mbzogb3B0aW9ucy5zb3VyY2VDb2RlTG9jYXRpb25JbmZvLFxuICAgIH07XG4gICAgcmV0dXJuIGlzRG9jdW1lbnRcbiAgICAgICAgPyAoMCwgcGFyc2U1XzEucGFyc2UpKGNvbnRlbnQsIG9wdHMpXG4gICAgICAgIDogKDAsIHBhcnNlNV8xLnBhcnNlRnJhZ21lbnQpKGNvbnRleHQsIGNvbnRlbnQsIG9wdHMpO1xufVxuZXhwb3J0cy5wYXJzZVdpdGhQYXJzZTUgPSBwYXJzZVdpdGhQYXJzZTU7XG52YXIgcmVuZGVyT3B0cyA9IHsgdHJlZUFkYXB0ZXI6IHBhcnNlNV9odG1scGFyc2VyMl90cmVlX2FkYXB0ZXJfMS5hZGFwdGVyIH07XG4vKipcbiAqIFJlbmRlcnMgdGhlIGdpdmVuIERPTSB0cmVlIHdpdGggYHBhcnNlNWAgYW5kIHJldHVybnMgdGhlIHJlc3VsdCBhcyBhIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0gZG9tIC0gVGhlIERPTSB0cmVlIHRvIHJlbmRlci5cbiAqIEByZXR1cm5zIFRoZSByZW5kZXJlZCBkb2N1bWVudC5cbiAqL1xuZnVuY3Rpb24gcmVuZGVyV2l0aFBhcnNlNShkb20pIHtcbiAgICB2YXIgX2E7XG4gICAgLypcbiAgICAgKiBgZG9tLXNlcmlhbGl6ZXJgIHBhc3NlcyBvdmVyIHRoZSBzcGVjaWFsIFwicm9vdFwiIG5vZGUgYW5kIHJlbmRlcnMgdGhlXG4gICAgICogbm9kZSdzIGNoaWxkcmVuIGluIGl0cyBwbGFjZS4gVG8gbWltaWMgdGhpcyBiZWhhdmlvciB3aXRoIGBwYXJzZTVgLCBhblxuICAgICAqIGVxdWl2YWxlbnQgb3BlcmF0aW9uIG11c3QgYmUgYXBwbGllZCB0byB0aGUgaW5wdXQgYXJyYXkuXG4gICAgICovXG4gICAgdmFyIG5vZGVzID0gJ2xlbmd0aCcgaW4gZG9tID8gZG9tIDogW2RvbV07XG4gICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IG5vZGVzLmxlbmd0aDsgaW5kZXggKz0gMSkge1xuICAgICAgICB2YXIgbm9kZSA9IG5vZGVzW2luZGV4XTtcbiAgICAgICAgaWYgKCgwLCBkb21oYW5kbGVyXzEuaXNEb2N1bWVudCkobm9kZSkpIHtcbiAgICAgICAgICAgIChfYSA9IEFycmF5LnByb3RvdHlwZS5zcGxpY2UpLmNhbGwuYXBwbHkoX2EsIF9fc3ByZWFkQXJyYXkoW25vZGVzLCBpbmRleCwgMV0sIG5vZGUuY2hpbGRyZW4sIGZhbHNlKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdmFyIHJlc3VsdCA9ICcnO1xuICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBub2Rlcy5sZW5ndGg7IGluZGV4ICs9IDEpIHtcbiAgICAgICAgdmFyIG5vZGUgPSBub2Rlc1tpbmRleF07XG4gICAgICAgIHJlc3VsdCArPSAoMCwgcGFyc2U1XzEuc2VyaWFsaXplT3V0ZXIpKG5vZGUsIHJlbmRlck9wdHMpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZXhwb3J0cy5yZW5kZXJXaXRoUGFyc2U1ID0gcmVuZGVyV2l0aFBhcnNlNTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhcnNlNS1hZGFwdGVyLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgZnVuY3Rpb24gKCkge1xuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbih0KSB7XG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSlcbiAgICAgICAgICAgICAgICB0W3BdID0gc1twXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdDtcbiAgICB9O1xuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufTtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59KTtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5tZXJnZSA9IGV4cG9ydHMuY29udGFpbnMgPSBleHBvcnRzLnJvb3QgPSBleHBvcnRzLnBhcnNlSFRNTCA9IGV4cG9ydHMudGV4dCA9IGV4cG9ydHMueG1sID0gZXhwb3J0cy5odG1sID0gdm9pZCAwO1xudmFyIGRvbXV0aWxzXzEgPSByZXF1aXJlKFwiZG9tdXRpbHNcIik7XG52YXIgb3B0aW9uc19qc18xID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL29wdGlvbnMuanNcIikpO1xuLyoqXG4gKiBIZWxwZXIgZnVuY3Rpb24gdG8gcmVuZGVyIGEgRE9NLlxuICpcbiAqIEBwYXJhbSB0aGF0IC0gQ2hlZXJpbyBpbnN0YW5jZSB0byByZW5kZXIuXG4gKiBAcGFyYW0gZG9tIC0gVGhlIERPTSB0byByZW5kZXIuIERlZmF1bHRzIHRvIGB0aGF0YCdzIHJvb3QuXG4gKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbnMgZm9yIHJlbmRlcmluZy5cbiAqIEByZXR1cm5zIFRoZSByZW5kZXJlZCBkb2N1bWVudC5cbiAqL1xuZnVuY3Rpb24gcmVuZGVyKHRoYXQsIGRvbSwgb3B0aW9ucykge1xuICAgIGlmICghdGhhdClcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIHJldHVybiB0aGF0KGRvbSAhPT0gbnVsbCAmJiBkb20gIT09IHZvaWQgMCA/IGRvbSA6IHRoYXQuX3Jvb3QuY2hpbGRyZW4sIG51bGwsIHVuZGVmaW5lZCwgb3B0aW9ucykudG9TdHJpbmcoKTtcbn1cbi8qKlxuICogQ2hlY2tzIGlmIGEgcGFzc2VkIG9iamVjdCBpcyBhbiBvcHRpb25zIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0gZG9tIC0gT2JqZWN0IHRvIGNoZWNrIGlmIGl0IGlzIGFuIG9wdGlvbnMgb2JqZWN0LlxuICogQHJldHVybnMgV2hldGhlciB0aGUgb2JqZWN0IGlzIGFuIG9wdGlvbnMgb2JqZWN0LlxuICovXG5mdW5jdGlvbiBpc09wdGlvbnMoZG9tLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuICghb3B0aW9ucyAmJlxuICAgICAgICB0eXBlb2YgZG9tID09PSAnb2JqZWN0JyAmJlxuICAgICAgICBkb20gIT0gbnVsbCAmJlxuICAgICAgICAhKCdsZW5ndGgnIGluIGRvbSkgJiZcbiAgICAgICAgISgndHlwZScgaW4gZG9tKSk7XG59XG5mdW5jdGlvbiBodG1sKGRvbSwgb3B0aW9ucykge1xuICAgIC8qXG4gICAgICogQmUgZmxleGlibGUgYWJvdXQgcGFyYW1ldGVycywgc29tZXRpbWVzIHdlIGNhbGwgaHRtbCgpLFxuICAgICAqIHdpdGggb3B0aW9ucyBhcyBvbmx5IHBhcmFtZXRlclxuICAgICAqIGNoZWNrIGRvbSBhcmd1bWVudCBmb3IgZG9tIGVsZW1lbnQgc3BlY2lmaWMgcHJvcGVydGllc1xuICAgICAqIGFzc3VtZSB0aGVyZSBpcyBubyAnbGVuZ3RoJyBvciAndHlwZScgcHJvcGVydGllcyBpbiB0aGUgb3B0aW9ucyBvYmplY3RcbiAgICAgKi9cbiAgICB2YXIgdG9SZW5kZXIgPSBpc09wdGlvbnMoZG9tKSA/ICgob3B0aW9ucyA9IGRvbSksIHVuZGVmaW5lZCkgOiBkb207XG4gICAgLypcbiAgICAgKiBTb21ldGltZXMgYCQuaHRtbCgpYCBpcyB1c2VkIHdpdGhvdXQgcHJlbG9hZGluZyBodG1sLFxuICAgICAqIHNvIGZhbGxiYWNrIG5vbi1leGlzdGluZyBvcHRpb25zIHRvIHRoZSBkZWZhdWx0IG9uZXMuXG4gICAgICovXG4gICAgdmFyIG9wdHMgPSBfX2Fzc2lnbihfX2Fzc2lnbihfX2Fzc2lnbih7fSwgb3B0aW9uc19qc18xLmRlZmF1bHQpLCB0aGlzID09PSBudWxsIHx8IHRoaXMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHRoaXMuX29wdGlvbnMpLCAoMCwgb3B0aW9uc19qc18xLmZsYXR0ZW4pKG9wdGlvbnMgIT09IG51bGwgJiYgb3B0aW9ucyAhPT0gdm9pZCAwID8gb3B0aW9ucyA6IHt9KSk7XG4gICAgcmV0dXJuIHJlbmRlcih0aGlzLCB0b1JlbmRlciwgb3B0cyk7XG59XG5leHBvcnRzLmh0bWwgPSBodG1sO1xuLyoqXG4gKiBSZW5kZXIgdGhlIGRvY3VtZW50IGFzIFhNTC5cbiAqXG4gKiBAcGFyYW0gZG9tIC0gRWxlbWVudCB0byByZW5kZXIuXG4gKiBAcmV0dXJucyBUSGUgcmVuZGVyZWQgZG9jdW1lbnQuXG4gKi9cbmZ1bmN0aW9uIHhtbChkb20pIHtcbiAgICB2YXIgb3B0aW9ucyA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCB0aGlzLl9vcHRpb25zKSwgeyB4bWxNb2RlOiB0cnVlIH0pO1xuICAgIHJldHVybiByZW5kZXIodGhpcywgZG9tLCBvcHRpb25zKTtcbn1cbmV4cG9ydHMueG1sID0geG1sO1xuLyoqXG4gKiBSZW5kZXIgdGhlIGRvY3VtZW50IGFzIHRleHQuXG4gKlxuICogVGhpcyByZXR1cm5zIHRoZSBgdGV4dENvbnRlbnRgIG9mIHRoZSBwYXNzZWQgZWxlbWVudHMuIFRoZSByZXN1bHQgd2lsbFxuICogaW5jbHVkZSB0aGUgY29udGVudHMgb2YgYHNjcmlwdGAgYW5kIGBzdHlwZWAgZWxlbWVudHMuIFRvIGF2b2lkIHRoaXMsIHVzZVxuICogYC5wcm9wKCdpbm5lclRleHQnKWAgaW5zdGVhZC5cbiAqXG4gKiBAcGFyYW0gZWxlbWVudHMgLSBFbGVtZW50cyB0byByZW5kZXIuXG4gKiBAcmV0dXJucyBUaGUgcmVuZGVyZWQgZG9jdW1lbnQuXG4gKi9cbmZ1bmN0aW9uIHRleHQoZWxlbWVudHMpIHtcbiAgICB2YXIgZWxlbXMgPSBlbGVtZW50cyA/IGVsZW1lbnRzIDogdGhpcyA/IHRoaXMucm9vdCgpIDogW107XG4gICAgdmFyIHJldCA9ICcnO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWxlbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmV0ICs9ICgwLCBkb211dGlsc18xLnRleHRDb250ZW50KShlbGVtc1tpXSk7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG59XG5leHBvcnRzLnRleHQgPSB0ZXh0O1xuZnVuY3Rpb24gcGFyc2VIVE1MKGRhdGEsIGNvbnRleHQsIGtlZXBTY3JpcHRzKSB7XG4gICAgaWYgKGtlZXBTY3JpcHRzID09PSB2b2lkIDApIHsga2VlcFNjcmlwdHMgPSB0eXBlb2YgY29udGV4dCA9PT0gJ2Jvb2xlYW4nID8gY29udGV4dCA6IGZhbHNlOyB9XG4gICAgaWYgKCFkYXRhIHx8IHR5cGVvZiBkYXRhICE9PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBjb250ZXh0ID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAga2VlcFNjcmlwdHMgPSBjb250ZXh0O1xuICAgIH1cbiAgICB2YXIgcGFyc2VkID0gdGhpcy5sb2FkKGRhdGEsIG9wdGlvbnNfanNfMS5kZWZhdWx0LCBmYWxzZSk7XG4gICAgaWYgKCFrZWVwU2NyaXB0cykge1xuICAgICAgICBwYXJzZWQoJ3NjcmlwdCcpLnJlbW92ZSgpO1xuICAgIH1cbiAgICAvKlxuICAgICAqIFRoZSBgY2hpbGRyZW5gIGFycmF5IGlzIHVzZWQgYnkgQ2hlZXJpbyBpbnRlcm5hbGx5IHRvIGdyb3VwIGVsZW1lbnRzIHRoYXRcbiAgICAgKiBzaGFyZSB0aGUgc2FtZSBwYXJlbnRzLiBXaGVuIG5vZGVzIGNyZWF0ZWQgdGhyb3VnaCBgcGFyc2VIVE1MYCBhcmVcbiAgICAgKiBpbnNlcnRlZCBpbnRvIHByZXZpb3VzbHktZXhpc3RpbmcgRE9NIHN0cnVjdHVyZXMsIHRoZXkgd2lsbCBiZSByZW1vdmVkXG4gICAgICogZnJvbSB0aGUgYGNoaWxkcmVuYCBhcnJheS4gVGhlIHJlc3VsdHMgb2YgYHBhcnNlSFRNTGAgc2hvdWxkIHJlbWFpblxuICAgICAqIGNvbnN0YW50IGFjcm9zcyB0aGVzZSBvcGVyYXRpb25zLCBzbyBhIHNoYWxsb3cgY29weSBzaG91bGQgYmUgcmV0dXJuZWQuXG4gICAgICovXG4gICAgcmV0dXJuIHBhcnNlZC5yb290KClbMF0uY2hpbGRyZW4uc2xpY2UoKTtcbn1cbmV4cG9ydHMucGFyc2VIVE1MID0gcGFyc2VIVE1MO1xuLyoqXG4gKiBTb21ldGltZXMgeW91IG5lZWQgdG8gd29yayB3aXRoIHRoZSB0b3AtbGV2ZWwgcm9vdCBlbGVtZW50LiBUbyBxdWVyeSBpdCwgeW91XG4gKiBjYW4gdXNlIGAkLnJvb3QoKWAuXG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiBgYGBqc1xuICogJC5yb290KCkuYXBwZW5kKCc8dWwgaWQ9XCJ2ZWdldGFibGVzXCI+PC91bD4nKS5odG1sKCk7XG4gKiAvLz0+IDx1bCBpZD1cImZydWl0c1wiPi4uLjwvdWw+PHVsIGlkPVwidmVnZXRhYmxlc1wiPjwvdWw+XG4gKiBgYGBcbiAqXG4gKiBAcmV0dXJucyBDaGVlcmlvIGluc3RhbmNlIHdyYXBwaW5nIHRoZSByb290IG5vZGUuXG4gKiBAYWxpYXMgQ2hlZXJpby5yb290XG4gKi9cbmZ1bmN0aW9uIHJvb3QoKSB7XG4gICAgcmV0dXJuIHRoaXModGhpcy5fcm9vdCk7XG59XG5leHBvcnRzLnJvb3QgPSByb290O1xuLyoqXG4gKiBDaGVja3MgdG8gc2VlIGlmIHRoZSBgY29udGFpbmVkYCBET00gZWxlbWVudCBpcyBhIGRlc2NlbmRhbnQgb2YgdGhlXG4gKiBgY29udGFpbmVyYCBET00gZWxlbWVudC5cbiAqXG4gKiBAcGFyYW0gY29udGFpbmVyIC0gUG90ZW50aWFsIHBhcmVudCBub2RlLlxuICogQHBhcmFtIGNvbnRhaW5lZCAtIFBvdGVudGlhbCBjaGlsZCBub2RlLlxuICogQHJldHVybnMgSW5kaWNhdGVzIGlmIHRoZSBub2RlcyBjb250YWluIG9uZSBhbm90aGVyLlxuICogQGFsaWFzIENoZWVyaW8uY29udGFpbnNcbiAqIEBzZWUge0BsaW5rIGh0dHBzOi8vYXBpLmpxdWVyeS5jb20valF1ZXJ5LmNvbnRhaW5zL31cbiAqL1xuZnVuY3Rpb24gY29udGFpbnMoY29udGFpbmVyLCBjb250YWluZWQpIHtcbiAgICAvLyBBY2NvcmRpbmcgdG8gdGhlIGpRdWVyeSBBUEksIGFuIGVsZW1lbnQgZG9lcyBub3QgXCJjb250YWluXCIgaXRzZWxmXG4gICAgaWYgKGNvbnRhaW5lZCA9PT0gY29udGFpbmVyKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgLypcbiAgICAgKiBTdGVwIHVwIHRoZSBkZXNjZW5kYW50cywgc3RvcHBpbmcgd2hlbiB0aGUgcm9vdCBlbGVtZW50IGlzIHJlYWNoZWRcbiAgICAgKiAoc2lnbmFsZWQgYnkgYC5wYXJlbnRgIHJldHVybmluZyBhIHJlZmVyZW5jZSB0byB0aGUgc2FtZSBvYmplY3QpXG4gICAgICovXG4gICAgdmFyIG5leHQgPSBjb250YWluZWQ7XG4gICAgd2hpbGUgKG5leHQgJiYgbmV4dCAhPT0gbmV4dC5wYXJlbnQpIHtcbiAgICAgICAgbmV4dCA9IG5leHQucGFyZW50O1xuICAgICAgICBpZiAobmV4dCA9PT0gY29udGFpbmVyKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5leHBvcnRzLmNvbnRhaW5zID0gY29udGFpbnM7XG4vKipcbiAqICQubWVyZ2UoKS5cbiAqXG4gKiBAcGFyYW0gYXJyMSAtIEZpcnN0IGFycmF5LlxuICogQHBhcmFtIGFycjIgLSBTZWNvbmQgYXJyYXkuXG4gKiBAcmV0dXJucyBgYXJyMWAsIHdpdGggZWxlbWVudHMgb2YgYGFycjJgIGluc2VydGVkLlxuICogQGFsaWFzIENoZWVyaW8ubWVyZ2VcbiAqIEBzZWUge0BsaW5rIGh0dHBzOi8vYXBpLmpxdWVyeS5jb20valF1ZXJ5Lm1lcmdlL31cbiAqL1xuZnVuY3Rpb24gbWVyZ2UoYXJyMSwgYXJyMikge1xuICAgIGlmICghaXNBcnJheUxpa2UoYXJyMSkgfHwgIWlzQXJyYXlMaWtlKGFycjIpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIG5ld0xlbmd0aCA9IGFycjEubGVuZ3RoO1xuICAgIHZhciBsZW4gPSArYXJyMi5sZW5ndGg7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBhcnIxW25ld0xlbmd0aCsrXSA9IGFycjJbaV07XG4gICAgfVxuICAgIGFycjEubGVuZ3RoID0gbmV3TGVuZ3RoO1xuICAgIHJldHVybiBhcnIxO1xufVxuZXhwb3J0cy5tZXJnZSA9IG1lcmdlO1xuLyoqXG4gKiBDaGVja3MgaWYgYW4gb2JqZWN0IGlzIGFycmF5LWxpa2UuXG4gKlxuICogQHBhcmFtIGl0ZW0gLSBJdGVtIHRvIGNoZWNrLlxuICogQHJldHVybnMgSW5kaWNhdGVzIGlmIHRoZSBpdGVtIGlzIGFycmF5LWxpa2UuXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlKGl0ZW0pIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShpdGVtKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBpdGVtICE9PSAnb2JqZWN0JyB8fFxuICAgICAgICAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGl0ZW0sICdsZW5ndGgnKSB8fFxuICAgICAgICB0eXBlb2YgaXRlbS5sZW5ndGggIT09ICdudW1iZXInIHx8XG4gICAgICAgIGl0ZW0ubGVuZ3RoIDwgMCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaXRlbS5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoIShpIGluIGl0ZW0pKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdGF0aWMuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10eXBlcy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaXNIdG1sID0gZXhwb3J0cy5jbG9uZURvbSA9IGV4cG9ydHMuZG9tRWFjaCA9IGV4cG9ydHMuY3NzQ2FzZSA9IGV4cG9ydHMuY2FtZWxDYXNlID0gZXhwb3J0cy5pc0NoZWVyaW8gPSBleHBvcnRzLmlzVGFnID0gdm9pZCAwO1xudmFyIGRvbWhhbmRsZXJfMSA9IHJlcXVpcmUoXCJkb21oYW5kbGVyXCIpO1xuLyoqXG4gKiBDaGVjayBpZiB0aGUgRE9NIGVsZW1lbnQgaXMgYSB0YWcuXG4gKlxuICogYGlzVGFnKHR5cGUpYCBpbmNsdWRlcyBgPHNjcmlwdD5gIGFuZCBgPHN0eWxlPmAgdGFncy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNhdGVnb3J5IFV0aWxzXG4gKiBAcGFyYW0gdHlwZSAtIFRoZSBET00gbm9kZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIFdoZXRoZXIgdGhlIG5vZGUgaXMgYSB0YWcuXG4gKi9cbnZhciBkb21oYW5kbGVyXzIgPSByZXF1aXJlKFwiZG9taGFuZGxlclwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImlzVGFnXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkb21oYW5kbGVyXzIuaXNUYWc7IH0gfSk7XG4vKipcbiAqIENoZWNrcyBpZiBhbiBvYmplY3QgaXMgYSBDaGVlcmlvIGluc3RhbmNlLlxuICpcbiAqIEBjYXRlZ29yeSBVdGlsc1xuICogQHBhcmFtIG1heWJlQ2hlZXJpbyAtIFRoZSBvYmplY3QgdG8gY2hlY2suXG4gKiBAcmV0dXJucyBXaGV0aGVyIHRoZSBvYmplY3QgaXMgYSBDaGVlcmlvIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBpc0NoZWVyaW8obWF5YmVDaGVlcmlvKSB7XG4gICAgcmV0dXJuIG1heWJlQ2hlZXJpby5jaGVlcmlvICE9IG51bGw7XG59XG5leHBvcnRzLmlzQ2hlZXJpbyA9IGlzQ2hlZXJpbztcbi8qKlxuICogQ29udmVydCBhIHN0cmluZyB0byBjYW1lbCBjYXNlIG5vdGF0aW9uLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY2F0ZWdvcnkgVXRpbHNcbiAqIEBwYXJhbSBzdHIgLSBUaGUgc3RyaW5nIHRvIGJlIGNvbnZlcnRlZC5cbiAqIEByZXR1cm5zIFN0cmluZyBpbiBjYW1lbCBjYXNlIG5vdGF0aW9uLlxuICovXG5mdW5jdGlvbiBjYW1lbENhc2Uoc3RyKSB7XG4gICAgcmV0dXJuIHN0ci5yZXBsYWNlKC9bXy4tXShcXHd8JCkvZywgZnVuY3Rpb24gKF8sIHgpIHsgcmV0dXJuIHgudG9VcHBlckNhc2UoKTsgfSk7XG59XG5leHBvcnRzLmNhbWVsQ2FzZSA9IGNhbWVsQ2FzZTtcbi8qKlxuICogQ29udmVydCBhIHN0cmluZyBmcm9tIGNhbWVsIGNhc2UgdG8gXCJDU1MgY2FzZVwiLCB3aGVyZSB3b3JkIGJvdW5kYXJpZXMgYXJlXG4gKiBkZXNjcmliZWQgYnkgaHlwaGVucyAoXCItXCIpIGFuZCBhbGwgY2hhcmFjdGVycyBhcmUgbG93ZXItY2FzZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNhdGVnb3J5IFV0aWxzXG4gKiBAcGFyYW0gc3RyIC0gVGhlIHN0cmluZyB0byBiZSBjb252ZXJ0ZWQuXG4gKiBAcmV0dXJucyBTdHJpbmcgaW4gXCJDU1MgY2FzZVwiLlxuICovXG5mdW5jdGlvbiBjc3NDYXNlKHN0cikge1xuICAgIHJldHVybiBzdHIucmVwbGFjZSgvW0EtWl0vZywgJy0kJicpLnRvTG93ZXJDYXNlKCk7XG59XG5leHBvcnRzLmNzc0Nhc2UgPSBjc3NDYXNlO1xuLyoqXG4gKiBJdGVyYXRlIG92ZXIgZWFjaCBET00gZWxlbWVudCB3aXRob3V0IGNyZWF0aW5nIGludGVybWVkaWFyeSBDaGVlcmlvIGluc3RhbmNlcy5cbiAqXG4gKiBUaGlzIGlzIGluZGVudGVkIGZvciB1c2UgaW50ZXJuYWxseSB0byBhdm9pZCBvdGhlcndpc2UgdW5uZWNlc3NhcnkgbWVtb3J5XG4gKiBwcmVzc3VyZSBpbnRyb2R1Y2VkIGJ5IF9tYWtlLlxuICpcbiAqIEBjYXRlZ29yeSBVdGlsc1xuICogQHBhcmFtIGFycmF5IC0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSBmbiAtIEZ1bmN0aW9uIHRvIGNhbGwuXG4gKiBAcmV0dXJucyBUaGUgb3JpZ2luYWwgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIGRvbUVhY2goYXJyYXksIGZuKSB7XG4gICAgdmFyIGxlbiA9IGFycmF5Lmxlbmd0aDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKVxuICAgICAgICBmbihhcnJheVtpXSwgaSk7XG4gICAgcmV0dXJuIGFycmF5O1xufVxuZXhwb3J0cy5kb21FYWNoID0gZG9tRWFjaDtcbi8qKlxuICogQ3JlYXRlIGEgZGVlcCBjb3B5IG9mIHRoZSBnaXZlbiBET00gc3RydWN0dXJlLiBTZXRzIHRoZSBwYXJlbnRzIG9mIHRoZSBjb3BpZXNcbiAqIG9mIHRoZSBwYXNzZWQgbm9kZXMgdG8gYG51bGxgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY2F0ZWdvcnkgVXRpbHNcbiAqIEBwYXJhbSBkb20gLSBUaGUgZG9taGFuZGxlci1jb21wbGlhbnQgRE9NIHN0cnVjdHVyZS5cbiAqIEByZXR1cm5zIC0gVGhlIGNsb25lZCBET00uXG4gKi9cbmZ1bmN0aW9uIGNsb25lRG9tKGRvbSkge1xuICAgIHZhciBjbG9uZSA9ICdsZW5ndGgnIGluIGRvbVxuICAgICAgICA/IEFycmF5LnByb3RvdHlwZS5tYXAuY2FsbChkb20sIGZ1bmN0aW9uIChlbCkgeyByZXR1cm4gKDAsIGRvbWhhbmRsZXJfMS5jbG9uZU5vZGUpKGVsLCB0cnVlKTsgfSlcbiAgICAgICAgOiBbKDAsIGRvbWhhbmRsZXJfMS5jbG9uZU5vZGUpKGRvbSwgdHJ1ZSldO1xuICAgIC8vIEFkZCBhIHJvb3Qgbm9kZSBhcm91bmQgdGhlIGNsb25lZCBub2Rlc1xuICAgIHZhciByb290ID0gbmV3IGRvbWhhbmRsZXJfMS5Eb2N1bWVudChjbG9uZSk7XG4gICAgY2xvbmUuZm9yRWFjaChmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICBub2RlLnBhcmVudCA9IHJvb3Q7XG4gICAgfSk7XG4gICAgcmV0dXJuIGNsb25lO1xufVxuZXhwb3J0cy5jbG9uZURvbSA9IGNsb25lRG9tO1xudmFyIENoYXJhY3RlckNvZGVzO1xuKGZ1bmN0aW9uIChDaGFyYWN0ZXJDb2Rlcykge1xuICAgIENoYXJhY3RlckNvZGVzW0NoYXJhY3RlckNvZGVzW1wiTG93ZXJBXCJdID0gOTddID0gXCJMb3dlckFcIjtcbiAgICBDaGFyYWN0ZXJDb2Rlc1tDaGFyYWN0ZXJDb2Rlc1tcIkxvd2VyWlwiXSA9IDEyMl0gPSBcIkxvd2VyWlwiO1xuICAgIENoYXJhY3RlckNvZGVzW0NoYXJhY3RlckNvZGVzW1wiVXBwZXJBXCJdID0gNjVdID0gXCJVcHBlckFcIjtcbiAgICBDaGFyYWN0ZXJDb2Rlc1tDaGFyYWN0ZXJDb2Rlc1tcIlVwcGVyWlwiXSA9IDkwXSA9IFwiVXBwZXJaXCI7XG4gICAgQ2hhcmFjdGVyQ29kZXNbQ2hhcmFjdGVyQ29kZXNbXCJFeGNsYW1hdGlvblwiXSA9IDMzXSA9IFwiRXhjbGFtYXRpb25cIjtcbn0pKENoYXJhY3RlckNvZGVzIHx8IChDaGFyYWN0ZXJDb2RlcyA9IHt9KSk7XG4vKipcbiAqIENoZWNrIGlmIHN0cmluZyBpcyBIVE1MLlxuICpcbiAqIFRlc3RzIGZvciBhIGA8YCB3aXRoaW4gYSBzdHJpbmcsIGltbWVkaWF0ZSBmb2xsb3dlZCBieSBhIGxldHRlciBhbmRcbiAqIGV2ZW50dWFsbHkgZm9sbG93ZWQgYnkgYSBgPmAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjYXRlZ29yeSBVdGlsc1xuICogQHBhcmFtIHN0ciAtIFRoZSBzdHJpbmcgdG8gY2hlY2suXG4gKiBAcmV0dXJucyBJbmRpY2F0ZXMgaWYgYHN0cmAgaXMgSFRNTC5cbiAqL1xuZnVuY3Rpb24gaXNIdG1sKHN0cikge1xuICAgIHZhciB0YWdTdGFydCA9IHN0ci5pbmRleE9mKCc8Jyk7XG4gICAgaWYgKHRhZ1N0YXJ0IDwgMCB8fCB0YWdTdGFydCA+IHN0ci5sZW5ndGggLSAzKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgdmFyIHRhZ0NoYXIgPSBzdHIuY2hhckNvZGVBdCh0YWdTdGFydCArIDEpO1xuICAgIHJldHVybiAoKCh0YWdDaGFyID49IENoYXJhY3RlckNvZGVzLkxvd2VyQSAmJiB0YWdDaGFyIDw9IENoYXJhY3RlckNvZGVzLkxvd2VyWikgfHxcbiAgICAgICAgKHRhZ0NoYXIgPj0gQ2hhcmFjdGVyQ29kZXMuVXBwZXJBICYmIHRhZ0NoYXIgPD0gQ2hhcmFjdGVyQ29kZXMuVXBwZXJaKSB8fFxuICAgICAgICB0YWdDaGFyID09PSBDaGFyYWN0ZXJDb2Rlcy5FeGNsYW1hdGlvbikgJiZcbiAgICAgICAgc3RyLmluY2x1ZGVzKCc+JywgdGFnU3RhcnQgKyAyKSk7XG59XG5leHBvcnRzLmlzSHRtbCA9IGlzSHRtbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWxzLmpzLm1hcCIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAuQXBwIHtcbiAgaGVpZ2h0OiBhdXRvO1xuICBhbGlnbi1pdGVtczogZmxleC1zdGFydDtcbiAgLyogQWxpZ25zIGNvbnRlbnQgdG8gdGhlIGxlZnQgKi9cbn1cbmAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL0FwcC9BcHAuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0UsWUFBWTtFQUNaLHVCQUF1QjtFQUN2QiwrQkFBK0I7QUFDakNcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLkFwcCB7XFxuICBoZWlnaHQ6IGF1dG87XFxuICBhbGlnbi1pdGVtczogZmxleC1zdGFydDtcXG4gIC8qIEFsaWducyBjb250ZW50IHRvIHRoZSBsZWZ0ICovXFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgLyogc3JjL0JvZHlTZWN0aW9uL0JvZHlTZWN0aW9uV2l0aE1hcmdpbkJvdHRvbS5jc3MgKi9cbi5ib2R5U2VjdGlvbldpdGhNYXJnaW4ge1xuICAgIG1hcmdpbi1ib3R0b206IDQwcHg7XG59XG5gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9Cb2R5U2VjdGlvbi9Cb2R5U2VjdGlvbldpdGhNYXJnaW5Cb3R0b20uY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBLG9EQUFvRDtBQUNwRDtJQUNJLG1CQUFtQjtBQUN2QlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIvKiBzcmMvQm9keVNlY3Rpb24vQm9keVNlY3Rpb25XaXRoTWFyZ2luQm90dG9tLmNzcyAqL1xcbi5ib2R5U2VjdGlvbldpdGhNYXJnaW4ge1xcbiAgICBtYXJnaW4tYm90dG9tOiA0MHB4O1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYC8qIEdlbmVyYWwgc3R5bGluZyBmb3IgdGhlIENvdXJzZUxpc3QgdGFibGUgKi9cbiNDb3Vyc2VMaXN0IHtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xuICAgIC8qIEVuc3VyZXMgdGhhdCBib3JkZXJzIGJldHdlZW4gY2VsbHMgYXJlIG1lcmdlZCAqL1xuICAgIG1hcmdpbjogMjBweCAwO1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNmOGY4Zjg7XG4gICAgYm94LXNoYWRvdzogMCAycHggM3B4IHJnYmEoMCwgMCwgMCwgMC4xKTtcblxufVxuXG4jQ291cnNlTGlzdCB0aCxcbiNDb3Vyc2VMaXN0IHRkIHtcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjZGRkO1xuICAgIC8qIExpZ2h0IGdyZXkgYm9yZGVyIGFyb3VuZCBjZWxscyAqL1xuICAgIHBhZGRpbmc6IDhweCAxMnB4O1xuICAgIC8qIFBhZGRpbmcgaW5zaWRlIGVhY2ggY2VsbCBmb3IgdGV4dCAqL1xuICAgIHRleHQtYWxpZ246IGxlZnQ7XG4gICAgLyogQWxpZ25zIHRleHQgdG8gdGhlIGxlZnQgKi9cbn1cblxuI0NvdXJzZUxpc3QgdGgge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmZmZmY7XG4gICAgY29sb3I6ICMwMDAwMDA7XG5cbn1cblxuI0NvdXJzZUxpc3QgdGJvZHkgdHI6bnRoLWNoaWxkKG9kZCkge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNmMmYyZjI7XG4gICAgLyogWmVicmEgc3RyaXBpbmcgZm9yIHJvd3MgKi9cbn1cblxuI0NvdXJzZUxpc3QgdGJvZHkgdHI6aG92ZXIge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNkZGQ7XG59XG5gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9Db3Vyc2VMaXN0L0NvdXJzZUxpc3QuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBLDZDQUE2QztBQUM3QztJQUNJLFdBQVc7SUFDWCx5QkFBeUI7SUFDekIsa0RBQWtEO0lBQ2xELGNBQWM7SUFDZCx5QkFBeUI7SUFDekIsd0NBQXdDOztBQUU1Qzs7QUFFQTs7SUFFSSxzQkFBc0I7SUFDdEIsbUNBQW1DO0lBQ25DLGlCQUFpQjtJQUNqQixzQ0FBc0M7SUFDdEMsZ0JBQWdCO0lBQ2hCLDRCQUE0QjtBQUNoQzs7QUFFQTtJQUNJLHlCQUF5QjtJQUN6QixjQUFjOztBQUVsQjs7QUFFQTtJQUNJLHlCQUF5QjtJQUN6Qiw0QkFBNEI7QUFDaEM7O0FBRUE7SUFDSSxzQkFBc0I7QUFDMUJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLyogR2VuZXJhbCBzdHlsaW5nIGZvciB0aGUgQ291cnNlTGlzdCB0YWJsZSAqL1xcbiNDb3Vyc2VMaXN0IHtcXG4gICAgd2lkdGg6IDEwMCU7XFxuICAgIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XFxuICAgIC8qIEVuc3VyZXMgdGhhdCBib3JkZXJzIGJldHdlZW4gY2VsbHMgYXJlIG1lcmdlZCAqL1xcbiAgICBtYXJnaW46IDIwcHggMDtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2Y4ZjhmODtcXG4gICAgYm94LXNoYWRvdzogMCAycHggM3B4IHJnYmEoMCwgMCwgMCwgMC4xKTtcXG5cXG59XFxuXFxuI0NvdXJzZUxpc3QgdGgsXFxuI0NvdXJzZUxpc3QgdGQge1xcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjZGRkO1xcbiAgICAvKiBMaWdodCBncmV5IGJvcmRlciBhcm91bmQgY2VsbHMgKi9cXG4gICAgcGFkZGluZzogOHB4IDEycHg7XFxuICAgIC8qIFBhZGRpbmcgaW5zaWRlIGVhY2ggY2VsbCBmb3IgdGV4dCAqL1xcbiAgICB0ZXh0LWFsaWduOiBsZWZ0O1xcbiAgICAvKiBBbGlnbnMgdGV4dCB0byB0aGUgbGVmdCAqL1xcbn1cXG5cXG4jQ291cnNlTGlzdCB0aCB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmZmZmY7XFxuICAgIGNvbG9yOiAjMDAwMDAwO1xcblxcbn1cXG5cXG4jQ291cnNlTGlzdCB0Ym9keSB0cjpudGgtY2hpbGQob2RkKSB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNmMmYyZjI7XFxuICAgIC8qIFplYnJhIHN0cmlwaW5nIGZvciByb3dzICovXFxufVxcblxcbiNDb3Vyc2VMaXN0IHRib2R5IHRyOmhvdmVyIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2RkZDtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAuQXBwLWZvb3RlciB7XG4gICAgYm9yZGVyLXRvcDogcmVkIDJweCBzb2xpZDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgZm9udC1zdHlsZTogaXRhbGljO1xufVxuYCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvRm9vdGVyL0Zvb3Rlci5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7SUFDSSx5QkFBeUI7SUFDekIsdUJBQXVCO0lBQ3ZCLGtCQUFrQjtJQUNsQixrQkFBa0I7QUFDdEJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLkFwcC1mb290ZXIge1xcbiAgICBib3JkZXItdG9wOiByZWQgMnB4IHNvbGlkO1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgICBmb250LXN0eWxlOiBpdGFsaWM7XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgLkFwcC1sb2dvIHtcbiAgICBoZWlnaHQ6IDI1dm1pbjtcbiAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcbn1cblxuLkFwcC1oZWFkZXIge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgYm9yZGVyLWJvdHRvbTogcmVkIDJweCBzb2xpZDtcbn1cblxuLmhlYWRlciB7XG4gICAgY29sb3I6IHJlZDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIHBhZGRpbmctdG9wOiA1dmg7XG4gICAgZm9udC1zaXplOiBjYWxjKDEwcHggKyAydm1pbik7XG59XG5gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9IZWFkZXIvSGVhZGVyLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtJQUNJLGNBQWM7SUFDZCxvQkFBb0I7QUFDeEI7O0FBRUE7SUFDSSxhQUFhO0lBQ2IsNEJBQTRCO0FBQ2hDOztBQUVBO0lBQ0ksVUFBVTtJQUNWLHVCQUF1QjtJQUN2QixtQkFBbUI7SUFDbkIsZ0JBQWdCO0lBQ2hCLDZCQUE2QjtBQUNqQ1wiLFwic291cmNlc0NvbnRlbnRcIjpbXCIuQXBwLWxvZ28ge1xcbiAgICBoZWlnaHQ6IDI1dm1pbjtcXG4gICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XFxufVxcblxcbi5BcHAtaGVhZGVyIHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgYm9yZGVyLWJvdHRvbTogcmVkIDJweCBzb2xpZDtcXG59XFxuXFxuLmhlYWRlciB7XFxuICAgIGNvbG9yOiByZWQ7XFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICBwYWRkaW5nLXRvcDogNXZoO1xcbiAgICBmb250LXNpemU6IGNhbGMoMTBweCArIDJ2bWluKTtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAuQXBwLWJvZHkge1xuICAgIGhlaWdodDogNDB2aDtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG59XG5cbi5BcHAtYm9keSBwIHtcbiAgICBjb2xvcjogY2NjO1xuICAgIGZvbnQtc2l6ZTogMS41ZW07XG4gICAgbWFyZ2luOiA0cHg7XG4gICAgcGFkZGluZzogOHB4O1xufVxuXG4uQXBwLWJvZHkgbGFiZWwsXG4uQXBwLWJvZHkgaW5wdXQsXG4uQXBwLWJvZHkgYnV0dG9uIHtcbiAgICBjb2xvcjogY2NjO1xuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICBwYWRkaW5nOiAycHg7XG4gICAgbWFyZ2luOiA2cHg7XG59XG5cbi5BcHAtYm9keSBidXR0b24ge1xuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICAgIGNvbG9yOiBjY2M7XG4gICAgYm9yZGVyOiAjY2VjZWNlZTcgMXB4IHNvbGlkO1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbn1cblxuLkFwcC1ib2R5IGJ1dHRvbjpob3ZlciB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2NlY2VjZWU3O1xufVxuYCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvTG9naW4vTG9naW4uY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0lBQ0ksWUFBWTtJQUNaLGFBQWE7SUFDYixzQkFBc0I7QUFDMUI7O0FBRUE7SUFDSSxVQUFVO0lBQ1YsZ0JBQWdCO0lBQ2hCLFdBQVc7SUFDWCxZQUFZO0FBQ2hCOztBQUVBOzs7SUFHSSxVQUFVO0lBQ1YscUJBQXFCO0lBQ3JCLFlBQVk7SUFDWixXQUFXO0FBQ2Y7O0FBRUE7SUFDSSx1QkFBdUI7SUFDdkIsVUFBVTtJQUNWLDJCQUEyQjtJQUMzQixlQUFlO0FBQ25COztBQUVBO0lBQ0ksMkJBQTJCO0FBQy9CXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5BcHAtYm9keSB7XFxuICAgIGhlaWdodDogNDB2aDtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG59XFxuXFxuLkFwcC1ib2R5IHAge1xcbiAgICBjb2xvcjogY2NjO1xcbiAgICBmb250LXNpemU6IDEuNWVtO1xcbiAgICBtYXJnaW46IDRweDtcXG4gICAgcGFkZGluZzogOHB4O1xcbn1cXG5cXG4uQXBwLWJvZHkgbGFiZWwsXFxuLkFwcC1ib2R5IGlucHV0LFxcbi5BcHAtYm9keSBidXR0b24ge1xcbiAgICBjb2xvcjogY2NjO1xcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICAgIHBhZGRpbmc6IDJweDtcXG4gICAgbWFyZ2luOiA2cHg7XFxufVxcblxcbi5BcHAtYm9keSBidXR0b24ge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXG4gICAgY29sb3I6IGNjYztcXG4gICAgYm9yZGVyOiAjY2VjZWNlZTcgMXB4IHNvbGlkO1xcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcblxcbi5BcHAtYm9keSBidXR0b246aG92ZXIge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjY2VjZWNlZTc7XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgLk5vdGlmaWNhdGlvbnMgbGlbZGF0YS1ub3RpZmljYXRpb24tdHlwZT1cImRlZmF1bHRcIl0ge1xuICAgIGNvbG9yOiByZ2IoNCwgNCwgMTI2KTtcbn1cblxuLk5vdGlmaWNhdGlvbnMgbGlbZGF0YS1ub3RpZmljYXRpb24tdHlwZT1cInVyZ2VudFwiXSB7XG4gICAgY29sb3I6IHJnYigyNTUsIDAsIDApO1xufVxuXG4uTm90aWZpY2F0aW9ucyB7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgLyogSGlkZGVuIGJ5IGRlZmF1bHQgKi9cbiAgICBwYWRkaW5nOiAxMHB4O1xuICAgIG1hcmdpbjogMjBweDtcbiAgICBib3JkZXI6IDJweCBkb3R0ZWQgcmVkO1xuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3A6IDA7XG4gICAgcmlnaHQ6IDA7XG4gICAgei1pbmRleDogMTAwO1xuICAgIC8qIEVuc3VyZXMgaXQgYXBwZWFycyBhYm92ZSBvdGhlciBjb250ZW50ICovXG59XG5cbi5Ob3RpZmljYXRpb25zLmFjdGl2ZSB7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgLyogRGlzcGxheSB3aGVuIGFjdGl2ZSAqL1xufVxuXG4ubWVudUl0ZW0ge1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xuICAgIG1hcmdpbi1yaWdodDogMjBweDtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgdG9wOiAwO1xuICAgIHJpZ2h0OiAwO1xuICAgIHotaW5kZXg6IDk5O1xuICAgIC8qIFNsaWdodGx5IGJlbG93IG5vdGlmaWNhdGlvbnMgdG8gYWxsb3cgZm9yIGNsaWNrIGFjY2VzcyAqL1xufVxuYCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvTm90aWZpY2F0aW9ucy9Ob3RpZmljYXRpb25zLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtJQUNJLHFCQUFxQjtBQUN6Qjs7QUFFQTtJQUNJLHFCQUFxQjtBQUN6Qjs7QUFFQTtJQUNJLGNBQWM7SUFDZCxzQkFBc0I7SUFDdEIsYUFBYTtJQUNiLFlBQVk7SUFDWixzQkFBc0I7SUFDdEIsdUJBQXVCO0lBQ3ZCLGtCQUFrQjtJQUNsQixNQUFNO0lBQ04sUUFBUTtJQUNSLFlBQVk7SUFDWiwyQ0FBMkM7QUFDL0M7O0FBRUE7SUFDSSxjQUFjO0lBQ2Qsd0JBQXdCO0FBQzVCOztBQUVBO0lBQ0ksZUFBZTtJQUNmLG1CQUFtQjtJQUNuQixrQkFBa0I7SUFDbEIsa0JBQWtCO0lBQ2xCLE1BQU07SUFDTixRQUFRO0lBQ1IsV0FBVztJQUNYLDJEQUEyRDtBQUMvRFwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIuTm90aWZpY2F0aW9ucyBsaVtkYXRhLW5vdGlmaWNhdGlvbi10eXBlPVxcXCJkZWZhdWx0XFxcIl0ge1xcbiAgICBjb2xvcjogcmdiKDQsIDQsIDEyNik7XFxufVxcblxcbi5Ob3RpZmljYXRpb25zIGxpW2RhdGEtbm90aWZpY2F0aW9uLXR5cGU9XFxcInVyZ2VudFxcXCJdIHtcXG4gICAgY29sb3I6IHJnYigyNTUsIDAsIDApO1xcbn1cXG5cXG4uTm90aWZpY2F0aW9ucyB7XFxuICAgIGRpc3BsYXk6IGJsb2NrO1xcbiAgICAvKiBIaWRkZW4gYnkgZGVmYXVsdCAqL1xcbiAgICBwYWRkaW5nOiAxMHB4O1xcbiAgICBtYXJnaW46IDIwcHg7XFxuICAgIGJvcmRlcjogMnB4IGRvdHRlZCByZWQ7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgIHRvcDogMDtcXG4gICAgcmlnaHQ6IDA7XFxuICAgIHotaW5kZXg6IDEwMDtcXG4gICAgLyogRW5zdXJlcyBpdCBhcHBlYXJzIGFib3ZlIG90aGVyIGNvbnRlbnQgKi9cXG59XFxuXFxuLk5vdGlmaWNhdGlvbnMuYWN0aXZlIHtcXG4gICAgZGlzcGxheTogYmxvY2s7XFxuICAgIC8qIERpc3BsYXkgd2hlbiBhY3RpdmUgKi9cXG59XFxuXFxuLm1lbnVJdGVtIHtcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcbiAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xcbiAgICBtYXJnaW4tcmlnaHQ6IDIwcHg7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgdG9wOiAwO1xcbiAgICByaWdodDogMDtcXG4gICAgei1pbmRleDogOTk7XFxuICAgIC8qIFNsaWdodGx5IGJlbG93IG5vdGlmaWNhdGlvbnMgdG8gYWxsb3cgZm9yIGNsaWNrIGFjY2VzcyAqL1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107XG5cbiAgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IFwiXCI7XG4gICAgICB2YXIgbmVlZExheWVyID0gdHlwZW9mIGl0ZW1bNV0gIT09IFwidW5kZWZpbmVkXCI7XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07XG5cbiAgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgbGlzdC5pID0gZnVuY3Rpb24gaShtb2R1bGVzLCBtZWRpYSwgZGVkdXBlLCBzdXBwb3J0cywgbGF5ZXIpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIHVuZGVmaW5lZF1dO1xuICAgIH1cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5sZW5ndGg7IGsrKykge1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2tdWzBdO1xuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbW9kdWxlcy5sZW5ndGg7IF9rKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2tdKTtcbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgbGF5ZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtWzVdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHN1cHBvcnRzKSB7XG4gICAgICAgIGlmICghaXRlbVs0XSkge1xuICAgICAgICAgIGl0ZW1bNF0gPSBcIlwiLmNvbmNhdChzdXBwb3J0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzRdID0gc3VwcG9ydHM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5hdHRyaWJ1dGVSdWxlcyA9IHZvaWQgMDtcbnZhciBib29sYmFzZV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJib29sYmFzZVwiKSk7XG4vKipcbiAqIEFsbCByZXNlcnZlZCBjaGFyYWN0ZXJzIGluIGEgcmVnZXgsIHVzZWQgZm9yIGVzY2FwaW5nLlxuICpcbiAqIFRha2VuIGZyb20gWFJlZ0V4cCwgKGMpIDIwMDctMjAyMCBTdGV2ZW4gTGV2aXRoYW4gdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwczovL2dpdGh1Yi5jb20vc2xldml0aGFuL3hyZWdleHAvYmxvYi85NWVlZWJlYjhmYWM4NzU0ZDU0ZWFmZTJiNDc0MzY2MWFjMWNmMDI4L3NyYy94cmVnZXhwLmpzI0w3OTRcbiAqL1xudmFyIHJlQ2hhcnMgPSAvWy1bXFxde30oKSorPy4sXFxcXF4kfCNcXHNdL2c7XG5mdW5jdGlvbiBlc2NhcGVSZWdleCh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZS5yZXBsYWNlKHJlQ2hhcnMsIFwiXFxcXCQmXCIpO1xufVxuLyoqXG4gKiBBdHRyaWJ1dGVzIHRoYXQgYXJlIGNhc2UtaW5zZW5zaXRpdmUgaW4gSFRNTC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHNlZSBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zZW1hbnRpY3Mtb3RoZXIuaHRtbCNjYXNlLXNlbnNpdGl2aXR5LW9mLXNlbGVjdG9yc1xuICovXG52YXIgY2FzZUluc2Vuc2l0aXZlQXR0cmlidXRlcyA9IG5ldyBTZXQoW1xuICAgIFwiYWNjZXB0XCIsXG4gICAgXCJhY2NlcHQtY2hhcnNldFwiLFxuICAgIFwiYWxpZ25cIixcbiAgICBcImFsaW5rXCIsXG4gICAgXCJheGlzXCIsXG4gICAgXCJiZ2NvbG9yXCIsXG4gICAgXCJjaGFyc2V0XCIsXG4gICAgXCJjaGVja2VkXCIsXG4gICAgXCJjbGVhclwiLFxuICAgIFwiY29kZXR5cGVcIixcbiAgICBcImNvbG9yXCIsXG4gICAgXCJjb21wYWN0XCIsXG4gICAgXCJkZWNsYXJlXCIsXG4gICAgXCJkZWZlclwiLFxuICAgIFwiZGlyXCIsXG4gICAgXCJkaXJlY3Rpb25cIixcbiAgICBcImRpc2FibGVkXCIsXG4gICAgXCJlbmN0eXBlXCIsXG4gICAgXCJmYWNlXCIsXG4gICAgXCJmcmFtZVwiLFxuICAgIFwiaHJlZmxhbmdcIixcbiAgICBcImh0dHAtZXF1aXZcIixcbiAgICBcImxhbmdcIixcbiAgICBcImxhbmd1YWdlXCIsXG4gICAgXCJsaW5rXCIsXG4gICAgXCJtZWRpYVwiLFxuICAgIFwibWV0aG9kXCIsXG4gICAgXCJtdWx0aXBsZVwiLFxuICAgIFwibm9ocmVmXCIsXG4gICAgXCJub3Jlc2l6ZVwiLFxuICAgIFwibm9zaGFkZVwiLFxuICAgIFwibm93cmFwXCIsXG4gICAgXCJyZWFkb25seVwiLFxuICAgIFwicmVsXCIsXG4gICAgXCJyZXZcIixcbiAgICBcInJ1bGVzXCIsXG4gICAgXCJzY29wZVwiLFxuICAgIFwic2Nyb2xsaW5nXCIsXG4gICAgXCJzZWxlY3RlZFwiLFxuICAgIFwic2hhcGVcIixcbiAgICBcInRhcmdldFwiLFxuICAgIFwidGV4dFwiLFxuICAgIFwidHlwZVwiLFxuICAgIFwidmFsaWduXCIsXG4gICAgXCJ2YWx1ZXR5cGVcIixcbiAgICBcInZsaW5rXCIsXG5dKTtcbmZ1bmN0aW9uIHNob3VsZElnbm9yZUNhc2Uoc2VsZWN0b3IsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdHlwZW9mIHNlbGVjdG9yLmlnbm9yZUNhc2UgPT09IFwiYm9vbGVhblwiXG4gICAgICAgID8gc2VsZWN0b3IuaWdub3JlQ2FzZVxuICAgICAgICA6IHNlbGVjdG9yLmlnbm9yZUNhc2UgPT09IFwicXVpcmtzXCJcbiAgICAgICAgICAgID8gISFvcHRpb25zLnF1aXJrc01vZGVcbiAgICAgICAgICAgIDogIW9wdGlvbnMueG1sTW9kZSAmJiBjYXNlSW5zZW5zaXRpdmVBdHRyaWJ1dGVzLmhhcyhzZWxlY3Rvci5uYW1lKTtcbn1cbi8qKlxuICogQXR0cmlidXRlIHNlbGVjdG9yc1xuICovXG5leHBvcnRzLmF0dHJpYnV0ZVJ1bGVzID0ge1xuICAgIGVxdWFsczogZnVuY3Rpb24gKG5leHQsIGRhdGEsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIGFkYXB0ZXIgPSBvcHRpb25zLmFkYXB0ZXI7XG4gICAgICAgIHZhciBuYW1lID0gZGF0YS5uYW1lO1xuICAgICAgICB2YXIgdmFsdWUgPSBkYXRhLnZhbHVlO1xuICAgICAgICBpZiAoc2hvdWxkSWdub3JlQ2FzZShkYXRhLCBvcHRpb25zKSkge1xuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChlbGVtKSB7XG4gICAgICAgICAgICAgICAgdmFyIGF0dHIgPSBhZGFwdGVyLmdldEF0dHJpYnV0ZVZhbHVlKGVsZW0sIG5hbWUpO1xuICAgICAgICAgICAgICAgIHJldHVybiAoYXR0ciAhPSBudWxsICYmXG4gICAgICAgICAgICAgICAgICAgIGF0dHIubGVuZ3RoID09PSB2YWx1ZS5sZW5ndGggJiZcbiAgICAgICAgICAgICAgICAgICAgYXR0ci50b0xvd2VyQ2FzZSgpID09PSB2YWx1ZSAmJlxuICAgICAgICAgICAgICAgICAgICBuZXh0KGVsZW0pKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChlbGVtKSB7XG4gICAgICAgICAgICByZXR1cm4gYWRhcHRlci5nZXRBdHRyaWJ1dGVWYWx1ZShlbGVtLCBuYW1lKSA9PT0gdmFsdWUgJiYgbmV4dChlbGVtKTtcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIGh5cGhlbjogZnVuY3Rpb24gKG5leHQsIGRhdGEsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIGFkYXB0ZXIgPSBvcHRpb25zLmFkYXB0ZXI7XG4gICAgICAgIHZhciBuYW1lID0gZGF0YS5uYW1lO1xuICAgICAgICB2YXIgdmFsdWUgPSBkYXRhLnZhbHVlO1xuICAgICAgICB2YXIgbGVuID0gdmFsdWUubGVuZ3RoO1xuICAgICAgICBpZiAoc2hvdWxkSWdub3JlQ2FzZShkYXRhLCBvcHRpb25zKSkge1xuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGh5cGhlbklDKGVsZW0pIHtcbiAgICAgICAgICAgICAgICB2YXIgYXR0ciA9IGFkYXB0ZXIuZ2V0QXR0cmlidXRlVmFsdWUoZWxlbSwgbmFtZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChhdHRyICE9IG51bGwgJiZcbiAgICAgICAgICAgICAgICAgICAgKGF0dHIubGVuZ3RoID09PSBsZW4gfHwgYXR0ci5jaGFyQXQobGVuKSA9PT0gXCItXCIpICYmXG4gICAgICAgICAgICAgICAgICAgIGF0dHIuc3Vic3RyKDAsIGxlbikudG9Mb3dlckNhc2UoKSA9PT0gdmFsdWUgJiZcbiAgICAgICAgICAgICAgICAgICAgbmV4dChlbGVtKSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBoeXBoZW4oZWxlbSkge1xuICAgICAgICAgICAgdmFyIGF0dHIgPSBhZGFwdGVyLmdldEF0dHJpYnV0ZVZhbHVlKGVsZW0sIG5hbWUpO1xuICAgICAgICAgICAgcmV0dXJuIChhdHRyICE9IG51bGwgJiZcbiAgICAgICAgICAgICAgICAoYXR0ci5sZW5ndGggPT09IGxlbiB8fCBhdHRyLmNoYXJBdChsZW4pID09PSBcIi1cIikgJiZcbiAgICAgICAgICAgICAgICBhdHRyLnN1YnN0cigwLCBsZW4pID09PSB2YWx1ZSAmJlxuICAgICAgICAgICAgICAgIG5leHQoZWxlbSkpO1xuICAgICAgICB9O1xuICAgIH0sXG4gICAgZWxlbWVudDogZnVuY3Rpb24gKG5leHQsIGRhdGEsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIGFkYXB0ZXIgPSBvcHRpb25zLmFkYXB0ZXI7XG4gICAgICAgIHZhciBuYW1lID0gZGF0YS5uYW1lLCB2YWx1ZSA9IGRhdGEudmFsdWU7XG4gICAgICAgIGlmICgvXFxzLy50ZXN0KHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIGJvb2xiYXNlXzEuZGVmYXVsdC5mYWxzZUZ1bmM7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJlZ2V4ID0gbmV3IFJlZ0V4cChcIig/Ol58XFxcXHMpXCIuY29uY2F0KGVzY2FwZVJlZ2V4KHZhbHVlKSwgXCIoPzokfFxcXFxzKVwiKSwgc2hvdWxkSWdub3JlQ2FzZShkYXRhLCBvcHRpb25zKSA/IFwiaVwiIDogXCJcIik7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBlbGVtZW50KGVsZW0pIHtcbiAgICAgICAgICAgIHZhciBhdHRyID0gYWRhcHRlci5nZXRBdHRyaWJ1dGVWYWx1ZShlbGVtLCBuYW1lKTtcbiAgICAgICAgICAgIHJldHVybiAoYXR0ciAhPSBudWxsICYmXG4gICAgICAgICAgICAgICAgYXR0ci5sZW5ndGggPj0gdmFsdWUubGVuZ3RoICYmXG4gICAgICAgICAgICAgICAgcmVnZXgudGVzdChhdHRyKSAmJlxuICAgICAgICAgICAgICAgIG5leHQoZWxlbSkpO1xuICAgICAgICB9O1xuICAgIH0sXG4gICAgZXhpc3RzOiBmdW5jdGlvbiAobmV4dCwgX2EsIF9iKSB7XG4gICAgICAgIHZhciBuYW1lID0gX2EubmFtZTtcbiAgICAgICAgdmFyIGFkYXB0ZXIgPSBfYi5hZGFwdGVyO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGVsZW0pIHsgcmV0dXJuIGFkYXB0ZXIuaGFzQXR0cmliKGVsZW0sIG5hbWUpICYmIG5leHQoZWxlbSk7IH07XG4gICAgfSxcbiAgICBzdGFydDogZnVuY3Rpb24gKG5leHQsIGRhdGEsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIGFkYXB0ZXIgPSBvcHRpb25zLmFkYXB0ZXI7XG4gICAgICAgIHZhciBuYW1lID0gZGF0YS5uYW1lO1xuICAgICAgICB2YXIgdmFsdWUgPSBkYXRhLnZhbHVlO1xuICAgICAgICB2YXIgbGVuID0gdmFsdWUubGVuZ3RoO1xuICAgICAgICBpZiAobGVuID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gYm9vbGJhc2VfMS5kZWZhdWx0LmZhbHNlRnVuYztcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2hvdWxkSWdub3JlQ2FzZShkYXRhLCBvcHRpb25zKSkge1xuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChlbGVtKSB7XG4gICAgICAgICAgICAgICAgdmFyIGF0dHIgPSBhZGFwdGVyLmdldEF0dHJpYnV0ZVZhbHVlKGVsZW0sIG5hbWUpO1xuICAgICAgICAgICAgICAgIHJldHVybiAoYXR0ciAhPSBudWxsICYmXG4gICAgICAgICAgICAgICAgICAgIGF0dHIubGVuZ3RoID49IGxlbiAmJlxuICAgICAgICAgICAgICAgICAgICBhdHRyLnN1YnN0cigwLCBsZW4pLnRvTG93ZXJDYXNlKCkgPT09IHZhbHVlICYmXG4gICAgICAgICAgICAgICAgICAgIG5leHQoZWxlbSkpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGVsZW0pIHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIHJldHVybiAhISgoX2EgPSBhZGFwdGVyLmdldEF0dHJpYnV0ZVZhbHVlKGVsZW0sIG5hbWUpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc3RhcnRzV2l0aCh2YWx1ZSkpICYmXG4gICAgICAgICAgICAgICAgbmV4dChlbGVtKTtcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIGVuZDogZnVuY3Rpb24gKG5leHQsIGRhdGEsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIGFkYXB0ZXIgPSBvcHRpb25zLmFkYXB0ZXI7XG4gICAgICAgIHZhciBuYW1lID0gZGF0YS5uYW1lO1xuICAgICAgICB2YXIgdmFsdWUgPSBkYXRhLnZhbHVlO1xuICAgICAgICB2YXIgbGVuID0gLXZhbHVlLmxlbmd0aDtcbiAgICAgICAgaWYgKGxlbiA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIGJvb2xiYXNlXzEuZGVmYXVsdC5mYWxzZUZ1bmM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNob3VsZElnbm9yZUNhc2UoZGF0YSwgb3B0aW9ucykpIHtcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoZWxlbSkge1xuICAgICAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgICAgICByZXR1cm4gKChfYSA9IGFkYXB0ZXJcbiAgICAgICAgICAgICAgICAgICAgLmdldEF0dHJpYnV0ZVZhbHVlKGVsZW0sIG5hbWUpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc3Vic3RyKGxlbikudG9Mb3dlckNhc2UoKSkgPT09IHZhbHVlICYmIG5leHQoZWxlbSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoZWxlbSkge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgcmV0dXJuICEhKChfYSA9IGFkYXB0ZXIuZ2V0QXR0cmlidXRlVmFsdWUoZWxlbSwgbmFtZSkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5lbmRzV2l0aCh2YWx1ZSkpICYmXG4gICAgICAgICAgICAgICAgbmV4dChlbGVtKTtcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIGFueTogZnVuY3Rpb24gKG5leHQsIGRhdGEsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIGFkYXB0ZXIgPSBvcHRpb25zLmFkYXB0ZXI7XG4gICAgICAgIHZhciBuYW1lID0gZGF0YS5uYW1lLCB2YWx1ZSA9IGRhdGEudmFsdWU7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gXCJcIikge1xuICAgICAgICAgICAgcmV0dXJuIGJvb2xiYXNlXzEuZGVmYXVsdC5mYWxzZUZ1bmM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNob3VsZElnbm9yZUNhc2UoZGF0YSwgb3B0aW9ucykpIHtcbiAgICAgICAgICAgIHZhciByZWdleF8xID0gbmV3IFJlZ0V4cChlc2NhcGVSZWdleCh2YWx1ZSksIFwiaVwiKTtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiBhbnlJQyhlbGVtKSB7XG4gICAgICAgICAgICAgICAgdmFyIGF0dHIgPSBhZGFwdGVyLmdldEF0dHJpYnV0ZVZhbHVlKGVsZW0sIG5hbWUpO1xuICAgICAgICAgICAgICAgIHJldHVybiAoYXR0ciAhPSBudWxsICYmXG4gICAgICAgICAgICAgICAgICAgIGF0dHIubGVuZ3RoID49IHZhbHVlLmxlbmd0aCAmJlxuICAgICAgICAgICAgICAgICAgICByZWdleF8xLnRlc3QoYXR0cikgJiZcbiAgICAgICAgICAgICAgICAgICAgbmV4dChlbGVtKSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoZWxlbSkge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgcmV0dXJuICEhKChfYSA9IGFkYXB0ZXIuZ2V0QXR0cmlidXRlVmFsdWUoZWxlbSwgbmFtZSkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5pbmNsdWRlcyh2YWx1ZSkpICYmXG4gICAgICAgICAgICAgICAgbmV4dChlbGVtKTtcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIG5vdDogZnVuY3Rpb24gKG5leHQsIGRhdGEsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIGFkYXB0ZXIgPSBvcHRpb25zLmFkYXB0ZXI7XG4gICAgICAgIHZhciBuYW1lID0gZGF0YS5uYW1lO1xuICAgICAgICB2YXIgdmFsdWUgPSBkYXRhLnZhbHVlO1xuICAgICAgICBpZiAodmFsdWUgPT09IFwiXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoZWxlbSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAhIWFkYXB0ZXIuZ2V0QXR0cmlidXRlVmFsdWUoZWxlbSwgbmFtZSkgJiYgbmV4dChlbGVtKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoc2hvdWxkSWdub3JlQ2FzZShkYXRhLCBvcHRpb25zKSkge1xuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChlbGVtKSB7XG4gICAgICAgICAgICAgICAgdmFyIGF0dHIgPSBhZGFwdGVyLmdldEF0dHJpYnV0ZVZhbHVlKGVsZW0sIG5hbWUpO1xuICAgICAgICAgICAgICAgIHJldHVybiAoKGF0dHIgPT0gbnVsbCB8fFxuICAgICAgICAgICAgICAgICAgICBhdHRyLmxlbmd0aCAhPT0gdmFsdWUubGVuZ3RoIHx8XG4gICAgICAgICAgICAgICAgICAgIGF0dHIudG9Mb3dlckNhc2UoKSAhPT0gdmFsdWUpICYmXG4gICAgICAgICAgICAgICAgICAgIG5leHQoZWxlbSkpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGVsZW0pIHtcbiAgICAgICAgICAgIHJldHVybiBhZGFwdGVyLmdldEF0dHJpYnV0ZVZhbHVlKGVsZW0sIG5hbWUpICE9PSB2YWx1ZSAmJiBuZXh0KGVsZW0pO1xuICAgICAgICB9O1xuICAgIH0sXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXR0cmlidXRlcy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59KTtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jb21waWxlVG9rZW4gPSBleHBvcnRzLmNvbXBpbGVVbnNhZmUgPSBleHBvcnRzLmNvbXBpbGUgPSB2b2lkIDA7XG52YXIgY3NzX3doYXRfMSA9IHJlcXVpcmUoXCJjc3Mtd2hhdFwiKTtcbnZhciBib29sYmFzZV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJib29sYmFzZVwiKSk7XG52YXIgc29ydF9qc18xID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL3NvcnQuanNcIikpO1xudmFyIGdlbmVyYWxfanNfMSA9IHJlcXVpcmUoXCIuL2dlbmVyYWwuanNcIik7XG52YXIgc3Vic2VsZWN0c19qc18xID0gcmVxdWlyZShcIi4vcHNldWRvLXNlbGVjdG9ycy9zdWJzZWxlY3RzLmpzXCIpO1xuLyoqXG4gKiBDb21waWxlcyBhIHNlbGVjdG9yIHRvIGFuIGV4ZWN1dGFibGUgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHNlbGVjdG9yIFNlbGVjdG9yIHRvIGNvbXBpbGUuXG4gKiBAcGFyYW0gb3B0aW9ucyBDb21waWxhdGlvbiBvcHRpb25zLlxuICogQHBhcmFtIGNvbnRleHQgT3B0aW9uYWwgY29udGV4dCBmb3IgdGhlIHNlbGVjdG9yLlxuICovXG5mdW5jdGlvbiBjb21waWxlKHNlbGVjdG9yLCBvcHRpb25zLCBjb250ZXh0KSB7XG4gICAgdmFyIG5leHQgPSBjb21waWxlVW5zYWZlKHNlbGVjdG9yLCBvcHRpb25zLCBjb250ZXh0KTtcbiAgICByZXR1cm4gKDAsIHN1YnNlbGVjdHNfanNfMS5lbnN1cmVJc1RhZykobmV4dCwgb3B0aW9ucy5hZGFwdGVyKTtcbn1cbmV4cG9ydHMuY29tcGlsZSA9IGNvbXBpbGU7XG5mdW5jdGlvbiBjb21waWxlVW5zYWZlKHNlbGVjdG9yLCBvcHRpb25zLCBjb250ZXh0KSB7XG4gICAgdmFyIHRva2VuID0gdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiID8gKDAsIGNzc193aGF0XzEucGFyc2UpKHNlbGVjdG9yKSA6IHNlbGVjdG9yO1xuICAgIHJldHVybiBjb21waWxlVG9rZW4odG9rZW4sIG9wdGlvbnMsIGNvbnRleHQpO1xufVxuZXhwb3J0cy5jb21waWxlVW5zYWZlID0gY29tcGlsZVVuc2FmZTtcbmZ1bmN0aW9uIGluY2x1ZGVzU2NvcGVQc2V1ZG8odCkge1xuICAgIHJldHVybiAodC50eXBlID09PSBjc3Nfd2hhdF8xLlNlbGVjdG9yVHlwZS5Qc2V1ZG8gJiZcbiAgICAgICAgKHQubmFtZSA9PT0gXCJzY29wZVwiIHx8XG4gICAgICAgICAgICAoQXJyYXkuaXNBcnJheSh0LmRhdGEpICYmXG4gICAgICAgICAgICAgICAgdC5kYXRhLnNvbWUoZnVuY3Rpb24gKGRhdGEpIHsgcmV0dXJuIGRhdGEuc29tZShpbmNsdWRlc1Njb3BlUHNldWRvKTsgfSkpKSk7XG59XG52YXIgREVTQ0VOREFOVF9UT0tFTiA9IHsgdHlwZTogY3NzX3doYXRfMS5TZWxlY3RvclR5cGUuRGVzY2VuZGFudCB9O1xudmFyIEZMRVhJQkxFX0RFU0NFTkRBTlRfVE9LRU4gPSB7XG4gICAgdHlwZTogXCJfZmxleGlibGVEZXNjZW5kYW50XCIsXG59O1xudmFyIFNDT1BFX1RPS0VOID0ge1xuICAgIHR5cGU6IGNzc193aGF0XzEuU2VsZWN0b3JUeXBlLlBzZXVkbyxcbiAgICBuYW1lOiBcInNjb3BlXCIsXG4gICAgZGF0YTogbnVsbCxcbn07XG4vKlxuICogQ1NTIDQgU3BlYyAoRHJhZnQpOiAzLjQuMS4gQWJzb2x1dGl6aW5nIGEgUmVsYXRpdmUgU2VsZWN0b3JcbiAqIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9yczQvI2Fic29sdXRpemluZ1xuICovXG5mdW5jdGlvbiBhYnNvbHV0aXplKHRva2VuLCBfYSwgY29udGV4dCkge1xuICAgIHZhciBhZGFwdGVyID0gX2EuYWRhcHRlcjtcbiAgICAvLyBUT0RPIFVzZSBiZXR0ZXIgY2hlY2sgaWYgdGhlIGNvbnRleHQgaXMgYSBkb2N1bWVudFxuICAgIHZhciBoYXNDb250ZXh0ID0gISEoY29udGV4dCA9PT0gbnVsbCB8fCBjb250ZXh0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjb250ZXh0LmV2ZXJ5KGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHZhciBwYXJlbnQgPSBhZGFwdGVyLmlzVGFnKGUpICYmIGFkYXB0ZXIuZ2V0UGFyZW50KGUpO1xuICAgICAgICByZXR1cm4gZSA9PT0gc3Vic2VsZWN0c19qc18xLlBMQUNFSE9MREVSX0VMRU1FTlQgfHwgKHBhcmVudCAmJiBhZGFwdGVyLmlzVGFnKHBhcmVudCkpO1xuICAgIH0pKTtcbiAgICBmb3IgKHZhciBfaSA9IDAsIHRva2VuXzEgPSB0b2tlbjsgX2kgPCB0b2tlbl8xLmxlbmd0aDsgX2krKykge1xuICAgICAgICB2YXIgdCA9IHRva2VuXzFbX2ldO1xuICAgICAgICBpZiAodC5sZW5ndGggPiAwICYmXG4gICAgICAgICAgICAoMCwgc29ydF9qc18xLmlzVHJhdmVyc2FsKSh0WzBdKSAmJlxuICAgICAgICAgICAgdFswXS50eXBlICE9PSBjc3Nfd2hhdF8xLlNlbGVjdG9yVHlwZS5EZXNjZW5kYW50KSB7XG4gICAgICAgICAgICAvLyBEb24ndCBjb250aW51ZSBpbiBlbHNlIGJyYW5jaFxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGhhc0NvbnRleHQgJiYgIXQuc29tZShpbmNsdWRlc1Njb3BlUHNldWRvKSkge1xuICAgICAgICAgICAgdC51bnNoaWZ0KERFU0NFTkRBTlRfVE9LRU4pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgdC51bnNoaWZ0KFNDT1BFX1RPS0VOKTtcbiAgICB9XG59XG5mdW5jdGlvbiBjb21waWxlVG9rZW4odG9rZW4sIG9wdGlvbnMsIGNvbnRleHQpIHtcbiAgICB2YXIgX2E7XG4gICAgdG9rZW4uZm9yRWFjaChzb3J0X2pzXzEuZGVmYXVsdCk7XG4gICAgY29udGV4dCA9IChfYSA9IG9wdGlvbnMuY29udGV4dCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogY29udGV4dDtcbiAgICB2YXIgaXNBcnJheUNvbnRleHQgPSBBcnJheS5pc0FycmF5KGNvbnRleHQpO1xuICAgIHZhciBmaW5hbENvbnRleHQgPSBjb250ZXh0ICYmIChBcnJheS5pc0FycmF5KGNvbnRleHQpID8gY29udGV4dCA6IFtjb250ZXh0XSk7XG4gICAgLy8gQ2hlY2sgaWYgdGhlIHNlbGVjdG9yIGlzIHJlbGF0aXZlXG4gICAgaWYgKG9wdGlvbnMucmVsYXRpdmVTZWxlY3RvciAhPT0gZmFsc2UpIHtcbiAgICAgICAgYWJzb2x1dGl6ZSh0b2tlbiwgb3B0aW9ucywgZmluYWxDb250ZXh0KTtcbiAgICB9XG4gICAgZWxzZSBpZiAodG9rZW4uc29tZShmdW5jdGlvbiAodCkgeyByZXR1cm4gdC5sZW5ndGggPiAwICYmICgwLCBzb3J0X2pzXzEuaXNUcmF2ZXJzYWwpKHRbMF0pOyB9KSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJSZWxhdGl2ZSBzZWxlY3RvcnMgYXJlIG5vdCBhbGxvd2VkIHdoZW4gdGhlIGByZWxhdGl2ZVNlbGVjdG9yYCBvcHRpb24gaXMgZGlzYWJsZWRcIik7XG4gICAgfVxuICAgIHZhciBzaG91bGRUZXN0TmV4dFNpYmxpbmdzID0gZmFsc2U7XG4gICAgdmFyIHF1ZXJ5ID0gdG9rZW5cbiAgICAgICAgLm1hcChmdW5jdGlvbiAocnVsZXMpIHtcbiAgICAgICAgaWYgKHJ1bGVzLmxlbmd0aCA+PSAyKSB7XG4gICAgICAgICAgICB2YXIgZmlyc3QgPSBydWxlc1swXSwgc2Vjb25kID0gcnVsZXNbMV07XG4gICAgICAgICAgICBpZiAoZmlyc3QudHlwZSAhPT0gY3NzX3doYXRfMS5TZWxlY3RvclR5cGUuUHNldWRvIHx8XG4gICAgICAgICAgICAgICAgZmlyc3QubmFtZSAhPT0gXCJzY29wZVwiKSB7XG4gICAgICAgICAgICAgICAgLy8gSWdub3JlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpc0FycmF5Q29udGV4dCAmJlxuICAgICAgICAgICAgICAgIHNlY29uZC50eXBlID09PSBjc3Nfd2hhdF8xLlNlbGVjdG9yVHlwZS5EZXNjZW5kYW50KSB7XG4gICAgICAgICAgICAgICAgcnVsZXNbMV0gPSBGTEVYSUJMRV9ERVNDRU5EQU5UX1RPS0VOO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoc2Vjb25kLnR5cGUgPT09IGNzc193aGF0XzEuU2VsZWN0b3JUeXBlLkFkamFjZW50IHx8XG4gICAgICAgICAgICAgICAgc2Vjb25kLnR5cGUgPT09IGNzc193aGF0XzEuU2VsZWN0b3JUeXBlLlNpYmxpbmcpIHtcbiAgICAgICAgICAgICAgICBzaG91bGRUZXN0TmV4dFNpYmxpbmdzID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29tcGlsZVJ1bGVzKHJ1bGVzLCBvcHRpb25zLCBmaW5hbENvbnRleHQpO1xuICAgIH0pXG4gICAgICAgIC5yZWR1Y2UocmVkdWNlUnVsZXMsIGJvb2xiYXNlXzEuZGVmYXVsdC5mYWxzZUZ1bmMpO1xuICAgIHF1ZXJ5LnNob3VsZFRlc3ROZXh0U2libGluZ3MgPSBzaG91bGRUZXN0TmV4dFNpYmxpbmdzO1xuICAgIHJldHVybiBxdWVyeTtcbn1cbmV4cG9ydHMuY29tcGlsZVRva2VuID0gY29tcGlsZVRva2VuO1xuZnVuY3Rpb24gY29tcGlsZVJ1bGVzKHJ1bGVzLCBvcHRpb25zLCBjb250ZXh0KSB7XG4gICAgdmFyIF9hO1xuICAgIHJldHVybiBydWxlcy5yZWR1Y2UoZnVuY3Rpb24gKHByZXZpb3VzLCBydWxlKSB7XG4gICAgICAgIHJldHVybiBwcmV2aW91cyA9PT0gYm9vbGJhc2VfMS5kZWZhdWx0LmZhbHNlRnVuY1xuICAgICAgICAgICAgPyBib29sYmFzZV8xLmRlZmF1bHQuZmFsc2VGdW5jXG4gICAgICAgICAgICA6ICgwLCBnZW5lcmFsX2pzXzEuY29tcGlsZUdlbmVyYWxTZWxlY3RvcikocHJldmlvdXMsIHJ1bGUsIG9wdGlvbnMsIGNvbnRleHQsIGNvbXBpbGVUb2tlbik7XG4gICAgfSwgKF9hID0gb3B0aW9ucy5yb290RnVuYykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogYm9vbGJhc2VfMS5kZWZhdWx0LnRydWVGdW5jKTtcbn1cbmZ1bmN0aW9uIHJlZHVjZVJ1bGVzKGEsIGIpIHtcbiAgICBpZiAoYiA9PT0gYm9vbGJhc2VfMS5kZWZhdWx0LmZhbHNlRnVuYyB8fCBhID09PSBib29sYmFzZV8xLmRlZmF1bHQudHJ1ZUZ1bmMpIHtcbiAgICAgICAgcmV0dXJuIGE7XG4gICAgfVxuICAgIGlmIChhID09PSBib29sYmFzZV8xLmRlZmF1bHQuZmFsc2VGdW5jIHx8IGIgPT09IGJvb2xiYXNlXzEuZGVmYXVsdC50cnVlRnVuYykge1xuICAgICAgICByZXR1cm4gYjtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGNvbWJpbmUoZWxlbSkge1xuICAgICAgICByZXR1cm4gYShlbGVtKSB8fCBiKGVsZW0pO1xuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21waWxlLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jb21waWxlR2VuZXJhbFNlbGVjdG9yID0gdm9pZCAwO1xudmFyIGF0dHJpYnV0ZXNfanNfMSA9IHJlcXVpcmUoXCIuL2F0dHJpYnV0ZXMuanNcIik7XG52YXIgaW5kZXhfanNfMSA9IHJlcXVpcmUoXCIuL3BzZXVkby1zZWxlY3RvcnMvaW5kZXguanNcIik7XG52YXIgY3NzX3doYXRfMSA9IHJlcXVpcmUoXCJjc3Mtd2hhdFwiKTtcbmZ1bmN0aW9uIGdldEVsZW1lbnRQYXJlbnQobm9kZSwgYWRhcHRlcikge1xuICAgIHZhciBwYXJlbnQgPSBhZGFwdGVyLmdldFBhcmVudChub2RlKTtcbiAgICBpZiAocGFyZW50ICYmIGFkYXB0ZXIuaXNUYWcocGFyZW50KSkge1xuICAgICAgICByZXR1cm4gcGFyZW50O1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cbi8qXG4gKiBBbGwgYXZhaWxhYmxlIHJ1bGVzXG4gKi9cbmZ1bmN0aW9uIGNvbXBpbGVHZW5lcmFsU2VsZWN0b3IobmV4dCwgc2VsZWN0b3IsIG9wdGlvbnMsIGNvbnRleHQsIGNvbXBpbGVUb2tlbikge1xuICAgIHZhciBhZGFwdGVyID0gb3B0aW9ucy5hZGFwdGVyLCBlcXVhbHMgPSBvcHRpb25zLmVxdWFscztcbiAgICBzd2l0Y2ggKHNlbGVjdG9yLnR5cGUpIHtcbiAgICAgICAgY2FzZSBjc3Nfd2hhdF8xLlNlbGVjdG9yVHlwZS5Qc2V1ZG9FbGVtZW50OiB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJQc2V1ZG8tZWxlbWVudHMgYXJlIG5vdCBzdXBwb3J0ZWQgYnkgY3NzLXNlbGVjdFwiKTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIGNzc193aGF0XzEuU2VsZWN0b3JUeXBlLkNvbHVtbkNvbWJpbmF0b3I6IHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvbHVtbiBjb21iaW5hdG9ycyBhcmUgbm90IHlldCBzdXBwb3J0ZWQgYnkgY3NzLXNlbGVjdFwiKTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIGNzc193aGF0XzEuU2VsZWN0b3JUeXBlLkF0dHJpYnV0ZToge1xuICAgICAgICAgICAgaWYgKHNlbGVjdG9yLm5hbWVzcGFjZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTmFtZXNwYWNlZCBhdHRyaWJ1dGVzIGFyZSBub3QgeWV0IHN1cHBvcnRlZCBieSBjc3Mtc2VsZWN0XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFvcHRpb25zLnhtbE1vZGUgfHwgb3B0aW9ucy5sb3dlckNhc2VBdHRyaWJ1dGVOYW1lcykge1xuICAgICAgICAgICAgICAgIHNlbGVjdG9yLm5hbWUgPSBzZWxlY3Rvci5uYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYXR0cmlidXRlc19qc18xLmF0dHJpYnV0ZVJ1bGVzW3NlbGVjdG9yLmFjdGlvbl0obmV4dCwgc2VsZWN0b3IsIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgY3NzX3doYXRfMS5TZWxlY3RvclR5cGUuUHNldWRvOiB7XG4gICAgICAgICAgICByZXR1cm4gKDAsIGluZGV4X2pzXzEuY29tcGlsZVBzZXVkb1NlbGVjdG9yKShuZXh0LCBzZWxlY3Rvciwgb3B0aW9ucywgY29udGV4dCwgY29tcGlsZVRva2VuKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBUYWdzXG4gICAgICAgIGNhc2UgY3NzX3doYXRfMS5TZWxlY3RvclR5cGUuVGFnOiB7XG4gICAgICAgICAgICBpZiAoc2VsZWN0b3IubmFtZXNwYWNlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJOYW1lc3BhY2VkIHRhZyBuYW1lcyBhcmUgbm90IHlldCBzdXBwb3J0ZWQgYnkgY3NzLXNlbGVjdFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBuYW1lXzEgPSBzZWxlY3Rvci5uYW1lO1xuICAgICAgICAgICAgaWYgKCFvcHRpb25zLnhtbE1vZGUgfHwgb3B0aW9ucy5sb3dlckNhc2VUYWdzKSB7XG4gICAgICAgICAgICAgICAgbmFtZV8xID0gbmFtZV8xLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gdGFnKGVsZW0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYWRhcHRlci5nZXROYW1lKGVsZW0pID09PSBuYW1lXzEgJiYgbmV4dChlbGVtKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgLy8gVHJhdmVyc2FsXG4gICAgICAgIGNhc2UgY3NzX3doYXRfMS5TZWxlY3RvclR5cGUuRGVzY2VuZGFudDoge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuY2FjaGVSZXN1bHRzID09PSBmYWxzZSB8fFxuICAgICAgICAgICAgICAgIHR5cGVvZiBXZWFrU2V0ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGRlc2NlbmRhbnQoZWxlbSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY3VycmVudCA9IGVsZW07XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlICgoY3VycmVudCA9IGdldEVsZW1lbnRQYXJlbnQoY3VycmVudCwgYWRhcHRlcikpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobmV4dChjdXJyZW50KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBgRWxlbWVudE5vZGVgIGlzIG5vdCBleHRlbmRpbmcgb2JqZWN0XG4gICAgICAgICAgICB2YXIgaXNGYWxzZUNhY2hlXzEgPSBuZXcgV2Vha1NldCgpO1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGNhY2hlZERlc2NlbmRhbnQoZWxlbSkge1xuICAgICAgICAgICAgICAgIHZhciBjdXJyZW50ID0gZWxlbTtcbiAgICAgICAgICAgICAgICB3aGlsZSAoKGN1cnJlbnQgPSBnZXRFbGVtZW50UGFyZW50KGN1cnJlbnQsIGFkYXB0ZXIpKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzRmFsc2VDYWNoZV8xLmhhcyhjdXJyZW50KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFkYXB0ZXIuaXNUYWcoY3VycmVudCkgJiYgbmV4dChjdXJyZW50KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaXNGYWxzZUNhY2hlXzEuYWRkKGN1cnJlbnQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcIl9mbGV4aWJsZURlc2NlbmRhbnRcIjoge1xuICAgICAgICAgICAgLy8gSW5jbHVkZSBlbGVtZW50IGl0c2VsZiwgb25seSB1c2VkIHdoaWxlIHF1ZXJ5aW5nIGFuIGFycmF5XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gZmxleGlibGVEZXNjZW5kYW50KGVsZW0pIHtcbiAgICAgICAgICAgICAgICB2YXIgY3VycmVudCA9IGVsZW07XG4gICAgICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgICAgICBpZiAobmV4dChjdXJyZW50KSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH0gd2hpbGUgKChjdXJyZW50ID0gZ2V0RWxlbWVudFBhcmVudChjdXJyZW50LCBhZGFwdGVyKSkpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBjc3Nfd2hhdF8xLlNlbGVjdG9yVHlwZS5QYXJlbnQ6IHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiBwYXJlbnQoZWxlbSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhZGFwdGVyXG4gICAgICAgICAgICAgICAgICAgIC5nZXRDaGlsZHJlbihlbGVtKVxuICAgICAgICAgICAgICAgICAgICAuc29tZShmdW5jdGlvbiAoZWxlbSkgeyByZXR1cm4gYWRhcHRlci5pc1RhZyhlbGVtKSAmJiBuZXh0KGVsZW0pOyB9KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBjc3Nfd2hhdF8xLlNlbGVjdG9yVHlwZS5DaGlsZDoge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGNoaWxkKGVsZW0pIHtcbiAgICAgICAgICAgICAgICB2YXIgcGFyZW50ID0gYWRhcHRlci5nZXRQYXJlbnQoZWxlbSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhcmVudCAhPSBudWxsICYmIGFkYXB0ZXIuaXNUYWcocGFyZW50KSAmJiBuZXh0KHBhcmVudCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgY3NzX3doYXRfMS5TZWxlY3RvclR5cGUuU2libGluZzoge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIHNpYmxpbmcoZWxlbSkge1xuICAgICAgICAgICAgICAgIHZhciBzaWJsaW5ncyA9IGFkYXB0ZXIuZ2V0U2libGluZ3MoZWxlbSk7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaWJsaW5ncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY3VycmVudFNpYmxpbmcgPSBzaWJsaW5nc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVxdWFscyhlbGVtLCBjdXJyZW50U2libGluZykpXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFkYXB0ZXIuaXNUYWcoY3VycmVudFNpYmxpbmcpICYmIG5leHQoY3VycmVudFNpYmxpbmcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgY3NzX3doYXRfMS5TZWxlY3RvclR5cGUuQWRqYWNlbnQ6IHtcbiAgICAgICAgICAgIGlmIChhZGFwdGVyLnByZXZFbGVtZW50U2libGluZykge1xuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiBhZGphY2VudChlbGVtKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwcmV2aW91cyA9IGFkYXB0ZXIucHJldkVsZW1lbnRTaWJsaW5nKGVsZW0pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJldmlvdXMgIT0gbnVsbCAmJiBuZXh0KHByZXZpb3VzKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGFkamFjZW50KGVsZW0pIHtcbiAgICAgICAgICAgICAgICB2YXIgc2libGluZ3MgPSBhZGFwdGVyLmdldFNpYmxpbmdzKGVsZW0pO1xuICAgICAgICAgICAgICAgIHZhciBsYXN0RWxlbWVudDtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNpYmxpbmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjdXJyZW50U2libGluZyA9IHNpYmxpbmdzW2ldO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXF1YWxzKGVsZW0sIGN1cnJlbnRTaWJsaW5nKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYWRhcHRlci5pc1RhZyhjdXJyZW50U2libGluZykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RFbGVtZW50ID0gY3VycmVudFNpYmxpbmc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuICEhbGFzdEVsZW1lbnQgJiYgbmV4dChsYXN0RWxlbWVudCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgY3NzX3doYXRfMS5TZWxlY3RvclR5cGUuVW5pdmVyc2FsOiB7XG4gICAgICAgICAgICBpZiAoc2VsZWN0b3IubmFtZXNwYWNlICE9IG51bGwgJiYgc2VsZWN0b3IubmFtZXNwYWNlICE9PSBcIipcIikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5hbWVzcGFjZWQgdW5pdmVyc2FsIHNlbGVjdG9ycyBhcmUgbm90IHlldCBzdXBwb3J0ZWQgYnkgY3NzLXNlbGVjdFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5jb21waWxlR2VuZXJhbFNlbGVjdG9yID0gY29tcGlsZUdlbmVyYWxTZWxlY3Rvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdlbmVyYWwuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19zZXRNb2R1bGVEZWZhdWx0KSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCB2KSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xufSkgOiBmdW5jdGlvbihvLCB2KSB7XG4gICAgb1tcImRlZmF1bHRcIl0gPSB2O1xufSk7XG52YXIgX19pbXBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydFN0YXIpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoayAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwgayk7XG4gICAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufTtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuYWxpYXNlcyA9IGV4cG9ydHMucHNldWRvcyA9IGV4cG9ydHMuZmlsdGVycyA9IGV4cG9ydHMuaXMgPSBleHBvcnRzLnNlbGVjdE9uZSA9IGV4cG9ydHMuc2VsZWN0QWxsID0gZXhwb3J0cy5wcmVwYXJlQ29udGV4dCA9IGV4cG9ydHMuX2NvbXBpbGVUb2tlbiA9IGV4cG9ydHMuX2NvbXBpbGVVbnNhZmUgPSBleHBvcnRzLmNvbXBpbGUgPSB2b2lkIDA7XG52YXIgRG9tVXRpbHMgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcImRvbXV0aWxzXCIpKTtcbnZhciBib29sYmFzZV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJib29sYmFzZVwiKSk7XG52YXIgY29tcGlsZV9qc18xID0gcmVxdWlyZShcIi4vY29tcGlsZS5qc1wiKTtcbnZhciBzdWJzZWxlY3RzX2pzXzEgPSByZXF1aXJlKFwiLi9wc2V1ZG8tc2VsZWN0b3JzL3N1YnNlbGVjdHMuanNcIik7XG52YXIgZGVmYXVsdEVxdWFscyA9IGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBhID09PSBiOyB9O1xudmFyIGRlZmF1bHRPcHRpb25zID0ge1xuICAgIGFkYXB0ZXI6IERvbVV0aWxzLFxuICAgIGVxdWFsczogZGVmYXVsdEVxdWFscyxcbn07XG5mdW5jdGlvbiBjb252ZXJ0T3B0aW9uRm9ybWF0cyhvcHRpb25zKSB7XG4gICAgdmFyIF9hLCBfYiwgX2MsIF9kO1xuICAgIC8qXG4gICAgICogV2UgZm9yY2Ugb25lIGZvcm1hdCBvZiBvcHRpb25zIHRvIHRoZSBvdGhlciBvbmUuXG4gICAgICovXG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvciBEZWZhdWx0IG9wdGlvbnMgbWF5IGhhdmUgaW5jb21wYXRpYmxlIGBOb2RlYCAvIGBFbGVtZW50Tm9kZWAuXG4gICAgdmFyIG9wdHMgPSBvcHRpb25zICE9PSBudWxsICYmIG9wdGlvbnMgIT09IHZvaWQgMCA/IG9wdGlvbnMgOiBkZWZhdWx0T3B0aW9ucztcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yIFNhbWUgYXMgYWJvdmUuXG4gICAgKF9hID0gb3B0cy5hZGFwdGVyKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAob3B0cy5hZGFwdGVyID0gRG9tVXRpbHMpO1xuICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgYGVxdWFsc2AgZG9lcyBub3QgZXhpc3Qgb24gYE9wdGlvbnNgXG4gICAgKF9iID0gb3B0cy5lcXVhbHMpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IChvcHRzLmVxdWFscyA9IChfZCA9IChfYyA9IG9wdHMuYWRhcHRlcikgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLmVxdWFscykgIT09IG51bGwgJiYgX2QgIT09IHZvaWQgMCA/IF9kIDogZGVmYXVsdEVxdWFscyk7XG4gICAgcmV0dXJuIG9wdHM7XG59XG5mdW5jdGlvbiB3cmFwQ29tcGlsZShmdW5jKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGFkZEFkYXB0ZXIoc2VsZWN0b3IsIG9wdGlvbnMsIGNvbnRleHQpIHtcbiAgICAgICAgdmFyIG9wdHMgPSBjb252ZXJ0T3B0aW9uRm9ybWF0cyhvcHRpb25zKTtcbiAgICAgICAgcmV0dXJuIGZ1bmMoc2VsZWN0b3IsIG9wdHMsIGNvbnRleHQpO1xuICAgIH07XG59XG4vKipcbiAqIENvbXBpbGVzIHRoZSBxdWVyeSwgcmV0dXJucyBhIGZ1bmN0aW9uLlxuICovXG5leHBvcnRzLmNvbXBpbGUgPSB3cmFwQ29tcGlsZShjb21waWxlX2pzXzEuY29tcGlsZSk7XG5leHBvcnRzLl9jb21waWxlVW5zYWZlID0gd3JhcENvbXBpbGUoY29tcGlsZV9qc18xLmNvbXBpbGVVbnNhZmUpO1xuZXhwb3J0cy5fY29tcGlsZVRva2VuID0gd3JhcENvbXBpbGUoY29tcGlsZV9qc18xLmNvbXBpbGVUb2tlbik7XG5mdW5jdGlvbiBnZXRTZWxlY3RvckZ1bmMoc2VhcmNoRnVuYykge1xuICAgIHJldHVybiBmdW5jdGlvbiBzZWxlY3QocXVlcnksIGVsZW1lbnRzLCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBvcHRzID0gY29udmVydE9wdGlvbkZvcm1hdHMob3B0aW9ucyk7XG4gICAgICAgIGlmICh0eXBlb2YgcXVlcnkgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgcXVlcnkgPSAoMCwgY29tcGlsZV9qc18xLmNvbXBpbGVVbnNhZmUpKHF1ZXJ5LCBvcHRzLCBlbGVtZW50cyk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGZpbHRlcmVkRWxlbWVudHMgPSBwcmVwYXJlQ29udGV4dChlbGVtZW50cywgb3B0cy5hZGFwdGVyLCBxdWVyeS5zaG91bGRUZXN0TmV4dFNpYmxpbmdzKTtcbiAgICAgICAgcmV0dXJuIHNlYXJjaEZ1bmMocXVlcnksIGZpbHRlcmVkRWxlbWVudHMsIG9wdHMpO1xuICAgIH07XG59XG5mdW5jdGlvbiBwcmVwYXJlQ29udGV4dChlbGVtcywgYWRhcHRlciwgc2hvdWxkVGVzdE5leHRTaWJsaW5ncykge1xuICAgIGlmIChzaG91bGRUZXN0TmV4dFNpYmxpbmdzID09PSB2b2lkIDApIHsgc2hvdWxkVGVzdE5leHRTaWJsaW5ncyA9IGZhbHNlOyB9XG4gICAgLypcbiAgICAgKiBBZGQgc2libGluZ3MgaWYgdGhlIHF1ZXJ5IHJlcXVpcmVzIHRoZW0uXG4gICAgICogU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYjU1L2Nzcy1zZWxlY3QvcHVsbC80MyNpc3N1ZWNvbW1lbnQtMjI1NDE0NjkyXG4gICAgICovXG4gICAgaWYgKHNob3VsZFRlc3ROZXh0U2libGluZ3MpIHtcbiAgICAgICAgZWxlbXMgPSBhcHBlbmROZXh0U2libGluZ3MoZWxlbXMsIGFkYXB0ZXIpO1xuICAgIH1cbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheShlbGVtcylcbiAgICAgICAgPyBhZGFwdGVyLnJlbW92ZVN1YnNldHMoZWxlbXMpXG4gICAgICAgIDogYWRhcHRlci5nZXRDaGlsZHJlbihlbGVtcyk7XG59XG5leHBvcnRzLnByZXBhcmVDb250ZXh0ID0gcHJlcGFyZUNvbnRleHQ7XG5mdW5jdGlvbiBhcHBlbmROZXh0U2libGluZ3MoZWxlbSwgYWRhcHRlcikge1xuICAgIC8vIE9yZGVyIG1hdHRlcnMgYmVjYXVzZSBqUXVlcnkgc2VlbXMgdG8gY2hlY2sgdGhlIGNoaWxkcmVuIGJlZm9yZSB0aGUgc2libGluZ3NcbiAgICB2YXIgZWxlbXMgPSBBcnJheS5pc0FycmF5KGVsZW0pID8gZWxlbS5zbGljZSgwKSA6IFtlbGVtXTtcbiAgICB2YXIgZWxlbXNMZW5ndGggPSBlbGVtcy5sZW5ndGg7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbGVtc0xlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBuZXh0U2libGluZ3MgPSAoMCwgc3Vic2VsZWN0c19qc18xLmdldE5leHRTaWJsaW5ncykoZWxlbXNbaV0sIGFkYXB0ZXIpO1xuICAgICAgICBlbGVtcy5wdXNoLmFwcGx5KGVsZW1zLCBuZXh0U2libGluZ3MpO1xuICAgIH1cbiAgICByZXR1cm4gZWxlbXM7XG59XG4vKipcbiAqIEB0ZW1wbGF0ZSBOb2RlIFRoZSBnZW5lcmljIE5vZGUgdHlwZSBmb3IgdGhlIERPTSBhZGFwdGVyIGJlaW5nIHVzZWQuXG4gKiBAdGVtcGxhdGUgRWxlbWVudE5vZGUgVGhlIE5vZGUgdHlwZSBmb3IgZWxlbWVudHMgZm9yIHRoZSBET00gYWRhcHRlciBiZWluZyB1c2VkLlxuICogQHBhcmFtIGVsZW1zIEVsZW1lbnRzIHRvIHF1ZXJ5LiBJZiBpdCBpcyBhbiBlbGVtZW50LCBpdHMgY2hpbGRyZW4gd2lsbCBiZSBxdWVyaWVkLi5cbiAqIEBwYXJhbSBxdWVyeSBjYW4gYmUgZWl0aGVyIGEgQ1NTIHNlbGVjdG9yIHN0cmluZyBvciBhIGNvbXBpbGVkIHF1ZXJ5IGZ1bmN0aW9uLlxuICogQHBhcmFtIFtvcHRpb25zXSBvcHRpb25zIGZvciBxdWVyeWluZyB0aGUgZG9jdW1lbnQuXG4gKiBAc2VlIGNvbXBpbGUgZm9yIHN1cHBvcnRlZCBzZWxlY3RvciBxdWVyaWVzLlxuICogQHJldHVybnMgQWxsIG1hdGNoaW5nIGVsZW1lbnRzLlxuICpcbiAqL1xuZXhwb3J0cy5zZWxlY3RBbGwgPSBnZXRTZWxlY3RvckZ1bmMoZnVuY3Rpb24gKHF1ZXJ5LCBlbGVtcywgb3B0aW9ucykge1xuICAgIHJldHVybiBxdWVyeSA9PT0gYm9vbGJhc2VfMS5kZWZhdWx0LmZhbHNlRnVuYyB8fCAhZWxlbXMgfHwgZWxlbXMubGVuZ3RoID09PSAwXG4gICAgICAgID8gW11cbiAgICAgICAgOiBvcHRpb25zLmFkYXB0ZXIuZmluZEFsbChxdWVyeSwgZWxlbXMpO1xufSk7XG4vKipcbiAqIEB0ZW1wbGF0ZSBOb2RlIFRoZSBnZW5lcmljIE5vZGUgdHlwZSBmb3IgdGhlIERPTSBhZGFwdGVyIGJlaW5nIHVzZWQuXG4gKiBAdGVtcGxhdGUgRWxlbWVudE5vZGUgVGhlIE5vZGUgdHlwZSBmb3IgZWxlbWVudHMgZm9yIHRoZSBET00gYWRhcHRlciBiZWluZyB1c2VkLlxuICogQHBhcmFtIGVsZW1zIEVsZW1lbnRzIHRvIHF1ZXJ5LiBJZiBpdCBpcyBhbiBlbGVtZW50LCBpdHMgY2hpbGRyZW4gd2lsbCBiZSBxdWVyaWVkLi5cbiAqIEBwYXJhbSBxdWVyeSBjYW4gYmUgZWl0aGVyIGEgQ1NTIHNlbGVjdG9yIHN0cmluZyBvciBhIGNvbXBpbGVkIHF1ZXJ5IGZ1bmN0aW9uLlxuICogQHBhcmFtIFtvcHRpb25zXSBvcHRpb25zIGZvciBxdWVyeWluZyB0aGUgZG9jdW1lbnQuXG4gKiBAc2VlIGNvbXBpbGUgZm9yIHN1cHBvcnRlZCBzZWxlY3RvciBxdWVyaWVzLlxuICogQHJldHVybnMgdGhlIGZpcnN0IG1hdGNoLCBvciBudWxsIGlmIHRoZXJlIHdhcyBubyBtYXRjaC5cbiAqL1xuZXhwb3J0cy5zZWxlY3RPbmUgPSBnZXRTZWxlY3RvckZ1bmMoZnVuY3Rpb24gKHF1ZXJ5LCBlbGVtcywgb3B0aW9ucykge1xuICAgIHJldHVybiBxdWVyeSA9PT0gYm9vbGJhc2VfMS5kZWZhdWx0LmZhbHNlRnVuYyB8fCAhZWxlbXMgfHwgZWxlbXMubGVuZ3RoID09PSAwXG4gICAgICAgID8gbnVsbFxuICAgICAgICA6IG9wdGlvbnMuYWRhcHRlci5maW5kT25lKHF1ZXJ5LCBlbGVtcyk7XG59KTtcbi8qKlxuICogVGVzdHMgd2hldGhlciBvciBub3QgYW4gZWxlbWVudCBpcyBtYXRjaGVkIGJ5IHF1ZXJ5LlxuICpcbiAqIEB0ZW1wbGF0ZSBOb2RlIFRoZSBnZW5lcmljIE5vZGUgdHlwZSBmb3IgdGhlIERPTSBhZGFwdGVyIGJlaW5nIHVzZWQuXG4gKiBAdGVtcGxhdGUgRWxlbWVudE5vZGUgVGhlIE5vZGUgdHlwZSBmb3IgZWxlbWVudHMgZm9yIHRoZSBET00gYWRhcHRlciBiZWluZyB1c2VkLlxuICogQHBhcmFtIGVsZW0gVGhlIGVsZW1lbnQgdG8gdGVzdCBpZiBpdCBtYXRjaGVzIHRoZSBxdWVyeS5cbiAqIEBwYXJhbSBxdWVyeSBjYW4gYmUgZWl0aGVyIGEgQ1NTIHNlbGVjdG9yIHN0cmluZyBvciBhIGNvbXBpbGVkIHF1ZXJ5IGZ1bmN0aW9uLlxuICogQHBhcmFtIFtvcHRpb25zXSBvcHRpb25zIGZvciBxdWVyeWluZyB0aGUgZG9jdW1lbnQuXG4gKiBAc2VlIGNvbXBpbGUgZm9yIHN1cHBvcnRlZCBzZWxlY3RvciBxdWVyaWVzLlxuICogQHJldHVybnNcbiAqL1xuZnVuY3Rpb24gaXMoZWxlbSwgcXVlcnksIG9wdGlvbnMpIHtcbiAgICB2YXIgb3B0cyA9IGNvbnZlcnRPcHRpb25Gb3JtYXRzKG9wdGlvbnMpO1xuICAgIHJldHVybiAodHlwZW9mIHF1ZXJ5ID09PSBcImZ1bmN0aW9uXCIgPyBxdWVyeSA6ICgwLCBjb21waWxlX2pzXzEuY29tcGlsZSkocXVlcnksIG9wdHMpKShlbGVtKTtcbn1cbmV4cG9ydHMuaXMgPSBpcztcbi8qKlxuICogQWxpYXMgZm9yIHNlbGVjdEFsbChxdWVyeSwgZWxlbXMsIG9wdGlvbnMpLlxuICogQHNlZSBbY29tcGlsZV0gZm9yIHN1cHBvcnRlZCBzZWxlY3RvciBxdWVyaWVzLlxuICovXG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLnNlbGVjdEFsbDtcbi8vIEV4cG9ydCBmaWx0ZXJzLCBwc2V1ZG9zIGFuZCBhbGlhc2VzIHRvIGFsbG93IHVzZXJzIHRvIHN1cHBseSB0aGVpciBvd24uXG4vKiogQGRlcHJlY2F0ZWQgVXNlIHRoZSBgcHNldWRvc2Agb3B0aW9uIGluc3RlYWQuICovXG52YXIgaW5kZXhfanNfMSA9IHJlcXVpcmUoXCIuL3BzZXVkby1zZWxlY3RvcnMvaW5kZXguanNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJmaWx0ZXJzXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBpbmRleF9qc18xLmZpbHRlcnM7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJwc2V1ZG9zXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBpbmRleF9qc18xLnBzZXVkb3M7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJhbGlhc2VzXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBpbmRleF9qc18xLmFsaWFzZXM7IH0gfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuYWxpYXNlcyA9IHZvaWQgMDtcbi8qKlxuICogQWxpYXNlcyBhcmUgcHNldWRvcyB0aGF0IGFyZSBleHByZXNzZWQgYXMgc2VsZWN0b3JzLlxuICovXG5leHBvcnRzLmFsaWFzZXMgPSB7XG4gICAgLy8gTGlua3NcbiAgICBcImFueS1saW5rXCI6IFwiOmlzKGEsIGFyZWEsIGxpbmspW2hyZWZdXCIsXG4gICAgbGluazogXCI6YW55LWxpbms6bm90KDp2aXNpdGVkKVwiLFxuICAgIC8vIEZvcm1zXG4gICAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc2NyaXB0aW5nLmh0bWwjZGlzYWJsZWQtZWxlbWVudHNcbiAgICBkaXNhYmxlZDogXCI6aXMoXFxuICAgICAgICA6aXMoYnV0dG9uLCBpbnB1dCwgc2VsZWN0LCB0ZXh0YXJlYSwgb3B0Z3JvdXAsIG9wdGlvbilbZGlzYWJsZWRdLFxcbiAgICAgICAgb3B0Z3JvdXBbZGlzYWJsZWRdID4gb3B0aW9uLFxcbiAgICAgICAgZmllbGRzZXRbZGlzYWJsZWRdOm5vdChmaWVsZHNldFtkaXNhYmxlZF0gbGVnZW5kOmZpcnN0LW9mLXR5cGUgKilcXG4gICAgKVwiLFxuICAgIGVuYWJsZWQ6IFwiOm5vdCg6ZGlzYWJsZWQpXCIsXG4gICAgY2hlY2tlZDogXCI6aXMoOmlzKGlucHV0W3R5cGU9cmFkaW9dLCBpbnB1dFt0eXBlPWNoZWNrYm94XSlbY2hlY2tlZF0sIG9wdGlvbjpzZWxlY3RlZClcIixcbiAgICByZXF1aXJlZDogXCI6aXMoaW5wdXQsIHNlbGVjdCwgdGV4dGFyZWEpW3JlcXVpcmVkXVwiLFxuICAgIG9wdGlvbmFsOiBcIjppcyhpbnB1dCwgc2VsZWN0LCB0ZXh0YXJlYSk6bm90KFtyZXF1aXJlZF0pXCIsXG4gICAgLy8gSlF1ZXJ5IGV4dGVuc2lvbnNcbiAgICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3JtLWVsZW1lbnRzLmh0bWwjY29uY2VwdC1vcHRpb24tc2VsZWN0ZWRuZXNzXG4gICAgc2VsZWN0ZWQ6IFwib3B0aW9uOmlzKFtzZWxlY3RlZF0sIHNlbGVjdDpub3QoW211bHRpcGxlXSk6bm90KDpoYXMoPiBvcHRpb25bc2VsZWN0ZWRdKSkgPiA6Zmlyc3Qtb2YtdHlwZSlcIixcbiAgICBjaGVja2JveDogXCJbdHlwZT1jaGVja2JveF1cIixcbiAgICBmaWxlOiBcIlt0eXBlPWZpbGVdXCIsXG4gICAgcGFzc3dvcmQ6IFwiW3R5cGU9cGFzc3dvcmRdXCIsXG4gICAgcmFkaW86IFwiW3R5cGU9cmFkaW9dXCIsXG4gICAgcmVzZXQ6IFwiW3R5cGU9cmVzZXRdXCIsXG4gICAgaW1hZ2U6IFwiW3R5cGU9aW1hZ2VdXCIsXG4gICAgc3VibWl0OiBcIlt0eXBlPXN1Ym1pdF1cIixcbiAgICBwYXJlbnQ6IFwiOm5vdCg6ZW1wdHkpXCIsXG4gICAgaGVhZGVyOiBcIjppcyhoMSwgaDIsIGgzLCBoNCwgaDUsIGg2KVwiLFxuICAgIGJ1dHRvbjogXCI6aXMoYnV0dG9uLCBpbnB1dFt0eXBlPWJ1dHRvbl0pXCIsXG4gICAgaW5wdXQ6IFwiOmlzKGlucHV0LCB0ZXh0YXJlYSwgc2VsZWN0LCBidXR0b24pXCIsXG4gICAgdGV4dDogXCJpbnB1dDppcyg6bm90KFt0eXBlIT0nJ10pLCBbdHlwZT10ZXh0XSlcIixcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hbGlhc2VzLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5maWx0ZXJzID0gdm9pZCAwO1xudmFyIG50aF9jaGVja18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJudGgtY2hlY2tcIikpO1xudmFyIGJvb2xiYXNlXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImJvb2xiYXNlXCIpKTtcbmZ1bmN0aW9uIGdldENoaWxkRnVuYyhuZXh0LCBhZGFwdGVyKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChlbGVtKSB7XG4gICAgICAgIHZhciBwYXJlbnQgPSBhZGFwdGVyLmdldFBhcmVudChlbGVtKTtcbiAgICAgICAgcmV0dXJuIHBhcmVudCAhPSBudWxsICYmIGFkYXB0ZXIuaXNUYWcocGFyZW50KSAmJiBuZXh0KGVsZW0pO1xuICAgIH07XG59XG5leHBvcnRzLmZpbHRlcnMgPSB7XG4gICAgY29udGFpbnM6IGZ1bmN0aW9uIChuZXh0LCB0ZXh0LCBfYSkge1xuICAgICAgICB2YXIgYWRhcHRlciA9IF9hLmFkYXB0ZXI7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBjb250YWlucyhlbGVtKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV4dChlbGVtKSAmJiBhZGFwdGVyLmdldFRleHQoZWxlbSkuaW5jbHVkZXModGV4dCk7XG4gICAgICAgIH07XG4gICAgfSxcbiAgICBpY29udGFpbnM6IGZ1bmN0aW9uIChuZXh0LCB0ZXh0LCBfYSkge1xuICAgICAgICB2YXIgYWRhcHRlciA9IF9hLmFkYXB0ZXI7XG4gICAgICAgIHZhciBpdGV4dCA9IHRleHQudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGljb250YWlucyhlbGVtKSB7XG4gICAgICAgICAgICByZXR1cm4gKG5leHQoZWxlbSkgJiZcbiAgICAgICAgICAgICAgICBhZGFwdGVyLmdldFRleHQoZWxlbSkudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhpdGV4dCkpO1xuICAgICAgICB9O1xuICAgIH0sXG4gICAgLy8gTG9jYXRpb24gc3BlY2lmaWMgbWV0aG9kc1xuICAgIFwibnRoLWNoaWxkXCI6IGZ1bmN0aW9uIChuZXh0LCBydWxlLCBfYSkge1xuICAgICAgICB2YXIgYWRhcHRlciA9IF9hLmFkYXB0ZXIsIGVxdWFscyA9IF9hLmVxdWFscztcbiAgICAgICAgdmFyIGZ1bmMgPSAoMCwgbnRoX2NoZWNrXzEuZGVmYXVsdCkocnVsZSk7XG4gICAgICAgIGlmIChmdW5jID09PSBib29sYmFzZV8xLmRlZmF1bHQuZmFsc2VGdW5jKVxuICAgICAgICAgICAgcmV0dXJuIGJvb2xiYXNlXzEuZGVmYXVsdC5mYWxzZUZ1bmM7XG4gICAgICAgIGlmIChmdW5jID09PSBib29sYmFzZV8xLmRlZmF1bHQudHJ1ZUZ1bmMpXG4gICAgICAgICAgICByZXR1cm4gZ2V0Q2hpbGRGdW5jKG5leHQsIGFkYXB0ZXIpO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gbnRoQ2hpbGQoZWxlbSkge1xuICAgICAgICAgICAgdmFyIHNpYmxpbmdzID0gYWRhcHRlci5nZXRTaWJsaW5ncyhlbGVtKTtcbiAgICAgICAgICAgIHZhciBwb3MgPSAwO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaWJsaW5ncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChlcXVhbHMoZWxlbSwgc2libGluZ3NbaV0pKVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBpZiAoYWRhcHRlci5pc1RhZyhzaWJsaW5nc1tpXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcG9zKys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZ1bmMocG9zKSAmJiBuZXh0KGVsZW0pO1xuICAgICAgICB9O1xuICAgIH0sXG4gICAgXCJudGgtbGFzdC1jaGlsZFwiOiBmdW5jdGlvbiAobmV4dCwgcnVsZSwgX2EpIHtcbiAgICAgICAgdmFyIGFkYXB0ZXIgPSBfYS5hZGFwdGVyLCBlcXVhbHMgPSBfYS5lcXVhbHM7XG4gICAgICAgIHZhciBmdW5jID0gKDAsIG50aF9jaGVja18xLmRlZmF1bHQpKHJ1bGUpO1xuICAgICAgICBpZiAoZnVuYyA9PT0gYm9vbGJhc2VfMS5kZWZhdWx0LmZhbHNlRnVuYylcbiAgICAgICAgICAgIHJldHVybiBib29sYmFzZV8xLmRlZmF1bHQuZmFsc2VGdW5jO1xuICAgICAgICBpZiAoZnVuYyA9PT0gYm9vbGJhc2VfMS5kZWZhdWx0LnRydWVGdW5jKVxuICAgICAgICAgICAgcmV0dXJuIGdldENoaWxkRnVuYyhuZXh0LCBhZGFwdGVyKTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIG50aExhc3RDaGlsZChlbGVtKSB7XG4gICAgICAgICAgICB2YXIgc2libGluZ3MgPSBhZGFwdGVyLmdldFNpYmxpbmdzKGVsZW0pO1xuICAgICAgICAgICAgdmFyIHBvcyA9IDA7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gc2libGluZ3MubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgICAgICBpZiAoZXF1YWxzKGVsZW0sIHNpYmxpbmdzW2ldKSlcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgaWYgKGFkYXB0ZXIuaXNUYWcoc2libGluZ3NbaV0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHBvcysrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmdW5jKHBvcykgJiYgbmV4dChlbGVtKTtcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIFwibnRoLW9mLXR5cGVcIjogZnVuY3Rpb24gKG5leHQsIHJ1bGUsIF9hKSB7XG4gICAgICAgIHZhciBhZGFwdGVyID0gX2EuYWRhcHRlciwgZXF1YWxzID0gX2EuZXF1YWxzO1xuICAgICAgICB2YXIgZnVuYyA9ICgwLCBudGhfY2hlY2tfMS5kZWZhdWx0KShydWxlKTtcbiAgICAgICAgaWYgKGZ1bmMgPT09IGJvb2xiYXNlXzEuZGVmYXVsdC5mYWxzZUZ1bmMpXG4gICAgICAgICAgICByZXR1cm4gYm9vbGJhc2VfMS5kZWZhdWx0LmZhbHNlRnVuYztcbiAgICAgICAgaWYgKGZ1bmMgPT09IGJvb2xiYXNlXzEuZGVmYXVsdC50cnVlRnVuYylcbiAgICAgICAgICAgIHJldHVybiBnZXRDaGlsZEZ1bmMobmV4dCwgYWRhcHRlcik7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBudGhPZlR5cGUoZWxlbSkge1xuICAgICAgICAgICAgdmFyIHNpYmxpbmdzID0gYWRhcHRlci5nZXRTaWJsaW5ncyhlbGVtKTtcbiAgICAgICAgICAgIHZhciBwb3MgPSAwO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaWJsaW5ncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciBjdXJyZW50U2libGluZyA9IHNpYmxpbmdzW2ldO1xuICAgICAgICAgICAgICAgIGlmIChlcXVhbHMoZWxlbSwgY3VycmVudFNpYmxpbmcpKVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBpZiAoYWRhcHRlci5pc1RhZyhjdXJyZW50U2libGluZykgJiZcbiAgICAgICAgICAgICAgICAgICAgYWRhcHRlci5nZXROYW1lKGN1cnJlbnRTaWJsaW5nKSA9PT0gYWRhcHRlci5nZXROYW1lKGVsZW0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHBvcysrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmdW5jKHBvcykgJiYgbmV4dChlbGVtKTtcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIFwibnRoLWxhc3Qtb2YtdHlwZVwiOiBmdW5jdGlvbiAobmV4dCwgcnVsZSwgX2EpIHtcbiAgICAgICAgdmFyIGFkYXB0ZXIgPSBfYS5hZGFwdGVyLCBlcXVhbHMgPSBfYS5lcXVhbHM7XG4gICAgICAgIHZhciBmdW5jID0gKDAsIG50aF9jaGVja18xLmRlZmF1bHQpKHJ1bGUpO1xuICAgICAgICBpZiAoZnVuYyA9PT0gYm9vbGJhc2VfMS5kZWZhdWx0LmZhbHNlRnVuYylcbiAgICAgICAgICAgIHJldHVybiBib29sYmFzZV8xLmRlZmF1bHQuZmFsc2VGdW5jO1xuICAgICAgICBpZiAoZnVuYyA9PT0gYm9vbGJhc2VfMS5kZWZhdWx0LnRydWVGdW5jKVxuICAgICAgICAgICAgcmV0dXJuIGdldENoaWxkRnVuYyhuZXh0LCBhZGFwdGVyKTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIG50aExhc3RPZlR5cGUoZWxlbSkge1xuICAgICAgICAgICAgdmFyIHNpYmxpbmdzID0gYWRhcHRlci5nZXRTaWJsaW5ncyhlbGVtKTtcbiAgICAgICAgICAgIHZhciBwb3MgPSAwO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IHNpYmxpbmdzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRTaWJsaW5nID0gc2libGluZ3NbaV07XG4gICAgICAgICAgICAgICAgaWYgKGVxdWFscyhlbGVtLCBjdXJyZW50U2libGluZykpXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGlmIChhZGFwdGVyLmlzVGFnKGN1cnJlbnRTaWJsaW5nKSAmJlxuICAgICAgICAgICAgICAgICAgICBhZGFwdGVyLmdldE5hbWUoY3VycmVudFNpYmxpbmcpID09PSBhZGFwdGVyLmdldE5hbWUoZWxlbSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcG9zKys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZ1bmMocG9zKSAmJiBuZXh0KGVsZW0pO1xuICAgICAgICB9O1xuICAgIH0sXG4gICAgLy8gVE9ETyBkZXRlcm1pbmUgdGhlIGFjdHVhbCByb290IGVsZW1lbnRcbiAgICByb290OiBmdW5jdGlvbiAobmV4dCwgX3J1bGUsIF9hKSB7XG4gICAgICAgIHZhciBhZGFwdGVyID0gX2EuYWRhcHRlcjtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChlbGVtKSB7XG4gICAgICAgICAgICB2YXIgcGFyZW50ID0gYWRhcHRlci5nZXRQYXJlbnQoZWxlbSk7XG4gICAgICAgICAgICByZXR1cm4gKHBhcmVudCA9PSBudWxsIHx8ICFhZGFwdGVyLmlzVGFnKHBhcmVudCkpICYmIG5leHQoZWxlbSk7XG4gICAgICAgIH07XG4gICAgfSxcbiAgICBzY29wZTogZnVuY3Rpb24gKG5leHQsIHJ1bGUsIG9wdGlvbnMsIGNvbnRleHQpIHtcbiAgICAgICAgdmFyIGVxdWFscyA9IG9wdGlvbnMuZXF1YWxzO1xuICAgICAgICBpZiAoIWNvbnRleHQgfHwgY29udGV4dC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIC8vIEVxdWl2YWxlbnQgdG8gOnJvb3RcbiAgICAgICAgICAgIHJldHVybiBleHBvcnRzLmZpbHRlcnNbXCJyb290XCJdKG5leHQsIHJ1bGUsIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb250ZXh0Lmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgLy8gTk9URTogY2FuJ3QgYmUgdW5wYWNrZWQsIGFzIDpoYXMgdXNlcyB0aGlzIGZvciBzaWRlLWVmZmVjdHNcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoZWxlbSkgeyByZXR1cm4gZXF1YWxzKGNvbnRleHRbMF0sIGVsZW0pICYmIG5leHQoZWxlbSk7IH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChlbGVtKSB7IHJldHVybiBjb250ZXh0LmluY2x1ZGVzKGVsZW0pICYmIG5leHQoZWxlbSk7IH07XG4gICAgfSxcbiAgICBob3ZlcjogZHluYW1pY1N0YXRlUHNldWRvKFwiaXNIb3ZlcmVkXCIpLFxuICAgIHZpc2l0ZWQ6IGR5bmFtaWNTdGF0ZVBzZXVkbyhcImlzVmlzaXRlZFwiKSxcbiAgICBhY3RpdmU6IGR5bmFtaWNTdGF0ZVBzZXVkbyhcImlzQWN0aXZlXCIpLFxufTtcbi8qKlxuICogRHluYW1pYyBzdGF0ZSBwc2V1ZG9zLiBUaGVzZSBkZXBlbmQgb24gb3B0aW9uYWwgQWRhcHRlciBtZXRob2RzLlxuICpcbiAqIEBwYXJhbSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBhZGFwdGVyIG1ldGhvZCB0byBjYWxsLlxuICogQHJldHVybnMgUHNldWRvIGZvciB0aGUgYGZpbHRlcnNgIG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gZHluYW1pY1N0YXRlUHNldWRvKG5hbWUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gZHluYW1pY1BzZXVkbyhuZXh0LCBfcnVsZSwgX2EpIHtcbiAgICAgICAgdmFyIGFkYXB0ZXIgPSBfYS5hZGFwdGVyO1xuICAgICAgICB2YXIgZnVuYyA9IGFkYXB0ZXJbbmFtZV07XG4gICAgICAgIGlmICh0eXBlb2YgZnVuYyAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICByZXR1cm4gYm9vbGJhc2VfMS5kZWZhdWx0LmZhbHNlRnVuYztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gYWN0aXZlKGVsZW0pIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jKGVsZW0pICYmIG5leHQoZWxlbSk7XG4gICAgICAgIH07XG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZpbHRlcnMuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNvbXBpbGVQc2V1ZG9TZWxlY3RvciA9IGV4cG9ydHMuYWxpYXNlcyA9IGV4cG9ydHMucHNldWRvcyA9IGV4cG9ydHMuZmlsdGVycyA9IHZvaWQgMDtcbnZhciBjc3Nfd2hhdF8xID0gcmVxdWlyZShcImNzcy13aGF0XCIpO1xudmFyIGZpbHRlcnNfanNfMSA9IHJlcXVpcmUoXCIuL2ZpbHRlcnMuanNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJmaWx0ZXJzXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBmaWx0ZXJzX2pzXzEuZmlsdGVyczsgfSB9KTtcbnZhciBwc2V1ZG9zX2pzXzEgPSByZXF1aXJlKFwiLi9wc2V1ZG9zLmpzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwicHNldWRvc1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHNldWRvc19qc18xLnBzZXVkb3M7IH0gfSk7XG52YXIgYWxpYXNlc19qc18xID0gcmVxdWlyZShcIi4vYWxpYXNlcy5qc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImFsaWFzZXNcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFsaWFzZXNfanNfMS5hbGlhc2VzOyB9IH0pO1xudmFyIHN1YnNlbGVjdHNfanNfMSA9IHJlcXVpcmUoXCIuL3N1YnNlbGVjdHMuanNcIik7XG5mdW5jdGlvbiBjb21waWxlUHNldWRvU2VsZWN0b3IobmV4dCwgc2VsZWN0b3IsIG9wdGlvbnMsIGNvbnRleHQsIGNvbXBpbGVUb2tlbikge1xuICAgIHZhciBfYTtcbiAgICB2YXIgbmFtZSA9IHNlbGVjdG9yLm5hbWUsIGRhdGEgPSBzZWxlY3Rvci5kYXRhO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGRhdGEpKSB7XG4gICAgICAgIGlmICghKG5hbWUgaW4gc3Vic2VsZWN0c19qc18xLnN1YnNlbGVjdHMpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIHBzZXVkby1jbGFzcyA6XCIuY29uY2F0KG5hbWUsIFwiKFwiKS5jb25jYXQoZGF0YSwgXCIpXCIpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3Vic2VsZWN0c19qc18xLnN1YnNlbGVjdHNbbmFtZV0obmV4dCwgZGF0YSwgb3B0aW9ucywgY29udGV4dCwgY29tcGlsZVRva2VuKTtcbiAgICB9XG4gICAgdmFyIHVzZXJQc2V1ZG8gPSAoX2EgPSBvcHRpb25zLnBzZXVkb3MpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYVtuYW1lXTtcbiAgICB2YXIgc3RyaW5nUHNldWRvID0gdHlwZW9mIHVzZXJQc2V1ZG8gPT09IFwic3RyaW5nXCIgPyB1c2VyUHNldWRvIDogYWxpYXNlc19qc18xLmFsaWFzZXNbbmFtZV07XG4gICAgaWYgKHR5cGVvZiBzdHJpbmdQc2V1ZG8gPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgaWYgKGRhdGEgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUHNldWRvIFwiLmNvbmNhdChuYW1lLCBcIiBkb2Vzbid0IGhhdmUgYW55IGFyZ3VtZW50c1wiKSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVGhlIGFsaWFzIGhhcyB0byBiZSBwYXJzZWQgaGVyZSwgdG8gbWFrZSBzdXJlIG9wdGlvbnMgYXJlIHJlc3BlY3RlZC5cbiAgICAgICAgdmFyIGFsaWFzID0gKDAsIGNzc193aGF0XzEucGFyc2UpKHN0cmluZ1BzZXVkbyk7XG4gICAgICAgIHJldHVybiBzdWJzZWxlY3RzX2pzXzEuc3Vic2VsZWN0c1tcImlzXCJdKG5leHQsIGFsaWFzLCBvcHRpb25zLCBjb250ZXh0LCBjb21waWxlVG9rZW4pO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHVzZXJQc2V1ZG8gPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAoMCwgcHNldWRvc19qc18xLnZlcmlmeVBzZXVkb0FyZ3MpKHVzZXJQc2V1ZG8sIG5hbWUsIGRhdGEsIDEpO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGVsZW0pIHsgcmV0dXJuIHVzZXJQc2V1ZG8oZWxlbSwgZGF0YSkgJiYgbmV4dChlbGVtKTsgfTtcbiAgICB9XG4gICAgaWYgKG5hbWUgaW4gZmlsdGVyc19qc18xLmZpbHRlcnMpIHtcbiAgICAgICAgcmV0dXJuIGZpbHRlcnNfanNfMS5maWx0ZXJzW25hbWVdKG5leHQsIGRhdGEsIG9wdGlvbnMsIGNvbnRleHQpO1xuICAgIH1cbiAgICBpZiAobmFtZSBpbiBwc2V1ZG9zX2pzXzEucHNldWRvcykge1xuICAgICAgICB2YXIgcHNldWRvXzEgPSBwc2V1ZG9zX2pzXzEucHNldWRvc1tuYW1lXTtcbiAgICAgICAgKDAsIHBzZXVkb3NfanNfMS52ZXJpZnlQc2V1ZG9BcmdzKShwc2V1ZG9fMSwgbmFtZSwgZGF0YSwgMik7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoZWxlbSkgeyByZXR1cm4gcHNldWRvXzEoZWxlbSwgb3B0aW9ucywgZGF0YSkgJiYgbmV4dChlbGVtKTsgfTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biBwc2V1ZG8tY2xhc3MgOlwiLmNvbmNhdChuYW1lKSk7XG59XG5leHBvcnRzLmNvbXBpbGVQc2V1ZG9TZWxlY3RvciA9IGNvbXBpbGVQc2V1ZG9TZWxlY3Rvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy52ZXJpZnlQc2V1ZG9BcmdzID0gZXhwb3J0cy5wc2V1ZG9zID0gdm9pZCAwO1xuLy8gV2hpbGUgZmlsdGVycyBhcmUgcHJlY29tcGlsZWQsIHBzZXVkb3MgZ2V0IGNhbGxlZCB3aGVuIHRoZXkgYXJlIG5lZWRlZFxuZXhwb3J0cy5wc2V1ZG9zID0ge1xuICAgIGVtcHR5OiBmdW5jdGlvbiAoZWxlbSwgX2EpIHtcbiAgICAgICAgdmFyIGFkYXB0ZXIgPSBfYS5hZGFwdGVyO1xuICAgICAgICByZXR1cm4gIWFkYXB0ZXIuZ2V0Q2hpbGRyZW4oZWxlbSkuc29tZShmdW5jdGlvbiAoZWxlbSkge1xuICAgICAgICAgICAgLy8gRklYTUU6IGBnZXRUZXh0YCBjYWxsIGlzIHBvdGVudGlhbGx5IGV4cGVuc2l2ZS5cbiAgICAgICAgICAgIHJldHVybiBhZGFwdGVyLmlzVGFnKGVsZW0pIHx8IGFkYXB0ZXIuZ2V0VGV4dChlbGVtKSAhPT0gXCJcIjtcbiAgICAgICAgfSk7XG4gICAgfSxcbiAgICBcImZpcnN0LWNoaWxkXCI6IGZ1bmN0aW9uIChlbGVtLCBfYSkge1xuICAgICAgICB2YXIgYWRhcHRlciA9IF9hLmFkYXB0ZXIsIGVxdWFscyA9IF9hLmVxdWFscztcbiAgICAgICAgaWYgKGFkYXB0ZXIucHJldkVsZW1lbnRTaWJsaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gYWRhcHRlci5wcmV2RWxlbWVudFNpYmxpbmcoZWxlbSkgPT0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZmlyc3RDaGlsZCA9IGFkYXB0ZXJcbiAgICAgICAgICAgIC5nZXRTaWJsaW5ncyhlbGVtKVxuICAgICAgICAgICAgLmZpbmQoZnVuY3Rpb24gKGVsZW0pIHsgcmV0dXJuIGFkYXB0ZXIuaXNUYWcoZWxlbSk7IH0pO1xuICAgICAgICByZXR1cm4gZmlyc3RDaGlsZCAhPSBudWxsICYmIGVxdWFscyhlbGVtLCBmaXJzdENoaWxkKTtcbiAgICB9LFxuICAgIFwibGFzdC1jaGlsZFwiOiBmdW5jdGlvbiAoZWxlbSwgX2EpIHtcbiAgICAgICAgdmFyIGFkYXB0ZXIgPSBfYS5hZGFwdGVyLCBlcXVhbHMgPSBfYS5lcXVhbHM7XG4gICAgICAgIHZhciBzaWJsaW5ncyA9IGFkYXB0ZXIuZ2V0U2libGluZ3MoZWxlbSk7XG4gICAgICAgIGZvciAodmFyIGkgPSBzaWJsaW5ncy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgaWYgKGVxdWFscyhlbGVtLCBzaWJsaW5nc1tpXSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICBpZiAoYWRhcHRlci5pc1RhZyhzaWJsaW5nc1tpXSkpXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG4gICAgXCJmaXJzdC1vZi10eXBlXCI6IGZ1bmN0aW9uIChlbGVtLCBfYSkge1xuICAgICAgICB2YXIgYWRhcHRlciA9IF9hLmFkYXB0ZXIsIGVxdWFscyA9IF9hLmVxdWFscztcbiAgICAgICAgdmFyIHNpYmxpbmdzID0gYWRhcHRlci5nZXRTaWJsaW5ncyhlbGVtKTtcbiAgICAgICAgdmFyIGVsZW1OYW1lID0gYWRhcHRlci5nZXROYW1lKGVsZW0pO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNpYmxpbmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgY3VycmVudFNpYmxpbmcgPSBzaWJsaW5nc1tpXTtcbiAgICAgICAgICAgIGlmIChlcXVhbHMoZWxlbSwgY3VycmVudFNpYmxpbmcpKVxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgaWYgKGFkYXB0ZXIuaXNUYWcoY3VycmVudFNpYmxpbmcpICYmXG4gICAgICAgICAgICAgICAgYWRhcHRlci5nZXROYW1lKGN1cnJlbnRTaWJsaW5nKSA9PT0gZWxlbU5hbWUpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcbiAgICBcImxhc3Qtb2YtdHlwZVwiOiBmdW5jdGlvbiAoZWxlbSwgX2EpIHtcbiAgICAgICAgdmFyIGFkYXB0ZXIgPSBfYS5hZGFwdGVyLCBlcXVhbHMgPSBfYS5lcXVhbHM7XG4gICAgICAgIHZhciBzaWJsaW5ncyA9IGFkYXB0ZXIuZ2V0U2libGluZ3MoZWxlbSk7XG4gICAgICAgIHZhciBlbGVtTmFtZSA9IGFkYXB0ZXIuZ2V0TmFtZShlbGVtKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IHNpYmxpbmdzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICB2YXIgY3VycmVudFNpYmxpbmcgPSBzaWJsaW5nc1tpXTtcbiAgICAgICAgICAgIGlmIChlcXVhbHMoZWxlbSwgY3VycmVudFNpYmxpbmcpKVxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgaWYgKGFkYXB0ZXIuaXNUYWcoY3VycmVudFNpYmxpbmcpICYmXG4gICAgICAgICAgICAgICAgYWRhcHRlci5nZXROYW1lKGN1cnJlbnRTaWJsaW5nKSA9PT0gZWxlbU5hbWUpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcbiAgICBcIm9ubHktb2YtdHlwZVwiOiBmdW5jdGlvbiAoZWxlbSwgX2EpIHtcbiAgICAgICAgdmFyIGFkYXB0ZXIgPSBfYS5hZGFwdGVyLCBlcXVhbHMgPSBfYS5lcXVhbHM7XG4gICAgICAgIHZhciBlbGVtTmFtZSA9IGFkYXB0ZXIuZ2V0TmFtZShlbGVtKTtcbiAgICAgICAgcmV0dXJuIGFkYXB0ZXJcbiAgICAgICAgICAgIC5nZXRTaWJsaW5ncyhlbGVtKVxuICAgICAgICAgICAgLmV2ZXJ5KGZ1bmN0aW9uIChzaWJsaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gZXF1YWxzKGVsZW0sIHNpYmxpbmcpIHx8XG4gICAgICAgICAgICAgICAgIWFkYXB0ZXIuaXNUYWcoc2libGluZykgfHxcbiAgICAgICAgICAgICAgICBhZGFwdGVyLmdldE5hbWUoc2libGluZykgIT09IGVsZW1OYW1lO1xuICAgICAgICB9KTtcbiAgICB9LFxuICAgIFwib25seS1jaGlsZFwiOiBmdW5jdGlvbiAoZWxlbSwgX2EpIHtcbiAgICAgICAgdmFyIGFkYXB0ZXIgPSBfYS5hZGFwdGVyLCBlcXVhbHMgPSBfYS5lcXVhbHM7XG4gICAgICAgIHJldHVybiBhZGFwdGVyXG4gICAgICAgICAgICAuZ2V0U2libGluZ3MoZWxlbSlcbiAgICAgICAgICAgIC5ldmVyeShmdW5jdGlvbiAoc2libGluZykgeyByZXR1cm4gZXF1YWxzKGVsZW0sIHNpYmxpbmcpIHx8ICFhZGFwdGVyLmlzVGFnKHNpYmxpbmcpOyB9KTtcbiAgICB9LFxufTtcbmZ1bmN0aW9uIHZlcmlmeVBzZXVkb0FyZ3MoZnVuYywgbmFtZSwgc3Vic2VsZWN0LCBhcmdJbmRleCkge1xuICAgIGlmIChzdWJzZWxlY3QgPT09IG51bGwpIHtcbiAgICAgICAgaWYgKGZ1bmMubGVuZ3RoID4gYXJnSW5kZXgpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlBzZXVkby1jbGFzcyA6XCIuY29uY2F0KG5hbWUsIFwiIHJlcXVpcmVzIGFuIGFyZ3VtZW50XCIpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChmdW5jLmxlbmd0aCA9PT0gYXJnSW5kZXgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUHNldWRvLWNsYXNzIDpcIi5jb25jYXQobmFtZSwgXCIgZG9lc24ndCBoYXZlIGFueSBhcmd1bWVudHNcIikpO1xuICAgIH1cbn1cbmV4cG9ydHMudmVyaWZ5UHNldWRvQXJncyA9IHZlcmlmeVBzZXVkb0FyZ3M7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wc2V1ZG9zLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fc3ByZWFkQXJyYXkgPSAodGhpcyAmJiB0aGlzLl9fc3ByZWFkQXJyYXkpIHx8IGZ1bmN0aW9uICh0bywgZnJvbSwgcGFjaykge1xuICAgIGlmIChwYWNrIHx8IGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIGZvciAodmFyIGkgPSAwLCBsID0gZnJvbS5sZW5ndGgsIGFyOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGlmIChhciB8fCAhKGkgaW4gZnJvbSkpIHtcbiAgICAgICAgICAgIGlmICghYXIpIGFyID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZnJvbSwgMCwgaSk7XG4gICAgICAgICAgICBhcltpXSA9IGZyb21baV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRvLmNvbmNhdChhciB8fCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmcm9tKSk7XG59O1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zdWJzZWxlY3RzID0gZXhwb3J0cy5nZXROZXh0U2libGluZ3MgPSBleHBvcnRzLmVuc3VyZUlzVGFnID0gZXhwb3J0cy5QTEFDRUhPTERFUl9FTEVNRU5UID0gdm9pZCAwO1xudmFyIGJvb2xiYXNlXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImJvb2xiYXNlXCIpKTtcbnZhciBzb3J0X2pzXzEgPSByZXF1aXJlKFwiLi4vc29ydC5qc1wiKTtcbi8qKiBVc2VkIGFzIGEgcGxhY2Vob2xkZXIgZm9yIDpoYXMuIFdpbGwgYmUgcmVwbGFjZWQgd2l0aCB0aGUgYWN0dWFsIGVsZW1lbnQuICovXG5leHBvcnRzLlBMQUNFSE9MREVSX0VMRU1FTlQgPSB7fTtcbmZ1bmN0aW9uIGVuc3VyZUlzVGFnKG5leHQsIGFkYXB0ZXIpIHtcbiAgICBpZiAobmV4dCA9PT0gYm9vbGJhc2VfMS5kZWZhdWx0LmZhbHNlRnVuYylcbiAgICAgICAgcmV0dXJuIGJvb2xiYXNlXzEuZGVmYXVsdC5mYWxzZUZ1bmM7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChlbGVtKSB7IHJldHVybiBhZGFwdGVyLmlzVGFnKGVsZW0pICYmIG5leHQoZWxlbSk7IH07XG59XG5leHBvcnRzLmVuc3VyZUlzVGFnID0gZW5zdXJlSXNUYWc7XG5mdW5jdGlvbiBnZXROZXh0U2libGluZ3MoZWxlbSwgYWRhcHRlcikge1xuICAgIHZhciBzaWJsaW5ncyA9IGFkYXB0ZXIuZ2V0U2libGluZ3MoZWxlbSk7XG4gICAgaWYgKHNpYmxpbmdzLmxlbmd0aCA8PSAxKVxuICAgICAgICByZXR1cm4gW107XG4gICAgdmFyIGVsZW1JbmRleCA9IHNpYmxpbmdzLmluZGV4T2YoZWxlbSk7XG4gICAgaWYgKGVsZW1JbmRleCA8IDAgfHwgZWxlbUluZGV4ID09PSBzaWJsaW5ncy5sZW5ndGggLSAxKVxuICAgICAgICByZXR1cm4gW107XG4gICAgcmV0dXJuIHNpYmxpbmdzLnNsaWNlKGVsZW1JbmRleCArIDEpLmZpbHRlcihhZGFwdGVyLmlzVGFnKTtcbn1cbmV4cG9ydHMuZ2V0TmV4dFNpYmxpbmdzID0gZ2V0TmV4dFNpYmxpbmdzO1xuZnVuY3Rpb24gY29weU9wdGlvbnMob3B0aW9ucykge1xuICAgIC8vIE5vdCBjb3BpZWQ6IGNvbnRleHQsIHJvb3RGdW5jXG4gICAgcmV0dXJuIHtcbiAgICAgICAgeG1sTW9kZTogISFvcHRpb25zLnhtbE1vZGUsXG4gICAgICAgIGxvd2VyQ2FzZUF0dHJpYnV0ZU5hbWVzOiAhIW9wdGlvbnMubG93ZXJDYXNlQXR0cmlidXRlTmFtZXMsXG4gICAgICAgIGxvd2VyQ2FzZVRhZ3M6ICEhb3B0aW9ucy5sb3dlckNhc2VUYWdzLFxuICAgICAgICBxdWlya3NNb2RlOiAhIW9wdGlvbnMucXVpcmtzTW9kZSxcbiAgICAgICAgY2FjaGVSZXN1bHRzOiAhIW9wdGlvbnMuY2FjaGVSZXN1bHRzLFxuICAgICAgICBwc2V1ZG9zOiBvcHRpb25zLnBzZXVkb3MsXG4gICAgICAgIGFkYXB0ZXI6IG9wdGlvbnMuYWRhcHRlcixcbiAgICAgICAgZXF1YWxzOiBvcHRpb25zLmVxdWFscyxcbiAgICB9O1xufVxudmFyIGlzID0gZnVuY3Rpb24gKG5leHQsIHRva2VuLCBvcHRpb25zLCBjb250ZXh0LCBjb21waWxlVG9rZW4pIHtcbiAgICB2YXIgZnVuYyA9IGNvbXBpbGVUb2tlbih0b2tlbiwgY29weU9wdGlvbnMob3B0aW9ucyksIGNvbnRleHQpO1xuICAgIHJldHVybiBmdW5jID09PSBib29sYmFzZV8xLmRlZmF1bHQudHJ1ZUZ1bmNcbiAgICAgICAgPyBuZXh0XG4gICAgICAgIDogZnVuYyA9PT0gYm9vbGJhc2VfMS5kZWZhdWx0LmZhbHNlRnVuY1xuICAgICAgICAgICAgPyBib29sYmFzZV8xLmRlZmF1bHQuZmFsc2VGdW5jXG4gICAgICAgICAgICA6IGZ1bmN0aW9uIChlbGVtKSB7IHJldHVybiBmdW5jKGVsZW0pICYmIG5leHQoZWxlbSk7IH07XG59O1xuLypcbiAqIDpub3QsIDpoYXMsIDppcywgOm1hdGNoZXMgYW5kIDp3aGVyZSBoYXZlIHRvIGNvbXBpbGUgc2VsZWN0b3JzXG4gKiBkb2luZyB0aGlzIGluIHNyYy9wc2V1ZG9zLnRzIHdvdWxkIGxlYWQgdG8gY2lyY3VsYXIgZGVwZW5kZW5jaWVzLFxuICogc28gd2UgYWRkIHRoZW0gaGVyZVxuICovXG5leHBvcnRzLnN1YnNlbGVjdHMgPSB7XG4gICAgaXM6IGlzLFxuICAgIC8qKlxuICAgICAqIGA6bWF0Y2hlc2AgYW5kIGA6d2hlcmVgIGFyZSBhbGlhc2VzIGZvciBgOmlzYC5cbiAgICAgKi9cbiAgICBtYXRjaGVzOiBpcyxcbiAgICB3aGVyZTogaXMsXG4gICAgbm90OiBmdW5jdGlvbiAobmV4dCwgdG9rZW4sIG9wdGlvbnMsIGNvbnRleHQsIGNvbXBpbGVUb2tlbikge1xuICAgICAgICB2YXIgZnVuYyA9IGNvbXBpbGVUb2tlbih0b2tlbiwgY29weU9wdGlvbnMob3B0aW9ucyksIGNvbnRleHQpO1xuICAgICAgICByZXR1cm4gZnVuYyA9PT0gYm9vbGJhc2VfMS5kZWZhdWx0LmZhbHNlRnVuY1xuICAgICAgICAgICAgPyBuZXh0XG4gICAgICAgICAgICA6IGZ1bmMgPT09IGJvb2xiYXNlXzEuZGVmYXVsdC50cnVlRnVuY1xuICAgICAgICAgICAgICAgID8gYm9vbGJhc2VfMS5kZWZhdWx0LmZhbHNlRnVuY1xuICAgICAgICAgICAgICAgIDogZnVuY3Rpb24gKGVsZW0pIHsgcmV0dXJuICFmdW5jKGVsZW0pICYmIG5leHQoZWxlbSk7IH07XG4gICAgfSxcbiAgICBoYXM6IGZ1bmN0aW9uIChuZXh0LCBzdWJzZWxlY3QsIG9wdGlvbnMsIF9jb250ZXh0LCBjb21waWxlVG9rZW4pIHtcbiAgICAgICAgdmFyIGFkYXB0ZXIgPSBvcHRpb25zLmFkYXB0ZXI7XG4gICAgICAgIHZhciBvcHRzID0gY29weU9wdGlvbnMob3B0aW9ucyk7XG4gICAgICAgIG9wdHMucmVsYXRpdmVTZWxlY3RvciA9IHRydWU7XG4gICAgICAgIHZhciBjb250ZXh0ID0gc3Vic2VsZWN0LnNvbWUoZnVuY3Rpb24gKHMpIHsgcmV0dXJuIHMuc29tZShzb3J0X2pzXzEuaXNUcmF2ZXJzYWwpOyB9KVxuICAgICAgICAgICAgPyAvLyBVc2VkIGFzIGEgcGxhY2Vob2xkZXIuIFdpbGwgYmUgcmVwbGFjZWQgd2l0aCB0aGUgYWN0dWFsIGVsZW1lbnQuXG4gICAgICAgICAgICAgICAgW2V4cG9ydHMuUExBQ0VIT0xERVJfRUxFTUVOVF1cbiAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICB2YXIgY29tcGlsZWQgPSBjb21waWxlVG9rZW4oc3Vic2VsZWN0LCBvcHRzLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKGNvbXBpbGVkID09PSBib29sYmFzZV8xLmRlZmF1bHQuZmFsc2VGdW5jKVxuICAgICAgICAgICAgcmV0dXJuIGJvb2xiYXNlXzEuZGVmYXVsdC5mYWxzZUZ1bmM7XG4gICAgICAgIHZhciBoYXNFbGVtZW50ID0gZW5zdXJlSXNUYWcoY29tcGlsZWQsIGFkYXB0ZXIpO1xuICAgICAgICAvLyBJZiBgY29tcGlsZWRgIGlzIGB0cnVlRnVuY2AsIHdlIGNhbiBza2lwIHRoaXMuXG4gICAgICAgIGlmIChjb250ZXh0ICYmIGNvbXBpbGVkICE9PSBib29sYmFzZV8xLmRlZmF1bHQudHJ1ZUZ1bmMpIHtcbiAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgKiBgc2hvdWxkVGVzdE5leHRTaWJsaW5nc2Agd2lsbCBvbmx5IGJlIHRydWUgaWYgdGhlIHF1ZXJ5IHN0YXJ0cyB3aXRoXG4gICAgICAgICAgICAgKiBhIHRyYXZlcnNhbCAoc2libGluZyBvciBhZGphY2VudCkuIFRoYXQgbWVhbnMgd2Ugd2lsbCBhbHdheXMgaGF2ZSBhIGNvbnRleHQuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHZhciBfYSA9IGNvbXBpbGVkLnNob3VsZFRlc3ROZXh0U2libGluZ3MsIHNob3VsZFRlc3ROZXh0U2libGluZ3NfMSA9IF9hID09PSB2b2lkIDAgPyBmYWxzZSA6IF9hO1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChlbGVtKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFuZXh0KGVsZW0pKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgY29udGV4dFswXSA9IGVsZW07XG4gICAgICAgICAgICAgICAgdmFyIGNoaWxkcyA9IGFkYXB0ZXIuZ2V0Q2hpbGRyZW4oZWxlbSk7XG4gICAgICAgICAgICAgICAgdmFyIG5leHRFbGVtZW50cyA9IHNob3VsZFRlc3ROZXh0U2libGluZ3NfMVxuICAgICAgICAgICAgICAgICAgICA/IF9fc3ByZWFkQXJyYXkoX19zcHJlYWRBcnJheShbXSwgY2hpbGRzLCB0cnVlKSwgZ2V0TmV4dFNpYmxpbmdzKGVsZW0sIGFkYXB0ZXIpLCB0cnVlKSA6IGNoaWxkcztcbiAgICAgICAgICAgICAgICByZXR1cm4gYWRhcHRlci5leGlzdHNPbmUoaGFzRWxlbWVudCwgbmV4dEVsZW1lbnRzKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChlbGVtKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV4dChlbGVtKSAmJlxuICAgICAgICAgICAgICAgIGFkYXB0ZXIuZXhpc3RzT25lKGhhc0VsZW1lbnQsIGFkYXB0ZXIuZ2V0Q2hpbGRyZW4oZWxlbSkpO1xuICAgICAgICB9O1xuICAgIH0sXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3Vic2VsZWN0cy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaXNUcmF2ZXJzYWwgPSB2b2lkIDA7XG52YXIgY3NzX3doYXRfMSA9IHJlcXVpcmUoXCJjc3Mtd2hhdFwiKTtcbnZhciBwcm9jZWR1cmUgPSBuZXcgTWFwKFtcbiAgICBbY3NzX3doYXRfMS5TZWxlY3RvclR5cGUuVW5pdmVyc2FsLCA1MF0sXG4gICAgW2Nzc193aGF0XzEuU2VsZWN0b3JUeXBlLlRhZywgMzBdLFxuICAgIFtjc3Nfd2hhdF8xLlNlbGVjdG9yVHlwZS5BdHRyaWJ1dGUsIDFdLFxuICAgIFtjc3Nfd2hhdF8xLlNlbGVjdG9yVHlwZS5Qc2V1ZG8sIDBdLFxuXSk7XG5mdW5jdGlvbiBpc1RyYXZlcnNhbCh0b2tlbikge1xuICAgIHJldHVybiAhcHJvY2VkdXJlLmhhcyh0b2tlbi50eXBlKTtcbn1cbmV4cG9ydHMuaXNUcmF2ZXJzYWwgPSBpc1RyYXZlcnNhbDtcbnZhciBhdHRyaWJ1dGVzID0gbmV3IE1hcChbXG4gICAgW2Nzc193aGF0XzEuQXR0cmlidXRlQWN0aW9uLkV4aXN0cywgMTBdLFxuICAgIFtjc3Nfd2hhdF8xLkF0dHJpYnV0ZUFjdGlvbi5FcXVhbHMsIDhdLFxuICAgIFtjc3Nfd2hhdF8xLkF0dHJpYnV0ZUFjdGlvbi5Ob3QsIDddLFxuICAgIFtjc3Nfd2hhdF8xLkF0dHJpYnV0ZUFjdGlvbi5TdGFydCwgNl0sXG4gICAgW2Nzc193aGF0XzEuQXR0cmlidXRlQWN0aW9uLkVuZCwgNl0sXG4gICAgW2Nzc193aGF0XzEuQXR0cmlidXRlQWN0aW9uLkFueSwgNV0sXG5dKTtcbi8qKlxuICogU29ydCB0aGUgcGFydHMgb2YgdGhlIHBhc3NlZCBzZWxlY3RvcixcbiAqIGFzIHRoZXJlIGlzIHBvdGVudGlhbCBmb3Igb3B0aW1pemF0aW9uXG4gKiAoc29tZSB0eXBlcyBvZiBzZWxlY3RvcnMgYXJlIGZhc3RlciB0aGFuIG90aGVycylcbiAqXG4gKiBAcGFyYW0gYXJyIFNlbGVjdG9yIHRvIHNvcnRcbiAqL1xuZnVuY3Rpb24gc29ydEJ5UHJvY2VkdXJlKGFycikge1xuICAgIHZhciBwcm9jcyA9IGFyci5tYXAoZ2V0UHJvY2VkdXJlKTtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgcHJvY05ldyA9IHByb2NzW2ldO1xuICAgICAgICBpZiAocHJvY05ldyA8IDApXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgZm9yICh2YXIgaiA9IGkgLSAxOyBqID49IDAgJiYgcHJvY05ldyA8IHByb2NzW2pdOyBqLS0pIHtcbiAgICAgICAgICAgIHZhciB0b2tlbiA9IGFycltqICsgMV07XG4gICAgICAgICAgICBhcnJbaiArIDFdID0gYXJyW2pdO1xuICAgICAgICAgICAgYXJyW2pdID0gdG9rZW47XG4gICAgICAgICAgICBwcm9jc1tqICsgMV0gPSBwcm9jc1tqXTtcbiAgICAgICAgICAgIHByb2NzW2pdID0gcHJvY05ldztcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IHNvcnRCeVByb2NlZHVyZTtcbmZ1bmN0aW9uIGdldFByb2NlZHVyZSh0b2tlbikge1xuICAgIHZhciBfYSwgX2I7XG4gICAgdmFyIHByb2MgPSAoX2EgPSBwcm9jZWR1cmUuZ2V0KHRva2VuLnR5cGUpKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAtMTtcbiAgICBpZiAodG9rZW4udHlwZSA9PT0gY3NzX3doYXRfMS5TZWxlY3RvclR5cGUuQXR0cmlidXRlKSB7XG4gICAgICAgIHByb2MgPSAoX2IgPSBhdHRyaWJ1dGVzLmdldCh0b2tlbi5hY3Rpb24pKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiA0O1xuICAgICAgICBpZiAodG9rZW4uYWN0aW9uID09PSBjc3Nfd2hhdF8xLkF0dHJpYnV0ZUFjdGlvbi5FcXVhbHMgJiYgdG9rZW4ubmFtZSA9PT0gXCJpZFwiKSB7XG4gICAgICAgICAgICAvLyBQcmVmZXIgSUQgc2VsZWN0b3JzIChlZy4gI0lEKVxuICAgICAgICAgICAgcHJvYyA9IDk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRva2VuLmlnbm9yZUNhc2UpIHtcbiAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgKiBJZ25vcmVDYXNlIGFkZHMgc29tZSBvdmVyaGVhZCwgcHJlZmVyIFwibm9ybWFsXCIgdG9rZW5cbiAgICAgICAgICAgICAqIHRoaXMgaXMgYSBiaW5hcnkgb3BlcmF0aW9uLCB0byBlbnN1cmUgaXQncyBzdGlsbCBhbiBpbnRcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgcHJvYyA+Pj0gMTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICh0b2tlbi50eXBlID09PSBjc3Nfd2hhdF8xLlNlbGVjdG9yVHlwZS5Qc2V1ZG8pIHtcbiAgICAgICAgaWYgKCF0b2tlbi5kYXRhKSB7XG4gICAgICAgICAgICBwcm9jID0gMztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0b2tlbi5uYW1lID09PSBcImhhc1wiIHx8IHRva2VuLm5hbWUgPT09IFwiY29udGFpbnNcIikge1xuICAgICAgICAgICAgcHJvYyA9IDA7IC8vIEV4cGVuc2l2ZSBpbiBhbnkgY2FzZVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodG9rZW4uZGF0YSkpIHtcbiAgICAgICAgICAgIC8vIEVnLiA6bWF0Y2hlcywgOm5vdFxuICAgICAgICAgICAgcHJvYyA9IE1hdGgubWluLmFwcGx5KE1hdGgsIHRva2VuLmRhdGEubWFwKGZ1bmN0aW9uIChkKSB7IHJldHVybiBNYXRoLm1pbi5hcHBseShNYXRoLCBkLm1hcChnZXRQcm9jZWR1cmUpKTsgfSkpO1xuICAgICAgICAgICAgLy8gSWYgd2UgaGF2ZSB0cmF2ZXJzYWxzLCB0cnkgdG8gYXZvaWQgZXhlY3V0aW5nIHRoaXMgc2VsZWN0b3JcbiAgICAgICAgICAgIGlmIChwcm9jIDwgMCkge1xuICAgICAgICAgICAgICAgIHByb2MgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcHJvYyA9IDI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHByb2M7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zb3J0LmpzLm1hcCIsImV4cG9ydCB2YXIgU2VsZWN0b3JUeXBlO1xuKGZ1bmN0aW9uIChTZWxlY3RvclR5cGUpIHtcbiAgICBTZWxlY3RvclR5cGVbXCJBdHRyaWJ1dGVcIl0gPSBcImF0dHJpYnV0ZVwiO1xuICAgIFNlbGVjdG9yVHlwZVtcIlBzZXVkb1wiXSA9IFwicHNldWRvXCI7XG4gICAgU2VsZWN0b3JUeXBlW1wiUHNldWRvRWxlbWVudFwiXSA9IFwicHNldWRvLWVsZW1lbnRcIjtcbiAgICBTZWxlY3RvclR5cGVbXCJUYWdcIl0gPSBcInRhZ1wiO1xuICAgIFNlbGVjdG9yVHlwZVtcIlVuaXZlcnNhbFwiXSA9IFwidW5pdmVyc2FsXCI7XG4gICAgLy8gVHJhdmVyc2Fsc1xuICAgIFNlbGVjdG9yVHlwZVtcIkFkamFjZW50XCJdID0gXCJhZGphY2VudFwiO1xuICAgIFNlbGVjdG9yVHlwZVtcIkNoaWxkXCJdID0gXCJjaGlsZFwiO1xuICAgIFNlbGVjdG9yVHlwZVtcIkRlc2NlbmRhbnRcIl0gPSBcImRlc2NlbmRhbnRcIjtcbiAgICBTZWxlY3RvclR5cGVbXCJQYXJlbnRcIl0gPSBcInBhcmVudFwiO1xuICAgIFNlbGVjdG9yVHlwZVtcIlNpYmxpbmdcIl0gPSBcInNpYmxpbmdcIjtcbiAgICBTZWxlY3RvclR5cGVbXCJDb2x1bW5Db21iaW5hdG9yXCJdID0gXCJjb2x1bW4tY29tYmluYXRvclwiO1xufSkoU2VsZWN0b3JUeXBlIHx8IChTZWxlY3RvclR5cGUgPSB7fSkpO1xuLyoqXG4gKiBNb2RlcyBmb3IgaWdub3JlIGNhc2UuXG4gKlxuICogVGhpcyBjb3VsZCBiZSB1cGRhdGVkIHRvIGFuIGVudW0sIGFuZCB0aGUgb2JqZWN0IGlzXG4gKiB0aGUgY3VycmVudCBzdGFuZC1pbiB0aGF0IHdpbGwgYWxsb3cgY29kZSB0byBiZSB1cGRhdGVkXG4gKiB3aXRob3V0IGJpZyBjaGFuZ2VzLlxuICovXG5leHBvcnQgY29uc3QgSWdub3JlQ2FzZU1vZGUgPSB7XG4gICAgVW5rbm93bjogbnVsbCxcbiAgICBRdWlya3NNb2RlOiBcInF1aXJrc1wiLFxuICAgIElnbm9yZUNhc2U6IHRydWUsXG4gICAgQ2FzZVNlbnNpdGl2ZTogZmFsc2UsXG59O1xuZXhwb3J0IHZhciBBdHRyaWJ1dGVBY3Rpb247XG4oZnVuY3Rpb24gKEF0dHJpYnV0ZUFjdGlvbikge1xuICAgIEF0dHJpYnV0ZUFjdGlvbltcIkFueVwiXSA9IFwiYW55XCI7XG4gICAgQXR0cmlidXRlQWN0aW9uW1wiRWxlbWVudFwiXSA9IFwiZWxlbWVudFwiO1xuICAgIEF0dHJpYnV0ZUFjdGlvbltcIkVuZFwiXSA9IFwiZW5kXCI7XG4gICAgQXR0cmlidXRlQWN0aW9uW1wiRXF1YWxzXCJdID0gXCJlcXVhbHNcIjtcbiAgICBBdHRyaWJ1dGVBY3Rpb25bXCJFeGlzdHNcIl0gPSBcImV4aXN0c1wiO1xuICAgIEF0dHJpYnV0ZUFjdGlvbltcIkh5cGhlblwiXSA9IFwiaHlwaGVuXCI7XG4gICAgQXR0cmlidXRlQWN0aW9uW1wiTm90XCJdID0gXCJub3RcIjtcbiAgICBBdHRyaWJ1dGVBY3Rpb25bXCJTdGFydFwiXSA9IFwic3RhcnRcIjtcbn0pKEF0dHJpYnV0ZUFjdGlvbiB8fCAoQXR0cmlidXRlQWN0aW9uID0ge30pKTtcbiIsImltcG9ydCB7IFNlbGVjdG9yVHlwZSwgQXR0cmlidXRlQWN0aW9uLCB9IGZyb20gXCIuL3R5cGVzXCI7XG5jb25zdCByZU5hbWUgPSAvXlteXFxcXCNdPyg/OlxcXFwoPzpbXFxkYS1mXXsxLDZ9XFxzP3wuKXxbXFx3XFwtXFx1MDBiMC1cXHVGRkZGXSkrLztcbmNvbnN0IHJlRXNjYXBlID0gL1xcXFwoW1xcZGEtZl17MSw2fVxccz98KFxccyl8LikvZ2k7XG5jb25zdCBhY3Rpb25UeXBlcyA9IG5ldyBNYXAoW1xuICAgIFsxMjYgLyogVGlsZGUgKi8sIEF0dHJpYnV0ZUFjdGlvbi5FbGVtZW50XSxcbiAgICBbOTQgLyogQ2lyY3VtZmxleCAqLywgQXR0cmlidXRlQWN0aW9uLlN0YXJ0XSxcbiAgICBbMzYgLyogRG9sbGFyICovLCBBdHRyaWJ1dGVBY3Rpb24uRW5kXSxcbiAgICBbNDIgLyogQXN0ZXJpc2sgKi8sIEF0dHJpYnV0ZUFjdGlvbi5BbnldLFxuICAgIFszMyAvKiBFeGNsYW1hdGlvbk1hcmsgKi8sIEF0dHJpYnV0ZUFjdGlvbi5Ob3RdLFxuICAgIFsxMjQgLyogUGlwZSAqLywgQXR0cmlidXRlQWN0aW9uLkh5cGhlbl0sXG5dKTtcbi8vIFBzZXVkb3MsIHdob3NlIGRhdGEgcHJvcGVydHkgaXMgcGFyc2VkIGFzIHdlbGwuXG5jb25zdCB1bnBhY2tQc2V1ZG9zID0gbmV3IFNldChbXG4gICAgXCJoYXNcIixcbiAgICBcIm5vdFwiLFxuICAgIFwibWF0Y2hlc1wiLFxuICAgIFwiaXNcIixcbiAgICBcIndoZXJlXCIsXG4gICAgXCJob3N0XCIsXG4gICAgXCJob3N0LWNvbnRleHRcIixcbl0pO1xuLyoqXG4gKiBDaGVja3Mgd2hldGhlciBhIHNwZWNpZmljIHNlbGVjdG9yIGlzIGEgdHJhdmVyc2FsLlxuICogVGhpcyBpcyB1c2VmdWwgZWcuIGluIHN3YXBwaW5nIHRoZSBvcmRlciBvZiBlbGVtZW50cyB0aGF0XG4gKiBhcmUgbm90IHRyYXZlcnNhbHMuXG4gKlxuICogQHBhcmFtIHNlbGVjdG9yIFNlbGVjdG9yIHRvIGNoZWNrLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNUcmF2ZXJzYWwoc2VsZWN0b3IpIHtcbiAgICBzd2l0Y2ggKHNlbGVjdG9yLnR5cGUpIHtcbiAgICAgICAgY2FzZSBTZWxlY3RvclR5cGUuQWRqYWNlbnQ6XG4gICAgICAgIGNhc2UgU2VsZWN0b3JUeXBlLkNoaWxkOlxuICAgICAgICBjYXNlIFNlbGVjdG9yVHlwZS5EZXNjZW5kYW50OlxuICAgICAgICBjYXNlIFNlbGVjdG9yVHlwZS5QYXJlbnQ6XG4gICAgICAgIGNhc2UgU2VsZWN0b3JUeXBlLlNpYmxpbmc6XG4gICAgICAgIGNhc2UgU2VsZWN0b3JUeXBlLkNvbHVtbkNvbWJpbmF0b3I6XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG5jb25zdCBzdHJpcFF1b3Rlc0Zyb21Qc2V1ZG9zID0gbmV3IFNldChbXCJjb250YWluc1wiLCBcImljb250YWluc1wiXSk7XG4vLyBVbmVzY2FwZSBmdW5jdGlvbiB0YWtlbiBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvc2l6emxlL2Jsb2IvbWFzdGVyL3NyYy9zaXp6bGUuanMjTDE1MlxuZnVuY3Rpb24gZnVuZXNjYXBlKF8sIGVzY2FwZWQsIGVzY2FwZWRXaGl0ZXNwYWNlKSB7XG4gICAgY29uc3QgaGlnaCA9IHBhcnNlSW50KGVzY2FwZWQsIDE2KSAtIDB4MTAwMDA7XG4gICAgLy8gTmFOIG1lYW5zIG5vbi1jb2RlcG9pbnRcbiAgICByZXR1cm4gaGlnaCAhPT0gaGlnaCB8fCBlc2NhcGVkV2hpdGVzcGFjZVxuICAgICAgICA/IGVzY2FwZWRcbiAgICAgICAgOiBoaWdoIDwgMFxuICAgICAgICAgICAgPyAvLyBCTVAgY29kZXBvaW50XG4gICAgICAgICAgICAgICAgU3RyaW5nLmZyb21DaGFyQ29kZShoaWdoICsgMHgxMDAwMClcbiAgICAgICAgICAgIDogLy8gU3VwcGxlbWVudGFsIFBsYW5lIGNvZGVwb2ludCAoc3Vycm9nYXRlIHBhaXIpXG4gICAgICAgICAgICAgICAgU3RyaW5nLmZyb21DaGFyQ29kZSgoaGlnaCA+PiAxMCkgfCAweGQ4MDAsIChoaWdoICYgMHgzZmYpIHwgMHhkYzAwKTtcbn1cbmZ1bmN0aW9uIHVuZXNjYXBlQ1NTKHN0cikge1xuICAgIHJldHVybiBzdHIucmVwbGFjZShyZUVzY2FwZSwgZnVuZXNjYXBlKTtcbn1cbmZ1bmN0aW9uIGlzUXVvdGUoYykge1xuICAgIHJldHVybiBjID09PSAzOSAvKiBTaW5nbGVRdW90ZSAqLyB8fCBjID09PSAzNCAvKiBEb3VibGVRdW90ZSAqLztcbn1cbmZ1bmN0aW9uIGlzV2hpdGVzcGFjZShjKSB7XG4gICAgcmV0dXJuIChjID09PSAzMiAvKiBTcGFjZSAqLyB8fFxuICAgICAgICBjID09PSA5IC8qIFRhYiAqLyB8fFxuICAgICAgICBjID09PSAxMCAvKiBOZXdMaW5lICovIHx8XG4gICAgICAgIGMgPT09IDEyIC8qIEZvcm1GZWVkICovIHx8XG4gICAgICAgIGMgPT09IDEzIC8qIENhcnJpYWdlUmV0dXJuICovKTtcbn1cbi8qKlxuICogUGFyc2VzIGBzZWxlY3RvcmAsIG9wdGlvbmFsbHkgd2l0aCB0aGUgcGFzc2VkIGBvcHRpb25zYC5cbiAqXG4gKiBAcGFyYW0gc2VsZWN0b3IgU2VsZWN0b3IgdG8gcGFyc2UuXG4gKiBAcGFyYW0gb3B0aW9ucyBPcHRpb25zIGZvciBwYXJzaW5nLlxuICogQHJldHVybnMgUmV0dXJucyBhIHR3by1kaW1lbnNpb25hbCBhcnJheS5cbiAqIFRoZSBmaXJzdCBkaW1lbnNpb24gcmVwcmVzZW50cyBzZWxlY3RvcnMgc2VwYXJhdGVkIGJ5IGNvbW1hcyAoZWcuIGBzdWIxLCBzdWIyYCksXG4gKiB0aGUgc2Vjb25kIGNvbnRhaW5zIHRoZSByZWxldmFudCB0b2tlbnMgZm9yIHRoYXQgc2VsZWN0b3IuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZShzZWxlY3Rvcikge1xuICAgIGNvbnN0IHN1YnNlbGVjdHMgPSBbXTtcbiAgICBjb25zdCBlbmRJbmRleCA9IHBhcnNlU2VsZWN0b3Ioc3Vic2VsZWN0cywgYCR7c2VsZWN0b3J9YCwgMCk7XG4gICAgaWYgKGVuZEluZGV4IDwgc2VsZWN0b3IubGVuZ3RoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5tYXRjaGVkIHNlbGVjdG9yOiAke3NlbGVjdG9yLnNsaWNlKGVuZEluZGV4KX1gKTtcbiAgICB9XG4gICAgcmV0dXJuIHN1YnNlbGVjdHM7XG59XG5mdW5jdGlvbiBwYXJzZVNlbGVjdG9yKHN1YnNlbGVjdHMsIHNlbGVjdG9yLCBzZWxlY3RvckluZGV4KSB7XG4gICAgbGV0IHRva2VucyA9IFtdO1xuICAgIGZ1bmN0aW9uIGdldE5hbWUob2Zmc2V0KSB7XG4gICAgICAgIGNvbnN0IG1hdGNoID0gc2VsZWN0b3Iuc2xpY2Uoc2VsZWN0b3JJbmRleCArIG9mZnNldCkubWF0Y2gocmVOYW1lKTtcbiAgICAgICAgaWYgKCFtYXRjaCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3RlZCBuYW1lLCBmb3VuZCAke3NlbGVjdG9yLnNsaWNlKHNlbGVjdG9ySW5kZXgpfWApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IFtuYW1lXSA9IG1hdGNoO1xuICAgICAgICBzZWxlY3RvckluZGV4ICs9IG9mZnNldCArIG5hbWUubGVuZ3RoO1xuICAgICAgICByZXR1cm4gdW5lc2NhcGVDU1MobmFtZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHN0cmlwV2hpdGVzcGFjZShvZmZzZXQpIHtcbiAgICAgICAgc2VsZWN0b3JJbmRleCArPSBvZmZzZXQ7XG4gICAgICAgIHdoaWxlIChzZWxlY3RvckluZGV4IDwgc2VsZWN0b3IubGVuZ3RoICYmXG4gICAgICAgICAgICBpc1doaXRlc3BhY2Uoc2VsZWN0b3IuY2hhckNvZGVBdChzZWxlY3RvckluZGV4KSkpIHtcbiAgICAgICAgICAgIHNlbGVjdG9ySW5kZXgrKztcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiByZWFkVmFsdWVXaXRoUGFyZW50aGVzaXMoKSB7XG4gICAgICAgIHNlbGVjdG9ySW5kZXggKz0gMTtcbiAgICAgICAgY29uc3Qgc3RhcnQgPSBzZWxlY3RvckluZGV4O1xuICAgICAgICBsZXQgY291bnRlciA9IDE7XG4gICAgICAgIGZvciAoOyBjb3VudGVyID4gMCAmJiBzZWxlY3RvckluZGV4IDwgc2VsZWN0b3IubGVuZ3RoOyBzZWxlY3RvckluZGV4KyspIHtcbiAgICAgICAgICAgIGlmIChzZWxlY3Rvci5jaGFyQ29kZUF0KHNlbGVjdG9ySW5kZXgpID09PVxuICAgICAgICAgICAgICAgIDQwIC8qIExlZnRQYXJlbnRoZXNpcyAqLyAmJlxuICAgICAgICAgICAgICAgICFpc0VzY2FwZWQoc2VsZWN0b3JJbmRleCkpIHtcbiAgICAgICAgICAgICAgICBjb3VudGVyKys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChzZWxlY3Rvci5jaGFyQ29kZUF0KHNlbGVjdG9ySW5kZXgpID09PVxuICAgICAgICAgICAgICAgIDQxIC8qIFJpZ2h0UGFyZW50aGVzaXMgKi8gJiZcbiAgICAgICAgICAgICAgICAhaXNFc2NhcGVkKHNlbGVjdG9ySW5kZXgpKSB7XG4gICAgICAgICAgICAgICAgY291bnRlci0tO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChjb3VudGVyKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJQYXJlbnRoZXNpcyBub3QgbWF0Y2hlZFwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5lc2NhcGVDU1Moc2VsZWN0b3Iuc2xpY2Uoc3RhcnQsIHNlbGVjdG9ySW5kZXggLSAxKSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGlzRXNjYXBlZChwb3MpIHtcbiAgICAgICAgbGV0IHNsYXNoQ291bnQgPSAwO1xuICAgICAgICB3aGlsZSAoc2VsZWN0b3IuY2hhckNvZGVBdCgtLXBvcykgPT09IDkyIC8qIEJhY2tTbGFzaCAqLylcbiAgICAgICAgICAgIHNsYXNoQ291bnQrKztcbiAgICAgICAgcmV0dXJuIChzbGFzaENvdW50ICYgMSkgPT09IDE7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGVuc3VyZU5vdFRyYXZlcnNhbCgpIHtcbiAgICAgICAgaWYgKHRva2Vucy5sZW5ndGggPiAwICYmIGlzVHJhdmVyc2FsKHRva2Vuc1t0b2tlbnMubGVuZ3RoIC0gMV0pKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJEaWQgbm90IGV4cGVjdCBzdWNjZXNzaXZlIHRyYXZlcnNhbHMuXCIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGFkZFRyYXZlcnNhbCh0eXBlKSB7XG4gICAgICAgIGlmICh0b2tlbnMubGVuZ3RoID4gMCAmJlxuICAgICAgICAgICAgdG9rZW5zW3Rva2Vucy5sZW5ndGggLSAxXS50eXBlID09PSBTZWxlY3RvclR5cGUuRGVzY2VuZGFudCkge1xuICAgICAgICAgICAgdG9rZW5zW3Rva2Vucy5sZW5ndGggLSAxXS50eXBlID0gdHlwZTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBlbnN1cmVOb3RUcmF2ZXJzYWwoKTtcbiAgICAgICAgdG9rZW5zLnB1c2goeyB0eXBlIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBhZGRTcGVjaWFsQXR0cmlidXRlKG5hbWUsIGFjdGlvbikge1xuICAgICAgICB0b2tlbnMucHVzaCh7XG4gICAgICAgICAgICB0eXBlOiBTZWxlY3RvclR5cGUuQXR0cmlidXRlLFxuICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgIGFjdGlvbixcbiAgICAgICAgICAgIHZhbHVlOiBnZXROYW1lKDEpLFxuICAgICAgICAgICAgbmFtZXNwYWNlOiBudWxsLFxuICAgICAgICAgICAgaWdub3JlQ2FzZTogXCJxdWlya3NcIixcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdlIGhhdmUgZmluaXNoZWQgcGFyc2luZyB0aGUgY3VycmVudCBwYXJ0IG9mIHRoZSBzZWxlY3Rvci5cbiAgICAgKlxuICAgICAqIFJlbW92ZSBkZXNjZW5kYW50IHRva2VucyBhdCB0aGUgZW5kIGlmIHRoZXkgZXhpc3QsXG4gICAgICogYW5kIHJldHVybiB0aGUgbGFzdCBpbmRleCwgc28gdGhhdCBwYXJzaW5nIGNhbiBiZVxuICAgICAqIHBpY2tlZCB1cCBmcm9tIGhlcmUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmluYWxpemVTdWJzZWxlY3RvcigpIHtcbiAgICAgICAgaWYgKHRva2Vucy5sZW5ndGggJiZcbiAgICAgICAgICAgIHRva2Vuc1t0b2tlbnMubGVuZ3RoIC0gMV0udHlwZSA9PT0gU2VsZWN0b3JUeXBlLkRlc2NlbmRhbnQpIHtcbiAgICAgICAgICAgIHRva2Vucy5wb3AoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodG9rZW5zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRW1wdHkgc3ViLXNlbGVjdG9yXCIpO1xuICAgICAgICB9XG4gICAgICAgIHN1YnNlbGVjdHMucHVzaCh0b2tlbnMpO1xuICAgIH1cbiAgICBzdHJpcFdoaXRlc3BhY2UoMCk7XG4gICAgaWYgKHNlbGVjdG9yLmxlbmd0aCA9PT0gc2VsZWN0b3JJbmRleCkge1xuICAgICAgICByZXR1cm4gc2VsZWN0b3JJbmRleDtcbiAgICB9XG4gICAgbG9vcDogd2hpbGUgKHNlbGVjdG9ySW5kZXggPCBzZWxlY3Rvci5sZW5ndGgpIHtcbiAgICAgICAgY29uc3QgZmlyc3RDaGFyID0gc2VsZWN0b3IuY2hhckNvZGVBdChzZWxlY3RvckluZGV4KTtcbiAgICAgICAgc3dpdGNoIChmaXJzdENoYXIpIHtcbiAgICAgICAgICAgIC8vIFdoaXRlc3BhY2VcbiAgICAgICAgICAgIGNhc2UgMzIgLyogU3BhY2UgKi86XG4gICAgICAgICAgICBjYXNlIDkgLyogVGFiICovOlxuICAgICAgICAgICAgY2FzZSAxMCAvKiBOZXdMaW5lICovOlxuICAgICAgICAgICAgY2FzZSAxMiAvKiBGb3JtRmVlZCAqLzpcbiAgICAgICAgICAgIGNhc2UgMTMgLyogQ2FycmlhZ2VSZXR1cm4gKi86IHtcbiAgICAgICAgICAgICAgICBpZiAodG9rZW5zLmxlbmd0aCA9PT0gMCB8fFxuICAgICAgICAgICAgICAgICAgICB0b2tlbnNbMF0udHlwZSAhPT0gU2VsZWN0b3JUeXBlLkRlc2NlbmRhbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgZW5zdXJlTm90VHJhdmVyc2FsKCk7XG4gICAgICAgICAgICAgICAgICAgIHRva2Vucy5wdXNoKHsgdHlwZTogU2VsZWN0b3JUeXBlLkRlc2NlbmRhbnQgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHN0cmlwV2hpdGVzcGFjZSgxKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFRyYXZlcnNhbHNcbiAgICAgICAgICAgIGNhc2UgNjIgLyogR3JlYXRlclRoYW4gKi86IHtcbiAgICAgICAgICAgICAgICBhZGRUcmF2ZXJzYWwoU2VsZWN0b3JUeXBlLkNoaWxkKTtcbiAgICAgICAgICAgICAgICBzdHJpcFdoaXRlc3BhY2UoMSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIDYwIC8qIExlc3NUaGFuICovOiB7XG4gICAgICAgICAgICAgICAgYWRkVHJhdmVyc2FsKFNlbGVjdG9yVHlwZS5QYXJlbnQpO1xuICAgICAgICAgICAgICAgIHN0cmlwV2hpdGVzcGFjZSgxKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgMTI2IC8qIFRpbGRlICovOiB7XG4gICAgICAgICAgICAgICAgYWRkVHJhdmVyc2FsKFNlbGVjdG9yVHlwZS5TaWJsaW5nKTtcbiAgICAgICAgICAgICAgICBzdHJpcFdoaXRlc3BhY2UoMSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIDQzIC8qIFBsdXMgKi86IHtcbiAgICAgICAgICAgICAgICBhZGRUcmF2ZXJzYWwoU2VsZWN0b3JUeXBlLkFkamFjZW50KTtcbiAgICAgICAgICAgICAgICBzdHJpcFdoaXRlc3BhY2UoMSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBTcGVjaWFsIGF0dHJpYnV0ZSBzZWxlY3RvcnM6IC5jbGFzcywgI2lkXG4gICAgICAgICAgICBjYXNlIDQ2IC8qIFBlcmlvZCAqLzoge1xuICAgICAgICAgICAgICAgIGFkZFNwZWNpYWxBdHRyaWJ1dGUoXCJjbGFzc1wiLCBBdHRyaWJ1dGVBY3Rpb24uRWxlbWVudCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIDM1IC8qIEhhc2ggKi86IHtcbiAgICAgICAgICAgICAgICBhZGRTcGVjaWFsQXR0cmlidXRlKFwiaWRcIiwgQXR0cmlidXRlQWN0aW9uLkVxdWFscyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIDkxIC8qIExlZnRTcXVhcmVCcmFja2V0ICovOiB7XG4gICAgICAgICAgICAgICAgc3RyaXBXaGl0ZXNwYWNlKDEpO1xuICAgICAgICAgICAgICAgIC8vIERldGVybWluZSBhdHRyaWJ1dGUgbmFtZSBhbmQgbmFtZXNwYWNlXG4gICAgICAgICAgICAgICAgbGV0IG5hbWU7XG4gICAgICAgICAgICAgICAgbGV0IG5hbWVzcGFjZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgaWYgKHNlbGVjdG9yLmNoYXJDb2RlQXQoc2VsZWN0b3JJbmRleCkgPT09IDEyNCAvKiBQaXBlICovKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEVxdWl2YWxlbnQgdG8gbm8gbmFtZXNwYWNlXG4gICAgICAgICAgICAgICAgICAgIG5hbWUgPSBnZXROYW1lKDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChzZWxlY3Rvci5zdGFydHNXaXRoKFwiKnxcIiwgc2VsZWN0b3JJbmRleCkpIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZXNwYWNlID0gXCIqXCI7XG4gICAgICAgICAgICAgICAgICAgIG5hbWUgPSBnZXROYW1lKDIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZSA9IGdldE5hbWUoMCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzZWxlY3Rvci5jaGFyQ29kZUF0KHNlbGVjdG9ySW5kZXgpID09PSAxMjQgLyogUGlwZSAqLyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3IuY2hhckNvZGVBdChzZWxlY3RvckluZGV4ICsgMSkgIT09XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgNjEgLyogRXF1YWwgKi8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVzcGFjZSA9IG5hbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lID0gZ2V0TmFtZSgxKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzdHJpcFdoaXRlc3BhY2UoMCk7XG4gICAgICAgICAgICAgICAgLy8gRGV0ZXJtaW5lIGNvbXBhcmlzb24gb3BlcmF0aW9uXG4gICAgICAgICAgICAgICAgbGV0IGFjdGlvbiA9IEF0dHJpYnV0ZUFjdGlvbi5FeGlzdHM7XG4gICAgICAgICAgICAgICAgY29uc3QgcG9zc2libGVBY3Rpb24gPSBhY3Rpb25UeXBlcy5nZXQoc2VsZWN0b3IuY2hhckNvZGVBdChzZWxlY3RvckluZGV4KSk7XG4gICAgICAgICAgICAgICAgaWYgKHBvc3NpYmxlQWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9IHBvc3NpYmxlQWN0aW9uO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZWN0b3IuY2hhckNvZGVBdChzZWxlY3RvckluZGV4ICsgMSkgIT09XG4gICAgICAgICAgICAgICAgICAgICAgICA2MSAvKiBFcXVhbCAqLykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRXhwZWN0ZWQgYD1gXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHN0cmlwV2hpdGVzcGFjZSgyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoc2VsZWN0b3IuY2hhckNvZGVBdChzZWxlY3RvckluZGV4KSA9PT0gNjEgLyogRXF1YWwgKi8pIHtcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gQXR0cmlidXRlQWN0aW9uLkVxdWFscztcbiAgICAgICAgICAgICAgICAgICAgc3RyaXBXaGl0ZXNwYWNlKDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBEZXRlcm1pbmUgdmFsdWVcbiAgICAgICAgICAgICAgICBsZXQgdmFsdWUgPSBcIlwiO1xuICAgICAgICAgICAgICAgIGxldCBpZ25vcmVDYXNlID0gbnVsbDtcbiAgICAgICAgICAgICAgICBpZiAoYWN0aW9uICE9PSBcImV4aXN0c1wiKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc1F1b3RlKHNlbGVjdG9yLmNoYXJDb2RlQXQoc2VsZWN0b3JJbmRleCkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBxdW90ZSA9IHNlbGVjdG9yLmNoYXJDb2RlQXQoc2VsZWN0b3JJbmRleCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgc2VjdGlvbkVuZCA9IHNlbGVjdG9ySW5kZXggKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHNlY3Rpb25FbmQgPCBzZWxlY3Rvci5sZW5ndGggJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoc2VsZWN0b3IuY2hhckNvZGVBdChzZWN0aW9uRW5kKSAhPT0gcXVvdGUgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNFc2NhcGVkKHNlY3Rpb25FbmQpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlY3Rpb25FbmQgKz0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZWxlY3Rvci5jaGFyQ29kZUF0KHNlY3Rpb25FbmQpICE9PSBxdW90ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkF0dHJpYnV0ZSB2YWx1ZSBkaWRuJ3QgZW5kXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB1bmVzY2FwZUNTUyhzZWxlY3Rvci5zbGljZShzZWxlY3RvckluZGV4ICsgMSwgc2VjdGlvbkVuZCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3JJbmRleCA9IHNlY3Rpb25FbmQgKyAxO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFsdWVTdGFydCA9IHNlbGVjdG9ySW5kZXg7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoc2VsZWN0b3JJbmRleCA8IHNlbGVjdG9yLmxlbmd0aCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICgoIWlzV2hpdGVzcGFjZShzZWxlY3Rvci5jaGFyQ29kZUF0KHNlbGVjdG9ySW5kZXgpKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3Rvci5jaGFyQ29kZUF0KHNlbGVjdG9ySW5kZXgpICE9PVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOTMgLyogUmlnaHRTcXVhcmVCcmFja2V0ICovKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0VzY2FwZWQoc2VsZWN0b3JJbmRleCkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3JJbmRleCArPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB1bmVzY2FwZUNTUyhzZWxlY3Rvci5zbGljZSh2YWx1ZVN0YXJ0LCBzZWxlY3RvckluZGV4KSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgc3RyaXBXaGl0ZXNwYWNlKDApO1xuICAgICAgICAgICAgICAgICAgICAvLyBTZWUgaWYgd2UgaGF2ZSBhIGZvcmNlIGlnbm9yZSBmbGFnXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZvcmNlSWdub3JlID0gc2VsZWN0b3IuY2hhckNvZGVBdChzZWxlY3RvckluZGV4KSB8IDB4MjA7XG4gICAgICAgICAgICAgICAgICAgIC8vIElmIHRoZSBmb3JjZUlnbm9yZSBmbGFnIGlzIHNldCAoZWl0aGVyIGBpYCBvciBgc2ApLCB1c2UgdGhhdCB2YWx1ZVxuICAgICAgICAgICAgICAgICAgICBpZiAoZm9yY2VJZ25vcmUgPT09IDExNSAvKiBMb3dlclMgKi8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlnbm9yZUNhc2UgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0cmlwV2hpdGVzcGFjZSgxKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChmb3JjZUlnbm9yZSA9PT0gMTA1IC8qIExvd2VySSAqLykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWdub3JlQ2FzZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdHJpcFdoaXRlc3BhY2UoMSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHNlbGVjdG9yLmNoYXJDb2RlQXQoc2VsZWN0b3JJbmRleCkgIT09XG4gICAgICAgICAgICAgICAgICAgIDkzIC8qIFJpZ2h0U3F1YXJlQnJhY2tldCAqLykge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBdHRyaWJ1dGUgc2VsZWN0b3IgZGlkbid0IHRlcm1pbmF0ZVwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc2VsZWN0b3JJbmRleCArPSAxO1xuICAgICAgICAgICAgICAgIGNvbnN0IGF0dHJpYnV0ZVNlbGVjdG9yID0ge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBTZWxlY3RvclR5cGUuQXR0cmlidXRlLFxuICAgICAgICAgICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24sXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgICAgICAgICBuYW1lc3BhY2UsXG4gICAgICAgICAgICAgICAgICAgIGlnbm9yZUNhc2UsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB0b2tlbnMucHVzaChhdHRyaWJ1dGVTZWxlY3Rvcik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIDU4IC8qIENvbG9uICovOiB7XG4gICAgICAgICAgICAgICAgaWYgKHNlbGVjdG9yLmNoYXJDb2RlQXQoc2VsZWN0b3JJbmRleCArIDEpID09PSA1OCAvKiBDb2xvbiAqLykge1xuICAgICAgICAgICAgICAgICAgICB0b2tlbnMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBTZWxlY3RvclR5cGUuUHNldWRvRWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGdldE5hbWUoMikudG9Mb3dlckNhc2UoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHNlbGVjdG9yLmNoYXJDb2RlQXQoc2VsZWN0b3JJbmRleCkgPT09XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgNDAgLyogTGVmdFBhcmVudGhlc2lzICovXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyByZWFkVmFsdWVXaXRoUGFyZW50aGVzaXMoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBuYW1lID0gZ2V0TmFtZSgxKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgIGxldCBkYXRhID0gbnVsbDtcbiAgICAgICAgICAgICAgICBpZiAoc2VsZWN0b3IuY2hhckNvZGVBdChzZWxlY3RvckluZGV4KSA9PT1cbiAgICAgICAgICAgICAgICAgICAgNDAgLyogTGVmdFBhcmVudGhlc2lzICovKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh1bnBhY2tQc2V1ZG9zLmhhcyhuYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzUXVvdGUoc2VsZWN0b3IuY2hhckNvZGVBdChzZWxlY3RvckluZGV4ICsgMSkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBQc2V1ZG8tc2VsZWN0b3IgJHtuYW1lfSBjYW5ub3QgYmUgcXVvdGVkYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RvckluZGV4ID0gcGFyc2VTZWxlY3RvcihkYXRhLCBzZWxlY3Rvciwgc2VsZWN0b3JJbmRleCArIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGVjdG9yLmNoYXJDb2RlQXQoc2VsZWN0b3JJbmRleCkgIT09XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgNDEgLyogUmlnaHRQYXJlbnRoZXNpcyAqLykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgTWlzc2luZyBjbG9zaW5nIHBhcmVudGhlc2lzIGluIDoke25hbWV9ICgke3NlbGVjdG9yfSlgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdG9ySW5kZXggKz0gMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPSByZWFkVmFsdWVXaXRoUGFyZW50aGVzaXMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdHJpcFF1b3Rlc0Zyb21Qc2V1ZG9zLmhhcyhuYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHF1b3QgPSBkYXRhLmNoYXJDb2RlQXQoMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHF1b3QgPT09IGRhdGEuY2hhckNvZGVBdChkYXRhLmxlbmd0aCAtIDEpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzUXVvdGUocXVvdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSA9IGRhdGEuc2xpY2UoMSwgLTEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPSB1bmVzY2FwZUNTUyhkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0b2tlbnMucHVzaCh7IHR5cGU6IFNlbGVjdG9yVHlwZS5Qc2V1ZG8sIG5hbWUsIGRhdGEgfSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIDQ0IC8qIENvbW1hICovOiB7XG4gICAgICAgICAgICAgICAgZmluYWxpemVTdWJzZWxlY3RvcigpO1xuICAgICAgICAgICAgICAgIHRva2VucyA9IFtdO1xuICAgICAgICAgICAgICAgIHN0cmlwV2hpdGVzcGFjZSgxKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgICAgICBpZiAoc2VsZWN0b3Iuc3RhcnRzV2l0aChcIi8qXCIsIHNlbGVjdG9ySW5kZXgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVuZEluZGV4ID0gc2VsZWN0b3IuaW5kZXhPZihcIiovXCIsIHNlbGVjdG9ySW5kZXggKyAyKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVuZEluZGV4IDwgMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ29tbWVudCB3YXMgbm90IHRlcm1pbmF0ZWRcIik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3JJbmRleCA9IGVuZEluZGV4ICsgMjtcbiAgICAgICAgICAgICAgICAgICAgLy8gUmVtb3ZlIGxlYWRpbmcgd2hpdGVzcGFjZVxuICAgICAgICAgICAgICAgICAgICBpZiAodG9rZW5zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RyaXBXaGl0ZXNwYWNlKDApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsZXQgbmFtZXNwYWNlID0gbnVsbDtcbiAgICAgICAgICAgICAgICBsZXQgbmFtZTtcbiAgICAgICAgICAgICAgICBpZiAoZmlyc3RDaGFyID09PSA0MiAvKiBBc3RlcmlzayAqLykge1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RvckluZGV4ICs9IDE7XG4gICAgICAgICAgICAgICAgICAgIG5hbWUgPSBcIipcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoZmlyc3RDaGFyID09PSAxMjQgLyogUGlwZSAqLykge1xuICAgICAgICAgICAgICAgICAgICBuYW1lID0gXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGVjdG9yLmNoYXJDb2RlQXQoc2VsZWN0b3JJbmRleCArIDEpID09PSAxMjQgLyogUGlwZSAqLykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWRkVHJhdmVyc2FsKFNlbGVjdG9yVHlwZS5Db2x1bW5Db21iaW5hdG9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0cmlwV2hpdGVzcGFjZSgyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHJlTmFtZS50ZXN0KHNlbGVjdG9yLnNsaWNlKHNlbGVjdG9ySW5kZXgpKSkge1xuICAgICAgICAgICAgICAgICAgICBuYW1lID0gZ2V0TmFtZSgwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrIGxvb3A7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChzZWxlY3Rvci5jaGFyQ29kZUF0KHNlbGVjdG9ySW5kZXgpID09PSAxMjQgLyogUGlwZSAqLyAmJlxuICAgICAgICAgICAgICAgICAgICBzZWxlY3Rvci5jaGFyQ29kZUF0KHNlbGVjdG9ySW5kZXggKyAxKSAhPT0gMTI0IC8qIFBpcGUgKi8pIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZXNwYWNlID0gbmFtZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGVjdG9yLmNoYXJDb2RlQXQoc2VsZWN0b3JJbmRleCArIDEpID09PVxuICAgICAgICAgICAgICAgICAgICAgICAgNDIgLyogQXN0ZXJpc2sgKi8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWUgPSBcIipcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdG9ySW5kZXggKz0gMjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWUgPSBnZXROYW1lKDEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRva2Vucy5wdXNoKG5hbWUgPT09IFwiKlwiXG4gICAgICAgICAgICAgICAgICAgID8geyB0eXBlOiBTZWxlY3RvclR5cGUuVW5pdmVyc2FsLCBuYW1lc3BhY2UgfVxuICAgICAgICAgICAgICAgICAgICA6IHsgdHlwZTogU2VsZWN0b3JUeXBlLlRhZywgbmFtZSwgbmFtZXNwYWNlIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGZpbmFsaXplU3Vic2VsZWN0b3IoKTtcbiAgICByZXR1cm4gc2VsZWN0b3JJbmRleDtcbn1cbiIsImltcG9ydCB7IFNlbGVjdG9yVHlwZSwgQXR0cmlidXRlQWN0aW9uIH0gZnJvbSBcIi4vdHlwZXNcIjtcbmNvbnN0IGF0dHJpYlZhbENoYXJzID0gW1wiXFxcXFwiLCAnXCInXTtcbmNvbnN0IHBzZXVkb1ZhbENoYXJzID0gWy4uLmF0dHJpYlZhbENoYXJzLCBcIihcIiwgXCIpXCJdO1xuY29uc3QgY2hhcnNUb0VzY2FwZUluQXR0cmlidXRlVmFsdWUgPSBuZXcgU2V0KGF0dHJpYlZhbENoYXJzLm1hcCgoYykgPT4gYy5jaGFyQ29kZUF0KDApKSk7XG5jb25zdCBjaGFyc1RvRXNjYXBlSW5Qc2V1ZG9WYWx1ZSA9IG5ldyBTZXQocHNldWRvVmFsQ2hhcnMubWFwKChjKSA9PiBjLmNoYXJDb2RlQXQoMCkpKTtcbmNvbnN0IGNoYXJzVG9Fc2NhcGVJbk5hbWUgPSBuZXcgU2V0KFtcbiAgICAuLi5wc2V1ZG9WYWxDaGFycyxcbiAgICBcIn5cIixcbiAgICBcIl5cIixcbiAgICBcIiRcIixcbiAgICBcIipcIixcbiAgICBcIitcIixcbiAgICBcIiFcIixcbiAgICBcInxcIixcbiAgICBcIjpcIixcbiAgICBcIltcIixcbiAgICBcIl1cIixcbiAgICBcIiBcIixcbiAgICBcIi5cIixcbl0ubWFwKChjKSA9PiBjLmNoYXJDb2RlQXQoMCkpKTtcbi8qKlxuICogVHVybnMgYHNlbGVjdG9yYCBiYWNrIGludG8gYSBzdHJpbmcuXG4gKlxuICogQHBhcmFtIHNlbGVjdG9yIFNlbGVjdG9yIHRvIHN0cmluZ2lmeS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0cmluZ2lmeShzZWxlY3Rvcikge1xuICAgIHJldHVybiBzZWxlY3RvclxuICAgICAgICAubWFwKCh0b2tlbikgPT4gdG9rZW4ubWFwKHN0cmluZ2lmeVRva2VuKS5qb2luKFwiXCIpKVxuICAgICAgICAuam9pbihcIiwgXCIpO1xufVxuZnVuY3Rpb24gc3RyaW5naWZ5VG9rZW4odG9rZW4sIGluZGV4LCBhcnIpIHtcbiAgICBzd2l0Y2ggKHRva2VuLnR5cGUpIHtcbiAgICAgICAgLy8gU2ltcGxlIHR5cGVzXG4gICAgICAgIGNhc2UgU2VsZWN0b3JUeXBlLkNoaWxkOlxuICAgICAgICAgICAgcmV0dXJuIGluZGV4ID09PSAwID8gXCI+IFwiIDogXCIgPiBcIjtcbiAgICAgICAgY2FzZSBTZWxlY3RvclR5cGUuUGFyZW50OlxuICAgICAgICAgICAgcmV0dXJuIGluZGV4ID09PSAwID8gXCI8IFwiIDogXCIgPCBcIjtcbiAgICAgICAgY2FzZSBTZWxlY3RvclR5cGUuU2libGluZzpcbiAgICAgICAgICAgIHJldHVybiBpbmRleCA9PT0gMCA/IFwifiBcIiA6IFwiIH4gXCI7XG4gICAgICAgIGNhc2UgU2VsZWN0b3JUeXBlLkFkamFjZW50OlxuICAgICAgICAgICAgcmV0dXJuIGluZGV4ID09PSAwID8gXCIrIFwiIDogXCIgKyBcIjtcbiAgICAgICAgY2FzZSBTZWxlY3RvclR5cGUuRGVzY2VuZGFudDpcbiAgICAgICAgICAgIHJldHVybiBcIiBcIjtcbiAgICAgICAgY2FzZSBTZWxlY3RvclR5cGUuQ29sdW1uQ29tYmluYXRvcjpcbiAgICAgICAgICAgIHJldHVybiBpbmRleCA9PT0gMCA/IFwifHwgXCIgOiBcIiB8fCBcIjtcbiAgICAgICAgY2FzZSBTZWxlY3RvclR5cGUuVW5pdmVyc2FsOlxuICAgICAgICAgICAgLy8gUmV0dXJuIGFuIGVtcHR5IHN0cmluZyBpZiB0aGUgc2VsZWN0b3IgaXNuJ3QgbmVlZGVkLlxuICAgICAgICAgICAgcmV0dXJuIHRva2VuLm5hbWVzcGFjZSA9PT0gXCIqXCIgJiZcbiAgICAgICAgICAgICAgICBpbmRleCArIDEgPCBhcnIubGVuZ3RoICYmXG4gICAgICAgICAgICAgICAgXCJuYW1lXCIgaW4gYXJyW2luZGV4ICsgMV1cbiAgICAgICAgICAgICAgICA/IFwiXCJcbiAgICAgICAgICAgICAgICA6IGAke2dldE5hbWVzcGFjZSh0b2tlbi5uYW1lc3BhY2UpfSpgO1xuICAgICAgICBjYXNlIFNlbGVjdG9yVHlwZS5UYWc6XG4gICAgICAgICAgICByZXR1cm4gZ2V0TmFtZXNwYWNlZE5hbWUodG9rZW4pO1xuICAgICAgICBjYXNlIFNlbGVjdG9yVHlwZS5Qc2V1ZG9FbGVtZW50OlxuICAgICAgICAgICAgcmV0dXJuIGA6OiR7ZXNjYXBlTmFtZSh0b2tlbi5uYW1lLCBjaGFyc1RvRXNjYXBlSW5OYW1lKX0ke3Rva2VuLmRhdGEgPT09IG51bGxcbiAgICAgICAgICAgICAgICA/IFwiXCJcbiAgICAgICAgICAgICAgICA6IGAoJHtlc2NhcGVOYW1lKHRva2VuLmRhdGEsIGNoYXJzVG9Fc2NhcGVJblBzZXVkb1ZhbHVlKX0pYH1gO1xuICAgICAgICBjYXNlIFNlbGVjdG9yVHlwZS5Qc2V1ZG86XG4gICAgICAgICAgICByZXR1cm4gYDoke2VzY2FwZU5hbWUodG9rZW4ubmFtZSwgY2hhcnNUb0VzY2FwZUluTmFtZSl9JHt0b2tlbi5kYXRhID09PSBudWxsXG4gICAgICAgICAgICAgICAgPyBcIlwiXG4gICAgICAgICAgICAgICAgOiBgKCR7dHlwZW9mIHRva2VuLmRhdGEgPT09IFwic3RyaW5nXCJcbiAgICAgICAgICAgICAgICAgICAgPyBlc2NhcGVOYW1lKHRva2VuLmRhdGEsIGNoYXJzVG9Fc2NhcGVJblBzZXVkb1ZhbHVlKVxuICAgICAgICAgICAgICAgICAgICA6IHN0cmluZ2lmeSh0b2tlbi5kYXRhKX0pYH1gO1xuICAgICAgICBjYXNlIFNlbGVjdG9yVHlwZS5BdHRyaWJ1dGU6IHtcbiAgICAgICAgICAgIGlmICh0b2tlbi5uYW1lID09PSBcImlkXCIgJiZcbiAgICAgICAgICAgICAgICB0b2tlbi5hY3Rpb24gPT09IEF0dHJpYnV0ZUFjdGlvbi5FcXVhbHMgJiZcbiAgICAgICAgICAgICAgICB0b2tlbi5pZ25vcmVDYXNlID09PSBcInF1aXJrc1wiICYmXG4gICAgICAgICAgICAgICAgIXRva2VuLm5hbWVzcGFjZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBgIyR7ZXNjYXBlTmFtZSh0b2tlbi52YWx1ZSwgY2hhcnNUb0VzY2FwZUluTmFtZSl9YDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0b2tlbi5uYW1lID09PSBcImNsYXNzXCIgJiZcbiAgICAgICAgICAgICAgICB0b2tlbi5hY3Rpb24gPT09IEF0dHJpYnV0ZUFjdGlvbi5FbGVtZW50ICYmXG4gICAgICAgICAgICAgICAgdG9rZW4uaWdub3JlQ2FzZSA9PT0gXCJxdWlya3NcIiAmJlxuICAgICAgICAgICAgICAgICF0b2tlbi5uYW1lc3BhY2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYC4ke2VzY2FwZU5hbWUodG9rZW4udmFsdWUsIGNoYXJzVG9Fc2NhcGVJbk5hbWUpfWA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBuYW1lID0gZ2V0TmFtZXNwYWNlZE5hbWUodG9rZW4pO1xuICAgICAgICAgICAgaWYgKHRva2VuLmFjdGlvbiA9PT0gQXR0cmlidXRlQWN0aW9uLkV4aXN0cykge1xuICAgICAgICAgICAgICAgIHJldHVybiBgWyR7bmFtZX1dYDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBgWyR7bmFtZX0ke2dldEFjdGlvblZhbHVlKHRva2VuLmFjdGlvbil9PVwiJHtlc2NhcGVOYW1lKHRva2VuLnZhbHVlLCBjaGFyc1RvRXNjYXBlSW5BdHRyaWJ1dGVWYWx1ZSl9XCIke3Rva2VuLmlnbm9yZUNhc2UgPT09IG51bGwgPyBcIlwiIDogdG9rZW4uaWdub3JlQ2FzZSA/IFwiIGlcIiA6IFwiIHNcIn1dYDtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGdldEFjdGlvblZhbHVlKGFjdGlvbikge1xuICAgIHN3aXRjaCAoYWN0aW9uKSB7XG4gICAgICAgIGNhc2UgQXR0cmlidXRlQWN0aW9uLkVxdWFsczpcbiAgICAgICAgICAgIHJldHVybiBcIlwiO1xuICAgICAgICBjYXNlIEF0dHJpYnV0ZUFjdGlvbi5FbGVtZW50OlxuICAgICAgICAgICAgcmV0dXJuIFwiflwiO1xuICAgICAgICBjYXNlIEF0dHJpYnV0ZUFjdGlvbi5TdGFydDpcbiAgICAgICAgICAgIHJldHVybiBcIl5cIjtcbiAgICAgICAgY2FzZSBBdHRyaWJ1dGVBY3Rpb24uRW5kOlxuICAgICAgICAgICAgcmV0dXJuIFwiJFwiO1xuICAgICAgICBjYXNlIEF0dHJpYnV0ZUFjdGlvbi5Bbnk6XG4gICAgICAgICAgICByZXR1cm4gXCIqXCI7XG4gICAgICAgIGNhc2UgQXR0cmlidXRlQWN0aW9uLk5vdDpcbiAgICAgICAgICAgIHJldHVybiBcIiFcIjtcbiAgICAgICAgY2FzZSBBdHRyaWJ1dGVBY3Rpb24uSHlwaGVuOlxuICAgICAgICAgICAgcmV0dXJuIFwifFwiO1xuICAgICAgICBjYXNlIEF0dHJpYnV0ZUFjdGlvbi5FeGlzdHM6XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTaG91bGRuJ3QgYmUgaGVyZVwiKTtcbiAgICB9XG59XG5mdW5jdGlvbiBnZXROYW1lc3BhY2VkTmFtZSh0b2tlbikge1xuICAgIHJldHVybiBgJHtnZXROYW1lc3BhY2UodG9rZW4ubmFtZXNwYWNlKX0ke2VzY2FwZU5hbWUodG9rZW4ubmFtZSwgY2hhcnNUb0VzY2FwZUluTmFtZSl9YDtcbn1cbmZ1bmN0aW9uIGdldE5hbWVzcGFjZShuYW1lc3BhY2UpIHtcbiAgICByZXR1cm4gbmFtZXNwYWNlICE9PSBudWxsXG4gICAgICAgID8gYCR7bmFtZXNwYWNlID09PSBcIipcIlxuICAgICAgICAgICAgPyBcIipcIlxuICAgICAgICAgICAgOiBlc2NhcGVOYW1lKG5hbWVzcGFjZSwgY2hhcnNUb0VzY2FwZUluTmFtZSl9fGBcbiAgICAgICAgOiBcIlwiO1xufVxuZnVuY3Rpb24gZXNjYXBlTmFtZShzdHIsIGNoYXJzVG9Fc2NhcGUpIHtcbiAgICBsZXQgbGFzdElkeCA9IDA7XG4gICAgbGV0IHJldCA9IFwiXCI7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGNoYXJzVG9Fc2NhcGUuaGFzKHN0ci5jaGFyQ29kZUF0KGkpKSkge1xuICAgICAgICAgICAgcmV0ICs9IGAke3N0ci5zbGljZShsYXN0SWR4LCBpKX1cXFxcJHtzdHIuY2hhckF0KGkpfWA7XG4gICAgICAgICAgICBsYXN0SWR4ID0gaSArIDE7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJldC5sZW5ndGggPiAwID8gcmV0ICsgc3RyLnNsaWNlKGxhc3RJZHgpIDogc3RyO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgJGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnZXMtZGVmaW5lLXByb3BlcnR5Jyk7XG5cbnZhciAkU3ludGF4RXJyb3IgPSByZXF1aXJlKCdlcy1lcnJvcnMvc3ludGF4Jyk7XG52YXIgJFR5cGVFcnJvciA9IHJlcXVpcmUoJ2VzLWVycm9ycy90eXBlJyk7XG5cbnZhciBnb3BkID0gcmVxdWlyZSgnZ29wZCcpO1xuXG4vKiogQHR5cGUge2ltcG9ydCgnLicpfSAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkZWZpbmVEYXRhUHJvcGVydHkoXG5cdG9iaixcblx0cHJvcGVydHksXG5cdHZhbHVlXG4pIHtcblx0aWYgKCFvYmogfHwgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnICYmIHR5cGVvZiBvYmogIT09ICdmdW5jdGlvbicpKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ2BvYmpgIG11c3QgYmUgYW4gb2JqZWN0IG9yIGEgZnVuY3Rpb25gJyk7XG5cdH1cblx0aWYgKHR5cGVvZiBwcm9wZXJ0eSAhPT0gJ3N0cmluZycgJiYgdHlwZW9mIHByb3BlcnR5ICE9PSAnc3ltYm9sJykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdgcHJvcGVydHlgIG11c3QgYmUgYSBzdHJpbmcgb3IgYSBzeW1ib2xgJyk7XG5cdH1cblx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIHR5cGVvZiBhcmd1bWVudHNbM10gIT09ICdib29sZWFuJyAmJiBhcmd1bWVudHNbM10gIT09IG51bGwpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignYG5vbkVudW1lcmFibGVgLCBpZiBwcm92aWRlZCwgbXVzdCBiZSBhIGJvb2xlYW4gb3IgbnVsbCcpO1xuXHR9XG5cdGlmIChhcmd1bWVudHMubGVuZ3RoID4gNCAmJiB0eXBlb2YgYXJndW1lbnRzWzRdICE9PSAnYm9vbGVhbicgJiYgYXJndW1lbnRzWzRdICE9PSBudWxsKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ2Bub25Xcml0YWJsZWAsIGlmIHByb3ZpZGVkLCBtdXN0IGJlIGEgYm9vbGVhbiBvciBudWxsJyk7XG5cdH1cblx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPiA1ICYmIHR5cGVvZiBhcmd1bWVudHNbNV0gIT09ICdib29sZWFuJyAmJiBhcmd1bWVudHNbNV0gIT09IG51bGwpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignYG5vbkNvbmZpZ3VyYWJsZWAsIGlmIHByb3ZpZGVkLCBtdXN0IGJlIGEgYm9vbGVhbiBvciBudWxsJyk7XG5cdH1cblx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPiA2ICYmIHR5cGVvZiBhcmd1bWVudHNbNl0gIT09ICdib29sZWFuJykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdgbG9vc2VgLCBpZiBwcm92aWRlZCwgbXVzdCBiZSBhIGJvb2xlYW4nKTtcblx0fVxuXG5cdHZhciBub25FbnVtZXJhYmxlID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgPyBhcmd1bWVudHNbM10gOiBudWxsO1xuXHR2YXIgbm9uV3JpdGFibGUgPSBhcmd1bWVudHMubGVuZ3RoID4gNCA/IGFyZ3VtZW50c1s0XSA6IG51bGw7XG5cdHZhciBub25Db25maWd1cmFibGUgPSBhcmd1bWVudHMubGVuZ3RoID4gNSA/IGFyZ3VtZW50c1s1XSA6IG51bGw7XG5cdHZhciBsb29zZSA9IGFyZ3VtZW50cy5sZW5ndGggPiA2ID8gYXJndW1lbnRzWzZdIDogZmFsc2U7XG5cblx0LyogQHR5cGUge2ZhbHNlIHwgVHlwZWRQcm9wZXJ0eURlc2NyaXB0b3I8dW5rbm93bj59ICovXG5cdHZhciBkZXNjID0gISFnb3BkICYmIGdvcGQob2JqLCBwcm9wZXJ0eSk7XG5cblx0aWYgKCRkZWZpbmVQcm9wZXJ0eSkge1xuXHRcdCRkZWZpbmVQcm9wZXJ0eShvYmosIHByb3BlcnR5LCB7XG5cdFx0XHRjb25maWd1cmFibGU6IG5vbkNvbmZpZ3VyYWJsZSA9PT0gbnVsbCAmJiBkZXNjID8gZGVzYy5jb25maWd1cmFibGUgOiAhbm9uQ29uZmlndXJhYmxlLFxuXHRcdFx0ZW51bWVyYWJsZTogbm9uRW51bWVyYWJsZSA9PT0gbnVsbCAmJiBkZXNjID8gZGVzYy5lbnVtZXJhYmxlIDogIW5vbkVudW1lcmFibGUsXG5cdFx0XHR2YWx1ZTogdmFsdWUsXG5cdFx0XHR3cml0YWJsZTogbm9uV3JpdGFibGUgPT09IG51bGwgJiYgZGVzYyA/IGRlc2Mud3JpdGFibGUgOiAhbm9uV3JpdGFibGVcblx0XHR9KTtcblx0fSBlbHNlIGlmIChsb29zZSB8fCAoIW5vbkVudW1lcmFibGUgJiYgIW5vbldyaXRhYmxlICYmICFub25Db25maWd1cmFibGUpKSB7XG5cdFx0Ly8gbXVzdCBmYWxsIGJhY2sgdG8gW1tTZXRdXSwgYW5kIHdhcyBub3QgZXhwbGljaXRseSBhc2tlZCB0byBtYWtlIG5vbi1lbnVtZXJhYmxlLCBub24td3JpdGFibGUsIG9yIG5vbi1jb25maWd1cmFibGVcblx0XHRvYmpbcHJvcGVydHldID0gdmFsdWU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cblx0fSBlbHNlIHtcblx0XHR0aHJvdyBuZXcgJFN5bnRheEVycm9yKCdUaGlzIGVudmlyb25tZW50IGRvZXMgbm90IHN1cHBvcnQgZGVmaW5pbmcgYSBwcm9wZXJ0eSBhcyBub24tY29uZmlndXJhYmxlLCBub24td3JpdGFibGUsIG9yIG5vbi1lbnVtZXJhYmxlLicpO1xuXHR9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIga2V5cyA9IHJlcXVpcmUoJ29iamVjdC1rZXlzJyk7XG52YXIgaGFzU3ltYm9scyA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIFN5bWJvbCgnZm9vJykgPT09ICdzeW1ib2wnO1xuXG52YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIGNvbmNhdCA9IEFycmF5LnByb3RvdHlwZS5jb25jYXQ7XG52YXIgZGVmaW5lRGF0YVByb3BlcnR5ID0gcmVxdWlyZSgnZGVmaW5lLWRhdGEtcHJvcGVydHknKTtcblxudmFyIGlzRnVuY3Rpb24gPSBmdW5jdGlvbiAoZm4pIHtcblx0cmV0dXJuIHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJyAmJiB0b1N0ci5jYWxsKGZuKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn07XG5cbnZhciBzdXBwb3J0c0Rlc2NyaXB0b3JzID0gcmVxdWlyZSgnaGFzLXByb3BlcnR5LWRlc2NyaXB0b3JzJykoKTtcblxudmFyIGRlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gKG9iamVjdCwgbmFtZSwgdmFsdWUsIHByZWRpY2F0ZSkge1xuXHRpZiAobmFtZSBpbiBvYmplY3QpIHtcblx0XHRpZiAocHJlZGljYXRlID09PSB0cnVlKSB7XG5cdFx0XHRpZiAob2JqZWN0W25hbWVdID09PSB2YWx1ZSkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmICghaXNGdW5jdGlvbihwcmVkaWNhdGUpIHx8ICFwcmVkaWNhdGUoKSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0fVxuXG5cdGlmIChzdXBwb3J0c0Rlc2NyaXB0b3JzKSB7XG5cdFx0ZGVmaW5lRGF0YVByb3BlcnR5KG9iamVjdCwgbmFtZSwgdmFsdWUsIHRydWUpO1xuXHR9IGVsc2Uge1xuXHRcdGRlZmluZURhdGFQcm9wZXJ0eShvYmplY3QsIG5hbWUsIHZhbHVlKTtcblx0fVxufTtcblxudmFyIGRlZmluZVByb3BlcnRpZXMgPSBmdW5jdGlvbiAob2JqZWN0LCBtYXApIHtcblx0dmFyIHByZWRpY2F0ZXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHt9O1xuXHR2YXIgcHJvcHMgPSBrZXlzKG1hcCk7XG5cdGlmIChoYXNTeW1ib2xzKSB7XG5cdFx0cHJvcHMgPSBjb25jYXQuY2FsbChwcm9wcywgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhtYXApKTtcblx0fVxuXHRmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSArPSAxKSB7XG5cdFx0ZGVmaW5lUHJvcGVydHkob2JqZWN0LCBwcm9wc1tpXSwgbWFwW3Byb3BzW2ldXSwgcHJlZGljYXRlc1twcm9wc1tpXV0pO1xuXHR9XG59O1xuXG5kZWZpbmVQcm9wZXJ0aWVzLnN1cHBvcnRzRGVzY3JpcHRvcnMgPSAhIXN1cHBvcnRzRGVzY3JpcHRvcnM7XG5cbm1vZHVsZS5leHBvcnRzID0gZGVmaW5lUHJvcGVydGllcztcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5hdHRyaWJ1dGVOYW1lcyA9IGV4cG9ydHMuZWxlbWVudE5hbWVzID0gdm9pZCAwO1xuZXhwb3J0cy5lbGVtZW50TmFtZXMgPSBuZXcgTWFwKFtcbiAgICBcImFsdEdseXBoXCIsXG4gICAgXCJhbHRHbHlwaERlZlwiLFxuICAgIFwiYWx0R2x5cGhJdGVtXCIsXG4gICAgXCJhbmltYXRlQ29sb3JcIixcbiAgICBcImFuaW1hdGVNb3Rpb25cIixcbiAgICBcImFuaW1hdGVUcmFuc2Zvcm1cIixcbiAgICBcImNsaXBQYXRoXCIsXG4gICAgXCJmZUJsZW5kXCIsXG4gICAgXCJmZUNvbG9yTWF0cml4XCIsXG4gICAgXCJmZUNvbXBvbmVudFRyYW5zZmVyXCIsXG4gICAgXCJmZUNvbXBvc2l0ZVwiLFxuICAgIFwiZmVDb252b2x2ZU1hdHJpeFwiLFxuICAgIFwiZmVEaWZmdXNlTGlnaHRpbmdcIixcbiAgICBcImZlRGlzcGxhY2VtZW50TWFwXCIsXG4gICAgXCJmZURpc3RhbnRMaWdodFwiLFxuICAgIFwiZmVEcm9wU2hhZG93XCIsXG4gICAgXCJmZUZsb29kXCIsXG4gICAgXCJmZUZ1bmNBXCIsXG4gICAgXCJmZUZ1bmNCXCIsXG4gICAgXCJmZUZ1bmNHXCIsXG4gICAgXCJmZUZ1bmNSXCIsXG4gICAgXCJmZUdhdXNzaWFuQmx1clwiLFxuICAgIFwiZmVJbWFnZVwiLFxuICAgIFwiZmVNZXJnZVwiLFxuICAgIFwiZmVNZXJnZU5vZGVcIixcbiAgICBcImZlTW9ycGhvbG9neVwiLFxuICAgIFwiZmVPZmZzZXRcIixcbiAgICBcImZlUG9pbnRMaWdodFwiLFxuICAgIFwiZmVTcGVjdWxhckxpZ2h0aW5nXCIsXG4gICAgXCJmZVNwb3RMaWdodFwiLFxuICAgIFwiZmVUaWxlXCIsXG4gICAgXCJmZVR1cmJ1bGVuY2VcIixcbiAgICBcImZvcmVpZ25PYmplY3RcIixcbiAgICBcImdseXBoUmVmXCIsXG4gICAgXCJsaW5lYXJHcmFkaWVudFwiLFxuICAgIFwicmFkaWFsR3JhZGllbnRcIixcbiAgICBcInRleHRQYXRoXCIsXG5dLm1hcChmdW5jdGlvbiAodmFsKSB7IHJldHVybiBbdmFsLnRvTG93ZXJDYXNlKCksIHZhbF07IH0pKTtcbmV4cG9ydHMuYXR0cmlidXRlTmFtZXMgPSBuZXcgTWFwKFtcbiAgICBcImRlZmluaXRpb25VUkxcIixcbiAgICBcImF0dHJpYnV0ZU5hbWVcIixcbiAgICBcImF0dHJpYnV0ZVR5cGVcIixcbiAgICBcImJhc2VGcmVxdWVuY3lcIixcbiAgICBcImJhc2VQcm9maWxlXCIsXG4gICAgXCJjYWxjTW9kZVwiLFxuICAgIFwiY2xpcFBhdGhVbml0c1wiLFxuICAgIFwiZGlmZnVzZUNvbnN0YW50XCIsXG4gICAgXCJlZGdlTW9kZVwiLFxuICAgIFwiZmlsdGVyVW5pdHNcIixcbiAgICBcImdseXBoUmVmXCIsXG4gICAgXCJncmFkaWVudFRyYW5zZm9ybVwiLFxuICAgIFwiZ3JhZGllbnRVbml0c1wiLFxuICAgIFwia2VybmVsTWF0cml4XCIsXG4gICAgXCJrZXJuZWxVbml0TGVuZ3RoXCIsXG4gICAgXCJrZXlQb2ludHNcIixcbiAgICBcImtleVNwbGluZXNcIixcbiAgICBcImtleVRpbWVzXCIsXG4gICAgXCJsZW5ndGhBZGp1c3RcIixcbiAgICBcImxpbWl0aW5nQ29uZUFuZ2xlXCIsXG4gICAgXCJtYXJrZXJIZWlnaHRcIixcbiAgICBcIm1hcmtlclVuaXRzXCIsXG4gICAgXCJtYXJrZXJXaWR0aFwiLFxuICAgIFwibWFza0NvbnRlbnRVbml0c1wiLFxuICAgIFwibWFza1VuaXRzXCIsXG4gICAgXCJudW1PY3RhdmVzXCIsXG4gICAgXCJwYXRoTGVuZ3RoXCIsXG4gICAgXCJwYXR0ZXJuQ29udGVudFVuaXRzXCIsXG4gICAgXCJwYXR0ZXJuVHJhbnNmb3JtXCIsXG4gICAgXCJwYXR0ZXJuVW5pdHNcIixcbiAgICBcInBvaW50c0F0WFwiLFxuICAgIFwicG9pbnRzQXRZXCIsXG4gICAgXCJwb2ludHNBdFpcIixcbiAgICBcInByZXNlcnZlQWxwaGFcIixcbiAgICBcInByZXNlcnZlQXNwZWN0UmF0aW9cIixcbiAgICBcInByaW1pdGl2ZVVuaXRzXCIsXG4gICAgXCJyZWZYXCIsXG4gICAgXCJyZWZZXCIsXG4gICAgXCJyZXBlYXRDb3VudFwiLFxuICAgIFwicmVwZWF0RHVyXCIsXG4gICAgXCJyZXF1aXJlZEV4dGVuc2lvbnNcIixcbiAgICBcInJlcXVpcmVkRmVhdHVyZXNcIixcbiAgICBcInNwZWN1bGFyQ29uc3RhbnRcIixcbiAgICBcInNwZWN1bGFyRXhwb25lbnRcIixcbiAgICBcInNwcmVhZE1ldGhvZFwiLFxuICAgIFwic3RhcnRPZmZzZXRcIixcbiAgICBcInN0ZERldmlhdGlvblwiLFxuICAgIFwic3RpdGNoVGlsZXNcIixcbiAgICBcInN1cmZhY2VTY2FsZVwiLFxuICAgIFwic3lzdGVtTGFuZ3VhZ2VcIixcbiAgICBcInRhYmxlVmFsdWVzXCIsXG4gICAgXCJ0YXJnZXRYXCIsXG4gICAgXCJ0YXJnZXRZXCIsXG4gICAgXCJ0ZXh0TGVuZ3RoXCIsXG4gICAgXCJ2aWV3Qm94XCIsXG4gICAgXCJ2aWV3VGFyZ2V0XCIsXG4gICAgXCJ4Q2hhbm5lbFNlbGVjdG9yXCIsXG4gICAgXCJ5Q2hhbm5lbFNlbGVjdG9yXCIsXG4gICAgXCJ6b29tQW5kUGFuXCIsXG5dLm1hcChmdW5jdGlvbiAodmFsKSB7IHJldHVybiBbdmFsLnRvTG93ZXJDYXNlKCksIHZhbF07IH0pKTtcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgZnVuY3Rpb24gKCkge1xuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbih0KSB7XG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSlcbiAgICAgICAgICAgICAgICB0W3BdID0gc1twXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdDtcbiAgICB9O1xuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufTtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59KTtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5yZW5kZXIgPSB2b2lkIDA7XG4vKlxuICogTW9kdWxlIGRlcGVuZGVuY2llc1xuICovXG52YXIgRWxlbWVudFR5cGUgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcImRvbWVsZW1lbnR0eXBlXCIpKTtcbnZhciBlbnRpdGllc18xID0gcmVxdWlyZShcImVudGl0aWVzXCIpO1xuLyoqXG4gKiBNaXhlZC1jYXNlIFNWRyBhbmQgTWF0aE1MIHRhZ3MgJiBhdHRyaWJ1dGVzXG4gKiByZWNvZ25pemVkIGJ5IHRoZSBIVE1MIHBhcnNlci5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3BhcnNpbmcuaHRtbCNwYXJzaW5nLW1haW4taW5mb3JlaWduXG4gKi9cbnZhciBmb3JlaWduTmFtZXNfanNfMSA9IHJlcXVpcmUoXCIuL2ZvcmVpZ25OYW1lcy5qc1wiKTtcbnZhciB1bmVuY29kZWRFbGVtZW50cyA9IG5ldyBTZXQoW1xuICAgIFwic3R5bGVcIixcbiAgICBcInNjcmlwdFwiLFxuICAgIFwieG1wXCIsXG4gICAgXCJpZnJhbWVcIixcbiAgICBcIm5vZW1iZWRcIixcbiAgICBcIm5vZnJhbWVzXCIsXG4gICAgXCJwbGFpbnRleHRcIixcbiAgICBcIm5vc2NyaXB0XCIsXG5dKTtcbmZ1bmN0aW9uIHJlcGxhY2VRdW90ZXModmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUucmVwbGFjZSgvXCIvZywgXCImcXVvdDtcIik7XG59XG4vKipcbiAqIEZvcm1hdCBhdHRyaWJ1dGVzXG4gKi9cbmZ1bmN0aW9uIGZvcm1hdEF0dHJpYnV0ZXMoYXR0cmlidXRlcywgb3B0cykge1xuICAgIHZhciBfYTtcbiAgICBpZiAoIWF0dHJpYnV0ZXMpXG4gICAgICAgIHJldHVybjtcbiAgICB2YXIgZW5jb2RlID0gKChfYSA9IG9wdHMuZW5jb2RlRW50aXRpZXMpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IG9wdHMuZGVjb2RlRW50aXRpZXMpID09PSBmYWxzZVxuICAgICAgICA/IHJlcGxhY2VRdW90ZXNcbiAgICAgICAgOiBvcHRzLnhtbE1vZGUgfHwgb3B0cy5lbmNvZGVFbnRpdGllcyAhPT0gXCJ1dGY4XCJcbiAgICAgICAgICAgID8gZW50aXRpZXNfMS5lbmNvZGVYTUxcbiAgICAgICAgICAgIDogZW50aXRpZXNfMS5lc2NhcGVBdHRyaWJ1dGU7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpXG4gICAgICAgIC5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICB2YXIgdmFsdWUgPSAoX2EgPSBhdHRyaWJ1dGVzW2tleV0pICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IFwiXCI7XG4gICAgICAgIGlmIChvcHRzLnhtbE1vZGUgPT09IFwiZm9yZWlnblwiKSB7XG4gICAgICAgICAgICAvKiBGaXggdXAgbWl4ZWQtY2FzZSBhdHRyaWJ1dGUgbmFtZXMgKi9cbiAgICAgICAgICAgIGtleSA9IChfYiA9IGZvcmVpZ25OYW1lc19qc18xLmF0dHJpYnV0ZU5hbWVzLmdldChrZXkpKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBrZXk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFvcHRzLmVtcHR5QXR0cnMgJiYgIW9wdHMueG1sTW9kZSAmJiB2YWx1ZSA9PT0gXCJcIikge1xuICAgICAgICAgICAgcmV0dXJuIGtleTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gXCJcIi5jb25jYXQoa2V5LCBcIj1cXFwiXCIpLmNvbmNhdChlbmNvZGUodmFsdWUpLCBcIlxcXCJcIik7XG4gICAgfSlcbiAgICAgICAgLmpvaW4oXCIgXCIpO1xufVxuLyoqXG4gKiBTZWxmLWVuY2xvc2luZyB0YWdzXG4gKi9cbnZhciBzaW5nbGVUYWcgPSBuZXcgU2V0KFtcbiAgICBcImFyZWFcIixcbiAgICBcImJhc2VcIixcbiAgICBcImJhc2Vmb250XCIsXG4gICAgXCJiclwiLFxuICAgIFwiY29sXCIsXG4gICAgXCJjb21tYW5kXCIsXG4gICAgXCJlbWJlZFwiLFxuICAgIFwiZnJhbWVcIixcbiAgICBcImhyXCIsXG4gICAgXCJpbWdcIixcbiAgICBcImlucHV0XCIsXG4gICAgXCJpc2luZGV4XCIsXG4gICAgXCJrZXlnZW5cIixcbiAgICBcImxpbmtcIixcbiAgICBcIm1ldGFcIixcbiAgICBcInBhcmFtXCIsXG4gICAgXCJzb3VyY2VcIixcbiAgICBcInRyYWNrXCIsXG4gICAgXCJ3YnJcIixcbl0pO1xuLyoqXG4gKiBSZW5kZXJzIGEgRE9NIG5vZGUgb3IgYW4gYXJyYXkgb2YgRE9NIG5vZGVzIHRvIGEgc3RyaW5nLlxuICpcbiAqIENhbiBiZSB0aG91Z2h0IG9mIGFzIHRoZSBlcXVpdmFsZW50IG9mIHRoZSBgb3V0ZXJIVE1MYCBvZiB0aGUgcGFzc2VkIG5vZGUocykuXG4gKlxuICogQHBhcmFtIG5vZGUgTm9kZSB0byBiZSByZW5kZXJlZC5cbiAqIEBwYXJhbSBvcHRpb25zIENoYW5nZXMgc2VyaWFsaXphdGlvbiBiZWhhdmlvclxuICovXG5mdW5jdGlvbiByZW5kZXIobm9kZSwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgdmFyIG5vZGVzID0gXCJsZW5ndGhcIiBpbiBub2RlID8gbm9kZSA6IFtub2RlXTtcbiAgICB2YXIgb3V0cHV0ID0gXCJcIjtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIG91dHB1dCArPSByZW5kZXJOb2RlKG5vZGVzW2ldLCBvcHRpb25zKTtcbiAgICB9XG4gICAgcmV0dXJuIG91dHB1dDtcbn1cbmV4cG9ydHMucmVuZGVyID0gcmVuZGVyO1xuZXhwb3J0cy5kZWZhdWx0ID0gcmVuZGVyO1xuZnVuY3Rpb24gcmVuZGVyTm9kZShub2RlLCBvcHRpb25zKSB7XG4gICAgc3dpdGNoIChub2RlLnR5cGUpIHtcbiAgICAgICAgY2FzZSBFbGVtZW50VHlwZS5Sb290OlxuICAgICAgICAgICAgcmV0dXJuIHJlbmRlcihub2RlLmNoaWxkcmVuLCBvcHRpb25zKTtcbiAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBXZSBkb24ndCB1c2UgYERvY3R5cGVgIHlldFxuICAgICAgICBjYXNlIEVsZW1lbnRUeXBlLkRvY3R5cGU6XG4gICAgICAgIGNhc2UgRWxlbWVudFR5cGUuRGlyZWN0aXZlOlxuICAgICAgICAgICAgcmV0dXJuIHJlbmRlckRpcmVjdGl2ZShub2RlKTtcbiAgICAgICAgY2FzZSBFbGVtZW50VHlwZS5Db21tZW50OlxuICAgICAgICAgICAgcmV0dXJuIHJlbmRlckNvbW1lbnQobm9kZSk7XG4gICAgICAgIGNhc2UgRWxlbWVudFR5cGUuQ0RBVEE6XG4gICAgICAgICAgICByZXR1cm4gcmVuZGVyQ2RhdGEobm9kZSk7XG4gICAgICAgIGNhc2UgRWxlbWVudFR5cGUuU2NyaXB0OlxuICAgICAgICBjYXNlIEVsZW1lbnRUeXBlLlN0eWxlOlxuICAgICAgICBjYXNlIEVsZW1lbnRUeXBlLlRhZzpcbiAgICAgICAgICAgIHJldHVybiByZW5kZXJUYWcobm9kZSwgb3B0aW9ucyk7XG4gICAgICAgIGNhc2UgRWxlbWVudFR5cGUuVGV4dDpcbiAgICAgICAgICAgIHJldHVybiByZW5kZXJUZXh0KG5vZGUsIG9wdGlvbnMpO1xuICAgIH1cbn1cbnZhciBmb3JlaWduTW9kZUludGVncmF0aW9uUG9pbnRzID0gbmV3IFNldChbXG4gICAgXCJtaVwiLFxuICAgIFwibW9cIixcbiAgICBcIm1uXCIsXG4gICAgXCJtc1wiLFxuICAgIFwibXRleHRcIixcbiAgICBcImFubm90YXRpb24teG1sXCIsXG4gICAgXCJmb3JlaWduT2JqZWN0XCIsXG4gICAgXCJkZXNjXCIsXG4gICAgXCJ0aXRsZVwiLFxuXSk7XG52YXIgZm9yZWlnbkVsZW1lbnRzID0gbmV3IFNldChbXCJzdmdcIiwgXCJtYXRoXCJdKTtcbmZ1bmN0aW9uIHJlbmRlclRhZyhlbGVtLCBvcHRzKSB7XG4gICAgdmFyIF9hO1xuICAgIC8vIEhhbmRsZSBTVkcgLyBNYXRoTUwgaW4gSFRNTFxuICAgIGlmIChvcHRzLnhtbE1vZGUgPT09IFwiZm9yZWlnblwiKSB7XG4gICAgICAgIC8qIEZpeCB1cCBtaXhlZC1jYXNlIGVsZW1lbnQgbmFtZXMgKi9cbiAgICAgICAgZWxlbS5uYW1lID0gKF9hID0gZm9yZWlnbk5hbWVzX2pzXzEuZWxlbWVudE5hbWVzLmdldChlbGVtLm5hbWUpKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBlbGVtLm5hbWU7XG4gICAgICAgIC8qIEV4aXQgZm9yZWlnbiBtb2RlIGF0IGludGVncmF0aW9uIHBvaW50cyAqL1xuICAgICAgICBpZiAoZWxlbS5wYXJlbnQgJiZcbiAgICAgICAgICAgIGZvcmVpZ25Nb2RlSW50ZWdyYXRpb25Qb2ludHMuaGFzKGVsZW0ucGFyZW50Lm5hbWUpKSB7XG4gICAgICAgICAgICBvcHRzID0gX19hc3NpZ24oX19hc3NpZ24oe30sIG9wdHMpLCB7IHhtbE1vZGU6IGZhbHNlIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICghb3B0cy54bWxNb2RlICYmIGZvcmVpZ25FbGVtZW50cy5oYXMoZWxlbS5uYW1lKSkge1xuICAgICAgICBvcHRzID0gX19hc3NpZ24oX19hc3NpZ24oe30sIG9wdHMpLCB7IHhtbE1vZGU6IFwiZm9yZWlnblwiIH0pO1xuICAgIH1cbiAgICB2YXIgdGFnID0gXCI8XCIuY29uY2F0KGVsZW0ubmFtZSk7XG4gICAgdmFyIGF0dHJpYnMgPSBmb3JtYXRBdHRyaWJ1dGVzKGVsZW0uYXR0cmlicywgb3B0cyk7XG4gICAgaWYgKGF0dHJpYnMpIHtcbiAgICAgICAgdGFnICs9IFwiIFwiLmNvbmNhdChhdHRyaWJzKTtcbiAgICB9XG4gICAgaWYgKGVsZW0uY2hpbGRyZW4ubGVuZ3RoID09PSAwICYmXG4gICAgICAgIChvcHRzLnhtbE1vZGVcbiAgICAgICAgICAgID8gLy8gSW4gWE1MIG1vZGUgb3IgZm9yZWlnbiBtb2RlLCBhbmQgdXNlciBoYXNuJ3QgZXhwbGljaXRseSB0dXJuZWQgb2ZmIHNlbGYtY2xvc2luZyB0YWdzXG4gICAgICAgICAgICAgICAgb3B0cy5zZWxmQ2xvc2luZ1RhZ3MgIT09IGZhbHNlXG4gICAgICAgICAgICA6IC8vIFVzZXIgZXhwbGljaXRseSBhc2tlZCBmb3Igc2VsZi1jbG9zaW5nIHRhZ3MsIGV2ZW4gaW4gSFRNTCBtb2RlXG4gICAgICAgICAgICAgICAgb3B0cy5zZWxmQ2xvc2luZ1RhZ3MgJiYgc2luZ2xlVGFnLmhhcyhlbGVtLm5hbWUpKSkge1xuICAgICAgICBpZiAoIW9wdHMueG1sTW9kZSlcbiAgICAgICAgICAgIHRhZyArPSBcIiBcIjtcbiAgICAgICAgdGFnICs9IFwiLz5cIjtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRhZyArPSBcIj5cIjtcbiAgICAgICAgaWYgKGVsZW0uY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdGFnICs9IHJlbmRlcihlbGVtLmNoaWxkcmVuLCBvcHRzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0cy54bWxNb2RlIHx8ICFzaW5nbGVUYWcuaGFzKGVsZW0ubmFtZSkpIHtcbiAgICAgICAgICAgIHRhZyArPSBcIjwvXCIuY29uY2F0KGVsZW0ubmFtZSwgXCI+XCIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0YWc7XG59XG5mdW5jdGlvbiByZW5kZXJEaXJlY3RpdmUoZWxlbSkge1xuICAgIHJldHVybiBcIjxcIi5jb25jYXQoZWxlbS5kYXRhLCBcIj5cIik7XG59XG5mdW5jdGlvbiByZW5kZXJUZXh0KGVsZW0sIG9wdHMpIHtcbiAgICB2YXIgX2E7XG4gICAgdmFyIGRhdGEgPSBlbGVtLmRhdGEgfHwgXCJcIjtcbiAgICAvLyBJZiBlbnRpdGllcyB3ZXJlbid0IGRlY29kZWQsIG5vIG5lZWQgdG8gZW5jb2RlIHRoZW0gYmFja1xuICAgIGlmICgoKF9hID0gb3B0cy5lbmNvZGVFbnRpdGllcykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogb3B0cy5kZWNvZGVFbnRpdGllcykgIT09IGZhbHNlICYmXG4gICAgICAgICEoIW9wdHMueG1sTW9kZSAmJlxuICAgICAgICAgICAgZWxlbS5wYXJlbnQgJiZcbiAgICAgICAgICAgIHVuZW5jb2RlZEVsZW1lbnRzLmhhcyhlbGVtLnBhcmVudC5uYW1lKSkpIHtcbiAgICAgICAgZGF0YSA9XG4gICAgICAgICAgICBvcHRzLnhtbE1vZGUgfHwgb3B0cy5lbmNvZGVFbnRpdGllcyAhPT0gXCJ1dGY4XCJcbiAgICAgICAgICAgICAgICA/ICgwLCBlbnRpdGllc18xLmVuY29kZVhNTCkoZGF0YSlcbiAgICAgICAgICAgICAgICA6ICgwLCBlbnRpdGllc18xLmVzY2FwZVRleHQpKGRhdGEpO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbn1cbmZ1bmN0aW9uIHJlbmRlckNkYXRhKGVsZW0pIHtcbiAgICByZXR1cm4gXCI8IVtDREFUQVtcIi5jb25jYXQoZWxlbS5jaGlsZHJlblswXS5kYXRhLCBcIl1dPlwiKTtcbn1cbmZ1bmN0aW9uIHJlbmRlckNvbW1lbnQoZWxlbSkge1xuICAgIHJldHVybiBcIjwhLS1cIi5jb25jYXQoZWxlbS5kYXRhLCBcIi0tPlwiKTtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Eb2N0eXBlID0gZXhwb3J0cy5DREFUQSA9IGV4cG9ydHMuVGFnID0gZXhwb3J0cy5TdHlsZSA9IGV4cG9ydHMuU2NyaXB0ID0gZXhwb3J0cy5Db21tZW50ID0gZXhwb3J0cy5EaXJlY3RpdmUgPSBleHBvcnRzLlRleHQgPSBleHBvcnRzLlJvb3QgPSBleHBvcnRzLmlzVGFnID0gZXhwb3J0cy5FbGVtZW50VHlwZSA9IHZvaWQgMDtcbi8qKiBUeXBlcyBvZiBlbGVtZW50cyBmb3VuZCBpbiBodG1scGFyc2VyMidzIERPTSAqL1xudmFyIEVsZW1lbnRUeXBlO1xuKGZ1bmN0aW9uIChFbGVtZW50VHlwZSkge1xuICAgIC8qKiBUeXBlIGZvciB0aGUgcm9vdCBlbGVtZW50IG9mIGEgZG9jdW1lbnQgKi9cbiAgICBFbGVtZW50VHlwZVtcIlJvb3RcIl0gPSBcInJvb3RcIjtcbiAgICAvKiogVHlwZSBmb3IgVGV4dCAqL1xuICAgIEVsZW1lbnRUeXBlW1wiVGV4dFwiXSA9IFwidGV4dFwiO1xuICAgIC8qKiBUeXBlIGZvciA8PyAuLi4gPz4gKi9cbiAgICBFbGVtZW50VHlwZVtcIkRpcmVjdGl2ZVwiXSA9IFwiZGlyZWN0aXZlXCI7XG4gICAgLyoqIFR5cGUgZm9yIDwhLS0gLi4uIC0tPiAqL1xuICAgIEVsZW1lbnRUeXBlW1wiQ29tbWVudFwiXSA9IFwiY29tbWVudFwiO1xuICAgIC8qKiBUeXBlIGZvciA8c2NyaXB0PiB0YWdzICovXG4gICAgRWxlbWVudFR5cGVbXCJTY3JpcHRcIl0gPSBcInNjcmlwdFwiO1xuICAgIC8qKiBUeXBlIGZvciA8c3R5bGU+IHRhZ3MgKi9cbiAgICBFbGVtZW50VHlwZVtcIlN0eWxlXCJdID0gXCJzdHlsZVwiO1xuICAgIC8qKiBUeXBlIGZvciBBbnkgdGFnICovXG4gICAgRWxlbWVudFR5cGVbXCJUYWdcIl0gPSBcInRhZ1wiO1xuICAgIC8qKiBUeXBlIGZvciA8IVtDREFUQVsgLi4uIF1dPiAqL1xuICAgIEVsZW1lbnRUeXBlW1wiQ0RBVEFcIl0gPSBcImNkYXRhXCI7XG4gICAgLyoqIFR5cGUgZm9yIDwhZG9jdHlwZSAuLi4+ICovXG4gICAgRWxlbWVudFR5cGVbXCJEb2N0eXBlXCJdID0gXCJkb2N0eXBlXCI7XG59KShFbGVtZW50VHlwZSA9IGV4cG9ydHMuRWxlbWVudFR5cGUgfHwgKGV4cG9ydHMuRWxlbWVudFR5cGUgPSB7fSkpO1xuLyoqXG4gKiBUZXN0cyB3aGV0aGVyIGFuIGVsZW1lbnQgaXMgYSB0YWcgb3Igbm90LlxuICpcbiAqIEBwYXJhbSBlbGVtIEVsZW1lbnQgdG8gdGVzdFxuICovXG5mdW5jdGlvbiBpc1RhZyhlbGVtKSB7XG4gICAgcmV0dXJuIChlbGVtLnR5cGUgPT09IEVsZW1lbnRUeXBlLlRhZyB8fFxuICAgICAgICBlbGVtLnR5cGUgPT09IEVsZW1lbnRUeXBlLlNjcmlwdCB8fFxuICAgICAgICBlbGVtLnR5cGUgPT09IEVsZW1lbnRUeXBlLlN0eWxlKTtcbn1cbmV4cG9ydHMuaXNUYWcgPSBpc1RhZztcbi8vIEV4cG9ydHMgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG4vKiogVHlwZSBmb3IgdGhlIHJvb3QgZWxlbWVudCBvZiBhIGRvY3VtZW50ICovXG5leHBvcnRzLlJvb3QgPSBFbGVtZW50VHlwZS5Sb290O1xuLyoqIFR5cGUgZm9yIFRleHQgKi9cbmV4cG9ydHMuVGV4dCA9IEVsZW1lbnRUeXBlLlRleHQ7XG4vKiogVHlwZSBmb3IgPD8gLi4uID8+ICovXG5leHBvcnRzLkRpcmVjdGl2ZSA9IEVsZW1lbnRUeXBlLkRpcmVjdGl2ZTtcbi8qKiBUeXBlIGZvciA8IS0tIC4uLiAtLT4gKi9cbmV4cG9ydHMuQ29tbWVudCA9IEVsZW1lbnRUeXBlLkNvbW1lbnQ7XG4vKiogVHlwZSBmb3IgPHNjcmlwdD4gdGFncyAqL1xuZXhwb3J0cy5TY3JpcHQgPSBFbGVtZW50VHlwZS5TY3JpcHQ7XG4vKiogVHlwZSBmb3IgPHN0eWxlPiB0YWdzICovXG5leHBvcnRzLlN0eWxlID0gRWxlbWVudFR5cGUuU3R5bGU7XG4vKiogVHlwZSBmb3IgQW55IHRhZyAqL1xuZXhwb3J0cy5UYWcgPSBFbGVtZW50VHlwZS5UYWc7XG4vKiogVHlwZSBmb3IgPCFbQ0RBVEFbIC4uLiBdXT4gKi9cbmV4cG9ydHMuQ0RBVEEgPSBFbGVtZW50VHlwZS5DREFUQTtcbi8qKiBUeXBlIGZvciA8IWRvY3R5cGUgLi4uPiAqL1xuZXhwb3J0cy5Eb2N0eXBlID0gRWxlbWVudFR5cGUuRG9jdHlwZTtcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkRvbUhhbmRsZXIgPSB2b2lkIDA7XG52YXIgZG9tZWxlbWVudHR5cGVfMSA9IHJlcXVpcmUoXCJkb21lbGVtZW50dHlwZVwiKTtcbnZhciBub2RlX2pzXzEgPSByZXF1aXJlKFwiLi9ub2RlLmpzXCIpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL25vZGUuanNcIiksIGV4cG9ydHMpO1xuLy8gRGVmYXVsdCBvcHRpb25zXG52YXIgZGVmYXVsdE9wdHMgPSB7XG4gICAgd2l0aFN0YXJ0SW5kaWNlczogZmFsc2UsXG4gICAgd2l0aEVuZEluZGljZXM6IGZhbHNlLFxuICAgIHhtbE1vZGU6IGZhbHNlLFxufTtcbnZhciBEb21IYW5kbGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSBjYWxsYmFjayBDYWxsZWQgb25jZSBwYXJzaW5nIGhhcyBjb21wbGV0ZWQuXG4gICAgICogQHBhcmFtIG9wdGlvbnMgU2V0dGluZ3MgZm9yIHRoZSBoYW5kbGVyLlxuICAgICAqIEBwYXJhbSBlbGVtZW50Q0IgQ2FsbGJhY2sgd2hlbmV2ZXIgYSB0YWcgaXMgY2xvc2VkLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIERvbUhhbmRsZXIoY2FsbGJhY2ssIG9wdGlvbnMsIGVsZW1lbnRDQikge1xuICAgICAgICAvKiogVGhlIGVsZW1lbnRzIG9mIHRoZSBET00gKi9cbiAgICAgICAgdGhpcy5kb20gPSBbXTtcbiAgICAgICAgLyoqIFRoZSByb290IGVsZW1lbnQgZm9yIHRoZSBET00gKi9cbiAgICAgICAgdGhpcy5yb290ID0gbmV3IG5vZGVfanNfMS5Eb2N1bWVudCh0aGlzLmRvbSk7XG4gICAgICAgIC8qKiBJbmRpY2F0ZWQgd2hldGhlciBwYXJzaW5nIGhhcyBiZWVuIGNvbXBsZXRlZC4gKi9cbiAgICAgICAgdGhpcy5kb25lID0gZmFsc2U7XG4gICAgICAgIC8qKiBTdGFjayBvZiBvcGVuIHRhZ3MuICovXG4gICAgICAgIHRoaXMudGFnU3RhY2sgPSBbdGhpcy5yb290XTtcbiAgICAgICAgLyoqIEEgZGF0YSBub2RlIHRoYXQgaXMgc3RpbGwgYmVpbmcgd3JpdHRlbiB0by4gKi9cbiAgICAgICAgdGhpcy5sYXN0Tm9kZSA9IG51bGw7XG4gICAgICAgIC8qKiBSZWZlcmVuY2UgdG8gdGhlIHBhcnNlciBpbnN0YW5jZS4gVXNlZCBmb3IgbG9jYXRpb24gaW5mb3JtYXRpb24uICovXG4gICAgICAgIHRoaXMucGFyc2VyID0gbnVsbDtcbiAgICAgICAgLy8gTWFrZSBpdCBwb3NzaWJsZSB0byBza2lwIGFyZ3VtZW50cywgZm9yIGJhY2t3YXJkcy1jb21wYXRpYmlsaXR5XG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICBlbGVtZW50Q0IgPSBvcHRpb25zO1xuICAgICAgICAgICAgb3B0aW9ucyA9IGRlZmF1bHRPcHRzO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgIG9wdGlvbnMgPSBjYWxsYmFjaztcbiAgICAgICAgICAgIGNhbGxiYWNrID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2FsbGJhY2sgPSBjYWxsYmFjayAhPT0gbnVsbCAmJiBjYWxsYmFjayAhPT0gdm9pZCAwID8gY2FsbGJhY2sgOiBudWxsO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zICE9PSBudWxsICYmIG9wdGlvbnMgIT09IHZvaWQgMCA/IG9wdGlvbnMgOiBkZWZhdWx0T3B0cztcbiAgICAgICAgdGhpcy5lbGVtZW50Q0IgPSBlbGVtZW50Q0IgIT09IG51bGwgJiYgZWxlbWVudENCICE9PSB2b2lkIDAgPyBlbGVtZW50Q0IgOiBudWxsO1xuICAgIH1cbiAgICBEb21IYW5kbGVyLnByb3RvdHlwZS5vbnBhcnNlcmluaXQgPSBmdW5jdGlvbiAocGFyc2VyKSB7XG4gICAgICAgIHRoaXMucGFyc2VyID0gcGFyc2VyO1xuICAgIH07XG4gICAgLy8gUmVzZXRzIHRoZSBoYW5kbGVyIGJhY2sgdG8gc3RhcnRpbmcgc3RhdGVcbiAgICBEb21IYW5kbGVyLnByb3RvdHlwZS5vbnJlc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmRvbSA9IFtdO1xuICAgICAgICB0aGlzLnJvb3QgPSBuZXcgbm9kZV9qc18xLkRvY3VtZW50KHRoaXMuZG9tKTtcbiAgICAgICAgdGhpcy5kb25lID0gZmFsc2U7XG4gICAgICAgIHRoaXMudGFnU3RhY2sgPSBbdGhpcy5yb290XTtcbiAgICAgICAgdGhpcy5sYXN0Tm9kZSA9IG51bGw7XG4gICAgICAgIHRoaXMucGFyc2VyID0gbnVsbDtcbiAgICB9O1xuICAgIC8vIFNpZ25hbHMgdGhlIGhhbmRsZXIgdGhhdCBwYXJzaW5nIGlzIGRvbmVcbiAgICBEb21IYW5kbGVyLnByb3RvdHlwZS5vbmVuZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuZG9uZSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdGhpcy5kb25lID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5wYXJzZXIgPSBudWxsO1xuICAgICAgICB0aGlzLmhhbmRsZUNhbGxiYWNrKG51bGwpO1xuICAgIH07XG4gICAgRG9tSGFuZGxlci5wcm90b3R5cGUub25lcnJvciA9IGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICB0aGlzLmhhbmRsZUNhbGxiYWNrKGVycm9yKTtcbiAgICB9O1xuICAgIERvbUhhbmRsZXIucHJvdG90eXBlLm9uY2xvc2V0YWcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMubGFzdE5vZGUgPSBudWxsO1xuICAgICAgICB2YXIgZWxlbSA9IHRoaXMudGFnU3RhY2sucG9wKCk7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMud2l0aEVuZEluZGljZXMpIHtcbiAgICAgICAgICAgIGVsZW0uZW5kSW5kZXggPSB0aGlzLnBhcnNlci5lbmRJbmRleDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5lbGVtZW50Q0IpXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRDQihlbGVtKTtcbiAgICB9O1xuICAgIERvbUhhbmRsZXIucHJvdG90eXBlLm9ub3BlbnRhZyA9IGZ1bmN0aW9uIChuYW1lLCBhdHRyaWJzKSB7XG4gICAgICAgIHZhciB0eXBlID0gdGhpcy5vcHRpb25zLnhtbE1vZGUgPyBkb21lbGVtZW50dHlwZV8xLkVsZW1lbnRUeXBlLlRhZyA6IHVuZGVmaW5lZDtcbiAgICAgICAgdmFyIGVsZW1lbnQgPSBuZXcgbm9kZV9qc18xLkVsZW1lbnQobmFtZSwgYXR0cmlicywgdW5kZWZpbmVkLCB0eXBlKTtcbiAgICAgICAgdGhpcy5hZGROb2RlKGVsZW1lbnQpO1xuICAgICAgICB0aGlzLnRhZ1N0YWNrLnB1c2goZWxlbWVudCk7XG4gICAgfTtcbiAgICBEb21IYW5kbGVyLnByb3RvdHlwZS5vbnRleHQgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICB2YXIgbGFzdE5vZGUgPSB0aGlzLmxhc3ROb2RlO1xuICAgICAgICBpZiAobGFzdE5vZGUgJiYgbGFzdE5vZGUudHlwZSA9PT0gZG9tZWxlbWVudHR5cGVfMS5FbGVtZW50VHlwZS5UZXh0KSB7XG4gICAgICAgICAgICBsYXN0Tm9kZS5kYXRhICs9IGRhdGE7XG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLndpdGhFbmRJbmRpY2VzKSB7XG4gICAgICAgICAgICAgICAgbGFzdE5vZGUuZW5kSW5kZXggPSB0aGlzLnBhcnNlci5lbmRJbmRleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciBub2RlID0gbmV3IG5vZGVfanNfMS5UZXh0KGRhdGEpO1xuICAgICAgICAgICAgdGhpcy5hZGROb2RlKG5vZGUpO1xuICAgICAgICAgICAgdGhpcy5sYXN0Tm9kZSA9IG5vZGU7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIERvbUhhbmRsZXIucHJvdG90eXBlLm9uY29tbWVudCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIGlmICh0aGlzLmxhc3ROb2RlICYmIHRoaXMubGFzdE5vZGUudHlwZSA9PT0gZG9tZWxlbWVudHR5cGVfMS5FbGVtZW50VHlwZS5Db21tZW50KSB7XG4gICAgICAgICAgICB0aGlzLmxhc3ROb2RlLmRhdGEgKz0gZGF0YTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbm9kZSA9IG5ldyBub2RlX2pzXzEuQ29tbWVudChkYXRhKTtcbiAgICAgICAgdGhpcy5hZGROb2RlKG5vZGUpO1xuICAgICAgICB0aGlzLmxhc3ROb2RlID0gbm9kZTtcbiAgICB9O1xuICAgIERvbUhhbmRsZXIucHJvdG90eXBlLm9uY29tbWVudGVuZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5sYXN0Tm9kZSA9IG51bGw7XG4gICAgfTtcbiAgICBEb21IYW5kbGVyLnByb3RvdHlwZS5vbmNkYXRhc3RhcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0ZXh0ID0gbmV3IG5vZGVfanNfMS5UZXh0KFwiXCIpO1xuICAgICAgICB2YXIgbm9kZSA9IG5ldyBub2RlX2pzXzEuQ0RBVEEoW3RleHRdKTtcbiAgICAgICAgdGhpcy5hZGROb2RlKG5vZGUpO1xuICAgICAgICB0ZXh0LnBhcmVudCA9IG5vZGU7XG4gICAgICAgIHRoaXMubGFzdE5vZGUgPSB0ZXh0O1xuICAgIH07XG4gICAgRG9tSGFuZGxlci5wcm90b3R5cGUub25jZGF0YWVuZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5sYXN0Tm9kZSA9IG51bGw7XG4gICAgfTtcbiAgICBEb21IYW5kbGVyLnByb3RvdHlwZS5vbnByb2Nlc3NpbmdpbnN0cnVjdGlvbiA9IGZ1bmN0aW9uIChuYW1lLCBkYXRhKSB7XG4gICAgICAgIHZhciBub2RlID0gbmV3IG5vZGVfanNfMS5Qcm9jZXNzaW5nSW5zdHJ1Y3Rpb24obmFtZSwgZGF0YSk7XG4gICAgICAgIHRoaXMuYWRkTm9kZShub2RlKTtcbiAgICB9O1xuICAgIERvbUhhbmRsZXIucHJvdG90eXBlLmhhbmRsZUNhbGxiYWNrID0gZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5jYWxsYmFjayA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICB0aGlzLmNhbGxiYWNrKGVycm9yLCB0aGlzLmRvbSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBEb21IYW5kbGVyLnByb3RvdHlwZS5hZGROb2RlID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgdmFyIHBhcmVudCA9IHRoaXMudGFnU3RhY2tbdGhpcy50YWdTdGFjay5sZW5ndGggLSAxXTtcbiAgICAgICAgdmFyIHByZXZpb3VzU2libGluZyA9IHBhcmVudC5jaGlsZHJlbltwYXJlbnQuY2hpbGRyZW4ubGVuZ3RoIC0gMV07XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMud2l0aFN0YXJ0SW5kaWNlcykge1xuICAgICAgICAgICAgbm9kZS5zdGFydEluZGV4ID0gdGhpcy5wYXJzZXIuc3RhcnRJbmRleDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLndpdGhFbmRJbmRpY2VzKSB7XG4gICAgICAgICAgICBub2RlLmVuZEluZGV4ID0gdGhpcy5wYXJzZXIuZW5kSW5kZXg7XG4gICAgICAgIH1cbiAgICAgICAgcGFyZW50LmNoaWxkcmVuLnB1c2gobm9kZSk7XG4gICAgICAgIGlmIChwcmV2aW91c1NpYmxpbmcpIHtcbiAgICAgICAgICAgIG5vZGUucHJldiA9IHByZXZpb3VzU2libGluZztcbiAgICAgICAgICAgIHByZXZpb3VzU2libGluZy5uZXh0ID0gbm9kZTtcbiAgICAgICAgfVxuICAgICAgICBub2RlLnBhcmVudCA9IHBhcmVudDtcbiAgICAgICAgdGhpcy5sYXN0Tm9kZSA9IG51bGw7XG4gICAgfTtcbiAgICByZXR1cm4gRG9tSGFuZGxlcjtcbn0oKSk7XG5leHBvcnRzLkRvbUhhbmRsZXIgPSBEb21IYW5kbGVyO1xuZXhwb3J0cy5kZWZhdWx0ID0gRG9tSGFuZGxlcjtcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKGIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbnZhciBfX2Fzc2lnbiA9ICh0aGlzICYmIHRoaXMuX19hc3NpZ24pIHx8IGZ1bmN0aW9uICgpIHtcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXG4gICAgICAgICAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHQ7XG4gICAgfTtcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNsb25lTm9kZSA9IGV4cG9ydHMuaGFzQ2hpbGRyZW4gPSBleHBvcnRzLmlzRG9jdW1lbnQgPSBleHBvcnRzLmlzRGlyZWN0aXZlID0gZXhwb3J0cy5pc0NvbW1lbnQgPSBleHBvcnRzLmlzVGV4dCA9IGV4cG9ydHMuaXNDREFUQSA9IGV4cG9ydHMuaXNUYWcgPSBleHBvcnRzLkVsZW1lbnQgPSBleHBvcnRzLkRvY3VtZW50ID0gZXhwb3J0cy5DREFUQSA9IGV4cG9ydHMuTm9kZVdpdGhDaGlsZHJlbiA9IGV4cG9ydHMuUHJvY2Vzc2luZ0luc3RydWN0aW9uID0gZXhwb3J0cy5Db21tZW50ID0gZXhwb3J0cy5UZXh0ID0gZXhwb3J0cy5EYXRhTm9kZSA9IGV4cG9ydHMuTm9kZSA9IHZvaWQgMDtcbnZhciBkb21lbGVtZW50dHlwZV8xID0gcmVxdWlyZShcImRvbWVsZW1lbnR0eXBlXCIpO1xuLyoqXG4gKiBUaGlzIG9iamVjdCB3aWxsIGJlIHVzZWQgYXMgdGhlIHByb3RvdHlwZSBmb3IgTm9kZXMgd2hlbiBjcmVhdGluZyBhXG4gKiBET00tTGV2ZWwtMS1jb21wbGlhbnQgc3RydWN0dXJlLlxuICovXG52YXIgTm9kZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBOb2RlKCkge1xuICAgICAgICAvKiogUGFyZW50IG9mIHRoZSBub2RlICovXG4gICAgICAgIHRoaXMucGFyZW50ID0gbnVsbDtcbiAgICAgICAgLyoqIFByZXZpb3VzIHNpYmxpbmcgKi9cbiAgICAgICAgdGhpcy5wcmV2ID0gbnVsbDtcbiAgICAgICAgLyoqIE5leHQgc2libGluZyAqL1xuICAgICAgICB0aGlzLm5leHQgPSBudWxsO1xuICAgICAgICAvKiogVGhlIHN0YXJ0IGluZGV4IG9mIHRoZSBub2RlLiBSZXF1aXJlcyBgd2l0aFN0YXJ0SW5kaWNlc2Agb24gdGhlIGhhbmRsZXIgdG8gYmUgYHRydWUuICovXG4gICAgICAgIHRoaXMuc3RhcnRJbmRleCA9IG51bGw7XG4gICAgICAgIC8qKiBUaGUgZW5kIGluZGV4IG9mIHRoZSBub2RlLiBSZXF1aXJlcyBgd2l0aEVuZEluZGljZXNgIG9uIHRoZSBoYW5kbGVyIHRvIGJlIGB0cnVlLiAqL1xuICAgICAgICB0aGlzLmVuZEluZGV4ID0gbnVsbDtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE5vZGUucHJvdG90eXBlLCBcInBhcmVudE5vZGVcIiwge1xuICAgICAgICAvLyBSZWFkLXdyaXRlIGFsaWFzZXMgZm9yIHByb3BlcnRpZXNcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNhbWUgYXMge0BsaW5rIHBhcmVudH0uXG4gICAgICAgICAqIFtET00gc3BlY10oaHR0cHM6Ly9kb20uc3BlYy53aGF0d2cub3JnKS1jb21wYXRpYmxlIGFsaWFzLlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJlbnQ7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHBhcmVudCkge1xuICAgICAgICAgICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTm9kZS5wcm90b3R5cGUsIFwicHJldmlvdXNTaWJsaW5nXCIsIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNhbWUgYXMge0BsaW5rIHByZXZ9LlxuICAgICAgICAgKiBbRE9NIHNwZWNdKGh0dHBzOi8vZG9tLnNwZWMud2hhdHdnLm9yZyktY29tcGF0aWJsZSBhbGlhcy5cbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJldjtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAocHJldikge1xuICAgICAgICAgICAgdGhpcy5wcmV2ID0gcHJldjtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShOb2RlLnByb3RvdHlwZSwgXCJuZXh0U2libGluZ1wiLCB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTYW1lIGFzIHtAbGluayBuZXh0fS5cbiAgICAgICAgICogW0RPTSBzcGVjXShodHRwczovL2RvbS5zcGVjLndoYXR3Zy5vcmcpLWNvbXBhdGlibGUgYWxpYXMuXG4gICAgICAgICAqL1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm5leHQ7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKG5leHQpIHtcbiAgICAgICAgICAgIHRoaXMubmV4dCA9IG5leHQ7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICAvKipcbiAgICAgKiBDbG9uZSB0aGlzIG5vZGUsIGFuZCBvcHRpb25hbGx5IGl0cyBjaGlsZHJlbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSByZWN1cnNpdmUgQ2xvbmUgY2hpbGQgbm9kZXMgYXMgd2VsbC5cbiAgICAgKiBAcmV0dXJucyBBIGNsb25lIG9mIHRoZSBub2RlLlxuICAgICAqL1xuICAgIE5vZGUucHJvdG90eXBlLmNsb25lTm9kZSA9IGZ1bmN0aW9uIChyZWN1cnNpdmUpIHtcbiAgICAgICAgaWYgKHJlY3Vyc2l2ZSA9PT0gdm9pZCAwKSB7IHJlY3Vyc2l2ZSA9IGZhbHNlOyB9XG4gICAgICAgIHJldHVybiBjbG9uZU5vZGUodGhpcywgcmVjdXJzaXZlKTtcbiAgICB9O1xuICAgIHJldHVybiBOb2RlO1xufSgpKTtcbmV4cG9ydHMuTm9kZSA9IE5vZGU7XG4vKipcbiAqIEEgbm9kZSB0aGF0IGNvbnRhaW5zIHNvbWUgZGF0YS5cbiAqL1xudmFyIERhdGFOb2RlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhEYXRhTm9kZSwgX3N1cGVyKTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gZGF0YSBUaGUgY29udGVudCBvZiB0aGUgZGF0YSBub2RlXG4gICAgICovXG4gICAgZnVuY3Rpb24gRGF0YU5vZGUoZGF0YSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5kYXRhID0gZGF0YTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRGF0YU5vZGUucHJvdG90eXBlLCBcIm5vZGVWYWx1ZVwiLCB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTYW1lIGFzIHtAbGluayBkYXRhfS5cbiAgICAgICAgICogW0RPTSBzcGVjXShodHRwczovL2RvbS5zcGVjLndoYXR3Zy5vcmcpLWNvbXBhdGlibGUgYWxpYXMuXG4gICAgICAgICAqL1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRhdGE7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gRGF0YU5vZGU7XG59KE5vZGUpKTtcbmV4cG9ydHMuRGF0YU5vZGUgPSBEYXRhTm9kZTtcbi8qKlxuICogVGV4dCB3aXRoaW4gdGhlIGRvY3VtZW50LlxuICovXG52YXIgVGV4dCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoVGV4dCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBUZXh0KCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMudHlwZSA9IGRvbWVsZW1lbnR0eXBlXzEuRWxlbWVudFR5cGUuVGV4dDtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVGV4dC5wcm90b3R5cGUsIFwibm9kZVR5cGVcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiAzO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIFRleHQ7XG59KERhdGFOb2RlKSk7XG5leHBvcnRzLlRleHQgPSBUZXh0O1xuLyoqXG4gKiBDb21tZW50cyB3aXRoaW4gdGhlIGRvY3VtZW50LlxuICovXG52YXIgQ29tbWVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQ29tbWVudCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBDb21tZW50KCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMudHlwZSA9IGRvbWVsZW1lbnR0eXBlXzEuRWxlbWVudFR5cGUuQ29tbWVudDtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29tbWVudC5wcm90b3R5cGUsIFwibm9kZVR5cGVcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiA4O1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIENvbW1lbnQ7XG59KERhdGFOb2RlKSk7XG5leHBvcnRzLkNvbW1lbnQgPSBDb21tZW50O1xuLyoqXG4gKiBQcm9jZXNzaW5nIGluc3RydWN0aW9ucywgaW5jbHVkaW5nIGRvYyB0eXBlcy5cbiAqL1xudmFyIFByb2Nlc3NpbmdJbnN0cnVjdGlvbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoUHJvY2Vzc2luZ0luc3RydWN0aW9uLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFByb2Nlc3NpbmdJbnN0cnVjdGlvbihuYW1lLCBkYXRhKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRhdGEpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICBfdGhpcy50eXBlID0gZG9tZWxlbWVudHR5cGVfMS5FbGVtZW50VHlwZS5EaXJlY3RpdmU7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFByb2Nlc3NpbmdJbnN0cnVjdGlvbi5wcm90b3R5cGUsIFwibm9kZVR5cGVcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIFByb2Nlc3NpbmdJbnN0cnVjdGlvbjtcbn0oRGF0YU5vZGUpKTtcbmV4cG9ydHMuUHJvY2Vzc2luZ0luc3RydWN0aW9uID0gUHJvY2Vzc2luZ0luc3RydWN0aW9uO1xuLyoqXG4gKiBBIGBOb2RlYCB0aGF0IGNhbiBoYXZlIGNoaWxkcmVuLlxuICovXG52YXIgTm9kZVdpdGhDaGlsZHJlbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoTm9kZVdpdGhDaGlsZHJlbiwgX3N1cGVyKTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gY2hpbGRyZW4gQ2hpbGRyZW4gb2YgdGhlIG5vZGUuIE9ubHkgY2VydGFpbiBub2RlIHR5cGVzIGNhbiBoYXZlIGNoaWxkcmVuLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIE5vZGVXaXRoQ2hpbGRyZW4oY2hpbGRyZW4pIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuY2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTm9kZVdpdGhDaGlsZHJlbi5wcm90b3R5cGUsIFwiZmlyc3RDaGlsZFwiLCB7XG4gICAgICAgIC8vIEFsaWFzZXNcbiAgICAgICAgLyoqIEZpcnN0IGNoaWxkIG9mIHRoZSBub2RlLiAqL1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIHJldHVybiAoX2EgPSB0aGlzLmNoaWxkcmVuWzBdKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBudWxsO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE5vZGVXaXRoQ2hpbGRyZW4ucHJvdG90eXBlLCBcImxhc3RDaGlsZFwiLCB7XG4gICAgICAgIC8qKiBMYXN0IGNoaWxkIG9mIHRoZSBub2RlLiAqL1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNoaWxkcmVuLmxlbmd0aCA+IDBcbiAgICAgICAgICAgICAgICA/IHRoaXMuY2hpbGRyZW5bdGhpcy5jaGlsZHJlbi5sZW5ndGggLSAxXVxuICAgICAgICAgICAgICAgIDogbnVsbDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShOb2RlV2l0aENoaWxkcmVuLnByb3RvdHlwZSwgXCJjaGlsZE5vZGVzXCIsIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNhbWUgYXMge0BsaW5rIGNoaWxkcmVufS5cbiAgICAgICAgICogW0RPTSBzcGVjXShodHRwczovL2RvbS5zcGVjLndoYXR3Zy5vcmcpLWNvbXBhdGlibGUgYWxpYXMuXG4gICAgICAgICAqL1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNoaWxkcmVuO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uIChjaGlsZHJlbikge1xuICAgICAgICAgICAgdGhpcy5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIE5vZGVXaXRoQ2hpbGRyZW47XG59KE5vZGUpKTtcbmV4cG9ydHMuTm9kZVdpdGhDaGlsZHJlbiA9IE5vZGVXaXRoQ2hpbGRyZW47XG52YXIgQ0RBVEEgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKENEQVRBLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIENEQVRBKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMudHlwZSA9IGRvbWVsZW1lbnR0eXBlXzEuRWxlbWVudFR5cGUuQ0RBVEE7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENEQVRBLnByb3RvdHlwZSwgXCJub2RlVHlwZVwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIDQ7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gQ0RBVEE7XG59KE5vZGVXaXRoQ2hpbGRyZW4pKTtcbmV4cG9ydHMuQ0RBVEEgPSBDREFUQTtcbi8qKlxuICogVGhlIHJvb3Qgbm9kZSBvZiB0aGUgZG9jdW1lbnQuXG4gKi9cbnZhciBEb2N1bWVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoRG9jdW1lbnQsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRG9jdW1lbnQoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy50eXBlID0gZG9tZWxlbWVudHR5cGVfMS5FbGVtZW50VHlwZS5Sb290O1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShEb2N1bWVudC5wcm90b3R5cGUsIFwibm9kZVR5cGVcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiA5O1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIERvY3VtZW50O1xufShOb2RlV2l0aENoaWxkcmVuKSk7XG5leHBvcnRzLkRvY3VtZW50ID0gRG9jdW1lbnQ7XG4vKipcbiAqIEFuIGVsZW1lbnQgd2l0aGluIHRoZSBET00uXG4gKi9cbnZhciBFbGVtZW50ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhFbGVtZW50LCBfc3VwZXIpO1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSBuYW1lIE5hbWUgb2YgdGhlIHRhZywgZWcuIGBkaXZgLCBgc3BhbmAuXG4gICAgICogQHBhcmFtIGF0dHJpYnMgT2JqZWN0IG1hcHBpbmcgYXR0cmlidXRlIG5hbWVzIHRvIGF0dHJpYnV0ZSB2YWx1ZXMuXG4gICAgICogQHBhcmFtIGNoaWxkcmVuIENoaWxkcmVuIG9mIHRoZSBub2RlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIEVsZW1lbnQobmFtZSwgYXR0cmlicywgY2hpbGRyZW4sIHR5cGUpIHtcbiAgICAgICAgaWYgKGNoaWxkcmVuID09PSB2b2lkIDApIHsgY2hpbGRyZW4gPSBbXTsgfVxuICAgICAgICBpZiAodHlwZSA9PT0gdm9pZCAwKSB7IHR5cGUgPSBuYW1lID09PSBcInNjcmlwdFwiXG4gICAgICAgICAgICA/IGRvbWVsZW1lbnR0eXBlXzEuRWxlbWVudFR5cGUuU2NyaXB0XG4gICAgICAgICAgICA6IG5hbWUgPT09IFwic3R5bGVcIlxuICAgICAgICAgICAgICAgID8gZG9tZWxlbWVudHR5cGVfMS5FbGVtZW50VHlwZS5TdHlsZVxuICAgICAgICAgICAgICAgIDogZG9tZWxlbWVudHR5cGVfMS5FbGVtZW50VHlwZS5UYWc7IH1cbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgY2hpbGRyZW4pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICBfdGhpcy5hdHRyaWJzID0gYXR0cmlicztcbiAgICAgICAgX3RoaXMudHlwZSA9IHR5cGU7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEVsZW1lbnQucHJvdG90eXBlLCBcIm5vZGVUeXBlXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShFbGVtZW50LnByb3RvdHlwZSwgXCJ0YWdOYW1lXCIsIHtcbiAgICAgICAgLy8gRE9NIExldmVsIDEgYWxpYXNlc1xuICAgICAgICAvKipcbiAgICAgICAgICogU2FtZSBhcyB7QGxpbmsgbmFtZX0uXG4gICAgICAgICAqIFtET00gc3BlY10oaHR0cHM6Ly9kb20uc3BlYy53aGF0d2cub3JnKS1jb21wYXRpYmxlIGFsaWFzLlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5uYW1lO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEVsZW1lbnQucHJvdG90eXBlLCBcImF0dHJpYnV0ZXNcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5hdHRyaWJzKS5tYXAoZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICAgICAgICAgIHJldHVybiAoe1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX3RoaXMuYXR0cmlic1tuYW1lXSxcbiAgICAgICAgICAgICAgICAgICAgbmFtZXNwYWNlOiAoX2EgPSBfdGhpc1tcIngtYXR0cmlic05hbWVzcGFjZVwiXSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hW25hbWVdLFxuICAgICAgICAgICAgICAgICAgICBwcmVmaXg6IChfYiA9IF90aGlzW1wieC1hdHRyaWJzUHJlZml4XCJdKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2JbbmFtZV0sXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBFbGVtZW50O1xufShOb2RlV2l0aENoaWxkcmVuKSk7XG5leHBvcnRzLkVsZW1lbnQgPSBFbGVtZW50O1xuLyoqXG4gKiBAcGFyYW0gbm9kZSBOb2RlIHRvIGNoZWNrLlxuICogQHJldHVybnMgYHRydWVgIGlmIHRoZSBub2RlIGlzIGEgYEVsZW1lbnRgLCBgZmFsc2VgIG90aGVyd2lzZS5cbiAqL1xuZnVuY3Rpb24gaXNUYWcobm9kZSkge1xuICAgIHJldHVybiAoMCwgZG9tZWxlbWVudHR5cGVfMS5pc1RhZykobm9kZSk7XG59XG5leHBvcnRzLmlzVGFnID0gaXNUYWc7XG4vKipcbiAqIEBwYXJhbSBub2RlIE5vZGUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG5vZGUgaGFzIHRoZSB0eXBlIGBDREFUQWAsIGBmYWxzZWAgb3RoZXJ3aXNlLlxuICovXG5mdW5jdGlvbiBpc0NEQVRBKG5vZGUpIHtcbiAgICByZXR1cm4gbm9kZS50eXBlID09PSBkb21lbGVtZW50dHlwZV8xLkVsZW1lbnRUeXBlLkNEQVRBO1xufVxuZXhwb3J0cy5pc0NEQVRBID0gaXNDREFUQTtcbi8qKlxuICogQHBhcmFtIG5vZGUgTm9kZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIGB0cnVlYCBpZiB0aGUgbm9kZSBoYXMgdGhlIHR5cGUgYFRleHRgLCBgZmFsc2VgIG90aGVyd2lzZS5cbiAqL1xuZnVuY3Rpb24gaXNUZXh0KG5vZGUpIHtcbiAgICByZXR1cm4gbm9kZS50eXBlID09PSBkb21lbGVtZW50dHlwZV8xLkVsZW1lbnRUeXBlLlRleHQ7XG59XG5leHBvcnRzLmlzVGV4dCA9IGlzVGV4dDtcbi8qKlxuICogQHBhcmFtIG5vZGUgTm9kZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIGB0cnVlYCBpZiB0aGUgbm9kZSBoYXMgdGhlIHR5cGUgYENvbW1lbnRgLCBgZmFsc2VgIG90aGVyd2lzZS5cbiAqL1xuZnVuY3Rpb24gaXNDb21tZW50KG5vZGUpIHtcbiAgICByZXR1cm4gbm9kZS50eXBlID09PSBkb21lbGVtZW50dHlwZV8xLkVsZW1lbnRUeXBlLkNvbW1lbnQ7XG59XG5leHBvcnRzLmlzQ29tbWVudCA9IGlzQ29tbWVudDtcbi8qKlxuICogQHBhcmFtIG5vZGUgTm9kZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIGB0cnVlYCBpZiB0aGUgbm9kZSBoYXMgdGhlIHR5cGUgYFByb2Nlc3NpbmdJbnN0cnVjdGlvbmAsIGBmYWxzZWAgb3RoZXJ3aXNlLlxuICovXG5mdW5jdGlvbiBpc0RpcmVjdGl2ZShub2RlKSB7XG4gICAgcmV0dXJuIG5vZGUudHlwZSA9PT0gZG9tZWxlbWVudHR5cGVfMS5FbGVtZW50VHlwZS5EaXJlY3RpdmU7XG59XG5leHBvcnRzLmlzRGlyZWN0aXZlID0gaXNEaXJlY3RpdmU7XG4vKipcbiAqIEBwYXJhbSBub2RlIE5vZGUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG5vZGUgaGFzIHRoZSB0eXBlIGBQcm9jZXNzaW5nSW5zdHJ1Y3Rpb25gLCBgZmFsc2VgIG90aGVyd2lzZS5cbiAqL1xuZnVuY3Rpb24gaXNEb2N1bWVudChub2RlKSB7XG4gICAgcmV0dXJuIG5vZGUudHlwZSA9PT0gZG9tZWxlbWVudHR5cGVfMS5FbGVtZW50VHlwZS5Sb290O1xufVxuZXhwb3J0cy5pc0RvY3VtZW50ID0gaXNEb2N1bWVudDtcbi8qKlxuICogQHBhcmFtIG5vZGUgTm9kZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIGB0cnVlYCBpZiB0aGUgbm9kZSBoYXMgY2hpbGRyZW4sIGBmYWxzZWAgb3RoZXJ3aXNlLlxuICovXG5mdW5jdGlvbiBoYXNDaGlsZHJlbihub2RlKSB7XG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChub2RlLCBcImNoaWxkcmVuXCIpO1xufVxuZXhwb3J0cy5oYXNDaGlsZHJlbiA9IGhhc0NoaWxkcmVuO1xuLyoqXG4gKiBDbG9uZSBhIG5vZGUsIGFuZCBvcHRpb25hbGx5IGl0cyBjaGlsZHJlbi5cbiAqXG4gKiBAcGFyYW0gcmVjdXJzaXZlIENsb25lIGNoaWxkIG5vZGVzIGFzIHdlbGwuXG4gKiBAcmV0dXJucyBBIGNsb25lIG9mIHRoZSBub2RlLlxuICovXG5mdW5jdGlvbiBjbG9uZU5vZGUobm9kZSwgcmVjdXJzaXZlKSB7XG4gICAgaWYgKHJlY3Vyc2l2ZSA9PT0gdm9pZCAwKSB7IHJlY3Vyc2l2ZSA9IGZhbHNlOyB9XG4gICAgdmFyIHJlc3VsdDtcbiAgICBpZiAoaXNUZXh0KG5vZGUpKSB7XG4gICAgICAgIHJlc3VsdCA9IG5ldyBUZXh0KG5vZGUuZGF0YSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzQ29tbWVudChub2RlKSkge1xuICAgICAgICByZXN1bHQgPSBuZXcgQ29tbWVudChub2RlLmRhdGEpO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc1RhZyhub2RlKSkge1xuICAgICAgICB2YXIgY2hpbGRyZW4gPSByZWN1cnNpdmUgPyBjbG9uZUNoaWxkcmVuKG5vZGUuY2hpbGRyZW4pIDogW107XG4gICAgICAgIHZhciBjbG9uZV8xID0gbmV3IEVsZW1lbnQobm9kZS5uYW1lLCBfX2Fzc2lnbih7fSwgbm9kZS5hdHRyaWJzKSwgY2hpbGRyZW4pO1xuICAgICAgICBjaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkgeyByZXR1cm4gKGNoaWxkLnBhcmVudCA9IGNsb25lXzEpOyB9KTtcbiAgICAgICAgaWYgKG5vZGUubmFtZXNwYWNlICE9IG51bGwpIHtcbiAgICAgICAgICAgIGNsb25lXzEubmFtZXNwYWNlID0gbm9kZS5uYW1lc3BhY2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5vZGVbXCJ4LWF0dHJpYnNOYW1lc3BhY2VcIl0pIHtcbiAgICAgICAgICAgIGNsb25lXzFbXCJ4LWF0dHJpYnNOYW1lc3BhY2VcIl0gPSBfX2Fzc2lnbih7fSwgbm9kZVtcIngtYXR0cmlic05hbWVzcGFjZVwiXSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5vZGVbXCJ4LWF0dHJpYnNQcmVmaXhcIl0pIHtcbiAgICAgICAgICAgIGNsb25lXzFbXCJ4LWF0dHJpYnNQcmVmaXhcIl0gPSBfX2Fzc2lnbih7fSwgbm9kZVtcIngtYXR0cmlic1ByZWZpeFwiXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0ID0gY2xvbmVfMTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNDREFUQShub2RlKSkge1xuICAgICAgICB2YXIgY2hpbGRyZW4gPSByZWN1cnNpdmUgPyBjbG9uZUNoaWxkcmVuKG5vZGUuY2hpbGRyZW4pIDogW107XG4gICAgICAgIHZhciBjbG9uZV8yID0gbmV3IENEQVRBKGNoaWxkcmVuKTtcbiAgICAgICAgY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHsgcmV0dXJuIChjaGlsZC5wYXJlbnQgPSBjbG9uZV8yKTsgfSk7XG4gICAgICAgIHJlc3VsdCA9IGNsb25lXzI7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzRG9jdW1lbnQobm9kZSkpIHtcbiAgICAgICAgdmFyIGNoaWxkcmVuID0gcmVjdXJzaXZlID8gY2xvbmVDaGlsZHJlbihub2RlLmNoaWxkcmVuKSA6IFtdO1xuICAgICAgICB2YXIgY2xvbmVfMyA9IG5ldyBEb2N1bWVudChjaGlsZHJlbik7XG4gICAgICAgIGNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7IHJldHVybiAoY2hpbGQucGFyZW50ID0gY2xvbmVfMyk7IH0pO1xuICAgICAgICBpZiAobm9kZVtcIngtbW9kZVwiXSkge1xuICAgICAgICAgICAgY2xvbmVfM1tcIngtbW9kZVwiXSA9IG5vZGVbXCJ4LW1vZGVcIl07XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0ID0gY2xvbmVfMztcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNEaXJlY3RpdmUobm9kZSkpIHtcbiAgICAgICAgdmFyIGluc3RydWN0aW9uID0gbmV3IFByb2Nlc3NpbmdJbnN0cnVjdGlvbihub2RlLm5hbWUsIG5vZGUuZGF0YSk7XG4gICAgICAgIGlmIChub2RlW1wieC1uYW1lXCJdICE9IG51bGwpIHtcbiAgICAgICAgICAgIGluc3RydWN0aW9uW1wieC1uYW1lXCJdID0gbm9kZVtcIngtbmFtZVwiXTtcbiAgICAgICAgICAgIGluc3RydWN0aW9uW1wieC1wdWJsaWNJZFwiXSA9IG5vZGVbXCJ4LXB1YmxpY0lkXCJdO1xuICAgICAgICAgICAgaW5zdHJ1Y3Rpb25bXCJ4LXN5c3RlbUlkXCJdID0gbm9kZVtcIngtc3lzdGVtSWRcIl07XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0ID0gaW5zdHJ1Y3Rpb247XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJOb3QgaW1wbGVtZW50ZWQgeWV0OiBcIi5jb25jYXQobm9kZS50eXBlKSk7XG4gICAgfVxuICAgIHJlc3VsdC5zdGFydEluZGV4ID0gbm9kZS5zdGFydEluZGV4O1xuICAgIHJlc3VsdC5lbmRJbmRleCA9IG5vZGUuZW5kSW5kZXg7XG4gICAgaWYgKG5vZGUuc291cmNlQ29kZUxvY2F0aW9uICE9IG51bGwpIHtcbiAgICAgICAgcmVzdWx0LnNvdXJjZUNvZGVMb2NhdGlvbiA9IG5vZGUuc291cmNlQ29kZUxvY2F0aW9uO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZXhwb3J0cy5jbG9uZU5vZGUgPSBjbG9uZU5vZGU7XG5mdW5jdGlvbiBjbG9uZUNoaWxkcmVuKGNoaWxkcykge1xuICAgIHZhciBjaGlsZHJlbiA9IGNoaWxkcy5tYXAoZnVuY3Rpb24gKGNoaWxkKSB7IHJldHVybiBjbG9uZU5vZGUoY2hpbGQsIHRydWUpOyB9KTtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNoaWxkcmVuW2ldLnByZXYgPSBjaGlsZHJlbltpIC0gMV07XG4gICAgICAgIGNoaWxkcmVuW2kgLSAxXS5uZXh0ID0gY2hpbGRyZW5baV07XG4gICAgfVxuICAgIHJldHVybiBjaGlsZHJlbjtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZXRGZWVkID0gdm9pZCAwO1xudmFyIHN0cmluZ2lmeV9qc18xID0gcmVxdWlyZShcIi4vc3RyaW5naWZ5LmpzXCIpO1xudmFyIGxlZ2FjeV9qc18xID0gcmVxdWlyZShcIi4vbGVnYWN5LmpzXCIpO1xuLyoqXG4gKiBHZXQgdGhlIGZlZWQgb2JqZWN0IGZyb20gdGhlIHJvb3Qgb2YgYSBET00gdHJlZS5cbiAqXG4gKiBAY2F0ZWdvcnkgRmVlZHNcbiAqIEBwYXJhbSBkb2MgLSBUaGUgRE9NIHRvIHRvIGV4dHJhY3QgdGhlIGZlZWQgZnJvbS5cbiAqIEByZXR1cm5zIFRoZSBmZWVkLlxuICovXG5mdW5jdGlvbiBnZXRGZWVkKGRvYykge1xuICAgIHZhciBmZWVkUm9vdCA9IGdldE9uZUVsZW1lbnQoaXNWYWxpZEZlZWQsIGRvYyk7XG4gICAgcmV0dXJuICFmZWVkUm9vdFxuICAgICAgICA/IG51bGxcbiAgICAgICAgOiBmZWVkUm9vdC5uYW1lID09PSBcImZlZWRcIlxuICAgICAgICAgICAgPyBnZXRBdG9tRmVlZChmZWVkUm9vdClcbiAgICAgICAgICAgIDogZ2V0UnNzRmVlZChmZWVkUm9vdCk7XG59XG5leHBvcnRzLmdldEZlZWQgPSBnZXRGZWVkO1xuLyoqXG4gKiBQYXJzZSBhbiBBdG9tIGZlZWQuXG4gKlxuICogQHBhcmFtIGZlZWRSb290IFRoZSByb290IG9mIHRoZSBmZWVkLlxuICogQHJldHVybnMgVGhlIHBhcnNlZCBmZWVkLlxuICovXG5mdW5jdGlvbiBnZXRBdG9tRmVlZChmZWVkUm9vdCkge1xuICAgIHZhciBfYTtcbiAgICB2YXIgY2hpbGRzID0gZmVlZFJvb3QuY2hpbGRyZW47XG4gICAgdmFyIGZlZWQgPSB7XG4gICAgICAgIHR5cGU6IFwiYXRvbVwiLFxuICAgICAgICBpdGVtczogKDAsIGxlZ2FjeV9qc18xLmdldEVsZW1lbnRzQnlUYWdOYW1lKShcImVudHJ5XCIsIGNoaWxkcykubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICB2YXIgY2hpbGRyZW4gPSBpdGVtLmNoaWxkcmVuO1xuICAgICAgICAgICAgdmFyIGVudHJ5ID0geyBtZWRpYTogZ2V0TWVkaWFFbGVtZW50cyhjaGlsZHJlbikgfTtcbiAgICAgICAgICAgIGFkZENvbmRpdGlvbmFsbHkoZW50cnksIFwiaWRcIiwgXCJpZFwiLCBjaGlsZHJlbik7XG4gICAgICAgICAgICBhZGRDb25kaXRpb25hbGx5KGVudHJ5LCBcInRpdGxlXCIsIFwidGl0bGVcIiwgY2hpbGRyZW4pO1xuICAgICAgICAgICAgdmFyIGhyZWYgPSAoX2EgPSBnZXRPbmVFbGVtZW50KFwibGlua1wiLCBjaGlsZHJlbikpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5hdHRyaWJzW1wiaHJlZlwiXTtcbiAgICAgICAgICAgIGlmIChocmVmKSB7XG4gICAgICAgICAgICAgICAgZW50cnkubGluayA9IGhyZWY7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgZGVzY3JpcHRpb24gPSBmZXRjaChcInN1bW1hcnlcIiwgY2hpbGRyZW4pIHx8IGZldGNoKFwiY29udGVudFwiLCBjaGlsZHJlbik7XG4gICAgICAgICAgICBpZiAoZGVzY3JpcHRpb24pIHtcbiAgICAgICAgICAgICAgICBlbnRyeS5kZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHB1YkRhdGUgPSBmZXRjaChcInVwZGF0ZWRcIiwgY2hpbGRyZW4pO1xuICAgICAgICAgICAgaWYgKHB1YkRhdGUpIHtcbiAgICAgICAgICAgICAgICBlbnRyeS5wdWJEYXRlID0gbmV3IERhdGUocHViRGF0ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZW50cnk7XG4gICAgICAgIH0pLFxuICAgIH07XG4gICAgYWRkQ29uZGl0aW9uYWxseShmZWVkLCBcImlkXCIsIFwiaWRcIiwgY2hpbGRzKTtcbiAgICBhZGRDb25kaXRpb25hbGx5KGZlZWQsIFwidGl0bGVcIiwgXCJ0aXRsZVwiLCBjaGlsZHMpO1xuICAgIHZhciBocmVmID0gKF9hID0gZ2V0T25lRWxlbWVudChcImxpbmtcIiwgY2hpbGRzKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmF0dHJpYnNbXCJocmVmXCJdO1xuICAgIGlmIChocmVmKSB7XG4gICAgICAgIGZlZWQubGluayA9IGhyZWY7XG4gICAgfVxuICAgIGFkZENvbmRpdGlvbmFsbHkoZmVlZCwgXCJkZXNjcmlwdGlvblwiLCBcInN1YnRpdGxlXCIsIGNoaWxkcyk7XG4gICAgdmFyIHVwZGF0ZWQgPSBmZXRjaChcInVwZGF0ZWRcIiwgY2hpbGRzKTtcbiAgICBpZiAodXBkYXRlZCkge1xuICAgICAgICBmZWVkLnVwZGF0ZWQgPSBuZXcgRGF0ZSh1cGRhdGVkKTtcbiAgICB9XG4gICAgYWRkQ29uZGl0aW9uYWxseShmZWVkLCBcImF1dGhvclwiLCBcImVtYWlsXCIsIGNoaWxkcywgdHJ1ZSk7XG4gICAgcmV0dXJuIGZlZWQ7XG59XG4vKipcbiAqIFBhcnNlIGEgUlNTIGZlZWQuXG4gKlxuICogQHBhcmFtIGZlZWRSb290IFRoZSByb290IG9mIHRoZSBmZWVkLlxuICogQHJldHVybnMgVGhlIHBhcnNlZCBmZWVkLlxuICovXG5mdW5jdGlvbiBnZXRSc3NGZWVkKGZlZWRSb290KSB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICB2YXIgY2hpbGRzID0gKF9iID0gKF9hID0gZ2V0T25lRWxlbWVudChcImNoYW5uZWxcIiwgZmVlZFJvb3QuY2hpbGRyZW4pKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2hpbGRyZW4pICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IFtdO1xuICAgIHZhciBmZWVkID0ge1xuICAgICAgICB0eXBlOiBmZWVkUm9vdC5uYW1lLnN1YnN0cigwLCAzKSxcbiAgICAgICAgaWQ6IFwiXCIsXG4gICAgICAgIGl0ZW1zOiAoMCwgbGVnYWN5X2pzXzEuZ2V0RWxlbWVudHNCeVRhZ05hbWUpKFwiaXRlbVwiLCBmZWVkUm9vdC5jaGlsZHJlbikubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgICB2YXIgY2hpbGRyZW4gPSBpdGVtLmNoaWxkcmVuO1xuICAgICAgICAgICAgdmFyIGVudHJ5ID0geyBtZWRpYTogZ2V0TWVkaWFFbGVtZW50cyhjaGlsZHJlbikgfTtcbiAgICAgICAgICAgIGFkZENvbmRpdGlvbmFsbHkoZW50cnksIFwiaWRcIiwgXCJndWlkXCIsIGNoaWxkcmVuKTtcbiAgICAgICAgICAgIGFkZENvbmRpdGlvbmFsbHkoZW50cnksIFwidGl0bGVcIiwgXCJ0aXRsZVwiLCBjaGlsZHJlbik7XG4gICAgICAgICAgICBhZGRDb25kaXRpb25hbGx5KGVudHJ5LCBcImxpbmtcIiwgXCJsaW5rXCIsIGNoaWxkcmVuKTtcbiAgICAgICAgICAgIGFkZENvbmRpdGlvbmFsbHkoZW50cnksIFwiZGVzY3JpcHRpb25cIiwgXCJkZXNjcmlwdGlvblwiLCBjaGlsZHJlbik7XG4gICAgICAgICAgICB2YXIgcHViRGF0ZSA9IGZldGNoKFwicHViRGF0ZVwiLCBjaGlsZHJlbikgfHwgZmV0Y2goXCJkYzpkYXRlXCIsIGNoaWxkcmVuKTtcbiAgICAgICAgICAgIGlmIChwdWJEYXRlKVxuICAgICAgICAgICAgICAgIGVudHJ5LnB1YkRhdGUgPSBuZXcgRGF0ZShwdWJEYXRlKTtcbiAgICAgICAgICAgIHJldHVybiBlbnRyeTtcbiAgICAgICAgfSksXG4gICAgfTtcbiAgICBhZGRDb25kaXRpb25hbGx5KGZlZWQsIFwidGl0bGVcIiwgXCJ0aXRsZVwiLCBjaGlsZHMpO1xuICAgIGFkZENvbmRpdGlvbmFsbHkoZmVlZCwgXCJsaW5rXCIsIFwibGlua1wiLCBjaGlsZHMpO1xuICAgIGFkZENvbmRpdGlvbmFsbHkoZmVlZCwgXCJkZXNjcmlwdGlvblwiLCBcImRlc2NyaXB0aW9uXCIsIGNoaWxkcyk7XG4gICAgdmFyIHVwZGF0ZWQgPSBmZXRjaChcImxhc3RCdWlsZERhdGVcIiwgY2hpbGRzKTtcbiAgICBpZiAodXBkYXRlZCkge1xuICAgICAgICBmZWVkLnVwZGF0ZWQgPSBuZXcgRGF0ZSh1cGRhdGVkKTtcbiAgICB9XG4gICAgYWRkQ29uZGl0aW9uYWxseShmZWVkLCBcImF1dGhvclwiLCBcIm1hbmFnaW5nRWRpdG9yXCIsIGNoaWxkcywgdHJ1ZSk7XG4gICAgcmV0dXJuIGZlZWQ7XG59XG52YXIgTUVESUFfS0VZU19TVFJJTkcgPSBbXCJ1cmxcIiwgXCJ0eXBlXCIsIFwibGFuZ1wiXTtcbnZhciBNRURJQV9LRVlTX0lOVCA9IFtcbiAgICBcImZpbGVTaXplXCIsXG4gICAgXCJiaXRyYXRlXCIsXG4gICAgXCJmcmFtZXJhdGVcIixcbiAgICBcInNhbXBsaW5ncmF0ZVwiLFxuICAgIFwiY2hhbm5lbHNcIixcbiAgICBcImR1cmF0aW9uXCIsXG4gICAgXCJoZWlnaHRcIixcbiAgICBcIndpZHRoXCIsXG5dO1xuLyoqXG4gKiBHZXQgYWxsIG1lZGlhIGVsZW1lbnRzIG9mIGEgZmVlZCBpdGVtLlxuICpcbiAqIEBwYXJhbSB3aGVyZSBOb2RlcyB0byBzZWFyY2ggaW4uXG4gKiBAcmV0dXJucyBNZWRpYSBlbGVtZW50cy5cbiAqL1xuZnVuY3Rpb24gZ2V0TWVkaWFFbGVtZW50cyh3aGVyZSkge1xuICAgIHJldHVybiAoMCwgbGVnYWN5X2pzXzEuZ2V0RWxlbWVudHNCeVRhZ05hbWUpKFwibWVkaWE6Y29udGVudFwiLCB3aGVyZSkubWFwKGZ1bmN0aW9uIChlbGVtKSB7XG4gICAgICAgIHZhciBhdHRyaWJzID0gZWxlbS5hdHRyaWJzO1xuICAgICAgICB2YXIgbWVkaWEgPSB7XG4gICAgICAgICAgICBtZWRpdW06IGF0dHJpYnNbXCJtZWRpdW1cIl0sXG4gICAgICAgICAgICBpc0RlZmF1bHQ6ICEhYXR0cmlic1tcImlzRGVmYXVsdFwiXSxcbiAgICAgICAgfTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBNRURJQV9LRVlTX1NUUklOR18xID0gTUVESUFfS0VZU19TVFJJTkc7IF9pIDwgTUVESUFfS0VZU19TVFJJTkdfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHZhciBhdHRyaWIgPSBNRURJQV9LRVlTX1NUUklOR18xW19pXTtcbiAgICAgICAgICAgIGlmIChhdHRyaWJzW2F0dHJpYl0pIHtcbiAgICAgICAgICAgICAgICBtZWRpYVthdHRyaWJdID0gYXR0cmlic1thdHRyaWJdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIF9hID0gMCwgTUVESUFfS0VZU19JTlRfMSA9IE1FRElBX0tFWVNfSU5UOyBfYSA8IE1FRElBX0tFWVNfSU5UXzEubGVuZ3RoOyBfYSsrKSB7XG4gICAgICAgICAgICB2YXIgYXR0cmliID0gTUVESUFfS0VZU19JTlRfMVtfYV07XG4gICAgICAgICAgICBpZiAoYXR0cmlic1thdHRyaWJdKSB7XG4gICAgICAgICAgICAgICAgbWVkaWFbYXR0cmliXSA9IHBhcnNlSW50KGF0dHJpYnNbYXR0cmliXSwgMTApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChhdHRyaWJzW1wiZXhwcmVzc2lvblwiXSkge1xuICAgICAgICAgICAgbWVkaWEuZXhwcmVzc2lvbiA9IGF0dHJpYnNbXCJleHByZXNzaW9uXCJdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZWRpYTtcbiAgICB9KTtcbn1cbi8qKlxuICogR2V0IG9uZSBlbGVtZW50IGJ5IHRhZyBuYW1lLlxuICpcbiAqIEBwYXJhbSB0YWdOYW1lIFRhZyBuYW1lIHRvIGxvb2sgZm9yXG4gKiBAcGFyYW0gbm9kZSBOb2RlIHRvIHNlYXJjaCBpblxuICogQHJldHVybnMgVGhlIGVsZW1lbnQgb3IgbnVsbFxuICovXG5mdW5jdGlvbiBnZXRPbmVFbGVtZW50KHRhZ05hbWUsIG5vZGUpIHtcbiAgICByZXR1cm4gKDAsIGxlZ2FjeV9qc18xLmdldEVsZW1lbnRzQnlUYWdOYW1lKSh0YWdOYW1lLCBub2RlLCB0cnVlLCAxKVswXTtcbn1cbi8qKlxuICogR2V0IHRoZSB0ZXh0IGNvbnRlbnQgb2YgYW4gZWxlbWVudCB3aXRoIGEgY2VydGFpbiB0YWcgbmFtZS5cbiAqXG4gKiBAcGFyYW0gdGFnTmFtZSBUYWcgbmFtZSB0byBsb29rIGZvci5cbiAqIEBwYXJhbSB3aGVyZSBOb2RlIHRvIHNlYXJjaCBpbi5cbiAqIEBwYXJhbSByZWN1cnNlIFdoZXRoZXIgdG8gcmVjdXJzZSBpbnRvIGNoaWxkIG5vZGVzLlxuICogQHJldHVybnMgVGhlIHRleHQgY29udGVudCBvZiB0aGUgZWxlbWVudC5cbiAqL1xuZnVuY3Rpb24gZmV0Y2godGFnTmFtZSwgd2hlcmUsIHJlY3Vyc2UpIHtcbiAgICBpZiAocmVjdXJzZSA9PT0gdm9pZCAwKSB7IHJlY3Vyc2UgPSBmYWxzZTsgfVxuICAgIHJldHVybiAoMCwgc3RyaW5naWZ5X2pzXzEudGV4dENvbnRlbnQpKCgwLCBsZWdhY3lfanNfMS5nZXRFbGVtZW50c0J5VGFnTmFtZSkodGFnTmFtZSwgd2hlcmUsIHJlY3Vyc2UsIDEpKS50cmltKCk7XG59XG4vKipcbiAqIEFkZHMgYSBwcm9wZXJ0eSB0byBhbiBvYmplY3QgaWYgaXQgaGFzIGEgdmFsdWUuXG4gKlxuICogQHBhcmFtIG9iaiBPYmplY3QgdG8gYmUgZXh0ZW5kZWRcbiAqIEBwYXJhbSBwcm9wIFByb3BlcnR5IG5hbWVcbiAqIEBwYXJhbSB0YWdOYW1lIFRhZyBuYW1lIHRoYXQgY29udGFpbnMgdGhlIGNvbmRpdGlvbmFsbHkgYWRkZWQgcHJvcGVydHlcbiAqIEBwYXJhbSB3aGVyZSBFbGVtZW50IHRvIHNlYXJjaCBmb3IgdGhlIHByb3BlcnR5XG4gKiBAcGFyYW0gcmVjdXJzZSBXaGV0aGVyIHRvIHJlY3Vyc2UgaW50byBjaGlsZCBub2Rlcy5cbiAqL1xuZnVuY3Rpb24gYWRkQ29uZGl0aW9uYWxseShvYmosIHByb3AsIHRhZ05hbWUsIHdoZXJlLCByZWN1cnNlKSB7XG4gICAgaWYgKHJlY3Vyc2UgPT09IHZvaWQgMCkgeyByZWN1cnNlID0gZmFsc2U7IH1cbiAgICB2YXIgdmFsID0gZmV0Y2godGFnTmFtZSwgd2hlcmUsIHJlY3Vyc2UpO1xuICAgIGlmICh2YWwpXG4gICAgICAgIG9ialtwcm9wXSA9IHZhbDtcbn1cbi8qKlxuICogQ2hlY2tzIGlmIGFuIGVsZW1lbnQgaXMgYSBmZWVkIHJvb3Qgbm9kZS5cbiAqXG4gKiBAcGFyYW0gdmFsdWUgVGhlIG5hbWUgb2YgdGhlIGVsZW1lbnQgdG8gY2hlY2suXG4gKiBAcmV0dXJucyBXaGV0aGVyIGFuIGVsZW1lbnQgaXMgYSBmZWVkIHJvb3Qgbm9kZS5cbiAqL1xuZnVuY3Rpb24gaXNWYWxpZEZlZWQodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IFwicnNzXCIgfHwgdmFsdWUgPT09IFwiZmVlZFwiIHx8IHZhbHVlID09PSBcInJkZjpSREZcIjtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZlZWRzLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy51bmlxdWVTb3J0ID0gZXhwb3J0cy5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiA9IGV4cG9ydHMuRG9jdW1lbnRQb3NpdGlvbiA9IGV4cG9ydHMucmVtb3ZlU3Vic2V0cyA9IHZvaWQgMDtcbnZhciBkb21oYW5kbGVyXzEgPSByZXF1aXJlKFwiZG9taGFuZGxlclwiKTtcbi8qKlxuICogR2l2ZW4gYW4gYXJyYXkgb2Ygbm9kZXMsIHJlbW92ZSBhbnkgbWVtYmVyIHRoYXQgaXMgY29udGFpbmVkIGJ5IGFub3RoZXJcbiAqIG1lbWJlci5cbiAqXG4gKiBAY2F0ZWdvcnkgSGVscGVyc1xuICogQHBhcmFtIG5vZGVzIE5vZGVzIHRvIGZpbHRlci5cbiAqIEByZXR1cm5zIFJlbWFpbmluZyBub2RlcyB0aGF0IGFyZW4ndCBjb250YWluZWQgYnkgb3RoZXIgbm9kZXMuXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZVN1YnNldHMobm9kZXMpIHtcbiAgICB2YXIgaWR4ID0gbm9kZXMubGVuZ3RoO1xuICAgIC8qXG4gICAgICogQ2hlY2sgaWYgZWFjaCBub2RlIChvciBvbmUgb2YgaXRzIGFuY2VzdG9ycykgaXMgYWxyZWFkeSBjb250YWluZWQgaW4gdGhlXG4gICAgICogYXJyYXkuXG4gICAgICovXG4gICAgd2hpbGUgKC0taWR4ID49IDApIHtcbiAgICAgICAgdmFyIG5vZGUgPSBub2Rlc1tpZHhdO1xuICAgICAgICAvKlxuICAgICAgICAgKiBSZW1vdmUgdGhlIG5vZGUgaWYgaXQgaXMgbm90IHVuaXF1ZS5cbiAgICAgICAgICogV2UgYXJlIGdvaW5nIHRocm91Z2ggdGhlIGFycmF5IGZyb20gdGhlIGVuZCwgc28gd2Ugb25seVxuICAgICAgICAgKiBoYXZlIHRvIGNoZWNrIG5vZGVzIHRoYXQgcHJlY2VlZCB0aGUgbm9kZSB1bmRlciBjb25zaWRlcmF0aW9uIGluIHRoZSBhcnJheS5cbiAgICAgICAgICovXG4gICAgICAgIGlmIChpZHggPiAwICYmIG5vZGVzLmxhc3RJbmRleE9mKG5vZGUsIGlkeCAtIDEpID49IDApIHtcbiAgICAgICAgICAgIG5vZGVzLnNwbGljZShpZHgsIDEpO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgYW5jZXN0b3IgPSBub2RlLnBhcmVudDsgYW5jZXN0b3I7IGFuY2VzdG9yID0gYW5jZXN0b3IucGFyZW50KSB7XG4gICAgICAgICAgICBpZiAobm9kZXMuaW5jbHVkZXMoYW5jZXN0b3IpKSB7XG4gICAgICAgICAgICAgICAgbm9kZXMuc3BsaWNlKGlkeCwgMSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5vZGVzO1xufVxuZXhwb3J0cy5yZW1vdmVTdWJzZXRzID0gcmVtb3ZlU3Vic2V0cztcbi8qKlxuICogQGNhdGVnb3J5IEhlbHBlcnNcbiAqIEBzZWUge0BsaW5rIGh0dHA6Ly9kb20uc3BlYy53aGF0d2cub3JnLyNkb20tbm9kZS1jb21wYXJlZG9jdW1lbnRwb3NpdGlvbn1cbiAqL1xudmFyIERvY3VtZW50UG9zaXRpb247XG4oZnVuY3Rpb24gKERvY3VtZW50UG9zaXRpb24pIHtcbiAgICBEb2N1bWVudFBvc2l0aW9uW0RvY3VtZW50UG9zaXRpb25bXCJESVNDT05ORUNURURcIl0gPSAxXSA9IFwiRElTQ09OTkVDVEVEXCI7XG4gICAgRG9jdW1lbnRQb3NpdGlvbltEb2N1bWVudFBvc2l0aW9uW1wiUFJFQ0VESU5HXCJdID0gMl0gPSBcIlBSRUNFRElOR1wiO1xuICAgIERvY3VtZW50UG9zaXRpb25bRG9jdW1lbnRQb3NpdGlvbltcIkZPTExPV0lOR1wiXSA9IDRdID0gXCJGT0xMT1dJTkdcIjtcbiAgICBEb2N1bWVudFBvc2l0aW9uW0RvY3VtZW50UG9zaXRpb25bXCJDT05UQUlOU1wiXSA9IDhdID0gXCJDT05UQUlOU1wiO1xuICAgIERvY3VtZW50UG9zaXRpb25bRG9jdW1lbnRQb3NpdGlvbltcIkNPTlRBSU5FRF9CWVwiXSA9IDE2XSA9IFwiQ09OVEFJTkVEX0JZXCI7XG59KShEb2N1bWVudFBvc2l0aW9uID0gZXhwb3J0cy5Eb2N1bWVudFBvc2l0aW9uIHx8IChleHBvcnRzLkRvY3VtZW50UG9zaXRpb24gPSB7fSkpO1xuLyoqXG4gKiBDb21wYXJlIHRoZSBwb3NpdGlvbiBvZiBvbmUgbm9kZSBhZ2FpbnN0IGFub3RoZXIgbm9kZSBpbiBhbnkgb3RoZXIgZG9jdW1lbnQsXG4gKiByZXR1cm5pbmcgYSBiaXRtYXNrIHdpdGggdGhlIHZhbHVlcyBmcm9tIHtAbGluayBEb2N1bWVudFBvc2l0aW9ufS5cbiAqXG4gKiBEb2N1bWVudCBvcmRlcjpcbiAqID4gVGhlcmUgaXMgYW4gb3JkZXJpbmcsIGRvY3VtZW50IG9yZGVyLCBkZWZpbmVkIG9uIGFsbCB0aGUgbm9kZXMgaW4gdGhlXG4gKiA+IGRvY3VtZW50IGNvcnJlc3BvbmRpbmcgdG8gdGhlIG9yZGVyIGluIHdoaWNoIHRoZSBmaXJzdCBjaGFyYWN0ZXIgb2YgdGhlXG4gKiA+IFhNTCByZXByZXNlbnRhdGlvbiBvZiBlYWNoIG5vZGUgb2NjdXJzIGluIHRoZSBYTUwgcmVwcmVzZW50YXRpb24gb2YgdGhlXG4gKiA+IGRvY3VtZW50IGFmdGVyIGV4cGFuc2lvbiBvZiBnZW5lcmFsIGVudGl0aWVzLiBUaHVzLCB0aGUgZG9jdW1lbnQgZWxlbWVudFxuICogPiBub2RlIHdpbGwgYmUgdGhlIGZpcnN0IG5vZGUuIEVsZW1lbnQgbm9kZXMgb2NjdXIgYmVmb3JlIHRoZWlyIGNoaWxkcmVuLlxuICogPiBUaHVzLCBkb2N1bWVudCBvcmRlciBvcmRlcnMgZWxlbWVudCBub2RlcyBpbiBvcmRlciBvZiB0aGUgb2NjdXJyZW5jZSBvZlxuICogPiB0aGVpciBzdGFydC10YWcgaW4gdGhlIFhNTCAoYWZ0ZXIgZXhwYW5zaW9uIG9mIGVudGl0aWVzKS4gVGhlIGF0dHJpYnV0ZVxuICogPiBub2RlcyBvZiBhbiBlbGVtZW50IG9jY3VyIGFmdGVyIHRoZSBlbGVtZW50IGFuZCBiZWZvcmUgaXRzIGNoaWxkcmVuLiBUaGVcbiAqID4gcmVsYXRpdmUgb3JkZXIgb2YgYXR0cmlidXRlIG5vZGVzIGlzIGltcGxlbWVudGF0aW9uLWRlcGVuZGVudC5cbiAqXG4gKiBTb3VyY2U6XG4gKiBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1Db3JlL2dsb3NzYXJ5Lmh0bWwjZHQtZG9jdW1lbnQtb3JkZXJcbiAqXG4gKiBAY2F0ZWdvcnkgSGVscGVyc1xuICogQHBhcmFtIG5vZGVBIFRoZSBmaXJzdCBub2RlIHRvIHVzZSBpbiB0aGUgY29tcGFyaXNvblxuICogQHBhcmFtIG5vZGVCIFRoZSBzZWNvbmQgbm9kZSB0byB1c2UgaW4gdGhlIGNvbXBhcmlzb25cbiAqIEByZXR1cm5zIEEgYml0bWFzayBkZXNjcmliaW5nIHRoZSBpbnB1dCBub2RlcycgcmVsYXRpdmUgcG9zaXRpb24uXG4gKlxuICogU2VlIGh0dHA6Ly9kb20uc3BlYy53aGF0d2cub3JnLyNkb20tbm9kZS1jb21wYXJlZG9jdW1lbnRwb3NpdGlvbiBmb3JcbiAqIGEgZGVzY3JpcHRpb24gb2YgdGhlc2UgdmFsdWVzLlxuICovXG5mdW5jdGlvbiBjb21wYXJlRG9jdW1lbnRQb3NpdGlvbihub2RlQSwgbm9kZUIpIHtcbiAgICB2YXIgYVBhcmVudHMgPSBbXTtcbiAgICB2YXIgYlBhcmVudHMgPSBbXTtcbiAgICBpZiAobm9kZUEgPT09IG5vZGVCKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICB2YXIgY3VycmVudCA9ICgwLCBkb21oYW5kbGVyXzEuaGFzQ2hpbGRyZW4pKG5vZGVBKSA/IG5vZGVBIDogbm9kZUEucGFyZW50O1xuICAgIHdoaWxlIChjdXJyZW50KSB7XG4gICAgICAgIGFQYXJlbnRzLnVuc2hpZnQoY3VycmVudCk7XG4gICAgICAgIGN1cnJlbnQgPSBjdXJyZW50LnBhcmVudDtcbiAgICB9XG4gICAgY3VycmVudCA9ICgwLCBkb21oYW5kbGVyXzEuaGFzQ2hpbGRyZW4pKG5vZGVCKSA/IG5vZGVCIDogbm9kZUIucGFyZW50O1xuICAgIHdoaWxlIChjdXJyZW50KSB7XG4gICAgICAgIGJQYXJlbnRzLnVuc2hpZnQoY3VycmVudCk7XG4gICAgICAgIGN1cnJlbnQgPSBjdXJyZW50LnBhcmVudDtcbiAgICB9XG4gICAgdmFyIG1heElkeCA9IE1hdGgubWluKGFQYXJlbnRzLmxlbmd0aCwgYlBhcmVudHMubGVuZ3RoKTtcbiAgICB2YXIgaWR4ID0gMDtcbiAgICB3aGlsZSAoaWR4IDwgbWF4SWR4ICYmIGFQYXJlbnRzW2lkeF0gPT09IGJQYXJlbnRzW2lkeF0pIHtcbiAgICAgICAgaWR4Kys7XG4gICAgfVxuICAgIGlmIChpZHggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIERvY3VtZW50UG9zaXRpb24uRElTQ09OTkVDVEVEO1xuICAgIH1cbiAgICB2YXIgc2hhcmVkUGFyZW50ID0gYVBhcmVudHNbaWR4IC0gMV07XG4gICAgdmFyIHNpYmxpbmdzID0gc2hhcmVkUGFyZW50LmNoaWxkcmVuO1xuICAgIHZhciBhU2libGluZyA9IGFQYXJlbnRzW2lkeF07XG4gICAgdmFyIGJTaWJsaW5nID0gYlBhcmVudHNbaWR4XTtcbiAgICBpZiAoc2libGluZ3MuaW5kZXhPZihhU2libGluZykgPiBzaWJsaW5ncy5pbmRleE9mKGJTaWJsaW5nKSkge1xuICAgICAgICBpZiAoc2hhcmVkUGFyZW50ID09PSBub2RlQikge1xuICAgICAgICAgICAgcmV0dXJuIERvY3VtZW50UG9zaXRpb24uRk9MTE9XSU5HIHwgRG9jdW1lbnRQb3NpdGlvbi5DT05UQUlORURfQlk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIERvY3VtZW50UG9zaXRpb24uRk9MTE9XSU5HO1xuICAgIH1cbiAgICBpZiAoc2hhcmVkUGFyZW50ID09PSBub2RlQSkge1xuICAgICAgICByZXR1cm4gRG9jdW1lbnRQb3NpdGlvbi5QUkVDRURJTkcgfCBEb2N1bWVudFBvc2l0aW9uLkNPTlRBSU5TO1xuICAgIH1cbiAgICByZXR1cm4gRG9jdW1lbnRQb3NpdGlvbi5QUkVDRURJTkc7XG59XG5leHBvcnRzLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uID0gY29tcGFyZURvY3VtZW50UG9zaXRpb247XG4vKipcbiAqIFNvcnQgYW4gYXJyYXkgb2Ygbm9kZXMgYmFzZWQgb24gdGhlaXIgcmVsYXRpdmUgcG9zaXRpb24gaW4gdGhlIGRvY3VtZW50LFxuICogcmVtb3ZpbmcgYW55IGR1cGxpY2F0ZSBub2Rlcy4gSWYgdGhlIGFycmF5IGNvbnRhaW5zIG5vZGVzIHRoYXQgZG8gbm90IGJlbG9uZ1xuICogdG8gdGhlIHNhbWUgZG9jdW1lbnQsIHNvcnQgb3JkZXIgaXMgdW5zcGVjaWZpZWQuXG4gKlxuICogQGNhdGVnb3J5IEhlbHBlcnNcbiAqIEBwYXJhbSBub2RlcyBBcnJheSBvZiBET00gbm9kZXMuXG4gKiBAcmV0dXJucyBDb2xsZWN0aW9uIG9mIHVuaXF1ZSBub2Rlcywgc29ydGVkIGluIGRvY3VtZW50IG9yZGVyLlxuICovXG5mdW5jdGlvbiB1bmlxdWVTb3J0KG5vZGVzKSB7XG4gICAgbm9kZXMgPSBub2Rlcy5maWx0ZXIoZnVuY3Rpb24gKG5vZGUsIGksIGFycikgeyByZXR1cm4gIWFyci5pbmNsdWRlcyhub2RlLCBpICsgMSk7IH0pO1xuICAgIG5vZGVzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgdmFyIHJlbGF0aXZlID0gY29tcGFyZURvY3VtZW50UG9zaXRpb24oYSwgYik7XG4gICAgICAgIGlmIChyZWxhdGl2ZSAmIERvY3VtZW50UG9zaXRpb24uUFJFQ0VESU5HKSB7XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocmVsYXRpdmUgJiBEb2N1bWVudFBvc2l0aW9uLkZPTExPV0lORykge1xuICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfSk7XG4gICAgcmV0dXJuIG5vZGVzO1xufVxuZXhwb3J0cy51bmlxdWVTb3J0ID0gdW5pcXVlU29ydDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhlbHBlcnMuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaGFzQ2hpbGRyZW4gPSBleHBvcnRzLmlzRG9jdW1lbnQgPSBleHBvcnRzLmlzQ29tbWVudCA9IGV4cG9ydHMuaXNUZXh0ID0gZXhwb3J0cy5pc0NEQVRBID0gZXhwb3J0cy5pc1RhZyA9IHZvaWQgMDtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9zdHJpbmdpZnkuanNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3RyYXZlcnNhbC5qc1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vbWFuaXB1bGF0aW9uLmpzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9xdWVyeWluZy5qc1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vbGVnYWN5LmpzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9oZWxwZXJzLmpzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9mZWVkcy5qc1wiKSwgZXhwb3J0cyk7XG4vKiogQGRlcHJlY2F0ZWQgVXNlIHRoZXNlIG1ldGhvZHMgZnJvbSBgZG9taGFuZGxlcmAgZGlyZWN0bHkuICovXG52YXIgZG9taGFuZGxlcl8xID0gcmVxdWlyZShcImRvbWhhbmRsZXJcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJpc1RhZ1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZG9taGFuZGxlcl8xLmlzVGFnOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiaXNDREFUQVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZG9taGFuZGxlcl8xLmlzQ0RBVEE7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJpc1RleHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRvbWhhbmRsZXJfMS5pc1RleHQ7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJpc0NvbW1lbnRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRvbWhhbmRsZXJfMS5pc0NvbW1lbnQ7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJpc0RvY3VtZW50XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkb21oYW5kbGVyXzEuaXNEb2N1bWVudDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImhhc0NoaWxkcmVuXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkb21oYW5kbGVyXzEuaGFzQ2hpbGRyZW47IH0gfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0RWxlbWVudHNCeVRhZ1R5cGUgPSBleHBvcnRzLmdldEVsZW1lbnRzQnlUYWdOYW1lID0gZXhwb3J0cy5nZXRFbGVtZW50QnlJZCA9IGV4cG9ydHMuZ2V0RWxlbWVudHMgPSBleHBvcnRzLnRlc3RFbGVtZW50ID0gdm9pZCAwO1xudmFyIGRvbWhhbmRsZXJfMSA9IHJlcXVpcmUoXCJkb21oYW5kbGVyXCIpO1xudmFyIHF1ZXJ5aW5nX2pzXzEgPSByZXF1aXJlKFwiLi9xdWVyeWluZy5qc1wiKTtcbi8qKlxuICogQSBtYXAgb2YgZnVuY3Rpb25zIHRvIGNoZWNrIG5vZGVzIGFnYWluc3QuXG4gKi9cbnZhciBDaGVja3MgPSB7XG4gICAgdGFnX25hbWU6IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIGlmICh0eXBlb2YgbmFtZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGVsZW0pIHsgcmV0dXJuICgwLCBkb21oYW5kbGVyXzEuaXNUYWcpKGVsZW0pICYmIG5hbWUoZWxlbS5uYW1lKTsgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChuYW1lID09PSBcIipcIikge1xuICAgICAgICAgICAgcmV0dXJuIGRvbWhhbmRsZXJfMS5pc1RhZztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGVsZW0pIHsgcmV0dXJuICgwLCBkb21oYW5kbGVyXzEuaXNUYWcpKGVsZW0pICYmIGVsZW0ubmFtZSA9PT0gbmFtZTsgfTtcbiAgICB9LFxuICAgIHRhZ190eXBlOiBmdW5jdGlvbiAodHlwZSkge1xuICAgICAgICBpZiAodHlwZW9mIHR5cGUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChlbGVtKSB7IHJldHVybiB0eXBlKGVsZW0udHlwZSk7IH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChlbGVtKSB7IHJldHVybiBlbGVtLnR5cGUgPT09IHR5cGU7IH07XG4gICAgfSxcbiAgICB0YWdfY29udGFpbnM6IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGVsZW0pIHsgcmV0dXJuICgwLCBkb21oYW5kbGVyXzEuaXNUZXh0KShlbGVtKSAmJiBkYXRhKGVsZW0uZGF0YSk7IH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChlbGVtKSB7IHJldHVybiAoMCwgZG9taGFuZGxlcl8xLmlzVGV4dCkoZWxlbSkgJiYgZWxlbS5kYXRhID09PSBkYXRhOyB9O1xuICAgIH0sXG59O1xuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gY2hlY2sgd2hldGhlciBhIG5vZGUgaGFzIGFuIGF0dHJpYnV0ZSB3aXRoIGEgcGFydGljdWxhclxuICogdmFsdWUuXG4gKlxuICogQHBhcmFtIGF0dHJpYiBBdHRyaWJ1dGUgdG8gY2hlY2suXG4gKiBAcGFyYW0gdmFsdWUgQXR0cmlidXRlIHZhbHVlIHRvIGxvb2sgZm9yLlxuICogQHJldHVybnMgQSBmdW5jdGlvbiB0byBjaGVjayB3aGV0aGVyIHRoZSBhIG5vZGUgaGFzIGFuIGF0dHJpYnV0ZSB3aXRoIGFcbiAqICAgcGFydGljdWxhciB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gZ2V0QXR0cmliQ2hlY2soYXR0cmliLCB2YWx1ZSkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGVsZW0pIHsgcmV0dXJuICgwLCBkb21oYW5kbGVyXzEuaXNUYWcpKGVsZW0pICYmIHZhbHVlKGVsZW0uYXR0cmlic1thdHRyaWJdKTsgfTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChlbGVtKSB7IHJldHVybiAoMCwgZG9taGFuZGxlcl8xLmlzVGFnKShlbGVtKSAmJiBlbGVtLmF0dHJpYnNbYXR0cmliXSA9PT0gdmFsdWU7IH07XG59XG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYHRydWVgIGlmIGVpdGhlciBvZiB0aGUgaW5wdXQgZnVuY3Rpb25zXG4gKiByZXR1cm5zIGB0cnVlYCBmb3IgYSBub2RlLlxuICpcbiAqIEBwYXJhbSBhIEZpcnN0IGZ1bmN0aW9uIHRvIGNvbWJpbmUuXG4gKiBAcGFyYW0gYiBTZWNvbmQgZnVuY3Rpb24gdG8gY29tYmluZS5cbiAqIEByZXR1cm5zIEEgZnVuY3Rpb24gdGFraW5nIGEgbm9kZSBhbmQgcmV0dXJuaW5nIGB0cnVlYCBpZiBlaXRoZXIgb2YgdGhlIGlucHV0XG4gKiAgIGZ1bmN0aW9ucyByZXR1cm5zIGB0cnVlYCBmb3IgdGhlIG5vZGUuXG4gKi9cbmZ1bmN0aW9uIGNvbWJpbmVGdW5jcyhhLCBiKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChlbGVtKSB7IHJldHVybiBhKGVsZW0pIHx8IGIoZWxlbSk7IH07XG59XG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IGV4ZWN1dGVzIGFsbCBjaGVja3MgaW4gYG9wdGlvbnNgIGFuZCByZXR1cm5zIGB0cnVlYFxuICogaWYgYW55IG9mIHRoZW0gbWF0Y2ggYSBub2RlLlxuICpcbiAqIEBwYXJhbSBvcHRpb25zIEFuIG9iamVjdCBkZXNjcmliaW5nIG5vZGVzIHRvIGxvb2sgZm9yLlxuICogQHJldHVybnMgQSBmdW5jdGlvbiB0aGF0IGV4ZWN1dGVzIGFsbCBjaGVja3MgaW4gYG9wdGlvbnNgIGFuZCByZXR1cm5zIGB0cnVlYFxuICogICBpZiBhbnkgb2YgdGhlbSBtYXRjaCBhIG5vZGUuXG4gKi9cbmZ1bmN0aW9uIGNvbXBpbGVUZXN0KG9wdGlvbnMpIHtcbiAgICB2YXIgZnVuY3MgPSBPYmplY3Qua2V5cyhvcHRpb25zKS5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB2YXIgdmFsdWUgPSBvcHRpb25zW2tleV07XG4gICAgICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoQ2hlY2tzLCBrZXkpXG4gICAgICAgICAgICA/IENoZWNrc1trZXldKHZhbHVlKVxuICAgICAgICAgICAgOiBnZXRBdHRyaWJDaGVjayhrZXksIHZhbHVlKTtcbiAgICB9KTtcbiAgICByZXR1cm4gZnVuY3MubGVuZ3RoID09PSAwID8gbnVsbCA6IGZ1bmNzLnJlZHVjZShjb21iaW5lRnVuY3MpO1xufVxuLyoqXG4gKiBDaGVja3Mgd2hldGhlciBhIG5vZGUgbWF0Y2hlcyB0aGUgZGVzY3JpcHRpb24gaW4gYG9wdGlvbnNgLlxuICpcbiAqIEBjYXRlZ29yeSBMZWdhY3kgUXVlcnkgRnVuY3Rpb25zXG4gKiBAcGFyYW0gb3B0aW9ucyBBbiBvYmplY3QgZGVzY3JpYmluZyBub2RlcyB0byBsb29rIGZvci5cbiAqIEBwYXJhbSBub2RlIFRoZSBlbGVtZW50IHRvIHRlc3QuXG4gKiBAcmV0dXJucyBXaGV0aGVyIHRoZSBlbGVtZW50IG1hdGNoZXMgdGhlIGRlc2NyaXB0aW9uIGluIGBvcHRpb25zYC5cbiAqL1xuZnVuY3Rpb24gdGVzdEVsZW1lbnQob3B0aW9ucywgbm9kZSkge1xuICAgIHZhciB0ZXN0ID0gY29tcGlsZVRlc3Qob3B0aW9ucyk7XG4gICAgcmV0dXJuIHRlc3QgPyB0ZXN0KG5vZGUpIDogdHJ1ZTtcbn1cbmV4cG9ydHMudGVzdEVsZW1lbnQgPSB0ZXN0RWxlbWVudDtcbi8qKlxuICogUmV0dXJucyBhbGwgbm9kZXMgdGhhdCBtYXRjaCBgb3B0aW9uc2AuXG4gKlxuICogQGNhdGVnb3J5IExlZ2FjeSBRdWVyeSBGdW5jdGlvbnNcbiAqIEBwYXJhbSBvcHRpb25zIEFuIG9iamVjdCBkZXNjcmliaW5nIG5vZGVzIHRvIGxvb2sgZm9yLlxuICogQHBhcmFtIG5vZGVzIE5vZGVzIHRvIHNlYXJjaCB0aHJvdWdoLlxuICogQHBhcmFtIHJlY3Vyc2UgQWxzbyBjb25zaWRlciBjaGlsZCBub2Rlcy5cbiAqIEBwYXJhbSBsaW1pdCBNYXhpbXVtIG51bWJlciBvZiBub2RlcyB0byByZXR1cm4uXG4gKiBAcmV0dXJucyBBbGwgbm9kZXMgdGhhdCBtYXRjaCBgb3B0aW9uc2AuXG4gKi9cbmZ1bmN0aW9uIGdldEVsZW1lbnRzKG9wdGlvbnMsIG5vZGVzLCByZWN1cnNlLCBsaW1pdCkge1xuICAgIGlmIChsaW1pdCA9PT0gdm9pZCAwKSB7IGxpbWl0ID0gSW5maW5pdHk7IH1cbiAgICB2YXIgdGVzdCA9IGNvbXBpbGVUZXN0KG9wdGlvbnMpO1xuICAgIHJldHVybiB0ZXN0ID8gKDAsIHF1ZXJ5aW5nX2pzXzEuZmlsdGVyKSh0ZXN0LCBub2RlcywgcmVjdXJzZSwgbGltaXQpIDogW107XG59XG5leHBvcnRzLmdldEVsZW1lbnRzID0gZ2V0RWxlbWVudHM7XG4vKipcbiAqIFJldHVybnMgdGhlIG5vZGUgd2l0aCB0aGUgc3VwcGxpZWQgSUQuXG4gKlxuICogQGNhdGVnb3J5IExlZ2FjeSBRdWVyeSBGdW5jdGlvbnNcbiAqIEBwYXJhbSBpZCBUaGUgdW5pcXVlIElEIGF0dHJpYnV0ZSB2YWx1ZSB0byBsb29rIGZvci5cbiAqIEBwYXJhbSBub2RlcyBOb2RlcyB0byBzZWFyY2ggdGhyb3VnaC5cbiAqIEBwYXJhbSByZWN1cnNlIEFsc28gY29uc2lkZXIgY2hpbGQgbm9kZXMuXG4gKiBAcmV0dXJucyBUaGUgbm9kZSB3aXRoIHRoZSBzdXBwbGllZCBJRC5cbiAqL1xuZnVuY3Rpb24gZ2V0RWxlbWVudEJ5SWQoaWQsIG5vZGVzLCByZWN1cnNlKSB7XG4gICAgaWYgKHJlY3Vyc2UgPT09IHZvaWQgMCkgeyByZWN1cnNlID0gdHJ1ZTsgfVxuICAgIGlmICghQXJyYXkuaXNBcnJheShub2RlcykpXG4gICAgICAgIG5vZGVzID0gW25vZGVzXTtcbiAgICByZXR1cm4gKDAsIHF1ZXJ5aW5nX2pzXzEuZmluZE9uZSkoZ2V0QXR0cmliQ2hlY2soXCJpZFwiLCBpZCksIG5vZGVzLCByZWN1cnNlKTtcbn1cbmV4cG9ydHMuZ2V0RWxlbWVudEJ5SWQgPSBnZXRFbGVtZW50QnlJZDtcbi8qKlxuICogUmV0dXJucyBhbGwgbm9kZXMgd2l0aCB0aGUgc3VwcGxpZWQgYHRhZ05hbWVgLlxuICpcbiAqIEBjYXRlZ29yeSBMZWdhY3kgUXVlcnkgRnVuY3Rpb25zXG4gKiBAcGFyYW0gdGFnTmFtZSBUYWcgbmFtZSB0byBzZWFyY2ggZm9yLlxuICogQHBhcmFtIG5vZGVzIE5vZGVzIHRvIHNlYXJjaCB0aHJvdWdoLlxuICogQHBhcmFtIHJlY3Vyc2UgQWxzbyBjb25zaWRlciBjaGlsZCBub2Rlcy5cbiAqIEBwYXJhbSBsaW1pdCBNYXhpbXVtIG51bWJlciBvZiBub2RlcyB0byByZXR1cm4uXG4gKiBAcmV0dXJucyBBbGwgbm9kZXMgd2l0aCB0aGUgc3VwcGxpZWQgYHRhZ05hbWVgLlxuICovXG5mdW5jdGlvbiBnZXRFbGVtZW50c0J5VGFnTmFtZSh0YWdOYW1lLCBub2RlcywgcmVjdXJzZSwgbGltaXQpIHtcbiAgICBpZiAocmVjdXJzZSA9PT0gdm9pZCAwKSB7IHJlY3Vyc2UgPSB0cnVlOyB9XG4gICAgaWYgKGxpbWl0ID09PSB2b2lkIDApIHsgbGltaXQgPSBJbmZpbml0eTsgfVxuICAgIHJldHVybiAoMCwgcXVlcnlpbmdfanNfMS5maWx0ZXIpKENoZWNrc1tcInRhZ19uYW1lXCJdKHRhZ05hbWUpLCBub2RlcywgcmVjdXJzZSwgbGltaXQpO1xufVxuZXhwb3J0cy5nZXRFbGVtZW50c0J5VGFnTmFtZSA9IGdldEVsZW1lbnRzQnlUYWdOYW1lO1xuLyoqXG4gKiBSZXR1cm5zIGFsbCBub2RlcyB3aXRoIHRoZSBzdXBwbGllZCBgdHlwZWAuXG4gKlxuICogQGNhdGVnb3J5IExlZ2FjeSBRdWVyeSBGdW5jdGlvbnNcbiAqIEBwYXJhbSB0eXBlIEVsZW1lbnQgdHlwZSB0byBsb29rIGZvci5cbiAqIEBwYXJhbSBub2RlcyBOb2RlcyB0byBzZWFyY2ggdGhyb3VnaC5cbiAqIEBwYXJhbSByZWN1cnNlIEFsc28gY29uc2lkZXIgY2hpbGQgbm9kZXMuXG4gKiBAcGFyYW0gbGltaXQgTWF4aW11bSBudW1iZXIgb2Ygbm9kZXMgdG8gcmV0dXJuLlxuICogQHJldHVybnMgQWxsIG5vZGVzIHdpdGggdGhlIHN1cHBsaWVkIGB0eXBlYC5cbiAqL1xuZnVuY3Rpb24gZ2V0RWxlbWVudHNCeVRhZ1R5cGUodHlwZSwgbm9kZXMsIHJlY3Vyc2UsIGxpbWl0KSB7XG4gICAgaWYgKHJlY3Vyc2UgPT09IHZvaWQgMCkgeyByZWN1cnNlID0gdHJ1ZTsgfVxuICAgIGlmIChsaW1pdCA9PT0gdm9pZCAwKSB7IGxpbWl0ID0gSW5maW5pdHk7IH1cbiAgICByZXR1cm4gKDAsIHF1ZXJ5aW5nX2pzXzEuZmlsdGVyKShDaGVja3NbXCJ0YWdfdHlwZVwiXSh0eXBlKSwgbm9kZXMsIHJlY3Vyc2UsIGxpbWl0KTtcbn1cbmV4cG9ydHMuZ2V0RWxlbWVudHNCeVRhZ1R5cGUgPSBnZXRFbGVtZW50c0J5VGFnVHlwZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxlZ2FjeS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucHJlcGVuZCA9IGV4cG9ydHMucHJlcGVuZENoaWxkID0gZXhwb3J0cy5hcHBlbmQgPSBleHBvcnRzLmFwcGVuZENoaWxkID0gZXhwb3J0cy5yZXBsYWNlRWxlbWVudCA9IGV4cG9ydHMucmVtb3ZlRWxlbWVudCA9IHZvaWQgMDtcbi8qKlxuICogUmVtb3ZlIGFuIGVsZW1lbnQgZnJvbSB0aGUgZG9tXG4gKlxuICogQGNhdGVnb3J5IE1hbmlwdWxhdGlvblxuICogQHBhcmFtIGVsZW0gVGhlIGVsZW1lbnQgdG8gYmUgcmVtb3ZlZFxuICovXG5mdW5jdGlvbiByZW1vdmVFbGVtZW50KGVsZW0pIHtcbiAgICBpZiAoZWxlbS5wcmV2KVxuICAgICAgICBlbGVtLnByZXYubmV4dCA9IGVsZW0ubmV4dDtcbiAgICBpZiAoZWxlbS5uZXh0KVxuICAgICAgICBlbGVtLm5leHQucHJldiA9IGVsZW0ucHJldjtcbiAgICBpZiAoZWxlbS5wYXJlbnQpIHtcbiAgICAgICAgdmFyIGNoaWxkcyA9IGVsZW0ucGFyZW50LmNoaWxkcmVuO1xuICAgICAgICB2YXIgY2hpbGRzSW5kZXggPSBjaGlsZHMubGFzdEluZGV4T2YoZWxlbSk7XG4gICAgICAgIGlmIChjaGlsZHNJbmRleCA+PSAwKSB7XG4gICAgICAgICAgICBjaGlsZHMuc3BsaWNlKGNoaWxkc0luZGV4LCAxKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbGVtLm5leHQgPSBudWxsO1xuICAgIGVsZW0ucHJldiA9IG51bGw7XG4gICAgZWxlbS5wYXJlbnQgPSBudWxsO1xufVxuZXhwb3J0cy5yZW1vdmVFbGVtZW50ID0gcmVtb3ZlRWxlbWVudDtcbi8qKlxuICogUmVwbGFjZSBhbiBlbGVtZW50IGluIHRoZSBkb21cbiAqXG4gKiBAY2F0ZWdvcnkgTWFuaXB1bGF0aW9uXG4gKiBAcGFyYW0gZWxlbSBUaGUgZWxlbWVudCB0byBiZSByZXBsYWNlZFxuICogQHBhcmFtIHJlcGxhY2VtZW50IFRoZSBlbGVtZW50IHRvIGJlIGFkZGVkXG4gKi9cbmZ1bmN0aW9uIHJlcGxhY2VFbGVtZW50KGVsZW0sIHJlcGxhY2VtZW50KSB7XG4gICAgdmFyIHByZXYgPSAocmVwbGFjZW1lbnQucHJldiA9IGVsZW0ucHJldik7XG4gICAgaWYgKHByZXYpIHtcbiAgICAgICAgcHJldi5uZXh0ID0gcmVwbGFjZW1lbnQ7XG4gICAgfVxuICAgIHZhciBuZXh0ID0gKHJlcGxhY2VtZW50Lm5leHQgPSBlbGVtLm5leHQpO1xuICAgIGlmIChuZXh0KSB7XG4gICAgICAgIG5leHQucHJldiA9IHJlcGxhY2VtZW50O1xuICAgIH1cbiAgICB2YXIgcGFyZW50ID0gKHJlcGxhY2VtZW50LnBhcmVudCA9IGVsZW0ucGFyZW50KTtcbiAgICBpZiAocGFyZW50KSB7XG4gICAgICAgIHZhciBjaGlsZHMgPSBwYXJlbnQuY2hpbGRyZW47XG4gICAgICAgIGNoaWxkc1tjaGlsZHMubGFzdEluZGV4T2YoZWxlbSldID0gcmVwbGFjZW1lbnQ7XG4gICAgICAgIGVsZW0ucGFyZW50ID0gbnVsbDtcbiAgICB9XG59XG5leHBvcnRzLnJlcGxhY2VFbGVtZW50ID0gcmVwbGFjZUVsZW1lbnQ7XG4vKipcbiAqIEFwcGVuZCBhIGNoaWxkIHRvIGFuIGVsZW1lbnQuXG4gKlxuICogQGNhdGVnb3J5IE1hbmlwdWxhdGlvblxuICogQHBhcmFtIHBhcmVudCBUaGUgZWxlbWVudCB0byBhcHBlbmQgdG8uXG4gKiBAcGFyYW0gY2hpbGQgVGhlIGVsZW1lbnQgdG8gYmUgYWRkZWQgYXMgYSBjaGlsZC5cbiAqL1xuZnVuY3Rpb24gYXBwZW5kQ2hpbGQocGFyZW50LCBjaGlsZCkge1xuICAgIHJlbW92ZUVsZW1lbnQoY2hpbGQpO1xuICAgIGNoaWxkLm5leHQgPSBudWxsO1xuICAgIGNoaWxkLnBhcmVudCA9IHBhcmVudDtcbiAgICBpZiAocGFyZW50LmNoaWxkcmVuLnB1c2goY2hpbGQpID4gMSkge1xuICAgICAgICB2YXIgc2libGluZyA9IHBhcmVudC5jaGlsZHJlbltwYXJlbnQuY2hpbGRyZW4ubGVuZ3RoIC0gMl07XG4gICAgICAgIHNpYmxpbmcubmV4dCA9IGNoaWxkO1xuICAgICAgICBjaGlsZC5wcmV2ID0gc2libGluZztcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNoaWxkLnByZXYgPSBudWxsO1xuICAgIH1cbn1cbmV4cG9ydHMuYXBwZW5kQ2hpbGQgPSBhcHBlbmRDaGlsZDtcbi8qKlxuICogQXBwZW5kIGFuIGVsZW1lbnQgYWZ0ZXIgYW5vdGhlci5cbiAqXG4gKiBAY2F0ZWdvcnkgTWFuaXB1bGF0aW9uXG4gKiBAcGFyYW0gZWxlbSBUaGUgZWxlbWVudCB0byBhcHBlbmQgYWZ0ZXIuXG4gKiBAcGFyYW0gbmV4dCBUaGUgZWxlbWVudCBiZSBhZGRlZC5cbiAqL1xuZnVuY3Rpb24gYXBwZW5kKGVsZW0sIG5leHQpIHtcbiAgICByZW1vdmVFbGVtZW50KG5leHQpO1xuICAgIHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudDtcbiAgICB2YXIgY3Vyck5leHQgPSBlbGVtLm5leHQ7XG4gICAgbmV4dC5uZXh0ID0gY3Vyck5leHQ7XG4gICAgbmV4dC5wcmV2ID0gZWxlbTtcbiAgICBlbGVtLm5leHQgPSBuZXh0O1xuICAgIG5leHQucGFyZW50ID0gcGFyZW50O1xuICAgIGlmIChjdXJyTmV4dCkge1xuICAgICAgICBjdXJyTmV4dC5wcmV2ID0gbmV4dDtcbiAgICAgICAgaWYgKHBhcmVudCkge1xuICAgICAgICAgICAgdmFyIGNoaWxkcyA9IHBhcmVudC5jaGlsZHJlbjtcbiAgICAgICAgICAgIGNoaWxkcy5zcGxpY2UoY2hpbGRzLmxhc3RJbmRleE9mKGN1cnJOZXh0KSwgMCwgbmV4dCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAocGFyZW50KSB7XG4gICAgICAgIHBhcmVudC5jaGlsZHJlbi5wdXNoKG5leHQpO1xuICAgIH1cbn1cbmV4cG9ydHMuYXBwZW5kID0gYXBwZW5kO1xuLyoqXG4gKiBQcmVwZW5kIGEgY2hpbGQgdG8gYW4gZWxlbWVudC5cbiAqXG4gKiBAY2F0ZWdvcnkgTWFuaXB1bGF0aW9uXG4gKiBAcGFyYW0gcGFyZW50IFRoZSBlbGVtZW50IHRvIHByZXBlbmQgYmVmb3JlLlxuICogQHBhcmFtIGNoaWxkIFRoZSBlbGVtZW50IHRvIGJlIGFkZGVkIGFzIGEgY2hpbGQuXG4gKi9cbmZ1bmN0aW9uIHByZXBlbmRDaGlsZChwYXJlbnQsIGNoaWxkKSB7XG4gICAgcmVtb3ZlRWxlbWVudChjaGlsZCk7XG4gICAgY2hpbGQucGFyZW50ID0gcGFyZW50O1xuICAgIGNoaWxkLnByZXYgPSBudWxsO1xuICAgIGlmIChwYXJlbnQuY2hpbGRyZW4udW5zaGlmdChjaGlsZCkgIT09IDEpIHtcbiAgICAgICAgdmFyIHNpYmxpbmcgPSBwYXJlbnQuY2hpbGRyZW5bMV07XG4gICAgICAgIHNpYmxpbmcucHJldiA9IGNoaWxkO1xuICAgICAgICBjaGlsZC5uZXh0ID0gc2libGluZztcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNoaWxkLm5leHQgPSBudWxsO1xuICAgIH1cbn1cbmV4cG9ydHMucHJlcGVuZENoaWxkID0gcHJlcGVuZENoaWxkO1xuLyoqXG4gKiBQcmVwZW5kIGFuIGVsZW1lbnQgYmVmb3JlIGFub3RoZXIuXG4gKlxuICogQGNhdGVnb3J5IE1hbmlwdWxhdGlvblxuICogQHBhcmFtIGVsZW0gVGhlIGVsZW1lbnQgdG8gcHJlcGVuZCBiZWZvcmUuXG4gKiBAcGFyYW0gcHJldiBUaGUgZWxlbWVudCBiZSBhZGRlZC5cbiAqL1xuZnVuY3Rpb24gcHJlcGVuZChlbGVtLCBwcmV2KSB7XG4gICAgcmVtb3ZlRWxlbWVudChwcmV2KTtcbiAgICB2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnQ7XG4gICAgaWYgKHBhcmVudCkge1xuICAgICAgICB2YXIgY2hpbGRzID0gcGFyZW50LmNoaWxkcmVuO1xuICAgICAgICBjaGlsZHMuc3BsaWNlKGNoaWxkcy5pbmRleE9mKGVsZW0pLCAwLCBwcmV2KTtcbiAgICB9XG4gICAgaWYgKGVsZW0ucHJldikge1xuICAgICAgICBlbGVtLnByZXYubmV4dCA9IHByZXY7XG4gICAgfVxuICAgIHByZXYucGFyZW50ID0gcGFyZW50O1xuICAgIHByZXYucHJldiA9IGVsZW0ucHJldjtcbiAgICBwcmV2Lm5leHQgPSBlbGVtO1xuICAgIGVsZW0ucHJldiA9IHByZXY7XG59XG5leHBvcnRzLnByZXBlbmQgPSBwcmVwZW5kO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWFuaXB1bGF0aW9uLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5maW5kQWxsID0gZXhwb3J0cy5leGlzdHNPbmUgPSBleHBvcnRzLmZpbmRPbmUgPSBleHBvcnRzLmZpbmRPbmVDaGlsZCA9IGV4cG9ydHMuZmluZCA9IGV4cG9ydHMuZmlsdGVyID0gdm9pZCAwO1xudmFyIGRvbWhhbmRsZXJfMSA9IHJlcXVpcmUoXCJkb21oYW5kbGVyXCIpO1xuLyoqXG4gKiBTZWFyY2ggYSBub2RlIGFuZCBpdHMgY2hpbGRyZW4gZm9yIG5vZGVzIHBhc3NpbmcgYSB0ZXN0IGZ1bmN0aW9uLiBJZiBgbm9kZWAgaXMgbm90IGFuIGFycmF5LCBpdCB3aWxsIGJlIHdyYXBwZWQgaW4gb25lLlxuICpcbiAqIEBjYXRlZ29yeSBRdWVyeWluZ1xuICogQHBhcmFtIHRlc3QgRnVuY3Rpb24gdG8gdGVzdCBub2RlcyBvbi5cbiAqIEBwYXJhbSBub2RlIE5vZGUgdG8gc2VhcmNoLiBXaWxsIGJlIGluY2x1ZGVkIGluIHRoZSByZXN1bHQgc2V0IGlmIGl0IG1hdGNoZXMuXG4gKiBAcGFyYW0gcmVjdXJzZSBBbHNvIGNvbnNpZGVyIGNoaWxkIG5vZGVzLlxuICogQHBhcmFtIGxpbWl0IE1heGltdW0gbnVtYmVyIG9mIG5vZGVzIHRvIHJldHVybi5cbiAqIEByZXR1cm5zIEFsbCBub2RlcyBwYXNzaW5nIGB0ZXN0YC5cbiAqL1xuZnVuY3Rpb24gZmlsdGVyKHRlc3QsIG5vZGUsIHJlY3Vyc2UsIGxpbWl0KSB7XG4gICAgaWYgKHJlY3Vyc2UgPT09IHZvaWQgMCkgeyByZWN1cnNlID0gdHJ1ZTsgfVxuICAgIGlmIChsaW1pdCA9PT0gdm9pZCAwKSB7IGxpbWl0ID0gSW5maW5pdHk7IH1cbiAgICByZXR1cm4gZmluZCh0ZXN0LCBBcnJheS5pc0FycmF5KG5vZGUpID8gbm9kZSA6IFtub2RlXSwgcmVjdXJzZSwgbGltaXQpO1xufVxuZXhwb3J0cy5maWx0ZXIgPSBmaWx0ZXI7XG4vKipcbiAqIFNlYXJjaCBhbiBhcnJheSBvZiBub2RlcyBhbmQgdGhlaXIgY2hpbGRyZW4gZm9yIG5vZGVzIHBhc3NpbmcgYSB0ZXN0IGZ1bmN0aW9uLlxuICpcbiAqIEBjYXRlZ29yeSBRdWVyeWluZ1xuICogQHBhcmFtIHRlc3QgRnVuY3Rpb24gdG8gdGVzdCBub2RlcyBvbi5cbiAqIEBwYXJhbSBub2RlcyBBcnJheSBvZiBub2RlcyB0byBzZWFyY2guXG4gKiBAcGFyYW0gcmVjdXJzZSBBbHNvIGNvbnNpZGVyIGNoaWxkIG5vZGVzLlxuICogQHBhcmFtIGxpbWl0IE1heGltdW0gbnVtYmVyIG9mIG5vZGVzIHRvIHJldHVybi5cbiAqIEByZXR1cm5zIEFsbCBub2RlcyBwYXNzaW5nIGB0ZXN0YC5cbiAqL1xuZnVuY3Rpb24gZmluZCh0ZXN0LCBub2RlcywgcmVjdXJzZSwgbGltaXQpIHtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgLyoqIFN0YWNrIG9mIHRoZSBhcnJheXMgd2UgYXJlIGxvb2tpbmcgYXQuICovXG4gICAgdmFyIG5vZGVTdGFjayA9IFtub2Rlc107XG4gICAgLyoqIFN0YWNrIG9mIHRoZSBpbmRpY2VzIHdpdGhpbiB0aGUgYXJyYXlzLiAqL1xuICAgIHZhciBpbmRleFN0YWNrID0gWzBdO1xuICAgIGZvciAoOzspIHtcbiAgICAgICAgLy8gRmlyc3QsIGNoZWNrIGlmIHRoZSBjdXJyZW50IGFycmF5IGhhcyBhbnkgbW9yZSBlbGVtZW50cyB0byBsb29rIGF0LlxuICAgICAgICBpZiAoaW5kZXhTdGFja1swXSA+PSBub2RlU3RhY2tbMF0ubGVuZ3RoKSB7XG4gICAgICAgICAgICAvLyBJZiB3ZSBoYXZlIG5vIG1vcmUgYXJyYXlzIHRvIGxvb2sgYXQsIHdlIGFyZSBkb25lLlxuICAgICAgICAgICAgaWYgKGluZGV4U3RhY2subGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIE90aGVyd2lzZSwgcmVtb3ZlIHRoZSBjdXJyZW50IGFycmF5IGZyb20gdGhlIHN0YWNrLlxuICAgICAgICAgICAgbm9kZVN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICBpbmRleFN0YWNrLnNoaWZ0KCk7XG4gICAgICAgICAgICAvLyBMb29wIGJhY2sgdG8gdGhlIHN0YXJ0IHRvIGNvbnRpbnVlIHdpdGggdGhlIG5leHQgYXJyYXkuXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZWxlbSA9IG5vZGVTdGFja1swXVtpbmRleFN0YWNrWzBdKytdO1xuICAgICAgICBpZiAodGVzdChlbGVtKSkge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goZWxlbSk7XG4gICAgICAgICAgICBpZiAoLS1saW1pdCA8PSAwKVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlY3Vyc2UgJiYgKDAsIGRvbWhhbmRsZXJfMS5oYXNDaGlsZHJlbikoZWxlbSkgJiYgZWxlbS5jaGlsZHJlbi5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAvKlxuICAgICAgICAgICAgICogQWRkIHRoZSBjaGlsZHJlbiB0byB0aGUgc3RhY2suIFdlIGFyZSBkZXB0aC1maXJzdCwgc28gdGhpcyBpc1xuICAgICAgICAgICAgICogdGhlIG5leHQgYXJyYXkgd2UgbG9vayBhdC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgaW5kZXhTdGFjay51bnNoaWZ0KDApO1xuICAgICAgICAgICAgbm9kZVN0YWNrLnVuc2hpZnQoZWxlbS5jaGlsZHJlbik7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLmZpbmQgPSBmaW5kO1xuLyoqXG4gKiBGaW5kcyB0aGUgZmlyc3QgZWxlbWVudCBpbnNpZGUgb2YgYW4gYXJyYXkgdGhhdCBtYXRjaGVzIGEgdGVzdCBmdW5jdGlvbi4gVGhpcyBpcyBhbiBhbGlhcyBmb3IgYEFycmF5LnByb3RvdHlwZS5maW5kYC5cbiAqXG4gKiBAY2F0ZWdvcnkgUXVlcnlpbmdcbiAqIEBwYXJhbSB0ZXN0IEZ1bmN0aW9uIHRvIHRlc3Qgbm9kZXMgb24uXG4gKiBAcGFyYW0gbm9kZXMgQXJyYXkgb2Ygbm9kZXMgdG8gc2VhcmNoLlxuICogQHJldHVybnMgVGhlIGZpcnN0IG5vZGUgaW4gdGhlIGFycmF5IHRoYXQgcGFzc2VzIGB0ZXN0YC5cbiAqIEBkZXByZWNhdGVkIFVzZSBgQXJyYXkucHJvdG90eXBlLmZpbmRgIGRpcmVjdGx5LlxuICovXG5mdW5jdGlvbiBmaW5kT25lQ2hpbGQodGVzdCwgbm9kZXMpIHtcbiAgICByZXR1cm4gbm9kZXMuZmluZCh0ZXN0KTtcbn1cbmV4cG9ydHMuZmluZE9uZUNoaWxkID0gZmluZE9uZUNoaWxkO1xuLyoqXG4gKiBGaW5kcyBvbmUgZWxlbWVudCBpbiBhIHRyZWUgdGhhdCBwYXNzZXMgYSB0ZXN0LlxuICpcbiAqIEBjYXRlZ29yeSBRdWVyeWluZ1xuICogQHBhcmFtIHRlc3QgRnVuY3Rpb24gdG8gdGVzdCBub2RlcyBvbi5cbiAqIEBwYXJhbSBub2RlcyBOb2RlIG9yIGFycmF5IG9mIG5vZGVzIHRvIHNlYXJjaC5cbiAqIEBwYXJhbSByZWN1cnNlIEFsc28gY29uc2lkZXIgY2hpbGQgbm9kZXMuXG4gKiBAcmV0dXJucyBUaGUgZmlyc3Qgbm9kZSB0aGF0IHBhc3NlcyBgdGVzdGAuXG4gKi9cbmZ1bmN0aW9uIGZpbmRPbmUodGVzdCwgbm9kZXMsIHJlY3Vyc2UpIHtcbiAgICBpZiAocmVjdXJzZSA9PT0gdm9pZCAwKSB7IHJlY3Vyc2UgPSB0cnVlOyB9XG4gICAgdmFyIGVsZW0gPSBudWxsO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoICYmICFlbGVtOyBpKyspIHtcbiAgICAgICAgdmFyIG5vZGUgPSBub2Rlc1tpXTtcbiAgICAgICAgaWYgKCEoMCwgZG9taGFuZGxlcl8xLmlzVGFnKShub2RlKSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGVzdChub2RlKSkge1xuICAgICAgICAgICAgZWxlbSA9IG5vZGU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocmVjdXJzZSAmJiBub2RlLmNoaWxkcmVuLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGVsZW0gPSBmaW5kT25lKHRlc3QsIG5vZGUuY2hpbGRyZW4sIHRydWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBlbGVtO1xufVxuZXhwb3J0cy5maW5kT25lID0gZmluZE9uZTtcbi8qKlxuICogQ2hlY2tzIGlmIGEgdHJlZSBvZiBub2RlcyBjb250YWlucyBhdCBsZWFzdCBvbmUgbm9kZSBwYXNzaW5nIGEgdGVzdC5cbiAqXG4gKiBAY2F0ZWdvcnkgUXVlcnlpbmdcbiAqIEBwYXJhbSB0ZXN0IEZ1bmN0aW9uIHRvIHRlc3Qgbm9kZXMgb24uXG4gKiBAcGFyYW0gbm9kZXMgQXJyYXkgb2Ygbm9kZXMgdG8gc2VhcmNoLlxuICogQHJldHVybnMgV2hldGhlciBhIHRyZWUgb2Ygbm9kZXMgY29udGFpbnMgYXQgbGVhc3Qgb25lIG5vZGUgcGFzc2luZyB0aGUgdGVzdC5cbiAqL1xuZnVuY3Rpb24gZXhpc3RzT25lKHRlc3QsIG5vZGVzKSB7XG4gICAgcmV0dXJuIG5vZGVzLnNvbWUoZnVuY3Rpb24gKGNoZWNrZWQpIHtcbiAgICAgICAgcmV0dXJuICgwLCBkb21oYW5kbGVyXzEuaXNUYWcpKGNoZWNrZWQpICYmXG4gICAgICAgICAgICAodGVzdChjaGVja2VkKSB8fCBleGlzdHNPbmUodGVzdCwgY2hlY2tlZC5jaGlsZHJlbikpO1xuICAgIH0pO1xufVxuZXhwb3J0cy5leGlzdHNPbmUgPSBleGlzdHNPbmU7XG4vKipcbiAqIFNlYXJjaCBhbiBhcnJheSBvZiBub2RlcyBhbmQgdGhlaXIgY2hpbGRyZW4gZm9yIGVsZW1lbnRzIHBhc3NpbmcgYSB0ZXN0IGZ1bmN0aW9uLlxuICpcbiAqIFNhbWUgYXMgYGZpbmRgLCBidXQgbGltaXRlZCB0byBlbGVtZW50cyBhbmQgd2l0aCBsZXNzIG9wdGlvbnMsIGxlYWRpbmcgdG8gcmVkdWNlZCBjb21wbGV4aXR5LlxuICpcbiAqIEBjYXRlZ29yeSBRdWVyeWluZ1xuICogQHBhcmFtIHRlc3QgRnVuY3Rpb24gdG8gdGVzdCBub2RlcyBvbi5cbiAqIEBwYXJhbSBub2RlcyBBcnJheSBvZiBub2RlcyB0byBzZWFyY2guXG4gKiBAcmV0dXJucyBBbGwgbm9kZXMgcGFzc2luZyBgdGVzdGAuXG4gKi9cbmZ1bmN0aW9uIGZpbmRBbGwodGVzdCwgbm9kZXMpIHtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgdmFyIG5vZGVTdGFjayA9IFtub2Rlc107XG4gICAgdmFyIGluZGV4U3RhY2sgPSBbMF07XG4gICAgZm9yICg7Oykge1xuICAgICAgICBpZiAoaW5kZXhTdGFja1swXSA+PSBub2RlU3RhY2tbMF0ubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAobm9kZVN0YWNrLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBPdGhlcndpc2UsIHJlbW92ZSB0aGUgY3VycmVudCBhcnJheSBmcm9tIHRoZSBzdGFjay5cbiAgICAgICAgICAgIG5vZGVTdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgaW5kZXhTdGFjay5zaGlmdCgpO1xuICAgICAgICAgICAgLy8gTG9vcCBiYWNrIHRvIHRoZSBzdGFydCB0byBjb250aW51ZSB3aXRoIHRoZSBuZXh0IGFycmF5LlxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGVsZW0gPSBub2RlU3RhY2tbMF1baW5kZXhTdGFja1swXSsrXTtcbiAgICAgICAgaWYgKCEoMCwgZG9taGFuZGxlcl8xLmlzVGFnKShlbGVtKSlcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBpZiAodGVzdChlbGVtKSlcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKGVsZW0pO1xuICAgICAgICBpZiAoZWxlbS5jaGlsZHJlbi5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBpbmRleFN0YWNrLnVuc2hpZnQoMCk7XG4gICAgICAgICAgICBub2RlU3RhY2sudW5zaGlmdChlbGVtLmNoaWxkcmVuKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuZmluZEFsbCA9IGZpbmRBbGw7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1xdWVyeWluZy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaW5uZXJUZXh0ID0gZXhwb3J0cy50ZXh0Q29udGVudCA9IGV4cG9ydHMuZ2V0VGV4dCA9IGV4cG9ydHMuZ2V0SW5uZXJIVE1MID0gZXhwb3J0cy5nZXRPdXRlckhUTUwgPSB2b2lkIDA7XG52YXIgZG9taGFuZGxlcl8xID0gcmVxdWlyZShcImRvbWhhbmRsZXJcIik7XG52YXIgZG9tX3NlcmlhbGl6ZXJfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiZG9tLXNlcmlhbGl6ZXJcIikpO1xudmFyIGRvbWVsZW1lbnR0eXBlXzEgPSByZXF1aXJlKFwiZG9tZWxlbWVudHR5cGVcIik7XG4vKipcbiAqIEBjYXRlZ29yeSBTdHJpbmdpZnlcbiAqIEBkZXByZWNhdGVkIFVzZSB0aGUgYGRvbS1zZXJpYWxpemVyYCBtb2R1bGUgZGlyZWN0bHkuXG4gKiBAcGFyYW0gbm9kZSBOb2RlIHRvIGdldCB0aGUgb3V0ZXIgSFRNTCBvZi5cbiAqIEBwYXJhbSBvcHRpb25zIE9wdGlvbnMgZm9yIHNlcmlhbGl6YXRpb24uXG4gKiBAcmV0dXJucyBgbm9kZWAncyBvdXRlciBIVE1MLlxuICovXG5mdW5jdGlvbiBnZXRPdXRlckhUTUwobm9kZSwgb3B0aW9ucykge1xuICAgIHJldHVybiAoMCwgZG9tX3NlcmlhbGl6ZXJfMS5kZWZhdWx0KShub2RlLCBvcHRpb25zKTtcbn1cbmV4cG9ydHMuZ2V0T3V0ZXJIVE1MID0gZ2V0T3V0ZXJIVE1MO1xuLyoqXG4gKiBAY2F0ZWdvcnkgU3RyaW5naWZ5XG4gKiBAZGVwcmVjYXRlZCBVc2UgdGhlIGBkb20tc2VyaWFsaXplcmAgbW9kdWxlIGRpcmVjdGx5LlxuICogQHBhcmFtIG5vZGUgTm9kZSB0byBnZXQgdGhlIGlubmVyIEhUTUwgb2YuXG4gKiBAcGFyYW0gb3B0aW9ucyBPcHRpb25zIGZvciBzZXJpYWxpemF0aW9uLlxuICogQHJldHVybnMgYG5vZGVgJ3MgaW5uZXIgSFRNTC5cbiAqL1xuZnVuY3Rpb24gZ2V0SW5uZXJIVE1MKG5vZGUsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gKDAsIGRvbWhhbmRsZXJfMS5oYXNDaGlsZHJlbikobm9kZSlcbiAgICAgICAgPyBub2RlLmNoaWxkcmVuLm1hcChmdW5jdGlvbiAobm9kZSkgeyByZXR1cm4gZ2V0T3V0ZXJIVE1MKG5vZGUsIG9wdGlvbnMpOyB9KS5qb2luKFwiXCIpXG4gICAgICAgIDogXCJcIjtcbn1cbmV4cG9ydHMuZ2V0SW5uZXJIVE1MID0gZ2V0SW5uZXJIVE1MO1xuLyoqXG4gKiBHZXQgYSBub2RlJ3MgaW5uZXIgdGV4dC4gU2FtZSBhcyBgdGV4dENvbnRlbnRgLCBidXQgaW5zZXJ0cyBuZXdsaW5lcyBmb3IgYDxicj5gIHRhZ3MuIElnbm9yZXMgY29tbWVudHMuXG4gKlxuICogQGNhdGVnb3J5IFN0cmluZ2lmeVxuICogQGRlcHJlY2F0ZWQgVXNlIGB0ZXh0Q29udGVudGAgaW5zdGVhZC5cbiAqIEBwYXJhbSBub2RlIE5vZGUgdG8gZ2V0IHRoZSBpbm5lciB0ZXh0IG9mLlxuICogQHJldHVybnMgYG5vZGVgJ3MgaW5uZXIgdGV4dC5cbiAqL1xuZnVuY3Rpb24gZ2V0VGV4dChub2RlKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkobm9kZSkpXG4gICAgICAgIHJldHVybiBub2RlLm1hcChnZXRUZXh0KS5qb2luKFwiXCIpO1xuICAgIGlmICgoMCwgZG9taGFuZGxlcl8xLmlzVGFnKShub2RlKSlcbiAgICAgICAgcmV0dXJuIG5vZGUubmFtZSA9PT0gXCJiclwiID8gXCJcXG5cIiA6IGdldFRleHQobm9kZS5jaGlsZHJlbik7XG4gICAgaWYgKCgwLCBkb21oYW5kbGVyXzEuaXNDREFUQSkobm9kZSkpXG4gICAgICAgIHJldHVybiBnZXRUZXh0KG5vZGUuY2hpbGRyZW4pO1xuICAgIGlmICgoMCwgZG9taGFuZGxlcl8xLmlzVGV4dCkobm9kZSkpXG4gICAgICAgIHJldHVybiBub2RlLmRhdGE7XG4gICAgcmV0dXJuIFwiXCI7XG59XG5leHBvcnRzLmdldFRleHQgPSBnZXRUZXh0O1xuLyoqXG4gKiBHZXQgYSBub2RlJ3MgdGV4dCBjb250ZW50LiBJZ25vcmVzIGNvbW1lbnRzLlxuICpcbiAqIEBjYXRlZ29yeSBTdHJpbmdpZnlcbiAqIEBwYXJhbSBub2RlIE5vZGUgdG8gZ2V0IHRoZSB0ZXh0IGNvbnRlbnQgb2YuXG4gKiBAcmV0dXJucyBgbm9kZWAncyB0ZXh0IGNvbnRlbnQuXG4gKiBAc2VlIHtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvTm9kZS90ZXh0Q29udGVudH1cbiAqL1xuZnVuY3Rpb24gdGV4dENvbnRlbnQobm9kZSkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KG5vZGUpKVxuICAgICAgICByZXR1cm4gbm9kZS5tYXAodGV4dENvbnRlbnQpLmpvaW4oXCJcIik7XG4gICAgaWYgKCgwLCBkb21oYW5kbGVyXzEuaGFzQ2hpbGRyZW4pKG5vZGUpICYmICEoMCwgZG9taGFuZGxlcl8xLmlzQ29tbWVudCkobm9kZSkpIHtcbiAgICAgICAgcmV0dXJuIHRleHRDb250ZW50KG5vZGUuY2hpbGRyZW4pO1xuICAgIH1cbiAgICBpZiAoKDAsIGRvbWhhbmRsZXJfMS5pc1RleHQpKG5vZGUpKVxuICAgICAgICByZXR1cm4gbm9kZS5kYXRhO1xuICAgIHJldHVybiBcIlwiO1xufVxuZXhwb3J0cy50ZXh0Q29udGVudCA9IHRleHRDb250ZW50O1xuLyoqXG4gKiBHZXQgYSBub2RlJ3MgaW5uZXIgdGV4dCwgaWdub3JpbmcgYDxzY3JpcHQ+YCBhbmQgYDxzdHlsZT5gIHRhZ3MuIElnbm9yZXMgY29tbWVudHMuXG4gKlxuICogQGNhdGVnb3J5IFN0cmluZ2lmeVxuICogQHBhcmFtIG5vZGUgTm9kZSB0byBnZXQgdGhlIGlubmVyIHRleHQgb2YuXG4gKiBAcmV0dXJucyBgbm9kZWAncyBpbm5lciB0ZXh0LlxuICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL05vZGUvaW5uZXJUZXh0fVxuICovXG5mdW5jdGlvbiBpbm5lclRleHQobm9kZSkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KG5vZGUpKVxuICAgICAgICByZXR1cm4gbm9kZS5tYXAoaW5uZXJUZXh0KS5qb2luKFwiXCIpO1xuICAgIGlmICgoMCwgZG9taGFuZGxlcl8xLmhhc0NoaWxkcmVuKShub2RlKSAmJiAobm9kZS50eXBlID09PSBkb21lbGVtZW50dHlwZV8xLkVsZW1lbnRUeXBlLlRhZyB8fCAoMCwgZG9taGFuZGxlcl8xLmlzQ0RBVEEpKG5vZGUpKSkge1xuICAgICAgICByZXR1cm4gaW5uZXJUZXh0KG5vZGUuY2hpbGRyZW4pO1xuICAgIH1cbiAgICBpZiAoKDAsIGRvbWhhbmRsZXJfMS5pc1RleHQpKG5vZGUpKVxuICAgICAgICByZXR1cm4gbm9kZS5kYXRhO1xuICAgIHJldHVybiBcIlwiO1xufVxuZXhwb3J0cy5pbm5lclRleHQgPSBpbm5lclRleHQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdHJpbmdpZnkuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnByZXZFbGVtZW50U2libGluZyA9IGV4cG9ydHMubmV4dEVsZW1lbnRTaWJsaW5nID0gZXhwb3J0cy5nZXROYW1lID0gZXhwb3J0cy5oYXNBdHRyaWIgPSBleHBvcnRzLmdldEF0dHJpYnV0ZVZhbHVlID0gZXhwb3J0cy5nZXRTaWJsaW5ncyA9IGV4cG9ydHMuZ2V0UGFyZW50ID0gZXhwb3J0cy5nZXRDaGlsZHJlbiA9IHZvaWQgMDtcbnZhciBkb21oYW5kbGVyXzEgPSByZXF1aXJlKFwiZG9taGFuZGxlclwiKTtcbi8qKlxuICogR2V0IGEgbm9kZSdzIGNoaWxkcmVuLlxuICpcbiAqIEBjYXRlZ29yeSBUcmF2ZXJzYWxcbiAqIEBwYXJhbSBlbGVtIE5vZGUgdG8gZ2V0IHRoZSBjaGlsZHJlbiBvZi5cbiAqIEByZXR1cm5zIGBlbGVtYCdzIGNoaWxkcmVuLCBvciBhbiBlbXB0eSBhcnJheS5cbiAqL1xuZnVuY3Rpb24gZ2V0Q2hpbGRyZW4oZWxlbSkge1xuICAgIHJldHVybiAoMCwgZG9taGFuZGxlcl8xLmhhc0NoaWxkcmVuKShlbGVtKSA/IGVsZW0uY2hpbGRyZW4gOiBbXTtcbn1cbmV4cG9ydHMuZ2V0Q2hpbGRyZW4gPSBnZXRDaGlsZHJlbjtcbi8qKlxuICogR2V0IGEgbm9kZSdzIHBhcmVudC5cbiAqXG4gKiBAY2F0ZWdvcnkgVHJhdmVyc2FsXG4gKiBAcGFyYW0gZWxlbSBOb2RlIHRvIGdldCB0aGUgcGFyZW50IG9mLlxuICogQHJldHVybnMgYGVsZW1gJ3MgcGFyZW50IG5vZGUsIG9yIGBudWxsYCBpZiBgZWxlbWAgaXMgYSByb290IG5vZGUuXG4gKi9cbmZ1bmN0aW9uIGdldFBhcmVudChlbGVtKSB7XG4gICAgcmV0dXJuIGVsZW0ucGFyZW50IHx8IG51bGw7XG59XG5leHBvcnRzLmdldFBhcmVudCA9IGdldFBhcmVudDtcbi8qKlxuICogR2V0cyBhbiBlbGVtZW50cyBzaWJsaW5ncywgaW5jbHVkaW5nIHRoZSBlbGVtZW50IGl0c2VsZi5cbiAqXG4gKiBBdHRlbXB0cyB0byBnZXQgdGhlIGNoaWxkcmVuIHRocm91Z2ggdGhlIGVsZW1lbnQncyBwYXJlbnQgZmlyc3QuIElmIHdlIGRvbid0XG4gKiBoYXZlIGEgcGFyZW50ICh0aGUgZWxlbWVudCBpcyBhIHJvb3Qgbm9kZSksIHdlIHdhbGsgdGhlIGVsZW1lbnQncyBgcHJldmAgJlxuICogYG5leHRgIHRvIGdldCBhbGwgcmVtYWluaW5nIG5vZGVzLlxuICpcbiAqIEBjYXRlZ29yeSBUcmF2ZXJzYWxcbiAqIEBwYXJhbSBlbGVtIEVsZW1lbnQgdG8gZ2V0IHRoZSBzaWJsaW5ncyBvZi5cbiAqIEByZXR1cm5zIGBlbGVtYCdzIHNpYmxpbmdzLCBpbmNsdWRpbmcgYGVsZW1gLlxuICovXG5mdW5jdGlvbiBnZXRTaWJsaW5ncyhlbGVtKSB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICB2YXIgcGFyZW50ID0gZ2V0UGFyZW50KGVsZW0pO1xuICAgIGlmIChwYXJlbnQgIT0gbnVsbClcbiAgICAgICAgcmV0dXJuIGdldENoaWxkcmVuKHBhcmVudCk7XG4gICAgdmFyIHNpYmxpbmdzID0gW2VsZW1dO1xuICAgIHZhciBwcmV2ID0gZWxlbS5wcmV2LCBuZXh0ID0gZWxlbS5uZXh0O1xuICAgIHdoaWxlIChwcmV2ICE9IG51bGwpIHtcbiAgICAgICAgc2libGluZ3MudW5zaGlmdChwcmV2KTtcbiAgICAgICAgKF9hID0gcHJldiwgcHJldiA9IF9hLnByZXYpO1xuICAgIH1cbiAgICB3aGlsZSAobmV4dCAhPSBudWxsKSB7XG4gICAgICAgIHNpYmxpbmdzLnB1c2gobmV4dCk7XG4gICAgICAgIChfYiA9IG5leHQsIG5leHQgPSBfYi5uZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuIHNpYmxpbmdzO1xufVxuZXhwb3J0cy5nZXRTaWJsaW5ncyA9IGdldFNpYmxpbmdzO1xuLyoqXG4gKiBHZXRzIGFuIGF0dHJpYnV0ZSBmcm9tIGFuIGVsZW1lbnQuXG4gKlxuICogQGNhdGVnb3J5IFRyYXZlcnNhbFxuICogQHBhcmFtIGVsZW0gRWxlbWVudCB0byBjaGVjay5cbiAqIEBwYXJhbSBuYW1lIEF0dHJpYnV0ZSBuYW1lIHRvIHJldHJpZXZlLlxuICogQHJldHVybnMgVGhlIGVsZW1lbnQncyBhdHRyaWJ1dGUgdmFsdWUsIG9yIGB1bmRlZmluZWRgLlxuICovXG5mdW5jdGlvbiBnZXRBdHRyaWJ1dGVWYWx1ZShlbGVtLCBuYW1lKSB7XG4gICAgdmFyIF9hO1xuICAgIHJldHVybiAoX2EgPSBlbGVtLmF0dHJpYnMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYVtuYW1lXTtcbn1cbmV4cG9ydHMuZ2V0QXR0cmlidXRlVmFsdWUgPSBnZXRBdHRyaWJ1dGVWYWx1ZTtcbi8qKlxuICogQ2hlY2tzIHdoZXRoZXIgYW4gZWxlbWVudCBoYXMgYW4gYXR0cmlidXRlLlxuICpcbiAqIEBjYXRlZ29yeSBUcmF2ZXJzYWxcbiAqIEBwYXJhbSBlbGVtIEVsZW1lbnQgdG8gY2hlY2suXG4gKiBAcGFyYW0gbmFtZSBBdHRyaWJ1dGUgbmFtZSB0byBsb29rIGZvci5cbiAqIEByZXR1cm5zIFJldHVybnMgd2hldGhlciBgZWxlbWAgaGFzIHRoZSBhdHRyaWJ1dGUgYG5hbWVgLlxuICovXG5mdW5jdGlvbiBoYXNBdHRyaWIoZWxlbSwgbmFtZSkge1xuICAgIHJldHVybiAoZWxlbS5hdHRyaWJzICE9IG51bGwgJiZcbiAgICAgICAgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGVsZW0uYXR0cmlicywgbmFtZSkgJiZcbiAgICAgICAgZWxlbS5hdHRyaWJzW25hbWVdICE9IG51bGwpO1xufVxuZXhwb3J0cy5oYXNBdHRyaWIgPSBoYXNBdHRyaWI7XG4vKipcbiAqIEdldCB0aGUgdGFnIG5hbWUgb2YgYW4gZWxlbWVudC5cbiAqXG4gKiBAY2F0ZWdvcnkgVHJhdmVyc2FsXG4gKiBAcGFyYW0gZWxlbSBUaGUgZWxlbWVudCB0byBnZXQgdGhlIG5hbWUgZm9yLlxuICogQHJldHVybnMgVGhlIHRhZyBuYW1lIG9mIGBlbGVtYC5cbiAqL1xuZnVuY3Rpb24gZ2V0TmFtZShlbGVtKSB7XG4gICAgcmV0dXJuIGVsZW0ubmFtZTtcbn1cbmV4cG9ydHMuZ2V0TmFtZSA9IGdldE5hbWU7XG4vKipcbiAqIFJldHVybnMgdGhlIG5leHQgZWxlbWVudCBzaWJsaW5nIG9mIGEgbm9kZS5cbiAqXG4gKiBAY2F0ZWdvcnkgVHJhdmVyc2FsXG4gKiBAcGFyYW0gZWxlbSBUaGUgZWxlbWVudCB0byBnZXQgdGhlIG5leHQgc2libGluZyBvZi5cbiAqIEByZXR1cm5zIGBlbGVtYCdzIG5leHQgc2libGluZyB0aGF0IGlzIGEgdGFnLCBvciBgbnVsbGAgaWYgdGhlcmUgaXMgbm8gbmV4dFxuICogc2libGluZy5cbiAqL1xuZnVuY3Rpb24gbmV4dEVsZW1lbnRTaWJsaW5nKGVsZW0pIHtcbiAgICB2YXIgX2E7XG4gICAgdmFyIG5leHQgPSBlbGVtLm5leHQ7XG4gICAgd2hpbGUgKG5leHQgIT09IG51bGwgJiYgISgwLCBkb21oYW5kbGVyXzEuaXNUYWcpKG5leHQpKVxuICAgICAgICAoX2EgPSBuZXh0LCBuZXh0ID0gX2EubmV4dCk7XG4gICAgcmV0dXJuIG5leHQ7XG59XG5leHBvcnRzLm5leHRFbGVtZW50U2libGluZyA9IG5leHRFbGVtZW50U2libGluZztcbi8qKlxuICogUmV0dXJucyB0aGUgcHJldmlvdXMgZWxlbWVudCBzaWJsaW5nIG9mIGEgbm9kZS5cbiAqXG4gKiBAY2F0ZWdvcnkgVHJhdmVyc2FsXG4gKiBAcGFyYW0gZWxlbSBUaGUgZWxlbWVudCB0byBnZXQgdGhlIHByZXZpb3VzIHNpYmxpbmcgb2YuXG4gKiBAcmV0dXJucyBgZWxlbWAncyBwcmV2aW91cyBzaWJsaW5nIHRoYXQgaXMgYSB0YWcsIG9yIGBudWxsYCBpZiB0aGVyZSBpcyBub1xuICogcHJldmlvdXMgc2libGluZy5cbiAqL1xuZnVuY3Rpb24gcHJldkVsZW1lbnRTaWJsaW5nKGVsZW0pIHtcbiAgICB2YXIgX2E7XG4gICAgdmFyIHByZXYgPSBlbGVtLnByZXY7XG4gICAgd2hpbGUgKHByZXYgIT09IG51bGwgJiYgISgwLCBkb21oYW5kbGVyXzEuaXNUYWcpKHByZXYpKVxuICAgICAgICAoX2EgPSBwcmV2LCBwcmV2ID0gX2EucHJldik7XG4gICAgcmV0dXJuIHByZXY7XG59XG5leHBvcnRzLnByZXZFbGVtZW50U2libGluZyA9IHByZXZFbGVtZW50U2libGluZztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRyYXZlcnNhbC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59KTtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kZWNvZGVYTUwgPSBleHBvcnRzLmRlY29kZUhUTUxTdHJpY3QgPSBleHBvcnRzLmRlY29kZUhUTUxBdHRyaWJ1dGUgPSBleHBvcnRzLmRlY29kZUhUTUwgPSBleHBvcnRzLmRldGVybWluZUJyYW5jaCA9IGV4cG9ydHMuRW50aXR5RGVjb2RlciA9IGV4cG9ydHMuRGVjb2RpbmdNb2RlID0gZXhwb3J0cy5CaW5UcmllRmxhZ3MgPSBleHBvcnRzLmZyb21Db2RlUG9pbnQgPSBleHBvcnRzLnJlcGxhY2VDb2RlUG9pbnQgPSBleHBvcnRzLmRlY29kZUNvZGVQb2ludCA9IGV4cG9ydHMueG1sRGVjb2RlVHJlZSA9IGV4cG9ydHMuaHRtbERlY29kZVRyZWUgPSB2b2lkIDA7XG52YXIgZGVjb2RlX2RhdGFfaHRtbF9qc18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2dlbmVyYXRlZC9kZWNvZGUtZGF0YS1odG1sLmpzXCIpKTtcbmV4cG9ydHMuaHRtbERlY29kZVRyZWUgPSBkZWNvZGVfZGF0YV9odG1sX2pzXzEuZGVmYXVsdDtcbnZhciBkZWNvZGVfZGF0YV94bWxfanNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9nZW5lcmF0ZWQvZGVjb2RlLWRhdGEteG1sLmpzXCIpKTtcbmV4cG9ydHMueG1sRGVjb2RlVHJlZSA9IGRlY29kZV9kYXRhX3htbF9qc18xLmRlZmF1bHQ7XG52YXIgZGVjb2RlX2NvZGVwb2ludF9qc18xID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL2RlY29kZV9jb2RlcG9pbnQuanNcIikpO1xuZXhwb3J0cy5kZWNvZGVDb2RlUG9pbnQgPSBkZWNvZGVfY29kZXBvaW50X2pzXzEuZGVmYXVsdDtcbnZhciBkZWNvZGVfY29kZXBvaW50X2pzXzIgPSByZXF1aXJlKFwiLi9kZWNvZGVfY29kZXBvaW50LmpzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwicmVwbGFjZUNvZGVQb2ludFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZGVjb2RlX2NvZGVwb2ludF9qc18yLnJlcGxhY2VDb2RlUG9pbnQ7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJmcm9tQ29kZVBvaW50XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkZWNvZGVfY29kZXBvaW50X2pzXzIuZnJvbUNvZGVQb2ludDsgfSB9KTtcbnZhciBDaGFyQ29kZXM7XG4oZnVuY3Rpb24gKENoYXJDb2Rlcykge1xuICAgIENoYXJDb2Rlc1tDaGFyQ29kZXNbXCJOVU1cIl0gPSAzNV0gPSBcIk5VTVwiO1xuICAgIENoYXJDb2Rlc1tDaGFyQ29kZXNbXCJTRU1JXCJdID0gNTldID0gXCJTRU1JXCI7XG4gICAgQ2hhckNvZGVzW0NoYXJDb2Rlc1tcIkVRVUFMU1wiXSA9IDYxXSA9IFwiRVFVQUxTXCI7XG4gICAgQ2hhckNvZGVzW0NoYXJDb2Rlc1tcIlpFUk9cIl0gPSA0OF0gPSBcIlpFUk9cIjtcbiAgICBDaGFyQ29kZXNbQ2hhckNvZGVzW1wiTklORVwiXSA9IDU3XSA9IFwiTklORVwiO1xuICAgIENoYXJDb2Rlc1tDaGFyQ29kZXNbXCJMT1dFUl9BXCJdID0gOTddID0gXCJMT1dFUl9BXCI7XG4gICAgQ2hhckNvZGVzW0NoYXJDb2Rlc1tcIkxPV0VSX0ZcIl0gPSAxMDJdID0gXCJMT1dFUl9GXCI7XG4gICAgQ2hhckNvZGVzW0NoYXJDb2Rlc1tcIkxPV0VSX1hcIl0gPSAxMjBdID0gXCJMT1dFUl9YXCI7XG4gICAgQ2hhckNvZGVzW0NoYXJDb2Rlc1tcIkxPV0VSX1pcIl0gPSAxMjJdID0gXCJMT1dFUl9aXCI7XG4gICAgQ2hhckNvZGVzW0NoYXJDb2Rlc1tcIlVQUEVSX0FcIl0gPSA2NV0gPSBcIlVQUEVSX0FcIjtcbiAgICBDaGFyQ29kZXNbQ2hhckNvZGVzW1wiVVBQRVJfRlwiXSA9IDcwXSA9IFwiVVBQRVJfRlwiO1xuICAgIENoYXJDb2Rlc1tDaGFyQ29kZXNbXCJVUFBFUl9aXCJdID0gOTBdID0gXCJVUFBFUl9aXCI7XG59KShDaGFyQ29kZXMgfHwgKENoYXJDb2RlcyA9IHt9KSk7XG4vKiogQml0IHRoYXQgbmVlZHMgdG8gYmUgc2V0IHRvIGNvbnZlcnQgYW4gdXBwZXIgY2FzZSBBU0NJSSBjaGFyYWN0ZXIgdG8gbG93ZXIgY2FzZSAqL1xudmFyIFRPX0xPV0VSX0JJVCA9IDMyO1xudmFyIEJpblRyaWVGbGFncztcbihmdW5jdGlvbiAoQmluVHJpZUZsYWdzKSB7XG4gICAgQmluVHJpZUZsYWdzW0JpblRyaWVGbGFnc1tcIlZBTFVFX0xFTkdUSFwiXSA9IDQ5MTUyXSA9IFwiVkFMVUVfTEVOR1RIXCI7XG4gICAgQmluVHJpZUZsYWdzW0JpblRyaWVGbGFnc1tcIkJSQU5DSF9MRU5HVEhcIl0gPSAxNjI1Nl0gPSBcIkJSQU5DSF9MRU5HVEhcIjtcbiAgICBCaW5UcmllRmxhZ3NbQmluVHJpZUZsYWdzW1wiSlVNUF9UQUJMRVwiXSA9IDEyN10gPSBcIkpVTVBfVEFCTEVcIjtcbn0pKEJpblRyaWVGbGFncyA9IGV4cG9ydHMuQmluVHJpZUZsYWdzIHx8IChleHBvcnRzLkJpblRyaWVGbGFncyA9IHt9KSk7XG5mdW5jdGlvbiBpc051bWJlcihjb2RlKSB7XG4gICAgcmV0dXJuIGNvZGUgPj0gQ2hhckNvZGVzLlpFUk8gJiYgY29kZSA8PSBDaGFyQ29kZXMuTklORTtcbn1cbmZ1bmN0aW9uIGlzSGV4YWRlY2ltYWxDaGFyYWN0ZXIoY29kZSkge1xuICAgIHJldHVybiAoKGNvZGUgPj0gQ2hhckNvZGVzLlVQUEVSX0EgJiYgY29kZSA8PSBDaGFyQ29kZXMuVVBQRVJfRikgfHxcbiAgICAgICAgKGNvZGUgPj0gQ2hhckNvZGVzLkxPV0VSX0EgJiYgY29kZSA8PSBDaGFyQ29kZXMuTE9XRVJfRikpO1xufVxuZnVuY3Rpb24gaXNBc2NpaUFscGhhTnVtZXJpYyhjb2RlKSB7XG4gICAgcmV0dXJuICgoY29kZSA+PSBDaGFyQ29kZXMuVVBQRVJfQSAmJiBjb2RlIDw9IENoYXJDb2Rlcy5VUFBFUl9aKSB8fFxuICAgICAgICAoY29kZSA+PSBDaGFyQ29kZXMuTE9XRVJfQSAmJiBjb2RlIDw9IENoYXJDb2Rlcy5MT1dFUl9aKSB8fFxuICAgICAgICBpc051bWJlcihjb2RlKSk7XG59XG4vKipcbiAqIENoZWNrcyBpZiB0aGUgZ2l2ZW4gY2hhcmFjdGVyIGlzIGEgdmFsaWQgZW5kIGNoYXJhY3RlciBmb3IgYW4gZW50aXR5IGluIGFuIGF0dHJpYnV0ZS5cbiAqXG4gKiBBdHRyaWJ1dGUgdmFsdWVzIHRoYXQgYXJlbid0IHRlcm1pbmF0ZWQgcHJvcGVybHkgYXJlbid0IHBhcnNlZCwgYW5kIHNob3VsZG4ndCBsZWFkIHRvIGEgcGFyc2VyIGVycm9yLlxuICogU2VlIHRoZSBleGFtcGxlIGluIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3BhcnNpbmcuaHRtbCNuYW1lZC1jaGFyYWN0ZXItcmVmZXJlbmNlLXN0YXRlXG4gKi9cbmZ1bmN0aW9uIGlzRW50aXR5SW5BdHRyaWJ1dGVJbnZhbGlkRW5kKGNvZGUpIHtcbiAgICByZXR1cm4gY29kZSA9PT0gQ2hhckNvZGVzLkVRVUFMUyB8fCBpc0FzY2lpQWxwaGFOdW1lcmljKGNvZGUpO1xufVxudmFyIEVudGl0eURlY29kZXJTdGF0ZTtcbihmdW5jdGlvbiAoRW50aXR5RGVjb2RlclN0YXRlKSB7XG4gICAgRW50aXR5RGVjb2RlclN0YXRlW0VudGl0eURlY29kZXJTdGF0ZVtcIkVudGl0eVN0YXJ0XCJdID0gMF0gPSBcIkVudGl0eVN0YXJ0XCI7XG4gICAgRW50aXR5RGVjb2RlclN0YXRlW0VudGl0eURlY29kZXJTdGF0ZVtcIk51bWVyaWNTdGFydFwiXSA9IDFdID0gXCJOdW1lcmljU3RhcnRcIjtcbiAgICBFbnRpdHlEZWNvZGVyU3RhdGVbRW50aXR5RGVjb2RlclN0YXRlW1wiTnVtZXJpY0RlY2ltYWxcIl0gPSAyXSA9IFwiTnVtZXJpY0RlY2ltYWxcIjtcbiAgICBFbnRpdHlEZWNvZGVyU3RhdGVbRW50aXR5RGVjb2RlclN0YXRlW1wiTnVtZXJpY0hleFwiXSA9IDNdID0gXCJOdW1lcmljSGV4XCI7XG4gICAgRW50aXR5RGVjb2RlclN0YXRlW0VudGl0eURlY29kZXJTdGF0ZVtcIk5hbWVkRW50aXR5XCJdID0gNF0gPSBcIk5hbWVkRW50aXR5XCI7XG59KShFbnRpdHlEZWNvZGVyU3RhdGUgfHwgKEVudGl0eURlY29kZXJTdGF0ZSA9IHt9KSk7XG52YXIgRGVjb2RpbmdNb2RlO1xuKGZ1bmN0aW9uIChEZWNvZGluZ01vZGUpIHtcbiAgICAvKiogRW50aXRpZXMgaW4gdGV4dCBub2RlcyB0aGF0IGNhbiBlbmQgd2l0aCBhbnkgY2hhcmFjdGVyLiAqL1xuICAgIERlY29kaW5nTW9kZVtEZWNvZGluZ01vZGVbXCJMZWdhY3lcIl0gPSAwXSA9IFwiTGVnYWN5XCI7XG4gICAgLyoqIE9ubHkgYWxsb3cgZW50aXRpZXMgdGVybWluYXRlZCB3aXRoIGEgc2VtaWNvbG9uLiAqL1xuICAgIERlY29kaW5nTW9kZVtEZWNvZGluZ01vZGVbXCJTdHJpY3RcIl0gPSAxXSA9IFwiU3RyaWN0XCI7XG4gICAgLyoqIEVudGl0aWVzIGluIGF0dHJpYnV0ZXMgaGF2ZSBsaW1pdGF0aW9ucyBvbiBlbmRpbmcgY2hhcmFjdGVycy4gKi9cbiAgICBEZWNvZGluZ01vZGVbRGVjb2RpbmdNb2RlW1wiQXR0cmlidXRlXCJdID0gMl0gPSBcIkF0dHJpYnV0ZVwiO1xufSkoRGVjb2RpbmdNb2RlID0gZXhwb3J0cy5EZWNvZGluZ01vZGUgfHwgKGV4cG9ydHMuRGVjb2RpbmdNb2RlID0ge30pKTtcbi8qKlxuICogVG9rZW4gZGVjb2RlciB3aXRoIHN1cHBvcnQgb2Ygd3JpdGluZyBwYXJ0aWFsIGVudGl0aWVzLlxuICovXG52YXIgRW50aXR5RGVjb2RlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBFbnRpdHlEZWNvZGVyKFxuICAgIC8qKiBUaGUgdHJlZSB1c2VkIHRvIGRlY29kZSBlbnRpdGllcy4gKi9cbiAgICBkZWNvZGVUcmVlLCBcbiAgICAvKipcbiAgICAgKiBUaGUgZnVuY3Rpb24gdGhhdCBpcyBjYWxsZWQgd2hlbiBhIGNvZGVwb2ludCBpcyBkZWNvZGVkLlxuICAgICAqXG4gICAgICogRm9yIG11bHRpLWJ5dGUgbmFtZWQgZW50aXRpZXMsIHRoaXMgd2lsbCBiZSBjYWxsZWQgbXVsdGlwbGUgdGltZXMsXG4gICAgICogd2l0aCB0aGUgc2Vjb25kIGNvZGVwb2ludCwgYW5kIHRoZSBzYW1lIGBjb25zdW1lZGAgdmFsdWUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29kZXBvaW50IFRoZSBkZWNvZGVkIGNvZGVwb2ludC5cbiAgICAgKiBAcGFyYW0gY29uc3VtZWQgVGhlIG51bWJlciBvZiBieXRlcyBjb25zdW1lZCBieSB0aGUgZGVjb2Rlci5cbiAgICAgKi9cbiAgICBlbWl0Q29kZVBvaW50LCBcbiAgICAvKiogQW4gb2JqZWN0IHRoYXQgaXMgdXNlZCB0byBwcm9kdWNlIGVycm9ycy4gKi9cbiAgICBlcnJvcnMpIHtcbiAgICAgICAgdGhpcy5kZWNvZGVUcmVlID0gZGVjb2RlVHJlZTtcbiAgICAgICAgdGhpcy5lbWl0Q29kZVBvaW50ID0gZW1pdENvZGVQb2ludDtcbiAgICAgICAgdGhpcy5lcnJvcnMgPSBlcnJvcnM7XG4gICAgICAgIC8qKiBUaGUgY3VycmVudCBzdGF0ZSBvZiB0aGUgZGVjb2Rlci4gKi9cbiAgICAgICAgdGhpcy5zdGF0ZSA9IEVudGl0eURlY29kZXJTdGF0ZS5FbnRpdHlTdGFydDtcbiAgICAgICAgLyoqIENoYXJhY3RlcnMgdGhhdCB3ZXJlIGNvbnN1bWVkIHdoaWxlIHBhcnNpbmcgYW4gZW50aXR5LiAqL1xuICAgICAgICB0aGlzLmNvbnN1bWVkID0gMTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSByZXN1bHQgb2YgdGhlIGVudGl0eS5cbiAgICAgICAgICpcbiAgICAgICAgICogRWl0aGVyIHRoZSByZXN1bHQgaW5kZXggb2YgYSBudW1lcmljIGVudGl0eSwgb3IgdGhlIGNvZGVwb2ludCBvZiBhXG4gICAgICAgICAqIG51bWVyaWMgZW50aXR5LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5yZXN1bHQgPSAwO1xuICAgICAgICAvKiogVGhlIGN1cnJlbnQgaW5kZXggaW4gdGhlIGRlY29kZSB0cmVlLiAqL1xuICAgICAgICB0aGlzLnRyZWVJbmRleCA9IDA7XG4gICAgICAgIC8qKiBUaGUgbnVtYmVyIG9mIGNoYXJhY3RlcnMgdGhhdCB3ZXJlIGNvbnN1bWVkIGluIGV4Y2Vzcy4gKi9cbiAgICAgICAgdGhpcy5leGNlc3MgPSAxO1xuICAgICAgICAvKiogVGhlIG1vZGUgaW4gd2hpY2ggdGhlIGRlY29kZXIgaXMgb3BlcmF0aW5nLiAqL1xuICAgICAgICB0aGlzLmRlY29kZU1vZGUgPSBEZWNvZGluZ01vZGUuU3RyaWN0O1xuICAgIH1cbiAgICAvKiogUmVzZXRzIHRoZSBpbnN0YW5jZSB0byBtYWtlIGl0IHJldXNhYmxlLiAqL1xuICAgIEVudGl0eURlY29kZXIucHJvdG90eXBlLnN0YXJ0RW50aXR5ID0gZnVuY3Rpb24gKGRlY29kZU1vZGUpIHtcbiAgICAgICAgdGhpcy5kZWNvZGVNb2RlID0gZGVjb2RlTW9kZTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IEVudGl0eURlY29kZXJTdGF0ZS5FbnRpdHlTdGFydDtcbiAgICAgICAgdGhpcy5yZXN1bHQgPSAwO1xuICAgICAgICB0aGlzLnRyZWVJbmRleCA9IDA7XG4gICAgICAgIHRoaXMuZXhjZXNzID0gMTtcbiAgICAgICAgdGhpcy5jb25zdW1lZCA9IDE7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBXcml0ZSBhbiBlbnRpdHkgdG8gdGhlIGRlY29kZXIuIFRoaXMgY2FuIGJlIGNhbGxlZCBtdWx0aXBsZSB0aW1lcyB3aXRoIHBhcnRpYWwgZW50aXRpZXMuXG4gICAgICogSWYgdGhlIGVudGl0eSBpcyBpbmNvbXBsZXRlLCB0aGUgZGVjb2RlciB3aWxsIHJldHVybiAtMS5cbiAgICAgKlxuICAgICAqIE1pcnJvcnMgdGhlIGltcGxlbWVudGF0aW9uIG9mIGBnZXREZWNvZGVyYCwgYnV0IHdpdGggdGhlIGFiaWxpdHkgdG8gc3RvcCBkZWNvZGluZyBpZiB0aGVcbiAgICAgKiBlbnRpdHkgaXMgaW5jb21wbGV0ZSwgYW5kIHJlc3VtZSB3aGVuIHRoZSBuZXh0IHN0cmluZyBpcyB3cml0dGVuLlxuICAgICAqXG4gICAgICogQHBhcmFtIHN0cmluZyBUaGUgc3RyaW5nIGNvbnRhaW5pbmcgdGhlIGVudGl0eSAob3IgYSBjb250aW51YXRpb24gb2YgdGhlIGVudGl0eSkuXG4gICAgICogQHBhcmFtIG9mZnNldCBUaGUgb2Zmc2V0IGF0IHdoaWNoIHRoZSBlbnRpdHkgYmVnaW5zLiBTaG91bGQgYmUgMCBpZiB0aGlzIGlzIG5vdCB0aGUgZmlyc3QgY2FsbC5cbiAgICAgKiBAcmV0dXJucyBUaGUgbnVtYmVyIG9mIGNoYXJhY3RlcnMgdGhhdCB3ZXJlIGNvbnN1bWVkLCBvciAtMSBpZiB0aGUgZW50aXR5IGlzIGluY29tcGxldGUuXG4gICAgICovXG4gICAgRW50aXR5RGVjb2Rlci5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiAoc3RyLCBvZmZzZXQpIHtcbiAgICAgICAgc3dpdGNoICh0aGlzLnN0YXRlKSB7XG4gICAgICAgICAgICBjYXNlIEVudGl0eURlY29kZXJTdGF0ZS5FbnRpdHlTdGFydDoge1xuICAgICAgICAgICAgICAgIGlmIChzdHIuY2hhckNvZGVBdChvZmZzZXQpID09PSBDaGFyQ29kZXMuTlVNKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBFbnRpdHlEZWNvZGVyU3RhdGUuTnVtZXJpY1N0YXJ0O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnN1bWVkICs9IDE7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnN0YXRlTnVtZXJpY1N0YXJ0KHN0ciwgb2Zmc2V0ICsgMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBFbnRpdHlEZWNvZGVyU3RhdGUuTmFtZWRFbnRpdHk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGVOYW1lZEVudGl0eShzdHIsIG9mZnNldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIEVudGl0eURlY29kZXJTdGF0ZS5OdW1lcmljU3RhcnQ6IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZU51bWVyaWNTdGFydChzdHIsIG9mZnNldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIEVudGl0eURlY29kZXJTdGF0ZS5OdW1lcmljRGVjaW1hbDoge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnN0YXRlTnVtZXJpY0RlY2ltYWwoc3RyLCBvZmZzZXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBFbnRpdHlEZWNvZGVyU3RhdGUuTnVtZXJpY0hleDoge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnN0YXRlTnVtZXJpY0hleChzdHIsIG9mZnNldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIEVudGl0eURlY29kZXJTdGF0ZS5OYW1lZEVudGl0eToge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnN0YXRlTmFtZWRFbnRpdHkoc3RyLCBvZmZzZXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTd2l0Y2hlcyBiZXR3ZWVuIHRoZSBudW1lcmljIGRlY2ltYWwgYW5kIGhleGFkZWNpbWFsIHN0YXRlcy5cbiAgICAgKlxuICAgICAqIEVxdWl2YWxlbnQgdG8gdGhlIGBOdW1lcmljIGNoYXJhY3RlciByZWZlcmVuY2Ugc3RhdGVgIGluIHRoZSBIVE1MIHNwZWMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gc3RyIFRoZSBzdHJpbmcgY29udGFpbmluZyB0aGUgZW50aXR5IChvciBhIGNvbnRpbnVhdGlvbiBvZiB0aGUgZW50aXR5KS5cbiAgICAgKiBAcGFyYW0gb2Zmc2V0IFRoZSBjdXJyZW50IG9mZnNldC5cbiAgICAgKiBAcmV0dXJucyBUaGUgbnVtYmVyIG9mIGNoYXJhY3RlcnMgdGhhdCB3ZXJlIGNvbnN1bWVkLCBvciAtMSBpZiB0aGUgZW50aXR5IGlzIGluY29tcGxldGUuXG4gICAgICovXG4gICAgRW50aXR5RGVjb2Rlci5wcm90b3R5cGUuc3RhdGVOdW1lcmljU3RhcnQgPSBmdW5jdGlvbiAoc3RyLCBvZmZzZXQpIHtcbiAgICAgICAgaWYgKG9mZnNldCA+PSBzdHIubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKChzdHIuY2hhckNvZGVBdChvZmZzZXQpIHwgVE9fTE9XRVJfQklUKSA9PT0gQ2hhckNvZGVzLkxPV0VSX1gpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBFbnRpdHlEZWNvZGVyU3RhdGUuTnVtZXJpY0hleDtcbiAgICAgICAgICAgIHRoaXMuY29uc3VtZWQgKz0gMTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnN0YXRlTnVtZXJpY0hleChzdHIsIG9mZnNldCArIDEpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc3RhdGUgPSBFbnRpdHlEZWNvZGVyU3RhdGUuTnVtZXJpY0RlY2ltYWw7XG4gICAgICAgIHJldHVybiB0aGlzLnN0YXRlTnVtZXJpY0RlY2ltYWwoc3RyLCBvZmZzZXQpO1xuICAgIH07XG4gICAgRW50aXR5RGVjb2Rlci5wcm90b3R5cGUuYWRkVG9OdW1lcmljUmVzdWx0ID0gZnVuY3Rpb24gKHN0ciwgc3RhcnQsIGVuZCwgYmFzZSkge1xuICAgICAgICBpZiAoc3RhcnQgIT09IGVuZCkge1xuICAgICAgICAgICAgdmFyIGRpZ2l0Q291bnQgPSBlbmQgLSBzdGFydDtcbiAgICAgICAgICAgIHRoaXMucmVzdWx0ID1cbiAgICAgICAgICAgICAgICB0aGlzLnJlc3VsdCAqIE1hdGgucG93KGJhc2UsIGRpZ2l0Q291bnQpICtcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VJbnQoc3RyLnN1YnN0cihzdGFydCwgZGlnaXRDb3VudCksIGJhc2UpO1xuICAgICAgICAgICAgdGhpcy5jb25zdW1lZCArPSBkaWdpdENvdW50O1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBQYXJzZXMgYSBoZXhhZGVjaW1hbCBudW1lcmljIGVudGl0eS5cbiAgICAgKlxuICAgICAqIEVxdWl2YWxlbnQgdG8gdGhlIGBIZXhhZGVtaWNhbCBjaGFyYWN0ZXIgcmVmZXJlbmNlIHN0YXRlYCBpbiB0aGUgSFRNTCBzcGVjLlxuICAgICAqXG4gICAgICogQHBhcmFtIHN0ciBUaGUgc3RyaW5nIGNvbnRhaW5pbmcgdGhlIGVudGl0eSAob3IgYSBjb250aW51YXRpb24gb2YgdGhlIGVudGl0eSkuXG4gICAgICogQHBhcmFtIG9mZnNldCBUaGUgY3VycmVudCBvZmZzZXQuXG4gICAgICogQHJldHVybnMgVGhlIG51bWJlciBvZiBjaGFyYWN0ZXJzIHRoYXQgd2VyZSBjb25zdW1lZCwgb3IgLTEgaWYgdGhlIGVudGl0eSBpcyBpbmNvbXBsZXRlLlxuICAgICAqL1xuICAgIEVudGl0eURlY29kZXIucHJvdG90eXBlLnN0YXRlTnVtZXJpY0hleCA9IGZ1bmN0aW9uIChzdHIsIG9mZnNldCkge1xuICAgICAgICB2YXIgc3RhcnRJZHggPSBvZmZzZXQ7XG4gICAgICAgIHdoaWxlIChvZmZzZXQgPCBzdHIubGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIgY2hhciA9IHN0ci5jaGFyQ29kZUF0KG9mZnNldCk7XG4gICAgICAgICAgICBpZiAoaXNOdW1iZXIoY2hhcikgfHwgaXNIZXhhZGVjaW1hbENoYXJhY3RlcihjaGFyKSkge1xuICAgICAgICAgICAgICAgIG9mZnNldCArPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGRUb051bWVyaWNSZXN1bHQoc3RyLCBzdGFydElkeCwgb2Zmc2V0LCAxNik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZW1pdE51bWVyaWNFbnRpdHkoY2hhciwgMyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hZGRUb051bWVyaWNSZXN1bHQoc3RyLCBzdGFydElkeCwgb2Zmc2V0LCAxNik7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFBhcnNlcyBhIGRlY2ltYWwgbnVtZXJpYyBlbnRpdHkuXG4gICAgICpcbiAgICAgKiBFcXVpdmFsZW50IHRvIHRoZSBgRGVjaW1hbCBjaGFyYWN0ZXIgcmVmZXJlbmNlIHN0YXRlYCBpbiB0aGUgSFRNTCBzcGVjLlxuICAgICAqXG4gICAgICogQHBhcmFtIHN0ciBUaGUgc3RyaW5nIGNvbnRhaW5pbmcgdGhlIGVudGl0eSAob3IgYSBjb250aW51YXRpb24gb2YgdGhlIGVudGl0eSkuXG4gICAgICogQHBhcmFtIG9mZnNldCBUaGUgY3VycmVudCBvZmZzZXQuXG4gICAgICogQHJldHVybnMgVGhlIG51bWJlciBvZiBjaGFyYWN0ZXJzIHRoYXQgd2VyZSBjb25zdW1lZCwgb3IgLTEgaWYgdGhlIGVudGl0eSBpcyBpbmNvbXBsZXRlLlxuICAgICAqL1xuICAgIEVudGl0eURlY29kZXIucHJvdG90eXBlLnN0YXRlTnVtZXJpY0RlY2ltYWwgPSBmdW5jdGlvbiAoc3RyLCBvZmZzZXQpIHtcbiAgICAgICAgdmFyIHN0YXJ0SWR4ID0gb2Zmc2V0O1xuICAgICAgICB3aGlsZSAob2Zmc2V0IDwgc3RyLmxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIGNoYXIgPSBzdHIuY2hhckNvZGVBdChvZmZzZXQpO1xuICAgICAgICAgICAgaWYgKGlzTnVtYmVyKGNoYXIpKSB7XG4gICAgICAgICAgICAgICAgb2Zmc2V0ICs9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFkZFRvTnVtZXJpY1Jlc3VsdChzdHIsIHN0YXJ0SWR4LCBvZmZzZXQsIDEwKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lbWl0TnVtZXJpY0VudGl0eShjaGFyLCAyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmFkZFRvTnVtZXJpY1Jlc3VsdChzdHIsIHN0YXJ0SWR4LCBvZmZzZXQsIDEwKTtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogVmFsaWRhdGUgYW5kIGVtaXQgYSBudW1lcmljIGVudGl0eS5cbiAgICAgKlxuICAgICAqIEltcGxlbWVudHMgdGhlIGxvZ2ljIGZyb20gdGhlIGBIZXhhZGVtaWNhbCBjaGFyYWN0ZXIgcmVmZXJlbmNlIHN0YXJ0XG4gICAgICogc3RhdGVgIGFuZCBgTnVtZXJpYyBjaGFyYWN0ZXIgcmVmZXJlbmNlIGVuZCBzdGF0ZWAgaW4gdGhlIEhUTUwgc3BlYy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBsYXN0Q3AgVGhlIGxhc3QgY29kZSBwb2ludCBvZiB0aGUgZW50aXR5LiBVc2VkIHRvIHNlZSBpZiB0aGVcbiAgICAgKiAgICAgICAgICAgICAgIGVudGl0eSB3YXMgdGVybWluYXRlZCB3aXRoIGEgc2VtaWNvbG9uLlxuICAgICAqIEBwYXJhbSBleHBlY3RlZExlbmd0aCBUaGUgbWluaW11bSBudW1iZXIgb2YgY2hhcmFjdGVycyB0aGF0IHNob3VsZCBiZVxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICBjb25zdW1lZC4gVXNlZCB0byB2YWxpZGF0ZSB0aGF0IGF0IGxlYXN0IG9uZSBkaWdpdFxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICB3YXMgY29uc3VtZWQuXG4gICAgICogQHJldHVybnMgVGhlIG51bWJlciBvZiBjaGFyYWN0ZXJzIHRoYXQgd2VyZSBjb25zdW1lZC5cbiAgICAgKi9cbiAgICBFbnRpdHlEZWNvZGVyLnByb3RvdHlwZS5lbWl0TnVtZXJpY0VudGl0eSA9IGZ1bmN0aW9uIChsYXN0Q3AsIGV4cGVjdGVkTGVuZ3RoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgLy8gRW5zdXJlIHdlIGNvbnN1bWVkIGF0IGxlYXN0IG9uZSBkaWdpdC5cbiAgICAgICAgaWYgKHRoaXMuY29uc3VtZWQgPD0gZXhwZWN0ZWRMZW5ndGgpIHtcbiAgICAgICAgICAgIChfYSA9IHRoaXMuZXJyb3JzKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuYWJzZW5jZU9mRGlnaXRzSW5OdW1lcmljQ2hhcmFjdGVyUmVmZXJlbmNlKHRoaXMuY29uc3VtZWQpO1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cbiAgICAgICAgLy8gRmlndXJlIG91dCBpZiB0aGlzIGlzIGEgbGVnaXQgZW5kIG9mIHRoZSBlbnRpdHlcbiAgICAgICAgaWYgKGxhc3RDcCA9PT0gQ2hhckNvZGVzLlNFTUkpIHtcbiAgICAgICAgICAgIHRoaXMuY29uc3VtZWQgKz0gMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLmRlY29kZU1vZGUgPT09IERlY29kaW5nTW9kZS5TdHJpY3QpIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZW1pdENvZGVQb2ludCgoMCwgZGVjb2RlX2NvZGVwb2ludF9qc18xLnJlcGxhY2VDb2RlUG9pbnQpKHRoaXMucmVzdWx0KSwgdGhpcy5jb25zdW1lZCk7XG4gICAgICAgIGlmICh0aGlzLmVycm9ycykge1xuICAgICAgICAgICAgaWYgKGxhc3RDcCAhPT0gQ2hhckNvZGVzLlNFTUkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVycm9ycy5taXNzaW5nU2VtaWNvbG9uQWZ0ZXJDaGFyYWN0ZXJSZWZlcmVuY2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZXJyb3JzLnZhbGlkYXRlTnVtZXJpY0NoYXJhY3RlclJlZmVyZW5jZSh0aGlzLnJlc3VsdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuY29uc3VtZWQ7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBQYXJzZXMgYSBuYW1lZCBlbnRpdHkuXG4gICAgICpcbiAgICAgKiBFcXVpdmFsZW50IHRvIHRoZSBgTmFtZWQgY2hhcmFjdGVyIHJlZmVyZW5jZSBzdGF0ZWAgaW4gdGhlIEhUTUwgc3BlYy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBzdHIgVGhlIHN0cmluZyBjb250YWluaW5nIHRoZSBlbnRpdHkgKG9yIGEgY29udGludWF0aW9uIG9mIHRoZSBlbnRpdHkpLlxuICAgICAqIEBwYXJhbSBvZmZzZXQgVGhlIGN1cnJlbnQgb2Zmc2V0LlxuICAgICAqIEByZXR1cm5zIFRoZSBudW1iZXIgb2YgY2hhcmFjdGVycyB0aGF0IHdlcmUgY29uc3VtZWQsIG9yIC0xIGlmIHRoZSBlbnRpdHkgaXMgaW5jb21wbGV0ZS5cbiAgICAgKi9cbiAgICBFbnRpdHlEZWNvZGVyLnByb3RvdHlwZS5zdGF0ZU5hbWVkRW50aXR5ID0gZnVuY3Rpb24gKHN0ciwgb2Zmc2V0KSB7XG4gICAgICAgIHZhciBkZWNvZGVUcmVlID0gdGhpcy5kZWNvZGVUcmVlO1xuICAgICAgICB2YXIgY3VycmVudCA9IGRlY29kZVRyZWVbdGhpcy50cmVlSW5kZXhdO1xuICAgICAgICAvLyBUaGUgbWFzayBpcyB0aGUgbnVtYmVyIG9mIGJ5dGVzIG9mIHRoZSB2YWx1ZSwgaW5jbHVkaW5nIHRoZSBjdXJyZW50IGJ5dGUuXG4gICAgICAgIHZhciB2YWx1ZUxlbmd0aCA9IChjdXJyZW50ICYgQmluVHJpZUZsYWdzLlZBTFVFX0xFTkdUSCkgPj4gMTQ7XG4gICAgICAgIGZvciAoOyBvZmZzZXQgPCBzdHIubGVuZ3RoOyBvZmZzZXQrKywgdGhpcy5leGNlc3MrKykge1xuICAgICAgICAgICAgdmFyIGNoYXIgPSBzdHIuY2hhckNvZGVBdChvZmZzZXQpO1xuICAgICAgICAgICAgdGhpcy50cmVlSW5kZXggPSBkZXRlcm1pbmVCcmFuY2goZGVjb2RlVHJlZSwgY3VycmVudCwgdGhpcy50cmVlSW5kZXggKyBNYXRoLm1heCgxLCB2YWx1ZUxlbmd0aCksIGNoYXIpO1xuICAgICAgICAgICAgaWYgKHRoaXMudHJlZUluZGV4IDwgMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnJlc3VsdCA9PT0gMCB8fFxuICAgICAgICAgICAgICAgICAgICAvLyBJZiB3ZSBhcmUgcGFyc2luZyBhbiBhdHRyaWJ1dGVcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMuZGVjb2RlTW9kZSA9PT0gRGVjb2RpbmdNb2RlLkF0dHJpYnV0ZSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2Ugc2hvdWxkbid0IGhhdmUgY29uc3VtZWQgYW55IGNoYXJhY3RlcnMgYWZ0ZXIgdGhlIGVudGl0eSxcbiAgICAgICAgICAgICAgICAgICAgICAgICh2YWx1ZUxlbmd0aCA9PT0gMCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFuZCB0aGVyZSBzaG91bGQgYmUgbm8gaW52YWxpZCBjaGFyYWN0ZXJzLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzRW50aXR5SW5BdHRyaWJ1dGVJbnZhbGlkRW5kKGNoYXIpKSlcbiAgICAgICAgICAgICAgICAgICAgPyAwXG4gICAgICAgICAgICAgICAgICAgIDogdGhpcy5lbWl0Tm90VGVybWluYXRlZE5hbWVkRW50aXR5KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjdXJyZW50ID0gZGVjb2RlVHJlZVt0aGlzLnRyZWVJbmRleF07XG4gICAgICAgICAgICB2YWx1ZUxlbmd0aCA9IChjdXJyZW50ICYgQmluVHJpZUZsYWdzLlZBTFVFX0xFTkdUSCkgPj4gMTQ7XG4gICAgICAgICAgICAvLyBJZiB0aGUgYnJhbmNoIGlzIGEgdmFsdWUsIHN0b3JlIGl0IGFuZCBjb250aW51ZVxuICAgICAgICAgICAgaWYgKHZhbHVlTGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgdGhlIGVudGl0eSBpcyB0ZXJtaW5hdGVkIGJ5IGEgc2VtaWNvbG9uLCB3ZSBhcmUgZG9uZS5cbiAgICAgICAgICAgICAgICBpZiAoY2hhciA9PT0gQ2hhckNvZGVzLlNFTUkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZW1pdE5hbWVkRW50aXR5RGF0YSh0aGlzLnRyZWVJbmRleCwgdmFsdWVMZW5ndGgsIHRoaXMuY29uc3VtZWQgKyB0aGlzLmV4Y2Vzcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIElmIHdlIGVuY291bnRlciBhIG5vbi10ZXJtaW5hdGVkIChsZWdhY3kpIGVudGl0eSB3aGlsZSBwYXJzaW5nIHN0cmljdGx5LCB0aGVuIGlnbm9yZSBpdC5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5kZWNvZGVNb2RlICE9PSBEZWNvZGluZ01vZGUuU3RyaWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVzdWx0ID0gdGhpcy50cmVlSW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29uc3VtZWQgKz0gdGhpcy5leGNlc3M7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXhjZXNzID0gMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIC0xO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogRW1pdCBhIG5hbWVkIGVudGl0eSB0aGF0IHdhcyBub3QgdGVybWluYXRlZCB3aXRoIGEgc2VtaWNvbG9uLlxuICAgICAqXG4gICAgICogQHJldHVybnMgVGhlIG51bWJlciBvZiBjaGFyYWN0ZXJzIGNvbnN1bWVkLlxuICAgICAqL1xuICAgIEVudGl0eURlY29kZXIucHJvdG90eXBlLmVtaXROb3RUZXJtaW5hdGVkTmFtZWRFbnRpdHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgdmFyIF9iID0gdGhpcywgcmVzdWx0ID0gX2IucmVzdWx0LCBkZWNvZGVUcmVlID0gX2IuZGVjb2RlVHJlZTtcbiAgICAgICAgdmFyIHZhbHVlTGVuZ3RoID0gKGRlY29kZVRyZWVbcmVzdWx0XSAmIEJpblRyaWVGbGFncy5WQUxVRV9MRU5HVEgpID4+IDE0O1xuICAgICAgICB0aGlzLmVtaXROYW1lZEVudGl0eURhdGEocmVzdWx0LCB2YWx1ZUxlbmd0aCwgdGhpcy5jb25zdW1lZCk7XG4gICAgICAgIChfYSA9IHRoaXMuZXJyb3JzKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubWlzc2luZ1NlbWljb2xvbkFmdGVyQ2hhcmFjdGVyUmVmZXJlbmNlKCk7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnN1bWVkO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogRW1pdCBhIG5hbWVkIGVudGl0eS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSByZXN1bHQgVGhlIGluZGV4IG9mIHRoZSBlbnRpdHkgaW4gdGhlIGRlY29kZSB0cmVlLlxuICAgICAqIEBwYXJhbSB2YWx1ZUxlbmd0aCBUaGUgbnVtYmVyIG9mIGJ5dGVzIGluIHRoZSBlbnRpdHkuXG4gICAgICogQHBhcmFtIGNvbnN1bWVkIFRoZSBudW1iZXIgb2YgY2hhcmFjdGVycyBjb25zdW1lZC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFRoZSBudW1iZXIgb2YgY2hhcmFjdGVycyBjb25zdW1lZC5cbiAgICAgKi9cbiAgICBFbnRpdHlEZWNvZGVyLnByb3RvdHlwZS5lbWl0TmFtZWRFbnRpdHlEYXRhID0gZnVuY3Rpb24gKHJlc3VsdCwgdmFsdWVMZW5ndGgsIGNvbnN1bWVkKSB7XG4gICAgICAgIHZhciBkZWNvZGVUcmVlID0gdGhpcy5kZWNvZGVUcmVlO1xuICAgICAgICB0aGlzLmVtaXRDb2RlUG9pbnQodmFsdWVMZW5ndGggPT09IDFcbiAgICAgICAgICAgID8gZGVjb2RlVHJlZVtyZXN1bHRdICYgfkJpblRyaWVGbGFncy5WQUxVRV9MRU5HVEhcbiAgICAgICAgICAgIDogZGVjb2RlVHJlZVtyZXN1bHQgKyAxXSwgY29uc3VtZWQpO1xuICAgICAgICBpZiAodmFsdWVMZW5ndGggPT09IDMpIHtcbiAgICAgICAgICAgIC8vIEZvciBtdWx0aS1ieXRlIHZhbHVlcywgd2UgbmVlZCB0byBlbWl0IHRoZSBzZWNvbmQgYnl0ZS5cbiAgICAgICAgICAgIHRoaXMuZW1pdENvZGVQb2ludChkZWNvZGVUcmVlW3Jlc3VsdCArIDJdLCBjb25zdW1lZCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbnN1bWVkO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogU2lnbmFsIHRvIHRoZSBwYXJzZXIgdGhhdCB0aGUgZW5kIG9mIHRoZSBpbnB1dCB3YXMgcmVhY2hlZC5cbiAgICAgKlxuICAgICAqIFJlbWFpbmluZyBkYXRhIHdpbGwgYmUgZW1pdHRlZCBhbmQgcmVsZXZhbnQgZXJyb3JzIHdpbGwgYmUgcHJvZHVjZWQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBUaGUgbnVtYmVyIG9mIGNoYXJhY3RlcnMgY29uc3VtZWQuXG4gICAgICovXG4gICAgRW50aXR5RGVjb2Rlci5wcm90b3R5cGUuZW5kID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHN3aXRjaCAodGhpcy5zdGF0ZSkge1xuICAgICAgICAgICAgY2FzZSBFbnRpdHlEZWNvZGVyU3RhdGUuTmFtZWRFbnRpdHk6IHtcbiAgICAgICAgICAgICAgICAvLyBFbWl0IGEgbmFtZWQgZW50aXR5IGlmIHdlIGhhdmUgb25lLlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnJlc3VsdCAhPT0gMCAmJlxuICAgICAgICAgICAgICAgICAgICAodGhpcy5kZWNvZGVNb2RlICE9PSBEZWNvZGluZ01vZGUuQXR0cmlidXRlIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlc3VsdCA9PT0gdGhpcy50cmVlSW5kZXgpXG4gICAgICAgICAgICAgICAgICAgID8gdGhpcy5lbWl0Tm90VGVybWluYXRlZE5hbWVkRW50aXR5KClcbiAgICAgICAgICAgICAgICAgICAgOiAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gT3RoZXJ3aXNlLCBlbWl0IGEgbnVtZXJpYyBlbnRpdHkgaWYgd2UgaGF2ZSBvbmUuXG4gICAgICAgICAgICBjYXNlIEVudGl0eURlY29kZXJTdGF0ZS5OdW1lcmljRGVjaW1hbDoge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVtaXROdW1lcmljRW50aXR5KDAsIDIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBFbnRpdHlEZWNvZGVyU3RhdGUuTnVtZXJpY0hleDoge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVtaXROdW1lcmljRW50aXR5KDAsIDMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBFbnRpdHlEZWNvZGVyU3RhdGUuTnVtZXJpY1N0YXJ0OiB7XG4gICAgICAgICAgICAgICAgKF9hID0gdGhpcy5lcnJvcnMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5hYnNlbmNlT2ZEaWdpdHNJbk51bWVyaWNDaGFyYWN0ZXJSZWZlcmVuY2UodGhpcy5jb25zdW1lZCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIEVudGl0eURlY29kZXJTdGF0ZS5FbnRpdHlTdGFydDoge1xuICAgICAgICAgICAgICAgIC8vIFJldHVybiAwIGlmIHdlIGhhdmUgbm8gZW50aXR5LlxuICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gRW50aXR5RGVjb2Rlcjtcbn0oKSk7XG5leHBvcnRzLkVudGl0eURlY29kZXIgPSBFbnRpdHlEZWNvZGVyO1xuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBkZWNvZGVzIGVudGl0aWVzIGluIGEgc3RyaW5nLlxuICpcbiAqIEBwYXJhbSBkZWNvZGVUcmVlIFRoZSBkZWNvZGUgdHJlZS5cbiAqIEByZXR1cm5zIEEgZnVuY3Rpb24gdGhhdCBkZWNvZGVzIGVudGl0aWVzIGluIGEgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBnZXREZWNvZGVyKGRlY29kZVRyZWUpIHtcbiAgICB2YXIgcmV0ID0gXCJcIjtcbiAgICB2YXIgZGVjb2RlciA9IG5ldyBFbnRpdHlEZWNvZGVyKGRlY29kZVRyZWUsIGZ1bmN0aW9uIChzdHIpIHsgcmV0dXJuIChyZXQgKz0gKDAsIGRlY29kZV9jb2RlcG9pbnRfanNfMS5mcm9tQ29kZVBvaW50KShzdHIpKTsgfSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGRlY29kZVdpdGhUcmllKHN0ciwgZGVjb2RlTW9kZSkge1xuICAgICAgICB2YXIgbGFzdEluZGV4ID0gMDtcbiAgICAgICAgdmFyIG9mZnNldCA9IDA7XG4gICAgICAgIHdoaWxlICgob2Zmc2V0ID0gc3RyLmluZGV4T2YoXCImXCIsIG9mZnNldCkpID49IDApIHtcbiAgICAgICAgICAgIHJldCArPSBzdHIuc2xpY2UobGFzdEluZGV4LCBvZmZzZXQpO1xuICAgICAgICAgICAgZGVjb2Rlci5zdGFydEVudGl0eShkZWNvZGVNb2RlKTtcbiAgICAgICAgICAgIHZhciBsZW4gPSBkZWNvZGVyLndyaXRlKHN0ciwgXG4gICAgICAgICAgICAvLyBTa2lwIHRoZSBcIiZcIlxuICAgICAgICAgICAgb2Zmc2V0ICsgMSk7XG4gICAgICAgICAgICBpZiAobGVuIDwgMCkge1xuICAgICAgICAgICAgICAgIGxhc3RJbmRleCA9IG9mZnNldCArIGRlY29kZXIuZW5kKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsYXN0SW5kZXggPSBvZmZzZXQgKyBsZW47XG4gICAgICAgICAgICAvLyBJZiBgbGVuYCBpcyAwLCBza2lwIHRoZSBjdXJyZW50IGAmYCBhbmQgY29udGludWUuXG4gICAgICAgICAgICBvZmZzZXQgPSBsZW4gPT09IDAgPyBsYXN0SW5kZXggKyAxIDogbGFzdEluZGV4O1xuICAgICAgICB9XG4gICAgICAgIHZhciByZXN1bHQgPSByZXQgKyBzdHIuc2xpY2UobGFzdEluZGV4KTtcbiAgICAgICAgLy8gTWFrZSBzdXJlIHdlIGRvbid0IGtlZXAgYSByZWZlcmVuY2UgdG8gdGhlIGZpbmFsIHN0cmluZy5cbiAgICAgICAgcmV0ID0gXCJcIjtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xufVxuLyoqXG4gKiBEZXRlcm1pbmVzIHRoZSBicmFuY2ggb2YgdGhlIGN1cnJlbnQgbm9kZSB0aGF0IGlzIHRha2VuIGdpdmVuIHRoZSBjdXJyZW50XG4gKiBjaGFyYWN0ZXIuIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCB0byB0cmF2ZXJzZSB0aGUgdHJpZS5cbiAqXG4gKiBAcGFyYW0gZGVjb2RlVHJlZSBUaGUgdHJpZS5cbiAqIEBwYXJhbSBjdXJyZW50IFRoZSBjdXJyZW50IG5vZGUuXG4gKiBAcGFyYW0gbm9kZUlkeCBUaGUgaW5kZXggcmlnaHQgYWZ0ZXIgdGhlIGN1cnJlbnQgbm9kZSBhbmQgaXRzIHZhbHVlLlxuICogQHBhcmFtIGNoYXIgVGhlIGN1cnJlbnQgY2hhcmFjdGVyLlxuICogQHJldHVybnMgVGhlIGluZGV4IG9mIHRoZSBuZXh0IG5vZGUsIG9yIC0xIGlmIG5vIGJyYW5jaCBpcyB0YWtlbi5cbiAqL1xuZnVuY3Rpb24gZGV0ZXJtaW5lQnJhbmNoKGRlY29kZVRyZWUsIGN1cnJlbnQsIG5vZGVJZHgsIGNoYXIpIHtcbiAgICB2YXIgYnJhbmNoQ291bnQgPSAoY3VycmVudCAmIEJpblRyaWVGbGFncy5CUkFOQ0hfTEVOR1RIKSA+PiA3O1xuICAgIHZhciBqdW1wT2Zmc2V0ID0gY3VycmVudCAmIEJpblRyaWVGbGFncy5KVU1QX1RBQkxFO1xuICAgIC8vIENhc2UgMTogU2luZ2xlIGJyYW5jaCBlbmNvZGVkIGluIGp1bXAgb2Zmc2V0XG4gICAgaWYgKGJyYW5jaENvdW50ID09PSAwKSB7XG4gICAgICAgIHJldHVybiBqdW1wT2Zmc2V0ICE9PSAwICYmIGNoYXIgPT09IGp1bXBPZmZzZXQgPyBub2RlSWR4IDogLTE7XG4gICAgfVxuICAgIC8vIENhc2UgMjogTXVsdGlwbGUgYnJhbmNoZXMgZW5jb2RlZCBpbiBqdW1wIHRhYmxlXG4gICAgaWYgKGp1bXBPZmZzZXQpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gY2hhciAtIGp1bXBPZmZzZXQ7XG4gICAgICAgIHJldHVybiB2YWx1ZSA8IDAgfHwgdmFsdWUgPj0gYnJhbmNoQ291bnRcbiAgICAgICAgICAgID8gLTFcbiAgICAgICAgICAgIDogZGVjb2RlVHJlZVtub2RlSWR4ICsgdmFsdWVdIC0gMTtcbiAgICB9XG4gICAgLy8gQ2FzZSAzOiBNdWx0aXBsZSBicmFuY2hlcyBlbmNvZGVkIGluIGRpY3Rpb25hcnlcbiAgICAvLyBCaW5hcnkgc2VhcmNoIGZvciB0aGUgY2hhcmFjdGVyLlxuICAgIHZhciBsbyA9IG5vZGVJZHg7XG4gICAgdmFyIGhpID0gbG8gKyBicmFuY2hDb3VudCAtIDE7XG4gICAgd2hpbGUgKGxvIDw9IGhpKSB7XG4gICAgICAgIHZhciBtaWQgPSAobG8gKyBoaSkgPj4+IDE7XG4gICAgICAgIHZhciBtaWRWYWwgPSBkZWNvZGVUcmVlW21pZF07XG4gICAgICAgIGlmIChtaWRWYWwgPCBjaGFyKSB7XG4gICAgICAgICAgICBsbyA9IG1pZCArIDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobWlkVmFsID4gY2hhcikge1xuICAgICAgICAgICAgaGkgPSBtaWQgLSAxO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGRlY29kZVRyZWVbbWlkICsgYnJhbmNoQ291bnRdO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiAtMTtcbn1cbmV4cG9ydHMuZGV0ZXJtaW5lQnJhbmNoID0gZGV0ZXJtaW5lQnJhbmNoO1xudmFyIGh0bWxEZWNvZGVyID0gZ2V0RGVjb2RlcihkZWNvZGVfZGF0YV9odG1sX2pzXzEuZGVmYXVsdCk7XG52YXIgeG1sRGVjb2RlciA9IGdldERlY29kZXIoZGVjb2RlX2RhdGFfeG1sX2pzXzEuZGVmYXVsdCk7XG4vKipcbiAqIERlY29kZXMgYW4gSFRNTCBzdHJpbmcuXG4gKlxuICogQHBhcmFtIHN0ciBUaGUgc3RyaW5nIHRvIGRlY29kZS5cbiAqIEBwYXJhbSBtb2RlIFRoZSBkZWNvZGluZyBtb2RlLlxuICogQHJldHVybnMgVGhlIGRlY29kZWQgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBkZWNvZGVIVE1MKHN0ciwgbW9kZSkge1xuICAgIGlmIChtb2RlID09PSB2b2lkIDApIHsgbW9kZSA9IERlY29kaW5nTW9kZS5MZWdhY3k7IH1cbiAgICByZXR1cm4gaHRtbERlY29kZXIoc3RyLCBtb2RlKTtcbn1cbmV4cG9ydHMuZGVjb2RlSFRNTCA9IGRlY29kZUhUTUw7XG4vKipcbiAqIERlY29kZXMgYW4gSFRNTCBzdHJpbmcgaW4gYW4gYXR0cmlidXRlLlxuICpcbiAqIEBwYXJhbSBzdHIgVGhlIHN0cmluZyB0byBkZWNvZGUuXG4gKiBAcmV0dXJucyBUaGUgZGVjb2RlZCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIGRlY29kZUhUTUxBdHRyaWJ1dGUoc3RyKSB7XG4gICAgcmV0dXJuIGh0bWxEZWNvZGVyKHN0ciwgRGVjb2RpbmdNb2RlLkF0dHJpYnV0ZSk7XG59XG5leHBvcnRzLmRlY29kZUhUTUxBdHRyaWJ1dGUgPSBkZWNvZGVIVE1MQXR0cmlidXRlO1xuLyoqXG4gKiBEZWNvZGVzIGFuIEhUTUwgc3RyaW5nLCByZXF1aXJpbmcgYWxsIGVudGl0aWVzIHRvIGJlIHRlcm1pbmF0ZWQgYnkgYSBzZW1pY29sb24uXG4gKlxuICogQHBhcmFtIHN0ciBUaGUgc3RyaW5nIHRvIGRlY29kZS5cbiAqIEByZXR1cm5zIFRoZSBkZWNvZGVkIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gZGVjb2RlSFRNTFN0cmljdChzdHIpIHtcbiAgICByZXR1cm4gaHRtbERlY29kZXIoc3RyLCBEZWNvZGluZ01vZGUuU3RyaWN0KTtcbn1cbmV4cG9ydHMuZGVjb2RlSFRNTFN0cmljdCA9IGRlY29kZUhUTUxTdHJpY3Q7XG4vKipcbiAqIERlY29kZXMgYW4gWE1MIHN0cmluZywgcmVxdWlyaW5nIGFsbCBlbnRpdGllcyB0byBiZSB0ZXJtaW5hdGVkIGJ5IGEgc2VtaWNvbG9uLlxuICpcbiAqIEBwYXJhbSBzdHIgVGhlIHN0cmluZyB0byBkZWNvZGUuXG4gKiBAcmV0dXJucyBUaGUgZGVjb2RlZCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIGRlY29kZVhNTChzdHIpIHtcbiAgICByZXR1cm4geG1sRGVjb2RlcihzdHIsIERlY29kaW5nTW9kZS5TdHJpY3QpO1xufVxuZXhwb3J0cy5kZWNvZGVYTUwgPSBkZWNvZGVYTUw7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWNvZGUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vLyBBZGFwdGVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL21hdGhpYXNieW5lbnMvaGUvYmxvYi8zNmFmZTE3OTM5MjIyNmNmMWI2Y2NkYjE2ZWJiYjdhNWE4NDRkOTNhL3NyYy9oZS5qcyNMMTA2LUwxMzRcbnZhciBfYTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucmVwbGFjZUNvZGVQb2ludCA9IGV4cG9ydHMuZnJvbUNvZGVQb2ludCA9IHZvaWQgMDtcbnZhciBkZWNvZGVNYXAgPSBuZXcgTWFwKFtcbiAgICBbMCwgNjU1MzNdLFxuICAgIC8vIEMxIFVuaWNvZGUgY29udHJvbCBjaGFyYWN0ZXIgcmVmZXJlbmNlIHJlcGxhY2VtZW50c1xuICAgIFsxMjgsIDgzNjRdLFxuICAgIFsxMzAsIDgyMThdLFxuICAgIFsxMzEsIDQwMl0sXG4gICAgWzEzMiwgODIyMl0sXG4gICAgWzEzMywgODIzMF0sXG4gICAgWzEzNCwgODIyNF0sXG4gICAgWzEzNSwgODIyNV0sXG4gICAgWzEzNiwgNzEwXSxcbiAgICBbMTM3LCA4MjQwXSxcbiAgICBbMTM4LCAzNTJdLFxuICAgIFsxMzksIDgyNDldLFxuICAgIFsxNDAsIDMzOF0sXG4gICAgWzE0MiwgMzgxXSxcbiAgICBbMTQ1LCA4MjE2XSxcbiAgICBbMTQ2LCA4MjE3XSxcbiAgICBbMTQ3LCA4MjIwXSxcbiAgICBbMTQ4LCA4MjIxXSxcbiAgICBbMTQ5LCA4MjI2XSxcbiAgICBbMTUwLCA4MjExXSxcbiAgICBbMTUxLCA4MjEyXSxcbiAgICBbMTUyLCA3MzJdLFxuICAgIFsxNTMsIDg0ODJdLFxuICAgIFsxNTQsIDM1M10sXG4gICAgWzE1NSwgODI1MF0sXG4gICAgWzE1NiwgMzM5XSxcbiAgICBbMTU4LCAzODJdLFxuICAgIFsxNTksIDM3Nl0sXG5dKTtcbi8qKlxuICogUG9seWZpbGwgZm9yIGBTdHJpbmcuZnJvbUNvZGVQb2ludGAuIEl0IGlzIHVzZWQgdG8gY3JlYXRlIGEgc3RyaW5nIGZyb20gYSBVbmljb2RlIGNvZGUgcG9pbnQuXG4gKi9cbmV4cG9ydHMuZnJvbUNvZGVQb2ludCA9IFxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bm5lY2Vzc2FyeS1jb25kaXRpb24sIG5vZGUvbm8tdW5zdXBwb3J0ZWQtZmVhdHVyZXMvZXMtYnVpbHRpbnNcbihfYSA9IFN0cmluZy5mcm9tQ29kZVBvaW50KSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBmdW5jdGlvbiAoY29kZVBvaW50KSB7XG4gICAgdmFyIG91dHB1dCA9IFwiXCI7XG4gICAgaWYgKGNvZGVQb2ludCA+IDB4ZmZmZikge1xuICAgICAgICBjb2RlUG9pbnQgLT0gMHgxMDAwMDtcbiAgICAgICAgb3V0cHV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoKChjb2RlUG9pbnQgPj4+IDEwKSAmIDB4M2ZmKSB8IDB4ZDgwMCk7XG4gICAgICAgIGNvZGVQb2ludCA9IDB4ZGMwMCB8IChjb2RlUG9pbnQgJiAweDNmZik7XG4gICAgfVxuICAgIG91dHB1dCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGVQb2ludCk7XG4gICAgcmV0dXJuIG91dHB1dDtcbn07XG4vKipcbiAqIFJlcGxhY2UgdGhlIGdpdmVuIGNvZGUgcG9pbnQgd2l0aCBhIHJlcGxhY2VtZW50IGNoYXJhY3RlciBpZiBpdCBpcyBhXG4gKiBzdXJyb2dhdGUgb3IgaXMgb3V0c2lkZSB0aGUgdmFsaWQgcmFuZ2UuIE90aGVyd2lzZSByZXR1cm4gdGhlIGNvZGVcbiAqIHBvaW50IHVuY2hhbmdlZC5cbiAqL1xuZnVuY3Rpb24gcmVwbGFjZUNvZGVQb2ludChjb2RlUG9pbnQpIHtcbiAgICB2YXIgX2E7XG4gICAgaWYgKChjb2RlUG9pbnQgPj0gMHhkODAwICYmIGNvZGVQb2ludCA8PSAweGRmZmYpIHx8IGNvZGVQb2ludCA+IDB4MTBmZmZmKSB7XG4gICAgICAgIHJldHVybiAweGZmZmQ7XG4gICAgfVxuICAgIHJldHVybiAoX2EgPSBkZWNvZGVNYXAuZ2V0KGNvZGVQb2ludCkpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IGNvZGVQb2ludDtcbn1cbmV4cG9ydHMucmVwbGFjZUNvZGVQb2ludCA9IHJlcGxhY2VDb2RlUG9pbnQ7XG4vKipcbiAqIFJlcGxhY2UgdGhlIGNvZGUgcG9pbnQgaWYgcmVsZXZhbnQsIHRoZW4gY29udmVydCBpdCB0byBhIHN0cmluZy5cbiAqXG4gKiBAZGVwcmVjYXRlZCBVc2UgYGZyb21Db2RlUG9pbnQocmVwbGFjZUNvZGVQb2ludChjb2RlUG9pbnQpKWAgaW5zdGVhZC5cbiAqIEBwYXJhbSBjb2RlUG9pbnQgVGhlIGNvZGUgcG9pbnQgdG8gZGVjb2RlLlxuICogQHJldHVybnMgVGhlIGRlY29kZWQgY29kZSBwb2ludC5cbiAqL1xuZnVuY3Rpb24gZGVjb2RlQ29kZVBvaW50KGNvZGVQb2ludCkge1xuICAgIHJldHVybiAoMCwgZXhwb3J0cy5mcm9tQ29kZVBvaW50KShyZXBsYWNlQ29kZVBvaW50KGNvZGVQb2ludCkpO1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gZGVjb2RlQ29kZVBvaW50O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVjb2RlX2NvZGVwb2ludC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZW5jb2RlTm9uQXNjaWlIVE1MID0gZXhwb3J0cy5lbmNvZGVIVE1MID0gdm9pZCAwO1xudmFyIGVuY29kZV9odG1sX2pzXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vZ2VuZXJhdGVkL2VuY29kZS1odG1sLmpzXCIpKTtcbnZhciBlc2NhcGVfanNfMSA9IHJlcXVpcmUoXCIuL2VzY2FwZS5qc1wiKTtcbnZhciBodG1sUmVwbGFjZXIgPSAvW1xcdFxcbiEtLC4vOi1AWy1gXFxmey19JFxceDgwLVxcdUZGRkZdL2c7XG4vKipcbiAqIEVuY29kZXMgYWxsIGNoYXJhY3RlcnMgaW4gdGhlIGlucHV0IHVzaW5nIEhUTUwgZW50aXRpZXMuIFRoaXMgaW5jbHVkZXNcbiAqIGNoYXJhY3RlcnMgdGhhdCBhcmUgdmFsaWQgQVNDSUkgY2hhcmFjdGVycyBpbiBIVE1MIGRvY3VtZW50cywgc3VjaCBhcyBgI2AuXG4gKlxuICogVG8gZ2V0IGEgbW9yZSBjb21wYWN0IG91dHB1dCwgY29uc2lkZXIgdXNpbmcgdGhlIGBlbmNvZGVOb25Bc2NpaUhUTUxgXG4gKiBmdW5jdGlvbiwgd2hpY2ggd2lsbCBvbmx5IGVuY29kZSBjaGFyYWN0ZXJzIHRoYXQgYXJlIG5vdCB2YWxpZCBpbiBIVE1MXG4gKiBkb2N1bWVudHMsIGFzIHdlbGwgYXMgbm9uLUFTQ0lJIGNoYXJhY3RlcnMuXG4gKlxuICogSWYgYSBjaGFyYWN0ZXIgaGFzIG5vIGVxdWl2YWxlbnQgZW50aXR5LCBhIG51bWVyaWMgaGV4YWRlY2ltYWwgcmVmZXJlbmNlXG4gKiAoZWcuIGAmI3hmYztgKSB3aWxsIGJlIHVzZWQuXG4gKi9cbmZ1bmN0aW9uIGVuY29kZUhUTUwoZGF0YSkge1xuICAgIHJldHVybiBlbmNvZGVIVE1MVHJpZVJlKGh0bWxSZXBsYWNlciwgZGF0YSk7XG59XG5leHBvcnRzLmVuY29kZUhUTUwgPSBlbmNvZGVIVE1MO1xuLyoqXG4gKiBFbmNvZGVzIGFsbCBub24tQVNDSUkgY2hhcmFjdGVycywgYXMgd2VsbCBhcyBjaGFyYWN0ZXJzIG5vdCB2YWxpZCBpbiBIVE1MXG4gKiBkb2N1bWVudHMgdXNpbmcgSFRNTCBlbnRpdGllcy4gVGhpcyBmdW5jdGlvbiB3aWxsIG5vdCBlbmNvZGUgY2hhcmFjdGVycyB0aGF0XG4gKiBhcmUgdmFsaWQgaW4gSFRNTCBkb2N1bWVudHMsIHN1Y2ggYXMgYCNgLlxuICpcbiAqIElmIGEgY2hhcmFjdGVyIGhhcyBubyBlcXVpdmFsZW50IGVudGl0eSwgYSBudW1lcmljIGhleGFkZWNpbWFsIHJlZmVyZW5jZVxuICogKGVnLiBgJiN4ZmM7YCkgd2lsbCBiZSB1c2VkLlxuICovXG5mdW5jdGlvbiBlbmNvZGVOb25Bc2NpaUhUTUwoZGF0YSkge1xuICAgIHJldHVybiBlbmNvZGVIVE1MVHJpZVJlKGVzY2FwZV9qc18xLnhtbFJlcGxhY2VyLCBkYXRhKTtcbn1cbmV4cG9ydHMuZW5jb2RlTm9uQXNjaWlIVE1MID0gZW5jb2RlTm9uQXNjaWlIVE1MO1xuZnVuY3Rpb24gZW5jb2RlSFRNTFRyaWVSZShyZWdFeHAsIHN0cikge1xuICAgIHZhciByZXQgPSBcIlwiO1xuICAgIHZhciBsYXN0SWR4ID0gMDtcbiAgICB2YXIgbWF0Y2g7XG4gICAgd2hpbGUgKChtYXRjaCA9IHJlZ0V4cC5leGVjKHN0cikpICE9PSBudWxsKSB7XG4gICAgICAgIHZhciBpID0gbWF0Y2guaW5kZXg7XG4gICAgICAgIHJldCArPSBzdHIuc3Vic3RyaW5nKGxhc3RJZHgsIGkpO1xuICAgICAgICB2YXIgY2hhciA9IHN0ci5jaGFyQ29kZUF0KGkpO1xuICAgICAgICB2YXIgbmV4dCA9IGVuY29kZV9odG1sX2pzXzEuZGVmYXVsdC5nZXQoY2hhcik7XG4gICAgICAgIGlmICh0eXBlb2YgbmV4dCA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgLy8gV2UgYXJlIGluIGEgYnJhbmNoLiBUcnkgdG8gbWF0Y2ggdGhlIG5leHQgY2hhci5cbiAgICAgICAgICAgIGlmIChpICsgMSA8IHN0ci5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB2YXIgbmV4dENoYXIgPSBzdHIuY2hhckNvZGVBdChpICsgMSk7XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gdHlwZW9mIG5leHQubiA9PT0gXCJudW1iZXJcIlxuICAgICAgICAgICAgICAgICAgICA/IG5leHQubiA9PT0gbmV4dENoYXJcbiAgICAgICAgICAgICAgICAgICAgICAgID8gbmV4dC5vXG4gICAgICAgICAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICA6IG5leHQubi5nZXQobmV4dENoYXIpO1xuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldCArPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgbGFzdElkeCA9IHJlZ0V4cC5sYXN0SW5kZXggKz0gMTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbmV4dCA9IG5leHQudjtcbiAgICAgICAgfVxuICAgICAgICAvLyBXZSBtaWdodCBoYXZlIGEgdHJlZSBub2RlIHdpdGhvdXQgYSB2YWx1ZTsgc2tpcCBhbmQgdXNlIGEgbnVtZXJpYyBlbnRpdHkuXG4gICAgICAgIGlmIChuZXh0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldCArPSBuZXh0O1xuICAgICAgICAgICAgbGFzdElkeCA9IGkgKyAxO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFyIGNwID0gKDAsIGVzY2FwZV9qc18xLmdldENvZGVQb2ludCkoc3RyLCBpKTtcbiAgICAgICAgICAgIHJldCArPSBcIiYjeFwiLmNvbmNhdChjcC50b1N0cmluZygxNiksIFwiO1wiKTtcbiAgICAgICAgICAgIC8vIEluY3JlYXNlIGJ5IDEgaWYgd2UgaGF2ZSBhIHN1cnJvZ2F0ZSBwYWlyXG4gICAgICAgICAgICBsYXN0SWR4ID0gcmVnRXhwLmxhc3RJbmRleCArPSBOdW1iZXIoY3AgIT09IGNoYXIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXQgKyBzdHIuc3Vic3RyKGxhc3RJZHgpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZW5jb2RlLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5lc2NhcGVUZXh0ID0gZXhwb3J0cy5lc2NhcGVBdHRyaWJ1dGUgPSBleHBvcnRzLmVzY2FwZVVURjggPSBleHBvcnRzLmVzY2FwZSA9IGV4cG9ydHMuZW5jb2RlWE1MID0gZXhwb3J0cy5nZXRDb2RlUG9pbnQgPSBleHBvcnRzLnhtbFJlcGxhY2VyID0gdm9pZCAwO1xuZXhwb3J0cy54bWxSZXBsYWNlciA9IC9bXCImJzw+JFxceDgwLVxcdUZGRkZdL2c7XG52YXIgeG1sQ29kZU1hcCA9IG5ldyBNYXAoW1xuICAgIFszNCwgXCImcXVvdDtcIl0sXG4gICAgWzM4LCBcIiZhbXA7XCJdLFxuICAgIFszOSwgXCImYXBvcztcIl0sXG4gICAgWzYwLCBcIiZsdDtcIl0sXG4gICAgWzYyLCBcIiZndDtcIl0sXG5dKTtcbi8vIEZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9kZSA8IDQsIHdlIHdyYXAgYGNvZGVQb2ludEF0YFxuZXhwb3J0cy5nZXRDb2RlUG9pbnQgPSBcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5uZWNlc3NhcnktY29uZGl0aW9uXG5TdHJpbmcucHJvdG90eXBlLmNvZGVQb2ludEF0ICE9IG51bGxcbiAgICA/IGZ1bmN0aW9uIChzdHIsIGluZGV4KSB7IHJldHVybiBzdHIuY29kZVBvaW50QXQoaW5kZXgpOyB9XG4gICAgOiAvLyBodHRwOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9qYXZhc2NyaXB0LWVuY29kaW5nI3N1cnJvZ2F0ZS1mb3JtdWxhZVxuICAgICAgICBmdW5jdGlvbiAoYywgaW5kZXgpIHtcbiAgICAgICAgICAgIHJldHVybiAoYy5jaGFyQ29kZUF0KGluZGV4KSAmIDB4ZmMwMCkgPT09IDB4ZDgwMFxuICAgICAgICAgICAgICAgID8gKGMuY2hhckNvZGVBdChpbmRleCkgLSAweGQ4MDApICogMHg0MDAgK1xuICAgICAgICAgICAgICAgICAgICBjLmNoYXJDb2RlQXQoaW5kZXggKyAxKSAtXG4gICAgICAgICAgICAgICAgICAgIDB4ZGMwMCArXG4gICAgICAgICAgICAgICAgICAgIDB4MTAwMDBcbiAgICAgICAgICAgICAgICA6IGMuY2hhckNvZGVBdChpbmRleCk7XG4gICAgICAgIH07XG4vKipcbiAqIEVuY29kZXMgYWxsIG5vbi1BU0NJSSBjaGFyYWN0ZXJzLCBhcyB3ZWxsIGFzIGNoYXJhY3RlcnMgbm90IHZhbGlkIGluIFhNTFxuICogZG9jdW1lbnRzIHVzaW5nIFhNTCBlbnRpdGllcy5cbiAqXG4gKiBJZiBhIGNoYXJhY3RlciBoYXMgbm8gZXF1aXZhbGVudCBlbnRpdHksIGFcbiAqIG51bWVyaWMgaGV4YWRlY2ltYWwgcmVmZXJlbmNlIChlZy4gYCYjeGZjO2ApIHdpbGwgYmUgdXNlZC5cbiAqL1xuZnVuY3Rpb24gZW5jb2RlWE1MKHN0cikge1xuICAgIHZhciByZXQgPSBcIlwiO1xuICAgIHZhciBsYXN0SWR4ID0gMDtcbiAgICB2YXIgbWF0Y2g7XG4gICAgd2hpbGUgKChtYXRjaCA9IGV4cG9ydHMueG1sUmVwbGFjZXIuZXhlYyhzdHIpKSAhPT0gbnVsbCkge1xuICAgICAgICB2YXIgaSA9IG1hdGNoLmluZGV4O1xuICAgICAgICB2YXIgY2hhciA9IHN0ci5jaGFyQ29kZUF0KGkpO1xuICAgICAgICB2YXIgbmV4dCA9IHhtbENvZGVNYXAuZ2V0KGNoYXIpO1xuICAgICAgICBpZiAobmV4dCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXQgKz0gc3RyLnN1YnN0cmluZyhsYXN0SWR4LCBpKSArIG5leHQ7XG4gICAgICAgICAgICBsYXN0SWR4ID0gaSArIDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXQgKz0gXCJcIi5jb25jYXQoc3RyLnN1YnN0cmluZyhsYXN0SWR4LCBpKSwgXCImI3hcIikuY29uY2F0KCgwLCBleHBvcnRzLmdldENvZGVQb2ludCkoc3RyLCBpKS50b1N0cmluZygxNiksIFwiO1wiKTtcbiAgICAgICAgICAgIC8vIEluY3JlYXNlIGJ5IDEgaWYgd2UgaGF2ZSBhIHN1cnJvZ2F0ZSBwYWlyXG4gICAgICAgICAgICBsYXN0SWR4ID0gZXhwb3J0cy54bWxSZXBsYWNlci5sYXN0SW5kZXggKz0gTnVtYmVyKChjaGFyICYgMHhmYzAwKSA9PT0gMHhkODAwKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmV0ICsgc3RyLnN1YnN0cihsYXN0SWR4KTtcbn1cbmV4cG9ydHMuZW5jb2RlWE1MID0gZW5jb2RlWE1MO1xuLyoqXG4gKiBFbmNvZGVzIGFsbCBub24tQVNDSUkgY2hhcmFjdGVycywgYXMgd2VsbCBhcyBjaGFyYWN0ZXJzIG5vdCB2YWxpZCBpbiBYTUxcbiAqIGRvY3VtZW50cyB1c2luZyBudW1lcmljIGhleGFkZWNpbWFsIHJlZmVyZW5jZSAoZWcuIGAmI3hmYztgKS5cbiAqXG4gKiBIYXZlIGEgbG9vayBhdCBgZXNjYXBlVVRGOGAgaWYgeW91IHdhbnQgYSBtb3JlIGNvbmNpc2Ugb3V0cHV0IGF0IHRoZSBleHBlbnNlXG4gKiBvZiByZWR1Y2VkIHRyYW5zcG9ydGFiaWxpdHkuXG4gKlxuICogQHBhcmFtIGRhdGEgU3RyaW5nIHRvIGVzY2FwZS5cbiAqL1xuZXhwb3J0cy5lc2NhcGUgPSBlbmNvZGVYTUw7XG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGVzY2FwZXMgYWxsIGNoYXJhY3RlcnMgbWF0Y2hlZCBieSB0aGUgZ2l2ZW4gcmVndWxhclxuICogZXhwcmVzc2lvbiB1c2luZyB0aGUgZ2l2ZW4gbWFwIG9mIGNoYXJhY3RlcnMgdG8gZXNjYXBlIHRvIHRoZWlyIGVudGl0aWVzLlxuICpcbiAqIEBwYXJhbSByZWdleCBSZWd1bGFyIGV4cHJlc3Npb24gdG8gbWF0Y2ggY2hhcmFjdGVycyB0byBlc2NhcGUuXG4gKiBAcGFyYW0gbWFwIE1hcCBvZiBjaGFyYWN0ZXJzIHRvIGVzY2FwZSB0byB0aGVpciBlbnRpdGllcy5cbiAqXG4gKiBAcmV0dXJucyBGdW5jdGlvbiB0aGF0IGVzY2FwZXMgYWxsIGNoYXJhY3RlcnMgbWF0Y2hlZCBieSB0aGUgZ2l2ZW4gcmVndWxhclxuICogZXhwcmVzc2lvbiB1c2luZyB0aGUgZ2l2ZW4gbWFwIG9mIGNoYXJhY3RlcnMgdG8gZXNjYXBlIHRvIHRoZWlyIGVudGl0aWVzLlxuICovXG5mdW5jdGlvbiBnZXRFc2NhcGVyKHJlZ2V4LCBtYXApIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gZXNjYXBlKGRhdGEpIHtcbiAgICAgICAgdmFyIG1hdGNoO1xuICAgICAgICB2YXIgbGFzdElkeCA9IDA7XG4gICAgICAgIHZhciByZXN1bHQgPSBcIlwiO1xuICAgICAgICB3aGlsZSAoKG1hdGNoID0gcmVnZXguZXhlYyhkYXRhKSkpIHtcbiAgICAgICAgICAgIGlmIChsYXN0SWR4ICE9PSBtYXRjaC5pbmRleCkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCArPSBkYXRhLnN1YnN0cmluZyhsYXN0SWR4LCBtYXRjaC5pbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBXZSBrbm93IHRoYXQgdGhpcyBjaGFyYWN0ZXIgd2lsbCBiZSBpbiB0aGUgbWFwLlxuICAgICAgICAgICAgcmVzdWx0ICs9IG1hcC5nZXQobWF0Y2hbMF0uY2hhckNvZGVBdCgwKSk7XG4gICAgICAgICAgICAvLyBFdmVyeSBtYXRjaCB3aWxsIGJlIG9mIGxlbmd0aCAxXG4gICAgICAgICAgICBsYXN0SWR4ID0gbWF0Y2guaW5kZXggKyAxO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQgKyBkYXRhLnN1YnN0cmluZyhsYXN0SWR4KTtcbiAgICB9O1xufVxuLyoqXG4gKiBFbmNvZGVzIGFsbCBjaGFyYWN0ZXJzIG5vdCB2YWxpZCBpbiBYTUwgZG9jdW1lbnRzIHVzaW5nIFhNTCBlbnRpdGllcy5cbiAqXG4gKiBOb3RlIHRoYXQgdGhlIG91dHB1dCB3aWxsIGJlIGNoYXJhY3Rlci1zZXQgZGVwZW5kZW50LlxuICpcbiAqIEBwYXJhbSBkYXRhIFN0cmluZyB0byBlc2NhcGUuXG4gKi9cbmV4cG9ydHMuZXNjYXBlVVRGOCA9IGdldEVzY2FwZXIoL1smPD4nXCJdL2csIHhtbENvZGVNYXApO1xuLyoqXG4gKiBFbmNvZGVzIGFsbCBjaGFyYWN0ZXJzIHRoYXQgaGF2ZSB0byBiZSBlc2NhcGVkIGluIEhUTUwgYXR0cmlidXRlcyxcbiAqIGZvbGxvd2luZyB7QGxpbmsgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvcGFyc2luZy5odG1sI2VzY2FwaW5nU3RyaW5nfS5cbiAqXG4gKiBAcGFyYW0gZGF0YSBTdHJpbmcgdG8gZXNjYXBlLlxuICovXG5leHBvcnRzLmVzY2FwZUF0dHJpYnV0ZSA9IGdldEVzY2FwZXIoL1tcIiZcXHUwMEEwXS9nLCBuZXcgTWFwKFtcbiAgICBbMzQsIFwiJnF1b3Q7XCJdLFxuICAgIFszOCwgXCImYW1wO1wiXSxcbiAgICBbMTYwLCBcIiZuYnNwO1wiXSxcbl0pKTtcbi8qKlxuICogRW5jb2RlcyBhbGwgY2hhcmFjdGVycyB0aGF0IGhhdmUgdG8gYmUgZXNjYXBlZCBpbiBIVE1MIHRleHQsXG4gKiBmb2xsb3dpbmcge0BsaW5rIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3BhcnNpbmcuaHRtbCNlc2NhcGluZ1N0cmluZ30uXG4gKlxuICogQHBhcmFtIGRhdGEgU3RyaW5nIHRvIGVzY2FwZS5cbiAqL1xuZXhwb3J0cy5lc2NhcGVUZXh0ID0gZ2V0RXNjYXBlcigvWyY8PlxcdTAwQTBdL2csIG5ldyBNYXAoW1xuICAgIFszOCwgXCImYW1wO1wiXSxcbiAgICBbNjAsIFwiJmx0O1wiXSxcbiAgICBbNjIsIFwiJmd0O1wiXSxcbiAgICBbMTYwLCBcIiZuYnNwO1wiXSxcbl0pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVzY2FwZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbi8vIEdlbmVyYXRlZCB1c2luZyBzY3JpcHRzL3dyaXRlLWRlY29kZS1tYXAudHNcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZGVmYXVsdCA9IG5ldyBVaW50MTZBcnJheShcbi8vIHByZXR0aWVyLWlnbm9yZVxuXCJcXHUxZDQxPFxceGQ1XFx1MDEzMVxcdTAyOGFcXHUwNDlkXFx1MDU3YlxcdTA1ZDBcXHUwNjc1XFx1MDZkZVxcdTA3YTJcXHUwN2Q2XFx1MDgwZlxcdTBhNGFcXHUwYTkxXFx1MGRhMVxcdTBlNmRcXHUwZjA5XFx1MGYyNlxcdTEwY2FcXHUxMjI4XFx1MTJlMVxcdTE0MTVcXHUxNDlkXFx1MTRjM1xcdTE0ZGZcXHUxNTI1XFwwXFwwXFwwXFwwXFwwXFwwXFx1MTU2YlxcdTE2Y2RcXHUxOThkXFx1MWMxMlxcdTFkZGRcXHUxZjdlXFx1MjA2MFxcdTIxYjBcXHUyMjhkXFx1MjNjMFxcdTIzZmJcXHUyNDQyXFx1MjgyNFxcdTI5MTJcXHUyZDA4XFx1MmU0OFxcdTJmY2VcXHUzMDE2XFx1MzJiYVxcdTM2MzlcXHUzN2FjXFx1MzhmZVxcdTNhMjhcXHUzYTcxXFx1M2FlMFxcdTNiMmVcXHUwODAwRU1hYmNmZ2xtbm9wcnN0dVxcXFxiZm1zXFx4N2ZcXHg4NFxceDhiXFx4OTBcXHg5NVxceDk4XFx4YTZcXHhiM1xceGI5XFx4YzhcXHhjZmxpZ1xcdTgwM2JcXHhjNlxcdTQwYzZQXFx1ODAzYiZcXHU0MDI2Y3V0ZVxcdTgwM2JcXHhjMVxcdTQwYzFyZXZlO1xcdTQxMDJcXHUwMTAwaXl4fXJjXFx1ODAzYlxceGMyXFx1NDBjMjtcXHU0NDEwcjtcXHVjMDAwXFx1ZDgzNVxcdWRkMDRyYXZlXFx1ODAzYlxceGMwXFx1NDBjMHBoYTtcXHU0MzkxYWNyO1xcdTQxMDBkO1xcdTZhNTNcXHUwMTAwZ3BcXHg5ZFxceGExb247XFx1NDEwNGY7XFx1YzAwMFxcdWQ4MzVcXHVkZDM4cGx5RnVuY3Rpb247XFx1NjA2MWluZ1xcdTgwM2JcXHhjNVxcdTQwYzVcXHUwMTAwY3NcXHhiZVxceGMzcjtcXHVjMDAwXFx1ZDgzNVxcdWRjOWNpZ247XFx1NjI1NGlsZGVcXHU4MDNiXFx4YzNcXHU0MGMzbWxcXHU4MDNiXFx4YzRcXHU0MGM0XFx1MDQwMGFjZWZvcnN1XFx4ZTVcXHhmYlxceGZlXFx1MDExN1xcdTAxMWNcXHUwMTIyXFx1MDEyN1xcdTAxMmFcXHUwMTAwY3JcXHhlYVxceGYya3NsYXNoO1xcdTYyMTZcXHUwMTc2XFx4ZjZcXHhmODtcXHU2YWU3ZWQ7XFx1NjMwNnk7XFx1NDQxMVxcdTAxODBjcnRcXHUwMTA1XFx1MDEwYlxcdTAxMTRhdXNlO1xcdTYyMzVub3VsbGlzO1xcdTYxMmNhO1xcdTQzOTJyO1xcdWMwMDBcXHVkODM1XFx1ZGQwNXBmO1xcdWMwMDBcXHVkODM1XFx1ZGQzOWV2ZTtcXHU0MmQ4Y1xceGYyXFx1MDExM21wZXE7XFx1NjI0ZVxcdTA3MDBIT2FjZGVmaGlsb3JzdVxcdTAxNGRcXHUwMTUxXFx1MDE1NlxcdTAxODBcXHUwMTllXFx1MDFhMlxcdTAxYjVcXHUwMWI3XFx1MDFiYVxcdTAxZGNcXHUwMjE1XFx1MDI3M1xcdTAyNzhcXHUwMjdlY3k7XFx1NDQyN1BZXFx1ODAzYlxceGE5XFx1NDBhOVxcdTAxODBjcHlcXHUwMTVkXFx1MDE2MlxcdTAxN2F1dGU7XFx1NDEwNlxcdTAxMDA7aVxcdTAxNjdcXHUwMTY4XFx1NjJkMnRhbERpZmZlcmVudGlhbEQ7XFx1NjE0NWxleXM7XFx1NjEyZFxcdTAyMDBhZWlvXFx1MDE4OVxcdTAxOGVcXHUwMTk0XFx1MDE5OHJvbjtcXHU0MTBjZGlsXFx1ODAzYlxceGM3XFx1NDBjN3JjO1xcdTQxMDhuaW50O1xcdTYyMzBvdDtcXHU0MTBhXFx1MDEwMGRuXFx1MDFhN1xcdTAxYWRpbGxhO1xcdTQwYjh0ZXJEb3Q7XFx1NDBiN1xceGYyXFx1MDE3Zmk7XFx1NDNhN3JjbGVcXHUwMjAwRE1QVFxcdTAxYzdcXHUwMWNiXFx1MDFkMVxcdTAxZDZvdDtcXHU2Mjk5aW51cztcXHU2Mjk2bHVzO1xcdTYyOTVpbWVzO1xcdTYyOTdvXFx1MDEwMGNzXFx1MDFlMlxcdTAxZjhrd2lzZUNvbnRvdXJJbnRlZ3JhbDtcXHU2MjMyZUN1cmx5XFx1MDEwMERRXFx1MDIwM1xcdTAyMGZvdWJsZVF1b3RlO1xcdTYwMWR1b3RlO1xcdTYwMTlcXHUwMjAwbG5wdVxcdTAyMWVcXHUwMjI4XFx1MDI0N1xcdTAyNTVvblxcdTAxMDA7ZVxcdTAyMjVcXHUwMjI2XFx1NjIzNztcXHU2YTc0XFx1MDE4MGdpdFxcdTAyMmZcXHUwMjM2XFx1MDIzYXJ1ZW50O1xcdTYyNjFudDtcXHU2MjJmb3VySW50ZWdyYWw7XFx1NjIyZVxcdTAxMDBmclxcdTAyNGNcXHUwMjRlO1xcdTYxMDJvZHVjdDtcXHU2MjEwbnRlckNsb2Nrd2lzZUNvbnRvdXJJbnRlZ3JhbDtcXHU2MjMzb3NzO1xcdTZhMmZjcjtcXHVjMDAwXFx1ZDgzNVxcdWRjOWVwXFx1MDEwMDtDXFx1MDI4NFxcdTAyODVcXHU2MmQzYXA7XFx1NjI0ZFxcdTA1ODBESlNaYWNlZmlvc1xcdTAyYTBcXHUwMmFjXFx1MDJiMFxcdTAyYjRcXHUwMmI4XFx1MDJjYlxcdTAyZDdcXHUwMmUxXFx1MDJlNlxcdTAzMzNcXHUwNDhkXFx1MDEwMDtvXFx1MDE3OVxcdTAyYTV0cmFoZDtcXHU2OTExY3k7XFx1NDQwMmN5O1xcdTQ0MDVjeTtcXHU0NDBmXFx1MDE4MGdyc1xcdTAyYmZcXHUwMmM0XFx1MDJjN2dlcjtcXHU2MDIxcjtcXHU2MWExaHY7XFx1NmFlNFxcdTAxMDBheVxcdTAyZDBcXHUwMmQ1cm9uO1xcdTQxMGU7XFx1NDQxNGxcXHUwMTAwO3RcXHUwMmRkXFx1MDJkZVxcdTYyMDdhO1xcdTQzOTRyO1xcdWMwMDBcXHVkODM1XFx1ZGQwN1xcdTAxMDBhZlxcdTAyZWJcXHUwMzI3XFx1MDEwMGNtXFx1MDJmMFxcdTAzMjJyaXRpY2FsXFx1MDIwMEFER1RcXHUwMzAwXFx1MDMwNlxcdTAzMTZcXHUwMzFjY3V0ZTtcXHU0MGI0b1xcdTAxNzRcXHUwMzBiXFx1MDMwZDtcXHU0MmQ5YmxlQWN1dGU7XFx1NDJkZHJhdmU7XFx1NDA2MGlsZGU7XFx1NDJkY29uZDtcXHU2MmM0ZmVyZW50aWFsRDtcXHU2MTQ2XFx1MDQ3MFxcdTAzM2RcXDBcXDBcXDBcXHUwMzQyXFx1MDM1NFxcMFxcdTA0MDVmO1xcdWMwMDBcXHVkODM1XFx1ZGQzYlxcdTAxODA7REVcXHUwMzQ4XFx1MDM0OVxcdTAzNGRcXHU0MGE4b3Q7XFx1NjBkY3F1YWw7XFx1NjI1MGJsZVxcdTAzMDBDRExSVVZcXHUwMzYzXFx1MDM3MlxcdTAzODJcXHUwM2NmXFx1MDNlMlxcdTAzZjhvbnRvdXJJbnRlZ3JhXFx4ZWNcXHUwMjM5b1xcdTAyNzRcXHUwMzc5XFwwXFwwXFx1MDM3YlxceGJiXFx1MDM0OW5BcnJvdztcXHU2MWQzXFx1MDEwMGVvXFx1MDM4N1xcdTAzYTRmdFxcdTAxODBBUlRcXHUwMzkwXFx1MDM5NlxcdTAzYTFycm93O1xcdTYxZDBpZ2h0QXJyb3c7XFx1NjFkNGVcXHhlNVxcdTAyY2FuZ1xcdTAxMDBMUlxcdTAzYWJcXHUwM2M0ZWZ0XFx1MDEwMEFSXFx1MDNiM1xcdTAzYjlycm93O1xcdTY3ZjhpZ2h0QXJyb3c7XFx1NjdmYWlnaHRBcnJvdztcXHU2N2Y5aWdodFxcdTAxMDBBVFxcdTAzZDhcXHUwM2RlcnJvdztcXHU2MWQyZWU7XFx1NjJhOHBcXHUwMjQxXFx1MDNlOVxcMFxcMFxcdTAzZWZycm93O1xcdTYxZDFvd25BcnJvdztcXHU2MWQ1ZXJ0aWNhbEJhcjtcXHU2MjI1blxcdTAzMDBBQkxSVGFcXHUwNDEyXFx1MDQyYVxcdTA0MzBcXHUwNDVlXFx1MDQ3ZlxcdTAzN2Nycm93XFx1MDE4MDtCVVxcdTA0MWRcXHUwNDFlXFx1MDQyMlxcdTYxOTNhcjtcXHU2OTEzcEFycm93O1xcdTYxZjVyZXZlO1xcdTQzMTFlZnRcXHUwMmQyXFx1MDQzYVxcMFxcdTA0NDZcXDBcXHUwNDUwaWdodFZlY3RvcjtcXHU2OTUwZWVWZWN0b3I7XFx1Njk1ZWVjdG9yXFx1MDEwMDtCXFx1MDQ1OVxcdTA0NWFcXHU2MWJkYXI7XFx1Njk1NmlnaHRcXHUwMWQ0XFx1MDQ2N1xcMFxcdTA0NzFlZVZlY3RvcjtcXHU2OTVmZWN0b3JcXHUwMTAwO0JcXHUwNDdhXFx1MDQ3YlxcdTYxYzFhcjtcXHU2OTU3ZWVcXHUwMTAwO0FcXHUwNDg2XFx1MDQ4N1xcdTYyYTRycm93O1xcdTYxYTdcXHUwMTAwY3RcXHUwNDkyXFx1MDQ5N3I7XFx1YzAwMFxcdWQ4MzVcXHVkYzlmcm9rO1xcdTQxMTBcXHUwODAwTlRhY2RmZ2xtb3Bxc3R1eFxcdTA0YmRcXHUwNGMwXFx1MDRjNFxcdTA0Y2JcXHUwNGRlXFx1MDRlMlxcdTA0ZTdcXHUwNGVlXFx1MDRmNVxcdTA1MjFcXHUwNTJmXFx1MDUzNlxcdTA1NTJcXHUwNTVkXFx1MDU2MFxcdTA1NjVHO1xcdTQxNGFIXFx1ODAzYlxceGQwXFx1NDBkMGN1dGVcXHU4MDNiXFx4YzlcXHU0MGM5XFx1MDE4MGFpeVxcdTA0ZDJcXHUwNGQ3XFx1MDRkY3JvbjtcXHU0MTFhcmNcXHU4MDNiXFx4Y2FcXHU0MGNhO1xcdTQ0MmRvdDtcXHU0MTE2cjtcXHVjMDAwXFx1ZDgzNVxcdWRkMDhyYXZlXFx1ODAzYlxceGM4XFx1NDBjOGVtZW50O1xcdTYyMDhcXHUwMTAwYXBcXHUwNGZhXFx1MDRmZWNyO1xcdTQxMTJ0eVxcdTAyNTNcXHUwNTA2XFwwXFwwXFx1MDUxMm1hbGxTcXVhcmU7XFx1NjVmYmVyeVNtYWxsU3F1YXJlO1xcdTY1YWJcXHUwMTAwZ3BcXHUwNTI2XFx1MDUyYW9uO1xcdTQxMThmO1xcdWMwMDBcXHVkODM1XFx1ZGQzY3NpbG9uO1xcdTQzOTV1XFx1MDEwMGFpXFx1MDUzY1xcdTA1NDlsXFx1MDEwMDtUXFx1MDU0MlxcdTA1NDNcXHU2YTc1aWxkZTtcXHU2MjQybGlicml1bTtcXHU2MWNjXFx1MDEwMGNpXFx1MDU1N1xcdTA1NWFyO1xcdTYxMzBtO1xcdTZhNzNhO1xcdTQzOTdtbFxcdTgwM2JcXHhjYlxcdTQwY2JcXHUwMTAwaXBcXHUwNTZhXFx1MDU2ZnN0cztcXHU2MjAzb25lbnRpYWxFO1xcdTYxNDdcXHUwMjgwY2Zpb3NcXHUwNTg1XFx1MDU4OFxcdTA1OGRcXHUwNWIyXFx1MDVjY3k7XFx1NDQyNHI7XFx1YzAwMFxcdWQ4MzVcXHVkZDA5bGxlZFxcdTAyNTNcXHUwNTk3XFwwXFwwXFx1MDVhM21hbGxTcXVhcmU7XFx1NjVmY2VyeVNtYWxsU3F1YXJlO1xcdTY1YWFcXHUwMzcwXFx1MDViYVxcMFxcdTA1YmZcXDBcXDBcXHUwNWM0ZjtcXHVjMDAwXFx1ZDgzNVxcdWRkM2RBbGw7XFx1NjIwMHJpZXJ0cmY7XFx1NjEzMWNcXHhmMlxcdTA1Y2JcXHUwNjAwSlRhYmNkZmdvcnN0XFx1MDVlOFxcdTA1ZWNcXHUwNWVmXFx1MDVmYVxcdTA2MDBcXHUwNjEyXFx1MDYxNlxcdTA2MWJcXHUwNjFkXFx1MDYyM1xcdTA2NmNcXHUwNjcyY3k7XFx1NDQwM1xcdTgwM2I+XFx1NDAzZW1tYVxcdTAxMDA7ZFxcdTA1ZjdcXHUwNWY4XFx1NDM5MztcXHU0M2RjcmV2ZTtcXHU0MTFlXFx1MDE4MGVpeVxcdTA2MDdcXHUwNjBjXFx1MDYxMGRpbDtcXHU0MTIycmM7XFx1NDExYztcXHU0NDEzb3Q7XFx1NDEyMHI7XFx1YzAwMFxcdWQ4MzVcXHVkZDBhO1xcdTYyZDlwZjtcXHVjMDAwXFx1ZDgzNVxcdWRkM2VlYXRlclxcdTAzMDBFRkdMU1RcXHUwNjM1XFx1MDY0NFxcdTA2NGVcXHUwNjU2XFx1MDY1YlxcdTA2NjZxdWFsXFx1MDEwMDtMXFx1MDYzZVxcdTA2M2ZcXHU2MjY1ZXNzO1xcdTYyZGJ1bGxFcXVhbDtcXHU2MjY3cmVhdGVyO1xcdTZhYTJlc3M7XFx1NjI3N2xhbnRFcXVhbDtcXHU2YTdlaWxkZTtcXHU2MjczY3I7XFx1YzAwMFxcdWQ4MzVcXHVkY2EyO1xcdTYyNmJcXHUwNDAwQWFjZmlvc3VcXHUwNjg1XFx1MDY4YlxcdTA2OTZcXHUwNjliXFx1MDY5ZVxcdTA2YWFcXHUwNmJlXFx1MDZjYVJEY3k7XFx1NDQyYVxcdTAxMDBjdFxcdTA2OTBcXHUwNjk0ZWs7XFx1NDJjNztcXHU0MDVlaXJjO1xcdTQxMjRyO1xcdTYxMGNsYmVydFNwYWNlO1xcdTYxMGJcXHUwMWYwXFx1MDZhZlxcMFxcdTA2YjJmO1xcdTYxMGRpem9udGFsTGluZTtcXHU2NTAwXFx1MDEwMGN0XFx1MDZjM1xcdTA2YzVcXHhmMlxcdTA2YTlyb2s7XFx1NDEyNm1wXFx1MDE0NFxcdTA2ZDBcXHUwNmQ4b3duSHVtXFx4ZjBcXHUwMTJmcXVhbDtcXHU2MjRmXFx1MDcwMEVKT2FjZGZnbW5vc3R1XFx1MDZmYVxcdTA2ZmVcXHUwNzAzXFx1MDcwN1xcdTA3MGVcXHUwNzFhXFx1MDcxZVxcdTA3MjFcXHUwNzI4XFx1MDc0NFxcdTA3NzhcXHUwNzhiXFx1MDc4ZlxcdTA3OTVjeTtcXHU0NDE1bGlnO1xcdTQxMzJjeTtcXHU0NDAxY3V0ZVxcdTgwM2JcXHhjZFxcdTQwY2RcXHUwMTAwaXlcXHUwNzEzXFx1MDcxOHJjXFx1ODAzYlxceGNlXFx1NDBjZTtcXHU0NDE4b3Q7XFx1NDEzMHI7XFx1NjExMXJhdmVcXHU4MDNiXFx4Y2NcXHU0MGNjXFx1MDE4MDthcFxcdTA3MjBcXHUwNzJmXFx1MDczZlxcdTAxMDBjZ1xcdTA3MzRcXHUwNzM3cjtcXHU0MTJhaW5hcnlJO1xcdTYxNDhsaWVcXHhmM1xcdTAzZGRcXHUwMWY0XFx1MDc0OVxcMFxcdTA3NjJcXHUwMTAwO2VcXHUwNzRkXFx1MDc0ZVxcdTYyMmNcXHUwMTAwZ3JcXHUwNzUzXFx1MDc1OHJhbDtcXHU2MjJic2VjdGlvbjtcXHU2MmMyaXNpYmxlXFx1MDEwMENUXFx1MDc2Y1xcdTA3NzJvbW1hO1xcdTYwNjNpbWVzO1xcdTYwNjJcXHUwMTgwZ3B0XFx1MDc3ZlxcdTA3ODNcXHUwNzg4b247XFx1NDEyZWY7XFx1YzAwMFxcdWQ4MzVcXHVkZDQwYTtcXHU0Mzk5Y3I7XFx1NjExMGlsZGU7XFx1NDEyOFxcdTAxZWJcXHUwNzlhXFwwXFx1MDc5ZWN5O1xcdTQ0MDZsXFx1ODAzYlxceGNmXFx1NDBjZlxcdTAyODBjZm9zdVxcdTA3YWNcXHUwN2I3XFx1MDdiY1xcdTA3YzJcXHUwN2QwXFx1MDEwMGl5XFx1MDdiMVxcdTA3YjVyYztcXHU0MTM0O1xcdTQ0MTlyO1xcdWMwMDBcXHVkODM1XFx1ZGQwZHBmO1xcdWMwMDBcXHVkODM1XFx1ZGQ0MVxcdTAxZTNcXHUwN2M3XFwwXFx1MDdjY3I7XFx1YzAwMFxcdWQ4MzVcXHVkY2E1cmN5O1xcdTQ0MDhrY3k7XFx1NDQwNFxcdTAzODBISmFjZm9zXFx1MDdlNFxcdTA3ZThcXHUwN2VjXFx1MDdmMVxcdTA3ZmRcXHUwODAyXFx1MDgwOGN5O1xcdTQ0MjVjeTtcXHU0NDBjcHBhO1xcdTQzOWFcXHUwMTAwZXlcXHUwN2Y2XFx1MDdmYmRpbDtcXHU0MTM2O1xcdTQ0MWFyO1xcdWMwMDBcXHVkODM1XFx1ZGQwZXBmO1xcdWMwMDBcXHVkODM1XFx1ZGQ0MmNyO1xcdWMwMDBcXHVkODM1XFx1ZGNhNlxcdTA1ODBKVGFjZWZsbW9zdFxcdTA4MjVcXHUwODI5XFx1MDgyY1xcdTA4NTBcXHUwODYzXFx1MDliM1xcdTA5YjhcXHUwOWM3XFx1MDljZFxcdTBhMzdcXHUwYTQ3Y3k7XFx1NDQwOVxcdTgwM2I8XFx1NDAzY1xcdTAyODBjbW5wclxcdTA4MzdcXHUwODNjXFx1MDg0MVxcdTA4NDRcXHUwODRkdXRlO1xcdTQxMzliZGE7XFx1NDM5Ymc7XFx1NjdlYWxhY2V0cmY7XFx1NjExMnI7XFx1NjE5ZVxcdTAxODBhZXlcXHUwODU3XFx1MDg1Y1xcdTA4NjFyb247XFx1NDEzZGRpbDtcXHU0MTNiO1xcdTQ0MWJcXHUwMTAwZnNcXHUwODY4XFx1MDk3MHRcXHUwNTAwQUNERlJUVVZhclxcdTA4N2VcXHUwOGE5XFx1MDhiMVxcdTA4ZTBcXHUwOGU2XFx1MDhmY1xcdTA5MmZcXHUwOTViXFx1MDM5MFxcdTA5NmFcXHUwMTAwbnJcXHUwODgzXFx1MDg4ZmdsZUJyYWNrZXQ7XFx1NjdlOHJvd1xcdTAxODA7QlJcXHUwODk5XFx1MDg5YVxcdTA4OWVcXHU2MTkwYXI7XFx1NjFlNGlnaHRBcnJvdztcXHU2MWM2ZWlsaW5nO1xcdTYzMDhvXFx1MDFmNVxcdTA4YjdcXDBcXHUwOGMzYmxlQnJhY2tldDtcXHU2N2U2blxcdTAxZDRcXHUwOGM4XFwwXFx1MDhkMmVlVmVjdG9yO1xcdTY5NjFlY3RvclxcdTAxMDA7QlxcdTA4ZGJcXHUwOGRjXFx1NjFjM2FyO1xcdTY5NTlsb29yO1xcdTYzMGFpZ2h0XFx1MDEwMEFWXFx1MDhlZlxcdTA4ZjVycm93O1xcdTYxOTRlY3RvcjtcXHU2OTRlXFx1MDEwMGVyXFx1MDkwMVxcdTA5MTdlXFx1MDE4MDtBVlxcdTA5MDlcXHUwOTBhXFx1MDkxMFxcdTYyYTNycm93O1xcdTYxYTRlY3RvcjtcXHU2OTVhaWFuZ2xlXFx1MDE4MDtCRVxcdTA5MjRcXHUwOTI1XFx1MDkyOVxcdTYyYjJhcjtcXHU2OWNmcXVhbDtcXHU2MmI0cFxcdTAxODBEVFZcXHUwOTM3XFx1MDk0MlxcdTA5NGNvd25WZWN0b3I7XFx1Njk1MWVlVmVjdG9yO1xcdTY5NjBlY3RvclxcdTAxMDA7QlxcdTA5NTZcXHUwOTU3XFx1NjFiZmFyO1xcdTY5NThlY3RvclxcdTAxMDA7QlxcdTA5NjVcXHUwOTY2XFx1NjFiY2FyO1xcdTY5NTJpZ2h0XFx4ZTFcXHUwMzljc1xcdTAzMDBFRkdMU1RcXHUwOTdlXFx1MDk4YlxcdTA5OTVcXHUwOTlkXFx1MDlhMlxcdTA5YWRxdWFsR3JlYXRlcjtcXHU2MmRhdWxsRXF1YWw7XFx1NjI2NnJlYXRlcjtcXHU2Mjc2ZXNzO1xcdTZhYTFsYW50RXF1YWw7XFx1NmE3ZGlsZGU7XFx1NjI3MnI7XFx1YzAwMFxcdWQ4MzVcXHVkZDBmXFx1MDEwMDtlXFx1MDliZFxcdTA5YmVcXHU2MmQ4ZnRhcnJvdztcXHU2MWRhaWRvdDtcXHU0MTNmXFx1MDE4MG5wd1xcdTA5ZDRcXHUwYTE2XFx1MGExYmdcXHUwMjAwTFJsclxcdTA5ZGVcXHUwOWY3XFx1MGEwMlxcdTBhMTBlZnRcXHUwMTAwQVJcXHUwOWU2XFx1MDllY3Jyb3c7XFx1NjdmNWlnaHRBcnJvdztcXHU2N2Y3aWdodEFycm93O1xcdTY3ZjZlZnRcXHUwMTAwYXJcXHUwM2IzXFx1MGEwYWlnaHRcXHhlMVxcdTAzYmZpZ2h0XFx4ZTFcXHUwM2NhZjtcXHVjMDAwXFx1ZDgzNVxcdWRkNDNlclxcdTAxMDBMUlxcdTBhMjJcXHUwYTJjZWZ0QXJyb3c7XFx1NjE5OWlnaHRBcnJvdztcXHU2MTk4XFx1MDE4MGNodFxcdTBhM2VcXHUwYTQwXFx1MGE0MlxceGYyXFx1MDg0YztcXHU2MWIwcm9rO1xcdTQxNDE7XFx1NjI2YVxcdTA0MDBhY2VmaW9zdVxcdTBhNWFcXHUwYTVkXFx1MGE2MFxcdTBhNzdcXHUwYTdjXFx1MGE4NVxcdTBhOGJcXHUwYThlcDtcXHU2OTA1eTtcXHU0NDFjXFx1MDEwMGRsXFx1MGE2NVxcdTBhNmZpdW1TcGFjZTtcXHU2MDVmbGludHJmO1xcdTYxMzNyO1xcdWMwMDBcXHVkODM1XFx1ZGQxMG51c1BsdXM7XFx1NjIxM3BmO1xcdWMwMDBcXHVkODM1XFx1ZGQ0NGNcXHhmMlxcdTBhNzY7XFx1NDM5Y1xcdTA0ODBKYWNlZm9zdHVcXHUwYWEzXFx1MGFhN1xcdTBhYWRcXHUwYWMwXFx1MGIxNFxcdTBiMTlcXHUwZDkxXFx1MGQ5N1xcdTBkOWVjeTtcXHU0NDBhY3V0ZTtcXHU0MTQzXFx1MDE4MGFleVxcdTBhYjRcXHUwYWI5XFx1MGFiZXJvbjtcXHU0MTQ3ZGlsO1xcdTQxNDU7XFx1NDQxZFxcdTAxODBnc3dcXHUwYWM3XFx1MGFmMFxcdTBiMGVhdGl2ZVxcdTAxODBNVFZcXHUwYWQzXFx1MGFkZlxcdTBhZThlZGl1bVNwYWNlO1xcdTYwMGJoaVxcdTAxMDBjblxcdTBhZTZcXHUwYWQ4XFx4ZWJcXHUwYWQ5ZXJ5VGhpXFx4ZWVcXHUwYWQ5dGVkXFx1MDEwMEdMXFx1MGFmOFxcdTBiMDZyZWF0ZXJHcmVhdGVcXHhmMlxcdTA2NzNlc3NMZXNcXHhmM1xcdTBhNDhMaW5lO1xcdTQwMGFyO1xcdWMwMDBcXHVkODM1XFx1ZGQxMVxcdTAyMDBCbnB0XFx1MGIyMlxcdTBiMjhcXHUwYjM3XFx1MGIzYXJlYWs7XFx1NjA2MEJyZWFraW5nU3BhY2U7XFx1NDBhMGY7XFx1NjExNVxcdTA2ODA7Q0RFR0hMTlBSU1RWXFx1MGI1NVxcdTBiNTZcXHUwYjZhXFx1MGI3Y1xcdTBiYTFcXHUwYmViXFx1MGMwNFxcdTBjNWVcXHUwYzg0XFx1MGNhNlxcdTBjZDhcXHUwZDYxXFx1MGQ4NVxcdTZhZWNcXHUwMTAwb3VcXHUwYjViXFx1MGI2NG5ncnVlbnQ7XFx1NjI2MnBDYXA7XFx1NjI2ZG91YmxlVmVydGljYWxCYXI7XFx1NjIyNlxcdTAxODBscXhcXHUwYjgzXFx1MGI4YVxcdTBiOWJlbWVudDtcXHU2MjA5dWFsXFx1MDEwMDtUXFx1MGI5MlxcdTBiOTNcXHU2MjYwaWxkZTtcXHVjMDAwXFx1MjI0MlxcdTAzMzhpc3RzO1xcdTYyMDRyZWF0ZXJcXHUwMzgwO0VGR0xTVFxcdTBiYjZcXHUwYmI3XFx1MGJiZFxcdTBiYzlcXHUwYmQzXFx1MGJkOFxcdTBiZTVcXHU2MjZmcXVhbDtcXHU2MjcxdWxsRXF1YWw7XFx1YzAwMFxcdTIyNjdcXHUwMzM4cmVhdGVyO1xcdWMwMDBcXHUyMjZiXFx1MDMzOGVzcztcXHU2Mjc5bGFudEVxdWFsO1xcdWMwMDBcXHUyYTdlXFx1MDMzOGlsZGU7XFx1NjI3NXVtcFxcdTAxNDRcXHUwYmYyXFx1MGJmZG93bkh1bXA7XFx1YzAwMFxcdTIyNGVcXHUwMzM4cXVhbDtcXHVjMDAwXFx1MjI0ZlxcdTAzMzhlXFx1MDEwMGZzXFx1MGMwYVxcdTBjMjd0VHJpYW5nbGVcXHUwMTgwO0JFXFx1MGMxYVxcdTBjMWJcXHUwYzIxXFx1NjJlYWFyO1xcdWMwMDBcXHUyOWNmXFx1MDMzOHF1YWw7XFx1NjJlY3NcXHUwMzAwO0VHTFNUXFx1MGMzNVxcdTBjMzZcXHUwYzNjXFx1MGM0NFxcdTBjNGJcXHUwYzU4XFx1NjI2ZXF1YWw7XFx1NjI3MHJlYXRlcjtcXHU2Mjc4ZXNzO1xcdWMwMDBcXHUyMjZhXFx1MDMzOGxhbnRFcXVhbDtcXHVjMDAwXFx1MmE3ZFxcdTAzMzhpbGRlO1xcdTYyNzRlc3RlZFxcdTAxMDBHTFxcdTBjNjhcXHUwYzc5cmVhdGVyR3JlYXRlcjtcXHVjMDAwXFx1MmFhMlxcdTAzMzhlc3NMZXNzO1xcdWMwMDBcXHUyYWExXFx1MDMzOHJlY2VkZXNcXHUwMTgwO0VTXFx1MGM5MlxcdTBjOTNcXHUwYzliXFx1NjI4MHF1YWw7XFx1YzAwMFxcdTJhYWZcXHUwMzM4bGFudEVxdWFsO1xcdTYyZTBcXHUwMTAwZWlcXHUwY2FiXFx1MGNiOXZlcnNlRWxlbWVudDtcXHU2MjBjZ2h0VHJpYW5nbGVcXHUwMTgwO0JFXFx1MGNjYlxcdTBjY2NcXHUwY2QyXFx1NjJlYmFyO1xcdWMwMDBcXHUyOWQwXFx1MDMzOHF1YWw7XFx1NjJlZFxcdTAxMDBxdVxcdTBjZGRcXHUwZDBjdWFyZVN1XFx1MDEwMGJwXFx1MGNlOFxcdTBjZjlzZXRcXHUwMTAwO0VcXHUwY2YwXFx1MGNmM1xcdWMwMDBcXHUyMjhmXFx1MDMzOHF1YWw7XFx1NjJlMmVyc2V0XFx1MDEwMDtFXFx1MGQwM1xcdTBkMDZcXHVjMDAwXFx1MjI5MFxcdTAzMzhxdWFsO1xcdTYyZTNcXHUwMTgwYmNwXFx1MGQxM1xcdTBkMjRcXHUwZDRlc2V0XFx1MDEwMDtFXFx1MGQxYlxcdTBkMWVcXHVjMDAwXFx1MjI4MlxcdTIwZDJxdWFsO1xcdTYyODhjZWVkc1xcdTAyMDA7RVNUXFx1MGQzMlxcdTBkMzNcXHUwZDNiXFx1MGQ0NlxcdTYyODFxdWFsO1xcdWMwMDBcXHUyYWIwXFx1MDMzOGxhbnRFcXVhbDtcXHU2MmUxaWxkZTtcXHVjMDAwXFx1MjI3ZlxcdTAzMzhlcnNldFxcdTAxMDA7RVxcdTBkNThcXHUwZDViXFx1YzAwMFxcdTIyODNcXHUyMGQycXVhbDtcXHU2Mjg5aWxkZVxcdTAyMDA7RUZUXFx1MGQ2ZVxcdTBkNmZcXHUwZDc1XFx1MGQ3ZlxcdTYyNDFxdWFsO1xcdTYyNDR1bGxFcXVhbDtcXHU2MjQ3aWxkZTtcXHU2MjQ5ZXJ0aWNhbEJhcjtcXHU2MjI0Y3I7XFx1YzAwMFxcdWQ4MzVcXHVkY2E5aWxkZVxcdTgwM2JcXHhkMVxcdTQwZDE7XFx1NDM5ZFxcdTA3MDBFYWNkZmdtb3Byc3R1dlxcdTBkYmRcXHUwZGMyXFx1MGRjOVxcdTBkZDVcXHUwZGRiXFx1MGRlMFxcdTBkZTdcXHUwZGZjXFx1MGUwMlxcdTBlMjBcXHUwZTIyXFx1MGUzMlxcdTBlM2ZcXHUwZTQ0bGlnO1xcdTQxNTJjdXRlXFx1ODAzYlxceGQzXFx1NDBkM1xcdTAxMDBpeVxcdTBkY2VcXHUwZGQzcmNcXHU4MDNiXFx4ZDRcXHU0MGQ0O1xcdTQ0MWVibGFjO1xcdTQxNTByO1xcdWMwMDBcXHVkODM1XFx1ZGQxMnJhdmVcXHU4MDNiXFx4ZDJcXHU0MGQyXFx1MDE4MGFlaVxcdTBkZWVcXHUwZGYyXFx1MGRmNmNyO1xcdTQxNGNnYTtcXHU0M2E5Y3JvbjtcXHU0MzlmcGY7XFx1YzAwMFxcdWQ4MzVcXHVkZDQ2ZW5DdXJseVxcdTAxMDBEUVxcdTBlMGVcXHUwZTFhb3VibGVRdW90ZTtcXHU2MDFjdW90ZTtcXHU2MDE4O1xcdTZhNTRcXHUwMTAwY2xcXHUwZTI3XFx1MGUyY3I7XFx1YzAwMFxcdWQ4MzVcXHVkY2FhYXNoXFx1ODAzYlxceGQ4XFx1NDBkOGlcXHUwMTZjXFx1MGUzN1xcdTBlM2NkZVxcdTgwM2JcXHhkNVxcdTQwZDVlcztcXHU2YTM3bWxcXHU4MDNiXFx4ZDZcXHU0MGQ2ZXJcXHUwMTAwQlBcXHUwZTRiXFx1MGU2MFxcdTAxMDBhclxcdTBlNTBcXHUwZTUzcjtcXHU2MDNlYWNcXHUwMTAwZWtcXHUwZTVhXFx1MGU1YztcXHU2M2RlZXQ7XFx1NjNiNGFyZW50aGVzaXM7XFx1NjNkY1xcdTA0ODBhY2ZoaWxvcnNcXHUwZTdmXFx1MGU4N1xcdTBlOGFcXHUwZThmXFx1MGU5MlxcdTBlOTRcXHUwZTlkXFx1MGViMFxcdTBlZmNydGlhbEQ7XFx1NjIwMnk7XFx1NDQxZnI7XFx1YzAwMFxcdWQ4MzVcXHVkZDEzaTtcXHU0M2E2O1xcdTQzYTB1c01pbnVzO1xcdTQwYjFcXHUwMTAwaXBcXHUwZWEyXFx1MGVhZG5jYXJlcGxhblxceGU1XFx1MDY5ZGY7XFx1NjExOVxcdTAyMDA7ZWlvXFx1MGViOVxcdTBlYmFcXHUwZWUwXFx1MGVlNFxcdTZhYmJjZWRlc1xcdTAyMDA7RVNUXFx1MGVjOFxcdTBlYzlcXHUwZWNmXFx1MGVkYVxcdTYyN2FxdWFsO1xcdTZhYWZsYW50RXF1YWw7XFx1NjI3Y2lsZGU7XFx1NjI3ZW1lO1xcdTYwMzNcXHUwMTAwZHBcXHUwZWU5XFx1MGVlZXVjdDtcXHU2MjBmb3J0aW9uXFx1MDEwMDthXFx1MDIyNVxcdTBlZjlsO1xcdTYyMWRcXHUwMTAwY2lcXHUwZjAxXFx1MGYwNnI7XFx1YzAwMFxcdWQ4MzVcXHVkY2FiO1xcdTQzYThcXHUwMjAwVWZvc1xcdTBmMTFcXHUwZjE2XFx1MGYxYlxcdTBmMWZPVFxcdTgwM2JcXFwiXFx1NDAyMnI7XFx1YzAwMFxcdWQ4MzVcXHVkZDE0cGY7XFx1NjExYWNyO1xcdWMwMDBcXHVkODM1XFx1ZGNhY1xcdTA2MDBCRWFjZWZoaW9yc3VcXHUwZjNlXFx1MGY0M1xcdTBmNDdcXHUwZjYwXFx1MGY3M1xcdTBmYTdcXHUwZmFhXFx1MGZhZFxcdTEwOTZcXHUxMGE5XFx1MTBiNFxcdTEwYmVhcnI7XFx1NjkxMEdcXHU4MDNiXFx4YWVcXHU0MGFlXFx1MDE4MGNuclxcdTBmNGVcXHUwZjUzXFx1MGY1NnV0ZTtcXHU0MTU0ZztcXHU2N2ViclxcdTAxMDA7dFxcdTBmNWNcXHUwZjVkXFx1NjFhMGw7XFx1NjkxNlxcdTAxODBhZXlcXHUwZjY3XFx1MGY2Y1xcdTBmNzFyb247XFx1NDE1OGRpbDtcXHU0MTU2O1xcdTQ0MjBcXHUwMTAwO3ZcXHUwZjc4XFx1MGY3OVxcdTYxMWNlcnNlXFx1MDEwMEVVXFx1MGY4MlxcdTBmOTlcXHUwMTAwbHFcXHUwZjg3XFx1MGY4ZWVtZW50O1xcdTYyMGJ1aWxpYnJpdW07XFx1NjFjYnBFcXVpbGlicml1bTtcXHU2OTZmclxceGJiXFx1MGY3OW87XFx1NDNhMWdodFxcdTA0MDBBQ0RGVFVWYVxcdTBmYzFcXHUwZmViXFx1MGZmM1xcdTEwMjJcXHUxMDI4XFx1MTA1YlxcdTEwODdcXHUwM2Q4XFx1MDEwMG5yXFx1MGZjNlxcdTBmZDJnbGVCcmFja2V0O1xcdTY3ZTlyb3dcXHUwMTgwO0JMXFx1MGZkY1xcdTBmZGRcXHUwZmUxXFx1NjE5MmFyO1xcdTYxZTVlZnRBcnJvdztcXHU2MWM0ZWlsaW5nO1xcdTYzMDlvXFx1MDFmNVxcdTBmZjlcXDBcXHUxMDA1YmxlQnJhY2tldDtcXHU2N2U3blxcdTAxZDRcXHUxMDBhXFwwXFx1MTAxNGVlVmVjdG9yO1xcdTY5NWRlY3RvclxcdTAxMDA7QlxcdTEwMWRcXHUxMDFlXFx1NjFjMmFyO1xcdTY5NTVsb29yO1xcdTYzMGJcXHUwMTAwZXJcXHUxMDJkXFx1MTA0M2VcXHUwMTgwO0FWXFx1MTAzNVxcdTEwMzZcXHUxMDNjXFx1NjJhMnJyb3c7XFx1NjFhNmVjdG9yO1xcdTY5NWJpYW5nbGVcXHUwMTgwO0JFXFx1MTA1MFxcdTEwNTFcXHUxMDU1XFx1NjJiM2FyO1xcdTY5ZDBxdWFsO1xcdTYyYjVwXFx1MDE4MERUVlxcdTEwNjNcXHUxMDZlXFx1MTA3OG93blZlY3RvcjtcXHU2OTRmZWVWZWN0b3I7XFx1Njk1Y2VjdG9yXFx1MDEwMDtCXFx1MTA4MlxcdTEwODNcXHU2MWJlYXI7XFx1Njk1NGVjdG9yXFx1MDEwMDtCXFx1MTA5MVxcdTEwOTJcXHU2MWMwYXI7XFx1Njk1M1xcdTAxMDBwdVxcdTEwOWJcXHUxMDllZjtcXHU2MTFkbmRJbXBsaWVzO1xcdTY5NzBpZ2h0YXJyb3c7XFx1NjFkYlxcdTAxMDBjaFxcdTEwYjlcXHUxMGJjcjtcXHU2MTFiO1xcdTYxYjFsZURlbGF5ZWQ7XFx1NjlmNFxcdTA2ODBIT2FjZmhpbW9xc3R1XFx1MTBlNFxcdTEwZjFcXHUxMGY3XFx1MTBmZFxcdTExMTlcXHUxMTFlXFx1MTE1MVxcdTExNTZcXHUxMTYxXFx1MTE2N1xcdTExYjVcXHUxMWJiXFx1MTFiZlxcdTAxMDBDY1xcdTEwZTlcXHUxMGVlSGN5O1xcdTQ0Mjl5O1xcdTQ0MjhGVGN5O1xcdTQ0MmNjdXRlO1xcdTQxNWFcXHUwMjgwO2FlaXlcXHUxMTA4XFx1MTEwOVxcdTExMGVcXHUxMTEzXFx1MTExN1xcdTZhYmNyb247XFx1NDE2MGRpbDtcXHU0MTVlcmM7XFx1NDE1YztcXHU0NDIxcjtcXHVjMDAwXFx1ZDgzNVxcdWRkMTZvcnRcXHUwMjAwRExSVVxcdTExMmFcXHUxMTM0XFx1MTEzZVxcdTExNDlvd25BcnJvd1xceGJiXFx1MDQxZWVmdEFycm93XFx4YmJcXHUwODlhaWdodEFycm93XFx4YmJcXHUwZmRkcEFycm93O1xcdTYxOTFnbWE7XFx1NDNhM2FsbENpcmNsZTtcXHU2MjE4cGY7XFx1YzAwMFxcdWQ4MzVcXHVkZDRhXFx1MDI3MlxcdTExNmRcXDBcXDBcXHUxMTcwdDtcXHU2MjFhYXJlXFx1MDIwMDtJU1VcXHUxMTdiXFx1MTE3Y1xcdTExODlcXHUxMWFmXFx1NjVhMW50ZXJzZWN0aW9uO1xcdTYyOTN1XFx1MDEwMGJwXFx1MTE4ZlxcdTExOWVzZXRcXHUwMTAwO0VcXHUxMTk3XFx1MTE5OFxcdTYyOGZxdWFsO1xcdTYyOTFlcnNldFxcdTAxMDA7RVxcdTExYThcXHUxMWE5XFx1NjI5MHF1YWw7XFx1NjI5Mm5pb247XFx1NjI5NGNyO1xcdWMwMDBcXHVkODM1XFx1ZGNhZWFyO1xcdTYyYzZcXHUwMjAwYmNtcFxcdTExYzhcXHUxMWRiXFx1MTIwOVxcdTEyMGJcXHUwMTAwO3NcXHUxMWNkXFx1MTFjZVxcdTYyZDBldFxcdTAxMDA7RVxcdTExY2RcXHUxMWQ1cXVhbDtcXHU2Mjg2XFx1MDEwMGNoXFx1MTFlMFxcdTEyMDVlZWRzXFx1MDIwMDtFU1RcXHUxMWVkXFx1MTFlZVxcdTExZjRcXHUxMWZmXFx1NjI3YnF1YWw7XFx1NmFiMGxhbnRFcXVhbDtcXHU2MjdkaWxkZTtcXHU2MjdmVGhcXHhlMVxcdTBmOGM7XFx1NjIxMVxcdTAxODA7ZXNcXHUxMjEyXFx1MTIxM1xcdTEyMjNcXHU2MmQxcnNldFxcdTAxMDA7RVxcdTEyMWNcXHUxMjFkXFx1NjI4M3F1YWw7XFx1NjI4N2V0XFx4YmJcXHUxMjEzXFx1MDU4MEhSU2FjZmhpb3JzXFx1MTIzZVxcdTEyNDRcXHUxMjQ5XFx1MTI1NVxcdTEyNWVcXHUxMjcxXFx1MTI3NlxcdTEyOWZcXHUxMmMyXFx1MTJjOFxcdTEyZDFPUk5cXHU4MDNiXFx4ZGVcXHU0MGRlQURFO1xcdTYxMjJcXHUwMTAwSGNcXHUxMjRlXFx1MTI1MmN5O1xcdTQ0MGJ5O1xcdTQ0MjZcXHUwMTAwYnVcXHUxMjVhXFx1MTI1YztcXHU0MDA5O1xcdTQzYTRcXHUwMTgwYWV5XFx1MTI2NVxcdTEyNmFcXHUxMjZmcm9uO1xcdTQxNjRkaWw7XFx1NDE2MjtcXHU0NDIycjtcXHVjMDAwXFx1ZDgzNVxcdWRkMTdcXHUwMTAwZWlcXHUxMjdiXFx1MTI4OVxcdTAxZjJcXHUxMjgwXFwwXFx1MTI4N2Vmb3JlO1xcdTYyMzRhO1xcdTQzOThcXHUwMTAwY25cXHUxMjhlXFx1MTI5OGtTcGFjZTtcXHVjMDAwXFx1MjA1ZlxcdTIwMGFTcGFjZTtcXHU2MDA5bGRlXFx1MDIwMDtFRlRcXHUxMmFiXFx1MTJhY1xcdTEyYjJcXHUxMmJjXFx1NjIzY3F1YWw7XFx1NjI0M3VsbEVxdWFsO1xcdTYyNDVpbGRlO1xcdTYyNDhwZjtcXHVjMDAwXFx1ZDgzNVxcdWRkNGJpcGxlRG90O1xcdTYwZGJcXHUwMTAwY3RcXHUxMmQ2XFx1MTJkYnI7XFx1YzAwMFxcdWQ4MzVcXHVkY2Fmcm9rO1xcdTQxNjZcXHUwYWUxXFx1MTJmN1xcdTEzMGVcXHUxMzFhXFx1MTMyNlxcMFxcdTEzMmNcXHUxMzMxXFwwXFwwXFwwXFwwXFwwXFx1MTMzOFxcdTEzM2RcXHUxMzc3XFx1MTM4NVxcMFxcdTEzZmZcXHUxNDA0XFx1MTQwYVxcdTE0MTBcXHUwMTAwY3JcXHUxMmZiXFx1MTMwMXV0ZVxcdTgwM2JcXHhkYVxcdTQwZGFyXFx1MDEwMDtvXFx1MTMwN1xcdTEzMDhcXHU2MTlmY2lyO1xcdTY5NDlyXFx1MDFlM1xcdTEzMTNcXDBcXHUxMzE2eTtcXHU0NDBldmU7XFx1NDE2Y1xcdTAxMDBpeVxcdTEzMWVcXHUxMzIzcmNcXHU4MDNiXFx4ZGJcXHU0MGRiO1xcdTQ0MjNibGFjO1xcdTQxNzByO1xcdWMwMDBcXHVkODM1XFx1ZGQxOHJhdmVcXHU4MDNiXFx4ZDlcXHU0MGQ5YWNyO1xcdTQxNmFcXHUwMTAwZGlcXHUxMzQxXFx1MTM2OWVyXFx1MDEwMEJQXFx1MTM0OFxcdTEzNWRcXHUwMTAwYXJcXHUxMzRkXFx1MTM1MHI7XFx1NDA1ZmFjXFx1MDEwMGVrXFx1MTM1N1xcdTEzNTk7XFx1NjNkZmV0O1xcdTYzYjVhcmVudGhlc2lzO1xcdTYzZGRvblxcdTAxMDA7UFxcdTEzNzBcXHUxMzcxXFx1NjJjM2x1cztcXHU2MjhlXFx1MDEwMGdwXFx1MTM3YlxcdTEzN2ZvbjtcXHU0MTcyZjtcXHVjMDAwXFx1ZDgzNVxcdWRkNGNcXHUwNDAwQURFVGFkcHNcXHUxMzk1XFx1MTNhZVxcdTEzYjhcXHUxM2M0XFx1MDNlOFxcdTEzZDJcXHUxM2Q3XFx1MTNmM3Jyb3dcXHUwMTgwO0JEXFx1MTE1MFxcdTEzYTBcXHUxM2E0YXI7XFx1NjkxMm93bkFycm93O1xcdTYxYzVvd25BcnJvdztcXHU2MTk1cXVpbGlicml1bTtcXHU2OTZlZWVcXHUwMTAwO0FcXHUxM2NiXFx1MTNjY1xcdTYyYTVycm93O1xcdTYxYTVvd25cXHhlMVxcdTAzZjNlclxcdTAxMDBMUlxcdTEzZGVcXHUxM2U4ZWZ0QXJyb3c7XFx1NjE5NmlnaHRBcnJvdztcXHU2MTk3aVxcdTAxMDA7bFxcdTEzZjlcXHUxM2ZhXFx1NDNkMm9uO1xcdTQzYTVpbmc7XFx1NDE2ZWNyO1xcdWMwMDBcXHVkODM1XFx1ZGNiMGlsZGU7XFx1NDE2OG1sXFx1ODAzYlxceGRjXFx1NDBkY1xcdTA0ODBEYmNkZWZvc3ZcXHUxNDI3XFx1MTQyY1xcdTE0MzBcXHUxNDMzXFx1MTQzZVxcdTE0ODVcXHUxNDhhXFx1MTQ5MFxcdTE0OTZhc2g7XFx1NjJhYmFyO1xcdTZhZWJ5O1xcdTQ0MTJhc2hcXHUwMTAwO2xcXHUxNDNiXFx1MTQzY1xcdTYyYTk7XFx1NmFlNlxcdTAxMDBlclxcdTE0NDNcXHUxNDQ1O1xcdTYyYzFcXHUwMTgwYnR5XFx1MTQ0Y1xcdTE0NTBcXHUxNDdhYXI7XFx1NjAxNlxcdTAxMDA7aVxcdTE0NGZcXHUxNDU1Y2FsXFx1MDIwMEJMU1RcXHUxNDYxXFx1MTQ2NVxcdTE0NmFcXHUxNDc0YXI7XFx1NjIyM2luZTtcXHU0MDdjZXBhcmF0b3I7XFx1Njc1OGlsZGU7XFx1NjI0MFRoaW5TcGFjZTtcXHU2MDBhcjtcXHVjMDAwXFx1ZDgzNVxcdWRkMTlwZjtcXHVjMDAwXFx1ZDgzNVxcdWRkNGRjcjtcXHVjMDAwXFx1ZDgzNVxcdWRjYjFkYXNoO1xcdTYyYWFcXHUwMjgwY2Vmb3NcXHUxNGE3XFx1MTRhY1xcdTE0YjFcXHUxNGI2XFx1MTRiY2lyYztcXHU0MTc0ZGdlO1xcdTYyYzByO1xcdWMwMDBcXHVkODM1XFx1ZGQxYXBmO1xcdWMwMDBcXHVkODM1XFx1ZGQ0ZWNyO1xcdWMwMDBcXHVkODM1XFx1ZGNiMlxcdTAyMDBmaW9zXFx1MTRjYlxcdTE0ZDBcXHUxNGQyXFx1MTRkOHI7XFx1YzAwMFxcdWQ4MzVcXHVkZDFiO1xcdTQzOWVwZjtcXHVjMDAwXFx1ZDgzNVxcdWRkNGZjcjtcXHVjMDAwXFx1ZDgzNVxcdWRjYjNcXHUwNDgwQUlVYWNmb3N1XFx1MTRmMVxcdTE0ZjVcXHUxNGY5XFx1MTRmZFxcdTE1MDRcXHUxNTBmXFx1MTUxNFxcdTE1MWFcXHUxNTIwY3k7XFx1NDQyZmN5O1xcdTQ0MDdjeTtcXHU0NDJlY3V0ZVxcdTgwM2JcXHhkZFxcdTQwZGRcXHUwMTAwaXlcXHUxNTA5XFx1MTUwZHJjO1xcdTQxNzY7XFx1NDQyYnI7XFx1YzAwMFxcdWQ4MzVcXHVkZDFjcGY7XFx1YzAwMFxcdWQ4MzVcXHVkZDUwY3I7XFx1YzAwMFxcdWQ4MzVcXHVkY2I0bWw7XFx1NDE3OFxcdTA0MDBIYWNkZWZvc1xcdTE1MzVcXHUxNTM5XFx1MTUzZlxcdTE1NGJcXHUxNTRmXFx1MTU1ZFxcdTE1NjBcXHUxNTY0Y3k7XFx1NDQxNmN1dGU7XFx1NDE3OVxcdTAxMDBheVxcdTE1NDRcXHUxNTQ5cm9uO1xcdTQxN2Q7XFx1NDQxN290O1xcdTQxN2JcXHUwMWYyXFx1MTU1NFxcMFxcdTE1NWJvV2lkdFxceGU4XFx1MGFkOWE7XFx1NDM5NnI7XFx1NjEyOHBmO1xcdTYxMjRjcjtcXHVjMDAwXFx1ZDgzNVxcdWRjYjVcXHUwYmUxXFx1MTU4M1xcdTE1OGFcXHUxNTkwXFwwXFx1MTViMFxcdTE1YjZcXHUxNWJmXFwwXFwwXFwwXFwwXFx1MTVjNlxcdTE1ZGJcXHUxNWViXFx1MTY1ZlxcdTE2NmRcXDBcXHUxNjk1XFx1MTY5YlxcdTE2YjJcXHUxNmI5XFwwXFx1MTZiZWN1dGVcXHU4MDNiXFx4ZTFcXHU0MGUxcmV2ZTtcXHU0MTAzXFx1MDMwMDtFZGl1eVxcdTE1OWNcXHUxNTlkXFx1MTVhMVxcdTE1YTNcXHUxNWE4XFx1MTVhZFxcdTYyM2U7XFx1YzAwMFxcdTIyM2VcXHUwMzMzO1xcdTYyM2ZyY1xcdTgwM2JcXHhlMlxcdTQwZTJ0ZVxcdTgwYmJcXHhiNFxcdTAzMDY7XFx1NDQzMGxpZ1xcdTgwM2JcXHhlNlxcdTQwZTZcXHUwMTAwO3JcXHhiMlxcdTE1YmE7XFx1YzAwMFxcdWQ4MzVcXHVkZDFlcmF2ZVxcdTgwM2JcXHhlMFxcdTQwZTBcXHUwMTAwZXBcXHUxNWNhXFx1MTVkNlxcdTAxMDBmcFxcdTE1Y2ZcXHUxNWQ0c3ltO1xcdTYxMzVcXHhlOFxcdTE1ZDNoYTtcXHU0M2IxXFx1MDEwMGFwXFx1MTVkZmNcXHUwMTAwY2xcXHUxNWU0XFx1MTVlN3I7XFx1NDEwMWc7XFx1NmEzZlxcdTAyNjRcXHUxNWYwXFwwXFwwXFx1MTYwYVxcdTAyODA7YWRzdlxcdTE1ZmFcXHUxNWZiXFx1MTVmZlxcdTE2MDFcXHUxNjA3XFx1NjIyN25kO1xcdTZhNTU7XFx1NmE1Y2xvcGU7XFx1NmE1ODtcXHU2YTVhXFx1MDM4MDtlbG1yc3pcXHUxNjE4XFx1MTYxOVxcdTE2MWJcXHUxNjFlXFx1MTYzZlxcdTE2NGZcXHUxNjU5XFx1NjIyMDtcXHU2OWE0ZVxceGJiXFx1MTYxOXNkXFx1MDEwMDthXFx1MTYyNVxcdTE2MjZcXHU2MjIxXFx1MDQ2MVxcdTE2MzBcXHUxNjMyXFx1MTYzNFxcdTE2MzZcXHUxNjM4XFx1MTYzYVxcdTE2M2NcXHUxNjNlO1xcdTY5YTg7XFx1NjlhOTtcXHU2OWFhO1xcdTY5YWI7XFx1NjlhYztcXHU2OWFkO1xcdTY5YWU7XFx1NjlhZnRcXHUwMTAwO3ZcXHUxNjQ1XFx1MTY0NlxcdTYyMWZiXFx1MDEwMDtkXFx1MTY0Y1xcdTE2NGRcXHU2MmJlO1xcdTY5OWRcXHUwMTAwcHRcXHUxNjU0XFx1MTY1N2g7XFx1NjIyMlxceGJiXFx4YjlhcnI7XFx1NjM3Y1xcdTAxMDBncFxcdTE2NjNcXHUxNjY3b247XFx1NDEwNWY7XFx1YzAwMFxcdWQ4MzVcXHVkZDUyXFx1MDM4MDtFYWVpb3BcXHUxMmMxXFx1MTY3YlxcdTE2N2RcXHUxNjgyXFx1MTY4NFxcdTE2ODdcXHUxNjhhO1xcdTZhNzBjaXI7XFx1NmE2ZjtcXHU2MjRhZDtcXHU2MjRicztcXHU0MDI3cm94XFx1MDEwMDtlXFx1MTJjMVxcdTE2OTJcXHhmMVxcdTE2ODNpbmdcXHU4MDNiXFx4ZTVcXHU0MGU1XFx1MDE4MGN0eVxcdTE2YTFcXHUxNmE2XFx1MTZhOHI7XFx1YzAwMFxcdWQ4MzVcXHVkY2I2O1xcdTQwMmFtcFxcdTAxMDA7ZVxcdTEyYzFcXHUxNmFmXFx4ZjFcXHUwMjg4aWxkZVxcdTgwM2JcXHhlM1xcdTQwZTNtbFxcdTgwM2JcXHhlNFxcdTQwZTRcXHUwMTAwY2lcXHUxNmMyXFx1MTZjOG9uaW5cXHhmNFxcdTAyNzJudDtcXHU2YTExXFx1MDgwME5hYmNkZWZpa2xub3Byc3VcXHUxNmVkXFx1MTZmMVxcdTE3MzBcXHUxNzNjXFx1MTc0M1xcdTE3NDhcXHUxNzc4XFx1MTc3ZFxcdTE3ZTBcXHUxN2U2XFx1MTgzOVxcdTE4NTBcXHUxNzBkXFx1MTkzZFxcdTE5NDhcXHUxOTcwb3Q7XFx1NmFlZFxcdTAxMDBjclxcdTE2ZjZcXHUxNzFla1xcdTAyMDBjZXBzXFx1MTcwMFxcdTE3MDVcXHUxNzBkXFx1MTcxM29uZztcXHU2MjRjcHNpbG9uO1xcdTQzZjZyaW1lO1xcdTYwMzVpbVxcdTAxMDA7ZVxcdTE3MWFcXHUxNzFiXFx1NjIzZHE7XFx1NjJjZFxcdTAxNzZcXHUxNzIyXFx1MTcyNmVlO1xcdTYyYmRlZFxcdTAxMDA7Z1xcdTE3MmNcXHUxNzJkXFx1NjMwNWVcXHhiYlxcdTE3MmRya1xcdTAxMDA7dFxcdTEzNWNcXHUxNzM3YnJrO1xcdTYzYjZcXHUwMTAwb3lcXHUxNzAxXFx1MTc0MTtcXHU0NDMxcXVvO1xcdTYwMWVcXHUwMjgwY21wcnRcXHUxNzUzXFx1MTc1YlxcdTE3NjFcXHUxNzY0XFx1MTc2OGF1c1xcdTAxMDA7ZVxcdTAxMGFcXHUwMTA5cHR5djtcXHU2OWIwc1xceGU5XFx1MTcwY25vXFx4ZjVcXHUwMTEzXFx1MDE4MGFod1xcdTE3NmZcXHUxNzcxXFx1MTc3MztcXHU0M2IyO1xcdTYxMzZlZW47XFx1NjI2Y3I7XFx1YzAwMFxcdWQ4MzVcXHVkZDFmZ1xcdTAzODBjb3N0dXZ3XFx1MTc4ZFxcdTE3OWRcXHUxN2IzXFx1MTdjMVxcdTE3ZDVcXHUxN2RiXFx1MTdkZVxcdTAxODBhaXVcXHUxNzk0XFx1MTc5NlxcdTE3OWFcXHhmMFxcdTA3NjByYztcXHU2NWVmcFxceGJiXFx1MTM3MVxcdTAxODBkcHRcXHUxN2E0XFx1MTdhOFxcdTE3YWRvdDtcXHU2YTAwbHVzO1xcdTZhMDFpbWVzO1xcdTZhMDJcXHUwMjcxXFx1MTdiOVxcMFxcMFxcdTE3YmVjdXA7XFx1NmEwNmFyO1xcdTY2MDVyaWFuZ2xlXFx1MDEwMGR1XFx1MTdjZFxcdTE3ZDJvd247XFx1NjViZHA7XFx1NjViM3BsdXM7XFx1NmEwNGVcXHhlNVxcdTE0NDRcXHhlNVxcdTE0YWRhcm93O1xcdTY5MGRcXHUwMTgwYWtvXFx1MTdlZFxcdTE4MjZcXHUxODM1XFx1MDEwMGNuXFx1MTdmMlxcdTE4MjNrXFx1MDE4MGxzdFxcdTE3ZmFcXHUwNWFiXFx1MTgwMm96ZW5nZTtcXHU2OWVicmlhbmdsZVxcdTAyMDA7ZGxyXFx1MTgxMlxcdTE4MTNcXHUxODE4XFx1MTgxZFxcdTY1YjRvd247XFx1NjViZWVmdDtcXHU2NWMyaWdodDtcXHU2NWI4aztcXHU2NDIzXFx1MDFiMVxcdTE4MmJcXDBcXHUxODMzXFx1MDFiMlxcdTE4MmZcXDBcXHUxODMxO1xcdTY1OTI7XFx1NjU5MTQ7XFx1NjU5M2NrO1xcdTY1ODhcXHUwMTAwZW9cXHUxODNlXFx1MTg0ZFxcdTAxMDA7cVxcdTE4NDNcXHUxODQ2XFx1YzAwMD1cXHUyMGU1dWl2O1xcdWMwMDBcXHUyMjYxXFx1MjBlNXQ7XFx1NjMxMFxcdTAyMDBwdHd4XFx1MTg1OVxcdTE4NWVcXHUxODY3XFx1MTg2Y2Y7XFx1YzAwMFxcdWQ4MzVcXHVkZDUzXFx1MDEwMDt0XFx1MTNjYlxcdTE4NjNvbVxceGJiXFx1MTNjY3RpZTtcXHU2MmM4XFx1MDYwMERIVVZiZGhtcHR1dlxcdTE4ODVcXHUxODk2XFx1MThhYVxcdTE4YmJcXHUxOGQ3XFx1MThkYlxcdTE4ZWNcXHUxOGZmXFx1MTkwNVxcdTE5MGFcXHUxOTEwXFx1MTkyMVxcdTAyMDBMUmxyXFx1MTg4ZVxcdTE4OTBcXHUxODkyXFx1MTg5NDtcXHU2NTU3O1xcdTY1NTQ7XFx1NjU1NjtcXHU2NTUzXFx1MDI4MDtEVWR1XFx1MThhMVxcdTE4YTJcXHUxOGE0XFx1MThhNlxcdTE4YThcXHU2NTUwO1xcdTY1NjY7XFx1NjU2OTtcXHU2NTY0O1xcdTY1NjdcXHUwMjAwTFJsclxcdTE4YjNcXHUxOGI1XFx1MThiN1xcdTE4Yjk7XFx1NjU1ZDtcXHU2NTVhO1xcdTY1NWM7XFx1NjU1OVxcdTAzODA7SExSaGxyXFx1MThjYVxcdTE4Y2JcXHUxOGNkXFx1MThjZlxcdTE4ZDFcXHUxOGQzXFx1MThkNVxcdTY1NTE7XFx1NjU2YztcXHU2NTYzO1xcdTY1NjA7XFx1NjU2YjtcXHU2NTYyO1xcdTY1NWZveDtcXHU2OWM5XFx1MDIwMExSbHJcXHUxOGU0XFx1MThlNlxcdTE4ZThcXHUxOGVhO1xcdTY1NTU7XFx1NjU1MjtcXHU2NTEwO1xcdTY1MGNcXHUwMjgwO0RVZHVcXHUwNmJkXFx1MThmN1xcdTE4ZjlcXHUxOGZiXFx1MThmZDtcXHU2NTY1O1xcdTY1Njg7XFx1NjUyYztcXHU2NTM0aW51cztcXHU2MjlmbHVzO1xcdTYyOWVpbWVzO1xcdTYyYTBcXHUwMjAwTFJsclxcdTE5MTlcXHUxOTFiXFx1MTkxZFxcdTE5MWY7XFx1NjU1YjtcXHU2NTU4O1xcdTY1MTg7XFx1NjUxNFxcdTAzODA7SExSaGxyXFx1MTkzMFxcdTE5MzFcXHUxOTMzXFx1MTkzNVxcdTE5MzdcXHUxOTM5XFx1MTkzYlxcdTY1MDI7XFx1NjU2YTtcXHU2NTYxO1xcdTY1NWU7XFx1NjUzYztcXHU2NTI0O1xcdTY1MWNcXHUwMTAwZXZcXHUwMTIzXFx1MTk0MmJhclxcdTgwM2JcXHhhNlxcdTQwYTZcXHUwMjAwY2Vpb1xcdTE5NTFcXHUxOTU2XFx1MTk1YVxcdTE5NjByO1xcdWMwMDBcXHVkODM1XFx1ZGNiN21pO1xcdTYwNGZtXFx1MDEwMDtlXFx1MTcxYVxcdTE3MWNsXFx1MDE4MDtiaFxcdTE5NjhcXHUxOTY5XFx1MTk2YlxcdTQwNWM7XFx1NjljNXN1YjtcXHU2N2M4XFx1MDE2Y1xcdTE5NzRcXHUxOTdlbFxcdTAxMDA7ZVxcdTE5NzlcXHUxOTdhXFx1NjAyMnRcXHhiYlxcdTE5N2FwXFx1MDE4MDtFZVxcdTAxMmZcXHUxOTg1XFx1MTk4NztcXHU2YWFlXFx1MDEwMDtxXFx1MDZkY1xcdTA2ZGJcXHUwY2UxXFx1MTlhN1xcMFxcdTE5ZThcXHUxYTExXFx1MWExNVxcdTFhMzJcXDBcXHUxYTM3XFx1MWE1MFxcMFxcMFxcdTFhYjRcXDBcXDBcXHUxYWMxXFwwXFwwXFx1MWIyMVxcdTFiMmVcXHUxYjRkXFx1MWI1MlxcMFxcdTFiZmRcXDBcXHUxYzBjXFx1MDE4MGNwclxcdTE5YWRcXHUxOWIyXFx1MTlkZHV0ZTtcXHU0MTA3XFx1MDMwMDthYmNkc1xcdTE5YmZcXHUxOWMwXFx1MTljNFxcdTE5Y2FcXHUxOWQ1XFx1MTlkOVxcdTYyMjluZDtcXHU2YTQ0cmN1cDtcXHU2YTQ5XFx1MDEwMGF1XFx1MTljZlxcdTE5ZDJwO1xcdTZhNGJwO1xcdTZhNDdvdDtcXHU2YTQwO1xcdWMwMDBcXHUyMjI5XFx1ZmUwMFxcdTAxMDBlb1xcdTE5ZTJcXHUxOWU1dDtcXHU2MDQxXFx4ZWVcXHUwNjkzXFx1MDIwMGFlaXVcXHUxOWYwXFx1MTlmYlxcdTFhMDFcXHUxYTA1XFx1MDFmMFxcdTE5ZjVcXDBcXHUxOWY4cztcXHU2YTRkb247XFx1NDEwZGRpbFxcdTgwM2JcXHhlN1xcdTQwZTdyYztcXHU0MTA5cHNcXHUwMTAwO3NcXHUxYTBjXFx1MWEwZFxcdTZhNGNtO1xcdTZhNTBvdDtcXHU0MTBiXFx1MDE4MGRtblxcdTFhMWJcXHUxYTIwXFx1MWEyNmlsXFx1ODBiYlxceGI4XFx1MDFhZHB0eXY7XFx1NjliMnRcXHU4MTAwXFx4YTI7ZVxcdTFhMmRcXHUxYTJlXFx1NDBhMnJcXHhlNFxcdTAxYjJyO1xcdWMwMDBcXHVkODM1XFx1ZGQyMFxcdTAxODBjZWlcXHUxYTNkXFx1MWE0MFxcdTFhNGR5O1xcdTQ0NDdja1xcdTAxMDA7bVxcdTFhNDdcXHUxYTQ4XFx1NjcxM2Fya1xceGJiXFx1MWE0ODtcXHU0M2M3clxcdTAzODA7RWNlZm1zXFx1MWE1ZlxcdTFhNjBcXHUxYTYyXFx1MWE2YlxcdTFhYTRcXHUxYWFhXFx1MWFhZVxcdTY1Y2I7XFx1NjljM1xcdTAxODA7ZWxcXHUxYTY5XFx1MWE2YVxcdTFhNmRcXHU0MmM2cTtcXHU2MjU3ZVxcdTAyNjFcXHUxYTc0XFwwXFwwXFx1MWE4OHJyb3dcXHUwMTAwbHJcXHUxYTdjXFx1MWE4MWVmdDtcXHU2MWJhaWdodDtcXHU2MWJiXFx1MDI4MFJTYWNkXFx1MWE5MlxcdTFhOTRcXHUxYTk2XFx1MWE5YVxcdTFhOWZcXHhiYlxcdTBmNDc7XFx1NjRjOHN0O1xcdTYyOWJpcmM7XFx1NjI5YWFzaDtcXHU2MjlkbmludDtcXHU2YTEwaWQ7XFx1NmFlZmNpcjtcXHU2OWMydWJzXFx1MDEwMDt1XFx1MWFiYlxcdTFhYmNcXHU2NjYzaXRcXHhiYlxcdTFhYmNcXHUwMmVjXFx1MWFjN1xcdTFhZDRcXHUxYWZhXFwwXFx1MWIwYW9uXFx1MDEwMDtlXFx1MWFjZFxcdTFhY2VcXHU0MDNhXFx1MDEwMDtxXFx4YzdcXHhjNlxcdTAyNmRcXHUxYWQ5XFwwXFwwXFx1MWFlMmFcXHUwMTAwO3RcXHUxYWRlXFx1MWFkZlxcdTQwMmM7XFx1NDA0MFxcdTAxODA7ZmxcXHUxYWU4XFx1MWFlOVxcdTFhZWJcXHU2MjAxXFx4ZWVcXHUxMTYwZVxcdTAxMDBteFxcdTFhZjFcXHUxYWY2ZW50XFx4YmJcXHUxYWU5ZVxceGYzXFx1MDI0ZFxcdTAxZTdcXHUxYWZlXFwwXFx1MWIwN1xcdTAxMDA7ZFxcdTEyYmJcXHUxYjAyb3Q7XFx1NmE2ZG5cXHhmNFxcdTAyNDZcXHUwMTgwZnJ5XFx1MWIxMFxcdTFiMTRcXHUxYjE3O1xcdWMwMDBcXHVkODM1XFx1ZGQ1NG9cXHhlNFxcdTAyNTRcXHU4MTAwXFx4YTk7c1xcdTAxNTVcXHUxYjFkcjtcXHU2MTE3XFx1MDEwMGFvXFx1MWIyNVxcdTFiMjlycjtcXHU2MWI1c3M7XFx1NjcxN1xcdTAxMDBjdVxcdTFiMzJcXHUxYjM3cjtcXHVjMDAwXFx1ZDgzNVxcdWRjYjhcXHUwMTAwYnBcXHUxYjNjXFx1MWI0NFxcdTAxMDA7ZVxcdTFiNDFcXHUxYjQyXFx1NmFjZjtcXHU2YWQxXFx1MDEwMDtlXFx1MWI0OVxcdTFiNGFcXHU2YWQwO1xcdTZhZDJkb3Q7XFx1NjJlZlxcdTAzODBkZWxwcnZ3XFx1MWI2MFxcdTFiNmNcXHUxYjc3XFx1MWI4MlxcdTFiYWNcXHUxYmQ0XFx1MWJmOWFyclxcdTAxMDBsclxcdTFiNjhcXHUxYjZhO1xcdTY5Mzg7XFx1NjkzNVxcdTAyNzBcXHUxYjcyXFwwXFwwXFx1MWI3NXI7XFx1NjJkZWM7XFx1NjJkZmFyclxcdTAxMDA7cFxcdTFiN2ZcXHUxYjgwXFx1NjFiNjtcXHU2OTNkXFx1MDMwMDtiY2Rvc1xcdTFiOGZcXHUxYjkwXFx1MWI5NlxcdTFiYTFcXHUxYmE1XFx1MWJhOFxcdTYyMmFyY2FwO1xcdTZhNDhcXHUwMTAwYXVcXHUxYjliXFx1MWI5ZXA7XFx1NmE0NnA7XFx1NmE0YW90O1xcdTYyOGRyO1xcdTZhNDU7XFx1YzAwMFxcdTIyMmFcXHVmZTAwXFx1MDIwMGFscnZcXHUxYmI1XFx1MWJiZlxcdTFiZGVcXHUxYmUzcnJcXHUwMTAwO21cXHUxYmJjXFx1MWJiZFxcdTYxYjc7XFx1NjkzY3lcXHUwMTgwZXZ3XFx1MWJjN1xcdTFiZDRcXHUxYmQ4cVxcdTAyNzBcXHUxYmNlXFwwXFwwXFx1MWJkMnJlXFx4ZTNcXHUxYjczdVxceGUzXFx1MWI3NWVlO1xcdTYyY2VlZGdlO1xcdTYyY2ZlblxcdTgwM2JcXHhhNFxcdTQwYTRlYXJyb3dcXHUwMTAwbHJcXHUxYmVlXFx1MWJmM2VmdFxceGJiXFx1MWI4MGlnaHRcXHhiYlxcdTFiYmRlXFx4ZTRcXHUxYmRkXFx1MDEwMGNpXFx1MWMwMVxcdTFjMDdvbmluXFx4ZjRcXHUwMWY3bnQ7XFx1NjIzMWxjdHk7XFx1NjMyZFxcdTA5ODBBSGFiY2RlZmhpamxvcnN0dXd6XFx1MWMzOFxcdTFjM2JcXHUxYzNmXFx1MWM1ZFxcdTFjNjlcXHUxYzc1XFx1MWM4YVxcdTFjOWVcXHUxY2FjXFx1MWNiN1xcdTFjZmJcXHUxY2ZmXFx1MWQwZFxcdTFkN2JcXHUxZDkxXFx1MWRhYlxcdTFkYmJcXHUxZGM2XFx1MWRjZHJcXHhmMlxcdTAzODFhcjtcXHU2OTY1XFx1MDIwMGdscnNcXHUxYzQ4XFx1MWM0ZFxcdTFjNTJcXHUxYzU0Z2VyO1xcdTYwMjBldGg7XFx1NjEzOFxceGYyXFx1MTEzM2hcXHUwMTAwO3ZcXHUxYzVhXFx1MWM1YlxcdTYwMTBcXHhiYlxcdTA5MGFcXHUwMTZiXFx1MWM2MVxcdTFjNjdhcm93O1xcdTY5MGZhXFx4ZTNcXHUwMzE1XFx1MDEwMGF5XFx1MWM2ZVxcdTFjNzNyb247XFx1NDEwZjtcXHU0NDM0XFx1MDE4MDthb1xcdTAzMzJcXHUxYzdjXFx1MWM4NFxcdTAxMDBnclxcdTAyYmZcXHUxYzgxcjtcXHU2MWNhdHNlcTtcXHU2YTc3XFx1MDE4MGdsbVxcdTFjOTFcXHUxYzk0XFx1MWM5OFxcdTgwM2JcXHhiMFxcdTQwYjB0YTtcXHU0M2I0cHR5djtcXHU2OWIxXFx1MDEwMGlyXFx1MWNhM1xcdTFjYThzaHQ7XFx1Njk3ZjtcXHVjMDAwXFx1ZDgzNVxcdWRkMjFhclxcdTAxMDBsclxcdTFjYjNcXHUxY2I1XFx4YmJcXHUwOGRjXFx4YmJcXHUxMDFlXFx1MDI4MGFlZ3N2XFx1MWNjMlxcdTAzNzhcXHUxY2Q2XFx1MWNkY1xcdTFjZTBtXFx1MDE4MDtvc1xcdTAzMjZcXHUxY2NhXFx1MWNkNG5kXFx1MDEwMDtzXFx1MDMyNlxcdTFjZDF1aXQ7XFx1NjY2NmFtbWE7XFx1NDNkZGluO1xcdTYyZjJcXHUwMTgwO2lvXFx1MWNlN1xcdTFjZThcXHUxY2Y4XFx1NDBmN2RlXFx1ODEwMFxceGY3O29cXHUxY2U3XFx1MWNmMG50aW1lcztcXHU2MmM3blxceGY4XFx1MWNmN2N5O1xcdTQ0NTJjXFx1MDI2ZlxcdTFkMDZcXDBcXDBcXHUxZDBhcm47XFx1NjMxZW9wO1xcdTYzMGRcXHUwMjgwbHB0dXdcXHUxZDE4XFx1MWQxZFxcdTFkMjJcXHUxZDQ5XFx1MWQ1NWxhcjtcXHU0MDI0ZjtcXHVjMDAwXFx1ZDgzNVxcdWRkNTVcXHUwMjgwO2VtcHNcXHUwMzBiXFx1MWQyZFxcdTFkMzdcXHUxZDNkXFx1MWQ0MnFcXHUwMTAwO2RcXHUwMzUyXFx1MWQzM290O1xcdTYyNTFpbnVzO1xcdTYyMzhsdXM7XFx1NjIxNHF1YXJlO1xcdTYyYTFibGViYXJ3ZWRnXFx4ZTVcXHhmYW5cXHUwMTgwYWRoXFx1MTEyZVxcdTFkNWRcXHUxZDY3b3duYXJyb3dcXHhmM1xcdTFjODNhcnBvb25cXHUwMTAwbHJcXHUxZDcyXFx1MWQ3NmVmXFx4ZjRcXHUxY2I0aWdoXFx4ZjRcXHUxY2I2XFx1MDE2MlxcdTFkN2ZcXHUxZDg1a2Fyb1xceGY3XFx1MGY0MlxcdTAyNmZcXHUxZDhhXFwwXFwwXFx1MWQ4ZXJuO1xcdTYzMWZvcDtcXHU2MzBjXFx1MDE4MGNvdFxcdTFkOThcXHUxZGEzXFx1MWRhNlxcdTAxMDByeVxcdTFkOWRcXHUxZGExO1xcdWMwMDBcXHVkODM1XFx1ZGNiOTtcXHU0NDU1bDtcXHU2OWY2cm9rO1xcdTQxMTFcXHUwMTAwZHJcXHUxZGIwXFx1MWRiNG90O1xcdTYyZjFpXFx1MDEwMDtmXFx1MWRiYVxcdTE4MTZcXHU2NWJmXFx1MDEwMGFoXFx1MWRjMFxcdTFkYzNyXFx4ZjJcXHUwNDI5YVxceGYyXFx1MGZhNmFuZ2xlO1xcdTY5YTZcXHUwMTAwY2lcXHUxZGQyXFx1MWRkNXk7XFx1NDQ1ZmdyYXJyO1xcdTY3ZmZcXHUwOTAwRGFjZGVmZ2xtbm9wcXJzdHV4XFx1MWUwMVxcdTFlMDlcXHUxZTE5XFx1MWUzOFxcdTA1NzhcXHUxZTNjXFx1MWU0OVxcdTFlNjFcXHUxZTdlXFx1MWVhNVxcdTFlYWZcXHUxZWJkXFx1MWVlMVxcdTFmMmFcXHUxZjM3XFx1MWY0NFxcdTFmNGVcXHUxZjVhXFx1MDEwMERvXFx1MWUwNlxcdTFkMzRvXFx4ZjRcXHUxYzg5XFx1MDEwMGNzXFx1MWUwZVxcdTFlMTR1dGVcXHU4MDNiXFx4ZTlcXHU0MGU5dGVyO1xcdTZhNmVcXHUwMjAwYWlveVxcdTFlMjJcXHUxZTI3XFx1MWUzMVxcdTFlMzZyb247XFx1NDExYnJcXHUwMTAwO2NcXHUxZTJkXFx1MWUyZVxcdTYyNTZcXHU4MDNiXFx4ZWFcXHU0MGVhbG9uO1xcdTYyNTU7XFx1NDQ0ZG90O1xcdTQxMTdcXHUwMTAwRHJcXHUxZTQxXFx1MWU0NW90O1xcdTYyNTI7XFx1YzAwMFxcdWQ4MzVcXHVkZDIyXFx1MDE4MDtyc1xcdTFlNTBcXHUxZTUxXFx1MWU1N1xcdTZhOWFhdmVcXHU4MDNiXFx4ZThcXHU0MGU4XFx1MDEwMDtkXFx1MWU1Y1xcdTFlNWRcXHU2YTk2b3Q7XFx1NmE5OFxcdTAyMDA7aWxzXFx1MWU2YVxcdTFlNmJcXHUxZTcyXFx1MWU3NFxcdTZhOTludGVycztcXHU2M2U3O1xcdTYxMTNcXHUwMTAwO2RcXHUxZTc5XFx1MWU3YVxcdTZhOTVvdDtcXHU2YTk3XFx1MDE4MGFwc1xcdTFlODVcXHUxZTg5XFx1MWU5N2NyO1xcdTQxMTN0eVxcdTAxODA7c3ZcXHUxZTkyXFx1MWU5M1xcdTFlOTVcXHU2MjA1ZXRcXHhiYlxcdTFlOTNwXFx1MDEwMDE7XFx1MWU5ZFxcdTFlYTRcXHUwMTMzXFx1MWVhMVxcdTFlYTM7XFx1NjAwNDtcXHU2MDA1XFx1NjAwM1xcdTAxMDBnc1xcdTFlYWFcXHUxZWFjO1xcdTQxNGJwO1xcdTYwMDJcXHUwMTAwZ3BcXHUxZWI0XFx1MWViOG9uO1xcdTQxMTlmO1xcdWMwMDBcXHVkODM1XFx1ZGQ1NlxcdTAxODBhbHNcXHUxZWM0XFx1MWVjZVxcdTFlZDJyXFx1MDEwMDtzXFx1MWVjYVxcdTFlY2JcXHU2MmQ1bDtcXHU2OWUzdXM7XFx1NmE3MWlcXHUwMTgwO2x2XFx1MWVkYVxcdTFlZGJcXHUxZWRmXFx1NDNiNW9uXFx4YmJcXHUxZWRiO1xcdTQzZjVcXHUwMjAwY3N1dlxcdTFlZWFcXHUxZWYzXFx1MWYwYlxcdTFmMjNcXHUwMTAwaW9cXHUxZWVmXFx1MWUzMXJjXFx4YmJcXHUxZTJlXFx1MDI2OVxcdTFlZjlcXDBcXDBcXHUxZWZiXFx4ZWRcXHUwNTQ4YW50XFx1MDEwMGdsXFx1MWYwMlxcdTFmMDZ0clxceGJiXFx1MWU1ZGVzc1xceGJiXFx1MWU3YVxcdTAxODBhZWlcXHUxZjEyXFx1MWYxNlxcdTFmMWFscztcXHU0MDNkc3Q7XFx1NjI1ZnZcXHUwMTAwO0RcXHUwMjM1XFx1MWYyMEQ7XFx1NmE3OHBhcnNsO1xcdTY5ZTVcXHUwMTAwRGFcXHUxZjJmXFx1MWYzM290O1xcdTYyNTNycjtcXHU2OTcxXFx1MDE4MGNkaVxcdTFmM2VcXHUxZjQxXFx1MWVmOHI7XFx1NjEyZm9cXHhmNFxcdTAzNTJcXHUwMTAwYWhcXHUxZjQ5XFx1MWY0YjtcXHU0M2I3XFx1ODAzYlxceGYwXFx1NDBmMFxcdTAxMDBtclxcdTFmNTNcXHUxZjU3bFxcdTgwM2JcXHhlYlxcdTQwZWJvO1xcdTYwYWNcXHUwMTgwY2lwXFx1MWY2MVxcdTFmNjRcXHUxZjY3bDtcXHU0MDIxc1xceGY0XFx1MDU2ZVxcdTAxMDBlb1xcdTFmNmNcXHUxZjc0Y3RhdGlvXFx4ZWVcXHUwNTU5bmVudGlhbFxceGU1XFx1MDU3OVxcdTA5ZTFcXHUxZjkyXFwwXFx1MWY5ZVxcMFxcdTFmYTFcXHUxZmE3XFwwXFwwXFx1MWZjNlxcdTFmY2NcXDBcXHUxZmQzXFwwXFx1MWZlNlxcdTFmZWFcXHUyMDAwXFwwXFx1MjAwOFxcdTIwNWFsbGluZ2RvdHNlXFx4ZjFcXHUxZTQ0eTtcXHU0NDQ0bWFsZTtcXHU2NjQwXFx1MDE4MGlsclxcdTFmYWRcXHUxZmIzXFx1MWZjMWxpZztcXHU4MDAwXFx1ZmIwM1xcdTAyNjlcXHUxZmI5XFwwXFwwXFx1MWZiZGc7XFx1ODAwMFxcdWZiMDBpZztcXHU4MDAwXFx1ZmIwNDtcXHVjMDAwXFx1ZDgzNVxcdWRkMjNsaWc7XFx1ODAwMFxcdWZiMDFsaWc7XFx1YzAwMGZqXFx1MDE4MGFsdFxcdTFmZDlcXHUxZmRjXFx1MWZlMXQ7XFx1NjY2ZGlnO1xcdTgwMDBcXHVmYjAybnM7XFx1NjViMW9mO1xcdTQxOTJcXHUwMWYwXFx1MWZlZVxcMFxcdTFmZjNmO1xcdWMwMDBcXHVkODM1XFx1ZGQ1N1xcdTAxMDBha1xcdTA1YmZcXHUxZmY3XFx1MDEwMDt2XFx1MWZmY1xcdTFmZmRcXHU2MmQ0O1xcdTZhZDlhcnRpbnQ7XFx1NmEwZFxcdTAxMDBhb1xcdTIwMGNcXHUyMDU1XFx1MDEwMGNzXFx1MjAxMVxcdTIwNTJcXHUwM2IxXFx1MjAxYVxcdTIwMzBcXHUyMDM4XFx1MjA0NVxcdTIwNDhcXDBcXHUyMDUwXFx1MDNiMlxcdTIwMjJcXHUyMDI1XFx1MjAyN1xcdTIwMmFcXHUyMDJjXFwwXFx1MjAyZVxcdTgwM2JcXHhiZFxcdTQwYmQ7XFx1NjE1M1xcdTgwM2JcXHhiY1xcdTQwYmM7XFx1NjE1NTtcXHU2MTU5O1xcdTYxNWJcXHUwMWIzXFx1MjAzNFxcMFxcdTIwMzY7XFx1NjE1NDtcXHU2MTU2XFx1MDJiNFxcdTIwM2VcXHUyMDQxXFwwXFwwXFx1MjA0M1xcdTgwM2JcXHhiZVxcdTQwYmU7XFx1NjE1NztcXHU2MTVjNTtcXHU2MTU4XFx1MDFiNlxcdTIwNGNcXDBcXHUyMDRlO1xcdTYxNWE7XFx1NjE1ZDg7XFx1NjE1ZWw7XFx1NjA0NHduO1xcdTYzMjJjcjtcXHVjMDAwXFx1ZDgzNVxcdWRjYmJcXHUwODgwRWFiY2RlZmdpamxub3JzdHZcXHUyMDgyXFx1MjA4OVxcdTIwOWZcXHUyMGE1XFx1MjBiMFxcdTIwYjRcXHUyMGYwXFx1MjBmNVxcdTIwZmFcXHUyMGZmXFx1MjEwM1xcdTIxMTJcXHUyMTM4XFx1MDMxN1xcdTIxM2VcXHUyMTUyXFx1MjE5ZVxcdTAxMDA7bFxcdTA2NGRcXHUyMDg3O1xcdTZhOGNcXHUwMTgwY21wXFx1MjA5MFxcdTIwOTVcXHUyMDlkdXRlO1xcdTQxZjVtYVxcdTAxMDA7ZFxcdTIwOWNcXHUxY2RhXFx1NDNiMztcXHU2YTg2cmV2ZTtcXHU0MTFmXFx1MDEwMGl5XFx1MjBhYVxcdTIwYWVyYztcXHU0MTFkO1xcdTQ0MzNvdDtcXHU0MTIxXFx1MDIwMDtscXNcXHUwNjNlXFx1MDY0MlxcdTIwYmRcXHUyMGM5XFx1MDE4MDtxc1xcdTA2M2VcXHUwNjRjXFx1MjBjNGxhblxceGY0XFx1MDY2NVxcdTAyMDA7Y2RsXFx1MDY2NVxcdTIwZDJcXHUyMGQ1XFx1MjBlNWM7XFx1NmFhOW90XFx1MDEwMDtvXFx1MjBkY1xcdTIwZGRcXHU2YTgwXFx1MDEwMDtsXFx1MjBlMlxcdTIwZTNcXHU2YTgyO1xcdTZhODRcXHUwMTAwO2VcXHUyMGVhXFx1MjBlZFxcdWMwMDBcXHUyMmRiXFx1ZmUwMHM7XFx1NmE5NHI7XFx1YzAwMFxcdWQ4MzVcXHVkZDI0XFx1MDEwMDtnXFx1MDY3M1xcdTA2MWJtZWw7XFx1NjEzN2N5O1xcdTQ0NTNcXHUwMjAwO0VhalxcdTA2NWFcXHUyMTBjXFx1MjEwZVxcdTIxMTA7XFx1NmE5MjtcXHU2YWE1O1xcdTZhYTRcXHUwMjAwRWFlc1xcdTIxMWJcXHUyMTFkXFx1MjEyOVxcdTIxMzQ7XFx1NjI2OXBcXHUwMTAwO3BcXHUyMTIzXFx1MjEyNFxcdTZhOGFyb3hcXHhiYlxcdTIxMjRcXHUwMTAwO3FcXHUyMTJlXFx1MjEyZlxcdTZhODhcXHUwMTAwO3FcXHUyMTJlXFx1MjExYmltO1xcdTYyZTdwZjtcXHVjMDAwXFx1ZDgzNVxcdWRkNThcXHUwMTAwY2lcXHUyMTQzXFx1MjE0NnI7XFx1NjEwYW1cXHUwMTgwO2VsXFx1MDY2YlxcdTIxNGVcXHUyMTUwO1xcdTZhOGU7XFx1NmE5MFxcdTgzMDA+O2NkbHFyXFx1MDVlZVxcdTIxNjBcXHUyMTZhXFx1MjE2ZVxcdTIxNzNcXHUyMTc5XFx1MDEwMGNpXFx1MjE2NVxcdTIxNjc7XFx1NmFhN3I7XFx1NmE3YW90O1xcdTYyZDdQYXI7XFx1Njk5NXVlc3Q7XFx1NmE3Y1xcdTAyODBhZGVsc1xcdTIxODRcXHUyMTZhXFx1MjE5MFxcdTA2NTZcXHUyMTliXFx1MDFmMFxcdTIxODlcXDBcXHUyMThlcHJvXFx4ZjhcXHUyMDllcjtcXHU2OTc4cVxcdTAxMDBscVxcdTA2M2ZcXHUyMTk2bGVzXFx4ZjNcXHUyMDg4aVxceGVkXFx1MDY2YlxcdTAxMDBlblxcdTIxYTNcXHUyMWFkcnRuZXFxO1xcdWMwMDBcXHUyMjY5XFx1ZmUwMFxceGM1XFx1MjFhYVxcdTA1MDBBYWJjZWZrb3N5XFx1MjFjNFxcdTIxYzdcXHUyMWYxXFx1MjFmNVxcdTIxZmFcXHUyMjE4XFx1MjIxZFxcdTIyMmZcXHUyMjY4XFx1MjI3ZHJcXHhmMlxcdTAzYTBcXHUwMjAwaWxtclxcdTIxZDBcXHUyMWQ0XFx1MjFkN1xcdTIxZGJyc1xceGYwXFx1MTQ4NGZcXHhiYlxcdTIwMjRpbFxceGY0XFx1MDZhOVxcdTAxMDBkclxcdTIxZTBcXHUyMWU0Y3k7XFx1NDQ0YVxcdTAxODA7Y3dcXHUwOGY0XFx1MjFlYlxcdTIxZWZpcjtcXHU2OTQ4O1xcdTYxYWRhcjtcXHU2MTBmaXJjO1xcdTQxMjVcXHUwMTgwYWxyXFx1MjIwMVxcdTIyMGVcXHUyMjEzcnRzXFx1MDEwMDt1XFx1MjIwOVxcdTIyMGFcXHU2NjY1aXRcXHhiYlxcdTIyMGFsaXA7XFx1NjAyNmNvbjtcXHU2MmI5cjtcXHVjMDAwXFx1ZDgzNVxcdWRkMjVzXFx1MDEwMGV3XFx1MjIyM1xcdTIyMjlhcm93O1xcdTY5MjVhcm93O1xcdTY5MjZcXHUwMjgwYW1vcHJcXHUyMjNhXFx1MjIzZVxcdTIyNDNcXHUyMjVlXFx1MjI2M3JyO1xcdTYxZmZ0aHQ7XFx1NjIzYmtcXHUwMTAwbHJcXHUyMjQ5XFx1MjI1M2VmdGFycm93O1xcdTYxYTlpZ2h0YXJyb3c7XFx1NjFhYWY7XFx1YzAwMFxcdWQ4MzVcXHVkZDU5YmFyO1xcdTYwMTVcXHUwMTgwY2x0XFx1MjI2ZlxcdTIyNzRcXHUyMjc4cjtcXHVjMDAwXFx1ZDgzNVxcdWRjYmRhc1xceGU4XFx1MjFmNHJvaztcXHU0MTI3XFx1MDEwMGJwXFx1MjI4MlxcdTIyODd1bGw7XFx1NjA0M2hlblxceGJiXFx1MWM1YlxcdTBhZTFcXHUyMmEzXFwwXFx1MjJhYVxcMFxcdTIyYjhcXHUyMmM1XFx1MjJjZVxcMFxcdTIyZDVcXHUyMmYzXFwwXFwwXFx1MjJmOFxcdTIzMjJcXHUyMzY3XFx1MjM2MlxcdTIzN2ZcXDBcXHUyMzg2XFx1MjNhYVxcdTIzYjRjdXRlXFx1ODAzYlxceGVkXFx1NDBlZFxcdTAxODA7aXlcXHUwNzcxXFx1MjJiMFxcdTIyYjVyY1xcdTgwM2JcXHhlZVxcdTQwZWU7XFx1NDQzOFxcdTAxMDBjeFxcdTIyYmNcXHUyMmJmeTtcXHU0NDM1Y2xcXHU4MDNiXFx4YTFcXHU0MGExXFx1MDEwMGZyXFx1MDM5ZlxcdTIyYzk7XFx1YzAwMFxcdWQ4MzVcXHVkZDI2cmF2ZVxcdTgwM2JcXHhlY1xcdTQwZWNcXHUwMjAwO2lub1xcdTA3M2VcXHUyMmRkXFx1MjJlOVxcdTIyZWVcXHUwMTAwaW5cXHUyMmUyXFx1MjJlNm50O1xcdTZhMGN0O1xcdTYyMmRmaW47XFx1NjlkY3RhO1xcdTYxMjlsaWc7XFx1NDEzM1xcdTAxODBhb3BcXHUyMmZlXFx1MjMxYVxcdTIzMWRcXHUwMTgwY2d0XFx1MjMwNVxcdTIzMDhcXHUyMzE3cjtcXHU0MTJiXFx1MDE4MGVscFxcdTA3MWZcXHUyMzBmXFx1MjMxM2luXFx4ZTVcXHUwNzhlYXJcXHhmNFxcdTA3MjBoO1xcdTQxMzFmO1xcdTYyYjdlZDtcXHU0MWI1XFx1MDI4MDtjZm90XFx1MDRmNFxcdTIzMmNcXHUyMzMxXFx1MjMzZFxcdTIzNDFhcmU7XFx1NjEwNWluXFx1MDEwMDt0XFx1MjMzOFxcdTIzMzlcXHU2MjFlaWU7XFx1NjlkZGRvXFx4ZjRcXHUyMzE5XFx1MDI4MDtjZWxwXFx1MDc1N1xcdTIzNGNcXHUyMzUwXFx1MjM1YlxcdTIzNjFhbDtcXHU2MmJhXFx1MDEwMGdyXFx1MjM1NVxcdTIzNTllclxceGYzXFx1MTU2M1xceGUzXFx1MjM0ZGFyaGs7XFx1NmExN3JvZDtcXHU2YTNjXFx1MDIwMGNncHRcXHUyMzZmXFx1MjM3MlxcdTIzNzZcXHUyMzdieTtcXHU0NDUxb247XFx1NDEyZmY7XFx1YzAwMFxcdWQ4MzVcXHVkZDVhYTtcXHU0M2I5dWVzdFxcdTgwM2JcXHhiZlxcdTQwYmZcXHUwMTAwY2lcXHUyMzhhXFx1MjM4ZnI7XFx1YzAwMFxcdWQ4MzVcXHVkY2JlblxcdTAyODA7RWRzdlxcdTA0ZjRcXHUyMzliXFx1MjM5ZFxcdTIzYTFcXHUwNGYzO1xcdTYyZjlvdDtcXHU2MmY1XFx1MDEwMDt2XFx1MjNhNlxcdTIzYTdcXHU2MmY0O1xcdTYyZjNcXHUwMTAwO2lcXHUwNzc3XFx1MjNhZWxkZTtcXHU0MTI5XFx1MDFlYlxcdTIzYjhcXDBcXHUyM2JjY3k7XFx1NDQ1NmxcXHU4MDNiXFx4ZWZcXHU0MGVmXFx1MDMwMGNmbW9zdVxcdTIzY2NcXHUyM2Q3XFx1MjNkY1xcdTIzZTFcXHUyM2U3XFx1MjNmNVxcdTAxMDBpeVxcdTIzZDFcXHUyM2Q1cmM7XFx1NDEzNTtcXHU0NDM5cjtcXHVjMDAwXFx1ZDgzNVxcdWRkMjdhdGg7XFx1NDIzN3BmO1xcdWMwMDBcXHVkODM1XFx1ZGQ1YlxcdTAxZTNcXHUyM2VjXFwwXFx1MjNmMXI7XFx1YzAwMFxcdWQ4MzVcXHVkY2JmcmN5O1xcdTQ0NThrY3k7XFx1NDQ1NFxcdTA0MDBhY2ZnaGpvc1xcdTI0MGJcXHUyNDE2XFx1MjQyMlxcdTI0MjdcXHUyNDJkXFx1MjQzMVxcdTI0MzVcXHUyNDNicHBhXFx1MDEwMDt2XFx1MjQxM1xcdTI0MTRcXHU0M2JhO1xcdTQzZjBcXHUwMTAwZXlcXHUyNDFiXFx1MjQyMGRpbDtcXHU0MTM3O1xcdTQ0M2FyO1xcdWMwMDBcXHVkODM1XFx1ZGQyOHJlZW47XFx1NDEzOGN5O1xcdTQ0NDVjeTtcXHU0NDVjcGY7XFx1YzAwMFxcdWQ4MzVcXHVkZDVjY3I7XFx1YzAwMFxcdWQ4MzVcXHVkY2MwXFx1MGI4MEFCRUhhYmNkZWZnaGpsbW5vcHJzdHV2XFx1MjQ3MFxcdTI0ODFcXHUyNDg2XFx1MjQ4ZFxcdTI0OTFcXHUyNTBlXFx1MjUzZFxcdTI1NWFcXHUyNTgwXFx1MjY0ZVxcdTI2NWVcXHUyNjY1XFx1MjY3OVxcdTI2N2RcXHUyNjlhXFx1MjZiMlxcdTI2ZDhcXHUyNzVkXFx1Mjc2OFxcdTI3OGJcXHUyN2MwXFx1MjgwMVxcdTI4MTJcXHUwMTgwYXJ0XFx1MjQ3N1xcdTI0N2FcXHUyNDdjclxceGYyXFx1MDljNlxceGYyXFx1MDM5NWFpbDtcXHU2OTFiYXJyO1xcdTY5MGVcXHUwMTAwO2dcXHUwOTk0XFx1MjQ4YjtcXHU2YThiYXI7XFx1Njk2MlxcdTA5NjNcXHUyNGE1XFwwXFx1MjRhYVxcMFxcdTI0YjFcXDBcXDBcXDBcXDBcXDBcXHUyNGI1XFx1MjRiYVxcMFxcdTI0YzZcXHUyNGM4XFx1MjRjZFxcMFxcdTI0Zjl1dGU7XFx1NDEzYW1wdHl2O1xcdTY5YjRyYVxceGVlXFx1MDg0Y2JkYTtcXHU0M2JiZ1xcdTAxODA7ZGxcXHUwODhlXFx1MjRjMVxcdTI0YzM7XFx1Njk5MVxceGU1XFx1MDg4ZTtcXHU2YTg1dW9cXHU4MDNiXFx4YWJcXHU0MGFiclxcdTA0MDA7YmZobHBzdFxcdTA4OTlcXHUyNGRlXFx1MjRlNlxcdTI0ZTlcXHUyNGViXFx1MjRlZVxcdTI0ZjFcXHUyNGY1XFx1MDEwMDtmXFx1MDg5ZFxcdTI0ZTNzO1xcdTY5MWZzO1xcdTY5MWRcXHhlYlxcdTIyNTJwO1xcdTYxYWJsO1xcdTY5MzlpbTtcXHU2OTczbDtcXHU2MWEyXFx1MDE4MDthZVxcdTI0ZmZcXHUyNTAwXFx1MjUwNFxcdTZhYWJpbDtcXHU2OTE5XFx1MDEwMDtzXFx1MjUwOVxcdTI1MGFcXHU2YWFkO1xcdWMwMDBcXHUyYWFkXFx1ZmUwMFxcdTAxODBhYnJcXHUyNTE1XFx1MjUxOVxcdTI1MWRycjtcXHU2OTBjcms7XFx1Njc3MlxcdTAxMDBha1xcdTI1MjJcXHUyNTJjY1xcdTAxMDBla1xcdTI1MjhcXHUyNTJhO1xcdTQwN2I7XFx1NDA1YlxcdTAxMDBlc1xcdTI1MzFcXHUyNTMzO1xcdTY5OGJsXFx1MDEwMGR1XFx1MjUzOVxcdTI1M2I7XFx1Njk4ZjtcXHU2OThkXFx1MDIwMGFldXlcXHUyNTQ2XFx1MjU0YlxcdTI1NTZcXHUyNTU4cm9uO1xcdTQxM2VcXHUwMTAwZGlcXHUyNTUwXFx1MjU1NGlsO1xcdTQxM2NcXHhlY1xcdTA4YjBcXHhlMlxcdTI1Mjk7XFx1NDQzYlxcdTAyMDBjcXJzXFx1MjU2M1xcdTI1NjZcXHUyNTZkXFx1MjU3ZGE7XFx1NjkzNnVvXFx1MDEwMDtyXFx1MGUxOVxcdTE3NDZcXHUwMTAwZHVcXHUyNTcyXFx1MjU3N2hhcjtcXHU2OTY3c2hhcjtcXHU2OTRiaDtcXHU2MWIyXFx1MDI4MDtmZ3FzXFx1MjU4YlxcdTI1OGNcXHUwOTg5XFx1MjVmM1xcdTI1ZmZcXHU2MjY0dFxcdTAyODBhaGxydFxcdTI1OThcXHUyNWE0XFx1MjViN1xcdTI1YzJcXHUyNWU4cnJvd1xcdTAxMDA7dFxcdTA4OTlcXHUyNWExYVxceGU5XFx1MjRmNmFycG9vblxcdTAxMDBkdVxcdTI1YWZcXHUyNWI0b3duXFx4YmJcXHUwNDVhcFxceGJiXFx1MDk2NmVmdGFycm93cztcXHU2MWM3aWdodFxcdTAxODBhaHNcXHUyNWNkXFx1MjVkNlxcdTI1ZGVycm93XFx1MDEwMDtzXFx1MDhmNFxcdTA4YTdhcnBvb25cXHhmM1xcdTBmOThxdWlnYXJyb1xceGY3XFx1MjFmMGhyZWV0aW1lcztcXHU2MmNiXFx1MDE4MDtxc1xcdTI1OGJcXHUwOTkzXFx1MjVmYWxhblxceGY0XFx1MDlhY1xcdTAyODA7Y2Rnc1xcdTA5YWNcXHUyNjBhXFx1MjYwZFxcdTI2MWRcXHUyNjI4YztcXHU2YWE4b3RcXHUwMTAwO29cXHUyNjE0XFx1MjYxNVxcdTZhN2ZcXHUwMTAwO3JcXHUyNjFhXFx1MjYxYlxcdTZhODE7XFx1NmE4M1xcdTAxMDA7ZVxcdTI2MjJcXHUyNjI1XFx1YzAwMFxcdTIyZGFcXHVmZTAwcztcXHU2YTkzXFx1MDI4MGFkZWdzXFx1MjYzM1xcdTI2MzlcXHUyNjNkXFx1MjY0OVxcdTI2NGJwcHJvXFx4ZjhcXHUyNGM2b3Q7XFx1NjJkNnFcXHUwMTAwZ3FcXHUyNjQzXFx1MjY0NVxceGY0XFx1MDk4OWd0XFx4ZjJcXHUyNDhjXFx4ZjRcXHUwOTliaVxceGVkXFx1MDliMlxcdTAxODBpbHJcXHUyNjU1XFx1MDhlMVxcdTI2NWFzaHQ7XFx1Njk3YztcXHVjMDAwXFx1ZDgzNVxcdWRkMjlcXHUwMTAwO0VcXHUwOTljXFx1MjY2MztcXHU2YTkxXFx1MDE2MVxcdTI2NjlcXHUyNjc2clxcdTAxMDBkdVxcdTI1YjJcXHUyNjZlXFx1MDEwMDtsXFx1MDk2NVxcdTI2NzM7XFx1Njk2YWxrO1xcdTY1ODRjeTtcXHU0NDU5XFx1MDI4MDthY2h0XFx1MGE0OFxcdTI2ODhcXHUyNjhiXFx1MjY5MVxcdTI2OTZyXFx4ZjJcXHUyNWMxb3JuZVxceGYyXFx1MWQwOGFyZDtcXHU2OTZicmk7XFx1NjVmYVxcdTAxMDBpb1xcdTI2OWZcXHUyNmE0ZG90O1xcdTQxNDB1c3RcXHUwMTAwO2FcXHUyNmFjXFx1MjZhZFxcdTYzYjBjaGVcXHhiYlxcdTI2YWRcXHUwMjAwRWFlc1xcdTI2YmJcXHUyNmJkXFx1MjZjOVxcdTI2ZDQ7XFx1NjI2OHBcXHUwMTAwO3BcXHUyNmMzXFx1MjZjNFxcdTZhODlyb3hcXHhiYlxcdTI2YzRcXHUwMTAwO3FcXHUyNmNlXFx1MjZjZlxcdTZhODdcXHUwMTAwO3FcXHUyNmNlXFx1MjZiYmltO1xcdTYyZTZcXHUwNDAwYWJub3B0d3pcXHUyNmU5XFx1MjZmNFxcdTI2ZjdcXHUyNzFhXFx1MjcyZlxcdTI3NDFcXHUyNzQ3XFx1Mjc1MFxcdTAxMDBuclxcdTI2ZWVcXHUyNmYxZztcXHU2N2VjcjtcXHU2MWZkclxceGViXFx1MDhjMWdcXHUwMTgwbG1yXFx1MjZmZlxcdTI3MGRcXHUyNzE0ZWZ0XFx1MDEwMGFyXFx1MDllNlxcdTI3MDdpZ2h0XFx4ZTFcXHUwOWYyYXBzdG87XFx1NjdmY2lnaHRcXHhlMVxcdTA5ZmRwYXJyb3dcXHUwMTAwbHJcXHUyNzI1XFx1MjcyOWVmXFx4ZjRcXHUyNGVkaWdodDtcXHU2MWFjXFx1MDE4MGFmbFxcdTI3MzZcXHUyNzM5XFx1MjczZHI7XFx1Njk4NTtcXHVjMDAwXFx1ZDgzNVxcdWRkNWR1cztcXHU2YTJkaW1lcztcXHU2YTM0XFx1MDE2MVxcdTI3NGJcXHUyNzRmc3Q7XFx1NjIxN1xceGUxXFx1MTM0ZVxcdTAxODA7ZWZcXHUyNzU3XFx1Mjc1OFxcdTE4MDBcXHU2NWNhbmdlXFx4YmJcXHUyNzU4YXJcXHUwMTAwO2xcXHUyNzY0XFx1Mjc2NVxcdTQwMjh0O1xcdTY5OTNcXHUwMjgwYWNobXRcXHUyNzczXFx1Mjc3NlxcdTI3N2NcXHUyNzg1XFx1Mjc4N3JcXHhmMlxcdTA4YThvcm5lXFx4ZjJcXHUxZDhjYXJcXHUwMTAwO2RcXHUwZjk4XFx1Mjc4MztcXHU2OTZkO1xcdTYwMGVyaTtcXHU2MmJmXFx1MDMwMGFjaGlxdFxcdTI3OThcXHUyNzlkXFx1MGE0MFxcdTI3YTJcXHUyN2FlXFx1MjdiYnF1bztcXHU2MDM5cjtcXHVjMDAwXFx1ZDgzNVxcdWRjYzFtXFx1MDE4MDtlZ1xcdTA5YjJcXHUyN2FhXFx1MjdhYztcXHU2YThkO1xcdTZhOGZcXHUwMTAwYnVcXHUyNTJhXFx1MjdiM29cXHUwMTAwO3JcXHUwZTFmXFx1MjdiOTtcXHU2MDFhcm9rO1xcdTQxNDJcXHU4NDAwPDtjZGhpbHFyXFx1MDgyYlxcdTI3ZDJcXHUyNjM5XFx1MjdkY1xcdTI3ZTBcXHUyN2U1XFx1MjdlYVxcdTI3ZjBcXHUwMTAwY2lcXHUyN2Q3XFx1MjdkOTtcXHU2YWE2cjtcXHU2YTc5cmVcXHhlNVxcdTI1ZjJtZXM7XFx1NjJjOWFycjtcXHU2OTc2dWVzdDtcXHU2YTdiXFx1MDEwMFBpXFx1MjdmNVxcdTI3ZjlhcjtcXHU2OTk2XFx1MDE4MDtlZlxcdTI4MDBcXHUwOTJkXFx1MTgxYlxcdTY1YzNyXFx1MDEwMGR1XFx1MjgwN1xcdTI4MGRzaGFyO1xcdTY5NGFoYXI7XFx1Njk2NlxcdTAxMDBlblxcdTI4MTdcXHUyODIxcnRuZXFxO1xcdWMwMDBcXHUyMjY4XFx1ZmUwMFxceGM1XFx1MjgxZVxcdTA3MDBEYWNkZWZoaWxub3BzdVxcdTI4NDBcXHUyODQ1XFx1Mjg4MlxcdTI4OGVcXHUyODkzXFx1MjhhMFxcdTI4YTVcXHUyOGE4XFx1MjhkYVxcdTI4ZTJcXHUyOGU0XFx1MGE4M1xcdTI4ZjNcXHUyOTAyRG90O1xcdTYyM2FcXHUwMjAwY2xwclxcdTI4NGVcXHUyODUyXFx1Mjg2M1xcdTI4N2RyXFx1ODAzYlxceGFmXFx1NDBhZlxcdTAxMDBldFxcdTI4NTdcXHUyODU5O1xcdTY2NDJcXHUwMTAwO2VcXHUyODVlXFx1Mjg1ZlxcdTY3MjBzZVxceGJiXFx1Mjg1ZlxcdTAxMDA7c1xcdTEwM2JcXHUyODY4dG9cXHUwMjAwO2RsdVxcdTEwM2JcXHUyODczXFx1Mjg3N1xcdTI4N2Jvd1xceGVlXFx1MDQ4Y2VmXFx4ZjRcXHUwOTBmXFx4ZjBcXHUxM2Qxa2VyO1xcdTY1YWVcXHUwMTAwb3lcXHUyODg3XFx1Mjg4Y21tYTtcXHU2YTI5O1xcdTQ0M2Nhc2g7XFx1NjAxNGFzdXJlZGFuZ2xlXFx4YmJcXHUxNjI2cjtcXHVjMDAwXFx1ZDgzNVxcdWRkMmFvO1xcdTYxMjdcXHUwMTgwY2RuXFx1MjhhZlxcdTI4YjRcXHUyOGM5cm9cXHU4MDNiXFx4YjVcXHU0MGI1XFx1MDIwMDthY2RcXHUxNDY0XFx1MjhiZFxcdTI4YzBcXHUyOGM0c1xceGY0XFx1MTZhN2lyO1xcdTZhZjBvdFxcdTgwYmJcXHhiN1xcdTAxYjV1c1xcdTAxODA7YmRcXHUyOGQyXFx1MTkwM1xcdTI4ZDNcXHU2MjEyXFx1MDEwMDt1XFx1MWQzY1xcdTI4ZDg7XFx1NmEyYVxcdTAxNjNcXHUyOGRlXFx1MjhlMXA7XFx1NmFkYlxceGYyXFx1MjIxMlxceGYwXFx1MGE4MVxcdTAxMDBkcFxcdTI4ZTlcXHUyOGVlZWxzO1xcdTYyYTdmO1xcdWMwMDBcXHVkODM1XFx1ZGQ1ZVxcdTAxMDBjdFxcdTI4ZjhcXHUyOGZkcjtcXHVjMDAwXFx1ZDgzNVxcdWRjYzJwb3NcXHhiYlxcdTE1OWRcXHUwMTgwO2xtXFx1MjkwOVxcdTI5MGFcXHUyOTBkXFx1NDNiY3RpbWFwO1xcdTYyYjhcXHUwYzAwR0xSVmFiY2RlZmdoaWpsbW9wcnN0dXZ3XFx1Mjk0MlxcdTI5NTNcXHUyOTdlXFx1Mjk4OVxcdTI5OThcXHUyOWRhXFx1MjllOVxcdTJhMTVcXHUyYTFhXFx1MmE1OFxcdTJhNWRcXHUyYTgzXFx1MmE5NVxcdTJhYTRcXHUyYWE4XFx1MmIwNFxcdTJiMDdcXHUyYjQ0XFx1MmI3ZlxcdTJiYWVcXHUyYzM0XFx1MmM2N1xcdTJjN2NcXHUyY2U5XFx1MDEwMGd0XFx1Mjk0N1xcdTI5NGI7XFx1YzAwMFxcdTIyZDlcXHUwMzM4XFx1MDEwMDt2XFx1Mjk1MFxcdTBiY2ZcXHVjMDAwXFx1MjI2YlxcdTIwZDJcXHUwMTgwZWx0XFx1Mjk1YVxcdTI5NzJcXHUyOTc2ZnRcXHUwMTAwYXJcXHUyOTYxXFx1Mjk2N3Jyb3c7XFx1NjFjZGlnaHRhcnJvdztcXHU2MWNlO1xcdWMwMDBcXHUyMmQ4XFx1MDMzOFxcdTAxMDA7dlxcdTI5N2JcXHUwYzQ3XFx1YzAwMFxcdTIyNmFcXHUyMGQyaWdodGFycm93O1xcdTYxY2ZcXHUwMTAwRGRcXHUyOThlXFx1Mjk5M2FzaDtcXHU2MmFmYXNoO1xcdTYyYWVcXHUwMjgwYmNucHRcXHUyOWEzXFx1MjlhN1xcdTI5YWNcXHUyOWIxXFx1MjljY2xhXFx4YmJcXHUwMmRldXRlO1xcdTQxNDRnO1xcdWMwMDBcXHUyMjIwXFx1MjBkMlxcdTAyODA7RWlvcFxcdTBkODRcXHUyOWJjXFx1MjljMFxcdTI5YzVcXHUyOWM4O1xcdWMwMDBcXHUyYTcwXFx1MDMzOGQ7XFx1YzAwMFxcdTIyNGJcXHUwMzM4cztcXHU0MTQ5cm9cXHhmOFxcdTBkODR1clxcdTAxMDA7YVxcdTI5ZDNcXHUyOWQ0XFx1NjY2ZWxcXHUwMTAwO3NcXHUyOWQzXFx1MGIzOFxcdTAxZjNcXHUyOWRmXFwwXFx1MjllM3BcXHU4MGJiXFx4YTBcXHUwYjM3bXBcXHUwMTAwO2VcXHUwYmY5XFx1MGMwMFxcdTAyODBhZW91eVxcdTI5ZjRcXHUyOWZlXFx1MmEwM1xcdTJhMTBcXHUyYTEzXFx1MDFmMFxcdTI5ZjlcXDBcXHUyOWZiO1xcdTZhNDNvbjtcXHU0MTQ4ZGlsO1xcdTQxNDZuZ1xcdTAxMDA7ZFxcdTBkN2VcXHUyYTBhb3Q7XFx1YzAwMFxcdTJhNmRcXHUwMzM4cDtcXHU2YTQyO1xcdTQ0M2Rhc2g7XFx1NjAxM1xcdTAzODA7QWFkcXN4XFx1MGI5MlxcdTJhMjlcXHUyYTJkXFx1MmEzYlxcdTJhNDFcXHUyYTQ1XFx1MmE1MHJyO1xcdTYxZDdyXFx1MDEwMGhyXFx1MmEzM1xcdTJhMzZrO1xcdTY5MjRcXHUwMTAwO29cXHUxM2YyXFx1MTNmMG90O1xcdWMwMDBcXHUyMjUwXFx1MDMzOHVpXFx4ZjZcXHUwYjYzXFx1MDEwMGVpXFx1MmE0YVxcdTJhNGVhcjtcXHU2OTI4XFx4ZWRcXHUwYjk4aXN0XFx1MDEwMDtzXFx1MGJhMFxcdTBiOWZyO1xcdWMwMDBcXHVkODM1XFx1ZGQyYlxcdTAyMDBFZXN0XFx1MGJjNVxcdTJhNjZcXHUyYTc5XFx1MmE3Y1xcdTAxODA7cXNcXHUwYmJjXFx1MmE2ZFxcdTBiZTFcXHUwMTgwO3FzXFx1MGJiY1xcdTBiYzVcXHUyYTc0bGFuXFx4ZjRcXHUwYmUyaVxceGVkXFx1MGJlYVxcdTAxMDA7clxcdTBiYjZcXHUyYTgxXFx4YmJcXHUwYmI3XFx1MDE4MEFhcFxcdTJhOGFcXHUyYThkXFx1MmE5MXJcXHhmMlxcdTI5NzFycjtcXHU2MWFlYXI7XFx1NmFmMlxcdTAxODA7c3ZcXHUwZjhkXFx1MmE5Y1xcdTBmOGNcXHUwMTAwO2RcXHUyYWExXFx1MmFhMlxcdTYyZmM7XFx1NjJmYWN5O1xcdTQ0NWFcXHUwMzgwQUVhZGVzdFxcdTJhYjdcXHUyYWJhXFx1MmFiZVxcdTJhYzJcXHUyYWM1XFx1MmFmNlxcdTJhZjlyXFx4ZjJcXHUyOTY2O1xcdWMwMDBcXHUyMjY2XFx1MDMzOHJyO1xcdTYxOWFyO1xcdTYwMjVcXHUwMjAwO2Zxc1xcdTBjM2JcXHUyYWNlXFx1MmFlM1xcdTJhZWZ0XFx1MDEwMGFyXFx1MmFkNFxcdTJhZDlycm9cXHhmN1xcdTJhYzFpZ2h0YXJyb1xceGY3XFx1MmE5MFxcdTAxODA7cXNcXHUwYzNiXFx1MmFiYVxcdTJhZWFsYW5cXHhmNFxcdTBjNTVcXHUwMTAwO3NcXHUwYzU1XFx1MmFmNFxceGJiXFx1MGMzNmlcXHhlZFxcdTBjNWRcXHUwMTAwO3JcXHUwYzM1XFx1MmFmZWlcXHUwMTAwO2VcXHUwYzFhXFx1MGMyNWlcXHhlNFxcdTBkOTBcXHUwMTAwcHRcXHUyYjBjXFx1MmIxMWY7XFx1YzAwMFxcdWQ4MzVcXHVkZDVmXFx1ODE4MFxceGFjO2luXFx1MmIxOVxcdTJiMWFcXHUyYjM2XFx1NDBhY25cXHUwMjAwO0VkdlxcdTBiODlcXHUyYjI0XFx1MmIyOFxcdTJiMmU7XFx1YzAwMFxcdTIyZjlcXHUwMzM4b3Q7XFx1YzAwMFxcdTIyZjVcXHUwMzM4XFx1MDFlMVxcdTBiODlcXHUyYjMzXFx1MmIzNTtcXHU2MmY3O1xcdTYyZjZpXFx1MDEwMDt2XFx1MGNiOFxcdTJiM2NcXHUwMWUxXFx1MGNiOFxcdTJiNDFcXHUyYjQzO1xcdTYyZmU7XFx1NjJmZFxcdTAxODBhb3JcXHUyYjRiXFx1MmI2M1xcdTJiNjlyXFx1MDIwMDthc3RcXHUwYjdiXFx1MmI1NVxcdTJiNWFcXHUyYjVmbGxlXFx4ZWNcXHUwYjdibDtcXHVjMDAwXFx1MmFmZFxcdTIwZTU7XFx1YzAwMFxcdTIyMDJcXHUwMzM4bGludDtcXHU2YTE0XFx1MDE4MDtjZVxcdTBjOTJcXHUyYjcwXFx1MmI3M3VcXHhlNVxcdTBjYTVcXHUwMTAwO2NcXHUwYzk4XFx1MmI3OFxcdTAxMDA7ZVxcdTBjOTJcXHUyYjdkXFx4ZjFcXHUwYzk4XFx1MDIwMEFhaXRcXHUyYjg4XFx1MmI4YlxcdTJiOWRcXHUyYmE3clxceGYyXFx1Mjk4OHJyXFx1MDE4MDtjd1xcdTJiOTRcXHUyYjk1XFx1MmI5OVxcdTYxOWI7XFx1YzAwMFxcdTI5MzNcXHUwMzM4O1xcdWMwMDBcXHUyMTlkXFx1MDMzOGdodGFycm93XFx4YmJcXHUyYjk1cmlcXHUwMTAwO2VcXHUwY2NiXFx1MGNkNlxcdTAzODBjaGltcHF1XFx1MmJiZFxcdTJiY2RcXHUyYmQ5XFx1MmIwNFxcdTBiNzhcXHUyYmU0XFx1MmJlZlxcdTAyMDA7Y2VyXFx1MGQzMlxcdTJiYzZcXHUwZDM3XFx1MmJjOXVcXHhlNVxcdTBkNDU7XFx1YzAwMFxcdWQ4MzVcXHVkY2Mzb3J0XFx1MDI2ZFxcdTJiMDVcXDBcXDBcXHUyYmQ2YXJcXHhlMVxcdTJiNTZtXFx1MDEwMDtlXFx1MGQ2ZVxcdTJiZGZcXHUwMTAwO3FcXHUwZDc0XFx1MGQ3M3N1XFx1MDEwMGJwXFx1MmJlYlxcdTJiZWRcXHhlNVxcdTBjZjhcXHhlNVxcdTBkMGJcXHUwMTgwYmNwXFx1MmJmNlxcdTJjMTFcXHUyYzE5XFx1MDIwMDtFZXNcXHUyYmZmXFx1MmMwMFxcdTBkMjJcXHUyYzA0XFx1NjI4NDtcXHVjMDAwXFx1MmFjNVxcdTAzMzhldFxcdTAxMDA7ZVxcdTBkMWJcXHUyYzBicVxcdTAxMDA7cVxcdTBkMjNcXHUyYzAwY1xcdTAxMDA7ZVxcdTBkMzJcXHUyYzE3XFx4ZjFcXHUwZDM4XFx1MDIwMDtFZXNcXHUyYzIyXFx1MmMyM1xcdTBkNWZcXHUyYzI3XFx1NjI4NTtcXHVjMDAwXFx1MmFjNlxcdTAzMzhldFxcdTAxMDA7ZVxcdTBkNThcXHUyYzJlcVxcdTAxMDA7cVxcdTBkNjBcXHUyYzIzXFx1MDIwMGdpbHJcXHUyYzNkXFx1MmMzZlxcdTJjNDVcXHUyYzQ3XFx4ZWNcXHUwYmQ3bGRlXFx1ODAzYlxceGYxXFx1NDBmMVxceGU3XFx1MGM0M2lhbmdsZVxcdTAxMDBsclxcdTJjNTJcXHUyYzVjZWZ0XFx1MDEwMDtlXFx1MGMxYVxcdTJjNWFcXHhmMVxcdTBjMjZpZ2h0XFx1MDEwMDtlXFx1MGNjYlxcdTJjNjVcXHhmMVxcdTBjZDdcXHUwMTAwO21cXHUyYzZjXFx1MmM2ZFxcdTQzYmRcXHUwMTgwO2VzXFx1MmM3NFxcdTJjNzVcXHUyYzc5XFx1NDAyM3JvO1xcdTYxMTZwO1xcdTYwMDdcXHUwNDgwREhhZGdpbHJzXFx1MmM4ZlxcdTJjOTRcXHUyYzk5XFx1MmM5ZVxcdTJjYTNcXHUyY2IwXFx1MmNiNlxcdTJjZDNcXHUyY2UzYXNoO1xcdTYyYWRhcnI7XFx1NjkwNHA7XFx1YzAwMFxcdTIyNGRcXHUyMGQyYXNoO1xcdTYyYWNcXHUwMTAwZXRcXHUyY2E4XFx1MmNhYztcXHVjMDAwXFx1MjI2NVxcdTIwZDI7XFx1YzAwMD5cXHUyMGQybmZpbjtcXHU2OWRlXFx1MDE4MEFldFxcdTJjYmRcXHUyY2MxXFx1MmNjNXJyO1xcdTY5MDI7XFx1YzAwMFxcdTIyNjRcXHUyMGQyXFx1MDEwMDtyXFx1MmNjYVxcdTJjY2RcXHVjMDAwPFxcdTIwZDJpZTtcXHVjMDAwXFx1MjJiNFxcdTIwZDJcXHUwMTAwQXRcXHUyY2Q4XFx1MmNkY3JyO1xcdTY5MDNyaWU7XFx1YzAwMFxcdTIyYjVcXHUyMGQyaW07XFx1YzAwMFxcdTIyM2NcXHUyMGQyXFx1MDE4MEFhblxcdTJjZjBcXHUyY2Y0XFx1MmQwMnJyO1xcdTYxZDZyXFx1MDEwMGhyXFx1MmNmYVxcdTJjZmRrO1xcdTY5MjNcXHUwMTAwO29cXHUxM2U3XFx1MTNlNWVhcjtcXHU2OTI3XFx1MTI1M1xcdTFhOTVcXDBcXDBcXDBcXDBcXDBcXDBcXDBcXDBcXDBcXDBcXDBcXDBcXDBcXHUyZDJkXFwwXFx1MmQzOFxcdTJkNDhcXHUyZDYwXFx1MmQ2NVxcdTJkNzJcXHUyZDg0XFx1MWIwN1xcMFxcMFxcdTJkOGRcXHUyZGFiXFwwXFx1MmRjOFxcdTJkY2VcXDBcXHUyZGRjXFx1MmUxOVxcdTJlMmJcXHUyZTNlXFx1MmU0M1xcdTAxMDBjc1xcdTJkMzFcXHUxYTk3dXRlXFx1ODAzYlxceGYzXFx1NDBmM1xcdTAxMDBpeVxcdTJkM2NcXHUyZDQ1clxcdTAxMDA7Y1xcdTFhOWVcXHUyZDQyXFx1ODAzYlxceGY0XFx1NDBmNDtcXHU0NDNlXFx1MDI4MGFiaW9zXFx1MWFhMFxcdTJkNTJcXHUyZDU3XFx1MDFjOFxcdTJkNWFsYWM7XFx1NDE1MXY7XFx1NmEzOG9sZDtcXHU2OWJjbGlnO1xcdTQxNTNcXHUwMTAwY3JcXHUyZDY5XFx1MmQ2ZGlyO1xcdTY5YmY7XFx1YzAwMFxcdWQ4MzVcXHVkZDJjXFx1MDM2ZlxcdTJkNzlcXDBcXDBcXHUyZDdjXFwwXFx1MmQ4Mm47XFx1NDJkYmF2ZVxcdTgwM2JcXHhmMlxcdTQwZjI7XFx1NjljMVxcdTAxMDBibVxcdTJkODhcXHUwZGY0YXI7XFx1NjliNVxcdTAyMDBhY2l0XFx1MmQ5NVxcdTJkOThcXHUyZGE1XFx1MmRhOHJcXHhmMlxcdTFhODBcXHUwMTAwaXJcXHUyZDlkXFx1MmRhMHI7XFx1NjliZW9zcztcXHU2OWJiblxceGU1XFx1MGU1MjtcXHU2OWMwXFx1MDE4MGFlaVxcdTJkYjFcXHUyZGI1XFx1MmRiOWNyO1xcdTQxNGRnYTtcXHU0M2M5XFx1MDE4MGNkblxcdTJkYzBcXHUyZGM1XFx1MDFjZHJvbjtcXHU0M2JmO1xcdTY5YjZwZjtcXHVjMDAwXFx1ZDgzNVxcdWRkNjBcXHUwMTgwYWVsXFx1MmRkNFxcdTJkZDdcXHUwMWQycjtcXHU2OWI3cnA7XFx1NjliOVxcdTAzODA7YWRpb3N2XFx1MmRlYVxcdTJkZWJcXHUyZGVlXFx1MmUwOFxcdTJlMGRcXHUyZTEwXFx1MmUxNlxcdTYyMjhyXFx4ZjJcXHUxYTg2XFx1MDIwMDtlZm1cXHUyZGY3XFx1MmRmOFxcdTJlMDJcXHUyZTA1XFx1NmE1ZHJcXHUwMTAwO29cXHUyZGZlXFx1MmRmZlxcdTYxMzRmXFx4YmJcXHUyZGZmXFx1ODAzYlxceGFhXFx1NDBhYVxcdTgwM2JcXHhiYVxcdTQwYmFnb2Y7XFx1NjJiNnI7XFx1NmE1NmxvcGU7XFx1NmE1NztcXHU2YTViXFx1MDE4MGNsb1xcdTJlMWZcXHUyZTIxXFx1MmUyN1xceGYyXFx1MmUwMWFzaFxcdTgwM2JcXHhmOFxcdTQwZjhsO1xcdTYyOThpXFx1MDE2Y1xcdTJlMmZcXHUyZTM0ZGVcXHU4MDNiXFx4ZjVcXHU0MGY1ZXNcXHUwMTAwO2FcXHUwMWRiXFx1MmUzYXM7XFx1NmEzNm1sXFx1ODAzYlxceGY2XFx1NDBmNmJhcjtcXHU2MzNkXFx1MGFlMVxcdTJlNWVcXDBcXHUyZTdkXFwwXFx1MmU4MFxcdTJlOWRcXDBcXHUyZWEyXFx1MmViOVxcMFxcMFxcdTJlY2JcXHUwZTljXFwwXFx1MmYxM1xcMFxcMFxcdTJmMmJcXHUyZmJjXFwwXFx1MmZjOHJcXHUwMjAwO2FzdFxcdTA0MDNcXHUyZTY3XFx1MmU3MlxcdTBlODVcXHU4MTAwXFx4YjY7bFxcdTJlNmRcXHUyZTZlXFx1NDBiNmxlXFx4ZWNcXHUwNDAzXFx1MDI2OVxcdTJlNzhcXDBcXDBcXHUyZTdibTtcXHU2YWYzO1xcdTZhZmR5O1xcdTQ0M2ZyXFx1MDI4MGNpbXB0XFx1MmU4YlxcdTJlOGZcXHUyZTkzXFx1MTg2NVxcdTJlOTdudDtcXHU0MDI1b2Q7XFx1NDAyZWlsO1xcdTYwMzBlbms7XFx1NjAzMXI7XFx1YzAwMFxcdWQ4MzVcXHVkZDJkXFx1MDE4MGltb1xcdTJlYThcXHUyZWIwXFx1MmViNFxcdTAxMDA7dlxcdTJlYWRcXHUyZWFlXFx1NDNjNjtcXHU0M2Q1bWFcXHhmNFxcdTBhNzZuZTtcXHU2NjBlXFx1MDE4MDt0dlxcdTJlYmZcXHUyZWMwXFx1MmVjOFxcdTQzYzBjaGZvcmtcXHhiYlxcdTFmZmQ7XFx1NDNkNlxcdTAxMDBhdVxcdTJlY2ZcXHUyZWRmblxcdTAxMDBja1xcdTJlZDVcXHUyZWRka1xcdTAxMDA7aFxcdTIxZjRcXHUyZWRiO1xcdTYxMGVcXHhmNlxcdTIxZjRzXFx1MDQ4MDthYmNkZW1zdFxcdTJlZjNcXHUyZWY0XFx1MTkwOFxcdTJlZjlcXHUyZWZkXFx1MmYwNFxcdTJmMDZcXHUyZjBhXFx1MmYwZVxcdTQwMmJjaXI7XFx1NmEyM2lyO1xcdTZhMjJcXHUwMTAwb3VcXHUxZDQwXFx1MmYwMjtcXHU2YTI1O1xcdTZhNzJuXFx1ODBiYlxceGIxXFx1MGU5ZGltO1xcdTZhMjZ3bztcXHU2YTI3XFx1MDE4MGlwdVxcdTJmMTlcXHUyZjIwXFx1MmYyNW50aW50O1xcdTZhMTVmO1xcdWMwMDBcXHVkODM1XFx1ZGQ2MW5kXFx1ODAzYlxceGEzXFx1NDBhM1xcdTA1MDA7RWFjZWlub3N1XFx1MGVjOFxcdTJmM2ZcXHUyZjQxXFx1MmY0NFxcdTJmNDdcXHUyZjgxXFx1MmY4OVxcdTJmOTJcXHUyZjdlXFx1MmZiNjtcXHU2YWIzcDtcXHU2YWI3dVxceGU1XFx1MGVkOVxcdTAxMDA7Y1xcdTBlY2VcXHUyZjRjXFx1MDMwMDthY2Vuc1xcdTBlYzhcXHUyZjU5XFx1MmY1ZlxcdTJmNjZcXHUyZjY4XFx1MmY3ZXBwcm9cXHhmOFxcdTJmNDN1cmx5ZVxceGYxXFx1MGVkOVxceGYxXFx1MGVjZVxcdTAxODBhZXNcXHUyZjZmXFx1MmY3NlxcdTJmN2FwcHJveDtcXHU2YWI5cXE7XFx1NmFiNWltO1xcdTYyZThpXFx4ZWRcXHUwZWRmbWVcXHUwMTAwO3NcXHUyZjg4XFx1MGVhZVxcdTYwMzJcXHUwMTgwRWFzXFx1MmY3OFxcdTJmOTBcXHUyZjdhXFx4ZjBcXHUyZjc1XFx1MDE4MGRmcFxcdTBlZWNcXHUyZjk5XFx1MmZhZlxcdTAxODBhbHNcXHUyZmEwXFx1MmZhNVxcdTJmYWFsYXI7XFx1NjMyZWluZTtcXHU2MzEydXJmO1xcdTYzMTNcXHUwMTAwO3RcXHUwZWZiXFx1MmZiNFxceGVmXFx1MGVmYnJlbDtcXHU2MmIwXFx1MDEwMGNpXFx1MmZjMFxcdTJmYzVyO1xcdWMwMDBcXHVkODM1XFx1ZGNjNTtcXHU0M2M4bmNzcDtcXHU2MDA4XFx1MDMwMGZpb3BzdVxcdTJmZGFcXHUyMmUyXFx1MmZkZlxcdTJmZTVcXHUyZmViXFx1MmZmMXI7XFx1YzAwMFxcdWQ4MzVcXHVkZDJlcGY7XFx1YzAwMFxcdWQ4MzVcXHVkZDYycmltZTtcXHU2MDU3Y3I7XFx1YzAwMFxcdWQ4MzVcXHVkY2M2XFx1MDE4MGFlb1xcdTJmZjhcXHUzMDA5XFx1MzAxM3RcXHUwMTAwZWlcXHUyZmZlXFx1MzAwNXJuaW9uXFx4ZjNcXHUwNmIwbnQ7XFx1NmExNnN0XFx1MDEwMDtlXFx1MzAxMFxcdTMwMTFcXHU0MDNmXFx4ZjFcXHUxZjE5XFx4ZjRcXHUwZjE0XFx1MGE4MEFCSGFiY2RlZmhpbG1ub3Byc3R1eFxcdTMwNDBcXHUzMDUxXFx1MzA1NVxcdTMwNTlcXHUzMGUwXFx1MzEwZVxcdTMxMmJcXHUzMTQ3XFx1MzE2MlxcdTMxNzJcXHUzMThlXFx1MzIwNlxcdTMyMTVcXHUzMjI0XFx1MzIyOVxcdTMyNThcXHUzMjZlXFx1MzI3MlxcdTMyOTBcXHUzMmIwXFx1MzJiN1xcdTAxODBhcnRcXHUzMDQ3XFx1MzA0YVxcdTMwNGNyXFx4ZjJcXHUxMGIzXFx4ZjJcXHUwM2RkYWlsO1xcdTY5MWNhclxceGYyXFx1MWM2NWFyO1xcdTY5NjRcXHUwMzgwY2RlbnFydFxcdTMwNjhcXHUzMDc1XFx1MzA3OFxcdTMwN2ZcXHUzMDhmXFx1MzA5NFxcdTMwY2NcXHUwMTAwZXVcXHUzMDZkXFx1MzA3MTtcXHVjMDAwXFx1MjIzZFxcdTAzMzF0ZTtcXHU0MTU1aVxceGUzXFx1MTE2ZW1wdHl2O1xcdTY5YjNnXFx1MDIwMDtkZWxcXHUwZmQxXFx1MzA4OVxcdTMwOGJcXHUzMDhkO1xcdTY5OTI7XFx1NjlhNVxceGU1XFx1MGZkMXVvXFx1ODAzYlxceGJiXFx1NDBiYnJcXHUwNTgwO2FiY2ZobHBzdHdcXHUwZmRjXFx1MzBhY1xcdTMwYWZcXHUzMGI3XFx1MzBiOVxcdTMwYmNcXHUzMGJlXFx1MzBjMFxcdTMwYzNcXHUzMGM3XFx1MzBjYXA7XFx1Njk3NVxcdTAxMDA7ZlxcdTBmZTBcXHUzMGI0cztcXHU2OTIwO1xcdTY5MzNzO1xcdTY5MWVcXHhlYlxcdTIyNWRcXHhmMFxcdTI3MmVsO1xcdTY5NDVpbTtcXHU2OTc0bDtcXHU2MWEzO1xcdTYxOWRcXHUwMTAwYWlcXHUzMGQxXFx1MzBkNWlsO1xcdTY5MWFvXFx1MDEwMDtuXFx1MzBkYlxcdTMwZGNcXHU2MjM2YWxcXHhmM1xcdTBmMWVcXHUwMTgwYWJyXFx1MzBlN1xcdTMwZWFcXHUzMGVlclxceGYyXFx1MTdlNXJrO1xcdTY3NzNcXHUwMTAwYWtcXHUzMGYzXFx1MzBmZGNcXHUwMTAwZWtcXHUzMGY5XFx1MzBmYjtcXHU0MDdkO1xcdTQwNWRcXHUwMTAwZXNcXHUzMTAyXFx1MzEwNDtcXHU2OThjbFxcdTAxMDBkdVxcdTMxMGFcXHUzMTBjO1xcdTY5OGU7XFx1Njk5MFxcdTAyMDBhZXV5XFx1MzExN1xcdTMxMWNcXHUzMTI3XFx1MzEyOXJvbjtcXHU0MTU5XFx1MDEwMGRpXFx1MzEyMVxcdTMxMjVpbDtcXHU0MTU3XFx4ZWNcXHUwZmYyXFx4ZTJcXHUzMGZhO1xcdTQ0NDBcXHUwMjAwY2xxc1xcdTMxMzRcXHUzMTM3XFx1MzEzZFxcdTMxNDRhO1xcdTY5MzdkaGFyO1xcdTY5Njl1b1xcdTAxMDA7clxcdTAyMGVcXHUwMjBkaDtcXHU2MWIzXFx1MDE4MGFjZ1xcdTMxNGVcXHUzMTVmXFx1MGY0NGxcXHUwMjAwO2lwc1xcdTBmNzhcXHUzMTU4XFx1MzE1YlxcdTEwOWNuXFx4ZTVcXHUxMGJiYXJcXHhmNFxcdTBmYTl0O1xcdTY1YWRcXHUwMTgwaWxyXFx1MzE2OVxcdTEwMjNcXHUzMTZlc2h0O1xcdTY5N2Q7XFx1YzAwMFxcdWQ4MzVcXHVkZDJmXFx1MDEwMGFvXFx1MzE3N1xcdTMxODZyXFx1MDEwMGR1XFx1MzE3ZFxcdTMxN2ZcXHhiYlxcdTA0N2JcXHUwMTAwO2xcXHUxMDkxXFx1MzE4NDtcXHU2OTZjXFx1MDEwMDt2XFx1MzE4YlxcdTMxOGNcXHU0M2MxO1xcdTQzZjFcXHUwMTgwZ25zXFx1MzE5NVxcdTMxZjlcXHUzMWZjaHRcXHUwMzAwYWhscnN0XFx1MzFhNFxcdTMxYjBcXHUzMWMyXFx1MzFkOFxcdTMxZTRcXHUzMWVlcnJvd1xcdTAxMDA7dFxcdTBmZGNcXHUzMWFkYVxceGU5XFx1MzBjOGFycG9vblxcdTAxMDBkdVxcdTMxYmJcXHUzMWJmb3dcXHhlZVxcdTMxN2VwXFx4YmJcXHUxMDkyZWZ0XFx1MDEwMGFoXFx1MzFjYVxcdTMxZDBycm93XFx4ZjNcXHUwZmVhYXJwb29uXFx4ZjNcXHUwNTUxaWdodGFycm93cztcXHU2MWM5cXVpZ2Fycm9cXHhmN1xcdTMwY2JocmVldGltZXM7XFx1NjJjY2c7XFx1NDJkYWluZ2RvdHNlXFx4ZjFcXHUxZjMyXFx1MDE4MGFobVxcdTMyMGRcXHUzMjEwXFx1MzIxM3JcXHhmMlxcdTBmZWFhXFx4ZjJcXHUwNTUxO1xcdTYwMGZvdXN0XFx1MDEwMDthXFx1MzIxZVxcdTMyMWZcXHU2M2IxY2hlXFx4YmJcXHUzMjFmbWlkO1xcdTZhZWVcXHUwMjAwYWJwdFxcdTMyMzJcXHUzMjNkXFx1MzI0MFxcdTMyNTJcXHUwMTAwbnJcXHUzMjM3XFx1MzIzYWc7XFx1NjdlZHI7XFx1NjFmZXJcXHhlYlxcdTEwMDNcXHUwMTgwYWZsXFx1MzI0N1xcdTMyNGFcXHUzMjRlcjtcXHU2OTg2O1xcdWMwMDBcXHVkODM1XFx1ZGQ2M3VzO1xcdTZhMmVpbWVzO1xcdTZhMzVcXHUwMTAwYXBcXHUzMjVkXFx1MzI2N3JcXHUwMTAwO2dcXHUzMjYzXFx1MzI2NFxcdTQwMjl0O1xcdTY5OTRvbGludDtcXHU2YTEyYXJcXHhmMlxcdTMxZTNcXHUwMjAwYWNocVxcdTMyN2JcXHUzMjgwXFx1MTBiY1xcdTMyODVxdW87XFx1NjAzYXI7XFx1YzAwMFxcdWQ4MzVcXHVkY2M3XFx1MDEwMGJ1XFx1MzBmYlxcdTMyOGFvXFx1MDEwMDtyXFx1MDIxNFxcdTAyMTNcXHUwMTgwaGlyXFx1MzI5N1xcdTMyOWJcXHUzMmEwcmVcXHhlNVxcdTMxZjhtZXM7XFx1NjJjYWlcXHUwMjAwO2VmbFxcdTMyYWFcXHUxMDU5XFx1MTgyMVxcdTMyYWJcXHU2NWI5dHJpO1xcdTY5Y2VsdWhhcjtcXHU2OTY4O1xcdTYxMWVcXHUwZDYxXFx1MzJkNVxcdTMyZGJcXHUzMmRmXFx1MzMyY1xcdTMzMzhcXHUzMzcxXFwwXFx1MzM3YVxcdTMzYTRcXDBcXDBcXHUzM2VjXFx1MzNmMFxcMFxcdTM0MjhcXHUzNDQ4XFx1MzQ1YVxcdTM0YWRcXHUzNGIxXFx1MzRjYVxcdTM0ZjFcXDBcXHUzNjE2XFwwXFwwXFx1MzYzM2N1dGU7XFx1NDE1YnF1XFx4ZWZcXHUyN2JhXFx1MDUwMDtFYWNlaW5wc3lcXHUxMWVkXFx1MzJmM1xcdTMyZjVcXHUzMmZmXFx1MzMwMlxcdTMzMGJcXHUzMzBmXFx1MzMxZlxcdTMzMjZcXHUzMzI5O1xcdTZhYjRcXHUwMWYwXFx1MzJmYVxcMFxcdTMyZmM7XFx1NmFiOG9uO1xcdTQxNjF1XFx4ZTVcXHUxMWZlXFx1MDEwMDtkXFx1MTFmM1xcdTMzMDdpbDtcXHU0MTVmcmM7XFx1NDE1ZFxcdTAxODBFYXNcXHUzMzE2XFx1MzMxOFxcdTMzMWI7XFx1NmFiNnA7XFx1NmFiYWltO1xcdTYyZTlvbGludDtcXHU2YTEzaVxceGVkXFx1MTIwNDtcXHU0NDQxb3RcXHUwMTgwO2JlXFx1MzMzNFxcdTFkNDdcXHUzMzM1XFx1NjJjNTtcXHU2YTY2XFx1MDM4MEFhY21zdHhcXHUzMzQ2XFx1MzM0YVxcdTMzNTdcXHUzMzViXFx1MzM1ZVxcdTMzNjNcXHUzMzZkcnI7XFx1NjFkOHJcXHUwMTAwaHJcXHUzMzUwXFx1MzM1MlxceGViXFx1MjIyOFxcdTAxMDA7b1xcdTBhMzZcXHUwYTM0dFxcdTgwM2JcXHhhN1xcdTQwYTdpO1xcdTQwM2J3YXI7XFx1NjkyOW1cXHUwMTAwaW5cXHUzMzY5XFx4ZjBudVxceGYzXFx4ZjF0O1xcdTY3MzZyXFx1MDEwMDtvXFx1MzM3NlxcdTIwNTVcXHVjMDAwXFx1ZDgzNVxcdWRkMzBcXHUwMjAwYWNveVxcdTMzODJcXHUzMzg2XFx1MzM5MVxcdTMzYTBycDtcXHU2NjZmXFx1MDEwMGh5XFx1MzM4YlxcdTMzOGZjeTtcXHU0NDQ5O1xcdTQ0NDhydFxcdTAyNmRcXHUzMzk5XFwwXFwwXFx1MzM5Y2lcXHhlNFxcdTE0NjRhcmFcXHhlY1xcdTJlNmZcXHU4MDNiXFx4YWRcXHU0MGFkXFx1MDEwMGdtXFx1MzNhOFxcdTMzYjRtYVxcdTAxODA7ZnZcXHUzM2IxXFx1MzNiMlxcdTMzYjJcXHU0M2MzO1xcdTQzYzJcXHUwNDAwO2RlZ2xucHJcXHUxMmFiXFx1MzNjNVxcdTMzYzlcXHUzM2NlXFx1MzNkNlxcdTMzZGVcXHUzM2UxXFx1MzNlNm90O1xcdTZhNmFcXHUwMTAwO3FcXHUxMmIxXFx1MTJiMFxcdTAxMDA7RVxcdTMzZDNcXHUzM2Q0XFx1NmE5ZTtcXHU2YWEwXFx1MDEwMDtFXFx1MzNkYlxcdTMzZGNcXHU2YTlkO1xcdTZhOWZlO1xcdTYyNDZsdXM7XFx1NmEyNGFycjtcXHU2OTcyYXJcXHhmMlxcdTExM2RcXHUwMjAwYWVpdFxcdTMzZjhcXHUzNDA4XFx1MzQwZlxcdTM0MTdcXHUwMTAwbHNcXHUzM2ZkXFx1MzQwNGxzZXRtXFx4ZTlcXHUzMzZhaHA7XFx1NmEzM3BhcnNsO1xcdTY5ZTRcXHUwMTAwZGxcXHUxNDYzXFx1MzQxNGU7XFx1NjMyM1xcdTAxMDA7ZVxcdTM0MWNcXHUzNDFkXFx1NmFhYVxcdTAxMDA7c1xcdTM0MjJcXHUzNDIzXFx1NmFhYztcXHVjMDAwXFx1MmFhY1xcdWZlMDBcXHUwMTgwZmxwXFx1MzQyZVxcdTM0MzNcXHUzNDQydGN5O1xcdTQ0NGNcXHUwMTAwO2JcXHUzNDM4XFx1MzQzOVxcdTQwMmZcXHUwMTAwO2FcXHUzNDNlXFx1MzQzZlxcdTY5YzRyO1xcdTYzM2ZmO1xcdWMwMDBcXHVkODM1XFx1ZGQ2NGFcXHUwMTAwZHJcXHUzNDRkXFx1MDQwMmVzXFx1MDEwMDt1XFx1MzQ1NFxcdTM0NTVcXHU2NjYwaXRcXHhiYlxcdTM0NTVcXHUwMTgwY3N1XFx1MzQ2MFxcdTM0NzlcXHUzNDlmXFx1MDEwMGF1XFx1MzQ2NVxcdTM0NmZwXFx1MDEwMDtzXFx1MTE4OFxcdTM0NmI7XFx1YzAwMFxcdTIyOTNcXHVmZTAwcFxcdTAxMDA7c1xcdTExYjRcXHUzNDc1O1xcdWMwMDBcXHUyMjk0XFx1ZmUwMHVcXHUwMTAwYnBcXHUzNDdmXFx1MzQ4ZlxcdTAxODA7ZXNcXHUxMTk3XFx1MTE5Y1xcdTM0ODZldFxcdTAxMDA7ZVxcdTExOTdcXHUzNDhkXFx4ZjFcXHUxMTlkXFx1MDE4MDtlc1xcdTExYThcXHUxMWFkXFx1MzQ5NmV0XFx1MDEwMDtlXFx1MTFhOFxcdTM0OWRcXHhmMVxcdTExYWVcXHUwMTgwO2FmXFx1MTE3YlxcdTM0YTZcXHUwNWIwclxcdTAxNjVcXHUzNGFiXFx1MDViMVxceGJiXFx1MTE3Y2FyXFx4ZjJcXHUxMTQ4XFx1MDIwMGNlbXRcXHUzNGI5XFx1MzRiZVxcdTM0YzJcXHUzNGM1cjtcXHVjMDAwXFx1ZDgzNVxcdWRjYzh0bVxceGVlXFx4ZjFpXFx4ZWNcXHUzNDE1YXJcXHhlNlxcdTExYmVcXHUwMTAwYXJcXHUzNGNlXFx1MzRkNXJcXHUwMTAwO2ZcXHUzNGQ0XFx1MTdiZlxcdTY2MDZcXHUwMTAwYW5cXHUzNGRhXFx1MzRlZGlnaHRcXHUwMTAwZXBcXHUzNGUzXFx1MzRlYXBzaWxvXFx4ZWVcXHUxZWUwaFxceGU5XFx1MmVhZnNcXHhiYlxcdTI4NTJcXHUwMjgwYmNtbnBcXHUzNGZiXFx1MzU1ZVxcdTEyMDlcXHUzNThiXFx1MzU4ZVxcdTA0ODA7RWRlbW5wcnNcXHUzNTBlXFx1MzUwZlxcdTM1MTFcXHUzNTE1XFx1MzUxZVxcdTM1MjNcXHUzNTJjXFx1MzUzMVxcdTM1MzZcXHU2MjgyO1xcdTZhYzVvdDtcXHU2YWJkXFx1MDEwMDtkXFx1MTFkYVxcdTM1MWFvdDtcXHU2YWMzdWx0O1xcdTZhYzFcXHUwMTAwRWVcXHUzNTI4XFx1MzUyYTtcXHU2YWNiO1xcdTYyOGFsdXM7XFx1NmFiZmFycjtcXHU2OTc5XFx1MDE4MGVpdVxcdTM1M2RcXHUzNTUyXFx1MzU1NXRcXHUwMTgwO2VuXFx1MzUwZVxcdTM1NDVcXHUzNTRicVxcdTAxMDA7cVxcdTExZGFcXHUzNTBmZXFcXHUwMTAwO3FcXHUzNTJiXFx1MzUyOG07XFx1NmFjN1xcdTAxMDBicFxcdTM1NWFcXHUzNTVjO1xcdTZhZDU7XFx1NmFkM2NcXHUwMzAwO2FjZW5zXFx1MTFlZFxcdTM1NmNcXHUzNTcyXFx1MzU3OVxcdTM1N2JcXHUzMzI2cHByb1xceGY4XFx1MzJmYXVybHllXFx4ZjFcXHUxMWZlXFx4ZjFcXHUxMWYzXFx1MDE4MGFlc1xcdTM1ODJcXHUzNTg4XFx1MzMxYnBwcm9cXHhmOFxcdTMzMWFxXFx4ZjFcXHUzMzE3ZztcXHU2NjZhXFx1MDY4MDEyMztFZGVobG1ucHNcXHUzNWE5XFx1MzVhY1xcdTM1YWZcXHUxMjFjXFx1MzViMlxcdTM1YjRcXHUzNWMwXFx1MzVjOVxcdTM1ZDVcXHUzNWRhXFx1MzVkZlxcdTM1ZThcXHUzNWVkXFx1ODAzYlxceGI5XFx1NDBiOVxcdTgwM2JcXHhiMlxcdTQwYjJcXHU4MDNiXFx4YjNcXHU0MGIzO1xcdTZhYzZcXHUwMTAwb3NcXHUzNWI5XFx1MzViY3Q7XFx1NmFiZXViO1xcdTZhZDhcXHUwMTAwO2RcXHUxMjIyXFx1MzVjNW90O1xcdTZhYzRzXFx1MDEwMG91XFx1MzVjZlxcdTM1ZDJsO1xcdTY3YzliO1xcdTZhZDdhcnI7XFx1Njk3YnVsdDtcXHU2YWMyXFx1MDEwMEVlXFx1MzVlNFxcdTM1ZTY7XFx1NmFjYztcXHU2MjhibHVzO1xcdTZhYzBcXHUwMTgwZWl1XFx1MzVmNFxcdTM2MDlcXHUzNjBjdFxcdTAxODA7ZW5cXHUxMjFjXFx1MzVmY1xcdTM2MDJxXFx1MDEwMDtxXFx1MTIyMlxcdTM1YjJlcVxcdTAxMDA7cVxcdTM1ZTdcXHUzNWU0bTtcXHU2YWM4XFx1MDEwMGJwXFx1MzYxMVxcdTM2MTM7XFx1NmFkNDtcXHU2YWQ2XFx1MDE4MEFhblxcdTM2MWNcXHUzNjIwXFx1MzYyZHJyO1xcdTYxZDlyXFx1MDEwMGhyXFx1MzYyNlxcdTM2MjhcXHhlYlxcdTIyMmVcXHUwMTAwO29cXHUwYTJiXFx1MGEyOXdhcjtcXHU2OTJhbGlnXFx1ODAzYlxceGRmXFx1NDBkZlxcdTBiZTFcXHUzNjUxXFx1MzY1ZFxcdTM2NjBcXHUxMmNlXFx1MzY3M1xcdTM2NzlcXDBcXHUzNjdlXFx1MzZjMlxcMFxcMFxcMFxcMFxcMFxcdTM2ZGJcXHUzNzAzXFwwXFx1MzcwOVxcdTM3NmNcXDBcXDBcXDBcXHUzNzg3XFx1MDI3MlxcdTM2NTZcXDBcXDBcXHUzNjViZ2V0O1xcdTYzMTY7XFx1NDNjNHJcXHhlYlxcdTBlNWZcXHUwMTgwYWV5XFx1MzY2NlxcdTM2NmJcXHUzNjcwcm9uO1xcdTQxNjVkaWw7XFx1NDE2MztcXHU0NDQybHJlYztcXHU2MzE1cjtcXHVjMDAwXFx1ZDgzNVxcdWRkMzFcXHUwMjAwZWlrb1xcdTM2ODZcXHUzNjlkXFx1MzZiNVxcdTM2YmNcXHUwMWYyXFx1MzY4YlxcMFxcdTM2OTFlXFx1MDEwMDRmXFx1MTI4NFxcdTEyODFhXFx1MDE4MDtzdlxcdTM2OThcXHUzNjk5XFx1MzY5YlxcdTQzYjh5bTtcXHU0M2QxXFx1MDEwMGNuXFx1MzZhMlxcdTM2YjJrXFx1MDEwMGFzXFx1MzZhOFxcdTM2YWVwcHJvXFx4ZjhcXHUxMmMxaW1cXHhiYlxcdTEyYWNzXFx4ZjBcXHUxMjllXFx1MDEwMGFzXFx1MzZiYVxcdTM2YWVcXHhmMFxcdTEyYzFyblxcdTgwM2JcXHhmZVxcdTQwZmVcXHUwMWVjXFx1MDMxZlxcdTM2YzZcXHUyMmU3ZXNcXHU4MTgwXFx4ZDc7YmRcXHUzNmNmXFx1MzZkMFxcdTM2ZDhcXHU0MGQ3XFx1MDEwMDthXFx1MTkwZlxcdTM2ZDVyO1xcdTZhMzE7XFx1NmEzMFxcdTAxODBlcHNcXHUzNmUxXFx1MzZlM1xcdTM3MDBcXHhlMVxcdTJhNGRcXHUwMjAwO2JjZlxcdTA0ODZcXHUzNmVjXFx1MzZmMFxcdTM2ZjRvdDtcXHU2MzM2aXI7XFx1NmFmMVxcdTAxMDA7b1xcdTM2ZjlcXHUzNmZjXFx1YzAwMFxcdWQ4MzVcXHVkZDY1cms7XFx1NmFkYVxceGUxXFx1MzM2MnJpbWU7XFx1NjAzNFxcdTAxODBhaXBcXHUzNzBmXFx1MzcxMlxcdTM3NjRkXFx4ZTVcXHUxMjQ4XFx1MDM4MGFkZW1wc3RcXHUzNzIxXFx1Mzc0ZFxcdTM3NDBcXHUzNzUxXFx1Mzc1N1xcdTM3NWNcXHUzNzVmbmdsZVxcdTAyODA7ZGxxclxcdTM3MzBcXHUzNzMxXFx1MzczNlxcdTM3NDBcXHUzNzQyXFx1NjViNW93blxceGJiXFx1MWRiYmVmdFxcdTAxMDA7ZVxcdTI4MDBcXHUzNzNlXFx4ZjFcXHUwOTJlO1xcdTYyNWNpZ2h0XFx1MDEwMDtlXFx1MzJhYVxcdTM3NGJcXHhmMVxcdTEwNWFvdDtcXHU2NWVjaW51cztcXHU2YTNhbHVzO1xcdTZhMzliO1xcdTY5Y2RpbWU7XFx1NmEzYmV6aXVtO1xcdTYzZTJcXHUwMTgwY2h0XFx1Mzc3MlxcdTM3N2RcXHUzNzgxXFx1MDEwMHJ5XFx1Mzc3N1xcdTM3N2I7XFx1YzAwMFxcdWQ4MzVcXHVkY2M5O1xcdTQ0NDZjeTtcXHU0NDVicm9rO1xcdTQxNjdcXHUwMTAwaW9cXHUzNzhiXFx1Mzc4ZXhcXHhmNFxcdTE3NzdoZWFkXFx1MDEwMGxyXFx1Mzc5N1xcdTM3YTBlZnRhcnJvXFx4ZjdcXHUwODRmaWdodGFycm93XFx4YmJcXHUwZjVkXFx1MDkwMEFIYWJjZGZnaGxtb3Byc3R1d1xcdTM3ZDBcXHUzN2QzXFx1MzdkN1xcdTM3ZTRcXHUzN2YwXFx1MzdmY1xcdTM4MGVcXHUzODFjXFx1MzgyM1xcdTM4MzRcXHUzODUxXFx1Mzg1ZFxcdTM4NmJcXHUzOGE5XFx1MzhjY1xcdTM4ZDJcXHUzOGVhXFx1MzhmNnJcXHhmMlxcdTAzZWRhcjtcXHU2OTYzXFx1MDEwMGNyXFx1MzdkY1xcdTM3ZTJ1dGVcXHU4MDNiXFx4ZmFcXHU0MGZhXFx4ZjJcXHUxMTUwclxcdTAxZTNcXHUzN2VhXFwwXFx1MzdlZHk7XFx1NDQ1ZXZlO1xcdTQxNmRcXHUwMTAwaXlcXHUzN2Y1XFx1MzdmYXJjXFx1ODAzYlxceGZiXFx1NDBmYjtcXHU0NDQzXFx1MDE4MGFiaFxcdTM4MDNcXHUzODA2XFx1MzgwYnJcXHhmMlxcdTEzYWRsYWM7XFx1NDE3MWFcXHhmMlxcdTEzYzNcXHUwMTAwaXJcXHUzODEzXFx1MzgxOHNodDtcXHU2OTdlO1xcdWMwMDBcXHVkODM1XFx1ZGQzMnJhdmVcXHU4MDNiXFx4ZjlcXHU0MGY5XFx1MDE2MVxcdTM4MjdcXHUzODMxclxcdTAxMDBsclxcdTM4MmNcXHUzODJlXFx4YmJcXHUwOTU3XFx4YmJcXHUxMDgzbGs7XFx1NjU4MFxcdTAxMDBjdFxcdTM4MzlcXHUzODRkXFx1MDI2ZlxcdTM4M2ZcXDBcXDBcXHUzODRhcm5cXHUwMTAwO2VcXHUzODQ1XFx1Mzg0NlxcdTYzMWNyXFx4YmJcXHUzODQ2b3A7XFx1NjMwZnJpO1xcdTY1ZjhcXHUwMTAwYWxcXHUzODU2XFx1Mzg1YWNyO1xcdTQxNmJcXHU4MGJiXFx4YThcXHUwMzQ5XFx1MDEwMGdwXFx1Mzg2MlxcdTM4NjZvbjtcXHU0MTczZjtcXHVjMDAwXFx1ZDgzNVxcdWRkNjZcXHUwMzAwYWRobHN1XFx1MTE0YlxcdTM4NzhcXHUzODdkXFx1MTM3MlxcdTM4OTFcXHUzOGEwb3duXFx4ZTFcXHUxM2IzYXJwb29uXFx1MDEwMGxyXFx1Mzg4OFxcdTM4OGNlZlxceGY0XFx1MzgyZGlnaFxceGY0XFx1MzgyZmlcXHUwMTgwO2hsXFx1Mzg5OVxcdTM4OWFcXHUzODljXFx1NDNjNVxceGJiXFx1MTNmYW9uXFx4YmJcXHUzODlhcGFycm93cztcXHU2MWM4XFx1MDE4MGNpdFxcdTM4YjBcXHUzOGM0XFx1MzhjOFxcdTAyNmZcXHUzOGI2XFwwXFwwXFx1MzhjMXJuXFx1MDEwMDtlXFx1MzhiY1xcdTM4YmRcXHU2MzFkclxceGJiXFx1MzhiZG9wO1xcdTYzMGVuZztcXHU0MTZmcmk7XFx1NjVmOWNyO1xcdWMwMDBcXHVkODM1XFx1ZGNjYVxcdTAxODBkaXJcXHUzOGQ5XFx1MzhkZFxcdTM4ZTJvdDtcXHU2MmYwbGRlO1xcdTQxNjlpXFx1MDEwMDtmXFx1MzczMFxcdTM4ZThcXHhiYlxcdTE4MTNcXHUwMTAwYW1cXHUzOGVmXFx1MzhmMnJcXHhmMlxcdTM4YThsXFx1ODAzYlxceGZjXFx1NDBmY2FuZ2xlO1xcdTY5YTdcXHUwNzgwQUJEYWNkZWZsbm9wcnN6XFx1MzkxY1xcdTM5MWZcXHUzOTI5XFx1MzkyZFxcdTM5YjVcXHUzOWI4XFx1MzliZFxcdTM5ZGZcXHUzOWU0XFx1MzllOFxcdTM5ZjNcXHUzOWY5XFx1MzlmZFxcdTNhMDFcXHUzYTIwclxceGYyXFx1MDNmN2FyXFx1MDEwMDt2XFx1MzkyNlxcdTM5MjdcXHU2YWU4O1xcdTZhZTlhc1xceGU4XFx1MDNlMVxcdTAxMDBuclxcdTM5MzJcXHUzOTM3Z3J0O1xcdTY5OWNcXHUwMzgwZWtucHJzdFxcdTM0ZTNcXHUzOTQ2XFx1Mzk0YlxcdTM5NTJcXHUzOTVkXFx1Mzk2NFxcdTM5OTZhcHBcXHhlMVxcdTI0MTVvdGhpblxceGU3XFx1MWU5NlxcdTAxODBoaXJcXHUzNGViXFx1MmVjOFxcdTM5NTlvcFxceGY0XFx1MmZiNVxcdTAxMDA7aFxcdTEzYjdcXHUzOTYyXFx4ZWZcXHUzMThkXFx1MDEwMGl1XFx1Mzk2OVxcdTM5NmRnbVxceGUxXFx1MzNiM1xcdTAxMDBicFxcdTM5NzJcXHUzOTg0c2V0bmVxXFx1MDEwMDtxXFx1Mzk3ZFxcdTM5ODBcXHVjMDAwXFx1MjI4YVxcdWZlMDA7XFx1YzAwMFxcdTJhY2JcXHVmZTAwc2V0bmVxXFx1MDEwMDtxXFx1Mzk4ZlxcdTM5OTJcXHVjMDAwXFx1MjI4YlxcdWZlMDA7XFx1YzAwMFxcdTJhY2NcXHVmZTAwXFx1MDEwMGhyXFx1Mzk5YlxcdTM5OWZldFxceGUxXFx1MzY5Y2lhbmdsZVxcdTAxMDBsclxcdTM5YWFcXHUzOWFmZWZ0XFx4YmJcXHUwOTI1aWdodFxceGJiXFx1MTA1MXk7XFx1NDQzMmFzaFxceGJiXFx1MTAzNlxcdTAxODBlbHJcXHUzOWM0XFx1MzlkMlxcdTM5ZDdcXHUwMTgwO2JlXFx1MmRlYVxcdTM5Y2JcXHUzOWNmYXI7XFx1NjJiYnE7XFx1NjI1YWxpcDtcXHU2MmVlXFx1MDEwMGJ0XFx1MzlkY1xcdTE0NjhhXFx4ZjJcXHUxNDY5cjtcXHVjMDAwXFx1ZDgzNVxcdWRkMzN0clxceGU5XFx1MzlhZXN1XFx1MDEwMGJwXFx1MzllZlxcdTM5ZjFcXHhiYlxcdTBkMWNcXHhiYlxcdTBkNTlwZjtcXHVjMDAwXFx1ZDgzNVxcdWRkNjdyb1xceGYwXFx1MGVmYnRyXFx4ZTlcXHUzOWI0XFx1MDEwMGN1XFx1M2EwNlxcdTNhMGJyO1xcdWMwMDBcXHVkODM1XFx1ZGNjYlxcdTAxMDBicFxcdTNhMTBcXHUzYTE4blxcdTAxMDBFZVxcdTM5ODBcXHUzYTE2XFx4YmJcXHUzOTdlblxcdTAxMDBFZVxcdTM5OTJcXHUzYTFlXFx4YmJcXHUzOTkwaWd6YWc7XFx1Njk5YVxcdTAzODBjZWZvcHJzXFx1M2EzNlxcdTNhM2JcXHUzYTU2XFx1M2E1YlxcdTNhNTRcXHUzYTYxXFx1M2E2YWlyYztcXHU0MTc1XFx1MDEwMGRpXFx1M2E0MFxcdTNhNTFcXHUwMTAwYmdcXHUzYTQ1XFx1M2E0OWFyO1xcdTZhNWZlXFx1MDEwMDtxXFx1MTVmYVxcdTNhNGY7XFx1NjI1OWVycDtcXHU2MTE4cjtcXHVjMDAwXFx1ZDgzNVxcdWRkMzRwZjtcXHVjMDAwXFx1ZDgzNVxcdWRkNjhcXHUwMTAwO2VcXHUxNDc5XFx1M2E2NmF0XFx4ZThcXHUxNDc5Y3I7XFx1YzAwMFxcdWQ4MzVcXHVkY2NjXFx1MGFlM1xcdTE3OGVcXHUzYTg3XFwwXFx1M2E4YlxcMFxcdTNhOTBcXHUzYTliXFwwXFwwXFx1M2E5ZFxcdTNhYThcXHUzYWFiXFx1M2FhZlxcMFxcMFxcdTNhYzNcXHUzYWNlXFwwXFx1M2FkOFxcdTE3ZGNcXHUxN2RmdHJcXHhlOVxcdTE3ZDFyO1xcdWMwMDBcXHVkODM1XFx1ZGQzNVxcdTAxMDBBYVxcdTNhOTRcXHUzYTk3clxceGYyXFx1MDNjM3JcXHhmMlxcdTA5ZjY7XFx1NDNiZVxcdTAxMDBBYVxcdTNhYTFcXHUzYWE0clxceGYyXFx1MDNiOHJcXHhmMlxcdTA5ZWJhXFx4ZjBcXHUyNzEzaXM7XFx1NjJmYlxcdTAxODBkcHRcXHUxN2E0XFx1M2FiNVxcdTNhYmVcXHUwMTAwZmxcXHUzYWJhXFx1MTdhOTtcXHVjMDAwXFx1ZDgzNVxcdWRkNjlpbVxceGU1XFx1MTdiMlxcdTAxMDBBYVxcdTNhYzdcXHUzYWNhclxceGYyXFx1MDNjZXJcXHhmMlxcdTBhMDFcXHUwMTAwY3FcXHUzYWQyXFx1MTdiOHI7XFx1YzAwMFxcdWQ4MzVcXHVkY2NkXFx1MDEwMHB0XFx1MTdkNlxcdTNhZGNyXFx4ZTlcXHUxN2Q0XFx1MDQwMGFjZWZpb3N1XFx1M2FmMFxcdTNhZmRcXHUzYjA4XFx1M2IwY1xcdTNiMTFcXHUzYjE1XFx1M2IxYlxcdTNiMjFjXFx1MDEwMHV5XFx1M2FmNlxcdTNhZmJ0ZVxcdTgwM2JcXHhmZFxcdTQwZmQ7XFx1NDQ0ZlxcdTAxMDBpeVxcdTNiMDJcXHUzYjA2cmM7XFx1NDE3NztcXHU0NDRiblxcdTgwM2JcXHhhNVxcdTQwYTVyO1xcdWMwMDBcXHVkODM1XFx1ZGQzNmN5O1xcdTQ0NTdwZjtcXHVjMDAwXFx1ZDgzNVxcdWRkNmFjcjtcXHVjMDAwXFx1ZDgzNVxcdWRjY2VcXHUwMTAwY21cXHUzYjI2XFx1M2IyOXk7XFx1NDQ0ZWxcXHU4MDNiXFx4ZmZcXHU0MGZmXFx1MDUwMGFjZGVmaGlvc3dcXHUzYjQyXFx1M2I0OFxcdTNiNTRcXHUzYjU4XFx1M2I2NFxcdTNiNjlcXHUzYjZkXFx1M2I3NFxcdTNiN2FcXHUzYjgwY3V0ZTtcXHU0MTdhXFx1MDEwMGF5XFx1M2I0ZFxcdTNiNTJyb247XFx1NDE3ZTtcXHU0NDM3b3Q7XFx1NDE3Y1xcdTAxMDBldFxcdTNiNWRcXHUzYjYxdHJcXHhlNlxcdTE1NWZhO1xcdTQzYjZyO1xcdWMwMDBcXHVkODM1XFx1ZGQzN2N5O1xcdTQ0MzZncmFycjtcXHU2MWRkcGY7XFx1YzAwMFxcdWQ4MzVcXHVkZDZiY3I7XFx1YzAwMFxcdWQ4MzVcXHVkY2NmXFx1MDEwMGpuXFx1M2I4NVxcdTNiODc7XFx1NjAwZGo7XFx1NjAwY1wiXG4gICAgLnNwbGl0KFwiXCIpXG4gICAgLm1hcChmdW5jdGlvbiAoYykgeyByZXR1cm4gYy5jaGFyQ29kZUF0KDApOyB9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWNvZGUtZGF0YS1odG1sLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuLy8gR2VuZXJhdGVkIHVzaW5nIHNjcmlwdHMvd3JpdGUtZGVjb2RlLW1hcC50c1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gbmV3IFVpbnQxNkFycmF5KFxuLy8gcHJldHRpZXItaWdub3JlXG5cIlxcdTAyMDBhZ2xxXFx0XFx4MTVcXHgxOFxceDFiXFx1MDI2ZFxceDBmXFwwXFwwXFx4MTJwO1xcdTQwMjZvcztcXHU0MDI3dDtcXHU0MDNldDtcXHU0MDNjdW90O1xcdTQwMjJcIlxuICAgIC5zcGxpdChcIlwiKVxuICAgIC5tYXAoZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGMuY2hhckNvZGVBdCgwKTsgfSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVjb2RlLWRhdGEteG1sLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuLy8gR2VuZXJhdGVkIHVzaW5nIHNjcmlwdHMvd3JpdGUtZW5jb2RlLW1hcC50c1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZnVuY3Rpb24gcmVzdG9yZURpZmYoYXJyKSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgYXJyW2ldWzBdICs9IGFycltpIC0gMV1bMF0gKyAxO1xuICAgIH1cbiAgICByZXR1cm4gYXJyO1xufVxuLy8gcHJldHRpZXItaWdub3JlXG5leHBvcnRzLmRlZmF1bHQgPSBuZXcgTWFwKC8qICNfX1BVUkVfXyAqLyByZXN0b3JlRGlmZihbWzksIFwiJlRhYjtcIl0sIFswLCBcIiZOZXdMaW5lO1wiXSwgWzIyLCBcIiZleGNsO1wiXSwgWzAsIFwiJnF1b3Q7XCJdLCBbMCwgXCImbnVtO1wiXSwgWzAsIFwiJmRvbGxhcjtcIl0sIFswLCBcIiZwZXJjbnQ7XCJdLCBbMCwgXCImYW1wO1wiXSwgWzAsIFwiJmFwb3M7XCJdLCBbMCwgXCImbHBhcjtcIl0sIFswLCBcIiZycGFyO1wiXSwgWzAsIFwiJmFzdDtcIl0sIFswLCBcIiZwbHVzO1wiXSwgWzAsIFwiJmNvbW1hO1wiXSwgWzEsIFwiJnBlcmlvZDtcIl0sIFswLCBcIiZzb2w7XCJdLCBbMTAsIFwiJmNvbG9uO1wiXSwgWzAsIFwiJnNlbWk7XCJdLCBbMCwgeyB2OiBcIiZsdDtcIiwgbjogODQwMiwgbzogXCImbnZsdDtcIiB9XSwgWzAsIHsgdjogXCImZXF1YWxzO1wiLCBuOiA4NDIxLCBvOiBcIiZibmU7XCIgfV0sIFswLCB7IHY6IFwiJmd0O1wiLCBuOiA4NDAyLCBvOiBcIiZudmd0O1wiIH1dLCBbMCwgXCImcXVlc3Q7XCJdLCBbMCwgXCImY29tbWF0O1wiXSwgWzI2LCBcIiZsYnJhY2s7XCJdLCBbMCwgXCImYnNvbDtcIl0sIFswLCBcIiZyYnJhY2s7XCJdLCBbMCwgXCImSGF0O1wiXSwgWzAsIFwiJmxvd2JhcjtcIl0sIFswLCBcIiZEaWFjcml0aWNhbEdyYXZlO1wiXSwgWzUsIHsgbjogMTA2LCBvOiBcIiZmamxpZztcIiB9XSwgWzIwLCBcIiZsYnJhY2U7XCJdLCBbMCwgXCImdmVyYmFyO1wiXSwgWzAsIFwiJnJicmFjZTtcIl0sIFszNCwgXCImbmJzcDtcIl0sIFswLCBcIiZpZXhjbDtcIl0sIFswLCBcIiZjZW50O1wiXSwgWzAsIFwiJnBvdW5kO1wiXSwgWzAsIFwiJmN1cnJlbjtcIl0sIFswLCBcIiZ5ZW47XCJdLCBbMCwgXCImYnJ2YmFyO1wiXSwgWzAsIFwiJnNlY3Q7XCJdLCBbMCwgXCImZGllO1wiXSwgWzAsIFwiJmNvcHk7XCJdLCBbMCwgXCImb3JkZjtcIl0sIFswLCBcIiZsYXF1bztcIl0sIFswLCBcIiZub3Q7XCJdLCBbMCwgXCImc2h5O1wiXSwgWzAsIFwiJmNpcmNsZWRSO1wiXSwgWzAsIFwiJm1hY3I7XCJdLCBbMCwgXCImZGVnO1wiXSwgWzAsIFwiJlBsdXNNaW51cztcIl0sIFswLCBcIiZzdXAyO1wiXSwgWzAsIFwiJnN1cDM7XCJdLCBbMCwgXCImYWN1dGU7XCJdLCBbMCwgXCImbWljcm87XCJdLCBbMCwgXCImcGFyYTtcIl0sIFswLCBcIiZjZW50ZXJkb3Q7XCJdLCBbMCwgXCImY2VkaWw7XCJdLCBbMCwgXCImc3VwMTtcIl0sIFswLCBcIiZvcmRtO1wiXSwgWzAsIFwiJnJhcXVvO1wiXSwgWzAsIFwiJmZyYWMxNDtcIl0sIFswLCBcIiZmcmFjMTI7XCJdLCBbMCwgXCImZnJhYzM0O1wiXSwgWzAsIFwiJmlxdWVzdDtcIl0sIFswLCBcIiZBZ3JhdmU7XCJdLCBbMCwgXCImQWFjdXRlO1wiXSwgWzAsIFwiJkFjaXJjO1wiXSwgWzAsIFwiJkF0aWxkZTtcIl0sIFswLCBcIiZBdW1sO1wiXSwgWzAsIFwiJmFuZ3N0O1wiXSwgWzAsIFwiJkFFbGlnO1wiXSwgWzAsIFwiJkNjZWRpbDtcIl0sIFswLCBcIiZFZ3JhdmU7XCJdLCBbMCwgXCImRWFjdXRlO1wiXSwgWzAsIFwiJkVjaXJjO1wiXSwgWzAsIFwiJkV1bWw7XCJdLCBbMCwgXCImSWdyYXZlO1wiXSwgWzAsIFwiJklhY3V0ZTtcIl0sIFswLCBcIiZJY2lyYztcIl0sIFswLCBcIiZJdW1sO1wiXSwgWzAsIFwiJkVUSDtcIl0sIFswLCBcIiZOdGlsZGU7XCJdLCBbMCwgXCImT2dyYXZlO1wiXSwgWzAsIFwiJk9hY3V0ZTtcIl0sIFswLCBcIiZPY2lyYztcIl0sIFswLCBcIiZPdGlsZGU7XCJdLCBbMCwgXCImT3VtbDtcIl0sIFswLCBcIiZ0aW1lcztcIl0sIFswLCBcIiZPc2xhc2g7XCJdLCBbMCwgXCImVWdyYXZlO1wiXSwgWzAsIFwiJlVhY3V0ZTtcIl0sIFswLCBcIiZVY2lyYztcIl0sIFswLCBcIiZVdW1sO1wiXSwgWzAsIFwiJllhY3V0ZTtcIl0sIFswLCBcIiZUSE9STjtcIl0sIFswLCBcIiZzemxpZztcIl0sIFswLCBcIiZhZ3JhdmU7XCJdLCBbMCwgXCImYWFjdXRlO1wiXSwgWzAsIFwiJmFjaXJjO1wiXSwgWzAsIFwiJmF0aWxkZTtcIl0sIFswLCBcIiZhdW1sO1wiXSwgWzAsIFwiJmFyaW5nO1wiXSwgWzAsIFwiJmFlbGlnO1wiXSwgWzAsIFwiJmNjZWRpbDtcIl0sIFswLCBcIiZlZ3JhdmU7XCJdLCBbMCwgXCImZWFjdXRlO1wiXSwgWzAsIFwiJmVjaXJjO1wiXSwgWzAsIFwiJmV1bWw7XCJdLCBbMCwgXCImaWdyYXZlO1wiXSwgWzAsIFwiJmlhY3V0ZTtcIl0sIFswLCBcIiZpY2lyYztcIl0sIFswLCBcIiZpdW1sO1wiXSwgWzAsIFwiJmV0aDtcIl0sIFswLCBcIiZudGlsZGU7XCJdLCBbMCwgXCImb2dyYXZlO1wiXSwgWzAsIFwiJm9hY3V0ZTtcIl0sIFswLCBcIiZvY2lyYztcIl0sIFswLCBcIiZvdGlsZGU7XCJdLCBbMCwgXCImb3VtbDtcIl0sIFswLCBcIiZkaXY7XCJdLCBbMCwgXCImb3NsYXNoO1wiXSwgWzAsIFwiJnVncmF2ZTtcIl0sIFswLCBcIiZ1YWN1dGU7XCJdLCBbMCwgXCImdWNpcmM7XCJdLCBbMCwgXCImdXVtbDtcIl0sIFswLCBcIiZ5YWN1dGU7XCJdLCBbMCwgXCImdGhvcm47XCJdLCBbMCwgXCImeXVtbDtcIl0sIFswLCBcIiZBbWFjcjtcIl0sIFswLCBcIiZhbWFjcjtcIl0sIFswLCBcIiZBYnJldmU7XCJdLCBbMCwgXCImYWJyZXZlO1wiXSwgWzAsIFwiJkFvZ29uO1wiXSwgWzAsIFwiJmFvZ29uO1wiXSwgWzAsIFwiJkNhY3V0ZTtcIl0sIFswLCBcIiZjYWN1dGU7XCJdLCBbMCwgXCImQ2NpcmM7XCJdLCBbMCwgXCImY2NpcmM7XCJdLCBbMCwgXCImQ2RvdDtcIl0sIFswLCBcIiZjZG90O1wiXSwgWzAsIFwiJkNjYXJvbjtcIl0sIFswLCBcIiZjY2Fyb247XCJdLCBbMCwgXCImRGNhcm9uO1wiXSwgWzAsIFwiJmRjYXJvbjtcIl0sIFswLCBcIiZEc3Ryb2s7XCJdLCBbMCwgXCImZHN0cm9rO1wiXSwgWzAsIFwiJkVtYWNyO1wiXSwgWzAsIFwiJmVtYWNyO1wiXSwgWzIsIFwiJkVkb3Q7XCJdLCBbMCwgXCImZWRvdDtcIl0sIFswLCBcIiZFb2dvbjtcIl0sIFswLCBcIiZlb2dvbjtcIl0sIFswLCBcIiZFY2Fyb247XCJdLCBbMCwgXCImZWNhcm9uO1wiXSwgWzAsIFwiJkdjaXJjO1wiXSwgWzAsIFwiJmdjaXJjO1wiXSwgWzAsIFwiJkdicmV2ZTtcIl0sIFswLCBcIiZnYnJldmU7XCJdLCBbMCwgXCImR2RvdDtcIl0sIFswLCBcIiZnZG90O1wiXSwgWzAsIFwiJkdjZWRpbDtcIl0sIFsxLCBcIiZIY2lyYztcIl0sIFswLCBcIiZoY2lyYztcIl0sIFswLCBcIiZIc3Ryb2s7XCJdLCBbMCwgXCImaHN0cm9rO1wiXSwgWzAsIFwiJkl0aWxkZTtcIl0sIFswLCBcIiZpdGlsZGU7XCJdLCBbMCwgXCImSW1hY3I7XCJdLCBbMCwgXCImaW1hY3I7XCJdLCBbMiwgXCImSW9nb247XCJdLCBbMCwgXCImaW9nb247XCJdLCBbMCwgXCImSWRvdDtcIl0sIFswLCBcIiZpbWF0aDtcIl0sIFswLCBcIiZJSmxpZztcIl0sIFswLCBcIiZpamxpZztcIl0sIFswLCBcIiZKY2lyYztcIl0sIFswLCBcIiZqY2lyYztcIl0sIFswLCBcIiZLY2VkaWw7XCJdLCBbMCwgXCIma2NlZGlsO1wiXSwgWzAsIFwiJmtncmVlbjtcIl0sIFswLCBcIiZMYWN1dGU7XCJdLCBbMCwgXCImbGFjdXRlO1wiXSwgWzAsIFwiJkxjZWRpbDtcIl0sIFswLCBcIiZsY2VkaWw7XCJdLCBbMCwgXCImTGNhcm9uO1wiXSwgWzAsIFwiJmxjYXJvbjtcIl0sIFswLCBcIiZMbWlkb3Q7XCJdLCBbMCwgXCImbG1pZG90O1wiXSwgWzAsIFwiJkxzdHJvaztcIl0sIFswLCBcIiZsc3Ryb2s7XCJdLCBbMCwgXCImTmFjdXRlO1wiXSwgWzAsIFwiJm5hY3V0ZTtcIl0sIFswLCBcIiZOY2VkaWw7XCJdLCBbMCwgXCImbmNlZGlsO1wiXSwgWzAsIFwiJk5jYXJvbjtcIl0sIFswLCBcIiZuY2Fyb247XCJdLCBbMCwgXCImbmFwb3M7XCJdLCBbMCwgXCImRU5HO1wiXSwgWzAsIFwiJmVuZztcIl0sIFswLCBcIiZPbWFjcjtcIl0sIFswLCBcIiZvbWFjcjtcIl0sIFsyLCBcIiZPZGJsYWM7XCJdLCBbMCwgXCImb2RibGFjO1wiXSwgWzAsIFwiJk9FbGlnO1wiXSwgWzAsIFwiJm9lbGlnO1wiXSwgWzAsIFwiJlJhY3V0ZTtcIl0sIFswLCBcIiZyYWN1dGU7XCJdLCBbMCwgXCImUmNlZGlsO1wiXSwgWzAsIFwiJnJjZWRpbDtcIl0sIFswLCBcIiZSY2Fyb247XCJdLCBbMCwgXCImcmNhcm9uO1wiXSwgWzAsIFwiJlNhY3V0ZTtcIl0sIFswLCBcIiZzYWN1dGU7XCJdLCBbMCwgXCImU2NpcmM7XCJdLCBbMCwgXCImc2NpcmM7XCJdLCBbMCwgXCImU2NlZGlsO1wiXSwgWzAsIFwiJnNjZWRpbDtcIl0sIFswLCBcIiZTY2Fyb247XCJdLCBbMCwgXCImc2Nhcm9uO1wiXSwgWzAsIFwiJlRjZWRpbDtcIl0sIFswLCBcIiZ0Y2VkaWw7XCJdLCBbMCwgXCImVGNhcm9uO1wiXSwgWzAsIFwiJnRjYXJvbjtcIl0sIFswLCBcIiZUc3Ryb2s7XCJdLCBbMCwgXCImdHN0cm9rO1wiXSwgWzAsIFwiJlV0aWxkZTtcIl0sIFswLCBcIiZ1dGlsZGU7XCJdLCBbMCwgXCImVW1hY3I7XCJdLCBbMCwgXCImdW1hY3I7XCJdLCBbMCwgXCImVWJyZXZlO1wiXSwgWzAsIFwiJnVicmV2ZTtcIl0sIFswLCBcIiZVcmluZztcIl0sIFswLCBcIiZ1cmluZztcIl0sIFswLCBcIiZVZGJsYWM7XCJdLCBbMCwgXCImdWRibGFjO1wiXSwgWzAsIFwiJlVvZ29uO1wiXSwgWzAsIFwiJnVvZ29uO1wiXSwgWzAsIFwiJldjaXJjO1wiXSwgWzAsIFwiJndjaXJjO1wiXSwgWzAsIFwiJlljaXJjO1wiXSwgWzAsIFwiJnljaXJjO1wiXSwgWzAsIFwiJll1bWw7XCJdLCBbMCwgXCImWmFjdXRlO1wiXSwgWzAsIFwiJnphY3V0ZTtcIl0sIFswLCBcIiZaZG90O1wiXSwgWzAsIFwiJnpkb3Q7XCJdLCBbMCwgXCImWmNhcm9uO1wiXSwgWzAsIFwiJnpjYXJvbjtcIl0sIFsxOSwgXCImZm5vZjtcIl0sIFszNCwgXCImaW1wZWQ7XCJdLCBbNjMsIFwiJmdhY3V0ZTtcIl0sIFs2NSwgXCImam1hdGg7XCJdLCBbMTQyLCBcIiZjaXJjO1wiXSwgWzAsIFwiJmNhcm9uO1wiXSwgWzE2LCBcIiZicmV2ZTtcIl0sIFswLCBcIiZEaWFjcml0aWNhbERvdDtcIl0sIFswLCBcIiZyaW5nO1wiXSwgWzAsIFwiJm9nb247XCJdLCBbMCwgXCImRGlhY3JpdGljYWxUaWxkZTtcIl0sIFswLCBcIiZkYmxhYztcIl0sIFs1MSwgXCImRG93bkJyZXZlO1wiXSwgWzEyNywgXCImQWxwaGE7XCJdLCBbMCwgXCImQmV0YTtcIl0sIFswLCBcIiZHYW1tYTtcIl0sIFswLCBcIiZEZWx0YTtcIl0sIFswLCBcIiZFcHNpbG9uO1wiXSwgWzAsIFwiJlpldGE7XCJdLCBbMCwgXCImRXRhO1wiXSwgWzAsIFwiJlRoZXRhO1wiXSwgWzAsIFwiJklvdGE7XCJdLCBbMCwgXCImS2FwcGE7XCJdLCBbMCwgXCImTGFtYmRhO1wiXSwgWzAsIFwiJk11O1wiXSwgWzAsIFwiJk51O1wiXSwgWzAsIFwiJlhpO1wiXSwgWzAsIFwiJk9taWNyb247XCJdLCBbMCwgXCImUGk7XCJdLCBbMCwgXCImUmhvO1wiXSwgWzEsIFwiJlNpZ21hO1wiXSwgWzAsIFwiJlRhdTtcIl0sIFswLCBcIiZVcHNpbG9uO1wiXSwgWzAsIFwiJlBoaTtcIl0sIFswLCBcIiZDaGk7XCJdLCBbMCwgXCImUHNpO1wiXSwgWzAsIFwiJm9obTtcIl0sIFs3LCBcIiZhbHBoYTtcIl0sIFswLCBcIiZiZXRhO1wiXSwgWzAsIFwiJmdhbW1hO1wiXSwgWzAsIFwiJmRlbHRhO1wiXSwgWzAsIFwiJmVwc2k7XCJdLCBbMCwgXCImemV0YTtcIl0sIFswLCBcIiZldGE7XCJdLCBbMCwgXCImdGhldGE7XCJdLCBbMCwgXCImaW90YTtcIl0sIFswLCBcIiZrYXBwYTtcIl0sIFswLCBcIiZsYW1iZGE7XCJdLCBbMCwgXCImbXU7XCJdLCBbMCwgXCImbnU7XCJdLCBbMCwgXCImeGk7XCJdLCBbMCwgXCImb21pY3JvbjtcIl0sIFswLCBcIiZwaTtcIl0sIFswLCBcIiZyaG87XCJdLCBbMCwgXCImc2lnbWFmO1wiXSwgWzAsIFwiJnNpZ21hO1wiXSwgWzAsIFwiJnRhdTtcIl0sIFswLCBcIiZ1cHNpO1wiXSwgWzAsIFwiJnBoaTtcIl0sIFswLCBcIiZjaGk7XCJdLCBbMCwgXCImcHNpO1wiXSwgWzAsIFwiJm9tZWdhO1wiXSwgWzcsIFwiJnRoZXRhc3ltO1wiXSwgWzAsIFwiJlVwc2k7XCJdLCBbMiwgXCImcGhpdjtcIl0sIFswLCBcIiZwaXY7XCJdLCBbNSwgXCImR2FtbWFkO1wiXSwgWzAsIFwiJmRpZ2FtbWE7XCJdLCBbMTgsIFwiJmthcHBhdjtcIl0sIFswLCBcIiZyaG92O1wiXSwgWzMsIFwiJmVwc2l2O1wiXSwgWzAsIFwiJmJhY2tlcHNpbG9uO1wiXSwgWzEwLCBcIiZJT2N5O1wiXSwgWzAsIFwiJkRKY3k7XCJdLCBbMCwgXCImR0pjeTtcIl0sIFswLCBcIiZKdWtjeTtcIl0sIFswLCBcIiZEU2N5O1wiXSwgWzAsIFwiJkl1a2N5O1wiXSwgWzAsIFwiJllJY3k7XCJdLCBbMCwgXCImSnNlcmN5O1wiXSwgWzAsIFwiJkxKY3k7XCJdLCBbMCwgXCImTkpjeTtcIl0sIFswLCBcIiZUU0hjeTtcIl0sIFswLCBcIiZLSmN5O1wiXSwgWzEsIFwiJlVicmN5O1wiXSwgWzAsIFwiJkRaY3k7XCJdLCBbMCwgXCImQWN5O1wiXSwgWzAsIFwiJkJjeTtcIl0sIFswLCBcIiZWY3k7XCJdLCBbMCwgXCImR2N5O1wiXSwgWzAsIFwiJkRjeTtcIl0sIFswLCBcIiZJRWN5O1wiXSwgWzAsIFwiJlpIY3k7XCJdLCBbMCwgXCImWmN5O1wiXSwgWzAsIFwiJkljeTtcIl0sIFswLCBcIiZKY3k7XCJdLCBbMCwgXCImS2N5O1wiXSwgWzAsIFwiJkxjeTtcIl0sIFswLCBcIiZNY3k7XCJdLCBbMCwgXCImTmN5O1wiXSwgWzAsIFwiJk9jeTtcIl0sIFswLCBcIiZQY3k7XCJdLCBbMCwgXCImUmN5O1wiXSwgWzAsIFwiJlNjeTtcIl0sIFswLCBcIiZUY3k7XCJdLCBbMCwgXCImVWN5O1wiXSwgWzAsIFwiJkZjeTtcIl0sIFswLCBcIiZLSGN5O1wiXSwgWzAsIFwiJlRTY3k7XCJdLCBbMCwgXCImQ0hjeTtcIl0sIFswLCBcIiZTSGN5O1wiXSwgWzAsIFwiJlNIQ0hjeTtcIl0sIFswLCBcIiZIQVJEY3k7XCJdLCBbMCwgXCImWWN5O1wiXSwgWzAsIFwiJlNPRlRjeTtcIl0sIFswLCBcIiZFY3k7XCJdLCBbMCwgXCImWVVjeTtcIl0sIFswLCBcIiZZQWN5O1wiXSwgWzAsIFwiJmFjeTtcIl0sIFswLCBcIiZiY3k7XCJdLCBbMCwgXCImdmN5O1wiXSwgWzAsIFwiJmdjeTtcIl0sIFswLCBcIiZkY3k7XCJdLCBbMCwgXCImaWVjeTtcIl0sIFswLCBcIiZ6aGN5O1wiXSwgWzAsIFwiJnpjeTtcIl0sIFswLCBcIiZpY3k7XCJdLCBbMCwgXCImamN5O1wiXSwgWzAsIFwiJmtjeTtcIl0sIFswLCBcIiZsY3k7XCJdLCBbMCwgXCImbWN5O1wiXSwgWzAsIFwiJm5jeTtcIl0sIFswLCBcIiZvY3k7XCJdLCBbMCwgXCImcGN5O1wiXSwgWzAsIFwiJnJjeTtcIl0sIFswLCBcIiZzY3k7XCJdLCBbMCwgXCImdGN5O1wiXSwgWzAsIFwiJnVjeTtcIl0sIFswLCBcIiZmY3k7XCJdLCBbMCwgXCIma2hjeTtcIl0sIFswLCBcIiZ0c2N5O1wiXSwgWzAsIFwiJmNoY3k7XCJdLCBbMCwgXCImc2hjeTtcIl0sIFswLCBcIiZzaGNoY3k7XCJdLCBbMCwgXCImaGFyZGN5O1wiXSwgWzAsIFwiJnljeTtcIl0sIFswLCBcIiZzb2Z0Y3k7XCJdLCBbMCwgXCImZWN5O1wiXSwgWzAsIFwiJnl1Y3k7XCJdLCBbMCwgXCImeWFjeTtcIl0sIFsxLCBcIiZpb2N5O1wiXSwgWzAsIFwiJmRqY3k7XCJdLCBbMCwgXCImZ2pjeTtcIl0sIFswLCBcIiZqdWtjeTtcIl0sIFswLCBcIiZkc2N5O1wiXSwgWzAsIFwiJml1a2N5O1wiXSwgWzAsIFwiJnlpY3k7XCJdLCBbMCwgXCImanNlcmN5O1wiXSwgWzAsIFwiJmxqY3k7XCJdLCBbMCwgXCImbmpjeTtcIl0sIFswLCBcIiZ0c2hjeTtcIl0sIFswLCBcIiZramN5O1wiXSwgWzEsIFwiJnVicmN5O1wiXSwgWzAsIFwiJmR6Y3k7XCJdLCBbNzA3NCwgXCImZW5zcDtcIl0sIFswLCBcIiZlbXNwO1wiXSwgWzAsIFwiJmVtc3AxMztcIl0sIFswLCBcIiZlbXNwMTQ7XCJdLCBbMSwgXCImbnVtc3A7XCJdLCBbMCwgXCImcHVuY3NwO1wiXSwgWzAsIFwiJlRoaW5TcGFjZTtcIl0sIFswLCBcIiZoYWlyc3A7XCJdLCBbMCwgXCImTmVnYXRpdmVNZWRpdW1TcGFjZTtcIl0sIFswLCBcIiZ6d25qO1wiXSwgWzAsIFwiJnp3ajtcIl0sIFswLCBcIiZscm07XCJdLCBbMCwgXCImcmxtO1wiXSwgWzAsIFwiJmRhc2g7XCJdLCBbMiwgXCImbmRhc2g7XCJdLCBbMCwgXCImbWRhc2g7XCJdLCBbMCwgXCImaG9yYmFyO1wiXSwgWzAsIFwiJlZlcmJhcjtcIl0sIFsxLCBcIiZsc3F1bztcIl0sIFswLCBcIiZDbG9zZUN1cmx5UXVvdGU7XCJdLCBbMCwgXCImbHNxdW9yO1wiXSwgWzEsIFwiJmxkcXVvO1wiXSwgWzAsIFwiJkNsb3NlQ3VybHlEb3VibGVRdW90ZTtcIl0sIFswLCBcIiZiZHF1bztcIl0sIFsxLCBcIiZkYWdnZXI7XCJdLCBbMCwgXCImRGFnZ2VyO1wiXSwgWzAsIFwiJmJ1bGw7XCJdLCBbMiwgXCImbmxkcjtcIl0sIFswLCBcIiZoZWxsaXA7XCJdLCBbOSwgXCImcGVybWlsO1wiXSwgWzAsIFwiJnBlcnRlbms7XCJdLCBbMCwgXCImcHJpbWU7XCJdLCBbMCwgXCImUHJpbWU7XCJdLCBbMCwgXCImdHByaW1lO1wiXSwgWzAsIFwiJmJhY2twcmltZTtcIl0sIFszLCBcIiZsc2FxdW87XCJdLCBbMCwgXCImcnNhcXVvO1wiXSwgWzMsIFwiJm9saW5lO1wiXSwgWzIsIFwiJmNhcmV0O1wiXSwgWzEsIFwiJmh5YnVsbDtcIl0sIFswLCBcIiZmcmFzbDtcIl0sIFsxMCwgXCImYnNlbWk7XCJdLCBbNywgXCImcXByaW1lO1wiXSwgWzcsIHsgdjogXCImTWVkaXVtU3BhY2U7XCIsIG46IDgyMDIsIG86IFwiJlRoaWNrU3BhY2U7XCIgfV0sIFswLCBcIiZOb0JyZWFrO1wiXSwgWzAsIFwiJmFmO1wiXSwgWzAsIFwiJkludmlzaWJsZVRpbWVzO1wiXSwgWzAsIFwiJmljO1wiXSwgWzcyLCBcIiZldXJvO1wiXSwgWzQ2LCBcIiZ0ZG90O1wiXSwgWzAsIFwiJkRvdERvdDtcIl0sIFszNywgXCImY29tcGxleGVzO1wiXSwgWzIsIFwiJmluY2FyZTtcIl0sIFs0LCBcIiZnc2NyO1wiXSwgWzAsIFwiJmhhbWlsdDtcIl0sIFswLCBcIiZIZnI7XCJdLCBbMCwgXCImSG9wZjtcIl0sIFswLCBcIiZwbGFuY2toO1wiXSwgWzAsIFwiJmhiYXI7XCJdLCBbMCwgXCImaW1hZ2xpbmU7XCJdLCBbMCwgXCImSWZyO1wiXSwgWzAsIFwiJmxhZ3JhbjtcIl0sIFswLCBcIiZlbGw7XCJdLCBbMSwgXCImbmF0dXJhbHM7XCJdLCBbMCwgXCImbnVtZXJvO1wiXSwgWzAsIFwiJmNvcHlzcjtcIl0sIFswLCBcIiZ3ZWllcnA7XCJdLCBbMCwgXCImUG9wZjtcIl0sIFswLCBcIiZRb3BmO1wiXSwgWzAsIFwiJnJlYWxpbmU7XCJdLCBbMCwgXCImcmVhbDtcIl0sIFswLCBcIiZyZWFscztcIl0sIFswLCBcIiZyeDtcIl0sIFszLCBcIiZ0cmFkZTtcIl0sIFsxLCBcIiZpbnRlZ2VycztcIl0sIFsyLCBcIiZtaG87XCJdLCBbMCwgXCImemVldHJmO1wiXSwgWzAsIFwiJmlpb3RhO1wiXSwgWzIsIFwiJmJlcm5vdTtcIl0sIFswLCBcIiZDYXlsZXlzO1wiXSwgWzEsIFwiJmVzY3I7XCJdLCBbMCwgXCImRXNjcjtcIl0sIFswLCBcIiZGb3VyaWVydHJmO1wiXSwgWzEsIFwiJk1lbGxpbnRyZjtcIl0sIFswLCBcIiZvcmRlcjtcIl0sIFswLCBcIiZhbGVmc3ltO1wiXSwgWzAsIFwiJmJldGg7XCJdLCBbMCwgXCImZ2ltZWw7XCJdLCBbMCwgXCImZGFsZXRoO1wiXSwgWzEyLCBcIiZDYXBpdGFsRGlmZmVyZW50aWFsRDtcIl0sIFswLCBcIiZkZDtcIl0sIFswLCBcIiZlZTtcIl0sIFswLCBcIiZpaTtcIl0sIFsxMCwgXCImZnJhYzEzO1wiXSwgWzAsIFwiJmZyYWMyMztcIl0sIFswLCBcIiZmcmFjMTU7XCJdLCBbMCwgXCImZnJhYzI1O1wiXSwgWzAsIFwiJmZyYWMzNTtcIl0sIFswLCBcIiZmcmFjNDU7XCJdLCBbMCwgXCImZnJhYzE2O1wiXSwgWzAsIFwiJmZyYWM1NjtcIl0sIFswLCBcIiZmcmFjMTg7XCJdLCBbMCwgXCImZnJhYzM4O1wiXSwgWzAsIFwiJmZyYWM1ODtcIl0sIFswLCBcIiZmcmFjNzg7XCJdLCBbNDksIFwiJmxhcnI7XCJdLCBbMCwgXCImU2hvcnRVcEFycm93O1wiXSwgWzAsIFwiJnJhcnI7XCJdLCBbMCwgXCImZGFycjtcIl0sIFswLCBcIiZoYXJyO1wiXSwgWzAsIFwiJnVwZG93bmFycm93O1wiXSwgWzAsIFwiJm53YXJyO1wiXSwgWzAsIFwiJm5lYXJyO1wiXSwgWzAsIFwiJkxvd2VyUmlnaHRBcnJvdztcIl0sIFswLCBcIiZMb3dlckxlZnRBcnJvdztcIl0sIFswLCBcIiZubGFycjtcIl0sIFswLCBcIiZucmFycjtcIl0sIFsxLCB7IHY6IFwiJnJhcnJ3O1wiLCBuOiA4MjQsIG86IFwiJm5yYXJydztcIiB9XSwgWzAsIFwiJkxhcnI7XCJdLCBbMCwgXCImVWFycjtcIl0sIFswLCBcIiZSYXJyO1wiXSwgWzAsIFwiJkRhcnI7XCJdLCBbMCwgXCImbGFycnRsO1wiXSwgWzAsIFwiJnJhcnJ0bDtcIl0sIFswLCBcIiZMZWZ0VGVlQXJyb3c7XCJdLCBbMCwgXCImbWFwc3RvdXA7XCJdLCBbMCwgXCImbWFwO1wiXSwgWzAsIFwiJkRvd25UZWVBcnJvdztcIl0sIFsxLCBcIiZob29rbGVmdGFycm93O1wiXSwgWzAsIFwiJmhvb2tyaWdodGFycm93O1wiXSwgWzAsIFwiJmxhcnJscDtcIl0sIFswLCBcIiZsb29wYXJyb3dyaWdodDtcIl0sIFswLCBcIiZoYXJydztcIl0sIFswLCBcIiZuaGFycjtcIl0sIFsxLCBcIiZsc2g7XCJdLCBbMCwgXCImcnNoO1wiXSwgWzAsIFwiJmxkc2g7XCJdLCBbMCwgXCImcmRzaDtcIl0sIFsxLCBcIiZjcmFycjtcIl0sIFswLCBcIiZjdWxhcnI7XCJdLCBbMCwgXCImY3VyYXJyO1wiXSwgWzIsIFwiJmNpcmNsZWFycm93bGVmdDtcIl0sIFswLCBcIiZjaXJjbGVhcnJvd3JpZ2h0O1wiXSwgWzAsIFwiJmxlZnRoYXJwb29udXA7XCJdLCBbMCwgXCImRG93bkxlZnRWZWN0b3I7XCJdLCBbMCwgXCImUmlnaHRVcFZlY3RvcjtcIl0sIFswLCBcIiZMZWZ0VXBWZWN0b3I7XCJdLCBbMCwgXCImcmhhcnU7XCJdLCBbMCwgXCImRG93blJpZ2h0VmVjdG9yO1wiXSwgWzAsIFwiJmRoYXJyO1wiXSwgWzAsIFwiJmRoYXJsO1wiXSwgWzAsIFwiJlJpZ2h0QXJyb3dMZWZ0QXJyb3c7XCJdLCBbMCwgXCImdWRhcnI7XCJdLCBbMCwgXCImTGVmdEFycm93UmlnaHRBcnJvdztcIl0sIFswLCBcIiZsZWZ0bGVmdGFycm93cztcIl0sIFswLCBcIiZ1cHVwYXJyb3dzO1wiXSwgWzAsIFwiJnJpZ2h0cmlnaHRhcnJvd3M7XCJdLCBbMCwgXCImZGRhcnI7XCJdLCBbMCwgXCImbGVmdHJpZ2h0aGFycG9vbnM7XCJdLCBbMCwgXCImRXF1aWxpYnJpdW07XCJdLCBbMCwgXCImbmxBcnI7XCJdLCBbMCwgXCImbmhBcnI7XCJdLCBbMCwgXCImbnJBcnI7XCJdLCBbMCwgXCImRG91YmxlTGVmdEFycm93O1wiXSwgWzAsIFwiJkRvdWJsZVVwQXJyb3c7XCJdLCBbMCwgXCImRG91YmxlUmlnaHRBcnJvdztcIl0sIFswLCBcIiZkQXJyO1wiXSwgWzAsIFwiJkRvdWJsZUxlZnRSaWdodEFycm93O1wiXSwgWzAsIFwiJkRvdWJsZVVwRG93bkFycm93O1wiXSwgWzAsIFwiJm53QXJyO1wiXSwgWzAsIFwiJm5lQXJyO1wiXSwgWzAsIFwiJnNlQXJyO1wiXSwgWzAsIFwiJnN3QXJyO1wiXSwgWzAsIFwiJmxBYXJyO1wiXSwgWzAsIFwiJnJBYXJyO1wiXSwgWzEsIFwiJnppZ3JhcnI7XCJdLCBbNiwgXCImbGFycmI7XCJdLCBbMCwgXCImcmFycmI7XCJdLCBbMTUsIFwiJkRvd25BcnJvd1VwQXJyb3c7XCJdLCBbNywgXCImbG9hcnI7XCJdLCBbMCwgXCImcm9hcnI7XCJdLCBbMCwgXCImaG9hcnI7XCJdLCBbMCwgXCImZm9yYWxsO1wiXSwgWzAsIFwiJmNvbXA7XCJdLCBbMCwgeyB2OiBcIiZwYXJ0O1wiLCBuOiA4MjQsIG86IFwiJm5wYXJ0O1wiIH1dLCBbMCwgXCImZXhpc3Q7XCJdLCBbMCwgXCImbmV4aXN0O1wiXSwgWzAsIFwiJmVtcHR5O1wiXSwgWzEsIFwiJkRlbDtcIl0sIFswLCBcIiZFbGVtZW50O1wiXSwgWzAsIFwiJk5vdEVsZW1lbnQ7XCJdLCBbMSwgXCImbmk7XCJdLCBbMCwgXCImbm90bmk7XCJdLCBbMiwgXCImcHJvZDtcIl0sIFswLCBcIiZjb3Byb2Q7XCJdLCBbMCwgXCImc3VtO1wiXSwgWzAsIFwiJm1pbnVzO1wiXSwgWzAsIFwiJk1pbnVzUGx1cztcIl0sIFswLCBcIiZkb3RwbHVzO1wiXSwgWzEsIFwiJkJhY2tzbGFzaDtcIl0sIFswLCBcIiZsb3dhc3Q7XCJdLCBbMCwgXCImY29tcGZuO1wiXSwgWzEsIFwiJnJhZGljO1wiXSwgWzIsIFwiJnByb3A7XCJdLCBbMCwgXCImaW5maW47XCJdLCBbMCwgXCImYW5ncnQ7XCJdLCBbMCwgeyB2OiBcIiZhbmc7XCIsIG46IDg0MDIsIG86IFwiJm5hbmc7XCIgfV0sIFswLCBcIiZhbmdtc2Q7XCJdLCBbMCwgXCImYW5nc3BoO1wiXSwgWzAsIFwiJm1pZDtcIl0sIFswLCBcIiZubWlkO1wiXSwgWzAsIFwiJkRvdWJsZVZlcnRpY2FsQmFyO1wiXSwgWzAsIFwiJk5vdERvdWJsZVZlcnRpY2FsQmFyO1wiXSwgWzAsIFwiJmFuZDtcIl0sIFswLCBcIiZvcjtcIl0sIFswLCB7IHY6IFwiJmNhcDtcIiwgbjogNjUwMjQsIG86IFwiJmNhcHM7XCIgfV0sIFswLCB7IHY6IFwiJmN1cDtcIiwgbjogNjUwMjQsIG86IFwiJmN1cHM7XCIgfV0sIFswLCBcIiZpbnQ7XCJdLCBbMCwgXCImSW50O1wiXSwgWzAsIFwiJmlpaW50O1wiXSwgWzAsIFwiJmNvbmludDtcIl0sIFswLCBcIiZDb25pbnQ7XCJdLCBbMCwgXCImQ2NvbmludDtcIl0sIFswLCBcIiZjd2ludDtcIl0sIFswLCBcIiZDbG9ja3dpc2VDb250b3VySW50ZWdyYWw7XCJdLCBbMCwgXCImYXdjb25pbnQ7XCJdLCBbMCwgXCImdGhlcmU0O1wiXSwgWzAsIFwiJmJlY2F1cztcIl0sIFswLCBcIiZyYXRpbztcIl0sIFswLCBcIiZDb2xvbjtcIl0sIFswLCBcIiZkb3RtaW51cztcIl0sIFsxLCBcIiZtRERvdDtcIl0sIFswLCBcIiZob210aHQ7XCJdLCBbMCwgeyB2OiBcIiZzaW07XCIsIG46IDg0MDIsIG86IFwiJm52c2ltO1wiIH1dLCBbMCwgeyB2OiBcIiZiYWNrc2ltO1wiLCBuOiA4MTcsIG86IFwiJnJhY2U7XCIgfV0sIFswLCB7IHY6IFwiJmFjO1wiLCBuOiA4MTksIG86IFwiJmFjRTtcIiB9XSwgWzAsIFwiJmFjZDtcIl0sIFswLCBcIiZWZXJ0aWNhbFRpbGRlO1wiXSwgWzAsIFwiJk5vdFRpbGRlO1wiXSwgWzAsIHsgdjogXCImZXFzaW07XCIsIG46IDgyNCwgbzogXCImbmVzaW07XCIgfV0sIFswLCBcIiZzaW1lO1wiXSwgWzAsIFwiJk5vdFRpbGRlRXF1YWw7XCJdLCBbMCwgXCImY29uZztcIl0sIFswLCBcIiZzaW1uZTtcIl0sIFswLCBcIiZuY29uZztcIl0sIFswLCBcIiZhcDtcIl0sIFswLCBcIiZuYXA7XCJdLCBbMCwgXCImYXBlO1wiXSwgWzAsIHsgdjogXCImYXBpZDtcIiwgbjogODI0LCBvOiBcIiZuYXBpZDtcIiB9XSwgWzAsIFwiJmJhY2tjb25nO1wiXSwgWzAsIHsgdjogXCImYXN5bXBlcTtcIiwgbjogODQwMiwgbzogXCImbnZhcDtcIiB9XSwgWzAsIHsgdjogXCImYnVtcDtcIiwgbjogODI0LCBvOiBcIiZuYnVtcDtcIiB9XSwgWzAsIHsgdjogXCImYnVtcGU7XCIsIG46IDgyNCwgbzogXCImbmJ1bXBlO1wiIH1dLCBbMCwgeyB2OiBcIiZkb3RlcTtcIiwgbjogODI0LCBvOiBcIiZuZWRvdDtcIiB9XSwgWzAsIFwiJmRvdGVxZG90O1wiXSwgWzAsIFwiJmVmRG90O1wiXSwgWzAsIFwiJmVyRG90O1wiXSwgWzAsIFwiJkFzc2lnbjtcIl0sIFswLCBcIiZlY29sb247XCJdLCBbMCwgXCImZWNpcjtcIl0sIFswLCBcIiZjaXJjZXE7XCJdLCBbMSwgXCImd2VkZ2VxO1wiXSwgWzAsIFwiJnZlZWVxO1wiXSwgWzEsIFwiJnRyaWFuZ2xlcTtcIl0sIFsyLCBcIiZlcXVlc3Q7XCJdLCBbMCwgXCImbmU7XCJdLCBbMCwgeyB2OiBcIiZDb25ncnVlbnQ7XCIsIG46IDg0MjEsIG86IFwiJmJuZXF1aXY7XCIgfV0sIFswLCBcIiZuZXF1aXY7XCJdLCBbMSwgeyB2OiBcIiZsZTtcIiwgbjogODQwMiwgbzogXCImbnZsZTtcIiB9XSwgWzAsIHsgdjogXCImZ2U7XCIsIG46IDg0MDIsIG86IFwiJm52Z2U7XCIgfV0sIFswLCB7IHY6IFwiJmxFO1wiLCBuOiA4MjQsIG86IFwiJm5sRTtcIiB9XSwgWzAsIHsgdjogXCImZ0U7XCIsIG46IDgyNCwgbzogXCImbmdFO1wiIH1dLCBbMCwgeyB2OiBcIiZsbkU7XCIsIG46IDY1MDI0LCBvOiBcIiZsdmVydG5lcXE7XCIgfV0sIFswLCB7IHY6IFwiJmduRTtcIiwgbjogNjUwMjQsIG86IFwiJmd2ZXJ0bmVxcTtcIiB9XSwgWzAsIHsgdjogXCImbGw7XCIsIG46IG5ldyBNYXAoLyogI19fUFVSRV9fICovIHJlc3RvcmVEaWZmKFtbODI0LCBcIiZuTHR2O1wiXSwgWzc1NzcsIFwiJm5MdDtcIl1dKSkgfV0sIFswLCB7IHY6IFwiJmdnO1wiLCBuOiBuZXcgTWFwKC8qICNfX1BVUkVfXyAqLyByZXN0b3JlRGlmZihbWzgyNCwgXCImbkd0djtcIl0sIFs3NTc3LCBcIiZuR3Q7XCJdXSkpIH1dLCBbMCwgXCImYmV0d2VlbjtcIl0sIFswLCBcIiZOb3RDdXBDYXA7XCJdLCBbMCwgXCImbmxlc3M7XCJdLCBbMCwgXCImbmd0O1wiXSwgWzAsIFwiJm5sZTtcIl0sIFswLCBcIiZuZ2U7XCJdLCBbMCwgXCImbGVzc3NpbTtcIl0sIFswLCBcIiZHcmVhdGVyVGlsZGU7XCJdLCBbMCwgXCImbmxzaW07XCJdLCBbMCwgXCImbmdzaW07XCJdLCBbMCwgXCImTGVzc0dyZWF0ZXI7XCJdLCBbMCwgXCImZ2w7XCJdLCBbMCwgXCImTm90TGVzc0dyZWF0ZXI7XCJdLCBbMCwgXCImTm90R3JlYXRlckxlc3M7XCJdLCBbMCwgXCImcHI7XCJdLCBbMCwgXCImc2M7XCJdLCBbMCwgXCImcHJjdWU7XCJdLCBbMCwgXCImc2NjdWU7XCJdLCBbMCwgXCImUHJlY2VkZXNUaWxkZTtcIl0sIFswLCB7IHY6IFwiJnNjc2ltO1wiLCBuOiA4MjQsIG86IFwiJk5vdFN1Y2NlZWRzVGlsZGU7XCIgfV0sIFswLCBcIiZOb3RQcmVjZWRlcztcIl0sIFswLCBcIiZOb3RTdWNjZWVkcztcIl0sIFswLCB7IHY6IFwiJnN1YjtcIiwgbjogODQwMiwgbzogXCImTm90U3Vic2V0O1wiIH1dLCBbMCwgeyB2OiBcIiZzdXA7XCIsIG46IDg0MDIsIG86IFwiJk5vdFN1cGVyc2V0O1wiIH1dLCBbMCwgXCImbnN1YjtcIl0sIFswLCBcIiZuc3VwO1wiXSwgWzAsIFwiJnN1YmU7XCJdLCBbMCwgXCImc3VwZTtcIl0sIFswLCBcIiZOb3RTdWJzZXRFcXVhbDtcIl0sIFswLCBcIiZOb3RTdXBlcnNldEVxdWFsO1wiXSwgWzAsIHsgdjogXCImc3VibmU7XCIsIG46IDY1MDI0LCBvOiBcIiZ2YXJzdWJzZXRuZXE7XCIgfV0sIFswLCB7IHY6IFwiJnN1cG5lO1wiLCBuOiA2NTAyNCwgbzogXCImdmFyc3Vwc2V0bmVxO1wiIH1dLCBbMSwgXCImY3VwZG90O1wiXSwgWzAsIFwiJlVuaW9uUGx1cztcIl0sIFswLCB7IHY6IFwiJnNxc3ViO1wiLCBuOiA4MjQsIG86IFwiJk5vdFNxdWFyZVN1YnNldDtcIiB9XSwgWzAsIHsgdjogXCImc3FzdXA7XCIsIG46IDgyNCwgbzogXCImTm90U3F1YXJlU3VwZXJzZXQ7XCIgfV0sIFswLCBcIiZzcXN1YmU7XCJdLCBbMCwgXCImc3FzdXBlO1wiXSwgWzAsIHsgdjogXCImc3FjYXA7XCIsIG46IDY1MDI0LCBvOiBcIiZzcWNhcHM7XCIgfV0sIFswLCB7IHY6IFwiJnNxY3VwO1wiLCBuOiA2NTAyNCwgbzogXCImc3FjdXBzO1wiIH1dLCBbMCwgXCImQ2lyY2xlUGx1cztcIl0sIFswLCBcIiZDaXJjbGVNaW51cztcIl0sIFswLCBcIiZDaXJjbGVUaW1lcztcIl0sIFswLCBcIiZvc29sO1wiXSwgWzAsIFwiJkNpcmNsZURvdDtcIl0sIFswLCBcIiZjaXJjbGVkY2lyYztcIl0sIFswLCBcIiZjaXJjbGVkYXN0O1wiXSwgWzEsIFwiJmNpcmNsZWRkYXNoO1wiXSwgWzAsIFwiJmJveHBsdXM7XCJdLCBbMCwgXCImYm94bWludXM7XCJdLCBbMCwgXCImYm94dGltZXM7XCJdLCBbMCwgXCImZG90c3F1YXJlO1wiXSwgWzAsIFwiJlJpZ2h0VGVlO1wiXSwgWzAsIFwiJmRhc2h2O1wiXSwgWzAsIFwiJkRvd25UZWU7XCJdLCBbMCwgXCImYm90O1wiXSwgWzEsIFwiJm1vZGVscztcIl0sIFswLCBcIiZEb3VibGVSaWdodFRlZTtcIl0sIFswLCBcIiZWZGFzaDtcIl0sIFswLCBcIiZWdmRhc2g7XCJdLCBbMCwgXCImVkRhc2g7XCJdLCBbMCwgXCImbnZkYXNoO1wiXSwgWzAsIFwiJm52RGFzaDtcIl0sIFswLCBcIiZuVmRhc2g7XCJdLCBbMCwgXCImblZEYXNoO1wiXSwgWzAsIFwiJnBydXJlbDtcIl0sIFsxLCBcIiZMZWZ0VHJpYW5nbGU7XCJdLCBbMCwgXCImUmlnaHRUcmlhbmdsZTtcIl0sIFswLCB7IHY6IFwiJkxlZnRUcmlhbmdsZUVxdWFsO1wiLCBuOiA4NDAyLCBvOiBcIiZudmx0cmllO1wiIH1dLCBbMCwgeyB2OiBcIiZSaWdodFRyaWFuZ2xlRXF1YWw7XCIsIG46IDg0MDIsIG86IFwiJm52cnRyaWU7XCIgfV0sIFswLCBcIiZvcmlnb2Y7XCJdLCBbMCwgXCImaW1vZjtcIl0sIFswLCBcIiZtdWx0aW1hcDtcIl0sIFswLCBcIiZoZXJjb247XCJdLCBbMCwgXCImaW50Y2FsO1wiXSwgWzAsIFwiJnZlZWJhcjtcIl0sIFsxLCBcIiZiYXJ2ZWU7XCJdLCBbMCwgXCImYW5ncnR2YjtcIl0sIFswLCBcIiZscnRyaTtcIl0sIFswLCBcIiZiaWd3ZWRnZTtcIl0sIFswLCBcIiZiaWd2ZWU7XCJdLCBbMCwgXCImYmlnY2FwO1wiXSwgWzAsIFwiJmJpZ2N1cDtcIl0sIFswLCBcIiZkaWFtO1wiXSwgWzAsIFwiJnNkb3Q7XCJdLCBbMCwgXCImc3N0YXJmO1wiXSwgWzAsIFwiJmRpdmlkZW9udGltZXM7XCJdLCBbMCwgXCImYm93dGllO1wiXSwgWzAsIFwiJmx0aW1lcztcIl0sIFswLCBcIiZydGltZXM7XCJdLCBbMCwgXCImbGVmdHRocmVldGltZXM7XCJdLCBbMCwgXCImcmlnaHR0aHJlZXRpbWVzO1wiXSwgWzAsIFwiJmJhY2tzaW1lcTtcIl0sIFswLCBcIiZjdXJseXZlZTtcIl0sIFswLCBcIiZjdXJseXdlZGdlO1wiXSwgWzAsIFwiJlN1YjtcIl0sIFswLCBcIiZTdXA7XCJdLCBbMCwgXCImQ2FwO1wiXSwgWzAsIFwiJkN1cDtcIl0sIFswLCBcIiZmb3JrO1wiXSwgWzAsIFwiJmVwYXI7XCJdLCBbMCwgXCImbGVzc2RvdDtcIl0sIFswLCBcIiZndGRvdDtcIl0sIFswLCB7IHY6IFwiJkxsO1wiLCBuOiA4MjQsIG86IFwiJm5MbDtcIiB9XSwgWzAsIHsgdjogXCImR2c7XCIsIG46IDgyNCwgbzogXCImbkdnO1wiIH1dLCBbMCwgeyB2OiBcIiZsZWc7XCIsIG46IDY1MDI0LCBvOiBcIiZsZXNnO1wiIH1dLCBbMCwgeyB2OiBcIiZnZWw7XCIsIG46IDY1MDI0LCBvOiBcIiZnZXNsO1wiIH1dLCBbMiwgXCImY3VlcHI7XCJdLCBbMCwgXCImY3Vlc2M7XCJdLCBbMCwgXCImTm90UHJlY2VkZXNTbGFudEVxdWFsO1wiXSwgWzAsIFwiJk5vdFN1Y2NlZWRzU2xhbnRFcXVhbDtcIl0sIFswLCBcIiZOb3RTcXVhcmVTdWJzZXRFcXVhbDtcIl0sIFswLCBcIiZOb3RTcXVhcmVTdXBlcnNldEVxdWFsO1wiXSwgWzIsIFwiJmxuc2ltO1wiXSwgWzAsIFwiJmduc2ltO1wiXSwgWzAsIFwiJnByZWNuc2ltO1wiXSwgWzAsIFwiJnNjbnNpbTtcIl0sIFswLCBcIiZubHRyaTtcIl0sIFswLCBcIiZOb3RSaWdodFRyaWFuZ2xlO1wiXSwgWzAsIFwiJm5sdHJpZTtcIl0sIFswLCBcIiZOb3RSaWdodFRyaWFuZ2xlRXF1YWw7XCJdLCBbMCwgXCImdmVsbGlwO1wiXSwgWzAsIFwiJmN0ZG90O1wiXSwgWzAsIFwiJnV0ZG90O1wiXSwgWzAsIFwiJmR0ZG90O1wiXSwgWzAsIFwiJmRpc2luO1wiXSwgWzAsIFwiJmlzaW5zdjtcIl0sIFswLCBcIiZpc2lucztcIl0sIFswLCB7IHY6IFwiJmlzaW5kb3Q7XCIsIG46IDgyNCwgbzogXCImbm90aW5kb3Q7XCIgfV0sIFswLCBcIiZub3RpbnZjO1wiXSwgWzAsIFwiJm5vdGludmI7XCJdLCBbMSwgeyB2OiBcIiZpc2luRTtcIiwgbjogODI0LCBvOiBcIiZub3RpbkU7XCIgfV0sIFswLCBcIiZuaXNkO1wiXSwgWzAsIFwiJnhuaXM7XCJdLCBbMCwgXCImbmlzO1wiXSwgWzAsIFwiJm5vdG5pdmM7XCJdLCBbMCwgXCImbm90bml2YjtcIl0sIFs2LCBcIiZiYXJ3ZWQ7XCJdLCBbMCwgXCImQmFyd2VkO1wiXSwgWzEsIFwiJmxjZWlsO1wiXSwgWzAsIFwiJnJjZWlsO1wiXSwgWzAsIFwiJkxlZnRGbG9vcjtcIl0sIFswLCBcIiZyZmxvb3I7XCJdLCBbMCwgXCImZHJjcm9wO1wiXSwgWzAsIFwiJmRsY3JvcDtcIl0sIFswLCBcIiZ1cmNyb3A7XCJdLCBbMCwgXCImdWxjcm9wO1wiXSwgWzAsIFwiJmJub3Q7XCJdLCBbMSwgXCImcHJvZmxpbmU7XCJdLCBbMCwgXCImcHJvZnN1cmY7XCJdLCBbMSwgXCImdGVscmVjO1wiXSwgWzAsIFwiJnRhcmdldDtcIl0sIFs1LCBcIiZ1bGNvcm47XCJdLCBbMCwgXCImdXJjb3JuO1wiXSwgWzAsIFwiJmRsY29ybjtcIl0sIFswLCBcIiZkcmNvcm47XCJdLCBbMiwgXCImZnJvd247XCJdLCBbMCwgXCImc21pbGU7XCJdLCBbOSwgXCImY3lsY3R5O1wiXSwgWzAsIFwiJnByb2ZhbGFyO1wiXSwgWzcsIFwiJnRvcGJvdDtcIl0sIFs2LCBcIiZvdmJhcjtcIl0sIFsxLCBcIiZzb2xiYXI7XCJdLCBbNjAsIFwiJmFuZ3phcnI7XCJdLCBbNTEsIFwiJmxtb3VzdGFjaGU7XCJdLCBbMCwgXCImcm1vdXN0YWNoZTtcIl0sIFsyLCBcIiZPdmVyQnJhY2tldDtcIl0sIFswLCBcIiZiYnJrO1wiXSwgWzAsIFwiJmJicmt0YnJrO1wiXSwgWzM3LCBcIiZPdmVyUGFyZW50aGVzaXM7XCJdLCBbMCwgXCImVW5kZXJQYXJlbnRoZXNpcztcIl0sIFswLCBcIiZPdmVyQnJhY2U7XCJdLCBbMCwgXCImVW5kZXJCcmFjZTtcIl0sIFsyLCBcIiZ0cnBleml1bTtcIl0sIFs0LCBcIiZlbGludGVycztcIl0sIFs1OSwgXCImYmxhbms7XCJdLCBbMTY0LCBcIiZjaXJjbGVkUztcIl0sIFs1NSwgXCImYm94aDtcIl0sIFsxLCBcIiZib3h2O1wiXSwgWzksIFwiJmJveGRyO1wiXSwgWzMsIFwiJmJveGRsO1wiXSwgWzMsIFwiJmJveHVyO1wiXSwgWzMsIFwiJmJveHVsO1wiXSwgWzMsIFwiJmJveHZyO1wiXSwgWzcsIFwiJmJveHZsO1wiXSwgWzcsIFwiJmJveGhkO1wiXSwgWzcsIFwiJmJveGh1O1wiXSwgWzcsIFwiJmJveHZoO1wiXSwgWzE5LCBcIiZib3hIO1wiXSwgWzAsIFwiJmJveFY7XCJdLCBbMCwgXCImYm94ZFI7XCJdLCBbMCwgXCImYm94RHI7XCJdLCBbMCwgXCImYm94RFI7XCJdLCBbMCwgXCImYm94ZEw7XCJdLCBbMCwgXCImYm94RGw7XCJdLCBbMCwgXCImYm94REw7XCJdLCBbMCwgXCImYm94dVI7XCJdLCBbMCwgXCImYm94VXI7XCJdLCBbMCwgXCImYm94VVI7XCJdLCBbMCwgXCImYm94dUw7XCJdLCBbMCwgXCImYm94VWw7XCJdLCBbMCwgXCImYm94VUw7XCJdLCBbMCwgXCImYm94dlI7XCJdLCBbMCwgXCImYm94VnI7XCJdLCBbMCwgXCImYm94VlI7XCJdLCBbMCwgXCImYm94dkw7XCJdLCBbMCwgXCImYm94Vmw7XCJdLCBbMCwgXCImYm94Vkw7XCJdLCBbMCwgXCImYm94SGQ7XCJdLCBbMCwgXCImYm94aEQ7XCJdLCBbMCwgXCImYm94SEQ7XCJdLCBbMCwgXCImYm94SHU7XCJdLCBbMCwgXCImYm94aFU7XCJdLCBbMCwgXCImYm94SFU7XCJdLCBbMCwgXCImYm94dkg7XCJdLCBbMCwgXCImYm94Vmg7XCJdLCBbMCwgXCImYm94Vkg7XCJdLCBbMTksIFwiJnVoYmxrO1wiXSwgWzMsIFwiJmxoYmxrO1wiXSwgWzMsIFwiJmJsb2NrO1wiXSwgWzgsIFwiJmJsazE0O1wiXSwgWzAsIFwiJmJsazEyO1wiXSwgWzAsIFwiJmJsazM0O1wiXSwgWzEzLCBcIiZzcXVhcmU7XCJdLCBbOCwgXCImYmxhY2tzcXVhcmU7XCJdLCBbMCwgXCImRW1wdHlWZXJ5U21hbGxTcXVhcmU7XCJdLCBbMSwgXCImcmVjdDtcIl0sIFswLCBcIiZtYXJrZXI7XCJdLCBbMiwgXCImZmx0bnM7XCJdLCBbMSwgXCImYmlndHJpYW5nbGV1cDtcIl0sIFswLCBcIiZibGFja3RyaWFuZ2xlO1wiXSwgWzAsIFwiJnRyaWFuZ2xlO1wiXSwgWzIsIFwiJmJsYWNrdHJpYW5nbGVyaWdodDtcIl0sIFswLCBcIiZydHJpO1wiXSwgWzMsIFwiJmJpZ3RyaWFuZ2xlZG93bjtcIl0sIFswLCBcIiZibGFja3RyaWFuZ2xlZG93bjtcIl0sIFswLCBcIiZkdHJpO1wiXSwgWzIsIFwiJmJsYWNrdHJpYW5nbGVsZWZ0O1wiXSwgWzAsIFwiJmx0cmk7XCJdLCBbNiwgXCImbG96O1wiXSwgWzAsIFwiJmNpcjtcIl0sIFszMiwgXCImdHJpZG90O1wiXSwgWzIsIFwiJmJpZ2NpcmM7XCJdLCBbOCwgXCImdWx0cmk7XCJdLCBbMCwgXCImdXJ0cmk7XCJdLCBbMCwgXCImbGx0cmk7XCJdLCBbMCwgXCImRW1wdHlTbWFsbFNxdWFyZTtcIl0sIFswLCBcIiZGaWxsZWRTbWFsbFNxdWFyZTtcIl0sIFs4LCBcIiZiaWdzdGFyO1wiXSwgWzAsIFwiJnN0YXI7XCJdLCBbNywgXCImcGhvbmU7XCJdLCBbNDksIFwiJmZlbWFsZTtcIl0sIFsxLCBcIiZtYWxlO1wiXSwgWzI5LCBcIiZzcGFkZXM7XCJdLCBbMiwgXCImY2x1YnM7XCJdLCBbMSwgXCImaGVhcnRzO1wiXSwgWzAsIFwiJmRpYW1vbmRzdWl0O1wiXSwgWzMsIFwiJnN1bmc7XCJdLCBbMiwgXCImZmxhdDtcIl0sIFswLCBcIiZuYXR1cmFsO1wiXSwgWzAsIFwiJnNoYXJwO1wiXSwgWzE2MywgXCImY2hlY2s7XCJdLCBbMywgXCImY3Jvc3M7XCJdLCBbOCwgXCImbWFsdDtcIl0sIFsyMSwgXCImc2V4dDtcIl0sIFszMywgXCImVmVydGljYWxTZXBhcmF0b3I7XCJdLCBbMjUsIFwiJmxiYnJrO1wiXSwgWzAsIFwiJnJiYnJrO1wiXSwgWzg0LCBcIiZic29saHN1YjtcIl0sIFswLCBcIiZzdXBoc29sO1wiXSwgWzI4LCBcIiZMZWZ0RG91YmxlQnJhY2tldDtcIl0sIFswLCBcIiZSaWdodERvdWJsZUJyYWNrZXQ7XCJdLCBbMCwgXCImbGFuZztcIl0sIFswLCBcIiZyYW5nO1wiXSwgWzAsIFwiJkxhbmc7XCJdLCBbMCwgXCImUmFuZztcIl0sIFswLCBcIiZsb2FuZztcIl0sIFswLCBcIiZyb2FuZztcIl0sIFs3LCBcIiZsb25nbGVmdGFycm93O1wiXSwgWzAsIFwiJmxvbmdyaWdodGFycm93O1wiXSwgWzAsIFwiJmxvbmdsZWZ0cmlnaHRhcnJvdztcIl0sIFswLCBcIiZEb3VibGVMb25nTGVmdEFycm93O1wiXSwgWzAsIFwiJkRvdWJsZUxvbmdSaWdodEFycm93O1wiXSwgWzAsIFwiJkRvdWJsZUxvbmdMZWZ0UmlnaHRBcnJvdztcIl0sIFsxLCBcIiZsb25nbWFwc3RvO1wiXSwgWzIsIFwiJmR6aWdyYXJyO1wiXSwgWzI1OCwgXCImbnZsQXJyO1wiXSwgWzAsIFwiJm52ckFycjtcIl0sIFswLCBcIiZudkhhcnI7XCJdLCBbMCwgXCImTWFwO1wiXSwgWzYsIFwiJmxiYXJyO1wiXSwgWzAsIFwiJmJrYXJvdztcIl0sIFswLCBcIiZsQmFycjtcIl0sIFswLCBcIiZkYmthcm93O1wiXSwgWzAsIFwiJmRyYmthcm93O1wiXSwgWzAsIFwiJkREb3RyYWhkO1wiXSwgWzAsIFwiJlVwQXJyb3dCYXI7XCJdLCBbMCwgXCImRG93bkFycm93QmFyO1wiXSwgWzIsIFwiJlJhcnJ0bDtcIl0sIFsyLCBcIiZsYXRhaWw7XCJdLCBbMCwgXCImcmF0YWlsO1wiXSwgWzAsIFwiJmxBdGFpbDtcIl0sIFswLCBcIiZyQXRhaWw7XCJdLCBbMCwgXCImbGFycmZzO1wiXSwgWzAsIFwiJnJhcnJmcztcIl0sIFswLCBcIiZsYXJyYmZzO1wiXSwgWzAsIFwiJnJhcnJiZnM7XCJdLCBbMiwgXCImbndhcmhrO1wiXSwgWzAsIFwiJm5lYXJoaztcIl0sIFswLCBcIiZoa3NlYXJvdztcIl0sIFswLCBcIiZoa3N3YXJvdztcIl0sIFswLCBcIiZud25lYXI7XCJdLCBbMCwgXCImbmVzZWFyO1wiXSwgWzAsIFwiJnNlc3dhcjtcIl0sIFswLCBcIiZzd253YXI7XCJdLCBbOCwgeyB2OiBcIiZyYXJyYztcIiwgbjogODI0LCBvOiBcIiZucmFycmM7XCIgfV0sIFsxLCBcIiZjdWRhcnJyO1wiXSwgWzAsIFwiJmxkY2E7XCJdLCBbMCwgXCImcmRjYTtcIl0sIFswLCBcIiZjdWRhcnJsO1wiXSwgWzAsIFwiJmxhcnJwbDtcIl0sIFsyLCBcIiZjdXJhcnJtO1wiXSwgWzAsIFwiJmN1bGFycnA7XCJdLCBbNywgXCImcmFycnBsO1wiXSwgWzIsIFwiJmhhcnJjaXI7XCJdLCBbMCwgXCImVWFycm9jaXI7XCJdLCBbMCwgXCImbHVyZHNoYXI7XCJdLCBbMCwgXCImbGRydXNoYXI7XCJdLCBbMiwgXCImTGVmdFJpZ2h0VmVjdG9yO1wiXSwgWzAsIFwiJlJpZ2h0VXBEb3duVmVjdG9yO1wiXSwgWzAsIFwiJkRvd25MZWZ0UmlnaHRWZWN0b3I7XCJdLCBbMCwgXCImTGVmdFVwRG93blZlY3RvcjtcIl0sIFswLCBcIiZMZWZ0VmVjdG9yQmFyO1wiXSwgWzAsIFwiJlJpZ2h0VmVjdG9yQmFyO1wiXSwgWzAsIFwiJlJpZ2h0VXBWZWN0b3JCYXI7XCJdLCBbMCwgXCImUmlnaHREb3duVmVjdG9yQmFyO1wiXSwgWzAsIFwiJkRvd25MZWZ0VmVjdG9yQmFyO1wiXSwgWzAsIFwiJkRvd25SaWdodFZlY3RvckJhcjtcIl0sIFswLCBcIiZMZWZ0VXBWZWN0b3JCYXI7XCJdLCBbMCwgXCImTGVmdERvd25WZWN0b3JCYXI7XCJdLCBbMCwgXCImTGVmdFRlZVZlY3RvcjtcIl0sIFswLCBcIiZSaWdodFRlZVZlY3RvcjtcIl0sIFswLCBcIiZSaWdodFVwVGVlVmVjdG9yO1wiXSwgWzAsIFwiJlJpZ2h0RG93blRlZVZlY3RvcjtcIl0sIFswLCBcIiZEb3duTGVmdFRlZVZlY3RvcjtcIl0sIFswLCBcIiZEb3duUmlnaHRUZWVWZWN0b3I7XCJdLCBbMCwgXCImTGVmdFVwVGVlVmVjdG9yO1wiXSwgWzAsIFwiJkxlZnREb3duVGVlVmVjdG9yO1wiXSwgWzAsIFwiJmxIYXI7XCJdLCBbMCwgXCImdUhhcjtcIl0sIFswLCBcIiZySGFyO1wiXSwgWzAsIFwiJmRIYXI7XCJdLCBbMCwgXCImbHVydWhhcjtcIl0sIFswLCBcIiZsZHJkaGFyO1wiXSwgWzAsIFwiJnJ1bHVoYXI7XCJdLCBbMCwgXCImcmRsZGhhcjtcIl0sIFswLCBcIiZsaGFydWw7XCJdLCBbMCwgXCImbGxoYXJkO1wiXSwgWzAsIFwiJnJoYXJ1bDtcIl0sIFswLCBcIiZscmhhcmQ7XCJdLCBbMCwgXCImdWRoYXI7XCJdLCBbMCwgXCImZHVoYXI7XCJdLCBbMCwgXCImUm91bmRJbXBsaWVzO1wiXSwgWzAsIFwiJmVyYXJyO1wiXSwgWzAsIFwiJnNpbXJhcnI7XCJdLCBbMCwgXCImbGFycnNpbTtcIl0sIFswLCBcIiZyYXJyc2ltO1wiXSwgWzAsIFwiJnJhcnJhcDtcIl0sIFswLCBcIiZsdGxhcnI7XCJdLCBbMSwgXCImZ3RyYXJyO1wiXSwgWzAsIFwiJnN1YnJhcnI7XCJdLCBbMSwgXCImc3VwbGFycjtcIl0sIFswLCBcIiZsZmlzaHQ7XCJdLCBbMCwgXCImcmZpc2h0O1wiXSwgWzAsIFwiJnVmaXNodDtcIl0sIFswLCBcIiZkZmlzaHQ7XCJdLCBbNSwgXCImbG9wYXI7XCJdLCBbMCwgXCImcm9wYXI7XCJdLCBbNCwgXCImbGJya2U7XCJdLCBbMCwgXCImcmJya2U7XCJdLCBbMCwgXCImbGJya3NsdTtcIl0sIFswLCBcIiZyYnJrc2xkO1wiXSwgWzAsIFwiJmxicmtzbGQ7XCJdLCBbMCwgXCImcmJya3NsdTtcIl0sIFswLCBcIiZsYW5nZDtcIl0sIFswLCBcIiZyYW5nZDtcIl0sIFswLCBcIiZscGFybHQ7XCJdLCBbMCwgXCImcnBhcmd0O1wiXSwgWzAsIFwiJmd0bFBhcjtcIl0sIFswLCBcIiZsdHJQYXI7XCJdLCBbMywgXCImdnppZ3phZztcIl0sIFsxLCBcIiZ2YW5ncnQ7XCJdLCBbMCwgXCImYW5ncnR2YmQ7XCJdLCBbNiwgXCImYW5nZTtcIl0sIFswLCBcIiZyYW5nZTtcIl0sIFswLCBcIiZkd2FuZ2xlO1wiXSwgWzAsIFwiJnV3YW5nbGU7XCJdLCBbMCwgXCImYW5nbXNkYWE7XCJdLCBbMCwgXCImYW5nbXNkYWI7XCJdLCBbMCwgXCImYW5nbXNkYWM7XCJdLCBbMCwgXCImYW5nbXNkYWQ7XCJdLCBbMCwgXCImYW5nbXNkYWU7XCJdLCBbMCwgXCImYW5nbXNkYWY7XCJdLCBbMCwgXCImYW5nbXNkYWc7XCJdLCBbMCwgXCImYW5nbXNkYWg7XCJdLCBbMCwgXCImYmVtcHR5djtcIl0sIFswLCBcIiZkZW1wdHl2O1wiXSwgWzAsIFwiJmNlbXB0eXY7XCJdLCBbMCwgXCImcmFlbXB0eXY7XCJdLCBbMCwgXCImbGFlbXB0eXY7XCJdLCBbMCwgXCImb2hiYXI7XCJdLCBbMCwgXCImb21pZDtcIl0sIFswLCBcIiZvcGFyO1wiXSwgWzEsIFwiJm9wZXJwO1wiXSwgWzEsIFwiJm9sY3Jvc3M7XCJdLCBbMCwgXCImb2Rzb2xkO1wiXSwgWzEsIFwiJm9sY2lyO1wiXSwgWzAsIFwiJm9mY2lyO1wiXSwgWzAsIFwiJm9sdDtcIl0sIFswLCBcIiZvZ3Q7XCJdLCBbMCwgXCImY2lyc2NpcjtcIl0sIFswLCBcIiZjaXJFO1wiXSwgWzAsIFwiJnNvbGI7XCJdLCBbMCwgXCImYnNvbGI7XCJdLCBbMywgXCImYm94Ym94O1wiXSwgWzMsIFwiJnRyaXNiO1wiXSwgWzAsIFwiJnJ0cmlsdHJpO1wiXSwgWzAsIHsgdjogXCImTGVmdFRyaWFuZ2xlQmFyO1wiLCBuOiA4MjQsIG86IFwiJk5vdExlZnRUcmlhbmdsZUJhcjtcIiB9XSwgWzAsIHsgdjogXCImUmlnaHRUcmlhbmdsZUJhcjtcIiwgbjogODI0LCBvOiBcIiZOb3RSaWdodFRyaWFuZ2xlQmFyO1wiIH1dLCBbMTEsIFwiJmlpbmZpbjtcIl0sIFswLCBcIiZpbmZpbnRpZTtcIl0sIFswLCBcIiZudmluZmluO1wiXSwgWzQsIFwiJmVwYXJzbDtcIl0sIFswLCBcIiZzbWVwYXJzbDtcIl0sIFswLCBcIiZlcXZwYXJzbDtcIl0sIFs1LCBcIiZibGFja2xvemVuZ2U7XCJdLCBbOCwgXCImUnVsZURlbGF5ZWQ7XCJdLCBbMSwgXCImZHNvbDtcIl0sIFs5LCBcIiZiaWdvZG90O1wiXSwgWzAsIFwiJmJpZ29wbHVzO1wiXSwgWzAsIFwiJmJpZ290aW1lcztcIl0sIFsxLCBcIiZiaWd1cGx1cztcIl0sIFsxLCBcIiZiaWdzcWN1cDtcIl0sIFs1LCBcIiZpaWlpbnQ7XCJdLCBbMCwgXCImZnBhcnRpbnQ7XCJdLCBbMiwgXCImY2lyZm5pbnQ7XCJdLCBbMCwgXCImYXdpbnQ7XCJdLCBbMCwgXCImcnBwb2xpbnQ7XCJdLCBbMCwgXCImc2Nwb2xpbnQ7XCJdLCBbMCwgXCImbnBvbGludDtcIl0sIFswLCBcIiZwb2ludGludDtcIl0sIFswLCBcIiZxdWF0aW50O1wiXSwgWzAsIFwiJmludGxhcmhrO1wiXSwgWzEwLCBcIiZwbHVzY2lyO1wiXSwgWzAsIFwiJnBsdXNhY2lyO1wiXSwgWzAsIFwiJnNpbXBsdXM7XCJdLCBbMCwgXCImcGx1c2R1O1wiXSwgWzAsIFwiJnBsdXNzaW07XCJdLCBbMCwgXCImcGx1c3R3bztcIl0sIFsxLCBcIiZtY29tbWE7XCJdLCBbMCwgXCImbWludXNkdTtcIl0sIFsyLCBcIiZsb3BsdXM7XCJdLCBbMCwgXCImcm9wbHVzO1wiXSwgWzAsIFwiJkNyb3NzO1wiXSwgWzAsIFwiJnRpbWVzZDtcIl0sIFswLCBcIiZ0aW1lc2JhcjtcIl0sIFsxLCBcIiZzbWFzaHA7XCJdLCBbMCwgXCImbG90aW1lcztcIl0sIFswLCBcIiZyb3RpbWVzO1wiXSwgWzAsIFwiJm90aW1lc2FzO1wiXSwgWzAsIFwiJk90aW1lcztcIl0sIFswLCBcIiZvZGl2O1wiXSwgWzAsIFwiJnRyaXBsdXM7XCJdLCBbMCwgXCImdHJpbWludXM7XCJdLCBbMCwgXCImdHJpdGltZTtcIl0sIFswLCBcIiZpbnRwcm9kO1wiXSwgWzIsIFwiJmFtYWxnO1wiXSwgWzAsIFwiJmNhcGRvdDtcIl0sIFsxLCBcIiZuY3VwO1wiXSwgWzAsIFwiJm5jYXA7XCJdLCBbMCwgXCImY2FwYW5kO1wiXSwgWzAsIFwiJmN1cG9yO1wiXSwgWzAsIFwiJmN1cGNhcDtcIl0sIFswLCBcIiZjYXBjdXA7XCJdLCBbMCwgXCImY3VwYnJjYXA7XCJdLCBbMCwgXCImY2FwYnJjdXA7XCJdLCBbMCwgXCImY3VwY3VwO1wiXSwgWzAsIFwiJmNhcGNhcDtcIl0sIFswLCBcIiZjY3VwcztcIl0sIFswLCBcIiZjY2FwcztcIl0sIFsyLCBcIiZjY3Vwc3NtO1wiXSwgWzIsIFwiJkFuZDtcIl0sIFswLCBcIiZPcjtcIl0sIFswLCBcIiZhbmRhbmQ7XCJdLCBbMCwgXCImb3JvcjtcIl0sIFswLCBcIiZvcnNsb3BlO1wiXSwgWzAsIFwiJmFuZHNsb3BlO1wiXSwgWzEsIFwiJmFuZHY7XCJdLCBbMCwgXCImb3J2O1wiXSwgWzAsIFwiJmFuZGQ7XCJdLCBbMCwgXCImb3JkO1wiXSwgWzEsIFwiJndlZGJhcjtcIl0sIFs2LCBcIiZzZG90ZTtcIl0sIFszLCBcIiZzaW1kb3Q7XCJdLCBbMiwgeyB2OiBcIiZjb25nZG90O1wiLCBuOiA4MjQsIG86IFwiJm5jb25nZG90O1wiIH1dLCBbMCwgXCImZWFzdGVyO1wiXSwgWzAsIFwiJmFwYWNpcjtcIl0sIFswLCB7IHY6IFwiJmFwRTtcIiwgbjogODI0LCBvOiBcIiZuYXBFO1wiIH1dLCBbMCwgXCImZXBsdXM7XCJdLCBbMCwgXCImcGx1c2U7XCJdLCBbMCwgXCImRXNpbTtcIl0sIFswLCBcIiZDb2xvbmU7XCJdLCBbMCwgXCImRXF1YWw7XCJdLCBbMSwgXCImZGRvdHNlcTtcIl0sIFswLCBcIiZlcXVpdkREO1wiXSwgWzAsIFwiJmx0Y2lyO1wiXSwgWzAsIFwiJmd0Y2lyO1wiXSwgWzAsIFwiJmx0cXVlc3Q7XCJdLCBbMCwgXCImZ3RxdWVzdDtcIl0sIFswLCB7IHY6IFwiJmxlcXNsYW50O1wiLCBuOiA4MjQsIG86IFwiJm5sZXFzbGFudDtcIiB9XSwgWzAsIHsgdjogXCImZ2Vxc2xhbnQ7XCIsIG46IDgyNCwgbzogXCImbmdlcXNsYW50O1wiIH1dLCBbMCwgXCImbGVzZG90O1wiXSwgWzAsIFwiJmdlc2RvdDtcIl0sIFswLCBcIiZsZXNkb3RvO1wiXSwgWzAsIFwiJmdlc2RvdG87XCJdLCBbMCwgXCImbGVzZG90b3I7XCJdLCBbMCwgXCImZ2VzZG90b2w7XCJdLCBbMCwgXCImbGFwO1wiXSwgWzAsIFwiJmdhcDtcIl0sIFswLCBcIiZsbmU7XCJdLCBbMCwgXCImZ25lO1wiXSwgWzAsIFwiJmxuYXA7XCJdLCBbMCwgXCImZ25hcDtcIl0sIFswLCBcIiZsRWc7XCJdLCBbMCwgXCImZ0VsO1wiXSwgWzAsIFwiJmxzaW1lO1wiXSwgWzAsIFwiJmdzaW1lO1wiXSwgWzAsIFwiJmxzaW1nO1wiXSwgWzAsIFwiJmdzaW1sO1wiXSwgWzAsIFwiJmxnRTtcIl0sIFswLCBcIiZnbEU7XCJdLCBbMCwgXCImbGVzZ2VzO1wiXSwgWzAsIFwiJmdlc2xlcztcIl0sIFswLCBcIiZlbHM7XCJdLCBbMCwgXCImZWdzO1wiXSwgWzAsIFwiJmVsc2RvdDtcIl0sIFswLCBcIiZlZ3Nkb3Q7XCJdLCBbMCwgXCImZWw7XCJdLCBbMCwgXCImZWc7XCJdLCBbMiwgXCImc2ltbDtcIl0sIFswLCBcIiZzaW1nO1wiXSwgWzAsIFwiJnNpbWxFO1wiXSwgWzAsIFwiJnNpbWdFO1wiXSwgWzAsIHsgdjogXCImTGVzc0xlc3M7XCIsIG46IDgyNCwgbzogXCImTm90TmVzdGVkTGVzc0xlc3M7XCIgfV0sIFswLCB7IHY6IFwiJkdyZWF0ZXJHcmVhdGVyO1wiLCBuOiA4MjQsIG86IFwiJk5vdE5lc3RlZEdyZWF0ZXJHcmVhdGVyO1wiIH1dLCBbMSwgXCImZ2xqO1wiXSwgWzAsIFwiJmdsYTtcIl0sIFswLCBcIiZsdGNjO1wiXSwgWzAsIFwiJmd0Y2M7XCJdLCBbMCwgXCImbGVzY2M7XCJdLCBbMCwgXCImZ2VzY2M7XCJdLCBbMCwgXCImc210O1wiXSwgWzAsIFwiJmxhdDtcIl0sIFswLCB7IHY6IFwiJnNtdGU7XCIsIG46IDY1MDI0LCBvOiBcIiZzbXRlcztcIiB9XSwgWzAsIHsgdjogXCImbGF0ZTtcIiwgbjogNjUwMjQsIG86IFwiJmxhdGVzO1wiIH1dLCBbMCwgXCImYnVtcEU7XCJdLCBbMCwgeyB2OiBcIiZQcmVjZWRlc0VxdWFsO1wiLCBuOiA4MjQsIG86IFwiJk5vdFByZWNlZGVzRXF1YWw7XCIgfV0sIFswLCB7IHY6IFwiJnNjZTtcIiwgbjogODI0LCBvOiBcIiZOb3RTdWNjZWVkc0VxdWFsO1wiIH1dLCBbMiwgXCImcHJFO1wiXSwgWzAsIFwiJnNjRTtcIl0sIFswLCBcIiZwcmVjbmVxcTtcIl0sIFswLCBcIiZzY25FO1wiXSwgWzAsIFwiJnByYXA7XCJdLCBbMCwgXCImc2NhcDtcIl0sIFswLCBcIiZwcmVjbmFwcHJveDtcIl0sIFswLCBcIiZzY25hcDtcIl0sIFswLCBcIiZQcjtcIl0sIFswLCBcIiZTYztcIl0sIFswLCBcIiZzdWJkb3Q7XCJdLCBbMCwgXCImc3VwZG90O1wiXSwgWzAsIFwiJnN1YnBsdXM7XCJdLCBbMCwgXCImc3VwcGx1cztcIl0sIFswLCBcIiZzdWJtdWx0O1wiXSwgWzAsIFwiJnN1cG11bHQ7XCJdLCBbMCwgXCImc3ViZWRvdDtcIl0sIFswLCBcIiZzdXBlZG90O1wiXSwgWzAsIHsgdjogXCImc3ViRTtcIiwgbjogODI0LCBvOiBcIiZuc3ViRTtcIiB9XSwgWzAsIHsgdjogXCImc3VwRTtcIiwgbjogODI0LCBvOiBcIiZuc3VwRTtcIiB9XSwgWzAsIFwiJnN1YnNpbTtcIl0sIFswLCBcIiZzdXBzaW07XCJdLCBbMiwgeyB2OiBcIiZzdWJuRTtcIiwgbjogNjUwMjQsIG86IFwiJnZhcnN1YnNldG5lcXE7XCIgfV0sIFswLCB7IHY6IFwiJnN1cG5FO1wiLCBuOiA2NTAyNCwgbzogXCImdmFyc3Vwc2V0bmVxcTtcIiB9XSwgWzIsIFwiJmNzdWI7XCJdLCBbMCwgXCImY3N1cDtcIl0sIFswLCBcIiZjc3ViZTtcIl0sIFswLCBcIiZjc3VwZTtcIl0sIFswLCBcIiZzdWJzdXA7XCJdLCBbMCwgXCImc3Vwc3ViO1wiXSwgWzAsIFwiJnN1YnN1YjtcIl0sIFswLCBcIiZzdXBzdXA7XCJdLCBbMCwgXCImc3VwaHN1YjtcIl0sIFswLCBcIiZzdXBkc3ViO1wiXSwgWzAsIFwiJmZvcmt2O1wiXSwgWzAsIFwiJnRvcGZvcms7XCJdLCBbMCwgXCImbWxjcDtcIl0sIFs4LCBcIiZEYXNodjtcIl0sIFsxLCBcIiZWZGFzaGw7XCJdLCBbMCwgXCImQmFydjtcIl0sIFswLCBcIiZ2QmFyO1wiXSwgWzAsIFwiJnZCYXJ2O1wiXSwgWzEsIFwiJlZiYXI7XCJdLCBbMCwgXCImTm90O1wiXSwgWzAsIFwiJmJOb3Q7XCJdLCBbMCwgXCImcm5taWQ7XCJdLCBbMCwgXCImY2lybWlkO1wiXSwgWzAsIFwiJm1pZGNpcjtcIl0sIFswLCBcIiZ0b3BjaXI7XCJdLCBbMCwgXCImbmhwYXI7XCJdLCBbMCwgXCImcGFyc2ltO1wiXSwgWzksIHsgdjogXCImcGFyc2w7XCIsIG46IDg0MjEsIG86IFwiJm5wYXJzbDtcIiB9XSwgWzQ0MzQzLCB7IG46IG5ldyBNYXAoLyogI19fUFVSRV9fICovIHJlc3RvcmVEaWZmKFtbNTY0NzYsIFwiJkFzY3I7XCJdLCBbMSwgXCImQ3NjcjtcIl0sIFswLCBcIiZEc2NyO1wiXSwgWzIsIFwiJkdzY3I7XCJdLCBbMiwgXCImSnNjcjtcIl0sIFswLCBcIiZLc2NyO1wiXSwgWzIsIFwiJk5zY3I7XCJdLCBbMCwgXCImT3NjcjtcIl0sIFswLCBcIiZQc2NyO1wiXSwgWzAsIFwiJlFzY3I7XCJdLCBbMSwgXCImU3NjcjtcIl0sIFswLCBcIiZUc2NyO1wiXSwgWzAsIFwiJlVzY3I7XCJdLCBbMCwgXCImVnNjcjtcIl0sIFswLCBcIiZXc2NyO1wiXSwgWzAsIFwiJlhzY3I7XCJdLCBbMCwgXCImWXNjcjtcIl0sIFswLCBcIiZac2NyO1wiXSwgWzAsIFwiJmFzY3I7XCJdLCBbMCwgXCImYnNjcjtcIl0sIFswLCBcIiZjc2NyO1wiXSwgWzAsIFwiJmRzY3I7XCJdLCBbMSwgXCImZnNjcjtcIl0sIFsxLCBcIiZoc2NyO1wiXSwgWzAsIFwiJmlzY3I7XCJdLCBbMCwgXCImanNjcjtcIl0sIFswLCBcIiZrc2NyO1wiXSwgWzAsIFwiJmxzY3I7XCJdLCBbMCwgXCImbXNjcjtcIl0sIFswLCBcIiZuc2NyO1wiXSwgWzEsIFwiJnBzY3I7XCJdLCBbMCwgXCImcXNjcjtcIl0sIFswLCBcIiZyc2NyO1wiXSwgWzAsIFwiJnNzY3I7XCJdLCBbMCwgXCImdHNjcjtcIl0sIFswLCBcIiZ1c2NyO1wiXSwgWzAsIFwiJnZzY3I7XCJdLCBbMCwgXCImd3NjcjtcIl0sIFswLCBcIiZ4c2NyO1wiXSwgWzAsIFwiJnlzY3I7XCJdLCBbMCwgXCImenNjcjtcIl0sIFs1MiwgXCImQWZyO1wiXSwgWzAsIFwiJkJmcjtcIl0sIFsxLCBcIiZEZnI7XCJdLCBbMCwgXCImRWZyO1wiXSwgWzAsIFwiJkZmcjtcIl0sIFswLCBcIiZHZnI7XCJdLCBbMiwgXCImSmZyO1wiXSwgWzAsIFwiJktmcjtcIl0sIFswLCBcIiZMZnI7XCJdLCBbMCwgXCImTWZyO1wiXSwgWzAsIFwiJk5mcjtcIl0sIFswLCBcIiZPZnI7XCJdLCBbMCwgXCImUGZyO1wiXSwgWzAsIFwiJlFmcjtcIl0sIFsxLCBcIiZTZnI7XCJdLCBbMCwgXCImVGZyO1wiXSwgWzAsIFwiJlVmcjtcIl0sIFswLCBcIiZWZnI7XCJdLCBbMCwgXCImV2ZyO1wiXSwgWzAsIFwiJlhmcjtcIl0sIFswLCBcIiZZZnI7XCJdLCBbMSwgXCImYWZyO1wiXSwgWzAsIFwiJmJmcjtcIl0sIFswLCBcIiZjZnI7XCJdLCBbMCwgXCImZGZyO1wiXSwgWzAsIFwiJmVmcjtcIl0sIFswLCBcIiZmZnI7XCJdLCBbMCwgXCImZ2ZyO1wiXSwgWzAsIFwiJmhmcjtcIl0sIFswLCBcIiZpZnI7XCJdLCBbMCwgXCImamZyO1wiXSwgWzAsIFwiJmtmcjtcIl0sIFswLCBcIiZsZnI7XCJdLCBbMCwgXCImbWZyO1wiXSwgWzAsIFwiJm5mcjtcIl0sIFswLCBcIiZvZnI7XCJdLCBbMCwgXCImcGZyO1wiXSwgWzAsIFwiJnFmcjtcIl0sIFswLCBcIiZyZnI7XCJdLCBbMCwgXCImc2ZyO1wiXSwgWzAsIFwiJnRmcjtcIl0sIFswLCBcIiZ1ZnI7XCJdLCBbMCwgXCImdmZyO1wiXSwgWzAsIFwiJndmcjtcIl0sIFswLCBcIiZ4ZnI7XCJdLCBbMCwgXCImeWZyO1wiXSwgWzAsIFwiJnpmcjtcIl0sIFswLCBcIiZBb3BmO1wiXSwgWzAsIFwiJkJvcGY7XCJdLCBbMSwgXCImRG9wZjtcIl0sIFswLCBcIiZFb3BmO1wiXSwgWzAsIFwiJkZvcGY7XCJdLCBbMCwgXCImR29wZjtcIl0sIFsxLCBcIiZJb3BmO1wiXSwgWzAsIFwiJkpvcGY7XCJdLCBbMCwgXCImS29wZjtcIl0sIFswLCBcIiZMb3BmO1wiXSwgWzAsIFwiJk1vcGY7XCJdLCBbMSwgXCImT29wZjtcIl0sIFszLCBcIiZTb3BmO1wiXSwgWzAsIFwiJlRvcGY7XCJdLCBbMCwgXCImVW9wZjtcIl0sIFswLCBcIiZWb3BmO1wiXSwgWzAsIFwiJldvcGY7XCJdLCBbMCwgXCImWG9wZjtcIl0sIFswLCBcIiZZb3BmO1wiXSwgWzEsIFwiJmFvcGY7XCJdLCBbMCwgXCImYm9wZjtcIl0sIFswLCBcIiZjb3BmO1wiXSwgWzAsIFwiJmRvcGY7XCJdLCBbMCwgXCImZW9wZjtcIl0sIFswLCBcIiZmb3BmO1wiXSwgWzAsIFwiJmdvcGY7XCJdLCBbMCwgXCImaG9wZjtcIl0sIFswLCBcIiZpb3BmO1wiXSwgWzAsIFwiJmpvcGY7XCJdLCBbMCwgXCIma29wZjtcIl0sIFswLCBcIiZsb3BmO1wiXSwgWzAsIFwiJm1vcGY7XCJdLCBbMCwgXCImbm9wZjtcIl0sIFswLCBcIiZvb3BmO1wiXSwgWzAsIFwiJnBvcGY7XCJdLCBbMCwgXCImcW9wZjtcIl0sIFswLCBcIiZyb3BmO1wiXSwgWzAsIFwiJnNvcGY7XCJdLCBbMCwgXCImdG9wZjtcIl0sIFswLCBcIiZ1b3BmO1wiXSwgWzAsIFwiJnZvcGY7XCJdLCBbMCwgXCImd29wZjtcIl0sIFswLCBcIiZ4b3BmO1wiXSwgWzAsIFwiJnlvcGY7XCJdLCBbMCwgXCImem9wZjtcIl1dKSkgfV0sIFs4OTA2LCBcIiZmZmxpZztcIl0sIFswLCBcIiZmaWxpZztcIl0sIFswLCBcIiZmbGxpZztcIl0sIFswLCBcIiZmZmlsaWc7XCJdLCBbMCwgXCImZmZsbGlnO1wiXV0pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVuY29kZS1odG1sLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kZWNvZGVYTUxTdHJpY3QgPSBleHBvcnRzLmRlY29kZUhUTUw1U3RyaWN0ID0gZXhwb3J0cy5kZWNvZGVIVE1MNFN0cmljdCA9IGV4cG9ydHMuZGVjb2RlSFRNTDUgPSBleHBvcnRzLmRlY29kZUhUTUw0ID0gZXhwb3J0cy5kZWNvZGVIVE1MQXR0cmlidXRlID0gZXhwb3J0cy5kZWNvZGVIVE1MU3RyaWN0ID0gZXhwb3J0cy5kZWNvZGVIVE1MID0gZXhwb3J0cy5kZWNvZGVYTUwgPSBleHBvcnRzLkRlY29kaW5nTW9kZSA9IGV4cG9ydHMuRW50aXR5RGVjb2RlciA9IGV4cG9ydHMuZW5jb2RlSFRNTDUgPSBleHBvcnRzLmVuY29kZUhUTUw0ID0gZXhwb3J0cy5lbmNvZGVOb25Bc2NpaUhUTUwgPSBleHBvcnRzLmVuY29kZUhUTUwgPSBleHBvcnRzLmVzY2FwZVRleHQgPSBleHBvcnRzLmVzY2FwZUF0dHJpYnV0ZSA9IGV4cG9ydHMuZXNjYXBlVVRGOCA9IGV4cG9ydHMuZXNjYXBlID0gZXhwb3J0cy5lbmNvZGVYTUwgPSBleHBvcnRzLmVuY29kZSA9IGV4cG9ydHMuZGVjb2RlU3RyaWN0ID0gZXhwb3J0cy5kZWNvZGUgPSBleHBvcnRzLkVuY29kaW5nTW9kZSA9IGV4cG9ydHMuRW50aXR5TGV2ZWwgPSB2b2lkIDA7XG52YXIgZGVjb2RlX2pzXzEgPSByZXF1aXJlKFwiLi9kZWNvZGUuanNcIik7XG52YXIgZW5jb2RlX2pzXzEgPSByZXF1aXJlKFwiLi9lbmNvZGUuanNcIik7XG52YXIgZXNjYXBlX2pzXzEgPSByZXF1aXJlKFwiLi9lc2NhcGUuanNcIik7XG4vKiogVGhlIGxldmVsIG9mIGVudGl0aWVzIHRvIHN1cHBvcnQuICovXG52YXIgRW50aXR5TGV2ZWw7XG4oZnVuY3Rpb24gKEVudGl0eUxldmVsKSB7XG4gICAgLyoqIFN1cHBvcnQgb25seSBYTUwgZW50aXRpZXMuICovXG4gICAgRW50aXR5TGV2ZWxbRW50aXR5TGV2ZWxbXCJYTUxcIl0gPSAwXSA9IFwiWE1MXCI7XG4gICAgLyoqIFN1cHBvcnQgSFRNTCBlbnRpdGllcywgd2hpY2ggYXJlIGEgc3VwZXJzZXQgb2YgWE1MIGVudGl0aWVzLiAqL1xuICAgIEVudGl0eUxldmVsW0VudGl0eUxldmVsW1wiSFRNTFwiXSA9IDFdID0gXCJIVE1MXCI7XG59KShFbnRpdHlMZXZlbCA9IGV4cG9ydHMuRW50aXR5TGV2ZWwgfHwgKGV4cG9ydHMuRW50aXR5TGV2ZWwgPSB7fSkpO1xudmFyIEVuY29kaW5nTW9kZTtcbihmdW5jdGlvbiAoRW5jb2RpbmdNb2RlKSB7XG4gICAgLyoqXG4gICAgICogVGhlIG91dHB1dCBpcyBVVEYtOCBlbmNvZGVkLiBPbmx5IGNoYXJhY3RlcnMgdGhhdCBuZWVkIGVzY2FwaW5nIHdpdGhpblxuICAgICAqIFhNTCB3aWxsIGJlIGVzY2FwZWQuXG4gICAgICovXG4gICAgRW5jb2RpbmdNb2RlW0VuY29kaW5nTW9kZVtcIlVURjhcIl0gPSAwXSA9IFwiVVRGOFwiO1xuICAgIC8qKlxuICAgICAqIFRoZSBvdXRwdXQgY29uc2lzdHMgb25seSBvZiBBU0NJSSBjaGFyYWN0ZXJzLiBDaGFyYWN0ZXJzIHRoYXQgbmVlZFxuICAgICAqIGVzY2FwaW5nIHdpdGhpbiBIVE1MLCBhbmQgY2hhcmFjdGVycyB0aGF0IGFyZW4ndCBBU0NJSSBjaGFyYWN0ZXJzIHdpbGxcbiAgICAgKiBiZSBlc2NhcGVkLlxuICAgICAqL1xuICAgIEVuY29kaW5nTW9kZVtFbmNvZGluZ01vZGVbXCJBU0NJSVwiXSA9IDFdID0gXCJBU0NJSVwiO1xuICAgIC8qKlxuICAgICAqIEVuY29kZSBhbGwgY2hhcmFjdGVycyB0aGF0IGhhdmUgYW4gZXF1aXZhbGVudCBlbnRpdHksIGFzIHdlbGwgYXMgYWxsXG4gICAgICogY2hhcmFjdGVycyB0aGF0IGFyZSBub3QgQVNDSUkgY2hhcmFjdGVycy5cbiAgICAgKi9cbiAgICBFbmNvZGluZ01vZGVbRW5jb2RpbmdNb2RlW1wiRXh0ZW5zaXZlXCJdID0gMl0gPSBcIkV4dGVuc2l2ZVwiO1xuICAgIC8qKlxuICAgICAqIEVuY29kZSBhbGwgY2hhcmFjdGVycyB0aGF0IGhhdmUgdG8gYmUgZXNjYXBlZCBpbiBIVE1MIGF0dHJpYnV0ZXMsXG4gICAgICogZm9sbG93aW5nIHtAbGluayBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9wYXJzaW5nLmh0bWwjZXNjYXBpbmdTdHJpbmd9LlxuICAgICAqL1xuICAgIEVuY29kaW5nTW9kZVtFbmNvZGluZ01vZGVbXCJBdHRyaWJ1dGVcIl0gPSAzXSA9IFwiQXR0cmlidXRlXCI7XG4gICAgLyoqXG4gICAgICogRW5jb2RlIGFsbCBjaGFyYWN0ZXJzIHRoYXQgaGF2ZSB0byBiZSBlc2NhcGVkIGluIEhUTUwgdGV4dCxcbiAgICAgKiBmb2xsb3dpbmcge0BsaW5rIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3BhcnNpbmcuaHRtbCNlc2NhcGluZ1N0cmluZ30uXG4gICAgICovXG4gICAgRW5jb2RpbmdNb2RlW0VuY29kaW5nTW9kZVtcIlRleHRcIl0gPSA0XSA9IFwiVGV4dFwiO1xufSkoRW5jb2RpbmdNb2RlID0gZXhwb3J0cy5FbmNvZGluZ01vZGUgfHwgKGV4cG9ydHMuRW5jb2RpbmdNb2RlID0ge30pKTtcbi8qKlxuICogRGVjb2RlcyBhIHN0cmluZyB3aXRoIGVudGl0aWVzLlxuICpcbiAqIEBwYXJhbSBkYXRhIFN0cmluZyB0byBkZWNvZGUuXG4gKiBAcGFyYW0gb3B0aW9ucyBEZWNvZGluZyBvcHRpb25zLlxuICovXG5mdW5jdGlvbiBkZWNvZGUoZGF0YSwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IEVudGl0eUxldmVsLlhNTDsgfVxuICAgIHZhciBsZXZlbCA9IHR5cGVvZiBvcHRpb25zID09PSBcIm51bWJlclwiID8gb3B0aW9ucyA6IG9wdGlvbnMubGV2ZWw7XG4gICAgaWYgKGxldmVsID09PSBFbnRpdHlMZXZlbC5IVE1MKSB7XG4gICAgICAgIHZhciBtb2RlID0gdHlwZW9mIG9wdGlvbnMgPT09IFwib2JqZWN0XCIgPyBvcHRpb25zLm1vZGUgOiB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiAoMCwgZGVjb2RlX2pzXzEuZGVjb2RlSFRNTCkoZGF0YSwgbW9kZSk7XG4gICAgfVxuICAgIHJldHVybiAoMCwgZGVjb2RlX2pzXzEuZGVjb2RlWE1MKShkYXRhKTtcbn1cbmV4cG9ydHMuZGVjb2RlID0gZGVjb2RlO1xuLyoqXG4gKiBEZWNvZGVzIGEgc3RyaW5nIHdpdGggZW50aXRpZXMuIERvZXMgbm90IGFsbG93IG1pc3NpbmcgdHJhaWxpbmcgc2VtaWNvbG9ucyBmb3IgZW50aXRpZXMuXG4gKlxuICogQHBhcmFtIGRhdGEgU3RyaW5nIHRvIGRlY29kZS5cbiAqIEBwYXJhbSBvcHRpb25zIERlY29kaW5nIG9wdGlvbnMuXG4gKiBAZGVwcmVjYXRlZCBVc2UgYGRlY29kZWAgd2l0aCB0aGUgYG1vZGVgIHNldCB0byBgU3RyaWN0YC5cbiAqL1xuZnVuY3Rpb24gZGVjb2RlU3RyaWN0KGRhdGEsIG9wdGlvbnMpIHtcbiAgICB2YXIgX2E7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0gRW50aXR5TGV2ZWwuWE1MOyB9XG4gICAgdmFyIG9wdHMgPSB0eXBlb2Ygb3B0aW9ucyA9PT0gXCJudW1iZXJcIiA/IHsgbGV2ZWw6IG9wdGlvbnMgfSA6IG9wdGlvbnM7XG4gICAgKF9hID0gb3B0cy5tb2RlKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAob3B0cy5tb2RlID0gZGVjb2RlX2pzXzEuRGVjb2RpbmdNb2RlLlN0cmljdCk7XG4gICAgcmV0dXJuIGRlY29kZShkYXRhLCBvcHRzKTtcbn1cbmV4cG9ydHMuZGVjb2RlU3RyaWN0ID0gZGVjb2RlU3RyaWN0O1xuLyoqXG4gKiBFbmNvZGVzIGEgc3RyaW5nIHdpdGggZW50aXRpZXMuXG4gKlxuICogQHBhcmFtIGRhdGEgU3RyaW5nIHRvIGVuY29kZS5cbiAqIEBwYXJhbSBvcHRpb25zIEVuY29kaW5nIG9wdGlvbnMuXG4gKi9cbmZ1bmN0aW9uIGVuY29kZShkYXRhLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0gRW50aXR5TGV2ZWwuWE1MOyB9XG4gICAgdmFyIG9wdHMgPSB0eXBlb2Ygb3B0aW9ucyA9PT0gXCJudW1iZXJcIiA/IHsgbGV2ZWw6IG9wdGlvbnMgfSA6IG9wdGlvbnM7XG4gICAgLy8gTW9kZSBgVVRGOGAganVzdCBlc2NhcGVzIFhNTCBlbnRpdGllc1xuICAgIGlmIChvcHRzLm1vZGUgPT09IEVuY29kaW5nTW9kZS5VVEY4KVxuICAgICAgICByZXR1cm4gKDAsIGVzY2FwZV9qc18xLmVzY2FwZVVURjgpKGRhdGEpO1xuICAgIGlmIChvcHRzLm1vZGUgPT09IEVuY29kaW5nTW9kZS5BdHRyaWJ1dGUpXG4gICAgICAgIHJldHVybiAoMCwgZXNjYXBlX2pzXzEuZXNjYXBlQXR0cmlidXRlKShkYXRhKTtcbiAgICBpZiAob3B0cy5tb2RlID09PSBFbmNvZGluZ01vZGUuVGV4dClcbiAgICAgICAgcmV0dXJuICgwLCBlc2NhcGVfanNfMS5lc2NhcGVUZXh0KShkYXRhKTtcbiAgICBpZiAob3B0cy5sZXZlbCA9PT0gRW50aXR5TGV2ZWwuSFRNTCkge1xuICAgICAgICBpZiAob3B0cy5tb2RlID09PSBFbmNvZGluZ01vZGUuQVNDSUkpIHtcbiAgICAgICAgICAgIHJldHVybiAoMCwgZW5jb2RlX2pzXzEuZW5jb2RlTm9uQXNjaWlIVE1MKShkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKDAsIGVuY29kZV9qc18xLmVuY29kZUhUTUwpKGRhdGEpO1xuICAgIH1cbiAgICAvLyBBU0NJSSBhbmQgRXh0ZW5zaXZlIGFyZSBlcXVpdmFsZW50XG4gICAgcmV0dXJuICgwLCBlc2NhcGVfanNfMS5lbmNvZGVYTUwpKGRhdGEpO1xufVxuZXhwb3J0cy5lbmNvZGUgPSBlbmNvZGU7XG52YXIgZXNjYXBlX2pzXzIgPSByZXF1aXJlKFwiLi9lc2NhcGUuanNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJlbmNvZGVYTUxcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGVzY2FwZV9qc18yLmVuY29kZVhNTDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImVzY2FwZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZXNjYXBlX2pzXzIuZXNjYXBlOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZXNjYXBlVVRGOFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZXNjYXBlX2pzXzIuZXNjYXBlVVRGODsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImVzY2FwZUF0dHJpYnV0ZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZXNjYXBlX2pzXzIuZXNjYXBlQXR0cmlidXRlOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZXNjYXBlVGV4dFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZXNjYXBlX2pzXzIuZXNjYXBlVGV4dDsgfSB9KTtcbnZhciBlbmNvZGVfanNfMiA9IHJlcXVpcmUoXCIuL2VuY29kZS5qc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImVuY29kZUhUTUxcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGVuY29kZV9qc18yLmVuY29kZUhUTUw7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJlbmNvZGVOb25Bc2NpaUhUTUxcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGVuY29kZV9qc18yLmVuY29kZU5vbkFzY2lpSFRNTDsgfSB9KTtcbi8vIExlZ2FjeSBhbGlhc2VzIChkZXByZWNhdGVkKVxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZW5jb2RlSFRNTDRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGVuY29kZV9qc18yLmVuY29kZUhUTUw7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJlbmNvZGVIVE1MNVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZW5jb2RlX2pzXzIuZW5jb2RlSFRNTDsgfSB9KTtcbnZhciBkZWNvZGVfanNfMiA9IHJlcXVpcmUoXCIuL2RlY29kZS5qc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkVudGl0eURlY29kZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRlY29kZV9qc18yLkVudGl0eURlY29kZXI7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJEZWNvZGluZ01vZGVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRlY29kZV9qc18yLkRlY29kaW5nTW9kZTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlY29kZVhNTFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZGVjb2RlX2pzXzIuZGVjb2RlWE1MOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVjb2RlSFRNTFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZGVjb2RlX2pzXzIuZGVjb2RlSFRNTDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlY29kZUhUTUxTdHJpY3RcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRlY29kZV9qc18yLmRlY29kZUhUTUxTdHJpY3Q7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWNvZGVIVE1MQXR0cmlidXRlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkZWNvZGVfanNfMi5kZWNvZGVIVE1MQXR0cmlidXRlOyB9IH0pO1xuLy8gTGVnYWN5IGFsaWFzZXMgKGRlcHJlY2F0ZWQpXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWNvZGVIVE1MNFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZGVjb2RlX2pzXzIuZGVjb2RlSFRNTDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlY29kZUhUTUw1XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkZWNvZGVfanNfMi5kZWNvZGVIVE1MOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVjb2RlSFRNTDRTdHJpY3RcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRlY29kZV9qc18yLmRlY29kZUhUTUxTdHJpY3Q7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWNvZGVIVE1MNVN0cmljdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZGVjb2RlX2pzXzIuZGVjb2RlSFRNTFN0cmljdDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlY29kZVhNTFN0cmljdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZGVjb2RlX2pzXzIuZGVjb2RlWE1MOyB9IH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHNoYWxsb3dFcXVhbDtcbnZhciBfb2JqZWN0SXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJvYmplY3QtaXNcIikpO1xudmFyIF9oYXNvd24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJoYXNvd25cIikpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9XG5mdW5jdGlvbiBfdHlwZW9mKG8pIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyByZXR1cm4gX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvKSB7IHJldHVybiB0eXBlb2YgbzsgfSA6IGZ1bmN0aW9uIChvKSB7IHJldHVybiBvICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG8uY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvOyB9LCBfdHlwZW9mKG8pOyB9XG4vLyBhZGFwdGVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2Jsb2IvMTQ0MzI4ZmU4MTcxOWU5MTZiOTQ2ZTIyNjYwNDc5ZTMxNTYxYmIwYi9wYWNrYWdlcy9zaGFyZWQvc2hhbGxvd0VxdWFsLmpzI0wzNi1MNjhcbmZ1bmN0aW9uIHNoYWxsb3dFcXVhbChvYmpBLCBvYmpCKSB7XG4gIGlmICgoMCwgX29iamVjdElzW1wiZGVmYXVsdFwiXSkob2JqQSwgb2JqQikpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAoIW9iakEgfHwgIW9iakIgfHwgX3R5cGVvZihvYmpBKSAhPT0gJ29iamVjdCcgfHwgX3R5cGVvZihvYmpCKSAhPT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIGtleXNBID0gT2JqZWN0LmtleXMob2JqQSk7XG4gIHZhciBrZXlzQiA9IE9iamVjdC5rZXlzKG9iakIpO1xuICBpZiAoa2V5c0EubGVuZ3RoICE9PSBrZXlzQi5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAga2V5c0Euc29ydCgpO1xuICBrZXlzQi5zb3J0KCk7XG5cbiAgLy8gVGVzdCBmb3IgQSdzIGtleXMgZGlmZmVyZW50IGZyb20gQi5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzQS5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGlmICghKDAsIF9oYXNvd25bXCJkZWZhdWx0XCJdKShvYmpCLCBrZXlzQVtpXSkgfHwgISgwLCBfb2JqZWN0SXNbXCJkZWZhdWx0XCJdKShvYmpBW2tleXNBW2ldXSwgb2JqQltrZXlzQVtpXV0pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnVZVzFsY3lJNld5SmZiMkpxWldOMFNYTWlMQ0pmYVc1MFpYSnZjRkpsY1hWcGNtVkVaV1poZFd4MElpd2ljbVZ4ZFdseVpTSXNJbDlvWVhOdmQyNGlMQ0p2WW1vaUxDSmZYMlZ6VFc5a2RXeGxJaXdpWDNSNWNHVnZaaUlzSW04aUxDSlRlVzFpYjJ3aUxDSnBkR1Z5WVhSdmNpSXNJbU52Ym5OMGNuVmpkRzl5SWl3aWNISnZkRzkwZVhCbElpd2ljMmhoYkd4dmQwVnhkV0ZzSWl3aWIySnFRU0lzSW05aWFrSWlMQ0pwY3lJc0ltdGxlWE5CSWl3aVQySnFaV04wSWl3aWEyVjVjeUlzSW10bGVYTkNJaXdpYkdWdVozUm9JaXdpYzI5eWRDSXNJbWtpTENKb1lYTlBkMjRpTENKdGIyUjFiR1VpTENKbGVIQnZjblJ6SWl3aVpHVm1ZWFZzZENKZExDSnpiM1Z5WTJWeklqcGJJaTR1TDNOeVl5OXBibVJsZUM1cWN5SmRMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUpwYlhCdmNuUWdhWE1nWm5KdmJTQW5iMkpxWldOMExXbHpKenRjYm1sdGNHOXlkQ0JvWVhOUGQyNGdabkp2YlNBbmFHRnpiM2R1Snp0Y2JseHVMeThnWVdSaGNIUmxaQ0JtY205dElHaDBkSEJ6T2k4dloybDBhSFZpTG1OdmJTOW1ZV05sWW05dmF5OXlaV0ZqZEM5aWJHOWlMekUwTkRNeU9HWmxPREUzTVRsbE9URTJZamswTm1VeU1qWTJNRFEzT1dVek1UVTJNV0ppTUdJdmNHRmphMkZuWlhNdmMyaGhjbVZrTDNOb1lXeHNiM2RGY1hWaGJDNXFjeU5NTXpZdFREWTRYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQm1kVzVqZEdsdmJpQnphR0ZzYkc5M1JYRjFZV3dvYjJKcVFTd2diMkpxUWlrZ2UxeHVJQ0JwWmlBb2FYTW9iMkpxUVN3Z2IySnFRaWtwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdkSEoxWlR0Y2JpQWdmVnh1WEc0Z0lHbG1JQ2doYjJKcVFTQjhmQ0FoYjJKcVFpQjhmQ0IwZVhCbGIyWWdiMkpxUVNBaFBUMGdKMjlpYW1WamRDY2dmSHdnZEhsd1pXOW1JRzlpYWtJZ0lUMDlJQ2R2WW1wbFkzUW5LU0I3WEc0Z0lDQWdjbVYwZFhKdUlHWmhiSE5sTzF4dUlDQjlYRzVjYmlBZ1kyOXVjM1FnYTJWNWMwRWdQU0JQWW1wbFkzUXVhMlY1Y3lodlltcEJLVHRjYmlBZ1kyOXVjM1FnYTJWNWMwSWdQU0JQWW1wbFkzUXVhMlY1Y3lodlltcENLVHRjYmx4dUlDQnBaaUFvYTJWNWMwRXViR1Z1WjNSb0lDRTlQU0JyWlhselFpNXNaVzVuZEdncElIdGNiaUFnSUNCeVpYUjFjbTRnWm1Gc2MyVTdYRzRnSUgxY2JseHVJQ0JyWlhselFTNXpiM0owS0NrN1hHNGdJR3RsZVhOQ0xuTnZjblFvS1R0Y2JseHVJQ0F2THlCVVpYTjBJR1p2Y2lCQkozTWdhMlY1Y3lCa2FXWm1aWEpsYm5RZ1puSnZiU0JDTGx4dUlDQm1iM0lnS0d4bGRDQnBJRDBnTURzZ2FTQThJR3RsZVhOQkxteGxibWQwYURzZ2FTQXJQU0F4S1NCN1hHNGdJQ0FnYVdZZ0tDRm9ZWE5QZDI0b2IySnFRaXdnYTJWNWMwRmJhVjBwSUh4OElDRnBjeWh2WW1wQlcydGxlWE5CVzJsZFhTd2diMkpxUWx0clpYbHpRVnRwWFYwcEtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z1ptRnNjMlU3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnY21WMGRYSnVJSFJ5ZFdVN1hHNTlYRzRpWFN3aWJXRndjR2x1WjNNaU9pSTdPenM3T3p0QlFVRkJMRWxCUVVGQkxGTkJRVUVzUjBGQlFVTXNjMEpCUVVFc1EwRkJRVU1zVDBGQlFUdEJRVU5CTEVsQlFVRkRMRTlCUVVFc1IwRkJRVVlzYzBKQlFVRXNRMEZCUVVNc1QwRkJRVHRCUVVFMFFpeFRRVUZCUkN4MVFrRkJRVWNzUjBGQlFTeFhRVUZCUVN4SFFVRkJMRWxCUVVGQkxFZEJRVUVzUTBGQlFVTXNWVUZCUVN4SFFVRkJSQ3hIUVVGQkxHZENRVUZCUVN4SFFVRkJPMEZCUVVFc1UwRkJRVVVzVVVGQlFVTXNRMEZCUVN4elEwRkJRVVFzVDBGQlFTeDNRa0ZCUVVVc1RVRkJRU3gxUWtGQlFVRXNUVUZCUVN4RFFVRkJReXhSUVVGQkxHRkJRVUZHTEVOQlFVRXNhMEpCUVVGQkxFTkJRVUVzWjBKQlFVRkJMRU5CUVVFc1YwRkJRVUVzUTBGQlFTeDVRa0ZCUVVNc1RVRkJRU3hKUVVGQlJDeERRVUZCTEVOQlFVRkhMRmRCUVVFc1MwRkJRVVlzVFVGQlFTeEpRVUZCUkN4RFFVRkJMRXRCUVVGRExFMUJRVUVzUTBGQlFVY3NVMEZCUVN4eFFrRkJRVW9zUTBGQlFTeExRVUZCUkN4UFFVRkJMRU5CUVVGRExFTkJRVUU3UVVGRk5VSTdRVUZEWlN4VFFVRlRTeXhaUVVGWlFTeERRVUZEUXl4SlFVRkpMRVZCUVVWRExFbEJRVWtzUlVGQlJUdEZRVU12UXl4SlFVRkpMRWxCUVVGRExHOUNRVUZGTEVWQlFVTkdMRWxCUVVrc1JVRkJSVU1zU1VGQlNTeERRVUZETEVWQlFVVTdTVUZEYkVJc1QwRkJUeXhKUVVGSk8wVkJRMkk3UlVGRlFTeEpRVUZKTEVOQlFVTkVMRWxCUVVrc1NVRkJTU3hEUVVGRFF5eEpRVUZKTEVsQlFVbFNMRTlCUVVFc1EwRkJUMDhzU1VGQlNTeE5RVUZMTEZGQlFWRXNTVUZCU1ZBc1QwRkJRU3hEUVVGUFVTeEpRVUZKTEUxQlFVc3NVVUZCVVN4RlFVRkZPMGxCUXpGRkxFOUJRVThzUzBGQlN6dEZRVU5rTzBWQlJVRXNTVUZCVFVVc1MwRkJTeXhIUVVGSFF5eE5RVUZOTEVOQlFVTkRMRWxCUVVrc1EwRkJRMHdzU1VGQlNTeERRVUZETzBWQlF5OUNMRWxCUVUxTkxFdEJRVXNzUjBGQlIwWXNUVUZCVFN4RFFVRkRReXhKUVVGSkxFTkJRVU5LTEVsQlFVa3NRMEZCUXp0RlFVVXZRaXhKUVVGSlJTeExRVUZMTEVOQlFVTkpMRTFCUVUwc1MwRkJTMFFzUzBGQlN5eERRVUZEUXl4TlFVRk5MRVZCUVVVN1NVRkRha01zVDBGQlR5eExRVUZMTzBWQlEyUTdSVUZGUVVvc1MwRkJTeXhEUVVGRFN5eEpRVUZKTEVOQlFVTXNRMEZCUXp0RlFVTmFSaXhMUVVGTExFTkJRVU5GTEVsQlFVa3NRMEZCUXl4RFFVRkRPenRGUVVWYU8wVkJRMEVzUzBGQlN5eEpRVUZKUXl4RFFVRkRMRWRCUVVjc1EwRkJReXhGUVVGRlFTeERRVUZETEVkQlFVZE9MRXRCUVVzc1EwRkJRMGtzVFVGQlRTeEZRVUZGUlN4RFFVRkRMRWxCUVVrc1EwRkJReXhGUVVGRk8wbEJRM2hETEVsQlFVa3NRMEZCUXl4SlFVRkJReXhyUWtGQlRTeEZRVUZEVkN4SlFVRkpMRVZCUVVWRkxFdEJRVXNzUTBGQlEwMHNRMEZCUXl4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVUZRTEc5Q1FVRkZMRVZCUVVOR0xFbEJRVWtzUTBGQlEwY3NTMEZCU3l4RFFVRkRUU3hEUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGVWl4SlFVRkpMRU5CUVVORkxFdEJRVXNzUTBGQlEwMHNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRk8wMUJRMnhGTEU5QlFVOHNTMEZCU3p0SlFVTmtPMFZCUTBZN1JVRkZRU3hQUVVGUExFbEJRVWs3UVVGRFlqdEJRVUZEUlN4TlFVRkJMRU5CUVVGRExFOUJRVUVzUjBGQlFVRXNUMEZCUVN4RFFVRkJReXhQUVVGQkluMD1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG5leHBvcnRzLnR5cGVOYW1lID0gdHlwZU5hbWU7XG5leHBvcnRzLnNwYWNlcyA9IHNwYWNlcztcbmV4cG9ydHMuaW5kZW50ID0gaW5kZW50O1xuZXhwb3J0cy5kZWJ1Z05vZGUgPSBkZWJ1Z05vZGU7XG5leHBvcnRzLmRlYnVnTm9kZXMgPSBkZWJ1Z05vZGVzO1xuXG52YXIgX2xvZGFzaCA9IHJlcXVpcmUoJ2xvZGFzaC5lc2NhcGUnKTtcblxudmFyIF9sb2Rhc2gyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbG9kYXNoKTtcblxudmFyIF9mdW5jdGlvblByb3RvdHlwZSA9IHJlcXVpcmUoJ2Z1bmN0aW9uLnByb3RvdHlwZS5uYW1lJyk7XG5cbnZhciBfZnVuY3Rpb25Qcm90b3R5cGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZnVuY3Rpb25Qcm90b3R5cGUpO1xuXG52YXIgX2lzU3RyaW5nID0gcmVxdWlyZSgnaXMtc3RyaW5nJyk7XG5cbnZhciBfaXNTdHJpbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaXNTdHJpbmcpO1xuXG52YXIgX2lzTnVtYmVyT2JqZWN0ID0gcmVxdWlyZSgnaXMtbnVtYmVyLW9iamVjdCcpO1xuXG52YXIgX2lzTnVtYmVyT2JqZWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2lzTnVtYmVyT2JqZWN0KTtcblxudmFyIF9pc0NhbGxhYmxlID0gcmVxdWlyZSgnaXMtY2FsbGFibGUnKTtcblxudmFyIF9pc0NhbGxhYmxlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2lzQ2FsbGFibGUpO1xuXG52YXIgX2lzQm9vbGVhbk9iamVjdCA9IHJlcXVpcmUoJ2lzLWJvb2xlYW4tb2JqZWN0Jyk7XG5cbnZhciBfaXNCb29sZWFuT2JqZWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2lzQm9vbGVhbk9iamVjdCk7XG5cbnZhciBfb2JqZWN0SW5zcGVjdCA9IHJlcXVpcmUoJ29iamVjdC1pbnNwZWN0Jyk7XG5cbnZhciBfb2JqZWN0SW5zcGVjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9vYmplY3RJbnNwZWN0KTtcblxudmFyIF9oYXMgPSByZXF1aXJlKCdoYXMnKTtcblxudmFyIF9oYXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaGFzKTtcblxudmFyIF9SU1RUcmF2ZXJzYWwgPSByZXF1aXJlKCcuL1JTVFRyYXZlcnNhbCcpO1xuXG52YXIgX2dldEFkYXB0ZXIgPSByZXF1aXJlKCcuL2dldEFkYXB0ZXInKTtcblxudmFyIF9nZXRBZGFwdGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldEFkYXB0ZXIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbnZhciBib29sZWFuVmFsdWUgPSBGdW5jdGlvbi5iaW5kLmNhbGwoRnVuY3Rpb24uY2FsbCwgQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZik7XG5cbmZ1bmN0aW9uIHR5cGVOYW1lKG5vZGUpIHtcbiAgdmFyIGFkYXB0ZXIgPSAoMCwgX2dldEFkYXB0ZXIyWydkZWZhdWx0J10pKCk7XG4gIGlmIChhZGFwdGVyLmRpc3BsYXlOYW1lT2ZOb2RlKSB7XG4gICAgcmV0dXJuICgwLCBfZ2V0QWRhcHRlcjJbJ2RlZmF1bHQnXSkoKS5kaXNwbGF5TmFtZU9mTm9kZShub2RlKSB8fCAnQ29tcG9uZW50JztcbiAgfVxuICByZXR1cm4gdHlwZW9mIG5vZGUudHlwZSA9PT0gJ2Z1bmN0aW9uJyA/IG5vZGUudHlwZS5kaXNwbGF5TmFtZSB8fCAoMCwgX2Z1bmN0aW9uUHJvdG90eXBlMlsnZGVmYXVsdCddKShub2RlLnR5cGUpIHx8ICdDb21wb25lbnQnIDogbm9kZS50eXBlO1xufVxuXG5mdW5jdGlvbiBzcGFjZXMobikge1xuICByZXR1cm4gQXJyYXkobiArIDEpLmpvaW4oJyAnKTtcbn1cblxuZnVuY3Rpb24gaW5kZW50KGRlcHRoLCBzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy5zcGxpdCgnXFxuJykubWFwKGZ1bmN0aW9uICh4KSB7XG4gICAgcmV0dXJuICcnICsgU3RyaW5nKHNwYWNlcyhkZXB0aCkpICsgU3RyaW5nKHgpO1xuICB9KS5qb2luKCdcXG4nKTtcbn1cblxuZnVuY3Rpb24gcHJvcFN0cmluZyhwcm9wLCBvcHRpb25zKSB7XG4gIGlmICgoMCwgX2lzU3RyaW5nMlsnZGVmYXVsdCddKShwcm9wKSkge1xuICAgIHJldHVybiAoMCwgX29iamVjdEluc3BlY3QyWydkZWZhdWx0J10pKFN0cmluZyhwcm9wKSwgeyBxdW90ZVN0eWxlOiAnZG91YmxlJyB9KTtcbiAgfVxuICBpZiAoKDAsIF9pc051bWJlck9iamVjdDJbJ2RlZmF1bHQnXSkocHJvcCkpIHtcbiAgICByZXR1cm4gJ3snICsgU3RyaW5nKCgwLCBfb2JqZWN0SW5zcGVjdDJbJ2RlZmF1bHQnXSkoTnVtYmVyKHByb3ApKSkgKyAnfSc7XG4gIH1cbiAgaWYgKCgwLCBfaXNCb29sZWFuT2JqZWN0MlsnZGVmYXVsdCddKShwcm9wKSkge1xuICAgIHJldHVybiAneycgKyBTdHJpbmcoKDAsIF9vYmplY3RJbnNwZWN0MlsnZGVmYXVsdCddKShib29sZWFuVmFsdWUocHJvcCkpKSArICd9JztcbiAgfVxuICBpZiAoKDAsIF9pc0NhbGxhYmxlMlsnZGVmYXVsdCddKShwcm9wKSkge1xuICAgIHJldHVybiAneycgKyBTdHJpbmcoKDAsIF9vYmplY3RJbnNwZWN0MlsnZGVmYXVsdCddKShwcm9wKSkgKyAnfSc7XG4gIH1cbiAgaWYgKCh0eXBlb2YgcHJvcCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YocHJvcCkpID09PSAnb2JqZWN0Jykge1xuICAgIGlmIChvcHRpb25zLnZlcmJvc2UpIHtcbiAgICAgIHJldHVybiAneycgKyBTdHJpbmcoKDAsIF9vYmplY3RJbnNwZWN0MlsnZGVmYXVsdCddKShwcm9wKSkgKyAnfSc7XG4gICAgfVxuXG4gICAgcmV0dXJuICd7ey4uLn19JztcbiAgfVxuICByZXR1cm4gJ3tbJyArICh0eXBlb2YgcHJvcCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YocHJvcCkpICsgJ119Jztcbn1cblxuZnVuY3Rpb24gcHJvcHNTdHJpbmcobm9kZSwgb3B0aW9ucykge1xuICB2YXIgcHJvcHMgPSAoMCwgX1JTVFRyYXZlcnNhbC5wcm9wc09mTm9kZSkobm9kZSk7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMocHJvcHMpLmZpbHRlcihmdW5jdGlvbiAoeCkge1xuICAgIHJldHVybiB4ICE9PSAnY2hpbGRyZW4nO1xuICB9KTtcbiAgcmV0dXJuIGtleXMubWFwKGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gU3RyaW5nKGtleSkgKyAnPScgKyBTdHJpbmcocHJvcFN0cmluZyhwcm9wc1trZXldLCBvcHRpb25zKSk7XG4gIH0pLmpvaW4oJyAnKTtcbn1cblxuZnVuY3Rpb24gaW5kZW50Q2hpbGRyZW4oY2hpbGRyZW5TdHJzLCBpbmRlbnRMZW5ndGgpIHtcbiAgcmV0dXJuIGNoaWxkcmVuU3Rycy5sZW5ndGggPyAnXFxuJyArIFN0cmluZyhjaGlsZHJlblN0cnMubWFwKGZ1bmN0aW9uICh4KSB7XG4gICAgcmV0dXJuIGluZGVudChpbmRlbnRMZW5ndGgsIHgpO1xuICB9KS5qb2luKCdcXG4nKSkgKyAnXFxuJyA6ICcnO1xufVxuXG5mdW5jdGlvbiBpc1JTVE5vZGVMaWtlKG5vZGUpIHtcbiAgcmV0dXJuICgwLCBfaGFzMlsnZGVmYXVsdCddKShub2RlLCAnbm9kZVR5cGUnKSAmJiB0eXBlb2Ygbm9kZS5ub2RlVHlwZSA9PT0gJ3N0cmluZycgJiYgKDAsIF9oYXMyWydkZWZhdWx0J10pKG5vZGUsICd0eXBlJykgJiYgKDAsIF9oYXMyWydkZWZhdWx0J10pKG5vZGUsICdrZXknKSAmJiAoMCwgX2hhczJbJ2RlZmF1bHQnXSkobm9kZSwgJ3JlZicpICYmICgwLCBfaGFzMlsnZGVmYXVsdCddKShub2RlLCAnaW5zdGFuY2UnKSAmJiAoMCwgX2hhczJbJ2RlZmF1bHQnXSkobm9kZSwgJ3JlbmRlcmVkJyk7XG59XG5cbmZ1bmN0aW9uIGRlYnVnTm9kZShub2RlKSB7XG4gIHZhciBpbmRlbnRMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDI7XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTtcblxuICBpZiAodHlwZW9mIG5vZGUgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBub2RlID09PSAnbnVtYmVyJykgcmV0dXJuICgwLCBfbG9kYXNoMlsnZGVmYXVsdCddKShub2RlKTtcbiAgaWYgKHR5cGVvZiBub2RlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIG5hbWUgPSAoMCwgX2Z1bmN0aW9uUHJvdG90eXBlMlsnZGVmYXVsdCddKShub2RlKTtcbiAgICByZXR1cm4gJ1tmdW5jdGlvbicgKyAobmFtZSA/ICcgJyArIFN0cmluZyhuYW1lKSA6ICcnKSArICddJztcbiAgfVxuICBpZiAoIW5vZGUpIHJldHVybiAnJztcblxuICB2YXIgYWRhcHRlciA9ICgwLCBfZ2V0QWRhcHRlcjJbJ2RlZmF1bHQnXSkoKTtcbiAgaWYgKCFhZGFwdGVyLmlzVmFsaWRFbGVtZW50KG5vZGUpICYmICFpc1JTVE5vZGVMaWtlKG5vZGUpKSB7XG4gICAgcmV0dXJuICd7JyArIFN0cmluZygoMCwgX29iamVjdEluc3BlY3QyWydkZWZhdWx0J10pKG5vZGUpKSArICd9JztcbiAgfVxuXG4gIHZhciBjaGlsZHJlblN0cnMgPSAoMCwgX1JTVFRyYXZlcnNhbC5jaGlsZHJlbk9mTm9kZSkobm9kZSkubWFwKGZ1bmN0aW9uIChuKSB7XG4gICAgcmV0dXJuIGRlYnVnTm9kZShuLCBpbmRlbnRMZW5ndGgsIG9wdGlvbnMpO1xuICB9KS5maWx0ZXIoQm9vbGVhbik7XG4gIHZhciB0eXBlID0gdHlwZU5hbWUobm9kZSk7XG5cbiAgdmFyIHByb3BzID0gb3B0aW9ucy5pZ25vcmVQcm9wcyA/ICcnIDogcHJvcHNTdHJpbmcobm9kZSwgb3B0aW9ucyk7XG4gIHZhciBiZWZvcmVQcm9wcyA9IHByb3BzID8gJyAnIDogJyc7XG4gIHZhciBhZnRlclByb3BzID0gY2hpbGRyZW5TdHJzLmxlbmd0aCA/ICc+JyA6ICcgJztcbiAgdmFyIGNoaWxkcmVuSW5kZW50ZWQgPSBpbmRlbnRDaGlsZHJlbihjaGlsZHJlblN0cnMsIGluZGVudExlbmd0aCk7XG4gIHZhciBub2RlQ2xvc2UgPSBjaGlsZHJlblN0cnMubGVuZ3RoID8gJzwvJyArIFN0cmluZyh0eXBlKSArICc+JyA6ICcvPic7XG4gIHJldHVybiAnPCcgKyBTdHJpbmcodHlwZSkgKyBiZWZvcmVQcm9wcyArIFN0cmluZyhwcm9wcykgKyBhZnRlclByb3BzICsgU3RyaW5nKGNoaWxkcmVuSW5kZW50ZWQpICsgbm9kZUNsb3NlO1xufVxuXG5mdW5jdGlvbiBkZWJ1Z05vZGVzKG5vZGVzKSB7XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcblxuICByZXR1cm4gbm9kZXMubWFwKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgcmV0dXJuIGRlYnVnTm9kZShub2RlLCB1bmRlZmluZWQsIG9wdGlvbnMpO1xuICB9KS5qb2luKCdcXG5cXG5cXG4nKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpNHVMM055WXk5RVpXSjFaeTVxY3lKZExDSnVZVzFsY3lJNld5SjBlWEJsVG1GdFpTSXNJbk53WVdObGN5SXNJbWx1WkdWdWRDSXNJbVJsWW5WblRtOWtaU0lzSW1SbFluVm5UbTlrWlhNaUxDSmliMjlzWldGdVZtRnNkV1VpTENKR2RXNWpkR2x2YmlJc0ltSnBibVFpTENKallXeHNJaXdpUW05dmJHVmhiaUlzSW5CeWIzUnZkSGx3WlNJc0luWmhiSFZsVDJZaUxDSnViMlJsSWl3aVlXUmhjSFJsY2lJc0ltUnBjM0JzWVhsT1lXMWxUMlpPYjJSbElpd2lkSGx3WlNJc0ltUnBjM0JzWVhsT1lXMWxJaXdpYmlJc0lrRnljbUY1SWl3aWFtOXBiaUlzSW1SbGNIUm9JaXdpYzNSeWFXNW5JaXdpYzNCc2FYUWlMQ0p0WVhBaUxDSjRJaXdpY0hKdmNGTjBjbWx1WnlJc0luQnliM0FpTENKdmNIUnBiMjV6SWl3aVUzUnlhVzVuSWl3aWNYVnZkR1ZUZEhsc1pTSXNJazUxYldKbGNpSXNJblpsY21KdmMyVWlMQ0p3Y205d2MxTjBjbWx1WnlJc0luQnliM0J6SWl3aWEyVjVjeUlzSWs5aWFtVmpkQ0lzSW1acGJIUmxjaUlzSW10bGVTSXNJbWx1WkdWdWRFTm9hV3hrY21WdUlpd2lZMmhwYkdSeVpXNVRkSEp6SWl3aWFXNWtaVzUwVEdWdVozUm9JaXdpYkdWdVozUm9JaXdpYVhOU1UxUk9iMlJsVEdsclpTSXNJbTV2WkdWVWVYQmxJaXdpYm1GdFpTSXNJbWx6Vm1Gc2FXUkZiR1Z0Wlc1MElpd2lhV2R1YjNKbFVISnZjSE1pTENKaVpXWnZjbVZRY205d2N5SXNJbUZtZEdWeVVISnZjSE1pTENKamFHbHNaSEpsYmtsdVpHVnVkR1ZrSWl3aWJtOWtaVU5zYjNObElpd2libTlrWlhNaUxDSjFibVJsWm1sdVpXUWlYU3dpYldGd2NHbHVaM01pT2lJN096czdPenM3TzFGQmFVSm5Ra0VzVVN4SFFVRkJRU3hSTzFGQlZVRkRMRTBzUjBGQlFVRXNUVHRSUVVsQlF5eE5MRWRCUVVGQkxFMDdVVUZwUkVGRExGTXNSMEZCUVVFc1V6dFJRVFJDUVVNc1ZTeEhRVUZCUVN4Vk96dEJRVFZIYUVJN096czdRVUZEUVRzN096dEJRVU5CT3pzN08wRkJRMEU3T3pzN1FVRkRRVHM3T3p0QlFVTkJPenM3TzBGQlEwRTdPenM3UVVGRFFUczdPenRCUVVWQk96dEJRVWxCT3pzN096czdRVUZGUVN4SlFVRk5ReXhsUVVGbFF5eFRRVUZUUXl4SlFVRlVMRU5CUVdORExFbEJRV1FzUTBGQmJVSkdMRk5CUVZORkxFbEJRVFZDTEVWQlFXdERReXhSUVVGUlF5eFRRVUZTTEVOQlFXdENReXhQUVVGd1JDeERRVUZ5UWpzN1FVRkZUeXhUUVVGVFdDeFJRVUZVTEVOQlFXdENXU3hKUVVGc1FpeEZRVUYzUWp0QlFVTTNRaXhOUVVGTlF5eFZRVUZWTERoQ1FVRm9RanRCUVVOQkxFMUJRVWxCTEZGQlFWRkRMR2xDUVVGYUxFVkJRU3RDTzBGQlF6ZENMRmRCUVU4c0swSkJRV0ZCTEdsQ1FVRmlMRU5CUVN0Q1JpeEpRVUV2UWl4TFFVRjNReXhYUVVFdlF6dEJRVU5FTzBGQlEwUXNVMEZCVHl4UFFVRlBRU3hMUVVGTFJ5eEpRVUZhTEV0QlFYRkNMRlZCUVhKQ0xFZEJRMFpJTEV0QlFVdEhMRWxCUVV3c1EwRkJWVU1zVjBGQlZpeEpRVUY1UWl4dlEwRkJZVW9zUzBGQlMwY3NTVUZCYkVJc1EwRkJla0lzU1VGQmIwUXNWMEZFYkVRc1IwRkZTRWdzUzBGQlMwY3NTVUZHVkR0QlFVZEVPenRCUVVWTkxGTkJRVk5rTEUxQlFWUXNRMEZCWjBKblFpeERRVUZvUWl4RlFVRnRRanRCUVVONFFpeFRRVUZQUXl4TlFVRk5SQ3hKUVVGSkxFTkJRVllzUlVGQllVVXNTVUZCWWl4RFFVRnJRaXhIUVVGc1FpeERRVUZRTzBGQlEwUTdPMEZCUlUwc1UwRkJVMnBDTEUxQlFWUXNRMEZCWjBKclFpeExRVUZvUWl4RlFVRjFRa01zVFVGQmRrSXNSVUZCSzBJN1FVRkRjRU1zVTBGQlQwRXNUMEZCVDBNc1MwRkJVQ3hEUVVGaExFbEJRV0lzUlVGQmJVSkRMRWRCUVc1Q0xFTkJRWFZDTEZWQlFVTkRMRU5CUVVRN1FVRkJRU3gxUWtGQlZYWkNMRTlCUVU5dFFpeExRVUZRTEVOQlFWWXNWMEZCTUVKSkxFTkJRVEZDTzBGQlFVRXNSMEZCZGtJc1JVRkJjMFJNTEVsQlFYUkVMRU5CUVRKRUxFbEJRVE5FTEVOQlFWQTdRVUZEUkRzN1FVRkZSQ3hUUVVGVFRTeFZRVUZVTEVOQlFXOUNReXhKUVVGd1FpeEZRVUV3UWtNc1QwRkJNVUlzUlVGQmJVTTdRVUZEYWtNc1RVRkJTU3d5UWtGQlUwUXNTVUZCVkN4RFFVRktMRVZCUVc5Q08wRkJRMnhDTEZkQlFVOHNaME5CUVZGRkxFOUJRVTlHTEVsQlFWQXNRMEZCVWl4RlFVRnpRaXhGUVVGRlJ5eFpRVUZaTEZGQlFXUXNSVUZCZEVJc1EwRkJVRHRCUVVORU8wRkJRMFFzVFVGQlNTeHBRMEZCVTBnc1NVRkJWQ3hEUVVGS0xFVkJRVzlDTzBGQlEyeENMSGRDUVVGWExHZERRVUZSU1N4UFFVRlBTaXhKUVVGUUxFTkJRVklzUTBGQldEdEJRVU5FTzBGQlEwUXNUVUZCU1N4clEwRkJWVUVzU1VGQlZpeERRVUZLTEVWQlFYRkNPMEZCUTI1Q0xIZENRVUZYTEdkRFFVRlJja0lzWVVGQllYRkNMRWxCUVdJc1EwRkJVaXhEUVVGWU8wRkJRMFE3UVVGRFJDeE5RVUZKTERaQ1FVRlhRU3hKUVVGWUxFTkJRVW9zUlVGQmMwSTdRVUZEY0VJc2QwSkJRVmNzWjBOQlFWRkJMRWxCUVZJc1EwRkJXRHRCUVVORU8wRkJRMFFzVFVGQlNTeFJRVUZQUVN4SlFVRlFMSGxEUVVGUFFTeEpRVUZRTEU5QlFXZENMRkZCUVhCQ0xFVkJRVGhDTzBGQlF6VkNMRkZCUVVsRExGRkJRVkZKTEU5QlFWb3NSVUZCY1VJN1FVRkRia0lzTUVKQlFWY3NaME5CUVZGTUxFbEJRVklzUTBGQldEdEJRVU5FT3p0QlFVVkVMRmRCUVU4c1UwRkJVRHRCUVVORU8wRkJRMFFzZDBKQlFXMUNRU3hKUVVGdVFpeDVRMEZCYlVKQkxFbEJRVzVDTzBGQlEwUTdPMEZCUlVRc1UwRkJVMDBzVjBGQlZDeERRVUZ4UW5CQ0xFbEJRWEpDTEVWQlFUSkNaU3hQUVVFelFpeEZRVUZ2UXp0QlFVTnNReXhOUVVGTlRTeFJRVUZSTEN0Q1FVRlpja0lzU1VGQldpeERRVUZrTzBGQlEwRXNUVUZCVFhOQ0xFOUJRVTlETEU5QlFVOUVMRWxCUVZBc1EwRkJXVVFzUzBGQldpeEZRVUZ0UWtjc1RVRkJia0lzUTBGQk1FSXNWVUZCUTFvc1EwRkJSRHRCUVVGQkxGZEJRVTlCTEUxQlFVMHNWVUZCWWp0QlFVRkJMRWRCUVRGQ0xFTkJRV0k3UVVGRFFTeFRRVUZQVlN4TFFVRkxXQ3hIUVVGTUxFTkJRVk1zVlVGQlEyTXNSMEZCUkR0QlFVRkJMR3RDUVVGWlFTeEhRVUZhTEdsQ1FVRnRRbG9zVjBGQlYxRXNUVUZCVFVrc1IwRkJUaXhEUVVGWUxFVkJRWFZDVml4UFFVRjJRaXhEUVVGdVFqdEJRVUZCTEVkQlFWUXNSVUZCSzBSU0xFbEJRUzlFTEVOQlFXOUZMRWRCUVhCRkxFTkJRVkE3UVVGRFJEczdRVUZGUkN4VFFVRlRiVUlzWTBGQlZDeERRVUYzUWtNc1dVRkJlRUlzUlVGQmMwTkRMRmxCUVhSRExFVkJRVzlFTzBGQlEyeEVMRk5CUVU5RUxHRkJRV0ZGTEUxQlFXSXNhVUpCUTBWR0xHRkJRV0ZvUWl4SFFVRmlMRU5CUVdsQ0xGVkJRVU5ETEVOQlFVUTdRVUZCUVN4WFFVRlBkRUlzVDBGQlQzTkRMRmxCUVZBc1JVRkJjVUpvUWl4RFFVRnlRaXhEUVVGUU8wRkJRVUVzUjBGQmFrSXNSVUZCYVVSTUxFbEJRV3BFTEVOQlFYTkVMRWxCUVhSRUxFTkJSRVlzVjBGRlNDeEZRVVpLTzBGQlIwUTdPMEZCUlVRc1UwRkJVM1ZDTEdGQlFWUXNRMEZCZFVJNVFpeEpRVUYyUWl4RlFVRTJRanRCUVVNelFpeFRRVUZQTEhOQ1FVRkpRU3hKUVVGS0xFVkJRVlVzVlVGQlZpeExRVU5HTEU5QlFVOUJMRXRCUVVzclFpeFJRVUZhTEV0QlFYbENMRkZCUkhaQ0xFbEJSVVlzYzBKQlFVa3ZRaXhKUVVGS0xFVkJRVlVzVFVGQlZpeERRVVpGTEVsQlIwWXNjMEpCUVVsQkxFbEJRVW9zUlVGQlZTeExRVUZXTEVOQlNFVXNTVUZKUml4elFrRkJTVUVzU1VGQlNpeEZRVUZWTEV0QlFWWXNRMEZLUlN4SlFVdEdMSE5DUVVGSlFTeEpRVUZLTEVWQlFWVXNWVUZCVml4RFFVeEZMRWxCVFVZc2MwSkJRVWxCTEVsQlFVb3NSVUZCVlN4VlFVRldMRU5CVGt3N1FVRlBSRHM3UVVGRlRTeFRRVUZUVkN4VFFVRlVMRU5CUVcxQ1V5eEpRVUZ1UWl4RlFVRjVSRHRCUVVGQkxFMUJRV2hETkVJc1dVRkJaME1zZFVWQlFXcENMRU5CUVdsQ08wRkJRVUVzVFVGQlpHSXNUMEZCWXl4MVJVRkJTaXhGUVVGSk96dEJRVU01UkN4TlFVRkpMRTlCUVU5bUxFbEJRVkFzUzBGQlowSXNVVUZCYUVJc1NVRkJORUlzVDBGQlQwRXNTVUZCVUN4TFFVRm5RaXhSUVVGb1JDeEZRVUV3UkN4UFFVRlBMSGxDUVVGUFFTeEpRVUZRTEVOQlFWQTdRVUZETVVRc1RVRkJTU3hQUVVGUFFTeEpRVUZRTEV0QlFXZENMRlZCUVhCQ0xFVkJRV2RETzBGQlF6bENMRkZCUVUxblF5eFBRVUZQTEc5RFFVRmhhRU1zU1VGQllpeERRVUZpTzBGQlEwRXNNRUpCUVcxQ1owTXNiMEpCUVZkQkxFbEJRVmdzU1VGQmIwSXNSVUZCZGtNN1FVRkRSRHRCUVVORUxFMUJRVWtzUTBGQlEyaERMRWxCUVV3c1JVRkJWeXhQUVVGUExFVkJRVkE3TzBGQlJWZ3NUVUZCVFVNc1ZVRkJWU3c0UWtGQmFFSTdRVUZEUVN4TlFVRkpMRU5CUVVOQkxGRkJRVkZuUXl4alFVRlNMRU5CUVhWQ2FrTXNTVUZCZGtJc1EwRkJSQ3hKUVVGcFF5eERRVUZET0VJc1kwRkJZemxDTEVsQlFXUXNRMEZCZEVNc1JVRkJNa1E3UVVGRGVrUXNkMEpCUVZjc1owTkJRVkZCTEVsQlFWSXNRMEZCV0R0QlFVTkVPenRCUVVWRUxFMUJRVTB5UWl4bFFVRmxMR3REUVVGbE0wSXNTVUZCWml4RlFVTnNRbGNzUjBGRWEwSXNRMEZEWkN4VlFVRkRUaXhEUVVGRU8wRkJRVUVzVjBGQlQyUXNWVUZCVldNc1EwRkJWaXhGUVVGaGRVSXNXVUZCWWl4RlFVRXlRbUlzVDBGQk0wSXNRMEZCVUR0QlFVRkJMRWRCUkdNc1JVRkZiRUpUTEUxQlJtdENMRU5CUlZnelFpeFBRVVpYTEVOQlFYSkNPMEZCUjBFc1RVRkJUVTBzVDBGQlQyWXNVMEZCVTFrc1NVRkJWQ3hEUVVGaU96dEJRVVZCTEUxQlFVMXhRaXhSUVVGUlRpeFJRVUZSYlVJc1YwRkJVaXhIUVVGelFpeEZRVUYwUWl4SFFVRXlRbVFzV1VGQldYQkNMRWxCUVZvc1JVRkJhMEpsTEU5QlFXeENMRU5CUVhwRE8wRkJRMEVzVFVGQlRXOUNMR05CUVdOa0xGRkJRVkVzUjBGQlVpeEhRVUZqTEVWQlFXeERPMEZCUTBFc1RVRkJUV1VzWVVGQllWUXNZVUZCWVVVc1RVRkJZaXhIUVVObUxFZEJSR1VzUjBGRlppeEhRVVpLTzBGQlIwRXNUVUZCVFZFc2JVSkJRVzFDV0N4bFFVRmxReXhaUVVGbUxFVkJRVFpDUXl4WlFVRTNRaXhEUVVGNlFqdEJRVU5CTEUxQlFVMVZMRmxCUVZsWUxHRkJRV0ZGTEUxQlFXSXNhVUpCUVRKQ01VSXNTVUZCTTBJc1ZVRkJjVU1zU1VGQmRrUTdRVUZEUVN4elFrRkJWMEVzU1VGQldDeEpRVUZyUW1kRExGZEJRV3hDTEZWQlFXZERaQ3hMUVVGb1F5eEpRVUYzUTJVc1ZVRkJlRU1zVlVGQmNVUkRMR2RDUVVGeVJDeEpRVUYzUlVNc1UwRkJlRVU3UVVGRFJEczdRVUZGVFN4VFFVRlRPVU1zVlVGQlZDeERRVUZ2UWl0RExFdEJRWEJDTEVWQlFYbERPMEZCUVVFc1RVRkJaSGhDTEU5QlFXTXNkVVZCUVVvc1JVRkJTVHM3UVVGRE9VTXNVMEZCVDNkQ0xFMUJRVTAxUWl4SFFVRk9MRU5CUVZVc1ZVRkJRMWdzU1VGQlJEdEJRVUZCTEZkQlFWVlVMRlZCUVZWVExFbEJRVllzUlVGQlowSjNReXhUUVVGb1FpeEZRVUV5UW5wQ0xFOUJRVE5DTEVOQlFWWTdRVUZCUVN4SFFVRldMRVZCUVhsRVVpeEpRVUY2UkN4RFFVRTRSQ3hSUVVFNVJDeERRVUZRTzBGQlEwUWlMQ0ptYVd4bElqb2lSR1ZpZFdjdWFuTWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUpwYlhCdmNuUWdaWE5qWVhCbElHWnliMjBnSjJ4dlpHRnphQzVsYzJOaGNHVW5PMXh1YVcxd2IzSjBJR1oxYm1OMGFXOXVUbUZ0WlNCbWNtOXRJQ2RtZFc1amRHbHZiaTV3Y205MGIzUjVjR1V1Ym1GdFpTYzdYRzVwYlhCdmNuUWdhWE5UZEhKcGJtY2dabkp2YlNBbmFYTXRjM1J5YVc1bkp6dGNibWx0Y0c5eWRDQnBjMDUxYldKbGNpQm1jbTl0SUNkcGN5MXVkVzFpWlhJdGIySnFaV04wSnp0Y2JtbHRjRzl5ZENCcGMwTmhiR3hoWW14bElHWnliMjBnSjJsekxXTmhiR3hoWW14bEp6dGNibWx0Y0c5eWRDQnBjMEp2YjJ4bFlXNGdabkp2YlNBbmFYTXRZbTl2YkdWaGJpMXZZbXBsWTNRbk8xeHVhVzF3YjNKMElHbHVjM0JsWTNRZ1puSnZiU0FuYjJKcVpXTjBMV2x1YzNCbFkzUW5PMXh1YVcxd2IzSjBJR2hoY3lCbWNtOXRJQ2RvWVhNbk8xeHVYRzVwYlhCdmNuUWdlMXh1SUNCd2NtOXdjMDltVG05a1pTeGNiaUFnWTJocGJHUnlaVzVQWms1dlpHVXNYRzU5SUdaeWIyMGdKeTR2VWxOVVZISmhkbVZ5YzJGc0p6dGNibWx0Y0c5eWRDQm5aWFJCWkdGd2RHVnlJR1p5YjIwZ0p5NHZaMlYwUVdSaGNIUmxjaWM3WEc1Y2JtTnZibk4wSUdKdmIyeGxZVzVXWVd4MVpTQTlJRVoxYm1OMGFXOXVMbUpwYm1RdVkyRnNiQ2hHZFc1amRHbHZiaTVqWVd4c0xDQkNiMjlzWldGdUxuQnliM1J2ZEhsd1pTNTJZV3gxWlU5bUtUdGNibHh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJSFI1Y0dWT1lXMWxLRzV2WkdVcElIdGNiaUFnWTI5dWMzUWdZV1JoY0hSbGNpQTlJR2RsZEVGa1lYQjBaWElvS1R0Y2JpQWdhV1lnS0dGa1lYQjBaWEl1WkdsemNHeGhlVTVoYldWUFprNXZaR1VwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdaMlYwUVdSaGNIUmxjaWdwTG1ScGMzQnNZWGxPWVcxbFQyWk9iMlJsS0c1dlpHVXBJSHg4SUNkRGIyMXdiMjVsYm5Rbk8xeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCMGVYQmxiMllnYm05a1pTNTBlWEJsSUQwOVBTQW5ablZ1WTNScGIyNG5YRzRnSUNBZ1B5QW9ibTlrWlM1MGVYQmxMbVJwYzNCc1lYbE9ZVzFsSUh4OElHWjFibU4wYVc5dVRtRnRaU2h1YjJSbExuUjVjR1VwSUh4OElDZERiMjF3YjI1bGJuUW5LVnh1SUNBZ0lEb2dibTlrWlM1MGVYQmxPMXh1ZlZ4dVhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z2MzQmhZMlZ6S0c0cElIdGNiaUFnY21WMGRYSnVJRUZ5Y21GNUtHNGdLeUF4S1M1cWIybHVLQ2NnSnlrN1hHNTlYRzVjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJwYm1SbGJuUW9aR1Z3ZEdnc0lITjBjbWx1WnlrZ2UxeHVJQ0J5WlhSMWNtNGdjM1J5YVc1bkxuTndiR2wwS0NkY1hHNG5LUzV0WVhBb0tIZ3BJRDArSUdBa2UzTndZV05sY3loa1pYQjBhQ2w5Skh0NGZXQXBMbXB2YVc0b0oxeGNiaWNwTzF4dWZWeHVYRzVtZFc1amRHbHZiaUJ3Y205d1UzUnlhVzVuS0hCeWIzQXNJRzl3ZEdsdmJuTXBJSHRjYmlBZ2FXWWdLR2x6VTNSeWFXNW5LSEJ5YjNBcEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUdsdWMzQmxZM1FvVTNSeWFXNW5LSEJ5YjNBcExDQjdJSEYxYjNSbFUzUjViR1U2SUNka2IzVmliR1VuSUgwcE8xeHVJQ0I5WEc0Z0lHbG1JQ2hwYzA1MWJXSmxjaWh3Y205d0tTa2dlMXh1SUNBZ0lISmxkSFZ5YmlCZ2V5UjdhVzV6Y0dWamRDaE9kVzFpWlhJb2NISnZjQ2twZlgxZ08xeHVJQ0I5WEc0Z0lHbG1JQ2hwYzBKdmIyeGxZVzRvY0hKdmNDa3BJSHRjYmlBZ0lDQnlaWFIxY200Z1lIc2tlMmx1YzNCbFkzUW9ZbTl2YkdWaGJsWmhiSFZsS0hCeWIzQXBLWDE5WUR0Y2JpQWdmVnh1SUNCcFppQW9hWE5EWVd4c1lXSnNaU2h3Y205d0tTa2dlMXh1SUNBZ0lISmxkSFZ5YmlCZ2V5UjdhVzV6Y0dWamRDaHdjbTl3S1gxOVlEdGNiaUFnZlZ4dUlDQnBaaUFvZEhsd1pXOW1JSEJ5YjNBZ1BUMDlJQ2R2WW1wbFkzUW5LU0I3WEc0Z0lDQWdhV1lnS0c5d2RHbHZibk11ZG1WeVltOXpaU2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJR0I3Skh0cGJuTndaV04wS0hCeWIzQXBmWDFnTzF4dUlDQWdJSDFjYmx4dUlDQWdJSEpsZEhWeWJpQW5lM3N1TGk1OWZTYzdYRzRnSUgxY2JpQWdjbVYwZFhKdUlHQjdXeVI3ZEhsd1pXOW1JSEJ5YjNCOVhYMWdPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQndjbTl3YzFOMGNtbHVaeWh1YjJSbExDQnZjSFJwYjI1ektTQjdYRzRnSUdOdmJuTjBJSEJ5YjNCeklEMGdjSEp2Y0hOUFprNXZaR1VvYm05a1pTazdYRzRnSUdOdmJuTjBJR3RsZVhNZ1BTQlBZbXBsWTNRdWEyVjVjeWh3Y205d2N5a3VabWxzZEdWeUtDaDRLU0E5UGlCNElDRTlQU0FuWTJocGJHUnlaVzRuS1R0Y2JpQWdjbVYwZFhKdUlHdGxlWE11YldGd0tDaHJaWGtwSUQwK0lHQWtlMnRsZVgwOUpIdHdjbTl3VTNSeWFXNW5LSEJ5YjNCelcydGxlVjBzSUc5d2RHbHZibk1wZldBcExtcHZhVzRvSnlBbktUdGNibjFjYmx4dVpuVnVZM1JwYjI0Z2FXNWtaVzUwUTJocGJHUnlaVzRvWTJocGJHUnlaVzVUZEhKekxDQnBibVJsYm5STVpXNW5kR2dwSUh0Y2JpQWdjbVYwZFhKdUlHTm9hV3hrY21WdVUzUnljeTVzWlc1bmRHaGNiaUFnSUNBL0lHQmNYRzRrZTJOb2FXeGtjbVZ1VTNSeWN5NXRZWEFvS0hncElEMCtJR2x1WkdWdWRDaHBibVJsYm5STVpXNW5kR2dzSUhncEtTNXFiMmx1S0NkY1hHNG5LWDFjWEc1Z1hHNGdJQ0FnT2lBbkp6dGNibjFjYmx4dVpuVnVZM1JwYjI0Z2FYTlNVMVJPYjJSbFRHbHJaU2h1YjJSbEtTQjdYRzRnSUhKbGRIVnliaUJvWVhNb2JtOWtaU3dnSjI1dlpHVlVlWEJsSnlsY2JpQWdJQ0FtSmlCMGVYQmxiMllnYm05a1pTNXViMlJsVkhsd1pTQTlQVDBnSjNOMGNtbHVaeWRjYmlBZ0lDQW1KaUJvWVhNb2JtOWtaU3dnSjNSNWNHVW5LVnh1SUNBZ0lDWW1JR2hoY3lodWIyUmxMQ0FuYTJWNUp5bGNiaUFnSUNBbUppQm9ZWE1vYm05a1pTd2dKM0psWmljcFhHNGdJQ0FnSmlZZ2FHRnpLRzV2WkdVc0lDZHBibk4wWVc1alpTY3BYRzRnSUNBZ0ppWWdhR0Z6S0c1dlpHVXNJQ2R5Wlc1a1pYSmxaQ2NwTzF4dWZWeHVYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdaR1ZpZFdkT2IyUmxLRzV2WkdVc0lHbHVaR1Z1ZEV4bGJtZDBhQ0E5SURJc0lHOXdkR2x2Ym5NZ1BTQjdmU2tnZTF4dUlDQnBaaUFvZEhsd1pXOW1JRzV2WkdVZ1BUMDlJQ2R6ZEhKcGJtY25JSHg4SUhSNWNHVnZaaUJ1YjJSbElEMDlQU0FuYm5WdFltVnlKeWtnY21WMGRYSnVJR1Z6WTJGd1pTaHViMlJsS1R0Y2JpQWdhV1lnS0hSNWNHVnZaaUJ1YjJSbElEMDlQU0FuWm5WdVkzUnBiMjRuS1NCN1hHNGdJQ0FnWTI5dWMzUWdibUZ0WlNBOUlHWjFibU4wYVc5dVRtRnRaU2h1YjJSbEtUdGNiaUFnSUNCeVpYUjFjbTRnWUZ0bWRXNWpkR2x2YmlSN2JtRnRaU0EvSUdBZ0pIdHVZVzFsZldBZ09pQW5KMzFkWUR0Y2JpQWdmVnh1SUNCcFppQW9JVzV2WkdVcElISmxkSFZ5YmlBbkp6dGNibHh1SUNCamIyNXpkQ0JoWkdGd2RHVnlJRDBnWjJWMFFXUmhjSFJsY2lncE8xeHVJQ0JwWmlBb0lXRmtZWEIwWlhJdWFYTldZV3hwWkVWc1pXMWxiblFvYm05a1pTa2dKaVlnSVdselVsTlVUbTlrWlV4cGEyVW9ibTlrWlNrcElIdGNiaUFnSUNCeVpYUjFjbTRnWUhza2UybHVjM0JsWTNRb2JtOWtaU2w5ZldBN1hHNGdJSDFjYmx4dUlDQmpiMjV6ZENCamFHbHNaSEpsYmxOMGNuTWdQU0JqYUdsc1pISmxiazltVG05a1pTaHViMlJsS1Z4dUlDQWdJQzV0WVhBb0tHNHBJRDArSUdSbFluVm5UbTlrWlNodUxDQnBibVJsYm5STVpXNW5kR2dzSUc5d2RHbHZibk1wS1Z4dUlDQWdJQzVtYVd4MFpYSW9RbTl2YkdWaGJpazdYRzRnSUdOdmJuTjBJSFI1Y0dVZ1BTQjBlWEJsVG1GdFpTaHViMlJsS1R0Y2JseHVJQ0JqYjI1emRDQndjbTl3Y3lBOUlHOXdkR2x2Ym5NdWFXZHViM0psVUhKdmNITWdQeUFuSnlBNklIQnliM0J6VTNSeWFXNW5LRzV2WkdVc0lHOXdkR2x2Ym5NcE8xeHVJQ0JqYjI1emRDQmlaV1p2Y21WUWNtOXdjeUE5SUhCeWIzQnpJRDhnSnlBbklEb2dKeWM3WEc0Z0lHTnZibk4wSUdGbWRHVnlVSEp2Y0hNZ1BTQmphR2xzWkhKbGJsTjBjbk11YkdWdVozUm9YRzRnSUNBZ1B5QW5QaWRjYmlBZ0lDQTZJQ2NnSnp0Y2JpQWdZMjl1YzNRZ1kyaHBiR1J5Wlc1SmJtUmxiblJsWkNBOUlHbHVaR1Z1ZEVOb2FXeGtjbVZ1S0dOb2FXeGtjbVZ1VTNSeWN5d2dhVzVrWlc1MFRHVnVaM1JvS1R0Y2JpQWdZMjl1YzNRZ2JtOWtaVU5zYjNObElEMGdZMmhwYkdSeVpXNVRkSEp6TG14bGJtZDBhQ0EvSUdBOEx5UjdkSGx3WlgwK1lDQTZJQ2N2UGljN1hHNGdJSEpsZEhWeWJpQmdQQ1I3ZEhsd1pYMGtlMkpsWm05eVpWQnliM0J6ZlNSN2NISnZjSE45Skh0aFpuUmxjbEJ5YjNCemZTUjdZMmhwYkdSeVpXNUpibVJsYm5SbFpIMGtlMjV2WkdWRGJHOXpaWDFnTzF4dWZWeHVYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdaR1ZpZFdkT2IyUmxjeWh1YjJSbGN5d2diM0IwYVc5dWN5QTlJSHQ5S1NCN1hHNGdJSEpsZEhWeWJpQnViMlJsY3k1dFlYQW9LRzV2WkdVcElEMCtJR1JsWW5WblRtOWtaU2h1YjJSbExDQjFibVJsWm1sdVpXUXNJRzl3ZEdsdmJuTXBLUzVxYjJsdUtDZGNYRzVjWEc1Y1hHNG5LVHRjYm4xY2JpSmRmUT09XG4vLyMgc291cmNlTWFwcGluZ1VSTD1EZWJ1Zy5qcy5tYXAiLCIndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIHVuaW1wbGVtZW50ZWRFcnJvcihtZXRob2ROYW1lLCBjbGFzc25hbWUpIHtcbiAgcmV0dXJuIG5ldyBFcnJvcihTdHJpbmcobWV0aG9kTmFtZSkgKyAnIGlzIGEgcmVxdWlyZWQgbWV0aG9kIG9mICcgKyBTdHJpbmcoY2xhc3NuYW1lKSArICcsIGJ1dCB3YXMgbm90IGltcGxlbWVudGVkLicpO1xufVxuXG52YXIgRW56eW1lQWRhcHRlciA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRW56eW1lQWRhcHRlcigpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRW56eW1lQWRhcHRlcik7XG5cbiAgICB0aGlzLm9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIC8vIFByb3ZpZGVkIGEgYmFnIG9mIG9wdGlvbnMsIHJldHVybiBhbiBgRW56eW1lUmVuZGVyZXJgLiBTb21lIG9wdGlvbnMgY2FuIGJlIGltcGxlbWVudGF0aW9uXG4gIC8vIHNwZWNpZmljLCBsaWtlIGBhdHRhY2hgIGV0Yy4gZm9yIFJlYWN0LCBidXQgbm90IHBhcnQgb2YgdGhpcyBpbnRlcmZhY2UgZXhwbGljaXRseS5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXMsIG5vLXVudXNlZC12YXJzXG5cblxuICBfY3JlYXRlQ2xhc3MoRW56eW1lQWRhcHRlciwgW3tcbiAgICBrZXk6ICdjcmVhdGVSZW5kZXJlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIGNyZWF0ZVJlbmRlcmVyKG9wdGlvbnMpIHtcbiAgICAgICAgdGhyb3cgdW5pbXBsZW1lbnRlZEVycm9yKCdjcmVhdGVSZW5kZXJlcicsICdFbnp5bWVBZGFwdGVyJyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjcmVhdGVSZW5kZXJlcjtcbiAgICB9KClcblxuICAgIC8vIGNvbnZlcnRzIGFuIFJTVE5vZGUgdG8gdGhlIGNvcnJlc3BvbmRpbmcgSlNYIFByYWdtYSBFbGVtZW50LiBUaGlzIHdpbGwgYmUgbmVlZGVkXG4gICAgLy8gaW4gb3JkZXIgdG8gaW1wbGVtZW50IHRoZSBgV3JhcHBlci5tb3VudCgpYCBhbmQgYFdyYXBwZXIuc2hhbGxvdygpYCBtZXRob2RzLCBidXQgc2hvdWxkXG4gICAgLy8gYmUgcHJldHR5IHN0cmFpZ2h0Zm9yd2FyZCBmb3IgcGVvcGxlIHRvIGltcGxlbWVudC5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2xhc3MtbWV0aG9kcy11c2UtdGhpcywgbm8tdW51c2VkLXZhcnNcblxuICB9LCB7XG4gICAga2V5OiAnbm9kZVRvRWxlbWVudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIG5vZGVUb0VsZW1lbnQobm9kZSkge1xuICAgICAgICB0aHJvdyB1bmltcGxlbWVudGVkRXJyb3IoJ25vZGVUb0VsZW1lbnQnLCAnRW56eW1lQWRhcHRlcicpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbm9kZVRvRWxlbWVudDtcbiAgICB9KClcblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzXG5cbiAgfSwge1xuICAgIGtleTogJ21hdGNoZXNFbGVtZW50VHlwZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIG1hdGNoZXNFbGVtZW50VHlwZShub2RlLCBtYXRjaGluZ1R5cGUpIHtcbiAgICAgICAgaWYgKCFub2RlKSB7XG4gICAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHR5cGUgPSBub2RlLnR5cGU7XG5cbiAgICAgICAgcmV0dXJuIHR5cGUgPT09IG1hdGNoaW5nVHlwZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG1hdGNoZXNFbGVtZW50VHlwZTtcbiAgICB9KClcblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzLCBuby11bnVzZWQtdmFyc1xuXG4gIH0sIHtcbiAgICBrZXk6ICdpc1ZhbGlkRWxlbWVudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIGlzVmFsaWRFbGVtZW50KGVsZW1lbnQpIHtcbiAgICAgICAgdGhyb3cgdW5pbXBsZW1lbnRlZEVycm9yKCdpc1ZhbGlkRWxlbWVudCcsICdFbnp5bWVBZGFwdGVyJyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBpc1ZhbGlkRWxlbWVudDtcbiAgICB9KClcblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzLCBuby11bnVzZWQtdmFyc1xuXG4gIH0sIHtcbiAgICBrZXk6ICdjcmVhdGVFbGVtZW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gY3JlYXRlRWxlbWVudCh0eXBlLCBwcm9wcykge1xuICAgICAgICB0aHJvdyB1bmltcGxlbWVudGVkRXJyb3IoJ2NyZWF0ZUVsZW1lbnQnLCAnRW56eW1lQWRhcHRlcicpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY3JlYXRlRWxlbWVudDtcbiAgICB9KClcblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzXG5cbiAgfSwge1xuICAgIGtleTogJ2ludm9rZVNldFN0YXRlQ2FsbGJhY2snLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBpbnZva2VTZXRTdGF0ZUNhbGxiYWNrKGluc3RhbmNlLCBjYWxsYmFjaykge1xuICAgICAgICBjYWxsYmFjay5jYWxsKGluc3RhbmNlKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGludm9rZVNldFN0YXRlQ2FsbGJhY2s7XG4gICAgfSgpXG4gIH1dKTtcblxuICByZXR1cm4gRW56eW1lQWRhcHRlcjtcbn0oKTtcblxuRW56eW1lQWRhcHRlci5NT0RFUyA9IHtcbiAgU1RSSU5HOiAnc3RyaW5nJyxcbiAgTU9VTlQ6ICdtb3VudCcsXG4gIFNIQUxMT1c6ICdzaGFsbG93J1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBFbnp5bWVBZGFwdGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk0dUwzTnlZeTlGYm5wNWJXVkJaR0Z3ZEdWeUxtcHpJbDBzSW01aGJXVnpJanBiSW5WdWFXMXdiR1Z0Wlc1MFpXUkZjbkp2Y2lJc0ltMWxkR2h2WkU1aGJXVWlMQ0pqYkdGemMyNWhiV1VpTENKRmNuSnZjaUlzSWtWdWVubHRaVUZrWVhCMFpYSWlMQ0p2Y0hScGIyNXpJaXdpYm05a1pTSXNJbTFoZEdOb2FXNW5WSGx3WlNJc0luUjVjR1VpTENKbGJHVnRaVzUwSWl3aWNISnZjSE1pTENKcGJuTjBZVzVqWlNJc0ltTmhiR3hpWVdOcklpd2lZMkZzYkNJc0lrMVBSRVZUSWl3aVUxUlNTVTVISWl3aVRVOVZUbFFpTENKVFNFRk1URTlYSWl3aWJXOWtkV3hsSWl3aVpYaHdiM0owY3lKZExDSnRZWEJ3YVc1bmN5STZJanM3T3pzN08wRkJRVUVzVTBGQlUwRXNhMEpCUVZRc1EwRkJORUpETEZWQlFUVkNMRVZCUVhkRFF5eFRRVUY0UXl4RlFVRnRSRHRCUVVOcVJDeFRRVUZQTEVsQlFVbERMRXRCUVVvc1VVRkJZVVlzVlVGQllpeDVRMEZCYlVSRExGTkJRVzVFTEdsRFFVRlFPMEZCUTBRN08wbEJSVXRGTEdFN1FVRkRTaXd5UWtGQll6dEJRVUZCT3p0QlFVTmFMRk5CUVV0RExFOUJRVXdzUjBGQlpTeEZRVUZtTzBGQlEwUTdPMEZCUlVRN1FVRkRRVHRCUVVOQk96czdPenM3T0VKQlEyVkJMRThzUlVGQlV6dEJRVU4wUWl4alFVRk5UQ3h0UWtGQmJVSXNaMEpCUVc1Q0xFVkJRWEZETEdWQlFYSkRMRU5CUVU0N1FVRkRSRHM3T3pzN1FVRkZSRHRCUVVOQk8wRkJRMEU3UVVGRFFUczdPenM3TmtKQlEyTk5MRWtzUlVGQlRUdEJRVU5zUWl4alFVRk5UaXh0UWtGQmJVSXNaVUZCYmtJc1JVRkJiME1zWlVGQmNFTXNRMEZCVGp0QlFVTkVPenM3T3p0QlFVVkVPenM3T3p0clEwRkRiVUpOTEVrc1JVRkJUVU1zV1N4RlFVRmpPMEZCUTNKRExGbEJRVWtzUTBGQlEwUXNTVUZCVEN4RlFVRlhPMEZCUTFRc2FVSkJRVTlCTEVsQlFWQTdRVUZEUkR0QlFVaHZReXhaUVVrM1FrVXNTVUZLTmtJc1IwRkpjRUpHTEVsQlNtOUNMRU5CU1RkQ1JTeEpRVW8yUWpzN1FVRkxja01zWlVGQlQwRXNVMEZCVTBRc1dVRkJhRUk3UVVGRFJEczdPenM3UVVGRlJEczdPenM3T0VKQlEyVkZMRThzUlVGQlV6dEJRVU4wUWl4alFVRk5WQ3h0UWtGQmJVSXNaMEpCUVc1Q0xFVkJRWEZETEdWQlFYSkRMRU5CUVU0N1FVRkRSRHM3T3pzN1FVRkZSRHM3T3pzN05rSkJRMk5STEVrc1JVRkJUVVVzU3l4RlFVRnZRanRCUVVOMFF5eGpRVUZOVml4dFFrRkJiVUlzWlVGQmJrSXNSVUZCYjBNc1pVRkJjRU1zUTBGQlRqdEJRVU5FT3pzN096dEJRVVZFT3pzN096dHpRMEZEZFVKWExGRXNSVUZCVlVNc1VTeEZRVUZWTzBGQlEzcERRU3hwUWtGQlUwTXNTVUZCVkN4RFFVRmpSaXhSUVVGa08wRkJRMFE3T3pzN096czdPenRCUVVkSVVDeGpRVUZqVlN4TFFVRmtMRWRCUVhOQ08wRkJRM0JDUXl4VlFVRlJMRkZCUkZrN1FVRkZjRUpETEZOQlFVOHNUMEZHWVR0QlFVZHdRa01zVjBGQlV6dEJRVWhYTEVOQlFYUkNPenRCUVUxQlF5eFBRVUZQUXl4UFFVRlFMRWRCUVdsQ1ppeGhRVUZxUWlJc0ltWnBiR1VpT2lKRmJucDViV1ZCWkdGd2RHVnlMbXB6SWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaVpuVnVZM1JwYjI0Z2RXNXBiWEJzWlcxbGJuUmxaRVZ5Y205eUtHMWxkR2h2WkU1aGJXVXNJR05zWVhOemJtRnRaU2tnZTF4dUlDQnlaWFIxY200Z2JtVjNJRVZ5Y205eUtHQWtlMjFsZEdodlpFNWhiV1Y5SUdseklHRWdjbVZ4ZFdseVpXUWdiV1YwYUc5a0lHOW1JQ1I3WTJ4aGMzTnVZVzFsZlN3Z1luVjBJSGRoY3lCdWIzUWdhVzF3YkdWdFpXNTBaV1F1WUNrN1hHNTlYRzVjYm1Oc1lYTnpJRVZ1ZW5sdFpVRmtZWEIwWlhJZ2UxeHVJQ0JqYjI1emRISjFZM1J2Y2lncElIdGNiaUFnSUNCMGFHbHpMbTl3ZEdsdmJuTWdQU0I3ZlR0Y2JpQWdmVnh1WEc0Z0lDOHZJRkJ5YjNacFpHVmtJR0VnWW1GbklHOW1JRzl3ZEdsdmJuTXNJSEpsZEhWeWJpQmhiaUJnUlc1NmVXMWxVbVZ1WkdWeVpYSmdMaUJUYjIxbElHOXdkR2x2Ym5NZ1kyRnVJR0psSUdsdGNHeGxiV1Z1ZEdGMGFXOXVYRzRnSUM4dklITndaV05wWm1sakxDQnNhV3RsSUdCaGRIUmhZMmhnSUdWMFl5NGdabTl5SUZKbFlXTjBMQ0JpZFhRZ2JtOTBJSEJoY25RZ2IyWWdkR2hwY3lCcGJuUmxjbVpoWTJVZ1pYaHdiR2xqYVhSc2VTNWNiaUFnTHk4Z1pYTnNhVzUwTFdScGMyRmliR1V0Ym1WNGRDMXNhVzVsSUdOc1lYTnpMVzFsZEdodlpITXRkWE5sTFhSb2FYTXNJRzV2TFhWdWRYTmxaQzEyWVhKelhHNGdJR055WldGMFpWSmxibVJsY21WeUtHOXdkR2x2Ym5NcElIdGNiaUFnSUNCMGFISnZkeUIxYm1sdGNHeGxiV1Z1ZEdWa1JYSnliM0lvSjJOeVpXRjBaVkpsYm1SbGNtVnlKeXdnSjBWdWVubHRaVUZrWVhCMFpYSW5LVHRjYmlBZ2ZWeHVYRzRnSUM4dklHTnZiblpsY25SeklHRnVJRkpUVkU1dlpHVWdkRzhnZEdobElHTnZjbkpsYzNCdmJtUnBibWNnU2xOWUlGQnlZV2R0WVNCRmJHVnRaVzUwTGlCVWFHbHpJSGRwYkd3Z1ltVWdibVZsWkdWa1hHNGdJQzh2SUdsdUlHOXlaR1Z5SUhSdklHbHRjR3hsYldWdWRDQjBhR1VnWUZkeVlYQndaWEl1Ylc5MWJuUW9LV0FnWVc1a0lHQlhjbUZ3Y0dWeUxuTm9ZV3hzYjNjb0tXQWdiV1YwYUc5a2N5d2dZblYwSUhOb2IzVnNaRnh1SUNBdkx5QmlaU0J3Y21WMGRIa2djM1J5WVdsbmFIUm1iM0ozWVhKa0lHWnZjaUJ3Wlc5d2JHVWdkRzhnYVcxd2JHVnRaVzUwTGx4dUlDQXZMeUJsYzJ4cGJuUXRaR2x6WVdKc1pTMXVaWGgwTFd4cGJtVWdZMnhoYzNNdGJXVjBhRzlrY3kxMWMyVXRkR2hwY3l3Z2JtOHRkVzUxYzJWa0xYWmhjbk5jYmlBZ2JtOWtaVlJ2Uld4bGJXVnVkQ2h1YjJSbEtTQjdYRzRnSUNBZ2RHaHliM2NnZFc1cGJYQnNaVzFsYm5SbFpFVnljbTl5S0NkdWIyUmxWRzlGYkdWdFpXNTBKeXdnSjBWdWVubHRaVUZrWVhCMFpYSW5LVHRjYmlBZ2ZWeHVYRzRnSUM4dklHVnpiR2x1ZEMxa2FYTmhZbXhsTFc1bGVIUXRiR2x1WlNCamJHRnpjeTF0WlhSb2IyUnpMWFZ6WlMxMGFHbHpYRzRnSUcxaGRHTm9aWE5GYkdWdFpXNTBWSGx3WlNodWIyUmxMQ0J0WVhSamFHbHVaMVI1Y0dVcElIdGNiaUFnSUNCcFppQW9JVzV2WkdVcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCdWIyUmxPMXh1SUNBZ0lIMWNiaUFnSUNCamIyNXpkQ0I3SUhSNWNHVWdmU0E5SUc1dlpHVTdYRzRnSUNBZ2NtVjBkWEp1SUhSNWNHVWdQVDA5SUcxaGRHTm9hVzVuVkhsd1pUdGNiaUFnZlZ4dVhHNGdJQzh2SUdWemJHbHVkQzFrYVhOaFlteGxMVzVsZUhRdGJHbHVaU0JqYkdGemN5MXRaWFJvYjJSekxYVnpaUzEwYUdsekxDQnVieTExYm5WelpXUXRkbUZ5YzF4dUlDQnBjMVpoYkdsa1JXeGxiV1Z1ZENobGJHVnRaVzUwS1NCN1hHNGdJQ0FnZEdoeWIzY2dkVzVwYlhCc1pXMWxiblJsWkVWeWNtOXlLQ2RwYzFaaGJHbGtSV3hsYldWdWRDY3NJQ2RGYm5wNWJXVkJaR0Z3ZEdWeUp5azdYRzRnSUgxY2JseHVJQ0F2THlCbGMyeHBiblF0WkdsellXSnNaUzF1WlhoMExXeHBibVVnWTJ4aGMzTXRiV1YwYUc5a2N5MTFjMlV0ZEdocGN5d2dibTh0ZFc1MWMyVmtMWFpoY25OY2JpQWdZM0psWVhSbFJXeGxiV1Z1ZENoMGVYQmxMQ0J3Y205d2N5d2dMaTR1WTJocGJHUnlaVzRwSUh0Y2JpQWdJQ0IwYUhKdmR5QjFibWx0Y0d4bGJXVnVkR1ZrUlhKeWIzSW9KMk55WldGMFpVVnNaVzFsYm5RbkxDQW5SVzU2ZVcxbFFXUmhjSFJsY2ljcE8xeHVJQ0I5WEc1Y2JpQWdMeThnWlhOc2FXNTBMV1JwYzJGaWJHVXRibVY0ZEMxc2FXNWxJR05zWVhOekxXMWxkR2h2WkhNdGRYTmxMWFJvYVhOY2JpQWdhVzUyYjJ0bFUyVjBVM1JoZEdWRFlXeHNZbUZqYXlocGJuTjBZVzVqWlN3Z1kyRnNiR0poWTJzcElIdGNiaUFnSUNCallXeHNZbUZqYXk1allXeHNLR2x1YzNSaGJtTmxLVHRjYmlBZ2ZWeHVmVnh1WEc1RmJucDViV1ZCWkdGd2RHVnlMazFQUkVWVElEMGdlMXh1SUNCVFZGSkpUa2M2SUNkemRISnBibWNuTEZ4dUlDQk5UMVZPVkRvZ0oyMXZkVzUwSnl4Y2JpQWdVMGhCVEV4UFZ6b2dKM05vWVd4c2IzY25MRnh1ZlR0Y2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQkZibnA1YldWQlpHRndkR1Z5TzF4dUlsMTlcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUVuenltZUFkYXB0ZXIuanMubWFwIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3NsaWNlZFRvQXJyYXkgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIHNsaWNlSXRlcmF0b3IoYXJyLCBpKSB7IHZhciBfYXJyID0gW107IHZhciBfbiA9IHRydWU7IHZhciBfZCA9IGZhbHNlOyB2YXIgX2UgPSB1bmRlZmluZWQ7IHRyeSB7IGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsgX2Fyci5wdXNoKF9zLnZhbHVlKTsgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOyB9IH0gY2F0Y2ggKGVycikgeyBfZCA9IHRydWU7IF9lID0gZXJyOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdKSBfaVtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH0gcmV0dXJuIGZ1bmN0aW9uIChhcnIsIGkpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgeyByZXR1cm4gYXJyOyB9IGVsc2UgaWYgKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoYXJyKSkgeyByZXR1cm4gc2xpY2VJdGVyYXRvcihhcnIsIGkpOyB9IGVsc2UgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTsgfSB9OyB9KCk7XG5cbmV4cG9ydHMucHJvcHNPZk5vZGUgPSBwcm9wc09mTm9kZTtcbmV4cG9ydHMuY2hpbGRyZW5PZk5vZGUgPSBjaGlsZHJlbk9mTm9kZTtcbmV4cG9ydHMuaGFzQ2xhc3NOYW1lID0gaGFzQ2xhc3NOYW1lO1xuZXhwb3J0cy50cmVlRm9yRWFjaCA9IHRyZWVGb3JFYWNoO1xuZXhwb3J0cy50cmVlRmlsdGVyID0gdHJlZUZpbHRlcjtcbmV4cG9ydHMuZmluZFBhcmVudE5vZGUgPSBmaW5kUGFyZW50Tm9kZTtcbmV4cG9ydHMucGF0aFRvTm9kZSA9IHBhdGhUb05vZGU7XG5leHBvcnRzLnBhcmVudHNPZk5vZGUgPSBwYXJlbnRzT2ZOb2RlO1xuZXhwb3J0cy5ub2RlSGFzSWQgPSBub2RlSGFzSWQ7XG5leHBvcnRzLm5vZGVNYXRjaGVzT2JqZWN0UHJvcHMgPSBub2RlTWF0Y2hlc09iamVjdFByb3BzO1xuZXhwb3J0cy5nZXRUZXh0RnJvbU5vZGUgPSBnZXRUZXh0RnJvbU5vZGU7XG5leHBvcnRzLmdldFRleHRGcm9tSG9zdE5vZGVzID0gZ2V0VGV4dEZyb21Ib3N0Tm9kZXM7XG5leHBvcnRzLmdldEhUTUxGcm9tSG9zdE5vZGVzID0gZ2V0SFRNTEZyb21Ib3N0Tm9kZXM7XG5cbnZhciBfb2JqZWN0ID0gcmVxdWlyZSgnb2JqZWN0LmFzc2lnbicpO1xuXG52YXIgX29iamVjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9vYmplY3QpO1xuXG52YXIgX2FycmF5UHJvdG90eXBlID0gcmVxdWlyZSgnYXJyYXkucHJvdG90eXBlLmZsYXQnKTtcblxudmFyIF9hcnJheVByb3RvdHlwZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9hcnJheVByb3RvdHlwZSk7XG5cbnZhciBfb2JqZWN0MyA9IHJlcXVpcmUoJ29iamVjdC5lbnRyaWVzJyk7XG5cbnZhciBfb2JqZWN0NCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX29iamVjdDMpO1xuXG52YXIgX2lzU3Vic2V0ID0gcmVxdWlyZSgnaXMtc3Vic2V0Jyk7XG5cbnZhciBfaXNTdWJzZXQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaXNTdWJzZXQpO1xuXG52YXIgX2Z1bmN0aW9uUHJvdG90eXBlID0gcmVxdWlyZSgnZnVuY3Rpb24ucHJvdG90eXBlLm5hbWUnKTtcblxudmFyIF9mdW5jdGlvblByb3RvdHlwZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9mdW5jdGlvblByb3RvdHlwZSk7XG5cbnZhciBfaXNSZWdleCA9IHJlcXVpcmUoJ2lzLXJlZ2V4Jyk7XG5cbnZhciBfaXNSZWdleDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pc1JlZ2V4KTtcblxudmFyIF9nZXRBZGFwdGVyID0gcmVxdWlyZSgnLi9nZXRBZGFwdGVyJyk7XG5cbnZhciBfZ2V0QWRhcHRlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRBZGFwdGVyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBBcnJheShhcnIubGVuZ3RoKTsgaSA8IGFyci5sZW5ndGg7IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9IGVsc2UgeyByZXR1cm4gQXJyYXkuZnJvbShhcnIpOyB9IH1cblxuZnVuY3Rpb24gcHJvcHNPZk5vZGUobm9kZSkge1xuICByZXR1cm4gbm9kZSAmJiBub2RlLnByb3BzIHx8IHt9O1xufVxuXG5mdW5jdGlvbiBjaGlsZHJlbk9mTm9kZShub2RlKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuIFtdO1xuXG4gIHZhciBhZGFwdGVyID0gKDAsIF9nZXRBZGFwdGVyMlsnZGVmYXVsdCddKSgpO1xuICB2YXIgYWRhcHRlckhhc0lzRnJhZ21lbnQgPSBhZGFwdGVyLmlzRnJhZ21lbnQgJiYgdHlwZW9mIGFkYXB0ZXIuaXNGcmFnbWVudCA9PT0gJ2Z1bmN0aW9uJztcblxuICB2YXIgcmVuZGVyZWRBcnJheSA9IEFycmF5LmlzQXJyYXkobm9kZS5yZW5kZXJlZCkgPyAoMCwgX2FycmF5UHJvdG90eXBlMlsnZGVmYXVsdCddKShub2RlLnJlbmRlcmVkLCAxKSA6IFtub2RlLnJlbmRlcmVkXTtcblxuICAvLyBSZWFjdCBhZGFwdGVycyBiZWZvcmUgMTYgd2lsbCBub3QgaGF2ZSBpc0ZyYWdtZW50XG4gIGlmICghYWRhcHRlckhhc0lzRnJhZ21lbnQpIHtcbiAgICByZXR1cm4gcmVuZGVyZWRBcnJheTtcbiAgfVxuXG4gIHJldHVybiAoMCwgX2FycmF5UHJvdG90eXBlMlsnZGVmYXVsdCddKShyZW5kZXJlZEFycmF5Lm1hcChmdW5jdGlvbiAoY3VycmVudENoaWxkKSB7XG4gICAgLy8gSWYgdGhlIG5vZGUgaXMgYSBGcmFnbWVudCwgd2Ugd2FudCB0byByZXR1cm4gaXRzIGNoaWxkcmVuLCBub3QgdGhlIGZyYWdtZW50IGl0c2VsZlxuICAgIGlmIChhZGFwdGVyLmlzRnJhZ21lbnQoY3VycmVudENoaWxkKSkge1xuICAgICAgcmV0dXJuIGNoaWxkcmVuT2ZOb2RlKGN1cnJlbnRDaGlsZCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGN1cnJlbnRDaGlsZDtcbiAgfSksIDEpO1xufVxuXG5mdW5jdGlvbiBoYXNDbGFzc05hbWUobm9kZSwgY2xhc3NOYW1lKSB7XG4gIHZhciBjbGFzc2VzID0gcHJvcHNPZk5vZGUobm9kZSkuY2xhc3NOYW1lIHx8ICcnO1xuICBjbGFzc2VzID0gU3RyaW5nKGNsYXNzZXMpLnJlcGxhY2UoL1xccy9nLCAnICcpO1xuICBpZiAoKDAsIF9pc1JlZ2V4MlsnZGVmYXVsdCddKShjbGFzc05hbWUpKSByZXR1cm4gY2xhc3NOYW1lLnRlc3QoY2xhc3Nlcyk7XG4gIHJldHVybiAoJyAnICsgU3RyaW5nKGNsYXNzZXMpICsgJyAnKS5pbmRleE9mKCcgJyArIFN0cmluZyhjbGFzc05hbWUpICsgJyAnKSA+IC0xO1xufVxuXG5mdW5jdGlvbiB0cmVlRm9yRWFjaCh0cmVlLCBmbikge1xuICBpZiAodHJlZSkge1xuICAgIGZuKHRyZWUpO1xuICB9XG4gIGNoaWxkcmVuT2ZOb2RlKHRyZWUpLmZvckVhY2goZnVuY3Rpb24gKG5vZGUpIHtcbiAgICByZXR1cm4gdHJlZUZvckVhY2gobm9kZSwgZm4pO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gdHJlZUZpbHRlcih0cmVlLCBmbikge1xuICB2YXIgcmVzdWx0cyA9IFtdO1xuICB0cmVlRm9yRWFjaCh0cmVlLCBmdW5jdGlvbiAobm9kZSkge1xuICAgIGlmIChmbihub2RlKSkge1xuICAgICAgcmVzdWx0cy5wdXNoKG5vZGUpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXN1bHRzO1xufVxuXG4vKipcbiAqIFRvIHN1cHBvcnQgc2libGluZyBzZWxlY3RvcnMgd2UgbmVlZCB0byBiZSBhYmxlIHRvIGZpbmRcbiAqIHRoZSBzaWJsaW5ncyBvZiBhIG5vZGUuIFRoZSBlYXNpZXN0IHdheSB0byBkbyB0aGF0IGlzIGZpbmRcbiAqIHRoZSBwYXJlbnQgb2YgdGhlIG5vZGUgYW5kIGFjY2VzcyBpdHMgY2hpbGRyZW4uXG4gKlxuICogVGhpcyB3b3VsZCBiZSB1bm5lZWRlZCBpZiB0aGUgUlNUIHNwZWMgaW5jbHVkZWQgc2libGluZyBwb2ludGVyc1xuICogc3VjaCBhcyBub2RlLm5leHRTaWJsaW5nIGFuZCBub2RlLnByZXZTaWJsaW5nXG4gKiBAcGFyYW0geyp9IHJvb3RcbiAqIEBwYXJhbSB7Kn0gdGFyZ2V0Tm9kZVxuICovXG5mdW5jdGlvbiBmaW5kUGFyZW50Tm9kZShyb290LCB0YXJnZXROb2RlKSB7XG4gIHZhciByZXN1bHRzID0gdHJlZUZpbHRlcihyb290LCBmdW5jdGlvbiAobm9kZSkge1xuICAgIGlmICghbm9kZS5yZW5kZXJlZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiBjaGlsZHJlbk9mTm9kZShub2RlKS5pbmRleE9mKHRhcmdldE5vZGUpICE9PSAtMTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHRzWzBdIHx8IG51bGw7XG59XG5cbmZ1bmN0aW9uIHBhdGhGaWx0ZXIocGF0aCwgZm4pIHtcbiAgcmV0dXJuIHBhdGguZmlsdGVyKGZ1bmN0aW9uICh0cmVlKSB7XG4gICAgcmV0dXJuIHRyZWVGaWx0ZXIodHJlZSwgZm4pLmxlbmd0aCAhPT0gMDtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHBhdGhUb05vZGUobm9kZSwgcm9vdCkge1xuICB2YXIgcXVldWUgPSBbcm9vdF07XG4gIHZhciBwYXRoID0gW107XG5cbiAgdmFyIGhhc05vZGUgPSBmdW5jdGlvbiBoYXNOb2RlKHRlc3ROb2RlKSB7XG4gICAgcmV0dXJuIG5vZGUgPT09IHRlc3ROb2RlO1xuICB9O1xuXG4gIHdoaWxlIChxdWV1ZS5sZW5ndGgpIHtcbiAgICB2YXIgY3VycmVudCA9IHF1ZXVlLnBvcCgpO1xuICAgIHZhciBjaGlsZHJlbiA9IGNoaWxkcmVuT2ZOb2RlKGN1cnJlbnQpO1xuICAgIGlmIChjdXJyZW50ID09PSBub2RlKSByZXR1cm4gcGF0aEZpbHRlcihwYXRoLCBoYXNOb2RlKTtcblxuICAgIHBhdGgucHVzaChjdXJyZW50KTtcblxuICAgIGlmIChjaGlsZHJlbi5sZW5ndGggPT09IDApIHtcbiAgICAgIC8vIGxlYWYgbm9kZS4gaWYgaXQgaXNuJ3QgdGhlIG5vZGUgd2UgYXJlIGxvb2tpbmcgZm9yLCB3ZSBwb3AuXG4gICAgICBwYXRoLnBvcCgpO1xuICAgIH1cbiAgICBxdWV1ZS5wdXNoLmFwcGx5KHF1ZXVlLCBfdG9Db25zdW1hYmxlQXJyYXkoY2hpbGRyZW4pKTtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBwYXJlbnRzT2ZOb2RlKG5vZGUsIHJvb3QpIHtcbiAgcmV0dXJuIChwYXRoVG9Ob2RlKG5vZGUsIHJvb3QpIHx8IFtdKS5yZXZlcnNlKCk7XG59XG5cbmZ1bmN0aW9uIG5vZGVIYXNJZChub2RlLCBpZCkge1xuICByZXR1cm4gcHJvcHNPZk5vZGUobm9kZSkuaWQgPT09IGlkO1xufVxuXG52YXIgQ0FOX05FVkVSX01BVENIID0ge307XG5mdW5jdGlvbiByZXBsYWNlVW5kZWZpbmVkKHYpIHtcbiAgcmV0dXJuIHR5cGVvZiB2ICE9PSAndW5kZWZpbmVkJyA/IHYgOiBDQU5fTkVWRVJfTUFUQ0g7XG59XG5mdW5jdGlvbiByZXBsYWNlVW5kZWZpbmVkVmFsdWVzKG9iaikge1xuICByZXR1cm4gKDAsIF9vYmplY3Q0WydkZWZhdWx0J10pKG9iaikucmVkdWNlKGZ1bmN0aW9uIChhY2MsIF9yZWYpIHtcbiAgICB2YXIgX3JlZjIgPSBfc2xpY2VkVG9BcnJheShfcmVmLCAyKSxcbiAgICAgICAgayA9IF9yZWYyWzBdLFxuICAgICAgICB2ID0gX3JlZjJbMV07XG5cbiAgICByZXR1cm4gKDAsIF9vYmplY3QyWydkZWZhdWx0J10pKHt9LCBhY2MsIF9kZWZpbmVQcm9wZXJ0eSh7fSwgaywgcmVwbGFjZVVuZGVmaW5lZCh2KSkpO1xuICB9LCB7fSk7XG59XG5cbmZ1bmN0aW9uIG5vZGVNYXRjaGVzT2JqZWN0UHJvcHMobm9kZSwgcHJvcHMpIHtcbiAgcmV0dXJuICgwLCBfaXNTdWJzZXQyWydkZWZhdWx0J10pKHByb3BzT2ZOb2RlKG5vZGUpLCByZXBsYWNlVW5kZWZpbmVkVmFsdWVzKHByb3BzKSk7XG59XG5cbmZ1bmN0aW9uIGdldFRleHRGcm9tSG9zdE5vZGUoaG9zdE5vZGUpIHtcbiAgaWYgKHR5cGVvZiBob3N0Tm9kZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gU3RyaW5nKGhvc3ROb2RlIHx8ICcnKTtcbiAgfVxuICBpZiAoIWhvc3ROb2RlKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG4gIHJldHVybiBob3N0Tm9kZS50ZXh0Q29udGVudCB8fCAnJztcbn1cblxuZnVuY3Rpb24gZ2V0VGV4dEZyb21SU1ROb2RlKG5vZGUsIF9yZWYzKSB7XG4gIHZhciBnZXRDdXN0b20gPSBfcmVmMy5nZXRDdXN0b20sXG4gICAgICBoYW5kbGVIb3N0Tm9kZXMgPSBfcmVmMy5oYW5kbGVIb3N0Tm9kZXMsXG4gICAgICByZWN1cnNlID0gX3JlZjMucmVjdXJzZSxcbiAgICAgIF9yZWYzJG51bGxSZW5kZXJSZXR1ciA9IF9yZWYzLm51bGxSZW5kZXJSZXR1cm5zTnVsbCxcbiAgICAgIG51bGxSZW5kZXJSZXR1cm5zTnVsbCA9IF9yZWYzJG51bGxSZW5kZXJSZXR1ciA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBfcmVmMyRudWxsUmVuZGVyUmV0dXI7XG5cbiAgaWYgKG5vZGUgPT0gbnVsbCkge1xuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIGlmICh0eXBlb2Ygbm9kZSA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIG5vZGUgPT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIFN0cmluZyhub2RlKTtcbiAgfVxuXG4gIGlmIChnZXRDdXN0b20gJiYgbm9kZS50eXBlICYmIHR5cGVvZiBub2RlLnR5cGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gZ2V0Q3VzdG9tKG5vZGUpO1xuICB9XG5cbiAgaWYgKGhhbmRsZUhvc3ROb2RlcyAmJiBub2RlLm5vZGVUeXBlID09PSAnaG9zdCcpIHtcbiAgICByZXR1cm4gaGFuZGxlSG9zdE5vZGVzKG5vZGUpO1xuICB9XG4gIGlmIChub2RlLnJlbmRlcmVkID09IG51bGwgJiYgbnVsbFJlbmRlclJldHVybnNOdWxsKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIGNoaWxkcmVuT2ZOb2RlKG5vZGUpLm1hcChyZWN1cnNlKS5qb2luKCcnKTtcbn1cblxuZnVuY3Rpb24gZ2V0VGV4dEZyb21Ob2RlKG5vZGUpIHtcbiAgcmV0dXJuIGdldFRleHRGcm9tUlNUTm9kZShub2RlLCB7XG4gICAgcmVjdXJzZTogZ2V0VGV4dEZyb21Ob2RlLFxuICAgIGdldEN1c3RvbTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gZ2V0Q3VzdG9tKF9yZWY0KSB7XG4gICAgICAgIHZhciB0eXBlID0gX3JlZjQudHlwZTtcblxuICAgICAgICByZXR1cm4gJzwnICsgU3RyaW5nKHR5cGUuZGlzcGxheU5hbWUgfHwgKDAsIF9mdW5jdGlvblByb3RvdHlwZTJbJ2RlZmF1bHQnXSkodHlwZSkpICsgJyAvPic7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBnZXRDdXN0b207XG4gICAgfSgpXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBnZXRUZXh0RnJvbUhvc3ROb2Rlcyhub2RlLCBhZGFwdGVyKSB7XG4gIHJldHVybiBnZXRUZXh0RnJvbVJTVE5vZGUobm9kZSwge1xuICAgIHJlY3Vyc2U6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIHJlY3Vyc2UoaXRlbSkge1xuICAgICAgICByZXR1cm4gZ2V0VGV4dEZyb21Ib3N0Tm9kZXMoaXRlbSwgYWRhcHRlcik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZWN1cnNlO1xuICAgIH0oKSxcbiAgICBoYW5kbGVIb3N0Tm9kZXM6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIGhhbmRsZUhvc3ROb2RlcyhpdGVtKSB7XG4gICAgICAgIHZhciBub2RlcyA9IFtdLmNvbmNhdChhZGFwdGVyLm5vZGVUb0hvc3ROb2RlKGl0ZW0sIHRydWUpKTtcbiAgICAgICAgcmV0dXJuIG5vZGVzLm1hcChnZXRUZXh0RnJvbUhvc3ROb2RlKS5qb2luKCcnKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGhhbmRsZUhvc3ROb2RlcztcbiAgICB9KClcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGdldEhUTUxGcm9tSG9zdE5vZGUoaG9zdE5vZGUpIHtcbiAgaWYgKGhvc3ROb2RlID09IG51bGwpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gaG9zdE5vZGUub3V0ZXJIVE1MLnJlcGxhY2UoL1xcc2RhdGEtKHJlYWN0aWR8cmVhY3Ryb290KSs9XCIoW15cIl0qKStcIi9nLCAnJyk7XG59XG5cbmZ1bmN0aW9uIGdldEhUTUxGcm9tSG9zdE5vZGVzKG5vZGUsIGFkYXB0ZXIpIHtcbiAgcmV0dXJuIGdldFRleHRGcm9tUlNUTm9kZShub2RlLCB7XG4gICAgcmVjdXJzZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gcmVjdXJzZShpdGVtKSB7XG4gICAgICAgIHJldHVybiBnZXRIVE1MRnJvbUhvc3ROb2RlcyhpdGVtLCBhZGFwdGVyKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlY3Vyc2U7XG4gICAgfSgpLFxuICAgIGhhbmRsZUhvc3ROb2RlczogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gaGFuZGxlSG9zdE5vZGVzKGl0ZW0pIHtcbiAgICAgICAgdmFyIG5vZGVzID0gW10uY29uY2F0KGFkYXB0ZXIubm9kZVRvSG9zdE5vZGUoaXRlbSwgdHJ1ZSkpO1xuICAgICAgICByZXR1cm4gbm9kZXMubWFwKGdldEhUTUxGcm9tSG9zdE5vZGUpLmpvaW4oJycpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gaGFuZGxlSG9zdE5vZGVzO1xuICAgIH0oKSxcblxuICAgIG51bGxSZW5kZXJSZXR1cm5zTnVsbDogdHJ1ZVxuICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpNHVMM055WXk5U1UxUlVjbUYyWlhKellXd3Vhbk1pWFN3aWJtRnRaWE1pT2xzaWNISnZjSE5QWms1dlpHVWlMQ0pqYUdsc1pISmxiazltVG05a1pTSXNJbWhoYzBOc1lYTnpUbUZ0WlNJc0luUnlaV1ZHYjNKRllXTm9JaXdpZEhKbFpVWnBiSFJsY2lJc0ltWnBibVJRWVhKbGJuUk9iMlJsSWl3aWNHRjBhRlJ2VG05a1pTSXNJbkJoY21WdWRITlBaazV2WkdVaUxDSnViMlJsU0dGelNXUWlMQ0p1YjJSbFRXRjBZMmhsYzA5aWFtVmpkRkJ5YjNCeklpd2laMlYwVkdWNGRFWnliMjFPYjJSbElpd2laMlYwVkdWNGRFWnliMjFJYjNOMFRtOWtaWE1pTENKblpYUklWRTFNUm5KdmJVaHZjM1JPYjJSbGN5SXNJbTV2WkdVaUxDSndjbTl3Y3lJc0ltRmtZWEIwWlhJaUxDSmhaR0Z3ZEdWeVNHRnpTWE5HY21GbmJXVnVkQ0lzSW1selJuSmhaMjFsYm5RaUxDSnlaVzVrWlhKbFpFRnljbUY1SWl3aVFYSnlZWGtpTENKcGMwRnljbUY1SWl3aWNtVnVaR1Z5WldRaUxDSnRZWEFpTENKamRYSnlaVzUwUTJocGJHUWlMQ0pqYkdGemMwNWhiV1VpTENKamJHRnpjMlZ6SWl3aVUzUnlhVzVuSWl3aWNtVndiR0ZqWlNJc0luUmxjM1FpTENKcGJtUmxlRTltSWl3aWRISmxaU0lzSW1adUlpd2labTl5UldGamFDSXNJbkpsYzNWc2RITWlMQ0p3ZFhOb0lpd2ljbTl2ZENJc0luUmhjbWRsZEU1dlpHVWlMQ0p3WVhSb1JtbHNkR1Z5SWl3aWNHRjBhQ0lzSW1acGJIUmxjaUlzSW14bGJtZDBhQ0lzSW5GMVpYVmxJaXdpYUdGelRtOWtaU0lzSW5SbGMzUk9iMlJsSWl3aVkzVnljbVZ1ZENJc0luQnZjQ0lzSW1Ob2FXeGtjbVZ1SWl3aWNtVjJaWEp6WlNJc0ltbGtJaXdpUTBGT1gwNUZWa1ZTWDAxQlZFTklJaXdpY21Wd2JHRmpaVlZ1WkdWbWFXNWxaQ0lzSW5ZaUxDSnlaWEJzWVdObFZXNWtaV1pwYm1Wa1ZtRnNkV1Z6SWl3aWIySnFJaXdpY21Wa2RXTmxJaXdpWVdOaklpd2lheUlzSW1kbGRGUmxlSFJHY205dFNHOXpkRTV2WkdVaUxDSm9iM04wVG05a1pTSXNJblJsZUhSRGIyNTBaVzUwSWl3aVoyVjBWR1Y0ZEVaeWIyMVNVMVJPYjJSbElpd2laMlYwUTNWemRHOXRJaXdpYUdGdVpHeGxTRzl6ZEU1dlpHVnpJaXdpY21WamRYSnpaU0lzSW01MWJHeFNaVzVrWlhKU1pYUjFjbTV6VG5Wc2JDSXNJblI1Y0dVaUxDSnViMlJsVkhsd1pTSXNJbXB2YVc0aUxDSmthWE53YkdGNVRtRnRaU0lzSW1sMFpXMGlMQ0p1YjJSbGN5SXNJbU52Ym1OaGRDSXNJbTV2WkdWVWIwaHZjM1JPYjJSbElpd2laMlYwU0ZSTlRFWnliMjFJYjNOMFRtOWtaU0lzSW05MWRHVnlTRlJOVENKZExDSnRZWEJ3YVc1bmN5STZJanM3T3pzN096czdVVUZQWjBKQkxGY3NSMEZCUVVFc1Z6dFJRVWxCUXl4akxFZEJRVUZCTEdNN1VVRjFRa0ZETEZrc1IwRkJRVUVzV1R0UlFVOUJReXhYTEVkQlFVRkJMRmM3VVVGUFFVTXNWU3hIUVVGQlFTeFZPMUZCYjBKQlF5eGpMRWRCUVVGQkxHTTdVVUZyUWtGRExGVXNSMEZCUVVFc1ZUdFJRWFZDUVVNc1lTeEhRVUZCUVN4aE8xRkJTVUZETEZNc1IwRkJRVUVzVXp0UlFXRkJReXh6UWl4SFFVRkJRU3h6UWp0UlFYbERRVU1zWlN4SFFVRkJRU3hsTzFGQlUwRkRMRzlDTEVkQlFVRkJMRzlDTzFGQmJVSkJReXh2UWl4SFFVRkJRU3h2UWpzN096czdPMEZCYmsxb1FqczdPenRCUVVOQk96czdPMEZCUTBFN096czdRVUZEUVRzN096dEJRVU5CT3pzN08wRkJRMEU3T3pzN096czdPenM3UVVGRlR5eFRRVUZUV2l4WFFVRlVMRU5CUVhGQ1lTeEpRVUZ5UWl4RlFVRXlRanRCUVVOb1F5eFRRVUZSUVN4UlFVRlJRU3hMUVVGTFF5eExRVUZrTEVsQlFYZENMRVZCUVM5Q08wRkJRMFE3TzBGQlJVMHNVMEZCVTJJc1kwRkJWQ3hEUVVGM1Fsa3NTVUZCZUVJc1JVRkJPRUk3UVVGRGJrTXNUVUZCU1N4RFFVRkRRU3hKUVVGTUxFVkJRVmNzVDBGQlR5eEZRVUZRT3p0QlFVVllMRTFCUVUxRkxGVkJRVlVzT0VKQlFXaENPMEZCUTBFc1RVRkJUVU1zZFVKQlFYVkNSQ3hSUVVGUlJTeFZRVUZTTEVsQlFYTkNMRTlCUVU5R0xGRkJRVkZGTEZWQlFXWXNTMEZCT0VJc1ZVRkJha1k3TzBGQlJVRXNUVUZCVFVNc1owSkJRV2RDUXl4TlFVRk5ReXhQUVVGT0xFTkJRV05RTEV0QlFVdFJMRkZCUVc1Q0xFbEJRU3RDTEdsRFFVRkxVaXhMUVVGTFVTeFJRVUZXTEVWQlFXOUNMRU5CUVhCQ0xFTkJRUzlDTEVkQlFYZEVMRU5CUVVOU0xFdEJRVXRSTEZGQlFVNHNRMEZCT1VVN08wRkJSVUU3UVVGRFFTeE5RVUZKTEVOQlFVTk1MRzlDUVVGTUxFVkJRVEpDTzBGQlEzcENMRmRCUVU5RkxHRkJRVkE3UVVGRFJEczdRVUZGUkN4VFFVRlBMR2xEUVVGTFFTeGpRVUZqU1N4SFFVRmtMRU5CUVd0Q0xGVkJRVU5ETEZsQlFVUXNSVUZCYTBJN1FVRkRPVU03UVVGRFFTeFJRVUZKVWl4UlFVRlJSU3hWUVVGU0xFTkJRVzFDVFN4WlFVRnVRaXhEUVVGS0xFVkJRWE5ETzBGQlEzQkRMR0ZCUVU5MFFpeGxRVUZsYzBJc1dVRkJaaXhEUVVGUU8wRkJRMFE3TzBGQlJVUXNWMEZCVDBFc1dVRkJVRHRCUVVORUxFZEJVRmNzUTBGQlRDeEZRVTlJTEVOQlVFY3NRMEZCVUR0QlFWRkVPenRCUVVWTkxGTkJRVk55UWl4WlFVRlVMRU5CUVhOQ1Z5eEpRVUYwUWl4RlFVRTBRbGNzVTBGQk5VSXNSVUZCZFVNN1FVRkROVU1zVFVGQlNVTXNWVUZCVlhwQ0xGbEJRVmxoTEVsQlFWb3NSVUZCYTBKWExGTkJRV3hDTEVsQlFTdENMRVZCUVRkRE8wRkJRMEZETEZsQlFWVkRMRTlCUVU5RUxFOUJRVkFzUlVGQlowSkZMRTlCUVdoQ0xFTkJRWGRDTEV0QlFYaENMRVZCUVN0Q0xFZEJRUzlDTEVOQlFWWTdRVUZEUVN4TlFVRkpMREJDUVVGUlNDeFRRVUZTTEVOQlFVb3NSVUZCZDBJc1QwRkJUMEVzVlVGQlZVa3NTVUZCVml4RFFVRmxTQ3hQUVVGbUxFTkJRVkE3UVVGRGVFSXNVMEZCVHl4alFVRkpRU3hQUVVGS0xGTkJRV1ZKTEU5QlFXWXNZMEZCTWtKTUxGTkJRVE5DTEZkQlFUSkRMRU5CUVVNc1EwRkJia1E3UVVGRFJEczdRVUZGVFN4VFFVRlRja0lzVjBGQlZDeERRVUZ4UWpKQ0xFbEJRWEpDTEVWQlFUSkNReXhGUVVFelFpeEZRVUVyUWp0QlFVTndReXhOUVVGSlJDeEpRVUZLTEVWQlFWVTdRVUZEVWtNc1QwRkJSMFFzU1VGQlNEdEJRVU5FTzBGQlEwUTNRaXhwUWtGQlpUWkNMRWxCUVdZc1JVRkJjVUpGTEU5QlFYSkNMRU5CUVRaQ0xGVkJRVU51UWl4SlFVRkVPMEZCUVVFc1YwRkJWVllzV1VGQldWVXNTVUZCV2l4RlFVRnJRbXRDTEVWQlFXeENMRU5CUVZZN1FVRkJRU3hIUVVFM1FqdEJRVU5FT3p0QlFVVk5MRk5CUVZNelFpeFZRVUZVTEVOQlFXOUNNRUlzU1VGQmNFSXNSVUZCTUVKRExFVkJRVEZDTEVWQlFUaENPMEZCUTI1RExFMUJRVTFGTEZWQlFWVXNSVUZCYUVJN1FVRkRRVGxDTEdOQlFWa3lRaXhKUVVGYUxFVkJRV3RDTEZWQlFVTnFRaXhKUVVGRUxFVkJRVlU3UVVGRE1VSXNVVUZCU1d0Q0xFZEJRVWRzUWl4SlFVRklMRU5CUVVvc1JVRkJZenRCUVVOYWIwSXNZMEZCVVVNc1NVRkJVaXhEUVVGaGNrSXNTVUZCWWp0QlFVTkVPMEZCUTBZc1IwRktSRHRCUVV0QkxGTkJRVTl2UWl4UFFVRlFPMEZCUTBRN08wRkJSVVE3T3pzN096czdPenM3UVVGVlR5eFRRVUZUTlVJc1kwRkJWQ3hEUVVGM1FqaENMRWxCUVhoQ0xFVkJRVGhDUXl4VlFVRTVRaXhGUVVFd1F6dEJRVU12UXl4TlFVRk5TQ3hWUVVGVk4wSXNWMEZEWkN0Q0xFbEJSR01zUlVGRlpDeFZRVUZEZEVJc1NVRkJSQ3hGUVVGVk8wRkJRMUlzVVVGQlNTeERRVUZEUVN4TFFVRkxVU3hSUVVGV0xFVkJRVzlDTzBGQlEyeENMR0ZCUVU4c1MwRkJVRHRCUVVORU96dEJRVVZFTEZkQlFVOXdRaXhsUVVGbFdTeEpRVUZtTEVWQlFYRkNaMElzVDBGQmNrSXNRMEZCTmtKUExGVkJRVGRDTEUxQlFUWkRMRU5CUVVNc1EwRkJja1E3UVVGRFJDeEhRVkpoTEVOQlFXaENPMEZCVlVFc1UwRkJUMGdzVVVGQlVTeERRVUZTTEV0QlFXTXNTVUZCY2tJN1FVRkRSRHM3UVVGRlJDeFRRVUZUU1N4VlFVRlVMRU5CUVc5Q1F5eEpRVUZ3UWl4RlFVRXdRbEFzUlVGQk1VSXNSVUZCT0VJN1FVRkROVUlzVTBGQlQwOHNTMEZCUzBNc1RVRkJUQ3hEUVVGWkxGVkJRVU5VTEVsQlFVUTdRVUZCUVN4WFFVRlZNVUlzVjBGQlZ6QkNMRWxCUVZnc1JVRkJhVUpETEVWQlFXcENMRVZCUVhGQ1V5eE5RVUZ5UWl4TFFVRm5ReXhEUVVFeFF6dEJRVUZCTEVkQlFWb3NRMEZCVUR0QlFVTkVPenRCUVVWTkxGTkJRVk5zUXl4VlFVRlVMRU5CUVc5Q1R5eEpRVUZ3UWl4RlFVRXdRbk5DTEVsQlFURkNMRVZCUVdkRE8wRkJRM0pETEUxQlFVMU5MRkZCUVZFc1EwRkJRMDRzU1VGQlJDeERRVUZrTzBGQlEwRXNUVUZCVFVjc1QwRkJUeXhGUVVGaU96dEJRVVZCTEUxQlFVMUpMRlZCUVZVc1UwRkJWa0VzVDBGQlZTeERRVUZEUXl4UlFVRkVPMEZCUVVFc1YwRkJZemxDTEZOQlFWTTRRaXhSUVVGMlFqdEJRVUZCTEVkQlFXaENPenRCUVVWQkxGTkJRVTlHTEUxQlFVMUVMRTFCUVdJc1JVRkJjVUk3UVVGRGJrSXNVVUZCVFVrc1ZVRkJWVWdzVFVGQlRVa3NSMEZCVGl4RlFVRm9RanRCUVVOQkxGRkJRVTFETEZkQlFWYzNReXhsUVVGbE1rTXNUMEZCWml4RFFVRnFRanRCUVVOQkxGRkJRVWxCTEZsQlFWa3ZRaXhKUVVGb1FpeEZRVUZ6UWl4UFFVRlBkMElzVjBGQlYwTXNTVUZCV0N4RlFVRnBRa2tzVDBGQmFrSXNRMEZCVURzN1FVRkZkRUpLTEZOQlFVdEtMRWxCUVV3c1EwRkJWVlVzVDBGQlZqczdRVUZGUVN4UlFVRkpSU3hUUVVGVFRpeE5RVUZVTEV0QlFXOUNMRU5CUVhoQ0xFVkJRVEpDTzBGQlEzcENPMEZCUTBGR0xGZEJRVXRQTEVkQlFVdzdRVUZEUkR0QlFVTkVTaXhWUVVGTlVDeEpRVUZPTEdsRFFVRmpXU3hSUVVGa08wRkJRMFE3TzBGQlJVUXNVMEZCVHl4SlFVRlFPMEZCUTBRN08wRkJSVTBzVTBGQlUzWkRMR0ZCUVZRc1EwRkJkVUpOTEVsQlFYWkNMRVZCUVRaQ2MwSXNTVUZCTjBJc1JVRkJiVU03UVVGRGVFTXNVMEZCVHl4RFFVRkROMElzVjBGQlYwOHNTVUZCV0N4RlFVRnBRbk5DTEVsQlFXcENMRXRCUVRCQ0xFVkJRVE5DTEVWQlFTdENXU3hQUVVFdlFpeEZRVUZRTzBGQlEwUTdPMEZCUlUwc1UwRkJVM1pETEZOQlFWUXNRMEZCYlVKTExFbEJRVzVDTEVWQlFYbENiVU1zUlVGQmVrSXNSVUZCTmtJN1FVRkRiRU1zVTBGQlQyaEVMRmxCUVZsaExFbEJRVm9zUlVGQmEwSnRReXhGUVVGc1FpeExRVUY1UWtFc1JVRkJhRU03UVVGRFJEczdRVUZGUkN4SlFVRk5ReXhyUWtGQmEwSXNSVUZCZUVJN1FVRkRRU3hUUVVGVFF5eG5Ra0ZCVkN4RFFVRXdRa01zUTBGQk1VSXNSVUZCTmtJN1FVRkRNMElzVTBGQlR5eFBRVUZQUVN4RFFVRlFMRXRCUVdFc1YwRkJZaXhIUVVFeVFrRXNRMEZCTTBJc1IwRkJLMEpHTEdWQlFYUkRPMEZCUTBRN1FVRkRSQ3hUUVVGVFJ5eHpRa0ZCVkN4RFFVRm5RME1zUjBGQmFFTXNSVUZCY1VNN1FVRkRia01zVTBGQlR5eDVRa0ZCVVVFc1IwRkJVaXhGUVVOS1F5eE5RVVJKTEVOQlEwY3NWVUZCUTBNc1IwRkJSRHRCUVVGQk8wRkJRVUVzVVVGQlQwTXNRMEZCVUR0QlFVRkJMRkZCUVZWTUxFTkJRVlk3TzBGQlFVRXNkME5CUVhWQ1NTeEhRVUYyUWl4elFrRkJOa0pETEVOQlFUZENMRVZCUVdsRFRpeHBRa0ZCYVVKRExFTkJRV3BDTEVOQlFXcERPMEZCUVVFc1IwRkVTQ3hGUVVNMFJDeEZRVVExUkN4RFFVRlFPMEZCUlVRN08wRkJSVTBzVTBGQlV6RkRMSE5DUVVGVUxFTkJRV2REU1N4SlFVRm9ReXhGUVVGelEwTXNTMEZCZEVNc1JVRkJOa003UVVGRGJFUXNVMEZCVHl3eVFrRkJVMlFzV1VGQldXRXNTVUZCV2l4RFFVRlVMRVZCUVRSQ2RVTXNkVUpCUVhWQ2RFTXNTMEZCZGtJc1EwRkJOVUlzUTBGQlVEdEJRVU5FT3p0QlFVVkVMRk5CUVZNeVF5eHRRa0ZCVkN4RFFVRTJRa01zVVVGQk4wSXNSVUZCZFVNN1FVRkRja01zVFVGQlNTeFBRVUZQUVN4UlFVRlFMRXRCUVc5Q0xGRkJRWGhDTEVWQlFXdERPMEZCUTJoRExGZEJRVTlvUXl4UFFVRlBaME1zV1VGQldTeEZRVUZ1UWl4RFFVRlFPMEZCUTBRN1FVRkRSQ3hOUVVGSkxFTkJRVU5CTEZGQlFVd3NSVUZCWlR0QlFVTmlMRmRCUVU4c1JVRkJVRHRCUVVORU8wRkJRMFFzVTBGQlQwRXNVMEZCVTBNc1YwRkJWQ3hKUVVGM1FpeEZRVUV2UWp0QlFVTkVPenRCUVVWRUxGTkJRVk5ETEd0Q1FVRlVMRU5CUVRSQ0wwTXNTVUZCTlVJc1UwRkxSenRCUVVGQkxFMUJTa1JuUkN4VFFVbERMRk5CU2tSQkxGTkJTVU03UVVGQlFTeE5RVWhFUXl4bFFVZERMRk5CU0VSQkxHVkJSME03UVVGQlFTeE5RVVpFUXl4UFFVVkRMRk5CUmtSQkxFOUJSVU03UVVGQlFTeHZRMEZFUkVNc2NVSkJRME03UVVGQlFTeE5RVVJFUVN4eFFrRkRReXg1UTBGRWRVSXNTMEZEZGtJN08wRkJRMFFzVFVGQlNXNUVMRkZCUVZFc1NVRkJXaXhGUVVGclFqdEJRVU5vUWl4WFFVRlBMRVZCUVZBN1FVRkRSRHM3UVVGRlJDeE5RVUZKTEU5QlFVOUJMRWxCUVZBc1MwRkJaMElzVVVGQmFFSXNTVUZCTkVJc1QwRkJUMEVzU1VGQlVDeExRVUZuUWl4UlFVRm9SQ3hGUVVFd1JEdEJRVU40UkN4WFFVRlBZU3hQUVVGUFlpeEpRVUZRTEVOQlFWQTdRVUZEUkRzN1FVRkZSQ3hOUVVGSlowUXNZVUZCWVdoRUxFdEJRVXR2UkN4SlFVRnNRaXhKUVVFd1FpeFBRVUZQY0VRc1MwRkJTMjlFTEVsQlFWb3NTMEZCY1VJc1ZVRkJia1FzUlVGQkswUTdRVUZETjBRc1YwRkJUMG9zVlVGQlZXaEVMRWxCUVZZc1EwRkJVRHRCUVVORU96dEJRVVZFTEUxQlFVbHBSQ3h0UWtGQmJVSnFSQ3hMUVVGTGNVUXNVVUZCVEN4TFFVRnJRaXhOUVVGNlF5eEZRVUZwUkR0QlFVTXZReXhYUVVGUFNpeG5Ra0ZCWjBKcVJDeEpRVUZvUWl4RFFVRlFPMEZCUTBRN1FVRkRSQ3hOUVVGSlFTeExRVUZMVVN4UlFVRk1MRWxCUVdsQ0xFbEJRV3BDTEVsQlFYbENNa01zY1VKQlFUZENMRVZCUVc5RU8wRkJRMnhFTEZkQlFVOHNTVUZCVUR0QlFVTkVPMEZCUTBRc1UwRkJUeTlFTEdWQlFXVlpMRWxCUVdZc1JVRkJjVUpUTEVkQlFYSkNMRU5CUVhsQ2VVTXNUMEZCZWtJc1JVRkJhME5KTEVsQlFXeERMRU5CUVhWRExFVkJRWFpETEVOQlFWQTdRVUZEUkRzN1FVRkZUU3hUUVVGVGVrUXNaVUZCVkN4RFFVRjVRa2NzU1VGQmVrSXNSVUZCSzBJN1FVRkRjRU1zVTBGQlR5dERMRzFDUVVGdFFpOURMRWxCUVc1Q0xFVkJRWGxDTzBGQlF6bENhMFFzWVVGQlUzSkVMR1ZCUkhGQ08wRkJSVGxDYlVRc1lVRkdPRUk3UVVGQlFTeG5RMEZGVmp0QlFVRkJMRmxCUVZKSkxFbEJRVkVzVTBGQlVrRXNTVUZCVVRzN1FVRkRiRUlzTkVKQlFWZEJMRXRCUVV0SExGZEJRVXdzU1VGQmIwSXNiME5CUVdGSUxFbEJRV0lzUTBGQkwwSTdRVUZEUkRzN1FVRktOa0k3UVVGQlFUdEJRVUZCTEVkQlFYcENMRU5CUVZBN1FVRk5SRHM3UVVGRlRTeFRRVUZUZEVRc2IwSkJRVlFzUTBGQk9FSkZMRWxCUVRsQ0xFVkJRVzlEUlN4UFFVRndReXhGUVVFMlF6dEJRVU5zUkN4VFFVRlBOa01zYlVKQlFXMUNMME1zU1VGQmJrSXNSVUZCZVVJN1FVRkRPVUpyUkN4WFFVUTRRanRCUVVGQkxIVkNRVU4wUWswc1NVRkVjMElzUlVGRGFFSTdRVUZEV2l4bFFVRlBNVVFzY1VKQlFYRkNNRVFzU1VGQmNrSXNSVUZCTWtKMFJDeFBRVUV6UWl4RFFVRlFPMEZCUTBRN08wRkJTRFpDTzBGQlFVRTdRVUZKT1VJclF5eHRRa0ZLT0VJN1FVRkJRU3dyUWtGSlpFOHNTVUZLWXl4RlFVbFNPMEZCUTNCQ0xGbEJRVTFETEZGQlFWRXNSMEZCUjBNc1RVRkJTQ3hEUVVGVmVFUXNVVUZCVVhsRUxHTkJRVklzUTBGQmRVSklMRWxCUVhaQ0xFVkJRVFpDTEVsQlFUZENMRU5CUVZZc1EwRkJaRHRCUVVOQkxHVkJRVTlETEUxQlFVMW9SQ3hIUVVGT0xFTkJRVlZ0UXl4dFFrRkJWaXhGUVVFclFsVXNTVUZCTDBJc1EwRkJiME1zUlVGQmNFTXNRMEZCVUR0QlFVTkVPenRCUVZBMlFqdEJRVUZCTzBGQlFVRXNSMEZCZWtJc1EwRkJVRHRCUVZORU96dEJRVVZFTEZOQlFWTk5MRzFDUVVGVUxFTkJRVFpDWml4UlFVRTNRaXhGUVVGMVF6dEJRVU55UXl4TlFVRkpRU3haUVVGWkxFbEJRV2hDTEVWQlFYTkNPMEZCUTNCQ0xGZEJRVThzU1VGQlVEdEJRVU5FTzBGQlEwUXNVMEZCVDBFc1UwRkJVMmRDTEZOQlFWUXNRMEZCYlVJdlF5eFBRVUZ1UWl4RFFVRXlRaXg1UTBGQk0wSXNSVUZCYzBVc1JVRkJkRVVzUTBGQlVEdEJRVU5FT3p0QlFVVk5MRk5CUVZObUxHOUNRVUZVTEVOQlFUaENReXhKUVVFNVFpeEZRVUZ2UTBVc1QwRkJjRU1zUlVGQk5rTTdRVUZEYkVRc1UwRkJUelpETEcxQ1FVRnRRaTlETEVsQlFXNUNMRVZCUVhsQ08wRkJRemxDYTBRc1YwRkVPRUk3UVVGQlFTeDFRa0ZEZEVKTkxFbEJSSE5DTEVWQlEyaENPMEZCUTFvc1pVRkJUM3BFTEhGQ1FVRnhRbmxFTEVsQlFYSkNMRVZCUVRKQ2RFUXNUMEZCTTBJc1EwRkJVRHRCUVVORU96dEJRVWcyUWp0QlFVRkJPMEZCU1RsQ0swTXNiVUpCU2poQ08wRkJRVUVzSzBKQlNXUlBMRWxCU21Nc1JVRkpVanRCUVVOd1FpeFpRVUZOUXl4UlFVRlJMRWRCUVVkRExFMUJRVWdzUTBGQlZYaEVMRkZCUVZGNVJDeGpRVUZTTEVOQlFYVkNTQ3hKUVVGMlFpeEZRVUUyUWl4SlFVRTNRaXhEUVVGV0xFTkJRV1E3UVVGRFFTeGxRVUZQUXl4TlFVRk5hRVFzUjBGQlRpeERRVUZWYlVRc2JVSkJRVllzUlVGQkswSk9MRWxCUVM5Q0xFTkJRVzlETEVWQlFYQkRMRU5CUVZBN1FVRkRSRHM3UVVGUU5rSTdRVUZCUVRzN1FVRlJPVUpJTERKQ1FVRjFRanRCUVZKUExFZEJRWHBDTEVOQlFWQTdRVUZWUkNJc0ltWnBiR1VpT2lKU1UxUlVjbUYyWlhKellXd3Vhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKcGJYQnZjblFnWm14aGRDQm1jbTl0SUNkaGNuSmhlUzV3Y205MGIzUjVjR1V1Wm14aGRDYzdYRzVwYlhCdmNuUWdaVzUwY21sbGN5Qm1jbTl0SUNkdlltcGxZM1F1Wlc1MGNtbGxjeWM3WEc1cGJYQnZjblFnYVhOVGRXSnpaWFFnWm5KdmJTQW5hWE10YzNWaWMyVjBKenRjYm1sdGNHOXlkQ0JtZFc1amRHbHZiazVoYldVZ1puSnZiU0FuWm5WdVkzUnBiMjR1Y0hKdmRHOTBlWEJsTG01aGJXVW5PMXh1YVcxd2IzSjBJR2x6VW1WblpYZ2dabkp2YlNBbmFYTXRjbVZuWlhnbk8xeHVhVzF3YjNKMElHZGxkRUZrWVhCMFpYSWdabkp2YlNBbkxpOW5aWFJCWkdGd2RHVnlKenRjYmx4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUhCeWIzQnpUMlpPYjJSbEtHNXZaR1VwSUh0Y2JpQWdjbVYwZFhKdUlDaHViMlJsSUNZbUlHNXZaR1V1Y0hKdmNITXBJSHg4SUh0OU8xeHVmVnh1WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnWTJocGJHUnlaVzVQWms1dlpHVW9ibTlrWlNrZ2UxeHVJQ0JwWmlBb0lXNXZaR1VwSUhKbGRIVnliaUJiWFR0Y2JseHVJQ0JqYjI1emRDQmhaR0Z3ZEdWeUlEMGdaMlYwUVdSaGNIUmxjaWdwTzF4dUlDQmpiMjV6ZENCaFpHRndkR1Z5U0dGelNYTkdjbUZuYldWdWRDQTlJR0ZrWVhCMFpYSXVhWE5HY21GbmJXVnVkQ0FtSmlCMGVYQmxiMllnWVdSaGNIUmxjaTVwYzBaeVlXZHRaVzUwSUQwOVBTQW5ablZ1WTNScGIyNG5PMXh1WEc0Z0lHTnZibk4wSUhKbGJtUmxjbVZrUVhKeVlYa2dQU0JCY25KaGVTNXBjMEZ5Y21GNUtHNXZaR1V1Y21WdVpHVnlaV1FwSUQ4Z1pteGhkQ2h1YjJSbExuSmxibVJsY21Wa0xDQXhLU0E2SUZ0dWIyUmxMbkpsYm1SbGNtVmtYVHRjYmx4dUlDQXZMeUJTWldGamRDQmhaR0Z3ZEdWeWN5QmlaV1p2Y21VZ01UWWdkMmxzYkNCdWIzUWdhR0YyWlNCcGMwWnlZV2R0Wlc1MFhHNGdJR2xtSUNnaFlXUmhjSFJsY2toaGMwbHpSbkpoWjIxbGJuUXBJSHRjYmlBZ0lDQnlaWFIxY200Z2NtVnVaR1Z5WldSQmNuSmhlVHRjYmlBZ2ZWeHVYRzRnSUhKbGRIVnliaUJtYkdGMEtISmxibVJsY21Wa1FYSnlZWGt1YldGd0tDaGpkWEp5Wlc1MFEyaHBiR1FwSUQwK0lIdGNiaUFnSUNBdkx5QkpaaUIwYUdVZ2JtOWtaU0JwY3lCaElFWnlZV2R0Wlc1MExDQjNaU0IzWVc1MElIUnZJSEpsZEhWeWJpQnBkSE1nWTJocGJHUnlaVzRzSUc1dmRDQjBhR1VnWm5KaFoyMWxiblFnYVhSelpXeG1YRzRnSUNBZ2FXWWdLR0ZrWVhCMFpYSXVhWE5HY21GbmJXVnVkQ2hqZFhKeVpXNTBRMmhwYkdRcEtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z1kyaHBiR1J5Wlc1UFprNXZaR1VvWTNWeWNtVnVkRU5vYVd4a0tUdGNiaUFnSUNCOVhHNWNiaUFnSUNCeVpYUjFjbTRnWTNWeWNtVnVkRU5vYVd4a08xeHVJQ0I5S1N3Z01TazdYRzU5WEc1Y2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCb1lYTkRiR0Z6YzA1aGJXVW9ibTlrWlN3Z1kyeGhjM05PWVcxbEtTQjdYRzRnSUd4bGRDQmpiR0Z6YzJWeklEMGdjSEp2Y0hOUFprNXZaR1VvYm05a1pTa3VZMnhoYzNOT1lXMWxJSHg4SUNjbk8xeHVJQ0JqYkdGemMyVnpJRDBnVTNSeWFXNW5LR05zWVhOelpYTXBMbkpsY0d4aFkyVW9MMXhjY3k5bkxDQW5JQ2NwTzF4dUlDQnBaaUFvYVhOU1pXZGxlQ2hqYkdGemMwNWhiV1VwS1NCeVpYUjFjbTRnWTJ4aGMzTk9ZVzFsTG5SbGMzUW9ZMnhoYzNObGN5azdYRzRnSUhKbGRIVnliaUJnSUNSN1kyeGhjM05sYzMwZ1lDNXBibVJsZUU5bUtHQWdKSHRqYkdGemMwNWhiV1Y5SUdBcElENGdMVEU3WEc1OVhHNWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQjBjbVZsUm05eVJXRmphQ2gwY21WbExDQm1iaWtnZTF4dUlDQnBaaUFvZEhKbFpTa2dlMXh1SUNBZ0lHWnVLSFJ5WldVcE8xeHVJQ0I5WEc0Z0lHTm9hV3hrY21WdVQyWk9iMlJsS0hSeVpXVXBMbVp2Y2tWaFkyZ29LRzV2WkdVcElEMCtJSFJ5WldWR2IzSkZZV05vS0c1dlpHVXNJR1p1S1NrN1hHNTlYRzVjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUIwY21WbFJtbHNkR1Z5S0hSeVpXVXNJR1p1S1NCN1hHNGdJR052Ym5OMElISmxjM1ZzZEhNZ1BTQmJYVHRjYmlBZ2RISmxaVVp2Y2tWaFkyZ29kSEpsWlN3Z0tHNXZaR1VwSUQwK0lIdGNiaUFnSUNCcFppQW9abTRvYm05a1pTa3BJSHRjYmlBZ0lDQWdJSEpsYzNWc2RITXVjSFZ6YUNodWIyUmxLVHRjYmlBZ0lDQjlYRzRnSUgwcE8xeHVJQ0J5WlhSMWNtNGdjbVZ6ZFd4MGN6dGNibjFjYmx4dUx5b3FYRzRnS2lCVWJ5QnpkWEJ3YjNKMElITnBZbXhwYm1jZ2MyVnNaV04wYjNKeklIZGxJRzVsWldRZ2RHOGdZbVVnWVdKc1pTQjBieUJtYVc1a1hHNGdLaUIwYUdVZ2MybGliR2x1WjNNZ2IyWWdZU0J1YjJSbExpQlVhR1VnWldGemFXVnpkQ0IzWVhrZ2RHOGdaRzhnZEdoaGRDQnBjeUJtYVc1a1hHNGdLaUIwYUdVZ2NHRnlaVzUwSUc5bUlIUm9aU0J1YjJSbElHRnVaQ0JoWTJObGMzTWdhWFJ6SUdOb2FXeGtjbVZ1TGx4dUlDcGNiaUFxSUZSb2FYTWdkMjkxYkdRZ1ltVWdkVzV1WldWa1pXUWdhV1lnZEdobElGSlRWQ0J6Y0dWaklHbHVZMngxWkdWa0lITnBZbXhwYm1jZ2NHOXBiblJsY25OY2JpQXFJSE4xWTJnZ1lYTWdibTlrWlM1dVpYaDBVMmxpYkdsdVp5QmhibVFnYm05a1pTNXdjbVYyVTJsaWJHbHVaMXh1SUNvZ1FIQmhjbUZ0SUhzcWZTQnliMjkwWEc0Z0tpQkFjR0Z5WVcwZ2V5cDlJSFJoY21kbGRFNXZaR1ZjYmlBcUwxeHVaWGh3YjNKMElHWjFibU4wYVc5dUlHWnBibVJRWVhKbGJuUk9iMlJsS0hKdmIzUXNJSFJoY21kbGRFNXZaR1VwSUh0Y2JpQWdZMjl1YzNRZ2NtVnpkV3gwY3lBOUlIUnlaV1ZHYVd4MFpYSW9YRzRnSUNBZ2NtOXZkQ3hjYmlBZ0lDQW9ibTlrWlNrZ1BUNGdlMXh1SUNBZ0lDQWdhV1lnS0NGdWIyUmxMbkpsYm1SbGNtVmtLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJtWVd4elpUdGNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdjbVYwZFhKdUlHTm9hV3hrY21WdVQyWk9iMlJsS0c1dlpHVXBMbWx1WkdWNFQyWW9kR0Z5WjJWMFRtOWtaU2tnSVQwOUlDMHhPMXh1SUNBZ0lIMHNYRzRnSUNrN1hHNGdJSEpsZEhWeWJpQnlaWE4xYkhSeld6QmRJSHg4SUc1MWJHdzdYRzU5WEc1Y2JtWjFibU4wYVc5dUlIQmhkR2hHYVd4MFpYSW9jR0YwYUN3Z1ptNHBJSHRjYmlBZ2NtVjBkWEp1SUhCaGRHZ3VabWxzZEdWeUtDaDBjbVZsS1NBOVBpQjBjbVZsUm1sc2RHVnlLSFJ5WldVc0lHWnVLUzVzWlc1bmRHZ2dJVDA5SURBcE8xeHVmVnh1WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnY0dGMGFGUnZUbTlrWlNodWIyUmxMQ0J5YjI5MEtTQjdYRzRnSUdOdmJuTjBJSEYxWlhWbElEMGdXM0p2YjNSZE8xeHVJQ0JqYjI1emRDQndZWFJvSUQwZ1cxMDdYRzVjYmlBZ1kyOXVjM1FnYUdGelRtOWtaU0E5SUNoMFpYTjBUbTlrWlNrZ1BUNGdibTlrWlNBOVBUMGdkR1Z6ZEU1dlpHVTdYRzVjYmlBZ2QyaHBiR1VnS0hGMVpYVmxMbXhsYm1kMGFDa2dlMXh1SUNBZ0lHTnZibk4wSUdOMWNuSmxiblFnUFNCeGRXVjFaUzV3YjNBb0tUdGNiaUFnSUNCamIyNXpkQ0JqYUdsc1pISmxiaUE5SUdOb2FXeGtjbVZ1VDJaT2IyUmxLR04xY25KbGJuUXBPMXh1SUNBZ0lHbG1JQ2hqZFhKeVpXNTBJRDA5UFNCdWIyUmxLU0J5WlhSMWNtNGdjR0YwYUVacGJIUmxjaWh3WVhSb0xDQm9ZWE5PYjJSbEtUdGNibHh1SUNBZ0lIQmhkR2d1Y0hWemFDaGpkWEp5Wlc1MEtUdGNibHh1SUNBZ0lHbG1JQ2hqYUdsc1pISmxiaTVzWlc1bmRHZ2dQVDA5SURBcElIdGNiaUFnSUNBZ0lDOHZJR3hsWVdZZ2JtOWtaUzRnYVdZZ2FYUWdhWE51SjNRZ2RHaGxJRzV2WkdVZ2QyVWdZWEpsSUd4dmIydHBibWNnWm05eUxDQjNaU0J3YjNBdVhHNGdJQ0FnSUNCd1lYUm9MbkJ2Y0NncE8xeHVJQ0FnSUgxY2JpQWdJQ0J4ZFdWMVpTNXdkWE5vS0M0dUxtTm9hV3hrY21WdUtUdGNiaUFnZlZ4dVhHNGdJSEpsZEhWeWJpQnVkV3hzTzF4dWZWeHVYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdjR0Z5Wlc1MGMwOW1UbTlrWlNodWIyUmxMQ0J5YjI5MEtTQjdYRzRnSUhKbGRIVnliaUFvY0dGMGFGUnZUbTlrWlNodWIyUmxMQ0J5YjI5MEtTQjhmQ0JiWFNrdWNtVjJaWEp6WlNncE8xeHVmVnh1WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnYm05a1pVaGhjMGxrS0c1dlpHVXNJR2xrS1NCN1hHNGdJSEpsZEhWeWJpQndjbTl3YzA5bVRtOWtaU2h1YjJSbEtTNXBaQ0E5UFQwZ2FXUTdYRzU5WEc1Y2JtTnZibk4wSUVOQlRsOU9SVlpGVWw5TlFWUkRTQ0E5SUh0OU8xeHVablZ1WTNScGIyNGdjbVZ3YkdGalpWVnVaR1ZtYVc1bFpDaDJLU0I3WEc0Z0lISmxkSFZ5YmlCMGVYQmxiMllnZGlBaFBUMGdKM1Z1WkdWbWFXNWxaQ2NnUHlCMklEb2dRMEZPWDA1RlZrVlNYMDFCVkVOSU8xeHVmVnh1Wm5WdVkzUnBiMjRnY21Wd2JHRmpaVlZ1WkdWbWFXNWxaRlpoYkhWbGN5aHZZbW9wSUh0Y2JpQWdjbVYwZFhKdUlHVnVkSEpwWlhNb2IySnFLVnh1SUNBZ0lDNXlaV1IxWTJVb0tHRmpZeXdnVzJzc0lIWmRLU0E5UGlBb2V5QXVMaTVoWTJNc0lGdHJYVG9nY21Wd2JHRmpaVlZ1WkdWbWFXNWxaQ2gyS1NCOUtTd2dlMzBwTzF4dWZWeHVYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdibTlrWlUxaGRHTm9aWE5QWW1wbFkzUlFjbTl3Y3lodWIyUmxMQ0J3Y205d2N5a2dlMXh1SUNCeVpYUjFjbTRnYVhOVGRXSnpaWFFvY0hKdmNITlBaazV2WkdVb2JtOWtaU2tzSUhKbGNHeGhZMlZWYm1SbFptbHVaV1JXWVd4MVpYTW9jSEp2Y0hNcEtUdGNibjFjYmx4dVpuVnVZM1JwYjI0Z1oyVjBWR1Y0ZEVaeWIyMUliM04wVG05a1pTaG9iM04wVG05a1pTa2dlMXh1SUNCcFppQW9kSGx3Wlc5bUlHaHZjM1JPYjJSbElEMDlQU0FuYzNSeWFXNW5KeWtnZTF4dUlDQWdJSEpsZEhWeWJpQlRkSEpwYm1jb2FHOXpkRTV2WkdVZ2ZId2dKeWNwTzF4dUlDQjlYRzRnSUdsbUlDZ2hhRzl6ZEU1dlpHVXBJSHRjYmlBZ0lDQnlaWFIxY200Z0p5YzdYRzRnSUgxY2JpQWdjbVYwZFhKdUlHaHZjM1JPYjJSbExuUmxlSFJEYjI1MFpXNTBJSHg4SUNjbk8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCblpYUlVaWGgwUm5KdmJWSlRWRTV2WkdVb2JtOWtaU3dnZTF4dUlDQm5aWFJEZFhOMGIyMHNYRzRnSUdoaGJtUnNaVWh2YzNST2IyUmxjeXhjYmlBZ2NtVmpkWEp6WlN4Y2JpQWdiblZzYkZKbGJtUmxjbEpsZEhWeWJuTk9kV3hzSUQwZ1ptRnNjMlVzWEc1OUtTQjdYRzRnSUdsbUlDaHViMlJsSUQwOUlHNTFiR3dwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdKeWM3WEc0Z0lIMWNibHh1SUNCcFppQW9kSGx3Wlc5bUlHNXZaR1VnUFQwOUlDZHpkSEpwYm1jbklIeDhJSFI1Y0dWdlppQnViMlJsSUQwOVBTQW5iblZ0WW1WeUp5a2dlMXh1SUNBZ0lISmxkSFZ5YmlCVGRISnBibWNvYm05a1pTazdYRzRnSUgxY2JseHVJQ0JwWmlBb1oyVjBRM1Z6ZEc5dElDWW1JRzV2WkdVdWRIbHdaU0FtSmlCMGVYQmxiMllnYm05a1pTNTBlWEJsSUQwOVBTQW5ablZ1WTNScGIyNG5LU0I3WEc0Z0lDQWdjbVYwZFhKdUlHZGxkRU4xYzNSdmJTaHViMlJsS1R0Y2JpQWdmVnh1WEc0Z0lHbG1JQ2hvWVc1a2JHVkliM04wVG05a1pYTWdKaVlnYm05a1pTNXViMlJsVkhsd1pTQTlQVDBnSjJodmMzUW5LU0I3WEc0Z0lDQWdjbVYwZFhKdUlHaGhibVJzWlVodmMzUk9iMlJsY3lodWIyUmxLVHRjYmlBZ2ZWeHVJQ0JwWmlBb2JtOWtaUzV5Wlc1a1pYSmxaQ0E5UFNCdWRXeHNJQ1ltSUc1MWJHeFNaVzVrWlhKU1pYUjFjbTV6VG5Wc2JDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCdWRXeHNPMXh1SUNCOVhHNGdJSEpsZEhWeWJpQmphR2xzWkhKbGJrOW1UbTlrWlNodWIyUmxLUzV0WVhBb2NtVmpkWEp6WlNrdWFtOXBiaWduSnlrN1hHNTlYRzVjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJuWlhSVVpYaDBSbkp2YlU1dlpHVW9ibTlrWlNrZ2UxeHVJQ0J5WlhSMWNtNGdaMlYwVkdWNGRFWnliMjFTVTFST2IyUmxLRzV2WkdVc0lIdGNiaUFnSUNCeVpXTjFjbk5sT2lCblpYUlVaWGgwUm5KdmJVNXZaR1VzWEc0Z0lDQWdaMlYwUTNWemRHOXRLSHNnZEhsd1pTQjlLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdZRHdrZTNSNWNHVXVaR2x6Y0d4aGVVNWhiV1VnZkh3Z1puVnVZM1JwYjI1T1lXMWxLSFI1Y0dVcGZTQXZQbUE3WEc0Z0lDQWdmU3hjYmlBZ2ZTazdYRzU5WEc1Y2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCblpYUlVaWGgwUm5KdmJVaHZjM1JPYjJSbGN5aHViMlJsTENCaFpHRndkR1Z5S1NCN1hHNGdJSEpsZEhWeWJpQm5aWFJVWlhoMFJuSnZiVkpUVkU1dlpHVW9ibTlrWlN3Z2UxeHVJQ0FnSUhKbFkzVnljMlVvYVhSbGJTa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlHZGxkRlJsZUhSR2NtOXRTRzl6ZEU1dlpHVnpLR2wwWlcwc0lHRmtZWEIwWlhJcE8xeHVJQ0FnSUgwc1hHNGdJQ0FnYUdGdVpHeGxTRzl6ZEU1dlpHVnpLR2wwWlcwcElIdGNiaUFnSUNBZ0lHTnZibk4wSUc1dlpHVnpJRDBnVzEwdVkyOXVZMkYwS0dGa1lYQjBaWEl1Ym05a1pWUnZTRzl6ZEU1dlpHVW9hWFJsYlN3Z2RISjFaU2twTzF4dUlDQWdJQ0FnY21WMGRYSnVJRzV2WkdWekxtMWhjQ2huWlhSVVpYaDBSbkp2YlVodmMzUk9iMlJsS1M1cWIybHVLQ2NuS1R0Y2JpQWdJQ0I5TEZ4dUlDQjlLVHRjYm4xY2JseHVablZ1WTNScGIyNGdaMlYwU0ZSTlRFWnliMjFJYjNOMFRtOWtaU2hvYjNOMFRtOWtaU2tnZTF4dUlDQnBaaUFvYUc5emRFNXZaR1VnUFQwZ2JuVnNiQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQnVkV3hzTzF4dUlDQjlYRzRnSUhKbGRIVnliaUJvYjNOMFRtOWtaUzV2ZFhSbGNraFVUVXd1Y21Wd2JHRmpaU2d2WEZ4elpHRjBZUzBvY21WaFkzUnBaSHh5WldGamRISnZiM1FwS3oxY0lpaGJYbHdpWFNvcEsxd2lMMmNzSUNjbktUdGNibjFjYmx4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUdkbGRFaFVUVXhHY205dFNHOXpkRTV2WkdWektHNXZaR1VzSUdGa1lYQjBaWElwSUh0Y2JpQWdjbVYwZFhKdUlHZGxkRlJsZUhSR2NtOXRVbE5VVG05a1pTaHViMlJsTENCN1hHNGdJQ0FnY21WamRYSnpaU2hwZEdWdEtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z1oyVjBTRlJOVEVaeWIyMUliM04wVG05a1pYTW9hWFJsYlN3Z1lXUmhjSFJsY2lrN1hHNGdJQ0FnZlN4Y2JpQWdJQ0JvWVc1a2JHVkliM04wVG05a1pYTW9hWFJsYlNrZ2UxeHVJQ0FnSUNBZ1kyOXVjM1FnYm05a1pYTWdQU0JiWFM1amIyNWpZWFFvWVdSaGNIUmxjaTV1YjJSbFZHOUliM04wVG05a1pTaHBkR1Z0TENCMGNuVmxLU2s3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdibTlrWlhNdWJXRndLR2RsZEVoVVRVeEdjbTl0U0c5emRFNXZaR1VwTG1wdmFXNG9KeWNwTzF4dUlDQWdJSDBzWEc0Z0lDQWdiblZzYkZKbGJtUmxjbEpsZEhWeWJuTk9kV3hzT2lCMGNuVmxMRnh1SUNCOUtUdGNibjFjYmlKZGZRPT1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVJTVFRyYXZlcnNhbC5qcy5tYXAiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9vYmplY3QgPSByZXF1aXJlKCdvYmplY3QuYXNzaWduJyk7XG5cbnZhciBfb2JqZWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX29iamVjdCk7XG5cbnZhciBfYXJyYXlQcm90b3R5cGUgPSByZXF1aXJlKCdhcnJheS5wcm90b3R5cGUuZmxhdCcpO1xuXG52YXIgX2FycmF5UHJvdG90eXBlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2FycmF5UHJvdG90eXBlKTtcblxudmFyIF9oYXMgPSByZXF1aXJlKCdoYXMnKTtcblxudmFyIF9oYXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaGFzKTtcblxudmFyIF9VdGlscyA9IHJlcXVpcmUoJy4vVXRpbHMnKTtcblxudmFyIF9nZXRBZGFwdGVyID0gcmVxdWlyZSgnLi9nZXRBZGFwdGVyJyk7XG5cbnZhciBfZ2V0QWRhcHRlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRBZGFwdGVyKTtcblxudmFyIF9EZWJ1ZyA9IHJlcXVpcmUoJy4vRGVidWcnKTtcblxudmFyIF9SU1RUcmF2ZXJzYWwgPSByZXF1aXJlKCcuL1JTVFRyYXZlcnNhbCcpO1xuXG52YXIgX3NlbGVjdG9ycyA9IHJlcXVpcmUoJy4vc2VsZWN0b3JzJyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIE5PREUgPSAoMCwgX1V0aWxzLnN5bSkoJ19fbm9kZV9fJyk7XG52YXIgTk9ERVMgPSAoMCwgX1V0aWxzLnN5bSkoJ19fbm9kZXNfXycpO1xudmFyIFJFTkRFUkVSID0gKDAsIF9VdGlscy5zeW0pKCdfX3JlbmRlcmVyX18nKTtcbnZhciBVTlJFTkRFUkVEID0gKDAsIF9VdGlscy5zeW0pKCdfX3VucmVuZGVyZWRfXycpO1xudmFyIFJPT1QgPSAoMCwgX1V0aWxzLnN5bSkoJ19fcm9vdF9fJyk7XG52YXIgT1BUSU9OUyA9ICgwLCBfVXRpbHMuc3ltKSgnX19vcHRpb25zX18nKTtcbnZhciBST09UX05PREVTID0gKDAsIF9VdGlscy5zeW0pKCdfX3Jvb3ROb2Rlc19fJyk7XG52YXIgV1JBUFBJTkdfQ09NUE9ORU5UID0gKDAsIF9VdGlscy5zeW0pKCdfX3dyYXBwaW5nQ29tcG9uZW50X18nKTtcbnZhciBMSU5LRURfUk9PVFMgPSAoMCwgX1V0aWxzLnN5bSkoJ19fbGlua2VkUm9vdHNfXycpO1xudmFyIFVQREFURURfQlkgPSAoMCwgX1V0aWxzLnN5bSkoJ19fdXBkYXRlZEJ5X18nKTtcblxuLyoqXG4gKiBGaW5kcyBhbGwgbm9kZXMgaW4gdGhlIGN1cnJlbnQgd3JhcHBlciBub2RlcycgcmVuZGVyIHRyZWVzIHRoYXQgbWF0Y2ggdGhlIHByb3ZpZGVkIHByZWRpY2F0ZVxuICogZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHtSZWFjdFdyYXBwZXJ9IHdyYXBwZXJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZmlsdGVyXG4gKiBAcmV0dXJucyB7UmVhY3RXcmFwcGVyfVxuICovXG5mdW5jdGlvbiBmaW5kV2hlcmVVbndyYXBwZWQod3JhcHBlciwgcHJlZGljYXRlKSB7XG4gIHZhciBmaWx0ZXIgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IF9SU1RUcmF2ZXJzYWwudHJlZUZpbHRlcjtcblxuICByZXR1cm4gd3JhcHBlci5mbGF0TWFwKGZ1bmN0aW9uIChuKSB7XG4gICAgcmV0dXJuIGZpbHRlcihuLmdldE5vZGVJbnRlcm5hbCgpLCBwcmVkaWNhdGUpO1xuICB9KTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgbmV3IHdyYXBwZXIgaW5zdGFuY2Ugd2l0aCBvbmx5IHRoZSBub2RlcyBvZiB0aGUgY3VycmVudCB3cmFwcGVyIGluc3RhbmNlIHRoYXQgbWF0Y2hcbiAqIHRoZSBwcm92aWRlZCBwcmVkaWNhdGUgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHtSZWFjdFdyYXBwZXJ9IHdyYXBwZXJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZVxuICogQHJldHVybnMge1JlYWN0V3JhcHBlcn1cbiAqL1xuZnVuY3Rpb24gZmlsdGVyV2hlcmVVbndyYXBwZWQod3JhcHBlciwgcHJlZGljYXRlKSB7XG4gIHJldHVybiB3cmFwcGVyLndyYXAod3JhcHBlci5nZXROb2Rlc0ludGVybmFsKCkuZmlsdGVyKHByZWRpY2F0ZSkuZmlsdGVyKEJvb2xlYW4pKTtcbn1cblxuZnVuY3Rpb24gZ2V0Um9vdE5vZGVJbnRlcm5hbCh3cmFwcGVyKSB7XG4gIGlmICh3cmFwcGVyW1JPT1RdLmxlbmd0aCAhPT0gMSkge1xuICAgIHRocm93IG5ldyBFcnJvcignZ2V0Um9vdE5vZGVJbnRlcm5hbCh3cmFwcGVyKSBjYW4gb25seSBiZSBjYWxsZWQgd2hlbiB3cmFwcGVyIHdyYXBzIG9uZSBub2RlJyk7XG4gIH1cbiAgaWYgKHdyYXBwZXJbUk9PVF0gIT09IHdyYXBwZXIpIHtcbiAgICByZXR1cm4gd3JhcHBlcltST09UX05PREVTXVswXTtcbiAgfVxuICByZXR1cm4gd3JhcHBlcltST09UXVtOT0RFXTtcbn1cblxuZnVuY3Rpb24gbm9kZVBhcmVudHMod3JhcHBlciwgbm9kZSkge1xuICByZXR1cm4gKDAsIF9SU1RUcmF2ZXJzYWwucGFyZW50c09mTm9kZSkobm9kZSwgZ2V0Um9vdE5vZGVJbnRlcm5hbCh3cmFwcGVyKSk7XG59XG5cbmZ1bmN0aW9uIHByaXZhdGVTZXROb2Rlcyh3cmFwcGVyLCBub2Rlcykge1xuICBpZiAoIW5vZGVzKSB7XG4gICAgKDAsIF9VdGlscy5wcml2YXRlU2V0KSh3cmFwcGVyLCBOT0RFLCBudWxsKTtcbiAgICAoMCwgX1V0aWxzLnByaXZhdGVTZXQpKHdyYXBwZXIsIE5PREVTLCBbXSk7XG4gIH0gZWxzZSBpZiAoIUFycmF5LmlzQXJyYXkobm9kZXMpKSB7XG4gICAgKDAsIF9VdGlscy5wcml2YXRlU2V0KSh3cmFwcGVyLCBOT0RFLCBub2Rlcyk7XG4gICAgKDAsIF9VdGlscy5wcml2YXRlU2V0KSh3cmFwcGVyLCBOT0RFUywgW25vZGVzXSk7XG4gIH0gZWxzZSB7XG4gICAgKDAsIF9VdGlscy5wcml2YXRlU2V0KSh3cmFwcGVyLCBOT0RFLCBub2Rlc1swXSk7XG4gICAgKDAsIF9VdGlscy5wcml2YXRlU2V0KSh3cmFwcGVyLCBOT0RFUywgbm9kZXMpO1xuICB9XG4gICgwLCBfVXRpbHMucHJpdmF0ZVNldCkod3JhcHBlciwgJ2xlbmd0aCcsIHdyYXBwZXJbTk9ERVNdLmxlbmd0aCk7XG59XG5cbi8qKlxuICogQGNsYXNzIFJlYWN0V3JhcHBlclxuICovXG5cbnZhciBSZWFjdFdyYXBwZXIgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFJlYWN0V3JhcHBlcihub2Rlcywgcm9vdCkge1xuICAgIHZhciBwYXNzZWRPcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSZWFjdFdyYXBwZXIpO1xuXG4gICAgaWYgKCFnbG9iYWwud2luZG93ICYmICFnbG9iYWwuZG9jdW1lbnQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSXQgbG9va3MgbGlrZSB5b3UgY2FsbGVkIGBtb3VudCgpYCB3aXRob3V0IGEgZ2xvYmFsIGRvY3VtZW50IGJlaW5nIGxvYWRlZC4nKTtcbiAgICB9XG4gICAgdmFyIG9wdGlvbnMgPSAoMCwgX1V0aWxzLm1ha2VPcHRpb25zKShwYXNzZWRPcHRpb25zKTtcblxuICAgIGlmICghcm9vdCkge1xuICAgICAgdmFyIGFkYXB0ZXIgPSAoMCwgX2dldEFkYXB0ZXIyWydkZWZhdWx0J10pKG9wdGlvbnMpO1xuICAgICAgaWYgKCFhZGFwdGVyLmlzVmFsaWRFbGVtZW50KG5vZGVzKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdSZWFjdFdyYXBwZXIgY2FuIG9ubHkgd3JhcCB2YWxpZCBlbGVtZW50cycpO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVuZGVyZXIgPSBhZGFwdGVyLmNyZWF0ZVJlbmRlcmVyKCgwLCBfb2JqZWN0MlsnZGVmYXVsdCddKSh7IG1vZGU6ICdtb3VudCcgfSwgb3B0aW9ucykpO1xuICAgICAgKDAsIF9VdGlscy5wcml2YXRlU2V0KSh0aGlzLCBSRU5ERVJFUiwgcmVuZGVyZXIpO1xuICAgICAgcmVuZGVyZXIucmVuZGVyKG5vZGVzLCBvcHRpb25zLmNvbnRleHQpO1xuICAgICAgKDAsIF9VdGlscy5wcml2YXRlU2V0KSh0aGlzLCBST09ULCB0aGlzKTtcbiAgICAgIHByaXZhdGVTZXROb2Rlcyh0aGlzLCB0aGlzW1JFTkRFUkVSXS5nZXROb2RlKCkpO1xuICAgICAgKDAsIF9VdGlscy5wcml2YXRlU2V0KSh0aGlzLCBPUFRJT05TLCBvcHRpb25zKTtcbiAgICAgICgwLCBfVXRpbHMucHJpdmF0ZVNldCkodGhpcywgTElOS0VEX1JPT1RTLCBbXSk7XG5cbiAgICAgIGlmICgoMCwgX1V0aWxzLmlzQ3VzdG9tQ29tcG9uZW50KShvcHRpb25zLndyYXBwaW5nQ29tcG9uZW50LCBhZGFwdGVyKSkge1xuICAgICAgICBpZiAodHlwZW9mIHRoaXNbUkVOREVSRVJdLmdldFdyYXBwaW5nQ29tcG9uZW50UmVuZGVyZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd5b3VyIGFkYXB0ZXIgZG9lcyBub3Qgc3VwcG9ydCBgd3JhcHBpbmdDb21wb25lbnRgLiBUcnkgdXBncmFkaW5nIGl0IScpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVzZS1iZWZvcmUtZGVmaW5lXG4gICAgICAgICgwLCBfVXRpbHMucHJpdmF0ZVNldCkodGhpcywgV1JBUFBJTkdfQ09NUE9ORU5ULCBuZXcgV3JhcHBpbmdDb21wb25lbnRXcmFwcGVyKHRoaXMsIHRoaXNbUkVOREVSRVJdLmdldFdyYXBwaW5nQ29tcG9uZW50UmVuZGVyZXIoKSkpO1xuICAgICAgICB0aGlzW0xJTktFRF9ST09UU10ucHVzaCh0aGlzW1dSQVBQSU5HX0NPTVBPTkVOVF0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAoMCwgX1V0aWxzLnByaXZhdGVTZXQpKHRoaXMsIFJFTkRFUkVSLCByb290W1JFTkRFUkVSXSk7XG4gICAgICAoMCwgX1V0aWxzLnByaXZhdGVTZXQpKHRoaXMsIFJPT1QsIHJvb3QpO1xuICAgICAgcHJpdmF0ZVNldE5vZGVzKHRoaXMsIG5vZGVzKTtcbiAgICAgICgwLCBfVXRpbHMucHJpdmF0ZVNldCkodGhpcywgUk9PVF9OT0RFUywgcm9vdFtOT0RFU10pO1xuICAgICAgKDAsIF9VdGlscy5wcml2YXRlU2V0KSh0aGlzLCBPUFRJT05TLCByb290W09QVElPTlNdKTtcbiAgICAgICgwLCBfVXRpbHMucHJpdmF0ZVNldCkodGhpcywgTElOS0VEX1JPT1RTLCBbXSk7XG4gICAgfVxuICAgICgwLCBfVXRpbHMucHJpdmF0ZVNldCkodGhpcywgVU5SRU5ERVJFRCwgbm9kZXMpO1xuICAgICgwLCBfVXRpbHMucHJpdmF0ZVNldCkodGhpcywgVVBEQVRFRF9CWSwgbnVsbCk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgcm9vdCB3cmFwcGVyXG4gICAqXG4gICAqIEByZXR1cm4ge1JlYWN0V3JhcHBlcn1cbiAgICovXG5cblxuICBfY3JlYXRlQ2xhc3MoUmVhY3RXcmFwcGVyLCBbe1xuICAgIGtleTogJ3Jvb3QnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiByb290KCkge1xuICAgICAgICByZXR1cm4gdGhpc1tST09UXTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJvb3Q7XG4gICAgfSgpXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSB3cmFwcGVkIGNvbXBvbmVudC5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge1JlYWN0Q29tcG9uZW50fVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdnZXROb2RlSW50ZXJuYWwnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBnZXROb2RlSW50ZXJuYWwoKSB7XG4gICAgICAgIGlmICh0aGlzLmxlbmd0aCAhPT0gMSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVhY3RXcmFwcGVyOjpnZXROb2RlKCkgY2FuIG9ubHkgYmUgY2FsbGVkIHdoZW4gd3JhcHBpbmcgb25lIG5vZGUnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpc1tOT0RFU11bMF07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBnZXROb2RlSW50ZXJuYWw7XG4gICAgfSgpXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSB0aGUgd3JhcHBlZCBjb21wb25lbnRzLlxuICAgICAqXG4gICAgICogQHJldHVybiB7QXJyYXk8UmVhY3RDb21wb25lbnQ+fVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdnZXROb2Rlc0ludGVybmFsJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gZ2V0Tm9kZXNJbnRlcm5hbCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbTk9ERVNdO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZ2V0Tm9kZXNJbnRlcm5hbDtcbiAgICB9KClcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHdyYXBwZWQgUmVhY3RFbGVtZW50LlxuICAgICAqXG4gICAgICogQHJldHVybiB7UmVhY3RFbGVtZW50fVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdnZXRFbGVtZW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gZ2V0RWxlbWVudCgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICByZXR1cm4gdGhpcy5zaW5nbGUoJ2dldEVsZW1lbnQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuICgwLCBfZ2V0QWRhcHRlcjJbJ2RlZmF1bHQnXSkoX3RoaXNbT1BUSU9OU10pLm5vZGVUb0VsZW1lbnQoX3RoaXNbTk9ERV0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGdldEVsZW1lbnQ7XG4gICAgfSgpXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSB3cmFwcGVkIFJlYWN0RWxlbWVudHMuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtBcnJheTxSZWFjdEVsZW1lbnQ+fVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdnZXRFbGVtZW50cycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIGdldEVsZW1lbnRzKCkge1xuICAgICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgICByZXR1cm4gdGhpc1tOT0RFU10ubWFwKGZ1bmN0aW9uIChuKSB7XG4gICAgICAgICAgcmV0dXJuICgwLCBfZ2V0QWRhcHRlcjJbJ2RlZmF1bHQnXSkoX3RoaXMyW09QVElPTlNdKS5ub2RlVG9FbGVtZW50KG4pO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGdldEVsZW1lbnRzO1xuICAgIH0oKVxuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXNcblxuICB9LCB7XG4gICAga2V5OiAnZ2V0Tm9kZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIGdldE5vZGUoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignUmVhY3RXcmFwcGVyOjpnZXROb2RlKCkgaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZC4gVXNlIFJlYWN0V3JhcHBlcjo6aW5zdGFuY2UoKSBpbnN0ZWFkJyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBnZXROb2RlO1xuICAgIH0oKVxuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXNcblxuICB9LCB7XG4gICAga2V5OiAnZ2V0Tm9kZXMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBnZXROb2RlcygpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZWFjdFdyYXBwZXI6OmdldE5vZGVzKCkgaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZC4nKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGdldE5vZGVzO1xuICAgIH0oKVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgb3V0ZXIgbW9zdCBET01Db21wb25lbnQgb2YgdGhlIGN1cnJlbnQgd3JhcHBlci5cbiAgICAgKlxuICAgICAqIE5PVEU6IGNhbiBvbmx5IGJlIGNhbGxlZCBvbiBhIHdyYXBwZXIgb2YgYSBzaW5nbGUgbm9kZS5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtET01Db21wb25lbnR9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2dldERPTU5vZGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBnZXRET01Ob2RlKCkge1xuICAgICAgICB2YXIgYWRhcHRlciA9ICgwLCBfZ2V0QWRhcHRlcjJbJ2RlZmF1bHQnXSkodGhpc1tPUFRJT05TXSk7XG4gICAgICAgIHJldHVybiB0aGlzLnNpbmdsZSgnZ2V0RE9NTm9kZScsIGZ1bmN0aW9uIChuKSB7XG4gICAgICAgICAgcmV0dXJuIGFkYXB0ZXIubm9kZVRvSG9zdE5vZGUobiwgdHJ1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZ2V0RE9NTm9kZTtcbiAgICB9KClcblxuICAgIC8qKlxuICAgICAqIElmIHRoZSByb290IGNvbXBvbmVudCBjb250YWluZWQgYSByZWYsIHlvdSBjYW4gYWNjZXNzIGl0IGhlcmUgYW5kIGdldCB0aGUgcmVsZXZhbnRcbiAgICAgKiByZWFjdCBjb21wb25lbnQgaW5zdGFuY2Ugb3IgSFRNTCBlbGVtZW50IGluc3RhbmNlLlxuICAgICAqXG4gICAgICogTk9URTogY2FuIG9ubHkgYmUgY2FsbGVkIG9uIGEgd3JhcHBlciBpbnN0YW5jZSB0aGF0IGlzIGFsc28gdGhlIHJvb3QgaW5zdGFuY2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcmVmbmFtZVxuICAgICAqIEByZXR1cm5zIHtSZWFjdENvbXBvbmVudCB8IEhUTUxFbGVtZW50fVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdyZWYnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiByZWYocmVmbmFtZSkge1xuICAgICAgICBpZiAodGhpc1tST09UXSAhPT0gdGhpcykge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVhY3RXcmFwcGVyOjpyZWYocmVmbmFtZSkgY2FuIG9ubHkgYmUgY2FsbGVkIG9uIHRoZSByb290Jyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuaW5zdGFuY2UoKS5yZWZzW3JlZm5hbWVdO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVmO1xuICAgIH0oKVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgd3JhcHBlcidzIHVuZGVybHlpbmcgaW5zdGFuY2UuXG4gICAgICpcbiAgICAgKiBFeGFtcGxlOlxuICAgICAqIGBgYFxuICAgICAqIGNvbnN0IHdyYXBwZXIgPSBtb3VudCg8TXlDb21wb25lbnQgLz4pO1xuICAgICAqIGNvbnN0IGluc3QgPSB3cmFwcGVyLmluc3RhbmNlKCk7XG4gICAgICogZXhwZWN0KGluc3QpLnRvLmJlLmluc3RhbmNlT2YoTXlDb21wb25lbnQpO1xuICAgICAqIGBgYFxuICAgICAqIEByZXR1cm5zIHtSZWFjdENvbXBvbmVudHxET01Db21wb25lbnR9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2luc3RhbmNlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gaW5zdGFuY2UoKSB7XG4gICAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICAgIHJldHVybiB0aGlzLnNpbmdsZSgnaW5zdGFuY2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzM1tOT0RFXS5pbnN0YW5jZTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBpbnN0YW5jZTtcbiAgICB9KClcblxuICAgIC8qKlxuICAgICAqIElmIGEgYHdyYXBwaW5nQ29tcG9uZW50YCB3YXMgcGFzc2VkIGluIGBvcHRpb25zYCwgdGhpcyBtZXRob2RzIHJldHVybnMgYSBgUmVhY3RXcmFwcGVyYCBhcm91bmRcbiAgICAgKiB0aGUgcmVuZGVyZWQgYHdyYXBwaW5nQ29tcG9uZW50YC4gVGhpcyBgUmVhY3RXcmFwcGVyYCBjYW4gYmUgdXNlZCB0byB1cGRhdGUgdGhlXG4gICAgICogYHdyYXBwaW5nQ29tcG9uZW50YCdzIHByb3BzLCBzdGF0ZSwgZXRjLlxuICAgICAqXG4gICAgICogQHJldHVybnMgUmVhY3RXcmFwcGVyXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2dldFdyYXBwaW5nQ29tcG9uZW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gZ2V0V3JhcHBpbmdDb21wb25lbnQoKSB7XG4gICAgICAgIGlmICh0aGlzW1JPT1RdICE9PSB0aGlzKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZWFjdFdyYXBwZXI6OmdldFdyYXBwaW5nQ29tcG9uZW50KCkgY2FuIG9ubHkgYmUgY2FsbGVkIG9uIHRoZSByb290Jyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzW09QVElPTlNdLndyYXBwaW5nQ29tcG9uZW50KSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZWFjdFdyYXBwZXI6OmdldFdyYXBwaW5nQ29tcG9uZW50KCkgY2FuIG9ubHkgYmUgY2FsbGVkIG9uIGEgd3JhcHBlciB0aGF0IHdhcyBvcmlnaW5hbGx5IHBhc3NlZCBhIGB3cmFwcGluZ0NvbXBvbmVudGAgb3B0aW9uJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXNbV1JBUFBJTkdfQ09NUE9ORU5UXTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGdldFdyYXBwaW5nQ29tcG9uZW50O1xuICAgIH0oKVxuXG4gICAgLyoqXG4gICAgICogRm9yY2VzIGEgcmUtcmVuZGVyLiBVc2VmdWwgdG8gcnVuIGJlZm9yZSBjaGVja2luZyB0aGUgcmVuZGVyIG91dHB1dCBpZiBzb21ldGhpbmcgZXh0ZXJuYWxcbiAgICAgKiBtYXkgYmUgdXBkYXRpbmcgdGhlIHN0YXRlIG9mIHRoZSBjb21wb25lbnQgc29tZXdoZXJlLlxuICAgICAqXG4gICAgICogTk9URTogbm8gbWF0dGVyIHdoYXQgaW5zdGFuY2UgdGhpcyBpcyBjYWxsZWQgb24sIGl0IHdpbGwgYWx3YXlzIHVwZGF0ZSB0aGUgcm9vdC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtSZWFjdFdyYXBwZXJ9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3VwZGF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICAgICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICAgICAgdmFyIHJvb3QgPSB0aGlzW1JPT1RdO1xuICAgICAgICBpZiAodGhpcyAhPT0gcm9vdCkge1xuICAgICAgICAgIHJldHVybiByb290LnVwZGF0ZSgpO1xuICAgICAgICB9XG4gICAgICAgIHByaXZhdGVTZXROb2Rlcyh0aGlzLCB0aGlzW1JFTkRFUkVSXS5nZXROb2RlKCkpO1xuICAgICAgICB0aGlzW0xJTktFRF9ST09UU10uZm9yRWFjaChmdW5jdGlvbiAobGlua2VkUm9vdCkge1xuICAgICAgICAgIGlmIChsaW5rZWRSb290ICE9PSBfdGhpczRbVVBEQVRFRF9CWV0pIHtcbiAgICAgICAgICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXBhcmFtLXJlYXNzaWduICovXG4gICAgICAgICAgICAvLyBPbmx5IHVwZGF0ZSBhIGxpbmtlZCBpdCByb290IGlmIGl0IGlzIG5vdCB0aGUgb3JpZ2luYXRvciBvZiBvdXIgdXBkYXRlKCkuXG4gICAgICAgICAgICAvLyBUaGlzIGlzIG5lZWRlZCB0byBwcmV2ZW50IGluZmluaXRlIHJlY3Vyc2lvbiB3aGVuIHRoZXJlIGlzIGEgYmktZGlyZWN0aW9uYWxcbiAgICAgICAgICAgIC8vIGxpbmsgYmV0d2VlbiB0d28gcm9vdHMuXG4gICAgICAgICAgICBsaW5rZWRSb290W1VQREFURURfQlldID0gX3RoaXM0O1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgbGlua2VkUm9vdC51cGRhdGUoKTtcbiAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgIGxpbmtlZFJvb3RbVVBEQVRFRF9CWV0gPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdXBkYXRlO1xuICAgIH0oKVxuXG4gICAgLyoqXG4gICAgICogQSBtZXRob2QgdGhhdCB1bm1vdW50cyB0aGUgY29tcG9uZW50LiBUaGlzIGNhbiBiZSB1c2VkIHRvIHNpbXVsYXRlIGEgY29tcG9uZW50IGdvaW5nIHRocm91Z2hcbiAgICAgKiBhbmQgdW5tb3VudC9tb3VudCBsaWZlY3ljbGUuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7UmVhY3RXcmFwcGVyfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICd1bm1vdW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gdW5tb3VudCgpIHtcbiAgICAgICAgdmFyIF90aGlzNSA9IHRoaXM7XG5cbiAgICAgICAgaWYgKHRoaXNbUk9PVF0gIT09IHRoaXMpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlYWN0V3JhcHBlcjo6dW5tb3VudCgpIGNhbiBvbmx5IGJlIGNhbGxlZCBvbiB0aGUgcm9vdCcpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2luZ2xlKCd1bm1vdW50JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIF90aGlzNVtSRU5ERVJFUl0udW5tb3VudCgpO1xuICAgICAgICAgIF90aGlzNS51cGRhdGUoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdW5tb3VudDtcbiAgICB9KClcblxuICAgIC8qKlxuICAgICAqIEEgbWV0aG9kIHRoYXQgcmUtbW91bnRzIHRoZSBjb21wb25lbnQsIGlmIGl0IGlzIG5vdCBjdXJyZW50bHkgbW91bnRlZC5cbiAgICAgKiBUaGlzIGNhbiBiZSB1c2VkIHRvIHNpbXVsYXRlIGEgY29tcG9uZW50IGdvaW5nIHRocm91Z2hcbiAgICAgKiBhbiB1bm1vdW50L21vdW50IGxpZmVjeWNsZS5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtSZWFjdFdyYXBwZXJ9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ21vdW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gbW91bnQoKSB7XG4gICAgICAgIHZhciBfdGhpczYgPSB0aGlzO1xuXG4gICAgICAgIGlmICh0aGlzW1JPT1RdICE9PSB0aGlzKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZWFjdFdyYXBwZXI6Om1vdW50KCkgY2FuIG9ubHkgYmUgY2FsbGVkIG9uIHRoZSByb290Jyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpc1tSRU5ERVJFUl0ucmVuZGVyKHRoaXNbVU5SRU5ERVJFRF0sIHRoaXNbT1BUSU9OU10uY29udGV4dCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBfdGhpczYudXBkYXRlKCk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG1vdW50O1xuICAgIH0oKVxuXG4gICAgLyoqXG4gICAgICogQSBtZXRob2QgdGhhdCBzZXRzIHRoZSBwcm9wcyBvZiB0aGUgcm9vdCBjb21wb25lbnQsIGFuZCByZS1yZW5kZXJzLiBVc2VmdWwgZm9yIHdoZW4geW91IGFyZVxuICAgICAqIHdhbnRpbmcgdG8gdGVzdCBob3cgdGhlIGNvbXBvbmVudCBiZWhhdmVzIG92ZXIgdGltZSB3aXRoIGNoYW5naW5nIHByb3BzLiBDYWxsaW5nIHRoaXMsIGZvclxuICAgICAqIGluc3RhbmNlLCB3aWxsIGNhbGwgdGhlIGBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzYCBsaWZlY3ljbGUgbWV0aG9kLlxuICAgICAqXG4gICAgICogU2ltaWxhciB0byBgc2V0U3RhdGVgLCB0aGlzIG1ldGhvZCBhY2NlcHRzIGEgcHJvcHMgb2JqZWN0IGFuZCB3aWxsIG1lcmdlIGl0IGluIHdpdGggdGhlIGFscmVhZHlcbiAgICAgKiBleGlzdGluZyBwcm9wcy5cbiAgICAgKlxuICAgICAqIE5PVEU6IGNhbiBvbmx5IGJlIGNhbGxlZCBvbiBhIHdyYXBwZXIgaW5zdGFuY2UgdGhhdCBpcyBhbHNvIHRoZSByb290IGluc3RhbmNlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHByb3BzIG9iamVjdFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNiIC0gY2FsbGJhY2sgZnVuY3Rpb25cbiAgICAgKiBAcmV0dXJucyB7UmVhY3RXcmFwcGVyfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdzZXRQcm9wcycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIHNldFByb3BzKHByb3BzKSB7XG4gICAgICAgIHZhciBfdGhpczcgPSB0aGlzO1xuXG4gICAgICAgIHZhciBjYWxsYmFjayA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIGlmICh0aGlzW1JPT1RdICE9PSB0aGlzKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZWFjdFdyYXBwZXI6OnNldFByb3BzKCkgY2FuIG9ubHkgYmUgY2FsbGVkIG9uIHRoZSByb290Jyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIHR5cGVvZiBjYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1JlYWN0V3JhcHBlcjo6c2V0UHJvcHMoKSBleHBlY3RzIGEgZnVuY3Rpb24gYXMgaXRzIHNlY29uZCBhcmd1bWVudCcpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBhZGFwdGVyID0gKDAsIF9nZXRBZGFwdGVyMlsnZGVmYXVsdCddKSh0aGlzW09QVElPTlNdKTtcbiAgICAgICAgdGhpc1tVTlJFTkRFUkVEXSA9ICgwLCBfVXRpbHMuY2xvbmVFbGVtZW50KShhZGFwdGVyLCB0aGlzW1VOUkVOREVSRURdLCBwcm9wcyk7XG4gICAgICAgIHRoaXNbUkVOREVSRVJdLnJlbmRlcih0aGlzW1VOUkVOREVSRURdLCBudWxsLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXM3LnVwZGF0ZSgpO1xuICAgICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNldFByb3BzO1xuICAgIH0oKVxuXG4gICAgLyoqXG4gICAgICogQSBtZXRob2QgdG8gaW52b2tlIGBzZXRTdGF0ZWAgb24gdGhlIHJvb3QgY29tcG9uZW50IGluc3RhbmNlIHNpbWlsYXIgdG8gaG93IHlvdSBtaWdodCBpbiB0aGVcbiAgICAgKiBkZWZpbml0aW9uIG9mIHRoZSBjb21wb25lbnQsIGFuZCByZS1yZW5kZXJzLiAgVGhpcyBtZXRob2QgaXMgdXNlZnVsIGZvciB0ZXN0aW5nIHlvdXIgY29tcG9uZW50XG4gICAgICogaW4gaGFyZCB0byBhY2hpZXZlIHN0YXRlcywgaG93ZXZlciBzaG91bGQgYmUgdXNlZCBzcGFyaW5nbHkuIElmIHBvc3NpYmxlLCB5b3Ugc2hvdWxkIHV0aWxpemVcbiAgICAgKiB5b3VyIGNvbXBvbmVudCdzIGV4dGVybmFsIEFQSSBpbiBvcmRlciB0byBnZXQgaXQgaW50byB3aGF0ZXZlciBzdGF0ZSB5b3Ugd2FudCB0byB0ZXN0LCBpbiBvcmRlclxuICAgICAqIHRvIGJlIGFzIGFjY3VyYXRlIG9mIGEgdGVzdCBhcyBwb3NzaWJsZS4gVGhpcyBpcyBub3QgYWx3YXlzIHByYWN0aWNhbCwgaG93ZXZlci5cbiAgICAgKlxuICAgICAqIE5PVEU6IGNhbiBvbmx5IGJlIGNhbGxlZCBvbiBhIHdyYXBwZXIgaW5zdGFuY2UgdGhhdCBpcyBhbHNvIHRoZSByb290IGluc3RhbmNlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHN0YXRlIHRvIG1lcmdlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2IgLSBjYWxsYmFjayBmdW5jdGlvblxuICAgICAqIEByZXR1cm5zIHtSZWFjdFdyYXBwZXJ9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3NldFN0YXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gc2V0U3RhdGUoc3RhdGUpIHtcbiAgICAgICAgdmFyIF90aGlzOCA9IHRoaXM7XG5cbiAgICAgICAgdmFyIGNhbGxiYWNrID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgaWYgKHRoaXMuaW5zdGFuY2UoKSA9PT0gbnVsbCB8fCB0aGlzLmdldE5vZGVJbnRlcm5hbCgpLm5vZGVUeXBlICE9PSAnY2xhc3MnKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZWFjdFdyYXBwZXI6OnNldFN0YXRlKCkgY2FuIG9ubHkgYmUgY2FsbGVkIG9uIGNsYXNzIGNvbXBvbmVudHMnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIGNhbGxiYWNrICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUmVhY3RXcmFwcGVyOjpzZXRTdGF0ZSgpIGV4cGVjdHMgYSBmdW5jdGlvbiBhcyBpdHMgc2Vjb25kIGFyZ3VtZW50Jyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pbnN0YW5jZSgpLnNldFN0YXRlKHN0YXRlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXM4LnVwZGF0ZSgpO1xuICAgICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgdmFyIGFkYXB0ZXIgPSAoMCwgX2dldEFkYXB0ZXIyWydkZWZhdWx0J10pKF90aGlzOFtPUFRJT05TXSk7XG4gICAgICAgICAgICB2YXIgaW5zdGFuY2UgPSBfdGhpczguaW5zdGFuY2UoKTtcbiAgICAgICAgICAgIGlmIChhZGFwdGVyLmludm9rZVNldFN0YXRlQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgYWRhcHRlci5pbnZva2VTZXRTdGF0ZUNhbGxiYWNrKGluc3RhbmNlLCBjYWxsYmFjayk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjYWxsYmFjay5jYWxsKGluc3RhbmNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNldFN0YXRlO1xuICAgIH0oKVxuXG4gICAgLyoqXG4gICAgICogQSBtZXRob2QgdGhhdCBzZXRzIHRoZSBjb250ZXh0IG9mIHRoZSByb290IGNvbXBvbmVudCwgYW5kIHJlLXJlbmRlcnMuIFVzZWZ1bCBmb3Igd2hlbiB5b3UgYXJlXG4gICAgICogd2FudGluZyB0byB0ZXN0IGhvdyB0aGUgY29tcG9uZW50IGJlaGF2ZXMgb3ZlciB0aW1lIHdpdGggY2hhbmdpbmcgY29udGV4dHMuXG4gICAgICpcbiAgICAgKiBOT1RFOiBjYW4gb25seSBiZSBjYWxsZWQgb24gYSB3cmFwcGVyIGluc3RhbmNlIHRoYXQgaXMgYWxzbyB0aGUgcm9vdCBpbnN0YW5jZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjb250ZXh0IG9iamVjdFxuICAgICAqIEByZXR1cm5zIHtSZWFjdFdyYXBwZXJ9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3NldENvbnRleHQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBzZXRDb250ZXh0KGNvbnRleHQpIHtcbiAgICAgICAgdmFyIF90aGlzOSA9IHRoaXM7XG5cbiAgICAgICAgaWYgKHRoaXNbUk9PVF0gIT09IHRoaXMpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlYWN0V3JhcHBlcjo6c2V0Q29udGV4dCgpIGNhbiBvbmx5IGJlIGNhbGxlZCBvbiB0aGUgcm9vdCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpc1tPUFRJT05TXS5jb250ZXh0KSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZWFjdFdyYXBwZXI6OnNldENvbnRleHQoKSBjYW4gb25seSBiZSBjYWxsZWQgb24gYSB3cmFwcGVyIHRoYXQgd2FzIG9yaWdpbmFsbHkgcGFzc2VkIGEgY29udGV4dCBvcHRpb24nKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzW1JFTkRFUkVSXS5yZW5kZXIodGhpc1tVTlJFTkRFUkVEXSwgY29udGV4dCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBfdGhpczkudXBkYXRlKCk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNldENvbnRleHQ7XG4gICAgfSgpXG5cbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIG9yIG5vdCBhIGdpdmVuIHJlYWN0IGVsZW1lbnQgZXhpc3RzIGluIHRoZSBtb3VudCByZW5kZXIgdHJlZS5cbiAgICAgKlxuICAgICAqIEV4YW1wbGU6XG4gICAgICogYGBgXG4gICAgICogY29uc3Qgd3JhcHBlciA9IG1vdW50KDxNeUNvbXBvbmVudCAvPik7XG4gICAgICogZXhwZWN0KHdyYXBwZXIuY29udGFpbnMoPGRpdiBjbGFzc05hbWU9XCJmb28gYmFyXCIgLz4pKS50by5lcXVhbCh0cnVlKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UmVhY3RFbGVtZW50fEFycmF5PFJlYWN0RWxlbWVudD59IG5vZGVPck5vZGVzXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2NvbnRhaW5zJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gY29udGFpbnMobm9kZU9yTm9kZXMpIHtcbiAgICAgICAgdmFyIGFkYXB0ZXIgPSAoMCwgX2dldEFkYXB0ZXIyWydkZWZhdWx0J10pKHRoaXNbT1BUSU9OU10pO1xuXG4gICAgICAgIHZhciBwcmVkaWNhdGUgPSBBcnJheS5pc0FycmF5KG5vZGVPck5vZGVzKSA/IGZ1bmN0aW9uIChvdGhlcikge1xuICAgICAgICAgIHJldHVybiAoMCwgX1V0aWxzLmNvbnRhaW5zQ2hpbGRyZW5TdWJBcnJheSkoX1V0aWxzLm5vZGVFcXVhbCwgb3RoZXIsIG5vZGVPck5vZGVzLm1hcChmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgICAgcmV0dXJuIGFkYXB0ZXIuZWxlbWVudFRvTm9kZShub2RlKTtcbiAgICAgICAgICB9KSk7XG4gICAgICAgIH0gOiBmdW5jdGlvbiAob3RoZXIpIHtcbiAgICAgICAgICByZXR1cm4gKDAsIF9VdGlscy5ub2RlRXF1YWwpKGFkYXB0ZXIuZWxlbWVudFRvTm9kZShub2RlT3JOb2RlcyksIG90aGVyKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gZmluZFdoZXJlVW53cmFwcGVkKHRoaXMsIHByZWRpY2F0ZSkubGVuZ3RoID4gMDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRhaW5zO1xuICAgIH0oKVxuXG4gICAgLyoqXG4gICAgICogV2hldGhlciBvciBub3QgYSBnaXZlbiByZWFjdCBlbGVtZW50IGV4aXN0cyBpbiB0aGUgY3VycmVudCByZW5kZXIgdHJlZS5cbiAgICAgKiBJdCB3aWxsIGRldGVybWluZSBpZiBvbmUgb2YgdGhlIHdyYXBwZXJzIGVsZW1lbnQgXCJsb29rcyBsaWtlXCIgdGhlIGV4cGVjdGVkXG4gICAgICogZWxlbWVudCBieSBjaGVja2luZyBpZiBhbGwgcHJvcHMgb2YgdGhlIGV4cGVjdGVkIGVsZW1lbnQgYXJlIHByZXNlbnRcbiAgICAgKiBvbiB0aGUgd3JhcHBlcnMgZWxlbWVudCBhbmQgZXF1YWxzIHRvIGVhY2ggb3RoZXIuXG4gICAgICpcbiAgICAgKiBFeGFtcGxlOlxuICAgICAqIGBgYFxuICAgICAqIC8vIE15Q29tcG9uZW50IG91dHB1dHMgPGRpdj48ZGl2IGNsYXNzPVwiZm9vXCI+SGVsbG88L2Rpdj48L2Rpdj5cbiAgICAgKiBjb25zdCB3cmFwcGVyID0gbW91bnQoPE15Q29tcG9uZW50IC8+KTtcbiAgICAgKiBleHBlY3Qod3JhcHBlci5jb250YWluc01hdGNoaW5nRWxlbWVudCg8ZGl2PkhlbGxvPC9kaXY+KSkudG8uZXF1YWwodHJ1ZSk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gbm9kZVxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdjb250YWluc01hdGNoaW5nRWxlbWVudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIGNvbnRhaW5zTWF0Y2hpbmdFbGVtZW50KG5vZGUpIHtcbiAgICAgICAgdmFyIHJzdE5vZGUgPSAoMCwgX2dldEFkYXB0ZXIyWydkZWZhdWx0J10pKHRoaXNbT1BUSU9OU10pLmVsZW1lbnRUb05vZGUobm9kZSk7XG4gICAgICAgIHZhciBwcmVkaWNhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZnVuY3Rpb24gcHJlZGljYXRlKG90aGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gKDAsIF9VdGlscy5ub2RlTWF0Y2hlcykocnN0Tm9kZSwgb3RoZXIsIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgICAgIHJldHVybiBhIDw9IGI7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gcHJlZGljYXRlO1xuICAgICAgICB9KCk7XG4gICAgICAgIHJldHVybiBmaW5kV2hlcmVVbndyYXBwZWQodGhpcywgcHJlZGljYXRlKS5sZW5ndGggPiAwO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29udGFpbnNNYXRjaGluZ0VsZW1lbnQ7XG4gICAgfSgpXG5cbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIG9yIG5vdCBhbGwgdGhlIGdpdmVuIHJlYWN0IGVsZW1lbnRzIGV4aXN0IGluIHRoZSBjdXJyZW50IHJlbmRlciB0cmVlLlxuICAgICAqIEl0IHdpbGwgZGV0ZXJtaW5lIGlmIG9uZSBvZiB0aGUgd3JhcHBlcnMgZWxlbWVudCBcImxvb2tzIGxpa2VcIiB0aGUgZXhwZWN0ZWRcbiAgICAgKiBlbGVtZW50IGJ5IGNoZWNraW5nIGlmIGFsbCBwcm9wcyBvZiB0aGUgZXhwZWN0ZWQgZWxlbWVudCBhcmUgcHJlc2VudFxuICAgICAqIG9uIHRoZSB3cmFwcGVycyBlbGVtZW50IGFuZCBlcXVhbHMgdG8gZWFjaCBvdGhlci5cbiAgICAgKlxuICAgICAqIEV4YW1wbGU6XG4gICAgICogYGBgXG4gICAgICogY29uc3Qgd3JhcHBlciA9IG1vdW50KDxNeUNvbXBvbmVudCAvPik7XG4gICAgICogZXhwZWN0KHdyYXBwZXIuY29udGFpbnNBbGxNYXRjaGluZ0VsZW1lbnRzKFtcbiAgICAgKiAgIDxkaXY+SGVsbG88L2Rpdj4sXG4gICAgICogICA8ZGl2Pkdvb2RieWU8L2Rpdj4sXG4gICAgICogXSkpLnRvLmVxdWFsKHRydWUpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHBhcmFtIHtBcnJheTxSZWFjdEVsZW1lbnQ+fSBub2Rlc1xuICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdjb250YWluc0FsbE1hdGNoaW5nRWxlbWVudHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBjb250YWluc0FsbE1hdGNoaW5nRWxlbWVudHMobm9kZXMpIHtcbiAgICAgICAgdmFyIF90aGlzMTAgPSB0aGlzO1xuXG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheShub2RlcykpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdub2RlcyBzaG91bGQgYmUgYW4gQXJyYXknKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBub2Rlcy5ldmVyeShmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgIHJldHVybiBfdGhpczEwLmNvbnRhaW5zTWF0Y2hpbmdFbGVtZW50KG5vZGUpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRhaW5zQWxsTWF0Y2hpbmdFbGVtZW50cztcbiAgICB9KClcblxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgb3Igbm90IG9uZSBvZiB0aGUgZ2l2ZW4gcmVhY3QgZWxlbWVudHMgZXhpc3RzIGluIHRoZSBjdXJyZW50IHJlbmRlciB0cmVlLlxuICAgICAqIEl0IHdpbGwgZGV0ZXJtaW5lIGlmIG9uZSBvZiB0aGUgd3JhcHBlcnMgZWxlbWVudCBcImxvb2tzIGxpa2VcIiB0aGUgZXhwZWN0ZWRcbiAgICAgKiBlbGVtZW50IGJ5IGNoZWNraW5nIGlmIGFsbCBwcm9wcyBvZiB0aGUgZXhwZWN0ZWQgZWxlbWVudCBhcmUgcHJlc2VudFxuICAgICAqIG9uIHRoZSB3cmFwcGVycyBlbGVtZW50IGFuZCBlcXVhbHMgdG8gZWFjaCBvdGhlci5cbiAgICAgKlxuICAgICAqIEV4YW1wbGU6XG4gICAgICogYGBgXG4gICAgICogY29uc3Qgd3JhcHBlciA9IG1vdW50KDxNeUNvbXBvbmVudCAvPik7XG4gICAgICogZXhwZWN0KHdyYXBwZXIuY29udGFpbnNBbnlNYXRjaGluZ0VsZW1lbnRzKFtcbiAgICAgKiAgIDxkaXY+SGVsbG88L2Rpdj4sXG4gICAgICogICA8ZGl2Pkdvb2RieWU8L2Rpdj4sXG4gICAgICogXSkpLnRvLmVxdWFsKHRydWUpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHBhcmFtIHtBcnJheTxSZWFjdEVsZW1lbnQ+fSBub2Rlc1xuICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdjb250YWluc0FueU1hdGNoaW5nRWxlbWVudHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBjb250YWluc0FueU1hdGNoaW5nRWxlbWVudHMobm9kZXMpIHtcbiAgICAgICAgdmFyIF90aGlzMTEgPSB0aGlzO1xuXG4gICAgICAgIHJldHVybiBBcnJheS5pc0FycmF5KG5vZGVzKSAmJiBub2Rlcy5zb21lKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzMTEuY29udGFpbnNNYXRjaGluZ0VsZW1lbnQobm9kZSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29udGFpbnNBbnlNYXRjaGluZ0VsZW1lbnRzO1xuICAgIH0oKVxuXG4gICAgLyoqXG4gICAgICogV2hldGhlciBvciBub3QgYSBnaXZlbiByZWFjdCBlbGVtZW50IGV4aXN0cyBpbiB0aGUgcmVuZGVyIHRyZWUuXG4gICAgICpcbiAgICAgKiBFeGFtcGxlOlxuICAgICAqIGBgYFxuICAgICAqIGNvbnN0IHdyYXBwZXIgPSBtb3VudCg8TXlDb21wb25lbnQgLz4pO1xuICAgICAqIGV4cGVjdCh3cmFwcGVyLmNvbnRhaW5zKDxkaXYgY2xhc3NOYW1lPVwiZm9vIGJhclwiIC8+KSkudG8uZXF1YWwodHJ1ZSk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gbm9kZVxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdlcXVhbHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBlcXVhbHMobm9kZSkge1xuICAgICAgICB2YXIgX3RoaXMxMiA9IHRoaXM7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuc2luZ2xlKCdlcXVhbHMnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuICgwLCBfVXRpbHMubm9kZUVxdWFsKShfdGhpczEyLmdldE5vZGVJbnRlcm5hbCgpLCBub2RlKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBlcXVhbHM7XG4gICAgfSgpXG5cbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIG9yIG5vdCBhIGdpdmVuIHJlYWN0IGVsZW1lbnQgbWF0Y2hlcyB0aGUgcmVuZGVyIHRyZWUuXG4gICAgICogTWF0Y2ggaXMgYmFzZWQgb24gdGhlIGV4cGVjdGVkIGVsZW1lbnQgYW5kIG5vdCBvbiB3cmFwcGVyIHJvb3Qgbm9kZS5cbiAgICAgKiBJdCB3aWxsIGRldGVybWluZSBpZiB0aGUgd3JhcHBlciByb290IG5vZGUgXCJsb29rcyBsaWtlXCIgdGhlIGV4cGVjdGVkXG4gICAgICogZWxlbWVudCBieSBjaGVja2luZyBpZiBhbGwgcHJvcHMgb2YgdGhlIGV4cGVjdGVkIGVsZW1lbnQgYXJlIHByZXNlbnRcbiAgICAgKiBvbiB0aGUgd3JhcHBlciByb290IG5vZGUgYW5kIGVxdWFscyB0byBlYWNoIG90aGVyLlxuICAgICAqXG4gICAgICogRXhhbXBsZTpcbiAgICAgKiBgYGBcbiAgICAgKiAvLyBNeUNvbXBvbmVudCBvdXRwdXRzIDxkaXYgY2xhc3M9XCJmb29cIj5IZWxsbzwvZGl2PlxuICAgICAqIGNvbnN0IHdyYXBwZXIgPSBtb3VudCg8TXlDb21wb25lbnQgLz4pO1xuICAgICAqIGV4cGVjdCh3cmFwcGVyLm1hdGNoZXNFbGVtZW50KDxkaXY+SGVsbG88L2Rpdj4pKS50by5lcXVhbCh0cnVlKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UmVhY3RFbGVtZW50fSBub2RlXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ21hdGNoZXNFbGVtZW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gbWF0Y2hlc0VsZW1lbnQobm9kZSkge1xuICAgICAgICB2YXIgX3RoaXMxMyA9IHRoaXM7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuc2luZ2xlKCdtYXRjaGVzRWxlbWVudCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgYWRhcHRlciA9ICgwLCBfZ2V0QWRhcHRlcjJbJ2RlZmF1bHQnXSkoX3RoaXMxM1tPUFRJT05TXSk7XG4gICAgICAgICAgdmFyIHJzdE5vZGUgPSBhZGFwdGVyLmVsZW1lbnRUb05vZGUobm9kZSk7XG4gICAgICAgICAgcmV0dXJuICgwLCBfVXRpbHMubm9kZU1hdGNoZXMpKHJzdE5vZGUsIF90aGlzMTMuZ2V0Tm9kZUludGVybmFsKCksIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgICByZXR1cm4gYSA8PSBiO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG1hdGNoZXNFbGVtZW50O1xuICAgIH0oKVxuXG4gICAgLyoqXG4gICAgICogRmluZHMgZXZlcnkgbm9kZSBpbiB0aGUgcmVuZGVyIHRyZWUgb2YgdGhlIGN1cnJlbnQgd3JhcHBlciB0aGF0IG1hdGNoZXMgdGhlIHByb3ZpZGVkIHNlbGVjdG9yLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtFbnp5bWVTZWxlY3Rvcn0gc2VsZWN0b3JcbiAgICAgKiBAcmV0dXJucyB7UmVhY3RXcmFwcGVyfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdmaW5kJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gZmluZChzZWxlY3Rvcikge1xuICAgICAgICByZXR1cm4gdGhpcy53cmFwKCgwLCBfc2VsZWN0b3JzLnJlZHVjZVRyZWVzQnlTZWxlY3Rvcikoc2VsZWN0b3IsIHRoaXMuZ2V0Tm9kZXNJbnRlcm5hbCgpKSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmaW5kO1xuICAgIH0oKVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB3aGV0aGVyIG9yIG5vdCBjdXJyZW50IG5vZGUgbWF0Y2hlcyBhIHByb3ZpZGVkIHNlbGVjdG9yLlxuICAgICAqXG4gICAgICogTk9URTogY2FuIG9ubHkgYmUgY2FsbGVkIG9uIGEgd3JhcHBlciBvZiBhIHNpbmdsZSBub2RlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtFbnp5bWVTZWxlY3Rvcn0gc2VsZWN0b3JcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnaXMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBpcyhzZWxlY3Rvcikge1xuICAgICAgICB2YXIgcHJlZGljYXRlID0gKDAsIF9zZWxlY3RvcnMuYnVpbGRQcmVkaWNhdGUpKHNlbGVjdG9yKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2luZ2xlKCdpcycsIGZ1bmN0aW9uIChuKSB7XG4gICAgICAgICAgcmV0dXJuIHByZWRpY2F0ZShuKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBpcztcbiAgICB9KClcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgY29tcG9uZW50IHJlbmRlcmVkIG5vdGhpbmcsIGkuZS4sIG51bGwgb3IgZmFsc2UuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnaXNFbXB0eVJlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIGlzRW1wdHlSZW5kZXIoKSB7XG4gICAgICAgIHZhciBub2RlcyA9IHRoaXMuZ2V0Tm9kZUludGVybmFsKCk7XG5cbiAgICAgICAgcmV0dXJuICgwLCBfVXRpbHMucmVuZGVyZWREaXZlKShub2Rlcyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBpc0VtcHR5UmVuZGVyO1xuICAgIH0oKVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIG5ldyB3cmFwcGVyIGluc3RhbmNlIHdpdGggb25seSB0aGUgbm9kZXMgb2YgdGhlIGN1cnJlbnQgd3JhcHBlciBpbnN0YW5jZSB0aGF0IG1hdGNoXG4gICAgICogdGhlIHByb3ZpZGVkIHByZWRpY2F0ZSBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZVxuICAgICAqIEByZXR1cm5zIHtSZWFjdFdyYXBwZXJ9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2ZpbHRlcldoZXJlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gZmlsdGVyV2hlcmUocHJlZGljYXRlKSB7XG4gICAgICAgIHZhciBfdGhpczE0ID0gdGhpcztcblxuICAgICAgICByZXR1cm4gZmlsdGVyV2hlcmVVbndyYXBwZWQodGhpcywgZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgICByZXR1cm4gcHJlZGljYXRlKF90aGlzMTQud3JhcChuKSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZmlsdGVyV2hlcmU7XG4gICAgfSgpXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbmV3IHdyYXBwZXIgaW5zdGFuY2Ugd2l0aCBvbmx5IHRoZSBub2RlcyBvZiB0aGUgY3VycmVudCB3cmFwcGVyIGluc3RhbmNlIHRoYXQgbWF0Y2hcbiAgICAgKiB0aGUgcHJvdmlkZWQgc2VsZWN0b3IuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0VuenltZVNlbGVjdG9yfSBzZWxlY3RvclxuICAgICAqIEByZXR1cm5zIHtSZWFjdFdyYXBwZXJ9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2ZpbHRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIGZpbHRlcihzZWxlY3Rvcikge1xuICAgICAgICB2YXIgcHJlZGljYXRlID0gKDAsIF9zZWxlY3RvcnMuYnVpbGRQcmVkaWNhdGUpKHNlbGVjdG9yKTtcbiAgICAgICAgcmV0dXJuIGZpbHRlcldoZXJlVW53cmFwcGVkKHRoaXMsIHByZWRpY2F0ZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmaWx0ZXI7XG4gICAgfSgpXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbmV3IHdyYXBwZXIgaW5zdGFuY2Ugd2l0aCBvbmx5IHRoZSBub2RlcyBvZiB0aGUgY3VycmVudCB3cmFwcGVyIHRoYXQgZGlkIG5vdCBtYXRjaFxuICAgICAqIHRoZSBwcm92aWRlZCBzZWxlY3Rvci4gRXNzZW50aWFsbHkgdGhlIGludmVyc2Ugb2YgYGZpbHRlcmAuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0VuenltZVNlbGVjdG9yfSBzZWxlY3RvclxuICAgICAqIEByZXR1cm5zIHtSZWFjdFdyYXBwZXJ9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ25vdCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIG5vdChzZWxlY3Rvcikge1xuICAgICAgICB2YXIgcHJlZGljYXRlID0gKDAsIF9zZWxlY3RvcnMuYnVpbGRQcmVkaWNhdGUpKHNlbGVjdG9yKTtcbiAgICAgICAgcmV0dXJuIGZpbHRlcldoZXJlVW53cmFwcGVkKHRoaXMsIGZ1bmN0aW9uIChuKSB7XG4gICAgICAgICAgcmV0dXJuICFwcmVkaWNhdGUobik7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbm90O1xuICAgIH0oKVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIHN0cmluZyBvZiB0aGUgcmVuZGVyZWQgdGV4dCBvZiB0aGUgY3VycmVudCByZW5kZXIgdHJlZS4gIFRoaXMgZnVuY3Rpb24gc2hvdWxkIGJlXG4gICAgICogbG9va2VkIGF0IHdpdGggc2tlcHRpY2lzbSBpZiBiZWluZyB1c2VkIHRvIHRlc3Qgd2hhdCB0aGUgYWN0dWFsIEhUTUwgb3V0cHV0IG9mIHRoZSBjb21wb25lbnRcbiAgICAgKiB3aWxsIGJlLiBJZiB0aGF0IGlzIHdoYXQgeW91IHdvdWxkIGxpa2UgdG8gdGVzdCwgdXNlIGVuenltZSdzIGByZW5kZXJgIGZ1bmN0aW9uIGluc3RlYWQuXG4gICAgICpcbiAgICAgKiBOT1RFOiBjYW4gb25seSBiZSBjYWxsZWQgb24gYSB3cmFwcGVyIG9mIGEgc2luZ2xlIG5vZGUuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICd0ZXh0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gdGV4dCgpIHtcbiAgICAgICAgdmFyIGFkYXB0ZXIgPSAoMCwgX2dldEFkYXB0ZXIyWydkZWZhdWx0J10pKHRoaXNbT1BUSU9OU10pO1xuICAgICAgICByZXR1cm4gdGhpcy5zaW5nbGUoJ3RleHQnLCBmdW5jdGlvbiAobikge1xuICAgICAgICAgIHJldHVybiAoMCwgX1JTVFRyYXZlcnNhbC5nZXRUZXh0RnJvbUhvc3ROb2RlcykobiwgYWRhcHRlcik7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGV4dDtcbiAgICB9KClcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIEhUTUwgb2YgdGhlIG5vZGUuXG4gICAgICpcbiAgICAgKiBOT1RFOiBjYW4gb25seSBiZSBjYWxsZWQgb24gYSB3cmFwcGVyIG9mIGEgc2luZ2xlIG5vZGUuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdodG1sJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gaHRtbCgpIHtcbiAgICAgICAgdmFyIGFkYXB0ZXIgPSAoMCwgX2dldEFkYXB0ZXIyWydkZWZhdWx0J10pKHRoaXNbT1BUSU9OU10pO1xuICAgICAgICByZXR1cm4gdGhpcy5zaW5nbGUoJ2h0bWwnLCBmdW5jdGlvbiAobikge1xuICAgICAgICAgIHJldHVybiAoMCwgX1JTVFRyYXZlcnNhbC5nZXRIVE1MRnJvbUhvc3ROb2RlcykobiwgYWRhcHRlcik7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gaHRtbDtcbiAgICB9KClcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGN1cnJlbnQgbm9kZSByZW5kZXJlZCB0byBIVE1MIGFuZCB3cmFwcGVkIGluIGEgQ2hlZXJpb1dyYXBwZXIuXG4gICAgICpcbiAgICAgKiBOT1RFOiBjYW4gb25seSBiZSBjYWxsZWQgb24gYSB3cmFwcGVyIG9mIGEgc2luZ2xlIG5vZGUuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7Q2hlZXJpb1dyYXBwZXJ9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgdmFyIGh0bWwgPSB0aGlzLmh0bWwoKTtcbiAgICAgICAgcmV0dXJuICgwLCBfVXRpbHMubG9hZENoZWVyaW9Sb290KShodG1sKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlbmRlcjtcbiAgICB9KClcblxuICAgIC8qKlxuICAgICAqIFVzZWQgdG8gc2ltdWxhdGUgZXZlbnRzLiBQYXNzIGFuIGV2ZW50bmFtZSBhbmQgKG9wdGlvbmFsbHkpIGV2ZW50IGFyZ3VtZW50cy4gVGhpcyBtZXRob2Qgb2ZcbiAgICAgKiB0ZXN0aW5nIGV2ZW50cyBzaG91bGQgYmUgbWV0IHdpdGggc29tZSBza2VwdGljaXNtLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG1vY2sgKG9wdGlvbmFsKVxuICAgICAqIEByZXR1cm5zIHtSZWFjdFdyYXBwZXJ9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3NpbXVsYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gc2ltdWxhdGUoZXZlbnQpIHtcbiAgICAgICAgdmFyIF90aGlzMTUgPSB0aGlzO1xuXG4gICAgICAgIHZhciBtb2NrID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcblxuICAgICAgICByZXR1cm4gdGhpcy5zaW5nbGUoJ3NpbXVsYXRlJywgZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgICBfdGhpczE1W1JFTkRFUkVSXS5zaW11bGF0ZUV2ZW50KG4sIGV2ZW50LCBtb2NrKTtcbiAgICAgICAgICBfdGhpczE1W1JPT1RdLnVwZGF0ZSgpO1xuICAgICAgICAgIHJldHVybiBfdGhpczE1O1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNpbXVsYXRlO1xuICAgIH0oKVxuXG4gICAgLyoqXG4gICAgICogVXNlZCB0byBzaW11bGF0ZSB0aHJvd2luZyBhIHJlbmRlcmluZyBlcnJvci4gUGFzcyBhbiBlcnJvciB0byB0aHJvdy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBlcnJvclxuICAgICAqIEByZXR1cm5zIHtSZWFjdFdyYXBwZXJ9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3NpbXVsYXRlRXJyb3InLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBzaW11bGF0ZUVycm9yKGVycm9yKSB7XG4gICAgICAgIHZhciBfdGhpczE2ID0gdGhpcztcblxuICAgICAgICBpZiAodGhpc1tST09UXSA9PT0gdGhpcykge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVhY3RXcmFwcGVyOjpzaW11bGF0ZUVycm9yKCkgbWF5IG5vdCBiZSBjYWxsZWQgb24gdGhlIHJvb3QnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLnNpbmdsZSgnc2ltdWxhdGVFcnJvcicsIGZ1bmN0aW9uICh0aGlzTm9kZSkge1xuICAgICAgICAgIGlmICh0aGlzTm9kZS5ub2RlVHlwZSA9PT0gJ2hvc3QnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlYWN0V3JhcHBlcjo6c2ltdWxhdGVFcnJvcigpIGNhbiBvbmx5IGJlIGNhbGxlZCBvbiBjdXN0b20gY29tcG9uZW50cycpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciByZW5kZXJlciA9IF90aGlzMTZbUkVOREVSRVJdO1xuICAgICAgICAgIGlmICh0eXBlb2YgcmVuZGVyZXIuc2ltdWxhdGVFcnJvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigneW91ciBhZGFwdGVyIGRvZXMgbm90IHN1cHBvcnQgYHNpbXVsYXRlRXJyb3JgLiBUcnkgdXBncmFkaW5nIGl0IScpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciByb290Tm9kZSA9IGdldFJvb3ROb2RlSW50ZXJuYWwoX3RoaXMxNik7XG4gICAgICAgICAgdmFyIG5vZGVIaWVyYXJjaHkgPSBbdGhpc05vZGVdLmNvbmNhdChub2RlUGFyZW50cyhfdGhpczE2LCB0aGlzTm9kZSkpO1xuICAgICAgICAgIHJlbmRlcmVyLnNpbXVsYXRlRXJyb3Iobm9kZUhpZXJhcmNoeSwgcm9vdE5vZGUsIGVycm9yKTtcblxuICAgICAgICAgIF90aGlzMTZbUk9PVF0udXBkYXRlKCk7XG4gICAgICAgICAgcmV0dXJuIF90aGlzMTY7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc2ltdWxhdGVFcnJvcjtcbiAgICB9KClcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHByb3BzIGhhc2ggZm9yIHRoZSByb290IG5vZGUgb2YgdGhlIHdyYXBwZXIuXG4gICAgICpcbiAgICAgKiBOT1RFOiBjYW4gb25seSBiZSBjYWxsZWQgb24gYSB3cmFwcGVyIG9mIGEgc2luZ2xlIG5vZGUuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdwcm9wcycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIHByb3BzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zaW5nbGUoJ3Byb3BzJywgX1JTVFRyYXZlcnNhbC5wcm9wc09mTm9kZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcm9wcztcbiAgICB9KClcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHN0YXRlIGhhc2ggZm9yIHRoZSByb290IG5vZGUgb2YgdGhlIHdyYXBwZXIuIE9wdGlvbmFsbHkgcGFzcyBpbiBhIHByb3AgbmFtZSBhbmQgaXRcbiAgICAgKiB3aWxsIHJldHVybiBqdXN0IHRoYXQgdmFsdWUuXG4gICAgICpcbiAgICAgKiBOT1RFOiBjYW4gb25seSBiZSBjYWxsZWQgb24gYSB3cmFwcGVyIG9mIGEgc2luZ2xlIG5vZGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gbmFtZSAob3B0aW9uYWwpXG4gICAgICogQHJldHVybnMgeyp9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3N0YXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gc3RhdGUobmFtZSkge1xuICAgICAgICB2YXIgX3RoaXMxNyA9IHRoaXM7XG5cbiAgICAgICAgdmFyIHRoaXNOb2RlID0gdGhpc1tST09UXSA9PT0gdGhpcyA/IHRoaXNbUkVOREVSRVJdLmdldE5vZGUoKSA6IHRoaXMuZ2V0Tm9kZUludGVybmFsKCk7XG4gICAgICAgIGlmICh0aGlzLmluc3RhbmNlKCkgPT09IG51bGwgfHwgdGhpc05vZGUubm9kZVR5cGUgIT09ICdjbGFzcycpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlYWN0V3JhcHBlcjo6c3RhdGUoKSBjYW4gb25seSBiZSBjYWxsZWQgb24gY2xhc3MgY29tcG9uZW50cycpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBfc3RhdGUgPSB0aGlzLnNpbmdsZSgnc3RhdGUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzMTcuaW5zdGFuY2UoKS5zdGF0ZTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICh0eXBlb2YgbmFtZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBpZiAoX3N0YXRlID09IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1JlYWN0V3JhcHBlcjo6c3RhdGUoXCInICsgU3RyaW5nKG5hbWUpICsgJ1wiKSByZXF1aXJlcyB0aGF0IGBzdGF0ZWAgbm90IGJlIGBudWxsYCBvciBgdW5kZWZpbmVkYCcpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gX3N0YXRlW25hbWVdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfc3RhdGU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgICB9KClcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGNvbnRleHQgaGFzaCBmb3IgdGhlIHJvb3Qgbm9kZSBvZiB0aGUgd3JhcHBlci5cbiAgICAgKiBPcHRpb25hbGx5IHBhc3MgaW4gYSBwcm9wIG5hbWUgYW5kIGl0IHdpbGwgcmV0dXJuIGp1c3QgdGhhdCB2YWx1ZS5cbiAgICAgKlxuICAgICAqIE5PVEU6IGNhbiBvbmx5IGJlIGNhbGxlZCBvbiBhIHdyYXBwZXIgb2YgYSBzaW5nbGUgbm9kZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIChvcHRpb25hbClcbiAgICAgKiBAcmV0dXJucyB7Kn1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnY29udGV4dCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIGNvbnRleHQobmFtZSkge1xuICAgICAgICB2YXIgX3RoaXMxOCA9IHRoaXM7XG5cbiAgICAgICAgaWYgKHRoaXNbUk9PVF0gIT09IHRoaXMpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlYWN0V3JhcHBlcjo6Y29udGV4dCgpIGNhbiBvbmx5IGJlIGNhbGxlZCBvbiB0aGUgcm9vdCcpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBpbnN0YW5jZSA9IHRoaXMuc2luZ2xlKCdjb250ZXh0JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBfdGhpczE4Lmluc3RhbmNlKCk7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoaW5zdGFuY2UgPT09IG51bGwpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlYWN0V3JhcHBlcjo6Y29udGV4dCgpIGNhbiBvbmx5IGJlIGNhbGxlZCBvbiBjb21wb25lbnRzIHdpdGggaW5zdGFuY2VzJyk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIF9jb250ZXh0ID0gaW5zdGFuY2UuY29udGV4dDtcbiAgICAgICAgaWYgKHR5cGVvZiBuYW1lICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHJldHVybiBfY29udGV4dFtuYW1lXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gX2NvbnRleHQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb250ZXh0O1xuICAgIH0oKVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIG5ldyB3cmFwcGVyIHdpdGggYWxsIG9mIHRoZSBjaGlsZHJlbiBvZiB0aGUgY3VycmVudCB3cmFwcGVyLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtFbnp5bWVTZWxlY3Rvcn0gW3NlbGVjdG9yXVxuICAgICAqIEByZXR1cm5zIHtSZWFjdFdyYXBwZXJ9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2NoaWxkcmVuJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gY2hpbGRyZW4oc2VsZWN0b3IpIHtcbiAgICAgICAgdmFyIGFsbENoaWxkcmVuID0gdGhpcy5mbGF0TWFwKGZ1bmN0aW9uIChuKSB7XG4gICAgICAgICAgcmV0dXJuICgwLCBfUlNUVHJhdmVyc2FsLmNoaWxkcmVuT2ZOb2RlKShuLmdldE5vZGVJbnRlcm5hbCgpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBzZWxlY3RvciA/IGFsbENoaWxkcmVuLmZpbHRlcihzZWxlY3RvcikgOiBhbGxDaGlsZHJlbjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNoaWxkcmVuO1xuICAgIH0oKVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIG5ldyB3cmFwcGVyIHdpdGggYSBzcGVjaWZpYyBjaGlsZFxuICAgICAqXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtpbmRleF1cbiAgICAgKiBAcmV0dXJucyB7UmVhY3RXcmFwcGVyfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdjaGlsZEF0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gY2hpbGRBdChpbmRleCkge1xuICAgICAgICB2YXIgX3RoaXMxOSA9IHRoaXM7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuc2luZ2xlKCdjaGlsZEF0JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBfdGhpczE5LmNoaWxkcmVuKCkuYXQoaW5kZXgpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNoaWxkQXQ7XG4gICAgfSgpXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgd3JhcHBlciBhcm91bmQgYWxsIG9mIHRoZSBwYXJlbnRzL2FuY2VzdG9ycyBvZiB0aGUgd3JhcHBlci4gRG9lcyBub3QgaW5jbHVkZSB0aGUgbm9kZVxuICAgICAqIGluIHRoZSBjdXJyZW50IHdyYXBwZXIuXG4gICAgICpcbiAgICAgKiBOT1RFOiBjYW4gb25seSBiZSBjYWxsZWQgb24gYSB3cmFwcGVyIG9mIGEgc2luZ2xlIG5vZGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0VuenltZVNlbGVjdG9yfSBbc2VsZWN0b3JdXG4gICAgICogQHJldHVybnMge1JlYWN0V3JhcHBlcn1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAncGFyZW50cycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIHBhcmVudHMoc2VsZWN0b3IpIHtcbiAgICAgICAgdmFyIF90aGlzMjAgPSB0aGlzO1xuXG4gICAgICAgIHJldHVybiB0aGlzLnNpbmdsZSgncGFyZW50cycsIGZ1bmN0aW9uIChuKSB7XG4gICAgICAgICAgdmFyIGFsbFBhcmVudHMgPSBfdGhpczIwLndyYXAobm9kZVBhcmVudHMoX3RoaXMyMCwgbikpO1xuICAgICAgICAgIHJldHVybiBzZWxlY3RvciA/IGFsbFBhcmVudHMuZmlsdGVyKHNlbGVjdG9yKSA6IGFsbFBhcmVudHM7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcGFyZW50cztcbiAgICB9KClcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSB3cmFwcGVyIGFyb3VuZCB0aGUgaW1tZWRpYXRlIHBhcmVudCBvZiB0aGUgY3VycmVudCBub2RlLlxuICAgICAqXG4gICAgICogQHJldHVybnMge1JlYWN0V3JhcHBlcn1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAncGFyZW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gcGFyZW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5mbGF0TWFwKGZ1bmN0aW9uIChuKSB7XG4gICAgICAgICAgcmV0dXJuIFtuLnBhcmVudHMoKS5nZXQoMCldO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHBhcmVudDtcbiAgICB9KClcblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIHtFbnp5bWVTZWxlY3Rvcn0gc2VsZWN0b3JcbiAgICAgKiBAcmV0dXJucyB7UmVhY3RXcmFwcGVyfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdjbG9zZXN0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gY2xvc2VzdChzZWxlY3Rvcikge1xuICAgICAgICBpZiAodGhpcy5pcyhzZWxlY3RvcikpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICB2YXIgbWF0Y2hpbmdBbmNlc3RvcnMgPSB0aGlzLnBhcmVudHMoKS5maWx0ZXIoc2VsZWN0b3IpO1xuICAgICAgICByZXR1cm4gbWF0Y2hpbmdBbmNlc3RvcnMubGVuZ3RoID4gMCA/IG1hdGNoaW5nQW5jZXN0b3JzLmZpcnN0KCkgOiB0aGlzLmZpbmRXaGVyZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNsb3Nlc3Q7XG4gICAgfSgpXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSB2YWx1ZSBvZiAgcHJvcCB3aXRoIHRoZSBnaXZlbiBuYW1lIG9mIHRoZSByb290IG5vZGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcE5hbWVcbiAgICAgKiBAcmV0dXJucyB7Kn1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAncHJvcCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIHByb3AocHJvcE5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMoKVtwcm9wTmFtZV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcm9wO1xuICAgIH0oKVxuXG4gICAgLyoqXG4gICAgICogVXNlZCB0byBpbnZva2UgYSBmdW5jdGlvbiBwcm9wLlxuICAgICAqIFdpbGwgaW52b2tlIGFuIGZ1bmN0aW9uIHByb3AgYW5kIHJldHVybiBpdHMgdmFsdWUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcE5hbWVcbiAgICAgKiBAcmV0dXJucyB7QW55fVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdpbnZva2UnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBpbnZva2UocHJvcE5hbWUpIHtcbiAgICAgICAgdmFyIF90aGlzMjEgPSB0aGlzO1xuXG4gICAgICAgIHJldHVybiB0aGlzLnNpbmdsZSgnaW52b2tlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBoYW5kbGVyID0gX3RoaXMyMS5wcm9wKHByb3BOYW1lKTtcbiAgICAgICAgICBpZiAodHlwZW9mIGhhbmRsZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1JlYWN0V3JhcHBlcjo6aW52b2tlKCkgcmVxdWlyZXMgdGhlIG5hbWUgb2YgYSBwcm9wIHdob3NlIHZhbHVlIGlzIGEgZnVuY3Rpb24nKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciByZXNwb25zZSA9IHR5cGVvZiBfdGhpczIxW1JFTkRFUkVSXS53cmFwSW52b2tlID09PSAnZnVuY3Rpb24nID8gX3RoaXMyMVtSRU5ERVJFUl0ud3JhcEludm9rZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGVyLmFwcGx5KHVuZGVmaW5lZCwgYXJncyk7XG4gICAgICAgICAgICB9KSA6IGhhbmRsZXIuYXBwbHkodW5kZWZpbmVkLCBhcmdzKTtcbiAgICAgICAgICAgIF90aGlzMjFbUk9PVF0udXBkYXRlKCk7XG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBpbnZva2U7XG4gICAgfSgpXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgd3JhcHBlciBvZiB0aGUgbm9kZSByZW5kZXJlZCBieSB0aGUgcHJvdmlkZWQgcmVuZGVyIHByb3AuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcE5hbWVcbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlclByb3AnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiByZW5kZXJQcm9wKHByb3BOYW1lKSB7XG4gICAgICAgIHZhciBfdGhpczIyID0gdGhpcztcblxuICAgICAgICB2YXIgYWRhcHRlciA9ICgwLCBfZ2V0QWRhcHRlcjJbJ2RlZmF1bHQnXSkodGhpc1tPUFRJT05TXSk7XG4gICAgICAgIGlmICh0eXBlb2YgYWRhcHRlci53cmFwICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3lvdXIgYWRhcHRlciBkb2VzIG5vdCBzdXBwb3J0IGB3cmFwYC4gVHJ5IHVwZ3JhZGluZyBpdCEnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLnNpbmdsZSgncmVuZGVyUHJvcCcsIGZ1bmN0aW9uIChuKSB7XG4gICAgICAgICAgaWYgKG4ubm9kZVR5cGUgPT09ICdob3N0Jykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUmVhY3RXcmFwcGVyOjpyZW5kZXJQcm9wKCkgY2FuIG9ubHkgYmUgY2FsbGVkIG9uIGN1c3RvbSBjb21wb25lbnRzJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0eXBlb2YgcHJvcE5hbWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdSZWFjdFdyYXBwZXI6OnJlbmRlclByb3AoKTogYHByb3BOYW1lYCBtdXN0IGJlIGEgc3RyaW5nJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBwcm9wcyA9IF90aGlzMjIucHJvcHMoKTtcbiAgICAgICAgICBpZiAoISgwLCBfaGFzMlsnZGVmYXVsdCddKShwcm9wcywgcHJvcE5hbWUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlYWN0V3JhcHBlcjo6cmVuZGVyUHJvcCgpOiBubyBwcm9wIGNhbGxlZCBcXHUyMDFDJyArIFN0cmluZyhwcm9wTmFtZSkgKyAnXFx1MjAxQyBmb3VuZCcpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgICAgICAgIGlmICh0eXBlb2YgcHJvcFZhbHVlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdSZWFjdFdyYXBwZXI6OnJlbmRlclByb3AoKTogZXhwZWN0ZWQgcHJvcCBcXHUyMDFDJyArIFN0cmluZyhwcm9wTmFtZSkgKyAnXFx1MjAxQyB0byBjb250YWluIGEgZnVuY3Rpb24sIGJ1dCBpdCBob2xkcyBcXHUyMDFDJyArICh0eXBlb2YgcHJvcFZhbHVlID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihwcm9wVmFsdWUpKSArICdcXHUyMDFDJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBlbGVtZW50ID0gcHJvcFZhbHVlLmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIHZhciB3cmFwcGVkID0gYWRhcHRlci53cmFwKGVsZW1lbnQpO1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzMjIud3JhcCh3cmFwcGVkLCBudWxsLCBfdGhpczIyW09QVElPTlNdKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlbmRlclByb3A7XG4gICAgfSgpXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBrZXkgYXNzaWduZWQgdG8gdGhlIGN1cnJlbnQgbm9kZS5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtTdHJpbmd9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2tleScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIGtleSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2luZ2xlKCdrZXknLCBmdW5jdGlvbiAobikge1xuICAgICAgICAgIHJldHVybiBuLmtleSA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IG4ua2V5O1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGtleTtcbiAgICB9KClcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHR5cGUgb2YgdGhlIHJvb3Qgbm9kZSBvZiB0aGlzIHdyYXBwZXIuIElmIGl0J3MgYSBjb21wb3NpdGUgY29tcG9uZW50LCB0aGlzIHdpbGwgYmVcbiAgICAgKiB0aGUgY29tcG9uZW50IGNvbnN0cnVjdG9yLiBJZiBpdCdzIG5hdGl2ZSBET00gbm9kZSwgaXQgd2lsbCBiZSBhIHN0cmluZy5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtTdHJpbmd8RnVuY3Rpb259XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3R5cGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiB0eXBlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zaW5nbGUoJ3R5cGUnLCBmdW5jdGlvbiAobikge1xuICAgICAgICAgIHJldHVybiAoMCwgX1V0aWxzLnR5cGVPZk5vZGUpKG4pO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHR5cGU7XG4gICAgfSgpXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBuYW1lIG9mIHRoZSByb290IG5vZGUgb2YgdGhpcyB3cmFwcGVyLlxuICAgICAqXG4gICAgICogSW4gb3JkZXIgb2YgcHJlY2VkZW5jZSA9PiB0eXBlLmRpc3BsYXlOYW1lIC0+IHR5cGUubmFtZSAtPiB0eXBlLlxuICAgICAqXG4gICAgICogQHJldHVybnMge1N0cmluZ31cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnbmFtZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIG5hbWUoKSB7XG4gICAgICAgIHZhciBhZGFwdGVyID0gKDAsIF9nZXRBZGFwdGVyMlsnZGVmYXVsdCddKSh0aGlzW09QVElPTlNdKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2luZ2xlKCduYW1lJywgZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgICByZXR1cm4gYWRhcHRlci5kaXNwbGF5TmFtZU9mTm9kZSA/IGFkYXB0ZXIuZGlzcGxheU5hbWVPZk5vZGUobikgOiAoMCwgX1V0aWxzLmRpc3BsYXlOYW1lT2ZOb2RlKShuKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuYW1lO1xuICAgIH0oKVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB3aGV0aGVyIG9yIG5vdCB0aGUgY3VycmVudCByb290IG5vZGUgaGFzIHRoZSBnaXZlbiBjbGFzcyBuYW1lIG9yIG5vdC5cbiAgICAgKlxuICAgICAqIE5PVEU6IGNhbiBvbmx5IGJlIGNhbGxlZCBvbiBhIHdyYXBwZXIgb2YgYSBzaW5nbGUgbm9kZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBjbGFzc05hbWVcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnaGFzQ2xhc3MnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBoYXNDbGFzcyhjbGFzc05hbWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGFzc05hbWUgPT09ICdzdHJpbmcnICYmIGNsYXNzTmFtZS5pbmRleE9mKCcuJykgIT09IC0xKSB7XG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgICBjb25zb2xlLndhcm4oJ0l0IGxvb2tzIGxpa2UgeW91XFwncmUgY2FsbGluZyBgUmVhY3RXcmFwcGVyOjpoYXNDbGFzcygpYCB3aXRoIGEgQ1NTIHNlbGVjdG9yLiBoYXNDbGFzcygpIGV4cGVjdHMgYSBjbGFzcyBuYW1lLCBub3QgYSBDU1Mgc2VsZWN0b3IuJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuc2luZ2xlKCdoYXNDbGFzcycsIGZ1bmN0aW9uIChuKSB7XG4gICAgICAgICAgcmV0dXJuICgwLCBfUlNUVHJhdmVyc2FsLmhhc0NsYXNzTmFtZSkobiwgY2xhc3NOYW1lKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBoYXNDbGFzcztcbiAgICB9KClcblxuICAgIC8qKlxuICAgICAqIEl0ZXJhdGVzIHRocm91Z2ggZWFjaCBub2RlIG9mIHRoZSBjdXJyZW50IHdyYXBwZXIgYW5kIGV4ZWN1dGVzIHRoZSBwcm92aWRlZCBmdW5jdGlvbiB3aXRoIGFcbiAgICAgKiB3cmFwcGVyIGFyb3VuZCB0aGUgY29ycmVzcG9uZGluZyBub2RlIHBhc3NlZCBpbiBhcyB0aGUgZmlyc3QgYXJndW1lbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICAgICAqIEByZXR1cm5zIHtSZWFjdFdyYXBwZXJ9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2ZvckVhY2gnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBmb3JFYWNoKGZuKSB7XG4gICAgICAgIHZhciBfdGhpczIzID0gdGhpcztcblxuICAgICAgICB0aGlzLmdldE5vZGVzSW50ZXJuYWwoKS5mb3JFYWNoKGZ1bmN0aW9uIChuLCBpKSB7XG4gICAgICAgICAgcmV0dXJuIGZuLmNhbGwoX3RoaXMyMywgX3RoaXMyMy53cmFwKG4pLCBpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZm9yRWFjaDtcbiAgICB9KClcblxuICAgIC8qKlxuICAgICAqIE1hcHMgdGhlIGN1cnJlbnQgYXJyYXkgb2Ygbm9kZXMgdG8gYW5vdGhlciBhcnJheS4gRWFjaCBub2RlIGlzIHBhc3NlZCBpbiBhcyBhIGBSZWFjdFdyYXBwZXJgXG4gICAgICogdG8gdGhlIG1hcCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gICAgICogQHJldHVybnMge0FycmF5fVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdtYXAnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBtYXAoZm4pIHtcbiAgICAgICAgdmFyIF90aGlzMjQgPSB0aGlzO1xuXG4gICAgICAgIHJldHVybiB0aGlzLmdldE5vZGVzSW50ZXJuYWwoKS5tYXAoZnVuY3Rpb24gKG4sIGkpIHtcbiAgICAgICAgICByZXR1cm4gZm4uY2FsbChfdGhpczI0LCBfdGhpczI0LndyYXAobiksIGkpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG1hcDtcbiAgICB9KClcblxuICAgIC8qKlxuICAgICAqIFJlZHVjZXMgdGhlIGN1cnJlbnQgYXJyYXkgb2Ygbm9kZXMgdG8gYW5vdGhlciBhcnJheS5cbiAgICAgKiBFYWNoIG5vZGUgaXMgcGFzc2VkIGluIGFzIGEgYFNoYWxsb3dXcmFwcGVyYCB0byB0aGUgcmVkdWNlciBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIC0gdGhlIHJlZHVjZXIgZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0geyp9IGluaXRpYWxWYWx1ZSAtIHRoZSBpbml0aWFsIHZhbHVlXG4gICAgICogQHJldHVybnMgeyp9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3JlZHVjZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIHJlZHVjZShmbikge1xuICAgICAgICB2YXIgX3RoaXMyNSA9IHRoaXM7XG5cbiAgICAgICAgdmFyIGluaXRpYWxWYWx1ZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICAgIHJldHVybiB0aGlzLmdldE5vZGVzSW50ZXJuYWwoKS5yZWR1Y2UoZnVuY3Rpb24gKGFjY3VtLCBuLCBpKSB7XG4gICAgICAgICAgICByZXR1cm4gZm4uY2FsbChfdGhpczI1LCBhY2N1bSwgX3RoaXMyNS53cmFwKG4pLCBpKTtcbiAgICAgICAgICB9LCBpbml0aWFsVmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmdldE5vZGVzSW50ZXJuYWwoKS5yZWR1Y2UoZnVuY3Rpb24gKGFjY3VtLCBuLCBpKSB7XG4gICAgICAgICAgcmV0dXJuIGZuLmNhbGwoX3RoaXMyNSwgaSA9PT0gMSA/IF90aGlzMjUud3JhcChhY2N1bSkgOiBhY2N1bSwgX3RoaXMyNS53cmFwKG4pLCBpKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZWR1Y2U7XG4gICAgfSgpXG5cbiAgICAvKipcbiAgICAgKiBSZWR1Y2VzIHRoZSBjdXJyZW50IGFycmF5IG9mIG5vZGVzIHRvIGFub3RoZXIgYXJyYXksIGZyb20gcmlnaHQgdG8gbGVmdC4gRWFjaCBub2RlIGlzIHBhc3NlZFxuICAgICAqIGluIGFzIGEgYFNoYWxsb3dXcmFwcGVyYCB0byB0aGUgcmVkdWNlciBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIC0gdGhlIHJlZHVjZXIgZnVuY3Rpb25cbiAgICAgKiBAcGFyYW0geyp9IGluaXRpYWxWYWx1ZSAtIHRoZSBpbml0aWFsIHZhbHVlXG4gICAgICogQHJldHVybnMgeyp9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3JlZHVjZVJpZ2h0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gcmVkdWNlUmlnaHQoZm4pIHtcbiAgICAgICAgdmFyIF90aGlzMjYgPSB0aGlzO1xuXG4gICAgICAgIHZhciBpbml0aWFsVmFsdWUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcblxuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5nZXROb2Rlc0ludGVybmFsKCkucmVkdWNlUmlnaHQoZnVuY3Rpb24gKGFjY3VtLCBuLCBpKSB7XG4gICAgICAgICAgICByZXR1cm4gZm4uY2FsbChfdGhpczI2LCBhY2N1bSwgX3RoaXMyNi53cmFwKG4pLCBpKTtcbiAgICAgICAgICB9LCBpbml0aWFsVmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmdldE5vZGVzSW50ZXJuYWwoKS5yZWR1Y2VSaWdodChmdW5jdGlvbiAoYWNjdW0sIG4sIGkpIHtcbiAgICAgICAgICByZXR1cm4gZm4uY2FsbChfdGhpczI2LCBpID09PSAxID8gX3RoaXMyNi53cmFwKGFjY3VtKSA6IGFjY3VtLCBfdGhpczI2LndyYXAobiksIGkpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlZHVjZVJpZ2h0O1xuICAgIH0oKVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIG5ldyB3cmFwcGVyIHdpdGggYSBzdWJzZXQgb2YgdGhlIG5vZGVzIG9mIHRoZSBvcmlnaW5hbCB3cmFwcGVyLCBhY2NvcmRpbmcgdG8gdGhlXG4gICAgICogcnVsZXMgb2YgYEFycmF5I3NsaWNlYC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBiZWdpblxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBlbmRcbiAgICAgKiBAcmV0dXJucyB7U2hhbGxvd1dyYXBwZXJ9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3NsaWNlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gc2xpY2UoYmVnaW4sIGVuZCkge1xuICAgICAgICByZXR1cm4gdGhpcy53cmFwKHRoaXMuZ2V0Tm9kZXNJbnRlcm5hbCgpLnNsaWNlKGJlZ2luLCBlbmQpKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNsaWNlO1xuICAgIH0oKVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB3aGV0aGVyIG9yIG5vdCBhbnkgb2YgdGhlIG5vZGVzIGluIHRoZSB3cmFwcGVyIG1hdGNoIHRoZSBwcm92aWRlZCBzZWxlY3Rvci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7RW56eW1lU2VsZWN0b3J9IHNlbGVjdG9yXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3NvbWUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBzb21lKHNlbGVjdG9yKSB7XG4gICAgICAgIGlmICh0aGlzW1JPT1RdID09PSB0aGlzKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZWFjdFdyYXBwZXI6OnNvbWUoKSBjYW4gbm90IGJlIGNhbGxlZCBvbiB0aGUgcm9vdCcpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwcmVkaWNhdGUgPSAoMCwgX3NlbGVjdG9ycy5idWlsZFByZWRpY2F0ZSkoc2VsZWN0b3IpO1xuICAgICAgICByZXR1cm4gdGhpcy5nZXROb2Rlc0ludGVybmFsKCkuc29tZShwcmVkaWNhdGUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc29tZTtcbiAgICB9KClcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgd2hldGhlciBvciBub3QgYW55IG9mIHRoZSBub2RlcyBpbiB0aGUgd3JhcHBlciBwYXNzIHRoZSBwcm92aWRlZCBwcmVkaWNhdGUgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGVcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnc29tZVdoZXJlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gc29tZVdoZXJlKHByZWRpY2F0ZSkge1xuICAgICAgICB2YXIgX3RoaXMyNyA9IHRoaXM7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Tm9kZXNJbnRlcm5hbCgpLnNvbWUoZnVuY3Rpb24gKG4sIGkpIHtcbiAgICAgICAgICByZXR1cm4gcHJlZGljYXRlLmNhbGwoX3RoaXMyNywgX3RoaXMyNy53cmFwKG4pLCBpKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzb21lV2hlcmU7XG4gICAgfSgpXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IGFsbCBvZiB0aGUgbm9kZXMgaW4gdGhlIHdyYXBwZXIgbWF0Y2ggdGhlIHByb3ZpZGVkIHNlbGVjdG9yLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtFbnp5bWVTZWxlY3Rvcn0gc2VsZWN0b3JcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZXZlcnknLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBldmVyeShzZWxlY3Rvcikge1xuICAgICAgICB2YXIgcHJlZGljYXRlID0gKDAsIF9zZWxlY3RvcnMuYnVpbGRQcmVkaWNhdGUpKHNlbGVjdG9yKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Tm9kZXNJbnRlcm5hbCgpLmV2ZXJ5KHByZWRpY2F0ZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBldmVyeTtcbiAgICB9KClcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgd2hldGhlciBvciBub3QgYW55IG9mIHRoZSBub2RlcyBpbiB0aGUgd3JhcHBlciBwYXNzIHRoZSBwcm92aWRlZCBwcmVkaWNhdGUgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGVcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZXZlcnlXaGVyZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIGV2ZXJ5V2hlcmUocHJlZGljYXRlKSB7XG4gICAgICAgIHZhciBfdGhpczI4ID0gdGhpcztcblxuICAgICAgICByZXR1cm4gdGhpcy5nZXROb2Rlc0ludGVybmFsKCkuZXZlcnkoZnVuY3Rpb24gKG4sIGkpIHtcbiAgICAgICAgICByZXR1cm4gcHJlZGljYXRlLmNhbGwoX3RoaXMyOCwgX3RoaXMyOC53cmFwKG4pLCBpKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBldmVyeVdoZXJlO1xuICAgIH0oKVxuXG4gICAgLyoqXG4gICAgICogVXRpbGl0eSBtZXRob2QgdXNlZCB0byBjcmVhdGUgbmV3IHdyYXBwZXJzIHdpdGggYSBtYXBwaW5nIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhbiBhcnJheSBvZlxuICAgICAqIG5vZGVzIGluIHJlc3BvbnNlIHRvIGEgc2luZ2xlIG5vZGUgd3JhcHBlci4gVGhlIHJldHVybmVkIHdyYXBwZXIgaXMgYSBzaW5nbGUgd3JhcHBlciBhcm91bmRcbiAgICAgKiBhbGwgb2YgdGhlIG1hcHBlZCBub2RlcyBmbGF0dGVuZWQgKGFuZCBkZS1kdXBsaWNhdGVkKS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gICAgICogQHJldHVybnMge1JlYWN0V3JhcHBlcn1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZmxhdE1hcCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIGZsYXRNYXAoZm4pIHtcbiAgICAgICAgdmFyIF90aGlzMjkgPSB0aGlzO1xuXG4gICAgICAgIHZhciBub2RlcyA9IHRoaXMuZ2V0Tm9kZXNJbnRlcm5hbCgpLm1hcChmdW5jdGlvbiAobiwgaSkge1xuICAgICAgICAgIHJldHVybiBmbi5jYWxsKF90aGlzMjksIF90aGlzMjkud3JhcChuKSwgaSk7XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgZmxhdHRlbmVkID0gKDAsIF9hcnJheVByb3RvdHlwZTJbJ2RlZmF1bHQnXSkobm9kZXMsIDEpO1xuICAgICAgICByZXR1cm4gdGhpcy53cmFwKGZsYXR0ZW5lZC5maWx0ZXIoQm9vbGVhbikpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZmxhdE1hcDtcbiAgICB9KClcblxuICAgIC8qKlxuICAgICAqIEZpbmRzIGFsbCBub2RlcyBpbiB0aGUgY3VycmVudCB3cmFwcGVyIG5vZGVzJyByZW5kZXIgdHJlZXMgdGhhdCBtYXRjaCB0aGUgcHJvdmlkZWQgcHJlZGljYXRlXG4gICAgICogZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGVcbiAgICAgKiBAcmV0dXJucyB7UmVhY3RXcmFwcGVyfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdmaW5kV2hlcmUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBmaW5kV2hlcmUocHJlZGljYXRlKSB7XG4gICAgICAgIHZhciBfdGhpczMwID0gdGhpcztcblxuICAgICAgICByZXR1cm4gZmluZFdoZXJlVW53cmFwcGVkKHRoaXMsIGZ1bmN0aW9uIChuKSB7XG4gICAgICAgICAgdmFyIG5vZGUgPSBfdGhpczMwLndyYXAobik7XG4gICAgICAgICAgcmV0dXJuIG5vZGUubGVuZ3RoID4gMCAmJiBwcmVkaWNhdGUobm9kZSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZmluZFdoZXJlO1xuICAgIH0oKVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbm9kZSBhdCBhIGdpdmVuIGluZGV4IG9mIHRoZSBjdXJyZW50IHdyYXBwZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gaW5kZXhcbiAgICAgKiBAcmV0dXJucyB7UmVhY3RFbGVtZW50fVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdnZXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBnZXQoaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RWxlbWVudHMoKVtpbmRleF07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBnZXQ7XG4gICAgfSgpXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgd3JhcHBlciBhcm91bmQgdGhlIG5vZGUgYXQgYSBnaXZlbiBpbmRleCBvZiB0aGUgY3VycmVudCB3cmFwcGVyLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGluZGV4XG4gICAgICogQHJldHVybnMge1JlYWN0V3JhcHBlcn1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnYXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBhdChpbmRleCkge1xuICAgICAgICB2YXIgbm9kZXMgPSB0aGlzLmdldE5vZGVzSW50ZXJuYWwoKTtcbiAgICAgICAgaWYgKGluZGV4IDwgbm9kZXMubGVuZ3RoKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMud3JhcChub2Rlc1tpbmRleF0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLndyYXAoW10pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYXQ7XG4gICAgfSgpXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgd3JhcHBlciBhcm91bmQgdGhlIGZpcnN0IG5vZGUgb2YgdGhlIGN1cnJlbnQgd3JhcHBlci5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtSZWFjdFdyYXBwZXJ9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2ZpcnN0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gZmlyc3QoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmF0KDApO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZmlyc3Q7XG4gICAgfSgpXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgd3JhcHBlciBhcm91bmQgdGhlIGxhc3Qgbm9kZSBvZiB0aGUgY3VycmVudCB3cmFwcGVyLlxuICAgICAqXG4gICAgICogQHJldHVybnMge1JlYWN0V3JhcHBlcn1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnbGFzdCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIGxhc3QoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmF0KHRoaXMubGVuZ3RoIC0gMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBsYXN0O1xuICAgIH0oKVxuXG4gICAgLyoqXG4gICAgICogRGVsZWdhdGVzIHRvIGV4aXN0cygpXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnaXNFbXB0eScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIGlzRW1wdHkoKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgIGNvbnNvbGUud2FybignRW56eW1lOjpEZXByZWNhdGVkIG1ldGhvZCBpc0VtcHR5KCkgY2FsbGVkLCB1c2UgZXhpc3RzKCkgaW5zdGVhZC4nKTtcbiAgICAgICAgcmV0dXJuICF0aGlzLmV4aXN0cygpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gaXNFbXB0eTtcbiAgICB9KClcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgY3VycmVudCB3cmFwcGVyIGhhcyBub2Rlcy4gRmFsc2Ugb3RoZXJ3aXNlLlxuICAgICAqIElmIGNhbGxlZCB3aXRoIGEgc2VsZWN0b3IgaXQgcmV0dXJucyBgLmZpbmQoc2VsZWN0b3IpLmV4aXN0cygpYCBpbnN0ZWFkLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtFbnp5bWVTZWxlY3Rvcn0gc2VsZWN0b3IgKG9wdGlvbmFsKVxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdleGlzdHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBleGlzdHMoKSB7XG4gICAgICAgIHZhciBzZWxlY3RvciA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogbnVsbDtcblxuICAgICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDAgPyB0aGlzLmZpbmQoc2VsZWN0b3IpLmV4aXN0cygpIDogdGhpcy5sZW5ndGggPiAwO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZXhpc3RzO1xuICAgIH0oKVxuXG4gICAgLyoqXG4gICAgICogVXRpbGl0eSBtZXRob2QgdGhhdCB0aHJvd3MgYW4gZXJyb3IgaWYgdGhlIGN1cnJlbnQgaW5zdGFuY2UgaGFzIGEgbGVuZ3RoIG90aGVyIHRoYW4gb25lLlxuICAgICAqIFRoaXMgaXMgcHJpbWFyaWx5IHVzZWQgdG8gZW5mb3JjZSB0aGF0IGNlcnRhaW4gbWV0aG9kcyBhcmUgb25seSBydW4gb24gYSB3cmFwcGVyIHdoZW4gaXQgaXNcbiAgICAgKiB3cmFwcGluZyBhIHNpbmdsZSBub2RlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAgICAgKiBAcmV0dXJucyB7Kn1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnc2luZ2xlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gc2luZ2xlKG5hbWUsIGZuKSB7XG4gICAgICAgIHZhciBmbk5hbWUgPSB0eXBlb2YgbmFtZSA9PT0gJ3N0cmluZycgPyBuYW1lIDogJ3Vua25vd24nO1xuICAgICAgICB2YXIgY2FsbGJhY2sgPSB0eXBlb2YgZm4gPT09ICdmdW5jdGlvbicgPyBmbiA6IG5hbWU7XG4gICAgICAgIGlmICh0aGlzLmxlbmd0aCAhPT0gMSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTWV0aG9kIFxcdTIwMUMnICsgZm5OYW1lICsgJ1xcdTIwMUQgaXMgbWVhbnQgdG8gYmUgcnVuIG9uIDEgbm9kZS4gJyArIFN0cmluZyh0aGlzLmxlbmd0aCkgKyAnIGZvdW5kIGluc3RlYWQuJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrLmNhbGwodGhpcywgdGhpcy5nZXROb2RlSW50ZXJuYWwoKSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzaW5nbGU7XG4gICAgfSgpXG5cbiAgICAvKipcbiAgICAgKiBIZWxwZnVsIHV0aWxpdHkgbWV0aG9kIHRvIGNyZWF0ZSBhIG5ldyB3cmFwcGVyIHdpdGggdGhlIHNhbWUgcm9vdCBhcyB0aGUgY3VycmVudCB3cmFwcGVyLCB3aXRoXG4gICAgICogYW55IG5vZGVzIHBhc3NlZCBpbiBhcyB0aGUgZmlyc3QgcGFyYW1ldGVyIGF1dG9tYXRpY2FsbHkgd3JhcHBlZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UmVhY3RXcmFwcGVyfFJlYWN0RWxlbWVudHxBcnJheTxSZWFjdEVsZW1lbnQ+fSBub2RlXG4gICAgICogQHJldHVybnMge1JlYWN0V3JhcHBlcn1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnd3JhcCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIHdyYXAobm9kZSkge1xuICAgICAgICB2YXIgcm9vdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogdGhpc1tST09UXTtcblxuICAgICAgICBpZiAobm9kZSBpbnN0YW5jZW9mIFJlYWN0V3JhcHBlcikge1xuICAgICAgICAgIHJldHVybiBub2RlO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbjIgPiAyID8gX2xlbjIgLSAyIDogMCksIF9rZXkyID0gMjsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgICAgIGFyZ3NbX2tleTIgLSAyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV3IChGdW5jdGlvbi5wcm90b3R5cGUuYmluZC5hcHBseShSZWFjdFdyYXBwZXIsIFtudWxsXS5jb25jYXQoW25vZGUsIHJvb3RdLCBhcmdzKSkpKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB3cmFwO1xuICAgIH0oKVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhbiBIVE1MLWxpa2Ugc3RyaW5nIG9mIHRoZSBzaGFsbG93IHJlbmRlciBmb3IgZGVidWdnaW5nIHB1cnBvc2VzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSAtIFByb3BlcnR5IGJhZyBvZiBhZGRpdGlvbmFsIG9wdGlvbnMuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5pZ25vcmVQcm9wc10gLSBpZiB0cnVlLCBwcm9wcyBhcmUgb21pdHRlZCBmcm9tIHRoZSBzdHJpbmcuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy52ZXJib3NlXSAtIGlmIHRydWUsIGFycmF5cyBhbmQgb2JqZWN0cyB0byBiZSB2ZXJib3NlbHkgcHJpbnRlZC5cbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdkZWJ1ZycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIGRlYnVnKCkge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG5cbiAgICAgICAgcmV0dXJuICgwLCBfRGVidWcuZGVidWdOb2RlcykodGhpcy5nZXROb2Rlc0ludGVybmFsKCksIG9wdGlvbnMpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZGVidWc7XG4gICAgfSgpXG5cbiAgICAvKipcbiAgICAgKiBJbnZva2VzIGludGVyY2VwdGVyIGFuZCByZXR1cm5zIGl0c2VsZi4gaW50ZXJjZXB0ZXIgaXMgY2FsbGVkIHdpdGggaXRzZWxmLlxuICAgICAqIFRoaXMgaXMgaGVscGZ1bCB3aGVuIGRlYnVnZ2luZyBub2RlcyBpbiBtZXRob2QgY2hhaW5zLlxuICAgICAqIEBwYXJhbSBmblxuICAgICAqIEByZXR1cm5zIHtSZWFjdFdyYXBwZXJ9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3RhcCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIHRhcChpbnRlcmNlcHRlcikge1xuICAgICAgICBpbnRlcmNlcHRlcih0aGlzKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0YXA7XG4gICAgfSgpXG5cbiAgICAvKipcbiAgICAgKiBEZXRhY2hlcyB0aGUgcmVhY3QgdHJlZSBmcm9tIHRoZSBET00uIFJ1bnMgYFJlYWN0RE9NLnVubW91bnRDb21wb25lbnRBdE5vZGUoKWAgdW5kZXIgdGhlIGhvb2QuXG4gICAgICpcbiAgICAgKiBUaGlzIG1ldGhvZCB3aWxsIG1vc3QgY29tbW9ubHkgYmUgdXNlZCBhcyBhIFwiY2xlYW51cFwiIG1ldGhvZCBpZiB5b3UgZGVjaWRlIHRvIHVzZSB0aGVcbiAgICAgKiBgYXR0YWNoVG9gIG9wdGlvbiBpbiBgbW91bnQobm9kZSwgb3B0aW9ucylgLlxuICAgICAqXG4gICAgICogVGhlIG1ldGhvZCBpcyBpbnRlbnRpb25hbGx5IG5vdCBcImZsdWVudFwiIChpbiB0aGF0IGl0IGRvZXNuJ3QgcmV0dXJuIGB0aGlzYCkgYmVjYXVzZSB5b3Ugc2hvdWxkXG4gICAgICogbm90IGJlIGRvaW5nIGFueXRoaW5nIHdpdGggdGhpcyB3cmFwcGVyIGFmdGVyIHRoaXMgbWV0aG9kIGlzIGNhbGxlZC5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZGV0YWNoJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gZGV0YWNoKCkge1xuICAgICAgICBpZiAodGhpc1tST09UXSAhPT0gdGhpcykge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVhY3RXcmFwcGVyOjpkZXRhY2goKSBjYW4gb25seSBiZSBjYWxsZWQgb24gdGhlIHJvb3QnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXNbT1BUSU9OU10uYXR0YWNoVG8pIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlYWN0V3JhcHBlcjo6ZGV0YWNoKCkgY2FuIG9ubHkgYmUgY2FsbGVkIG9uIHdoZW4gdGhlIGBhdHRhY2hUb2Agb3B0aW9uIHdhcyBwYXNzZWQgaW50byBgbW91bnQoKWAuJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpc1tSRU5ERVJFUl0udW5tb3VudCgpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZGV0YWNoO1xuICAgIH0oKVxuXG4gICAgLyoqXG4gICAgICogU3RyaXBzIG91dCBhbGwgdGhlIG5vdCBob3N0LW5vZGVzIGZyb20gdGhlIGxpc3Qgb2Ygbm9kZXNcbiAgICAgKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIHVzZWZ1bCBpZiB5b3Ugd2FudCB0byBjaGVjayBmb3IgdGhlIHByZXNlbmNlIG9mIGhvc3Qgbm9kZXNcbiAgICAgKiAoYWN0dWFsbHkgcmVuZGVyZWQgSFRNTCBlbGVtZW50cykgaWdub3JpbmcgdGhlIFJlYWN0IG5vZGVzLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdob3N0Tm9kZXMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBob3N0Tm9kZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZpbHRlcldoZXJlKGZ1bmN0aW9uIChuKSB7XG4gICAgICAgICAgcmV0dXJuIHR5cGVvZiBuLnR5cGUoKSA9PT0gJ3N0cmluZyc7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gaG9zdE5vZGVzO1xuICAgIH0oKVxuICB9XSk7XG5cbiAgcmV0dXJuIFJlYWN0V3JhcHBlcjtcbn0oKTtcblxuLyoqXG4gKiBBICpzcGVjaWFsKiBcInJvb3RcIiB3cmFwcGVyIHRoYXQgcmVwcmVzZW50cyB0aGUgY29tcG9uZW50IHBhc3NlZCBhcyBgd3JhcHBpbmdDb21wb25lbnRgLlxuICogSXQgaXMgbGlua2VkIHRvIHRoZSBwcmltYXJ5IHJvb3Qgc3VjaCB0aGF0IHVwZGF0ZXMgdG8gaXQgd2lsbCB1cGRhdGUgdGhlIHByaW1hcnksXG4gKiBhbmQgdmljZSB2ZXJzYS5cbiAqXG4gKiBAY2xhc3MgV3JhcHBpbmdDb21wb25lbnRXcmFwcGVyXG4gKi9cblxuXG52YXIgV3JhcHBpbmdDb21wb25lbnRXcmFwcGVyID0gZnVuY3Rpb24gKF9SZWFjdFdyYXBwZXIpIHtcbiAgX2luaGVyaXRzKFdyYXBwaW5nQ29tcG9uZW50V3JhcHBlciwgX1JlYWN0V3JhcHBlcik7XG5cbiAgLyogZXNsaW50LWRpc2FibGUgY2xhc3MtbWV0aG9kcy11c2UtdGhpcyAqL1xuICBmdW5jdGlvbiBXcmFwcGluZ0NvbXBvbmVudFdyYXBwZXIocm9vdCwgcmVuZGVyZXIpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgV3JhcHBpbmdDb21wb25lbnRXcmFwcGVyKTtcblxuICAgIHZhciBfdGhpczMxID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFdyYXBwaW5nQ29tcG9uZW50V3JhcHBlci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFdyYXBwaW5nQ29tcG9uZW50V3JhcHBlcikpLmNhbGwodGhpcywgcmVuZGVyZXIuZ2V0Tm9kZSgpLCByb290KSk7XG5cbiAgICAoMCwgX1V0aWxzLnByaXZhdGVTZXQpKF90aGlzMzEsIFJPT1QsIF90aGlzMzEpO1xuICAgICgwLCBfVXRpbHMucHJpdmF0ZVNldCkoX3RoaXMzMSwgUkVOREVSRVIsIHJlbmRlcmVyKTtcbiAgICBfdGhpczMxW0xJTktFRF9ST09UU10ucHVzaChyb290KTtcbiAgICByZXR1cm4gX3RoaXMzMTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhXcmFwcGluZ0NvbXBvbmVudFdyYXBwZXIsIFt7XG4gICAga2V5OiAnZ2V0V3JhcHBpbmdDb21wb25lbnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBnZXRXcmFwcGluZ0NvbXBvbmVudCgpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUmVhY3RXcmFwcGVyOjpnZXRXcmFwcGluZ0NvbXBvbmVudCgpIGNhbiBvbmx5IGJlIGNhbGxlZCBvbiB0aGUgcm9vdCcpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZ2V0V3JhcHBpbmdDb21wb25lbnQ7XG4gICAgfSgpXG4gIH1dKTtcblxuICByZXR1cm4gV3JhcHBpbmdDb21wb25lbnRXcmFwcGVyO1xufShSZWFjdFdyYXBwZXIpO1xuXG5pZiAoX1V0aWxzLklURVJBVE9SX1NZTUJPTCkge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUmVhY3RXcmFwcGVyLnByb3RvdHlwZSwgX1V0aWxzLklURVJBVE9SX1NZTUJPTCwge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gaXRlcmF0b3IoKSB7XG4gICAgICAgIHZhciBfcmVmO1xuXG4gICAgICAgIHZhciBpdGVyID0gdGhpc1tOT0RFU11bX1V0aWxzLklURVJBVE9SX1NZTUJPTF0oKTtcbiAgICAgICAgdmFyIGFkYXB0ZXIgPSAoMCwgX2dldEFkYXB0ZXIyWydkZWZhdWx0J10pKHRoaXNbT1BUSU9OU10pO1xuICAgICAgICByZXR1cm4gX3JlZiA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX3JlZiwgX1V0aWxzLklURVJBVE9SX1NZTUJPTCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9KSwgX2RlZmluZVByb3BlcnR5KF9yZWYsICduZXh0JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgICAgICB2YXIgbmV4dCA9IGl0ZXIubmV4dCgpO1xuICAgICAgICAgICAgaWYgKG5leHQuZG9uZSkge1xuICAgICAgICAgICAgICByZXR1cm4geyBkb25lOiB0cnVlIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICBkb25lOiBmYWxzZSxcbiAgICAgICAgICAgICAgdmFsdWU6IGFkYXB0ZXIubm9kZVRvRWxlbWVudChuZXh0LnZhbHVlKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfSgpKSwgX3JlZjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGl0ZXJhdG9yO1xuICAgIH0oKVxuICB9KTtcbn1cblxuZnVuY3Rpb24gcHJpdmF0ZVdhcm5pbmcocHJvcCwgZXh0cmFNZXNzYWdlKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWFjdFdyYXBwZXIucHJvdG90eXBlLCBwcm9wLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignXFxuICAgICAgICBBdHRlbXB0ZWQgdG8gYWNjZXNzIFJlYWN0V3JhcHBlcjo6JyArIFN0cmluZyhwcm9wKSArICcsIHdoaWNoIHdhcyBwcmV2aW91c2x5IGEgcHJpdmF0ZSBwcm9wZXJ0eSBvblxcbiAgICAgICAgRW56eW1lIFJlYWN0V3JhcHBlciBpbnN0YW5jZXMsIGJ1dCBpcyBubyBsb25nZXIgYW5kIHNob3VsZCBub3QgYmUgcmVsaWVkIHVwb24uXFxuICAgICAgICAnICsgU3RyaW5nKGV4dHJhTWVzc2FnZSkgKyAnXFxuICAgICAgJyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBnZXQ7XG4gICAgfSgpLFxuXG4gICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgY29uZmlndXJhYmxlOiBmYWxzZVxuICB9KTtcbn1cblxucHJpdmF0ZVdhcm5pbmcoJ25vZGUnLCAnQ29uc2lkZXIgdXNpbmcgdGhlIGdldEVsZW1lbnQoKSBtZXRob2QgaW5zdGVhZC4nKTtcbnByaXZhdGVXYXJuaW5nKCdub2RlcycsICdDb25zaWRlciB1c2luZyB0aGUgZ2V0RWxlbWVudHMoKSBtZXRob2QgaW5zdGVhZC4nKTtcbnByaXZhdGVXYXJuaW5nKCdyZW5kZXJlcicsICcnKTtcbnByaXZhdGVXYXJuaW5nKCdvcHRpb25zJywgJycpO1xucHJpdmF0ZVdhcm5pbmcoJ2NvbXBsZXhTZWxlY3RvcicsICcnKTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gUmVhY3RXcmFwcGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk0dUwzTnlZeTlTWldGamRGZHlZWEJ3WlhJdWFuTWlYU3dpYm1GdFpYTWlPbHNpVGs5RVJTSXNJazVQUkVWVElpd2lVa1ZPUkVWU1JWSWlMQ0pWVGxKRlRrUkZVa1ZFSWl3aVVrOVBWQ0lzSWs5UVZFbFBUbE1pTENKU1QwOVVYMDVQUkVWVElpd2lWMUpCVUZCSlRrZGZRMDlOVUU5T1JVNVVJaXdpVEVsT1MwVkVYMUpQVDFSVElpd2lWVkJFUVZSRlJGOUNXU0lzSW1acGJtUlhhR1Z5WlZWdWQzSmhjSEJsWkNJc0luZHlZWEJ3WlhJaUxDSndjbVZrYVdOaGRHVWlMQ0ptYVd4MFpYSWlMQ0owY21WbFJtbHNkR1Z5SWl3aVpteGhkRTFoY0NJc0ltNGlMQ0puWlhST2IyUmxTVzUwWlhKdVlXd2lMQ0ptYVd4MFpYSlhhR1Z5WlZWdWQzSmhjSEJsWkNJc0luZHlZWEFpTENKblpYUk9iMlJsYzBsdWRHVnlibUZzSWl3aVFtOXZiR1ZoYmlJc0ltZGxkRkp2YjNST2IyUmxTVzUwWlhKdVlXd2lMQ0pzWlc1bmRHZ2lMQ0pGY25KdmNpSXNJbTV2WkdWUVlYSmxiblJ6SWl3aWJtOWtaU0lzSW5CeWFYWmhkR1ZUWlhST2IyUmxjeUlzSW01dlpHVnpJaXdpUVhKeVlYa2lMQ0pwYzBGeWNtRjVJaXdpVW1WaFkzUlhjbUZ3Y0dWeUlpd2ljbTl2ZENJc0luQmhjM05sWkU5d2RHbHZibk1pTENKbmJHOWlZV3dpTENKM2FXNWtiM2NpTENKa2IyTjFiV1Z1ZENJc0ltOXdkR2x2Ym5NaUxDSmhaR0Z3ZEdWeUlpd2lhWE5XWVd4cFpFVnNaVzFsYm5RaUxDSlVlWEJsUlhKeWIzSWlMQ0p5Wlc1a1pYSmxjaUlzSW1OeVpXRjBaVkpsYm1SbGNtVnlJaXdpYlc5a1pTSXNJbkpsYm1SbGNpSXNJbU52Ym5SbGVIUWlMQ0puWlhST2IyUmxJaXdpZDNKaGNIQnBibWREYjIxd2IyNWxiblFpTENKblpYUlhjbUZ3Y0dsdVowTnZiWEJ2Ym1WdWRGSmxibVJsY21WeUlpd2lWM0poY0hCcGJtZERiMjF3YjI1bGJuUlhjbUZ3Y0dWeUlpd2ljSFZ6YUNJc0luTnBibWRzWlNJc0ltNXZaR1ZVYjBWc1pXMWxiblFpTENKdFlYQWlMQ0p1YjJSbFZHOUliM04wVG05a1pTSXNJbkpsWm01aGJXVWlMQ0pwYm5OMFlXNWpaU0lzSW5KbFpuTWlMQ0oxY0dSaGRHVWlMQ0ptYjNKRllXTm9JaXdpYkdsdWEyVmtVbTl2ZENJc0luVnViVzkxYm5RaUxDSndjbTl3Y3lJc0ltTmhiR3hpWVdOcklpd2lkVzVrWldacGJtVmtJaXdpWVhKbmRXMWxiblJ6SWl3aWMzUmhkR1VpTENKdWIyUmxWSGx3WlNJc0luTmxkRk4wWVhSbElpd2lhVzUyYjJ0bFUyVjBVM1JoZEdWRFlXeHNZbUZqYXlJc0ltTmhiR3dpTENKdWIyUmxUM0pPYjJSbGN5SXNJbTkwYUdWeUlpd2libTlrWlVWeGRXRnNJaXdpWld4bGJXVnVkRlJ2VG05a1pTSXNJbkp6ZEU1dlpHVWlMQ0poSWl3aVlpSXNJbVYyWlhKNUlpd2lZMjl1ZEdGcGJuTk5ZWFJqYUdsdVowVnNaVzFsYm5RaUxDSnpiMjFsSWl3aWMyVnNaV04wYjNJaUxDSm9kRzFzSWl3aVpYWmxiblFpTENKdGIyTnJJaXdpYzJsdGRXeGhkR1ZGZG1WdWRDSXNJbVZ5Y205eUlpd2lkR2hwYzA1dlpHVWlMQ0p6YVcxMWJHRjBaVVZ5Y205eUlpd2ljbTl2ZEU1dlpHVWlMQ0p1YjJSbFNHbGxjbUZ5WTJoNUlpd2lZMjl1WTJGMElpd2ljSEp2Y0hOUFprNXZaR1VpTENKdVlXMWxJaXdpWDNOMFlYUmxJaXdpWDJOdmJuUmxlSFFpTENKaGJHeERhR2xzWkhKbGJpSXNJbWx1WkdWNElpd2lZMmhwYkdSeVpXNGlMQ0poZENJc0ltRnNiRkJoY21WdWRITWlMQ0p3WVhKbGJuUnpJaXdpWjJWMElpd2lhWE1pTENKdFlYUmphR2x1WjBGdVkyVnpkRzl5Y3lJc0ltWnBjbk4wSWl3aVptbHVaRmRvWlhKbElpd2ljSEp2Y0U1aGJXVWlMQ0pvWVc1a2JHVnlJaXdpY0hKdmNDSXNJbUZ5WjNNaUxDSnlaWE53YjI1elpTSXNJbmR5WVhCSmJuWnZhMlVpTENKU1lXNW5aVVZ5Y205eUlpd2ljSEp2Y0ZaaGJIVmxJaXdpWld4bGJXVnVkQ0lzSW5keVlYQndaV1FpTENKclpYa2lMQ0prYVhOd2JHRjVUbUZ0WlU5bVRtOWtaU0lzSW1Oc1lYTnpUbUZ0WlNJc0ltbHVaR1Y0VDJZaUxDSmpiMjV6YjJ4bElpd2lkMkZ5YmlJc0ltWnVJaXdpYVNJc0ltbHVhWFJwWVd4V1lXeDFaU0lzSW5KbFpIVmpaU0lzSW1GalkzVnRJaXdpY21Wa2RXTmxVbWxuYUhRaUxDSmlaV2RwYmlJc0ltVnVaQ0lzSW5Oc2FXTmxJaXdpWm14aGRIUmxibVZrSWl3aVoyVjBSV3hsYldWdWRITWlMQ0psZUdsemRITWlMQ0ptYVc1a0lpd2labTVPWVcxbElpd2lhVzUwWlhKalpYQjBaWElpTENKaGRIUmhZMmhVYnlJc0ltWnBiSFJsY2xkb1pYSmxJaXdpZEhsd1pTSXNJa2xVUlZKQlZFOVNYMU5aVFVKUFRDSXNJazlpYW1WamRDSXNJbVJsWm1sdVpWQnliM0JsY25SNUlpd2ljSEp2ZEc5MGVYQmxJaXdpWTI5dVptbG5kWEpoWW14bElpd2lkbUZzZFdVaUxDSnBkR1Z5WVhSdmNpSXNJbWwwWlhJaUxDSnVaWGgwSWl3aVpHOXVaU0lzSW5CeWFYWmhkR1ZYWVhKdWFXNW5JaXdpWlhoMGNtRk5aWE56WVdkbElpd2laVzUxYldWeVlXSnNaU0pkTENKdFlYQndhVzVuY3lJNklqczdPenM3T3pzN096czdPenM3UVVGQlFUczdPenRCUVVOQk96czdPMEZCUlVFN08wRkJaVUU3T3pzN1FVRkRRVHM3UVVGRFFUczdRVUZWUVRzN096czdPenM3T3pzN08wRkJSVUVzU1VGQlRVRXNUMEZCVHl4blFrRkJTU3hWUVVGS0xFTkJRV0k3UVVGRFFTeEpRVUZOUXl4UlFVRlJMR2RDUVVGSkxGZEJRVW9zUTBGQlpEdEJRVU5CTEVsQlFVMURMRmRCUVZjc1owSkJRVWtzWTBGQlNpeERRVUZxUWp0QlFVTkJMRWxCUVUxRExHRkJRV0VzWjBKQlFVa3NaMEpCUVVvc1EwRkJia0k3UVVGRFFTeEpRVUZOUXl4UFFVRlBMR2RDUVVGSkxGVkJRVW9zUTBGQllqdEJRVU5CTEVsQlFVMURMRlZCUVZVc1owSkJRVWtzWVVGQlNpeERRVUZvUWp0QlFVTkJMRWxCUVUxRExHRkJRV0VzWjBKQlFVa3NaVUZCU2l4RFFVRnVRanRCUVVOQkxFbEJRVTFETEhGQ1FVRnhRaXhuUWtGQlNTeDFRa0ZCU2l4RFFVRXpRanRCUVVOQkxFbEJRVTFETEdWQlFXVXNaMEpCUVVrc2FVSkJRVW9zUTBGQmNrSTdRVUZEUVN4SlFVRk5ReXhoUVVGaExHZENRVUZKTEdWQlFVb3NRMEZCYmtJN08wRkJSVUU3T3pzN096czdPenRCUVZOQkxGTkJRVk5ETEd0Q1FVRlVMRU5CUVRSQ1F5eFBRVUUxUWl4RlFVRnhRME1zVTBGQmNrTXNSVUZCY1VVN1FVRkJRU3hOUVVGeVFrTXNUVUZCY1VJc2RVVkJRVnBETEhkQ1FVRlpPenRCUVVOdVJTeFRRVUZQU0N4UlFVRlJTU3hQUVVGU0xFTkJRV2RDTEZWQlFVTkRMRU5CUVVRN1FVRkJRU3hYUVVGUFNDeFBRVUZQUnl4RlFVRkZReXhsUVVGR0xFVkJRVkFzUlVGQk5FSk1MRk5CUVRWQ0xFTkJRVkE3UVVGQlFTeEhRVUZvUWl4RFFVRlFPMEZCUTBRN08wRkJSVVE3T3pzN096czdPMEZCVVVFc1UwRkJVMDBzYjBKQlFWUXNRMEZCT0VKUUxFOUJRVGxDTEVWQlFYVkRReXhUUVVGMlF5eEZRVUZyUkR0QlFVTm9SQ3hUUVVGUFJDeFJRVUZSVVN4SlFVRlNMRU5CUVdGU0xGRkJRVkZUTEdkQ1FVRlNMRWRCUVRKQ1VDeE5RVUV6UWl4RFFVRnJRMFFzVTBGQmJFTXNSVUZCTmtORExFMUJRVGRETEVOQlFXOUVVU3hQUVVGd1JDeERRVUZpTEVOQlFWQTdRVUZEUkRzN1FVRkZSQ3hUUVVGVFF5eHRRa0ZCVkN4RFFVRTJRbGdzVDBGQk4wSXNSVUZCYzBNN1FVRkRjRU1zVFVGQlNVRXNVVUZCVVZBc1NVRkJVaXhGUVVGamJVSXNUVUZCWkN4TFFVRjVRaXhEUVVFM1FpeEZRVUZuUXp0QlFVTTVRaXhWUVVGTkxFbEJRVWxETEV0QlFVb3NRMEZCVlN3MlJVRkJWaXhEUVVGT08wRkJRMFE3UVVGRFJDeE5RVUZKWWl4UlFVRlJVQ3hKUVVGU0xFMUJRV3RDVHl4UFFVRjBRaXhGUVVFclFqdEJRVU0zUWl4WFFVRlBRU3hSUVVGUlRDeFZRVUZTTEVWQlFXOUNMRU5CUVhCQ0xFTkJRVkE3UVVGRFJEdEJRVU5FTEZOQlFVOUxMRkZCUVZGUUxFbEJRVklzUlVGQlkwb3NTVUZCWkN4RFFVRlFPMEZCUTBRN08wRkJSVVFzVTBGQlUzbENMRmRCUVZRc1EwRkJjVUprTEU5QlFYSkNMRVZCUVRoQ1pTeEpRVUU1UWl4RlFVRnZRenRCUVVOc1F5eFRRVUZQTEdsRFFVRmpRU3hKUVVGa0xFVkJRVzlDU2l4dlFrRkJiMEpZTEU5QlFYQkNMRU5CUVhCQ0xFTkJRVkE3UVVGRFJEczdRVUZGUkN4VFFVRlRaMElzWlVGQlZDeERRVUY1UW1oQ0xFOUJRWHBDTEVWQlFXdERhVUlzUzBGQmJFTXNSVUZCZVVNN1FVRkRka01zVFVGQlNTeERRVUZEUVN4TFFVRk1MRVZCUVZrN1FVRkRWaXd5UWtGQlYycENMRTlCUVZnc1JVRkJiMEpZTEVsQlFYQkNMRVZCUVRCQ0xFbEJRVEZDTzBGQlEwRXNNa0pCUVZkWExFOUJRVmdzUlVGQmIwSldMRXRCUVhCQ0xFVkJRVEpDTEVWQlFUTkNPMEZCUTBRc1IwRklSQ3hOUVVkUExFbEJRVWtzUTBGQlF6UkNMRTFCUVUxRExFOUJRVTRzUTBGQlkwWXNTMEZCWkN4RFFVRk1MRVZCUVRKQ08wRkJRMmhETERKQ1FVRlhha0lzVDBGQldDeEZRVUZ2UWxnc1NVRkJjRUlzUlVGQk1FSTBRaXhMUVVFeFFqdEJRVU5CTERKQ1FVRlhha0lzVDBGQldDeEZRVUZ2UWxZc1MwRkJjRUlzUlVGQk1rSXNRMEZCUXpKQ0xFdEJRVVFzUTBGQk0wSTdRVUZEUkN4SFFVaE5MRTFCUjBFN1FVRkRUQ3d5UWtGQlYycENMRTlCUVZnc1JVRkJiMEpZTEVsQlFYQkNMRVZCUVRCQ05FSXNUVUZCVFN4RFFVRk9MRU5CUVRGQ08wRkJRMEVzTWtKQlFWZHFRaXhQUVVGWUxFVkJRVzlDVml4TFFVRndRaXhGUVVFeVFqSkNMRXRCUVROQ08wRkJRMFE3UVVGRFJDeDVRa0ZCVjJwQ0xFOUJRVmdzUlVGQmIwSXNVVUZCY0VJc1JVRkJPRUpCTEZGQlFWRldMRXRCUVZJc1JVRkJaWE5DTEUxQlFUZERPMEZCUTBRN08wRkJSVVE3T3pzN1NVRkhUVkVzV1R0QlFVTktMSGRDUVVGWlNDeExRVUZhTEVWQlFXMUNTU3hKUVVGdVFpeEZRVUUyUXp0QlFVRkJMRkZCUVhCQ1F5eGhRVUZ2UWl4MVJVRkJTaXhGUVVGSk96dEJRVUZCT3p0QlFVTXpReXhSUVVGSkxFTkJRVU5ETEU5QlFVOURMRTFCUVZJc1NVRkJhMElzUTBGQlEwUXNUMEZCVDBVc1VVRkJPVUlzUlVGQmQwTTdRVUZEZEVNc1dVRkJUU3hKUVVGSldpeExRVUZLTEVOQlFWVXNORVZCUVZZc1EwRkJUanRCUVVORU8wRkJRMFFzVVVGQlRXRXNWVUZCVlN4M1FrRkJXVW9zWVVGQldpeERRVUZvUWpzN1FVRkZRU3hSUVVGSkxFTkJRVU5FTEVsQlFVd3NSVUZCVnp0QlFVTlVMRlZCUVUxTkxGVkJRVlVzTmtKQlFWZEVMRTlCUVZnc1EwRkJhRUk3UVVGRFFTeFZRVUZKTEVOQlFVTkRMRkZCUVZGRExHTkJRVklzUTBGQmRVSllMRXRCUVhaQ0xFTkJRVXdzUlVGQmIwTTdRVUZEYkVNc1kwRkJUU3hKUVVGSldTeFRRVUZLTEVOQlFXTXNNa05CUVdRc1EwRkJUanRCUVVORU96dEJRVVZFTEZWQlFVMURMRmRCUVZkSUxGRkJRVkZKTEdOQlFWSXNORUpCUVhsQ1F5eE5RVUZOTEU5QlFTOUNMRWxCUVRKRFRpeFBRVUV6UXl4RlFVRnFRanRCUVVOQkxEWkNRVUZYTEVsQlFWZ3NSVUZCYVVKdVF5eFJRVUZxUWl4RlFVRXlRblZETEZGQlFUTkNPMEZCUTBGQkxHVkJRVk5ITEUxQlFWUXNRMEZCWjBKb1FpeExRVUZvUWl4RlFVRjFRbE1zVVVGQlVWRXNUMEZCTDBJN1FVRkRRU3cyUWtGQlZ5eEpRVUZZTEVWQlFXbENla01zU1VGQmFrSXNSVUZCZFVJc1NVRkJka0k3UVVGRFFYVkNMSE5DUVVGblFpeEpRVUZvUWl4RlFVRnpRaXhMUVVGTGVrSXNVVUZCVEN4RlFVRmxORU1zVDBGQlppeEZRVUYwUWp0QlFVTkJMRFpDUVVGWExFbEJRVmdzUlVGQmFVSjZReXhQUVVGcVFpeEZRVUV3UW1kRExFOUJRVEZDTzBGQlEwRXNOa0pCUVZjc1NVRkJXQ3hGUVVGcFFqZENMRmxCUVdwQ0xFVkJRU3RDTEVWQlFTOUNPenRCUVVWQkxGVkJRVWtzT0VKQlFXdENOa0lzVVVGQlVWVXNhVUpCUVRGQ0xFVkJRVFpEVkN4UFFVRTNReXhEUVVGS0xFVkJRVEpFTzBGQlEzcEVMRmxCUVVrc1QwRkJUeXhMUVVGTGNFTXNVVUZCVEN4RlFVRmxPRU1zTkVKQlFYUkNMRXRCUVhWRUxGVkJRVE5FTEVWQlFYVkZPMEZCUTNKRkxHZENRVUZOTEVsQlFVbFNMRk5CUVVvc1EwRkJZeXh6UlVGQlpDeERRVUZPTzBGQlEwUTdPMEZCUlVRN1FVRkRRU3dyUWtGQlZ5eEpRVUZZTEVWQlFXbENha01zYTBKQlFXcENMRVZCUVhGRExFbEJRVWt3UXl4M1FrRkJTaXhEUVVOdVF5eEpRVVJ0UXl4RlFVTTNRaXhMUVVGTEwwTXNVVUZCVEN4RlFVRmxPRU1zTkVKQlFXWXNSVUZFTmtJc1EwRkJja003UVVGSFFTeGhRVUZMZUVNc1dVRkJUQ3hGUVVGdFFqQkRMRWxCUVc1Q0xFTkJRWGRDTEV0QlFVc3pReXhyUWtGQlRDeERRVUY0UWp0QlFVTkVPMEZCUTBZc1MwRjZRa1FzVFVGNVFrODdRVUZEVEN3MlFrRkJWeXhKUVVGWUxFVkJRV2xDVEN4UlFVRnFRaXhGUVVFeVFqaENMRXRCUVVzNVFpeFJRVUZNTEVOQlFUTkNPMEZCUTBFc05rSkJRVmNzU1VGQldDeEZRVUZwUWtVc1NVRkJha0lzUlVGQmRVSTBRaXhKUVVGMlFqdEJRVU5CVEN4elFrRkJaMElzU1VGQmFFSXNSVUZCYzBKRExFdEJRWFJDTzBGQlEwRXNOa0pCUVZjc1NVRkJXQ3hGUVVGcFFuUkNMRlZCUVdwQ0xFVkJRVFpDTUVJc1MwRkJTeTlDTEV0QlFVd3NRMEZCTjBJN1FVRkRRU3cyUWtGQlZ5eEpRVUZZTEVWQlFXbENTU3hQUVVGcVFpeEZRVUV3UWpKQ0xFdEJRVXN6UWl4UFFVRk1MRU5CUVRGQ08wRkJRMEVzTmtKQlFWY3NTVUZCV0N4RlFVRnBRa2NzV1VGQmFrSXNSVUZCSzBJc1JVRkJMMEk3UVVGRFJEdEJRVU5FTERKQ1FVRlhMRWxCUVZnc1JVRkJhVUpNTEZWQlFXcENMRVZCUVRaQ2VVSXNTMEZCTjBJN1FVRkRRU3d5UWtGQlZ5eEpRVUZZTEVWQlFXbENia0lzVlVGQmFrSXNSVUZCTmtJc1NVRkJOMEk3UVVGRFJEczdRVUZGUkRzN096czdPenM3T3p0elFrRkxUenRCUVVOTUxHVkJRVThzUzBGQlMwd3NTVUZCVEN4RFFVRlFPMEZCUTBRN096czdPMEZCUlVRN096czdPenM3T3p0cFEwRkxhMEk3UVVGRGFFSXNXVUZCU1N4TFFVRkxiVUlzVFVGQlRDeExRVUZuUWl4RFFVRndRaXhGUVVGMVFqdEJRVU55UWl4blFrRkJUU3hKUVVGSlF5eExRVUZLTEVOQlFWVXNiVVZCUVZZc1EwRkJUanRCUVVORU8wRkJRMFFzWlVGQlR5eExRVUZMZGtJc1MwRkJUQ3hGUVVGWkxFTkJRVm9zUTBGQlVEdEJRVU5FT3pzN096dEJRVVZFT3pzN096czdPenM3YTBOQlMyMUNPMEZCUTJwQ0xHVkJRVThzUzBGQlMwRXNTMEZCVEN4RFFVRlFPMEZCUTBRN096czdPMEZCUlVRN096czdPenM3T3pzMFFrRkxZVHRCUVVGQk96dEJRVU5ZTEdWQlFVOHNTMEZCUzJ0RUxFMUJRVXdzUTBGQldTeFpRVUZhTEVWQlFUQkNPMEZCUVVFc2FVSkJRVTBzTmtKQlFWY3NUVUZCU3psRExFOUJRVXdzUTBGQldDeEZRVUV3UWl0RExHRkJRVEZDTEVOQlFYZERMRTFCUVV0d1JDeEpRVUZNTEVOQlFYaERMRU5CUVU0N1FVRkJRU3hUUVVFeFFpeERRVUZRTzBGQlEwUTdPenM3TzBGQlJVUTdPenM3T3pzN096czJRa0ZMWXp0QlFVRkJPenRCUVVOYUxHVkJRVThzUzBGQlMwTXNTMEZCVEN4RlFVRlpiMFFzUjBGQldpeERRVUZuUWl4VlFVRkRja01zUTBGQlJEdEJRVUZCTEdsQ1FVRlBMRFpDUVVGWExFOUJRVXRZTEU5QlFVd3NRMEZCV0N4RlFVRXdRaXRETEdGQlFURkNMRU5CUVhkRGNFTXNRMEZCZUVNc1EwRkJVRHRCUVVGQkxGTkJRV2hDTEVOQlFWQTdRVUZEUkRzN096czdRVUZGUkRzN096czdlVUpCUTFVN1FVRkRVaXhqUVVGTkxFbEJRVWxSTEV0QlFVb3NRMEZCVlN4elJrRkJWaXhEUVVGT08wRkJRMFE3T3pzN08wRkJSVVE3T3pzN096QkNRVU5YTzBGQlExUXNZMEZCVFN4SlFVRkpRU3hMUVVGS0xFTkJRVlVzYTBSQlFWWXNRMEZCVGp0QlFVTkVPenM3T3p0QlFVVkVPenM3T3pzN096czdPenMwUWtGUFlUdEJRVU5ZTEZsQlFVMWpMRlZCUVZVc05rSkJRVmNzUzBGQlMycERMRTlCUVV3c1EwRkJXQ3hEUVVGb1FqdEJRVU5CTEdWQlFVOHNTMEZCU3poRExFMUJRVXdzUTBGQldTeFpRVUZhTEVWQlFUQkNMRlZCUVVOdVF5eERRVUZFTzBGQlFVRXNhVUpCUVU5elFpeFJRVUZSWjBJc1kwRkJVaXhEUVVGMVFuUkRMRU5CUVhaQ0xFVkJRVEJDTEVsQlFURkNMRU5CUVZBN1FVRkJRU3hUUVVFeFFpeERRVUZRTzBGQlEwUTdPenM3TzBGQlJVUTdPenM3T3pzN096czdPenM3YlVKQlUwbDFReXhQTEVWQlFWTTdRVUZEV0N4WlFVRkpMRXRCUVV0dVJDeEpRVUZNTEUxQlFXVXNTVUZCYmtJc1JVRkJlVUk3UVVGRGRrSXNaMEpCUVUwc1NVRkJTVzlDTEV0QlFVb3NRMEZCVlN3eVJFRkJWaXhEUVVGT08wRkJRMFE3UVVGRFJDeGxRVUZQTEV0QlFVdG5ReXhSUVVGTUxFZEJRV2RDUXl4SlFVRm9RaXhEUVVGeFFrWXNUMEZCY2tJc1EwRkJVRHRCUVVORU96czdPenRCUVVWRU96czdPenM3T3pzN096czdPenM3TUVKQlYxYzdRVUZCUVRzN1FVRkRWQ3hsUVVGUExFdEJRVXRLTEUxQlFVd3NRMEZCV1N4VlFVRmFMRVZCUVhkQ08wRkJRVUVzYVVKQlFVMHNUMEZCUzI1RUxFbEJRVXdzUlVGQlYzZEVMRkZCUVdwQ08wRkJRVUVzVTBGQmVFSXNRMEZCVUR0QlFVTkVPenM3T3p0QlFVVkVPenM3T3pzN096czdPenR6UTBGUGRVSTdRVUZEY2tJc1dVRkJTU3hMUVVGTGNFUXNTVUZCVEN4TlFVRmxMRWxCUVc1Q0xFVkJRWGxDTzBGQlEzWkNMR2RDUVVGTkxFbEJRVWx2UWl4TFFVRktMRU5CUVZVc2NVVkJRVllzUTBGQlRqdEJRVU5FTzBGQlEwUXNXVUZCU1N4RFFVRkRMRXRCUVV0dVFpeFBRVUZNTEVWQlFXTXdReXhwUWtGQmJrSXNSVUZCYzBNN1FVRkRjRU1zWjBKQlFVMHNTVUZCU1haQ0xFdEJRVW9zUTBGQlZTdzRTRUZCVml4RFFVRk9PMEZCUTBRN1FVRkRSQ3hsUVVGUExFdEJRVXRxUWl4clFrRkJUQ3hEUVVGUU8wRkJRMFE3T3pzN08wRkJSVVE3T3pzN096czdPenM3T3p0M1FrRlJVenRCUVVGQk96dEJRVU5RTEZsQlFVMTVRaXhQUVVGUExFdEJRVXMxUWl4SlFVRk1MRU5CUVdJN1FVRkRRU3haUVVGSkxGTkJRVk0wUWl4SlFVRmlMRVZCUVcxQ08wRkJRMnBDTEdsQ1FVRlBRU3hMUVVGTE1FSXNUVUZCVEN4RlFVRlFPMEZCUTBRN1FVRkRSQzlDTEhkQ1FVRm5RaXhKUVVGb1FpeEZRVUZ6UWl4TFFVRkxla0lzVVVGQlRDeEZRVUZsTkVNc1QwRkJaaXhGUVVGMFFqdEJRVU5CTEdGQlFVdDBReXhaUVVGTUxFVkJRVzFDYlVRc1QwRkJia0lzUTBGQk1rSXNWVUZCUTBNc1ZVRkJSQ3hGUVVGblFqdEJRVU42UXl4alFVRkpRU3hsUVVGbExFOUJRVXR1UkN4VlFVRk1MRU5CUVc1Q0xFVkJRWEZETzBGQlEyNURPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEZ0UkN4MVFrRkJWMjVFTEZWQlFWZ3NTVUZCZVVJc1RVRkJla0k3UVVGRFFTeG5Ra0ZCU1R0QlFVTkdiVVFzZVVKQlFWZEdMRTFCUVZnN1FVRkRSQ3hoUVVaRUxGTkJSVlU3UVVGRFVrVXNlVUpCUVZkdVJDeFZRVUZZTEVsQlFYbENMRWxCUVhwQ08wRkJRMFE3UVVGRFJqdEJRVU5HTEZOQllrUTdRVUZqUVN4bFFVRlBMRWxCUVZBN1FVRkRSRHM3T3pzN1FVRkZSRHM3T3pzN096czdPenQ1UWtGTlZUdEJRVUZCT3p0QlFVTlNMRmxCUVVrc1MwRkJTMHdzU1VGQlRDeE5RVUZsTEVsQlFXNUNMRVZCUVhsQ08wRkJRM1pDTEdkQ1FVRk5MRWxCUVVsdlFpeExRVUZLTEVOQlFWVXNkMFJCUVZZc1EwRkJUanRCUVVORU8wRkJRMFFzWVVGQlN6SkNMRTFCUVV3c1EwRkJXU3hUUVVGYUxFVkJRWFZDTEZsQlFVMDdRVUZETTBJc2FVSkJRVXRxUkN4UlFVRk1MRVZCUVdVeVJDeFBRVUZtTzBGQlEwRXNhVUpCUVV0SUxFMUJRVXc3UVVGRFJDeFRRVWhFTzBGQlNVRXNaVUZCVHl4SlFVRlFPMEZCUTBRN096czdPMEZCUlVRN096czdPenM3T3pzN08zVkNRVTlSTzBGQlFVRTdPMEZCUTA0c1dVRkJTU3hMUVVGTGRFUXNTVUZCVEN4TlFVRmxMRWxCUVc1Q0xFVkJRWGxDTzBGQlEzWkNMR2RDUVVGTkxFbEJRVWx2UWl4TFFVRktMRU5CUVZVc2MwUkJRVllzUTBGQlRqdEJRVU5FTzBGQlEwUXNZVUZCUzNSQ0xGRkJRVXdzUlVGQlpUQkRMRTFCUVdZc1EwRkJjMElzUzBGQlMzcERMRlZCUVV3c1EwRkJkRUlzUlVGQmQwTXNTMEZCUzBVc1QwRkJUQ3hGUVVGamQwTXNUMEZCZEVRc1JVRkJLMFE3UVVGQlFTeHBRa0ZCVFN4UFFVRkxZU3hOUVVGTUxFVkJRVTQ3UVVGQlFTeFRRVUV2UkR0QlFVTkJMR1ZCUVU4c1NVRkJVRHRCUVVORU96czdPenRCUVVWRU96czdPenM3T3pzN096czdPenM3T3pzN2QwSkJZMU5KTEVzc1JVRkJOa0k3UVVGQlFUczdRVUZCUVN4WlFVRjBRa01zVVVGQmMwSXNkVVZCUVZoRExGTkJRVmM3TzBGQlEzQkRMRmxCUVVrc1MwRkJTelZFTEVsQlFVd3NUVUZCWlN4SlFVRnVRaXhGUVVGNVFqdEJRVU4yUWl4blFrRkJUU3hKUVVGSmIwSXNTMEZCU2l4RFFVRlZMSGxFUVVGV0xFTkJRVTQ3UVVGRFJEdEJRVU5FTEZsQlFVbDVReXhWUVVGVk1VTXNUVUZCVml4SFFVRnRRaXhEUVVGdVFpeEpRVUYzUWl4UFFVRlBkME1zVVVGQlVDeExRVUZ2UWl4VlFVRm9SQ3hGUVVFMFJEdEJRVU14UkN4blFrRkJUU3hKUVVGSmRrSXNVMEZCU2l4RFFVRmpMRzlGUVVGa0xFTkJRVTQ3UVVGRFJEdEJRVU5FTEZsQlFVMUdMRlZCUVZVc05rSkJRVmNzUzBGQlMycERMRTlCUVV3c1EwRkJXQ3hEUVVGb1FqdEJRVU5CTEdGQlFVdEdMRlZCUVV3c1NVRkJiVUlzZVVKQlFXRnRReXhQUVVGaUxFVkJRWE5DTEV0QlFVdHVReXhWUVVGTUxFTkJRWFJDTEVWQlFYZERNa1FzUzBGQmVFTXNRMEZCYmtJN1FVRkRRU3hoUVVGTE5VUXNVVUZCVEN4RlFVRmxNRU1zVFVGQlppeERRVUZ6UWl4TFFVRkxla01zVlVGQlRDeERRVUYwUWl4RlFVRjNReXhKUVVGNFF5eEZRVUU0UXl4WlFVRk5PMEZCUTJ4RUxHbENRVUZMZFVRc1RVRkJURHRCUVVOQkxHTkJRVWxMTEZGQlFVb3NSVUZCWXp0QlFVTmFRVHRCUVVORU8wRkJRMFlzVTBGTVJEdEJRVTFCTEdWQlFVOHNTVUZCVUR0QlFVTkVPenM3T3p0QlFVVkVPenM3T3pzN096czdPenM3T3pzN096dDNRa0ZoVTBjc1N5eEZRVUUyUWp0QlFVRkJPenRCUVVGQkxGbEJRWFJDU0N4UlFVRnpRaXgxUlVGQldFTXNVMEZCVnpzN1FVRkRjRU1zV1VGQlNTeExRVUZMVWl4UlFVRk1MRTlCUVc5Q0xFbEJRWEJDTEVsQlFUUkNMRXRCUVV0MlF5eGxRVUZNTEVkQlFYVkNhMFFzVVVGQmRrSXNTMEZCYjBNc1QwRkJjRVVzUlVGQk5rVTdRVUZETTBVc1owSkJRVTBzU1VGQlNUTkRMRXRCUVVvc1EwRkJWU3hwUlVGQlZpeERRVUZPTzBGQlEwUTdRVUZEUkN4WlFVRkplVU1zVlVGQlZURkRMRTFCUVZZc1IwRkJiVUlzUTBGQmJrSXNTVUZCZDBJc1QwRkJUM2RETEZGQlFWQXNTMEZCYjBJc1ZVRkJhRVFzUlVGQk5FUTdRVUZETVVRc1owSkJRVTBzU1VGQlNYWkNMRk5CUVVvc1EwRkJZeXh2UlVGQlpDeERRVUZPTzBGQlEwUTdRVUZEUkN4aFFVRkxaMElzVVVGQlRDeEhRVUZuUWxrc1VVRkJhRUlzUTBGQmVVSkdMRXRCUVhwQ0xFVkJRV2RETEZsQlFVMDdRVUZEY0VNc2FVSkJRVXRTTEUxQlFVdzdRVUZEUVN4alFVRkpTeXhSUVVGS0xFVkJRV003UVVGRFdpeG5Ra0ZCVFhwQ0xGVkJRVlVzTmtKQlFWY3NUMEZCUzJwRExFOUJRVXdzUTBGQldDeERRVUZvUWp0QlFVTkJMR2RDUVVGTmJVUXNWMEZCVnl4UFFVRkxRU3hSUVVGTUxFVkJRV3BDTzBGQlEwRXNaMEpCUVVsc1FpeFJRVUZSSzBJc2MwSkJRVm9zUlVGQmIwTTdRVUZEYkVNdlFpeHpRa0ZCVVN0Q0xITkNRVUZTTEVOQlFTdENZaXhSUVVFdlFpeEZRVUY1UTA4c1VVRkJla003UVVGRFJDeGhRVVpFTEUxQlJVODdRVUZEVEVFc2RVSkJRVk5QTEVsQlFWUXNRMEZCWTJRc1VVRkJaRHRCUVVORU8wRkJRMFk3UVVGRFJpeFRRVmhFTzBGQldVRXNaVUZCVHl4SlFVRlFPMEZCUTBRN096czdPMEZCUlVRN096czdPenM3T3pzN096czdNRUpCVTFkWUxFOHNSVUZCVXp0QlFVRkJPenRCUVVOc1FpeFpRVUZKTEV0QlFVdDZReXhKUVVGTUxFMUJRV1VzU1VGQmJrSXNSVUZCZVVJN1FVRkRka0lzWjBKQlFVMHNTVUZCU1c5Q0xFdEJRVW9zUTBGQlZTd3lSRUZCVml4RFFVRk9PMEZCUTBRN1FVRkRSQ3haUVVGSkxFTkJRVU1zUzBGQlMyNUNMRTlCUVV3c1JVRkJZM2RETEU5QlFXNUNMRVZCUVRSQ08wRkJRekZDTEdkQ1FVRk5MRWxCUVVseVFpeExRVUZLTEVOQlFWVXNkMGRCUVZZc1EwRkJUanRCUVVORU8wRkJRMFFzWVVGQlMzUkNMRkZCUVV3c1JVRkJaVEJETEUxQlFXWXNRMEZCYzBJc1MwRkJTM3BETEZWQlFVd3NRMEZCZEVJc1JVRkJkME13UXl4UFFVRjRReXhGUVVGcFJEdEJRVUZCTEdsQ1FVRk5MRTlCUVV0aExFMUJRVXdzUlVGQlRqdEJRVUZCTEZOQlFXcEVPMEZCUTBFc1pVRkJUeXhKUVVGUU8wRkJRMFE3T3pzN08wRkJSVVE3T3pzN096czdPenM3T3pzN096czdkMEpCV1ZOaExGY3NSVUZCWVR0QlFVTndRaXhaUVVGTmFrTXNWVUZCVlN3MlFrRkJWeXhMUVVGTGFrTXNUMEZCVEN4RFFVRllMRU5CUVdoQ096dEJRVVZCTEZsQlFVMVBMRmxCUVZscFFpeE5RVUZOUXl4UFFVRk9MRU5CUVdONVF5eFhRVUZrTEVsQlEyUXNWVUZCUTBNc1MwRkJSRHRCUVVGQkxHbENRVUZYTEhGRFFVTllReXhuUWtGRVZ5eEZRVVZZUkN4TFFVWlhMRVZCUjFoRUxGbEJRVmxzUWl4SFFVRmFMRU5CUVdkQ0xGVkJRVU16UWl4SlFVRkVPMEZCUVVFc2JVSkJRVlZaTEZGQlFWRnZReXhoUVVGU0xFTkJRWE5DYUVRc1NVRkJkRUlzUTBGQlZqdEJRVUZCTEZkQlFXaENMRU5CU0Zjc1EwRkJXRHRCUVVGQkxGTkJSR01zUjBGTlpDeFZRVUZET0VNc1MwRkJSRHRCUVVGQkxHbENRVUZYTEhOQ1FVRlZiRU1zVVVGQlVXOURMR0ZCUVZJc1EwRkJjMEpJTEZkQlFYUkNMRU5CUVZZc1JVRkJPRU5ETEV0QlFUbERMRU5CUVZnN1FVRkJRU3hUUVU1S096dEJRVkZCTEdWQlFVODVSQ3h0UWtGQmJVSXNTVUZCYmtJc1JVRkJlVUpGTEZOQlFYcENMRVZCUVc5RFZ5eE5RVUZ3UXl4SFFVRTJReXhEUVVGd1JEdEJRVU5FT3pzN096dEJRVVZFT3pzN096czdPenM3T3pzN096czdPenM3T3p0MVEwRm5RbmRDUnl4SkxFVkJRVTA3UVVGRE5VSXNXVUZCVFdsRUxGVkJRVlVzTmtKQlFWY3NTMEZCUzNSRkxFOUJRVXdzUTBGQldDeEZRVUV3UW5GRkxHRkJRVEZDTEVOQlFYZERhRVFzU1VGQmVFTXNRMEZCYUVJN1FVRkRRU3haUVVGTlpEdEJRVUZaTEcxQ1FVRmFRU3hUUVVGWkxFTkJRVU0wUkN4TFFVRkVPMEZCUVVFc2JVSkJRVmNzZDBKQlFWbEhMRTlCUVZvc1JVRkJjVUpJTEV0QlFYSkNMRVZCUVRSQ0xGVkJRVU5KTEVOQlFVUXNSVUZCU1VNc1EwRkJTanRCUVVGQkxIRkNRVUZWUkN4TFFVRkxReXhEUVVGbU8wRkJRVUVzWVVGQk5VSXNRMEZCV0R0QlFVRkJPenRCUVVGYU8wRkJRVUVzVjBGQlRqdEJRVU5CTEdWQlFVOXVSU3h0UWtGQmJVSXNTVUZCYmtJc1JVRkJlVUpGTEZOQlFYcENMRVZCUVc5RFZ5eE5RVUZ3UXl4SFFVRTJReXhEUVVGd1JEdEJRVU5FT3pzN096dEJRVVZFT3pzN096czdPenM3T3pzN096czdPenM3T3pzN096SkRRV3RDTkVKTExFc3NSVUZCVHp0QlFVRkJPenRCUVVOcVF5eFpRVUZKTEVOQlFVTkRMRTFCUVUxRExFOUJRVTRzUTBGQlkwWXNTMEZCWkN4RFFVRk1MRVZCUVRKQ08wRkJRM3BDTEdkQ1FVRk5MRWxCUVVsWkxGTkJRVW9zUTBGQll5d3dRa0ZCWkN4RFFVRk9PMEZCUTBRN08wRkJSVVFzWlVGQlQxb3NUVUZCVFd0RUxFdEJRVTRzUTBGQldTeFZRVUZEY0VRc1NVRkJSRHRCUVVGQkxHbENRVUZWTEZGQlFVdHhSQ3gxUWtGQlRDeERRVUUyUW5KRUxFbEJRVGRDTEVOQlFWWTdRVUZCUVN4VFFVRmFMRU5CUVZBN1FVRkRSRHM3T3pzN1FVRkZSRHM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzeVEwRnJRalJDUlN4TExFVkJRVTg3UVVGQlFUczdRVUZEYWtNc1pVRkJUME1zVFVGQlRVTXNUMEZCVGl4RFFVRmpSaXhMUVVGa0xFdEJRWGRDUVN4TlFVRk5iMFFzU1VGQlRpeERRVUZYTEZWQlFVTjBSQ3hKUVVGRU8wRkJRVUVzYVVKQlFWVXNVVUZCUzNGRUxIVkNRVUZNTEVOQlFUWkNja1FzU1VGQk4wSXNRMEZCVmp0QlFVRkJMRk5CUVZnc1EwRkJMMEk3UVVGRFJEczdPenM3UVVGRlJEczdPenM3T3pzN096czdPenM3T3p0elFrRlpUMEVzU1N4RlFVRk5PMEZCUVVFN08wRkJRMWdzWlVGQlR5eExRVUZMZVVJc1RVRkJUQ3hEUVVGWkxGRkJRVm9zUlVGQmMwSTdRVUZCUVN4cFFrRkJUU3h6UWtGQlZTeFJRVUZMYkVNc1pVRkJUQ3hGUVVGV0xFVkJRV3REVXl4SlFVRnNReXhEUVVGT08wRkJRVUVzVTBGQmRFSXNRMEZCVUR0QlFVTkVPenM3T3p0QlFVVkVPenM3T3pzN096czdPenM3T3pzN096czdPenM3T0VKQmFVSmxRU3hKTEVWQlFVMDdRVUZCUVRzN1FVRkRia0lzWlVGQlR5eExRVUZMZVVJc1RVRkJUQ3hEUVVGWkxHZENRVUZhTEVWQlFUaENMRmxCUVUwN1FVRkRla01zWTBGQlRXSXNWVUZCVlN3MlFrRkJWeXhSUVVGTGFrTXNUMEZCVEN4RFFVRllMRU5CUVdoQ08wRkJRMEVzWTBGQlRYTkZMRlZCUVZWeVF5eFJRVUZSYjBNc1lVRkJVaXhEUVVGelFtaEVMRWxCUVhSQ0xFTkJRV2hDTzBGQlEwRXNhVUpCUVU4c2QwSkJRVmxwUkN4UFFVRmFMRVZCUVhGQ0xGRkJRVXN4UkN4bFFVRk1MRVZCUVhKQ0xFVkJRVFpETEZWQlFVTXlSQ3hEUVVGRUxFVkJRVWxETEVOQlFVbzdRVUZCUVN4dFFrRkJWVVFzUzBGQlMwTXNRMEZCWmp0QlFVRkJMRmRCUVRkRExFTkJRVkE3UVVGRFJDeFRRVXBOTEVOQlFWQTdRVUZMUkRzN096czdRVUZGUkRzN096czdPenM3T3p0dlFrRk5TMGtzVVN4RlFVRlZPMEZCUTJJc1pVRkJUeXhMUVVGTE9VUXNTVUZCVEN4RFFVRlZMSE5EUVVGelFqaEVMRkZCUVhSQ0xFVkJRV2RETEV0QlFVczNSQ3huUWtGQlRDeEZRVUZvUXl4RFFVRldMRU5CUVZBN1FVRkRSRHM3T3pzN1FVRkZSRHM3T3pzN096czdPenM3TzJ0Q1FWRkhOa1FzVVN4RlFVRlZPMEZCUTFnc1dVRkJUWEpGTEZsQlFWa3NLMEpCUVdWeFJTeFJRVUZtTEVOQlFXeENPMEZCUTBFc1pVRkJUeXhMUVVGTE9VSXNUVUZCVEN4RFFVRlpMRWxCUVZvc1JVRkJhMElzVlVGQlEyNURMRU5CUVVRN1FVRkJRU3hwUWtGQlQwb3NWVUZCVlVrc1EwRkJWaXhEUVVGUU8wRkJRVUVzVTBGQmJFSXNRMEZCVUR0QlFVTkVPenM3T3p0QlFVVkVPenM3T3pzN096czdLMEpCUzJkQ08wRkJRMlFzV1VGQlRWa3NVVUZCVVN4TFFVRkxXQ3hsUVVGTUxFVkJRV1E3TzBGQlJVRXNaVUZCVHl4NVFrRkJZVmNzUzBGQllpeERRVUZRTzBGQlEwUTdPenM3TzBGQlJVUTdPenM3T3pzN096czdPekpDUVU5WmFFSXNVeXhGUVVGWE8wRkJRVUU3TzBGQlEzSkNMR1ZCUVU5TkxIRkNRVUZ4UWl4SlFVRnlRaXhGUVVFeVFpeFZRVUZEUml4RFFVRkVPMEZCUVVFc2FVSkJRVTlLTEZWQlFWVXNVVUZCUzA4c1NVRkJUQ3hEUVVGVlNDeERRVUZXTEVOQlFWWXNRMEZCVUR0QlFVRkJMRk5CUVROQ0xFTkJRVkE3UVVGRFJEczdPenM3UVVGRlJEczdPenM3T3pzN096czdjMEpCVDA5cFJTeFJMRVZCUVZVN1FVRkRaaXhaUVVGTmNrVXNXVUZCV1N3clFrRkJaWEZGTEZGQlFXWXNRMEZCYkVJN1FVRkRRU3hsUVVGUEwwUXNjVUpCUVhGQ0xFbEJRWEpDTEVWQlFUSkNUaXhUUVVFelFpeERRVUZRTzBGQlEwUTdPenM3TzBGQlJVUTdPenM3T3pzN096czdPMjFDUVU5SmNVVXNVU3hGUVVGVk8wRkJRMW9zV1VGQlRYSkZMRmxCUVZrc0swSkJRV1Z4UlN4UlFVRm1MRU5CUVd4Q08wRkJRMEVzWlVGQlR5OUVMSEZDUVVGeFFpeEpRVUZ5UWl4RlFVRXlRaXhWUVVGRFJpeERRVUZFTzBGQlFVRXNhVUpCUVU4c1EwRkJRMG9zVlVGQlZVa3NRMEZCVml4RFFVRlNPMEZCUVVFc1UwRkJNMElzUTBGQlVEdEJRVU5FT3pzN096dEJRVVZFT3pzN096czdPenM3T3pzN08zTkNRVk5QTzBGQlEwd3NXVUZCVFhOQ0xGVkJRVlVzTmtKQlFWY3NTMEZCUzJwRExFOUJRVXdzUTBGQldDeERRVUZvUWp0QlFVTkJMR1ZCUVU4c1MwRkJTemhETEUxQlFVd3NRMEZCV1N4TlFVRmFMRVZCUVc5Q0xGVkJRVU51UXl4RFFVRkVPMEZCUVVFc2FVSkJRVThzZDBOQlFYRkNRU3hEUVVGeVFpeEZRVUYzUW5OQ0xFOUJRWGhDTEVOQlFWQTdRVUZCUVN4VFFVRndRaXhEUVVGUU8wRkJRMFE3T3pzN08wRkJSVVE3T3pzN096czdPenM3TzNOQ1FVOVBPMEZCUTB3c1dVRkJUVUVzVlVGQlZTdzJRa0ZCVnl4TFFVRkxha01zVDBGQlRDeERRVUZZTEVOQlFXaENPMEZCUTBFc1pVRkJUeXhMUVVGTE9FTXNUVUZCVEN4RFFVRlpMRTFCUVZvc1JVRkJiMElzVlVGQlEyNURMRU5CUVVRN1FVRkJRU3hwUWtGQlR5eDNRMEZCY1VKQkxFTkJRWEpDTEVWQlFYZENjMElzVDBGQmVFSXNRMEZCVUR0QlFVRkJMRk5CUVhCQ0xFTkJRVkE3UVVGRFJEczdPenM3UVVGRlJEczdPenM3T3pzN096czdkMEpCVDFNN1FVRkRVQ3haUVVGTk5FTXNUMEZCVHl4TFFVRkxRU3hKUVVGTUxFVkJRV0k3UVVGRFFTeGxRVUZQTERSQ1FVRm5Ra0VzU1VGQmFFSXNRMEZCVUR0QlFVTkVPenM3T3p0QlFVVkVPenM3T3pzN096czdPenM3ZDBKQlVWTkRMRXNzUlVGQmEwSTdRVUZCUVRzN1FVRkJRU3haUVVGWVF5eEpRVUZYTEhWRlFVRktMRVZCUVVrN08wRkJRM3BDTEdWQlFVOHNTMEZCUzJwRExFMUJRVXdzUTBGQldTeFZRVUZhTEVWQlFYZENMRlZCUVVOdVF5eERRVUZFTEVWQlFVODdRVUZEY0VNc2EwSkJRVXRrTEZGQlFVd3NSVUZCWlcxR0xHRkJRV1lzUTBGQk5rSnlSU3hEUVVFM1FpeEZRVUZuUTIxRkxFdEJRV2hETEVWQlFYVkRReXhKUVVGMlF6dEJRVU5CTEd0Q1FVRkxhRVlzU1VGQlRDeEZRVUZYYzBRc1RVRkJXRHRCUVVOQkxHbENRVUZQTEU5QlFWQTdRVUZEUkN4VFFVcE5MRU5CUVZBN1FVRkxSRHM3T3pzN1FVRkZSRHM3T3pzN096czdPenMyUWtGTll6UkNMRXNzUlVGQlR6dEJRVUZCT3p0QlFVTnVRaXhaUVVGSkxFdEJRVXRzUml4SlFVRk1MRTFCUVdVc1NVRkJia0lzUlVGQmVVSTdRVUZEZGtJc1owSkJRVTBzU1VGQlNXOUNMRXRCUVVvc1EwRkJWU3cyUkVGQlZpeERRVUZPTzBGQlEwUTdPMEZCUlVRc1pVRkJUeXhMUVVGTE1rSXNUVUZCVEN4RFFVRlpMR1ZCUVZvc1JVRkJOa0lzVlVGQlEyOURMRkZCUVVRc1JVRkJZenRCUVVOb1JDeGpRVUZKUVN4VFFVRlRjRUlzVVVGQlZDeExRVUZ6UWl4TlFVRXhRaXhGUVVGclF6dEJRVU5vUXl4clFrRkJUU3hKUVVGSk0wTXNTMEZCU2l4RFFVRlZMSFZGUVVGV0xFTkJRVTQ3UVVGRFJEczdRVUZGUkN4alFVRk5hVUlzVjBGQlZ5eFJRVUZMZGtNc1VVRkJUQ3hEUVVGcVFqdEJRVU5CTEdOQlFVa3NUMEZCVDNWRExGTkJRVk1yUXl4aFFVRm9RaXhMUVVGclF5eFZRVUYwUXl4RlFVRnJSRHRCUVVOb1JDeHJRa0ZCVFN4SlFVRkphRVFzVTBGQlNpeERRVUZqTEd0RlFVRmtMRU5CUVU0N1FVRkRSRHM3UVVGRlJDeGpRVUZOYVVRc1YwRkJWMjVGTEc5Q1FVRnZRaXhQUVVGd1FpeERRVUZxUWp0QlFVTkJMR05CUVUxdlJTeG5Ra0ZCWjBJc1EwRkJRMGdzVVVGQlJDeEZRVUZYU1N4TlFVRllMRU5CUVd0Q2JFVXNXVUZCV1N4UFFVRmFMRVZCUVd0Q09FUXNVVUZCYkVJc1EwRkJiRUlzUTBGQmRFSTdRVUZEUVRsRExHMUNRVUZUSzBNc1lVRkJWQ3hEUVVGMVFrVXNZVUZCZGtJc1JVRkJjME5FTEZGQlFYUkRMRVZCUVdkRVNDeExRVUZvUkRzN1FVRkZRU3hyUWtGQlMyeEdMRWxCUVV3c1JVRkJWM05FTEUxQlFWZzdRVUZEUVN4cFFrRkJUeXhQUVVGUU8wRkJRMFFzVTBGb1FrMHNRMEZCVUR0QlFXbENSRHM3T3pzN1FVRkZSRHM3T3pzN096czdPenM3ZFVKQlQxRTdRVUZEVGl4bFFVRlBMRXRCUVV0UUxFMUJRVXdzUTBGQldTeFBRVUZhTEVWQlFYRkNlVU1zZVVKQlFYSkNMRU5CUVZBN1FVRkRSRHM3T3pzN1FVRkZSRHM3T3pzN096czdPenM3T3p0eFFrRlRUVU1zU1N4RlFVRk5PMEZCUVVFN08wRkJRMVlzV1VGQlRVNHNWMEZCVnl4TFFVRkxia1lzU1VGQlRDeE5RVUZsTEVsQlFXWXNSMEZCYzBJc1MwRkJTMFlzVVVGQlRDeEZRVUZsTkVNc1QwRkJaaXhGUVVGMFFpeEhRVUZwUkN4TFFVRkxOMElzWlVGQlRDeEZRVUZzUlR0QlFVTkJMRmxCUVVrc1MwRkJTM1ZETEZGQlFVd3NUMEZCYjBJc1NVRkJjRUlzU1VGQk5FSXJRaXhUUVVGVGNFSXNVVUZCVkN4TFFVRnpRaXhQUVVGMFJDeEZRVUVyUkR0QlFVTTNSQ3huUWtGQlRTeEpRVUZKTTBNc1MwRkJTaXhEUVVGVkxEaEVRVUZXTEVOQlFVNDdRVUZEUkR0QlFVTkVMRmxCUVUxelJTeFRRVUZUTEV0QlFVc3pReXhOUVVGTUxFTkJRVmtzVDBGQldpeEZRVUZ4UWp0QlFVRkJMR2xDUVVGTkxGRkJRVXRMTEZGQlFVd3NSMEZCWjBKVkxFdEJRWFJDTzBGQlFVRXNVMEZCY2tJc1EwRkJaanRCUVVOQkxGbEJRVWtzVDBGQlR6SkNMRWxCUVZBc1MwRkJaMElzVjBGQmNFSXNSVUZCYVVNN1FVRkRMMElzWTBGQlNVTXNWVUZCVlN4SlFVRmtMRVZCUVc5Q08wRkJRMnhDTEd0Q1FVRk5MRWxCUVVsMFJDeFRRVUZLTEd0RFFVRnpRM0ZFTEVsQlFYUkRMRFJFUVVGT08wRkJRMFE3UVVGRFJDeHBRa0ZCVDBNc1QwRkJUMFFzU1VGQlVDeERRVUZRTzBGQlEwUTdRVUZEUkN4bFFVRlBReXhOUVVGUU8wRkJRMFE3T3pzN08wRkJSVVE3T3pzN096czdPenM3T3pzN2RVSkJVMUZFTEVrc1JVRkJUVHRCUVVGQk96dEJRVU5hTEZsQlFVa3NTMEZCUzNwR0xFbEJRVXdzVFVGQlpTeEpRVUZ1UWl4RlFVRjVRanRCUVVOMlFpeG5Ra0ZCVFN4SlFVRkpiMElzUzBGQlNpeERRVUZWTEhkRVFVRldMRU5CUVU0N1FVRkRSRHRCUVVORUxGbEJRVTFuUXl4WFFVRlhMRXRCUVV0TUxFMUJRVXdzUTBGQldTeFRRVUZhTEVWQlFYVkNPMEZCUVVFc2FVSkJRVTBzVVVGQlMwc3NVVUZCVEN4RlFVRk9PMEZCUVVFc1UwRkJka0lzUTBGQmFrSTdRVUZEUVN4WlFVRkpRU3hoUVVGaExFbEJRV3BDTEVWQlFYVkNPMEZCUTNKQ0xHZENRVUZOTEVsQlFVbG9ReXhMUVVGS0xFTkJRVlVzZVVWQlFWWXNRMEZCVGp0QlFVTkVPMEZCUTBRc1dVRkJUWFZGTEZkQlFWZDJReXhUUVVGVFdDeFBRVUV4UWp0QlFVTkJMRmxCUVVrc1QwRkJUMmRFTEVsQlFWQXNTMEZCWjBJc1YwRkJjRUlzUlVGQmFVTTdRVUZETDBJc2FVSkJRVTlGTEZOQlFWTkdMRWxCUVZRc1EwRkJVRHRCUVVORU8wRkJRMFFzWlVGQlQwVXNVVUZCVUR0QlFVTkVPenM3T3p0QlFVVkVPenM3T3pzN096czdPM2RDUVUxVFpDeFJMRVZCUVZVN1FVRkRha0lzV1VGQlRXVXNZMEZCWXl4TFFVRkxha1lzVDBGQlRDeERRVUZoTEZWQlFVTkRMRU5CUVVRN1FVRkJRU3hwUWtGQlR5eHJRMEZCWlVFc1JVRkJSVU1zWlVGQlJpeEZRVUZtTEVOQlFWQTdRVUZCUVN4VFFVRmlMRU5CUVhCQ08wRkJRMEVzWlVGQlQyZEZMRmRCUVZkbExGbEJRVmx1Uml4TlFVRmFMRU5CUVcxQ2IwVXNVVUZCYmtJc1EwRkJXQ3hIUVVFd1EyVXNWMEZCYWtRN1FVRkRSRHM3T3pzN1FVRkZSRHM3T3pzN096czdPenQxUWtGTlVVTXNTeXhGUVVGUE8wRkJRVUU3TzBGQlEySXNaVUZCVHl4TFFVRkxPVU1zVFVGQlRDeERRVUZaTEZOQlFWb3NSVUZCZFVJN1FVRkJRU3hwUWtGQlRTeFJRVUZMSzBNc1VVRkJUQ3hIUVVGblFrTXNSVUZCYUVJc1EwRkJiVUpHTEV0QlFXNUNMRU5CUVU0N1FVRkJRU3hUUVVGMlFpeERRVUZRTzBGQlEwUTdPenM3TzBGQlJVUTdPenM3T3pzN096czdPenM3ZFVKQlUxRm9RaXhSTEVWQlFWVTdRVUZCUVRzN1FVRkRhRUlzWlVGQlR5eExRVUZMT1VJc1RVRkJUQ3hEUVVGWkxGTkJRVm9zUlVGQmRVSXNWVUZCUTI1RExFTkJRVVFzUlVGQlR6dEJRVU51UXl4alFVRk5iMFlzWVVGQllTeFJRVUZMYWtZc1NVRkJUQ3hEUVVGVlRTeFpRVUZaTEU5QlFWb3NSVUZCYTBKVUxFTkJRV3hDTEVOQlFWWXNRMEZCYmtJN1FVRkRRU3hwUWtGQlQybEZMRmRCUVZkdFFpeFhRVUZYZGtZc1RVRkJXQ3hEUVVGclFtOUZMRkZCUVd4Q0xFTkJRVmdzUjBGQmVVTnRRaXhWUVVGb1JEdEJRVU5FTEZOQlNFMHNRMEZCVUR0QlFVbEVPenM3T3p0QlFVVkVPenM3T3pzN096czdkMEpCUzFNN1FVRkRVQ3hsUVVGUExFdEJRVXR5Uml4UFFVRk1MRU5CUVdFc1ZVRkJRME1zUTBGQlJEdEJRVUZCTEdsQ1FVRlBMRU5CUVVOQkxFVkJRVVZ4Uml4UFFVRkdMRWRCUVZsRExFZEJRVm9zUTBGQlowSXNRMEZCYUVJc1EwRkJSQ3hEUVVGUU8wRkJRVUVzVTBGQllpeERRVUZRTzBGQlEwUTdPenM3TzBGQlJVUTdPenM3T3pzN096dDFRa0ZMVVhKQ0xGRXNSVUZCVlR0QlFVTm9RaXhaUVVGSkxFdEJRVXR6UWl4RlFVRk1MRU5CUVZGMFFpeFJRVUZTTEVOQlFVb3NSVUZCZFVJN1FVRkRja0lzYVVKQlFVOHNTVUZCVUR0QlFVTkVPMEZCUTBRc1dVRkJUWFZDTEc5Q1FVRnZRaXhMUVVGTFNDeFBRVUZNTEVkQlFXVjRSaXhOUVVGbUxFTkJRWE5DYjBVc1VVRkJkRUlzUTBGQk1VSTdRVUZEUVN4bFFVRlBkVUlzYTBKQlFXdENha1lzVFVGQmJFSXNSMEZCTWtJc1EwRkJNMElzUjBGQkswSnBSaXhyUWtGQmEwSkRMRXRCUVd4Q0xFVkJRUzlDTEVkQlFUSkVMRXRCUVV0RExGTkJRVXdzUTBGQlpUdEJRVUZCTEdsQ1FVRk5MRXRCUVU0N1FVRkJRU3hUUVVGbUxFTkJRV3hGTzBGQlEwUTdPenM3TzBGQlJVUTdPenM3T3pzN096czdiMEpCVFV0RExGRXNSVUZCVlR0QlFVTmlMR1ZCUVU4c1MwRkJTemRETEV0QlFVd3NSMEZCWVRaRExGRkJRV0lzUTBGQlVEdEJRVU5FT3pzN096dEJRVVZFT3pzN096czdPenM3T3p0elFrRlBUMEVzVVN4RlFVRlZPMEZCUVVFN08wRkJRMllzWlVGQlR5eExRVUZMZUVRc1RVRkJUQ3hEUVVGWkxGRkJRVm9zUlVGQmMwSXNXVUZCVFR0QlFVTnFReXhqUVVGTmVVUXNWVUZCVlN4UlFVRkxReXhKUVVGTUxFTkJRVlZHTEZGQlFWWXNRMEZCYUVJN1FVRkRRU3hqUVVGSkxFOUJRVTlETEU5QlFWQXNTMEZCYlVJc1ZVRkJka0lzUlVGQmJVTTdRVUZEYWtNc2EwSkJRVTBzU1VGQlNYQkZMRk5CUVVvc1EwRkJZeXc0UlVGQlpDeERRVUZPTzBGQlEwUTdRVUZEUkN4cFFrRkJUeXhaUVVGaE8wRkJRVUVzT0VOQlFWUnpSU3hKUVVGVE8wRkJRVlJCTEd0Q1FVRlRPMEZCUVVFN08wRkJRMnhDTEdkQ1FVRk5ReXhYUVVGWExFOUJRVThzVVVGQlN6ZEhMRkZCUVV3c1JVRkJaVGhITEZWQlFYUkNMRXRCUVhGRExGVkJRWEpETEVkQlEySXNVVUZCU3psSExGRkJRVXdzUlVGQlpUaEhMRlZCUVdZc1EwRkJNRUk3UVVGQlFTeHhRa0ZCVFVvc2VVSkJRVmRGTEVsQlFWZ3NRMEZCVGp0QlFVRkJMR0ZCUVRGQ0xFTkJSR0VzUjBGRllrWXNlVUpCUVZkRkxFbEJRVmdzUTBGR1NqdEJRVWRCTEc5Q1FVRkxNVWNzU1VGQlRDeEZRVUZYYzBRc1RVRkJXRHRCUVVOQkxHMUNRVUZQY1VRc1VVRkJVRHRCUVVORUxGZEJUa1E3UVVGUFJDeFRRVnBOTEVOQlFWQTdRVUZoUkRzN096czdRVUZGUkRzN096czdPenM3T3pzd1FrRk5WMG9zVVN4RlFVRlZPMEZCUVVFN08wRkJRMjVDTEZsQlFVMXlSU3hWUVVGVkxEWkNRVUZYTEV0QlFVdHFReXhQUVVGTUxFTkJRVmdzUTBGQmFFSTdRVUZEUVN4WlFVRkpMRTlCUVU5cFF5eFJRVUZSYmtJc1NVRkJaaXhMUVVGM1FpeFZRVUUxUWl4RlFVRjNRenRCUVVOMFF5eG5Ra0ZCVFN4SlFVRkpPRVlzVlVGQlNpeERRVUZsTEhsRVFVRm1MRU5CUVU0N1FVRkRSRHM3UVVGRlJDeGxRVUZQTEV0QlFVczVSQ3hOUVVGTUxFTkJRVmtzV1VGQldpeEZRVUV3UWl4VlFVRkRia01zUTBGQlJDeEZRVUZQTzBGQlEzUkRMR05CUVVsQkxFVkJRVVZ0UkN4UlFVRkdMRXRCUVdVc1RVRkJia0lzUlVGQk1rSTdRVUZEZWtJc2EwSkJRVTBzU1VGQlNUTkNMRk5CUVVvc1EwRkJZeXh2UlVGQlpDeERRVUZPTzBGQlEwUTdRVUZEUkN4alFVRkpMRTlCUVU5dFJTeFJRVUZRTEV0QlFXOUNMRkZCUVhoQ0xFVkJRV3RETzBGQlEyaERMR3RDUVVGTkxFbEJRVWx1UlN4VFFVRktMRU5CUVdNc2VVUkJRV1FzUTBGQlRqdEJRVU5FTzBGQlEwUXNZMEZCVFhOQ0xGRkJRVkVzVVVGQlMwRXNTMEZCVEN4RlFVRmtPMEZCUTBFc1kwRkJTU3hEUVVGRExITkNRVUZKUVN4TFFVRktMRVZCUVZjMlF5eFJRVUZZTEVOQlFVd3NSVUZCTWtJN1FVRkRla0lzYTBKQlFVMHNTVUZCU1c1R0xFdEJRVW9zT0VSQlFYbEViVVlzVVVGQmVrUXNiVUpCUVU0N1FVRkRSRHRCUVVORUxHTkJRVTFQTEZsQlFWbHdSQ3hOUVVGTk5rTXNVVUZCVGl4RFFVRnNRanRCUVVOQkxHTkJRVWtzVDBGQlQwOHNVMEZCVUN4TFFVRnhRaXhWUVVGNlFpeEZRVUZ4UXp0QlFVTnVReXhyUWtGQlRTeEpRVUZKTVVVc1UwRkJTaXcyUkVGQk5FUnRSU3hSUVVFMVJDeHJSVUZCY1VoUExGTkJRWEpJTEhsRFFVRnhTRUVzVTBGQmNrZ3NZMEZCVGp0QlFVTkVPenRCUVVWRUxHbENRVUZQTEZsQlFXRTdRVUZEYkVJc1owSkJRVTFETEZWQlFWVkVMSEZEUVVGb1FqdEJRVU5CTEdkQ1FVRk5SU3hWUVVGVk9VVXNVVUZCVVc1Q0xFbEJRVklzUTBGQllXZEhMRTlCUVdJc1EwRkJhRUk3UVVGRFFTeHRRa0ZCVHl4UlFVRkxhRWNzU1VGQlRDeERRVUZWYVVjc1QwRkJWaXhGUVVGdFFpeEpRVUZ1UWl4RlFVRjVRaXhSUVVGTEwwY3NUMEZCVEN4RFFVRjZRaXhEUVVGUU8wRkJRMFFzVjBGS1JEdEJRVXRFTEZOQmNrSk5MRU5CUVZBN1FVRnpRa1E3T3pzN08wRkJSVVE3T3pzN096czdPenR4UWtGTFRUdEJRVU5LTEdWQlFVOHNTMEZCU3poRExFMUJRVXdzUTBGQldTeExRVUZhTEVWQlFXMUNMRlZCUVVOdVF5eERRVUZFTzBGQlFVRXNhVUpCUVZGQkxFVkJRVVZ4Unl4SFFVRkdMRXRCUVZWeVJDeFRRVUZXTEVkQlFYTkNMRWxCUVhSQ0xFZEJRVFpDYUVRc1JVRkJSWEZITEVkQlFYWkRPMEZCUVVFc1UwRkJia0lzUTBGQlVEdEJRVU5FT3pzN096dEJRVVZFT3pzN096czdPenM3TzNOQ1FVMVBPMEZCUTB3c1pVRkJUeXhMUVVGTGJFVXNUVUZCVEN4RFFVRlpMRTFCUVZvc1JVRkJiMElzVlVGQlEyNURMRU5CUVVRN1FVRkJRU3hwUWtGQlR5eDFRa0ZCVjBFc1EwRkJXQ3hEUVVGUU8wRkJRVUVzVTBGQmNFSXNRMEZCVUR0QlFVTkVPenM3T3p0QlFVVkVPenM3T3pzN096czdPenR6UWtGUFR6dEJRVU5NTEZsQlFVMXpRaXhWUVVGVkxEWkNRVUZYTEV0QlFVdHFReXhQUVVGTUxFTkJRVmdzUTBGQmFFSTdRVUZEUVN4bFFVRlBMRXRCUVVzNFF5eE5RVUZNTEVOQlFWa3NUVUZCV2l4RlFVRnZRaXhWUVVGRGJrTXNRMEZCUkR0QlFVRkJMR2xDUVVONlFuTkNMRkZCUVZGblJpeHBRa0ZCVWl4SFFVRTBRbWhHTEZGQlFWRm5SaXhwUWtGQlVpeERRVUV3UW5SSExFTkJRVEZDTEVOQlFUVkNMRWRCUVRKRUxEaENRVUZyUWtFc1EwRkJiRUlzUTBGRWJFTTdRVUZCUVN4VFFVRndRaXhEUVVGUU8wRkJSMFE3T3pzN08wRkJSVVE3T3pzN096czdPenM3T3p0M1FrRlJVM1ZITEZNc1JVRkJWenRCUVVOc1FpeFpRVUZKTEU5QlFVOUJMRk5CUVZBc1MwRkJjVUlzVVVGQmNrSXNTVUZCYVVOQkxGVkJRVlZETEU5QlFWWXNRMEZCYTBJc1IwRkJiRUlzVFVGQk1rSXNRMEZCUXl4RFFVRnFSU3hGUVVGdlJUdEJRVU5zUlR0QlFVTkJReXhyUWtGQlVVTXNTVUZCVWl4RFFVRmhMRzlKUVVGaU8wRkJRMFE3UVVGRFJDeGxRVUZQTEV0QlFVdDJSU3hOUVVGTUxFTkJRVmtzVlVGQldpeEZRVUYzUWl4VlFVRkRia01zUTBGQlJEdEJRVUZCTEdsQ1FVRlBMR2REUVVGaFFTeERRVUZpTEVWQlFXZENkVWNzVTBGQmFFSXNRMEZCVUR0QlFVRkJMRk5CUVhoQ0xFTkJRVkE3UVVGRFJEczdPenM3UVVGRlJEczdPenM3T3pzN096czdkVUpCVDFGSkxFVXNSVUZCU1R0QlFVRkJPenRCUVVOV0xHRkJRVXQyUnl4blFrRkJUQ3hIUVVGM1FuVkRMRTlCUVhoQ0xFTkJRV2RETEZWQlFVTXpReXhEUVVGRUxFVkJRVWswUnl4RFFVRktPMEZCUVVFc2FVSkJRVlZFTEVkQlFVZHlSQ3hKUVVGSUxFTkJRVkVzVDBGQlVpeEZRVUZqTEZGQlFVdHVSQ3hKUVVGTUxFTkJRVlZJTEVOQlFWWXNRMEZCWkN4RlFVRTBRalJITEVOQlFUVkNMRU5CUVZZN1FVRkJRU3hUUVVGb1F6dEJRVU5CTEdWQlFVOHNTVUZCVUR0QlFVTkVPenM3T3p0QlFVVkVPenM3T3pzN096czdPenR0UWtGUFNVUXNSU3hGUVVGSk8wRkJRVUU3TzBGQlEwNHNaVUZCVHl4TFFVRkxka2NzWjBKQlFVd3NSMEZCZDBKcFF5eEhRVUY0UWl4RFFVRTBRaXhWUVVGRGNrTXNRMEZCUkN4RlFVRkpORWNzUTBGQlNqdEJRVUZCTEdsQ1FVRlZSQ3hIUVVGSGNrUXNTVUZCU0N4RFFVRlJMRTlCUVZJc1JVRkJZeXhSUVVGTGJrUXNTVUZCVEN4RFFVRlZTQ3hEUVVGV0xFTkJRV1FzUlVGQk5FSTBSeXhEUVVFMVFpeERRVUZXTzBGQlFVRXNVMEZCTlVJc1EwRkJVRHRCUVVORU96czdPenRCUVVWRU96czdPenM3T3pzN096czdjMEpCVVU5RUxFVXNSVUZCT0VJN1FVRkJRVHM3UVVGQlFTeFpRVUV4UWtVc1dVRkJNRUlzZFVWQlFWZzNSQ3hUUVVGWE96dEJRVU51UXl4WlFVRkpReXhWUVVGVk1VTXNUVUZCVml4SFFVRnRRaXhEUVVGMlFpeEZRVUV3UWp0QlFVTjRRaXhwUWtGQlR5eExRVUZMU0N4blFrRkJUQ3hIUVVGM1FqQkhMRTFCUVhoQ0xFTkJRMHdzVlVGQlEwTXNTMEZCUkN4RlFVRlJMMGNzUTBGQlVpeEZRVUZYTkVjc1EwRkJXRHRCUVVGQkxHMUNRVUZwUWtRc1IwRkJSM0pFTEVsQlFVZ3NRMEZCVVN4UFFVRlNMRVZCUVdONVJDeExRVUZrTEVWQlFYRkNMRkZCUVVzMVJ5eEpRVUZNTEVOQlFWVklMRU5CUVZZc1EwRkJja0lzUlVGQmJVTTBSeXhEUVVGdVF5eERRVUZxUWp0QlFVRkJMRmRCUkVzc1JVRkZURU1zV1VGR1N5eERRVUZRTzBGQlNVUTdRVUZEUkN4bFFVRlBMRXRCUVV0NlJ5eG5Ra0ZCVEN4SFFVRjNRakJITEUxQlFYaENMRU5CUVN0Q0xGVkJRVU5ETEV0QlFVUXNSVUZCVVM5SExFTkJRVklzUlVGQlZ6UkhMRU5CUVZnN1FVRkJRU3hwUWtGQmFVSkVMRWRCUVVkeVJDeEpRVUZJTEVOQlEzSkVMRTlCUkhGRUxFVkJSWEpFYzBRc1RVRkJUU3hEUVVGT0xFZEJRVlVzVVVGQlMzcEhMRWxCUVV3c1EwRkJWVFJITEV0QlFWWXNRMEZCVml4SFFVRTJRa0VzUzBGR2QwSXNSVUZIY2tRc1VVRkJTelZITEVsQlFVd3NRMEZCVlVnc1EwRkJWaXhEUVVoeFJDeEZRVWx5UkRSSExFTkJTbkZFTEVOQlFXcENPMEZCUVVFc1UwRkJMMElzUTBGQlVEdEJRVTFFT3pzN096dEJRVVZFT3pzN096czdPenM3T3pzN01rSkJVVmxFTEVVc1JVRkJPRUk3UVVGQlFUczdRVUZCUVN4WlFVRXhRa1VzV1VGQk1FSXNkVVZCUVZnM1JDeFRRVUZYT3p0QlFVTjRReXhaUVVGSlF5eFZRVUZWTVVNc1RVRkJWaXhIUVVGdFFpeERRVUYyUWl4RlFVRXdRanRCUVVONFFpeHBRa0ZCVHl4TFFVRkxTQ3huUWtGQlRDeEhRVUYzUWpSSExGZEJRWGhDTEVOQlEwd3NWVUZCUTBRc1MwRkJSQ3hGUVVGUkwwY3NRMEZCVWl4RlFVRlhORWNzUTBGQldEdEJRVUZCTEcxQ1FVRnBRa1FzUjBGQlIzSkVMRWxCUVVnc1EwRkJVU3hQUVVGU0xFVkJRV041UkN4TFFVRmtMRVZCUVhGQ0xGRkJRVXMxUnl4SlFVRk1MRU5CUVZWSUxFTkJRVllzUTBGQmNrSXNSVUZCYlVNMFJ5eERRVUZ1UXl4RFFVRnFRanRCUVVGQkxGZEJSRXNzUlVGRlRFTXNXVUZHU3l4RFFVRlFPMEZCU1VRN1FVRkRSQ3hsUVVGUExFdEJRVXQ2Unl4blFrRkJUQ3hIUVVGM1FqUkhMRmRCUVhoQ0xFTkJRVzlETEZWQlFVTkVMRXRCUVVRc1JVRkJVUzlITEVOQlFWSXNSVUZCVnpSSExFTkJRVmc3UVVGQlFTeHBRa0ZCYVVKRUxFZEJRVWR5UkN4SlFVRklMRU5CUXpGRUxFOUJSREJFTEVWQlJURkVjMFFzVFVGQlRTeERRVUZPTEVkQlFWVXNVVUZCUzNwSExFbEJRVXdzUTBGQlZUUkhMRXRCUVZZc1EwRkJWaXhIUVVFMlFrRXNTMEZHTmtJc1JVRkhNVVFzVVVGQlN6VkhMRWxCUVV3c1EwRkJWVWdzUTBGQlZpeERRVWd3UkN4RlFVa3hSRFJITEVOQlNqQkVMRU5CUVdwQ08wRkJRVUVzVTBGQmNFTXNRMEZCVUR0QlFVMUVPenM3T3p0QlFVVkVPenM3T3pzN096czdPenM3Y1VKQlVVMUxMRXNzUlVGQlQwTXNSeXhGUVVGTE8wRkJRMmhDTEdWQlFVOHNTMEZCU3k5SExFbEJRVXdzUTBGQlZTeExRVUZMUXl4blFrRkJUQ3hIUVVGM1FpdEhMRXRCUVhoQ0xFTkJRVGhDUml4TFFVRTVRaXhGUVVGeFEwTXNSMEZCY2tNc1EwRkJWaXhEUVVGUU8wRkJRMFE3T3pzN08wRkJSVVE3T3pzN096czdPenM3YjBKQlRVdHFSQ3hSTEVWQlFWVTdRVUZEWWl4WlFVRkpMRXRCUVVzM1JTeEpRVUZNTEUxQlFXVXNTVUZCYmtJc1JVRkJlVUk3UVVGRGRrSXNaMEpCUVUwc1NVRkJTVzlDTEV0QlFVb3NRMEZCVlN4dlJFRkJWaXhEUVVGT08wRkJRMFE3UVVGRFJDeFpRVUZOV2l4WlFVRlpMQ3RDUVVGbGNVVXNVVUZCWml4RFFVRnNRanRCUVVOQkxHVkJRVThzUzBGQlN6ZEVMR2RDUVVGTUxFZEJRWGRDTkVRc1NVRkJlRUlzUTBGQk5rSndSU3hUUVVFM1FpeERRVUZRTzBGQlEwUTdPenM3TzBGQlJVUTdPenM3T3pzN096czdlVUpCVFZWQkxGTXNSVUZCVnp0QlFVRkJPenRCUVVOdVFpeGxRVUZQTEV0QlFVdFJMR2RDUVVGTUxFZEJRWGRDTkVRc1NVRkJlRUlzUTBGQk5rSXNWVUZCUTJoRkxFTkJRVVFzUlVGQlNUUkhMRU5CUVVvN1FVRkJRU3hwUWtGQlZXaElMRlZCUVZVd1JDeEpRVUZXTEVOQlFXVXNUMEZCWml4RlFVRnhRaXhSUVVGTGJrUXNTVUZCVEN4RFFVRlZTQ3hEUVVGV0xFTkJRWEpDTEVWQlFXMURORWNzUTBGQmJrTXNRMEZCVmp0QlFVRkJMRk5CUVRkQ0xFTkJRVkE3UVVGRFJEczdPenM3UVVGRlJEczdPenM3T3pzN096dHhRa0ZOVFRORExGRXNSVUZCVlR0QlFVTmtMRmxCUVUxeVJTeFpRVUZaTEN0Q1FVRmxjVVVzVVVGQlppeERRVUZzUWp0QlFVTkJMR1ZCUVU4c1MwRkJTemRFTEdkQ1FVRk1MRWRCUVhkQ01FUXNTMEZCZUVJc1EwRkJPRUpzUlN4VFFVRTVRaXhEUVVGUU8wRkJRMFE3T3pzN08wRkJSVVE3T3pzN096czdPenM3TUVKQlRWZEJMRk1zUlVGQlZ6dEJRVUZCT3p0QlFVTndRaXhsUVVGUExFdEJRVXRSTEdkQ1FVRk1MRWRCUVhkQ01FUXNTMEZCZUVJc1EwRkJPRUlzVlVGQlF6bEVMRU5CUVVRc1JVRkJTVFJITEVOQlFVbzdRVUZCUVN4cFFrRkJWV2hJTEZWQlFWVXdSQ3hKUVVGV0xFTkJRV1VzVDBGQlppeEZRVUZ4UWl4UlFVRkxia1FzU1VGQlRDeERRVUZWU0N4RFFVRldMRU5CUVhKQ0xFVkJRVzFETkVjc1EwRkJia01zUTBGQlZqdEJRVUZCTEZOQlFUbENMRU5CUVZBN1FVRkRSRHM3T3pzN1FVRkZSRHM3T3pzN096czdPenM3TzNWQ1FWRlJSQ3hGTEVWQlFVazdRVUZCUVRzN1FVRkRWaXhaUVVGTkwwWXNVVUZCVVN4TFFVRkxVaXhuUWtGQlRDeEhRVUYzUW1sRExFZEJRWGhDTEVOQlFUUkNMRlZCUVVOeVF5eERRVUZFTEVWQlFVazBSeXhEUVVGS08wRkJRVUVzYVVKQlFWVkVMRWRCUVVkeVJDeEpRVUZJTEVOQlFWRXNUMEZCVWl4RlFVRmpMRkZCUVV0dVJDeEpRVUZNTEVOQlFWVklMRU5CUVZZc1EwRkJaQ3hGUVVFMFFqUkhMRU5CUVRWQ0xFTkJRVlk3UVVGQlFTeFRRVUUxUWl4RFFVRmtPMEZCUTBFc1dVRkJUVkVzV1VGQldTeHBRMEZCUzNoSExFdEJRVXdzUlVGQldTeERRVUZhTEVOQlFXeENPMEZCUTBFc1pVRkJUeXhMUVVGTFZDeEpRVUZNTEVOQlFWVnBTQ3hWUVVGVmRrZ3NUVUZCVml4RFFVRnBRbEVzVDBGQmFrSXNRMEZCVml4RFFVRlFPMEZCUTBRN096czdPMEZCUlVRN096czdPenM3T3pzN08zbENRVTlWVkN4VExFVkJRVmM3UVVGQlFUczdRVUZEYmtJc1pVRkJUMFlzYlVKQlFXMUNMRWxCUVc1Q0xFVkJRWGxDTEZWQlFVTk5MRU5CUVVRc1JVRkJUenRCUVVOeVF5eGpRVUZOVlN4UFFVRlBMRkZCUVV0UUxFbEJRVXdzUTBGQlZVZ3NRMEZCVml4RFFVRmlPMEZCUTBFc2FVSkJRVTlWTEV0QlFVdElMRTFCUVV3c1IwRkJZeXhEUVVGa0xFbEJRVzFDV0N4VlFVRlZZeXhKUVVGV0xFTkJRVEZDTzBGQlEwUXNVMEZJVFN4RFFVRlFPMEZCU1VRN096czdPMEZCUlVRN096czdPenM3T3pzN2JVSkJUVWwxUlN4TExFVkJRVTg3UVVGRFZDeGxRVUZQTEV0QlFVdHZReXhYUVVGTUxFZEJRVzFDY0VNc1MwRkJia0lzUTBGQlVEdEJRVU5FT3pzN096dEJRVVZFT3pzN096czdPenM3TzJ0Q1FVMUhRU3hMTEVWQlFVODdRVUZEVWl4WlFVRk5ja1VzVVVGQlVTeExRVUZMVWl4blFrRkJUQ3hGUVVGa08wRkJRMEVzV1VGQlNUWkZMRkZCUVZGeVJTeE5RVUZOVEN4TlFVRnNRaXhGUVVFd1FqdEJRVU40UWl4cFFrRkJUeXhMUVVGTFNpeEpRVUZNTEVOQlFWVlRMRTFCUVUxeFJTeExRVUZPTEVOQlFWWXNRMEZCVUR0QlFVTkVPMEZCUTBRc1pVRkJUeXhMUVVGTE9VVXNTVUZCVEN4RFFVRlZMRVZCUVZZc1EwRkJVRHRCUVVORU96czdPenRCUVVWRU96czdPenM3T3pzN2RVSkJTMUU3UVVGRFRpeGxRVUZQTEV0QlFVdG5SaXhGUVVGTUxFTkJRVkVzUTBGQlVpeERRVUZRTzBGQlEwUTdPenM3TzBGQlJVUTdPenM3T3pzN096dHpRa0ZMVHp0QlFVTk1MR1ZCUVU4c1MwRkJTMEVzUlVGQlRDeERRVUZSTEV0QlFVczFSU3hOUVVGTUxFZEJRV01zUTBGQmRFSXNRMEZCVUR0QlFVTkVPenM3T3p0QlFVVkVPenM3T3pzN096czdlVUpCUzFVN1FVRkRVanRCUVVOQmEwY3NaMEpCUVZGRExFbEJRVklzUTBGQllTeHRSVUZCWWp0QlFVTkJMR1ZCUVU4c1EwRkJReXhMUVVGTFdTeE5RVUZNTEVWQlFWSTdRVUZEUkRzN096czdRVUZGUkRzN096czdPenM3T3pzN2QwSkJUM2RDTzBGQlFVRXNXVUZCYWtKeVJDeFJRVUZwUWl4MVJVRkJUaXhKUVVGTk96dEJRVU4wUWl4bFFVRlBhRUlzVlVGQlZURkRMRTFCUVZZc1IwRkJiVUlzUTBGQmJrSXNSMEZCZFVJc1MwRkJTMmRJTEVsQlFVd3NRMEZCVlhSRUxGRkJRVllzUlVGQmIwSnhSQ3hOUVVGd1FpeEZRVUYyUWl4SFFVRnpSQ3hMUVVGTEwwY3NUVUZCVEN4SFFVRmpMRU5CUVRORk8wRkJRMFE3T3pzN08wRkJSVVE3T3pzN096czdPenM3T3p0elFrRlJUM05GTEVrc1JVRkJUVGhDTEVVc1JVRkJTVHRCUVVObUxGbEJRVTFoTEZOQlFWTXNUMEZCVHpORExFbEJRVkFzUzBGQlowSXNVVUZCYUVJc1IwRkJNa0pCTEVsQlFUTkNMRWRCUVd0RExGTkJRV3BFTzBGQlEwRXNXVUZCVFRsQ0xGZEJRVmNzVDBGQlR6UkVMRVZCUVZBc1MwRkJZeXhWUVVGa0xFZEJRVEpDUVN4RlFVRXpRaXhIUVVGblF6bENMRWxCUVdwRU8wRkJRMEVzV1VGQlNTeExRVUZMZEVVc1RVRkJUQ3hMUVVGblFpeERRVUZ3UWl4RlFVRjFRanRCUVVOeVFpeG5Ra0ZCVFN4SlFVRkpReXhMUVVGS0xHMUNRVUZ4UW1kSUxFMUJRWEpDTEc5RVFVRTRSQ3hMUVVGTGFrZ3NUVUZCYmtVc2MwSkJRVTQ3UVVGRFJEdEJRVU5FTEdWQlFVOTNReXhUUVVGVFR5eEpRVUZVTEVOQlFXTXNTVUZCWkN4RlFVRnZRaXhMUVVGTGNrUXNaVUZCVEN4RlFVRndRaXhEUVVGUU8wRkJRMFE3T3pzN08wRkJSVVE3T3pzN096czdPenM3TzI5Q1FVOUxVeXhKTEVWQlFXdERPMEZCUVVFc1dVRkJOVUpOTEVsQlFUUkNMSFZGUVVGeVFpeExRVUZMTlVJc1NVRkJUQ3hEUVVGeFFqczdRVUZEY2tNc1dVRkJTWE5DTEdkQ1FVRm5Ra3NzV1VGQmNFSXNSVUZCYTBNN1FVRkRhRU1zYVVKQlFVOU1MRWxCUVZBN1FVRkRSRHM3UVVGSWIwTXNNa05CUVU1dlJpeEpRVUZOTzBGQlFVNUJMR05CUVUwN1FVRkJRVHM3UVVGSmNrTXNhMFJCUVZjdlJTeFpRVUZZTEdsQ1FVRjNRa3dzU1VGQmVFSXNSVUZCT0VKTkxFbEJRVGxDTEVkQlFYVkRPRVVzU1VGQmRrTTdRVUZEUkRzN096czdRVUZGUkRzN096czdPenM3T3pzN08zVkNRVkZ2UWp0QlFVRkJMRmxCUVdSNlJTeFBRVUZqTEhWRlFVRktMRVZCUVVrN08wRkJRMnhDTEdWQlFVOHNkVUpCUVZjc1MwRkJTMnBDTEdkQ1FVRk1MRVZCUVZnc1JVRkJiME5wUWl4UFFVRndReXhEUVVGUU8wRkJRMFE3T3pzN08wRkJSVVE3T3pzN096czdPenM3YlVKQlRVbHZSeXhYTEVWQlFXRTdRVUZEWmtFc2IwSkJRVmtzU1VGQldqdEJRVU5CTEdWQlFVOHNTVUZCVUR0QlFVTkVPenM3T3p0QlFVVkVPenM3T3pzN096czdPenM3TzNkQ1FWTlRPMEZCUTFBc1dVRkJTU3hMUVVGTGNra3NTVUZCVEN4TlFVRmxMRWxCUVc1Q0xFVkJRWGxDTzBGQlEzWkNMR2RDUVVGTkxFbEJRVWx2UWl4TFFVRktMRU5CUVZVc2RVUkJRVllzUTBGQlRqdEJRVU5FTzBGQlEwUXNXVUZCU1N4RFFVRkRMRXRCUVV0dVFpeFBRVUZNTEVWQlFXTnhTU3hSUVVGdVFpeEZRVUUyUWp0QlFVTXpRaXhuUWtGQlRTeEpRVUZKYkVnc1MwRkJTaXhEUVVGVkxHOUhRVUZXTEVOQlFVNDdRVUZEUkR0QlFVTkVMR0ZCUVV0MFFpeFJRVUZNTEVWQlFXVXlSQ3hQUVVGbU8wRkJRMFE3T3pzN08wRkJSVVE3T3pzN096czdPenM3TWtKQlRWazdRVUZEVml4bFFVRlBMRXRCUVVzNFJTeFhRVUZNTEVOQlFXbENMRlZCUVVNelNDeERRVUZFTzBGQlFVRXNhVUpCUVU4c1QwRkJUMEVzUlVGQlJUUklMRWxCUVVZc1JVRkJVQ3hMUVVGdlFpeFJRVUV6UWp0QlFVRkJMRk5CUVdwQ0xFTkJRVkE3UVVGRFJEczdPenM3T3pzN08wRkJSMGc3T3pzN096czdPenRKUVU5Tk0wWXNkMEk3T3p0QlFVTktPMEZCUTBFc2IwTkJRVmxxUWl4SlFVRmFMRVZCUVd0Q1V5eFJRVUZzUWl4RlFVRTBRanRCUVVGQk96dEJRVUZCTEhOS1FVTndRa0VzVTBGQlUwc3NUMEZCVkN4RlFVUnZRaXhGUVVOQlpDeEpRVVJCT3p0QlFVY3hRaXh2UTBGQmFVSTFRaXhKUVVGcVFqdEJRVU5CTEc5RFFVRnBRa1lzVVVGQmFrSXNSVUZCTWtKMVF5eFJRVUV6UWp0QlFVTkJMRmxCUVV0cVF5eFpRVUZNTEVWQlFXMUNNRU1zU1VGQmJrSXNRMEZCZDBKc1FpeEpRVUY0UWp0QlFVd3dRanRCUVUwelFqczdPenM3YzBOQlJYTkNPMEZCUTNKQ0xHTkJRVTBzU1VGQlNWRXNVMEZCU2l4RFFVRmpMSEZGUVVGa0xFTkJRVTQ3UVVGRFJEczdPenM3T3p0RlFWcHZRMVFzV1RzN1FVRmxka01zU1VGQlNUaEhMSE5DUVVGS0xFVkJRWEZDTzBGQlEyNUNReXhUUVVGUFF5eGpRVUZRTEVOQlFYTkNhRWdzWVVGQllXbElMRk5CUVc1RExFVkJRVGhEU0N4elFrRkJPVU1zUlVGQkswUTdRVUZETjBSSkxHdENRVUZqTEVsQlJDdERPMEZCUlRkRVF6dEJRVUZQTEdWQlFWTkRMRkZCUVZRc1IwRkJiMEk3UVVGQlFUczdRVUZEZWtJc1dVRkJUVU1zVDBGQlR5eExRVUZMYmtvc1MwRkJUQ3hGUVVGWk5Fa3NjMEpCUVZvc1IwRkJZanRCUVVOQkxGbEJRVTEyUnl4VlFVRlZMRFpDUVVGWExFdEJRVXRxUXl4UFFVRk1MRU5CUVZnc1EwRkJhRUk3UVVGRFFTeG5SRUZEUjNkSkxITkNRVVJJTEdOQlEzTkNPMEZCUVVVc2FVSkJRVThzU1VGQlVEdEJRVUZqTEZOQlJIUkRPMEZCUVVFc01FSkJSVk03UVVGRFRDeG5Ra0ZCVFZFc1QwRkJUMFFzUzBGQlMwTXNTVUZCVEN4RlFVRmlPMEZCUTBFc1owSkJRVWxCTEV0QlFVdERMRWxCUVZRc1JVRkJaVHRCUVVOaUxIRkNRVUZQTEVWQlFVVkJMRTFCUVUwc1NVRkJVaXhGUVVGUU8wRkJRMFE3UVVGRFJDeHRRa0ZCVHp0QlFVTk1RU3h2UWtGQlRTeExRVVJFTzBGQlJVeEtMSEZDUVVGUE5VY3NVVUZCVVdNc1lVRkJVaXhEUVVGelFtbEhMRXRCUVV0SUxFdEJRVE5DTzBGQlJrWXNZVUZCVUR0QlFVbEVPenRCUVZoSU8wRkJRVUU3UVVGaFJEczdRVUZvUWtRc1lVRkJaMEpETEZGQlFXaENPMEZCUVVFN1FVRkdOa1FzUjBGQkwwUTdRVUZ2UWtRN08wRkJSVVFzVTBGQlUwa3NZMEZCVkN4RFFVRjNRakZETEVsQlFYaENMRVZCUVRoQ01rTXNXVUZCT1VJc1JVRkJORU03UVVGRE1VTldMRk5CUVU5RExHTkJRVkFzUTBGQmMwSm9TQ3hoUVVGaGFVZ3NVMEZCYmtNc1JVRkJPRU51UXl4SlFVRTVReXhGUVVGdlJEdEJRVU5zUkZBc1QwRkVhMFE3UVVGQlFTeHhRa0ZETlVNN1FVRkRTaXhqUVVGTkxFbEJRVWs1UlN4TFFVRktMSGxFUVVOblEzRkdMRWxCUkdoRExEaEtRVWRHTWtNc1dVRklSU3hsUVVGT08wRkJTMFE3TzBGQlVHbEVPMEZCUVVFN08wRkJVV3hFUXl4blFrRkJXU3hMUVZKelF6dEJRVk5zUkZJc2EwSkJRV003UVVGVWIwTXNSMEZCY0VRN1FVRlhSRHM3UVVGRlJFMHNaVUZCWlN4TlFVRm1MRVZCUVhWQ0xHbEVRVUYyUWp0QlFVTkJRU3hsUVVGbExFOUJRV1lzUlVGQmQwSXNhMFJCUVhoQ08wRkJRMEZCTEdWQlFXVXNWVUZCWml4RlFVRXlRaXhGUVVFelFqdEJRVU5CUVN4bFFVRmxMRk5CUVdZc1JVRkJNRUlzUlVGQk1VSTdRVUZEUVVFc1pVRkJaU3hwUWtGQlppeEZRVUZyUXl4RlFVRnNRenM3Y1VKQlJXVjRTQ3haSWl3aVptbHNaU0k2SWxKbFlXTjBWM0poY0hCbGNpNXFjeUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW1sdGNHOXlkQ0JtYkdGMElHWnliMjBnSjJGeWNtRjVMbkJ5YjNSdmRIbHdaUzVtYkdGMEp6dGNibWx0Y0c5eWRDQm9ZWE1nWm5KdmJTQW5hR0Z6Snp0Y2JseHVhVzF3YjNKMElIdGNiaUFnWTI5dWRHRnBibk5EYUdsc1pISmxibE4xWWtGeWNtRjVMRnh1SUNCMGVYQmxUMlpPYjJSbExGeHVJQ0JrYVhOd2JHRjVUbUZ0WlU5bVRtOWtaU3hjYmlBZ1NWUkZVa0ZVVDFKZlUxbE5RazlNTEZ4dUlDQnViMlJsUlhGMVlXd3NYRzRnSUc1dlpHVk5ZWFJqYUdWekxGeHVJQ0J0WVd0bFQzQjBhVzl1Y3l4Y2JpQWdjM2x0TEZ4dUlDQndjbWwyWVhSbFUyVjBMRnh1SUNCamJHOXVaVVZzWlcxbGJuUXNYRzRnSUhKbGJtUmxjbVZrUkdsMlpTeGNiaUFnYVhORGRYTjBiMjFEYjIxd2IyNWxiblFzWEc0Z0lHeHZZV1JEYUdWbGNtbHZVbTl2ZEN4Y2JuMGdabkp2YlNBbkxpOVZkR2xzY3ljN1hHNXBiWEJ2Y25RZ1oyVjBRV1JoY0hSbGNpQm1jbTl0SUNjdUwyZGxkRUZrWVhCMFpYSW5PMXh1YVcxd2IzSjBJSHNnWkdWaWRXZE9iMlJsY3lCOUlHWnliMjBnSnk0dlJHVmlkV2NuTzF4dWFXMXdiM0owSUh0Y2JpQWdjSEp2Y0hOUFprNXZaR1VzWEc0Z0lHaGhjME5zWVhOelRtRnRaU3hjYmlBZ1kyaHBiR1J5Wlc1UFprNXZaR1VzWEc0Z0lIQmhjbVZ1ZEhOUFprNXZaR1VzWEc0Z0lIUnlaV1ZHYVd4MFpYSXNYRzRnSUdkbGRGUmxlSFJHY205dFNHOXpkRTV2WkdWekxGeHVJQ0JuWlhSSVZFMU1Sbkp2YlVodmMzUk9iMlJsY3l4Y2JuMGdabkp2YlNBbkxpOVNVMVJVY21GMlpYSnpZV3duTzF4dVhHNXBiWEJ2Y25RZ2V5QmlkV2xzWkZCeVpXUnBZMkYwWlN3Z2NtVmtkV05sVkhKbFpYTkNlVk5sYkdWamRHOXlJSDBnWm5KdmJTQW5MaTl6Wld4bFkzUnZjbk1uTzF4dVhHNWpiMjV6ZENCT1QwUkZJRDBnYzNsdEtDZGZYMjV2WkdWZlh5Y3BPMXh1WTI5dWMzUWdUazlFUlZNZ1BTQnplVzBvSjE5ZmJtOWtaWE5mWHljcE8xeHVZMjl1YzNRZ1VrVk9SRVZTUlZJZ1BTQnplVzBvSjE5ZmNtVnVaR1Z5WlhKZlh5Y3BPMXh1WTI5dWMzUWdWVTVTUlU1RVJWSkZSQ0E5SUhONWJTZ25YMTkxYm5KbGJtUmxjbVZrWDE4bktUdGNibU52Ym5OMElGSlBUMVFnUFNCemVXMG9KMTlmY205dmRGOWZKeWs3WEc1amIyNXpkQ0JQVUZSSlQwNVRJRDBnYzNsdEtDZGZYMjl3ZEdsdmJuTmZYeWNwTzF4dVkyOXVjM1FnVWs5UFZGOU9UMFJGVXlBOUlITjViU2duWDE5eWIyOTBUbTlrWlhOZlh5Y3BPMXh1WTI5dWMzUWdWMUpCVUZCSlRrZGZRMDlOVUU5T1JVNVVJRDBnYzNsdEtDZGZYM2R5WVhCd2FXNW5RMjl0Y0c5dVpXNTBYMThuS1R0Y2JtTnZibk4wSUV4SlRrdEZSRjlTVDA5VVV5QTlJSE41YlNnblgxOXNhVzVyWldSU2IyOTBjMTlmSnlrN1hHNWpiMjV6ZENCVlVFUkJWRVZFWDBKWklEMGdjM2x0S0NkZlgzVndaR0YwWldSQ2VWOWZKeWs3WEc1Y2JpOHFLbHh1SUNvZ1JtbHVaSE1nWVd4c0lHNXZaR1Z6SUdsdUlIUm9aU0JqZFhKeVpXNTBJSGR5WVhCd1pYSWdibTlrWlhNbklISmxibVJsY2lCMGNtVmxjeUIwYUdGMElHMWhkR05vSUhSb1pTQndjbTkyYVdSbFpDQndjbVZrYVdOaGRHVmNiaUFxSUdaMWJtTjBhVzl1TGx4dUlDcGNiaUFxSUVCd1lYSmhiU0I3VW1WaFkzUlhjbUZ3Y0dWeWZTQjNjbUZ3Y0dWeVhHNGdLaUJBY0dGeVlXMGdlMFoxYm1OMGFXOXVmU0J3Y21Wa2FXTmhkR1ZjYmlBcUlFQndZWEpoYlNCN1JuVnVZM1JwYjI1OUlHWnBiSFJsY2x4dUlDb2dRSEpsZEhWeWJuTWdlMUpsWVdOMFYzSmhjSEJsY24xY2JpQXFMMXh1Wm5WdVkzUnBiMjRnWm1sdVpGZG9aWEpsVlc1M2NtRndjR1ZrS0hkeVlYQndaWElzSUhCeVpXUnBZMkYwWlN3Z1ptbHNkR1Z5SUQwZ2RISmxaVVpwYkhSbGNpa2dlMXh1SUNCeVpYUjFjbTRnZDNKaGNIQmxjaTVtYkdGMFRXRndLQ2h1S1NBOVBpQm1hV3gwWlhJb2JpNW5aWFJPYjJSbFNXNTBaWEp1WVd3b0tTd2djSEpsWkdsallYUmxLU2s3WEc1OVhHNWNiaThxS2x4dUlDb2dVbVYwZFhKdWN5QmhJRzVsZHlCM2NtRndjR1Z5SUdsdWMzUmhibU5sSUhkcGRHZ2diMjVzZVNCMGFHVWdibTlrWlhNZ2IyWWdkR2hsSUdOMWNuSmxiblFnZDNKaGNIQmxjaUJwYm5OMFlXNWpaU0IwYUdGMElHMWhkR05vWEc0Z0tpQjBhR1VnY0hKdmRtbGtaV1FnY0hKbFpHbGpZWFJsSUdaMWJtTjBhVzl1TGx4dUlDcGNiaUFxSUVCd1lYSmhiU0I3VW1WaFkzUlhjbUZ3Y0dWeWZTQjNjbUZ3Y0dWeVhHNGdLaUJBY0dGeVlXMGdlMFoxYm1OMGFXOXVmU0J3Y21Wa2FXTmhkR1ZjYmlBcUlFQnlaWFIxY201eklIdFNaV0ZqZEZkeVlYQndaWEo5WEc0Z0tpOWNibVoxYm1OMGFXOXVJR1pwYkhSbGNsZG9aWEpsVlc1M2NtRndjR1ZrS0hkeVlYQndaWElzSUhCeVpXUnBZMkYwWlNrZ2UxeHVJQ0J5WlhSMWNtNGdkM0poY0hCbGNpNTNjbUZ3S0hkeVlYQndaWEl1WjJWMFRtOWtaWE5KYm5SbGNtNWhiQ2dwTG1acGJIUmxjaWh3Y21Wa2FXTmhkR1VwTG1acGJIUmxjaWhDYjI5c1pXRnVLU2s3WEc1OVhHNWNibVoxYm1OMGFXOXVJR2RsZEZKdmIzUk9iMlJsU1c1MFpYSnVZV3dvZDNKaGNIQmxjaWtnZTF4dUlDQnBaaUFvZDNKaGNIQmxjbHRTVDA5VVhTNXNaVzVuZEdnZ0lUMDlJREVwSUh0Y2JpQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KMmRsZEZKdmIzUk9iMlJsU1c1MFpYSnVZV3dvZDNKaGNIQmxjaWtnWTJGdUlHOXViSGtnWW1VZ1kyRnNiR1ZrSUhkb1pXNGdkM0poY0hCbGNpQjNjbUZ3Y3lCdmJtVWdibTlrWlNjcE8xeHVJQ0I5WEc0Z0lHbG1JQ2gzY21Gd2NHVnlXMUpQVDFSZElDRTlQU0IzY21Gd2NHVnlLU0I3WEc0Z0lDQWdjbVYwZFhKdUlIZHlZWEJ3WlhKYlVrOVBWRjlPVDBSRlUxMWJNRjA3WEc0Z0lIMWNiaUFnY21WMGRYSnVJSGR5WVhCd1pYSmJVazlQVkYxYlRrOUVSVjA3WEc1OVhHNWNibVoxYm1OMGFXOXVJRzV2WkdWUVlYSmxiblJ6S0hkeVlYQndaWElzSUc1dlpHVXBJSHRjYmlBZ2NtVjBkWEp1SUhCaGNtVnVkSE5QWms1dlpHVW9ibTlrWlN3Z1oyVjBVbTl2ZEU1dlpHVkpiblJsY201aGJDaDNjbUZ3Y0dWeUtTazdYRzU5WEc1Y2JtWjFibU4wYVc5dUlIQnlhWFpoZEdWVFpYUk9iMlJsY3loM2NtRndjR1Z5TENCdWIyUmxjeWtnZTF4dUlDQnBaaUFvSVc1dlpHVnpLU0I3WEc0Z0lDQWdjSEpwZG1GMFpWTmxkQ2gzY21Gd2NHVnlMQ0JPVDBSRkxDQnVkV3hzS1R0Y2JpQWdJQ0J3Y21sMllYUmxVMlYwS0hkeVlYQndaWElzSUU1UFJFVlRMQ0JiWFNrN1hHNGdJSDBnWld4elpTQnBaaUFvSVVGeWNtRjVMbWx6UVhKeVlYa29ibTlrWlhNcEtTQjdYRzRnSUNBZ2NISnBkbUYwWlZObGRDaDNjbUZ3Y0dWeUxDQk9UMFJGTENCdWIyUmxjeWs3WEc0Z0lDQWdjSEpwZG1GMFpWTmxkQ2gzY21Gd2NHVnlMQ0JPVDBSRlV5d2dXMjV2WkdWelhTazdYRzRnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdjSEpwZG1GMFpWTmxkQ2gzY21Gd2NHVnlMQ0JPVDBSRkxDQnViMlJsYzFzd1hTazdYRzRnSUNBZ2NISnBkbUYwWlZObGRDaDNjbUZ3Y0dWeUxDQk9UMFJGVXl3Z2JtOWtaWE1wTzF4dUlDQjlYRzRnSUhCeWFYWmhkR1ZUWlhRb2QzSmhjSEJsY2l3Z0oyeGxibWQwYUNjc0lIZHlZWEJ3WlhKYlRrOUVSVk5kTG14bGJtZDBhQ2s3WEc1OVhHNWNiaThxS2x4dUlDb2dRR05zWVhOeklGSmxZV04wVjNKaGNIQmxjbHh1SUNvdlhHNWpiR0Z6Y3lCU1pXRmpkRmR5WVhCd1pYSWdlMXh1SUNCamIyNXpkSEoxWTNSdmNpaHViMlJsY3l3Z2NtOXZkQ3dnY0dGemMyVmtUM0IwYVc5dWN5QTlJSHQ5S1NCN1hHNGdJQ0FnYVdZZ0tDRm5iRzlpWVd3dWQybHVaRzkzSUNZbUlDRm5iRzlpWVd3dVpHOWpkVzFsYm5RcElIdGNiaUFnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnblNYUWdiRzl2YTNNZ2JHbHJaU0I1YjNVZ1kyRnNiR1ZrSUdCdGIzVnVkQ2dwWUNCM2FYUm9iM1YwSUdFZ1oyeHZZbUZzSUdSdlkzVnRaVzUwSUdKbGFXNW5JR3h2WVdSbFpDNG5LVHRjYmlBZ0lDQjlYRzRnSUNBZ1kyOXVjM1FnYjNCMGFXOXVjeUE5SUcxaGEyVlBjSFJwYjI1ektIQmhjM05sWkU5d2RHbHZibk1wTzF4dVhHNGdJQ0FnYVdZZ0tDRnliMjkwS1NCN1hHNGdJQ0FnSUNCamIyNXpkQ0JoWkdGd2RHVnlJRDBnWjJWMFFXUmhjSFJsY2lodmNIUnBiMjV6S1R0Y2JpQWdJQ0FnSUdsbUlDZ2hZV1JoY0hSbGNpNXBjMVpoYkdsa1JXeGxiV1Z1ZENodWIyUmxjeWtwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHliM2NnYm1WM0lGUjVjR1ZGY25KdmNpZ25VbVZoWTNSWGNtRndjR1Z5SUdOaGJpQnZibXg1SUhkeVlYQWdkbUZzYVdRZ1pXeGxiV1Z1ZEhNbktUdGNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdZMjl1YzNRZ2NtVnVaR1Z5WlhJZ1BTQmhaR0Z3ZEdWeUxtTnlaV0YwWlZKbGJtUmxjbVZ5S0hzZ2JXOWtaVG9nSjIxdmRXNTBKeXdnTGk0dWIzQjBhVzl1Y3lCOUtUdGNiaUFnSUNBZ0lIQnlhWFpoZEdWVFpYUW9kR2hwY3l3Z1VrVk9SRVZTUlZJc0lISmxibVJsY21WeUtUdGNiaUFnSUNBZ0lISmxibVJsY21WeUxuSmxibVJsY2lodWIyUmxjeXdnYjNCMGFXOXVjeTVqYjI1MFpYaDBLVHRjYmlBZ0lDQWdJSEJ5YVhaaGRHVlRaWFFvZEdocGN5d2dVazlQVkN3Z2RHaHBjeWs3WEc0Z0lDQWdJQ0J3Y21sMllYUmxVMlYwVG05a1pYTW9kR2hwY3l3Z2RHaHBjMXRTUlU1RVJWSkZVbDB1WjJWMFRtOWtaU2dwS1R0Y2JpQWdJQ0FnSUhCeWFYWmhkR1ZUWlhRb2RHaHBjeXdnVDFCVVNVOU9VeXdnYjNCMGFXOXVjeWs3WEc0Z0lDQWdJQ0J3Y21sMllYUmxVMlYwS0hSb2FYTXNJRXhKVGt0RlJGOVNUMDlVVXl3Z1cxMHBPMXh1WEc0Z0lDQWdJQ0JwWmlBb2FYTkRkWE4wYjIxRGIyMXdiMjVsYm5Rb2IzQjBhVzl1Y3k1M2NtRndjR2x1WjBOdmJYQnZibVZ1ZEN3Z1lXUmhjSFJsY2lrcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUIwYUdselcxSkZUa1JGVWtWU1hTNW5aWFJYY21Gd2NHbHVaME52YlhCdmJtVnVkRkpsYm1SbGNtVnlJQ0U5UFNBblpuVnVZM1JwYjI0bktTQjdYRzRnSUNBZ0lDQWdJQ0FnZEdoeWIzY2dibVYzSUZSNWNHVkZjbkp2Y2lnbmVXOTFjaUJoWkdGd2RHVnlJR1J2WlhNZ2JtOTBJSE4xY0hCdmNuUWdZSGR5WVhCd2FXNW5RMjl0Y0c5dVpXNTBZQzRnVkhKNUlIVndaM0poWkdsdVp5QnBkQ0VuS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJQzh2SUdWemJHbHVkQzFrYVhOaFlteGxMVzVsZUhRdGJHbHVaU0J1YnkxMWMyVXRZbVZtYjNKbExXUmxabWx1WlZ4dUlDQWdJQ0FnSUNCd2NtbDJZWFJsVTJWMEtIUm9hWE1zSUZkU1FWQlFTVTVIWDBOUFRWQlBUa1ZPVkN3Z2JtVjNJRmR5WVhCd2FXNW5RMjl0Y0c5dVpXNTBWM0poY0hCbGNpaGNiaUFnSUNBZ0lDQWdJQ0IwYUdsekxDQjBhR2x6VzFKRlRrUkZVa1ZTWFM1blpYUlhjbUZ3Y0dsdVowTnZiWEJ2Ym1WdWRGSmxibVJsY21WeUtDa3NYRzRnSUNBZ0lDQWdJQ2twTzF4dUlDQWdJQ0FnSUNCMGFHbHpXMHhKVGt0RlJGOVNUMDlVVTEwdWNIVnphQ2gwYUdselcxZFNRVkJRU1U1SFgwTlBUVkJQVGtWT1ZGMHBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCd2NtbDJZWFJsVTJWMEtIUm9hWE1zSUZKRlRrUkZVa1ZTTENCeWIyOTBXMUpGVGtSRlVrVlNYU2s3WEc0Z0lDQWdJQ0J3Y21sMllYUmxVMlYwS0hSb2FYTXNJRkpQVDFRc0lISnZiM1FwTzF4dUlDQWdJQ0FnY0hKcGRtRjBaVk5sZEU1dlpHVnpLSFJvYVhNc0lHNXZaR1Z6S1R0Y2JpQWdJQ0FnSUhCeWFYWmhkR1ZUWlhRb2RHaHBjeXdnVWs5UFZGOU9UMFJGVXl3Z2NtOXZkRnRPVDBSRlUxMHBPMXh1SUNBZ0lDQWdjSEpwZG1GMFpWTmxkQ2gwYUdsekxDQlBVRlJKVDA1VExDQnliMjkwVzA5UVZFbFBUbE5kS1R0Y2JpQWdJQ0FnSUhCeWFYWmhkR1ZUWlhRb2RHaHBjeXdnVEVsT1MwVkVYMUpQVDFSVExDQmJYU2s3WEc0Z0lDQWdmVnh1SUNBZ0lIQnlhWFpoZEdWVFpYUW9kR2hwY3l3Z1ZVNVNSVTVFUlZKRlJDd2dibTlrWlhNcE8xeHVJQ0FnSUhCeWFYWmhkR1ZUWlhRb2RHaHBjeXdnVlZCRVFWUkZSRjlDV1N3Z2JuVnNiQ2s3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1VtVjBkWEp1Y3lCMGFHVWdjbTl2ZENCM2NtRndjR1Z5WEc0Z0lDQXFYRzRnSUNBcUlFQnlaWFIxY200Z2UxSmxZV04wVjNKaGNIQmxjbjFjYmlBZ0lDb3ZYRzRnSUhKdmIzUW9LU0I3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE5iVWs5UFZGMDdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nVW1WMGRYSnVjeUIwYUdVZ2QzSmhjSEJsWkNCamIyMXdiMjVsYm5RdVhHNGdJQ0FxWEc0Z0lDQXFJRUJ5WlhSMWNtNGdlMUpsWVdOMFEyOXRjRzl1Wlc1MGZWeHVJQ0FnS2k5Y2JpQWdaMlYwVG05a1pVbHVkR1Z5Ym1Gc0tDa2dlMXh1SUNBZ0lHbG1JQ2gwYUdsekxteGxibWQwYUNBaFBUMGdNU2tnZTF4dUlDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ2RTWldGamRGZHlZWEJ3WlhJNk9tZGxkRTV2WkdVb0tTQmpZVzRnYjI1c2VTQmlaU0JqWVd4c1pXUWdkMmhsYmlCM2NtRndjR2x1WnlCdmJtVWdibTlrWlNjcE8xeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdkR2hwYzF0T1QwUkZVMTFiTUYwN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dVbVYwZFhKdWN5QjBhR1VnZEdobElIZHlZWEJ3WldRZ1kyOXRjRzl1Wlc1MGN5NWNiaUFnSUNwY2JpQWdJQ29nUUhKbGRIVnliaUI3UVhKeVlYazhVbVZoWTNSRGIyMXdiMjVsYm5RK2ZWeHVJQ0FnS2k5Y2JpQWdaMlYwVG05a1pYTkpiblJsY201aGJDZ3BJSHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjMXRPVDBSRlUxMDdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nVW1WMGRYSnVjeUIwYUdVZ2QzSmhjSEJsWkNCU1pXRmpkRVZzWlcxbGJuUXVYRzRnSUNBcVhHNGdJQ0FxSUVCeVpYUjFjbTRnZTFKbFlXTjBSV3hsYldWdWRIMWNiaUFnSUNvdlhHNGdJR2RsZEVWc1pXMWxiblFvS1NCN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdWMybHVaMnhsS0NkblpYUkZiR1Z0Wlc1MEp5d2dLQ2tnUFQ0Z1oyVjBRV1JoY0hSbGNpaDBhR2x6VzA5UVZFbFBUbE5kS1M1dWIyUmxWRzlGYkdWdFpXNTBLSFJvYVhOYlRrOUVSVjBwS1R0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlNaWFIxY201eklIUm9aU0IzY21Gd2NHVmtJRkpsWVdOMFJXeGxiV1Z1ZEhNdVhHNGdJQ0FxWEc0Z0lDQXFJRUJ5WlhSMWNtNGdlMEZ5Y21GNVBGSmxZV04wUld4bGJXVnVkRDU5WEc0Z0lDQXFMMXh1SUNCblpYUkZiR1Z0Wlc1MGN5Z3BJSHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjMXRPVDBSRlUxMHViV0Z3S0NodUtTQTlQaUJuWlhSQlpHRndkR1Z5S0hSb2FYTmJUMUJVU1U5T1UxMHBMbTV2WkdWVWIwVnNaVzFsYm5Rb2Jpa3BPMXh1SUNCOVhHNWNiaUFnTHk4Z1pYTnNhVzUwTFdScGMyRmliR1V0Ym1WNGRDMXNhVzVsSUdOc1lYTnpMVzFsZEdodlpITXRkWE5sTFhSb2FYTmNiaUFnWjJWMFRtOWtaU2dwSUh0Y2JpQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KMUpsWVdOMFYzSmhjSEJsY2pvNloyVjBUbTlrWlNncElHbHpJRzV2SUd4dmJtZGxjaUJ6ZFhCd2IzSjBaV1F1SUZWelpTQlNaV0ZqZEZkeVlYQndaWEk2T21sdWMzUmhibU5sS0NrZ2FXNXpkR1ZoWkNjcE8xeHVJQ0I5WEc1Y2JpQWdMeThnWlhOc2FXNTBMV1JwYzJGaWJHVXRibVY0ZEMxc2FXNWxJR05zWVhOekxXMWxkR2h2WkhNdGRYTmxMWFJvYVhOY2JpQWdaMlYwVG05a1pYTW9LU0I3WEc0Z0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZFNaV0ZqZEZkeVlYQndaWEk2T21kbGRFNXZaR1Z6S0NrZ2FYTWdibThnYkc5dVoyVnlJSE4xY0hCdmNuUmxaQzRuS1R0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlNaWFIxY201eklIUm9aU0J2ZFhSbGNpQnRiM04wSUVSUFRVTnZiWEJ2Ym1WdWRDQnZaaUIwYUdVZ1kzVnljbVZ1ZENCM2NtRndjR1Z5TGx4dUlDQWdLbHh1SUNBZ0tpQk9UMVJGT2lCallXNGdiMjVzZVNCaVpTQmpZV3hzWldRZ2IyNGdZU0IzY21Gd2NHVnlJRzltSUdFZ2MybHVaMnhsSUc1dlpHVXVYRzRnSUNBcVhHNGdJQ0FxSUVCeVpYUjFjbTV6SUh0RVQwMURiMjF3YjI1bGJuUjlYRzRnSUNBcUwxeHVJQ0JuWlhSRVQwMU9iMlJsS0NrZ2UxeHVJQ0FnSUdOdmJuTjBJR0ZrWVhCMFpYSWdQU0JuWlhSQlpHRndkR1Z5S0hSb2FYTmJUMUJVU1U5T1UxMHBPMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbk5wYm1kc1pTZ25aMlYwUkU5TlRtOWtaU2NzSUNodUtTQTlQaUJoWkdGd2RHVnlMbTV2WkdWVWIwaHZjM1JPYjJSbEtHNHNJSFJ5ZFdVcEtUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJKWmlCMGFHVWdjbTl2ZENCamIyMXdiMjVsYm5RZ1kyOXVkR0ZwYm1Wa0lHRWdjbVZtTENCNWIzVWdZMkZ1SUdGalkyVnpjeUJwZENCb1pYSmxJR0Z1WkNCblpYUWdkR2hsSUhKbGJHVjJZVzUwWEc0Z0lDQXFJSEpsWVdOMElHTnZiWEJ2Ym1WdWRDQnBibk4wWVc1alpTQnZjaUJJVkUxTUlHVnNaVzFsYm5RZ2FXNXpkR0Z1WTJVdVhHNGdJQ0FxWEc0Z0lDQXFJRTVQVkVVNklHTmhiaUJ2Ym14NUlHSmxJR05oYkd4bFpDQnZiaUJoSUhkeVlYQndaWElnYVc1emRHRnVZMlVnZEdoaGRDQnBjeUJoYkhOdklIUm9aU0J5YjI5MElHbHVjM1JoYm1ObExseHVJQ0FnS2x4dUlDQWdLaUJBY0dGeVlXMGdlMU4wY21sdVozMGdjbVZtYm1GdFpWeHVJQ0FnS2lCQWNtVjBkWEp1Y3lCN1VtVmhZM1JEYjIxd2IyNWxiblFnZkNCSVZFMU1SV3hsYldWdWRIMWNiaUFnSUNvdlhHNGdJSEpsWmloeVpXWnVZVzFsS1NCN1hHNGdJQ0FnYVdZZ0tIUm9hWE5iVWs5UFZGMGdJVDA5SUhSb2FYTXBJSHRjYmlBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpZ25VbVZoWTNSWGNtRndjR1Z5T2pweVpXWW9jbVZtYm1GdFpTa2dZMkZ1SUc5dWJIa2dZbVVnWTJGc2JHVmtJRzl1SUhSb1pTQnliMjkwSnlrN1hHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG1sdWMzUmhibU5sS0NrdWNtVm1jMXR5WldadVlXMWxYVHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCU1pYUjFjbTV6SUhSb1pTQjNjbUZ3Y0dWeUozTWdkVzVrWlhKc2VXbHVaeUJwYm5OMFlXNWpaUzVjYmlBZ0lDcGNiaUFnSUNvZ1JYaGhiWEJzWlRwY2JpQWdJQ29nWUdCZ1hHNGdJQ0FxSUdOdmJuTjBJSGR5WVhCd1pYSWdQU0J0YjNWdWRDZzhUWGxEYjIxd2IyNWxiblFnTHo0cE8xeHVJQ0FnS2lCamIyNXpkQ0JwYm5OMElEMGdkM0poY0hCbGNpNXBibk4wWVc1alpTZ3BPMXh1SUNBZ0tpQmxlSEJsWTNRb2FXNXpkQ2t1ZEc4dVltVXVhVzV6ZEdGdVkyVlBaaWhOZVVOdmJYQnZibVZ1ZENrN1hHNGdJQ0FxSUdCZ1lGeHVJQ0FnS2lCQWNtVjBkWEp1Y3lCN1VtVmhZM1JEYjIxd2IyNWxiblI4UkU5TlEyOXRjRzl1Wlc1MGZWeHVJQ0FnS2k5Y2JpQWdhVzV6ZEdGdVkyVW9LU0I3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11YzJsdVoyeGxLQ2RwYm5OMFlXNWpaU2NzSUNncElEMCtJSFJvYVhOYlRrOUVSVjB1YVc1emRHRnVZMlVwTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFbG1JR0VnWUhkeVlYQndhVzVuUTI5dGNHOXVaVzUwWUNCM1lYTWdjR0Z6YzJWa0lHbHVJR0J2Y0hScGIyNXpZQ3dnZEdocGN5QnRaWFJvYjJSeklISmxkSFZ5Ym5NZ1lTQmdVbVZoWTNSWGNtRndjR1Z5WUNCaGNtOTFibVJjYmlBZ0lDb2dkR2hsSUhKbGJtUmxjbVZrSUdCM2NtRndjR2x1WjBOdmJYQnZibVZ1ZEdBdUlGUm9hWE1nWUZKbFlXTjBWM0poY0hCbGNtQWdZMkZ1SUdKbElIVnpaV1FnZEc4Z2RYQmtZWFJsSUhSb1pWeHVJQ0FnS2lCZ2QzSmhjSEJwYm1kRGIyMXdiMjVsYm5SZ0ozTWdjSEp2Y0hNc0lITjBZWFJsTENCbGRHTXVYRzRnSUNBcVhHNGdJQ0FxSUVCeVpYUjFjbTV6SUZKbFlXTjBWM0poY0hCbGNseHVJQ0FnS2k5Y2JpQWdaMlYwVjNKaGNIQnBibWREYjIxd2IyNWxiblFvS1NCN1hHNGdJQ0FnYVdZZ0tIUm9hWE5iVWs5UFZGMGdJVDA5SUhSb2FYTXBJSHRjYmlBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpZ25VbVZoWTNSWGNtRndjR1Z5T2pwblpYUlhjbUZ3Y0dsdVowTnZiWEJ2Ym1WdWRDZ3BJR05oYmlCdmJteDVJR0psSUdOaGJHeGxaQ0J2YmlCMGFHVWdjbTl2ZENjcE8xeHVJQ0FnSUgxY2JpQWdJQ0JwWmlBb0lYUm9hWE5iVDFCVVNVOU9VMTB1ZDNKaGNIQnBibWREYjIxd2IyNWxiblFwSUh0Y2JpQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWduVW1WaFkzUlhjbUZ3Y0dWeU9qcG5aWFJYY21Gd2NHbHVaME52YlhCdmJtVnVkQ2dwSUdOaGJpQnZibXg1SUdKbElHTmhiR3hsWkNCdmJpQmhJSGR5WVhCd1pYSWdkR2hoZENCM1lYTWdiM0pwWjJsdVlXeHNlU0J3WVhOelpXUWdZU0JnZDNKaGNIQnBibWREYjIxd2IyNWxiblJnSUc5d2RHbHZiaWNwTzF4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z2RHaHBjMXRYVWtGUVVFbE9SMTlEVDAxUVQwNUZUbFJkTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFWnZjbU5sY3lCaElISmxMWEpsYm1SbGNpNGdWWE5sWm5Wc0lIUnZJSEoxYmlCaVpXWnZjbVVnWTJobFkydHBibWNnZEdobElISmxibVJsY2lCdmRYUndkWFFnYVdZZ2MyOXRaWFJvYVc1bklHVjRkR1Z5Ym1Gc1hHNGdJQ0FxSUcxaGVTQmlaU0IxY0dSaGRHbHVaeUIwYUdVZ2MzUmhkR1VnYjJZZ2RHaGxJR052YlhCdmJtVnVkQ0J6YjIxbGQyaGxjbVV1WEc0Z0lDQXFYRzRnSUNBcUlFNVBWRVU2SUc1dklHMWhkSFJsY2lCM2FHRjBJR2x1YzNSaGJtTmxJSFJvYVhNZ2FYTWdZMkZzYkdWa0lHOXVMQ0JwZENCM2FXeHNJR0ZzZDJGNWN5QjFjR1JoZEdVZ2RHaGxJSEp2YjNRdVhHNGdJQ0FxWEc0Z0lDQXFJRUJ5WlhSMWNtNXpJSHRTWldGamRGZHlZWEJ3WlhKOVhHNGdJQ0FxTDF4dUlDQjFjR1JoZEdVb0tTQjdYRzRnSUNBZ1kyOXVjM1FnY205dmRDQTlJSFJvYVhOYlVrOVBWRjA3WEc0Z0lDQWdhV1lnS0hSb2FYTWdJVDA5SUhKdmIzUXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQnliMjkwTG5Wd1pHRjBaU2dwTzF4dUlDQWdJSDFjYmlBZ0lDQndjbWwyWVhSbFUyVjBUbTlrWlhNb2RHaHBjeXdnZEdocGMxdFNSVTVFUlZKRlVsMHVaMlYwVG05a1pTZ3BLVHRjYmlBZ0lDQjBhR2x6VzB4SlRrdEZSRjlTVDA5VVUxMHVabTl5UldGamFDZ29iR2x1YTJWa1VtOXZkQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ2FXWWdLR3hwYm10bFpGSnZiM1FnSVQwOUlIUm9hWE5iVlZCRVFWUkZSRjlDV1YwcElIdGNiaUFnSUNBZ0lDQWdMeW9nWlhOc2FXNTBMV1JwYzJGaWJHVWdibTh0Y0dGeVlXMHRjbVZoYzNOcFoyNGdLaTljYmlBZ0lDQWdJQ0FnTHk4Z1QyNXNlU0IxY0dSaGRHVWdZU0JzYVc1clpXUWdhWFFnY205dmRDQnBaaUJwZENCcGN5QnViM1FnZEdobElHOXlhV2RwYm1GMGIzSWdiMllnYjNWeUlIVndaR0YwWlNncExseHVJQ0FnSUNBZ0lDQXZMeUJVYUdseklHbHpJRzVsWldSbFpDQjBieUJ3Y21WMlpXNTBJR2x1Wm1sdWFYUmxJSEpsWTNWeWMybHZiaUIzYUdWdUlIUm9aWEpsSUdseklHRWdZbWt0WkdseVpXTjBhVzl1WVd4Y2JpQWdJQ0FnSUNBZ0x5OGdiR2x1YXlCaVpYUjNaV1Z1SUhSM2J5QnliMjkwY3k1Y2JpQWdJQ0FnSUNBZ2JHbHVhMlZrVW05dmRGdFZVRVJCVkVWRVgwSlpYU0E5SUhSb2FYTTdYRzRnSUNBZ0lDQWdJSFJ5ZVNCN1hHNGdJQ0FnSUNBZ0lDQWdiR2x1YTJWa1VtOXZkQzUxY0dSaGRHVW9LVHRjYmlBZ0lDQWdJQ0FnZlNCbWFXNWhiR3g1SUh0Y2JpQWdJQ0FnSUNBZ0lDQnNhVzVyWldSU2IyOTBXMVZRUkVGVVJVUmZRbGxkSUQwZ2JuVnNiRHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlZ4dUlDQWdJSDBwTzF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFRWdiV1YwYUc5a0lIUm9ZWFFnZFc1dGIzVnVkSE1nZEdobElHTnZiWEJ2Ym1WdWRDNGdWR2hwY3lCallXNGdZbVVnZFhObFpDQjBieUJ6YVcxMWJHRjBaU0JoSUdOdmJYQnZibVZ1ZENCbmIybHVaeUIwYUhKdmRXZG9YRzRnSUNBcUlHRnVaQ0IxYm0xdmRXNTBMMjF2ZFc1MElHeHBabVZqZVdOc1pTNWNiaUFnSUNwY2JpQWdJQ29nUUhKbGRIVnlibk1nZTFKbFlXTjBWM0poY0hCbGNuMWNiaUFnSUNvdlhHNGdJSFZ1Ylc5MWJuUW9LU0I3WEc0Z0lDQWdhV1lnS0hSb2FYTmJVazlQVkYwZ0lUMDlJSFJvYVhNcElIdGNiaUFnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnblVtVmhZM1JYY21Gd2NHVnlPanAxYm0xdmRXNTBLQ2tnWTJGdUlHOXViSGtnWW1VZ1kyRnNiR1ZrSUc5dUlIUm9aU0J5YjI5MEp5azdYRzRnSUNBZ2ZWeHVJQ0FnSUhSb2FYTXVjMmx1WjJ4bEtDZDFibTF2ZFc1MEp5d2dLQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ2RHaHBjMXRTUlU1RVJWSkZVbDB1ZFc1dGIzVnVkQ2dwTzF4dUlDQWdJQ0FnZEdocGN5NTFjR1JoZEdVb0tUdGNiaUFnSUNCOUtUdGNiaUFnSUNCeVpYUjFjbTRnZEdocGN6dGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJCSUcxbGRHaHZaQ0IwYUdGMElISmxMVzF2ZFc1MGN5QjBhR1VnWTI5dGNHOXVaVzUwTENCcFppQnBkQ0JwY3lCdWIzUWdZM1Z5Y21WdWRHeDVJRzF2ZFc1MFpXUXVYRzRnSUNBcUlGUm9hWE1nWTJGdUlHSmxJSFZ6WldRZ2RHOGdjMmx0ZFd4aGRHVWdZU0JqYjIxd2IyNWxiblFnWjI5cGJtY2dkR2h5YjNWbmFGeHVJQ0FnS2lCaGJpQjFibTF2ZFc1MEwyMXZkVzUwSUd4cFptVmplV05zWlM1Y2JpQWdJQ3BjYmlBZ0lDb2dRSEpsZEhWeWJuTWdlMUpsWVdOMFYzSmhjSEJsY24xY2JpQWdJQ292WEc0Z0lHMXZkVzUwS0NrZ2UxeHVJQ0FnSUdsbUlDaDBhR2x6VzFKUFQxUmRJQ0U5UFNCMGFHbHpLU0I3WEc0Z0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KMUpsWVdOMFYzSmhjSEJsY2pvNmJXOTFiblFvS1NCallXNGdiMjVzZVNCaVpTQmpZV3hzWldRZ2IyNGdkR2hsSUhKdmIzUW5LVHRjYmlBZ0lDQjlYRzRnSUNBZ2RHaHBjMXRTUlU1RVJWSkZVbDB1Y21WdVpHVnlLSFJvYVhOYlZVNVNSVTVFUlZKRlJGMHNJSFJvYVhOYlQxQlVTVTlPVTEwdVkyOXVkR1Y0ZEN3Z0tDa2dQVDRnZEdocGN5NTFjR1JoZEdVb0tTazdYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTTdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nUVNCdFpYUm9iMlFnZEdoaGRDQnpaWFJ6SUhSb1pTQndjbTl3Y3lCdlppQjBhR1VnY205dmRDQmpiMjF3YjI1bGJuUXNJR0Z1WkNCeVpTMXlaVzVrWlhKekxpQlZjMlZtZFd3Z1ptOXlJSGRvWlc0Z2VXOTFJR0Z5WlZ4dUlDQWdLaUIzWVc1MGFXNW5JSFJ2SUhSbGMzUWdhRzkzSUhSb1pTQmpiMjF3YjI1bGJuUWdZbVZvWVhabGN5QnZkbVZ5SUhScGJXVWdkMmwwYUNCamFHRnVaMmx1WnlCd2NtOXdjeTRnUTJGc2JHbHVaeUIwYUdsekxDQm1iM0pjYmlBZ0lDb2dhVzV6ZEdGdVkyVXNJSGRwYkd3Z1kyRnNiQ0IwYUdVZ1lHTnZiWEJ2Ym1WdWRGZHBiR3hTWldObGFYWmxVSEp2Y0hOZ0lHeHBabVZqZVdOc1pTQnRaWFJvYjJRdVhHNGdJQ0FxWEc0Z0lDQXFJRk5wYldsc1lYSWdkRzhnWUhObGRGTjBZWFJsWUN3Z2RHaHBjeUJ0WlhSb2IyUWdZV05qWlhCMGN5QmhJSEJ5YjNCeklHOWlhbVZqZENCaGJtUWdkMmxzYkNCdFpYSm5aU0JwZENCcGJpQjNhWFJvSUhSb1pTQmhiSEpsWVdSNVhHNGdJQ0FxSUdWNGFYTjBhVzVuSUhCeWIzQnpMbHh1SUNBZ0tseHVJQ0FnS2lCT1QxUkZPaUJqWVc0Z2IyNXNlU0JpWlNCallXeHNaV1FnYjI0Z1lTQjNjbUZ3Y0dWeUlHbHVjM1JoYm1ObElIUm9ZWFFnYVhNZ1lXeHpieUIwYUdVZ2NtOXZkQ0JwYm5OMFlXNWpaUzVjYmlBZ0lDcGNiaUFnSUNvZ1FIQmhjbUZ0SUh0UFltcGxZM1I5SUhCeWIzQnpJRzlpYW1WamRGeHVJQ0FnS2lCQWNHRnlZVzBnZTBaMWJtTjBhVzl1ZlNCallpQXRJR05oYkd4aVlXTnJJR1oxYm1OMGFXOXVYRzRnSUNBcUlFQnlaWFIxY201eklIdFNaV0ZqZEZkeVlYQndaWEo5WEc0Z0lDQXFMMXh1SUNCelpYUlFjbTl3Y3lod2NtOXdjeXdnWTJGc2JHSmhZMnNnUFNCMWJtUmxabWx1WldRcElIdGNiaUFnSUNCcFppQW9kR2hwYzF0U1QwOVVYU0FoUFQwZ2RHaHBjeWtnZTF4dUlDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ2RTWldGamRGZHlZWEJ3WlhJNk9uTmxkRkJ5YjNCektDa2dZMkZ1SUc5dWJIa2dZbVVnWTJGc2JHVmtJRzl1SUhSb1pTQnliMjkwSnlrN1hHNGdJQ0FnZlZ4dUlDQWdJR2xtSUNoaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvSUQ0Z01TQW1KaUIwZVhCbGIyWWdZMkZzYkdKaFkyc2dJVDA5SUNkbWRXNWpkR2x2YmljcElIdGNiaUFnSUNBZ0lIUm9jbTkzSUc1bGR5QlVlWEJsUlhKeWIzSW9KMUpsWVdOMFYzSmhjSEJsY2pvNmMyVjBVSEp2Y0hNb0tTQmxlSEJsWTNSeklHRWdablZ1WTNScGIyNGdZWE1nYVhSeklITmxZMjl1WkNCaGNtZDFiV1Z1ZENjcE8xeHVJQ0FnSUgxY2JpQWdJQ0JqYjI1emRDQmhaR0Z3ZEdWeUlEMGdaMlYwUVdSaGNIUmxjaWgwYUdselcwOVFWRWxQVGxOZEtUdGNiaUFnSUNCMGFHbHpXMVZPVWtWT1JFVlNSVVJkSUQwZ1kyeHZibVZGYkdWdFpXNTBLR0ZrWVhCMFpYSXNJSFJvYVhOYlZVNVNSVTVFUlZKRlJGMHNJSEJ5YjNCektUdGNiaUFnSUNCMGFHbHpXMUpGVGtSRlVrVlNYUzV5Wlc1a1pYSW9kR2hwYzF0VlRsSkZUa1JGVWtWRVhTd2diblZzYkN3Z0tDa2dQVDRnZTF4dUlDQWdJQ0FnZEdocGN5NTFjR1JoZEdVb0tUdGNiaUFnSUNBZ0lHbG1JQ2hqWVd4c1ltRmpheWtnZTF4dUlDQWdJQ0FnSUNCallXeHNZbUZqYXlncE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwcE8xeHVJQ0FnSUhKbGRIVnliaUIwYUdsek8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRUVnYldWMGFHOWtJSFJ2SUdsdWRtOXJaU0JnYzJWMFUzUmhkR1ZnSUc5dUlIUm9aU0J5YjI5MElHTnZiWEJ2Ym1WdWRDQnBibk4wWVc1alpTQnphVzFwYkdGeUlIUnZJR2h2ZHlCNWIzVWdiV2xuYUhRZ2FXNGdkR2hsWEc0Z0lDQXFJR1JsWm1sdWFYUnBiMjRnYjJZZ2RHaGxJR052YlhCdmJtVnVkQ3dnWVc1a0lISmxMWEpsYm1SbGNuTXVJQ0JVYUdseklHMWxkR2h2WkNCcGN5QjFjMlZtZFd3Z1ptOXlJSFJsYzNScGJtY2dlVzkxY2lCamIyMXdiMjVsYm5SY2JpQWdJQ29nYVc0Z2FHRnlaQ0IwYnlCaFkyaHBaWFpsSUhOMFlYUmxjeXdnYUc5M1pYWmxjaUJ6YUc5MWJHUWdZbVVnZFhObFpDQnpjR0Z5YVc1bmJIa3VJRWxtSUhCdmMzTnBZbXhsTENCNWIzVWdjMmh2ZFd4a0lIVjBhV3hwZW1WY2JpQWdJQ29nZVc5MWNpQmpiMjF3YjI1bGJuUW5jeUJsZUhSbGNtNWhiQ0JCVUVrZ2FXNGdiM0prWlhJZ2RHOGdaMlYwSUdsMElHbHVkRzhnZDJoaGRHVjJaWElnYzNSaGRHVWdlVzkxSUhkaGJuUWdkRzhnZEdWemRDd2dhVzRnYjNKa1pYSmNiaUFnSUNvZ2RHOGdZbVVnWVhNZ1lXTmpkWEpoZEdVZ2IyWWdZU0IwWlhOMElHRnpJSEJ2YzNOcFlteGxMaUJVYUdseklHbHpJRzV2ZENCaGJIZGhlWE1nY0hKaFkzUnBZMkZzTENCb2IzZGxkbVZ5TGx4dUlDQWdLbHh1SUNBZ0tpQk9UMVJGT2lCallXNGdiMjVzZVNCaVpTQmpZV3hzWldRZ2IyNGdZU0IzY21Gd2NHVnlJR2x1YzNSaGJtTmxJSFJvWVhRZ2FYTWdZV3h6YnlCMGFHVWdjbTl2ZENCcGJuTjBZVzVqWlM1Y2JpQWdJQ3BjYmlBZ0lDb2dRSEJoY21GdElIdFBZbXBsWTNSOUlITjBZWFJsSUhSdklHMWxjbWRsWEc0Z0lDQXFJRUJ3WVhKaGJTQjdSblZ1WTNScGIyNTlJR05pSUMwZ1kyRnNiR0poWTJzZ1puVnVZM1JwYjI1Y2JpQWdJQ29nUUhKbGRIVnlibk1nZTFKbFlXTjBWM0poY0hCbGNuMWNiaUFnSUNvdlhHNGdJSE5sZEZOMFlYUmxLSE4wWVhSbExDQmpZV3hzWW1GamF5QTlJSFZ1WkdWbWFXNWxaQ2tnZTF4dUlDQWdJR2xtSUNoMGFHbHpMbWx1YzNSaGJtTmxLQ2tnUFQwOUlHNTFiR3dnZkh3Z2RHaHBjeTVuWlhST2IyUmxTVzUwWlhKdVlXd29LUzV1YjJSbFZIbHdaU0FoUFQwZ0oyTnNZWE56SnlrZ2UxeHVJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NkU1pXRmpkRmR5WVhCd1pYSTZPbk5sZEZOMFlYUmxLQ2tnWTJGdUlHOXViSGtnWW1VZ1kyRnNiR1ZrSUc5dUlHTnNZWE56SUdOdmJYQnZibVZ1ZEhNbktUdGNiaUFnSUNCOVhHNGdJQ0FnYVdZZ0tHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnZ1BpQXhJQ1ltSUhSNWNHVnZaaUJqWVd4c1ltRmpheUFoUFQwZ0oyWjFibU4wYVc5dUp5a2dlMXh1SUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRlI1Y0dWRmNuSnZjaWduVW1WaFkzUlhjbUZ3Y0dWeU9qcHpaWFJUZEdGMFpTZ3BJR1Y0Y0dWamRITWdZU0JtZFc1amRHbHZiaUJoY3lCcGRITWdjMlZqYjI1a0lHRnlaM1Z0Wlc1MEp5azdYRzRnSUNBZ2ZWeHVJQ0FnSUhSb2FYTXVhVzV6ZEdGdVkyVW9LUzV6WlhSVGRHRjBaU2h6ZEdGMFpTd2dLQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ2RHaHBjeTUxY0dSaGRHVW9LVHRjYmlBZ0lDQWdJR2xtSUNoallXeHNZbUZqYXlrZ2UxeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCaFpHRndkR1Z5SUQwZ1oyVjBRV1JoY0hSbGNpaDBhR2x6VzA5UVZFbFBUbE5kS1R0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnYVc1emRHRnVZMlVnUFNCMGFHbHpMbWx1YzNSaGJtTmxLQ2s3WEc0Z0lDQWdJQ0FnSUdsbUlDaGhaR0Z3ZEdWeUxtbHVkbTlyWlZObGRGTjBZWFJsUTJGc2JHSmhZMnNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQmhaR0Z3ZEdWeUxtbHVkbTlyWlZObGRGTjBZWFJsUTJGc2JHSmhZMnNvYVc1emRHRnVZMlVzSUdOaGJHeGlZV05yS1R0Y2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQmpZV3hzWW1GamF5NWpZV3hzS0dsdWMzUmhibU5sS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwcE8xeHVJQ0FnSUhKbGRIVnliaUIwYUdsek8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRUVnYldWMGFHOWtJSFJvWVhRZ2MyVjBjeUIwYUdVZ1kyOXVkR1Y0ZENCdlppQjBhR1VnY205dmRDQmpiMjF3YjI1bGJuUXNJR0Z1WkNCeVpTMXlaVzVrWlhKekxpQlZjMlZtZFd3Z1ptOXlJSGRvWlc0Z2VXOTFJR0Z5WlZ4dUlDQWdLaUIzWVc1MGFXNW5JSFJ2SUhSbGMzUWdhRzkzSUhSb1pTQmpiMjF3YjI1bGJuUWdZbVZvWVhabGN5QnZkbVZ5SUhScGJXVWdkMmwwYUNCamFHRnVaMmx1WnlCamIyNTBaWGgwY3k1Y2JpQWdJQ3BjYmlBZ0lDb2dUazlVUlRvZ1kyRnVJRzl1YkhrZ1ltVWdZMkZzYkdWa0lHOXVJR0VnZDNKaGNIQmxjaUJwYm5OMFlXNWpaU0IwYUdGMElHbHpJR0ZzYzI4Z2RHaGxJSEp2YjNRZ2FXNXpkR0Z1WTJVdVhHNGdJQ0FxWEc0Z0lDQXFJRUJ3WVhKaGJTQjdUMkpxWldOMGZTQmpiMjUwWlhoMElHOWlhbVZqZEZ4dUlDQWdLaUJBY21WMGRYSnVjeUI3VW1WaFkzUlhjbUZ3Y0dWeWZWeHVJQ0FnS2k5Y2JpQWdjMlYwUTI5dWRHVjRkQ2hqYjI1MFpYaDBLU0I3WEc0Z0lDQWdhV1lnS0hSb2FYTmJVazlQVkYwZ0lUMDlJSFJvYVhNcElIdGNiaUFnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnblVtVmhZM1JYY21Gd2NHVnlPanB6WlhSRGIyNTBaWGgwS0NrZ1kyRnVJRzl1YkhrZ1ltVWdZMkZzYkdWa0lHOXVJSFJvWlNCeWIyOTBKeWs3WEc0Z0lDQWdmVnh1SUNBZ0lHbG1JQ2doZEdocGMxdFBVRlJKVDA1VFhTNWpiMjUwWlhoMEtTQjdYRzRnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0oxSmxZV04wVjNKaGNIQmxjam82YzJWMFEyOXVkR1Y0ZENncElHTmhiaUJ2Ym14NUlHSmxJR05oYkd4bFpDQnZiaUJoSUhkeVlYQndaWElnZEdoaGRDQjNZWE1nYjNKcFoybHVZV3hzZVNCd1lYTnpaV1FnWVNCamIyNTBaWGgwSUc5d2RHbHZiaWNwTzF4dUlDQWdJSDFjYmlBZ0lDQjBhR2x6VzFKRlRrUkZVa1ZTWFM1eVpXNWtaWElvZEdocGMxdFZUbEpGVGtSRlVrVkVYU3dnWTI5dWRHVjRkQ3dnS0NrZ1BUNGdkR2hwY3k1MWNHUmhkR1VvS1NrN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhNN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dWMmhsZEdobGNpQnZjaUJ1YjNRZ1lTQm5hWFpsYmlCeVpXRmpkQ0JsYkdWdFpXNTBJR1Y0YVhOMGN5QnBiaUIwYUdVZ2JXOTFiblFnY21WdVpHVnlJSFJ5WldVdVhHNGdJQ0FxWEc0Z0lDQXFJRVY0WVcxd2JHVTZYRzRnSUNBcUlHQmdZRnh1SUNBZ0tpQmpiMjV6ZENCM2NtRndjR1Z5SUQwZ2JXOTFiblFvUEUxNVEyOXRjRzl1Wlc1MElDOCtLVHRjYmlBZ0lDb2daWGh3WldOMEtIZHlZWEJ3WlhJdVkyOXVkR0ZwYm5Nb1BHUnBkaUJqYkdGemMwNWhiV1U5WENKbWIyOGdZbUZ5WENJZ0x6NHBLUzUwYnk1bGNYVmhiQ2gwY25WbEtUdGNiaUFnSUNvZ1lHQmdYRzRnSUNBcVhHNGdJQ0FxSUVCd1lYSmhiU0I3VW1WaFkzUkZiR1Z0Wlc1MGZFRnljbUY1UEZKbFlXTjBSV3hsYldWdWRENTlJRzV2WkdWUGNrNXZaR1Z6WEc0Z0lDQXFJRUJ5WlhSMWNtNXpJSHRDYjI5c1pXRnVmVnh1SUNBZ0tpOWNiaUFnWTI5dWRHRnBibk1vYm05a1pVOXlUbTlrWlhNcElIdGNiaUFnSUNCamIyNXpkQ0JoWkdGd2RHVnlJRDBnWjJWMFFXUmhjSFJsY2loMGFHbHpXMDlRVkVsUFRsTmRLVHRjYmx4dUlDQWdJR052Ym5OMElIQnlaV1JwWTJGMFpTQTlJRUZ5Y21GNUxtbHpRWEp5WVhrb2JtOWtaVTl5VG05a1pYTXBYRzRnSUNBZ0lDQS9JQ2h2ZEdobGNpa2dQVDRnWTI5dWRHRnBibk5EYUdsc1pISmxibE4xWWtGeWNtRjVLRnh1SUNBZ0lDQWdJQ0J1YjJSbFJYRjFZV3dzWEc0Z0lDQWdJQ0FnSUc5MGFHVnlMRnh1SUNBZ0lDQWdJQ0J1YjJSbFQzSk9iMlJsY3k1dFlYQW9LRzV2WkdVcElEMCtJR0ZrWVhCMFpYSXVaV3hsYldWdWRGUnZUbTlrWlNodWIyUmxLU2tzWEc0Z0lDQWdJQ0FwWEc0Z0lDQWdJQ0E2SUNodmRHaGxjaWtnUFQ0Z2JtOWtaVVZ4ZFdGc0tHRmtZWEIwWlhJdVpXeGxiV1Z1ZEZSdlRtOWtaU2h1YjJSbFQzSk9iMlJsY3lrc0lHOTBhR1Z5S1R0Y2JseHVJQ0FnSUhKbGRIVnliaUJtYVc1a1YyaGxjbVZWYm5keVlYQndaV1FvZEdocGN5d2djSEpsWkdsallYUmxLUzVzWlc1bmRHZ2dQaUF3TzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGZG9aWFJvWlhJZ2IzSWdibTkwSUdFZ1oybDJaVzRnY21WaFkzUWdaV3hsYldWdWRDQmxlR2x6ZEhNZ2FXNGdkR2hsSUdOMWNuSmxiblFnY21WdVpHVnlJSFJ5WldVdVhHNGdJQ0FxSUVsMElIZHBiR3dnWkdWMFpYSnRhVzVsSUdsbUlHOXVaU0J2WmlCMGFHVWdkM0poY0hCbGNuTWdaV3hsYldWdWRDQmNJbXh2YjJ0eklHeHBhMlZjSWlCMGFHVWdaWGh3WldOMFpXUmNiaUFnSUNvZ1pXeGxiV1Z1ZENCaWVTQmphR1ZqYTJsdVp5QnBaaUJoYkd3Z2NISnZjSE1nYjJZZ2RHaGxJR1Y0Y0dWamRHVmtJR1ZzWlcxbGJuUWdZWEpsSUhCeVpYTmxiblJjYmlBZ0lDb2diMjRnZEdobElIZHlZWEJ3WlhKeklHVnNaVzFsYm5RZ1lXNWtJR1Z4ZFdGc2N5QjBieUJsWVdOb0lHOTBhR1Z5TGx4dUlDQWdLbHh1SUNBZ0tpQkZlR0Z0Y0d4bE9seHVJQ0FnS2lCZ1lHQmNiaUFnSUNvZ0x5OGdUWGxEYjIxd2IyNWxiblFnYjNWMGNIVjBjeUE4WkdsMlBqeGthWFlnWTJ4aGMzTTlYQ0ptYjI5Y0lqNUlaV3hzYnp3dlpHbDJQand2WkdsMlBseHVJQ0FnS2lCamIyNXpkQ0IzY21Gd2NHVnlJRDBnYlc5MWJuUW9QRTE1UTI5dGNHOXVaVzUwSUM4K0tUdGNiaUFnSUNvZ1pYaHdaV04wS0hkeVlYQndaWEl1WTI5dWRHRnBibk5OWVhSamFHbHVaMFZzWlcxbGJuUW9QR1JwZGo1SVpXeHNiend2WkdsMlBpa3BMblJ2TG1WeGRXRnNLSFJ5ZFdVcE8xeHVJQ0FnS2lCZ1lHQmNiaUFnSUNwY2JpQWdJQ29nUUhCaGNtRnRJSHRTWldGamRFVnNaVzFsYm5SOUlHNXZaR1ZjYmlBZ0lDb2dRSEpsZEhWeWJuTWdlMEp2YjJ4bFlXNTlYRzRnSUNBcUwxeHVJQ0JqYjI1MFlXbHVjMDFoZEdOb2FXNW5SV3hsYldWdWRDaHViMlJsS1NCN1hHNGdJQ0FnWTI5dWMzUWdjbk4wVG05a1pTQTlJR2RsZEVGa1lYQjBaWElvZEdocGMxdFBVRlJKVDA1VFhTa3VaV3hsYldWdWRGUnZUbTlrWlNodWIyUmxLVHRjYmlBZ0lDQmpiMjV6ZENCd2NtVmthV05oZEdVZ1BTQW9iM1JvWlhJcElEMCtJRzV2WkdWTllYUmphR1Z6S0hKemRFNXZaR1VzSUc5MGFHVnlMQ0FvWVN3Z1lpa2dQVDRnWVNBOFBTQmlLVHRjYmlBZ0lDQnlaWFIxY200Z1ptbHVaRmRvWlhKbFZXNTNjbUZ3Y0dWa0tIUm9hWE1zSUhCeVpXUnBZMkYwWlNrdWJHVnVaM1JvSUQ0Z01EdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJYYUdWMGFHVnlJRzl5SUc1dmRDQmhiR3dnZEdobElHZHBkbVZ1SUhKbFlXTjBJR1ZzWlcxbGJuUnpJR1Y0YVhOMElHbHVJSFJvWlNCamRYSnlaVzUwSUhKbGJtUmxjaUIwY21WbExseHVJQ0FnS2lCSmRDQjNhV3hzSUdSbGRHVnliV2x1WlNCcFppQnZibVVnYjJZZ2RHaGxJSGR5WVhCd1pYSnpJR1ZzWlcxbGJuUWdYQ0pzYjI5cmN5QnNhV3RsWENJZ2RHaGxJR1Y0Y0dWamRHVmtYRzRnSUNBcUlHVnNaVzFsYm5RZ1lua2dZMmhsWTJ0cGJtY2dhV1lnWVd4c0lIQnliM0J6SUc5bUlIUm9aU0JsZUhCbFkzUmxaQ0JsYkdWdFpXNTBJR0Z5WlNCd2NtVnpaVzUwWEc0Z0lDQXFJRzl1SUhSb1pTQjNjbUZ3Y0dWeWN5QmxiR1Z0Wlc1MElHRnVaQ0JsY1hWaGJITWdkRzhnWldGamFDQnZkR2hsY2k1Y2JpQWdJQ3BjYmlBZ0lDb2dSWGhoYlhCc1pUcGNiaUFnSUNvZ1lHQmdYRzRnSUNBcUlHTnZibk4wSUhkeVlYQndaWElnUFNCdGIzVnVkQ2c4VFhsRGIyMXdiMjVsYm5RZ0x6NHBPMXh1SUNBZ0tpQmxlSEJsWTNRb2QzSmhjSEJsY2k1amIyNTBZV2x1YzBGc2JFMWhkR05vYVc1blJXeGxiV1Z1ZEhNb1cxeHVJQ0FnS2lBZ0lEeGthWFkrU0dWc2JHODhMMlJwZGo0c1hHNGdJQ0FxSUNBZ1BHUnBkajVIYjI5a1lubGxQQzlrYVhZK0xGeHVJQ0FnS2lCZEtTa3VkRzh1WlhGMVlXd29kSEoxWlNrN1hHNGdJQ0FxSUdCZ1lGeHVJQ0FnS2x4dUlDQWdLaUJBY0dGeVlXMGdlMEZ5Y21GNVBGSmxZV04wUld4bGJXVnVkRDU5SUc1dlpHVnpYRzRnSUNBcUlFQnlaWFIxY201eklIdENiMjlzWldGdWZWeHVJQ0FnS2k5Y2JpQWdZMjl1ZEdGcGJuTkJiR3hOWVhSamFHbHVaMFZzWlcxbGJuUnpLRzV2WkdWektTQjdYRzRnSUNBZ2FXWWdLQ0ZCY25KaGVTNXBjMEZ5Y21GNUtHNXZaR1Z6S1NrZ2UxeHVJQ0FnSUNBZ2RHaHliM2NnYm1WM0lGUjVjR1ZGY25KdmNpZ25ibTlrWlhNZ2MyaHZkV3hrSUdKbElHRnVJRUZ5Y21GNUp5azdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2NtVjBkWEp1SUc1dlpHVnpMbVYyWlhKNUtDaHViMlJsS1NBOVBpQjBhR2x6TG1OdmJuUmhhVzV6VFdGMFkyaHBibWRGYkdWdFpXNTBLRzV2WkdVcEtUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJYYUdWMGFHVnlJRzl5SUc1dmRDQnZibVVnYjJZZ2RHaGxJR2RwZG1WdUlISmxZV04wSUdWc1pXMWxiblJ6SUdWNGFYTjBjeUJwYmlCMGFHVWdZM1Z5Y21WdWRDQnlaVzVrWlhJZ2RISmxaUzVjYmlBZ0lDb2dTWFFnZDJsc2JDQmtaWFJsY20xcGJtVWdhV1lnYjI1bElHOW1JSFJvWlNCM2NtRndjR1Z5Y3lCbGJHVnRaVzUwSUZ3aWJHOXZhM01nYkdsclpWd2lJSFJvWlNCbGVIQmxZM1JsWkZ4dUlDQWdLaUJsYkdWdFpXNTBJR0o1SUdOb1pXTnJhVzVuSUdsbUlHRnNiQ0J3Y205d2N5QnZaaUIwYUdVZ1pYaHdaV04wWldRZ1pXeGxiV1Z1ZENCaGNtVWdjSEpsYzJWdWRGeHVJQ0FnS2lCdmJpQjBhR1VnZDNKaGNIQmxjbk1nWld4bGJXVnVkQ0JoYm1RZ1pYRjFZV3h6SUhSdklHVmhZMmdnYjNSb1pYSXVYRzRnSUNBcVhHNGdJQ0FxSUVWNFlXMXdiR1U2WEc0Z0lDQXFJR0JnWUZ4dUlDQWdLaUJqYjI1emRDQjNjbUZ3Y0dWeUlEMGdiVzkxYm5Rb1BFMTVRMjl0Y0c5dVpXNTBJQzgrS1R0Y2JpQWdJQ29nWlhod1pXTjBLSGR5WVhCd1pYSXVZMjl1ZEdGcGJuTkJibmxOWVhSamFHbHVaMFZzWlcxbGJuUnpLRnRjYmlBZ0lDb2dJQ0E4WkdsMlBraGxiR3h2UEM5a2FYWStMRnh1SUNBZ0tpQWdJRHhrYVhZK1IyOXZaR0o1WlR3dlpHbDJQaXhjYmlBZ0lDb2dYU2twTG5SdkxtVnhkV0ZzS0hSeWRXVXBPMXh1SUNBZ0tpQmdZR0JjYmlBZ0lDcGNiaUFnSUNvZ1FIQmhjbUZ0SUh0QmNuSmhlVHhTWldGamRFVnNaVzFsYm5RK2ZTQnViMlJsYzF4dUlDQWdLaUJBY21WMGRYSnVjeUI3UW05dmJHVmhibjFjYmlBZ0lDb3ZYRzRnSUdOdmJuUmhhVzV6UVc1NVRXRjBZMmhwYm1kRmJHVnRaVzUwY3lodWIyUmxjeWtnZTF4dUlDQWdJSEpsZEhWeWJpQkJjbkpoZVM1cGMwRnljbUY1S0c1dlpHVnpLU0FtSmlCdWIyUmxjeTV6YjIxbEtDaHViMlJsS1NBOVBpQjBhR2x6TG1OdmJuUmhhVzV6VFdGMFkyaHBibWRGYkdWdFpXNTBLRzV2WkdVcEtUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJYYUdWMGFHVnlJRzl5SUc1dmRDQmhJR2RwZG1WdUlISmxZV04wSUdWc1pXMWxiblFnWlhocGMzUnpJR2x1SUhSb1pTQnlaVzVrWlhJZ2RISmxaUzVjYmlBZ0lDcGNiaUFnSUNvZ1JYaGhiWEJzWlRwY2JpQWdJQ29nWUdCZ1hHNGdJQ0FxSUdOdmJuTjBJSGR5WVhCd1pYSWdQU0J0YjNWdWRDZzhUWGxEYjIxd2IyNWxiblFnTHo0cE8xeHVJQ0FnS2lCbGVIQmxZM1FvZDNKaGNIQmxjaTVqYjI1MFlXbHVjeWc4WkdsMklHTnNZWE56VG1GdFpUMWNJbVp2YnlCaVlYSmNJaUF2UGlrcExuUnZMbVZ4ZFdGc0tIUnlkV1VwTzF4dUlDQWdLaUJnWUdCY2JpQWdJQ3BjYmlBZ0lDb2dRSEJoY21GdElIdFNaV0ZqZEVWc1pXMWxiblI5SUc1dlpHVmNiaUFnSUNvZ1FISmxkSFZ5Ym5NZ2UwSnZiMnhsWVc1OVhHNGdJQ0FxTDF4dUlDQmxjWFZoYkhNb2JtOWtaU2tnZTF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG5OcGJtZHNaU2duWlhGMVlXeHpKeXdnS0NrZ1BUNGdibTlrWlVWeGRXRnNLSFJvYVhNdVoyVjBUbTlrWlVsdWRHVnlibUZzS0Nrc0lHNXZaR1VwS1R0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlhhR1YwYUdWeUlHOXlJRzV2ZENCaElHZHBkbVZ1SUhKbFlXTjBJR1ZzWlcxbGJuUWdiV0YwWTJobGN5QjBhR1VnY21WdVpHVnlJSFJ5WldVdVhHNGdJQ0FxSUUxaGRHTm9JR2x6SUdKaGMyVmtJRzl1SUhSb1pTQmxlSEJsWTNSbFpDQmxiR1Z0Wlc1MElHRnVaQ0J1YjNRZ2IyNGdkM0poY0hCbGNpQnliMjkwSUc1dlpHVXVYRzRnSUNBcUlFbDBJSGRwYkd3Z1pHVjBaWEp0YVc1bElHbG1JSFJvWlNCM2NtRndjR1Z5SUhKdmIzUWdibTlrWlNCY0lteHZiMnR6SUd4cGEyVmNJaUIwYUdVZ1pYaHdaV04wWldSY2JpQWdJQ29nWld4bGJXVnVkQ0JpZVNCamFHVmphMmx1WnlCcFppQmhiR3dnY0hKdmNITWdiMllnZEdobElHVjRjR1ZqZEdWa0lHVnNaVzFsYm5RZ1lYSmxJSEJ5WlhObGJuUmNiaUFnSUNvZ2IyNGdkR2hsSUhkeVlYQndaWElnY205dmRDQnViMlJsSUdGdVpDQmxjWFZoYkhNZ2RHOGdaV0ZqYUNCdmRHaGxjaTVjYmlBZ0lDcGNiaUFnSUNvZ1JYaGhiWEJzWlRwY2JpQWdJQ29nWUdCZ1hHNGdJQ0FxSUM4dklFMTVRMjl0Y0c5dVpXNTBJRzkxZEhCMWRITWdQR1JwZGlCamJHRnpjejFjSW1admIxd2lQa2hsYkd4dlBDOWthWFkrWEc0Z0lDQXFJR052Ym5OMElIZHlZWEJ3WlhJZ1BTQnRiM1Z1ZENnOFRYbERiMjF3YjI1bGJuUWdMejRwTzF4dUlDQWdLaUJsZUhCbFkzUW9kM0poY0hCbGNpNXRZWFJqYUdWelJXeGxiV1Z1ZENnOFpHbDJQa2hsYkd4dlBDOWthWFkrS1NrdWRHOHVaWEYxWVd3b2RISjFaU2s3WEc0Z0lDQXFJR0JnWUZ4dUlDQWdLbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UxSmxZV04wUld4bGJXVnVkSDBnYm05a1pWeHVJQ0FnS2lCQWNtVjBkWEp1Y3lCN1FtOXZiR1ZoYm4xY2JpQWdJQ292WEc0Z0lHMWhkR05vWlhORmJHVnRaVzUwS0c1dlpHVXBJSHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTV6YVc1bmJHVW9KMjFoZEdOb1pYTkZiR1Z0Wlc1MEp5d2dLQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ1kyOXVjM1FnWVdSaGNIUmxjaUE5SUdkbGRFRmtZWEIwWlhJb2RHaHBjMXRQVUZSSlQwNVRYU2s3WEc0Z0lDQWdJQ0JqYjI1emRDQnljM1JPYjJSbElEMGdZV1JoY0hSbGNpNWxiR1Z0Wlc1MFZHOU9iMlJsS0c1dlpHVXBPMXh1SUNBZ0lDQWdjbVYwZFhKdUlHNXZaR1ZOWVhSamFHVnpLSEp6ZEU1dlpHVXNJSFJvYVhNdVoyVjBUbTlrWlVsdWRHVnlibUZzS0Nrc0lDaGhMQ0JpS1NBOVBpQmhJRHc5SUdJcE8xeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRVpwYm1SeklHVjJaWEo1SUc1dlpHVWdhVzRnZEdobElISmxibVJsY2lCMGNtVmxJRzltSUhSb1pTQmpkWEp5Wlc1MElIZHlZWEJ3WlhJZ2RHaGhkQ0J0WVhSamFHVnpJSFJvWlNCd2NtOTJhV1JsWkNCelpXeGxZM1J2Y2k1Y2JpQWdJQ3BjYmlBZ0lDb2dRSEJoY21GdElIdEZibnA1YldWVFpXeGxZM1J2Y24wZ2MyVnNaV04wYjNKY2JpQWdJQ29nUUhKbGRIVnlibk1nZTFKbFlXTjBWM0poY0hCbGNuMWNiaUFnSUNvdlhHNGdJR1pwYm1Rb2MyVnNaV04wYjNJcElIdGNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NTNjbUZ3S0hKbFpIVmpaVlJ5WldWelFubFRaV3hsWTNSdmNpaHpaV3hsWTNSdmNpd2dkR2hwY3k1blpYUk9iMlJsYzBsdWRHVnlibUZzS0NrcEtUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJTWlhSMWNtNXpJSGRvWlhSb1pYSWdiM0lnYm05MElHTjFjbkpsYm5RZ2JtOWtaU0J0WVhSamFHVnpJR0VnY0hKdmRtbGtaV1FnYzJWc1pXTjBiM0l1WEc0Z0lDQXFYRzRnSUNBcUlFNVBWRVU2SUdOaGJpQnZibXg1SUdKbElHTmhiR3hsWkNCdmJpQmhJSGR5WVhCd1pYSWdiMllnWVNCemFXNW5iR1VnYm05a1pTNWNiaUFnSUNwY2JpQWdJQ29nUUhCaGNtRnRJSHRGYm5wNWJXVlRaV3hsWTNSdmNuMGdjMlZzWldOMGIzSmNiaUFnSUNvZ1FISmxkSFZ5Ym5NZ2UySnZiMnhsWVc1OVhHNGdJQ0FxTDF4dUlDQnBjeWh6Wld4bFkzUnZjaWtnZTF4dUlDQWdJR052Ym5OMElIQnlaV1JwWTJGMFpTQTlJR0oxYVd4a1VISmxaR2xqWVhSbEtITmxiR1ZqZEc5eUtUdGNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NXphVzVuYkdVb0oybHpKeXdnS0c0cElEMCtJSEJ5WldScFkyRjBaU2h1S1NrN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dVbVYwZFhKdWN5QjBjblZsSUdsbUlIUm9aU0JqYjIxd2IyNWxiblFnY21WdVpHVnlaV1FnYm05MGFHbHVaeXdnYVM1bExpd2diblZzYkNCdmNpQm1ZV3h6WlM1Y2JpQWdJQ3BjYmlBZ0lDb2dRSEpsZEhWeWJuTWdlMkp2YjJ4bFlXNTlYRzRnSUNBcUwxeHVJQ0JwYzBWdGNIUjVVbVZ1WkdWeUtDa2dlMXh1SUNBZ0lHTnZibk4wSUc1dlpHVnpJRDBnZEdocGN5NW5aWFJPYjJSbFNXNTBaWEp1WVd3b0tUdGNibHh1SUNBZ0lISmxkSFZ5YmlCeVpXNWtaWEpsWkVScGRtVW9ibTlrWlhNcE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRkpsZEhWeWJuTWdZU0J1WlhjZ2QzSmhjSEJsY2lCcGJuTjBZVzVqWlNCM2FYUm9JRzl1YkhrZ2RHaGxJRzV2WkdWeklHOW1JSFJvWlNCamRYSnlaVzUwSUhkeVlYQndaWElnYVc1emRHRnVZMlVnZEdoaGRDQnRZWFJqYUZ4dUlDQWdLaUIwYUdVZ2NISnZkbWxrWldRZ2NISmxaR2xqWVhSbElHWjFibU4wYVc5dUxseHVJQ0FnS2x4dUlDQWdLaUJBY0dGeVlXMGdlMFoxYm1OMGFXOXVmU0J3Y21Wa2FXTmhkR1ZjYmlBZ0lDb2dRSEpsZEhWeWJuTWdlMUpsWVdOMFYzSmhjSEJsY24xY2JpQWdJQ292WEc0Z0lHWnBiSFJsY2xkb1pYSmxLSEJ5WldScFkyRjBaU2tnZTF4dUlDQWdJSEpsZEhWeWJpQm1hV3gwWlhKWGFHVnlaVlZ1ZDNKaGNIQmxaQ2gwYUdsekxDQW9iaWtnUFQ0Z2NISmxaR2xqWVhSbEtIUm9hWE11ZDNKaGNDaHVLU2twTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGSmxkSFZ5Ym5NZ1lTQnVaWGNnZDNKaGNIQmxjaUJwYm5OMFlXNWpaU0IzYVhSb0lHOXViSGtnZEdobElHNXZaR1Z6SUc5bUlIUm9aU0JqZFhKeVpXNTBJSGR5WVhCd1pYSWdhVzV6ZEdGdVkyVWdkR2hoZENCdFlYUmphRnh1SUNBZ0tpQjBhR1VnY0hKdmRtbGtaV1FnYzJWc1pXTjBiM0l1WEc0Z0lDQXFYRzRnSUNBcUlFQndZWEpoYlNCN1JXNTZlVzFsVTJWc1pXTjBiM0o5SUhObGJHVmpkRzl5WEc0Z0lDQXFJRUJ5WlhSMWNtNXpJSHRTWldGamRGZHlZWEJ3WlhKOVhHNGdJQ0FxTDF4dUlDQm1hV3gwWlhJb2MyVnNaV04wYjNJcElIdGNiaUFnSUNCamIyNXpkQ0J3Y21Wa2FXTmhkR1VnUFNCaWRXbHNaRkJ5WldScFkyRjBaU2h6Wld4bFkzUnZjaWs3WEc0Z0lDQWdjbVYwZFhKdUlHWnBiSFJsY2xkb1pYSmxWVzUzY21Gd2NHVmtLSFJvYVhNc0lIQnlaV1JwWTJGMFpTazdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nVW1WMGRYSnVjeUJoSUc1bGR5QjNjbUZ3Y0dWeUlHbHVjM1JoYm1ObElIZHBkR2dnYjI1c2VTQjBhR1VnYm05a1pYTWdiMllnZEdobElHTjFjbkpsYm5RZ2QzSmhjSEJsY2lCMGFHRjBJR1JwWkNCdWIzUWdiV0YwWTJoY2JpQWdJQ29nZEdobElIQnliM1pwWkdWa0lITmxiR1ZqZEc5eUxpQkZjM05sYm5ScFlXeHNlU0IwYUdVZ2FXNTJaWEp6WlNCdlppQmdabWxzZEdWeVlDNWNiaUFnSUNwY2JpQWdJQ29nUUhCaGNtRnRJSHRGYm5wNWJXVlRaV3hsWTNSdmNuMGdjMlZzWldOMGIzSmNiaUFnSUNvZ1FISmxkSFZ5Ym5NZ2UxSmxZV04wVjNKaGNIQmxjbjFjYmlBZ0lDb3ZYRzRnSUc1dmRDaHpaV3hsWTNSdmNpa2dlMXh1SUNBZ0lHTnZibk4wSUhCeVpXUnBZMkYwWlNBOUlHSjFhV3hrVUhKbFpHbGpZWFJsS0hObGJHVmpkRzl5S1R0Y2JpQWdJQ0J5WlhSMWNtNGdabWxzZEdWeVYyaGxjbVZWYm5keVlYQndaV1FvZEdocGN5d2dLRzRwSUQwK0lDRndjbVZrYVdOaGRHVW9iaWtwTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGSmxkSFZ5Ym5NZ1lTQnpkSEpwYm1jZ2IyWWdkR2hsSUhKbGJtUmxjbVZrSUhSbGVIUWdiMllnZEdobElHTjFjbkpsYm5RZ2NtVnVaR1Z5SUhSeVpXVXVJQ0JVYUdseklHWjFibU4wYVc5dUlITm9iM1ZzWkNCaVpWeHVJQ0FnS2lCc2IyOXJaV1FnWVhRZ2QybDBhQ0J6YTJWd2RHbGphWE50SUdsbUlHSmxhVzVuSUhWelpXUWdkRzhnZEdWemRDQjNhR0YwSUhSb1pTQmhZM1IxWVd3Z1NGUk5UQ0J2ZFhSd2RYUWdiMllnZEdobElHTnZiWEJ2Ym1WdWRGeHVJQ0FnS2lCM2FXeHNJR0psTGlCSlppQjBhR0YwSUdseklIZG9ZWFFnZVc5MUlIZHZkV3hrSUd4cGEyVWdkRzhnZEdWemRDd2dkWE5sSUdWdWVubHRaU2R6SUdCeVpXNWtaWEpnSUdaMWJtTjBhVzl1SUdsdWMzUmxZV1F1WEc0Z0lDQXFYRzRnSUNBcUlFNVBWRVU2SUdOaGJpQnZibXg1SUdKbElHTmhiR3hsWkNCdmJpQmhJSGR5WVhCd1pYSWdiMllnWVNCemFXNW5iR1VnYm05a1pTNWNiaUFnSUNwY2JpQWdJQ29nUUhKbGRIVnlibk1nZTFOMGNtbHVaMzFjYmlBZ0lDb3ZYRzRnSUhSbGVIUW9LU0I3WEc0Z0lDQWdZMjl1YzNRZ1lXUmhjSFJsY2lBOUlHZGxkRUZrWVhCMFpYSW9kR2hwYzF0UFVGUkpUMDVUWFNrN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdWMybHVaMnhsS0NkMFpYaDBKeXdnS0c0cElEMCtJR2RsZEZSbGVIUkdjbTl0U0c5emRFNXZaR1Z6S0c0c0lHRmtZWEIwWlhJcEtUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJTWlhSMWNtNXpJSFJvWlNCSVZFMU1JRzltSUhSb1pTQnViMlJsTGx4dUlDQWdLbHh1SUNBZ0tpQk9UMVJGT2lCallXNGdiMjVzZVNCaVpTQmpZV3hzWldRZ2IyNGdZU0IzY21Gd2NHVnlJRzltSUdFZ2MybHVaMnhsSUc1dlpHVXVYRzRnSUNBcVhHNGdJQ0FxSUVCeVpYUjFjbTV6SUh0VGRISnBibWQ5WEc0Z0lDQXFMMXh1SUNCb2RHMXNLQ2tnZTF4dUlDQWdJR052Ym5OMElHRmtZWEIwWlhJZ1BTQm5aWFJCWkdGd2RHVnlLSFJvYVhOYlQxQlVTVTlPVTEwcE8xeHVJQ0FnSUhKbGRIVnliaUIwYUdsekxuTnBibWRzWlNnbmFIUnRiQ2NzSUNodUtTQTlQaUJuWlhSSVZFMU1Sbkp2YlVodmMzUk9iMlJsY3lodUxDQmhaR0Z3ZEdWeUtTazdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nVW1WMGRYSnVjeUIwYUdVZ1kzVnljbVZ1ZENCdWIyUmxJSEpsYm1SbGNtVmtJSFJ2SUVoVVRVd2dZVzVrSUhkeVlYQndaV1FnYVc0Z1lTQkRhR1ZsY21sdlYzSmhjSEJsY2k1Y2JpQWdJQ3BjYmlBZ0lDb2dUazlVUlRvZ1kyRnVJRzl1YkhrZ1ltVWdZMkZzYkdWa0lHOXVJR0VnZDNKaGNIQmxjaUJ2WmlCaElITnBibWRzWlNCdWIyUmxMbHh1SUNBZ0tseHVJQ0FnS2lCQWNtVjBkWEp1Y3lCN1EyaGxaWEpwYjFkeVlYQndaWEo5WEc0Z0lDQXFMMXh1SUNCeVpXNWtaWElvS1NCN1hHNGdJQ0FnWTI5dWMzUWdhSFJ0YkNBOUlIUm9hWE11YUhSdGJDZ3BPMXh1SUNBZ0lISmxkSFZ5YmlCc2IyRmtRMmhsWlhKcGIxSnZiM1FvYUhSdGJDazdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nVlhObFpDQjBieUJ6YVcxMWJHRjBaU0JsZG1WdWRITXVJRkJoYzNNZ1lXNGdaWFpsYm5SdVlXMWxJR0Z1WkNBb2IzQjBhVzl1WVd4c2VTa2daWFpsYm5RZ1lYSm5kVzFsYm5SekxpQlVhR2x6SUcxbGRHaHZaQ0J2Wmx4dUlDQWdLaUIwWlhOMGFXNW5JR1YyWlc1MGN5QnphRzkxYkdRZ1ltVWdiV1YwSUhkcGRHZ2djMjl0WlNCemEyVndkR2xqYVhOdExseHVJQ0FnS2x4dUlDQWdLaUJBY0dGeVlXMGdlMU4wY21sdVozMGdaWFpsYm5SY2JpQWdJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjlJRzF2WTJzZ0tHOXdkR2x2Ym1Gc0tWeHVJQ0FnS2lCQWNtVjBkWEp1Y3lCN1VtVmhZM1JYY21Gd2NHVnlmVnh1SUNBZ0tpOWNiaUFnYzJsdGRXeGhkR1VvWlhabGJuUXNJRzF2WTJzZ1BTQjdmU2tnZTF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG5OcGJtZHNaU2duYzJsdGRXeGhkR1VuTENBb2Jpa2dQVDRnZTF4dUlDQWdJQ0FnZEdocGMxdFNSVTVFUlZKRlVsMHVjMmx0ZFd4aGRHVkZkbVZ1ZENodUxDQmxkbVZ1ZEN3Z2JXOWpheWs3WEc0Z0lDQWdJQ0IwYUdselcxSlBUMVJkTG5Wd1pHRjBaU2dwTzF4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhNN1hHNGdJQ0FnZlNrN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dWWE5sWkNCMGJ5QnphVzExYkdGMFpTQjBhSEp2ZDJsdVp5QmhJSEpsYm1SbGNtbHVaeUJsY25KdmNpNGdVR0Z6Y3lCaGJpQmxjbkp2Y2lCMGJ5QjBhSEp2ZHk1Y2JpQWdJQ3BjYmlBZ0lDb2dRSEJoY21GdElIdFRkSEpwYm1kOUlHVnljbTl5WEc0Z0lDQXFJRUJ5WlhSMWNtNXpJSHRTWldGamRGZHlZWEJ3WlhKOVhHNGdJQ0FxTDF4dUlDQnphVzExYkdGMFpVVnljbTl5S0dWeWNtOXlLU0I3WEc0Z0lDQWdhV1lnS0hSb2FYTmJVazlQVkYwZ1BUMDlJSFJvYVhNcElIdGNiaUFnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnblVtVmhZM1JYY21Gd2NHVnlPanB6YVcxMWJHRjBaVVZ5Y205eUtDa2diV0Y1SUc1dmRDQmlaU0JqWVd4c1pXUWdiMjRnZEdobElISnZiM1FuS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1emFXNW5iR1VvSjNOcGJYVnNZWFJsUlhKeWIzSW5MQ0FvZEdocGMwNXZaR1VwSUQwK0lIdGNiaUFnSUNBZ0lHbG1JQ2gwYUdselRtOWtaUzV1YjJSbFZIbHdaU0E5UFQwZ0oyaHZjM1FuS1NCN1hHNGdJQ0FnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnblVtVmhZM1JYY21Gd2NHVnlPanB6YVcxMWJHRjBaVVZ5Y205eUtDa2dZMkZ1SUc5dWJIa2dZbVVnWTJGc2JHVmtJRzl1SUdOMWMzUnZiU0JqYjIxd2IyNWxiblJ6SnlrN1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lHTnZibk4wSUhKbGJtUmxjbVZ5SUQwZ2RHaHBjMXRTUlU1RVJWSkZVbDA3WEc0Z0lDQWdJQ0JwWmlBb2RIbHdaVzltSUhKbGJtUmxjbVZ5TG5OcGJYVnNZWFJsUlhKeWIzSWdJVDA5SUNkbWRXNWpkR2x2YmljcElIdGNiaUFnSUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRlI1Y0dWRmNuSnZjaWduZVc5MWNpQmhaR0Z3ZEdWeUlHUnZaWE1nYm05MElITjFjSEJ2Y25RZ1lITnBiWFZzWVhSbFJYSnliM0pnTGlCVWNua2dkWEJuY21Ga2FXNW5JR2wwSVNjcE8xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQmpiMjV6ZENCeWIyOTBUbTlrWlNBOUlHZGxkRkp2YjNST2IyUmxTVzUwWlhKdVlXd29kR2hwY3lrN1hHNGdJQ0FnSUNCamIyNXpkQ0J1YjJSbFNHbGxjbUZ5WTJoNUlEMGdXM1JvYVhOT2IyUmxYUzVqYjI1allYUW9ibTlrWlZCaGNtVnVkSE1vZEdocGN5d2dkR2hwYzA1dlpHVXBLVHRjYmlBZ0lDQWdJSEpsYm1SbGNtVnlMbk5wYlhWc1lYUmxSWEp5YjNJb2JtOWtaVWhwWlhKaGNtTm9lU3dnY205dmRFNXZaR1VzSUdWeWNtOXlLVHRjYmx4dUlDQWdJQ0FnZEdocGMxdFNUMDlVWFM1MWNHUmhkR1VvS1R0Y2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsek8xeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRkpsZEhWeWJuTWdkR2hsSUhCeWIzQnpJR2hoYzJnZ1ptOXlJSFJvWlNCeWIyOTBJRzV2WkdVZ2IyWWdkR2hsSUhkeVlYQndaWEl1WEc0Z0lDQXFYRzRnSUNBcUlFNVBWRVU2SUdOaGJpQnZibXg1SUdKbElHTmhiR3hsWkNCdmJpQmhJSGR5WVhCd1pYSWdiMllnWVNCemFXNW5iR1VnYm05a1pTNWNiaUFnSUNwY2JpQWdJQ29nUUhKbGRIVnlibk1nZTA5aWFtVmpkSDFjYmlBZ0lDb3ZYRzRnSUhCeWIzQnpLQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG5OcGJtZHNaU2duY0hKdmNITW5MQ0J3Y205d2MwOW1UbTlrWlNrN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dVbVYwZFhKdWN5QjBhR1VnYzNSaGRHVWdhR0Z6YUNCbWIzSWdkR2hsSUhKdmIzUWdibTlrWlNCdlppQjBhR1VnZDNKaGNIQmxjaTRnVDNCMGFXOXVZV3hzZVNCd1lYTnpJR2x1SUdFZ2NISnZjQ0J1WVcxbElHRnVaQ0JwZEZ4dUlDQWdLaUIzYVd4c0lISmxkSFZ5YmlCcWRYTjBJSFJvWVhRZ2RtRnNkV1V1WEc0Z0lDQXFYRzRnSUNBcUlFNVBWRVU2SUdOaGJpQnZibXg1SUdKbElHTmhiR3hsWkNCdmJpQmhJSGR5WVhCd1pYSWdiMllnWVNCemFXNW5iR1VnYm05a1pTNWNiaUFnSUNwY2JpQWdJQ29nUUhCaGNtRnRJSHRUZEhKcGJtZDlJRzVoYldVZ0tHOXdkR2x2Ym1Gc0tWeHVJQ0FnS2lCQWNtVjBkWEp1Y3lCN0tuMWNiaUFnSUNvdlhHNGdJSE4wWVhSbEtHNWhiV1VwSUh0Y2JpQWdJQ0JqYjI1emRDQjBhR2x6VG05a1pTQTlJSFJvYVhOYlVrOVBWRjBnUFQwOUlIUm9hWE1nUHlCMGFHbHpXMUpGVGtSRlVrVlNYUzVuWlhST2IyUmxLQ2tnT2lCMGFHbHpMbWRsZEU1dlpHVkpiblJsY201aGJDZ3BPMXh1SUNBZ0lHbG1JQ2gwYUdsekxtbHVjM1JoYm1ObEtDa2dQVDA5SUc1MWJHd2dmSHdnZEdocGMwNXZaR1V1Ym05a1pWUjVjR1VnSVQwOUlDZGpiR0Z6Y3ljcElIdGNiaUFnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnblVtVmhZM1JYY21Gd2NHVnlPanB6ZEdGMFpTZ3BJR05oYmlCdmJteDVJR0psSUdOaGJHeGxaQ0J2YmlCamJHRnpjeUJqYjIxd2IyNWxiblJ6SnlrN1hHNGdJQ0FnZlZ4dUlDQWdJR052Ym5OMElGOXpkR0YwWlNBOUlIUm9hWE11YzJsdVoyeGxLQ2R6ZEdGMFpTY3NJQ2dwSUQwK0lIUm9hWE11YVc1emRHRnVZMlVvS1M1emRHRjBaU2s3WEc0Z0lDQWdhV1lnS0hSNWNHVnZaaUJ1WVcxbElDRTlQU0FuZFc1a1pXWnBibVZrSnlrZ2UxeHVJQ0FnSUNBZ2FXWWdLRjl6ZEdGMFpTQTlQU0J1ZFd4c0tTQjdYRzRnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJVZVhCbFJYSnliM0lvWUZKbFlXTjBWM0poY0hCbGNqbzZjM1JoZEdVb1hDSWtlMjVoYldWOVhDSXBJSEpsY1hWcGNtVnpJSFJvWVhRZ1hGeGdjM1JoZEdWY1hHQWdibTkwSUdKbElGeGNZRzUxYkd4Y1hHQWdiM0lnWEZ4Z2RXNWtaV1pwYm1Wa1hGeGdZQ2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0J5WlhSMWNtNGdYM04wWVhSbFcyNWhiV1ZkTzF4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z1gzTjBZWFJsTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGSmxkSFZ5Ym5NZ2RHaGxJR052Ym5SbGVIUWdhR0Z6YUNCbWIzSWdkR2hsSUhKdmIzUWdibTlrWlNCdlppQjBhR1VnZDNKaGNIQmxjaTVjYmlBZ0lDb2dUM0IwYVc5dVlXeHNlU0J3WVhOeklHbHVJR0VnY0hKdmNDQnVZVzFsSUdGdVpDQnBkQ0IzYVd4c0lISmxkSFZ5YmlCcWRYTjBJSFJvWVhRZ2RtRnNkV1V1WEc0Z0lDQXFYRzRnSUNBcUlFNVBWRVU2SUdOaGJpQnZibXg1SUdKbElHTmhiR3hsWkNCdmJpQmhJSGR5WVhCd1pYSWdiMllnWVNCemFXNW5iR1VnYm05a1pTNWNiaUFnSUNwY2JpQWdJQ29nUUhCaGNtRnRJSHRUZEhKcGJtZDlJRzVoYldVZ0tHOXdkR2x2Ym1Gc0tWeHVJQ0FnS2lCQWNtVjBkWEp1Y3lCN0tuMWNiaUFnSUNvdlhHNGdJR052Ym5SbGVIUW9ibUZ0WlNrZ2UxeHVJQ0FnSUdsbUlDaDBhR2x6VzFKUFQxUmRJQ0U5UFNCMGFHbHpLU0I3WEc0Z0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KMUpsWVdOMFYzSmhjSEJsY2pvNlkyOXVkR1Y0ZENncElHTmhiaUJ2Ym14NUlHSmxJR05oYkd4bFpDQnZiaUIwYUdVZ2NtOXZkQ2NwTzF4dUlDQWdJSDFjYmlBZ0lDQmpiMjV6ZENCcGJuTjBZVzVqWlNBOUlIUm9hWE11YzJsdVoyeGxLQ2RqYjI1MFpYaDBKeXdnS0NrZ1BUNGdkR2hwY3k1cGJuTjBZVzVqWlNncEtUdGNiaUFnSUNCcFppQW9hVzV6ZEdGdVkyVWdQVDA5SUc1MWJHd3BJSHRjYmlBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpZ25VbVZoWTNSWGNtRndjR1Z5T2pwamIyNTBaWGgwS0NrZ1kyRnVJRzl1YkhrZ1ltVWdZMkZzYkdWa0lHOXVJR052YlhCdmJtVnVkSE1nZDJsMGFDQnBibk4wWVc1alpYTW5LVHRjYmlBZ0lDQjlYRzRnSUNBZ1kyOXVjM1FnWDJOdmJuUmxlSFFnUFNCcGJuTjBZVzVqWlM1amIyNTBaWGgwTzF4dUlDQWdJR2xtSUNoMGVYQmxiMllnYm1GdFpTQWhQVDBnSjNWdVpHVm1hVzVsWkNjcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCZlkyOXVkR1Y0ZEZ0dVlXMWxYVHRjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUY5amIyNTBaWGgwTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGSmxkSFZ5Ym5NZ1lTQnVaWGNnZDNKaGNIQmxjaUIzYVhSb0lHRnNiQ0J2WmlCMGFHVWdZMmhwYkdSeVpXNGdiMllnZEdobElHTjFjbkpsYm5RZ2QzSmhjSEJsY2k1Y2JpQWdJQ3BjYmlBZ0lDb2dRSEJoY21GdElIdEZibnA1YldWVFpXeGxZM1J2Y24wZ1czTmxiR1ZqZEc5eVhWeHVJQ0FnS2lCQWNtVjBkWEp1Y3lCN1VtVmhZM1JYY21Gd2NHVnlmVnh1SUNBZ0tpOWNiaUFnWTJocGJHUnlaVzRvYzJWc1pXTjBiM0lwSUh0Y2JpQWdJQ0JqYjI1emRDQmhiR3hEYUdsc1pISmxiaUE5SUhSb2FYTXVabXhoZEUxaGNDZ29iaWtnUFQ0Z1kyaHBiR1J5Wlc1UFprNXZaR1VvYmk1blpYUk9iMlJsU1c1MFpYSnVZV3dvS1NrcE8xeHVJQ0FnSUhKbGRIVnliaUJ6Wld4bFkzUnZjaUEvSUdGc2JFTm9hV3hrY21WdUxtWnBiSFJsY2loelpXeGxZM1J2Y2lrZ09pQmhiR3hEYUdsc1pISmxianRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCU1pYUjFjbTV6SUdFZ2JtVjNJSGR5WVhCd1pYSWdkMmwwYUNCaElITndaV05wWm1saklHTm9hV3hrWEc0Z0lDQXFYRzRnSUNBcUlFQndZWEpoYlNCN1RuVnRZbVZ5ZlNCYmFXNWtaWGhkWEc0Z0lDQXFJRUJ5WlhSMWNtNXpJSHRTWldGamRGZHlZWEJ3WlhKOVhHNGdJQ0FxTDF4dUlDQmphR2xzWkVGMEtHbHVaR1Y0S1NCN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdWMybHVaMnhsS0NkamFHbHNaRUYwSnl3Z0tDa2dQVDRnZEdocGN5NWphR2xzWkhKbGJpZ3BMbUYwS0dsdVpHVjRLU2s3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1VtVjBkWEp1Y3lCaElIZHlZWEJ3WlhJZ1lYSnZkVzVrSUdGc2JDQnZaaUIwYUdVZ2NHRnlaVzUwY3k5aGJtTmxjM1J2Y25NZ2IyWWdkR2hsSUhkeVlYQndaWEl1SUVSdlpYTWdibTkwSUdsdVkyeDFaR1VnZEdobElHNXZaR1ZjYmlBZ0lDb2dhVzRnZEdobElHTjFjbkpsYm5RZ2QzSmhjSEJsY2k1Y2JpQWdJQ3BjYmlBZ0lDb2dUazlVUlRvZ1kyRnVJRzl1YkhrZ1ltVWdZMkZzYkdWa0lHOXVJR0VnZDNKaGNIQmxjaUJ2WmlCaElITnBibWRzWlNCdWIyUmxMbHh1SUNBZ0tseHVJQ0FnS2lCQWNHRnlZVzBnZTBWdWVubHRaVk5sYkdWamRHOXlmU0JiYzJWc1pXTjBiM0pkWEc0Z0lDQXFJRUJ5WlhSMWNtNXpJSHRTWldGamRGZHlZWEJ3WlhKOVhHNGdJQ0FxTDF4dUlDQndZWEpsYm5SektITmxiR1ZqZEc5eUtTQjdYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjMmx1WjJ4bEtDZHdZWEpsYm5Sekp5d2dLRzRwSUQwK0lIdGNiaUFnSUNBZ0lHTnZibk4wSUdGc2JGQmhjbVZ1ZEhNZ1BTQjBhR2x6TG5keVlYQW9ibTlrWlZCaGNtVnVkSE1vZEdocGN5d2diaWtwTzF4dUlDQWdJQ0FnY21WMGRYSnVJSE5sYkdWamRHOXlJRDhnWVd4c1VHRnlaVzUwY3k1bWFXeDBaWElvYzJWc1pXTjBiM0lwSURvZ1lXeHNVR0Z5Wlc1MGN6dGNiaUFnSUNCOUtUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJTWlhSMWNtNXpJR0VnZDNKaGNIQmxjaUJoY205MWJtUWdkR2hsSUdsdGJXVmthV0YwWlNCd1lYSmxiblFnYjJZZ2RHaGxJR04xY25KbGJuUWdibTlrWlM1Y2JpQWdJQ3BjYmlBZ0lDb2dRSEpsZEhWeWJuTWdlMUpsWVdOMFYzSmhjSEJsY24xY2JpQWdJQ292WEc0Z0lIQmhjbVZ1ZENncElIdGNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NW1iR0YwVFdGd0tDaHVLU0E5UGlCYmJpNXdZWEpsYm5SektDa3VaMlYwS0RBcFhTazdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ3BjYmlBZ0lDb2dRSEJoY21GdElIdEZibnA1YldWVFpXeGxZM1J2Y24wZ2MyVnNaV04wYjNKY2JpQWdJQ29nUUhKbGRIVnlibk1nZTFKbFlXTjBWM0poY0hCbGNuMWNiaUFnSUNvdlhHNGdJR05zYjNObGMzUW9jMlZzWldOMGIzSXBJSHRjYmlBZ0lDQnBaaUFvZEdocGN5NXBjeWh6Wld4bFkzUnZjaWtwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsek8xeHVJQ0FnSUgxY2JpQWdJQ0JqYjI1emRDQnRZWFJqYUdsdVowRnVZMlZ6ZEc5eWN5QTlJSFJvYVhNdWNHRnlaVzUwY3lncExtWnBiSFJsY2loelpXeGxZM1J2Y2lrN1hHNGdJQ0FnY21WMGRYSnVJRzFoZEdOb2FXNW5RVzVqWlhOMGIzSnpMbXhsYm1kMGFDQStJREFnUHlCdFlYUmphR2x1WjBGdVkyVnpkRzl5Y3k1bWFYSnpkQ2dwSURvZ2RHaHBjeTVtYVc1a1YyaGxjbVVvS0NrZ1BUNGdabUZzYzJVcE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRkpsZEhWeWJuTWdkR2hsSUhaaGJIVmxJRzltSUNCd2NtOXdJSGRwZEdnZ2RHaGxJR2RwZG1WdUlHNWhiV1VnYjJZZ2RHaGxJSEp2YjNRZ2JtOWtaUzVjYmlBZ0lDcGNiaUFnSUNvZ1FIQmhjbUZ0SUh0VGRISnBibWQ5SUhCeWIzQk9ZVzFsWEc0Z0lDQXFJRUJ5WlhSMWNtNXpJSHNxZlZ4dUlDQWdLaTljYmlBZ2NISnZjQ2h3Y205d1RtRnRaU2tnZTF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG5CeWIzQnpLQ2xiY0hKdmNFNWhiV1ZkTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGVnpaV1FnZEc4Z2FXNTJiMnRsSUdFZ1puVnVZM1JwYjI0Z2NISnZjQzVjYmlBZ0lDb2dWMmxzYkNCcGJuWnZhMlVnWVc0Z1puVnVZM1JwYjI0Z2NISnZjQ0JoYm1RZ2NtVjBkWEp1SUdsMGN5QjJZV3gxWlM1Y2JpQWdJQ3BjYmlBZ0lDb2dRSEJoY21GdElIdFRkSEpwYm1kOUlIQnliM0JPWVcxbFhHNGdJQ0FxSUVCeVpYUjFjbTV6SUh0QmJubDlYRzRnSUNBcUwxeHVJQ0JwYm5admEyVW9jSEp2Y0U1aGJXVXBJSHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTV6YVc1bmJHVW9KMmx1ZG05clpTY3NJQ2dwSUQwK0lIdGNiaUFnSUNBZ0lHTnZibk4wSUdoaGJtUnNaWElnUFNCMGFHbHpMbkJ5YjNBb2NISnZjRTVoYldVcE8xeHVJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppQm9ZVzVrYkdWeUlDRTlQU0FuWm5WdVkzUnBiMjRuS1NCN1hHNGdJQ0FnSUNBZ0lIUm9jbTkzSUc1bGR5QlVlWEJsUlhKeWIzSW9KMUpsWVdOMFYzSmhjSEJsY2pvNmFXNTJiMnRsS0NrZ2NtVnhkV2x5WlhNZ2RHaGxJRzVoYldVZ2IyWWdZU0J3Y205d0lIZG9iM05sSUhaaGJIVmxJR2x6SUdFZ1puVnVZM1JwYjI0bktUdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lISmxkSFZ5YmlBb0xpNHVZWEpuY3lrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQnlaWE53YjI1elpTQTlJSFI1Y0dWdlppQjBhR2x6VzFKRlRrUkZVa1ZTWFM1M2NtRndTVzUyYjJ0bElEMDlQU0FuWm5WdVkzUnBiMjRuWEc0Z0lDQWdJQ0FnSUNBZ1B5QjBhR2x6VzFKRlRrUkZVa1ZTWFM1M2NtRndTVzUyYjJ0bEtDZ3BJRDArSUdoaGJtUnNaWElvTGk0dVlYSm5jeWtwWEc0Z0lDQWdJQ0FnSUNBZ09pQm9ZVzVrYkdWeUtDNHVMbUZ5WjNNcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6VzFKUFQxUmRMblZ3WkdGMFpTZ3BPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdjbVZ6Y0c5dWMyVTdYRzRnSUNBZ0lDQjlPMXh1SUNBZ0lIMHBPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUZKbGRIVnlibk1nWVNCM2NtRndjR1Z5SUc5bUlIUm9aU0J1YjJSbElISmxibVJsY21Wa0lHSjVJSFJvWlNCd2NtOTJhV1JsWkNCeVpXNWtaWElnY0hKdmNDNWNiaUFnSUNwY2JpQWdJQ29nUUhCaGNtRnRJSHRUZEhKcGJtZDlJSEJ5YjNCT1lXMWxYRzRnSUNBcUlFQnlaWFIxY201eklIdEdkVzVqZEdsdmJuMWNiaUFnSUNvdlhHNGdJSEpsYm1SbGNsQnliM0FvY0hKdmNFNWhiV1VwSUh0Y2JpQWdJQ0JqYjI1emRDQmhaR0Z3ZEdWeUlEMGdaMlYwUVdSaGNIUmxjaWgwYUdselcwOVFWRWxQVGxOZEtUdGNiaUFnSUNCcFppQW9kSGx3Wlc5bUlHRmtZWEIwWlhJdWQzSmhjQ0FoUFQwZ0oyWjFibU4wYVc5dUp5a2dlMXh1SUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRkpoYm1kbFJYSnliM0lvSjNsdmRYSWdZV1JoY0hSbGNpQmtiMlZ6SUc1dmRDQnpkWEJ3YjNKMElHQjNjbUZ3WUM0Z1ZISjVJSFZ3WjNKaFpHbHVaeUJwZENFbktUdGNiaUFnSUNCOVhHNWNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NXphVzVuYkdVb0ozSmxibVJsY2xCeWIzQW5MQ0FvYmlrZ1BUNGdlMXh1SUNBZ0lDQWdhV1lnS0c0dWJtOWtaVlI1Y0dVZ1BUMDlJQ2RvYjNOMEp5a2dlMXh1SUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnVkhsd1pVVnljbTl5S0NkU1pXRmpkRmR5WVhCd1pYSTZPbkpsYm1SbGNsQnliM0FvS1NCallXNGdiMjVzZVNCaVpTQmpZV3hzWldRZ2IyNGdZM1Z6ZEc5dElHTnZiWEJ2Ym1WdWRITW5LVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJR2xtSUNoMGVYQmxiMllnY0hKdmNFNWhiV1VnSVQwOUlDZHpkSEpwYm1jbktTQjdYRzRnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJVZVhCbFJYSnliM0lvSjFKbFlXTjBWM0poY0hCbGNqbzZjbVZ1WkdWeVVISnZjQ2dwT2lCZ2NISnZjRTVoYldWZ0lHMTFjM1FnWW1VZ1lTQnpkSEpwYm1jbktUdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lHTnZibk4wSUhCeWIzQnpJRDBnZEdocGN5NXdjbTl3Y3lncE8xeHVJQ0FnSUNBZ2FXWWdLQ0ZvWVhNb2NISnZjSE1zSUhCeWIzQk9ZVzFsS1NrZ2UxeHVJQ0FnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb1lGSmxZV04wVjNKaGNIQmxjam82Y21WdVpHVnlVSEp2Y0NncE9pQnVieUJ3Y205d0lHTmhiR3hsWkNEaWdKd2tlM0J5YjNCT1lXMWxmZUtBbkNCbWIzVnVaR0FwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnWTI5dWMzUWdjSEp2Y0ZaaGJIVmxJRDBnY0hKdmNITmJjSEp2Y0U1aGJXVmRPMXh1SUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUJ3Y205d1ZtRnNkV1VnSVQwOUlDZG1kVzVqZEdsdmJpY3BJSHRjYmlBZ0lDQWdJQ0FnZEdoeWIzY2dibVYzSUZSNWNHVkZjbkp2Y2loZ1VtVmhZM1JYY21Gd2NHVnlPanB5Wlc1a1pYSlFjbTl3S0NrNklHVjRjR1ZqZEdWa0lIQnliM0FnNG9DY0pIdHdjbTl3VG1GdFpYM2lnSndnZEc4Z1kyOXVkR0ZwYmlCaElHWjFibU4wYVc5dUxDQmlkWFFnYVhRZ2FHOXNaSE1nNG9DY0pIdDBlWEJsYjJZZ2NISnZjRlpoYkhWbGZlS0FuR0FwTzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCeVpYUjFjbTRnS0M0dUxtRnlaM01wSUQwK0lIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ1pXeGxiV1Z1ZENBOUlIQnliM0JXWVd4MVpTZ3VMaTVoY21kektUdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2QzSmhjSEJsWkNBOUlHRmtZWEIwWlhJdWQzSmhjQ2hsYkdWdFpXNTBLVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWQzSmhjQ2gzY21Gd2NHVmtMQ0J1ZFd4c0xDQjBhR2x6VzA5UVZFbFBUbE5kS1R0Y2JpQWdJQ0FnSUgwN1hHNGdJQ0FnZlNrN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dVbVYwZFhKdWN5QjBhR1VnYTJWNUlHRnpjMmxuYm1Wa0lIUnZJSFJvWlNCamRYSnlaVzUwSUc1dlpHVXVYRzRnSUNBcVhHNGdJQ0FxSUVCeVpYUjFjbTV6SUh0VGRISnBibWQ5WEc0Z0lDQXFMMXh1SUNCclpYa29LU0I3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11YzJsdVoyeGxLQ2RyWlhrbkxDQW9iaWtnUFQ0Z0tHNHVhMlY1SUQwOVBTQjFibVJsWm1sdVpXUWdQeUJ1ZFd4c0lEb2diaTVyWlhrcEtUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJTWlhSMWNtNXpJSFJvWlNCMGVYQmxJRzltSUhSb1pTQnliMjkwSUc1dlpHVWdiMllnZEdocGN5QjNjbUZ3Y0dWeUxpQkpaaUJwZENkeklHRWdZMjl0Y0c5emFYUmxJR052YlhCdmJtVnVkQ3dnZEdocGN5QjNhV3hzSUdKbFhHNGdJQ0FxSUhSb1pTQmpiMjF3YjI1bGJuUWdZMjl1YzNSeWRXTjBiM0l1SUVsbUlHbDBKM01nYm1GMGFYWmxJRVJQVFNCdWIyUmxMQ0JwZENCM2FXeHNJR0psSUdFZ2MzUnlhVzVuTGx4dUlDQWdLbHh1SUNBZ0tpQkFjbVYwZFhKdWN5QjdVM1J5YVc1bmZFWjFibU4wYVc5dWZWeHVJQ0FnS2k5Y2JpQWdkSGx3WlNncElIdGNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NXphVzVuYkdVb0ozUjVjR1VuTENBb2Jpa2dQVDRnZEhsd1pVOW1UbTlrWlNodUtTazdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nVW1WMGRYSnVjeUIwYUdVZ2JtRnRaU0J2WmlCMGFHVWdjbTl2ZENCdWIyUmxJRzltSUhSb2FYTWdkM0poY0hCbGNpNWNiaUFnSUNwY2JpQWdJQ29nU1c0Z2IzSmtaWElnYjJZZ2NISmxZMlZrWlc1alpTQTlQaUIwZVhCbExtUnBjM0JzWVhsT1lXMWxJQzArSUhSNWNHVXVibUZ0WlNBdFBpQjBlWEJsTGx4dUlDQWdLbHh1SUNBZ0tpQkFjbVYwZFhKdWN5QjdVM1J5YVc1bmZWeHVJQ0FnS2k5Y2JpQWdibUZ0WlNncElIdGNiaUFnSUNCamIyNXpkQ0JoWkdGd2RHVnlJRDBnWjJWMFFXUmhjSFJsY2loMGFHbHpXMDlRVkVsUFRsTmRLVHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTV6YVc1bmJHVW9KMjVoYldVbkxDQW9iaWtnUFQ0Z0tGeHVJQ0FnSUNBZ1lXUmhjSFJsY2k1a2FYTndiR0Y1VG1GdFpVOW1UbTlrWlNBL0lHRmtZWEIwWlhJdVpHbHpjR3hoZVU1aGJXVlBaazV2WkdVb2Jpa2dPaUJrYVhOd2JHRjVUbUZ0WlU5bVRtOWtaU2h1S1Z4dUlDQWdJQ2twTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGSmxkSFZ5Ym5NZ2QyaGxkR2hsY2lCdmNpQnViM1FnZEdobElHTjFjbkpsYm5RZ2NtOXZkQ0J1YjJSbElHaGhjeUIwYUdVZ1oybDJaVzRnWTJ4aGMzTWdibUZ0WlNCdmNpQnViM1F1WEc0Z0lDQXFYRzRnSUNBcUlFNVBWRVU2SUdOaGJpQnZibXg1SUdKbElHTmhiR3hsWkNCdmJpQmhJSGR5WVhCd1pYSWdiMllnWVNCemFXNW5iR1VnYm05a1pTNWNiaUFnSUNwY2JpQWdJQ29nUUhCaGNtRnRJSHRUZEhKcGJtZDlJR05zWVhOelRtRnRaVnh1SUNBZ0tpQkFjbVYwZFhKdWN5QjdRbTl2YkdWaGJuMWNiaUFnSUNvdlhHNGdJR2hoYzBOc1lYTnpLR05zWVhOelRtRnRaU2tnZTF4dUlDQWdJR2xtSUNoMGVYQmxiMllnWTJ4aGMzTk9ZVzFsSUQwOVBTQW5jM1J5YVc1bkp5QW1KaUJqYkdGemMwNWhiV1V1YVc1a1pYaFBaaWduTGljcElDRTlQU0F0TVNrZ2UxeHVJQ0FnSUNBZ0x5OGdaWE5zYVc1MExXUnBjMkZpYkdVdGJtVjRkQzFzYVc1bElHNXZMV052Ym5OdmJHVmNiaUFnSUNBZ0lHTnZibk52YkdVdWQyRnliaWduU1hRZ2JHOXZhM01nYkdsclpTQjViM1ZjWENkeVpTQmpZV3hzYVc1bklHQlNaV0ZqZEZkeVlYQndaWEk2T21oaGMwTnNZWE56S0NsZ0lIZHBkR2dnWVNCRFUxTWdjMlZzWldOMGIzSXVJR2hoYzBOc1lYTnpLQ2tnWlhod1pXTjBjeUJoSUdOc1lYTnpJRzVoYldVc0lHNXZkQ0JoSUVOVFV5QnpaV3hsWTNSdmNpNG5LVHRjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjMmx1WjJ4bEtDZG9ZWE5EYkdGemN5Y3NJQ2h1S1NBOVBpQm9ZWE5EYkdGemMwNWhiV1VvYml3Z1kyeGhjM05PWVcxbEtTazdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nU1hSbGNtRjBaWE1nZEdoeWIzVm5hQ0JsWVdOb0lHNXZaR1VnYjJZZ2RHaGxJR04xY25KbGJuUWdkM0poY0hCbGNpQmhibVFnWlhobFkzVjBaWE1nZEdobElIQnliM1pwWkdWa0lHWjFibU4wYVc5dUlIZHBkR2dnWVZ4dUlDQWdLaUIzY21Gd2NHVnlJR0Z5YjNWdVpDQjBhR1VnWTI5eWNtVnpjRzl1WkdsdVp5QnViMlJsSUhCaGMzTmxaQ0JwYmlCaGN5QjBhR1VnWm1seWMzUWdZWEpuZFcxbGJuUXVYRzRnSUNBcVhHNGdJQ0FxSUVCd1lYSmhiU0I3Um5WdVkzUnBiMjU5SUdadVhHNGdJQ0FxSUVCeVpYUjFjbTV6SUh0U1pXRmpkRmR5WVhCd1pYSjlYRzRnSUNBcUwxeHVJQ0JtYjNKRllXTm9LR1p1S1NCN1hHNGdJQ0FnZEdocGN5NW5aWFJPYjJSbGMwbHVkR1Z5Ym1Gc0tDa3VabTl5UldGamFDZ29iaXdnYVNrZ1BUNGdabTR1WTJGc2JDaDBhR2x6TENCMGFHbHpMbmR5WVhBb2Jpa3NJR2twS1R0Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3p0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQk5ZWEJ6SUhSb1pTQmpkWEp5Wlc1MElHRnljbUY1SUc5bUlHNXZaR1Z6SUhSdklHRnViM1JvWlhJZ1lYSnlZWGt1SUVWaFkyZ2dibTlrWlNCcGN5QndZWE56WldRZ2FXNGdZWE1nWVNCZ1VtVmhZM1JYY21Gd2NHVnlZRnh1SUNBZ0tpQjBieUIwYUdVZ2JXRndJR1oxYm1OMGFXOXVMbHh1SUNBZ0tseHVJQ0FnS2lCQWNHRnlZVzBnZTBaMWJtTjBhVzl1ZlNCbWJseHVJQ0FnS2lCQWNtVjBkWEp1Y3lCN1FYSnlZWGw5WEc0Z0lDQXFMMXh1SUNCdFlYQW9abTRwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1blpYUk9iMlJsYzBsdWRHVnlibUZzS0NrdWJXRndLQ2h1TENCcEtTQTlQaUJtYmk1allXeHNLSFJvYVhNc0lIUm9hWE11ZDNKaGNDaHVLU3dnYVNrcE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRkpsWkhWalpYTWdkR2hsSUdOMWNuSmxiblFnWVhKeVlYa2diMllnYm05a1pYTWdkRzhnWVc1dmRHaGxjaUJoY25KaGVTNWNiaUFnSUNvZ1JXRmphQ0J1YjJSbElHbHpJSEJoYzNObFpDQnBiaUJoY3lCaElHQlRhR0ZzYkc5M1YzSmhjSEJsY21BZ2RHOGdkR2hsSUhKbFpIVmpaWElnWm5WdVkzUnBiMjR1WEc0Z0lDQXFYRzRnSUNBcUlFQndZWEpoYlNCN1JuVnVZM1JwYjI1OUlHWnVJQzBnZEdobElISmxaSFZqWlhJZ1puVnVZM1JwYjI1Y2JpQWdJQ29nUUhCaGNtRnRJSHNxZlNCcGJtbDBhV0ZzVm1Gc2RXVWdMU0IwYUdVZ2FXNXBkR2xoYkNCMllXeDFaVnh1SUNBZ0tpQkFjbVYwZFhKdWN5QjdLbjFjYmlBZ0lDb3ZYRzRnSUhKbFpIVmpaU2htYml3Z2FXNXBkR2xoYkZaaGJIVmxJRDBnZFc1a1pXWnBibVZrS1NCN1hHNGdJQ0FnYVdZZ0tHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnZ1BpQXhLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1blpYUk9iMlJsYzBsdWRHVnlibUZzS0NrdWNtVmtkV05sS0Z4dUlDQWdJQ0FnSUNBb1lXTmpkVzBzSUc0c0lHa3BJRDArSUdadUxtTmhiR3dvZEdocGN5d2dZV05qZFcwc0lIUm9hWE11ZDNKaGNDaHVLU3dnYVNrc1hHNGdJQ0FnSUNBZ0lHbHVhWFJwWVd4V1lXeDFaU3hjYmlBZ0lDQWdJQ2s3WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbWRsZEU1dlpHVnpTVzUwWlhKdVlXd29LUzV5WldSMVkyVW9LR0ZqWTNWdExDQnVMQ0JwS1NBOVBpQm1iaTVqWVd4c0tGeHVJQ0FnSUNBZ2RHaHBjeXhjYmlBZ0lDQWdJR2tnUFQwOUlERWdQeUIwYUdsekxuZHlZWEFvWVdOamRXMHBJRG9nWVdOamRXMHNYRzRnSUNBZ0lDQjBhR2x6TG5keVlYQW9iaWtzWEc0Z0lDQWdJQ0JwTEZ4dUlDQWdJQ2twTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGSmxaSFZqWlhNZ2RHaGxJR04xY25KbGJuUWdZWEp5WVhrZ2IyWWdibTlrWlhNZ2RHOGdZVzV2ZEdobGNpQmhjbkpoZVN3Z1puSnZiU0J5YVdkb2RDQjBieUJzWldaMExpQkZZV05vSUc1dlpHVWdhWE1nY0dGemMyVmtYRzRnSUNBcUlHbHVJR0Z6SUdFZ1lGTm9ZV3hzYjNkWGNtRndjR1Z5WUNCMGJ5QjBhR1VnY21Wa2RXTmxjaUJtZFc1amRHbHZiaTVjYmlBZ0lDcGNiaUFnSUNvZ1FIQmhjbUZ0SUh0R2RXNWpkR2x2Ym4wZ1ptNGdMU0IwYUdVZ2NtVmtkV05sY2lCbWRXNWpkR2x2Ymx4dUlDQWdLaUJBY0dGeVlXMGdleXA5SUdsdWFYUnBZV3hXWVd4MVpTQXRJSFJvWlNCcGJtbDBhV0ZzSUhaaGJIVmxYRzRnSUNBcUlFQnlaWFIxY201eklIc3FmVnh1SUNBZ0tpOWNiaUFnY21Wa2RXTmxVbWxuYUhRb1ptNHNJR2x1YVhScFlXeFdZV3gxWlNBOUlIVnVaR1ZtYVc1bFpDa2dlMXh1SUNBZ0lHbG1JQ2hoY21kMWJXVnVkSE11YkdWdVozUm9JRDRnTVNrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVaMlYwVG05a1pYTkpiblJsY201aGJDZ3BMbkpsWkhWalpWSnBaMmgwS0Z4dUlDQWdJQ0FnSUNBb1lXTmpkVzBzSUc0c0lHa3BJRDArSUdadUxtTmhiR3dvZEdocGN5d2dZV05qZFcwc0lIUm9hWE11ZDNKaGNDaHVLU3dnYVNrc1hHNGdJQ0FnSUNBZ0lHbHVhWFJwWVd4V1lXeDFaU3hjYmlBZ0lDQWdJQ2s3WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbWRsZEU1dlpHVnpTVzUwWlhKdVlXd29LUzV5WldSMVkyVlNhV2RvZENnb1lXTmpkVzBzSUc0c0lHa3BJRDArSUdadUxtTmhiR3dvWEc0Z0lDQWdJQ0IwYUdsekxGeHVJQ0FnSUNBZ2FTQTlQVDBnTVNBL0lIUm9hWE11ZDNKaGNDaGhZMk4xYlNrZ09pQmhZMk4xYlN4Y2JpQWdJQ0FnSUhSb2FYTXVkM0poY0NodUtTeGNiaUFnSUNBZ0lHa3NYRzRnSUNBZ0tTazdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nVW1WMGRYSnVjeUJoSUc1bGR5QjNjbUZ3Y0dWeUlIZHBkR2dnWVNCemRXSnpaWFFnYjJZZ2RHaGxJRzV2WkdWeklHOW1JSFJvWlNCdmNtbG5hVzVoYkNCM2NtRndjR1Z5TENCaFkyTnZjbVJwYm1jZ2RHOGdkR2hsWEc0Z0lDQXFJSEoxYkdWeklHOW1JR0JCY25KaGVTTnpiR2xqWldBdVhHNGdJQ0FxWEc0Z0lDQXFJRUJ3WVhKaGJTQjdUblZ0WW1WeWZTQmlaV2RwYmx4dUlDQWdLaUJBY0dGeVlXMGdlMDUxYldKbGNuMGdaVzVrWEc0Z0lDQXFJRUJ5WlhSMWNtNXpJSHRUYUdGc2JHOTNWM0poY0hCbGNuMWNiaUFnSUNvdlhHNGdJSE5zYVdObEtHSmxaMmx1TENCbGJtUXBJSHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTUzY21Gd0tIUm9hWE11WjJWMFRtOWtaWE5KYm5SbGNtNWhiQ2dwTG5Oc2FXTmxLR0psWjJsdUxDQmxibVFwS1R0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlNaWFIxY201eklIZG9aWFJvWlhJZ2IzSWdibTkwSUdGdWVTQnZaaUIwYUdVZ2JtOWtaWE1nYVc0Z2RHaGxJSGR5WVhCd1pYSWdiV0YwWTJnZ2RHaGxJSEJ5YjNacFpHVmtJSE5sYkdWamRHOXlMbHh1SUNBZ0tseHVJQ0FnS2lCQWNHRnlZVzBnZTBWdWVubHRaVk5sYkdWamRHOXlmU0J6Wld4bFkzUnZjbHh1SUNBZ0tpQkFjbVYwZFhKdWN5QjdRbTl2YkdWaGJuMWNiaUFnSUNvdlhHNGdJSE52YldVb2MyVnNaV04wYjNJcElIdGNiaUFnSUNCcFppQW9kR2hwYzF0U1QwOVVYU0E5UFQwZ2RHaHBjeWtnZTF4dUlDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ2RTWldGamRGZHlZWEJ3WlhJNk9uTnZiV1VvS1NCallXNGdibTkwSUdKbElHTmhiR3hsWkNCdmJpQjBhR1VnY205dmRDY3BPMXh1SUNBZ0lIMWNiaUFnSUNCamIyNXpkQ0J3Y21Wa2FXTmhkR1VnUFNCaWRXbHNaRkJ5WldScFkyRjBaU2h6Wld4bFkzUnZjaWs3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11WjJWMFRtOWtaWE5KYm5SbGNtNWhiQ2dwTG5OdmJXVW9jSEpsWkdsallYUmxLVHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCU1pYUjFjbTV6SUhkb1pYUm9aWElnYjNJZ2JtOTBJR0Z1ZVNCdlppQjBhR1VnYm05a1pYTWdhVzRnZEdobElIZHlZWEJ3WlhJZ2NHRnpjeUIwYUdVZ2NISnZkbWxrWldRZ2NISmxaR2xqWVhSbElHWjFibU4wYVc5dUxseHVJQ0FnS2x4dUlDQWdLaUJBY0dGeVlXMGdlMFoxYm1OMGFXOXVmU0J3Y21Wa2FXTmhkR1ZjYmlBZ0lDb2dRSEpsZEhWeWJuTWdlMEp2YjJ4bFlXNTlYRzRnSUNBcUwxeHVJQ0J6YjIxbFYyaGxjbVVvY0hKbFpHbGpZWFJsS1NCN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdVoyVjBUbTlrWlhOSmJuUmxjbTVoYkNncExuTnZiV1VvS0c0c0lHa3BJRDArSUhCeVpXUnBZMkYwWlM1allXeHNLSFJvYVhNc0lIUm9hWE11ZDNKaGNDaHVLU3dnYVNrcE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRkpsZEhWeWJuTWdkMmhsZEdobGNpQnZjaUJ1YjNRZ1lXeHNJRzltSUhSb1pTQnViMlJsY3lCcGJpQjBhR1VnZDNKaGNIQmxjaUJ0WVhSamFDQjBhR1VnY0hKdmRtbGtaV1FnYzJWc1pXTjBiM0l1WEc0Z0lDQXFYRzRnSUNBcUlFQndZWEpoYlNCN1JXNTZlVzFsVTJWc1pXTjBiM0o5SUhObGJHVmpkRzl5WEc0Z0lDQXFJRUJ5WlhSMWNtNXpJSHRDYjI5c1pXRnVmVnh1SUNBZ0tpOWNiaUFnWlhabGNua29jMlZzWldOMGIzSXBJSHRjYmlBZ0lDQmpiMjV6ZENCd2NtVmthV05oZEdVZ1BTQmlkV2xzWkZCeVpXUnBZMkYwWlNoelpXeGxZM1J2Y2lrN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdVoyVjBUbTlrWlhOSmJuUmxjbTVoYkNncExtVjJaWEo1S0hCeVpXUnBZMkYwWlNrN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dVbVYwZFhKdWN5QjNhR1YwYUdWeUlHOXlJRzV2ZENCaGJua2diMllnZEdobElHNXZaR1Z6SUdsdUlIUm9aU0IzY21Gd2NHVnlJSEJoYzNNZ2RHaGxJSEJ5YjNacFpHVmtJSEJ5WldScFkyRjBaU0JtZFc1amRHbHZiaTVjYmlBZ0lDcGNiaUFnSUNvZ1FIQmhjbUZ0SUh0R2RXNWpkR2x2Ym4wZ2NISmxaR2xqWVhSbFhHNGdJQ0FxSUVCeVpYUjFjbTV6SUh0Q2IyOXNaV0Z1ZlZ4dUlDQWdLaTljYmlBZ1pYWmxjbmxYYUdWeVpTaHdjbVZrYVdOaGRHVXBJSHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTVuWlhST2IyUmxjMGx1ZEdWeWJtRnNLQ2t1WlhabGNua29LRzRzSUdrcElEMCtJSEJ5WldScFkyRjBaUzVqWVd4c0tIUm9hWE1zSUhSb2FYTXVkM0poY0NodUtTd2dhU2twTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGVjBhV3hwZEhrZ2JXVjBhRzlrSUhWelpXUWdkRzhnWTNKbFlYUmxJRzVsZHlCM2NtRndjR1Z5Y3lCM2FYUm9JR0VnYldGd2NHbHVaeUJtZFc1amRHbHZiaUIwYUdGMElISmxkSFZ5Ym5NZ1lXNGdZWEp5WVhrZ2IyWmNiaUFnSUNvZ2JtOWtaWE1nYVc0Z2NtVnpjRzl1YzJVZ2RHOGdZU0J6YVc1bmJHVWdibTlrWlNCM2NtRndjR1Z5TGlCVWFHVWdjbVYwZFhKdVpXUWdkM0poY0hCbGNpQnBjeUJoSUhOcGJtZHNaU0IzY21Gd2NHVnlJR0Z5YjNWdVpGeHVJQ0FnS2lCaGJHd2diMllnZEdobElHMWhjSEJsWkNCdWIyUmxjeUJtYkdGMGRHVnVaV1FnS0dGdVpDQmtaUzFrZFhCc2FXTmhkR1ZrS1M1Y2JpQWdJQ3BjYmlBZ0lDb2dRSEJoY21GdElIdEdkVzVqZEdsdmJuMGdabTVjYmlBZ0lDb2dRSEpsZEhWeWJuTWdlMUpsWVdOMFYzSmhjSEJsY24xY2JpQWdJQ292WEc0Z0lHWnNZWFJOWVhBb1ptNHBJSHRjYmlBZ0lDQmpiMjV6ZENCdWIyUmxjeUE5SUhSb2FYTXVaMlYwVG05a1pYTkpiblJsY201aGJDZ3BMbTFoY0Nnb2Jpd2dhU2tnUFQ0Z1ptNHVZMkZzYkNoMGFHbHpMQ0IwYUdsekxuZHlZWEFvYmlrc0lHa3BLVHRjYmlBZ0lDQmpiMjV6ZENCbWJHRjBkR1Z1WldRZ1BTQm1iR0YwS0c1dlpHVnpMQ0F4S1R0Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1M2NtRndLR1pzWVhSMFpXNWxaQzVtYVd4MFpYSW9RbTl2YkdWaGJpa3BPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUVacGJtUnpJR0ZzYkNCdWIyUmxjeUJwYmlCMGFHVWdZM1Z5Y21WdWRDQjNjbUZ3Y0dWeUlHNXZaR1Z6SnlCeVpXNWtaWElnZEhKbFpYTWdkR2hoZENCdFlYUmphQ0IwYUdVZ2NISnZkbWxrWldRZ2NISmxaR2xqWVhSbFhHNGdJQ0FxSUdaMWJtTjBhVzl1TGx4dUlDQWdLbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UwWjFibU4wYVc5dWZTQndjbVZrYVdOaGRHVmNiaUFnSUNvZ1FISmxkSFZ5Ym5NZ2UxSmxZV04wVjNKaGNIQmxjbjFjYmlBZ0lDb3ZYRzRnSUdacGJtUlhhR1Z5WlNod2NtVmthV05oZEdVcElIdGNiaUFnSUNCeVpYUjFjbTRnWm1sdVpGZG9aWEpsVlc1M2NtRndjR1ZrS0hSb2FYTXNJQ2h1S1NBOVBpQjdYRzRnSUNBZ0lDQmpiMjV6ZENCdWIyUmxJRDBnZEdocGN5NTNjbUZ3S0c0cE8xeHVJQ0FnSUNBZ2NtVjBkWEp1SUc1dlpHVXViR1Z1WjNSb0lENGdNQ0FtSmlCd2NtVmthV05oZEdVb2JtOWtaU2s3WEc0Z0lDQWdmU2s3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1VtVjBkWEp1Y3lCMGFHVWdibTlrWlNCaGRDQmhJR2RwZG1WdUlHbHVaR1Y0SUc5bUlIUm9aU0JqZFhKeVpXNTBJSGR5WVhCd1pYSXVYRzRnSUNBcVhHNGdJQ0FxSUVCd1lYSmhiU0I3VG5WdFltVnlmU0JwYm1SbGVGeHVJQ0FnS2lCQWNtVjBkWEp1Y3lCN1VtVmhZM1JGYkdWdFpXNTBmVnh1SUNBZ0tpOWNiaUFnWjJWMEtHbHVaR1Y0S1NCN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdVoyVjBSV3hsYldWdWRITW9LVnRwYm1SbGVGMDdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nVW1WMGRYSnVjeUJoSUhkeVlYQndaWElnWVhKdmRXNWtJSFJvWlNCdWIyUmxJR0YwSUdFZ1oybDJaVzRnYVc1a1pYZ2diMllnZEdobElHTjFjbkpsYm5RZ2QzSmhjSEJsY2k1Y2JpQWdJQ3BjYmlBZ0lDb2dRSEJoY21GdElIdE9kVzFpWlhKOUlHbHVaR1Y0WEc0Z0lDQXFJRUJ5WlhSMWNtNXpJSHRTWldGamRGZHlZWEJ3WlhKOVhHNGdJQ0FxTDF4dUlDQmhkQ2hwYm1SbGVDa2dlMXh1SUNBZ0lHTnZibk4wSUc1dlpHVnpJRDBnZEdocGN5NW5aWFJPYjJSbGMwbHVkR1Z5Ym1Gc0tDazdYRzRnSUNBZ2FXWWdLR2x1WkdWNElEd2dibTlrWlhNdWJHVnVaM1JvS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NTNjbUZ3S0c1dlpHVnpXMmx1WkdWNFhTazdYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUIwYUdsekxuZHlZWEFvVzEwcE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRkpsZEhWeWJuTWdZU0IzY21Gd2NHVnlJR0Z5YjNWdVpDQjBhR1VnWm1seWMzUWdibTlrWlNCdlppQjBhR1VnWTNWeWNtVnVkQ0IzY21Gd2NHVnlMbHh1SUNBZ0tseHVJQ0FnS2lCQWNtVjBkWEp1Y3lCN1VtVmhZM1JYY21Gd2NHVnlmVnh1SUNBZ0tpOWNiaUFnWm1seWMzUW9LU0I3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11WVhRb01DazdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nVW1WMGRYSnVjeUJoSUhkeVlYQndaWElnWVhKdmRXNWtJSFJvWlNCc1lYTjBJRzV2WkdVZ2IyWWdkR2hsSUdOMWNuSmxiblFnZDNKaGNIQmxjaTVjYmlBZ0lDcGNiaUFnSUNvZ1FISmxkSFZ5Ym5NZ2UxSmxZV04wVjNKaGNIQmxjbjFjYmlBZ0lDb3ZYRzRnSUd4aGMzUW9LU0I3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11WVhRb2RHaHBjeTVzWlc1bmRHZ2dMU0F4S1R0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkVaV3hsWjJGMFpYTWdkRzhnWlhocGMzUnpLQ2xjYmlBZ0lDcGNiaUFnSUNvZ1FISmxkSFZ5Ym5NZ2UySnZiMnhsWVc1OVhHNGdJQ0FxTDF4dUlDQnBjMFZ0Y0hSNUtDa2dlMXh1SUNBZ0lDOHZJR1Z6YkdsdWRDMWthWE5oWW14bExXNWxlSFF0YkdsdVpTQnVieTFqYjI1emIyeGxYRzRnSUNBZ1kyOXVjMjlzWlM1M1lYSnVLQ2RGYm5wNWJXVTZPa1JsY0hKbFkyRjBaV1FnYldWMGFHOWtJR2x6Ulcxd2RIa29LU0JqWVd4c1pXUXNJSFZ6WlNCbGVHbHpkSE1vS1NCcGJuTjBaV0ZrTGljcE8xeHVJQ0FnSUhKbGRIVnliaUFoZEdocGN5NWxlR2x6ZEhNb0tUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJTWlhSMWNtNXpJSFJ5ZFdVZ2FXWWdkR2hsSUdOMWNuSmxiblFnZDNKaGNIQmxjaUJvWVhNZ2JtOWtaWE11SUVaaGJITmxJRzkwYUdWeWQybHpaUzVjYmlBZ0lDb2dTV1lnWTJGc2JHVmtJSGRwZEdnZ1lTQnpaV3hsWTNSdmNpQnBkQ0J5WlhSMWNtNXpJR0F1Wm1sdVpDaHpaV3hsWTNSdmNpa3VaWGhwYzNSektDbGdJR2x1YzNSbFlXUXVYRzRnSUNBcVhHNGdJQ0FxSUVCd1lYSmhiU0I3Ulc1NmVXMWxVMlZzWldOMGIzSjlJSE5sYkdWamRHOXlJQ2h2Y0hScGIyNWhiQ2xjYmlBZ0lDb2dRSEpsZEhWeWJuTWdlMkp2YjJ4bFlXNTlYRzRnSUNBcUwxeHVJQ0JsZUdsemRITW9jMlZzWldOMGIzSWdQU0J1ZFd4c0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUdGeVozVnRaVzUwY3k1c1pXNW5kR2dnUGlBd0lEOGdkR2hwY3k1bWFXNWtLSE5sYkdWamRHOXlLUzVsZUdsemRITW9LU0E2SUhSb2FYTXViR1Z1WjNSb0lENGdNRHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCVmRHbHNhWFI1SUcxbGRHaHZaQ0IwYUdGMElIUm9jbTkzY3lCaGJpQmxjbkp2Y2lCcFppQjBhR1VnWTNWeWNtVnVkQ0JwYm5OMFlXNWpaU0JvWVhNZ1lTQnNaVzVuZEdnZ2IzUm9aWElnZEdoaGJpQnZibVV1WEc0Z0lDQXFJRlJvYVhNZ2FYTWdjSEpwYldGeWFXeDVJSFZ6WldRZ2RHOGdaVzVtYjNKalpTQjBhR0YwSUdObGNuUmhhVzRnYldWMGFHOWtjeUJoY21VZ2IyNXNlU0J5ZFc0Z2IyNGdZU0IzY21Gd2NHVnlJSGRvWlc0Z2FYUWdhWE5jYmlBZ0lDb2dkM0poY0hCcGJtY2dZU0J6YVc1bmJHVWdibTlrWlM1Y2JpQWdJQ3BjYmlBZ0lDb2dRSEJoY21GdElIdEdkVzVqZEdsdmJuMGdabTVjYmlBZ0lDb2dRSEpsZEhWeWJuTWdleXA5WEc0Z0lDQXFMMXh1SUNCemFXNW5iR1VvYm1GdFpTd2dabTRwSUh0Y2JpQWdJQ0JqYjI1emRDQm1iazVoYldVZ1BTQjBlWEJsYjJZZ2JtRnRaU0E5UFQwZ0ozTjBjbWx1WnljZ1B5QnVZVzFsSURvZ0ozVnVhMjV2ZDI0bk8xeHVJQ0FnSUdOdmJuTjBJR05oYkd4aVlXTnJJRDBnZEhsd1pXOW1JR1p1SUQwOVBTQW5ablZ1WTNScGIyNG5JRDhnWm00Z09pQnVZVzFsTzF4dUlDQWdJR2xtSUNoMGFHbHpMbXhsYm1kMGFDQWhQVDBnTVNrZ2UxeHVJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0dCTlpYUm9iMlFnNG9DY0pIdG1iazVoYldWOTRvQ2RJR2x6SUcxbFlXNTBJSFJ2SUdKbElISjFiaUJ2YmlBeElHNXZaR1V1SUNSN2RHaHBjeTVzWlc1bmRHaDlJR1p2ZFc1a0lHbHVjM1JsWVdRdVlDazdYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJqWVd4c1ltRmpheTVqWVd4c0tIUm9hWE1zSUhSb2FYTXVaMlYwVG05a1pVbHVkR1Z5Ym1Gc0tDa3BPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUVobGJIQm1kV3dnZFhScGJHbDBlU0J0WlhSb2IyUWdkRzhnWTNKbFlYUmxJR0VnYm1WM0lIZHlZWEJ3WlhJZ2QybDBhQ0IwYUdVZ2MyRnRaU0J5YjI5MElHRnpJSFJvWlNCamRYSnlaVzUwSUhkeVlYQndaWElzSUhkcGRHaGNiaUFnSUNvZ1lXNTVJRzV2WkdWeklIQmhjM05sWkNCcGJpQmhjeUIwYUdVZ1ptbHljM1FnY0dGeVlXMWxkR1Z5SUdGMWRHOXRZWFJwWTJGc2JIa2dkM0poY0hCbFpDNWNiaUFnSUNwY2JpQWdJQ29nUUhCaGNtRnRJSHRTWldGamRGZHlZWEJ3WlhKOFVtVmhZM1JGYkdWdFpXNTBmRUZ5Y21GNVBGSmxZV04wUld4bGJXVnVkRDU5SUc1dlpHVmNiaUFnSUNvZ1FISmxkSFZ5Ym5NZ2UxSmxZV04wVjNKaGNIQmxjbjFjYmlBZ0lDb3ZYRzRnSUhkeVlYQW9ibTlrWlN3Z2NtOXZkQ0E5SUhSb2FYTmJVazlQVkYwc0lDNHVMbUZ5WjNNcElIdGNiaUFnSUNCcFppQW9ibTlrWlNCcGJuTjBZVzVqWlc5bUlGSmxZV04wVjNKaGNIQmxjaWtnZTF4dUlDQWdJQ0FnY21WMGRYSnVJRzV2WkdVN1hHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQnVaWGNnVW1WaFkzUlhjbUZ3Y0dWeUtHNXZaR1VzSUhKdmIzUXNJQzR1TG1GeVozTXBPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUZKbGRIVnlibk1nWVc0Z1NGUk5UQzFzYVd0bElITjBjbWx1WnlCdlppQjBhR1VnYzJoaGJHeHZkeUJ5Wlc1a1pYSWdabTl5SUdSbFluVm5aMmx1WnlCd2RYSndiM05sY3k1Y2JpQWdJQ3BjYmlBZ0lDb2dRSEJoY21GdElIdFBZbXBsWTNSOUlGdHZjSFJwYjI1elhTQXRJRkJ5YjNCbGNuUjVJR0poWnlCdlppQmhaR1JwZEdsdmJtRnNJRzl3ZEdsdmJuTXVYRzRnSUNBcUlFQndZWEpoYlNCN1ltOXZiR1ZoYm4wZ1cyOXdkR2x2Ym5NdWFXZHViM0psVUhKdmNITmRJQzBnYVdZZ2RISjFaU3dnY0hKdmNITWdZWEpsSUc5dGFYUjBaV1FnWm5KdmJTQjBhR1VnYzNSeWFXNW5MbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UySnZiMnhsWVc1OUlGdHZjSFJwYjI1ekxuWmxjbUp2YzJWZElDMGdhV1lnZEhKMVpTd2dZWEp5WVhseklHRnVaQ0J2WW1wbFkzUnpJSFJ2SUdKbElIWmxjbUp2YzJWc2VTQndjbWx1ZEdWa0xseHVJQ0FnS2lCQWNtVjBkWEp1Y3lCN1UzUnlhVzVuZlZ4dUlDQWdLaTljYmlBZ1pHVmlkV2NvYjNCMGFXOXVjeUE5SUh0OUtTQjdYRzRnSUNBZ2NtVjBkWEp1SUdSbFluVm5UbTlrWlhNb2RHaHBjeTVuWlhST2IyUmxjMGx1ZEdWeWJtRnNLQ2tzSUc5d2RHbHZibk1wTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFbHVkbTlyWlhNZ2FXNTBaWEpqWlhCMFpYSWdZVzVrSUhKbGRIVnlibk1nYVhSelpXeG1MaUJwYm5SbGNtTmxjSFJsY2lCcGN5QmpZV3hzWldRZ2QybDBhQ0JwZEhObGJHWXVYRzRnSUNBcUlGUm9hWE1nYVhNZ2FHVnNjR1oxYkNCM2FHVnVJR1JsWW5WbloybHVaeUJ1YjJSbGN5QnBiaUJ0WlhSb2IyUWdZMmhoYVc1ekxseHVJQ0FnS2lCQWNHRnlZVzBnWm01Y2JpQWdJQ29nUUhKbGRIVnlibk1nZTFKbFlXTjBWM0poY0hCbGNuMWNiaUFnSUNvdlhHNGdJSFJoY0NocGJuUmxjbU5sY0hSbGNpa2dlMXh1SUNBZ0lHbHVkR1Z5WTJWd2RHVnlLSFJvYVhNcE8xeHVJQ0FnSUhKbGRIVnliaUIwYUdsek8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRVJsZEdGamFHVnpJSFJvWlNCeVpXRmpkQ0IwY21WbElHWnliMjBnZEdobElFUlBUUzRnVW5WdWN5QmdVbVZoWTNSRVQwMHVkVzV0YjNWdWRFTnZiWEJ2Ym1WdWRFRjBUbTlrWlNncFlDQjFibVJsY2lCMGFHVWdhRzl2WkM1Y2JpQWdJQ3BjYmlBZ0lDb2dWR2hwY3lCdFpYUm9iMlFnZDJsc2JDQnRiM04wSUdOdmJXMXZibXg1SUdKbElIVnpaV1FnWVhNZ1lTQmNJbU5zWldGdWRYQmNJaUJ0WlhSb2IyUWdhV1lnZVc5MUlHUmxZMmxrWlNCMGJ5QjFjMlVnZEdobFhHNGdJQ0FxSUdCaGRIUmhZMmhVYjJBZ2IzQjBhVzl1SUdsdUlHQnRiM1Z1ZENodWIyUmxMQ0J2Y0hScGIyNXpLV0F1WEc0Z0lDQXFYRzRnSUNBcUlGUm9aU0J0WlhSb2IyUWdhWE1nYVc1MFpXNTBhVzl1WVd4c2VTQnViM1FnWENKbWJIVmxiblJjSWlBb2FXNGdkR2hoZENCcGRDQmtiMlZ6YmlkMElISmxkSFZ5YmlCZ2RHaHBjMkFwSUdKbFkyRjFjMlVnZVc5MUlITm9iM1ZzWkZ4dUlDQWdLaUJ1YjNRZ1ltVWdaRzlwYm1jZ1lXNTVkR2hwYm1jZ2QybDBhQ0IwYUdseklIZHlZWEJ3WlhJZ1lXWjBaWElnZEdocGN5QnRaWFJvYjJRZ2FYTWdZMkZzYkdWa0xseHVJQ0FnS2k5Y2JpQWdaR1YwWVdOb0tDa2dlMXh1SUNBZ0lHbG1JQ2gwYUdselcxSlBUMVJkSUNFOVBTQjBhR2x6S1NCN1hHNGdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjFKbFlXTjBWM0poY0hCbGNqbzZaR1YwWVdOb0tDa2dZMkZ1SUc5dWJIa2dZbVVnWTJGc2JHVmtJRzl1SUhSb1pTQnliMjkwSnlrN1hHNGdJQ0FnZlZ4dUlDQWdJR2xtSUNnaGRHaHBjMXRQVUZSSlQwNVRYUzVoZEhSaFkyaFVieWtnZTF4dUlDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ2RTWldGamRGZHlZWEJ3WlhJNk9tUmxkR0ZqYUNncElHTmhiaUJ2Ym14NUlHSmxJR05oYkd4bFpDQnZiaUIzYUdWdUlIUm9aU0JnWVhSMFlXTm9WRzlnSUc5d2RHbHZiaUIzWVhNZ2NHRnpjMlZrSUdsdWRHOGdZRzF2ZFc1MEtDbGdMaWNwTzF4dUlDQWdJSDFjYmlBZ0lDQjBhR2x6VzFKRlRrUkZVa1ZTWFM1MWJtMXZkVzUwS0NrN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dVM1J5YVhCeklHOTFkQ0JoYkd3Z2RHaGxJRzV2ZENCb2IzTjBMVzV2WkdWeklHWnliMjBnZEdobElHeHBjM1FnYjJZZ2JtOWtaWE5jYmlBZ0lDcGNiaUFnSUNvZ1ZHaHBjeUJ0WlhSb2IyUWdhWE1nZFhObFpuVnNJR2xtSUhsdmRTQjNZVzUwSUhSdklHTm9aV05ySUdadmNpQjBhR1VnY0hKbGMyVnVZMlVnYjJZZ2FHOXpkQ0J1YjJSbGMxeHVJQ0FnS2lBb1lXTjBkV0ZzYkhrZ2NtVnVaR1Z5WldRZ1NGUk5UQ0JsYkdWdFpXNTBjeWtnYVdkdWIzSnBibWNnZEdobElGSmxZV04wSUc1dlpHVnpMbHh1SUNBZ0tpOWNiaUFnYUc5emRFNXZaR1Z6S0NrZ2UxeHVJQ0FnSUhKbGRIVnliaUIwYUdsekxtWnBiSFJsY2xkb1pYSmxLQ2h1S1NBOVBpQjBlWEJsYjJZZ2JpNTBlWEJsS0NrZ1BUMDlJQ2R6ZEhKcGJtY25LVHRjYmlBZ2ZWeHVmVnh1WEc0dktpcGNiaUFxSUVFZ0tuTndaV05wWVd3cUlGd2ljbTl2ZEZ3aUlIZHlZWEJ3WlhJZ2RHaGhkQ0J5WlhCeVpYTmxiblJ6SUhSb1pTQmpiMjF3YjI1bGJuUWdjR0Z6YzJWa0lHRnpJR0IzY21Gd2NHbHVaME52YlhCdmJtVnVkR0F1WEc0Z0tpQkpkQ0JwY3lCc2FXNXJaV1FnZEc4Z2RHaGxJSEJ5YVcxaGNua2djbTl2ZENCemRXTm9JSFJvWVhRZ2RYQmtZWFJsY3lCMGJ5QnBkQ0IzYVd4c0lIVndaR0YwWlNCMGFHVWdjSEpwYldGeWVTeGNiaUFxSUdGdVpDQjJhV05sSUhabGNuTmhMbHh1SUNwY2JpQXFJRUJqYkdGemN5QlhjbUZ3Y0dsdVowTnZiWEJ2Ym1WdWRGZHlZWEJ3WlhKY2JpQXFMMXh1WTJ4aGMzTWdWM0poY0hCcGJtZERiMjF3YjI1bGJuUlhjbUZ3Y0dWeUlHVjRkR1Z1WkhNZ1VtVmhZM1JYY21Gd2NHVnlJSHRjYmlBZ0x5b2daWE5zYVc1MExXUnBjMkZpYkdVZ1kyeGhjM010YldWMGFHOWtjeTExYzJVdGRHaHBjeUFxTDF4dUlDQmpiMjV6ZEhKMVkzUnZjaWh5YjI5MExDQnlaVzVrWlhKbGNpa2dlMXh1SUNBZ0lITjFjR1Z5S0hKbGJtUmxjbVZ5TG1kbGRFNXZaR1VvS1N3Z2NtOXZkQ2s3WEc1Y2JpQWdJQ0J3Y21sMllYUmxVMlYwS0hSb2FYTXNJRkpQVDFRc0lIUm9hWE1wTzF4dUlDQWdJSEJ5YVhaaGRHVlRaWFFvZEdocGN5d2dVa1ZPUkVWU1JWSXNJSEpsYm1SbGNtVnlLVHRjYmlBZ0lDQjBhR2x6VzB4SlRrdEZSRjlTVDA5VVUxMHVjSFZ6YUNoeWIyOTBLVHRjYmlBZ2ZWeHVYRzRnSUdkbGRGZHlZWEJ3YVc1blEyOXRjRzl1Wlc1MEtDa2dlMXh1SUNBZ0lIUm9jbTkzSUc1bGR5QlVlWEJsUlhKeWIzSW9KMUpsWVdOMFYzSmhjSEJsY2pvNloyVjBWM0poY0hCcGJtZERiMjF3YjI1bGJuUW9LU0JqWVc0Z2IyNXNlU0JpWlNCallXeHNaV1FnYjI0Z2RHaGxJSEp2YjNRbktUdGNiaUFnZlZ4dWZWeHVYRzVwWmlBb1NWUkZVa0ZVVDFKZlUxbE5RazlNS1NCN1hHNGdJRTlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNoU1pXRmpkRmR5WVhCd1pYSXVjSEp2ZEc5MGVYQmxMQ0JKVkVWU1FWUlBVbDlUV1UxQ1Qwd3NJSHRjYmlBZ0lDQmpiMjVtYVdkMWNtRmliR1U2SUhSeWRXVXNYRzRnSUNBZ2RtRnNkV1U2SUdaMWJtTjBhVzl1SUdsMFpYSmhkRzl5S0NrZ2UxeHVJQ0FnSUNBZ1kyOXVjM1FnYVhSbGNpQTlJSFJvYVhOYlRrOUVSVk5kVzBsVVJWSkJWRTlTWDFOWlRVSlBURjBvS1R0Y2JpQWdJQ0FnSUdOdmJuTjBJR0ZrWVhCMFpYSWdQU0JuWlhSQlpHRndkR1Z5S0hSb2FYTmJUMUJVU1U5T1UxMHBPMXh1SUNBZ0lDQWdjbVYwZFhKdUlIdGNiaUFnSUNBZ0lDQWdXMGxVUlZKQlZFOVNYMU5aVFVKUFRGMG9LU0I3SUhKbGRIVnliaUIwYUdsek95QjlMRnh1SUNBZ0lDQWdJQ0J1WlhoMEtDa2dlMXh1SUNBZ0lDQWdJQ0FnSUdOdmJuTjBJRzVsZUhRZ1BTQnBkR1Z5TG01bGVIUW9LVHRjYmlBZ0lDQWdJQ0FnSUNCcFppQW9ibVY0ZEM1a2IyNWxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2V5QmtiMjVsT2lCMGNuVmxJSDA3WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCa2IyNWxPaUJtWVd4elpTeGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUJoWkdGd2RHVnlMbTV2WkdWVWIwVnNaVzFsYm5Rb2JtVjRkQzUyWVd4MVpTa3NYRzRnSUNBZ0lDQWdJQ0FnZlR0Y2JpQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lIMDdYRzRnSUNBZ2ZTeGNiaUFnZlNrN1hHNTlYRzVjYm1aMWJtTjBhVzl1SUhCeWFYWmhkR1ZYWVhKdWFXNW5LSEJ5YjNBc0lHVjRkSEpoVFdWemMyRm5aU2tnZTF4dUlDQlBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvVW1WaFkzUlhjbUZ3Y0dWeUxuQnliM1J2ZEhsd1pTd2djSEp2Y0N3Z2UxeHVJQ0FnSUdkbGRDZ3BJSHRjYmlBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpaGdYRzRnSUNBZ0lDQWdJRUYwZEdWdGNIUmxaQ0IwYnlCaFkyTmxjM01nVW1WaFkzUlhjbUZ3Y0dWeU9qb2tlM0J5YjNCOUxDQjNhR2xqYUNCM1lYTWdjSEpsZG1sdmRYTnNlU0JoSUhCeWFYWmhkR1VnY0hKdmNHVnlkSGtnYjI1Y2JpQWdJQ0FnSUNBZ1JXNTZlVzFsSUZKbFlXTjBWM0poY0hCbGNpQnBibk4wWVc1alpYTXNJR0oxZENCcGN5QnVieUJzYjI1blpYSWdZVzVrSUhOb2IzVnNaQ0J1YjNRZ1ltVWdjbVZzYVdWa0lIVndiMjR1WEc0Z0lDQWdJQ0FnSUNSN1pYaDBjbUZOWlhOellXZGxmVnh1SUNBZ0lDQWdZQ2s3WEc0Z0lDQWdmU3hjYmlBZ0lDQmxiblZ0WlhKaFlteGxPaUJtWVd4elpTeGNiaUFnSUNCamIyNW1hV2QxY21GaWJHVTZJR1poYkhObExGeHVJQ0I5S1R0Y2JuMWNibHh1Y0hKcGRtRjBaVmRoY201cGJtY29KMjV2WkdVbkxDQW5RMjl1YzJsa1pYSWdkWE5wYm1jZ2RHaGxJR2RsZEVWc1pXMWxiblFvS1NCdFpYUm9iMlFnYVc1emRHVmhaQzRuS1R0Y2JuQnlhWFpoZEdWWFlYSnVhVzVuS0NkdWIyUmxjeWNzSUNkRGIyNXphV1JsY2lCMWMybHVaeUIwYUdVZ1oyVjBSV3hsYldWdWRITW9LU0J0WlhSb2IyUWdhVzV6ZEdWaFpDNG5LVHRjYm5CeWFYWmhkR1ZYWVhKdWFXNW5LQ2R5Wlc1a1pYSmxjaWNzSUNjbktUdGNibkJ5YVhaaGRHVlhZWEp1YVc1bktDZHZjSFJwYjI1ekp5d2dKeWNwTzF4dWNISnBkbUYwWlZkaGNtNXBibWNvSjJOdmJYQnNaWGhUWld4bFkzUnZjaWNzSUNjbktUdGNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdVbVZoWTNSWGNtRndjR1Z5TzF4dUlsMTlcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVJlYWN0V3JhcHBlci5qcy5tYXAiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZ2V0ID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBnZXQob2JqZWN0LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpIHsgaWYgKG9iamVjdCA9PT0gbnVsbCkgb2JqZWN0ID0gRnVuY3Rpb24ucHJvdG90eXBlOyB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBwcm9wZXJ0eSk7IGlmIChkZXNjID09PSB1bmRlZmluZWQpIHsgdmFyIHBhcmVudCA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmplY3QpOyBpZiAocGFyZW50ID09PSBudWxsKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gZWxzZSB7IHJldHVybiBnZXQocGFyZW50LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpOyB9IH0gZWxzZSBpZiAoXCJ2YWx1ZVwiIGluIGRlc2MpIHsgcmV0dXJuIGRlc2MudmFsdWU7IH0gZWxzZSB7IHZhciBnZXR0ZXIgPSBkZXNjLmdldDsgaWYgKGdldHRlciA9PT0gdW5kZWZpbmVkKSB7IHJldHVybiB1bmRlZmluZWQ7IH0gcmV0dXJuIGdldHRlci5jYWxsKHJlY2VpdmVyKTsgfSB9XG5cbiAgcmV0dXJuIGdldDtcbn0oKTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG52YXIgX29iamVjdCA9IHJlcXVpcmUoJ29iamVjdC5hc3NpZ24nKTtcblxudmFyIF9vYmplY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfb2JqZWN0KTtcblxudmFyIF9hcnJheVByb3RvdHlwZSA9IHJlcXVpcmUoJ2FycmF5LnByb3RvdHlwZS5mbGF0Jyk7XG5cbnZhciBfYXJyYXlQcm90b3R5cGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYXJyYXlQcm90b3R5cGUpO1xuXG52YXIgX2hhcyA9IHJlcXVpcmUoJ2hhcycpO1xuXG52YXIgX2hhczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9oYXMpO1xuXG52YXIgX2VuenltZVNoYWxsb3dFcXVhbCA9IHJlcXVpcmUoJ2VuenltZS1zaGFsbG93LWVxdWFsJyk7XG5cbnZhciBfZW56eW1lU2hhbGxvd0VxdWFsMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2VuenltZVNoYWxsb3dFcXVhbCk7XG5cbnZhciBfVXRpbHMgPSByZXF1aXJlKCcuL1V0aWxzJyk7XG5cbnZhciBfZ2V0QWRhcHRlciA9IHJlcXVpcmUoJy4vZ2V0QWRhcHRlcicpO1xuXG52YXIgX2dldEFkYXB0ZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0QWRhcHRlcik7XG5cbnZhciBfRGVidWcgPSByZXF1aXJlKCcuL0RlYnVnJyk7XG5cbnZhciBfUlNUVHJhdmVyc2FsID0gcmVxdWlyZSgnLi9SU1RUcmF2ZXJzYWwnKTtcblxudmFyIF9zZWxlY3RvcnMgPSByZXF1aXJlKCcuL3NlbGVjdG9ycycpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfSBlbHNlIHsgcmV0dXJuIEFycmF5LmZyb20oYXJyKTsgfSB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbnZhciBOT0RFID0gKDAsIF9VdGlscy5zeW0pKCdfX25vZGVfXycpO1xudmFyIE5PREVTID0gKDAsIF9VdGlscy5zeW0pKCdfX25vZGVzX18nKTtcbnZhciBSRU5ERVJFUiA9ICgwLCBfVXRpbHMuc3ltKSgnX19yZW5kZXJlcl9fJyk7XG52YXIgVU5SRU5ERVJFRCA9ICgwLCBfVXRpbHMuc3ltKSgnX191bnJlbmRlcmVkX18nKTtcbnZhciBST09UID0gKDAsIF9VdGlscy5zeW0pKCdfX3Jvb3RfXycpO1xudmFyIE9QVElPTlMgPSAoMCwgX1V0aWxzLnN5bSkoJ19fb3B0aW9uc19fJyk7XG52YXIgU0VUX1NUQVRFID0gKDAsIF9VdGlscy5zeW0pKCdfX3NldFN0YXRlX18nKTtcbnZhciBST09UX05PREVTID0gKDAsIF9VdGlscy5zeW0pKCdfX3Jvb3ROb2Rlc19fJyk7XG52YXIgQ0hJTERfQ09OVEVYVCA9ICgwLCBfVXRpbHMuc3ltKSgnX19jaGlsZENvbnRleHRfXycpO1xudmFyIFdSQVBQSU5HX0NPTVBPTkVOVCA9ICgwLCBfVXRpbHMuc3ltKSgnX193cmFwcGluZ0NvbXBvbmVudF9fJyk7XG52YXIgUFJJTUFSWV9XUkFQUEVSID0gKDAsIF9VdGlscy5zeW0pKCdfX3ByaW1hcnlXcmFwcGVyX18nKTtcbnZhciBST09UX0ZJTkRFUiA9ICgwLCBfVXRpbHMuc3ltKSgnX19yb290RmluZGVyX18nKTtcbnZhciBQUk9WSURFUl9WQUxVRVMgPSAoMCwgX1V0aWxzLnN5bSkoJ19fcHJvdmlkZXJWYWx1ZXNfXycpO1xuXG4vKipcbiAqIEZpbmRzIGFsbCBub2RlcyBpbiB0aGUgY3VycmVudCB3cmFwcGVyIG5vZGVzJyByZW5kZXIgdHJlZXMgdGhhdCBtYXRjaCB0aGUgcHJvdmlkZWQgcHJlZGljYXRlXG4gKiBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0ge1NoYWxsb3dXcmFwcGVyfSB3cmFwcGVyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZpbHRlclxuICogQHJldHVybnMge1NoYWxsb3dXcmFwcGVyfVxuICovXG5mdW5jdGlvbiBmaW5kV2hlcmVVbndyYXBwZWQod3JhcHBlciwgcHJlZGljYXRlKSB7XG4gIHZhciBmaWx0ZXIgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IF9SU1RUcmF2ZXJzYWwudHJlZUZpbHRlcjtcblxuICByZXR1cm4gd3JhcHBlci5mbGF0TWFwKGZ1bmN0aW9uIChuKSB7XG4gICAgcmV0dXJuIGZpbHRlcihuLmdldE5vZGVJbnRlcm5hbCgpLCBwcmVkaWNhdGUpO1xuICB9KTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgbmV3IHdyYXBwZXIgaW5zdGFuY2Ugd2l0aCBvbmx5IHRoZSBub2RlcyBvZiB0aGUgY3VycmVudCB3cmFwcGVyIGluc3RhbmNlIHRoYXQgbWF0Y2hcbiAqIHRoZSBwcm92aWRlZCBwcmVkaWNhdGUgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHtTaGFsbG93V3JhcHBlcn0gd3JhcHBlclxuICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlXG4gKiBAcmV0dXJucyB7U2hhbGxvd1dyYXBwZXJ9XG4gKi9cbmZ1bmN0aW9uIGZpbHRlcldoZXJlVW53cmFwcGVkKHdyYXBwZXIsIHByZWRpY2F0ZSkge1xuICByZXR1cm4gd3JhcHBlci53cmFwKHdyYXBwZXIuZ2V0Tm9kZXNJbnRlcm5hbCgpLmZpbHRlcihwcmVkaWNhdGUpLmZpbHRlcihCb29sZWFuKSk7XG59XG5cbi8qKlxuICogRW5zdXJlIG9wdGlvbnMgcGFzc2VkIHRvIFNoYWxsb3dXcmFwcGVyIGFyZSB2YWxpZC4gVGhyb3dzIG90aGVyd2lzZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKi9cbmZ1bmN0aW9uIHZhbGlkYXRlT3B0aW9ucyhvcHRpb25zKSB7XG4gIHZhciBsaWZlY3ljbGVFeHBlcmltZW50YWwgPSBvcHRpb25zLmxpZmVjeWNsZUV4cGVyaW1lbnRhbCxcbiAgICAgIGRpc2FibGVMaWZlY3ljbGVNZXRob2RzID0gb3B0aW9ucy5kaXNhYmxlTGlmZWN5Y2xlTWV0aG9kcyxcbiAgICAgIGVuYWJsZUNvbXBvbmVudERpZFVwZGF0ZU9uU2V0U3RhdGUgPSBvcHRpb25zLmVuYWJsZUNvbXBvbmVudERpZFVwZGF0ZU9uU2V0U3RhdGUsXG4gICAgICBzdXBwb3J0UHJldkNvbnRleHRBcmd1bWVudE9mQ29tcG9uZW50RGlkVXBkYXRlID0gb3B0aW9ucy5zdXBwb3J0UHJldkNvbnRleHRBcmd1bWVudE9mQ29tcG9uZW50RGlkVXBkYXRlLFxuICAgICAgbGlmZWN5Y2xlcyA9IG9wdGlvbnMubGlmZWN5Y2xlcztcblxuICBpZiAodHlwZW9mIGxpZmVjeWNsZUV4cGVyaW1lbnRhbCAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGxpZmVjeWNsZUV4cGVyaW1lbnRhbCAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdsaWZlY3ljbGVFeHBlcmltZW50YWwgbXVzdCBiZSBlaXRoZXIgdHJ1ZSBvciBmYWxzZSBpZiBwcm92aWRlZCcpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBkaXNhYmxlTGlmZWN5Y2xlTWV0aG9kcyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGRpc2FibGVMaWZlY3ljbGVNZXRob2RzICE9PSAnYm9vbGVhbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2Rpc2FibGVMaWZlY3ljbGVNZXRob2RzIG11c3QgYmUgZWl0aGVyIHRydWUgb3IgZmFsc2UgaWYgcHJvdmlkZWQnKTtcbiAgfVxuXG4gIGlmIChsaWZlY3ljbGVFeHBlcmltZW50YWwgIT0gbnVsbCAmJiBkaXNhYmxlTGlmZWN5Y2xlTWV0aG9kcyAhPSBudWxsICYmIGxpZmVjeWNsZUV4cGVyaW1lbnRhbCA9PT0gZGlzYWJsZUxpZmVjeWNsZU1ldGhvZHMpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2xpZmVjeWNsZUV4cGVyaW1lbnRhbCBhbmQgZGlzYWJsZUxpZmVjeWNsZU1ldGhvZHMgY2Fubm90IGJlIHNldCB0byB0aGUgc2FtZSB2YWx1ZScpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBlbmFibGVDb21wb25lbnREaWRVcGRhdGVPblNldFN0YXRlICE9PSAndW5kZWZpbmVkJyAmJiBsaWZlY3ljbGVzLmNvbXBvbmVudERpZFVwZGF0ZSAmJiBsaWZlY3ljbGVzLmNvbXBvbmVudERpZFVwZGF0ZS5vblNldFN0YXRlICE9PSBlbmFibGVDb21wb25lbnREaWRVcGRhdGVPblNldFN0YXRlKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcigndGhlIGxlZ2FjeSBlbmFibGVDb21wb25lbnREaWRVcGRhdGVPblNldFN0YXRlIG9wdGlvbiBzaG91bGQgYmUgbWF0Y2hlZCBieSBgbGlmZWN5Y2xlczogeyBjb21wb25lbnREaWRVcGRhdGU6IHsgb25TZXRTdGF0ZTogdHJ1ZSB9IH1gLCBmb3IgY29tcGF0aWJpbGl0eScpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBzdXBwb3J0UHJldkNvbnRleHRBcmd1bWVudE9mQ29tcG9uZW50RGlkVXBkYXRlICE9PSAndW5kZWZpbmVkJyAmJiBsaWZlY3ljbGVzLmNvbXBvbmVudERpZFVwZGF0ZSAmJiBsaWZlY3ljbGVzLmNvbXBvbmVudERpZFVwZGF0ZS5wcmV2Q29udGV4dCAhPT0gc3VwcG9ydFByZXZDb250ZXh0QXJndW1lbnRPZkNvbXBvbmVudERpZFVwZGF0ZSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3RoZSBsZWdhY3kgc3VwcG9ydFByZXZDb250ZXh0QXJndW1lbnRPZkNvbXBvbmVudERpZFVwZGF0ZSBvcHRpb24gc2hvdWxkIGJlIG1hdGNoZWQgYnkgYGxpZmVjeWNsZXM6IHsgY29tcG9uZW50RGlkVXBkYXRlOiB7IHByZXZDb250ZXh0OiB0cnVlIH0gfWAsIGZvciBjb21wYXRpYmlsaXR5Jyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0QWRhcHRlckxpZmVjeWNsZXMoX3JlZikge1xuICB2YXIgb3B0aW9ucyA9IF9yZWYub3B0aW9ucztcbiAgdmFyIF9vcHRpb25zJGxpZmVjeWNsZXMgPSBvcHRpb25zLmxpZmVjeWNsZXMsXG4gICAgICBsaWZlY3ljbGVzID0gX29wdGlvbnMkbGlmZWN5Y2xlcyA9PT0gdW5kZWZpbmVkID8ge30gOiBfb3B0aW9ucyRsaWZlY3ljbGVzLFxuICAgICAgZW5hYmxlQ29tcG9uZW50RGlkVXBkYXRlT25TZXRTdGF0ZSA9IG9wdGlvbnMuZW5hYmxlQ29tcG9uZW50RGlkVXBkYXRlT25TZXRTdGF0ZSxcbiAgICAgIHN1cHBvcnRQcmV2Q29udGV4dEFyZ3VtZW50T2ZDb21wb25lbnREaWRVcGRhdGUgPSBvcHRpb25zLnN1cHBvcnRQcmV2Q29udGV4dEFyZ3VtZW50T2ZDb21wb25lbnREaWRVcGRhdGU7XG5cblxuICB2YXIgaGFzTGVnYWN5U2V0U3RhdGVBcmcgPSB0eXBlb2YgZW5hYmxlQ29tcG9uZW50RGlkVXBkYXRlT25TZXRTdGF0ZSAhPT0gJ3VuZGVmaW5lZCc7XG4gIHZhciBoYXNMZWdhY3lQcmV2Q29udGV4dEFyZyA9IHR5cGVvZiBzdXBwb3J0UHJldkNvbnRleHRBcmd1bWVudE9mQ29tcG9uZW50RGlkVXBkYXRlICE9PSAndW5kZWZpbmVkJztcbiAgdmFyIGNvbXBvbmVudERpZFVwZGF0ZSA9IGhhc0xlZ2FjeVNldFN0YXRlQXJnIHx8IGhhc0xlZ2FjeVByZXZDb250ZXh0QXJnID8gKDAsIF9vYmplY3QyWydkZWZhdWx0J10pKHt9LCBoYXNMZWdhY3lTZXRTdGF0ZUFyZyAmJiB7XG4gICAgb25TZXRTdGF0ZTogISFlbmFibGVDb21wb25lbnREaWRVcGRhdGVPblNldFN0YXRlXG4gIH0sIGhhc0xlZ2FjeVByZXZDb250ZXh0QXJnICYmIHtcbiAgICBwcmV2Q29udGV4dDogISFzdXBwb3J0UHJldkNvbnRleHRBcmd1bWVudE9mQ29tcG9uZW50RGlkVXBkYXRlXG4gIH0pIDogbnVsbDtcbiAgdmFyIG9yaWdpbmFsR0RTRlAgPSBsaWZlY3ljbGVzLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcblxuICB2YXIgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID0gb3JpZ2luYWxHRFNGUCA/IHtcbiAgICBoYXNTaG91bGRDb21wb25lbnRVcGRhdGVCdWc6ICEhb3JpZ2luYWxHRFNGUC5oYXNTaG91bGRDb21wb25lbnRVcGRhdGVCdWdcbiAgfSA6IGZhbHNlO1xuXG4gIHJldHVybiAoMCwgX29iamVjdDJbJ2RlZmF1bHQnXSkoe30sIGxpZmVjeWNsZXMsIHtcbiAgICBzZXRTdGF0ZTogKDAsIF9vYmplY3QyWydkZWZhdWx0J10pKHt9LCBsaWZlY3ljbGVzLnNldFN0YXRlKSxcbiAgICBnZXRDaGlsZENvbnRleHQ6ICgwLCBfb2JqZWN0MlsnZGVmYXVsdCddKSh7XG4gICAgICBjYWxsZWRCeVJlbmRlcmVyOiB0cnVlXG4gICAgfSwgbGlmZWN5Y2xlcy5nZXRDaGlsZENvbnRleHQpXG4gIH0sIGNvbXBvbmVudERpZFVwZGF0ZSAmJiB7IGNvbXBvbmVudERpZFVwZGF0ZTogY29tcG9uZW50RGlkVXBkYXRlIH0sIHtcbiAgICBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM6IGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wc1xuICB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0Um9vdE5vZGUobm9kZSkge1xuICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gJ2hvc3QnKSB7XG4gICAgcmV0dXJuIG5vZGU7XG4gIH1cbiAgcmV0dXJuIG5vZGUucmVuZGVyZWQ7XG59XG5cbmZ1bmN0aW9uIGdldFJvb3ROb2RlSW50ZXJuYWwod3JhcHBlcikge1xuICBpZiAod3JhcHBlcltST09UXS5sZW5ndGggIT09IDEpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2dldFJvb3ROb2RlSW50ZXJuYWwod3JhcHBlcikgY2FuIG9ubHkgYmUgY2FsbGVkIHdoZW4gd3JhcHBlciB3cmFwcyBvbmUgbm9kZScpO1xuICB9XG4gIGlmICh3cmFwcGVyW1JPT1RdICE9PSB3cmFwcGVyKSB7XG4gICAgcmV0dXJuIHdyYXBwZXJbUk9PVF9OT0RFU11bMF07XG4gIH1cbiAgcmV0dXJuIHdyYXBwZXJbUk9PVF1bTk9ERV07XG59XG5cbmZ1bmN0aW9uIG5vZGVQYXJlbnRzKHdyYXBwZXIsIG5vZGUpIHtcbiAgcmV0dXJuICgwLCBfUlNUVHJhdmVyc2FsLnBhcmVudHNPZk5vZGUpKG5vZGUsIGdldFJvb3ROb2RlSW50ZXJuYWwod3JhcHBlcikpO1xufVxuXG5mdW5jdGlvbiBwcml2YXRlU2V0Tm9kZXMod3JhcHBlciwgbm9kZXMpIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KG5vZGVzKSkge1xuICAgICgwLCBfVXRpbHMucHJpdmF0ZVNldCkod3JhcHBlciwgTk9ERSwgbm9kZXMpO1xuICAgICgwLCBfVXRpbHMucHJpdmF0ZVNldCkod3JhcHBlciwgTk9ERVMsIFtub2Rlc10pO1xuICB9IGVsc2Uge1xuICAgICgwLCBfVXRpbHMucHJpdmF0ZVNldCkod3JhcHBlciwgTk9ERSwgbm9kZXNbMF0pO1xuICAgICgwLCBfVXRpbHMucHJpdmF0ZVNldCkod3JhcHBlciwgTk9ERVMsIG5vZGVzKTtcbiAgfVxuICAoMCwgX1V0aWxzLnByaXZhdGVTZXQpKHdyYXBwZXIsICdsZW5ndGgnLCB3cmFwcGVyW05PREVTXS5sZW5ndGgpO1xufVxuXG5mdW5jdGlvbiBwdXJlQ29tcG9uZW50U2hvdWxkQ29tcG9uZW50VXBkYXRlKHByZXZQcm9wcywgcHJvcHMsIHByZXZTdGF0ZSwgc3RhdGUpIHtcbiAgcmV0dXJuICEoMCwgX2VuenltZVNoYWxsb3dFcXVhbDJbJ2RlZmF1bHQnXSkocHJldlByb3BzLCBwcm9wcykgfHwgISgwLCBfZW56eW1lU2hhbGxvd0VxdWFsMlsnZGVmYXVsdCddKShwcmV2U3RhdGUsIHN0YXRlKTtcbn1cblxuZnVuY3Rpb24gaXNQdXJlQ29tcG9uZW50KGluc3RhbmNlKSB7XG4gIHJldHVybiBpbnN0YW5jZSAmJiBpbnN0YW5jZS5pc1B1cmVSZWFjdENvbXBvbmVudDtcbn1cblxuZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KG5vZGUsIGhpZXJhcmNoeSwgcmVuZGVyZXIpIHtcbiAgdmFyIGluc3RhbmNlID0gbm9kZS5pbnN0YW5jZSxcbiAgICAgIENvbXBvbmVudCA9IG5vZGUudHlwZTtcblxuICB2YXIgY29tcG9uZW50TmFtZSA9ICgwLCBfVXRpbHMuZGlzcGxheU5hbWVPZk5vZGUpKG5vZGUpO1xuICAvLyBXYXJuIGxpa2UgcmVhY3QgaWYgY2hpbGRDb250ZXh0VHlwZXMgaXMgbm90IGRlZmluZWQ6XG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9ibG9iLzE0NTRhOGJlMDM3OTRmNWUwYjIzYTdlNzY5NmNiYmJkY2Y4YjBmNWQvcGFja2FnZXMvcmVhY3QtZG9tL3NyYy9zZXJ2ZXIvUmVhY3RQYXJ0aWFsUmVuZGVyZXIuanMjTDYzOS1MNjQ2XG4gIGlmIChfdHlwZW9mKENvbXBvbmVudC5jaGlsZENvbnRleHRUeXBlcykgIT09ICdvYmplY3QnKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICBjb25zb2xlLndhcm4oU3RyaW5nKGNvbXBvbmVudE5hbWUpICsgJy5nZXRDaGlsZENvbnRleHQoKTogY2hpbGRDb250ZXh0VHlwZXMgbXVzdCBiZSBkZWZpbmVkIGluIG9yZGVyIHRvIHVzZSBnZXRDaGlsZENvbnRleHQoKS4nKTtcbiAgICByZXR1cm4ge307XG4gIH1cbiAgLy8gQ2hlY2sgY2hpbGRDb250ZXh0VHlwZXMgbGlrZSByZWFjdDpcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2Jsb2IvMTQ1NGE4YmUwMzc5NGY1ZTBiMjNhN2U3Njk2Y2JiYmRjZjhiMGY1ZC9wYWNrYWdlcy9yZWFjdC1kb20vc3JjL3NlcnZlci9SZWFjdFBhcnRpYWxSZW5kZXJlci5qcyNMNjMwLUw2MzdcbiAgdmFyIGNoaWxkQ29udGV4dCA9IGluc3RhbmNlLmdldENoaWxkQ29udGV4dCgpO1xuICBPYmplY3Qua2V5cyhjaGlsZENvbnRleHQpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIGlmICghKGtleSBpbiBDb21wb25lbnQuY2hpbGRDb250ZXh0VHlwZXMpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoU3RyaW5nKGNvbXBvbmVudE5hbWUpICsgJy5nZXRDaGlsZENvbnRleHQoKToga2V5IFwiJyArIFN0cmluZyhrZXkpICsgJ1wiIGlzIG5vdCBkZWZpbmVkIGluIGNoaWxkQ29udGV4dFR5cGVzLicpO1xuICAgIH1cbiAgfSk7XG4gIGlmICh0eXBlb2YgcmVuZGVyZXIuY2hlY2tQcm9wVHlwZXMgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZW5kZXJlci5jaGVja1Byb3BUeXBlcyhDb21wb25lbnQuY2hpbGRDb250ZXh0VHlwZXMsIGNoaWxkQ29udGV4dCwgJ2NoaWxkIGNvbnRleHQnLCBoaWVyYXJjaHkpO1xuICB9XG4gIHJldHVybiBjaGlsZENvbnRleHQ7XG59XG5cbmZ1bmN0aW9uIHNweU9uR2V0Q2hpbGRDb250ZXh0SW5pdGlhbFJlbmRlcihub2RlcywgYWRhcHRlcikge1xuICBpZiAoISgwLCBfVXRpbHMuaXNDdXN0b21Db21wb25lbnRFbGVtZW50KShub2RlcywgYWRhcHRlcikgfHwgIW5vZGVzLnR5cGUucHJvdG90eXBlIHx8IHR5cGVvZiBub2Rlcy50eXBlLnByb3RvdHlwZS5nZXRDaGlsZENvbnRleHQgIT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiAoMCwgX1V0aWxzLnNweU1ldGhvZCkobm9kZXMudHlwZS5wcm90b3R5cGUsICdnZXRDaGlsZENvbnRleHQnKTtcbn1cblxuZnVuY3Rpb24gcHJpdmF0ZVNldENoaWxkQ29udGV4dChhZGFwdGVyLCB3cmFwcGVyLCBpbnN0YW5jZSwgcmVuZGVyZWROb2RlLCBnZXRDaGlsZENvbnRleHRTcHkpIHtcbiAgdmFyIHJlbmRlcmVyID0gd3JhcHBlcltSRU5ERVJFUl07XG4gIC8vIFdlIG9ubHkgc3VwcG9ydCBwYXJlbnQtYmFzZWQgY29udGV4dC5cbiAgaWYgKGFkYXB0ZXIub3B0aW9ucy5sZWdhY3lDb250ZXh0TW9kZSAhPT0gJ3BhcmVudCcpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKGdldENoaWxkQ29udGV4dFNweSkge1xuICAgICgwLCBfVXRpbHMucHJpdmF0ZVNldCkod3JhcHBlciwgQ0hJTERfQ09OVEVYVCwgZ2V0Q2hpbGRDb250ZXh0U3B5LmdldExhc3RSZXR1cm5WYWx1ZSgpKTtcbiAgICBnZXRDaGlsZENvbnRleHRTcHkucmVzdG9yZSgpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBpbnN0YW5jZS5nZXRDaGlsZENvbnRleHQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyBJZiB0aGVyZSdzIG5vIHNweSBidXQgZ2V0Q2hpbGRDb250ZXh0IGlzIGEgZnVuY3Rpb24sIHRoYXQgbWVhbnMgb3VyIHJlbmRlcmVyXG4gICAgLy8gaXMgbm90IGdvaW5nIHRvIGNhbGwgaXQgZm9yIHVzLCBzbyB3ZSBuZWVkIHRvIGNhbGwgaXQgb3Vyc2VsdmVzLlxuICAgIHZhciBub2RlSGllcmFyY2h5ID0gW3dyYXBwZXJbTk9ERV1dLmNvbmNhdChub2RlUGFyZW50cyh3cmFwcGVyLCB3cmFwcGVyW05PREVdKSk7XG4gICAgdmFyIGNoaWxkQ29udGV4dCA9IGdldENoaWxkQ29udGV4dChyZW5kZXJlZE5vZGUsIG5vZGVIaWVyYXJjaHksIHJlbmRlcmVyKTtcbiAgICAoMCwgX1V0aWxzLnByaXZhdGVTZXQpKHdyYXBwZXIsIENISUxEX0NPTlRFWFQsIGNoaWxkQ29udGV4dCk7XG4gIH0gZWxzZSB7XG4gICAgKDAsIF9VdGlscy5wcml2YXRlU2V0KSh3cmFwcGVyLCBDSElMRF9DT05URVhULCBudWxsKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBtb2NrU0NVSWZnRFNGUFJldHVybk5vbk51bGwobm9kZSwgc3RhdGUpIHtcbiAgdmFyIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyA9IG5vZGUudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XG5cblxuICBpZiAodHlwZW9mIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIC8vIHdlIHRyeSB0byBmaXggYSBSZWFjdCBzaGFsbG93IHJlbmRlcmVyIGJ1ZyBoZXJlLlxuICAgIC8vIChmYWNlYm9vay9yZWFjdCMxNDYwNywgd2hpY2ggaGFzIGJlZW4gZml4ZWQgaW4gcmVhY3QgMTYuOCk6XG4gICAgLy8gd2hlbiBnRFNGUCByZXR1cm4gZGVyaXZlZCBzdGF0ZSwgaXQgd2lsbCBzZXQgaW5zdGFuY2Ugc3RhdGUgaW4gc2hhbGxvdyByZW5kZXJlciBiZWZvcmUgU0NVLFxuICAgIC8vIHRoaXMgd2lsbCBjYXVzZSBgdGhpcy5zdGF0ZWAgaW4gc0NVIGJlIHRoZSB1cGRhdGVkIHN0YXRlLCB3aGljaCBpcyB3cm9uZyBiZWhhdmlvci5cbiAgICAvLyBzbyB3ZSBoYXZlIHRvIHdyYXAgc0NVIHRvIHBhc3MgdGhlIG9sZCBzdGF0ZSB0byBvcmlnaW5hbCBzQ1UuXG4gICAgdmFyIGluc3RhbmNlID0gbm9kZS5pbnN0YW5jZTtcblxuICAgIHZhciBfc3B5TWV0aG9kID0gKDAsIF9VdGlscy5zcHlNZXRob2QpKGluc3RhbmNlLCAnc2hvdWxkQ29tcG9uZW50VXBkYXRlJywgZnVuY3Rpb24gKG9yaWdpbmFsU0NVKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICBmdW5jdGlvbiBzaG91bGRDb21wb25lbnRVcGRhdGUoKSB7XG4gICAgICAgICAgaW5zdGFuY2Uuc3RhdGUgPSBzdGF0ZTtcblxuICAgICAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBzQ1VSZXN1bHQgPSBvcmlnaW5hbFNDVS5hcHBseShpbnN0YW5jZSwgYXJncyk7XG4gICAgICAgICAgdmFyIG5leHRTdGF0ZSA9IGFyZ3NbMV07XG5cbiAgICAgICAgICBpbnN0YW5jZS5zdGF0ZSA9IG5leHRTdGF0ZTtcbiAgICAgICAgICByZXN0b3JlKCk7XG4gICAgICAgICAgcmV0dXJuIHNDVVJlc3VsdDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzaG91bGRDb21wb25lbnRVcGRhdGU7XG4gICAgICB9KCk7XG4gICAgfSksXG4gICAgICAgIHJlc3RvcmUgPSBfc3B5TWV0aG9kLnJlc3RvcmU7XG4gIH1cbn1cblxuLyoqXG4gKiBSZWN1cnNpdmVseSBkaXZlKClzIGV2ZXJ5IGN1c3RvbSBjb21wb25lbnQgaW4gYSB3cmFwcGVyIHVudGlsXG4gKiB0aGUgdGFyZ2V0IGNvbXBvbmVudCBpcyBmb3VuZC5cbiAqXG4gKiBAcGFyYW0ge1NoYWxsb3dXcmFwcGVyfSB3cmFwcGVyIEEgU2hhbGxvd1dyYXBwZXIgdG8gc2VhcmNoXG4gKiBAcGFyYW0ge0NvbXBvbmVudFR5cGV9IHRhcmdldCBBIHJlYWN0IGN1c3RvbSBjb21wb25lbnQgdGhhdCwgd2hlbiBmb3VuZCwgd2lsbCBlbmQgcmVjdXJzaW9uXG4gKiBAcGFyYW0ge0FkYXB0ZXJ9IGFkYXB0ZXIgQW4gRW56eW1lIGFkYXB0ZXJcbiAqIEByZXR1cm5zIHtTaGFsbG93V3JhcHBlcnx1bmRlZmluZWR9IEEgU2hhbGxvd1dyYXBwZXIgZm9yIHRoZSB0YXJnZXQsIG9yXG4gKiAgdW5kZWZpbmVkIGlmIGl0IGNhbid0IGJlIGZvdW5kXG4gKi9cbmZ1bmN0aW9uIGRlZXBSZW5kZXIod3JhcHBlciwgdGFyZ2V0LCBhZGFwdGVyKSB7XG4gIHZhciBub2RlID0gd3JhcHBlcltOT0RFXTtcbiAgdmFyIGVsZW1lbnQgPSBub2RlICYmIGFkYXB0ZXIubm9kZVRvRWxlbWVudChub2RlKTtcbiAgaWYgKHdyYXBwZXIudHlwZSgpID09PSB0YXJnZXQpIHtcbiAgICByZXR1cm4gd3JhcHBlci5kaXZlKCk7XG4gIH1cbiAgaWYgKGVsZW1lbnQgJiYgKDAsIF9VdGlscy5pc0N1c3RvbUNvbXBvbmVudEVsZW1lbnQpKGVsZW1lbnQsIGFkYXB0ZXIpKSB7XG4gICAgcmV0dXJuIGRlZXBSZW5kZXIod3JhcHBlci5kaXZlKCksIHRhcmdldCwgYWRhcHRlcik7XG4gIH1cbiAgdmFyIGNoaWxkcmVuID0gd3JhcHBlci5jaGlsZHJlbigpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgdmFyIGZvdW5kID0gZGVlcFJlbmRlcihjaGlsZHJlbi5hdChpKSwgdGFyZ2V0LCBhZGFwdGVyKTtcbiAgICBpZiAodHlwZW9mIGZvdW5kICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuIGZvdW5kO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuXG4vKipcbiAqIERlZXAtcmVuZGVycyB0aGUgYHdyYXBwaW5nQ29tcG9uZW50YCBhbmQgcmV0dXJucyB0aGUgY29udGV4dCB0aGF0IHNob3VsZFxuICogYmUgYWNjZXNzaWJsZSB0byB0aGUgcHJpbWFyeSB3cmFwcGVyLlxuICpcbiAqIEBwYXJhbSB7V3JhcHBpbmdDb21wb25lbnRXcmFwcGVyfSB3cmFwcGVyIFRoZSBgV3JhcHBpbmdDb21wb25lbnRXcmFwcGVyYCBmb3IgYVxuICogIGB3cmFwcGluZ0NvbXBvbmVudGBcbiAqIEBwYXJhbSB7QWRhcHRlcn0gYWRhcHRlciBBbiBFbnp5bWUgYWRhcHRlclxuICogQHJldHVybnMge29iamVjdH0gQW4gb2JqZWN0IGNvbnRhaW5pbmcgYW4gb2JqZWN0IG9mIGxlZ2FjeSBjb250ZXh0IHZhbHVlcyBhbmQgYSBNYXAgb2ZcbiAqICBgY3JlYXRlQ29udGV4dCgpYCBQcm92aWRlciB2YWx1ZXMuXG4gKi9cbmZ1bmN0aW9uIGdldENvbnRleHRGcm9tV3JhcHBpbmdDb21wb25lbnQod3JhcHBlciwgYWRhcHRlcikge1xuICB2YXIgcm9vdEZpbmRlciA9IGRlZXBSZW5kZXIod3JhcHBlciwgd3JhcHBlcltST09UX0ZJTkRFUl0sIGFkYXB0ZXIpO1xuICBpZiAoIXJvb3RGaW5kZXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2B3cmFwcGluZ0NvbXBvbmVudGAgbXVzdCByZW5kZXIgaXRzIGNoaWxkcmVuIScpO1xuICB9XG4gIHJldHVybiB7XG4gICAgbGVnYWN5Q29udGV4dDogcm9vdEZpbmRlcltPUFRJT05TXS5jb250ZXh0LFxuICAgIHByb3ZpZGVyVmFsdWVzOiByb290RmluZGVyW1BST1ZJREVSX1ZBTFVFU11cbiAgfTtcbn1cblxuLyoqXG4gKiBNYWtlcyBvcHRpb25zIHNwZWNpZmljYWxseSBmb3IgYFNoYWxsb3dXcmFwcGVyYC4gTW9zdCBvZiB0aGUgbG9naWMgaGVyZSBpcyBhcm91bmQgcmVuZGVyaW5nXG4gKiBhIGB3cmFwcGluZ0NvbXBvbmVudGAgKGlmIG9uZSB3YXMgcHJvdmlkZWQpIGFuZCBhZGRpbmcgdGhlIGNoaWxkIGNvbnRleHQgb2YgdGhhdCBjb21wb25lbnRcbiAqIHRvIGBvcHRpb25zLmNvbnRleHRgLlxuICpcbiAqIEBwYXJhbSB7UmVhY3RFbGVtZW50fSBub2RlcyB0aGUgbm9kZXMgcGFzc2VkIHRvIGBTaGFsbG93V3JhcHBlcmBcbiAqIEBwYXJhbSB7U2hhbGxvd1dyYXBwZXJ9IHJvb3QgdGhpcyBgU2hhbGxvd1dyYXBwZXJgJ3MgcGFyZW50LiBJZiB0aGlzIGlzIHBhc3NlZCwgb3B0aW9ucyBhcmVcbiAqICBub3QgdHJhbnNmb3JtZWQuXG4gKiBAcGFyYW0geyp9IHBhc3NlZE9wdGlvbnMgdGhlIG9wdGlvbnMgcGFzc2VkIHRvIGBTaGFsbG93V3JhcHBlcmAuXG4gKiBAcGFyYW0geyp9IHdyYXBwZXIgdGhlIGBTaGFsbG93V3JhcHBlcmAgaXRzZWxmXG4gKiBAcmV0dXJucyB7T2JqZWN0fSB0aGUgZGVjb3JhdGVkIGFuZCB0cmFuc2Zvcm1lZCBvcHRpb25zXG4gKi9cbmZ1bmN0aW9uIG1ha2VTaGFsbG93T3B0aW9ucyhub2Rlcywgcm9vdCwgcGFzc2VkT3B0aW9ucywgd3JhcHBlcikge1xuICB2YXIgb3B0aW9ucyA9ICgwLCBfVXRpbHMubWFrZU9wdGlvbnMpKHBhc3NlZE9wdGlvbnMpO1xuICB2YXIgYWRhcHRlciA9ICgwLCBfZ2V0QWRhcHRlcjJbJ2RlZmF1bHQnXSkocGFzc2VkT3B0aW9ucyk7XG4gICgwLCBfVXRpbHMucHJpdmF0ZVNldCkob3B0aW9ucywgUFJPVklERVJfVkFMVUVTLCBwYXNzZWRPcHRpb25zW1BST1ZJREVSX1ZBTFVFU10pO1xuICBpZiAocm9vdCB8fCAhKDAsIF9VdGlscy5pc0N1c3RvbUNvbXBvbmVudCkob3B0aW9ucy53cmFwcGluZ0NvbXBvbmVudCwgYWRhcHRlcikpIHtcbiAgICByZXR1cm4gb3B0aW9ucztcbiAgfVxuICBpZiAodHlwZW9mIGFkYXB0ZXIud3JhcFdpdGhXcmFwcGluZ0NvbXBvbmVudCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3lvdXIgYWRhcHRlciBkb2VzIG5vdCBzdXBwb3J0IGB3cmFwcGluZ0NvbXBvbmVudGAuIFRyeSB1cGdyYWRpbmcgaXQhJyk7XG4gIH1cblxuICB2YXIgX2FkYXB0ZXIkd3JhcFdpdGhXcmFwID0gYWRhcHRlci53cmFwV2l0aFdyYXBwaW5nQ29tcG9uZW50KG5vZGVzLCBvcHRpb25zKSxcbiAgICAgIHdyYXBwZWROb2RlID0gX2FkYXB0ZXIkd3JhcFdpdGhXcmFwLm5vZGUsXG4gICAgICBSb290RmluZGVyID0gX2FkYXB0ZXIkd3JhcFdpdGhXcmFwLlJvb3RGaW5kZXI7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2UtYmVmb3JlLWRlZmluZVxuXG5cbiAgdmFyIHdyYXBwaW5nQ29tcG9uZW50ID0gbmV3IFdyYXBwaW5nQ29tcG9uZW50V3JhcHBlcih3cmFwcGVkTm9kZSwgd3JhcHBlciwgUm9vdEZpbmRlcik7XG5cbiAgdmFyIF9nZXRDb250ZXh0RnJvbVdyYXBwaSA9IGdldENvbnRleHRGcm9tV3JhcHBpbmdDb21wb25lbnQod3JhcHBpbmdDb21wb25lbnQsIGFkYXB0ZXIpLFxuICAgICAgd3JhcHBpbmdDb21wb25lbnRMZWdhY3lDb250ZXh0ID0gX2dldENvbnRleHRGcm9tV3JhcHBpLmxlZ2FjeUNvbnRleHQsXG4gICAgICB3cmFwcGluZ0NvbXBvbmVudFByb3ZpZGVyVmFsdWVzID0gX2dldENvbnRleHRGcm9tV3JhcHBpLnByb3ZpZGVyVmFsdWVzO1xuXG4gICgwLCBfVXRpbHMucHJpdmF0ZVNldCkod3JhcHBlciwgV1JBUFBJTkdfQ09NUE9ORU5ULCB3cmFwcGluZ0NvbXBvbmVudCk7XG4gIHJldHVybiAoMCwgX29iamVjdDJbJ2RlZmF1bHQnXSkoe30sIG9wdGlvbnMsIF9kZWZpbmVQcm9wZXJ0eSh7XG4gICAgY29udGV4dDogKDAsIF9vYmplY3QyWydkZWZhdWx0J10pKHt9LCBvcHRpb25zLmNvbnRleHQsIHdyYXBwaW5nQ29tcG9uZW50TGVnYWN5Q29udGV4dClcbiAgfSwgUFJPVklERVJfVkFMVUVTLCB3cmFwcGluZ0NvbXBvbmVudFByb3ZpZGVyVmFsdWVzKSk7XG59XG5cbmZ1bmN0aW9uIG1ha2VJbmhlcml0ZWRDaGlsZE9wdGlvbnMod3JhcHBlcikge1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG5cbiAgdmFyIGNoaWxkT3B0aW9ucyA9ICgwLCBfb2JqZWN0MlsnZGVmYXVsdCddKSh7fSwgd3JhcHBlcltPUFRJT05TXSwgb3B0aW9ucywge1xuICAgIGNvbnRleHQ6IG9wdGlvbnMuY29udGV4dCB8fCAoMCwgX29iamVjdDJbJ2RlZmF1bHQnXSkoe30sIHdyYXBwZXJbT1BUSU9OU10uY29udGV4dCwgd3JhcHBlcltST09UXVtDSElMRF9DT05URVhUXSlcbiAgfSk7XG4gICgwLCBfVXRpbHMucHJpdmF0ZVNldCkoY2hpbGRPcHRpb25zLCBQUk9WSURFUl9WQUxVRVMsIHdyYXBwZXJbUk9PVF1bUFJPVklERVJfVkFMVUVTXSk7XG4gIHJldHVybiBjaGlsZE9wdGlvbnM7XG59XG5cbi8qKlxuICogQGNsYXNzIFNoYWxsb3dXcmFwcGVyXG4gKi9cblxudmFyIFNoYWxsb3dXcmFwcGVyID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTaGFsbG93V3JhcHBlcihub2Rlcywgcm9vdCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB2YXIgcGFzc2VkT3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU2hhbGxvd1dyYXBwZXIpO1xuXG4gICAgdmFsaWRhdGVPcHRpb25zKHBhc3NlZE9wdGlvbnMpO1xuXG4gICAgdmFyIG9wdGlvbnMgPSBtYWtlU2hhbGxvd09wdGlvbnMobm9kZXMsIHJvb3QsIHBhc3NlZE9wdGlvbnMsIHRoaXMpO1xuICAgIHZhciBhZGFwdGVyID0gKDAsIF9nZXRBZGFwdGVyMlsnZGVmYXVsdCddKShvcHRpb25zKTtcbiAgICB2YXIgbGlmZWN5Y2xlcyA9IGdldEFkYXB0ZXJMaWZlY3ljbGVzKGFkYXB0ZXIpO1xuXG4gICAgLy8gbW91bnRpbmcgYSBTaGFsbG93UmVuZGVyIGNvbXBvbmVudFxuICAgIGlmICghcm9vdCkge1xuICAgICAgaWYgKCFhZGFwdGVyLmlzVmFsaWRFbGVtZW50KG5vZGVzKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdTaGFsbG93V3JhcHBlciBjYW4gb25seSB3cmFwIHZhbGlkIGVsZW1lbnRzJyk7XG4gICAgICB9XG5cbiAgICAgIHZhciBnZXRDaGlsZENvbnRleHRTcHkgPSBsaWZlY3ljbGVzLmdldENoaWxkQ29udGV4dC5jYWxsZWRCeVJlbmRlcmVyID8gc3B5T25HZXRDaGlsZENvbnRleHRJbml0aWFsUmVuZGVyKG5vZGVzLCBhZGFwdGVyKSA6IG51bGw7XG4gICAgICAoMCwgX1V0aWxzLnByaXZhdGVTZXQpKHRoaXMsIFJPT1QsIHRoaXMpO1xuICAgICAgKDAsIF9VdGlscy5wcml2YXRlU2V0KSh0aGlzLCBVTlJFTkRFUkVELCBub2Rlcyk7XG4gICAgICB2YXIgcmVuZGVyZXIgPSBhZGFwdGVyLmNyZWF0ZVJlbmRlcmVyKCgwLCBfb2JqZWN0MlsnZGVmYXVsdCddKSh7IG1vZGU6ICdzaGFsbG93JyB9LCBvcHRpb25zKSk7XG4gICAgICAoMCwgX1V0aWxzLnByaXZhdGVTZXQpKHRoaXMsIFJFTkRFUkVSLCByZW5kZXJlcik7XG4gICAgICB2YXIgcHJvdmlkZXJWYWx1ZXMgPSBuZXcgTWFwKG9wdGlvbnNbUFJPVklERVJfVkFMVUVTXSB8fCBbXSk7XG4gICAgICB0aGlzW1JFTkRFUkVSXS5yZW5kZXIobm9kZXMsIG9wdGlvbnMuY29udGV4dCwgeyBwcm92aWRlclZhbHVlczogcHJvdmlkZXJWYWx1ZXMgfSk7XG4gICAgICB2YXIgcmVuZGVyZWROb2RlID0gdGhpc1tSRU5ERVJFUl0uZ2V0Tm9kZSgpO1xuICAgICAgcHJpdmF0ZVNldE5vZGVzKHRoaXMsIGdldFJvb3ROb2RlKHJlbmRlcmVkTm9kZSkpO1xuICAgICAgKDAsIF9VdGlscy5wcml2YXRlU2V0KSh0aGlzLCBPUFRJT05TLCBvcHRpb25zKTtcbiAgICAgICgwLCBfVXRpbHMucHJpdmF0ZVNldCkodGhpcywgUFJPVklERVJfVkFMVUVTLCBwcm92aWRlclZhbHVlcyk7XG5cbiAgICAgIHZhciBpbnN0YW5jZSA9IHJlbmRlcmVkTm9kZS5pbnN0YW5jZTtcblxuICAgICAgaWYgKGluc3RhbmNlICYmICFvcHRpb25zLmRpc2FibGVMaWZlY3ljbGVNZXRob2RzKSB7XG4gICAgICAgIC8vIEVuc3VyZSB0byBjYWxsIGNvbXBvbmVudERpZFVwZGF0ZSB3aGVuIGluc3RhbmNlLnNldFN0YXRlIGlzIGNhbGxlZFxuICAgICAgICBpZiAobGlmZWN5Y2xlcy5jb21wb25lbnREaWRVcGRhdGUub25TZXRTdGF0ZSAmJiAhaW5zdGFuY2VbU0VUX1NUQVRFXSkge1xuICAgICAgICAgICgwLCBfVXRpbHMucHJpdmF0ZVNldCkoaW5zdGFuY2UsIFNFVF9TVEFURSwgaW5zdGFuY2Uuc2V0U3RhdGUpO1xuICAgICAgICAgIGluc3RhbmNlLnNldFN0YXRlID0gZnVuY3Rpb24gKHVwZGF0ZXIpIHtcbiAgICAgICAgICAgIHZhciBjYWxsYmFjayA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLnNldFN0YXRlLmFwcGx5KF90aGlzLCBfdG9Db25zdW1hYmxlQXJyYXkoY2FsbGJhY2sgPT0gbnVsbCA/IFt1cGRhdGVyXSA6IFt1cGRhdGVyLCBjYWxsYmFja10pKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBpbnN0YW5jZS5jb21wb25lbnREaWRNb3VudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHRoaXNbUkVOREVSRVJdLmJhdGNoZWRVcGRhdGVzKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGluc3RhbmNlLmNvbXBvbmVudERpZE1vdW50KCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcHJpdmF0ZVNldENoaWxkQ29udGV4dChhZGFwdGVyLCB0aGlzLCBpbnN0YW5jZSwgcmVuZGVyZWROb2RlLCBnZXRDaGlsZENvbnRleHRTcHkpO1xuICAgICAgfVxuICAgICAgLy8gY3JlYXRpbmcgYSBjaGlsZCBjb21wb25lbnQgdGhyb3VnaCBlbnp5bWUncyBTaGFsbG93V3JhcHBlciBBUElzLlxuICAgIH0gZWxzZSB7XG4gICAgICAoMCwgX1V0aWxzLnByaXZhdGVTZXQpKHRoaXMsIFJPT1QsIHJvb3QpO1xuICAgICAgKDAsIF9VdGlscy5wcml2YXRlU2V0KSh0aGlzLCBVTlJFTkRFUkVELCBudWxsKTtcbiAgICAgICgwLCBfVXRpbHMucHJpdmF0ZVNldCkodGhpcywgUkVOREVSRVIsIHJvb3RbUkVOREVSRVJdKTtcbiAgICAgIHByaXZhdGVTZXROb2Rlcyh0aGlzLCBub2Rlcyk7XG4gICAgICAoMCwgX1V0aWxzLnByaXZhdGVTZXQpKHRoaXMsIE9QVElPTlMsIHJvb3RbT1BUSU9OU10pO1xuICAgICAgKDAsIF9VdGlscy5wcml2YXRlU2V0KSh0aGlzLCBST09UX05PREVTLCByb290W05PREVTXSk7XG4gICAgICAoMCwgX1V0aWxzLnByaXZhdGVTZXQpKHRoaXMsIFBST1ZJREVSX1ZBTFVFUywgbnVsbCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHJvb3Qgd3JhcHBlclxuICAgKlxuICAgKiBAcmV0dXJuIHtTaGFsbG93V3JhcHBlcn1cbiAgICovXG5cblxuICBfY3JlYXRlQ2xhc3MoU2hhbGxvd1dyYXBwZXIsIFt7XG4gICAga2V5OiAncm9vdCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIHJvb3QoKSB7XG4gICAgICAgIHJldHVybiB0aGlzW1JPT1RdO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcm9vdDtcbiAgICB9KClcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHdyYXBwZWQgY29tcG9uZW50LlxuICAgICAqXG4gICAgICogQHJldHVybiB7UmVhY3RDb21wb25lbnR9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2dldE5vZGVJbnRlcm5hbCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIGdldE5vZGVJbnRlcm5hbCgpIHtcbiAgICAgICAgaWYgKHRoaXMubGVuZ3RoICE9PSAxKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTaGFsbG93V3JhcHBlcjo6Z2V0Tm9kZSgpIGNhbiBvbmx5IGJlIGNhbGxlZCB3aGVuIHdyYXBwaW5nIG9uZSBub2RlJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXNbUk9PVF0gPT09IHRoaXMpIHtcbiAgICAgICAgICB0aGlzLnVwZGF0ZSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzW05PREVdO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZ2V0Tm9kZUludGVybmFsO1xuICAgIH0oKVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgdGhlIHdyYXBwZWQgY29tcG9uZW50cy5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge0FycmF5PFJlYWN0Q29tcG9uZW50Pn1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZ2V0Tm9kZXNJbnRlcm5hbCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIGdldE5vZGVzSW50ZXJuYWwoKSB7XG4gICAgICAgIGlmICh0aGlzW1JPT1RdID09PSB0aGlzICYmIHRoaXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgdGhpcy51cGRhdGUoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpc1tOT0RFU107XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBnZXROb2Rlc0ludGVybmFsO1xuICAgIH0oKVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgd3JhcHBlZCBSZWFjdEVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtSZWFjdEVsZW1lbnR9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2dldEVsZW1lbnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBnZXRFbGVtZW50KCkge1xuICAgICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgICByZXR1cm4gdGhpcy5zaW5nbGUoJ2dldEVsZW1lbnQnLCBmdW5jdGlvbiAobikge1xuICAgICAgICAgIHJldHVybiAoMCwgX2dldEFkYXB0ZXIyWydkZWZhdWx0J10pKF90aGlzMltPUFRJT05TXSkubm9kZVRvRWxlbWVudChuKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBnZXRFbGVtZW50O1xuICAgIH0oKVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgd3JhcHBlZCBSZWFjdEVsZW1lbnRzLlxuICAgICAqXG4gICAgICogQHJldHVybiB7QXJyYXk8UmVhY3RFbGVtZW50Pn1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZ2V0RWxlbWVudHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBnZXRFbGVtZW50cygpIHtcbiAgICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Tm9kZXNJbnRlcm5hbCgpLm1hcChmdW5jdGlvbiAobikge1xuICAgICAgICAgIHJldHVybiAoMCwgX2dldEFkYXB0ZXIyWydkZWZhdWx0J10pKF90aGlzM1tPUFRJT05TXSkubm9kZVRvRWxlbWVudChuKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBnZXRFbGVtZW50cztcbiAgICB9KClcblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzXG5cbiAgfSwge1xuICAgIGtleTogJ2dldE5vZGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBnZXROb2RlKCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NoYWxsb3dXcmFwcGVyOjpnZXROb2RlKCkgaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZC4gVXNlIFNoYWxsb3dXcmFwcGVyOjpnZXRFbGVtZW50KCkgaW5zdGVhZCcpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZ2V0Tm9kZTtcbiAgICB9KClcblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzXG5cbiAgfSwge1xuICAgIGtleTogJ2dldE5vZGVzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gZ2V0Tm9kZXMoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignU2hhbGxvd1dyYXBwZXI6OmdldE5vZGVzKCkgaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZC4gVXNlIFNoYWxsb3dXcmFwcGVyOjpnZXRFbGVtZW50cygpIGluc3RlYWQnKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGdldE5vZGVzO1xuICAgIH0oKVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgaW5zdGFuY2Ugb2YgdGhlIGNvbXBvbmVudCBiZWluZyByZW5kZXJlZCBhcyB0aGUgcm9vdCBub2RlIHBhc3NlZCBpbnRvIGBzaGFsbG93KClgLlxuICAgICAqXG4gICAgICogTk9URTogY2FuIG9ubHkgYmUgY2FsbGVkIG9uIGEgd3JhcHBlciBpbnN0YW5jZSB0aGF0IGlzIGFsc28gdGhlIHJvb3QgaW5zdGFuY2UuXG4gICAgICpcbiAgICAgKiBFeGFtcGxlOlxuICAgICAqIGBgYFxuICAgICAqIGNvbnN0IHdyYXBwZXIgPSBzaGFsbG93KDxNeUNvbXBvbmVudCAvPik7XG4gICAgICogY29uc3QgaW5zdCA9IHdyYXBwZXIuaW5zdGFuY2UoKTtcbiAgICAgKiBleHBlY3QoaW5zdCkudG8uYmUuaW5zdGFuY2VPZihNeUNvbXBvbmVudCk7XG4gICAgICogYGBgXG4gICAgICogQHJldHVybnMge1JlYWN0Q29tcG9uZW50fVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdpbnN0YW5jZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIGluc3RhbmNlKCkge1xuICAgICAgICBpZiAodGhpc1tST09UXSAhPT0gdGhpcykge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignU2hhbGxvd1dyYXBwZXI6Omluc3RhbmNlKCkgY2FuIG9ubHkgYmUgY2FsbGVkIG9uIHRoZSByb290Jyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXNbUkVOREVSRVJdLmdldE5vZGUoKS5pbnN0YW5jZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGluc3RhbmNlO1xuICAgIH0oKVxuXG4gICAgLyoqXG4gICAgICogSWYgYSBgd3JhcHBpbmdDb21wb25lbnRgIHdhcyBwYXNzZWQgaW4gYG9wdGlvbnNgLCB0aGlzIG1ldGhvZHMgcmV0dXJucyBhIGBTaGFsbG93V3JhcHBlcmBcbiAgICAgKiBhcm91bmQgdGhlIHJlbmRlcmVkIGB3cmFwcGluZ0NvbXBvbmVudGAuIFRoaXMgYFNoYWxsb3dXcmFwcGVyYCBjYW4gYmUgdXNlZCB0byB1cGRhdGUgdGhlXG4gICAgICogYHdyYXBwaW5nQ29tcG9uZW50YCdzIHByb3BzLCBzdGF0ZSwgZXRjLlxuICAgICAqXG4gICAgICogQHJldHVybnMgU2hhbGxvd1dyYXBwZXJcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZ2V0V3JhcHBpbmdDb21wb25lbnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBnZXRXcmFwcGluZ0NvbXBvbmVudCgpIHtcbiAgICAgICAgaWYgKHRoaXNbUk9PVF0gIT09IHRoaXMpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NoYWxsb3dXcmFwcGVyOjpnZXRXcmFwcGluZ0NvbXBvbmVudCgpIGNhbiBvbmx5IGJlIGNhbGxlZCBvbiB0aGUgcm9vdCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpc1tPUFRJT05TXS53cmFwcGluZ0NvbXBvbmVudCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignU2hhbGxvd1dyYXBwZXI6OmdldFdyYXBwaW5nQ29tcG9uZW50KCkgY2FuIG9ubHkgYmUgY2FsbGVkIG9uIGEgd3JhcHBlciB0aGF0IHdhcyBvcmlnaW5hbGx5IHBhc3NlZCBhIGB3cmFwcGluZ0NvbXBvbmVudGAgb3B0aW9uJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXNbV1JBUFBJTkdfQ09NUE9ORU5UXTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGdldFdyYXBwaW5nQ29tcG9uZW50O1xuICAgIH0oKVxuXG4gICAgLyoqXG4gICAgICogRm9yY2VzIGEgcmUtcmVuZGVyLiBVc2VmdWwgdG8gcnVuIGJlZm9yZSBjaGVja2luZyB0aGUgcmVuZGVyIG91dHB1dCBpZiBzb21ldGhpbmcgZXh0ZXJuYWxcbiAgICAgKiBtYXkgYmUgdXBkYXRpbmcgdGhlIHN0YXRlIG9mIHRoZSBjb21wb25lbnQgc29tZXdoZXJlLlxuICAgICAqXG4gICAgICogTk9URTogY2FuIG9ubHkgYmUgY2FsbGVkIG9uIGEgd3JhcHBlciBpbnN0YW5jZSB0aGF0IGlzIGFsc28gdGhlIHJvb3QgaW5zdGFuY2UuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7U2hhbGxvd1dyYXBwZXJ9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3VwZGF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICAgICAgaWYgKHRoaXNbUk9PVF0gIT09IHRoaXMpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NoYWxsb3dXcmFwcGVyOjp1cGRhdGUoKSBjYW4gb25seSBiZSBjYWxsZWQgb24gdGhlIHJvb3QnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5sZW5ndGggIT09IDEpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NoYWxsb3dXcmFwcGVyOjp1cGRhdGUoKSBjYW4gb25seSBiZSBjYWxsZWQgd2hlbiB3cmFwcGluZyBvbmUgbm9kZScpO1xuICAgICAgICB9XG4gICAgICAgIHByaXZhdGVTZXROb2Rlcyh0aGlzLCBnZXRSb290Tm9kZSh0aGlzW1JFTkRFUkVSXS5nZXROb2RlKCkpKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB1cGRhdGU7XG4gICAgfSgpXG5cbiAgICAvKipcbiAgICAgKiBBIG1ldGhvZCB0aGF0IHVubW91bnRzIHRoZSBjb21wb25lbnQuIFRoaXMgY2FuIGJlIHVzZWQgdG8gc2ltdWxhdGUgYSBjb21wb25lbnQgZ29pbmcgdGhyb3VnaFxuICAgICAqIGFuZCB1bm1vdW50L21vdW50IGxpZmVjeWNsZS5cbiAgICAgKiBAcmV0dXJucyB7U2hhbGxvd1dyYXBwZXJ9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3VubW91bnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiB1bm1vdW50KCkge1xuICAgICAgICB0aGlzW1JFTkRFUkVSXS51bm1vdW50KCk7XG4gICAgICAgIGlmICh0aGlzW1JPT1RdW1dSQVBQSU5HX0NPTVBPTkVOVF0pIHtcbiAgICAgICAgICB0aGlzW1JPT1RdW1dSQVBQSU5HX0NPTVBPTkVOVF0udW5tb3VudCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdW5tb3VudDtcbiAgICB9KClcblxuICAgIC8qKlxuICAgICAqIEEgbWV0aG9kIGlzIGZvciByZS1yZW5kZXIgd2l0aCBuZXcgcHJvcHMgYW5kIGNvbnRleHQuXG4gICAgICogVGhpcyBjYWxscyBjb21wb25lbnREaWRVcGRhdGUgbWV0aG9kIGlmIGRpc2FibGVMaWZlY3ljbGVNZXRob2RzIGlzIG5vdCBlbmFibGVkLlxuICAgICAqXG4gICAgICogTk9URTogY2FuIG9ubHkgYmUgY2FsbGVkIG9uIGEgd3JhcHBlciBpbnN0YW5jZSB0aGF0IGlzIGFsc28gdGhlIHJvb3QgaW5zdGFuY2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcHJvcHNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gY29udGV4dFxuICAgICAqIEByZXR1cm5zIHtTaGFsbG93V3JhcHBlcn1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAncmVyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiByZXJlbmRlcihwcm9wcywgY29udGV4dCkge1xuICAgICAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgICAgICB2YXIgYWRhcHRlciA9ICgwLCBfZ2V0QWRhcHRlcjJbJ2RlZmF1bHQnXSkodGhpc1tPUFRJT05TXSk7XG4gICAgICAgIHRoaXMuc2luZ2xlKCdyZXJlbmRlcicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAoMCwgX1V0aWxzLndpdGhTZXRTdGF0ZUFsbG93ZWQpKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vIE5PVEUobG1yKTogSW4gcmVhY3QgMTYsIGluc3RhbmNlcyB3aWxsIGJlIG51bGwgZm9yIFNGQ3MsIGJ1dFxuICAgICAgICAgICAgLy8gcmVyZW5kZXJpbmcgd2l0aCBwcm9wcy9jb250ZXh0IGlzIHN0aWxsIGEgdmFsaWQgdGhpbmcgdG8gZG8uIEluXG4gICAgICAgICAgICAvLyB0aGlzIGNhc2UsIHN0YXRlIHdpbGwgYmUgdW5kZWZpbmVkLCBidXQgcHJvcHMvY29udGV4dCB3aWxsIGV4aXN0LlxuICAgICAgICAgICAgdmFyIG5vZGUgPSBfdGhpczRbUkVOREVSRVJdLmdldE5vZGUoKTtcbiAgICAgICAgICAgIHZhciBpbnN0YW5jZSA9IG5vZGUuaW5zdGFuY2UgfHwge307XG4gICAgICAgICAgICB2YXIgdHlwZSA9IG5vZGUudHlwZSB8fCB7fTtcbiAgICAgICAgICAgIHZhciBzdGF0ZSA9IGluc3RhbmNlLnN0YXRlO1xuXG4gICAgICAgICAgICB2YXIgcHJldlByb3BzID0gaW5zdGFuY2UucHJvcHMgfHwgX3RoaXM0W1VOUkVOREVSRURdLnByb3BzO1xuICAgICAgICAgICAgdmFyIHByZXZDb250ZXh0ID0gaW5zdGFuY2UuY29udGV4dCB8fCBfdGhpczRbT1BUSU9OU10uY29udGV4dDtcbiAgICAgICAgICAgIHZhciBuZXh0Q29udGV4dCA9IGNvbnRleHQgfHwgcHJldkNvbnRleHQ7XG4gICAgICAgICAgICBpZiAoY29udGV4dCkge1xuICAgICAgICAgICAgICBfdGhpczRbT1BUSU9OU10gPSAoMCwgX29iamVjdDJbJ2RlZmF1bHQnXSkoe30sIF90aGlzNFtPUFRJT05TXSwgeyBjb250ZXh0OiBuZXh0Q29udGV4dCB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF90aGlzNFtSRU5ERVJFUl0uYmF0Y2hlZFVwZGF0ZXMoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAvLyBXaGVuIHNob3VsZENvbXBvbmVudFVwZGF0ZSByZXR1cm5zIGZhbHNlIHdlIHNob3VsZG4ndCBjYWxsIGNvbXBvbmVudERpZFVwZGF0ZS5cbiAgICAgICAgICAgICAgLy8gc28gd2Ugc3B5IHNob3VsZENvbXBvbmVudFVwZGF0ZSB0byBnZXQgdGhlIHJlc3VsdC5cbiAgICAgICAgICAgICAgdmFyIGxpZmVjeWNsZXMgPSBnZXRBZGFwdGVyTGlmZWN5Y2xlcyhhZGFwdGVyKTtcbiAgICAgICAgICAgICAgdmFyIHNob3VsZFJlbmRlciA9IHRydWU7XG4gICAgICAgICAgICAgIHZhciBzaG91bGRDb21wb25lbnRVcGRhdGVTcHkgPSB2b2lkIDA7XG4gICAgICAgICAgICAgIHZhciBnZXRDaGlsZENvbnRleHRTcHkgPSB2b2lkIDA7XG4gICAgICAgICAgICAgIGlmICghX3RoaXM0W09QVElPTlNdLmRpc2FibGVMaWZlY3ljbGVNZXRob2RzICYmIGluc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBpbnN0YW5jZS5zaG91bGRDb21wb25lbnRVcGRhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBnRFNGUCA9IGxpZmVjeWNsZXMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1xuXG4gICAgICAgICAgICAgICAgICBpZiAoZ0RTRlAgJiYgZ0RTRlAuaGFzU2hvdWxkQ29tcG9uZW50VXBkYXRlQnVnKSB7XG4gICAgICAgICAgICAgICAgICAgIG1vY2tTQ1VJZmdEU0ZQUmV0dXJuTm9uTnVsbChub2RlLCBzdGF0ZSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBzaG91bGRDb21wb25lbnRVcGRhdGVTcHkgPSAoMCwgX1V0aWxzLnNweU1ldGhvZCkoaW5zdGFuY2UsICdzaG91bGRDb21wb25lbnRVcGRhdGUnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGxpZmVjeWNsZXMuZ2V0Q2hpbGRDb250ZXh0LmNhbGxlZEJ5UmVuZGVyZXIgJiYgdHlwZW9mIGluc3RhbmNlLmdldENoaWxkQ29udGV4dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgZ2V0Q2hpbGRDb250ZXh0U3B5ID0gKDAsIF9VdGlscy5zcHlNZXRob2QpKGluc3RhbmNlLCAnZ2V0Q2hpbGRDb250ZXh0Jyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmICghc2hvdWxkQ29tcG9uZW50VXBkYXRlU3B5ICYmIGlzUHVyZUNvbXBvbmVudChpbnN0YW5jZSkpIHtcbiAgICAgICAgICAgICAgICBzaG91bGRSZW5kZXIgPSBwdXJlQ29tcG9uZW50U2hvdWxkQ29tcG9uZW50VXBkYXRlKHByZXZQcm9wcywgcHJvcHMsIHN0YXRlLCBpbnN0YW5jZS5zdGF0ZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKHByb3BzKSBfdGhpczRbVU5SRU5ERVJFRF0gPSAoMCwgX1V0aWxzLmNsb25lRWxlbWVudCkoYWRhcHRlciwgX3RoaXM0W1VOUkVOREVSRURdLCBwcm9wcyk7XG4gICAgICAgICAgICAgIF90aGlzNFtSRU5ERVJFUl0ucmVuZGVyKF90aGlzNFtVTlJFTkRFUkVEXSwgbmV4dENvbnRleHQsIHtcbiAgICAgICAgICAgICAgICBwcm92aWRlclZhbHVlczogX3RoaXM0W1BST1ZJREVSX1ZBTFVFU11cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIGlmIChzaG91bGRDb21wb25lbnRVcGRhdGVTcHkpIHtcbiAgICAgICAgICAgICAgICBzaG91bGRSZW5kZXIgPSBzaG91bGRDb21wb25lbnRVcGRhdGVTcHkuZ2V0TGFzdFJldHVyblZhbHVlKCk7XG4gICAgICAgICAgICAgICAgc2hvdWxkQ29tcG9uZW50VXBkYXRlU3B5LnJlc3RvcmUoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoc2hvdWxkUmVuZGVyICYmICFfdGhpczRbT1BUSU9OU10uZGlzYWJsZUxpZmVjeWNsZU1ldGhvZHMgJiYgaW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICBwcml2YXRlU2V0Q2hpbGRDb250ZXh0KGFkYXB0ZXIsIF90aGlzNCwgaW5zdGFuY2UsIG5vZGUsIGdldENoaWxkQ29udGV4dFNweSk7XG4gICAgICAgICAgICAgICAgaWYgKGxpZmVjeWNsZXMuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBzbmFwc2hvdCA9IHZvaWQgMDtcbiAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgaW5zdGFuY2UuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgc25hcHNob3QgPSBpbnN0YW5jZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZShwcmV2UHJvcHMsIHN0YXRlKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGlmIChsaWZlY3ljbGVzLmNvbXBvbmVudERpZFVwZGF0ZSAmJiB0eXBlb2YgaW5zdGFuY2UuY29tcG9uZW50RGlkVXBkYXRlID09PSAnZnVuY3Rpb24nICYmICghc3RhdGUgfHwgKDAsIF9lbnp5bWVTaGFsbG93RXF1YWwyWydkZWZhdWx0J10pKHN0YXRlLCBfdGhpczQuaW5zdGFuY2UoKS5zdGF0ZSkgfHwgdHlwZW9mIHR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID09PSAnZnVuY3Rpb24nKSkge1xuICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZS5jb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzLCBzdGF0ZSwgc25hcHNob3QpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobGlmZWN5Y2xlcy5jb21wb25lbnREaWRVcGRhdGUgJiYgdHlwZW9mIGluc3RhbmNlLmNvbXBvbmVudERpZFVwZGF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgaWYgKGxpZmVjeWNsZXMuY29tcG9uZW50RGlkVXBkYXRlLnByZXZDb250ZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgIGluc3RhbmNlLmNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMsIHN0YXRlLCBwcmV2Q29udGV4dCk7XG4gICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFzdGF0ZSB8fCAoMCwgX2VuenltZVNoYWxsb3dFcXVhbDJbJ2RlZmF1bHQnXSkoX3RoaXM0Lmluc3RhbmNlKCkuc3RhdGUsIHN0YXRlKSkge1xuICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZS5jb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzLCBzdGF0ZSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIElmIGl0IGRvZXNuJ3QgbmVlZCB0byByZXJlbmRlciwgdXBkYXRlIG9ubHkgaXRzIHByb3BzLlxuICAgICAgICAgICAgICB9IGVsc2UgaWYgKCEoMCwgX2VuenltZVNoYWxsb3dFcXVhbDJbJ2RlZmF1bHQnXSkocHJvcHMsIGluc3RhbmNlLnByb3BzKSkge1xuICAgICAgICAgICAgICAgIGluc3RhbmNlLnByb3BzID0gKE9iamVjdC5mcmVlemUgfHwgT2JqZWN0KSgoMCwgX29iamVjdDJbJ2RlZmF1bHQnXSkoe30sIGluc3RhbmNlLnByb3BzLCBwcm9wcykpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIF90aGlzNC51cGRhdGUoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXJlbmRlcjtcbiAgICB9KClcblxuICAgIC8qKlxuICAgICAqIEEgbWV0aG9kIHRoYXQgc2V0cyB0aGUgcHJvcHMgb2YgdGhlIHJvb3QgY29tcG9uZW50LCBhbmQgcmUtcmVuZGVycy4gVXNlZnVsIGZvciB3aGVuIHlvdSBhcmVcbiAgICAgKiB3YW50aW5nIHRvIHRlc3QgaG93IHRoZSBjb21wb25lbnQgYmVoYXZlcyBvdmVyIHRpbWUgd2l0aCBjaGFuZ2luZyBwcm9wcy4gQ2FsbGluZyB0aGlzLCBmb3JcbiAgICAgKiBpbnN0YW5jZSwgd2lsbCBjYWxsIHRoZSBgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc2AgbGlmZWN5Y2xlIG1ldGhvZC5cbiAgICAgKlxuICAgICAqIFNpbWlsYXIgdG8gYHNldFN0YXRlYCwgdGhpcyBtZXRob2QgYWNjZXB0cyBhIHByb3BzIG9iamVjdCBhbmQgd2lsbCBtZXJnZSBpdCBpbiB3aXRoIHRoZSBhbHJlYWR5XG4gICAgICogZXhpc3RpbmcgcHJvcHMuXG4gICAgICpcbiAgICAgKiBOT1RFOiBjYW4gb25seSBiZSBjYWxsZWQgb24gYSB3cmFwcGVyIGluc3RhbmNlIHRoYXQgaXMgYWxzbyB0aGUgcm9vdCBpbnN0YW5jZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wcyBvYmplY3RcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYiAtIGNhbGxiYWNrIGZ1bmN0aW9uXG4gICAgICogQHJldHVybnMge1NoYWxsb3dXcmFwcGVyfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdzZXRQcm9wcycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIHNldFByb3BzKHByb3BzKSB7XG4gICAgICAgIHZhciBjYWxsYmFjayA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIGlmICh0aGlzW1JPT1RdICE9PSB0aGlzKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTaGFsbG93V3JhcHBlcjo6c2V0UHJvcHMoKSBjYW4gb25seSBiZSBjYWxsZWQgb24gdGhlIHJvb3QnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIGNhbGxiYWNrICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUmVhY3RXcmFwcGVyOjpzZXRQcm9wcygpIGV4cGVjdHMgYSBmdW5jdGlvbiBhcyBpdHMgc2Vjb25kIGFyZ3VtZW50Jyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZXJlbmRlcihwcm9wcyk7XG4gICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzZXRQcm9wcztcbiAgICB9KClcblxuICAgIC8qKlxuICAgICAqIEEgbWV0aG9kIHRvIGludm9rZSBgc2V0U3RhdGVgIG9uIHRoZSByb290IGNvbXBvbmVudCBpbnN0YW5jZSBzaW1pbGFyIHRvIGhvdyB5b3UgbWlnaHQgaW4gdGhlXG4gICAgICogZGVmaW5pdGlvbiBvZiB0aGUgY29tcG9uZW50LCBhbmQgcmUtcmVuZGVycy4gIFRoaXMgbWV0aG9kIGlzIHVzZWZ1bCBmb3IgdGVzdGluZyB5b3VyIGNvbXBvbmVudFxuICAgICAqIGluIGhhcmQgdG8gYWNoaWV2ZSBzdGF0ZXMsIGhvd2V2ZXIgc2hvdWxkIGJlIHVzZWQgc3BhcmluZ2x5LiBJZiBwb3NzaWJsZSwgeW91IHNob3VsZCB1dGlsaXplXG4gICAgICogeW91ciBjb21wb25lbnQncyBleHRlcm5hbCBBUEkgaW4gb3JkZXIgdG8gZ2V0IGl0IGludG8gd2hhdGV2ZXIgc3RhdGUgeW91IHdhbnQgdG8gdGVzdCwgaW4gb3JkZXJcbiAgICAgKiB0byBiZSBhcyBhY2N1cmF0ZSBvZiBhIHRlc3QgYXMgcG9zc2libGUuIFRoaXMgaXMgbm90IGFsd2F5cyBwcmFjdGljYWwsIGhvd2V2ZXIuXG4gICAgICpcbiAgICAgKiBOT1RFOiBjYW4gb25seSBiZSBjYWxsZWQgb24gYSB3cmFwcGVyIGluc3RhbmNlIHRoYXQgaXMgYWxzbyB0aGUgcm9vdCBpbnN0YW5jZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzdGF0ZSB0byBtZXJnZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNiIC0gY2FsbGJhY2sgZnVuY3Rpb25cbiAgICAgKiBAcmV0dXJucyB7U2hhbGxvd1dyYXBwZXJ9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3NldFN0YXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gc2V0U3RhdGUoc3RhdGUpIHtcbiAgICAgICAgdmFyIF90aGlzNSA9IHRoaXM7XG5cbiAgICAgICAgdmFyIGNhbGxiYWNrID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgaWYgKHRoaXNbUk9PVF0gIT09IHRoaXMpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NoYWxsb3dXcmFwcGVyOjpzZXRTdGF0ZSgpIGNhbiBvbmx5IGJlIGNhbGxlZCBvbiB0aGUgcm9vdCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmluc3RhbmNlKCkgPT09IG51bGwgfHwgdGhpc1tSRU5ERVJFUl0uZ2V0Tm9kZSgpLm5vZGVUeXBlICE9PSAnY2xhc3MnKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTaGFsbG93V3JhcHBlcjo6c2V0U3RhdGUoKSBjYW4gb25seSBiZSBjYWxsZWQgb24gY2xhc3MgY29tcG9uZW50cycpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSAmJiB0eXBlb2YgY2FsbGJhY2sgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdSZWFjdFdyYXBwZXI6OnNldFN0YXRlKCkgZXhwZWN0cyBhIGZ1bmN0aW9uIGFzIGl0cyBzZWNvbmQgYXJndW1lbnQnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2luZ2xlKCdzZXRTdGF0ZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAoMCwgX1V0aWxzLndpdGhTZXRTdGF0ZUFsbG93ZWQpKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBhZGFwdGVyID0gKDAsIF9nZXRBZGFwdGVyMlsnZGVmYXVsdCddKShfdGhpczVbT1BUSU9OU10pO1xuXG4gICAgICAgICAgICB2YXIgbGlmZWN5Y2xlcyA9IGdldEFkYXB0ZXJMaWZlY3ljbGVzKGFkYXB0ZXIpO1xuXG4gICAgICAgICAgICB2YXIgbm9kZSA9IF90aGlzNVtSRU5ERVJFUl0uZ2V0Tm9kZSgpO1xuICAgICAgICAgICAgdmFyIGluc3RhbmNlID0gbm9kZS5pbnN0YW5jZTtcblxuICAgICAgICAgICAgdmFyIHByZXZQcm9wcyA9IGluc3RhbmNlLnByb3BzO1xuICAgICAgICAgICAgdmFyIHByZXZTdGF0ZSA9IGluc3RhbmNlLnN0YXRlO1xuICAgICAgICAgICAgdmFyIHByZXZDb250ZXh0ID0gaW5zdGFuY2UuY29udGV4dDtcblxuICAgICAgICAgICAgdmFyIHN0YXRlUGF5bG9hZCA9IHR5cGVvZiBzdGF0ZSA9PT0gJ2Z1bmN0aW9uJyA/IHN0YXRlLmNhbGwoaW5zdGFuY2UsIHByZXZTdGF0ZSwgcHJldlByb3BzKSA6IHN0YXRlO1xuXG4gICAgICAgICAgICAvLyByZXR1cm5pbmcgbnVsbCBvciB1bmRlZmluZWQgcHJldmVudHMgdGhlIHVwZGF0ZSBpbiBSZWFjdCAxNitcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9wdWxsLzEyNzU2XG4gICAgICAgICAgICB2YXIgbWF5YmVIYXNVcGRhdGUgPSAhbGlmZWN5Y2xlcy5zZXRTdGF0ZS5za2lwc0NvbXBvbmVudERpZFVwZGF0ZU9uTnVsbGlzaCB8fCBzdGF0ZVBheWxvYWQgIT0gbnVsbDtcblxuICAgICAgICAgICAgLy8gV2hlbiBzaG91bGRDb21wb25lbnRVcGRhdGUgcmV0dXJucyBmYWxzZSB3ZSBzaG91bGRuJ3QgY2FsbCBjb21wb25lbnREaWRVcGRhdGUuXG4gICAgICAgICAgICAvLyBzbyB3ZSBzcHkgc2hvdWxkQ29tcG9uZW50VXBkYXRlIHRvIGdldCB0aGUgcmVzdWx0LlxuICAgICAgICAgICAgdmFyIHNob3VsZENvbXBvbmVudFVwZGF0ZVNweSA9IHZvaWQgMDtcbiAgICAgICAgICAgIHZhciBnZXRDaGlsZENvbnRleHRTcHkgPSB2b2lkIDA7XG4gICAgICAgICAgICB2YXIgc2hvdWxkUmVuZGVyID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmICghX3RoaXM1W09QVElPTlNdLmRpc2FibGVMaWZlY3ljbGVNZXRob2RzICYmIGluc3RhbmNlKSB7XG4gICAgICAgICAgICAgIGlmIChsaWZlY3ljbGVzLmNvbXBvbmVudERpZFVwZGF0ZSAmJiBsaWZlY3ljbGVzLmNvbXBvbmVudERpZFVwZGF0ZS5vblNldFN0YXRlICYmIHR5cGVvZiBpbnN0YW5jZS5zaG91bGRDb21wb25lbnRVcGRhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICB2YXIgZ0RTRlAgPSBsaWZlY3ljbGVzLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcblxuICAgICAgICAgICAgICAgIGlmIChnRFNGUCAmJiBnRFNGUC5oYXNTaG91bGRDb21wb25lbnRVcGRhdGVCdWcpIHtcbiAgICAgICAgICAgICAgICAgIG1vY2tTQ1VJZmdEU0ZQUmV0dXJuTm9uTnVsbChub2RlLCBzdGF0ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNob3VsZENvbXBvbmVudFVwZGF0ZVNweSA9ICgwLCBfVXRpbHMuc3B5TWV0aG9kKShpbnN0YW5jZSwgJ3Nob3VsZENvbXBvbmVudFVwZGF0ZScpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChsaWZlY3ljbGVzLmdldENoaWxkQ29udGV4dC5jYWxsZWRCeVJlbmRlcmVyICYmIHR5cGVvZiBpbnN0YW5jZS5nZXRDaGlsZENvbnRleHQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICBnZXRDaGlsZENvbnRleHRTcHkgPSAoMCwgX1V0aWxzLnNweU1ldGhvZCkoaW5zdGFuY2UsICdnZXRDaGlsZENvbnRleHQnKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFzaG91bGRDb21wb25lbnRVcGRhdGVTcHkgJiYgaXNQdXJlQ29tcG9uZW50KGluc3RhbmNlKSkge1xuICAgICAgICAgICAgICBzaG91bGRSZW5kZXIgPSBwdXJlQ29tcG9uZW50U2hvdWxkQ29tcG9uZW50VXBkYXRlKHByZXZQcm9wcywgaW5zdGFuY2UucHJvcHMsIHByZXZTdGF0ZSwgKDAsIF9vYmplY3QyWydkZWZhdWx0J10pKHt9LCBwcmV2U3RhdGUsIHN0YXRlUGF5bG9hZCkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBXZSBkb24ndCBwYXNzIHRoZSBzZXRTdGF0ZSBjYWxsYmFjayBoZXJlXG4gICAgICAgICAgICAvLyB0byBndWFyYW50ZWUgdG8gY2FsbCB0aGUgY2FsbGJhY2sgYWZ0ZXIgZmluaXNoaW5nIHRoZSByZW5kZXJcbiAgICAgICAgICAgIGlmIChpbnN0YW5jZVtTRVRfU1RBVEVdKSB7XG4gICAgICAgICAgICAgIGluc3RhbmNlW1NFVF9TVEFURV0oc3RhdGVQYXlsb2FkKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGluc3RhbmNlLnNldFN0YXRlKHN0YXRlUGF5bG9hZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc2hvdWxkQ29tcG9uZW50VXBkYXRlU3B5KSB7XG4gICAgICAgICAgICAgIHNob3VsZFJlbmRlciA9IHNob3VsZENvbXBvbmVudFVwZGF0ZVNweS5nZXRMYXN0UmV0dXJuVmFsdWUoKTtcbiAgICAgICAgICAgICAgc2hvdWxkQ29tcG9uZW50VXBkYXRlU3B5LnJlc3RvcmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtYXliZUhhc1VwZGF0ZSAmJiBzaG91bGRSZW5kZXIgJiYgIV90aGlzNVtPUFRJT05TXS5kaXNhYmxlTGlmZWN5Y2xlTWV0aG9kcykge1xuICAgICAgICAgICAgICBwcml2YXRlU2V0Q2hpbGRDb250ZXh0KGFkYXB0ZXIsIF90aGlzNSwgaW5zdGFuY2UsIG5vZGUsIGdldENoaWxkQ29udGV4dFNweSk7XG4gICAgICAgICAgICAgIGlmIChsaWZlY3ljbGVzLmNvbXBvbmVudERpZFVwZGF0ZSAmJiBsaWZlY3ljbGVzLmNvbXBvbmVudERpZFVwZGF0ZS5vblNldFN0YXRlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGxpZmVjeWNsZXMuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUgJiYgdHlwZW9mIGluc3RhbmNlLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgc25hcHNob3QgPSBpbnN0YW5jZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZShwcmV2UHJvcHMsIHByZXZTdGF0ZSk7XG4gICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGluc3RhbmNlLmNvbXBvbmVudERpZFVwZGF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZS5jb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzLCBwcmV2U3RhdGUsIHNuYXBzaG90KTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBpbnN0YW5jZS5jb21wb25lbnREaWRVcGRhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgIGlmIChsaWZlY3ljbGVzLmNvbXBvbmVudERpZFVwZGF0ZS5wcmV2Q29udGV4dCkge1xuICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZS5jb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzLCBwcmV2U3RhdGUsIHByZXZDb250ZXh0KTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGluc3RhbmNlLmNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMsIHByZXZTdGF0ZSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfdGhpczUudXBkYXRlKCk7XG4gICAgICAgICAgICAvLyBjYWxsIHRoZSBzZXRTdGF0ZSBjYWxsYmFja1xuICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgIGlmIChhZGFwdGVyLmludm9rZVNldFN0YXRlQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICBhZGFwdGVyLmludm9rZVNldFN0YXRlQ2FsbGJhY2soaW5zdGFuY2UsIGNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjay5jYWxsKGluc3RhbmNlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzZXRTdGF0ZTtcbiAgICB9KClcblxuICAgIC8qKlxuICAgICAqIEEgbWV0aG9kIHRoYXQgc2V0cyB0aGUgY29udGV4dCBvZiB0aGUgcm9vdCBjb21wb25lbnQsIGFuZCByZS1yZW5kZXJzLiBVc2VmdWwgZm9yIHdoZW4geW91IGFyZVxuICAgICAqIHdhbnRpbmcgdG8gdGVzdCBob3cgdGhlIGNvbXBvbmVudCBiZWhhdmVzIG92ZXIgdGltZSB3aXRoIGNoYW5naW5nIGNvbnRleHRzLlxuICAgICAqXG4gICAgICogTk9URTogY2FuIG9ubHkgYmUgY2FsbGVkIG9uIGEgd3JhcHBlciBpbnN0YW5jZSB0aGF0IGlzIGFsc28gdGhlIHJvb3QgaW5zdGFuY2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gY29udGV4dCBvYmplY3RcbiAgICAgKiBAcmV0dXJucyB7U2hhbGxvd1dyYXBwZXJ9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3NldENvbnRleHQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBzZXRDb250ZXh0KGNvbnRleHQpIHtcbiAgICAgICAgaWYgKHRoaXNbUk9PVF0gIT09IHRoaXMpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NoYWxsb3dXcmFwcGVyOjpzZXRDb250ZXh0KCkgY2FuIG9ubHkgYmUgY2FsbGVkIG9uIHRoZSByb290Jyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzW09QVElPTlNdLmNvbnRleHQpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NoYWxsb3dXcmFwcGVyOjpzZXRDb250ZXh0KCkgY2FuIG9ubHkgYmUgY2FsbGVkIG9uIGEgd3JhcHBlciB0aGF0IHdhcyBvcmlnaW5hbGx5IHBhc3NlZCBhIGNvbnRleHQgb3B0aW9uJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMucmVyZW5kZXIobnVsbCwgY29udGV4dCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzZXRDb250ZXh0O1xuICAgIH0oKVxuXG4gICAgLyoqXG4gICAgICogV2hldGhlciBvciBub3QgYSBnaXZlbiByZWFjdCBlbGVtZW50IGV4aXN0cyBpbiB0aGUgc2hhbGxvdyByZW5kZXIgdHJlZS5cbiAgICAgKlxuICAgICAqIEV4YW1wbGU6XG4gICAgICogYGBgXG4gICAgICogY29uc3Qgd3JhcHBlciA9IHNoYWxsb3coPE15Q29tcG9uZW50IC8+KTtcbiAgICAgKiBleHBlY3Qod3JhcHBlci5jb250YWlucyg8ZGl2IGNsYXNzTmFtZT1cImZvbyBiYXJcIiAvPikpLnRvLmVxdWFsKHRydWUpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHBhcmFtIHtSZWFjdEVsZW1lbnR8QXJyYXk8UmVhY3RFbGVtZW50Pn0gbm9kZU9yTm9kZXNcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnY29udGFpbnMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBjb250YWlucyhub2RlT3JOb2Rlcykge1xuICAgICAgICB2YXIgYWRhcHRlciA9ICgwLCBfZ2V0QWRhcHRlcjJbJ2RlZmF1bHQnXSkodGhpc1tPUFRJT05TXSk7XG4gICAgICAgIGlmICghKDAsIF9VdGlscy5pc1JlYWN0RWxlbWVudEFsaWtlKShub2RlT3JOb2RlcywgYWRhcHRlcikpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NoYWxsb3dXcmFwcGVyOjpjb250YWlucygpIGNhbiBvbmx5IGJlIGNhbGxlZCB3aXRoIGEgUmVhY3RFbGVtZW50IChvciBhbiBhcnJheSBvZiB0aGVtKSwgYSBzdHJpbmcsIG9yIGEgbnVtYmVyIGFzIGFuIGFyZ3VtZW50LicpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwcmVkaWNhdGUgPSBBcnJheS5pc0FycmF5KG5vZGVPck5vZGVzKSA/IGZ1bmN0aW9uIChvdGhlcikge1xuICAgICAgICAgIHJldHVybiAoMCwgX1V0aWxzLmNvbnRhaW5zQ2hpbGRyZW5TdWJBcnJheSkoX1V0aWxzLm5vZGVFcXVhbCwgb3RoZXIsIG5vZGVPck5vZGVzLm1hcChmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgICAgcmV0dXJuIGFkYXB0ZXIuZWxlbWVudFRvTm9kZShub2RlKTtcbiAgICAgICAgICB9KSk7XG4gICAgICAgIH0gOiBmdW5jdGlvbiAob3RoZXIpIHtcbiAgICAgICAgICByZXR1cm4gKDAsIF9VdGlscy5ub2RlRXF1YWwpKGFkYXB0ZXIuZWxlbWVudFRvTm9kZShub2RlT3JOb2RlcyksIG90aGVyKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gZmluZFdoZXJlVW53cmFwcGVkKHRoaXMsIHByZWRpY2F0ZSkubGVuZ3RoID4gMDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRhaW5zO1xuICAgIH0oKVxuXG4gICAgLyoqXG4gICAgICogV2hldGhlciBvciBub3QgYSBnaXZlbiByZWFjdCBlbGVtZW50IGV4aXN0cyBpbiB0aGUgc2hhbGxvdyByZW5kZXIgdHJlZS5cbiAgICAgKiBNYXRjaCBpcyBiYXNlZCBvbiB0aGUgZXhwZWN0ZWQgZWxlbWVudCBhbmQgbm90IG9uIHdyYXBwZXJzIGVsZW1lbnQuXG4gICAgICogSXQgd2lsbCBkZXRlcm1pbmUgaWYgb25lIG9mIHRoZSB3cmFwcGVycyBlbGVtZW50IFwibG9va3MgbGlrZVwiIHRoZSBleHBlY3RlZFxuICAgICAqIGVsZW1lbnQgYnkgY2hlY2tpbmcgaWYgYWxsIHByb3BzIG9mIHRoZSBleHBlY3RlZCBlbGVtZW50IGFyZSBwcmVzZW50XG4gICAgICogb24gdGhlIHdyYXBwZXJzIGVsZW1lbnQgYW5kIGVxdWFscyB0byBlYWNoIG90aGVyLlxuICAgICAqXG4gICAgICogRXhhbXBsZTpcbiAgICAgKiBgYGBcbiAgICAgKiAvLyBNeUNvbXBvbmVudCBvdXRwdXRzIDxkaXY+PGRpdiBjbGFzcz1cImZvb1wiPkhlbGxvPC9kaXY+PC9kaXY+XG4gICAgICogY29uc3Qgd3JhcHBlciA9IHNoYWxsb3coPE15Q29tcG9uZW50IC8+KTtcbiAgICAgKiBleHBlY3Qod3JhcHBlci5jb250YWluc01hdGNoaW5nRWxlbWVudCg8ZGl2PkhlbGxvPC9kaXY+KSkudG8uZXF1YWwodHJ1ZSk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gbm9kZVxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdjb250YWluc01hdGNoaW5nRWxlbWVudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIGNvbnRhaW5zTWF0Y2hpbmdFbGVtZW50KG5vZGUpIHtcbiAgICAgICAgdmFyIGFkYXB0ZXIgPSAoMCwgX2dldEFkYXB0ZXIyWydkZWZhdWx0J10pKHRoaXNbT1BUSU9OU10pO1xuICAgICAgICB2YXIgcnN0Tm9kZSA9IGFkYXB0ZXIuZWxlbWVudFRvTm9kZShub2RlKTtcbiAgICAgICAgdmFyIHByZWRpY2F0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBmdW5jdGlvbiBwcmVkaWNhdGUob3RoZXIpIHtcbiAgICAgICAgICAgIHJldHVybiAoMCwgX1V0aWxzLm5vZGVNYXRjaGVzKShyc3ROb2RlLCBvdGhlciwgZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGEgPD0gYjtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBwcmVkaWNhdGU7XG4gICAgICAgIH0oKTtcbiAgICAgICAgcmV0dXJuIGZpbmRXaGVyZVVud3JhcHBlZCh0aGlzLCBwcmVkaWNhdGUpLmxlbmd0aCA+IDA7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb250YWluc01hdGNoaW5nRWxlbWVudDtcbiAgICB9KClcblxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgb3Igbm90IGFsbCB0aGUgZ2l2ZW4gcmVhY3QgZWxlbWVudHMgZXhpc3QgaW4gdGhlIHNoYWxsb3cgcmVuZGVyIHRyZWUuXG4gICAgICogTWF0Y2ggaXMgYmFzZWQgb24gdGhlIGV4cGVjdGVkIGVsZW1lbnQgYW5kIG5vdCBvbiB3cmFwcGVycyBlbGVtZW50LlxuICAgICAqIEl0IHdpbGwgZGV0ZXJtaW5lIGlmIG9uZSBvZiB0aGUgd3JhcHBlcnMgZWxlbWVudCBcImxvb2tzIGxpa2VcIiB0aGUgZXhwZWN0ZWRcbiAgICAgKiBlbGVtZW50IGJ5IGNoZWNraW5nIGlmIGFsbCBwcm9wcyBvZiB0aGUgZXhwZWN0ZWQgZWxlbWVudCBhcmUgcHJlc2VudFxuICAgICAqIG9uIHRoZSB3cmFwcGVycyBlbGVtZW50IGFuZCBlcXVhbHMgdG8gZWFjaCBvdGhlci5cbiAgICAgKlxuICAgICAqIEV4YW1wbGU6XG4gICAgICogYGBgXG4gICAgICogY29uc3Qgd3JhcHBlciA9IHNoYWxsb3coPE15Q29tcG9uZW50IC8+KTtcbiAgICAgKiBleHBlY3Qod3JhcHBlci5jb250YWluc0FsbE1hdGNoaW5nRWxlbWVudHMoW1xuICAgICAqICAgPGRpdj5IZWxsbzwvZGl2PixcbiAgICAgKiAgIDxkaXY+R29vZGJ5ZTwvZGl2PixcbiAgICAgKiBdKSkudG8uZXF1YWwodHJ1ZSk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0FycmF5PFJlYWN0RWxlbWVudD59IG5vZGVzXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2NvbnRhaW5zQWxsTWF0Y2hpbmdFbGVtZW50cycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIGNvbnRhaW5zQWxsTWF0Y2hpbmdFbGVtZW50cyhub2Rlcykge1xuICAgICAgICB2YXIgX3RoaXM2ID0gdGhpcztcblxuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkobm9kZXMpKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignbm9kZXMgc2hvdWxkIGJlIGFuIEFycmF5Jyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbm9kZXMuZXZlcnkoZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXM2LmNvbnRhaW5zTWF0Y2hpbmdFbGVtZW50KG5vZGUpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRhaW5zQWxsTWF0Y2hpbmdFbGVtZW50cztcbiAgICB9KClcblxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgb3Igbm90IG9uZSBvZiB0aGUgZ2l2ZW4gcmVhY3QgZWxlbWVudHMgZXhpc3RzIGluIHRoZSBzaGFsbG93IHJlbmRlciB0cmVlLlxuICAgICAqIE1hdGNoIGlzIGJhc2VkIG9uIHRoZSBleHBlY3RlZCBlbGVtZW50IGFuZCBub3Qgb24gd3JhcHBlcnMgZWxlbWVudC5cbiAgICAgKiBJdCB3aWxsIGRldGVybWluZSBpZiBvbmUgb2YgdGhlIHdyYXBwZXJzIGVsZW1lbnQgXCJsb29rcyBsaWtlXCIgdGhlIGV4cGVjdGVkXG4gICAgICogZWxlbWVudCBieSBjaGVja2luZyBpZiBhbGwgcHJvcHMgb2YgdGhlIGV4cGVjdGVkIGVsZW1lbnQgYXJlIHByZXNlbnRcbiAgICAgKiBvbiB0aGUgd3JhcHBlcnMgZWxlbWVudCBhbmQgZXF1YWxzIHRvIGVhY2ggb3RoZXIuXG4gICAgICpcbiAgICAgKiBFeGFtcGxlOlxuICAgICAqIGBgYFxuICAgICAqIGNvbnN0IHdyYXBwZXIgPSBzaGFsbG93KDxNeUNvbXBvbmVudCAvPik7XG4gICAgICogZXhwZWN0KHdyYXBwZXIuY29udGFpbnNBbnlNYXRjaGluZ0VsZW1lbnRzKFtcbiAgICAgKiAgIDxkaXY+SGVsbG88L2Rpdj4sXG4gICAgICogICA8ZGl2Pkdvb2RieWU8L2Rpdj4sXG4gICAgICogXSkpLnRvLmVxdWFsKHRydWUpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHBhcmFtIHtBcnJheTxSZWFjdEVsZW1lbnQ+fSBub2Rlc1xuICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdjb250YWluc0FueU1hdGNoaW5nRWxlbWVudHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBjb250YWluc0FueU1hdGNoaW5nRWxlbWVudHMobm9kZXMpIHtcbiAgICAgICAgdmFyIF90aGlzNyA9IHRoaXM7XG5cbiAgICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkobm9kZXMpICYmIG5vZGVzLnNvbWUoZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXM3LmNvbnRhaW5zTWF0Y2hpbmdFbGVtZW50KG5vZGUpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRhaW5zQW55TWF0Y2hpbmdFbGVtZW50cztcbiAgICB9KClcblxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgb3Igbm90IGEgZ2l2ZW4gcmVhY3QgZWxlbWVudCBleGlzdHMgaW4gdGhlIHJlbmRlciB0cmVlLlxuICAgICAqXG4gICAgICogRXhhbXBsZTpcbiAgICAgKiBgYGBcbiAgICAgKiBjb25zdCB3cmFwcGVyID0gc2hhbGxvdyg8TXlDb21wb25lbnQgLz4pO1xuICAgICAqIGV4cGVjdCh3cmFwcGVyLmNvbnRhaW5zKDxkaXYgY2xhc3NOYW1lPVwiZm9vIGJhclwiIC8+KSkudG8uZXF1YWwodHJ1ZSk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gbm9kZVxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdlcXVhbHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBlcXVhbHMobm9kZSkge1xuICAgICAgICB2YXIgX3RoaXM4ID0gdGhpcztcblxuICAgICAgICByZXR1cm4gdGhpcy5zaW5nbGUoJ2VxdWFscycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gKDAsIF9VdGlscy5ub2RlRXF1YWwpKF90aGlzOC5nZXROb2RlSW50ZXJuYWwoKSwgbm9kZSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZXF1YWxzO1xuICAgIH0oKVxuXG4gICAgLyoqXG4gICAgICogV2hldGhlciBvciBub3QgYSBnaXZlbiByZWFjdCBlbGVtZW50IG1hdGNoZXMgdGhlIHJlbmRlciB0cmVlLlxuICAgICAqIE1hdGNoIGlzIGJhc2VkIG9uIHRoZSBleHBlY3RlZCBlbGVtZW50IGFuZCBub3Qgb24gd3JhcHBlciByb290IG5vZGUuXG4gICAgICogSXQgd2lsbCBkZXRlcm1pbmUgaWYgdGhlIHdyYXBwZXIgcm9vdCBub2RlIFwibG9va3MgbGlrZVwiIHRoZSBleHBlY3RlZFxuICAgICAqIGVsZW1lbnQgYnkgY2hlY2tpbmcgaWYgYWxsIHByb3BzIG9mIHRoZSBleHBlY3RlZCBlbGVtZW50IGFyZSBwcmVzZW50XG4gICAgICogb24gdGhlIHdyYXBwZXIgcm9vdCBub2RlIGFuZCBlcXVhbHMgdG8gZWFjaCBvdGhlci5cbiAgICAgKlxuICAgICAqIEV4YW1wbGU6XG4gICAgICogYGBgXG4gICAgICogLy8gTXlDb21wb25lbnQgb3V0cHV0cyA8ZGl2IGNsYXNzPVwiZm9vXCI+SGVsbG88L2Rpdj5cbiAgICAgKiBjb25zdCB3cmFwcGVyID0gc2hhbGxvdyg8TXlDb21wb25lbnQgLz4pO1xuICAgICAqIGV4cGVjdCh3cmFwcGVyLm1hdGNoZXNFbGVtZW50KDxkaXY+SGVsbG88L2Rpdj4pKS50by5lcXVhbCh0cnVlKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UmVhY3RFbGVtZW50fSBub2RlXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ21hdGNoZXNFbGVtZW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gbWF0Y2hlc0VsZW1lbnQobm9kZSkge1xuICAgICAgICB2YXIgX3RoaXM5ID0gdGhpcztcblxuICAgICAgICByZXR1cm4gdGhpcy5zaW5nbGUoJ21hdGNoZXNFbGVtZW50JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBhZGFwdGVyID0gKDAsIF9nZXRBZGFwdGVyMlsnZGVmYXVsdCddKShfdGhpczlbT1BUSU9OU10pO1xuICAgICAgICAgIHZhciByc3ROb2RlID0gYWRhcHRlci5lbGVtZW50VG9Ob2RlKG5vZGUpO1xuICAgICAgICAgIHJldHVybiAoMCwgX1V0aWxzLm5vZGVNYXRjaGVzKShyc3ROb2RlLCBfdGhpczkuZ2V0Tm9kZUludGVybmFsKCksIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgICByZXR1cm4gYSA8PSBiO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG1hdGNoZXNFbGVtZW50O1xuICAgIH0oKVxuXG4gICAgLyoqXG4gICAgICogRmluZHMgZXZlcnkgbm9kZSBpbiB0aGUgcmVuZGVyIHRyZWUgb2YgdGhlIGN1cnJlbnQgd3JhcHBlciB0aGF0IG1hdGNoZXMgdGhlIHByb3ZpZGVkIHNlbGVjdG9yLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtFbnp5bWVTZWxlY3Rvcn0gc2VsZWN0b3JcbiAgICAgKiBAcmV0dXJucyB7U2hhbGxvd1dyYXBwZXJ9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2ZpbmQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBmaW5kKHNlbGVjdG9yKSB7XG4gICAgICAgIHJldHVybiB0aGlzLndyYXAoKDAsIF9zZWxlY3RvcnMucmVkdWNlVHJlZXNCeVNlbGVjdG9yKShzZWxlY3RvciwgdGhpcy5nZXROb2Rlc0ludGVybmFsKCkpKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZpbmQ7XG4gICAgfSgpXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IGN1cnJlbnQgbm9kZSBtYXRjaGVzIGEgcHJvdmlkZWQgc2VsZWN0b3IuXG4gICAgICpcbiAgICAgKiBOT1RFOiBjYW4gb25seSBiZSBjYWxsZWQgb24gYSB3cmFwcGVyIG9mIGEgc2luZ2xlIG5vZGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0VuenltZVNlbGVjdG9yfSBzZWxlY3RvclxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdpcycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIGlzKHNlbGVjdG9yKSB7XG4gICAgICAgIHZhciBwcmVkaWNhdGUgPSAoMCwgX3NlbGVjdG9ycy5idWlsZFByZWRpY2F0ZSkoc2VsZWN0b3IpO1xuICAgICAgICByZXR1cm4gdGhpcy5zaW5nbGUoJ2lzJywgZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgICByZXR1cm4gcHJlZGljYXRlKG4pO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGlzO1xuICAgIH0oKVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBjb21wb25lbnQgcmVuZGVyZWQgbm90aGluZywgaS5lLiwgbnVsbCBvciBmYWxzZS5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdpc0VtcHR5UmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gaXNFbXB0eVJlbmRlcigpIHtcbiAgICAgICAgdmFyIG5vZGVzID0gdGhpcy5nZXROb2Rlc0ludGVybmFsKCk7XG5cbiAgICAgICAgcmV0dXJuIG5vZGVzLmV2ZXJ5KGZ1bmN0aW9uIChuKSB7XG4gICAgICAgICAgcmV0dXJuICgwLCBfVXRpbHMuaXNFbXB0eVZhbHVlKShuKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBpc0VtcHR5UmVuZGVyO1xuICAgIH0oKVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIG5ldyB3cmFwcGVyIGluc3RhbmNlIHdpdGggb25seSB0aGUgbm9kZXMgb2YgdGhlIGN1cnJlbnQgd3JhcHBlciBpbnN0YW5jZSB0aGF0IG1hdGNoXG4gICAgICogdGhlIHByb3ZpZGVkIHByZWRpY2F0ZSBmdW5jdGlvbi4gVGhlIHByZWRpY2F0ZSBzaG91bGQgcmVjZWl2ZSBhIHdyYXBwZWQgbm9kZSBhcyBpdHMgZmlyc3RcbiAgICAgKiBhcmd1bWVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZVxuICAgICAqIEByZXR1cm5zIHtTaGFsbG93V3JhcHBlcn1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZmlsdGVyV2hlcmUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBmaWx0ZXJXaGVyZShwcmVkaWNhdGUpIHtcbiAgICAgICAgdmFyIF90aGlzMTAgPSB0aGlzO1xuXG4gICAgICAgIHJldHVybiBmaWx0ZXJXaGVyZVVud3JhcHBlZCh0aGlzLCBmdW5jdGlvbiAobikge1xuICAgICAgICAgIHJldHVybiBwcmVkaWNhdGUoX3RoaXMxMC53cmFwKG4pKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmaWx0ZXJXaGVyZTtcbiAgICB9KClcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgd3JhcHBlciBpbnN0YW5jZSB3aXRoIG9ubHkgdGhlIG5vZGVzIG9mIHRoZSBjdXJyZW50IHdyYXBwZXIgaW5zdGFuY2UgdGhhdCBtYXRjaFxuICAgICAqIHRoZSBwcm92aWRlZCBzZWxlY3Rvci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7RW56eW1lU2VsZWN0b3J9IHNlbGVjdG9yXG4gICAgICogQHJldHVybnMge1NoYWxsb3dXcmFwcGVyfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdmaWx0ZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBmaWx0ZXIoc2VsZWN0b3IpIHtcbiAgICAgICAgdmFyIHByZWRpY2F0ZSA9ICgwLCBfc2VsZWN0b3JzLmJ1aWxkUHJlZGljYXRlKShzZWxlY3Rvcik7XG4gICAgICAgIHJldHVybiBmaWx0ZXJXaGVyZVVud3JhcHBlZCh0aGlzLCBwcmVkaWNhdGUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZmlsdGVyO1xuICAgIH0oKVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIG5ldyB3cmFwcGVyIGluc3RhbmNlIHdpdGggb25seSB0aGUgbm9kZXMgb2YgdGhlIGN1cnJlbnQgd3JhcHBlciB0aGF0IGRpZCBub3QgbWF0Y2hcbiAgICAgKiB0aGUgcHJvdmlkZWQgc2VsZWN0b3IuIEVzc2VudGlhbGx5IHRoZSBpbnZlcnNlIG9mIGBmaWx0ZXJgLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtFbnp5bWVTZWxlY3Rvcn0gc2VsZWN0b3JcbiAgICAgKiBAcmV0dXJucyB7U2hhbGxvd1dyYXBwZXJ9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ25vdCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIG5vdChzZWxlY3Rvcikge1xuICAgICAgICB2YXIgcHJlZGljYXRlID0gKDAsIF9zZWxlY3RvcnMuYnVpbGRQcmVkaWNhdGUpKHNlbGVjdG9yKTtcbiAgICAgICAgcmV0dXJuIGZpbHRlcldoZXJlVW53cmFwcGVkKHRoaXMsIGZ1bmN0aW9uIChuKSB7XG4gICAgICAgICAgcmV0dXJuICFwcmVkaWNhdGUobik7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbm90O1xuICAgIH0oKVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIHN0cmluZyBvZiB0aGUgcmVuZGVyZWQgdGV4dCBvZiB0aGUgY3VycmVudCByZW5kZXIgdHJlZS4gIFRoaXMgZnVuY3Rpb24gc2hvdWxkIGJlXG4gICAgICogbG9va2VkIGF0IHdpdGggc2tlcHRpY2lzbSBpZiBiZWluZyB1c2VkIHRvIHRlc3Qgd2hhdCB0aGUgYWN0dWFsIEhUTUwgb3V0cHV0IG9mIHRoZSBjb21wb25lbnRcbiAgICAgKiB3aWxsIGJlLiBJZiB0aGF0IGlzIHdoYXQgeW91IHdvdWxkIGxpa2UgdG8gdGVzdCwgdXNlIGVuenltZSdzIGByZW5kZXJgIGZ1bmN0aW9uIGluc3RlYWQuXG4gICAgICpcbiAgICAgKiBOT1RFOiBjYW4gb25seSBiZSBjYWxsZWQgb24gYSB3cmFwcGVyIG9mIGEgc2luZ2xlIG5vZGUuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICd0ZXh0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gdGV4dCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2luZ2xlKCd0ZXh0JywgX1JTVFRyYXZlcnNhbC5nZXRUZXh0RnJvbU5vZGUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGV4dDtcbiAgICB9KClcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIEhUTUwgb2YgdGhlIG5vZGUuXG4gICAgICpcbiAgICAgKiBOT1RFOiBjYW4gb25seSBiZSBjYWxsZWQgb24gYSB3cmFwcGVyIG9mIGEgc2luZ2xlIG5vZGUuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdodG1sJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gaHRtbCgpIHtcbiAgICAgICAgdmFyIF90aGlzMTEgPSB0aGlzO1xuXG4gICAgICAgIHJldHVybiB0aGlzLnNpbmdsZSgnaHRtbCcsIGZ1bmN0aW9uIChuKSB7XG4gICAgICAgICAgaWYgKF90aGlzMTEudHlwZSgpID09PSBudWxsKSByZXR1cm4gbnVsbDtcbiAgICAgICAgICB2YXIgYWRhcHRlciA9ICgwLCBfZ2V0QWRhcHRlcjJbJ2RlZmF1bHQnXSkoX3RoaXMxMVtPUFRJT05TXSk7XG4gICAgICAgICAgdmFyIHJlbmRlcmVyID0gYWRhcHRlci5jcmVhdGVSZW5kZXJlcigoMCwgX29iamVjdDJbJ2RlZmF1bHQnXSkoe30sIF90aGlzMTFbT1BUSU9OU10sIHsgbW9kZTogJ3N0cmluZycgfSkpO1xuICAgICAgICAgIHJldHVybiByZW5kZXJlci5yZW5kZXIoYWRhcHRlci5ub2RlVG9FbGVtZW50KG4pKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBodG1sO1xuICAgIH0oKVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgY3VycmVudCBub2RlIHJlbmRlcmVkIHRvIEhUTUwgYW5kIHdyYXBwZWQgaW4gYSBDaGVlcmlvV3JhcHBlci5cbiAgICAgKlxuICAgICAqIE5PVEU6IGNhbiBvbmx5IGJlIGNhbGxlZCBvbiBhIHdyYXBwZXIgb2YgYSBzaW5nbGUgbm9kZS5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtDaGVlcmlvV3JhcHBlcn1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAncmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICB2YXIgaHRtbCA9IHRoaXMuaHRtbCgpO1xuICAgICAgICByZXR1cm4gKDAsIF9VdGlscy5sb2FkQ2hlZXJpb1Jvb3QpKGh0bWwpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVuZGVyO1xuICAgIH0oKVxuXG4gICAgLyoqXG4gICAgICogVXNlZCB0byBzaW11bGF0ZSBldmVudHMuIFBhc3MgYW4gZXZlbnRuYW1lIGFuZCAob3B0aW9uYWxseSkgZXZlbnQgYXJndW1lbnRzLiBUaGlzIG1ldGhvZCBvZlxuICAgICAqIHRlc3RpbmcgZXZlbnRzIHNob3VsZCBiZSBtZXQgd2l0aCBzb21lIHNrZXB0aWNpc20uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcmdzXG4gICAgICogQHJldHVybnMge1NoYWxsb3dXcmFwcGVyfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdzaW11bGF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIHNpbXVsYXRlKGV2ZW50KSB7XG4gICAgICAgIHZhciBfdGhpczEyID0gdGhpcztcblxuICAgICAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuMiA+IDEgPyBfbGVuMiAtIDEgOiAwKSwgX2tleTIgPSAxOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICAgICAgYXJnc1tfa2V5MiAtIDFdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLnNpbmdsZSgnc2ltdWxhdGUnLCBmdW5jdGlvbiAobikge1xuICAgICAgICAgIHZhciBfUkVOREVSRVI7XG5cbiAgICAgICAgICAoX1JFTkRFUkVSID0gX3RoaXMxMltSRU5ERVJFUl0pLnNpbXVsYXRlRXZlbnQuYXBwbHkoX1JFTkRFUkVSLCBbbiwgZXZlbnRdLmNvbmNhdChhcmdzKSk7XG4gICAgICAgICAgX3RoaXMxMltST09UXS51cGRhdGUoKTtcbiAgICAgICAgICByZXR1cm4gX3RoaXMxMjtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzaW11bGF0ZTtcbiAgICB9KClcblxuICAgIC8qKlxuICAgICAqIFVzZWQgdG8gc2ltdWxhdGUgdGhyb3dpbmcgYSByZW5kZXJpbmcgZXJyb3IuIFBhc3MgYW4gZXJyb3IgdG8gdGhyb3cuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZXJyb3JcbiAgICAgKiBAcmV0dXJucyB7U2hhbGxvd1dyYXBwZXJ9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3NpbXVsYXRlRXJyb3InLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBzaW11bGF0ZUVycm9yKGVycm9yKSB7XG4gICAgICAgIHZhciBfdGhpczEzID0gdGhpcztcblxuICAgICAgICAvLyBpbiBzaGFsbG93LCB0aGUgXCJyb290XCIgaXMgdGhlIFwicmVuZGVyZWRcIiB0aGluZy5cblxuICAgICAgICByZXR1cm4gdGhpcy5zaW5nbGUoJ3NpbXVsYXRlRXJyb3InLCBmdW5jdGlvbiAodGhpc05vZGUpIHtcbiAgICAgICAgICBpZiAodGhpc05vZGUubm9kZVR5cGUgPT09ICdob3N0Jykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignU2hhbGxvd1dyYXBwZXI6OnNpbXVsYXRlRXJyb3IoKSBjYW4gb25seSBiZSBjYWxsZWQgb24gY3VzdG9tIGNvbXBvbmVudHMnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgcmVuZGVyZXIgPSBfdGhpczEzW1JFTkRFUkVSXTtcbiAgICAgICAgICBpZiAodHlwZW9mIHJlbmRlcmVyLnNpbXVsYXRlRXJyb3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3lvdXIgYWRhcHRlciBkb2VzIG5vdCBzdXBwb3J0IGBzaW11bGF0ZUVycm9yYC4gVHJ5IHVwZ3JhZGluZyBpdCEnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgcm9vdE5vZGUgPSBnZXRSb290Tm9kZUludGVybmFsKF90aGlzMTMpO1xuICAgICAgICAgIHZhciBub2RlSGllcmFyY2h5ID0gW3RoaXNOb2RlXS5jb25jYXQobm9kZVBhcmVudHMoX3RoaXMxMywgdGhpc05vZGUpKTtcbiAgICAgICAgICByZW5kZXJlci5zaW11bGF0ZUVycm9yKG5vZGVIaWVyYXJjaHksIHJvb3ROb2RlLCBlcnJvcik7XG5cbiAgICAgICAgICByZXR1cm4gX3RoaXMxMztcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzaW11bGF0ZUVycm9yO1xuICAgIH0oKVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgcHJvcHMgaGFzaCBmb3IgdGhlIGN1cnJlbnQgbm9kZSBvZiB0aGUgd3JhcHBlci5cbiAgICAgKlxuICAgICAqIE5PVEU6IGNhbiBvbmx5IGJlIGNhbGxlZCBvbiBhIHdyYXBwZXIgb2YgYSBzaW5nbGUgbm9kZS5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3Byb3BzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gcHJvcHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNpbmdsZSgncHJvcHMnLCBfUlNUVHJhdmVyc2FsLnByb3BzT2ZOb2RlKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByb3BzO1xuICAgIH0oKVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgc3RhdGUgaGFzaCBmb3IgdGhlIHJvb3Qgbm9kZSBvZiB0aGUgd3JhcHBlci4gT3B0aW9uYWxseSBwYXNzIGluIGEgcHJvcCBuYW1lIGFuZCBpdFxuICAgICAqIHdpbGwgcmV0dXJuIGp1c3QgdGhhdCB2YWx1ZS5cbiAgICAgKlxuICAgICAqIE5PVEU6IGNhbiBvbmx5IGJlIGNhbGxlZCBvbiBhIHdyYXBwZXIgb2YgYSBzaW5nbGUgbm9kZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIChvcHRpb25hbClcbiAgICAgKiBAcmV0dXJucyB7Kn1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnc3RhdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBzdGF0ZShuYW1lKSB7XG4gICAgICAgIHZhciBfdGhpczE0ID0gdGhpcztcblxuICAgICAgICBpZiAodGhpc1tST09UXSAhPT0gdGhpcykge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignU2hhbGxvd1dyYXBwZXI6OnN0YXRlKCkgY2FuIG9ubHkgYmUgY2FsbGVkIG9uIHRoZSByb290Jyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaW5zdGFuY2UoKSA9PT0gbnVsbCB8fCB0aGlzW1JFTkRFUkVSXS5nZXROb2RlKCkubm9kZVR5cGUgIT09ICdjbGFzcycpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NoYWxsb3dXcmFwcGVyOjpzdGF0ZSgpIGNhbiBvbmx5IGJlIGNhbGxlZCBvbiBjbGFzcyBjb21wb25lbnRzJyk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIF9zdGF0ZSA9IHRoaXMuc2luZ2xlKCdzdGF0ZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMxNC5pbnN0YW5jZSgpLnN0YXRlO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHR5cGVvZiBuYW1lICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIGlmIChfc3RhdGUgPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignU2hhbGxvd1dyYXBwZXI6OnN0YXRlKFwiJyArIFN0cmluZyhuYW1lKSArICdcIikgcmVxdWlyZXMgdGhhdCBgc3RhdGVgIG5vdCBiZSBgbnVsbGAgb3IgYHVuZGVmaW5lZGAnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIF9zdGF0ZVtuYW1lXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gX3N0YXRlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc3RhdGU7XG4gICAgfSgpXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBjb250ZXh0IGhhc2ggZm9yIHRoZSByb290IG5vZGUgb2YgdGhlIHdyYXBwZXIuXG4gICAgICogT3B0aW9uYWxseSBwYXNzIGluIGEgcHJvcCBuYW1lIGFuZCBpdCB3aWxsIHJldHVybiBqdXN0IHRoYXQgdmFsdWUuXG4gICAgICpcbiAgICAgKiBOT1RFOiBjYW4gb25seSBiZSBjYWxsZWQgb24gYSB3cmFwcGVyIG9mIGEgc2luZ2xlIG5vZGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gbmFtZSAob3B0aW9uYWwpXG4gICAgICogQHJldHVybnMgeyp9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2NvbnRleHQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBjb250ZXh0KG5hbWUpIHtcbiAgICAgICAgdmFyIF90aGlzMTUgPSB0aGlzO1xuXG4gICAgICAgIGlmICh0aGlzW1JPT1RdICE9PSB0aGlzKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTaGFsbG93V3JhcHBlcjo6Y29udGV4dCgpIGNhbiBvbmx5IGJlIGNhbGxlZCBvbiB0aGUgcm9vdCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpc1tPUFRJT05TXS5jb250ZXh0KSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTaGFsbG93V3JhcHBlcjo6Y29udGV4dCgpIGNhbiBvbmx5IGJlIGNhbGxlZCBvbiBhIHdyYXBwZXIgdGhhdCB3YXMgb3JpZ2luYWxseSBwYXNzZWQgYSBjb250ZXh0IG9wdGlvbicpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmluc3RhbmNlKCkgPT09IG51bGwpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NoYWxsb3dXcmFwcGVyOjpjb250ZXh0KCkgY2FuIG9ubHkgYmUgY2FsbGVkIG9uIHdyYXBwZWQgbm9kZXMgdGhhdCBoYXZlIGEgbm9uLW51bGwgaW5zdGFuY2UnKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgX2NvbnRleHQgPSB0aGlzLnNpbmdsZSgnY29udGV4dCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMxNS5pbnN0YW5jZSgpLmNvbnRleHQ7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAobmFtZSkge1xuICAgICAgICAgIHJldHVybiBfY29udGV4dFtuYW1lXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gX2NvbnRleHQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb250ZXh0O1xuICAgIH0oKVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIG5ldyB3cmFwcGVyIHdpdGggYWxsIG9mIHRoZSBjaGlsZHJlbiBvZiB0aGUgY3VycmVudCB3cmFwcGVyLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtFbnp5bWVTZWxlY3Rvcn0gW3NlbGVjdG9yXVxuICAgICAqIEByZXR1cm5zIHtTaGFsbG93V3JhcHBlcn1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnY2hpbGRyZW4nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBjaGlsZHJlbihzZWxlY3Rvcikge1xuICAgICAgICB2YXIgYWxsQ2hpbGRyZW4gPSB0aGlzLmZsYXRNYXAoZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgICByZXR1cm4gKDAsIF9SU1RUcmF2ZXJzYWwuY2hpbGRyZW5PZk5vZGUpKG4uZ2V0Tm9kZUludGVybmFsKCkpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHNlbGVjdG9yID8gYWxsQ2hpbGRyZW4uZmlsdGVyKHNlbGVjdG9yKSA6IGFsbENoaWxkcmVuO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY2hpbGRyZW47XG4gICAgfSgpXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbmV3IHdyYXBwZXIgd2l0aCBhIHNwZWNpZmljIGNoaWxkXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2luZGV4XVxuICAgICAqIEByZXR1cm5zIHtTaGFsbG93V3JhcHBlcn1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnY2hpbGRBdCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIGNoaWxkQXQoaW5kZXgpIHtcbiAgICAgICAgdmFyIF90aGlzMTYgPSB0aGlzO1xuXG4gICAgICAgIHJldHVybiB0aGlzLnNpbmdsZSgnY2hpbGRBdCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMxNi5jaGlsZHJlbigpLmF0KGluZGV4KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjaGlsZEF0O1xuICAgIH0oKVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIHdyYXBwZXIgYXJvdW5kIGFsbCBvZiB0aGUgcGFyZW50cy9hbmNlc3RvcnMgb2YgdGhlIHdyYXBwZXIuIERvZXMgbm90IGluY2x1ZGUgdGhlIG5vZGVcbiAgICAgKiBpbiB0aGUgY3VycmVudCB3cmFwcGVyLlxuICAgICAqXG4gICAgICogTk9URTogY2FuIG9ubHkgYmUgY2FsbGVkIG9uIGEgd3JhcHBlciBvZiBhIHNpbmdsZSBub2RlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtFbnp5bWVTZWxlY3Rvcn0gW3NlbGVjdG9yXVxuICAgICAqIEByZXR1cm5zIHtTaGFsbG93V3JhcHBlcn1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAncGFyZW50cycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIHBhcmVudHMoc2VsZWN0b3IpIHtcbiAgICAgICAgdmFyIF90aGlzMTcgPSB0aGlzO1xuXG4gICAgICAgIHJldHVybiB0aGlzLnNpbmdsZSgncGFyZW50cycsIGZ1bmN0aW9uIChuKSB7XG4gICAgICAgICAgdmFyIGFsbFBhcmVudHMgPSBfdGhpczE3LndyYXAobm9kZVBhcmVudHMoX3RoaXMxNywgbikpO1xuICAgICAgICAgIHJldHVybiBzZWxlY3RvciA/IGFsbFBhcmVudHMuZmlsdGVyKHNlbGVjdG9yKSA6IGFsbFBhcmVudHM7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcGFyZW50cztcbiAgICB9KClcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSB3cmFwcGVyIGFyb3VuZCB0aGUgaW1tZWRpYXRlIHBhcmVudCBvZiB0aGUgY3VycmVudCBub2RlLlxuICAgICAqXG4gICAgICogQHJldHVybnMge1NoYWxsb3dXcmFwcGVyfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdwYXJlbnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBwYXJlbnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZsYXRNYXAoZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgICByZXR1cm4gW24ucGFyZW50cygpLmdldCgwKV07XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcGFyZW50O1xuICAgIH0oKVxuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0VuenltZVNlbGVjdG9yfSBzZWxlY3RvclxuICAgICAqIEByZXR1cm5zIHtTaGFsbG93V3JhcHBlcn1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnY2xvc2VzdCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIGNsb3Nlc3Qoc2VsZWN0b3IpIHtcbiAgICAgICAgaWYgKHRoaXMuaXMoc2VsZWN0b3IpKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG1hdGNoaW5nQW5jZXN0b3JzID0gdGhpcy5wYXJlbnRzKCkuZmlsdGVyKHNlbGVjdG9yKTtcbiAgICAgICAgcmV0dXJuIG1hdGNoaW5nQW5jZXN0b3JzLmxlbmd0aCA+IDAgPyBtYXRjaGluZ0FuY2VzdG9ycy5maXJzdCgpIDogdGhpcy5maW5kV2hlcmUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjbG9zZXN0O1xuICAgIH0oKVxuXG4gICAgLyoqXG4gICAgICogU2hhbGxvdyByZW5kZXJzIHRoZSBjdXJyZW50IG5vZGUgYW5kIHJldHVybnMgYSBzaGFsbG93IHdyYXBwZXIgYXJvdW5kIGl0LlxuICAgICAqXG4gICAgICogTk9URTogY2FuIG9ubHkgYmUgY2FsbGVkIG9uIHdyYXBwZXIgb2YgYSBzaW5nbGUgbm9kZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gICAgICogQHJldHVybnMge1NoYWxsb3dXcmFwcGVyfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdzaGFsbG93JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gc2hhbGxvdygpIHtcbiAgICAgICAgdmFyIF90aGlzMTggPSB0aGlzO1xuXG4gICAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICAgICAgICByZXR1cm4gdGhpcy5zaW5nbGUoJ3NoYWxsb3cnLCBmdW5jdGlvbiAobikge1xuICAgICAgICAgIHZhciBjaGlsZE9wdGlvbnMgPSBtYWtlSW5oZXJpdGVkQ2hpbGRPcHRpb25zKF90aGlzMTgsIG9wdGlvbnMpO1xuICAgICAgICAgIHJldHVybiBfdGhpczE4LndyYXAoKDAsIF9nZXRBZGFwdGVyMlsnZGVmYXVsdCddKShfdGhpczE4W09QVElPTlNdKS5ub2RlVG9FbGVtZW50KG4pLCBudWxsLCBjaGlsZE9wdGlvbnMpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNoYWxsb3c7XG4gICAgfSgpXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSB2YWx1ZSBvZiBwcm9wIHdpdGggdGhlIGdpdmVuIG5hbWUgb2YgdGhlIGN1cnJlbnQgbm9kZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBwcm9wTmFtZVxuICAgICAqIEByZXR1cm5zIHsqfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdwcm9wJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gcHJvcChwcm9wTmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcygpW3Byb3BOYW1lXTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByb3A7XG4gICAgfSgpXG5cbiAgICAvKipcbiAgICAgKiBVc2VkIHRvIGludm9rZSBhIGZ1bmN0aW9uIHByb3AuXG4gICAgICogV2lsbCBpbnZva2UgYW4gZnVuY3Rpb24gcHJvcCBhbmQgcmV0dXJuIGl0cyB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wTmFtZVxuICAgICAqIEByZXR1cm5zIHtBbnl9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2ludm9rZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIGludm9rZShwcm9wTmFtZSkge1xuICAgICAgICB2YXIgX3RoaXMxOSA9IHRoaXM7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuc2luZ2xlKCdpbnZva2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIGhhbmRsZXIgPSBfdGhpczE5LnByb3AocHJvcE5hbWUpO1xuICAgICAgICAgIGlmICh0eXBlb2YgaGFuZGxlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignU2hhbGxvd1dyYXBwZXI6Omludm9rZSgpIHJlcXVpcmVzIHRoZSBuYW1lIG9mIGEgcHJvcCB3aG9zZSB2YWx1ZSBpcyBhIGZ1bmN0aW9uJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgcmVzcG9uc2UgPSBoYW5kbGVyLmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIF90aGlzMTlbUk9PVF0udXBkYXRlKCk7XG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBpbnZva2U7XG4gICAgfSgpXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgd3JhcHBlciBvZiB0aGUgbm9kZSByZW5kZXJlZCBieSB0aGUgcHJvdmlkZWQgcmVuZGVyIHByb3AuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcHJvcE5hbWVcbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlclByb3AnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiByZW5kZXJQcm9wKHByb3BOYW1lKSB7XG4gICAgICAgIHZhciBfdGhpczIwID0gdGhpcztcblxuICAgICAgICB2YXIgYWRhcHRlciA9ICgwLCBfZ2V0QWRhcHRlcjJbJ2RlZmF1bHQnXSkodGhpc1tPUFRJT05TXSk7XG4gICAgICAgIGlmICh0eXBlb2YgYWRhcHRlci53cmFwICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3lvdXIgYWRhcHRlciBkb2VzIG5vdCBzdXBwb3J0IGB3cmFwYC4gVHJ5IHVwZ3JhZGluZyBpdCEnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLnNpbmdsZSgncmVuZGVyUHJvcCcsIGZ1bmN0aW9uIChuKSB7XG4gICAgICAgICAgaWYgKG4ubm9kZVR5cGUgPT09ICdob3N0Jykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignU2hhbGxvd1dyYXBwZXI6OnJlbmRlclByb3AoKSBjYW4gb25seSBiZSBjYWxsZWQgb24gY3VzdG9tIGNvbXBvbmVudHMnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHR5cGVvZiBwcm9wTmFtZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1NoYWxsb3dXcmFwcGVyOjpyZW5kZXJQcm9wKCk6IGBwcm9wTmFtZWAgbXVzdCBiZSBhIHN0cmluZycpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgcHJvcHMgPSBfdGhpczIwLnByb3BzKCk7XG4gICAgICAgICAgaWYgKCEoMCwgX2hhczJbJ2RlZmF1bHQnXSkocHJvcHMsIHByb3BOYW1lKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTaGFsbG93V3JhcHBlcjo6cmVuZGVyUHJvcCgpOiBubyBwcm9wIGNhbGxlZCBcXHUyMDFDJyArIFN0cmluZyhwcm9wTmFtZSkgKyAnXFx1MjAxQyBmb3VuZCcpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgICAgICAgIGlmICh0eXBlb2YgcHJvcFZhbHVlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdTaGFsbG93V3JhcHBlcjo6cmVuZGVyUHJvcCgpOiBleHBlY3RlZCBwcm9wIFxcdTIwMUMnICsgU3RyaW5nKHByb3BOYW1lKSArICdcXHUyMDFDIHRvIGNvbnRhaW4gYSBmdW5jdGlvbiwgYnV0IGl0IGhvbGRzIFxcdTIwMUMnICsgKHR5cGVvZiBwcm9wVmFsdWUgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHByb3BWYWx1ZSkpICsgJ1xcdTIwMUMnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSBwcm9wVmFsdWUuYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgdmFyIHdyYXBwZWQgPSBhZGFwdGVyLndyYXAoZWxlbWVudCk7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMyMC53cmFwKHdyYXBwZWQsIG51bGwsIF90aGlzMjBbT1BUSU9OU10pO1xuICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVuZGVyUHJvcDtcbiAgICB9KClcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGtleSBhc3NpZ25lZCB0byB0aGUgY3VycmVudCBub2RlLlxuICAgICAqXG4gICAgICogQHJldHVybnMge1N0cmluZ31cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAna2V5JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24ga2V5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zaW5nbGUoJ2tleScsIGZ1bmN0aW9uIChuKSB7XG4gICAgICAgICAgcmV0dXJuIG4ua2V5ID09PSB1bmRlZmluZWQgPyBudWxsIDogbi5rZXk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ga2V5O1xuICAgIH0oKVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgdHlwZSBvZiB0aGUgY3VycmVudCBub2RlIG9mIHRoaXMgd3JhcHBlci4gSWYgaXQncyBhIGNvbXBvc2l0ZSBjb21wb25lbnQsIHRoaXMgd2lsbFxuICAgICAqIGJlIHRoZSBjb21wb25lbnQgY29uc3RydWN0b3IuIElmIGl0J3MgYSBuYXRpdmUgRE9NIG5vZGUsIGl0IHdpbGwgYmUgYSBzdHJpbmcgb2YgdGhlIHRhZyBuYW1lLlxuICAgICAqIElmIGl0J3MgbnVsbCwgaXQgd2lsbCBiZSBudWxsLlxuICAgICAqXG4gICAgICogQHJldHVybnMge1N0cmluZ3xGdW5jdGlvbnxudWxsfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICd0eXBlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gdHlwZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2luZ2xlKCd0eXBlJywgZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgICByZXR1cm4gKDAsIF9VdGlscy50eXBlT2ZOb2RlKShuKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0eXBlO1xuICAgIH0oKVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbmFtZSBvZiB0aGUgY3VycmVudCBub2RlIG9mIHRoaXMgd3JhcHBlci5cbiAgICAgKlxuICAgICAqIEluIG9yZGVyIG9mIHByZWNlZGVuY2UgPT4gdHlwZS5kaXNwbGF5TmFtZSAtPiB0eXBlLm5hbWUgLT4gdHlwZS5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtTdHJpbmd9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ25hbWUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBuYW1lKCkge1xuICAgICAgICB2YXIgYWRhcHRlciA9ICgwLCBfZ2V0QWRhcHRlcjJbJ2RlZmF1bHQnXSkodGhpc1tPUFRJT05TXSk7XG4gICAgICAgIHJldHVybiB0aGlzLnNpbmdsZSgnbmFtZScsIGZ1bmN0aW9uIChuKSB7XG4gICAgICAgICAgcmV0dXJuIGFkYXB0ZXIuZGlzcGxheU5hbWVPZk5vZGUgPyBhZGFwdGVyLmRpc3BsYXlOYW1lT2ZOb2RlKG4pIDogKDAsIF9VdGlscy5kaXNwbGF5TmFtZU9mTm9kZSkobik7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmFtZTtcbiAgICB9KClcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgd2hldGhlciBvciBub3QgdGhlIGN1cnJlbnQgbm9kZSBoYXMgdGhlIGdpdmVuIGNsYXNzIG5hbWUgb3Igbm90LlxuICAgICAqXG4gICAgICogTk9URTogY2FuIG9ubHkgYmUgY2FsbGVkIG9uIGEgd3JhcHBlciBvZiBhIHNpbmdsZSBub2RlLlxuICAgICAqXG4gICAgICogQHBhcmFtIGNsYXNzTmFtZVxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdoYXNDbGFzcycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIGhhc0NsYXNzKGNsYXNzTmFtZSkge1xuICAgICAgICBpZiAodHlwZW9mIGNsYXNzTmFtZSA9PT0gJ3N0cmluZycgJiYgY2xhc3NOYW1lLmluZGV4T2YoJy4nKSAhPT0gLTEpIHtcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICAgIGNvbnNvbGUud2FybignSXQgbG9va3MgbGlrZSB5b3VcXCdyZSBjYWxsaW5nIGBTaGFsbG93V3JhcHBlcjo6aGFzQ2xhc3MoKWAgd2l0aCBhIENTUyBzZWxlY3Rvci4gaGFzQ2xhc3MoKSBleHBlY3RzIGEgY2xhc3MgbmFtZSwgbm90IGEgQ1NTIHNlbGVjdG9yLicpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnNpbmdsZSgnaGFzQ2xhc3MnLCBmdW5jdGlvbiAobikge1xuICAgICAgICAgIHJldHVybiAoMCwgX1JTVFRyYXZlcnNhbC5oYXNDbGFzc05hbWUpKG4sIGNsYXNzTmFtZSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gaGFzQ2xhc3M7XG4gICAgfSgpXG5cbiAgICAvKipcbiAgICAgKiBJdGVyYXRlcyB0aHJvdWdoIGVhY2ggbm9kZSBvZiB0aGUgY3VycmVudCB3cmFwcGVyIGFuZCBleGVjdXRlcyB0aGUgcHJvdmlkZWQgZnVuY3Rpb24gd2l0aCBhXG4gICAgICogd3JhcHBlciBhcm91bmQgdGhlIGNvcnJlc3BvbmRpbmcgbm9kZSBwYXNzZWQgaW4gYXMgdGhlIGZpcnN0IGFyZ3VtZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAgICAgKiBAcmV0dXJucyB7U2hhbGxvd1dyYXBwZXJ9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2ZvckVhY2gnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBmb3JFYWNoKGZuKSB7XG4gICAgICAgIHZhciBfdGhpczIxID0gdGhpcztcblxuICAgICAgICB0aGlzLmdldE5vZGVzSW50ZXJuYWwoKS5mb3JFYWNoKGZ1bmN0aW9uIChuLCBpKSB7XG4gICAgICAgICAgcmV0dXJuIGZuLmNhbGwoX3RoaXMyMSwgX3RoaXMyMS53cmFwKG4pLCBpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZm9yRWFjaDtcbiAgICB9KClcblxuICAgIC8qKlxuICAgICAqIE1hcHMgdGhlIGN1cnJlbnQgYXJyYXkgb2Ygbm9kZXMgdG8gYW5vdGhlciBhcnJheS4gRWFjaCBub2RlIGlzIHBhc3NlZCBpbiBhcyBhIGBTaGFsbG93V3JhcHBlcmBcbiAgICAgKiB0byB0aGUgbWFwIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ21hcCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIG1hcChmbikge1xuICAgICAgICB2YXIgX3RoaXMyMiA9IHRoaXM7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Tm9kZXNJbnRlcm5hbCgpLm1hcChmdW5jdGlvbiAobiwgaSkge1xuICAgICAgICAgIHJldHVybiBmbi5jYWxsKF90aGlzMjIsIF90aGlzMjIud3JhcChuKSwgaSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbWFwO1xuICAgIH0oKVxuXG4gICAgLyoqXG4gICAgICogUmVkdWNlcyB0aGUgY3VycmVudCBhcnJheSBvZiBub2RlcyB0byBhIHZhbHVlLiBFYWNoIG5vZGUgaXMgcGFzc2VkIGluIGFzIGEgYFNoYWxsb3dXcmFwcGVyYFxuICAgICAqIHRvIHRoZSByZWR1Y2VyIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gLSB0aGUgcmVkdWNlciBmdW5jdGlvblxuICAgICAqIEBwYXJhbSB7Kn0gaW5pdGlhbFZhbHVlIC0gdGhlIGluaXRpYWwgdmFsdWVcbiAgICAgKiBAcmV0dXJucyB7Kn1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAncmVkdWNlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gcmVkdWNlKGZuKSB7XG4gICAgICAgIHZhciBfdGhpczIzID0gdGhpcztcblxuICAgICAgICB2YXIgaW5pdGlhbFZhbHVlID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Tm9kZXNJbnRlcm5hbCgpLnJlZHVjZShmdW5jdGlvbiAoYWNjdW0sIG4sIGkpIHtcbiAgICAgICAgICAgIHJldHVybiBmbi5jYWxsKF90aGlzMjMsIGFjY3VtLCBfdGhpczIzLndyYXAobiksIGkpO1xuICAgICAgICAgIH0sIGluaXRpYWxWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Tm9kZXNJbnRlcm5hbCgpLnJlZHVjZShmdW5jdGlvbiAoYWNjdW0sIG4sIGkpIHtcbiAgICAgICAgICByZXR1cm4gZm4uY2FsbChfdGhpczIzLCBpID09PSAxID8gX3RoaXMyMy53cmFwKGFjY3VtKSA6IGFjY3VtLCBfdGhpczIzLndyYXAobiksIGkpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlZHVjZTtcbiAgICB9KClcblxuICAgIC8qKlxuICAgICAqIFJlZHVjZXMgdGhlIGN1cnJlbnQgYXJyYXkgb2Ygbm9kZXMgdG8gYW5vdGhlciBhcnJheSwgZnJvbSByaWdodCB0byBsZWZ0LiBFYWNoIG5vZGUgaXMgcGFzc2VkXG4gICAgICogaW4gYXMgYSBgU2hhbGxvd1dyYXBwZXJgIHRvIHRoZSByZWR1Y2VyIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gLSB0aGUgcmVkdWNlciBmdW5jdGlvblxuICAgICAqIEBwYXJhbSB7Kn0gaW5pdGlhbFZhbHVlIC0gdGhlIGluaXRpYWwgdmFsdWVcbiAgICAgKiBAcmV0dXJucyB7Kn1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAncmVkdWNlUmlnaHQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiByZWR1Y2VSaWdodChmbikge1xuICAgICAgICB2YXIgX3RoaXMyNCA9IHRoaXM7XG5cbiAgICAgICAgdmFyIGluaXRpYWxWYWx1ZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICAgIHJldHVybiB0aGlzLmdldE5vZGVzSW50ZXJuYWwoKS5yZWR1Y2VSaWdodChmdW5jdGlvbiAoYWNjdW0sIG4sIGkpIHtcbiAgICAgICAgICAgIHJldHVybiBmbi5jYWxsKF90aGlzMjQsIGFjY3VtLCBfdGhpczI0LndyYXAobiksIGkpO1xuICAgICAgICAgIH0sIGluaXRpYWxWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Tm9kZXNJbnRlcm5hbCgpLnJlZHVjZVJpZ2h0KGZ1bmN0aW9uIChhY2N1bSwgbiwgaSkge1xuICAgICAgICAgIHJldHVybiBmbi5jYWxsKF90aGlzMjQsIGkgPT09IDEgPyBfdGhpczI0LndyYXAoYWNjdW0pIDogYWNjdW0sIF90aGlzMjQud3JhcChuKSwgaSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVkdWNlUmlnaHQ7XG4gICAgfSgpXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbmV3IHdyYXBwZXIgd2l0aCBhIHN1YnNldCBvZiB0aGUgbm9kZXMgb2YgdGhlIG9yaWdpbmFsIHdyYXBwZXIsIGFjY29yZGluZyB0byB0aGVcbiAgICAgKiBydWxlcyBvZiBgQXJyYXkjc2xpY2VgLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGJlZ2luXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGVuZFxuICAgICAqIEByZXR1cm5zIHtTaGFsbG93V3JhcHBlcn1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnc2xpY2UnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBzbGljZShiZWdpbiwgZW5kKSB7XG4gICAgICAgIHJldHVybiB0aGlzLndyYXAodGhpcy5nZXROb2Rlc0ludGVybmFsKCkuc2xpY2UoYmVnaW4sIGVuZCkpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc2xpY2U7XG4gICAgfSgpXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IGFueSBvZiB0aGUgbm9kZXMgaW4gdGhlIHdyYXBwZXIgbWF0Y2ggdGhlIHByb3ZpZGVkIHNlbGVjdG9yLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtFbnp5bWVTZWxlY3Rvcn0gc2VsZWN0b3JcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnc29tZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIHNvbWUoc2VsZWN0b3IpIHtcbiAgICAgICAgaWYgKHRoaXNbUk9PVF0gPT09IHRoaXMpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NoYWxsb3dXcmFwcGVyOjpzb21lKCkgY2FuIG5vdCBiZSBjYWxsZWQgb24gdGhlIHJvb3QnKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcHJlZGljYXRlID0gKDAsIF9zZWxlY3RvcnMuYnVpbGRQcmVkaWNhdGUpKHNlbGVjdG9yKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Tm9kZXNJbnRlcm5hbCgpLnNvbWUocHJlZGljYXRlKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNvbWU7XG4gICAgfSgpXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IGFueSBvZiB0aGUgbm9kZXMgaW4gdGhlIHdyYXBwZXIgcGFzcyB0aGUgcHJvdmlkZWQgcHJlZGljYXRlIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3NvbWVXaGVyZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIHNvbWVXaGVyZShwcmVkaWNhdGUpIHtcbiAgICAgICAgdmFyIF90aGlzMjUgPSB0aGlzO1xuXG4gICAgICAgIHJldHVybiB0aGlzLmdldE5vZGVzSW50ZXJuYWwoKS5zb21lKGZ1bmN0aW9uIChuLCBpKSB7XG4gICAgICAgICAgcmV0dXJuIHByZWRpY2F0ZS5jYWxsKF90aGlzMjUsIF90aGlzMjUud3JhcChuKSwgaSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc29tZVdoZXJlO1xuICAgIH0oKVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB3aGV0aGVyIG9yIG5vdCBhbGwgb2YgdGhlIG5vZGVzIGluIHRoZSB3cmFwcGVyIG1hdGNoIHRoZSBwcm92aWRlZCBzZWxlY3Rvci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7RW56eW1lU2VsZWN0b3J9IHNlbGVjdG9yXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2V2ZXJ5JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gZXZlcnkoc2VsZWN0b3IpIHtcbiAgICAgICAgdmFyIHByZWRpY2F0ZSA9ICgwLCBfc2VsZWN0b3JzLmJ1aWxkUHJlZGljYXRlKShzZWxlY3Rvcik7XG4gICAgICAgIHJldHVybiB0aGlzLmdldE5vZGVzSW50ZXJuYWwoKS5ldmVyeShwcmVkaWNhdGUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZXZlcnk7XG4gICAgfSgpXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IGFueSBvZiB0aGUgbm9kZXMgaW4gdGhlIHdyYXBwZXIgcGFzcyB0aGUgcHJvdmlkZWQgcHJlZGljYXRlIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2V2ZXJ5V2hlcmUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBldmVyeVdoZXJlKHByZWRpY2F0ZSkge1xuICAgICAgICB2YXIgX3RoaXMyNiA9IHRoaXM7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Tm9kZXNJbnRlcm5hbCgpLmV2ZXJ5KGZ1bmN0aW9uIChuLCBpKSB7XG4gICAgICAgICAgcmV0dXJuIHByZWRpY2F0ZS5jYWxsKF90aGlzMjYsIF90aGlzMjYud3JhcChuKSwgaSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZXZlcnlXaGVyZTtcbiAgICB9KClcblxuICAgIC8qKlxuICAgICAqIFV0aWxpdHkgbWV0aG9kIHVzZWQgdG8gY3JlYXRlIG5ldyB3cmFwcGVycyB3aXRoIGEgbWFwcGluZyBmdW5jdGlvbiB0aGF0IHJldHVybnMgYW4gYXJyYXkgb2ZcbiAgICAgKiBub2RlcyBpbiByZXNwb25zZSB0byBhIHNpbmdsZSBub2RlIHdyYXBwZXIuIFRoZSByZXR1cm5lZCB3cmFwcGVyIGlzIGEgc2luZ2xlIHdyYXBwZXIgYXJvdW5kXG4gICAgICogYWxsIG9mIHRoZSBtYXBwZWQgbm9kZXMgZmxhdHRlbmVkIChhbmQgZGUtZHVwbGljYXRlZCkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICAgICAqIEByZXR1cm5zIHtTaGFsbG93V3JhcHBlcn1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZmxhdE1hcCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIGZsYXRNYXAoZm4pIHtcbiAgICAgICAgdmFyIF90aGlzMjcgPSB0aGlzO1xuXG4gICAgICAgIHZhciBub2RlcyA9IHRoaXMuZ2V0Tm9kZXNJbnRlcm5hbCgpLm1hcChmdW5jdGlvbiAobiwgaSkge1xuICAgICAgICAgIHJldHVybiBmbi5jYWxsKF90aGlzMjcsIF90aGlzMjcud3JhcChuKSwgaSk7XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgZmxhdHRlbmVkID0gKDAsIF9hcnJheVByb3RvdHlwZTJbJ2RlZmF1bHQnXSkobm9kZXMsIDEpO1xuICAgICAgICByZXR1cm4gdGhpcy53cmFwKGZsYXR0ZW5lZC5maWx0ZXIoQm9vbGVhbikpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZmxhdE1hcDtcbiAgICB9KClcblxuICAgIC8qKlxuICAgICAqIEZpbmRzIGFsbCBub2RlcyBpbiB0aGUgY3VycmVudCB3cmFwcGVyIG5vZGVzJyByZW5kZXIgdHJlZXMgdGhhdCBtYXRjaCB0aGUgcHJvdmlkZWQgcHJlZGljYXRlXG4gICAgICogZnVuY3Rpb24uIFRoZSBwcmVkaWNhdGUgZnVuY3Rpb24gd2lsbCByZWNlaXZlIHRoZSBub2RlcyBpbnNpZGUgYSBTaGFsbG93V3JhcHBlciBhcyBpdHNcbiAgICAgKiBmaXJzdCBhcmd1bWVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZVxuICAgICAqIEByZXR1cm5zIHtTaGFsbG93V3JhcHBlcn1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZmluZFdoZXJlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gZmluZFdoZXJlKHByZWRpY2F0ZSkge1xuICAgICAgICB2YXIgX3RoaXMyOCA9IHRoaXM7XG5cbiAgICAgICAgcmV0dXJuIGZpbmRXaGVyZVVud3JhcHBlZCh0aGlzLCBmdW5jdGlvbiAobikge1xuICAgICAgICAgIHZhciBub2RlID0gX3RoaXMyOC53cmFwKG4pO1xuICAgICAgICAgIHJldHVybiBub2RlLmxlbmd0aCA+IDAgJiYgcHJlZGljYXRlKG5vZGUpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZpbmRXaGVyZTtcbiAgICB9KClcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIG5vZGUgYXQgYSBnaXZlbiBpbmRleCBvZiB0aGUgY3VycmVudCB3cmFwcGVyLlxuICAgICAqXG4gICAgICogQHBhcmFtIGluZGV4XG4gICAgICogQHJldHVybnMge1JlYWN0RWxlbWVudH1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZ2V0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gZ2V0KGluZGV4KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEVsZW1lbnRzKClbaW5kZXhdO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZ2V0O1xuICAgIH0oKVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIHdyYXBwZXIgYXJvdW5kIHRoZSBub2RlIGF0IGEgZ2l2ZW4gaW5kZXggb2YgdGhlIGN1cnJlbnQgd3JhcHBlci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBpbmRleFxuICAgICAqIEByZXR1cm5zIHtTaGFsbG93V3JhcHBlcn1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnYXQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBhdChpbmRleCkge1xuICAgICAgICB2YXIgbm9kZXMgPSB0aGlzLmdldE5vZGVzSW50ZXJuYWwoKTtcbiAgICAgICAgaWYgKGluZGV4IDwgbm9kZXMubGVuZ3RoKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMud3JhcChub2Rlc1tpbmRleF0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLndyYXAoW10pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYXQ7XG4gICAgfSgpXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgd3JhcHBlciBhcm91bmQgdGhlIGZpcnN0IG5vZGUgb2YgdGhlIGN1cnJlbnQgd3JhcHBlci5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtTaGFsbG93V3JhcHBlcn1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZmlyc3QnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBmaXJzdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXQoMCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmaXJzdDtcbiAgICB9KClcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSB3cmFwcGVyIGFyb3VuZCB0aGUgbGFzdCBub2RlIG9mIHRoZSBjdXJyZW50IHdyYXBwZXIuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7U2hhbGxvd1dyYXBwZXJ9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2xhc3QnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBsYXN0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hdCh0aGlzLmxlbmd0aCAtIDEpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbGFzdDtcbiAgICB9KClcblxuICAgIC8qKlxuICAgICAqIERlbGVnYXRlcyB0byBleGlzdHMoKVxuICAgICAqXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2lzRW1wdHknLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBpc0VtcHR5KCkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICBjb25zb2xlLndhcm4oJ0VuenltZTo6RGVwcmVjYXRlZCBtZXRob2QgaXNFbXB0eSgpIGNhbGxlZCwgdXNlIGV4aXN0cygpIGluc3RlYWQuJyk7XG4gICAgICAgIHJldHVybiAhdGhpcy5leGlzdHMoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGlzRW1wdHk7XG4gICAgfSgpXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIGN1cnJlbnQgd3JhcHBlciBoYXMgbm9kZXMuIEZhbHNlIG90aGVyd2lzZS5cbiAgICAgKiBJZiBjYWxsZWQgd2l0aCBhIHNlbGVjdG9yIGl0IHJldHVybnMgYC5maW5kKHNlbGVjdG9yKS5leGlzdHMoKWAgaW5zdGVhZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7RW56eW1lU2VsZWN0b3J9IHNlbGVjdG9yIChvcHRpb25hbClcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZXhpc3RzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gZXhpc3RzKCkge1xuICAgICAgICB2YXIgc2VsZWN0b3IgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IG51bGw7XG5cbiAgICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gdGhpcy5maW5kKHNlbGVjdG9yKS5leGlzdHMoKSA6IHRoaXMubGVuZ3RoID4gMDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGV4aXN0cztcbiAgICB9KClcblxuICAgIC8qKlxuICAgICAqIFV0aWxpdHkgbWV0aG9kIHRoYXQgdGhyb3dzIGFuIGVycm9yIGlmIHRoZSBjdXJyZW50IGluc3RhbmNlIGhhcyBhIGxlbmd0aCBvdGhlciB0aGFuIG9uZS5cbiAgICAgKiBUaGlzIGlzIHByaW1hcmlseSB1c2VkIHRvIGVuZm9yY2UgdGhhdCBjZXJ0YWluIG1ldGhvZHMgYXJlIG9ubHkgcnVuIG9uIGEgd3JhcHBlciB3aGVuIGl0IGlzXG4gICAgICogd3JhcHBpbmcgYSBzaW5nbGUgbm9kZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBmblxuICAgICAqIEByZXR1cm5zIHsqfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdzaW5nbGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBzaW5nbGUobmFtZSwgZm4pIHtcbiAgICAgICAgdmFyIGZuTmFtZSA9IHR5cGVvZiBuYW1lID09PSAnc3RyaW5nJyA/IG5hbWUgOiAndW5rbm93bic7XG4gICAgICAgIHZhciBjYWxsYmFjayA9IHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJyA/IGZuIDogbmFtZTtcbiAgICAgICAgaWYgKHRoaXMubGVuZ3RoICE9PSAxKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNZXRob2QgXFx1MjAxQycgKyBmbk5hbWUgKyAnXFx1MjAxRCBpcyBtZWFudCB0byBiZSBydW4gb24gMSBub2RlLiAnICsgU3RyaW5nKHRoaXMubGVuZ3RoKSArICcgZm91bmQgaW5zdGVhZC4nKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2FsbGJhY2suY2FsbCh0aGlzLCB0aGlzLmdldE5vZGVJbnRlcm5hbCgpKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNpbmdsZTtcbiAgICB9KClcblxuICAgIC8qKlxuICAgICAqIEhlbHBmdWwgdXRpbGl0eSBtZXRob2QgdG8gY3JlYXRlIGEgbmV3IHdyYXBwZXIgd2l0aCB0aGUgc2FtZSByb290IGFzIHRoZSBjdXJyZW50IHdyYXBwZXIsIHdpdGhcbiAgICAgKiBhbnkgbm9kZXMgcGFzc2VkIGluIGFzIHRoZSBmaXJzdCBwYXJhbWV0ZXIgYXV0b21hdGljYWxseSB3cmFwcGVkLlxuICAgICAqXG4gICAgICogQHBhcmFtIG5vZGVcbiAgICAgKiBAcmV0dXJucyB7U2hhbGxvd1dyYXBwZXJ9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3dyYXAnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiB3cmFwKG5vZGUpIHtcbiAgICAgICAgdmFyIHJvb3QgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHRoaXNbUk9PVF07XG5cbiAgICAgICAgaWYgKG5vZGUgaW5zdGFuY2VvZiBTaGFsbG93V3JhcHBlcikge1xuICAgICAgICAgIHJldHVybiBub2RlO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgX2xlbjMgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbjMgPiAyID8gX2xlbjMgLSAyIDogMCksIF9rZXkzID0gMjsgX2tleTMgPCBfbGVuMzsgX2tleTMrKykge1xuICAgICAgICAgIGFyZ3NbX2tleTMgLSAyXSA9IGFyZ3VtZW50c1tfa2V5M107XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV3IChGdW5jdGlvbi5wcm90b3R5cGUuYmluZC5hcHBseShTaGFsbG93V3JhcHBlciwgW251bGxdLmNvbmNhdChbbm9kZSwgcm9vdF0sIGFyZ3MpKSkoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHdyYXA7XG4gICAgfSgpXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFuIEhUTUwtbGlrZSBzdHJpbmcgb2YgdGhlIHNoYWxsb3cgcmVuZGVyIGZvciBkZWJ1Z2dpbmcgcHVycG9zZXMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIC0gUHJvcGVydHkgYmFnIG9mIGFkZGl0aW9uYWwgb3B0aW9ucy5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmlnbm9yZVByb3BzXSAtIGlmIHRydWUsIHByb3BzIGFyZSBvbWl0dGVkIGZyb20gdGhlIHN0cmluZy5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnZlcmJvc2VdIC0gaWYgdHJ1ZSwgYXJyYXlzIGFuZCBvYmplY3RzIHRvIGJlIHZlcmJvc2VseSBwcmludGVkLlxuICAgICAqIEByZXR1cm5zIHtTdHJpbmd9XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2RlYnVnJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gZGVidWcoKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICAgICAgICByZXR1cm4gKDAsIF9EZWJ1Zy5kZWJ1Z05vZGVzKSh0aGlzLmdldE5vZGVzSW50ZXJuYWwoKSwgb3B0aW9ucyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBkZWJ1ZztcbiAgICB9KClcblxuICAgIC8qKlxuICAgICAqIEludm9rZXMgaW50ZXJjZXB0ZXIgYW5kIHJldHVybnMgaXRzZWxmLiBpbnRlcmNlcHRlciBpcyBjYWxsZWQgd2l0aCBpdHNlbGYuXG4gICAgICogVGhpcyBpcyBoZWxwZnVsIHdoZW4gZGVidWdnaW5nIG5vZGVzIGluIG1ldGhvZCBjaGFpbnMuXG4gICAgICogQHBhcmFtIGZuXG4gICAgICogQHJldHVybnMge1NoYWxsb3dXcmFwcGVyfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICd0YXAnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiB0YXAoaW50ZXJjZXB0ZXIpIHtcbiAgICAgICAgaW50ZXJjZXB0ZXIodGhpcyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGFwO1xuICAgIH0oKVxuXG4gICAgLyoqXG4gICAgICogUHJpbWFyaWx5IHVzZWZ1bCBmb3IgSE9DcyAoaGlnaGVyLW9yZGVyIGNvbXBvbmVudHMpLCB0aGlzIG1ldGhvZCBtYXkgb25seSBiZVxuICAgICAqIHJ1biBvbiBhIHNpbmdsZSwgbm9uLURPTSBub2RlLCBhbmQgd2lsbCByZXR1cm4gdGhlIG5vZGUsIHNoYWxsb3ctcmVuZGVyZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICAgICAqIEByZXR1cm5zIHtTaGFsbG93V3JhcHBlcn1cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZGl2ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIGRpdmUoKSB7XG4gICAgICAgIHZhciBfdGhpczI5ID0gdGhpcztcblxuICAgICAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG5cbiAgICAgICAgdmFyIGFkYXB0ZXIgPSAoMCwgX2dldEFkYXB0ZXIyWydkZWZhdWx0J10pKHRoaXNbT1BUSU9OU10pO1xuICAgICAgICB2YXIgbmFtZSA9ICdkaXZlJztcbiAgICAgICAgcmV0dXJuIHRoaXMuc2luZ2xlKG5hbWUsIGZ1bmN0aW9uIChuKSB7XG4gICAgICAgICAgaWYgKG4gJiYgbi5ub2RlVHlwZSA9PT0gJ2hvc3QnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdTaGFsbG93V3JhcHBlcjo6JyArIG5hbWUgKyAnKCkgY2FuIG5vdCBiZSBjYWxsZWQgb24gSG9zdCBDb21wb25lbnRzJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBlbCA9ICgwLCBfZ2V0QWRhcHRlcjJbJ2RlZmF1bHQnXSkoX3RoaXMyOVtPUFRJT05TXSkubm9kZVRvRWxlbWVudChuKTtcbiAgICAgICAgICBpZiAoISgwLCBfVXRpbHMuaXNDdXN0b21Db21wb25lbnRFbGVtZW50KShlbCwgYWRhcHRlcikpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1NoYWxsb3dXcmFwcGVyOjonICsgbmFtZSArICcoKSBjYW4gb25seSBiZSBjYWxsZWQgb24gY29tcG9uZW50cycpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgY2hpbGRPcHRpb25zID0gbWFrZUluaGVyaXRlZENoaWxkT3B0aW9ucyhfdGhpczI5LCBvcHRpb25zKTtcbiAgICAgICAgICByZXR1cm4gX3RoaXMyOS53cmFwKGVsLCBudWxsLCBjaGlsZE9wdGlvbnMpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGRpdmU7XG4gICAgfSgpXG5cbiAgICAvKipcbiAgICAgKiBTdHJpcHMgb3V0IGFsbCB0aGUgbm90IGhvc3Qtbm9kZXMgZnJvbSB0aGUgbGlzdCBvZiBub2Rlc1xuICAgICAqXG4gICAgICogVGhpcyBtZXRob2QgaXMgdXNlZnVsIGlmIHlvdSB3YW50IHRvIGNoZWNrIGZvciB0aGUgcHJlc2VuY2Ugb2YgaG9zdCBub2Rlc1xuICAgICAqIChhY3R1YWxseSByZW5kZXJlZCBIVE1MIGVsZW1lbnRzKSBpZ25vcmluZyB0aGUgUmVhY3Qgbm9kZXMuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2hvc3ROb2RlcycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIGhvc3ROb2RlcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyV2hlcmUoZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgICByZXR1cm4gdHlwZW9mIG4udHlwZSgpID09PSAnc3RyaW5nJztcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBob3N0Tm9kZXM7XG4gICAgfSgpXG4gIH1dKTtcblxuICByZXR1cm4gU2hhbGxvd1dyYXBwZXI7XG59KCk7XG5cbi8qKlxuICogVXBkYXRlcyB0aGUgY29udGV4dCBvZiB0aGUgcHJpbWFyeSB3cmFwcGVyIHdoZW4gdGhlXG4gKiBgd3JhcHBpbmdDb21wb25lbnRgIHJlLXJlbmRlcnMuXG4gKi9cblxuXG5mdW5jdGlvbiB1cGRhdGVQcmltYXJ5Um9vdENvbnRleHQod3JhcHBpbmdDb21wb25lbnQpIHtcbiAgdmFyIGFkYXB0ZXIgPSAoMCwgX2dldEFkYXB0ZXIyWydkZWZhdWx0J10pKHdyYXBwaW5nQ29tcG9uZW50W09QVElPTlNdKTtcbiAgdmFyIHByaW1hcnlXcmFwcGVyID0gd3JhcHBpbmdDb21wb25lbnRbUFJJTUFSWV9XUkFQUEVSXTtcbiAgdmFyIHByaW1hcnlSZW5kZXJlciA9IHByaW1hcnlXcmFwcGVyW1JFTkRFUkVSXTtcbiAgdmFyIHByaW1hcnlOb2RlID0gcHJpbWFyeVJlbmRlcmVyLmdldE5vZGUoKTtcblxuICB2YXIgX2dldENvbnRleHRGcm9tV3JhcHBpMiA9IGdldENvbnRleHRGcm9tV3JhcHBpbmdDb21wb25lbnQod3JhcHBpbmdDb21wb25lbnQsIGFkYXB0ZXIpLFxuICAgICAgbGVnYWN5Q29udGV4dCA9IF9nZXRDb250ZXh0RnJvbVdyYXBwaTIubGVnYWN5Q29udGV4dCxcbiAgICAgIHByb3ZpZGVyVmFsdWVzID0gX2dldENvbnRleHRGcm9tV3JhcHBpMi5wcm92aWRlclZhbHVlcztcblxuICB2YXIgcHJldlByb3ZpZGVyVmFsdWVzID0gcHJpbWFyeVdyYXBwZXJbUFJPVklERVJfVkFMVUVTXTtcblxuICBwcmltYXJ5V3JhcHBlci5zZXRDb250ZXh0KCgwLCBfb2JqZWN0MlsnZGVmYXVsdCddKSh7fSwgd3JhcHBpbmdDb21wb25lbnRbUFJJTUFSWV9XUkFQUEVSXVtPUFRJT05TXS5jb250ZXh0LCBsZWdhY3lDb250ZXh0KSk7XG4gIHByaW1hcnlXcmFwcGVyW1BST1ZJREVSX1ZBTFVFU10gPSBuZXcgTWFwKFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkocHJldlByb3ZpZGVyVmFsdWVzKSwgX3RvQ29uc3VtYWJsZUFycmF5KHByb3ZpZGVyVmFsdWVzKSkpO1xuXG4gIGlmICh0eXBlb2YgYWRhcHRlci5pc0NvbnRleHRDb25zdW1lciA9PT0gJ2Z1bmN0aW9uJyAmJiBhZGFwdGVyLmlzQ29udGV4dENvbnN1bWVyKHByaW1hcnlOb2RlLnR5cGUpKSB7XG4gICAgdmFyIENvbnN1bWVyID0gcHJpbWFyeU5vZGUudHlwZTtcbiAgICAvLyBBZGFwdGVycyB3aXRoIGFuIGBpc0NvbnRleHRDb25zdW1lcmAgbWV0aG9kIHdpbGwgZGVmaW5pdGVseSBoYXZlIGEgYGdldFByb3ZpZGVyRnJvbUNvbnN1bWVyYFxuICAgIC8vIG1ldGhvZC5cbiAgICB2YXIgUHJvdmlkZXIgPSBhZGFwdGVyLmdldFByb3ZpZGVyRnJvbUNvbnN1bWVyKENvbnN1bWVyKTtcbiAgICB2YXIgbmV3VmFsdWUgPSBwcm92aWRlclZhbHVlcy5nZXQoUHJvdmlkZXIpO1xuICAgIHZhciBvbGRWYWx1ZSA9IHByZXZQcm92aWRlclZhbHVlcy5nZXQoUHJvdmlkZXIpO1xuXG4gICAgLy8gVXNlIHJlZmVyZW50aWFsIGNvbXBhcmlzb24gbGlrZSBSZWFjdFxuICAgIGlmIChuZXdWYWx1ZSAhPT0gb2xkVmFsdWUpIHtcbiAgICAgIHByaW1hcnlXcmFwcGVyLnJlcmVuZGVyKCk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQSAqc3BlY2lhbCogXCJyb290XCIgd3JhcHBlciB0aGF0IHJlcHJlc2VudHMgdGhlIGNvbXBvbmVudCBwYXNzZWQgYXMgYHdyYXBwaW5nQ29tcG9uZW50YC5cbiAqIEl0IGlzIGxpbmtlZCB0byB0aGUgcHJpbWFyeSByb290IHN1Y2ggdGhhdCB1cGRhdGVzIHRvIGl0IHdpbGwgdXBkYXRlIHRoZSBwcmltYXJ5LlxuICpcbiAqIEBjbGFzcyBXcmFwcGluZ0NvbXBvbmVudFdyYXBwZXJcbiAqL1xuXG52YXIgV3JhcHBpbmdDb21wb25lbnRXcmFwcGVyID0gZnVuY3Rpb24gKF9TaGFsbG93V3JhcHBlcikge1xuICBfaW5oZXJpdHMoV3JhcHBpbmdDb21wb25lbnRXcmFwcGVyLCBfU2hhbGxvd1dyYXBwZXIpO1xuXG4gIGZ1bmN0aW9uIFdyYXBwaW5nQ29tcG9uZW50V3JhcHBlcihub2Rlcywgcm9vdCwgUm9vdEZpbmRlcikge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBXcmFwcGluZ0NvbXBvbmVudFdyYXBwZXIpO1xuXG4gICAgdmFyIF90aGlzMzAgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoV3JhcHBpbmdDb21wb25lbnRXcmFwcGVyLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoV3JhcHBpbmdDb21wb25lbnRXcmFwcGVyKSkuY2FsbCh0aGlzLCBub2RlcykpO1xuXG4gICAgKDAsIF9VdGlscy5wcml2YXRlU2V0KShfdGhpczMwLCBQUklNQVJZX1dSQVBQRVIsIHJvb3QpO1xuICAgICgwLCBfVXRpbHMucHJpdmF0ZVNldCkoX3RoaXMzMCwgUk9PVF9GSU5ERVIsIFJvb3RGaW5kZXIpO1xuICAgIHJldHVybiBfdGhpczMwO1xuICB9XG5cbiAgLyoqXG4gICAqIExpa2UgcmVyZW5kZXIoKSBvbiBTaGFsbG93V3JhcHBlciwgZXhjZXB0IGl0IGFsc28gZG9lcyBhIFwiZnVsbCByZW5kZXJcIiBvZlxuICAgKiBpdHNlbGYgYW5kIHVwZGF0ZXMgdGhlIHByaW1hcnkgU2hhbGxvd1dyYXBwZXIncyBjb250ZXh0LlxuICAgKi9cblxuXG4gIF9jcmVhdGVDbGFzcyhXcmFwcGluZ0NvbXBvbmVudFdyYXBwZXIsIFt7XG4gICAga2V5OiAncmVyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiByZXJlbmRlcigpIHtcbiAgICAgICAgdmFyIF9nZXQyO1xuXG4gICAgICAgIGZvciAodmFyIF9sZW40ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW40KSwgX2tleTQgPSAwOyBfa2V5NCA8IF9sZW40OyBfa2V5NCsrKSB7XG4gICAgICAgICAgYXJnc1tfa2V5NF0gPSBhcmd1bWVudHNbX2tleTRdO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHJlc3VsdCA9IChfZ2V0MiA9IF9nZXQoV3JhcHBpbmdDb21wb25lbnRXcmFwcGVyLnByb3RvdHlwZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFdyYXBwaW5nQ29tcG9uZW50V3JhcHBlci5wcm90b3R5cGUpLCAncmVyZW5kZXInLCB0aGlzKSkuY2FsbC5hcHBseShfZ2V0MiwgW3RoaXNdLmNvbmNhdChhcmdzKSk7XG4gICAgICAgIHVwZGF0ZVByaW1hcnlSb290Q29udGV4dCh0aGlzKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlcmVuZGVyO1xuICAgIH0oKVxuXG4gICAgLyoqXG4gICAgICogTGlrZSBzZXRTdGF0ZSgpIG9uIFNoYWxsb3dXcmFwcGVyLCBleGNlcHQgaXQgYWxzbyBkb2VzIGEgXCJmdWxsIHJlbmRlclwiIG9mXG4gICAgICogaXRzZWxmIGFuZCB1cGRhdGVzIHRoZSBwcmltYXJ5IFNoYWxsb3dXcmFwcGVyJ3MgY29udGV4dC5cbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnc2V0U3RhdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBzZXRTdGF0ZSgpIHtcbiAgICAgICAgdmFyIF9nZXQzO1xuXG4gICAgICAgIGZvciAodmFyIF9sZW41ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW41KSwgX2tleTUgPSAwOyBfa2V5NSA8IF9sZW41OyBfa2V5NSsrKSB7XG4gICAgICAgICAgYXJnc1tfa2V5NV0gPSBhcmd1bWVudHNbX2tleTVdO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHJlc3VsdCA9IChfZ2V0MyA9IF9nZXQoV3JhcHBpbmdDb21wb25lbnRXcmFwcGVyLnByb3RvdHlwZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFdyYXBwaW5nQ29tcG9uZW50V3JhcHBlci5wcm90b3R5cGUpLCAnc2V0U3RhdGUnLCB0aGlzKSkuY2FsbC5hcHBseShfZ2V0MywgW3RoaXNdLmNvbmNhdChhcmdzKSk7XG4gICAgICAgIHVwZGF0ZVByaW1hcnlSb290Q29udGV4dCh0aGlzKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNldFN0YXRlO1xuICAgIH0oKVxuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNsYXNzLW1ldGhvZHMtdXNlLXRoaXNcblxuICB9LCB7XG4gICAga2V5OiAnZ2V0V3JhcHBpbmdDb21wb25lbnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBnZXRXcmFwcGluZ0NvbXBvbmVudCgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTaGFsbG93V3JhcHBlcjo6Z2V0V3JhcHBpbmdDb21wb25lbnQoKSBjYW4gb25seSBiZSBjYWxsZWQgb24gdGhlIHJvb3QnKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGdldFdyYXBwaW5nQ29tcG9uZW50O1xuICAgIH0oKVxuICB9XSk7XG5cbiAgcmV0dXJuIFdyYXBwaW5nQ29tcG9uZW50V3JhcHBlcjtcbn0oU2hhbGxvd1dyYXBwZXIpO1xuXG5pZiAoX1V0aWxzLklURVJBVE9SX1NZTUJPTCkge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU2hhbGxvd1dyYXBwZXIucHJvdG90eXBlLCBfVXRpbHMuSVRFUkFUT1JfU1lNQk9MLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBpdGVyYXRvcigpIHtcbiAgICAgICAgdmFyIF9yZWYyO1xuXG4gICAgICAgIHZhciBpdGVyID0gdGhpcy5nZXROb2Rlc0ludGVybmFsKClbX1V0aWxzLklURVJBVE9SX1NZTUJPTF0oKTtcbiAgICAgICAgdmFyIGFkYXB0ZXIgPSAoMCwgX2dldEFkYXB0ZXIyWydkZWZhdWx0J10pKHRoaXNbT1BUSU9OU10pO1xuICAgICAgICByZXR1cm4gX3JlZjIgPSB7fSwgX2RlZmluZVByb3BlcnR5KF9yZWYyLCBfVXRpbHMuSVRFUkFUT1JfU1lNQk9MLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0pLCBfZGVmaW5lUHJvcGVydHkoX3JlZjIsICduZXh0JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgICAgICB2YXIgbmV4dCA9IGl0ZXIubmV4dCgpO1xuICAgICAgICAgICAgaWYgKG5leHQuZG9uZSkge1xuICAgICAgICAgICAgICByZXR1cm4geyBkb25lOiB0cnVlIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICBkb25lOiBmYWxzZSxcbiAgICAgICAgICAgICAgdmFsdWU6IGFkYXB0ZXIubm9kZVRvRWxlbWVudChuZXh0LnZhbHVlKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfSgpKSwgX3JlZjI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBpdGVyYXRvcjtcbiAgICB9KClcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHByaXZhdGVXYXJuaW5nKHByb3AsIGV4dHJhTWVzc2FnZSkge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU2hhbGxvd1dyYXBwZXIucHJvdG90eXBlLCBwcm9wLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignXFxuICAgICAgICBBdHRlbXB0ZWQgdG8gYWNjZXNzIFNoYWxsb3dXcmFwcGVyOjonICsgU3RyaW5nKHByb3ApICsgJywgd2hpY2ggd2FzIHByZXZpb3VzbHkgYSBwcml2YXRlIHByb3BlcnR5IG9uXFxuICAgICAgICBFbnp5bWUgU2hhbGxvd1dyYXBwZXIgaW5zdGFuY2VzLCBidXQgaXMgbm8gbG9uZ2VyIGFuZCBzaG91bGQgbm90IGJlIHJlbGllZCB1cG9uLlxcbiAgICAgICAgJyArIFN0cmluZyhleHRyYU1lc3NhZ2UpICsgJ1xcbiAgICAgICcpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZ2V0O1xuICAgIH0oKSxcblxuICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgIGNvbmZpZ3VyYWJsZTogZmFsc2VcbiAgfSk7XG59XG5cbnByaXZhdGVXYXJuaW5nKCdub2RlJywgJ0NvbnNpZGVyIHVzaW5nIHRoZSBnZXRFbGVtZW50KCkgbWV0aG9kIGluc3RlYWQuJyk7XG5wcml2YXRlV2FybmluZygnbm9kZXMnLCAnQ29uc2lkZXIgdXNpbmcgdGhlIGdldEVsZW1lbnRzKCkgbWV0aG9kIGluc3RlYWQuJyk7XG5wcml2YXRlV2FybmluZygncmVuZGVyZXInLCAnJyk7XG5wcml2YXRlV2FybmluZygnb3B0aW9ucycsICcnKTtcbnByaXZhdGVXYXJuaW5nKCdjb21wbGV4U2VsZWN0b3InLCAnJyk7XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IFNoYWxsb3dXcmFwcGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk0dUwzTnlZeTlUYUdGc2JHOTNWM0poY0hCbGNpNXFjeUpkTENKdVlXMWxjeUk2V3lKT1QwUkZJaXdpVGs5RVJWTWlMQ0pTUlU1RVJWSkZVaUlzSWxWT1VrVk9SRVZTUlVRaUxDSlNUMDlVSWl3aVQxQlVTVTlPVXlJc0lsTkZWRjlUVkVGVVJTSXNJbEpQVDFSZlRrOUVSVk1pTENKRFNFbE1SRjlEVDA1VVJWaFVJaXdpVjFKQlVGQkpUa2RmUTA5TlVFOU9SVTVVSWl3aVVGSkpUVUZTV1Y5WFVrRlFVRVZTSWl3aVVrOVBWRjlHU1U1RVJWSWlMQ0pRVWs5V1NVUkZVbDlXUVV4VlJWTWlMQ0ptYVc1a1YyaGxjbVZWYm5keVlYQndaV1FpTENKM2NtRndjR1Z5SWl3aWNISmxaR2xqWVhSbElpd2labWxzZEdWeUlpd2lkSEpsWlVacGJIUmxjaUlzSW1ac1lYUk5ZWEFpTENKdUlpd2laMlYwVG05a1pVbHVkR1Z5Ym1Gc0lpd2labWxzZEdWeVYyaGxjbVZWYm5keVlYQndaV1FpTENKM2NtRndJaXdpWjJWMFRtOWtaWE5KYm5SbGNtNWhiQ0lzSWtKdmIyeGxZVzRpTENKMllXeHBaR0YwWlU5d2RHbHZibk1pTENKdmNIUnBiMjV6SWl3aWJHbG1aV041WTJ4bFJYaHdaWEpwYldWdWRHRnNJaXdpWkdsellXSnNaVXhwWm1WamVXTnNaVTFsZEdodlpITWlMQ0psYm1GaWJHVkRiMjF3YjI1bGJuUkVhV1JWY0dSaGRHVlBibE5sZEZOMFlYUmxJaXdpYzNWd2NHOXlkRkJ5WlhaRGIyNTBaWGgwUVhKbmRXMWxiblJQWmtOdmJYQnZibVZ1ZEVScFpGVndaR0YwWlNJc0lteHBabVZqZVdOc1pYTWlMQ0pGY25KdmNpSXNJbU52YlhCdmJtVnVkRVJwWkZWd1pHRjBaU0lzSW05dVUyVjBVM1JoZEdVaUxDSlVlWEJsUlhKeWIzSWlMQ0p3Y21WMlEyOXVkR1Y0ZENJc0ltZGxkRUZrWVhCMFpYSk1hV1psWTNsamJHVnpJaXdpYUdGelRHVm5ZV041VTJWMFUzUmhkR1ZCY21jaUxDSm9ZWE5NWldkaFkzbFFjbVYyUTI5dWRHVjRkRUZ5WnlJc0ltOXlhV2RwYm1Gc1IwUlRSbEFpTENKblpYUkVaWEpwZG1Wa1UzUmhkR1ZHY205dFVISnZjSE1pTENKb1lYTlRhRzkxYkdSRGIyMXdiMjVsYm5SVmNHUmhkR1ZDZFdjaUxDSnpaWFJUZEdGMFpTSXNJbWRsZEVOb2FXeGtRMjl1ZEdWNGRDSXNJbU5oYkd4bFpFSjVVbVZ1WkdWeVpYSWlMQ0puWlhSU2IyOTBUbTlrWlNJc0ltNXZaR1VpTENKdWIyUmxWSGx3WlNJc0luSmxibVJsY21Wa0lpd2laMlYwVW05dmRFNXZaR1ZKYm5SbGNtNWhiQ0lzSW14bGJtZDBhQ0lzSW01dlpHVlFZWEpsYm5Seklpd2ljSEpwZG1GMFpWTmxkRTV2WkdWeklpd2libTlrWlhNaUxDSkJjbkpoZVNJc0ltbHpRWEp5WVhraUxDSndkWEpsUTI5dGNHOXVaVzUwVTJodmRXeGtRMjl0Y0c5dVpXNTBWWEJrWVhSbElpd2ljSEpsZGxCeWIzQnpJaXdpY0hKdmNITWlMQ0p3Y21WMlUzUmhkR1VpTENKemRHRjBaU0lzSW1selVIVnlaVU52YlhCdmJtVnVkQ0lzSW1sdWMzUmhibU5sSWl3aWFYTlFkWEpsVW1WaFkzUkRiMjF3YjI1bGJuUWlMQ0pvYVdWeVlYSmphSGtpTENKeVpXNWtaWEpsY2lJc0lrTnZiWEJ2Ym1WdWRDSXNJblI1Y0dVaUxDSmpiMjF3YjI1bGJuUk9ZVzFsSWl3aVkyaHBiR1JEYjI1MFpYaDBWSGx3WlhNaUxDSmpiMjV6YjJ4bElpd2lkMkZ5YmlJc0ltTm9hV3hrUTI5dWRHVjRkQ0lzSWs5aWFtVmpkQ0lzSW10bGVYTWlMQ0ptYjNKRllXTm9JaXdpYTJWNUlpd2lZMmhsWTJ0UWNtOXdWSGx3WlhNaUxDSnpjSGxQYmtkbGRFTm9hV3hrUTI5dWRHVjRkRWx1YVhScFlXeFNaVzVrWlhJaUxDSmhaR0Z3ZEdWeUlpd2ljSEp2ZEc5MGVYQmxJaXdpY0hKcGRtRjBaVk5sZEVOb2FXeGtRMjl1ZEdWNGRDSXNJbkpsYm1SbGNtVmtUbTlrWlNJc0ltZGxkRU5vYVd4a1EyOXVkR1Y0ZEZOd2VTSXNJbXhsWjJGamVVTnZiblJsZUhSTmIyUmxJaXdpWjJWMFRHRnpkRkpsZEhWeWJsWmhiSFZsSWl3aWNtVnpkRzl5WlNJc0ltNXZaR1ZJYVdWeVlYSmphSGtpTENKamIyNWpZWFFpTENKdGIyTnJVME5WU1dablJGTkdVRkpsZEhWeWJrNXZiazUxYkd3aUxDSnZjbWxuYVc1aGJGTkRWU0lzSW5Ob2IzVnNaRU52YlhCdmJtVnVkRlZ3WkdGMFpTSXNJbUZ5WjNNaUxDSnpRMVZTWlhOMWJIUWlMQ0poY0hCc2VTSXNJbTVsZUhSVGRHRjBaU0lzSW1SbFpYQlNaVzVrWlhJaUxDSjBZWEpuWlhRaUxDSmxiR1Z0Wlc1MElpd2libTlrWlZSdlJXeGxiV1Z1ZENJc0ltUnBkbVVpTENKamFHbHNaSEpsYmlJc0lta2lMQ0ptYjNWdVpDSXNJbUYwSWl3aWRXNWtaV1pwYm1Wa0lpd2laMlYwUTI5dWRHVjRkRVp5YjIxWGNtRndjR2x1WjBOdmJYQnZibVZ1ZENJc0luSnZiM1JHYVc1a1pYSWlMQ0pzWldkaFkzbERiMjUwWlhoMElpd2lZMjl1ZEdWNGRDSXNJbkJ5YjNacFpHVnlWbUZzZFdWeklpd2liV0ZyWlZOb1lXeHNiM2RQY0hScGIyNXpJaXdpY205dmRDSXNJbkJoYzNObFpFOXdkR2x2Ym5NaUxDSjNjbUZ3Y0dsdVowTnZiWEJ2Ym1WdWRDSXNJbmR5WVhCWGFYUm9WM0poY0hCcGJtZERiMjF3YjI1bGJuUWlMQ0ozY21Gd2NHVmtUbTlrWlNJc0lsSnZiM1JHYVc1a1pYSWlMQ0pYY21Gd2NHbHVaME52YlhCdmJtVnVkRmR5WVhCd1pYSWlMQ0ozY21Gd2NHbHVaME52YlhCdmJtVnVkRXhsWjJGamVVTnZiblJsZUhRaUxDSjNjbUZ3Y0dsdVowTnZiWEJ2Ym1WdWRGQnliM1pwWkdWeVZtRnNkV1Z6SWl3aWJXRnJaVWx1YUdWeWFYUmxaRU5vYVd4a1QzQjBhVzl1Y3lJc0ltTm9hV3hrVDNCMGFXOXVjeUlzSWxOb1lXeHNiM2RYY21Gd2NHVnlJaXdpYVhOV1lXeHBaRVZzWlcxbGJuUWlMQ0pqY21WaGRHVlNaVzVrWlhKbGNpSXNJbTF2WkdVaUxDSk5ZWEFpTENKeVpXNWtaWElpTENKblpYUk9iMlJsSWl3aWRYQmtZWFJsY2lJc0ltTmhiR3hpWVdOcklpd2lZMjl0Y0c5dVpXNTBSR2xrVFc5MWJuUWlMQ0ppWVhSamFHVmtWWEJrWVhSbGN5SXNJblZ3WkdGMFpTSXNJbk5wYm1kc1pTSXNJbTFoY0NJc0luVnViVzkxYm5RaUxDSnVaWGgwUTI5dWRHVjRkQ0lzSW5Ob2IzVnNaRkpsYm1SbGNpSXNJbk5vYjNWc1pFTnZiWEJ2Ym1WdWRGVndaR0YwWlZOd2VTSXNJbWRFVTBaUUlpd2laMlYwVTI1aGNITm9iM1JDWldadmNtVlZjR1JoZEdVaUxDSnpibUZ3YzJodmRDSXNJbVp5WldWNlpTSXNJbUZ5WjNWdFpXNTBjeUlzSW5KbGNtVnVaR1Z5SWl3aWMzUmhkR1ZRWVhsc2IyRmtJaXdpWTJGc2JDSXNJbTFoZVdKbFNHRnpWWEJrWVhSbElpd2ljMnRwY0hORGIyMXdiMjVsYm5SRWFXUlZjR1JoZEdWUGJrNTFiR3hwYzJnaUxDSnBiblp2YTJWVFpYUlRkR0YwWlVOaGJHeGlZV05ySWl3aWJtOWtaVTl5VG05a1pYTWlMQ0p2ZEdobGNpSXNJbTV2WkdWRmNYVmhiQ0lzSW1Wc1pXMWxiblJVYjA1dlpHVWlMQ0p5YzNST2IyUmxJaXdpWVNJc0ltSWlMQ0psZG1WeWVTSXNJbU52Ym5SaGFXNXpUV0YwWTJocGJtZEZiR1Z0Wlc1MElpd2ljMjl0WlNJc0luTmxiR1ZqZEc5eUlpd2laMlYwVkdWNGRFWnliMjFPYjJSbElpd2lhSFJ0YkNJc0ltVjJaVzUwSWl3aWMybHRkV3hoZEdWRmRtVnVkQ0lzSW1WeWNtOXlJaXdpZEdocGMwNXZaR1VpTENKemFXMTFiR0YwWlVWeWNtOXlJaXdpY205dmRFNXZaR1VpTENKd2NtOXdjMDltVG05a1pTSXNJbTVoYldVaUxDSmZjM1JoZEdVaUxDSmZZMjl1ZEdWNGRDSXNJbUZzYkVOb2FXeGtjbVZ1SWl3aWFXNWtaWGdpTENKaGJHeFFZWEpsYm5Seklpd2ljR0Z5Wlc1MGN5SXNJbWRsZENJc0ltbHpJaXdpYldGMFkyaHBibWRCYm1ObGMzUnZjbk1pTENKbWFYSnpkQ0lzSW1acGJtUlhhR1Z5WlNJc0luQnliM0JPWVcxbElpd2lhR0Z1Wkd4bGNpSXNJbkJ5YjNBaUxDSnlaWE53YjI1elpTSXNJbEpoYm1kbFJYSnliM0lpTENKd2NtOXdWbUZzZFdVaUxDSjNjbUZ3Y0dWa0lpd2laR2x6Y0d4aGVVNWhiV1ZQWms1dlpHVWlMQ0pqYkdGemMwNWhiV1VpTENKcGJtUmxlRTltSWl3aVptNGlMQ0pwYm1sMGFXRnNWbUZzZFdVaUxDSnlaV1IxWTJVaUxDSmhZMk4xYlNJc0luSmxaSFZqWlZKcFoyaDBJaXdpWW1WbmFXNGlMQ0psYm1RaUxDSnpiR2xqWlNJc0ltWnNZWFIwWlc1bFpDSXNJbWRsZEVWc1pXMWxiblJ6SWl3aVpYaHBjM1J6SWl3aVptbHVaQ0lzSW1adVRtRnRaU0lzSW1sdWRHVnlZMlZ3ZEdWeUlpd2laV3dpTENKbWFXeDBaWEpYYUdWeVpTSXNJblZ3WkdGMFpWQnlhVzFoY25sU2IyOTBRMjl1ZEdWNGRDSXNJbkJ5YVcxaGNubFhjbUZ3Y0dWeUlpd2ljSEpwYldGeWVWSmxibVJsY21WeUlpd2ljSEpwYldGeWVVNXZaR1VpTENKd2NtVjJVSEp2ZG1sa1pYSldZV3gxWlhNaUxDSnpaWFJEYjI1MFpYaDBJaXdpYVhORGIyNTBaWGgwUTI5dWMzVnRaWElpTENKRGIyNXpkVzFsY2lJc0lsQnliM1pwWkdWeUlpd2laMlYwVUhKdmRtbGtaWEpHY205dFEyOXVjM1Z0WlhJaUxDSnVaWGRXWVd4MVpTSXNJbTlzWkZaaGJIVmxJaXdpY21WemRXeDBJaXdpU1ZSRlVrRlVUMUpmVTFsTlFrOU1JaXdpWkdWbWFXNWxVSEp2Y0dWeWRIa2lMQ0pqYjI1bWFXZDFjbUZpYkdVaUxDSjJZV3gxWlNJc0ltbDBaWEpoZEc5eUlpd2lhWFJsY2lJc0ltNWxlSFFpTENKa2IyNWxJaXdpY0hKcGRtRjBaVmRoY201cGJtY2lMQ0psZUhSeVlVMWxjM05oWjJVaUxDSmxiblZ0WlhKaFlteGxJbDBzSW0xaGNIQnBibWR6SWpvaU96czdPenM3T3pzN096czdPenM3T3pzN096dEJRVUZCT3pzN08wRkJRMEU3T3pzN1FVRkRRVHM3T3p0QlFVVkJPenRCUVcxQ1FUczdPenRCUVVOQk96dEJRVU5CT3p0QlFWRkJPenM3T3pzN096czdPenM3T3p0QlFVVkJMRWxCUVUxQkxFOUJRVThzWjBKQlFVa3NWVUZCU2l4RFFVRmlPMEZCUTBFc1NVRkJUVU1zVVVGQlVTeG5Ra0ZCU1N4WFFVRktMRU5CUVdRN1FVRkRRU3hKUVVGTlF5eFhRVUZYTEdkQ1FVRkpMR05CUVVvc1EwRkJha0k3UVVGRFFTeEpRVUZOUXl4aFFVRmhMR2RDUVVGSkxHZENRVUZLTEVOQlFXNUNPMEZCUTBFc1NVRkJUVU1zVDBGQlR5eG5Ra0ZCU1N4VlFVRktMRU5CUVdJN1FVRkRRU3hKUVVGTlF5eFZRVUZWTEdkQ1FVRkpMR0ZCUVVvc1EwRkJhRUk3UVVGRFFTeEpRVUZOUXl4WlFVRlpMR2RDUVVGSkxHTkJRVW9zUTBGQmJFSTdRVUZEUVN4SlFVRk5ReXhoUVVGaExHZENRVUZKTEdWQlFVb3NRMEZCYmtJN1FVRkRRU3hKUVVGTlF5eG5Ra0ZCWjBJc1owSkJRVWtzYTBKQlFVb3NRMEZCZEVJN1FVRkRRU3hKUVVGTlF5eHhRa0ZCY1VJc1owSkJRVWtzZFVKQlFVb3NRMEZCTTBJN1FVRkRRU3hKUVVGTlF5eHJRa0ZCYTBJc1owSkJRVWtzYjBKQlFVb3NRMEZCZUVJN1FVRkRRU3hKUVVGTlF5eGpRVUZqTEdkQ1FVRkpMR2RDUVVGS0xFTkJRWEJDTzBGQlEwRXNTVUZCVFVNc2EwSkJRV3RDTEdkQ1FVRkpMRzlDUVVGS0xFTkJRWGhDT3p0QlFVVkJPenM3T3pzN096czdRVUZUUVN4VFFVRlRReXhyUWtGQlZDeERRVUUwUWtNc1QwRkJOVUlzUlVGQmNVTkRMRk5CUVhKRExFVkJRWEZGTzBGQlFVRXNUVUZCY2tKRExFMUJRWEZDTEhWRlFVRmFReXgzUWtGQldUczdRVUZEYmtVc1UwRkJUMGdzVVVGQlVVa3NUMEZCVWl4RFFVRm5RaXhWUVVGRFF5eERRVUZFTzBGQlFVRXNWMEZCVDBnc1QwRkJUMGNzUlVGQlJVTXNaVUZCUml4RlFVRlFMRVZCUVRSQ1RDeFRRVUUxUWl4RFFVRlFPMEZCUVVFc1IwRkJhRUlzUTBGQlVEdEJRVU5FT3p0QlFVVkVPenM3T3pzN096dEJRVkZCTEZOQlFWTk5MRzlDUVVGVUxFTkJRVGhDVUN4UFFVRTVRaXhGUVVGMVEwTXNVMEZCZGtNc1JVRkJhMFE3UVVGRGFFUXNVMEZCVDBRc1VVRkJVVkVzU1VGQlVpeERRVUZoVWl4UlFVRlJVeXhuUWtGQlVpeEhRVUV5UWxBc1RVRkJNMElzUTBGQmEwTkVMRk5CUVd4RExFVkJRVFpEUXl4TlFVRTNReXhEUVVGdlJGRXNUMEZCY0VRc1EwRkJZaXhEUVVGUU8wRkJRMFE3TzBGQlJVUTdPenM3UVVGSlFTeFRRVUZUUXl4bFFVRlVMRU5CUVhsQ1F5eFBRVUY2UWl4RlFVRnJRenRCUVVGQkxFMUJSVGxDUXl4eFFrRkdPRUlzUjBGUE5VSkVMRTlCVURSQ0xFTkJSVGxDUXl4eFFrRkdPRUk3UVVGQlFTeE5RVWM1UWtNc2RVSkJTRGhDTEVkQlR6VkNSaXhQUVZBMFFpeERRVWM1UWtVc2RVSkJTRGhDTzBGQlFVRXNUVUZKT1VKRExHdERRVW80UWl4SFFVODFRa2dzVDBGUU5FSXNRMEZKT1VKSExHdERRVW80UWp0QlFVRkJMRTFCU3psQ1F5dzRRMEZNT0VJc1IwRlBOVUpLTEU5QlVEUkNMRU5CU3psQ1NTdzRRMEZNT0VJN1FVRkJRU3hOUVUwNVFrTXNWVUZPT0VJc1IwRlBOVUpNTEU5QlVEUkNMRU5CVFRsQ1N5eFZRVTQ0UWpzN1FVRlJhRU1zVFVGQlNTeFBRVUZQU2l4eFFrRkJVQ3hMUVVGcFF5eFhRVUZxUXl4SlFVRm5SQ3hQUVVGUFFTeHhRa0ZCVUN4TFFVRnBReXhUUVVGeVJpeEZRVUZuUnp0QlFVTTVSaXhWUVVGTkxFbEJRVWxMTEV0QlFVb3NRMEZCVlN4blJVRkJWaXhEUVVGT08wRkJRMFE3TzBGQlJVUXNUVUZCU1N4UFFVRlBTaXgxUWtGQlVDeExRVUZ0UXl4WFFVRnVReXhKUVVGclJDeFBRVUZQUVN4MVFrRkJVQ3hMUVVGdFF5eFRRVUY2Uml4RlFVRnZSenRCUVVOc1J5eFZRVUZOTEVsQlFVbEpMRXRCUVVvc1EwRkJWU3hyUlVGQlZpeERRVUZPTzBGQlEwUTdPMEZCUlVRc1RVRkRSVXdzZVVKQlFYbENMRWxCUVhwQ0xFbEJRMGRETERKQ1FVRXlRaXhKUVVRNVFpeEpRVVZIUkN3d1FrRkJNRUpETEhWQ1FVZ3ZRaXhGUVVsRk8wRkJRMEVzVlVGQlRTeEpRVUZKU1N4TFFVRktMRU5CUVZVc2JVWkJRVllzUTBGQlRqdEJRVU5FT3p0QlFVVkVMRTFCUTBVc1QwRkJUMGdzYTBOQlFWQXNTMEZCT0VNc1YwRkJPVU1zU1VGRFIwVXNWMEZCVjBVc2EwSkJSR1FzU1VGRlIwWXNWMEZCVjBVc2EwSkJRVmdzUTBGQk9FSkRMRlZCUVRsQ0xFdEJRVFpEVEN4clEwRkliRVFzUlVGSlJUdEJRVU5CTEZWQlFVMHNTVUZCU1Uwc1UwRkJTaXhEUVVGakxIbEtRVUZrTEVOQlFVNDdRVUZEUkRzN1FVRkZSQ3hOUVVORkxFOUJRVTlNTERoRFFVRlFMRXRCUVRCRUxGZEJRVEZFTEVsQlEwZERMRmRCUVZkRkxHdENRVVJrTEVsQlJVZEdMRmRCUVZkRkxHdENRVUZZTEVOQlFUaENSeXhYUVVFNVFpeExRVUU0UTA0c09FTkJTRzVFTEVWQlNVVTdRVUZEUVN4VlFVRk5MRWxCUVVsTExGTkJRVW9zUTBGQll5eHpTMEZCWkN4RFFVRk9PMEZCUTBRN1FVRkRSanM3UVVGRlJDeFRRVUZUUlN4dlFrRkJWQ3hQUVVFeVF6dEJRVUZCTEUxQlFWaFlMRTlCUVZjc1VVRkJXRUVzVDBGQlZ6dEJRVUZCTERSQ1FVdHlRMEVzVDBGTWNVTXNRMEZGZGtOTExGVkJSblZETzBGQlFVRXNUVUZGZGtOQkxGVkJSblZETEhWRFFVVXhRaXhGUVVZd1FqdEJRVUZCTEUxQlIzWkRSaXhyUTBGSWRVTXNSMEZMY2tOSUxFOUJUSEZETEVOQlIzWkRSeXhyUTBGSWRVTTdRVUZCUVN4TlFVbDJRME1zT0VOQlNuVkRMRWRCUzNKRFNpeFBRVXh4UXl4RFFVbDJRMGtzT0VOQlNuVkRPenM3UVVGUGVrTXNUVUZCVFZFc2RVSkJRWFZDTEU5QlFVOVVMR3REUVVGUUxFdEJRVGhETEZkQlFUTkZPMEZCUTBFc1RVRkJUVlVzTUVKQlFUQkNMRTlCUVU5VUxEaERRVUZRTEV0QlFUQkVMRmRCUVRGR08wRkJRMEVzVFVGQlRVY3NjVUpCUVhGQ1N5eDNRa0ZCZDBKRExIVkNRVUY0UWl4blEwRkZia0pFTEhkQ1FVRjNRanRCUVVNeFFrb3NaMEpCUVZrc1EwRkJReXhEUVVGRFREdEJRVVJaTEVkQlJrd3NSVUZMYmtKVkxESkNRVUV5UWp0QlFVTTNRa2dzYVVKQlFXRXNRMEZCUXl4RFFVRkRUanRCUVVSakxFZEJURklzU1VGVGRrSXNTVUZVU2p0QlFWUjVReXhOUVcxQ1VGVXNZVUZ1UWs4c1IwRnRRbGRVTEZWQmJrSllMRU5CYlVKcVExVXNkMEpCYmtKcFF6czdRVUZ2UW5wRExFMUJRVTFCTERKQ1FVRXlRa1FzWjBKQlFXZENPMEZCUXk5RFJTeHBRMEZCTmtJc1EwRkJReXhEUVVGRFJpeGpRVUZqUlR0QlFVUkZMRWRCUVdoQ0xFZEJSVGRDTEV0QlJrbzdPMEZCU1VFc2MwTkJRMHRZTEZWQlJFdzdRVUZGUlZrc01rTkJRMHRhTEZkQlFWZFpMRkZCUkdoQ0xFTkJSa1k3UVVGTFJVTTdRVUZEUlVNc2QwSkJRV3RDTzBGQlJIQkNMRTlCUlV0a0xGZEJRVmRoTEdWQlJtaENPMEZCVEVZc1MwRlRUVmdzYzBKQlFYTkNMRVZCUVVWQkxITkRRVUZHTEVWQlZEVkNPMEZCVlVWUk8wRkJWa1k3UVVGWlJEczdRVUZGUkN4VFFVRlRTeXhYUVVGVUxFTkJRWEZDUXl4SlFVRnlRaXhGUVVFeVFqdEJRVU42UWl4TlFVRkpRU3hMUVVGTFF5eFJRVUZNTEV0QlFXdENMRTFCUVhSQ0xFVkJRVGhDTzBGQlF6VkNMRmRCUVU5RUxFbEJRVkE3UVVGRFJEdEJRVU5FTEZOQlFVOUJMRXRCUVV0RkxGRkJRVm83UVVGRFJEczdRVUZGUkN4VFFVRlRReXh0UWtGQlZDeERRVUUyUW5CRExFOUJRVGRDTEVWQlFYTkRPMEZCUTNCRExFMUJRVWxCTEZGQlFWRldMRWxCUVZJc1JVRkJZeXRETEUxQlFXUXNTMEZCZVVJc1EwRkJOMElzUlVGQlowTTdRVUZET1VJc1ZVRkJUU3hKUVVGSmJrSXNTMEZCU2l4RFFVRlZMRFpGUVVGV0xFTkJRVTQ3UVVGRFJEdEJRVU5FTEUxQlFVbHNRaXhSUVVGUlZpeEpRVUZTTEUxQlFXdENWU3hQUVVGMFFpeEZRVUVyUWp0QlFVTTNRaXhYUVVGUFFTeFJRVUZSVUN4VlFVRlNMRVZCUVc5Q0xFTkJRWEJDTEVOQlFWQTdRVUZEUkR0QlFVTkVMRk5CUVU5UExGRkJRVkZXTEVsQlFWSXNSVUZCWTBvc1NVRkJaQ3hEUVVGUU8wRkJRMFE3TzBGQlJVUXNVMEZCVTI5RUxGZEJRVlFzUTBGQmNVSjBReXhQUVVGeVFpeEZRVUU0UW1sRExFbEJRVGxDTEVWQlFXOURPMEZCUTJ4RExGTkJRVThzYVVOQlFXTkJMRWxCUVdRc1JVRkJiMEpITEc5Q1FVRnZRbkJETEU5QlFYQkNMRU5CUVhCQ0xFTkJRVkE3UVVGRFJEczdRVUZGUkN4VFFVRlRkVU1zWlVGQlZDeERRVUY1UW5aRExFOUJRWHBDTEVWQlFXdERkME1zUzBGQmJFTXNSVUZCZVVNN1FVRkRka01zVFVGQlNTeERRVUZEUXl4TlFVRk5ReXhQUVVGT0xFTkJRV05HTEV0QlFXUXNRMEZCVEN4RlFVRXlRanRCUVVONlFpd3lRa0ZCVjNoRExFOUJRVmdzUlVGQmIwSmtMRWxCUVhCQ0xFVkJRVEJDYzBRc1MwRkJNVUk3UVVGRFFTd3lRa0ZCVjNoRExFOUJRVmdzUlVGQmIwSmlMRXRCUVhCQ0xFVkJRVEpDTEVOQlFVTnhSQ3hMUVVGRUxFTkJRVE5DTzBGQlEwUXNSMEZJUkN4TlFVZFBPMEZCUTB3c01rSkJRVmQ0UXl4UFFVRllMRVZCUVc5Q1pDeEpRVUZ3UWl4RlFVRXdRbk5FTEUxQlFVMHNRMEZCVGl4RFFVRXhRanRCUVVOQkxESkNRVUZYZUVNc1QwRkJXQ3hGUVVGdlFtSXNTMEZCY0VJc1JVRkJNa0p4UkN4TFFVRXpRanRCUVVORU8wRkJRMFFzZVVKQlFWZDRReXhQUVVGWUxFVkJRVzlDTEZGQlFYQkNMRVZCUVRoQ1FTeFJRVUZSWWl4TFFVRlNMRVZCUVdWclJDeE5RVUUzUXp0QlFVTkVPenRCUVVWRUxGTkJRVk5OTEd0RFFVRlVMRU5CUVRSRFF5eFRRVUUxUXl4RlFVRjFSRU1zUzBGQmRrUXNSVUZCT0VSRExGTkJRVGxFTEVWQlFYbEZReXhMUVVGNlJTeEZRVUZuUmp0QlFVTTVSU3hUUVVGUExFTkJRVU1zY1VOQlFXRklMRk5CUVdJc1JVRkJkMEpETEV0QlFYaENMRU5CUVVRc1NVRkJiVU1zUTBGQlF5eHhRMEZCWVVNc1UwRkJZaXhGUVVGM1FrTXNTMEZCZUVJc1EwRkJNME03UVVGRFJEczdRVUZGUkN4VFFVRlRReXhsUVVGVUxFTkJRWGxDUXl4UlFVRjZRaXhGUVVGdFF6dEJRVU5xUXl4VFFVRlBRU3haUVVGWlFTeFRRVUZUUXl4dlFrRkJOVUk3UVVGRFJEczdRVUZGUkN4VFFVRlRjRUlzWlVGQlZDeERRVUY1UWtjc1NVRkJla0lzUlVGQkswSnJRaXhUUVVFdlFpeEZRVUV3UTBNc1VVRkJNVU1zUlVGQmIwUTdRVUZCUVN4TlFVTXhRMGdzVVVGRU1FTXNSMEZEV21oQ0xFbEJSRmtzUTBGRE1VTm5RaXhSUVVRd1F6dEJRVUZCTEUxQlF6RkNTU3hUUVVRd1FpeEhRVU5hY0VJc1NVRkVXU3hEUVVOb1EzRkNMRWxCUkdkRE96dEJRVVZzUkN4TlFVRk5ReXhuUWtGQlowSXNPRUpCUVd0Q2RFSXNTVUZCYkVJc1EwRkJkRUk3UVVGRFFUdEJRVU5CTzBGQlEwRXNUVUZCU1N4UlFVRlBiMElzVlVGQlZVY3NhVUpCUVdwQ0xFMUJRWFZETEZGQlFUTkRMRVZCUVhGRU8wRkJRMjVFTzBGQlEwRkRMRmxCUVZGRExFbEJRVklzVVVGRFMwZ3NZVUZFVER0QlFVZEJMRmRCUVU4c1JVRkJVRHRCUVVORU8wRkJRMFE3UVVGRFFUdEJRVU5CTEUxQlFVMUpMR1ZCUVdWV0xGTkJRVk51UWl4bFFVRlVMRVZCUVhKQ08wRkJRMEU0UWl4VFFVRlBReXhKUVVGUUxFTkJRVmxHTEZsQlFWb3NSVUZCTUVKSExFOUJRVEZDTEVOQlFXdERMRlZCUVVORExFZEJRVVFzUlVGQlV6dEJRVU42UXl4UlFVRkpMRVZCUVVWQkxFOUJRVTlXTEZWQlFWVkhMR2xDUVVGdVFpeERRVUZLTEVWQlFUSkRPMEZCUTNwRExGbEJRVTBzU1VGQlNYUkRMRXRCUVVvc1VVRkRSSEZETEdGQlJFTXNlVU5CUTNkRFVTeEhRVVI0UXl3MlEwRkJUanRCUVVkRU8wRkJRMFlzUjBGT1JEdEJRVTlCTEUxQlFVa3NUMEZCVDFnc1UwRkJVMWtzWTBGQmFFSXNTMEZCYlVNc1ZVRkJka01zUlVGQmJVUTdRVUZEYWtSYUxHRkJRVk5aTEdOQlFWUXNRMEZCZDBKWUxGVkJRVlZITEdsQ1FVRnNReXhGUVVGeFJFY3NXVUZCY2tRc1JVRkJiVVVzWlVGQmJrVXNSVUZCYjBaU0xGTkJRWEJHTzBGQlEwUTdRVUZEUkN4VFFVRlBVU3haUVVGUU8wRkJRMFE3TzBGQlJVUXNVMEZCVTAwc2FVTkJRVlFzUTBGQk1rTjZRaXhMUVVFelF5eEZRVUZyUkRCQ0xFOUJRV3hFTEVWQlFUSkVPMEZCUTNwRUxFMUJRMFVzUTBGQlF5eHhRMEZCZVVJeFFpeExRVUY2UWl4RlFVRm5RekJDTEU5QlFXaERMRU5CUVVRc1NVRkRSeXhEUVVGRE1VSXNUVUZCVFdNc1NVRkJUaXhEUVVGWFlTeFRRVVJtTEVsQlJVY3NUMEZCVHpOQ0xFMUJRVTFqTEVsQlFVNHNRMEZCVjJFc1UwRkJXQ3hEUVVGeFFuSkRMR1ZCUVRWQ0xFdEJRV2RFTEZWQlNISkVMRVZCU1VVN1FVRkRRU3hYUVVGUExFbEJRVkE3UVVGRFJEczdRVUZGUkN4VFFVRlBMSE5DUVVGVlZTeE5RVUZOWXl4SlFVRk9MRU5CUVZkaExGTkJRWEpDTEVWQlFXZERMR2xDUVVGb1F5eERRVUZRTzBGQlEwUTdPMEZCUlVRc1UwRkJVME1zYzBKQlFWUXNRMEZCWjBOR0xFOUJRV2hETEVWQlFYbERiRVVzVDBGQmVrTXNSVUZCYTBScFJDeFJRVUZzUkN4RlFVRTBSRzlDTEZsQlFUVkVMRVZCUVRCRlF5eHJRa0ZCTVVVc1JVRkJPRVk3UVVGRE5VWXNUVUZCVFd4Q0xGZEJRVmR3UkN4UlFVRlJXaXhSUVVGU0xFTkJRV3BDTzBGQlEwRTdRVUZEUVN4TlFVRkpPRVVzVVVGQlVYUkVMRTlCUVZJc1EwRkJaMEl5UkN4cFFrRkJhRUlzUzBGQmMwTXNVVUZCTVVNc1JVRkJiMFE3UVVGQlJUdEJRVUZUTzBGQlF5OUVMRTFCUVVsRUxHdENRVUZLTEVWQlFYZENPMEZCUTNSQ0xESkNRVUZYZEVVc1QwRkJXQ3hGUVVGdlFrNHNZVUZCY0VJc1JVRkJiVU0wUlN4dFFrRkJiVUpGTEd0Q1FVRnVRaXhGUVVGdVF6dEJRVU5CUml4MVFrRkJiVUpITEU5QlFXNUNPMEZCUTBRc1IwRklSQ3hOUVVkUExFbEJRVWtzVDBGQlQzaENMRk5CUVZOdVFpeGxRVUZvUWl4TFFVRnZReXhWUVVGNFF5eEZRVUZ2UkR0QlFVTjZSRHRCUVVOQk8wRkJRMEVzVVVGQlRUUkRMR2RDUVVGblFpeERRVUZETVVVc1VVRkJVV1FzU1VGQlVpeERRVUZFTEVWQlFXZENlVVlzVFVGQmFFSXNRMEZCZFVKeVF5eFpRVUZaZEVNc1QwRkJXaXhGUVVGeFFrRXNVVUZCVVdRc1NVRkJVaXhEUVVGeVFpeERRVUYyUWl4RFFVRjBRanRCUVVOQkxGRkJRVTE1UlN4bFFVRmxOMElzWjBKQlFXZENkVU1zV1VGQmFFSXNSVUZCT0VKTExHRkJRVGxDTEVWQlFUWkRkRUlzVVVGQk4wTXNRMEZCY2tJN1FVRkRRU3d5UWtGQlYzQkVMRTlCUVZnc1JVRkJiMEpPTEdGQlFYQkNMRVZCUVcxRGFVVXNXVUZCYmtNN1FVRkRSQ3hIUVU1TkxFMUJUVUU3UVVGRFRDd3lRa0ZCVnpORUxFOUJRVmdzUlVGQmIwSk9MR0ZCUVhCQ0xFVkJRVzFETEVsQlFXNURPMEZCUTBRN1FVRkRSanM3UVVGRlJDeFRRVUZUYTBZc01rSkJRVlFzUTBGQmNVTXpReXhKUVVGeVF5eEZRVUV5UTJNc1MwRkJNME1zUlVGQmEwUTdRVUZCUVN4TlFVTjRRM0JDTEhkQ1FVUjNReXhIUVVOWVRTeExRVUZMY1VJc1NVRkVUU3hEUVVONFF6TkNMSGRDUVVSM1F6czdPMEZCUjJoRUxFMUJRVWtzVDBGQlQwRXNkMEpCUVZBc1MwRkJiME1zVlVGQmVFTXNSVUZCYjBRN1FVRkRiRVE3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVeHJSQ3hSUVUweFEzTkNMRkZCVGpCRExFZEJUVGRDYUVJc1NVRk9Oa0lzUTBGTk1VTm5RaXhSUVU0d1F6czdRVUZCUVN4eFFrRlBPVUlzYzBKQlEyeENRU3hSUVVSclFpeEZRVVZzUWl4MVFrRkdhMElzUlVGSGJFSXNWVUZCUXpSQ0xGZEJRVVE3UVVGQlFUdEJRVUZwUWl4cFFrRkJVME1zY1VKQlFWUXNSMEZCZDBNN1FVRkRka1EzUWl4dFFrRkJVMFlzUzBGQlZDeEhRVUZwUWtFc1MwRkJha0k3TzBGQlJIVkVMRFJEUVVGT1owTXNTVUZCVFR0QlFVRk9RU3huUWtGQlRUdEJRVUZCT3p0QlFVVjJSQ3hqUVVGTlF5eFpRVUZaU0N4WlFVRlpTU3hMUVVGYUxFTkJRV3RDYUVNc1VVRkJiRUlzUlVGQk5FSTRRaXhKUVVFMVFpeERRVUZzUWp0QlFVWjFSQ3hqUVVjNVEwY3NVMEZJT0VNc1IwRkhha05JTEVsQlNHbERPenRCUVVsMlJEbENMRzFDUVVGVFJpeExRVUZVTEVkQlFXbENiVU1zVTBGQmFrSTdRVUZEUVZRN1FVRkRRU3hwUWtGQlQwOHNVMEZCVUR0QlFVTkVPenRCUVZCRUxHVkJRVEJDUml4eFFrRkJNVUk3UVVGQlFUdEJRVUZCTEV0QlNHdENMRU5CVURoQ08wRkJRVUVzVVVGUE1VTk1MRTlCVURCRExHTkJUekZEUVN4UFFWQXdRenRCUVcxQ2JrUTdRVUZEUmpzN1FVRkZSRHM3T3pzN096czdPenRCUVZWQkxGTkJRVk5WTEZWQlFWUXNRMEZCYjBKdVJpeFBRVUZ3UWl4RlFVRTJRbTlHTEUxQlFUZENMRVZCUVhGRGJFSXNUMEZCY2tNc1JVRkJPRU03UVVGRE5VTXNUVUZCVFdwRExFOUJRVTlxUXl4UlFVRlJaQ3hKUVVGU0xFTkJRV0k3UVVGRFFTeE5RVUZOYlVjc1ZVRkJWWEJFTEZGQlFWRnBReXhSUVVGUmIwSXNZVUZCVWl4RFFVRnpRbkpFTEVsQlFYUkNMRU5CUVhoQ08wRkJRMEVzVFVGQlNXcERMRkZCUVZGelJDeEpRVUZTTEU5QlFXMUNPRUlzVFVGQmRrSXNSVUZCSzBJN1FVRkROMElzVjBGQlQzQkdMRkZCUVZGMVJpeEpRVUZTTEVWQlFWQTdRVUZEUkR0QlFVTkVMRTFCUVVsR0xGZEJRVmNzY1VOQlFYbENRU3hQUVVGNlFpeEZRVUZyUTI1Q0xFOUJRV3hETEVOQlFXWXNSVUZCTWtRN1FVRkRla1FzVjBGQlQybENMRmRCUVZkdVJpeFJRVUZSZFVZc1NVRkJVaXhGUVVGWUxFVkJRVEpDU0N4TlFVRXpRaXhGUVVGdFEyeENMRTlCUVc1RExFTkJRVkE3UVVGRFJEdEJRVU5FTEUxQlFVMXpRaXhYUVVGWGVFWXNVVUZCVVhkR0xGRkJRVklzUlVGQmFrSTdRVUZEUVN4UFFVRkxMRWxCUVVsRExFbEJRVWtzUTBGQllpeEZRVUZuUWtFc1NVRkJTVVFzVTBGQlUyNUVMRTFCUVRkQ0xFVkJRWEZEYjBRc1MwRkJTeXhEUVVFeFF5eEZRVUUyUXp0QlFVTXpReXhSUVVGTlF5eFJRVUZSVUN4WFFVRlhTeXhUUVVGVFJ5eEZRVUZVTEVOQlFWbEdMRU5CUVZvc1EwRkJXQ3hGUVVFeVFrd3NUVUZCTTBJc1JVRkJiVU5zUWl4UFFVRnVReXhEUVVGa08wRkJRMEVzVVVGQlNTeFBRVUZQZDBJc1MwRkJVQ3hMUVVGcFFpeFhRVUZ5UWl4RlFVRnJRenRCUVVOb1F5eGhRVUZQUVN4TFFVRlFPMEZCUTBRN1FVRkRSanRCUVVORUxGTkJRVTlGTEZOQlFWQTdRVUZEUkRzN1FVRkZSRHM3T3pzN096czdPenRCUVZWQkxGTkJRVk5ETEN0Q1FVRlVMRU5CUVhsRE4wWXNUMEZCZWtNc1JVRkJhMFJyUlN4UFFVRnNSQ3hGUVVFeVJEdEJRVU42UkN4TlFVRk5ORUlzWVVGQllWZ3NWMEZCVjI1R0xFOUJRVmdzUlVGQmIwSkJMRkZCUVZGSUxGZEJRVklzUTBGQmNFSXNSVUZCTUVOeFJTeFBRVUV4UXl4RFFVRnVRanRCUVVOQkxFMUJRVWtzUTBGQlF6UkNMRlZCUVV3c1JVRkJhVUk3UVVGRFppeFZRVUZOTEVsQlFVazFSU3hMUVVGS0xFTkJRVlVzSzBOQlFWWXNRMEZCVGp0QlFVTkVPMEZCUTBRc1UwRkJUenRCUVVOTU5rVXNiVUpCUVdWRUxGZEJRVmQyUnl4UFFVRllMRVZCUVc5Q2VVY3NUMEZFT1VJN1FVRkZURU1zYjBKQlFXZENTQ3hYUVVGWGFFY3NaVUZCV0R0QlFVWllMRWRCUVZBN1FVRkpSRHM3UVVGRlJEczdPenM3T3pzN096czdPMEZCV1VFc1UwRkJVMjlITEd0Q1FVRlVMRU5CUVRSQ01VUXNTMEZCTlVJc1JVRkJiVU15UkN4SlFVRnVReXhGUVVGNVEwTXNZVUZCZWtNc1JVRkJkMFJ3Unl4UFFVRjRSQ3hGUVVGcFJUdEJRVU12UkN4TlFVRk5XU3hWUVVGVkxIZENRVUZaZDBZc1lVRkJXaXhEUVVGb1FqdEJRVU5CTEUxQlFVMXNReXhWUVVGVkxEWkNRVUZYYTBNc1lVRkJXQ3hEUVVGb1FqdEJRVU5CTEhsQ1FVRlhlRVlzVDBGQldDeEZRVUZ2UW1Rc1pVRkJjRUlzUlVGQmNVTnpSeXhqUVVGamRFY3NaVUZCWkN4RFFVRnlRenRCUVVOQkxFMUJRVWx4Unl4UlFVRlJMRU5CUVVNc09FSkJRV3RDZGtZc1VVRkJVWGxHTEdsQ1FVRXhRaXhGUVVFMlEyNURMRTlCUVRkRExFTkJRV0lzUlVGQmIwVTdRVUZEYkVVc1YwRkJUM1JFTEU5QlFWQTdRVUZEUkR0QlFVTkVMRTFCUVVrc1QwRkJUM05FTEZGQlFWRnZReXg1UWtGQlppeExRVUUyUXl4VlFVRnFSQ3hGUVVFMlJEdEJRVU16UkN4VlFVRk5MRWxCUVVscVJpeFRRVUZLTEVOQlFXTXNjMFZCUVdRc1EwRkJUanRCUVVORU96dEJRVlE0UkN3NFFrRlZja0kyUXl4UlFVRlJiME1zZVVKQlFWSXNRMEZCYTBNNVJDeExRVUZzUXl4RlFVRjVRelZDTEU5QlFYcERMRU5CVm5GQ08wRkJRVUVzVFVGVmFrUXlSaXhYUVZacFJDeDVRa0ZWZGtSMFJTeEpRVloxUkR0QlFVRkJMRTFCVlhCRGRVVXNWVUZXYjBNc2VVSkJWWEJEUVN4VlFWWnZRenRCUVZjdlJEczdPMEZCUTBFc1RVRkJUVWdzYjBKQlFXOUNMRWxCUVVsSkxIZENRVUZLTEVOQlFUWkNSaXhYUVVFM1FpeEZRVUV3UTNaSExFOUJRVEZETEVWQlFXMUVkMGNzVlVGQmJrUXNRMEZCTVVJN08wRkJXaXRFTERoQ1FXZENNMFJZTEdkRFFVRm5RMUVzYVVKQlFXaERMRVZCUVcxRWJrTXNUMEZCYmtRc1EwRm9RakpFTzBGQlFVRXNUVUZqT1VOM1F5dzRRa0ZrT0VNc2VVSkJZemRFV0N4aFFXUTJSRHRCUVVGQkxFMUJaVGREV1N3clFrRm1Oa01zZVVKQlpUZEVWaXhqUVdZMlJEczdRVUZwUWk5RUxIbENRVUZYYWtjc1QwRkJXQ3hGUVVGdlFrd3NhMEpCUVhCQ0xFVkJRWGRETUVjc2FVSkJRWGhETzBGQlEwRXNjME5CUTB0NlJpeFBRVVJNTzBGQlJVVnZSaXd3UTBGRFMzQkdMRkZCUVZGdlJpeFBRVVJpTEVWQlJVdFZMRGhDUVVaTU8wRkJSa1lzUzBGTlJ6VkhMR1ZCVGtnc1JVRk5jVUkyUnl3clFrRk9ja0k3UVVGUlJEczdRVUZIUkN4VFFVRlRReXg1UWtGQlZDeERRVUZ0UXpWSExFOUJRVzVETEVWQlFUQkVPMEZCUVVFc1RVRkJaRmtzVDBGQll5eDFSVUZCU2l4RlFVRkpPenRCUVVONFJDeE5RVUZOYVVjc05FTkJRMFEzUnl4UlFVRlJWQ3hQUVVGU0xFTkJSRU1zUlVGRlJIRkNMRTlCUmtNN1FVRkhTbTlHTEdGQlFWTndSaXhSUVVGUmIwWXNUMEZCVWl4cFEwRkRTbWhITEZGQlFWRlVMRTlCUVZJc1JVRkJhVUo1Unl4UFFVUmlMRVZCUlVwb1J5eFJRVUZSVml4SlFVRlNMRVZCUVdOSkxHRkJRV1FzUTBGR1NUdEJRVWhNTEVsQlFVNDdRVUZSUVN4NVFrRkJWMjFJTEZsQlFWZ3NSVUZCZVVJdlJ5eGxRVUY2UWl4RlFVRXdRMFVzVVVGQlVWWXNTVUZCVWl4RlFVRmpVU3hsUVVGa0xFTkJRVEZETzBGQlEwRXNVMEZCVHl0SExGbEJRVkE3UVVGRFJEczdRVUZIUkRzN096dEpRVWROUXl4ak8wRkJRMG9zTUVKQlFWbDBSU3hMUVVGYUxFVkJRVzFDTWtRc1NVRkJia0lzUlVGQk5rTTdRVUZCUVRzN1FVRkJRU3hSUVVGd1FrTXNZVUZCYjBJc2RVVkJRVW9zUlVGQlNUczdRVUZCUVRzN1FVRkRNME42Uml4dlFrRkJaMEo1Uml4aFFVRm9RanM3UVVGRlFTeFJRVUZOZUVZc1ZVRkJWWE5HTEcxQ1FVRnRRakZFTEV0QlFXNUNMRVZCUVRCQ01rUXNTVUZCTVVJc1JVRkJaME5ETEdGQlFXaERMRVZCUVN0RExFbEJRUzlETEVOQlFXaENPMEZCUTBFc1VVRkJUV3hETEZWQlFWVXNOa0pCUVZkMFJDeFBRVUZZTEVOQlFXaENPMEZCUTBFc1VVRkJUVXNzWVVGQllVMHNjVUpCUVhGQ01rTXNUMEZCY2tJc1EwRkJia0k3TzBGQlJVRTdRVUZEUVN4UlFVRkpMRU5CUVVOcFF5eEpRVUZNTEVWQlFWYzdRVUZEVkN4VlFVRkpMRU5CUVVOcVF5eFJRVUZSTmtNc1kwRkJVaXhEUVVGMVFuWkZMRXRCUVhaQ0xFTkJRVXdzUlVGQmIwTTdRVUZEYkVNc1kwRkJUU3hKUVVGSmJrSXNVMEZCU2l4RFFVRmpMRFpEUVVGa0xFTkJRVTQ3UVVGRFJEczdRVUZGUkN4VlFVRk5hVVFzY1VKQlFYRkNja1FzVjBGQlYyRXNaVUZCV0N4RFFVRXlRa01zWjBKQlFUTkNMRWRCUTNaQ2EwTXNhME5CUVd0RGVrSXNTMEZCYkVNc1JVRkJlVU13UWl4UFFVRjZReXhEUVVSMVFpeEhRVVYyUWl4SlFVWktPMEZCUjBFc05rSkJRVmNzU1VGQldDeEZRVUZwUWpWRkxFbEJRV3BDTEVWQlFYVkNMRWxCUVhaQ08wRkJRMEVzTmtKQlFWY3NTVUZCV0N4RlFVRnBRa1FzVlVGQmFrSXNSVUZCTmtKdFJDeExRVUUzUWp0QlFVTkJMRlZCUVUxWkxGZEJRVmRqTEZGQlFWRTRReXhqUVVGU0xEUkNRVUY1UWtNc1RVRkJUU3hUUVVFdlFpeEpRVUUyUTNKSExFOUJRVGRETEVWQlFXcENPMEZCUTBFc05rSkJRVmNzU1VGQldDeEZRVUZwUW5oQ0xGRkJRV3BDTEVWQlFUSkNaMFVzVVVGQk0wSTdRVUZEUVN4VlFVRk5Oa01zYVVKQlFXbENMRWxCUVVscFFpeEhRVUZLTEVOQlFWRjBSeXhSUVVGUlpDeGxRVUZTTEV0QlFUUkNMRVZCUVhCRExFTkJRWFpDTzBGQlEwRXNWMEZCUzFZc1VVRkJUQ3hGUVVGbEswZ3NUVUZCWml4RFFVRnpRak5GTEV0QlFYUkNMRVZCUVRaQ05VSXNVVUZCVVc5R0xFOUJRWEpETEVWQlFUaERMRVZCUVVWRExEaENRVUZHTEVWQlFUbERPMEZCUTBFc1ZVRkJUVFZDTEdWQlFXVXNTMEZCUzJwR0xGRkJRVXdzUlVGQlpXZEpMRTlCUVdZc1JVRkJja0k3UVVGRFFUZEZMSE5DUVVGblFpeEpRVUZvUWl4RlFVRnpRbEFzV1VGQldYRkRMRmxCUVZvc1EwRkJkRUk3UVVGRFFTdzJRa0ZCVnl4SlFVRllMRVZCUVdsQ09VVXNUMEZCYWtJc1JVRkJNRUp4UWl4UFFVRXhRanRCUVVOQkxEWkNRVUZYTEVsQlFWZ3NSVUZCYVVKa0xHVkJRV3BDTEVWQlFXdERiVWNzWTBGQmJFTTdPMEZCYWtKVExGVkJiVUpFYUVRc1VVRnVRa01zUjBGdFFsbHZRaXhaUVc1Q1dpeERRVzFDUkhCQ0xGRkJia0pET3p0QlFXOUNWQ3hWUVVGSlFTeFpRVUZaTEVOQlFVTnlReXhSUVVGUlJTeDFRa0ZCZWtJc1JVRkJhMFE3UVVGRGFFUTdRVUZEUVN4WlFVRkpSeXhYUVVGWFJTeHJRa0ZCV0N4RFFVRTRRa01zVlVGQk9VSXNTVUZCTkVNc1EwRkJRelpDTEZOQlFWTjZSQ3hUUVVGVUxFTkJRV3BFTEVWQlFYTkZPMEZCUTNCRkxHbERRVUZYZVVRc1VVRkJXQ3hGUVVGeFFucEVMRk5CUVhKQ0xFVkJRV2REZVVRc1UwRkJVM0JDTEZGQlFYcERPMEZCUTBGdlFpeHRRa0ZCVTNCQ0xGRkJRVlFzUjBGQmIwSXNWVUZCUTNkR0xFOUJRVVE3UVVGQlFTeG5Ra0ZCVlVNc1VVRkJWaXgxUlVGQmNVSXhRaXhUUVVGeVFqdEJRVUZCTEcxQ1FVRnRReXhOUVVGTEwwUXNVVUZCVEN4cFEwRkRha1I1Uml4WlFVRlpMRWxCUVZvc1IwRkJiVUlzUTBGQlEwUXNUMEZCUkN4RFFVRnVRaXhIUVVFclFpeERRVUZEUVN4UFFVRkVMRVZCUVZWRExGRkJRVllzUTBGRWEwSXNSVUZCYmtNN1FVRkJRU3hYUVVGd1FqdEJRVWRFT3p0QlFVVkVMRmxCUVVrc1QwRkJUM0pGTEZOQlFWTnpSU3hwUWtGQmFFSXNTMEZCYzBNc1ZVRkJNVU1zUlVGQmMwUTdRVUZEY0VRc1pVRkJTMjVKTEZGQlFVd3NSVUZCWlc5SkxHTkJRV1lzUTBGQk9FSXNXVUZCVFR0QlFVTnNRM1pGTEhGQ1FVRlRjMFVzYVVKQlFWUTdRVUZEUkN4WFFVWkVPMEZCUjBRN1FVRkRSRzVFTEN0Q1FVRjFRa1lzVDBGQmRrSXNSVUZCWjBNc1NVRkJhRU1zUlVGQmMwTnFRaXhSUVVGMFF5eEZRVUZuUkc5Q0xGbEJRV2hFTEVWQlFUaEVReXhyUWtGQk9VUTdRVUZEUkR0QlFVTklPMEZCUTBNc1MwRnlRMFFzVFVGeFEwODdRVUZEVEN3MlFrRkJWeXhKUVVGWUxFVkJRV2xDYUVZc1NVRkJha0lzUlVGQmRVSTJSeXhKUVVGMlFqdEJRVU5CTERaQ1FVRlhMRWxCUVZnc1JVRkJhVUk1Unl4VlFVRnFRaXhGUVVFMlFpeEpRVUUzUWp0QlFVTkJMRFpDUVVGWExFbEJRVmdzUlVGQmFVSkVMRkZCUVdwQ0xFVkJRVEpDSzBjc1MwRkJTeTlITEZGQlFVd3NRMEZCTTBJN1FVRkRRVzFFTEhOQ1FVRm5RaXhKUVVGb1FpeEZRVUZ6UWtNc1MwRkJkRUk3UVVGRFFTdzJRa0ZCVnl4SlFVRllMRVZCUVdsQ2FrUXNUMEZCYWtJc1JVRkJNRUkwUnl4TFFVRkxOVWNzVDBGQlRDeERRVUV4UWp0QlFVTkJMRFpDUVVGWExFbEJRVmdzUlVGQmFVSkZMRlZCUVdwQ0xFVkJRVFpDTUVjc1MwRkJTMmhJTEV0QlFVd3NRMEZCTjBJN1FVRkRRU3cyUWtGQlZ5eEpRVUZZTEVWQlFXbENWeXhsUVVGcVFpeEZRVUZyUXl4SlFVRnNRenRCUVVORU8wRkJRMFk3TzBGQlJVUTdPenM3T3pzN096czdjMEpCUzA4N1FVRkRUQ3hsUVVGUExFdEJRVXRTTEVsQlFVd3NRMEZCVUR0QlFVTkVPenM3T3p0QlFVVkVPenM3T3pzN096czdhVU5CUzJ0Q08wRkJRMmhDTEZsQlFVa3NTMEZCU3l0RExFMUJRVXdzUzBGQlowSXNRMEZCY0VJc1JVRkJkVUk3UVVGRGNrSXNaMEpCUVUwc1NVRkJTVzVDTEV0QlFVb3NRMEZCVlN4eFJVRkJWaXhEUVVGT08wRkJRMFE3UVVGRFJDeFpRVUZKTEV0QlFVczFRaXhKUVVGTUxFMUJRV1VzU1VGQmJrSXNSVUZCZVVJN1FVRkRka0lzWlVGQlMyMUpMRTFCUVV3N1FVRkRSRHRCUVVORUxHVkJRVThzUzBGQlMzWkpMRWxCUVV3c1EwRkJVRHRCUVVORU96czdPenRCUVVWRU96czdPenM3T3pzN2EwTkJTMjFDTzBGQlEycENMRmxCUVVrc1MwRkJTMGtzU1VGQlRDeE5RVUZsTEVsQlFXWXNTVUZCZFVJc1MwRkJTeXRETEUxQlFVd3NTMEZCWjBJc1EwRkJNME1zUlVGQk9FTTdRVUZETlVNc1pVRkJTMjlHTEUxQlFVdzdRVUZEUkR0QlFVTkVMR1ZCUVU4c1MwRkJTM1JKTEV0QlFVd3NRMEZCVUR0QlFVTkVPenM3T3p0QlFVVkVPenM3T3pzN096czdORUpCUzJFN1FVRkJRVHM3UVVGRFdDeGxRVUZQTEV0QlFVdDFTU3hOUVVGTUxFTkJRVmtzV1VGQldpeEZRVUV3UWl4VlFVRkRja2dzUTBGQlJEdEJRVUZCTEdsQ1FVRlBMRFpDUVVGWExFOUJRVXRrTEU5QlFVd3NRMEZCV0N4RlFVRXdRaXRHTEdGQlFURkNMRU5CUVhkRGFrWXNRMEZCZUVNc1EwRkJVRHRCUVVGQkxGTkJRVEZDTEVOQlFWQTdRVUZEUkRzN096czdRVUZGUkRzN096czdPenM3T3paQ1FVdGpPMEZCUVVFN08wRkJRMW9zWlVGQlR5eExRVUZMU1N4blFrRkJUQ3hIUVVGM1FtdElMRWRCUVhoQ0xFTkJRVFJDTEZWQlFVTjBTQ3hEUVVGRU8wRkJRVUVzYVVKQlFVOHNOa0pCUVZjc1QwRkJTMlFzVDBGQlRDeERRVUZZTEVWQlFUQkNLMFlzWVVGQk1VSXNRMEZCZDBOcVJpeERRVUY0UXl4RFFVRlFPMEZCUVVFc1UwRkJOVUlzUTBGQlVEdEJRVU5FT3pzN096dEJRVVZFT3pzN096dDVRa0ZEVlR0QlFVTlNMR05CUVUwc1NVRkJTV0VzUzBGQlNpeERRVUZWTERSR1FVRldMRU5CUVU0N1FVRkRSRHM3T3pzN1FVRkZSRHM3T3pzN01FSkJRMWM3UVVGRFZDeGpRVUZOTEVsQlFVbEJMRXRCUVVvc1EwRkJWU3c0UmtGQlZpeERRVUZPTzBGQlEwUTdPenM3TzBGQlJVUTdPenM3T3pzN096czdPenM3T3pzN096QkNRV0ZYTzBGQlExUXNXVUZCU1N4TFFVRkxOVUlzU1VGQlRDeE5RVUZsTEVsQlFXNUNMRVZCUVhsQ08wRkJRM1pDTEdkQ1FVRk5MRWxCUVVrMFFpeExRVUZLTEVOQlFWVXNNa1JCUVZZc1EwRkJUanRCUVVORU8wRkJRMFFzWlVGQlR5eExRVUZMT1VJc1VVRkJUQ3hGUVVGbFowa3NUMEZCWml4SFFVRjVRbTVGTEZGQlFXaERPMEZCUTBRN096czdPMEZCUlVRN096czdPenM3T3pzN08zTkRRVTkxUWp0QlFVTnlRaXhaUVVGSkxFdEJRVXN6UkN4SlFVRk1MRTFCUVdVc1NVRkJia0lzUlVGQmVVSTdRVUZEZGtJc1owSkJRVTBzU1VGQlNUUkNMRXRCUVVvc1EwRkJWU3gxUlVGQlZpeERRVUZPTzBGQlEwUTdRVUZEUkN4WlFVRkpMRU5CUVVNc1MwRkJTek5DTEU5QlFVd3NSVUZCWXpoSExHbENRVUZ1UWl4RlFVRnpRenRCUVVOd1F5eG5Ra0ZCVFN4SlFVRkpia1lzUzBGQlNpeERRVUZWTEdkSlFVRldMRU5CUVU0N1FVRkRSRHRCUVVORUxHVkJRVThzUzBGQlMzWkNMR3RDUVVGTUxFTkJRVkE3UVVGRFJEczdPenM3UVVGRlJEczdPenM3T3pzN096czdPM2RDUVZGVE8wRkJRMUFzV1VGQlNTeExRVUZMVEN4SlFVRk1MRTFCUVdVc1NVRkJia0lzUlVGQmVVSTdRVUZEZGtJc1owSkJRVTBzU1VGQlNUUkNMRXRCUVVvc1EwRkJWU3g1UkVGQlZpeERRVUZPTzBGQlEwUTdRVUZEUkN4WlFVRkpMRXRCUVV0dFFpeE5RVUZNTEV0QlFXZENMRU5CUVhCQ0xFVkJRWFZDTzBGQlEzSkNMR2RDUVVGTkxFbEJRVWx1UWl4TFFVRktMRU5CUVZVc2IwVkJRVllzUTBGQlRqdEJRVU5FTzBGQlEwUnhRaXgzUWtGQlowSXNTVUZCYUVJc1JVRkJjMEpRTEZsQlFWa3NTMEZCU3pWRExGRkJRVXdzUlVGQlpXZEpMRTlCUVdZc1JVRkJXaXhEUVVGMFFqdEJRVU5CTEdWQlFVOHNTVUZCVUR0QlFVTkVPenM3T3p0QlFVVkVPenM3T3pzN096czdlVUpCUzFVN1FVRkRVaXhoUVVGTGFFa3NVVUZCVEN4RlFVRmxkMGtzVDBGQlpqdEJRVU5CTEZsQlFVa3NTMEZCUzNSSkxFbEJRVXdzUlVGQlYwc3NhMEpCUVZnc1EwRkJTaXhGUVVGdlF6dEJRVU5zUXl4bFFVRkxUQ3hKUVVGTUxFVkJRVmRMTEd0Q1FVRllMRVZCUVN0Q2FVa3NUMEZCTDBJN1FVRkRSRHRCUVVORUxHVkJRVThzU1VGQlVEdEJRVU5FT3pzN096dEJRVVZFT3pzN096czdPenM3T3pzN096dDNRa0ZWVXk5RkxFc3NSVUZCVDIxRUxFOHNSVUZCVXp0QlFVRkJPenRCUVVOMlFpeFpRVUZOT1VJc1ZVRkJWU3cyUWtGQlZ5eExRVUZMTTBVc1QwRkJUQ3hEUVVGWUxFTkJRV2hDTzBGQlEwRXNZVUZCUzIxSkxFMUJRVXdzUTBGQldTeFZRVUZhTEVWQlFYZENMRmxCUVUwN1FVRkROVUlzTUVOQlFXOUNMRmxCUVUwN1FVRkRlRUk3UVVGRFFUdEJRVU5CTzBGQlEwRXNaMEpCUVUxNlJpeFBRVUZQTEU5QlFVczNReXhSUVVGTUxFVkJRV1ZuU1N4UFFVRm1MRVZCUVdJN1FVRkRRU3huUWtGQlRXNUZMRmRCUVZkb1FpeExRVUZMWjBJc1VVRkJUQ3hKUVVGcFFpeEZRVUZzUXp0QlFVTkJMR2RDUVVGTlN5eFBRVUZQY2tJc1MwRkJTM0ZDTEVsQlFVd3NTVUZCWVN4RlFVRXhRanRCUVU1M1FpeG5Ra0ZQYUVKUUxFdEJVR2RDTEVkQlQwNUZMRkZCVUUwc1EwRlBhRUpHTEV0QlVHZENPenRCUVZGNFFpeG5Ra0ZCVFVnc1dVRkJXVXNzVTBGQlUwb3NTMEZCVkN4SlFVRnJRaXhQUVVGTGVFUXNWVUZCVEN4RlFVRnBRbmRFTEV0QlFYSkVPMEZCUTBFc1owSkJRVTEyUWl4alFVRmpNa0lzVTBGQlV5dERMRTlCUVZRc1NVRkJiMElzVDBGQlMzcEhMRTlCUVV3c1JVRkJZM2xITEU5QlFYUkVPMEZCUTBFc1owSkJRVTAyUWl4alFVRmpOMElzVjBGQlZ6RkZMRmRCUVM5Q08wRkJRMEVzWjBKQlFVa3dSU3hQUVVGS0xFVkJRV0U3UVVGRFdDeHhRa0ZCUzNwSExFOUJRVXdzYVVOQlFYRkNMRTlCUVV0QkxFOUJRVXdzUTBGQmNrSXNTVUZCYjBONVJ5eFRRVUZUTmtJc1YwRkJOME03UVVGRFJEdEJRVU5FTEcxQ1FVRkxla2tzVVVGQlRDeEZRVUZsYjBrc1kwRkJaaXhEUVVFNFFpeFpRVUZOTzBGQlEyeERPMEZCUTBFN1FVRkRRU3hyUWtGQlRYWkhMR0ZCUVdGTkxIRkNRVUZ4UWpKRExFOUJRWEpDTEVOQlFXNUNPMEZCUTBFc2EwSkJRVWswUkN4bFFVRmxMRWxCUVc1Q08wRkJRMEVzYTBKQlFVbERMR2xEUVVGS08wRkJRMEVzYTBKQlFVbDZSQ3d5UWtGQlNqdEJRVU5CTEd0Q1FVTkZMRU5CUVVNc1QwRkJTeTlGTEU5QlFVd3NSVUZCWTNWQ0xIVkNRVUZtTEVsQlEwZHRReXhSUVVaTUxFVkJSMFU3UVVGRFFTeHZRa0ZCU1N4UFFVRlBRU3hUUVVGVE5rSXNjVUpCUVdoQ0xFdEJRVEJETEZWQlFUbERMRVZCUVRCRU8wRkJRVUVzYzBKQlEzUkNhMFFzUzBGRWMwSXNSMEZEV2k5SExGVkJSRmtzUTBGRGFFUlZMSGRDUVVSblJEczdRVUZGZUVRc2MwSkJRVWx4Unl4VFFVRlRRU3hOUVVGTmNFY3NNa0pCUVc1Q0xFVkJRV2RFTzBGQlF6bERaMFFzWjBSQlFUUkNNME1zU1VGQk5VSXNSVUZCYTBOakxFdEJRV3hETzBGQlEwUTdRVUZEUkdkR0xEWkRRVUV5UWl4elFrRkJWVGxGTEZGQlFWWXNSVUZCYjBJc2RVSkJRWEJDTEVOQlFUTkNPMEZCUTBRN1FVRkRSQ3h2UWtGRFJXaERMRmRCUVZkaExHVkJRVmdzUTBGQk1rSkRMR2RDUVVFelFpeEpRVU5ITEU5QlFVOXJRaXhUUVVGVGJrSXNaVUZCYUVJc1MwRkJiME1zVlVGR2VrTXNSVUZIUlR0QlFVTkJkME1zZFVOQlFYRkNMSE5DUVVGVmNrSXNVVUZCVml4RlFVRnZRaXhwUWtGQmNFSXNRMEZCY2tJN1FVRkRSRHRCUVVOR08wRkJRMFFzYTBKQlFVa3NRMEZCUXpoRkxIZENRVUZFTEVsQlFUWkNMMFVzWjBKQlFXZENReXhSUVVGb1FpeERRVUZxUXl4RlFVRTBSRHRCUVVNeFJEWkZMQ3RDUVVGbGJrWXNiVU5CUTJKRExGTkJSR0VzUlVGRllrTXNTMEZHWVN4RlFVZGlSU3hMUVVoaExFVkJTV0pGTEZOQlFWTkdMRXRCU2trc1EwRkJaanRCUVUxRU8wRkJRMFFzYTBKQlFVbEdMRXRCUVVvc1JVRkJWeXhQUVVGTGVFUXNWVUZCVEN4SlFVRnRRaXg1UWtGQllUWkZMRTlCUVdJc1JVRkJjMElzVDBGQlN6ZEZMRlZCUVV3c1EwRkJkRUlzUlVGQmQwTjNSQ3hMUVVGNFF5eERRVUZ1UWp0QlFVTllMSEZDUVVGTGVrUXNVVUZCVEN4RlFVRmxLMGdzVFVGQlppeERRVUZ6UWl4UFFVRkxPVWdzVlVGQlRDeERRVUYwUWl4RlFVRjNRM2RKTEZkQlFYaERMRVZCUVhGRU8wRkJRMjVFTlVJc1owTkJRV2RDTEU5QlFVdHVSeXhsUVVGTU8wRkJSRzFETEdWQlFYSkVPMEZCUjBFc2EwSkJRVWxwU1N4M1FrRkJTaXhGUVVFNFFqdEJRVU0xUWtRc0swSkJRV1ZETEhsQ1FVRjVRblpFTEd0Q1FVRjZRaXhGUVVGbU8wRkJRMEYxUkN4NVEwRkJlVUowUkN4UFFVRjZRanRCUVVORU8wRkJRMFFzYTBKQlEwVnhSQ3huUWtGRFJ5eERRVUZETEU5QlFVdDJTU3hQUVVGTUxFVkJRV04xUWl4MVFrRkViRUlzU1VGRlIyMURMRkZCU0V3c1JVRkpSVHRCUVVOQmJVSXNkVU5CUVhWQ1JpeFBRVUYyUWl4RlFVRm5ReXhOUVVGb1F5eEZRVUZ6UTJwQ0xGRkJRWFJETEVWQlFXZEVhRUlzU1VGQmFFUXNSVUZCYzBSeFF5eHJRa0ZCZEVRN1FVRkRRU3h2UWtGQlNYSkVMRmRCUVZkblNDeDFRa0ZCWml4RlFVRjNRenRCUVVOMFF5eHpRa0ZCU1VNc2FVSkJRVW83UVVGRFFTeHpRa0ZCU1N4UFFVRlBha1lzVTBGQlUyZEdMSFZDUVVGb1FpeExRVUUwUXl4VlFVRm9SQ3hGUVVFMFJEdEJRVU14UkVNc0swSkJRVmRxUml4VFFVRlRaMFlzZFVKQlFWUXNRMEZCYVVOeVJpeFRRVUZxUXl4RlFVRTBRMGNzUzBGQk5VTXNRMEZCV0R0QlFVTkVPMEZCUTBRc2MwSkJRMFU1UWl4WFFVRlhSU3hyUWtGQldDeEpRVU5ITEU5QlFVODRRaXhUUVVGVE9VSXNhMEpCUVdoQ0xFdEJRWFZETEZWQlJERkRMRXRCUjBVc1EwRkJRelJDTEV0QlFVUXNTVUZEUnl4eFEwRkJZVUVzUzBGQllpeEZRVUZ2UWl4UFFVRkxSU3hSUVVGTUxFZEJRV2RDUml4TFFVRndReXhEUVVSSUxFbEJSVWNzVDBGQlQwOHNTMEZCU3pOQ0xIZENRVUZhTEV0QlFYbERMRlZCVERsRExFTkJSRVlzUlVGUlJUdEJRVU5CYzBJc05rSkJRVk01UWl4clFrRkJWQ3hEUVVFMFFubENMRk5CUVRWQ0xFVkJRWFZEUnl4TFFVRjJReXhGUVVFNFEyMUdMRkZCUVRsRE8wRkJRMFE3UVVGRFJpeHBRa0ZvUWtRc1RVRm5RazhzU1VGRFRHcElMRmRCUVZkRkxHdENRVUZZTEVsQlEwY3NUMEZCVHpoQ0xGTkJRVk01UWl4clFrRkJhRUlzUzBGQmRVTXNWVUZHY2tNc1JVRkhURHRCUVVOQkxITkNRVUZKUml4WFFVRlhSU3hyUWtGQldDeERRVUU0UWtjc1YwRkJiRU1zUlVGQkswTTdRVUZETjBNeVFpdzJRa0ZCVXpsQ0xHdENRVUZVTEVOQlFUUkNlVUlzVTBGQk5VSXNSVUZCZFVOSExFdEJRWFpETEVWQlFUaERla0lzVjBGQk9VTTdRVUZEUkN4dFFrRkdSQ3hOUVVWUExFbEJRVWtzUTBGQlEzbENMRXRCUVVRc1NVRkJWU3h4UTBGQllTeFBRVUZMUlN4UlFVRk1MRWRCUVdkQ1JpeExRVUUzUWl4RlFVRnZRMEVzUzBGQmNFTXNRMEZCWkN4RlFVRXdSRHRCUVVNdlJFVXNOa0pCUVZNNVFpeHJRa0ZCVkN4RFFVRTBRbmxDTEZOQlFUVkNMRVZCUVhWRFJ5eExRVUYyUXp0QlFVTkVPMEZCUTBZN1FVRkRTRHRCUVVORExHVkJha05FTEUxQmFVTlBMRWxCUVVrc1EwRkJReXh4UTBGQllVWXNTMEZCWWl4RlFVRnZRa2tzVTBGQlUwb3NTMEZCTjBJc1EwRkJUQ3hGUVVFd1F6dEJRVU12UTBrc2VVSkJRVk5LTEV0QlFWUXNSMEZCYVVJc1EwRkJRMlVzVDBGQlQzVkZMRTFCUVZBc1NVRkJhVUoyUlN4TlFVRnNRaXdyUWtGQkswSllMRk5CUVZOS0xFdEJRWGhETEVWQlFXdEVRU3hMUVVGc1JDeEZRVUZxUWp0QlFVTkVPMEZCUTBRc2NVSkJRVXMwUlN4TlFVRk1PMEZCUTBRc1lVRTVSVVE3UVVFclJVUXNWMEUzUmtRN1FVRTRSa1FzVTBFdlJrUTdRVUZuUjBFc1pVRkJUeXhKUVVGUU8wRkJRMFE3T3pzN08wRkJSVVE3T3pzN096czdPenM3T3pzN096czdPenQzUWtGalV6VkZMRXNzUlVGQk5rSTdRVUZCUVN4WlFVRjBRbmxGTEZGQlFYTkNMSFZGUVVGWU1VSXNVMEZCVnpzN1FVRkRjRU1zV1VGQlNTeExRVUZMZEVjc1NVRkJUQ3hOUVVGbExFbEJRVzVDTEVWQlFYbENPMEZCUTNaQ0xHZENRVUZOTEVsQlFVazBRaXhMUVVGS0xFTkJRVlVzTWtSQlFWWXNRMEZCVGp0QlFVTkVPMEZCUTBRc1dVRkJTV3RJTEZWQlFWVXZSaXhOUVVGV0xFZEJRVzFDTEVOQlFXNUNMRWxCUVhkQ0xFOUJRVTlwUml4UlFVRlFMRXRCUVc5Q0xGVkJRV2hFTEVWQlFUUkVPMEZCUXpGRUxHZENRVUZOTEVsQlFVbHFSeXhUUVVGS0xFTkJRV01zYjBWQlFXUXNRMEZCVGp0QlFVTkVPMEZCUTBRc1lVRkJTMmRJTEZGQlFVd3NRMEZCWTNoR0xFdEJRV1E3UVVGRFFTeFpRVUZKZVVVc1VVRkJTaXhGUVVGak8wRkJRMXBCTzBGQlEwUTdRVUZEUkN4bFFVRlBMRWxCUVZBN1FVRkRSRHM3T3pzN1FVRkZSRHM3T3pzN096czdPenM3T3pzN096czdkMEpCWVZOMlJTeExMRVZCUVRaQ08wRkJRVUU3TzBGQlFVRXNXVUZCZEVKMVJTeFJRVUZ6UWl4MVJVRkJXREZDTEZOQlFWYzdPMEZCUTNCRExGbEJRVWtzUzBGQlMzUkhMRWxCUVV3c1RVRkJaU3hKUVVGdVFpeEZRVUY1UWp0QlFVTjJRaXhuUWtGQlRTeEpRVUZKTkVJc1MwRkJTaXhEUVVGVkxESkVRVUZXTEVOQlFVNDdRVUZEUkR0QlFVTkVMRmxCUVVrc1MwRkJTeXRDTEZGQlFVd3NUMEZCYjBJc1NVRkJjRUlzU1VGQk5FSXNTMEZCU3pkRUxGRkJRVXdzUlVGQlpXZEpMRTlCUVdZc1IwRkJlVUpzUml4UlFVRjZRaXhMUVVGelF5eFBRVUYwUlN4RlFVRXJSVHRCUVVNM1JTeG5Ra0ZCVFN4SlFVRkphRUlzUzBGQlNpeERRVUZWTEcxRlFVRldMRU5CUVU0N1FVRkRSRHRCUVVORUxGbEJRVWxyU0N4VlFVRlZMMFlzVFVGQlZpeEhRVUZ0UWl4RFFVRnVRaXhKUVVGM1FpeFBRVUZQYVVZc1VVRkJVQ3hMUVVGdlFpeFZRVUZvUkN4RlFVRTBSRHRCUVVNeFJDeG5Ra0ZCVFN4SlFVRkpha2NzVTBGQlNpeERRVUZqTEc5RlFVRmtMRU5CUVU0N1FVRkRSRHM3UVVGRlJDeGhRVUZMY1Vjc1RVRkJUQ3hEUVVGWkxGVkJRVm9zUlVGQmQwSXNXVUZCVFR0QlFVTTFRaXd3UTBGQmIwSXNXVUZCVFR0QlFVTjRRaXhuUWtGQlRYaEVMRlZCUVZVc05rSkJRVmNzVDBGQlN6TkZMRTlCUVV3c1EwRkJXQ3hEUVVGb1FqczdRVUZGUVN4blFrRkJUVEJDTEdGQlFXRk5MSEZDUVVGeFFqSkRMRTlCUVhKQ0xFTkJRVzVDT3p0QlFVVkJMR2RDUVVGTmFrTXNUMEZCVHl4UFFVRkxOME1zVVVGQlRDeEZRVUZsWjBrc1QwRkJaaXhGUVVGaU8wRkJUSGRDTEdkQ1FVMW9RbTVGTEZGQlRtZENMRWRCVFVob1FpeEpRVTVITEVOQlRXaENaMElzVVVGT1owSTdPMEZCVDNoQ0xHZENRVUZOVEN4WlFVRlpTeXhUUVVGVFNpeExRVUV6UWp0QlFVTkJMR2RDUVVGTlF5eFpRVUZaUnl4VFFVRlRSaXhMUVVFelFqdEJRVU5CTEdkQ1FVRk5la0lzWTBGQll6SkNMRk5CUVZNclF5eFBRVUUzUWpzN1FVRkZRU3huUWtGQlRYTkRMR1ZCUVdVc1QwRkJUM1pHTEV0QlFWQXNTMEZCYVVJc1ZVRkJha0lzUjBGRGFrSkJMRTFCUVUxM1JpeEpRVUZPTEVOQlFWZDBSaXhSUVVGWUxFVkJRWEZDU0N4VFFVRnlRaXhGUVVGblEwWXNVMEZCYUVNc1EwRkVhVUlzUjBGRmFrSkhMRXRCUmtvN08wRkJTVUU3UVVGRFFUdEJRVU5CTEdkQ1FVRk5lVVlzYVVKQlFXbENMRU5CUVVOMlNDeFhRVUZYV1N4UlFVRllMRU5CUVc5Q05FY3NaME5CUVhKQ0xFbEJRMnhDU0N4blFrRkJaMElzU1VGRWNrSTdPMEZCUjBFN1FVRkRRVHRCUVVOQkxHZENRVUZKVUN4cFEwRkJTanRCUVVOQkxHZENRVUZKZWtRc01rSkJRVW83UVVGRFFTeG5Ra0ZCU1hkRUxHVkJRV1VzU1VGQmJrSTdRVUZEUVN4blFrRkRSU3hEUVVGRExFOUJRVXQyU1N4UFFVRk1MRVZCUVdOMVFpeDFRa0ZCWml4SlFVTkhiVU1zVVVGR1RDeEZRVWRGTzBGQlEwRXNhMEpCUTBWb1F5eFhRVUZYUlN4clFrRkJXQ3hKUVVOSFJpeFhRVUZYUlN4clFrRkJXQ3hEUVVFNFFrTXNWVUZFYWtNc1NVRkZSeXhQUVVGUE5rSXNVMEZCVXpaQ0xIRkNRVUZvUWl4TFFVRXdReXhWUVVndlF5eEZRVWxGTzBGQlFVRXNiMEpCUTJ0RGEwUXNTMEZFYkVNc1IwRkRORU12Unl4VlFVUTFReXhEUVVOUlZTeDNRa0ZFVWpzN1FVRkZRU3h2UWtGQlNYRkhMRk5CUVZOQkxFMUJRVTF3Unl3eVFrRkJia0lzUlVGQlowUTdRVUZET1VOblJDdzRRMEZCTkVJelF5eEpRVUUxUWl4RlFVRnJRMk1zUzBGQmJFTTdRVUZEUkR0QlFVTkVaMFlzTWtOQlFUSkNMSE5DUVVGVk9VVXNVVUZCVml4RlFVRnZRaXgxUWtGQmNFSXNRMEZCTTBJN1FVRkRSRHRCUVVORUxHdENRVU5GYUVNc1YwRkJWMkVzWlVGQldDeERRVUV5UWtNc1owSkJRVE5DTEVsQlEwY3NUMEZCVDJ0Q0xGTkJRVk51UWl4bFFVRm9RaXhMUVVGdlF5eFZRVVo2UXl4RlFVZEZPMEZCUTBGM1F5eHhRMEZCY1VJc2MwSkJRVlZ5UWl4UlFVRldMRVZCUVc5Q0xHbENRVUZ3UWl4RFFVRnlRanRCUVVORU8wRkJRMFk3UVVGRFJDeG5Ra0ZCU1N4RFFVRkRPRVVzZDBKQlFVUXNTVUZCTmtJdlJTeG5Ra0ZCWjBKRExGRkJRV2hDTEVOQlFXcERMRVZCUVRSRU8wRkJRekZFTmtVc05rSkJRV1Z1Uml4dFEwRkRZa01zVTBGRVlTeEZRVVZpU3l4VFFVRlRTaXhMUVVaSkxFVkJSMkpETEZOQlNHRXNLMEpCU1ZKQkxGTkJTbEVzUlVGSlRYZEdMRmxCU2s0c1JVRkJaanRCUVUxRU96dEJRVVZFTzBGQlEwRTdRVUZEUVN4blFrRkJTWEpHTEZOQlFWTjZSQ3hUUVVGVUxFTkJRVW9zUlVGQmVVSTdRVUZEZGtKNVJDeDFRa0ZCVTNwRUxGTkJRVlFzUlVGQmIwSTRTU3haUVVGd1FqdEJRVU5FTEdGQlJrUXNUVUZGVHp0QlFVTk1ja1lzZFVKQlFWTndRaXhSUVVGVUxFTkJRV3RDZVVjc1dVRkJiRUk3UVVGRFJEdEJRVU5FTEdkQ1FVRkpVQ3gzUWtGQlNpeEZRVUU0UWp0QlFVTTFRa1FzTmtKQlFXVkRMSGxDUVVGNVFuWkVMR3RDUVVGNlFpeEZRVUZtTzBGQlEwRjFSQ3gxUTBGQmVVSjBSQ3hQUVVGNlFqdEJRVU5FTzBGQlEwUXNaMEpCUTBVclJDeHJRa0ZEUjFZc1dVRkVTQ3hKUVVWSExFTkJRVU1zVDBGQlMzWkpMRTlCUVV3c1JVRkJZM1ZDTEhWQ1FVaHdRaXhGUVVsRk8wRkJRMEZ6UkN4eFEwRkJkVUpHTEU5QlFYWkNMRVZCUVdkRExFMUJRV2hETEVWQlFYTkRha0lzVVVGQmRFTXNSVUZCWjBSb1FpeEpRVUZvUkN4RlFVRnpSSEZETEd0Q1FVRjBSRHRCUVVOQkxHdENRVU5GY2tRc1YwRkJWMFVzYTBKQlFWZ3NTVUZEUjBZc1YwRkJWMFVzYTBKQlFWZ3NRMEZCT0VKRExGVkJSbTVETEVWQlIwVTdRVUZEUVN4dlFrRkRSVWdzVjBGQlYyZElMSFZDUVVGWUxFbEJRMGNzVDBGQlQyaEdMRk5CUVZOblJpeDFRa0ZCYUVJc1MwRkJORU1zVlVGR2FrUXNSVUZIUlR0QlFVTkJMSE5DUVVGTlF5eFhRVUZYYWtZc1UwRkJVMmRHTEhWQ1FVRlVMRU5CUVdsRGNrWXNVMEZCYWtNc1JVRkJORU5GTEZOQlFUVkRMRU5CUVdwQ08wRkJRMEVzYzBKQlFVa3NUMEZCVDBjc1UwRkJVemxDTEd0Q1FVRm9RaXhMUVVGMVF5eFZRVUV6UXl4RlFVRjFSRHRCUVVOeVJEaENMRFpDUVVGVE9VSXNhMEpCUVZRc1EwRkJORUo1UWl4VFFVRTFRaXhGUVVGMVEwVXNVMEZCZGtNc1JVRkJhMFJ2Uml4UlFVRnNSRHRCUVVORU8wRkJRMFlzYVVKQlVrUXNUVUZSVHl4SlFVRkpMRTlCUVU5cVJpeFRRVUZUT1VJc2EwSkJRV2hDTEV0QlFYVkRMRlZCUVRORExFVkJRWFZFTzBGQlF6VkVMSE5DUVVGSlJpeFhRVUZYUlN4clFrRkJXQ3hEUVVFNFFrY3NWMEZCYkVNc1JVRkJLME03UVVGRE4wTXlRaXcyUWtGQlV6bENMR3RDUVVGVUxFTkJRVFJDZVVJc1UwRkJOVUlzUlVGQmRVTkZMRk5CUVhaRExFVkJRV3RFZUVJc1YwRkJiRVE3UVVGRFJDeHRRa0ZHUkN4TlFVVlBPMEZCUTB3eVFpdzJRa0ZCVXpsQ0xHdENRVUZVTEVOQlFUUkNlVUlzVTBGQk5VSXNSVUZCZFVORkxGTkJRWFpETzBGQlEwUTdRVUZEUmp0QlFVTkdPMEZCUTBZN1FVRkRSQ3h0UWtGQlN6SkZMRTFCUVV3N1FVRkRRVHRCUVVOQkxHZENRVUZKU0N4UlFVRktMRVZCUVdNN1FVRkRXaXhyUWtGQlNYQkVMRkZCUVZGM1JTeHpRa0ZCV2l4RlFVRnZRenRCUVVOc1EzaEZMSGRDUVVGUmQwVXNjMEpCUVZJc1EwRkJLMEo2Uml4UlFVRXZRaXhGUVVGNVEzRkZMRkZCUVhwRE8wRkJRMFFzWlVGR1JDeE5RVVZQTzBGQlEweEJMSGxDUVVGVGFVSXNTVUZCVkN4RFFVRmpkRVlzVVVGQlpEdEJRVU5FTzBGQlEwWTdRVUZEUml4WFFYWkhSRHRCUVhkSFJDeFRRWHBIUkR0QlFUQkhRU3hsUVVGUExFbEJRVkE3UVVGRFJEczdPenM3UVVGRlJEczdPenM3T3pzN096czdPenN3UWtGVFZ5dERMRThzUlVGQlV6dEJRVU5zUWl4WlFVRkpMRXRCUVVzeFJ5eEpRVUZNTEUxQlFXVXNTVUZCYmtJc1JVRkJlVUk3UVVGRGRrSXNaMEpCUVUwc1NVRkJTVFJDTEV0QlFVb3NRMEZCVlN3MlJFRkJWaXhEUVVGT08wRkJRMFE3UVVGRFJDeFpRVUZKTEVOQlFVTXNTMEZCU3pOQ0xFOUJRVXdzUlVGQlkzbEhMRTlCUVc1Q0xFVkJRVFJDTzBGQlF6RkNMR2RDUVVGTkxFbEJRVWs1UlN4TFFVRktMRU5CUVZVc01FZEJRVllzUTBGQlRqdEJRVU5FTzBGQlEwUXNaVUZCVHl4TFFVRkxiVWdzVVVGQlRDeERRVUZqTEVsQlFXUXNSVUZCYjBKeVF5eFBRVUZ3UWl4RFFVRlFPMEZCUTBRN096czdPMEZCUlVRN096czdPenM3T3pzN096czdPenM3ZDBKQldWTXlReXhYTEVWQlFXRTdRVUZEY0VJc1dVRkJUWHBGTEZWQlFWVXNOa0pCUVZjc1MwRkJTek5GTEU5QlFVd3NRMEZCV0N4RFFVRm9RanRCUVVOQkxGbEJRVWtzUTBGQlF5eG5RMEZCYjBKdlNpeFhRVUZ3UWl4RlFVRnBRM3BGTEU5QlFXcERMRU5CUVV3c1JVRkJaMFE3UVVGRE9VTXNaMEpCUVUwc1NVRkJTV2hFTEV0QlFVb3NRMEZCVlN4blNVRkJWaXhEUVVGT08wRkJRMFE3UVVGRFJDeFpRVUZOYWtJc1dVRkJXWGRETEUxQlFVMURMRTlCUVU0c1EwRkJZMmxITEZkQlFXUXNTVUZEWkN4VlFVRkRReXhMUVVGRU8wRkJRVUVzYVVKQlFWY3NjVU5CUTFoRExHZENRVVJYTEVWQlJWaEVMRXRCUmxjc1JVRkhXRVFzV1VGQldXaENMRWRCUVZvc1EwRkJaMElzVlVGQlF6RkdMRWxCUVVRN1FVRkJRU3h0UWtGQlZXbERMRkZCUVZFMFJTeGhRVUZTTEVOQlFYTkNOMGNzU1VGQmRFSXNRMEZCVmp0QlFVRkJMRmRCUVdoQ0xFTkJTRmNzUTBGQldEdEJRVUZCTEZOQlJHTXNSMEZOWkN4VlFVRkRNa2NzUzBGQlJEdEJRVUZCTEdsQ1FVRlhMSE5DUVVGVk1VVXNVVUZCVVRSRkxHRkJRVklzUTBGQmMwSklMRmRCUVhSQ0xFTkJRVllzUlVGQk9FTkRMRXRCUVRsRExFTkJRVmc3UVVGQlFTeFRRVTVLT3p0QlFWRkJMR1ZCUVU4M1NTeHRRa0ZCYlVJc1NVRkJia0lzUlVGQmVVSkZMRk5CUVhwQ0xFVkJRVzlEYjBNc1RVRkJjRU1zUjBGQk5rTXNRMEZCY0VRN1FVRkRSRHM3T3pzN1FVRkZSRHM3T3pzN096czdPenM3T3pzN096czdPenM3TzNWRFFXbENkMEpLTEVrc1JVRkJUVHRCUVVNMVFpeFpRVUZOYVVNc1ZVRkJWU3cyUWtGQlZ5eExRVUZMTTBVc1QwRkJUQ3hEUVVGWUxFTkJRV2hDTzBGQlEwRXNXVUZCVFhkS0xGVkJRVlUzUlN4UlFVRlJORVVzWVVGQlVpeERRVUZ6UWpkSExFbEJRWFJDTEVOQlFXaENPMEZCUTBFc1dVRkJUV2hETzBGQlFWa3NiVUpCUVZwQkxGTkJRVmtzUTBGQlF6SkpMRXRCUVVRN1FVRkJRU3h0UWtGQlZ5eDNRa0ZCV1Vjc1QwRkJXaXhGUVVGeFFrZ3NTMEZCY2tJc1JVRkJORUlzVlVGQlEwa3NRMEZCUkN4RlFVRkpReXhEUVVGS08wRkJRVUVzY1VKQlFWVkVMRXRCUVV0RExFTkJRV1k3UVVGQlFTeGhRVUUxUWl4RFFVRllPMEZCUVVFN08wRkJRVm83UVVGQlFTeFhRVUZPTzBGQlEwRXNaVUZCVDJ4S0xHMUNRVUZ0UWl4SlFVRnVRaXhGUVVGNVFrVXNVMEZCZWtJc1JVRkJiME52UXl4TlFVRndReXhIUVVFMlF5eERRVUZ3UkR0QlFVTkVPenM3T3p0QlFVVkVPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzeVEwRnRRalJDUnl4TExFVkJRVTg3UVVGQlFUczdRVUZEYWtNc1dVRkJTU3hEUVVGRFF5eE5RVUZOUXl4UFFVRk9MRU5CUVdOR0xFdEJRV1FzUTBGQlRDeEZRVUV5UWp0QlFVTjZRaXhuUWtGQlRTeEpRVUZKYmtJc1UwRkJTaXhEUVVGakxEQkNRVUZrTEVOQlFVNDdRVUZEUkRzN1FVRkZSQ3hsUVVGUGJVSXNUVUZCVFRCSExFdEJRVTRzUTBGQldTeFZRVUZEYWtnc1NVRkJSRHRCUVVGQkxHbENRVUZWTEU5QlFVdHJTQ3gxUWtGQlRDeERRVUUyUW14SUxFbEJRVGRDTEVOQlFWWTdRVUZCUVN4VFFVRmFMRU5CUVZBN1FVRkRSRHM3T3pzN1FVRkZSRHM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN01rTkJiVUkwUWs4c1N5eEZRVUZQTzBGQlFVRTdPMEZCUTJwRExHVkJRVTlETEUxQlFVMURMRTlCUVU0c1EwRkJZMFlzUzBGQlpDeExRVUYzUWtFc1RVRkJUVFJITEVsQlFVNHNRMEZCVnl4VlFVRkRia2dzU1VGQlJEdEJRVUZCTEdsQ1FVRlZMRTlCUVV0clNDeDFRa0ZCVEN4RFFVRTJRbXhJTEVsQlFUZENMRU5CUVZZN1FVRkJRU3hUUVVGWUxFTkJRUzlDTzBGQlEwUTdPenM3TzBGQlJVUTdPenM3T3pzN096czdPenM3T3pzN2MwSkJXVTlCTEVrc1JVRkJUVHRCUVVGQk96dEJRVU5ZTEdWQlFVOHNTMEZCUzNsR0xFMUJRVXdzUTBGQldTeFJRVUZhTEVWQlFYTkNPMEZCUVVFc2FVSkJRVTBzYzBKQlFWVXNUMEZCUzNCSUxHVkJRVXdzUlVGQlZpeEZRVUZyUXpKQ0xFbEJRV3hETEVOQlFVNDdRVUZCUVN4VFFVRjBRaXhEUVVGUU8wRkJRMFE3T3pzN08wRkJSVVE3T3pzN096czdPenM3T3pzN096czdPenM3T3pzNFFrRnBRbVZCTEVrc1JVRkJUVHRCUVVGQk96dEJRVU51UWl4bFFVRlBMRXRCUVV0NVJpeE5RVUZNTEVOQlFWa3NaMEpCUVZvc1JVRkJPRUlzV1VGQlRUdEJRVU42UXl4alFVRk5lRVFzVlVGQlZTdzJRa0ZCVnl4UFFVRkxNMFVzVDBGQlRDeERRVUZZTEVOQlFXaENPMEZCUTBFc1kwRkJUWGRLTEZWQlFWVTNSU3hSUVVGUk5FVXNZVUZCVWl4RFFVRnpRamRITEVsQlFYUkNMRU5CUVdoQ08wRkJRMEVzYVVKQlFVOHNkMEpCUVZrNFJ5eFBRVUZhTEVWQlFYRkNMRTlCUVV0NlNTeGxRVUZNTEVWQlFYSkNMRVZCUVRaRExGVkJRVU13U1N4RFFVRkVMRVZCUVVsRExFTkJRVW83UVVGQlFTeHRRa0ZCVlVRc1MwRkJTME1zUTBGQlpqdEJRVUZCTEZkQlFUZERMRU5CUVZBN1FVRkRSQ3hUUVVwTkxFTkJRVkE3UVVGTFJEczdPenM3UVVGRlJEczdPenM3T3pzN096dHZRa0ZOUzBrc1VTeEZRVUZWTzBGQlEySXNaVUZCVHl4TFFVRkxOMGtzU1VGQlRDeERRVUZWTEhORFFVRnpRalpKTEZGQlFYUkNMRVZCUVdkRExFdEJRVXMxU1N4blFrRkJUQ3hGUVVGb1F5eERRVUZXTEVOQlFWQTdRVUZEUkRzN096czdRVUZGUkRzN096czdPenM3T3pzN08ydENRVkZITkVrc1VTeEZRVUZWTzBGQlExZ3NXVUZCVFhCS0xGbEJRVmtzSzBKQlFXVnZTaXhSUVVGbUxFTkJRV3hDTzBGQlEwRXNaVUZCVHl4TFFVRkxNMElzVFVGQlRDeERRVUZaTEVsQlFWb3NSVUZCYTBJc1ZVRkJRM0pJTEVOQlFVUTdRVUZCUVN4cFFrRkJUMG9zVlVGQlZVa3NRMEZCVml4RFFVRlFPMEZCUVVFc1UwRkJiRUlzUTBGQlVEdEJRVU5FT3pzN096dEJRVVZFT3pzN096czdPenM3SzBKQlMyZENPMEZCUTJRc1dVRkJUVzFETEZGQlFWRXNTMEZCU3k5Q0xHZENRVUZNTEVWQlFXUTdPMEZCUlVFc1pVRkJUeXRDTEUxQlFVMHdSeXhMUVVGT0xFTkJRVmtzVlVGQlF6ZEpMRU5CUVVRN1FVRkJRU3hwUWtGQlR5eDVRa0ZCWVVFc1EwRkJZaXhEUVVGUU8wRkJRVUVzVTBGQldpeERRVUZRTzBGQlEwUTdPenM3TzBGQlJVUTdPenM3T3pzN096czdPenN5UWtGUldVb3NVeXhGUVVGWE8wRkJRVUU3TzBGQlEzSkNMR1ZCUVU5TkxIRkNRVUZ4UWl4SlFVRnlRaXhGUVVFeVFpeFZRVUZEUml4RFFVRkVPMEZCUVVFc2FVSkJRVTlLTEZWQlFWVXNVVUZCUzA4c1NVRkJUQ3hEUVVGVlNDeERRVUZXTEVOQlFWWXNRMEZCVUR0QlFVRkJMRk5CUVROQ0xFTkJRVkE3UVVGRFJEczdPenM3UVVGRlJEczdPenM3T3pzN096czdjMEpCVDA5blNpeFJMRVZCUVZVN1FVRkRaaXhaUVVGTmNFb3NXVUZCV1N3clFrRkJaVzlLTEZGQlFXWXNRMEZCYkVJN1FVRkRRU3hsUVVGUE9Va3NjVUpCUVhGQ0xFbEJRWEpDTEVWQlFUSkNUaXhUUVVFelFpeERRVUZRTzBGQlEwUTdPenM3TzBGQlJVUTdPenM3T3pzN096czdPMjFDUVU5SmIwb3NVU3hGUVVGVk8wRkJRMW9zV1VGQlRYQktMRmxCUVZrc0swSkJRV1Z2U2l4UlFVRm1MRU5CUVd4Q08wRkJRMEVzWlVGQlR6bEpMSEZDUVVGeFFpeEpRVUZ5UWl4RlFVRXlRaXhWUVVGRFJpeERRVUZFTzBGQlFVRXNhVUpCUVU4c1EwRkJRMG9zVlVGQlZVa3NRMEZCVml4RFFVRlNPMEZCUVVFc1UwRkJNMElzUTBGQlVEdEJRVU5FT3pzN096dEJRVVZFT3pzN096czdPenM3T3pzN08zTkNRVk5QTzBGQlEwd3NaVUZCVHl4TFFVRkxjVWdzVFVGQlRDeERRVUZaTEUxQlFWb3NSVUZCYjBJMFFpdzJRa0ZCY0VJc1EwRkJVRHRCUVVORU96czdPenRCUVVWRU96czdPenM3T3pzN096dHpRa0ZQVHp0QlFVRkJPenRCUVVOTUxHVkJRVThzUzBGQlN6VkNMRTFCUVV3c1EwRkJXU3hOUVVGYUxFVkJRVzlDTEZWQlFVTnlTQ3hEUVVGRUxFVkJRVTg3UVVGRGFFTXNZMEZCU1N4UlFVRkxhVVFzU1VGQlRDeFBRVUZuUWl4SlFVRndRaXhGUVVFd1FpeFBRVUZQTEVsQlFWQTdRVUZETVVJc1kwRkJUVmtzVlVGQlZTdzJRa0ZCVnl4UlFVRkxNMFVzVDBGQlRDeERRVUZZTEVOQlFXaENPMEZCUTBFc1kwRkJUVFpFTEZkQlFWZGpMRkZCUVZFNFF5eGpRVUZTTERoQ1FVRTBRaXhSUVVGTGVrZ3NUMEZCVEN4RFFVRTFRaXhKUVVFeVF6QklMRTFCUVUwc1VVRkJha1FzU1VGQmFrSTdRVUZEUVN4cFFrRkJUemRFTEZOQlFWTXJSQ3hOUVVGVUxFTkJRV2RDYWtRc1VVRkJVVzlDTEdGQlFWSXNRMEZCYzBKcVJpeERRVUYwUWl4RFFVRm9RaXhEUVVGUU8wRkJRMFFzVTBGTVRTeERRVUZRTzBGQlRVUTdPenM3TzBGQlJVUTdPenM3T3pzN096czdPM2RDUVU5VE8wRkJRMUFzV1VGQlRXdEtMRTlCUVU4c1MwRkJTMEVzU1VGQlRDeEZRVUZpTzBGQlEwRXNaVUZCVHl3MFFrRkJaMEpCTEVsQlFXaENMRU5CUVZBN1FVRkRSRHM3T3pzN1FVRkZSRHM3T3pzN096czdPenM3TzNkQ1FWRlRReXhMTEVWQlFXZENPMEZCUVVFN08wRkJRVUVzTWtOQlFVNTZSU3hKUVVGTk8wRkJRVTVCTEdOQlFVMDdRVUZCUVRzN1FVRkRka0lzWlVGQlR5eExRVUZMTWtNc1RVRkJUQ3hEUVVGWkxGVkJRVm9zUlVGQmQwSXNWVUZCUTNKSUxFTkJRVVFzUlVGQlR6dEJRVUZCT3p0QlFVTndReXdyUWtGQlMycENMRkZCUVV3c1IwRkJaWEZMTEdGQlFXWXNiVUpCUVRaQ2NFb3NRMEZCTjBJc1JVRkJaME50U2l4TFFVRm9ReXhUUVVFd1EzcEZMRWxCUVRGRE8wRkJRMEVzYTBKQlFVdDZSaXhKUVVGTUxFVkJRVmR0U1N4TlFVRllPMEZCUTBFc2FVSkJRVThzVDBGQlVEdEJRVU5FTEZOQlNrMHNRMEZCVUR0QlFVdEVPenM3T3p0QlFVVkVPenM3T3pzN096czdPelpDUVUxamFVTXNTeXhGUVVGUE8wRkJRVUU3TzBGQlEyNUNPenRCUVVWQkxHVkJRVThzUzBGQlMyaERMRTFCUVV3c1EwRkJXU3hsUVVGYUxFVkJRVFpDTEZWQlFVTnBReXhSUVVGRUxFVkJRV003UVVGRGFFUXNZMEZCU1VFc1UwRkJVM3BJTEZGQlFWUXNTMEZCYzBJc1RVRkJNVUlzUlVGQmEwTTdRVUZEYUVNc2EwSkJRVTBzU1VGQlNXSXNVMEZCU2l4RFFVRmpMSGxGUVVGa0xFTkJRVTQ3UVVGRFJEczdRVUZGUkN4alFVRk5LMElzVjBGQlZ5eFJRVUZMYUVVc1VVRkJUQ3hEUVVGcVFqdEJRVU5CTEdOQlFVa3NUMEZCVDJkRkxGTkJRVk4zUnl4aFFVRm9RaXhMUVVGclF5eFZRVUYwUXl4RlFVRnJSRHRCUVVOb1JDeHJRa0ZCVFN4SlFVRkpka2tzVTBGQlNpeERRVUZqTEd0RlFVRmtMRU5CUVU0N1FVRkRSRHM3UVVGRlJDeGpRVUZOZDBrc1YwRkJWM3BJTEc5Q1FVRnZRaXhQUVVGd1FpeERRVUZxUWp0QlFVTkJMR05CUVUxelF5eG5Ra0ZCWjBJc1EwRkJRMmxHTEZGQlFVUXNSVUZCVjJoR0xFMUJRVmdzUTBGQmEwSnlReXhaUVVGWkxFOUJRVm9zUlVGQmEwSnhTQ3hSUVVGc1FpeERRVUZzUWl4RFFVRjBRanRCUVVOQmRrY3NiVUpCUVZOM1J5eGhRVUZVTEVOQlFYVkNiRVlzWVVGQmRrSXNSVUZCYzBOdFJpeFJRVUYwUXl4RlFVRm5SRWdzUzBGQmFFUTdPMEZCUlVFc2FVSkJRVThzVDBGQlVEdEJRVU5FTEZOQlprMHNRMEZCVUR0QlFXZENSRHM3T3pzN1FVRkZSRHM3T3pzN096czdPenM3ZFVKQlQxRTdRVUZEVGl4bFFVRlBMRXRCUVV0b1F5eE5RVUZNTEVOQlFWa3NUMEZCV2l4RlFVRnhRbTlETEhsQ1FVRnlRaXhEUVVGUU8wRkJRMFE3T3pzN08wRkJSVVE3T3pzN096czdPenM3T3pzN2NVSkJVMDFETEVrc1JVRkJUVHRCUVVGQk96dEJRVU5XTEZsQlFVa3NTMEZCUzNwTExFbEJRVXdzVFVGQlpTeEpRVUZ1UWl4RlFVRjVRanRCUVVOMlFpeG5Ra0ZCVFN4SlFVRkpORUlzUzBGQlNpeERRVUZWTEhkRVFVRldMRU5CUVU0N1FVRkRSRHRCUVVORUxGbEJRVWtzUzBGQlN5dENMRkZCUVV3c1QwRkJiMElzU1VGQmNFSXNTVUZCTkVJc1MwRkJTemRFTEZGQlFVd3NSVUZCWldkSkxFOUJRV1lzUjBGQmVVSnNSaXhSUVVGNlFpeExRVUZ6UXl4UFFVRjBSU3hGUVVFclJUdEJRVU0zUlN4blFrRkJUU3hKUVVGSmFFSXNTMEZCU2l4RFFVRlZMR2RGUVVGV0xFTkJRVTQ3UVVGRFJEdEJRVU5FTEZsQlFVMDRTU3hUUVVGVExFdEJRVXQwUXl4TlFVRk1MRU5CUVZrc1QwRkJXaXhGUVVGeFFqdEJRVUZCTEdsQ1FVRk5MRkZCUVV0NlJTeFJRVUZNTEVkQlFXZENSaXhMUVVGMFFqdEJRVUZCTEZOQlFYSkNMRU5CUVdZN1FVRkRRU3haUVVGSkxFOUJRVTluU0N4SlFVRlFMRXRCUVdkQ0xGZEJRWEJDTEVWQlFXbERPMEZCUXk5Q0xHTkJRVWxETEZWQlFWVXNTVUZCWkN4RlFVRnZRanRCUVVOc1FpeHJRa0ZCVFN4SlFVRkpNMGtzVTBGQlNpeHZRMEZCZDBNd1NTeEpRVUY0UXl3MFJFRkJUanRCUVVORU8wRkJRMFFzYVVKQlFVOURMRTlCUVU5RUxFbEJRVkFzUTBGQlVEdEJRVU5FTzBGQlEwUXNaVUZCVDBNc1RVRkJVRHRCUVVORU96czdPenRCUVVWRU96czdPenM3T3pzN096czdPM1ZDUVZOUlJDeEpMRVZCUVUwN1FVRkJRVHM3UVVGRFdpeFpRVUZKTEV0QlFVdDZTeXhKUVVGTUxFMUJRV1VzU1VGQmJrSXNSVUZCZVVJN1FVRkRka0lzWjBKQlFVMHNTVUZCU1RSQ0xFdEJRVW9zUTBGQlZTd3dSRUZCVml4RFFVRk9PMEZCUTBRN1FVRkRSQ3haUVVGSkxFTkJRVU1zUzBGQlN6TkNMRTlCUVV3c1JVRkJZM2xITEU5QlFXNUNMRVZCUVRSQ08wRkJRekZDTEdkQ1FVRk5MRWxCUVVrNVJTeExRVUZLTEVOQlFWVXNkVWRCUVZZc1EwRkJUanRCUVVORU8wRkJRMFFzV1VGQlNTeExRVUZMSzBJc1VVRkJUQ3hQUVVGdlFpeEpRVUY0UWl4RlFVRTRRanRCUVVNMVFpeG5Ra0ZCVFN4SlFVRkpMMElzUzBGQlNpeERRVUZWTERaR1FVRldMRU5CUVU0N1FVRkRSRHRCUVVORUxGbEJRVTByU1N4WFFVRlhMRXRCUVV0MlF5eE5RVUZNTEVOQlFWa3NVMEZCV2l4RlFVRjFRanRCUVVGQkxHbENRVUZOTEZGQlFVdDZSU3hSUVVGTUxFZEJRV2RDSzBNc1QwRkJkRUk3UVVGQlFTeFRRVUYyUWl4RFFVRnFRanRCUVVOQkxGbEJRVWtyUkN4SlFVRktMRVZCUVZVN1FVRkRVaXhwUWtGQlQwVXNVMEZCVTBZc1NVRkJWQ3hEUVVGUU8wRkJRMFE3UVVGRFJDeGxRVUZQUlN4UlFVRlFPMEZCUTBRN096czdPMEZCUlVRN096czdPenM3T3pzN2QwSkJUVk5hTEZFc1JVRkJWVHRCUVVOcVFpeFpRVUZOWVN4alFVRmpMRXRCUVVzNVNpeFBRVUZNTEVOQlFXRXNWVUZCUTBNc1EwRkJSRHRCUVVGQkxHbENRVUZQTEd0RFFVRmxRU3hGUVVGRlF5eGxRVUZHTEVWQlFXWXNRMEZCVUR0QlFVRkJMRk5CUVdJc1EwRkJjRUk3UVVGRFFTeGxRVUZQSzBrc1YwRkJWMkVzV1VGQldXaExMRTFCUVZvc1EwRkJiVUp0U2l4UlFVRnVRaXhEUVVGWUxFZEJRVEJEWVN4WFFVRnFSRHRCUVVORU96czdPenRCUVVWRU96czdPenM3T3pzN08zVkNRVTFSUXl4TExFVkJRVTg3UVVGQlFUczdRVUZEWWl4bFFVRlBMRXRCUVV0NlF5eE5RVUZNTEVOQlFWa3NVMEZCV2l4RlFVRjFRanRCUVVGQkxHbENRVUZOTEZGQlFVdHNReXhSUVVGTUxFZEJRV2RDUnl4RlFVRm9RaXhEUVVGdFFuZEZMRXRCUVc1Q0xFTkJRVTQ3UVVGQlFTeFRRVUYyUWl4RFFVRlFPMEZCUTBRN096czdPMEZCUlVRN096czdPenM3T3pzN096czdkVUpCVTFGa0xGRXNSVUZCVlR0QlFVRkJPenRCUVVOb1FpeGxRVUZQTEV0QlFVc3pRaXhOUVVGTUxFTkJRVmtzVTBGQldpeEZRVUYxUWl4VlFVRkRja2dzUTBGQlJDeEZRVUZQTzBGQlEyNURMR05CUVUwclNpeGhRVUZoTEZGQlFVczFTaXhKUVVGTUxFTkJRVlU0UWl4WlFVRlpMRTlCUVZvc1JVRkJhMEpxUXl4RFFVRnNRaXhEUVVGV0xFTkJRVzVDTzBGQlEwRXNhVUpCUVU5blNpeFhRVUZYWlN4WFFVRlhiRXNzVFVGQldDeERRVUZyUW0xS0xGRkJRV3hDTEVOQlFWZ3NSMEZCZVVObExGVkJRV2hFTzBGQlEwUXNVMEZJVFN4RFFVRlFPMEZCU1VRN096czdPMEZCUlVRN096czdPenM3T3p0M1FrRkxVenRCUVVOUUxHVkJRVThzUzBGQlMyaExMRTlCUVV3c1EwRkJZU3hWUVVGRFF5eERRVUZFTzBGQlFVRXNhVUpCUVU4c1EwRkJRMEVzUlVGQlJXZExMRTlCUVVZc1IwRkJXVU1zUjBGQldpeERRVUZuUWl4RFFVRm9RaXhEUVVGRUxFTkJRVkE3UVVGQlFTeFRRVUZpTEVOQlFWQTdRVUZEUkRzN096czdRVUZGUkRzN096czdPenM3TzNWQ1FVdFJha0lzVVN4RlFVRlZPMEZCUTJoQ0xGbEJRVWtzUzBGQlMydENMRVZCUVV3c1EwRkJVV3hDTEZGQlFWSXNRMEZCU2l4RlFVRjFRanRCUVVOeVFpeHBRa0ZCVHl4SlFVRlFPMEZCUTBRN1FVRkRSQ3haUVVGTmJVSXNiMEpCUVc5Q0xFdEJRVXRJTEU5QlFVd3NSMEZCWlc1TExFMUJRV1lzUTBGQmMwSnRTaXhSUVVGMFFpeERRVUV4UWp0QlFVTkJMR1ZCUVU5dFFpeHJRa0ZCYTBKdVNTeE5RVUZzUWl4SFFVRXlRaXhEUVVFelFpeEhRVUVyUW0xSkxHdENRVUZyUWtNc1MwRkJiRUlzUlVGQkwwSXNSMEZCTWtRc1MwRkJTME1zVTBGQlRDeERRVUZsTzBGQlFVRXNhVUpCUVUwc1MwRkJUanRCUVVGQkxGTkJRV1lzUTBGQmJFVTdRVUZEUkRzN096czdRVUZGUkRzN096czdPenM3T3pzN08zbENRVkZ6UWp0QlFVRkJPenRCUVVGQkxGbEJRV1E1U2l4UFFVRmpMSFZGUVVGS0xFVkJRVWs3TzBGQlEzQkNMR1ZCUVU4c1MwRkJTemhITEUxQlFVd3NRMEZCV1N4VFFVRmFMRVZCUVhWQ0xGVkJRVU55U0N4RFFVRkVMRVZCUVU4N1FVRkRia01zWTBGQlRYZEhMR1ZCUVdWRUxEQkNRVUV3UWl4UFFVRXhRaXhGUVVGblEyaEhMRTlCUVdoRExFTkJRWEpDTzBGQlEwRXNhVUpCUVU4c1VVRkJTMG9zU1VGQlRDeERRVUZWTERaQ1FVRlhMRkZCUVV0cVFpeFBRVUZNTEVOQlFWZ3NSVUZCTUVJclJpeGhRVUV4UWl4RFFVRjNRMnBHTEVOQlFYaERMRU5CUVZZc1JVRkJjMFFzU1VGQmRFUXNSVUZCTkVSM1J5eFpRVUUxUkN4RFFVRlFPMEZCUTBRc1UwRklUU3hEUVVGUU8wRkJTVVE3T3pzN08wRkJSVVE3T3pzN096czdPenM3YjBKQlRVczRSQ3hSTEVWQlFWVTdRVUZEWWl4bFFVRlBMRXRCUVVzNVNDeExRVUZNTEVkQlFXRTRTQ3hSUVVGaUxFTkJRVkE3UVVGRFJEczdPenM3UVVGRlJEczdPenM3T3pzN096czdjMEpCVDA5QkxGRXNSVUZCVlR0QlFVRkJPenRCUVVObUxHVkJRVThzUzBGQlMycEVMRTFCUVV3c1EwRkJXU3hSUVVGYUxFVkJRWE5DTEZsQlFVMDdRVUZEYWtNc1kwRkJUV3RFTEZWQlFWVXNVVUZCUzBNc1NVRkJUQ3hEUVVGVlJpeFJRVUZXTEVOQlFXaENPMEZCUTBFc1kwRkJTU3hQUVVGUFF5eFBRVUZRTEV0QlFXMUNMRlZCUVhaQ0xFVkJRVzFETzBGQlEycERMR3RDUVVGTkxFbEJRVWwyU2l4VFFVRktMRU5CUVdNc1owWkJRV1FzUTBGQlRqdEJRVU5FTzBGQlEwUXNhVUpCUVU4c1dVRkJZVHRCUVVOc1FpeG5Ra0ZCVFhsS0xGZEJRVmRHTEcxRFFVRnFRanRCUVVOQkxHOUNRVUZMZEV3c1NVRkJUQ3hGUVVGWGJVa3NUVUZCV0R0QlFVTkJMRzFDUVVGUGNVUXNVVUZCVUR0QlFVTkVMRmRCU2tRN1FVRkxSQ3hUUVZaTkxFTkJRVkE3UVVGWFJEczdPenM3UVVGRlJEczdPenM3T3pzN096c3dRa0ZOVjBnc1VTeEZRVUZWTzBGQlFVRTdPMEZCUTI1Q0xGbEJRVTE2Unl4VlFVRlZMRFpDUVVGWExFdEJRVXN6UlN4UFFVRk1MRU5CUVZnc1EwRkJhRUk3UVVGRFFTeFpRVUZKTEU5QlFVOHlSU3hSUVVGUk1VUXNTVUZCWml4TFFVRjNRaXhWUVVFMVFpeEZRVUYzUXp0QlFVTjBReXhuUWtGQlRTeEpRVUZKZFVzc1ZVRkJTaXhEUVVGbExIbEVRVUZtTEVOQlFVNDdRVUZEUkRzN1FVRkZSQ3hsUVVGUExFdEJRVXR5UkN4TlFVRk1MRU5CUVZrc1dVRkJXaXhGUVVFd1FpeFZRVUZEY2tnc1EwRkJSQ3hGUVVGUE8wRkJRM1JETEdOQlFVbEJMRVZCUVVVMlFpeFJRVUZHTEV0QlFXVXNUVUZCYmtJc1JVRkJNa0k3UVVGRGVrSXNhMEpCUVUwc1NVRkJTV0lzVTBGQlNpeERRVUZqTEhORlFVRmtMRU5CUVU0N1FVRkRSRHRCUVVORUxHTkJRVWtzVDBGQlQzTktMRkZCUVZBc1MwRkJiMElzVVVGQmVFSXNSVUZCYTBNN1FVRkRhRU1zYTBKQlFVMHNTVUZCU1hSS0xGTkJRVW9zUTBGQll5d3lSRUZCWkN4RFFVRk9PMEZCUTBRN1FVRkRSQ3hqUVVGTmQwSXNVVUZCVVN4UlFVRkxRU3hMUVVGTUxFVkJRV1E3UVVGRFFTeGpRVUZKTEVOQlFVTXNjMEpCUVVsQkxFdEJRVW9zUlVGQlZ6aElMRkZCUVZnc1EwRkJUQ3hGUVVFeVFqdEJRVU42UWl4clFrRkJUU3hKUVVGSmVrb3NTMEZCU2l4blJVRkJNa1I1U2l4UlFVRXpSQ3h0UWtGQlRqdEJRVU5FTzBGQlEwUXNZMEZCVFVzc1dVRkJXVzVKTEUxQlFVMDRTQ3hSUVVGT0xFTkJRV3hDTzBGQlEwRXNZMEZCU1N4UFFVRlBTeXhUUVVGUUxFdEJRWEZDTEZWQlFYcENMRVZCUVhGRE8wRkJRMjVETEd0Q1FVRk5MRWxCUVVrelNpeFRRVUZLTEN0RVFVRTRSSE5LTEZGQlFUbEVMR3RGUVVGMVNFc3NVMEZCZGtnc2VVTkJRWFZJUVN4VFFVRjJTQ3hqUVVGT08wRkJRMFE3TzBGQlJVUXNhVUpCUVU4c1dVRkJZVHRCUVVOc1FpeG5Ra0ZCVFROR0xGVkJRVlV5Uml4eFEwRkJhRUk3UVVGRFFTeG5Ra0ZCVFVNc1ZVRkJWUzlITEZGQlFWRXhSQ3hKUVVGU0xFTkJRV0UyUlN4UFFVRmlMRU5CUVdoQ08wRkJRMEVzYlVKQlFVOHNVVUZCU3pkRkxFbEJRVXdzUTBGQlZYbExMRTlCUVZZc1JVRkJiVUlzU1VGQmJrSXNSVUZCZVVJc1VVRkJTekZNTEU5QlFVd3NRMEZCZWtJc1EwRkJVRHRCUVVORUxGZEJTa1E3UVVGTFJDeFRRWEpDVFN4RFFVRlFPMEZCYzBKRU96czdPenRCUVVWRU96czdPenM3T3pzN2NVSkJTMDA3UVVGRFNpeGxRVUZQTEV0QlFVdHRTU3hOUVVGTUxFTkJRVmtzUzBGQldpeEZRVUZ0UWl4VlFVRkRja2dzUTBGQlJEdEJRVUZCTEdsQ1FVRlJRU3hGUVVGRk1FUXNSMEZCUml4TFFVRlZOa0lzVTBGQlZpeEhRVUZ6UWl4SlFVRjBRaXhIUVVFMlFuWkdMRVZCUVVVd1JDeEhRVUYyUXp0QlFVRkJMRk5CUVc1Q0xFTkJRVkE3UVVGRFJEczdPenM3UVVGRlJEczdPenM3T3pzN096czdjMEpCVDA4N1FVRkRUQ3hsUVVGUExFdEJRVXN5UkN4TlFVRk1MRU5CUVZrc1RVRkJXaXhGUVVGdlFpeFZRVUZEY2tnc1EwRkJSRHRCUVVGQkxHbENRVUZQTEhWQ1FVRlhRU3hEUVVGWUxFTkJRVkE3UVVGQlFTeFRRVUZ3UWl4RFFVRlFPMEZCUTBRN096czdPMEZCUlVRN096czdPenM3T3pzN08zTkNRVTlQTzBGQlEwd3NXVUZCVFRaRUxGVkJRVlVzTmtKQlFWY3NTMEZCU3pORkxFOUJRVXdzUTBGQldDeERRVUZvUWp0QlFVTkJMR1ZCUVU4c1MwRkJTMjFKTEUxQlFVd3NRMEZCV1N4TlFVRmFMRVZCUVc5Q0xGVkJRVU55U0N4RFFVRkVPMEZCUVVFc2FVSkJRM3BDTmtRc1VVRkJVV2RJTEdsQ1FVRlNMRWRCUVRSQ2FFZ3NVVUZCVVdkSUxHbENRVUZTTEVOQlFUQkNOMHNzUTBGQk1VSXNRMEZCTlVJc1IwRkJNa1FzT0VKQlFXdENRU3hEUVVGc1FpeERRVVJzUXp0QlFVRkJMRk5CUVhCQ0xFTkJRVkE3UVVGSFJEczdPenM3UVVGRlJEczdPenM3T3pzN096czdPM2RDUVZGVE9Fc3NVeXhGUVVGWE8wRkJRMnhDTEZsQlFVa3NUMEZCVDBFc1UwRkJVQ3hMUVVGeFFpeFJRVUZ5UWl4SlFVRnBRMEVzVlVGQlZVTXNUMEZCVml4RFFVRnJRaXhIUVVGc1FpeE5RVUV5UWl4RFFVRkRMRU5CUVdwRkxFVkJRVzlGTzBGQlEyeEZPMEZCUTBFelNDeHJRa0ZCVVVNc1NVRkJVaXhEUVVGaExITkpRVUZpTzBGQlEwUTdRVUZEUkN4bFFVRlBMRXRCUVV0blJTeE5RVUZNTEVOQlFWa3NWVUZCV2l4RlFVRjNRaXhWUVVGRGNrZ3NRMEZCUkR0QlFVRkJMR2xDUVVGUExHZERRVUZoUVN4RFFVRmlMRVZCUVdkQ09Fc3NVMEZCYUVJc1EwRkJVRHRCUVVGQkxGTkJRWGhDTEVOQlFWQTdRVUZEUkRzN096czdRVUZGUkRzN096czdPenM3T3pzN2RVSkJUMUZGTEVVc1JVRkJTVHRCUVVGQk96dEJRVU5XTEdGQlFVczFTeXhuUWtGQlRDeEhRVUYzUW5GRUxFOUJRWGhDTEVOQlFXZERMRlZCUVVONlJDeERRVUZFTEVWQlFVbHZSaXhEUVVGS08wRkJRVUVzYVVKQlFWVTBSaXhIUVVGSE9VTXNTVUZCU0N4RFFVRlJMRTlCUVZJc1JVRkJZeXhSUVVGTEwwZ3NTVUZCVEN4RFFVRlZTQ3hEUVVGV0xFTkJRV1FzUlVGQk5FSnZSaXhEUVVFMVFpeERRVUZXTzBGQlFVRXNVMEZCYUVNN1FVRkRRU3hsUVVGUExFbEJRVkE3UVVGRFJEczdPenM3UVVGRlJEczdPenM3T3pzN096czdiVUpCVDBrMFJpeEZMRVZCUVVrN1FVRkJRVHM3UVVGRFRpeGxRVUZQTEV0QlFVczFTeXhuUWtGQlRDeEhRVUYzUW10SUxFZEJRWGhDTEVOQlFUUkNMRlZCUVVOMFNDeERRVUZFTEVWQlFVbHZSaXhEUVVGS08wRkJRVUVzYVVKQlFWVTBSaXhIUVVGSE9VTXNTVUZCU0N4RFFVRlJMRTlCUVZJc1JVRkJZeXhSUVVGTEwwZ3NTVUZCVEN4RFFVRlZTQ3hEUVVGV0xFTkJRV1FzUlVGQk5FSnZSaXhEUVVFMVFpeERRVUZXTzBGQlFVRXNVMEZCTlVJc1EwRkJVRHRCUVVORU96czdPenRCUVVWRU96czdPenM3T3pzN096czdjMEpCVVU4MFJpeEZMRVZCUVRoQ08wRkJRVUU3TzBGQlFVRXNXVUZCTVVKRExGbEJRVEJDTEhWRlFVRllNVVlzVTBGQlZ6czdRVUZEYmtNc1dVRkJTWGRETEZWQlFWVXZSaXhOUVVGV0xFZEJRVzFDTEVOQlFYWkNMRVZCUVRCQ08wRkJRM2hDTEdsQ1FVRlBMRXRCUVVzMVFpeG5Ra0ZCVEN4SFFVRjNRamhMTEUxQlFYaENMRU5CUTB3c1ZVRkJRME1zUzBGQlJDeEZRVUZSYmt3c1EwRkJVaXhGUVVGWGIwWXNRMEZCV0R0QlFVRkJMRzFDUVVGcFFqUkdMRWRCUVVjNVF5eEpRVUZJTEVOQlFWRXNUMEZCVWl4RlFVRmphVVFzUzBGQlpDeEZRVUZ4UWl4UlFVRkxhRXdzU1VGQlRDeERRVUZWU0N4RFFVRldMRU5CUVhKQ0xFVkJRVzFEYjBZc1EwRkJia01zUTBGQmFrSTdRVUZCUVN4WFFVUkxMRVZCUlV3MlJpeFpRVVpMTEVOQlFWQTdRVUZKUkR0QlFVTkVMR1ZCUVU4c1MwRkJTemRMTEdkQ1FVRk1MRWRCUVhkQ09Fc3NUVUZCZUVJc1EwRkJLMElzVlVGQlEwTXNTMEZCUkN4RlFVRlJia3dzUTBGQlVpeEZRVUZYYjBZc1EwRkJXRHRCUVVGQkxHbENRVUZwUWpSR0xFZEJRVWM1UXl4SlFVRklMRU5CUTNKRUxFOUJSSEZFTEVWQlJYSkVPVU1zVFVGQlRTeERRVUZPTEVkQlFWVXNVVUZCUzJwR0xFbEJRVXdzUTBGQlZXZE1MRXRCUVZZc1EwRkJWaXhIUVVFMlFrRXNTMEZHZDBJc1JVRkhja1FzVVVGQlMyaE1MRWxCUVV3c1EwRkJWVWdzUTBGQlZpeERRVWh4UkN4RlFVbHlSRzlHTEVOQlNuRkVMRU5CUVdwQ08wRkJRVUVzVTBGQkwwSXNRMEZCVUR0QlFVMUVPenM3T3p0QlFVVkVPenM3T3pzN096czdPenM3TWtKQlVWazBSaXhGTEVWQlFUaENPMEZCUVVFN08wRkJRVUVzV1VGQk1VSkRMRmxCUVRCQ0xIVkZRVUZZTVVZc1UwRkJWenM3UVVGRGVFTXNXVUZCU1hkRExGVkJRVlV2Uml4TlFVRldMRWRCUVcxQ0xFTkJRWFpDTEVWQlFUQkNPMEZCUTNoQ0xHbENRVUZQTEV0QlFVczFRaXhuUWtGQlRDeEhRVUYzUW1kTUxGZEJRWGhDTEVOQlEwd3NWVUZCUTBRc1MwRkJSQ3hGUVVGUmJrd3NRMEZCVWl4RlFVRlhiMFlzUTBGQldEdEJRVUZCTEcxQ1FVRnBRalJHTEVkQlFVYzVReXhKUVVGSUxFTkJRVkVzVDBGQlVpeEZRVUZqYVVRc1MwRkJaQ3hGUVVGeFFpeFJRVUZMYUV3c1NVRkJUQ3hEUVVGVlNDeERRVUZXTEVOQlFYSkNMRVZCUVcxRGIwWXNRMEZCYmtNc1EwRkJha0k3UVVGQlFTeFhRVVJMTEVWQlJVdzJSaXhaUVVaTExFTkJRVkE3UVVGSlJEdEJRVU5FTEdWQlFVOHNTMEZCU3pkTExHZENRVUZNTEVkQlFYZENaMHdzVjBGQmVFSXNRMEZCYjBNc1ZVRkJRMFFzUzBGQlJDeEZRVUZSYmt3c1EwRkJVaXhGUVVGWGIwWXNRMEZCV0R0QlFVRkJMR2xDUVVGcFFqUkdMRWRCUVVjNVF5eEpRVUZJTEVOQlF6RkVMRTlCUkRCRUxFVkJSVEZFT1VNc1RVRkJUU3hEUVVGT0xFZEJRVlVzVVVGQlMycEdMRWxCUVV3c1EwRkJWV2RNTEV0QlFWWXNRMEZCVml4SFFVRTJRa0VzUzBGR05rSXNSVUZITVVRc1VVRkJTMmhNTEVsQlFVd3NRMEZCVlVnc1EwRkJWaXhEUVVnd1JDeEZRVWt4Ukc5R0xFTkJTakJFTEVOQlFXcENPMEZCUVVFc1UwRkJjRU1zUTBGQlVEdEJRVTFFT3pzN096dEJRVVZFT3pzN096czdPenM3T3pzN2NVSkJVVTFwUnl4TExFVkJRVTlETEVjc1JVRkJTenRCUVVOb1FpeGxRVUZQTEV0QlFVdHVUQ3hKUVVGTUxFTkJRVlVzUzBGQlMwTXNaMEpCUVV3c1IwRkJkMEp0VEN4TFFVRjRRaXhEUVVFNFFrWXNTMEZCT1VJc1JVRkJjVU5ETEVkQlFYSkRMRU5CUVZZc1EwRkJVRHRCUVVORU96czdPenRCUVVWRU96czdPenM3T3pzN08yOUNRVTFMZEVNc1VTeEZRVUZWTzBGQlEySXNXVUZCU1N4TFFVRkxMMG9zU1VGQlRDeE5RVUZsTEVsQlFXNUNMRVZCUVhsQ08wRkJRM1pDTEdkQ1FVRk5MRWxCUVVrMFFpeExRVUZLTEVOQlFWVXNjMFJCUVZZc1EwRkJUanRCUVVORU8wRkJRMFFzV1VGQlRXcENMRmxCUVZrc0swSkJRV1Z2U2l4UlFVRm1MRU5CUVd4Q08wRkJRMEVzWlVGQlR5eExRVUZMTlVrc1owSkJRVXdzUjBGQmQwSXlTU3hKUVVGNFFpeERRVUUyUW01S0xGTkJRVGRDTEVOQlFWQTdRVUZEUkRzN096czdRVUZGUkRzN096czdPenM3T3p0NVFrRk5WVUVzVXl4RlFVRlhPMEZCUVVFN08wRkJRMjVDTEdWQlFVOHNTMEZCUzFFc1owSkJRVXdzUjBGQmQwSXlTU3hKUVVGNFFpeERRVUUyUWl4VlFVRkRMMGtzUTBGQlJDeEZRVUZKYjBZc1EwRkJTanRCUVVGQkxHbENRVUZWZUVZc1ZVRkJWWE5KTEVsQlFWWXNRMEZCWlN4UFFVRm1MRVZCUVhGQ0xGRkJRVXN2U0N4SlFVRk1MRU5CUVZWSUxFTkJRVllzUTBGQmNrSXNSVUZCYlVOdlJpeERRVUZ1UXl4RFFVRldPMEZCUVVFc1UwRkJOMElzUTBGQlVEdEJRVU5FT3pzN096dEJRVVZFT3pzN096czdPenM3TzNGQ1FVMU5ORVFzVVN4RlFVRlZPMEZCUTJRc1dVRkJUWEJLTEZsQlFWa3NLMEpCUVdWdlNpeFJRVUZtTEVOQlFXeENPMEZCUTBFc1pVRkJUeXhMUVVGTE5Va3NaMEpCUVV3c1IwRkJkMEo1U1N4TFFVRjRRaXhEUVVFNFFtcEtMRk5CUVRsQ0xFTkJRVkE3UVVGRFJEczdPenM3UVVGRlJEczdPenM3T3pzN096c3dRa0ZOVjBFc1V5eEZRVUZYTzBGQlFVRTdPMEZCUTNCQ0xHVkJRVThzUzBGQlMxRXNaMEpCUVV3c1IwRkJkMEo1U1N4TFFVRjRRaXhEUVVFNFFpeFZRVUZETjBrc1EwRkJSQ3hGUVVGSmIwWXNRMEZCU2p0QlFVRkJMR2xDUVVGVmVFWXNWVUZCVlhOSkxFbEJRVllzUTBGQlpTeFBRVUZtTEVWQlFYRkNMRkZCUVVzdlNDeEpRVUZNTEVOQlFWVklMRU5CUVZZc1EwRkJja0lzUlVGQmJVTnZSaXhEUVVGdVF5eERRVUZXTzBGQlFVRXNVMEZCT1VJc1EwRkJVRHRCUVVORU96czdPenRCUVVWRU96czdPenM3T3pzN096czdkVUpCVVZFMFJpeEZMRVZCUVVrN1FVRkJRVHM3UVVGRFZpeFpRVUZOTjBrc1VVRkJVU3hMUVVGTEwwSXNaMEpCUVV3c1IwRkJkMEpyU0N4SFFVRjRRaXhEUVVFMFFpeFZRVUZEZEVnc1EwRkJSQ3hGUVVGSmIwWXNRMEZCU2p0QlFVRkJMR2xDUVVGVk5FWXNSMEZCUnpsRExFbEJRVWdzUTBGQlVTeFBRVUZTTEVWQlFXTXNVVUZCU3k5SUxFbEJRVXdzUTBGQlZVZ3NRMEZCVml4RFFVRmtMRVZCUVRSQ2IwWXNRMEZCTlVJc1EwRkJWanRCUVVGQkxGTkJRVFZDTEVOQlFXUTdRVUZEUVN4WlFVRk5iMGNzV1VGQldTeHBRMEZCUzNKS0xFdEJRVXdzUlVGQldTeERRVUZhTEVOQlFXeENPMEZCUTBFc1pVRkJUeXhMUVVGTGFFTXNTVUZCVEN4RFFVRlZjVXdzVlVGQlZUTk1MRTFCUVZZc1EwRkJhVUpSTEU5QlFXcENMRU5CUVZZc1EwRkJVRHRCUVVORU96czdPenRCUVVWRU96czdPenM3T3pzN096czdlVUpCVVZWVUxGTXNSVUZCVnp0QlFVRkJPenRCUVVOdVFpeGxRVUZQUml4dFFrRkJiVUlzU1VGQmJrSXNSVUZCZVVJc1ZVRkJRMDBzUTBGQlJDeEZRVUZQTzBGQlEzSkRMR05CUVUwMFFpeFBRVUZQTEZGQlFVdDZRaXhKUVVGTUxFTkJRVlZJTEVOQlFWWXNRMEZCWWp0QlFVTkJMR2xDUVVGUE5FSXNTMEZCUzBrc1RVRkJUQ3hIUVVGakxFTkJRV1FzU1VGQmJVSndReXhWUVVGVlowTXNTVUZCVml4RFFVRXhRanRCUVVORUxGTkJTRTBzUTBGQlVEdEJRVWxFT3pzN096dEJRVVZFT3pzN096czdPenM3TzIxQ1FVMUphMGtzU3l4RlFVRlBPMEZCUTFRc1pVRkJUeXhMUVVGTE1rSXNWMEZCVEN4SFFVRnRRak5DTEV0QlFXNUNMRU5CUVZBN1FVRkRSRHM3T3pzN1FVRkZSRHM3T3pzN096czdPenRyUWtGTlIwRXNTeXhGUVVGUE8wRkJRMUlzV1VGQlRUTklMRkZCUVZFc1MwRkJTeTlDTEdkQ1FVRk1MRVZCUVdRN1FVRkRRU3haUVVGSk1Fb3NVVUZCVVROSUxFMUJRVTFJTEUxQlFXeENMRVZCUVRCQ08wRkJRM2hDTEdsQ1FVRlBMRXRCUVVzM1FpeEpRVUZNTEVOQlFWVm5ReXhOUVVGTk1rZ3NTMEZCVGl4RFFVRldMRU5CUVZBN1FVRkRSRHRCUVVORUxHVkJRVThzUzBGQlN6TktMRWxCUVV3c1EwRkJWU3hGUVVGV0xFTkJRVkE3UVVGRFJEczdPenM3UVVGRlJEczdPenM3T3pzN08zVkNRVXRSTzBGQlEwNHNaVUZCVHl4TFFVRkxiVVlzUlVGQlRDeERRVUZSTEVOQlFWSXNRMEZCVUR0QlFVTkVPenM3T3p0QlFVVkVPenM3T3pzN096czdjMEpCUzA4N1FVRkRUQ3hsUVVGUExFdEJRVXRCTEVWQlFVd3NRMEZCVVN4TFFVRkxkRVFzVFVGQlRDeEhRVUZqTEVOQlFYUkNMRU5CUVZBN1FVRkRSRHM3T3pzN1FVRkZSRHM3T3pzN096czdPM2xDUVV0Vk8wRkJRMUk3UVVGRFFXOUNMR2RDUVVGUlF5eEpRVUZTTEVOQlFXRXNiVVZCUVdJN1FVRkRRU3hsUVVGUExFTkJRVU1zUzBGQlMzRkpMRTFCUVV3c1JVRkJVanRCUVVORU96czdPenRCUVVWRU96czdPenM3T3pzN096dDNRa0ZQZDBJN1FVRkJRU3haUVVGcVFqRkRMRkZCUVdsQ0xIVkZRVUZPTEVsQlFVMDdPMEZCUTNSQ0xHVkJRVTlxUWl4VlFVRlZMMFlzVFVGQlZpeEhRVUZ0UWl4RFFVRnVRaXhIUVVGMVFpeExRVUZMTWtvc1NVRkJUQ3hEUVVGVk0wTXNVVUZCVml4RlFVRnZRakJETEUxQlFYQkNMRVZCUVhaQ0xFZEJRWE5FTEV0QlFVc3hTaXhOUVVGTUxFZEJRV01zUTBGQk0wVTdRVUZEUkRzN096czdRVUZGUkRzN096czdPenM3T3pzN08zTkNRVkZQTUVnc1NTeEZRVUZOYzBJc1JTeEZRVUZKTzBGQlEyWXNXVUZCVFZrc1UwRkJVeXhQUVVGUGJFTXNTVUZCVUN4TFFVRm5RaXhSUVVGb1FpeEhRVUV5UWtFc1NVRkJNMElzUjBGQmEwTXNVMEZCYWtRN1FVRkRRU3haUVVGTmVrTXNWMEZCVnl4UFFVRlBLMFFzUlVGQlVDeExRVUZqTEZWQlFXUXNSMEZCTWtKQkxFVkJRVE5DTEVkQlFXZERkRUlzU1VGQmFrUTdRVUZEUVN4WlFVRkpMRXRCUVVzeFNDeE5RVUZNTEV0QlFXZENMRU5CUVhCQ0xFVkJRWFZDTzBGQlEzSkNMR2RDUVVGTkxFbEJRVWx1UWl4TFFVRktMRzFDUVVGeFFpdExMRTFCUVhKQ0xHOUVRVUU0UkN4TFFVRkxOVW9zVFVGQmJrVXNjMEpCUVU0N1FVRkRSRHRCUVVORUxHVkJRVTlwUml4VFFVRlRhVUlzU1VGQlZDeERRVUZqTEVsQlFXUXNSVUZCYjBJc1MwRkJTMnBKTEdWQlFVd3NSVUZCY0VJc1EwRkJVRHRCUVVORU96czdPenRCUVVWRU96czdPenM3T3pzN096dHZRa0ZQU3pKQ0xFa3NSVUZCYTBNN1FVRkJRU3haUVVFMVFtdEZMRWxCUVRSQ0xIVkZRVUZ5UWl4TFFVRkxOMGNzU1VGQlRDeERRVUZ4UWpzN1FVRkRja01zV1VGQlNUSkRMR2RDUVVGblFqWkZMR05CUVhCQ0xFVkJRVzlETzBGQlEyeERMR2xDUVVGUE4wVXNTVUZCVUR0QlFVTkVPenRCUVVodlF5d3lRMEZCVGpoRExFbEJRVTA3UVVGQlRrRXNZMEZCVFR0QlFVRkJPenRCUVVseVF5eHJSRUZCVnl0Q0xHTkJRVmdzYVVKQlFUQkNOMFVzU1VGQk1VSXNSVUZCWjBOclJTeEpRVUZvUXl4SFFVRjVRM0JDTEVsQlFYcERPMEZCUTBRN096czdPMEZCUlVRN096czdPenM3T3pzN096dDFRa0ZSYjBJN1FVRkJRU3haUVVGa2JrVXNUMEZCWXl4MVJVRkJTaXhGUVVGSk96dEJRVU5zUWl4bFFVRlBMSFZDUVVGWExFdEJRVXRJTEdkQ1FVRk1MRVZCUVZnc1JVRkJiME5ITEU5QlFYQkRMRU5CUVZBN1FVRkRSRHM3T3pzN1FVRkZSRHM3T3pzN096czdPenR0UWtGTlNYTk1MRmNzUlVGQllUdEJRVU5tUVN4dlFrRkJXU3hKUVVGYU8wRkJRMEVzWlVGQlR5eEpRVUZRTzBGQlEwUTdPenM3TzBGQlJVUTdPenM3T3pzN096czdPM05DUVU5dFFqdEJRVUZCT3p0QlFVRkJMRmxCUVdSMFRDeFBRVUZqTEhWRlFVRktMRVZCUVVrN08wRkJRMnBDTEZsQlFVMXpSQ3hWUVVGVkxEWkNRVUZYTEV0QlFVc3pSU3hQUVVGTUxFTkJRVmdzUTBGQmFFSTdRVUZEUVN4WlFVRk5kMHNzVDBGQlR5eE5RVUZpTzBGQlEwRXNaVUZCVHl4TFFVRkxja01zVFVGQlRDeERRVUZaY1VNc1NVRkJXaXhGUVVGclFpeFZRVUZETVVvc1EwRkJSQ3hGUVVGUE8wRkJRemxDTEdOQlFVbEJMRXRCUVV0QkxFVkJRVVUyUWl4UlFVRkdMRXRCUVdVc1RVRkJlRUlzUlVGQlowTTdRVUZET1VJc2EwSkJRVTBzU1VGQlNXSXNVMEZCU2l4elFrRkJhVU13U1N4SlFVRnFReXcyUTBGQlRqdEJRVU5FTzBGQlEwUXNZMEZCVFc5RExFdEJRVXNzTmtKQlFWY3NVVUZCU3pWTkxFOUJRVXdzUTBGQldDeEZRVUV3UWl0R0xHRkJRVEZDTEVOQlFYZERha1lzUTBGQmVFTXNRMEZCV0R0QlFVTkJMR05CUVVrc1EwRkJReXh4UTBGQmVVSTRUQ3hGUVVGNlFpeEZRVUUyUW1wSkxFOUJRVGRDTEVOQlFVd3NSVUZCTkVNN1FVRkRNVU1zYTBKQlFVMHNTVUZCU1RkRExGTkJRVW9zYzBKQlFXbERNRWtzU1VGQmFrTXNlVU5CUVU0N1FVRkRSRHRCUVVORUxHTkJRVTFzUkN4bFFVRmxSQ3d3UWtGQk1FSXNUMEZCTVVJc1JVRkJaME5vUnl4UFFVRm9ReXhEUVVGeVFqdEJRVU5CTEdsQ1FVRlBMRkZCUVV0S0xFbEJRVXdzUTBGQlZUSk1MRVZCUVZZc1JVRkJZeXhKUVVGa0xFVkJRVzlDZEVZc1dVRkJjRUlzUTBGQlVEdEJRVU5FTEZOQlZrMHNRMEZCVUR0QlFWZEVPenM3T3p0QlFVVkVPenM3T3pzN096czdPekpDUVUxWk8wRkJRMVlzWlVGQlR5eExRVUZMZFVZc1YwRkJUQ3hEUVVGcFFpeFZRVUZETDB3c1EwRkJSRHRCUVVGQkxHbENRVUZQTEU5QlFVOUJMRVZCUVVWcFJDeEpRVUZHTEVWQlFWQXNTMEZCYjBJc1VVRkJNMEk3UVVGQlFTeFRRVUZxUWl4RFFVRlFPMEZCUTBRN096czdPenM3T3p0QlFVZElPenM3T3pzN1FVRkpRU3hUUVVGVEswa3NkMEpCUVZRc1EwRkJhME5vUnl4cFFrRkJiRU1zUlVGQmNVUTdRVUZEYmtRc1RVRkJUVzVETEZWQlFWVXNOa0pCUVZkdFF5eHJRa0ZCYTBJNVJ5eFBRVUZzUWl4RFFVRllMRU5CUVdoQ08wRkJRMEVzVFVGQlRTdE5MR2xDUVVGcFFtcEhMR3RDUVVGclFucEhMR1ZCUVd4Q0xFTkJRWFpDTzBGQlEwRXNUVUZCVFRKTkxHdENRVUZyUWtRc1pVRkJaV3hPTEZGQlFXWXNRMEZCZUVJN1FVRkRRU3hOUVVGTmIwNHNZMEZCWTBRc1owSkJRV2RDYmtZc1QwRkJhRUlzUlVGQmNFSTdPMEZCU20xRUxDdENRVkV2UTNaQ0xHZERRVUZuUTFFc2FVSkJRV2hETEVWQlFXMUVia01zVDBGQmJrUXNRMEZTSzBNN1FVRkJRU3hOUVUxcVJEWkNMR0ZCVG1sRUxEQkNRVTFxUkVFc1lVRk9hVVE3UVVGQlFTeE5RVTlxUkVVc1kwRlFhVVFzTUVKQlQycEVRU3hqUVZCcFJEczdRVUZUYmtRc1RVRkJUWGRITEhGQ1FVRnhRa2dzWlVGQlpYaE5MR1ZCUVdZc1EwRkJNMEk3TzBGQlJVRjNUU3hwUWtGQlpVa3NWVUZCWml3NFFrRkRTM0pITEd0Q1FVRnJRbnBITEdWQlFXeENMRVZCUVcxRFRDeFBRVUZ1UXl4RlFVRTBRM2xITEU5QlJHcEVMRVZCUlV0RUxHRkJSa3c3UVVGSlFYVkhMR2xDUVVGbGVFMHNaVUZCWml4SlFVRnJReXhKUVVGSmIwZ3NSMEZCU2l3NFFrRkJXWFZHTEd0Q1FVRmFMSE5DUVVGdFEzaEhMR05CUVc1RExFZEJRV3hET3p0QlFVVkJMRTFCUVVrc1QwRkJUeTlDTEZGQlFWRjVTU3hwUWtGQlppeExRVUZ4UXl4VlFVRnlReXhKUVVGdFJIcEpMRkZCUVZGNVNTeHBRa0ZCVWl4RFFVRXdRa2dzV1VGQldXeEtMRWxCUVhSRExFTkJRWFpFTEVWQlFXOUhPMEZCUTJ4SExGRkJRVTF6U2l4WFFVRlhTaXhaUVVGWmJFb3NTVUZCTjBJN1FVRkRRVHRCUVVOQk8wRkJRMEVzVVVGQlRYVktMRmRCUVZjelNTeFJRVUZSTkVrc2RVSkJRVklzUTBGQlowTkdMRkZCUVdoRExFTkJRV3BDTzBGQlEwRXNVVUZCVFVjc1YwRkJWemxITEdWQlFXVnhSU3hIUVVGbUxFTkJRVzFDZFVNc1VVRkJia0lzUTBGQmFrSTdRVUZEUVN4UlFVRk5SeXhYUVVGWFVDeHRRa0ZCYlVKdVF5eEhRVUZ1UWl4RFFVRjFRblZETEZGQlFYWkNMRU5CUVdwQ096dEJRVVZCTzBGQlEwRXNVVUZCU1VVc1lVRkJZVU1zVVVGQmFrSXNSVUZCTWtJN1FVRkRla0pXTEhGQ1FVRmxha1VzVVVGQlpqdEJRVU5FTzBGQlEwWTdRVUZEUmpzN1FVRkZSRHM3T3pzN096dEpRVTFOTlVJc2QwSTdPenRCUVVOS0xHOURRVUZaYWtVc1MwRkJXaXhGUVVGdFFqSkVMRWxCUVc1Q0xFVkJRWGxDU3l4VlFVRjZRaXhGUVVGeFF6dEJRVUZCT3p0QlFVRkJMSE5LUVVNM1FtaEZMRXRCUkRaQ096dEJRVVZ1UXl4dlEwRkJhVUkxUXl4bFFVRnFRaXhGUVVGclEzVkhMRWxCUVd4RE8wRkJRMEVzYjBOQlFXbENkRWNzVjBGQmFrSXNSVUZCT0VJeVJ5eFZRVUU1UWp0QlFVaHRRenRCUVVsd1F6czdRVUZGUkRzN096czdPenM3T3pCQ1FVbHJRanRCUVVGQk96dEJRVUZCTERKRFFVRk9la0lzU1VGQlRUdEJRVUZPUVN4alFVRk5PMEZCUVVFN08wRkJRMmhDTEZsQlFVMXJTU3h4VEVGQk1rSnNTU3hKUVVFelFpeEZRVUZPTzBGQlEwRnpTQ3hwUTBGQmVVSXNTVUZCZWtJN1FVRkRRU3hsUVVGUFdTeE5RVUZRTzBGQlEwUTdPenM3TzBGQlJVUTdPenM3T3pzN096QkNRVWxyUWp0QlFVRkJPenRCUVVGQkxESkRRVUZPYkVrc1NVRkJUVHRCUVVGT1FTeGpRVUZOTzBGQlFVRTdPMEZCUTJoQ0xGbEJRVTFyU1N4eFRFRkJNa0pzU1N4SlFVRXpRaXhGUVVGT08wRkJRMEZ6U0N4cFEwRkJlVUlzU1VGQmVrSTdRVUZEUVN4bFFVRlBXU3hOUVVGUU8wRkJRMFE3T3pzN08wRkJSVVE3T3pzN08zTkRRVU4xUWp0QlFVTnlRaXhqUVVGTkxFbEJRVWt2VEN4TFFVRktMRU5CUVZVc2RVVkJRVllzUTBGQlRqdEJRVU5FT3pzN096czdPMFZCT1VKdlF6UkdMR003TzBGQmFVTjJReXhKUVVGSmIwY3NjMEpCUVVvc1JVRkJjVUk3UVVGRGJrSjBTaXhUUVVGUGRVb3NZMEZCVUN4RFFVRnpRbkpITEdWQlFXVXpReXhUUVVGeVF5eEZRVUZuUkN0SkxITkNRVUZvUkN4RlFVRnBSVHRCUVVNdlJFVXNhMEpCUVdNc1NVRkVhVVE3UVVGRkwwUkRPMEZCUVU4c1pVRkJVME1zVVVGQlZDeEhRVUZ2UWp0QlFVRkJPenRCUVVONlFpeFpRVUZOUXl4UFFVRlBMRXRCUVVzNVRTeG5Ra0ZCVEN4SFFVRjNRbmxOTEhOQ1FVRjRRaXhIUVVGaU8wRkJRMEVzV1VGQlRXaEtMRlZCUVZVc05rSkJRVmNzUzBGQlN6TkZMRTlCUVV3c1EwRkJXQ3hEUVVGb1FqdEJRVU5CTEd0RVFVTkhNazRzYzBKQlJFZ3NZMEZEYzBJN1FVRkJSU3hwUWtGQlR5eEpRVUZRTzBGQlFXTXNVMEZFZEVNN1FVRkJRU3d3UWtGRlV6dEJRVU5NTEdkQ1FVRk5UU3hQUVVGUFJDeExRVUZMUXl4SlFVRk1MRVZCUVdJN1FVRkRRU3huUWtGQlNVRXNTMEZCUzBNc1NVRkJWQ3hGUVVGbE8wRkJRMklzY1VKQlFVOHNSVUZCUlVFc1RVRkJUU3hKUVVGU0xFVkJRVkE3UVVGRFJEdEJRVU5FTEcxQ1FVRlBPMEZCUTB4QkxHOUNRVUZOTEV0QlJFUTdRVUZGVEVvc2NVSkJRVTl1U2l4UlFVRlJiMElzWVVGQlVpeERRVUZ6UW10SkxFdEJRVXRJTEV0QlFUTkNPMEZCUmtZc1lVRkJVRHRCUVVsRU96dEJRVmhJTzBGQlFVRTdRVUZoUkRzN1FVRm9Ra1FzWVVGQlowSkRMRkZCUVdoQ08wRkJRVUU3UVVGR0swUXNSMEZCYWtVN1FVRnZRa1E3TzBGQlJVUXNVMEZCVTBrc1kwRkJWQ3hEUVVGM1FqZERMRWxCUVhoQ0xFVkJRVGhDT0VNc1dVRkJPVUlzUlVGQk5FTTdRVUZETVVNdlNpeFRRVUZQZFVvc1kwRkJVQ3hEUVVGelFuSkhMR1ZCUVdVelF5eFRRVUZ5UXl4RlFVRm5SREJITEVsQlFXaEVMRVZCUVhORU8wRkJRM0JFVUN4UFFVUnZSRHRCUVVGQkxIRkNRVU01UXp0QlFVTktMR05CUVUwc1NVRkJTWEJLTEV0QlFVb3NNa1JCUTJ0RE1rb3NTVUZFYkVNc1owdEJSMFk0UXl4WlFVaEZMR1ZCUVU0N1FVRkxSRHM3UVVGUWJVUTdRVUZCUVRzN1FVRlJjRVJETEdkQ1FVRlpMRXRCVW5kRE8wRkJVM0JFVWl4clFrRkJZenRCUVZSelF5eEhRVUYwUkR0QlFWZEVPenRCUVVWRVRTeGxRVUZsTEUxQlFXWXNSVUZCZFVJc2FVUkJRWFpDTzBGQlEwRkJMR1ZCUVdVc1QwRkJaaXhGUVVGM1FpeHJSRUZCZUVJN1FVRkRRVUVzWlVGQlpTeFZRVUZtTEVWQlFUSkNMRVZCUVROQ08wRkJRMEZCTEdWQlFXVXNVMEZCWml4RlFVRXdRaXhGUVVFeFFqdEJRVU5CUVN4bFFVRmxMR2xDUVVGbUxFVkJRV3RETEVWQlFXeERPenR4UWtGRlpUVkhMR01pTENKbWFXeGxJam9pVTJoaGJHeHZkMWR5WVhCd1pYSXVhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKcGJYQnZjblFnWm14aGRDQm1jbTl0SUNkaGNuSmhlUzV3Y205MGIzUjVjR1V1Wm14aGRDYzdYRzVwYlhCdmNuUWdhR0Z6SUdaeWIyMGdKMmhoY3ljN1hHNXBiWEJ2Y25RZ2MyaGhiR3h2ZDBWeGRXRnNJR1p5YjIwZ0oyVnVlbmx0WlMxemFHRnNiRzkzTFdWeGRXRnNKenRjYmx4dWFXMXdiM0owSUh0Y2JpQWdibTlrWlVWeGRXRnNMRnh1SUNCdWIyUmxUV0YwWTJobGN5eGNiaUFnWTI5dWRHRnBibk5EYUdsc1pISmxibE4xWWtGeWNtRjVMRnh1SUNCM2FYUm9VMlYwVTNSaGRHVkJiR3h2ZDJWa0xGeHVJQ0IwZVhCbFQyWk9iMlJsTEZ4dUlDQnBjMUpsWVdOMFJXeGxiV1Z1ZEVGc2FXdGxMRnh1SUNCa2FYTndiR0Y1VG1GdFpVOW1UbTlrWlN4Y2JpQWdhWE5EZFhOMGIyMURiMjF3YjI1bGJuUXNYRzRnSUdselEzVnpkRzl0UTI5dGNHOXVaVzUwUld4bGJXVnVkQ3hjYmlBZ1NWUkZVa0ZVVDFKZlUxbE5RazlNTEZ4dUlDQnRZV3RsVDNCMGFXOXVjeXhjYmlBZ2MzbHRMRnh1SUNCd2NtbDJZWFJsVTJWMExGeHVJQ0JqYkc5dVpVVnNaVzFsYm5Rc1hHNGdJSE53ZVUxbGRHaHZaQ3hjYmlBZ2FYTkZiWEIwZVZaaGJIVmxMRnh1SUNCc2IyRmtRMmhsWlhKcGIxSnZiM1FzWEc1OUlHWnliMjBnSnk0dlZYUnBiSE1uTzF4dWFXMXdiM0owSUdkbGRFRmtZWEIwWlhJZ1puSnZiU0FuTGk5blpYUkJaR0Z3ZEdWeUp6dGNibWx0Y0c5eWRDQjdJR1JsWW5WblRtOWtaWE1nZlNCbWNtOXRJQ2N1TDBSbFluVm5KenRjYm1sdGNHOXlkQ0I3WEc0Z0lIQnliM0J6VDJaT2IyUmxMRnh1SUNCblpYUlVaWGgwUm5KdmJVNXZaR1VzWEc0Z0lHaGhjME5zWVhOelRtRnRaU3hjYmlBZ1kyaHBiR1J5Wlc1UFprNXZaR1VzWEc0Z0lIQmhjbVZ1ZEhOUFprNXZaR1VzWEc0Z0lIUnlaV1ZHYVd4MFpYSXNYRzU5SUdaeWIyMGdKeTR2VWxOVVZISmhkbVZ5YzJGc0p6dGNibWx0Y0c5eWRDQjdJR0oxYVd4a1VISmxaR2xqWVhSbExDQnlaV1IxWTJWVWNtVmxjMEo1VTJWc1pXTjBiM0lnZlNCbWNtOXRJQ2N1TDNObGJHVmpkRzl5Y3ljN1hHNWNibU52Ym5OMElFNVBSRVVnUFNCemVXMG9KMTlmYm05a1pWOWZKeWs3WEc1amIyNXpkQ0JPVDBSRlV5QTlJSE41YlNnblgxOXViMlJsYzE5Zkp5azdYRzVqYjI1emRDQlNSVTVFUlZKRlVpQTlJSE41YlNnblgxOXlaVzVrWlhKbGNsOWZKeWs3WEc1amIyNXpkQ0JWVGxKRlRrUkZVa1ZFSUQwZ2MzbHRLQ2RmWDNWdWNtVnVaR1Z5WldSZlh5Y3BPMXh1WTI5dWMzUWdVazlQVkNBOUlITjViU2duWDE5eWIyOTBYMThuS1R0Y2JtTnZibk4wSUU5UVZFbFBUbE1nUFNCemVXMG9KMTlmYjNCMGFXOXVjMTlmSnlrN1hHNWpiMjV6ZENCVFJWUmZVMVJCVkVVZ1BTQnplVzBvSjE5ZmMyVjBVM1JoZEdWZlh5Y3BPMXh1WTI5dWMzUWdVazlQVkY5T1QwUkZVeUE5SUhONWJTZ25YMTl5YjI5MFRtOWtaWE5mWHljcE8xeHVZMjl1YzNRZ1EwaEpURVJmUTA5T1ZFVllWQ0E5SUhONWJTZ25YMTlqYUdsc1pFTnZiblJsZUhSZlh5Y3BPMXh1WTI5dWMzUWdWMUpCVUZCSlRrZGZRMDlOVUU5T1JVNVVJRDBnYzNsdEtDZGZYM2R5WVhCd2FXNW5RMjl0Y0c5dVpXNTBYMThuS1R0Y2JtTnZibk4wSUZCU1NVMUJVbGxmVjFKQlVGQkZVaUE5SUhONWJTZ25YMTl3Y21sdFlYSjVWM0poY0hCbGNsOWZKeWs3WEc1amIyNXpkQ0JTVDA5VVgwWkpUa1JGVWlBOUlITjViU2duWDE5eWIyOTBSbWx1WkdWeVgxOG5LVHRjYm1OdmJuTjBJRkJTVDFaSlJFVlNYMVpCVEZWRlV5QTlJSE41YlNnblgxOXdjbTkyYVdSbGNsWmhiSFZsYzE5Zkp5azdYRzVjYmk4cUtseHVJQ29nUm1sdVpITWdZV3hzSUc1dlpHVnpJR2x1SUhSb1pTQmpkWEp5Wlc1MElIZHlZWEJ3WlhJZ2JtOWtaWE1uSUhKbGJtUmxjaUIwY21WbGN5QjBhR0YwSUcxaGRHTm9JSFJvWlNCd2NtOTJhV1JsWkNCd2NtVmthV05oZEdWY2JpQXFJR1oxYm1OMGFXOXVMbHh1SUNwY2JpQXFJRUJ3WVhKaGJTQjdVMmhoYkd4dmQxZHlZWEJ3WlhKOUlIZHlZWEJ3WlhKY2JpQXFJRUJ3WVhKaGJTQjdSblZ1WTNScGIyNTlJSEJ5WldScFkyRjBaVnh1SUNvZ1FIQmhjbUZ0SUh0R2RXNWpkR2x2Ym4wZ1ptbHNkR1Z5WEc0Z0tpQkFjbVYwZFhKdWN5QjdVMmhoYkd4dmQxZHlZWEJ3WlhKOVhHNGdLaTljYm1aMWJtTjBhVzl1SUdacGJtUlhhR1Z5WlZWdWQzSmhjSEJsWkNoM2NtRndjR1Z5TENCd2NtVmthV05oZEdVc0lHWnBiSFJsY2lBOUlIUnlaV1ZHYVd4MFpYSXBJSHRjYmlBZ2NtVjBkWEp1SUhkeVlYQndaWEl1Wm14aGRFMWhjQ2dvYmlrZ1BUNGdabWxzZEdWeUtHNHVaMlYwVG05a1pVbHVkR1Z5Ym1Gc0tDa3NJSEJ5WldScFkyRjBaU2twTzF4dWZWeHVYRzR2S2lwY2JpQXFJRkpsZEhWeWJuTWdZU0J1WlhjZ2QzSmhjSEJsY2lCcGJuTjBZVzVqWlNCM2FYUm9JRzl1YkhrZ2RHaGxJRzV2WkdWeklHOW1JSFJvWlNCamRYSnlaVzUwSUhkeVlYQndaWElnYVc1emRHRnVZMlVnZEdoaGRDQnRZWFJqYUZ4dUlDb2dkR2hsSUhCeWIzWnBaR1ZrSUhCeVpXUnBZMkYwWlNCbWRXNWpkR2x2Ymk1Y2JpQXFYRzRnS2lCQWNHRnlZVzBnZTFOb1lXeHNiM2RYY21Gd2NHVnlmU0IzY21Gd2NHVnlYRzRnS2lCQWNHRnlZVzBnZTBaMWJtTjBhVzl1ZlNCd2NtVmthV05oZEdWY2JpQXFJRUJ5WlhSMWNtNXpJSHRUYUdGc2JHOTNWM0poY0hCbGNuMWNiaUFxTDF4dVpuVnVZM1JwYjI0Z1ptbHNkR1Z5VjJobGNtVlZibmR5WVhCd1pXUW9kM0poY0hCbGNpd2djSEpsWkdsallYUmxLU0I3WEc0Z0lISmxkSFZ5YmlCM2NtRndjR1Z5TG5keVlYQW9kM0poY0hCbGNpNW5aWFJPYjJSbGMwbHVkR1Z5Ym1Gc0tDa3VabWxzZEdWeUtIQnlaV1JwWTJGMFpTa3VabWxzZEdWeUtFSnZiMnhsWVc0cEtUdGNibjFjYmx4dUx5b3FYRzRnS2lCRmJuTjFjbVVnYjNCMGFXOXVjeUJ3WVhOelpXUWdkRzhnVTJoaGJHeHZkMWR5WVhCd1pYSWdZWEpsSUhaaGJHbGtMaUJVYUhKdmQzTWdiM1JvWlhKM2FYTmxMbHh1SUNvZ1FIQmhjbUZ0SUh0UFltcGxZM1I5SUc5d2RHbHZibk5jYmlBcUwxeHVablZ1WTNScGIyNGdkbUZzYVdSaGRHVlBjSFJwYjI1ektHOXdkR2x2Ym5NcElIdGNiaUFnWTI5dWMzUWdlMXh1SUNBZ0lHeHBabVZqZVdOc1pVVjRjR1Z5YVcxbGJuUmhiQ3hjYmlBZ0lDQmthWE5oWW14bFRHbG1aV041WTJ4bFRXVjBhRzlrY3l4Y2JpQWdJQ0JsYm1GaWJHVkRiMjF3YjI1bGJuUkVhV1JWY0dSaGRHVlBibE5sZEZOMFlYUmxMRnh1SUNBZ0lITjFjSEJ2Y25SUWNtVjJRMjl1ZEdWNGRFRnlaM1Z0Wlc1MFQyWkRiMjF3YjI1bGJuUkVhV1JWY0dSaGRHVXNYRzRnSUNBZ2JHbG1aV041WTJ4bGN5eGNiaUFnZlNBOUlHOXdkR2x2Ym5NN1hHNGdJR2xtSUNoMGVYQmxiMllnYkdsbVpXTjVZMnhsUlhod1pYSnBiV1Z1ZEdGc0lDRTlQU0FuZFc1a1pXWnBibVZrSnlBbUppQjBlWEJsYjJZZ2JHbG1aV041WTJ4bFJYaHdaWEpwYldWdWRHRnNJQ0U5UFNBblltOXZiR1ZoYmljcElIdGNiaUFnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjJ4cFptVmplV05zWlVWNGNHVnlhVzFsYm5SaGJDQnRkWE4wSUdKbElHVnBkR2hsY2lCMGNuVmxJRzl5SUdaaGJITmxJR2xtSUhCeWIzWnBaR1ZrSnlrN1hHNGdJSDFjYmx4dUlDQnBaaUFvZEhsd1pXOW1JR1JwYzJGaWJHVk1hV1psWTNsamJHVk5aWFJvYjJSeklDRTlQU0FuZFc1a1pXWnBibVZrSnlBbUppQjBlWEJsYjJZZ1pHbHpZV0pzWlV4cFptVmplV05zWlUxbGRHaHZaSE1nSVQwOUlDZGliMjlzWldGdUp5a2dlMXh1SUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnblpHbHpZV0pzWlV4cFptVmplV05zWlUxbGRHaHZaSE1nYlhWemRDQmlaU0JsYVhSb1pYSWdkSEoxWlNCdmNpQm1ZV3h6WlNCcFppQndjbTkyYVdSbFpDY3BPMXh1SUNCOVhHNWNiaUFnYVdZZ0tGeHVJQ0FnSUd4cFptVmplV05zWlVWNGNHVnlhVzFsYm5SaGJDQWhQU0J1ZFd4c1hHNGdJQ0FnSmlZZ1pHbHpZV0pzWlV4cFptVmplV05zWlUxbGRHaHZaSE1nSVQwZ2JuVnNiRnh1SUNBZ0lDWW1JR3hwWm1WamVXTnNaVVY0Y0dWeWFXMWxiblJoYkNBOVBUMGdaR2x6WVdKc1pVeHBabVZqZVdOc1pVMWxkR2h2WkhOY2JpQWdLU0I3WEc0Z0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZHNhV1psWTNsamJHVkZlSEJsY21sdFpXNTBZV3dnWVc1a0lHUnBjMkZpYkdWTWFXWmxZM2xqYkdWTlpYUm9iMlJ6SUdOaGJtNXZkQ0JpWlNCelpYUWdkRzhnZEdobElITmhiV1VnZG1Gc2RXVW5LVHRjYmlBZ2ZWeHVYRzRnSUdsbUlDaGNiaUFnSUNCMGVYQmxiMllnWlc1aFlteGxRMjl0Y0c5dVpXNTBSR2xrVlhCa1lYUmxUMjVUWlhSVGRHRjBaU0FoUFQwZ0ozVnVaR1ZtYVc1bFpDZGNiaUFnSUNBbUppQnNhV1psWTNsamJHVnpMbU52YlhCdmJtVnVkRVJwWkZWd1pHRjBaVnh1SUNBZ0lDWW1JR3hwWm1WamVXTnNaWE11WTI5dGNHOXVaVzUwUkdsa1ZYQmtZWFJsTG05dVUyVjBVM1JoZEdVZ0lUMDlJR1Z1WVdKc1pVTnZiWEJ2Ym1WdWRFUnBaRlZ3WkdGMFpVOXVVMlYwVTNSaGRHVmNiaUFnS1NCN1hHNGdJQ0FnZEdoeWIzY2dibVYzSUZSNWNHVkZjbkp2Y2lnbmRHaGxJR3hsWjJGamVTQmxibUZpYkdWRGIyMXdiMjVsYm5SRWFXUlZjR1JoZEdWUGJsTmxkRk4wWVhSbElHOXdkR2x2YmlCemFHOTFiR1FnWW1VZ2JXRjBZMmhsWkNCaWVTQmdiR2xtWldONVkyeGxjem9nZXlCamIyMXdiMjVsYm5SRWFXUlZjR1JoZEdVNklIc2diMjVUWlhSVGRHRjBaVG9nZEhKMVpTQjlJSDFnTENCbWIzSWdZMjl0Y0dGMGFXSnBiR2wwZVNjcE8xeHVJQ0I5WEc1Y2JpQWdhV1lnS0Z4dUlDQWdJSFI1Y0dWdlppQnpkWEJ3YjNKMFVISmxka052Ym5SbGVIUkJjbWQxYldWdWRFOW1RMjl0Y0c5dVpXNTBSR2xrVlhCa1lYUmxJQ0U5UFNBbmRXNWtaV1pwYm1Wa0oxeHVJQ0FnSUNZbUlHeHBabVZqZVdOc1pYTXVZMjl0Y0c5dVpXNTBSR2xrVlhCa1lYUmxYRzRnSUNBZ0ppWWdiR2xtWldONVkyeGxjeTVqYjIxd2IyNWxiblJFYVdSVmNHUmhkR1V1Y0hKbGRrTnZiblJsZUhRZ0lUMDlJSE4xY0hCdmNuUlFjbVYyUTI5dWRHVjRkRUZ5WjNWdFpXNTBUMlpEYjIxd2IyNWxiblJFYVdSVmNHUmhkR1ZjYmlBZ0tTQjdYRzRnSUNBZ2RHaHliM2NnYm1WM0lGUjVjR1ZGY25KdmNpZ25kR2hsSUd4bFoyRmplU0J6ZFhCd2IzSjBVSEpsZGtOdmJuUmxlSFJCY21kMWJXVnVkRTltUTI5dGNHOXVaVzUwUkdsa1ZYQmtZWFJsSUc5d2RHbHZiaUJ6YUc5MWJHUWdZbVVnYldGMFkyaGxaQ0JpZVNCZ2JHbG1aV041WTJ4bGN6b2dleUJqYjIxd2IyNWxiblJFYVdSVmNHUmhkR1U2SUhzZ2NISmxka052Ym5SbGVIUTZJSFJ5ZFdVZ2ZTQjlZQ3dnWm05eUlHTnZiWEJoZEdsaWFXeHBkSGtuS1R0Y2JpQWdmVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQm5aWFJCWkdGd2RHVnlUR2xtWldONVkyeGxjeWg3SUc5d2RHbHZibk1nZlNrZ2UxeHVJQ0JqYjI1emRDQjdYRzRnSUNBZ2JHbG1aV041WTJ4bGN5QTlJSHQ5TEZ4dUlDQWdJR1Z1WVdKc1pVTnZiWEJ2Ym1WdWRFUnBaRlZ3WkdGMFpVOXVVMlYwVTNSaGRHVXNYRzRnSUNBZ2MzVndjRzl5ZEZCeVpYWkRiMjUwWlhoMFFYSm5kVzFsYm5SUFprTnZiWEJ2Ym1WdWRFUnBaRlZ3WkdGMFpTeGNiaUFnZlNBOUlHOXdkR2x2Ym5NN1hHNWNiaUFnWTI5dWMzUWdhR0Z6VEdWbllXTjVVMlYwVTNSaGRHVkJjbWNnUFNCMGVYQmxiMllnWlc1aFlteGxRMjl0Y0c5dVpXNTBSR2xrVlhCa1lYUmxUMjVUWlhSVGRHRjBaU0FoUFQwZ0ozVnVaR1ZtYVc1bFpDYzdYRzRnSUdOdmJuTjBJR2hoYzB4bFoyRmplVkJ5WlhaRGIyNTBaWGgwUVhKbklEMGdkSGx3Wlc5bUlITjFjSEJ2Y25SUWNtVjJRMjl1ZEdWNGRFRnlaM1Z0Wlc1MFQyWkRiMjF3YjI1bGJuUkVhV1JWY0dSaGRHVWdJVDA5SUNkMWJtUmxabWx1WldRbk8xeHVJQ0JqYjI1emRDQmpiMjF3YjI1bGJuUkVhV1JWY0dSaGRHVWdQU0JvWVhOTVpXZGhZM2xUWlhSVGRHRjBaVUZ5WnlCOGZDQm9ZWE5NWldkaFkzbFFjbVYyUTI5dWRHVjRkRUZ5WjF4dUlDQWdJRDhnZTF4dUlDQWdJQ0FnTGk0dUtHaGhjMHhsWjJGamVWTmxkRk4wWVhSbFFYSm5JQ1ltSUh0Y2JpQWdJQ0FnSUNBZ2IyNVRaWFJUZEdGMFpUb2dJU0ZsYm1GaWJHVkRiMjF3YjI1bGJuUkVhV1JWY0dSaGRHVlBibE5sZEZOMFlYUmxMRnh1SUNBZ0lDQWdmU2tzWEc0Z0lDQWdJQ0F1TGk0b2FHRnpUR1ZuWVdONVVISmxka052Ym5SbGVIUkJjbWNnSmlZZ2UxeHVJQ0FnSUNBZ0lDQndjbVYyUTI5dWRHVjRkRG9nSVNGemRYQndiM0owVUhKbGRrTnZiblJsZUhSQmNtZDFiV1Z1ZEU5bVEyOXRjRzl1Wlc1MFJHbGtWWEJrWVhSbExGeHVJQ0FnSUNBZ2ZTa3NYRzRnSUNBZ2ZWeHVJQ0FnSURvZ2JuVnNiRHRjYmlBZ1kyOXVjM1FnZXlCblpYUkVaWEpwZG1Wa1UzUmhkR1ZHY205dFVISnZjSE02SUc5eWFXZHBibUZzUjBSVFJsQWdmU0E5SUd4cFptVmplV05zWlhNN1hHNGdJR052Ym5OMElHZGxkRVJsY21sMlpXUlRkR0YwWlVaeWIyMVFjbTl3Y3lBOUlHOXlhV2RwYm1Gc1IwUlRSbEFnUHlCN1hHNGdJQ0FnYUdGelUyaHZkV3hrUTI5dGNHOXVaVzUwVlhCa1lYUmxRblZuT2lBaElXOXlhV2RwYm1Gc1IwUlRSbEF1YUdGelUyaHZkV3hrUTI5dGNHOXVaVzUwVlhCa1lYUmxRblZuTEZ4dUlDQjlJRG9nWm1Gc2MyVTdYRzVjYmlBZ2NtVjBkWEp1SUh0Y2JpQWdJQ0F1TGk1c2FXWmxZM2xqYkdWekxGeHVJQ0FnSUhObGRGTjBZWFJsT2lCN1hHNGdJQ0FnSUNBdUxpNXNhV1psWTNsamJHVnpMbk5sZEZOMFlYUmxMRnh1SUNBZ0lIMHNYRzRnSUNBZ1oyVjBRMmhwYkdSRGIyNTBaWGgwT2lCN1hHNGdJQ0FnSUNCallXeHNaV1JDZVZKbGJtUmxjbVZ5T2lCMGNuVmxMRnh1SUNBZ0lDQWdMaTR1YkdsbVpXTjVZMnhsY3k1blpYUkRhR2xzWkVOdmJuUmxlSFFzWEc0Z0lDQWdmU3hjYmlBZ0lDQXVMaTRvWTI5dGNHOXVaVzUwUkdsa1ZYQmtZWFJsSUNZbUlIc2dZMjl0Y0c5dVpXNTBSR2xrVlhCa1lYUmxJSDBwTEZ4dUlDQWdJR2RsZEVSbGNtbDJaV1JUZEdGMFpVWnliMjFRY205d2N5eGNiaUFnZlR0Y2JuMWNibHh1Wm5WdVkzUnBiMjRnWjJWMFVtOXZkRTV2WkdVb2JtOWtaU2tnZTF4dUlDQnBaaUFvYm05a1pTNXViMlJsVkhsd1pTQTlQVDBnSjJodmMzUW5LU0I3WEc0Z0lDQWdjbVYwZFhKdUlHNXZaR1U3WEc0Z0lIMWNiaUFnY21WMGRYSnVJRzV2WkdVdWNtVnVaR1Z5WldRN1hHNTlYRzVjYm1aMWJtTjBhVzl1SUdkbGRGSnZiM1JPYjJSbFNXNTBaWEp1WVd3b2QzSmhjSEJsY2lrZ2UxeHVJQ0JwWmlBb2QzSmhjSEJsY2x0U1QwOVVYUzVzWlc1bmRHZ2dJVDA5SURFcElIdGNiaUFnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjJkbGRGSnZiM1JPYjJSbFNXNTBaWEp1WVd3b2QzSmhjSEJsY2lrZ1kyRnVJRzl1YkhrZ1ltVWdZMkZzYkdWa0lIZG9aVzRnZDNKaGNIQmxjaUIzY21Gd2N5QnZibVVnYm05a1pTY3BPMXh1SUNCOVhHNGdJR2xtSUNoM2NtRndjR1Z5VzFKUFQxUmRJQ0U5UFNCM2NtRndjR1Z5S1NCN1hHNGdJQ0FnY21WMGRYSnVJSGR5WVhCd1pYSmJVazlQVkY5T1QwUkZVMTFiTUYwN1hHNGdJSDFjYmlBZ2NtVjBkWEp1SUhkeVlYQndaWEpiVWs5UFZGMWJUazlFUlYwN1hHNTlYRzVjYm1aMWJtTjBhVzl1SUc1dlpHVlFZWEpsYm5SektIZHlZWEJ3WlhJc0lHNXZaR1VwSUh0Y2JpQWdjbVYwZFhKdUlIQmhjbVZ1ZEhOUFprNXZaR1VvYm05a1pTd2daMlYwVW05dmRFNXZaR1ZKYm5SbGNtNWhiQ2gzY21Gd2NHVnlLU2s3WEc1OVhHNWNibVoxYm1OMGFXOXVJSEJ5YVhaaGRHVlRaWFJPYjJSbGN5aDNjbUZ3Y0dWeUxDQnViMlJsY3lrZ2UxeHVJQ0JwWmlBb0lVRnljbUY1TG1selFYSnlZWGtvYm05a1pYTXBLU0I3WEc0Z0lDQWdjSEpwZG1GMFpWTmxkQ2gzY21Gd2NHVnlMQ0JPVDBSRkxDQnViMlJsY3lrN1hHNGdJQ0FnY0hKcGRtRjBaVk5sZENoM2NtRndjR1Z5TENCT1QwUkZVeXdnVzI1dlpHVnpYU2s3WEc0Z0lIMGdaV3h6WlNCN1hHNGdJQ0FnY0hKcGRtRjBaVk5sZENoM2NtRndjR1Z5TENCT1QwUkZMQ0J1YjJSbGMxc3dYU2s3WEc0Z0lDQWdjSEpwZG1GMFpWTmxkQ2gzY21Gd2NHVnlMQ0JPVDBSRlV5d2dibTlrWlhNcE8xeHVJQ0I5WEc0Z0lIQnlhWFpoZEdWVFpYUW9kM0poY0hCbGNpd2dKMnhsYm1kMGFDY3NJSGR5WVhCd1pYSmJUazlFUlZOZExteGxibWQwYUNrN1hHNTlYRzVjYm1aMWJtTjBhVzl1SUhCMWNtVkRiMjF3YjI1bGJuUlRhRzkxYkdSRGIyMXdiMjVsYm5SVmNHUmhkR1VvY0hKbGRsQnliM0J6TENCd2NtOXdjeXdnY0hKbGRsTjBZWFJsTENCemRHRjBaU2tnZTF4dUlDQnlaWFIxY200Z0lYTm9ZV3hzYjNkRmNYVmhiQ2h3Y21WMlVISnZjSE1zSUhCeWIzQnpLU0I4ZkNBaGMyaGhiR3h2ZDBWeGRXRnNLSEJ5WlhaVGRHRjBaU3dnYzNSaGRHVXBPMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQnBjMUIxY21WRGIyMXdiMjVsYm5Rb2FXNXpkR0Z1WTJVcElIdGNiaUFnY21WMGRYSnVJR2x1YzNSaGJtTmxJQ1ltSUdsdWMzUmhibU5sTG1selVIVnlaVkpsWVdOMFEyOXRjRzl1Wlc1ME8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCblpYUkRhR2xzWkVOdmJuUmxlSFFvYm05a1pTd2dhR2xsY21GeVkyaDVMQ0J5Wlc1a1pYSmxjaWtnZTF4dUlDQmpiMjV6ZENCN0lHbHVjM1JoYm1ObExDQjBlWEJsT2lCRGIyMXdiMjVsYm5RZ2ZTQTlJRzV2WkdVN1hHNGdJR052Ym5OMElHTnZiWEJ2Ym1WdWRFNWhiV1VnUFNCa2FYTndiR0Y1VG1GdFpVOW1UbTlrWlNodWIyUmxLVHRjYmlBZ0x5OGdWMkZ5YmlCc2FXdGxJSEpsWVdOMElHbG1JR05vYVd4a1EyOXVkR1Y0ZEZSNWNHVnpJR2x6SUc1dmRDQmtaV1pwYm1Wa09seHVJQ0F2THlCb2RIUndjem92TDJkcGRHaDFZaTVqYjIwdlptRmpaV0p2YjJzdmNtVmhZM1F2WW14dllpOHhORFUwWVRoaVpUQXpOemswWmpWbE1HSXlNMkUzWlRjMk9UWmpZbUppWkdObU9HSXdaalZrTDNCaFkydGhaMlZ6TDNKbFlXTjBMV1J2YlM5emNtTXZjMlZ5ZG1WeUwxSmxZV04wVUdGeWRHbGhiRkpsYm1SbGNtVnlMbXB6STB3Mk16a3RURFkwTmx4dUlDQnBaaUFvZEhsd1pXOW1JRU52YlhCdmJtVnVkQzVqYUdsc1pFTnZiblJsZUhSVWVYQmxjeUFoUFQwZ0oyOWlhbVZqZENjcElIdGNiaUFnSUNBdkx5QmxjMnhwYm5RdFpHbHpZV0pzWlMxdVpYaDBMV3hwYm1VZ2JtOHRZMjl1YzI5c1pWeHVJQ0FnSUdOdmJuTnZiR1V1ZDJGeWJpaGNiaUFnSUNBZ0lHQWtlMk52YlhCdmJtVnVkRTVoYldWOUxtZGxkRU5vYVd4a1EyOXVkR1Y0ZENncE9pQmphR2xzWkVOdmJuUmxlSFJVZVhCbGN5QnRkWE4wSUdKbElHUmxabWx1WldRZ2FXNGdiM0prWlhJZ2RHOGdkWE5sSUdkbGRFTm9hV3hrUTI5dWRHVjRkQ2dwTG1Bc1hHNGdJQ0FnS1R0Y2JpQWdJQ0J5WlhSMWNtNGdlMzA3WEc0Z0lIMWNiaUFnTHk4Z1EyaGxZMnNnWTJocGJHUkRiMjUwWlhoMFZIbHdaWE1nYkdsclpTQnlaV0ZqZERwY2JpQWdMeThnYUhSMGNITTZMeTluYVhSb2RXSXVZMjl0TDJaaFkyVmliMjlyTDNKbFlXTjBMMkpzYjJJdk1UUTFOR0U0WW1Vd016YzVOR1kxWlRCaU1qTmhOMlUzTmprMlkySmlZbVJqWmpoaU1HWTFaQzl3WVdOcllXZGxjeTl5WldGamRDMWtiMjB2YzNKakwzTmxjblpsY2k5U1pXRmpkRkJoY25ScFlXeFNaVzVrWlhKbGNpNXFjeU5NTmpNd0xVdzJNemRjYmlBZ1kyOXVjM1FnWTJocGJHUkRiMjUwWlhoMElEMGdhVzV6ZEdGdVkyVXVaMlYwUTJocGJHUkRiMjUwWlhoMEtDazdYRzRnSUU5aWFtVmpkQzVyWlhsektHTm9hV3hrUTI5dWRHVjRkQ2t1Wm05eVJXRmphQ2dvYTJWNUtTQTlQaUI3WEc0Z0lDQWdhV1lnS0NFb2EyVjVJR2x1SUVOdmJYQnZibVZ1ZEM1amFHbHNaRU52Ym5SbGVIUlVlWEJsY3lrcElIdGNiaUFnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2loY2JpQWdJQ0FnSUNBZ1lDUjdZMjl0Y0c5dVpXNTBUbUZ0WlgwdVoyVjBRMmhwYkdSRGIyNTBaWGgwS0NrNklHdGxlU0JjSWlSN2EyVjVmVndpSUdseklHNXZkQ0JrWldacGJtVmtJR2x1SUdOb2FXeGtRMjl1ZEdWNGRGUjVjR1Z6TG1Bc1hHNGdJQ0FnSUNBcE8xeHVJQ0FnSUgxY2JpQWdmU2s3WEc0Z0lHbG1JQ2gwZVhCbGIyWWdjbVZ1WkdWeVpYSXVZMmhsWTJ0UWNtOXdWSGx3WlhNZ1BUMDlJQ2RtZFc1amRHbHZiaWNwSUh0Y2JpQWdJQ0J5Wlc1a1pYSmxjaTVqYUdWamExQnliM0JVZVhCbGN5aERiMjF3YjI1bGJuUXVZMmhwYkdSRGIyNTBaWGgwVkhsd1pYTXNJR05vYVd4a1EyOXVkR1Y0ZEN3Z0oyTm9hV3hrSUdOdmJuUmxlSFFuTENCb2FXVnlZWEpqYUhrcE8xeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCamFHbHNaRU52Ym5SbGVIUTdYRzU5WEc1Y2JtWjFibU4wYVc5dUlITndlVTl1UjJWMFEyaHBiR1JEYjI1MFpYaDBTVzVwZEdsaGJGSmxibVJsY2lodWIyUmxjeXdnWVdSaGNIUmxjaWtnZTF4dUlDQnBaaUFvWEc0Z0lDQWdJV2x6UTNWemRHOXRRMjl0Y0c5dVpXNTBSV3hsYldWdWRDaHViMlJsY3l3Z1lXUmhjSFJsY2lsY2JpQWdJQ0I4ZkNBaGJtOWtaWE11ZEhsd1pTNXdjbTkwYjNSNWNHVmNiaUFnSUNCOGZDQjBlWEJsYjJZZ2JtOWtaWE11ZEhsd1pTNXdjbTkwYjNSNWNHVXVaMlYwUTJocGJHUkRiMjUwWlhoMElDRTlQU0FuWm5WdVkzUnBiMjRuWEc0Z0lDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCdWRXeHNPMXh1SUNCOVhHNWNiaUFnY21WMGRYSnVJSE53ZVUxbGRHaHZaQ2h1YjJSbGN5NTBlWEJsTG5CeWIzUnZkSGx3WlN3Z0oyZGxkRU5vYVd4a1EyOXVkR1Y0ZENjcE8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCd2NtbDJZWFJsVTJWMFEyaHBiR1JEYjI1MFpYaDBLR0ZrWVhCMFpYSXNJSGR5WVhCd1pYSXNJR2x1YzNSaGJtTmxMQ0J5Wlc1a1pYSmxaRTV2WkdVc0lHZGxkRU5vYVd4a1EyOXVkR1Y0ZEZOd2VTa2dlMXh1SUNCamIyNXpkQ0J5Wlc1a1pYSmxjaUE5SUhkeVlYQndaWEpiVWtWT1JFVlNSVkpkTzF4dUlDQXZMeUJYWlNCdmJteDVJSE4xY0hCdmNuUWdjR0Z5Wlc1MExXSmhjMlZrSUdOdmJuUmxlSFF1WEc0Z0lHbG1JQ2hoWkdGd2RHVnlMbTl3ZEdsdmJuTXViR1ZuWVdONVEyOXVkR1Y0ZEUxdlpHVWdJVDA5SUNkd1lYSmxiblFuS1NCN0lISmxkSFZ5YmpzZ2ZWeHVJQ0JwWmlBb1oyVjBRMmhwYkdSRGIyNTBaWGgwVTNCNUtTQjdYRzRnSUNBZ2NISnBkbUYwWlZObGRDaDNjbUZ3Y0dWeUxDQkRTRWxNUkY5RFQwNVVSVmhVTENCblpYUkRhR2xzWkVOdmJuUmxlSFJUY0hrdVoyVjBUR0Z6ZEZKbGRIVnlibFpoYkhWbEtDa3BPMXh1SUNBZ0lHZGxkRU5vYVd4a1EyOXVkR1Y0ZEZOd2VTNXlaWE4wYjNKbEtDazdYRzRnSUgwZ1pXeHpaU0JwWmlBb2RIbHdaVzltSUdsdWMzUmhibU5sTG1kbGRFTm9hV3hrUTI5dWRHVjRkQ0E5UFQwZ0oyWjFibU4wYVc5dUp5a2dlMXh1SUNBZ0lDOHZJRWxtSUhSb1pYSmxKM01nYm04Z2MzQjVJR0oxZENCblpYUkRhR2xzWkVOdmJuUmxlSFFnYVhNZ1lTQm1kVzVqZEdsdmJpd2dkR2hoZENCdFpXRnVjeUJ2ZFhJZ2NtVnVaR1Z5WlhKY2JpQWdJQ0F2THlCcGN5QnViM1FnWjI5cGJtY2dkRzhnWTJGc2JDQnBkQ0JtYjNJZ2RYTXNJSE52SUhkbElHNWxaV1FnZEc4Z1kyRnNiQ0JwZENCdmRYSnpaV3gyWlhNdVhHNGdJQ0FnWTI5dWMzUWdibTlrWlVocFpYSmhjbU5vZVNBOUlGdDNjbUZ3Y0dWeVcwNVBSRVZkWFM1amIyNWpZWFFvYm05a1pWQmhjbVZ1ZEhNb2QzSmhjSEJsY2l3Z2QzSmhjSEJsY2x0T1QwUkZYU2twTzF4dUlDQWdJR052Ym5OMElHTm9hV3hrUTI5dWRHVjRkQ0E5SUdkbGRFTm9hV3hrUTI5dWRHVjRkQ2h5Wlc1a1pYSmxaRTV2WkdVc0lHNXZaR1ZJYVdWeVlYSmphSGtzSUhKbGJtUmxjbVZ5S1R0Y2JpQWdJQ0J3Y21sMllYUmxVMlYwS0hkeVlYQndaWElzSUVOSVNVeEVYME5QVGxSRldGUXNJR05vYVd4a1EyOXVkR1Y0ZENrN1hHNGdJSDBnWld4elpTQjdYRzRnSUNBZ2NISnBkbUYwWlZObGRDaDNjbUZ3Y0dWeUxDQkRTRWxNUkY5RFQwNVVSVmhVTENCdWRXeHNLVHRjYmlBZ2ZWeHVmVnh1WEc1bWRXNWpkR2x2YmlCdGIyTnJVME5WU1dablJGTkdVRkpsZEhWeWJrNXZiazUxYkd3b2JtOWtaU3dnYzNSaGRHVXBJSHRjYmlBZ1kyOXVjM1FnZXlCblpYUkVaWEpwZG1Wa1UzUmhkR1ZHY205dFVISnZjSE1nZlNBOUlHNXZaR1V1ZEhsd1pUdGNibHh1SUNCcFppQW9kSGx3Wlc5bUlHZGxkRVJsY21sMlpXUlRkR0YwWlVaeWIyMVFjbTl3Y3lBOVBUMGdKMloxYm1OMGFXOXVKeWtnZTF4dUlDQWdJQzh2SUhkbElIUnllU0IwYnlCbWFYZ2dZU0JTWldGamRDQnphR0ZzYkc5M0lISmxibVJsY21WeUlHSjFaeUJvWlhKbExseHVJQ0FnSUM4dklDaG1ZV05sWW05dmF5OXlaV0ZqZENNeE5EWXdOeXdnZDJocFkyZ2dhR0Z6SUdKbFpXNGdabWw0WldRZ2FXNGdjbVZoWTNRZ01UWXVPQ2s2WEc0Z0lDQWdMeThnZDJobGJpQm5SRk5HVUNCeVpYUjFjbTRnWkdWeWFYWmxaQ0J6ZEdGMFpTd2dhWFFnZDJsc2JDQnpaWFFnYVc1emRHRnVZMlVnYzNSaGRHVWdhVzRnYzJoaGJHeHZkeUJ5Wlc1a1pYSmxjaUJpWldadmNtVWdVME5WTEZ4dUlDQWdJQzh2SUhSb2FYTWdkMmxzYkNCallYVnpaU0JnZEdocGN5NXpkR0YwWldBZ2FXNGdjME5WSUdKbElIUm9aU0IxY0dSaGRHVmtJSE4wWVhSbExDQjNhR2xqYUNCcGN5QjNjbTl1WnlCaVpXaGhkbWx2Y2k1Y2JpQWdJQ0F2THlCemJ5QjNaU0JvWVhabElIUnZJSGR5WVhBZ2MwTlZJSFJ2SUhCaGMzTWdkR2hsSUc5c1pDQnpkR0YwWlNCMGJ5QnZjbWxuYVc1aGJDQnpRMVV1WEc0Z0lDQWdZMjl1YzNRZ2V5QnBibk4wWVc1alpTQjlJRDBnYm05a1pUdGNiaUFnSUNCamIyNXpkQ0I3SUhKbGMzUnZjbVVnZlNBOUlITndlVTFsZEdodlpDaGNiaUFnSUNBZ0lHbHVjM1JoYm1ObExGeHVJQ0FnSUNBZ0ozTm9iM1ZzWkVOdmJYQnZibVZ1ZEZWd1pHRjBaU2NzWEc0Z0lDQWdJQ0FvYjNKcFoybHVZV3hUUTFVcElEMCtJR1oxYm1OMGFXOXVJSE5vYjNWc1pFTnZiWEJ2Ym1WdWRGVndaR0YwWlNndUxpNWhjbWR6S1NCN1hHNGdJQ0FnSUNBZ0lHbHVjM1JoYm1ObExuTjBZWFJsSUQwZ2MzUmhkR1U3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSE5EVlZKbGMzVnNkQ0E5SUc5eWFXZHBibUZzVTBOVkxtRndjR3g1S0dsdWMzUmhibU5sTENCaGNtZHpLVHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdXeXdnYm1WNGRGTjBZWFJsWFNBOUlHRnlaM003WEc0Z0lDQWdJQ0FnSUdsdWMzUmhibU5sTG5OMFlYUmxJRDBnYm1WNGRGTjBZWFJsTzF4dUlDQWdJQ0FnSUNCeVpYTjBiM0psS0NrN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCelExVlNaWE4xYkhRN1hHNGdJQ0FnSUNCOUxGeHVJQ0FnSUNrN1hHNGdJSDFjYm4xY2JseHVMeW9xWEc0Z0tpQlNaV04xY25OcGRtVnNlU0JrYVhabEtDbHpJR1YyWlhKNUlHTjFjM1J2YlNCamIyMXdiMjVsYm5RZ2FXNGdZU0IzY21Gd2NHVnlJSFZ1ZEdsc1hHNGdLaUIwYUdVZ2RHRnlaMlYwSUdOdmJYQnZibVZ1ZENCcGN5Qm1iM1Z1WkM1Y2JpQXFYRzRnS2lCQWNHRnlZVzBnZTFOb1lXeHNiM2RYY21Gd2NHVnlmU0IzY21Gd2NHVnlJRUVnVTJoaGJHeHZkMWR5WVhCd1pYSWdkRzhnYzJWaGNtTm9YRzRnS2lCQWNHRnlZVzBnZTBOdmJYQnZibVZ1ZEZSNWNHVjlJSFJoY21kbGRDQkJJSEpsWVdOMElHTjFjM1J2YlNCamIyMXdiMjVsYm5RZ2RHaGhkQ3dnZDJobGJpQm1iM1Z1WkN3Z2QybHNiQ0JsYm1RZ2NtVmpkWEp6YVc5dVhHNGdLaUJBY0dGeVlXMGdlMEZrWVhCMFpYSjlJR0ZrWVhCMFpYSWdRVzRnUlc1NmVXMWxJR0ZrWVhCMFpYSmNiaUFxSUVCeVpYUjFjbTV6SUh0VGFHRnNiRzkzVjNKaGNIQmxjbngxYm1SbFptbHVaV1I5SUVFZ1UyaGhiR3h2ZDFkeVlYQndaWElnWm05eUlIUm9aU0IwWVhKblpYUXNJRzl5WEc0Z0tpQWdkVzVrWldacGJtVmtJR2xtSUdsMElHTmhiaWQwSUdKbElHWnZkVzVrWEc0Z0tpOWNibVoxYm1OMGFXOXVJR1JsWlhCU1pXNWtaWElvZDNKaGNIQmxjaXdnZEdGeVoyVjBMQ0JoWkdGd2RHVnlLU0I3WEc0Z0lHTnZibk4wSUc1dlpHVWdQU0IzY21Gd2NHVnlXMDVQUkVWZE8xeHVJQ0JqYjI1emRDQmxiR1Z0Wlc1MElEMGdibTlrWlNBbUppQmhaR0Z3ZEdWeUxtNXZaR1ZVYjBWc1pXMWxiblFvYm05a1pTazdYRzRnSUdsbUlDaDNjbUZ3Y0dWeUxuUjVjR1VvS1NBOVBUMGdkR0Z5WjJWMEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUhkeVlYQndaWEl1WkdsMlpTZ3BPMXh1SUNCOVhHNGdJR2xtSUNobGJHVnRaVzUwSUNZbUlHbHpRM1Z6ZEc5dFEyOXRjRzl1Wlc1MFJXeGxiV1Z1ZENobGJHVnRaVzUwTENCaFpHRndkR1Z5S1NrZ2UxeHVJQ0FnSUhKbGRIVnliaUJrWldWd1VtVnVaR1Z5S0hkeVlYQndaWEl1WkdsMlpTZ3BMQ0IwWVhKblpYUXNJR0ZrWVhCMFpYSXBPMXh1SUNCOVhHNGdJR052Ym5OMElHTm9hV3hrY21WdUlEMGdkM0poY0hCbGNpNWphR2xzWkhKbGJpZ3BPMXh1SUNCbWIzSWdLR3hsZENCcElEMGdNRHNnYVNBOElHTm9hV3hrY21WdUxteGxibWQwYURzZ2FTQXJQU0F4S1NCN1hHNGdJQ0FnWTI5dWMzUWdabTkxYm1RZ1BTQmtaV1Z3VW1WdVpHVnlLR05vYVd4a2NtVnVMbUYwS0drcExDQjBZWEpuWlhRc0lHRmtZWEIwWlhJcE8xeHVJQ0FnSUdsbUlDaDBlWEJsYjJZZ1ptOTFibVFnSVQwOUlDZDFibVJsWm1sdVpXUW5LU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdabTkxYm1RN1hHNGdJQ0FnZlZ4dUlDQjlYRzRnSUhKbGRIVnliaUIxYm1SbFptbHVaV1E3WEc1OVhHNWNiaThxS2x4dUlDb2dSR1ZsY0MxeVpXNWtaWEp6SUhSb1pTQmdkM0poY0hCcGJtZERiMjF3YjI1bGJuUmdJR0Z1WkNCeVpYUjFjbTV6SUhSb1pTQmpiMjUwWlhoMElIUm9ZWFFnYzJodmRXeGtYRzRnS2lCaVpTQmhZMk5sYzNOcFlteGxJSFJ2SUhSb1pTQndjbWx0WVhKNUlIZHlZWEJ3WlhJdVhHNGdLbHh1SUNvZ1FIQmhjbUZ0SUh0WGNtRndjR2x1WjBOdmJYQnZibVZ1ZEZkeVlYQndaWEo5SUhkeVlYQndaWElnVkdobElHQlhjbUZ3Y0dsdVowTnZiWEJ2Ym1WdWRGZHlZWEJ3WlhKZ0lHWnZjaUJoWEc0Z0tpQWdZSGR5WVhCd2FXNW5RMjl0Y0c5dVpXNTBZRnh1SUNvZ1FIQmhjbUZ0SUh0QlpHRndkR1Z5ZlNCaFpHRndkR1Z5SUVGdUlFVnVlbmx0WlNCaFpHRndkR1Z5WEc0Z0tpQkFjbVYwZFhKdWN5QjdiMkpxWldOMGZTQkJiaUJ2WW1wbFkzUWdZMjl1ZEdGcGJtbHVaeUJoYmlCdlltcGxZM1FnYjJZZ2JHVm5ZV041SUdOdmJuUmxlSFFnZG1Gc2RXVnpJR0Z1WkNCaElFMWhjQ0J2Wmx4dUlDb2dJR0JqY21WaGRHVkRiMjUwWlhoMEtDbGdJRkJ5YjNacFpHVnlJSFpoYkhWbGN5NWNiaUFxTDF4dVpuVnVZM1JwYjI0Z1oyVjBRMjl1ZEdWNGRFWnliMjFYY21Gd2NHbHVaME52YlhCdmJtVnVkQ2gzY21Gd2NHVnlMQ0JoWkdGd2RHVnlLU0I3WEc0Z0lHTnZibk4wSUhKdmIzUkdhVzVrWlhJZ1BTQmtaV1Z3VW1WdVpHVnlLSGR5WVhCd1pYSXNJSGR5WVhCd1pYSmJVazlQVkY5R1NVNUVSVkpkTENCaFpHRndkR1Z5S1R0Y2JpQWdhV1lnS0NGeWIyOTBSbWx1WkdWeUtTQjdYRzRnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NkZ2QzSmhjSEJwYm1kRGIyMXdiMjVsYm5SZ0lHMTFjM1FnY21WdVpHVnlJR2wwY3lCamFHbHNaSEpsYmlFbktUdGNiaUFnZlZ4dUlDQnlaWFIxY200Z2UxeHVJQ0FnSUd4bFoyRmplVU52Ym5SbGVIUTZJSEp2YjNSR2FXNWtaWEpiVDFCVVNVOU9VMTB1WTI5dWRHVjRkQ3hjYmlBZ0lDQndjbTkyYVdSbGNsWmhiSFZsY3pvZ2NtOXZkRVpwYm1SbGNsdFFVazlXU1VSRlVsOVdRVXhWUlZOZExGeHVJQ0I5TzF4dWZWeHVYRzR2S2lwY2JpQXFJRTFoYTJWeklHOXdkR2x2Ym5NZ2MzQmxZMmxtYVdOaGJHeDVJR1p2Y2lCZ1UyaGhiR3h2ZDFkeVlYQndaWEpnTGlCTmIzTjBJRzltSUhSb1pTQnNiMmRwWXlCb1pYSmxJR2x6SUdGeWIzVnVaQ0J5Wlc1a1pYSnBibWRjYmlBcUlHRWdZSGR5WVhCd2FXNW5RMjl0Y0c5dVpXNTBZQ0FvYVdZZ2IyNWxJSGRoY3lCd2NtOTJhV1JsWkNrZ1lXNWtJR0ZrWkdsdVp5QjBhR1VnWTJocGJHUWdZMjl1ZEdWNGRDQnZaaUIwYUdGMElHTnZiWEJ2Ym1WdWRGeHVJQ29nZEc4Z1lHOXdkR2x2Ym5NdVkyOXVkR1Y0ZEdBdVhHNGdLbHh1SUNvZ1FIQmhjbUZ0SUh0U1pXRmpkRVZzWlcxbGJuUjlJRzV2WkdWeklIUm9aU0J1YjJSbGN5QndZWE56WldRZ2RHOGdZRk5vWVd4c2IzZFhjbUZ3Y0dWeVlGeHVJQ29nUUhCaGNtRnRJSHRUYUdGc2JHOTNWM0poY0hCbGNuMGdjbTl2ZENCMGFHbHpJR0JUYUdGc2JHOTNWM0poY0hCbGNtQW5jeUJ3WVhKbGJuUXVJRWxtSUhSb2FYTWdhWE1nY0dGemMyVmtMQ0J2Y0hScGIyNXpJR0Z5WlZ4dUlDb2dJRzV2ZENCMGNtRnVjMlp2Y20xbFpDNWNiaUFxSUVCd1lYSmhiU0I3S24wZ2NHRnpjMlZrVDNCMGFXOXVjeUIwYUdVZ2IzQjBhVzl1Y3lCd1lYTnpaV1FnZEc4Z1lGTm9ZV3hzYjNkWGNtRndjR1Z5WUM1Y2JpQXFJRUJ3WVhKaGJTQjdLbjBnZDNKaGNIQmxjaUIwYUdVZ1lGTm9ZV3hzYjNkWGNtRndjR1Z5WUNCcGRITmxiR1pjYmlBcUlFQnlaWFIxY201eklIdFBZbXBsWTNSOUlIUm9aU0JrWldOdmNtRjBaV1FnWVc1a0lIUnlZVzV6Wm05eWJXVmtJRzl3ZEdsdmJuTmNiaUFxTDF4dVpuVnVZM1JwYjI0Z2JXRnJaVk5vWVd4c2IzZFBjSFJwYjI1ektHNXZaR1Z6TENCeWIyOTBMQ0J3WVhOelpXUlBjSFJwYjI1ekxDQjNjbUZ3Y0dWeUtTQjdYRzRnSUdOdmJuTjBJRzl3ZEdsdmJuTWdQU0J0WVd0bFQzQjBhVzl1Y3lod1lYTnpaV1JQY0hScGIyNXpLVHRjYmlBZ1kyOXVjM1FnWVdSaGNIUmxjaUE5SUdkbGRFRmtZWEIwWlhJb2NHRnpjMlZrVDNCMGFXOXVjeWs3WEc0Z0lIQnlhWFpoZEdWVFpYUW9iM0IwYVc5dWN5d2dVRkpQVmtsRVJWSmZWa0ZNVlVWVExDQndZWE56WldSUGNIUnBiMjV6VzFCU1QxWkpSRVZTWDFaQlRGVkZVMTBwTzF4dUlDQnBaaUFvY205dmRDQjhmQ0FoYVhORGRYTjBiMjFEYjIxd2IyNWxiblFvYjNCMGFXOXVjeTUzY21Gd2NHbHVaME52YlhCdmJtVnVkQ3dnWVdSaGNIUmxjaWtwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdiM0IwYVc5dWN6dGNiaUFnZlZ4dUlDQnBaaUFvZEhsd1pXOW1JR0ZrWVhCMFpYSXVkM0poY0ZkcGRHaFhjbUZ3Y0dsdVowTnZiWEJ2Ym1WdWRDQWhQVDBnSjJaMWJtTjBhVzl1SnlrZ2UxeHVJQ0FnSUhSb2NtOTNJRzVsZHlCVWVYQmxSWEp5YjNJb0ozbHZkWElnWVdSaGNIUmxjaUJrYjJWeklHNXZkQ0J6ZFhCd2IzSjBJR0IzY21Gd2NHbHVaME52YlhCdmJtVnVkR0F1SUZSeWVTQjFjR2R5WVdScGJtY2dhWFFoSnlrN1hHNGdJSDFjYmlBZ1kyOXVjM1FnZXlCdWIyUmxPaUIzY21Gd2NHVmtUbTlrWlN3Z1VtOXZkRVpwYm1SbGNpQjlJRDBnWVdSaGNIUmxjaTUzY21Gd1YybDBhRmR5WVhCd2FXNW5RMjl0Y0c5dVpXNTBLRzV2WkdWekxDQnZjSFJwYjI1ektUdGNiaUFnTHk4Z1pYTnNhVzUwTFdScGMyRmliR1V0Ym1WNGRDMXNhVzVsSUc1dkxYVnpaUzFpWldadmNtVXRaR1ZtYVc1bFhHNGdJR052Ym5OMElIZHlZWEJ3YVc1blEyOXRjRzl1Wlc1MElEMGdibVYzSUZkeVlYQndhVzVuUTI5dGNHOXVaVzUwVjNKaGNIQmxjaWgzY21Gd2NHVmtUbTlrWlN3Z2QzSmhjSEJsY2l3Z1VtOXZkRVpwYm1SbGNpazdYRzRnSUdOdmJuTjBJSHRjYmlBZ0lDQnNaV2RoWTNsRGIyNTBaWGgwT2lCM2NtRndjR2x1WjBOdmJYQnZibVZ1ZEV4bFoyRmplVU52Ym5SbGVIUXNYRzRnSUNBZ2NISnZkbWxrWlhKV1lXeDFaWE02SUhkeVlYQndhVzVuUTI5dGNHOXVaVzUwVUhKdmRtbGtaWEpXWVd4MVpYTXNYRzRnSUgwZ1BTQm5aWFJEYjI1MFpYaDBSbkp2YlZkeVlYQndhVzVuUTI5dGNHOXVaVzUwS0hkeVlYQndhVzVuUTI5dGNHOXVaVzUwTENCaFpHRndkR1Z5S1R0Y2JpQWdjSEpwZG1GMFpWTmxkQ2gzY21Gd2NHVnlMQ0JYVWtGUVVFbE9SMTlEVDAxUVQwNUZUbFFzSUhkeVlYQndhVzVuUTI5dGNHOXVaVzUwS1R0Y2JpQWdjbVYwZFhKdUlIdGNiaUFnSUNBdUxpNXZjSFJwYjI1ekxGeHVJQ0FnSUdOdmJuUmxlSFE2SUh0Y2JpQWdJQ0FnSUM0dUxtOXdkR2x2Ym5NdVkyOXVkR1Y0ZEN4Y2JpQWdJQ0FnSUM0dUxuZHlZWEJ3YVc1blEyOXRjRzl1Wlc1MFRHVm5ZV041UTI5dWRHVjRkQ3hjYmlBZ0lDQjlMRnh1SUNBZ0lGdFFVazlXU1VSRlVsOVdRVXhWUlZOZE9pQjNjbUZ3Y0dsdVowTnZiWEJ2Ym1WdWRGQnliM1pwWkdWeVZtRnNkV1Z6TEZ4dUlDQjlPMXh1ZlZ4dVhHNWNibVoxYm1OMGFXOXVJRzFoYTJWSmJtaGxjbWwwWldSRGFHbHNaRTl3ZEdsdmJuTW9kM0poY0hCbGNpd2diM0IwYVc5dWN5QTlJSHQ5S1NCN1hHNGdJR052Ym5OMElHTm9hV3hrVDNCMGFXOXVjeUE5SUh0Y2JpQWdJQ0F1TGk1M2NtRndjR1Z5VzA5UVZFbFBUbE5kTEZ4dUlDQWdJQzR1TG05d2RHbHZibk1zWEc0Z0lDQWdZMjl1ZEdWNGREb2diM0IwYVc5dWN5NWpiMjUwWlhoMElIeDhJSHRjYmlBZ0lDQWdJQzR1TG5keVlYQndaWEpiVDFCVVNVOU9VMTB1WTI5dWRHVjRkQ3hjYmlBZ0lDQWdJQzR1TG5keVlYQndaWEpiVWs5UFZGMWJRMGhKVEVSZlEwOU9WRVZZVkYwc1hHNGdJQ0FnZlN4Y2JpQWdmVHRjYmlBZ2NISnBkbUYwWlZObGRDaGphR2xzWkU5d2RHbHZibk1zSUZCU1QxWkpSRVZTWDFaQlRGVkZVeXdnZDNKaGNIQmxjbHRTVDA5VVhWdFFVazlXU1VSRlVsOVdRVXhWUlZOZEtUdGNiaUFnY21WMGRYSnVJR05vYVd4a1QzQjBhVzl1Y3p0Y2JuMWNibHh1WEc0dktpcGNiaUFxSUVCamJHRnpjeUJUYUdGc2JHOTNWM0poY0hCbGNseHVJQ292WEc1amJHRnpjeUJUYUdGc2JHOTNWM0poY0hCbGNpQjdYRzRnSUdOdmJuTjBjblZqZEc5eUtHNXZaR1Z6TENCeWIyOTBMQ0J3WVhOelpXUlBjSFJwYjI1eklEMGdlMzBwSUh0Y2JpQWdJQ0IyWVd4cFpHRjBaVTl3ZEdsdmJuTW9jR0Z6YzJWa1QzQjBhVzl1Y3lrN1hHNWNiaUFnSUNCamIyNXpkQ0J2Y0hScGIyNXpJRDBnYldGclpWTm9ZV3hzYjNkUGNIUnBiMjV6S0c1dlpHVnpMQ0J5YjI5MExDQndZWE56WldSUGNIUnBiMjV6TENCMGFHbHpLVHRjYmlBZ0lDQmpiMjV6ZENCaFpHRndkR1Z5SUQwZ1oyVjBRV1JoY0hSbGNpaHZjSFJwYjI1ektUdGNiaUFnSUNCamIyNXpkQ0JzYVdabFkzbGpiR1Z6SUQwZ1oyVjBRV1JoY0hSbGNreHBabVZqZVdOc1pYTW9ZV1JoY0hSbGNpazdYRzVjYmlBZ0lDQXZMeUJ0YjNWdWRHbHVaeUJoSUZOb1lXeHNiM2RTWlc1a1pYSWdZMjl0Y0c5dVpXNTBYRzRnSUNBZ2FXWWdLQ0Z5YjI5MEtTQjdYRzRnSUNBZ0lDQnBaaUFvSVdGa1lYQjBaWEl1YVhOV1lXeHBaRVZzWlcxbGJuUW9ibTlrWlhNcEtTQjdYRzRnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJVZVhCbFJYSnliM0lvSjFOb1lXeHNiM2RYY21Gd2NHVnlJR05oYmlCdmJteDVJSGR5WVhBZ2RtRnNhV1FnWld4bGJXVnVkSE1uS1R0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ1kyOXVjM1FnWjJWMFEyaHBiR1JEYjI1MFpYaDBVM0I1SUQwZ2JHbG1aV041WTJ4bGN5NW5aWFJEYUdsc1pFTnZiblJsZUhRdVkyRnNiR1ZrUW5sU1pXNWtaWEpsY2x4dUlDQWdJQ0FnSUNBL0lITndlVTl1UjJWMFEyaHBiR1JEYjI1MFpYaDBTVzVwZEdsaGJGSmxibVJsY2lodWIyUmxjeXdnWVdSaGNIUmxjaWxjYmlBZ0lDQWdJQ0FnT2lCdWRXeHNPMXh1SUNBZ0lDQWdjSEpwZG1GMFpWTmxkQ2gwYUdsekxDQlNUMDlVTENCMGFHbHpLVHRjYmlBZ0lDQWdJSEJ5YVhaaGRHVlRaWFFvZEdocGN5d2dWVTVTUlU1RVJWSkZSQ3dnYm05a1pYTXBPMXh1SUNBZ0lDQWdZMjl1YzNRZ2NtVnVaR1Z5WlhJZ1BTQmhaR0Z3ZEdWeUxtTnlaV0YwWlZKbGJtUmxjbVZ5S0hzZ2JXOWtaVG9nSjNOb1lXeHNiM2NuTENBdUxpNXZjSFJwYjI1eklIMHBPMXh1SUNBZ0lDQWdjSEpwZG1GMFpWTmxkQ2gwYUdsekxDQlNSVTVFUlZKRlVpd2djbVZ1WkdWeVpYSXBPMXh1SUNBZ0lDQWdZMjl1YzNRZ2NISnZkbWxrWlhKV1lXeDFaWE1nUFNCdVpYY2dUV0Z3S0c5d2RHbHZibk5iVUZKUFZrbEVSVkpmVmtGTVZVVlRYU0I4ZkNCYlhTazdYRzRnSUNBZ0lDQjBhR2x6VzFKRlRrUkZVa1ZTWFM1eVpXNWtaWElvYm05a1pYTXNJRzl3ZEdsdmJuTXVZMjl1ZEdWNGRDd2dleUJ3Y205MmFXUmxjbFpoYkhWbGN5QjlLVHRjYmlBZ0lDQWdJR052Ym5OMElISmxibVJsY21Wa1RtOWtaU0E5SUhSb2FYTmJVa1ZPUkVWU1JWSmRMbWRsZEU1dlpHVW9LVHRjYmlBZ0lDQWdJSEJ5YVhaaGRHVlRaWFJPYjJSbGN5aDBhR2x6TENCblpYUlNiMjkwVG05a1pTaHlaVzVrWlhKbFpFNXZaR1VwS1R0Y2JpQWdJQ0FnSUhCeWFYWmhkR1ZUWlhRb2RHaHBjeXdnVDFCVVNVOU9VeXdnYjNCMGFXOXVjeWs3WEc0Z0lDQWdJQ0J3Y21sMllYUmxVMlYwS0hSb2FYTXNJRkJTVDFaSlJFVlNYMVpCVEZWRlV5d2djSEp2ZG1sa1pYSldZV3gxWlhNcE8xeHVYRzRnSUNBZ0lDQmpiMjV6ZENCN0lHbHVjM1JoYm1ObElIMGdQU0J5Wlc1a1pYSmxaRTV2WkdVN1hHNGdJQ0FnSUNCcFppQW9hVzV6ZEdGdVkyVWdKaVlnSVc5d2RHbHZibk11WkdsellXSnNaVXhwWm1WamVXTnNaVTFsZEdodlpITXBJSHRjYmlBZ0lDQWdJQ0FnTHk4Z1JXNXpkWEpsSUhSdklHTmhiR3dnWTI5dGNHOXVaVzUwUkdsa1ZYQmtZWFJsSUhkb1pXNGdhVzV6ZEdGdVkyVXVjMlYwVTNSaGRHVWdhWE1nWTJGc2JHVmtYRzRnSUNBZ0lDQWdJR2xtSUNoc2FXWmxZM2xqYkdWekxtTnZiWEJ2Ym1WdWRFUnBaRlZ3WkdGMFpTNXZibE5sZEZOMFlYUmxJQ1ltSUNGcGJuTjBZVzVqWlZ0VFJWUmZVMVJCVkVWZEtTQjdYRzRnSUNBZ0lDQWdJQ0FnY0hKcGRtRjBaVk5sZENocGJuTjBZVzVqWlN3Z1UwVlVYMU5VUVZSRkxDQnBibk4wWVc1alpTNXpaWFJUZEdGMFpTazdYRzRnSUNBZ0lDQWdJQ0FnYVc1emRHRnVZMlV1YzJWMFUzUmhkR1VnUFNBb2RYQmtZWFJsY2l3Z1kyRnNiR0poWTJzZ1BTQjFibVJsWm1sdVpXUXBJRDArSUhSb2FYTXVjMlYwVTNSaGRHVW9YRzRnSUNBZ0lDQWdJQ0FnSUNBdUxpNG9ZMkZzYkdKaFkyc2dQVDBnYm5Wc2JDQS9JRnQxY0dSaGRHVnlYU0E2SUZ0MWNHUmhkR1Z5TENCallXeHNZbUZqYTEwcExGeHVJQ0FnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JR2x1YzNSaGJtTmxMbU52YlhCdmJtVnVkRVJwWkUxdmRXNTBJRDA5UFNBblpuVnVZM1JwYjI0bktTQjdYRzRnSUNBZ0lDQWdJQ0FnZEdocGMxdFNSVTVFUlZKRlVsMHVZbUYwWTJobFpGVndaR0YwWlhNb0tDa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhVzV6ZEdGdVkyVXVZMjl0Y0c5dVpXNTBSR2xrVFc5MWJuUW9LVHRjYmlBZ0lDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0J3Y21sMllYUmxVMlYwUTJocGJHUkRiMjUwWlhoMEtHRmtZWEIwWlhJc0lIUm9hWE1zSUdsdWMzUmhibU5sTENCeVpXNWtaWEpsWkU1dlpHVXNJR2RsZEVOb2FXeGtRMjl1ZEdWNGRGTndlU2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdMeThnWTNKbFlYUnBibWNnWVNCamFHbHNaQ0JqYjIxd2IyNWxiblFnZEdoeWIzVm5hQ0JsYm5wNWJXVW5jeUJUYUdGc2JHOTNWM0poY0hCbGNpQkJVRWx6TGx4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQndjbWwyWVhSbFUyVjBLSFJvYVhNc0lGSlBUMVFzSUhKdmIzUXBPMXh1SUNBZ0lDQWdjSEpwZG1GMFpWTmxkQ2gwYUdsekxDQlZUbEpGVGtSRlVrVkVMQ0J1ZFd4c0tUdGNiaUFnSUNBZ0lIQnlhWFpoZEdWVFpYUW9kR2hwY3l3Z1VrVk9SRVZTUlZJc0lISnZiM1JiVWtWT1JFVlNSVkpkS1R0Y2JpQWdJQ0FnSUhCeWFYWmhkR1ZUWlhST2IyUmxjeWgwYUdsekxDQnViMlJsY3lrN1hHNGdJQ0FnSUNCd2NtbDJZWFJsVTJWMEtIUm9hWE1zSUU5UVZFbFBUbE1zSUhKdmIzUmJUMUJVU1U5T1UxMHBPMXh1SUNBZ0lDQWdjSEpwZG1GMFpWTmxkQ2gwYUdsekxDQlNUMDlVWDA1UFJFVlRMQ0J5YjI5MFcwNVBSRVZUWFNrN1hHNGdJQ0FnSUNCd2NtbDJZWFJsVTJWMEtIUm9hWE1zSUZCU1QxWkpSRVZTWDFaQlRGVkZVeXdnYm5Wc2JDazdYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRkpsZEhWeWJuTWdkR2hsSUhKdmIzUWdkM0poY0hCbGNseHVJQ0FnS2x4dUlDQWdLaUJBY21WMGRYSnVJSHRUYUdGc2JHOTNWM0poY0hCbGNuMWNiaUFnSUNvdlhHNGdJSEp2YjNRb0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTmJVazlQVkYwN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dVbVYwZFhKdWN5QjBhR1VnZDNKaGNIQmxaQ0JqYjIxd2IyNWxiblF1WEc0Z0lDQXFYRzRnSUNBcUlFQnlaWFIxY200Z2UxSmxZV04wUTI5dGNHOXVaVzUwZlZ4dUlDQWdLaTljYmlBZ1oyVjBUbTlrWlVsdWRHVnlibUZzS0NrZ2UxeHVJQ0FnSUdsbUlDaDBhR2x6TG14bGJtZDBhQ0FoUFQwZ01Ta2dlMXh1SUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZFRhR0ZzYkc5M1YzSmhjSEJsY2pvNloyVjBUbTlrWlNncElHTmhiaUJ2Ym14NUlHSmxJR05oYkd4bFpDQjNhR1Z1SUhkeVlYQndhVzVuSUc5dVpTQnViMlJsSnlrN1hHNGdJQ0FnZlZ4dUlDQWdJR2xtSUNoMGFHbHpXMUpQVDFSZElEMDlQU0IwYUdsektTQjdYRzRnSUNBZ0lDQjBhR2x6TG5Wd1pHRjBaU2dwTzF4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z2RHaHBjMXRPVDBSRlhUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJTWlhSMWNtNXpJSFJvWlNCMGFHVWdkM0poY0hCbFpDQmpiMjF3YjI1bGJuUnpMbHh1SUNBZ0tseHVJQ0FnS2lCQWNtVjBkWEp1SUh0QmNuSmhlVHhTWldGamRFTnZiWEJ2Ym1WdWRENTlYRzRnSUNBcUwxeHVJQ0JuWlhST2IyUmxjMGx1ZEdWeWJtRnNLQ2tnZTF4dUlDQWdJR2xtSUNoMGFHbHpXMUpQVDFSZElEMDlQU0IwYUdseklDWW1JSFJvYVhNdWJHVnVaM1JvSUQwOVBTQXhLU0I3WEc0Z0lDQWdJQ0IwYUdsekxuVndaR0YwWlNncE8xeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdkR2hwYzF0T1QwUkZVMTA3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1VtVjBkWEp1Y3lCMGFHVWdkM0poY0hCbFpDQlNaV0ZqZEVWc1pXMWxiblF1WEc0Z0lDQXFYRzRnSUNBcUlFQnlaWFIxY200Z2UxSmxZV04wUld4bGJXVnVkSDFjYmlBZ0lDb3ZYRzRnSUdkbGRFVnNaVzFsYm5Rb0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjMmx1WjJ4bEtDZG5aWFJGYkdWdFpXNTBKeXdnS0c0cElEMCtJR2RsZEVGa1lYQjBaWElvZEdocGMxdFBVRlJKVDA1VFhTa3VibTlrWlZSdlJXeGxiV1Z1ZENodUtTazdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nVW1WMGRYSnVjeUIwYUdVZ2QzSmhjSEJsWkNCU1pXRmpkRVZzWlcxbGJuUnpMbHh1SUNBZ0tseHVJQ0FnS2lCQWNtVjBkWEp1SUh0QmNuSmhlVHhTWldGamRFVnNaVzFsYm5RK2ZWeHVJQ0FnS2k5Y2JpQWdaMlYwUld4bGJXVnVkSE1vS1NCN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdVoyVjBUbTlrWlhOSmJuUmxjbTVoYkNncExtMWhjQ2dvYmlrZ1BUNGdaMlYwUVdSaGNIUmxjaWgwYUdselcwOVFWRWxQVGxOZEtTNXViMlJsVkc5RmJHVnRaVzUwS0c0cEtUdGNiaUFnZlZ4dVhHNGdJQzh2SUdWemJHbHVkQzFrYVhOaFlteGxMVzVsZUhRdGJHbHVaU0JqYkdGemN5MXRaWFJvYjJSekxYVnpaUzEwYUdselhHNGdJR2RsZEU1dlpHVW9LU0I3WEc0Z0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZFRhR0ZzYkc5M1YzSmhjSEJsY2pvNloyVjBUbTlrWlNncElHbHpJRzV2SUd4dmJtZGxjaUJ6ZFhCd2IzSjBaV1F1SUZWelpTQlRhR0ZzYkc5M1YzSmhjSEJsY2pvNloyVjBSV3hsYldWdWRDZ3BJR2x1YzNSbFlXUW5LVHRjYmlBZ2ZWeHVYRzRnSUM4dklHVnpiR2x1ZEMxa2FYTmhZbXhsTFc1bGVIUXRiR2x1WlNCamJHRnpjeTF0WlhSb2IyUnpMWFZ6WlMxMGFHbHpYRzRnSUdkbGRFNXZaR1Z6S0NrZ2UxeHVJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWduVTJoaGJHeHZkMWR5WVhCd1pYSTZPbWRsZEU1dlpHVnpLQ2tnYVhNZ2JtOGdiRzl1WjJWeUlITjFjSEJ2Y25SbFpDNGdWWE5sSUZOb1lXeHNiM2RYY21Gd2NHVnlPanBuWlhSRmJHVnRaVzUwY3lncElHbHVjM1JsWVdRbktUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJIWlhSeklIUm9aU0JwYm5OMFlXNWpaU0J2WmlCMGFHVWdZMjl0Y0c5dVpXNTBJR0psYVc1bklISmxibVJsY21Wa0lHRnpJSFJvWlNCeWIyOTBJRzV2WkdVZ2NHRnpjMlZrSUdsdWRHOGdZSE5vWVd4c2IzY29LV0F1WEc0Z0lDQXFYRzRnSUNBcUlFNVBWRVU2SUdOaGJpQnZibXg1SUdKbElHTmhiR3hsWkNCdmJpQmhJSGR5WVhCd1pYSWdhVzV6ZEdGdVkyVWdkR2hoZENCcGN5QmhiSE52SUhSb1pTQnliMjkwSUdsdWMzUmhibU5sTGx4dUlDQWdLbHh1SUNBZ0tpQkZlR0Z0Y0d4bE9seHVJQ0FnS2lCZ1lHQmNiaUFnSUNvZ1kyOXVjM1FnZDNKaGNIQmxjaUE5SUhOb1lXeHNiM2NvUEUxNVEyOXRjRzl1Wlc1MElDOCtLVHRjYmlBZ0lDb2dZMjl1YzNRZ2FXNXpkQ0E5SUhkeVlYQndaWEl1YVc1emRHRnVZMlVvS1R0Y2JpQWdJQ29nWlhod1pXTjBLR2x1YzNRcExuUnZMbUpsTG1sdWMzUmhibU5sVDJZb1RYbERiMjF3YjI1bGJuUXBPMXh1SUNBZ0tpQmdZR0JjYmlBZ0lDb2dRSEpsZEhWeWJuTWdlMUpsWVdOMFEyOXRjRzl1Wlc1MGZWeHVJQ0FnS2k5Y2JpQWdhVzV6ZEdGdVkyVW9LU0I3WEc0Z0lDQWdhV1lnS0hSb2FYTmJVazlQVkYwZ0lUMDlJSFJvYVhNcElIdGNiaUFnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnblUyaGhiR3h2ZDFkeVlYQndaWEk2T21sdWMzUmhibU5sS0NrZ1kyRnVJRzl1YkhrZ1ltVWdZMkZzYkdWa0lHOXVJSFJvWlNCeWIyOTBKeWs3WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpXMUpGVGtSRlVrVlNYUzVuWlhST2IyUmxLQ2t1YVc1emRHRnVZMlU3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1NXWWdZU0JnZDNKaGNIQnBibWREYjIxd2IyNWxiblJnSUhkaGN5QndZWE56WldRZ2FXNGdZRzl3ZEdsdmJuTmdMQ0IwYUdseklHMWxkR2h2WkhNZ2NtVjBkWEp1Y3lCaElHQlRhR0ZzYkc5M1YzSmhjSEJsY21CY2JpQWdJQ29nWVhKdmRXNWtJSFJvWlNCeVpXNWtaWEpsWkNCZ2QzSmhjSEJwYm1kRGIyMXdiMjVsYm5SZ0xpQlVhR2x6SUdCVGFHRnNiRzkzVjNKaGNIQmxjbUFnWTJGdUlHSmxJSFZ6WldRZ2RHOGdkWEJrWVhSbElIUm9aVnh1SUNBZ0tpQmdkM0poY0hCcGJtZERiMjF3YjI1bGJuUmdKM01nY0hKdmNITXNJSE4wWVhSbExDQmxkR011WEc0Z0lDQXFYRzRnSUNBcUlFQnlaWFIxY201eklGTm9ZV3hzYjNkWGNtRndjR1Z5WEc0Z0lDQXFMMXh1SUNCblpYUlhjbUZ3Y0dsdVowTnZiWEJ2Ym1WdWRDZ3BJSHRjYmlBZ0lDQnBaaUFvZEdocGMxdFNUMDlVWFNBaFBUMGdkR2hwY3lrZ2UxeHVJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NkVGFHRnNiRzkzVjNKaGNIQmxjam82WjJWMFYzSmhjSEJwYm1kRGIyMXdiMjVsYm5Rb0tTQmpZVzRnYjI1c2VTQmlaU0JqWVd4c1pXUWdiMjRnZEdobElISnZiM1FuS1R0Y2JpQWdJQ0I5WEc0Z0lDQWdhV1lnS0NGMGFHbHpXMDlRVkVsUFRsTmRMbmR5WVhCd2FXNW5RMjl0Y0c5dVpXNTBLU0I3WEc0Z0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KMU5vWVd4c2IzZFhjbUZ3Y0dWeU9qcG5aWFJYY21Gd2NHbHVaME52YlhCdmJtVnVkQ2dwSUdOaGJpQnZibXg1SUdKbElHTmhiR3hsWkNCdmJpQmhJSGR5WVhCd1pYSWdkR2hoZENCM1lYTWdiM0pwWjJsdVlXeHNlU0J3WVhOelpXUWdZU0JnZDNKaGNIQnBibWREYjIxd2IyNWxiblJnSUc5d2RHbHZiaWNwTzF4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z2RHaHBjMXRYVWtGUVVFbE9SMTlEVDAxUVQwNUZUbFJkTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFWnZjbU5sY3lCaElISmxMWEpsYm1SbGNpNGdWWE5sWm5Wc0lIUnZJSEoxYmlCaVpXWnZjbVVnWTJobFkydHBibWNnZEdobElISmxibVJsY2lCdmRYUndkWFFnYVdZZ2MyOXRaWFJvYVc1bklHVjRkR1Z5Ym1Gc1hHNGdJQ0FxSUcxaGVTQmlaU0IxY0dSaGRHbHVaeUIwYUdVZ2MzUmhkR1VnYjJZZ2RHaGxJR052YlhCdmJtVnVkQ0J6YjIxbGQyaGxjbVV1WEc0Z0lDQXFYRzRnSUNBcUlFNVBWRVU2SUdOaGJpQnZibXg1SUdKbElHTmhiR3hsWkNCdmJpQmhJSGR5WVhCd1pYSWdhVzV6ZEdGdVkyVWdkR2hoZENCcGN5QmhiSE52SUhSb1pTQnliMjkwSUdsdWMzUmhibU5sTGx4dUlDQWdLbHh1SUNBZ0tpQkFjbVYwZFhKdWN5QjdVMmhoYkd4dmQxZHlZWEJ3WlhKOVhHNGdJQ0FxTDF4dUlDQjFjR1JoZEdVb0tTQjdYRzRnSUNBZ2FXWWdLSFJvYVhOYlVrOVBWRjBnSVQwOUlIUm9hWE1wSUh0Y2JpQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWduVTJoaGJHeHZkMWR5WVhCd1pYSTZPblZ3WkdGMFpTZ3BJR05oYmlCdmJteDVJR0psSUdOaGJHeGxaQ0J2YmlCMGFHVWdjbTl2ZENjcE8xeHVJQ0FnSUgxY2JpQWdJQ0JwWmlBb2RHaHBjeTVzWlc1bmRHZ2dJVDA5SURFcElIdGNiaUFnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnblUyaGhiR3h2ZDFkeVlYQndaWEk2T25Wd1pHRjBaU2dwSUdOaGJpQnZibXg1SUdKbElHTmhiR3hsWkNCM2FHVnVJSGR5WVhCd2FXNW5JRzl1WlNCdWIyUmxKeWs3WEc0Z0lDQWdmVnh1SUNBZ0lIQnlhWFpoZEdWVFpYUk9iMlJsY3loMGFHbHpMQ0JuWlhSU2IyOTBUbTlrWlNoMGFHbHpXMUpGVGtSRlVrVlNYUzVuWlhST2IyUmxLQ2twS1R0Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3p0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkJJRzFsZEdodlpDQjBhR0YwSUhWdWJXOTFiblJ6SUhSb1pTQmpiMjF3YjI1bGJuUXVJRlJvYVhNZ1kyRnVJR0psSUhWelpXUWdkRzhnYzJsdGRXeGhkR1VnWVNCamIyMXdiMjVsYm5RZ1oyOXBibWNnZEdoeWIzVm5hRnh1SUNBZ0tpQmhibVFnZFc1dGIzVnVkQzl0YjNWdWRDQnNhV1psWTNsamJHVXVYRzRnSUNBcUlFQnlaWFIxY201eklIdFRhR0ZzYkc5M1YzSmhjSEJsY24xY2JpQWdJQ292WEc0Z0lIVnViVzkxYm5Rb0tTQjdYRzRnSUNBZ2RHaHBjMXRTUlU1RVJWSkZVbDB1ZFc1dGIzVnVkQ2dwTzF4dUlDQWdJR2xtSUNoMGFHbHpXMUpQVDFSZFcxZFNRVkJRU1U1SFgwTlBUVkJQVGtWT1ZGMHBJSHRjYmlBZ0lDQWdJSFJvYVhOYlVrOVBWRjFiVjFKQlVGQkpUa2RmUTA5TlVFOU9SVTVVWFM1MWJtMXZkVzUwS0NrN1hHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFRWdiV1YwYUc5a0lHbHpJR1p2Y2lCeVpTMXlaVzVrWlhJZ2QybDBhQ0J1WlhjZ2NISnZjSE1nWVc1a0lHTnZiblJsZUhRdVhHNGdJQ0FxSUZSb2FYTWdZMkZzYkhNZ1kyOXRjRzl1Wlc1MFJHbGtWWEJrWVhSbElHMWxkR2h2WkNCcFppQmthWE5oWW14bFRHbG1aV041WTJ4bFRXVjBhRzlrY3lCcGN5QnViM1FnWlc1aFlteGxaQzVjYmlBZ0lDcGNiaUFnSUNvZ1RrOVVSVG9nWTJGdUlHOXViSGtnWW1VZ1kyRnNiR1ZrSUc5dUlHRWdkM0poY0hCbGNpQnBibk4wWVc1alpTQjBhR0YwSUdseklHRnNjMjhnZEdobElISnZiM1FnYVc1emRHRnVZMlV1WEc0Z0lDQXFYRzRnSUNBcUlFQndZWEpoYlNCN1QySnFaV04wZlNCd2NtOXdjMXh1SUNBZ0tpQkFjR0Z5WVcwZ2UwOWlhbVZqZEgwZ1kyOXVkR1Y0ZEZ4dUlDQWdLaUJBY21WMGRYSnVjeUI3VTJoaGJHeHZkMWR5WVhCd1pYSjlYRzRnSUNBcUwxeHVJQ0J5WlhKbGJtUmxjaWh3Y205d2N5d2dZMjl1ZEdWNGRDa2dlMXh1SUNBZ0lHTnZibk4wSUdGa1lYQjBaWElnUFNCblpYUkJaR0Z3ZEdWeUtIUm9hWE5iVDFCVVNVOU9VMTBwTzF4dUlDQWdJSFJvYVhNdWMybHVaMnhsS0NkeVpYSmxibVJsY2ljc0lDZ3BJRDArSUh0Y2JpQWdJQ0FnSUhkcGRHaFRaWFJUZEdGMFpVRnNiRzkzWldRb0tDa2dQVDRnZTF4dUlDQWdJQ0FnSUNBdkx5Qk9UMVJGS0d4dGNpazZJRWx1SUhKbFlXTjBJREUyTENCcGJuTjBZVzVqWlhNZ2QybHNiQ0JpWlNCdWRXeHNJR1p2Y2lCVFJrTnpMQ0JpZFhSY2JpQWdJQ0FnSUNBZ0x5OGdjbVZ5Wlc1a1pYSnBibWNnZDJsMGFDQndjbTl3Y3k5amIyNTBaWGgwSUdseklITjBhV3hzSUdFZ2RtRnNhV1FnZEdocGJtY2dkRzhnWkc4dUlFbHVYRzRnSUNBZ0lDQWdJQzh2SUhSb2FYTWdZMkZ6WlN3Z2MzUmhkR1VnZDJsc2JDQmlaU0IxYm1SbFptbHVaV1FzSUdKMWRDQndjbTl3Y3k5amIyNTBaWGgwSUhkcGJHd2daWGhwYzNRdVhHNGdJQ0FnSUNBZ0lHTnZibk4wSUc1dlpHVWdQU0IwYUdselcxSkZUa1JGVWtWU1hTNW5aWFJPYjJSbEtDazdYRzRnSUNBZ0lDQWdJR052Ym5OMElHbHVjM1JoYm1ObElEMGdibTlrWlM1cGJuTjBZVzVqWlNCOGZDQjdmVHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdkSGx3WlNBOUlHNXZaR1V1ZEhsd1pTQjhmQ0I3ZlR0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnZXlCemRHRjBaU0I5SUQwZ2FXNXpkR0Z1WTJVN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUhCeVpYWlFjbTl3Y3lBOUlHbHVjM1JoYm1ObExuQnliM0J6SUh4OElIUm9hWE5iVlU1U1JVNUVSVkpGUkYwdWNISnZjSE03WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSEJ5WlhaRGIyNTBaWGgwSUQwZ2FXNXpkR0Z1WTJVdVkyOXVkR1Y0ZENCOGZDQjBhR2x6VzA5UVZFbFBUbE5kTG1OdmJuUmxlSFE3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJRzVsZUhSRGIyNTBaWGgwSUQwZ1kyOXVkR1Y0ZENCOGZDQndjbVYyUTI5dWRHVjRkRHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHTnZiblJsZUhRcElIdGNiaUFnSUNBZ0lDQWdJQ0IwYUdselcwOVFWRWxQVGxOZElEMGdleUF1TGk1MGFHbHpXMDlRVkVsUFRsTmRMQ0JqYjI1MFpYaDBPaUJ1WlhoMFEyOXVkR1Y0ZENCOU8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSFJvYVhOYlVrVk9SRVZTUlZKZExtSmhkR05vWldSVmNHUmhkR1Z6S0NncElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBdkx5QlhhR1Z1SUhOb2IzVnNaRU52YlhCdmJtVnVkRlZ3WkdGMFpTQnlaWFIxY201eklHWmhiSE5sSUhkbElITm9iM1ZzWkc0bmRDQmpZV3hzSUdOdmJYQnZibVZ1ZEVScFpGVndaR0YwWlM1Y2JpQWdJQ0FnSUNBZ0lDQXZMeUJ6YnlCM1pTQnpjSGtnYzJodmRXeGtRMjl0Y0c5dVpXNTBWWEJrWVhSbElIUnZJR2RsZENCMGFHVWdjbVZ6ZFd4MExseHVJQ0FnSUNBZ0lDQWdJR052Ym5OMElHeHBabVZqZVdOc1pYTWdQU0JuWlhSQlpHRndkR1Z5VEdsbVpXTjVZMnhsY3loaFpHRndkR1Z5S1R0Y2JpQWdJQ0FnSUNBZ0lDQnNaWFFnYzJodmRXeGtVbVZ1WkdWeUlEMGdkSEoxWlR0Y2JpQWdJQ0FnSUNBZ0lDQnNaWFFnYzJodmRXeGtRMjl0Y0c5dVpXNTBWWEJrWVhSbFUzQjVPMXh1SUNBZ0lDQWdJQ0FnSUd4bGRDQm5aWFJEYUdsc1pFTnZiblJsZUhSVGNIazdYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tGeHVJQ0FnSUNBZ0lDQWdJQ0FnSVhSb2FYTmJUMUJVU1U5T1UxMHVaR2x6WVdKc1pVeHBabVZqZVdOc1pVMWxkR2h2WkhOY2JpQWdJQ0FnSUNBZ0lDQWdJQ1ltSUdsdWMzUmhibU5sWEc0Z0lDQWdJQ0FnSUNBZ0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kSGx3Wlc5bUlHbHVjM1JoYm1ObExuTm9iM1ZzWkVOdmJYQnZibVZ1ZEZWd1pHRjBaU0E5UFQwZ0oyWjFibU4wYVc5dUp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCN0lHZGxkRVJsY21sMlpXUlRkR0YwWlVaeWIyMVFjbTl3Y3pvZ1owUlRSbEFnZlNBOUlHeHBabVZqZVdOc1pYTTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2huUkZOR1VDQW1KaUJuUkZOR1VDNW9ZWE5UYUc5MWJHUkRiMjF3YjI1bGJuUlZjR1JoZEdWQ2RXY3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J0YjJOclUwTlZTV1puUkZOR1VGSmxkSFZ5Yms1dmJrNTFiR3dvYm05a1pTd2djM1JoZEdVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhOb2IzVnNaRU52YlhCdmJtVnVkRlZ3WkdGMFpWTndlU0E5SUhOd2VVMWxkR2h2WkNocGJuTjBZVzVqWlN3Z0ozTm9iM1ZzWkVOdmJYQnZibVZ1ZEZWd1pHRjBaU2NwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnNhV1psWTNsamJHVnpMbWRsZEVOb2FXeGtRMjl1ZEdWNGRDNWpZV3hzWldSQ2VWSmxibVJsY21WeVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNZbUlIUjVjR1Z2WmlCcGJuTjBZVzVqWlM1blpYUkRhR2xzWkVOdmJuUmxlSFFnUFQwOUlDZG1kVzVqZEdsdmJpZGNiaUFnSUNBZ0lDQWdJQ0FnSUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCblpYUkRhR2xzWkVOdmJuUmxlSFJUY0hrZ1BTQnpjSGxOWlhSb2IyUW9hVzV6ZEdGdVkyVXNJQ2RuWlhSRGFHbHNaRU52Ym5SbGVIUW5LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLQ0Z6YUc5MWJHUkRiMjF3YjI1bGJuUlZjR1JoZEdWVGNIa2dKaVlnYVhOUWRYSmxRMjl0Y0c5dVpXNTBLR2x1YzNSaGJtTmxLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjMmh2ZFd4a1VtVnVaR1Z5SUQwZ2NIVnlaVU52YlhCdmJtVnVkRk5vYjNWc1pFTnZiWEJ2Ym1WdWRGVndaR0YwWlNoY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnY0hKbGRsQnliM0J6TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J3Y205d2N5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2MzUmhkR1VzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR2x1YzNSaGJtTmxMbk4wWVhSbExGeHVJQ0FnSUNBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tIQnliM0J6S1NCMGFHbHpXMVZPVWtWT1JFVlNSVVJkSUQwZ1kyeHZibVZGYkdWdFpXNTBLR0ZrWVhCMFpYSXNJSFJvYVhOYlZVNVNSVTVFUlZKRlJGMHNJSEJ5YjNCektUdGNiaUFnSUNBZ0lDQWdJQ0IwYUdselcxSkZUa1JGVWtWU1hTNXlaVzVrWlhJb2RHaHBjMXRWVGxKRlRrUkZVa1ZFWFN3Z2JtVjRkRU52Ym5SbGVIUXNJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIQnliM1pwWkdWeVZtRnNkV1Z6T2lCMGFHbHpXMUJTVDFaSlJFVlNYMVpCVEZWRlUxMHNYRzRnSUNBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lDQWdhV1lnS0hOb2IzVnNaRU52YlhCdmJtVnVkRlZ3WkdGMFpWTndlU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjMmh2ZFd4a1VtVnVaR1Z5SUQwZ2MyaHZkV3hrUTI5dGNHOXVaVzUwVlhCa1lYUmxVM0I1TG1kbGRFeGhjM1JTWlhSMWNtNVdZV3gxWlNncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYzJodmRXeGtRMjl0Y0c5dVpXNTBWWEJrWVhSbFUzQjVMbkpsYzNSdmNtVW9LVHRjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdhV1lnS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdjMmh2ZFd4a1VtVnVaR1Z5WEc0Z0lDQWdJQ0FnSUNBZ0lDQW1KaUFoZEdocGMxdFBVRlJKVDA1VFhTNWthWE5oWW14bFRHbG1aV041WTJ4bFRXVjBhRzlrYzF4dUlDQWdJQ0FnSUNBZ0lDQWdKaVlnYVc1emRHRnVZMlZjYmlBZ0lDQWdJQ0FnSUNBcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhCeWFYWmhkR1ZUWlhSRGFHbHNaRU52Ym5SbGVIUW9ZV1JoY0hSbGNpd2dkR2hwY3l3Z2FXNXpkR0Z1WTJVc0lHNXZaR1VzSUdkbGRFTm9hV3hrUTI5dWRHVjRkRk53ZVNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2JHbG1aV041WTJ4bGN5NW5aWFJUYm1Gd2MyaHZkRUpsWm05eVpWVndaR0YwWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdjMjVoY0hOb2IzUTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdhVzV6ZEdGdVkyVXVaMlYwVTI1aGNITm9iM1JDWldadmNtVlZjR1JoZEdVZ1BUMDlJQ2RtZFc1amRHbHZiaWNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemJtRndjMmh2ZENBOUlHbHVjM1JoYm1ObExtZGxkRk51WVhCemFHOTBRbVZtYjNKbFZYQmtZWFJsS0hCeVpYWlFjbTl3Y3l3Z2MzUmhkR1VwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc2FXWmxZM2xqYkdWekxtTnZiWEJ2Ym1WdWRFUnBaRlZ3WkdGMFpWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDWW1JSFI1Y0dWdlppQnBibk4wWVc1alpTNWpiMjF3YjI1bGJuUkVhV1JWY0dSaGRHVWdQVDA5SUNkbWRXNWpkR2x2YmlkY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBbUppQW9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FoYzNSaGRHVmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSHg4SUhOb1lXeHNiM2RGY1hWaGJDaHpkR0YwWlN3Z2RHaHBjeTVwYm5OMFlXNWpaU2dwTG5OMFlYUmxLVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZkh3Z2RIbHdaVzltSUhSNWNHVXVaMlYwUkdWeWFYWmxaRk4wWVhSbFJuSnZiVkJ5YjNCeklEMDlQU0FuWm5WdVkzUnBiMjRuWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcGJuTjBZVzVqWlM1amIyMXdiMjVsYm5SRWFXUlZjR1JoZEdVb2NISmxkbEJ5YjNCekxDQnpkR0YwWlN3Z2MyNWhjSE5vYjNRcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JzYVdabFkzbGpiR1Z6TG1OdmJYQnZibVZ1ZEVScFpGVndaR0YwWlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FtSmlCMGVYQmxiMllnYVc1emRHRnVZMlV1WTI5dGNHOXVaVzUwUkdsa1ZYQmtZWFJsSUQwOVBTQW5ablZ1WTNScGIyNG5YRzRnSUNBZ0lDQWdJQ0FnSUNBcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR3hwWm1WamVXTnNaWE11WTI5dGNHOXVaVzUwUkdsa1ZYQmtZWFJsTG5CeVpYWkRiMjUwWlhoMEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhVzV6ZEdGdVkyVXVZMjl0Y0c5dVpXNTBSR2xrVlhCa1lYUmxLSEJ5WlhaUWNtOXdjeXdnYzNSaGRHVXNJSEJ5WlhaRGIyNTBaWGgwS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJR2xtSUNnaGMzUmhkR1VnZkh3Z2MyaGhiR3h2ZDBWeGRXRnNLSFJvYVhNdWFXNXpkR0Z1WTJVb0tTNXpkR0YwWlN3Z2MzUmhkR1VwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXNXpkR0Z1WTJVdVkyOXRjRzl1Wlc1MFJHbGtWWEJrWVhSbEtIQnlaWFpRY205d2N5d2djM1JoZEdVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0x5OGdTV1lnYVhRZ1pHOWxjMjRuZENCdVpXVmtJSFJ2SUhKbGNtVnVaR1Z5TENCMWNHUmhkR1VnYjI1c2VTQnBkSE1nY0hKdmNITXVYRzRnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJR2xtSUNnaGMyaGhiR3h2ZDBWeGRXRnNLSEJ5YjNCekxDQnBibk4wWVc1alpTNXdjbTl3Y3lrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsdWMzUmhibU5sTG5CeWIzQnpJRDBnS0U5aWFtVmpkQzVtY21WbGVtVWdmSHdnVDJKcVpXTjBLU2g3SUM0dUxtbHVjM1JoYm1ObExuQnliM0J6TENBdUxpNXdjbTl3Y3lCOUtUdGNiaUFnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ2RHaHBjeTUxY0dSaGRHVW9LVHRjYmlBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNCOUtUdGNiaUFnSUNCOUtUdGNiaUFnSUNCeVpYUjFjbTRnZEdocGN6dGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJCSUcxbGRHaHZaQ0IwYUdGMElITmxkSE1nZEdobElIQnliM0J6SUc5bUlIUm9aU0J5YjI5MElHTnZiWEJ2Ym1WdWRDd2dZVzVrSUhKbExYSmxibVJsY25NdUlGVnpaV1oxYkNCbWIzSWdkMmhsYmlCNWIzVWdZWEpsWEc0Z0lDQXFJSGRoYm5ScGJtY2dkRzhnZEdWemRDQm9iM2NnZEdobElHTnZiWEJ2Ym1WdWRDQmlaV2hoZG1WeklHOTJaWElnZEdsdFpTQjNhWFJvSUdOb1lXNW5hVzVuSUhCeWIzQnpMaUJEWVd4c2FXNW5JSFJvYVhNc0lHWnZjbHh1SUNBZ0tpQnBibk4wWVc1alpTd2dkMmxzYkNCallXeHNJSFJvWlNCZ1kyOXRjRzl1Wlc1MFYybHNiRkpsWTJWcGRtVlFjbTl3YzJBZ2JHbG1aV041WTJ4bElHMWxkR2h2WkM1Y2JpQWdJQ3BjYmlBZ0lDb2dVMmx0YVd4aGNpQjBieUJnYzJWMFUzUmhkR1ZnTENCMGFHbHpJRzFsZEdodlpDQmhZMk5sY0hSeklHRWdjSEp2Y0hNZ2IySnFaV04wSUdGdVpDQjNhV3hzSUcxbGNtZGxJR2wwSUdsdUlIZHBkR2dnZEdobElHRnNjbVZoWkhsY2JpQWdJQ29nWlhocGMzUnBibWNnY0hKdmNITXVYRzRnSUNBcVhHNGdJQ0FxSUU1UFZFVTZJR05oYmlCdmJteDVJR0psSUdOaGJHeGxaQ0J2YmlCaElIZHlZWEJ3WlhJZ2FXNXpkR0Z1WTJVZ2RHaGhkQ0JwY3lCaGJITnZJSFJvWlNCeWIyOTBJR2x1YzNSaGJtTmxMbHh1SUNBZ0tseHVJQ0FnS2lCQWNHRnlZVzBnZTA5aWFtVmpkSDBnY0hKdmNITWdiMkpxWldOMFhHNGdJQ0FxSUVCd1lYSmhiU0I3Um5WdVkzUnBiMjU5SUdOaUlDMGdZMkZzYkdKaFkyc2dablZ1WTNScGIyNWNiaUFnSUNvZ1FISmxkSFZ5Ym5NZ2UxTm9ZV3hzYjNkWGNtRndjR1Z5ZlZ4dUlDQWdLaTljYmlBZ2MyVjBVSEp2Y0hNb2NISnZjSE1zSUdOaGJHeGlZV05ySUQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzRnSUNBZ2FXWWdLSFJvYVhOYlVrOVBWRjBnSVQwOUlIUm9hWE1wSUh0Y2JpQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWduVTJoaGJHeHZkMWR5WVhCd1pYSTZPbk5sZEZCeWIzQnpLQ2tnWTJGdUlHOXViSGtnWW1VZ1kyRnNiR1ZrSUc5dUlIUm9aU0J5YjI5MEp5azdYRzRnSUNBZ2ZWeHVJQ0FnSUdsbUlDaGhjbWQxYldWdWRITXViR1Z1WjNSb0lENGdNU0FtSmlCMGVYQmxiMllnWTJGc2JHSmhZMnNnSVQwOUlDZG1kVzVqZEdsdmJpY3BJSHRjYmlBZ0lDQWdJSFJvY205M0lHNWxkeUJVZVhCbFJYSnliM0lvSjFKbFlXTjBWM0poY0hCbGNqbzZjMlYwVUhKdmNITW9LU0JsZUhCbFkzUnpJR0VnWm5WdVkzUnBiMjRnWVhNZ2FYUnpJSE5sWTI5dVpDQmhjbWQxYldWdWRDY3BPMXh1SUNBZ0lIMWNiaUFnSUNCMGFHbHpMbkpsY21WdVpHVnlLSEJ5YjNCektUdGNiaUFnSUNCcFppQW9ZMkZzYkdKaFkyc3BJSHRjYmlBZ0lDQWdJR05oYkd4aVlXTnJLQ2s3WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUVFZ2JXVjBhRzlrSUhSdklHbHVkbTlyWlNCZ2MyVjBVM1JoZEdWZ0lHOXVJSFJvWlNCeWIyOTBJR052YlhCdmJtVnVkQ0JwYm5OMFlXNWpaU0J6YVcxcGJHRnlJSFJ2SUdodmR5QjViM1VnYldsbmFIUWdhVzRnZEdobFhHNGdJQ0FxSUdSbFptbHVhWFJwYjI0Z2IyWWdkR2hsSUdOdmJYQnZibVZ1ZEN3Z1lXNWtJSEpsTFhKbGJtUmxjbk11SUNCVWFHbHpJRzFsZEdodlpDQnBjeUIxYzJWbWRXd2dabTl5SUhSbGMzUnBibWNnZVc5MWNpQmpiMjF3YjI1bGJuUmNiaUFnSUNvZ2FXNGdhR0Z5WkNCMGJ5QmhZMmhwWlhabElITjBZWFJsY3l3Z2FHOTNaWFpsY2lCemFHOTFiR1FnWW1VZ2RYTmxaQ0J6Y0dGeWFXNW5iSGt1SUVsbUlIQnZjM05wWW14bExDQjViM1VnYzJodmRXeGtJSFYwYVd4cGVtVmNiaUFnSUNvZ2VXOTFjaUJqYjIxd2IyNWxiblFuY3lCbGVIUmxjbTVoYkNCQlVFa2dhVzRnYjNKa1pYSWdkRzhnWjJWMElHbDBJR2x1ZEc4Z2QyaGhkR1YyWlhJZ2MzUmhkR1VnZVc5MUlIZGhiblFnZEc4Z2RHVnpkQ3dnYVc0Z2IzSmtaWEpjYmlBZ0lDb2dkRzhnWW1VZ1lYTWdZV05qZFhKaGRHVWdiMllnWVNCMFpYTjBJR0Z6SUhCdmMzTnBZbXhsTGlCVWFHbHpJR2x6SUc1dmRDQmhiSGRoZVhNZ2NISmhZM1JwWTJGc0xDQm9iM2RsZG1WeUxseHVJQ0FnS2x4dUlDQWdLaUJPVDFSRk9pQmpZVzRnYjI1c2VTQmlaU0JqWVd4c1pXUWdiMjRnWVNCM2NtRndjR1Z5SUdsdWMzUmhibU5sSUhSb1lYUWdhWE1nWVd4emJ5QjBhR1VnY205dmRDQnBibk4wWVc1alpTNWNiaUFnSUNwY2JpQWdJQ29nUUhCaGNtRnRJSHRQWW1wbFkzUjlJSE4wWVhSbElIUnZJRzFsY21kbFhHNGdJQ0FxSUVCd1lYSmhiU0I3Um5WdVkzUnBiMjU5SUdOaUlDMGdZMkZzYkdKaFkyc2dablZ1WTNScGIyNWNiaUFnSUNvZ1FISmxkSFZ5Ym5NZ2UxTm9ZV3hzYjNkWGNtRndjR1Z5ZlZ4dUlDQWdLaTljYmlBZ2MyVjBVM1JoZEdVb2MzUmhkR1VzSUdOaGJHeGlZV05ySUQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzRnSUNBZ2FXWWdLSFJvYVhOYlVrOVBWRjBnSVQwOUlIUm9hWE1wSUh0Y2JpQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWduVTJoaGJHeHZkMWR5WVhCd1pYSTZPbk5sZEZOMFlYUmxLQ2tnWTJGdUlHOXViSGtnWW1VZ1kyRnNiR1ZrSUc5dUlIUm9aU0J5YjI5MEp5azdYRzRnSUNBZ2ZWeHVJQ0FnSUdsbUlDaDBhR2x6TG1sdWMzUmhibU5sS0NrZ1BUMDlJRzUxYkd3Z2ZId2dkR2hwYzF0U1JVNUVSVkpGVWwwdVoyVjBUbTlrWlNncExtNXZaR1ZVZVhCbElDRTlQU0FuWTJ4aGMzTW5LU0I3WEc0Z0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KMU5vWVd4c2IzZFhjbUZ3Y0dWeU9qcHpaWFJUZEdGMFpTZ3BJR05oYmlCdmJteDVJR0psSUdOaGJHeGxaQ0J2YmlCamJHRnpjeUJqYjIxd2IyNWxiblJ6SnlrN1hHNGdJQ0FnZlZ4dUlDQWdJR2xtSUNoaGNtZDFiV1Z1ZEhNdWJHVnVaM1JvSUQ0Z01TQW1KaUIwZVhCbGIyWWdZMkZzYkdKaFkyc2dJVDA5SUNkbWRXNWpkR2x2YmljcElIdGNiaUFnSUNBZ0lIUm9jbTkzSUc1bGR5QlVlWEJsUlhKeWIzSW9KMUpsWVdOMFYzSmhjSEJsY2pvNmMyVjBVM1JoZEdVb0tTQmxlSEJsWTNSeklHRWdablZ1WTNScGIyNGdZWE1nYVhSeklITmxZMjl1WkNCaGNtZDFiV1Z1ZENjcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhSb2FYTXVjMmx1WjJ4bEtDZHpaWFJUZEdGMFpTY3NJQ2dwSUQwK0lIdGNiaUFnSUNBZ0lIZHBkR2hUWlhSVGRHRjBaVUZzYkc5M1pXUW9LQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCaFpHRndkR1Z5SUQwZ1oyVjBRV1JoY0hSbGNpaDBhR2x6VzA5UVZFbFBUbE5kS1R0Y2JseHVJQ0FnSUNBZ0lDQmpiMjV6ZENCc2FXWmxZM2xqYkdWeklEMGdaMlYwUVdSaGNIUmxja3hwWm1WamVXTnNaWE1vWVdSaGNIUmxjaWs3WEc1Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnYm05a1pTQTlJSFJvYVhOYlVrVk9SRVZTUlZKZExtZGxkRTV2WkdVb0tUdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2V5QnBibk4wWVc1alpTQjlJRDBnYm05a1pUdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2NISmxkbEJ5YjNCeklEMGdhVzV6ZEdGdVkyVXVjSEp2Y0hNN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUhCeVpYWlRkR0YwWlNBOUlHbHVjM1JoYm1ObExuTjBZWFJsTzF4dUlDQWdJQ0FnSUNCamIyNXpkQ0J3Y21WMlEyOXVkR1Y0ZENBOUlHbHVjM1JoYm1ObExtTnZiblJsZUhRN1hHNWNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2MzUmhkR1ZRWVhsc2IyRmtJRDBnZEhsd1pXOW1JSE4wWVhSbElEMDlQU0FuWm5WdVkzUnBiMjRuWEc0Z0lDQWdJQ0FnSUNBZ1B5QnpkR0YwWlM1allXeHNLR2x1YzNSaGJtTmxMQ0J3Y21WMlUzUmhkR1VzSUhCeVpYWlFjbTl3Y3lsY2JpQWdJQ0FnSUNBZ0lDQTZJSE4wWVhSbE8xeHVYRzRnSUNBZ0lDQWdJQzh2SUhKbGRIVnlibWx1WnlCdWRXeHNJRzl5SUhWdVpHVm1hVzVsWkNCd2NtVjJaVzUwY3lCMGFHVWdkWEJrWVhSbElHbHVJRkpsWVdOMElERTJLMXh1SUNBZ0lDQWdJQ0F2THlCb2RIUndjem92TDJkcGRHaDFZaTVqYjIwdlptRmpaV0p2YjJzdmNtVmhZM1F2Y0hWc2JDOHhNamMxTmx4dUlDQWdJQ0FnSUNCamIyNXpkQ0J0WVhsaVpVaGhjMVZ3WkdGMFpTQTlJQ0ZzYVdabFkzbGpiR1Z6TG5ObGRGTjBZWFJsTG5OcmFYQnpRMjl0Y0c5dVpXNTBSR2xrVlhCa1lYUmxUMjVPZFd4c2FYTm9YRzRnSUNBZ0lDQWdJQ0FnZkh3Z2MzUmhkR1ZRWVhsc2IyRmtJQ0U5SUc1MWJHdzdYRzVjYmlBZ0lDQWdJQ0FnTHk4Z1YyaGxiaUJ6YUc5MWJHUkRiMjF3YjI1bGJuUlZjR1JoZEdVZ2NtVjBkWEp1Y3lCbVlXeHpaU0IzWlNCemFHOTFiR1J1SjNRZ1kyRnNiQ0JqYjIxd2IyNWxiblJFYVdSVmNHUmhkR1V1WEc0Z0lDQWdJQ0FnSUM4dklITnZJSGRsSUhOd2VTQnphRzkxYkdSRGIyMXdiMjVsYm5SVmNHUmhkR1VnZEc4Z1oyVjBJSFJvWlNCeVpYTjFiSFF1WEc0Z0lDQWdJQ0FnSUd4bGRDQnphRzkxYkdSRGIyMXdiMjVsYm5SVmNHUmhkR1ZUY0hrN1hHNGdJQ0FnSUNBZ0lHeGxkQ0JuWlhSRGFHbHNaRU52Ym5SbGVIUlRjSGs3WEc0Z0lDQWdJQ0FnSUd4bGRDQnphRzkxYkdSU1pXNWtaWElnUFNCMGNuVmxPMXh1SUNBZ0lDQWdJQ0JwWmlBb1hHNGdJQ0FnSUNBZ0lDQWdJWFJvYVhOYlQxQlVTVTlPVTEwdVpHbHpZV0pzWlV4cFptVmplV05zWlUxbGRHaHZaSE5jYmlBZ0lDQWdJQ0FnSUNBbUppQnBibk4wWVc1alpWeHVJQ0FnSUNBZ0lDQXBJSHRjYmlBZ0lDQWdJQ0FnSUNCcFppQW9YRzRnSUNBZ0lDQWdJQ0FnSUNCc2FXWmxZM2xqYkdWekxtTnZiWEJ2Ym1WdWRFUnBaRlZ3WkdGMFpWeHVJQ0FnSUNBZ0lDQWdJQ0FnSmlZZ2JHbG1aV041WTJ4bGN5NWpiMjF3YjI1bGJuUkVhV1JWY0dSaGRHVXViMjVUWlhSVGRHRjBaVnh1SUNBZ0lDQWdJQ0FnSUNBZ0ppWWdkSGx3Wlc5bUlHbHVjM1JoYm1ObExuTm9iM1ZzWkVOdmJYQnZibVZ1ZEZWd1pHRjBaU0E5UFQwZ0oyWjFibU4wYVc5dUoxeHVJQ0FnSUNBZ0lDQWdJQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2V5Qm5aWFJFWlhKcGRtVmtVM1JoZEdWR2NtOXRVSEp2Y0hNNklHZEVVMFpRSUgwZ1BTQnNhV1psWTNsamJHVnpPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR2RFVTBaUUlDWW1JR2RFVTBaUUxtaGhjMU5vYjNWc1pFTnZiWEJ2Ym1WdWRGVndaR0YwWlVKMVp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnRiMk5yVTBOVlNXWm5SRk5HVUZKbGRIVnliazV2Yms1MWJHd29ibTlrWlN3Z2MzUmhkR1VwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2MyaHZkV3hrUTI5dGNHOXVaVzUwVlhCa1lYUmxVM0I1SUQwZ2MzQjVUV1YwYUc5a0tHbHVjM1JoYm1ObExDQW5jMmh2ZFd4a1EyOXRjRzl1Wlc1MFZYQmtZWFJsSnlrN1hHNGdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUdsbUlDaGNiaUFnSUNBZ0lDQWdJQ0FnSUd4cFptVmplV05zWlhNdVoyVjBRMmhwYkdSRGIyNTBaWGgwTG1OaGJHeGxaRUo1VW1WdVpHVnlaWEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDWW1JSFI1Y0dWdlppQnBibk4wWVc1alpTNW5aWFJEYUdsc1pFTnZiblJsZUhRZ1BUMDlJQ2RtZFc1amRHbHZiaWRjYmlBZ0lDQWdJQ0FnSUNBcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdkbGRFTm9hV3hrUTI5dWRHVjRkRk53ZVNBOUlITndlVTFsZEdodlpDaHBibk4wWVc1alpTd2dKMmRsZEVOb2FXeGtRMjl1ZEdWNGRDY3BPMXh1SUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnBaaUFvSVhOb2IzVnNaRU52YlhCdmJtVnVkRlZ3WkdGMFpWTndlU0FtSmlCcGMxQjFjbVZEYjIxd2IyNWxiblFvYVc1emRHRnVZMlVwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdjMmh2ZFd4a1VtVnVaR1Z5SUQwZ2NIVnlaVU52YlhCdmJtVnVkRk5vYjNWc1pFTnZiWEJ2Ym1WdWRGVndaR0YwWlNoY2JpQWdJQ0FnSUNBZ0lDQWdJSEJ5WlhaUWNtOXdjeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lHbHVjM1JoYm1ObExuQnliM0J6TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdjSEpsZGxOMFlYUmxMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2V5QXVMaTV3Y21WMlUzUmhkR1VzSUM0dUxuTjBZWFJsVUdGNWJHOWhaQ0I5TEZ4dUlDQWdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBdkx5QlhaU0JrYjI0bmRDQndZWE56SUhSb1pTQnpaWFJUZEdGMFpTQmpZV3hzWW1GamF5Qm9aWEpsWEc0Z0lDQWdJQ0FnSUM4dklIUnZJR2QxWVhKaGJuUmxaU0IwYnlCallXeHNJSFJvWlNCallXeHNZbUZqYXlCaFpuUmxjaUJtYVc1cGMyaHBibWNnZEdobElISmxibVJsY2x4dUlDQWdJQ0FnSUNCcFppQW9hVzV6ZEdGdVkyVmJVMFZVWDFOVVFWUkZYU2tnZTF4dUlDQWdJQ0FnSUNBZ0lHbHVjM1JoYm1ObFcxTkZWRjlUVkVGVVJWMG9jM1JoZEdWUVlYbHNiMkZrS1R0Y2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQnBibk4wWVc1alpTNXpaWFJUZEdGMFpTaHpkR0YwWlZCaGVXeHZZV1FwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHbG1JQ2h6YUc5MWJHUkRiMjF3YjI1bGJuUlZjR1JoZEdWVGNIa3BJSHRjYmlBZ0lDQWdJQ0FnSUNCemFHOTFiR1JTWlc1a1pYSWdQU0J6YUc5MWJHUkRiMjF3YjI1bGJuUlZjR1JoZEdWVGNIa3VaMlYwVEdGemRGSmxkSFZ5YmxaaGJIVmxLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ2MyaHZkV3hrUTI5dGNHOXVaVzUwVlhCa1lYUmxVM0I1TG5KbGMzUnZjbVVvS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnBaaUFvWEc0Z0lDQWdJQ0FnSUNBZ2JXRjVZbVZJWVhOVmNHUmhkR1ZjYmlBZ0lDQWdJQ0FnSUNBbUppQnphRzkxYkdSU1pXNWtaWEpjYmlBZ0lDQWdJQ0FnSUNBbUppQWhkR2hwYzF0UFVGUkpUMDVUWFM1a2FYTmhZbXhsVEdsbVpXTjVZMnhsVFdWMGFHOWtjMXh1SUNBZ0lDQWdJQ0FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQndjbWwyWVhSbFUyVjBRMmhwYkdSRGIyNTBaWGgwS0dGa1lYQjBaWElzSUhSb2FYTXNJR2x1YzNSaGJtTmxMQ0J1YjJSbExDQm5aWFJEYUdsc1pFTnZiblJsZUhSVGNIa3BPMXh1SUNBZ0lDQWdJQ0FnSUdsbUlDaGNiaUFnSUNBZ0lDQWdJQ0FnSUd4cFptVmplV05zWlhNdVkyOXRjRzl1Wlc1MFJHbGtWWEJrWVhSbFhHNGdJQ0FnSUNBZ0lDQWdJQ0FtSmlCc2FXWmxZM2xqYkdWekxtTnZiWEJ2Ym1WdWRFUnBaRlZ3WkdGMFpTNXZibE5sZEZOMFlYUmxYRzRnSUNBZ0lDQWdJQ0FnS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUd4cFptVmplV05zWlhNdVoyVjBVMjVoY0hOb2IzUkNaV1p2Y21WVmNHUmhkR1ZjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdKaVlnZEhsd1pXOW1JR2x1YzNSaGJtTmxMbWRsZEZOdVlYQnphRzkwUW1WbWIzSmxWWEJrWVhSbElEMDlQU0FuWm5WdVkzUnBiMjRuWEc0Z0lDQWdJQ0FnSUNBZ0lDQXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2MyNWhjSE5vYjNRZ1BTQnBibk4wWVc1alpTNW5aWFJUYm1Gd2MyaHZkRUpsWm05eVpWVndaR0YwWlNod2NtVjJVSEp2Y0hNc0lIQnlaWFpUZEdGMFpTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdhVzV6ZEdGdVkyVXVZMjl0Y0c5dVpXNTBSR2xrVlhCa1lYUmxJRDA5UFNBblpuVnVZM1JwYjI0bktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhVzV6ZEdGdVkyVXVZMjl0Y0c5dVpXNTBSR2xrVlhCa1lYUmxLSEJ5WlhaUWNtOXdjeXdnY0hKbGRsTjBZWFJsTENCemJtRndjMmh2ZENrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQnBaaUFvZEhsd1pXOW1JR2x1YzNSaGJtTmxMbU52YlhCdmJtVnVkRVJwWkZWd1pHRjBaU0E5UFQwZ0oyWjFibU4wYVc5dUp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYkdsbVpXTjVZMnhsY3k1amIyMXdiMjVsYm5SRWFXUlZjR1JoZEdVdWNISmxka052Ym5SbGVIUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwYm5OMFlXNWpaUzVqYjIxd2IyNWxiblJFYVdSVmNHUmhkR1VvY0hKbGRsQnliM0J6TENCd2NtVjJVM1JoZEdVc0lIQnlaWFpEYjI1MFpYaDBLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBibk4wWVc1alpTNWpiMjF3YjI1bGJuUkVhV1JWY0dSaGRHVW9jSEpsZGxCeWIzQnpMQ0J3Y21WMlUzUmhkR1VwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIUm9hWE11ZFhCa1lYUmxLQ2s3WEc0Z0lDQWdJQ0FnSUM4dklHTmhiR3dnZEdobElITmxkRk4wWVhSbElHTmhiR3hpWVdOclhHNGdJQ0FnSUNBZ0lHbG1JQ2hqWVd4c1ltRmpheWtnZTF4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2hoWkdGd2RHVnlMbWx1ZG05clpWTmxkRk4wWVhSbFEyRnNiR0poWTJzcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdGa1lYQjBaWEl1YVc1MmIydGxVMlYwVTNSaGRHVkRZV3hzWW1GamF5aHBibk4wWVc1alpTd2dZMkZzYkdKaFkyc3BPMXh1SUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpZV3hzWW1GamF5NWpZV3hzS0dsdWMzUmhibU5sS1R0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDBwTzF4dUlDQWdJSDBwTzF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFRWdiV1YwYUc5a0lIUm9ZWFFnYzJWMGN5QjBhR1VnWTI5dWRHVjRkQ0J2WmlCMGFHVWdjbTl2ZENCamIyMXdiMjVsYm5Rc0lHRnVaQ0J5WlMxeVpXNWtaWEp6TGlCVmMyVm1kV3dnWm05eUlIZG9aVzRnZVc5MUlHRnlaVnh1SUNBZ0tpQjNZVzUwYVc1bklIUnZJSFJsYzNRZ2FHOTNJSFJvWlNCamIyMXdiMjVsYm5RZ1ltVm9ZWFpsY3lCdmRtVnlJSFJwYldVZ2QybDBhQ0JqYUdGdVoybHVaeUJqYjI1MFpYaDBjeTVjYmlBZ0lDcGNiaUFnSUNvZ1RrOVVSVG9nWTJGdUlHOXViSGtnWW1VZ1kyRnNiR1ZrSUc5dUlHRWdkM0poY0hCbGNpQnBibk4wWVc1alpTQjBhR0YwSUdseklHRnNjMjhnZEdobElISnZiM1FnYVc1emRHRnVZMlV1WEc0Z0lDQXFYRzRnSUNBcUlFQndZWEpoYlNCN1QySnFaV04wZlNCamIyNTBaWGgwSUc5aWFtVmpkRnh1SUNBZ0tpQkFjbVYwZFhKdWN5QjdVMmhoYkd4dmQxZHlZWEJ3WlhKOVhHNGdJQ0FxTDF4dUlDQnpaWFJEYjI1MFpYaDBLR052Ym5SbGVIUXBJSHRjYmlBZ0lDQnBaaUFvZEdocGMxdFNUMDlVWFNBaFBUMGdkR2hwY3lrZ2UxeHVJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NkVGFHRnNiRzkzVjNKaGNIQmxjam82YzJWMFEyOXVkR1Y0ZENncElHTmhiaUJ2Ym14NUlHSmxJR05oYkd4bFpDQnZiaUIwYUdVZ2NtOXZkQ2NwTzF4dUlDQWdJSDFjYmlBZ0lDQnBaaUFvSVhSb2FYTmJUMUJVU1U5T1UxMHVZMjl1ZEdWNGRDa2dlMXh1SUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZFRhR0ZzYkc5M1YzSmhjSEJsY2pvNmMyVjBRMjl1ZEdWNGRDZ3BJR05oYmlCdmJteDVJR0psSUdOaGJHeGxaQ0J2YmlCaElIZHlZWEJ3WlhJZ2RHaGhkQ0IzWVhNZ2IzSnBaMmx1WVd4c2VTQndZWE56WldRZ1lTQmpiMjUwWlhoMElHOXdkR2x2YmljcE8xeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1eVpYSmxibVJsY2lodWRXeHNMQ0JqYjI1MFpYaDBLVHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCWGFHVjBhR1Z5SUc5eUlHNXZkQ0JoSUdkcGRtVnVJSEpsWVdOMElHVnNaVzFsYm5RZ1pYaHBjM1J6SUdsdUlIUm9aU0J6YUdGc2JHOTNJSEpsYm1SbGNpQjBjbVZsTGx4dUlDQWdLbHh1SUNBZ0tpQkZlR0Z0Y0d4bE9seHVJQ0FnS2lCZ1lHQmNiaUFnSUNvZ1kyOXVjM1FnZDNKaGNIQmxjaUE5SUhOb1lXeHNiM2NvUEUxNVEyOXRjRzl1Wlc1MElDOCtLVHRjYmlBZ0lDb2daWGh3WldOMEtIZHlZWEJ3WlhJdVkyOXVkR0ZwYm5Nb1BHUnBkaUJqYkdGemMwNWhiV1U5WENKbWIyOGdZbUZ5WENJZ0x6NHBLUzUwYnk1bGNYVmhiQ2gwY25WbEtUdGNiaUFnSUNvZ1lHQmdYRzRnSUNBcVhHNGdJQ0FxSUVCd1lYSmhiU0I3VW1WaFkzUkZiR1Z0Wlc1MGZFRnljbUY1UEZKbFlXTjBSV3hsYldWdWRENTlJRzV2WkdWUGNrNXZaR1Z6WEc0Z0lDQXFJRUJ5WlhSMWNtNXpJSHRDYjI5c1pXRnVmVnh1SUNBZ0tpOWNiaUFnWTI5dWRHRnBibk1vYm05a1pVOXlUbTlrWlhNcElIdGNiaUFnSUNCamIyNXpkQ0JoWkdGd2RHVnlJRDBnWjJWMFFXUmhjSFJsY2loMGFHbHpXMDlRVkVsUFRsTmRLVHRjYmlBZ0lDQnBaaUFvSVdselVtVmhZM1JGYkdWdFpXNTBRV3hwYTJVb2JtOWtaVTl5VG05a1pYTXNJR0ZrWVhCMFpYSXBLU0I3WEc0Z0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KMU5vWVd4c2IzZFhjbUZ3Y0dWeU9qcGpiMjUwWVdsdWN5Z3BJR05oYmlCdmJteDVJR0psSUdOaGJHeGxaQ0IzYVhSb0lHRWdVbVZoWTNSRmJHVnRaVzUwSUNodmNpQmhiaUJoY25KaGVTQnZaaUIwYUdWdEtTd2dZU0J6ZEhKcGJtY3NJRzl5SUdFZ2JuVnRZbVZ5SUdGeklHRnVJR0Z5WjNWdFpXNTBMaWNwTzF4dUlDQWdJSDFjYmlBZ0lDQmpiMjV6ZENCd2NtVmthV05oZEdVZ1BTQkJjbkpoZVM1cGMwRnljbUY1S0c1dlpHVlBjazV2WkdWektWeHVJQ0FnSUNBZ1B5QW9iM1JvWlhJcElEMCtJR052Ym5SaGFXNXpRMmhwYkdSeVpXNVRkV0pCY25KaGVTaGNiaUFnSUNBZ0lDQWdibTlrWlVWeGRXRnNMRnh1SUNBZ0lDQWdJQ0J2ZEdobGNpeGNiaUFnSUNBZ0lDQWdibTlrWlU5eVRtOWtaWE11YldGd0tDaHViMlJsS1NBOVBpQmhaR0Z3ZEdWeUxtVnNaVzFsYm5SVWIwNXZaR1VvYm05a1pTa3BMRnh1SUNBZ0lDQWdLVnh1SUNBZ0lDQWdPaUFvYjNSb1pYSXBJRDArSUc1dlpHVkZjWFZoYkNoaFpHRndkR1Z5TG1Wc1pXMWxiblJVYjA1dlpHVW9ibTlrWlU5eVRtOWtaWE1wTENCdmRHaGxjaWs3WEc1Y2JpQWdJQ0J5WlhSMWNtNGdabWx1WkZkb1pYSmxWVzUzY21Gd2NHVmtLSFJvYVhNc0lIQnlaV1JwWTJGMFpTa3ViR1Z1WjNSb0lENGdNRHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCWGFHVjBhR1Z5SUc5eUlHNXZkQ0JoSUdkcGRtVnVJSEpsWVdOMElHVnNaVzFsYm5RZ1pYaHBjM1J6SUdsdUlIUm9aU0J6YUdGc2JHOTNJSEpsYm1SbGNpQjBjbVZsTGx4dUlDQWdLaUJOWVhSamFDQnBjeUJpWVhObFpDQnZiaUIwYUdVZ1pYaHdaV04wWldRZ1pXeGxiV1Z1ZENCaGJtUWdibTkwSUc5dUlIZHlZWEJ3WlhKeklHVnNaVzFsYm5RdVhHNGdJQ0FxSUVsMElIZHBiR3dnWkdWMFpYSnRhVzVsSUdsbUlHOXVaU0J2WmlCMGFHVWdkM0poY0hCbGNuTWdaV3hsYldWdWRDQmNJbXh2YjJ0eklHeHBhMlZjSWlCMGFHVWdaWGh3WldOMFpXUmNiaUFnSUNvZ1pXeGxiV1Z1ZENCaWVTQmphR1ZqYTJsdVp5QnBaaUJoYkd3Z2NISnZjSE1nYjJZZ2RHaGxJR1Y0Y0dWamRHVmtJR1ZzWlcxbGJuUWdZWEpsSUhCeVpYTmxiblJjYmlBZ0lDb2diMjRnZEdobElIZHlZWEJ3WlhKeklHVnNaVzFsYm5RZ1lXNWtJR1Z4ZFdGc2N5QjBieUJsWVdOb0lHOTBhR1Z5TGx4dUlDQWdLbHh1SUNBZ0tpQkZlR0Z0Y0d4bE9seHVJQ0FnS2lCZ1lHQmNiaUFnSUNvZ0x5OGdUWGxEYjIxd2IyNWxiblFnYjNWMGNIVjBjeUE4WkdsMlBqeGthWFlnWTJ4aGMzTTlYQ0ptYjI5Y0lqNUlaV3hzYnp3dlpHbDJQand2WkdsMlBseHVJQ0FnS2lCamIyNXpkQ0IzY21Gd2NHVnlJRDBnYzJoaGJHeHZkeWc4VFhsRGIyMXdiMjVsYm5RZ0x6NHBPMXh1SUNBZ0tpQmxlSEJsWTNRb2QzSmhjSEJsY2k1amIyNTBZV2x1YzAxaGRHTm9hVzVuUld4bGJXVnVkQ2c4WkdsMlBraGxiR3h2UEM5a2FYWStLU2t1ZEc4dVpYRjFZV3dvZEhKMVpTazdYRzRnSUNBcUlHQmdZRnh1SUNBZ0tseHVJQ0FnS2lCQWNHRnlZVzBnZTFKbFlXTjBSV3hsYldWdWRIMGdibTlrWlZ4dUlDQWdLaUJBY21WMGRYSnVjeUI3UW05dmJHVmhibjFjYmlBZ0lDb3ZYRzRnSUdOdmJuUmhhVzV6VFdGMFkyaHBibWRGYkdWdFpXNTBLRzV2WkdVcElIdGNiaUFnSUNCamIyNXpkQ0JoWkdGd2RHVnlJRDBnWjJWMFFXUmhjSFJsY2loMGFHbHpXMDlRVkVsUFRsTmRLVHRjYmlBZ0lDQmpiMjV6ZENCeWMzUk9iMlJsSUQwZ1lXUmhjSFJsY2k1bGJHVnRaVzUwVkc5T2IyUmxLRzV2WkdVcE8xeHVJQ0FnSUdOdmJuTjBJSEJ5WldScFkyRjBaU0E5SUNodmRHaGxjaWtnUFQ0Z2JtOWtaVTFoZEdOb1pYTW9jbk4wVG05a1pTd2diM1JvWlhJc0lDaGhMQ0JpS1NBOVBpQmhJRHc5SUdJcE8xeHVJQ0FnSUhKbGRIVnliaUJtYVc1a1YyaGxjbVZWYm5keVlYQndaV1FvZEdocGN5d2djSEpsWkdsallYUmxLUzVzWlc1bmRHZ2dQaUF3TzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGZG9aWFJvWlhJZ2IzSWdibTkwSUdGc2JDQjBhR1VnWjJsMlpXNGdjbVZoWTNRZ1pXeGxiV1Z1ZEhNZ1pYaHBjM1FnYVc0Z2RHaGxJSE5vWVd4c2IzY2djbVZ1WkdWeUlIUnlaV1V1WEc0Z0lDQXFJRTFoZEdOb0lHbHpJR0poYzJWa0lHOXVJSFJvWlNCbGVIQmxZM1JsWkNCbGJHVnRaVzUwSUdGdVpDQnViM1FnYjI0Z2QzSmhjSEJsY25NZ1pXeGxiV1Z1ZEM1Y2JpQWdJQ29nU1hRZ2QybHNiQ0JrWlhSbGNtMXBibVVnYVdZZ2IyNWxJRzltSUhSb1pTQjNjbUZ3Y0dWeWN5QmxiR1Z0Wlc1MElGd2liRzl2YTNNZ2JHbHJaVndpSUhSb1pTQmxlSEJsWTNSbFpGeHVJQ0FnS2lCbGJHVnRaVzUwSUdKNUlHTm9aV05yYVc1bklHbG1JR0ZzYkNCd2NtOXdjeUJ2WmlCMGFHVWdaWGh3WldOMFpXUWdaV3hsYldWdWRDQmhjbVVnY0hKbGMyVnVkRnh1SUNBZ0tpQnZiaUIwYUdVZ2QzSmhjSEJsY25NZ1pXeGxiV1Z1ZENCaGJtUWdaWEYxWVd4eklIUnZJR1ZoWTJnZ2IzUm9aWEl1WEc0Z0lDQXFYRzRnSUNBcUlFVjRZVzF3YkdVNlhHNGdJQ0FxSUdCZ1lGeHVJQ0FnS2lCamIyNXpkQ0IzY21Gd2NHVnlJRDBnYzJoaGJHeHZkeWc4VFhsRGIyMXdiMjVsYm5RZ0x6NHBPMXh1SUNBZ0tpQmxlSEJsWTNRb2QzSmhjSEJsY2k1amIyNTBZV2x1YzBGc2JFMWhkR05vYVc1blJXeGxiV1Z1ZEhNb1cxeHVJQ0FnS2lBZ0lEeGthWFkrU0dWc2JHODhMMlJwZGo0c1hHNGdJQ0FxSUNBZ1BHUnBkajVIYjI5a1lubGxQQzlrYVhZK0xGeHVJQ0FnS2lCZEtTa3VkRzh1WlhGMVlXd29kSEoxWlNrN1hHNGdJQ0FxSUdCZ1lGeHVJQ0FnS2x4dUlDQWdLaUJBY0dGeVlXMGdlMEZ5Y21GNVBGSmxZV04wUld4bGJXVnVkRDU5SUc1dlpHVnpYRzRnSUNBcUlFQnlaWFIxY201eklIdENiMjlzWldGdWZWeHVJQ0FnS2k5Y2JpQWdZMjl1ZEdGcGJuTkJiR3hOWVhSamFHbHVaMFZzWlcxbGJuUnpLRzV2WkdWektTQjdYRzRnSUNBZ2FXWWdLQ0ZCY25KaGVTNXBjMEZ5Y21GNUtHNXZaR1Z6S1NrZ2UxeHVJQ0FnSUNBZ2RHaHliM2NnYm1WM0lGUjVjR1ZGY25KdmNpZ25ibTlrWlhNZ2MyaHZkV3hrSUdKbElHRnVJRUZ5Y21GNUp5azdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2NtVjBkWEp1SUc1dlpHVnpMbVYyWlhKNUtDaHViMlJsS1NBOVBpQjBhR2x6TG1OdmJuUmhhVzV6VFdGMFkyaHBibWRGYkdWdFpXNTBLRzV2WkdVcEtUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJYYUdWMGFHVnlJRzl5SUc1dmRDQnZibVVnYjJZZ2RHaGxJR2RwZG1WdUlISmxZV04wSUdWc1pXMWxiblJ6SUdWNGFYTjBjeUJwYmlCMGFHVWdjMmhoYkd4dmR5QnlaVzVrWlhJZ2RISmxaUzVjYmlBZ0lDb2dUV0YwWTJnZ2FYTWdZbUZ6WldRZ2IyNGdkR2hsSUdWNGNHVmpkR1ZrSUdWc1pXMWxiblFnWVc1a0lHNXZkQ0J2YmlCM2NtRndjR1Z5Y3lCbGJHVnRaVzUwTGx4dUlDQWdLaUJKZENCM2FXeHNJR1JsZEdWeWJXbHVaU0JwWmlCdmJtVWdiMllnZEdobElIZHlZWEJ3WlhKeklHVnNaVzFsYm5RZ1hDSnNiMjlyY3lCc2FXdGxYQ0lnZEdobElHVjRjR1ZqZEdWa1hHNGdJQ0FxSUdWc1pXMWxiblFnWW5rZ1kyaGxZMnRwYm1jZ2FXWWdZV3hzSUhCeWIzQnpJRzltSUhSb1pTQmxlSEJsWTNSbFpDQmxiR1Z0Wlc1MElHRnlaU0J3Y21WelpXNTBYRzRnSUNBcUlHOXVJSFJvWlNCM2NtRndjR1Z5Y3lCbGJHVnRaVzUwSUdGdVpDQmxjWFZoYkhNZ2RHOGdaV0ZqYUNCdmRHaGxjaTVjYmlBZ0lDcGNiaUFnSUNvZ1JYaGhiWEJzWlRwY2JpQWdJQ29nWUdCZ1hHNGdJQ0FxSUdOdmJuTjBJSGR5WVhCd1pYSWdQU0J6YUdGc2JHOTNLRHhOZVVOdmJYQnZibVZ1ZENBdlBpazdYRzRnSUNBcUlHVjRjR1ZqZENoM2NtRndjR1Z5TG1OdmJuUmhhVzV6UVc1NVRXRjBZMmhwYm1kRmJHVnRaVzUwY3loYlhHNGdJQ0FxSUNBZ1BHUnBkajVJWld4c2J6d3ZaR2wyUGl4Y2JpQWdJQ29nSUNBOFpHbDJQa2R2YjJSaWVXVThMMlJwZGo0c1hHNGdJQ0FxSUYwcEtTNTBieTVsY1hWaGJDaDBjblZsS1R0Y2JpQWdJQ29nWUdCZ1hHNGdJQ0FxWEc0Z0lDQXFJRUJ3WVhKaGJTQjdRWEp5WVhrOFVtVmhZM1JGYkdWdFpXNTBQbjBnYm05a1pYTmNiaUFnSUNvZ1FISmxkSFZ5Ym5NZ2UwSnZiMnhsWVc1OVhHNGdJQ0FxTDF4dUlDQmpiMjUwWVdsdWMwRnVlVTFoZEdOb2FXNW5SV3hsYldWdWRITW9ibTlrWlhNcElIdGNiaUFnSUNCeVpYUjFjbTRnUVhKeVlYa3VhWE5CY25KaGVTaHViMlJsY3lrZ0ppWWdibTlrWlhNdWMyOXRaU2dvYm05a1pTa2dQVDRnZEdocGN5NWpiMjUwWVdsdWMwMWhkR05vYVc1blJXeGxiV1Z1ZENodWIyUmxLU2s3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1YyaGxkR2hsY2lCdmNpQnViM1FnWVNCbmFYWmxiaUJ5WldGamRDQmxiR1Z0Wlc1MElHVjRhWE4wY3lCcGJpQjBhR1VnY21WdVpHVnlJSFJ5WldVdVhHNGdJQ0FxWEc0Z0lDQXFJRVY0WVcxd2JHVTZYRzRnSUNBcUlHQmdZRnh1SUNBZ0tpQmpiMjV6ZENCM2NtRndjR1Z5SUQwZ2MyaGhiR3h2ZHlnOFRYbERiMjF3YjI1bGJuUWdMejRwTzF4dUlDQWdLaUJsZUhCbFkzUW9kM0poY0hCbGNpNWpiMjUwWVdsdWN5ZzhaR2wySUdOc1lYTnpUbUZ0WlQxY0ltWnZieUJpWVhKY0lpQXZQaWtwTG5SdkxtVnhkV0ZzS0hSeWRXVXBPMXh1SUNBZ0tpQmdZR0JjYmlBZ0lDcGNiaUFnSUNvZ1FIQmhjbUZ0SUh0U1pXRmpkRVZzWlcxbGJuUjlJRzV2WkdWY2JpQWdJQ29nUUhKbGRIVnlibk1nZTBKdmIyeGxZVzU5WEc0Z0lDQXFMMXh1SUNCbGNYVmhiSE1vYm05a1pTa2dlMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbk5wYm1kc1pTZ25aWEYxWVd4ekp5d2dLQ2tnUFQ0Z2JtOWtaVVZ4ZFdGc0tIUm9hWE11WjJWMFRtOWtaVWx1ZEdWeWJtRnNLQ2tzSUc1dlpHVXBLVHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCWGFHVjBhR1Z5SUc5eUlHNXZkQ0JoSUdkcGRtVnVJSEpsWVdOMElHVnNaVzFsYm5RZ2JXRjBZMmhsY3lCMGFHVWdjbVZ1WkdWeUlIUnlaV1V1WEc0Z0lDQXFJRTFoZEdOb0lHbHpJR0poYzJWa0lHOXVJSFJvWlNCbGVIQmxZM1JsWkNCbGJHVnRaVzUwSUdGdVpDQnViM1FnYjI0Z2QzSmhjSEJsY2lCeWIyOTBJRzV2WkdVdVhHNGdJQ0FxSUVsMElIZHBiR3dnWkdWMFpYSnRhVzVsSUdsbUlIUm9aU0IzY21Gd2NHVnlJSEp2YjNRZ2JtOWtaU0JjSW14dmIydHpJR3hwYTJWY0lpQjBhR1VnWlhod1pXTjBaV1JjYmlBZ0lDb2daV3hsYldWdWRDQmllU0JqYUdWamEybHVaeUJwWmlCaGJHd2djSEp2Y0hNZ2IyWWdkR2hsSUdWNGNHVmpkR1ZrSUdWc1pXMWxiblFnWVhKbElIQnlaWE5sYm5SY2JpQWdJQ29nYjI0Z2RHaGxJSGR5WVhCd1pYSWdjbTl2ZENCdWIyUmxJR0Z1WkNCbGNYVmhiSE1nZEc4Z1pXRmphQ0J2ZEdobGNpNWNiaUFnSUNwY2JpQWdJQ29nUlhoaGJYQnNaVHBjYmlBZ0lDb2dZR0JnWEc0Z0lDQXFJQzh2SUUxNVEyOXRjRzl1Wlc1MElHOTFkSEIxZEhNZ1BHUnBkaUJqYkdGemN6MWNJbVp2YjF3aVBraGxiR3h2UEM5a2FYWStYRzRnSUNBcUlHTnZibk4wSUhkeVlYQndaWElnUFNCemFHRnNiRzkzS0R4TmVVTnZiWEJ2Ym1WdWRDQXZQaWs3WEc0Z0lDQXFJR1Y0Y0dWamRDaDNjbUZ3Y0dWeUxtMWhkR05vWlhORmJHVnRaVzUwS0R4a2FYWStTR1ZzYkc4OEwyUnBkajRwS1M1MGJ5NWxjWFZoYkNoMGNuVmxLVHRjYmlBZ0lDb2dZR0JnWEc0Z0lDQXFYRzRnSUNBcUlFQndZWEpoYlNCN1VtVmhZM1JGYkdWdFpXNTBmU0J1YjJSbFhHNGdJQ0FxSUVCeVpYUjFjbTV6SUh0Q2IyOXNaV0Z1ZlZ4dUlDQWdLaTljYmlBZ2JXRjBZMmhsYzBWc1pXMWxiblFvYm05a1pTa2dlMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbk5wYm1kc1pTZ25iV0YwWTJobGMwVnNaVzFsYm5RbkxDQW9LU0E5UGlCN1hHNGdJQ0FnSUNCamIyNXpkQ0JoWkdGd2RHVnlJRDBnWjJWMFFXUmhjSFJsY2loMGFHbHpXMDlRVkVsUFRsTmRLVHRjYmlBZ0lDQWdJR052Ym5OMElISnpkRTV2WkdVZ1BTQmhaR0Z3ZEdWeUxtVnNaVzFsYm5SVWIwNXZaR1VvYm05a1pTazdYRzRnSUNBZ0lDQnlaWFIxY200Z2JtOWtaVTFoZEdOb1pYTW9jbk4wVG05a1pTd2dkR2hwY3k1blpYUk9iMlJsU1c1MFpYSnVZV3dvS1N3Z0tHRXNJR0lwSUQwK0lHRWdQRDBnWWlrN1hHNGdJQ0FnZlNrN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dSbWx1WkhNZ1pYWmxjbmtnYm05a1pTQnBiaUIwYUdVZ2NtVnVaR1Z5SUhSeVpXVWdiMllnZEdobElHTjFjbkpsYm5RZ2QzSmhjSEJsY2lCMGFHRjBJRzFoZEdOb1pYTWdkR2hsSUhCeWIzWnBaR1ZrSUhObGJHVmpkRzl5TGx4dUlDQWdLbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UwVnVlbmx0WlZObGJHVmpkRzl5ZlNCelpXeGxZM1J2Y2x4dUlDQWdLaUJBY21WMGRYSnVjeUI3VTJoaGJHeHZkMWR5WVhCd1pYSjlYRzRnSUNBcUwxeHVJQ0JtYVc1a0tITmxiR1ZqZEc5eUtTQjdYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVkM0poY0NoeVpXUjFZMlZVY21WbGMwSjVVMlZzWldOMGIzSW9jMlZzWldOMGIzSXNJSFJvYVhNdVoyVjBUbTlrWlhOSmJuUmxjbTVoYkNncEtTazdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nVW1WMGRYSnVjeUIzYUdWMGFHVnlJRzl5SUc1dmRDQmpkWEp5Wlc1MElHNXZaR1VnYldGMFkyaGxjeUJoSUhCeWIzWnBaR1ZrSUhObGJHVmpkRzl5TGx4dUlDQWdLbHh1SUNBZ0tpQk9UMVJGT2lCallXNGdiMjVzZVNCaVpTQmpZV3hzWldRZ2IyNGdZU0IzY21Gd2NHVnlJRzltSUdFZ2MybHVaMnhsSUc1dlpHVXVYRzRnSUNBcVhHNGdJQ0FxSUVCd1lYSmhiU0I3Ulc1NmVXMWxVMlZzWldOMGIzSjlJSE5sYkdWamRHOXlYRzRnSUNBcUlFQnlaWFIxY201eklIdGliMjlzWldGdWZWeHVJQ0FnS2k5Y2JpQWdhWE1vYzJWc1pXTjBiM0lwSUh0Y2JpQWdJQ0JqYjI1emRDQndjbVZrYVdOaGRHVWdQU0JpZFdsc1pGQnlaV1JwWTJGMFpTaHpaV3hsWTNSdmNpazdYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjMmx1WjJ4bEtDZHBjeWNzSUNodUtTQTlQaUJ3Y21Wa2FXTmhkR1VvYmlrcE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRkpsZEhWeWJuTWdkSEoxWlNCcFppQjBhR1VnWTI5dGNHOXVaVzUwSUhKbGJtUmxjbVZrSUc1dmRHaHBibWNzSUdrdVpTNHNJRzUxYkd3Z2IzSWdabUZzYzJVdVhHNGdJQ0FxWEc0Z0lDQXFJRUJ5WlhSMWNtNXpJSHRpYjI5c1pXRnVmVnh1SUNBZ0tpOWNiaUFnYVhORmJYQjBlVkpsYm1SbGNpZ3BJSHRjYmlBZ0lDQmpiMjV6ZENCdWIyUmxjeUE5SUhSb2FYTXVaMlYwVG05a1pYTkpiblJsY201aGJDZ3BPMXh1WEc0Z0lDQWdjbVYwZFhKdUlHNXZaR1Z6TG1WMlpYSjVLQ2h1S1NBOVBpQnBjMFZ0Y0hSNVZtRnNkV1VvYmlrcE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRkpsZEhWeWJuTWdZU0J1WlhjZ2QzSmhjSEJsY2lCcGJuTjBZVzVqWlNCM2FYUm9JRzl1YkhrZ2RHaGxJRzV2WkdWeklHOW1JSFJvWlNCamRYSnlaVzUwSUhkeVlYQndaWElnYVc1emRHRnVZMlVnZEdoaGRDQnRZWFJqYUZ4dUlDQWdLaUIwYUdVZ2NISnZkbWxrWldRZ2NISmxaR2xqWVhSbElHWjFibU4wYVc5dUxpQlVhR1VnY0hKbFpHbGpZWFJsSUhOb2IzVnNaQ0J5WldObGFYWmxJR0VnZDNKaGNIQmxaQ0J1YjJSbElHRnpJR2wwY3lCbWFYSnpkRnh1SUNBZ0tpQmhjbWQxYldWdWRDNWNiaUFnSUNwY2JpQWdJQ29nUUhCaGNtRnRJSHRHZFc1amRHbHZibjBnY0hKbFpHbGpZWFJsWEc0Z0lDQXFJRUJ5WlhSMWNtNXpJSHRUYUdGc2JHOTNWM0poY0hCbGNuMWNiaUFnSUNvdlhHNGdJR1pwYkhSbGNsZG9aWEpsS0hCeVpXUnBZMkYwWlNrZ2UxeHVJQ0FnSUhKbGRIVnliaUJtYVd4MFpYSlhhR1Z5WlZWdWQzSmhjSEJsWkNoMGFHbHpMQ0FvYmlrZ1BUNGdjSEpsWkdsallYUmxLSFJvYVhNdWQzSmhjQ2h1S1NrcE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRkpsZEhWeWJuTWdZU0J1WlhjZ2QzSmhjSEJsY2lCcGJuTjBZVzVqWlNCM2FYUm9JRzl1YkhrZ2RHaGxJRzV2WkdWeklHOW1JSFJvWlNCamRYSnlaVzUwSUhkeVlYQndaWElnYVc1emRHRnVZMlVnZEdoaGRDQnRZWFJqYUZ4dUlDQWdLaUIwYUdVZ2NISnZkbWxrWldRZ2MyVnNaV04wYjNJdVhHNGdJQ0FxWEc0Z0lDQXFJRUJ3WVhKaGJTQjdSVzU2ZVcxbFUyVnNaV04wYjNKOUlITmxiR1ZqZEc5eVhHNGdJQ0FxSUVCeVpYUjFjbTV6SUh0VGFHRnNiRzkzVjNKaGNIQmxjbjFjYmlBZ0lDb3ZYRzRnSUdacGJIUmxjaWh6Wld4bFkzUnZjaWtnZTF4dUlDQWdJR052Ym5OMElIQnlaV1JwWTJGMFpTQTlJR0oxYVd4a1VISmxaR2xqWVhSbEtITmxiR1ZqZEc5eUtUdGNiaUFnSUNCeVpYUjFjbTRnWm1sc2RHVnlWMmhsY21WVmJuZHlZWEJ3WldRb2RHaHBjeXdnY0hKbFpHbGpZWFJsS1R0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlNaWFIxY201eklHRWdibVYzSUhkeVlYQndaWElnYVc1emRHRnVZMlVnZDJsMGFDQnZibXg1SUhSb1pTQnViMlJsY3lCdlppQjBhR1VnWTNWeWNtVnVkQ0IzY21Gd2NHVnlJSFJvWVhRZ1pHbGtJRzV2ZENCdFlYUmphRnh1SUNBZ0tpQjBhR1VnY0hKdmRtbGtaV1FnYzJWc1pXTjBiM0l1SUVWemMyVnVkR2xoYkd4NUlIUm9aU0JwYm5abGNuTmxJRzltSUdCbWFXeDBaWEpnTGx4dUlDQWdLbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UwVnVlbmx0WlZObGJHVmpkRzl5ZlNCelpXeGxZM1J2Y2x4dUlDQWdLaUJBY21WMGRYSnVjeUI3VTJoaGJHeHZkMWR5WVhCd1pYSjlYRzRnSUNBcUwxeHVJQ0J1YjNRb2MyVnNaV04wYjNJcElIdGNiaUFnSUNCamIyNXpkQ0J3Y21Wa2FXTmhkR1VnUFNCaWRXbHNaRkJ5WldScFkyRjBaU2h6Wld4bFkzUnZjaWs3WEc0Z0lDQWdjbVYwZFhKdUlHWnBiSFJsY2xkb1pYSmxWVzUzY21Gd2NHVmtLSFJvYVhNc0lDaHVLU0E5UGlBaGNISmxaR2xqWVhSbEtHNHBLVHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCU1pYUjFjbTV6SUdFZ2MzUnlhVzVuSUc5bUlIUm9aU0J5Wlc1a1pYSmxaQ0IwWlhoMElHOW1JSFJvWlNCamRYSnlaVzUwSUhKbGJtUmxjaUIwY21WbExpQWdWR2hwY3lCbWRXNWpkR2x2YmlCemFHOTFiR1FnWW1WY2JpQWdJQ29nYkc5dmEyVmtJR0YwSUhkcGRHZ2djMnRsY0hScFkybHpiU0JwWmlCaVpXbHVaeUIxYzJWa0lIUnZJSFJsYzNRZ2QyaGhkQ0IwYUdVZ1lXTjBkV0ZzSUVoVVRVd2diM1YwY0hWMElHOW1JSFJvWlNCamIyMXdiMjVsYm5SY2JpQWdJQ29nZDJsc2JDQmlaUzRnU1dZZ2RHaGhkQ0JwY3lCM2FHRjBJSGx2ZFNCM2IzVnNaQ0JzYVd0bElIUnZJSFJsYzNRc0lIVnpaU0JsYm5wNWJXVW5jeUJnY21WdVpHVnlZQ0JtZFc1amRHbHZiaUJwYm5OMFpXRmtMbHh1SUNBZ0tseHVJQ0FnS2lCT1QxUkZPaUJqWVc0Z2IyNXNlU0JpWlNCallXeHNaV1FnYjI0Z1lTQjNjbUZ3Y0dWeUlHOW1JR0VnYzJsdVoyeGxJRzV2WkdVdVhHNGdJQ0FxWEc0Z0lDQXFJRUJ5WlhSMWNtNXpJSHRUZEhKcGJtZDlYRzRnSUNBcUwxeHVJQ0IwWlhoMEtDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbk5wYm1kc1pTZ25kR1Y0ZENjc0lHZGxkRlJsZUhSR2NtOXRUbTlrWlNrN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dVbVYwZFhKdWN5QjBhR1VnU0ZSTlRDQnZaaUIwYUdVZ2JtOWtaUzVjYmlBZ0lDcGNiaUFnSUNvZ1RrOVVSVG9nWTJGdUlHOXViSGtnWW1VZ1kyRnNiR1ZrSUc5dUlHRWdkM0poY0hCbGNpQnZaaUJoSUhOcGJtZHNaU0J1YjJSbExseHVJQ0FnS2x4dUlDQWdLaUJBY21WMGRYSnVjeUI3VTNSeWFXNW5mVnh1SUNBZ0tpOWNiaUFnYUhSdGJDZ3BJSHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTV6YVc1bmJHVW9KMmgwYld3bkxDQW9iaWtnUFQ0Z2UxeHVJQ0FnSUNBZ2FXWWdLSFJvYVhNdWRIbHdaU2dwSUQwOVBTQnVkV3hzS1NCeVpYUjFjbTRnYm5Wc2JEdGNiaUFnSUNBZ0lHTnZibk4wSUdGa1lYQjBaWElnUFNCblpYUkJaR0Z3ZEdWeUtIUm9hWE5iVDFCVVNVOU9VMTBwTzF4dUlDQWdJQ0FnWTI5dWMzUWdjbVZ1WkdWeVpYSWdQU0JoWkdGd2RHVnlMbU55WldGMFpWSmxibVJsY21WeUtIc2dMaTR1ZEdocGMxdFBVRlJKVDA1VFhTd2diVzlrWlRvZ0ozTjBjbWx1WnljZ2ZTazdYRzRnSUNBZ0lDQnlaWFIxY200Z2NtVnVaR1Z5WlhJdWNtVnVaR1Z5S0dGa1lYQjBaWEl1Ym05a1pWUnZSV3hsYldWdWRDaHVLU2s3WEc0Z0lDQWdmU2s3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1VtVjBkWEp1Y3lCMGFHVWdZM1Z5Y21WdWRDQnViMlJsSUhKbGJtUmxjbVZrSUhSdklFaFVUVXdnWVc1a0lIZHlZWEJ3WldRZ2FXNGdZU0JEYUdWbGNtbHZWM0poY0hCbGNpNWNiaUFnSUNwY2JpQWdJQ29nVGs5VVJUb2dZMkZ1SUc5dWJIa2dZbVVnWTJGc2JHVmtJRzl1SUdFZ2QzSmhjSEJsY2lCdlppQmhJSE5wYm1kc1pTQnViMlJsTGx4dUlDQWdLbHh1SUNBZ0tpQkFjbVYwZFhKdWN5QjdRMmhsWlhKcGIxZHlZWEJ3WlhKOVhHNGdJQ0FxTDF4dUlDQnlaVzVrWlhJb0tTQjdYRzRnSUNBZ1kyOXVjM1FnYUhSdGJDQTlJSFJvYVhNdWFIUnRiQ2dwTzF4dUlDQWdJSEpsZEhWeWJpQnNiMkZrUTJobFpYSnBiMUp2YjNRb2FIUnRiQ2s3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1ZYTmxaQ0IwYnlCemFXMTFiR0YwWlNCbGRtVnVkSE11SUZCaGMzTWdZVzRnWlhabGJuUnVZVzFsSUdGdVpDQW9iM0IwYVc5dVlXeHNlU2tnWlhabGJuUWdZWEpuZFcxbGJuUnpMaUJVYUdseklHMWxkR2h2WkNCdlpseHVJQ0FnS2lCMFpYTjBhVzVuSUdWMlpXNTBjeUJ6YUc5MWJHUWdZbVVnYldWMElIZHBkR2dnYzI5dFpTQnphMlZ3ZEdsamFYTnRMbHh1SUNBZ0tseHVJQ0FnS2lCQWNHRnlZVzBnZTFOMGNtbHVaMzBnWlhabGJuUmNiaUFnSUNvZ1FIQmhjbUZ0SUh0QmNuSmhlWDBnWVhKbmMxeHVJQ0FnS2lCQWNtVjBkWEp1Y3lCN1UyaGhiR3h2ZDFkeVlYQndaWEo5WEc0Z0lDQXFMMXh1SUNCemFXMTFiR0YwWlNobGRtVnVkQ3dnTGk0dVlYSm5jeWtnZTF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG5OcGJtZHNaU2duYzJsdGRXeGhkR1VuTENBb2Jpa2dQVDRnZTF4dUlDQWdJQ0FnZEdocGMxdFNSVTVFUlZKRlVsMHVjMmx0ZFd4aGRHVkZkbVZ1ZENodUxDQmxkbVZ1ZEN3Z0xpNHVZWEpuY3lrN1hHNGdJQ0FnSUNCMGFHbHpXMUpQVDFSZExuVndaR0YwWlNncE8xeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTTdYRzRnSUNBZ2ZTazdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nVlhObFpDQjBieUJ6YVcxMWJHRjBaU0IwYUhKdmQybHVaeUJoSUhKbGJtUmxjbWx1WnlCbGNuSnZjaTRnVUdGemN5QmhiaUJsY25KdmNpQjBieUIwYUhKdmR5NWNiaUFnSUNwY2JpQWdJQ29nUUhCaGNtRnRJSHRUZEhKcGJtZDlJR1Z5Y205eVhHNGdJQ0FxSUVCeVpYUjFjbTV6SUh0VGFHRnNiRzkzVjNKaGNIQmxjbjFjYmlBZ0lDb3ZYRzRnSUhOcGJYVnNZWFJsUlhKeWIzSW9aWEp5YjNJcElIdGNiaUFnSUNBdkx5QnBiaUJ6YUdGc2JHOTNMQ0IwYUdVZ1hDSnliMjkwWENJZ2FYTWdkR2hsSUZ3aWNtVnVaR1Z5WldSY0lpQjBhR2x1Wnk1Y2JseHVJQ0FnSUhKbGRIVnliaUIwYUdsekxuTnBibWRzWlNnbmMybHRkV3hoZEdWRmNuSnZjaWNzSUNoMGFHbHpUbTlrWlNrZ1BUNGdlMXh1SUNBZ0lDQWdhV1lnS0hSb2FYTk9iMlJsTG01dlpHVlVlWEJsSUQwOVBTQW5hRzl6ZENjcElIdGNiaUFnSUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRlI1Y0dWRmNuSnZjaWduVTJoaGJHeHZkMWR5WVhCd1pYSTZPbk5wYlhWc1lYUmxSWEp5YjNJb0tTQmpZVzRnYjI1c2VTQmlaU0JqWVd4c1pXUWdiMjRnWTNWemRHOXRJR052YlhCdmJtVnVkSE1uS1R0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ1kyOXVjM1FnY21WdVpHVnlaWElnUFNCMGFHbHpXMUpGVGtSRlVrVlNYVHRjYmlBZ0lDQWdJR2xtSUNoMGVYQmxiMllnY21WdVpHVnlaWEl1YzJsdGRXeGhkR1ZGY25KdmNpQWhQVDBnSjJaMWJtTjBhVzl1SnlrZ2UxeHVJQ0FnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dWSGx3WlVWeWNtOXlLQ2Q1YjNWeUlHRmtZWEIwWlhJZ1pHOWxjeUJ1YjNRZ2MzVndjRzl5ZENCZ2MybHRkV3hoZEdWRmNuSnZjbUF1SUZSeWVTQjFjR2R5WVdScGJtY2dhWFFoSnlrN1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lHTnZibk4wSUhKdmIzUk9iMlJsSUQwZ1oyVjBVbTl2ZEU1dlpHVkpiblJsY201aGJDaDBhR2x6S1R0Y2JpQWdJQ0FnSUdOdmJuTjBJRzV2WkdWSWFXVnlZWEpqYUhrZ1BTQmJkR2hwYzA1dlpHVmRMbU52Ym1OaGRDaHViMlJsVUdGeVpXNTBjeWgwYUdsekxDQjBhR2x6VG05a1pTa3BPMXh1SUNBZ0lDQWdjbVZ1WkdWeVpYSXVjMmx0ZFd4aGRHVkZjbkp2Y2lodWIyUmxTR2xsY21GeVkyaDVMQ0J5YjI5MFRtOWtaU3dnWlhKeWIzSXBPMXh1WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3p0Y2JpQWdJQ0I5S1R0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlNaWFIxY201eklIUm9aU0J3Y205d2N5Qm9ZWE5vSUdadmNpQjBhR1VnWTNWeWNtVnVkQ0J1YjJSbElHOW1JSFJvWlNCM2NtRndjR1Z5TGx4dUlDQWdLbHh1SUNBZ0tpQk9UMVJGT2lCallXNGdiMjVzZVNCaVpTQmpZV3hzWldRZ2IyNGdZU0IzY21Gd2NHVnlJRzltSUdFZ2MybHVaMnhsSUc1dlpHVXVYRzRnSUNBcVhHNGdJQ0FxSUVCeVpYUjFjbTV6SUh0UFltcGxZM1I5WEc0Z0lDQXFMMXh1SUNCd2NtOXdjeWdwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1emFXNW5iR1VvSjNCeWIzQnpKeXdnY0hKdmNITlBaazV2WkdVcE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRkpsZEhWeWJuTWdkR2hsSUhOMFlYUmxJR2hoYzJnZ1ptOXlJSFJvWlNCeWIyOTBJRzV2WkdVZ2IyWWdkR2hsSUhkeVlYQndaWEl1SUU5d2RHbHZibUZzYkhrZ2NHRnpjeUJwYmlCaElIQnliM0FnYm1GdFpTQmhibVFnYVhSY2JpQWdJQ29nZDJsc2JDQnlaWFIxY200Z2FuVnpkQ0IwYUdGMElIWmhiSFZsTGx4dUlDQWdLbHh1SUNBZ0tpQk9UMVJGT2lCallXNGdiMjVzZVNCaVpTQmpZV3hzWldRZ2IyNGdZU0IzY21Gd2NHVnlJRzltSUdFZ2MybHVaMnhsSUc1dlpHVXVYRzRnSUNBcVhHNGdJQ0FxSUVCd1lYSmhiU0I3VTNSeWFXNW5mU0J1WVcxbElDaHZjSFJwYjI1aGJDbGNiaUFnSUNvZ1FISmxkSFZ5Ym5NZ2V5cDlYRzRnSUNBcUwxeHVJQ0J6ZEdGMFpTaHVZVzFsS1NCN1hHNGdJQ0FnYVdZZ0tIUm9hWE5iVWs5UFZGMGdJVDA5SUhSb2FYTXBJSHRjYmlBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpZ25VMmhoYkd4dmQxZHlZWEJ3WlhJNk9uTjBZWFJsS0NrZ1kyRnVJRzl1YkhrZ1ltVWdZMkZzYkdWa0lHOXVJSFJvWlNCeWIyOTBKeWs3WEc0Z0lDQWdmVnh1SUNBZ0lHbG1JQ2gwYUdsekxtbHVjM1JoYm1ObEtDa2dQVDA5SUc1MWJHd2dmSHdnZEdocGMxdFNSVTVFUlZKRlVsMHVaMlYwVG05a1pTZ3BMbTV2WkdWVWVYQmxJQ0U5UFNBblkyeGhjM01uS1NCN1hHNGdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjFOb1lXeHNiM2RYY21Gd2NHVnlPanB6ZEdGMFpTZ3BJR05oYmlCdmJteDVJR0psSUdOaGJHeGxaQ0J2YmlCamJHRnpjeUJqYjIxd2IyNWxiblJ6SnlrN1hHNGdJQ0FnZlZ4dUlDQWdJR052Ym5OMElGOXpkR0YwWlNBOUlIUm9hWE11YzJsdVoyeGxLQ2R6ZEdGMFpTY3NJQ2dwSUQwK0lIUm9hWE11YVc1emRHRnVZMlVvS1M1emRHRjBaU2s3WEc0Z0lDQWdhV1lnS0hSNWNHVnZaaUJ1WVcxbElDRTlQU0FuZFc1a1pXWnBibVZrSnlrZ2UxeHVJQ0FnSUNBZ2FXWWdLRjl6ZEdGMFpTQTlQU0J1ZFd4c0tTQjdYRzRnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJVZVhCbFJYSnliM0lvWUZOb1lXeHNiM2RYY21Gd2NHVnlPanB6ZEdGMFpTaGNJaVI3Ym1GdFpYMWNJaWtnY21WeGRXbHlaWE1nZEdoaGRDQmNYR0J6ZEdGMFpWeGNZQ0J1YjNRZ1ltVWdYRnhnYm5Wc2JGeGNZQ0J2Y2lCY1hHQjFibVJsWm1sdVpXUmNYR0JnS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUhKbGRIVnliaUJmYzNSaGRHVmJibUZ0WlYwN1hHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQmZjM1JoZEdVN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dVbVYwZFhKdWN5QjBhR1VnWTI5dWRHVjRkQ0JvWVhOb0lHWnZjaUIwYUdVZ2NtOXZkQ0J1YjJSbElHOW1JSFJvWlNCM2NtRndjR1Z5TGx4dUlDQWdLaUJQY0hScGIyNWhiR3g1SUhCaGMzTWdhVzRnWVNCd2NtOXdJRzVoYldVZ1lXNWtJR2wwSUhkcGJHd2djbVYwZFhKdUlHcDFjM1FnZEdoaGRDQjJZV3gxWlM1Y2JpQWdJQ3BjYmlBZ0lDb2dUazlVUlRvZ1kyRnVJRzl1YkhrZ1ltVWdZMkZzYkdWa0lHOXVJR0VnZDNKaGNIQmxjaUJ2WmlCaElITnBibWRzWlNCdWIyUmxMbHh1SUNBZ0tseHVJQ0FnS2lCQWNHRnlZVzBnZTFOMGNtbHVaMzBnYm1GdFpTQW9iM0IwYVc5dVlXd3BYRzRnSUNBcUlFQnlaWFIxY201eklIc3FmVnh1SUNBZ0tpOWNiaUFnWTI5dWRHVjRkQ2h1WVcxbEtTQjdYRzRnSUNBZ2FXWWdLSFJvYVhOYlVrOVBWRjBnSVQwOUlIUm9hWE1wSUh0Y2JpQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWduVTJoaGJHeHZkMWR5WVhCd1pYSTZPbU52Ym5SbGVIUW9LU0JqWVc0Z2IyNXNlU0JpWlNCallXeHNaV1FnYjI0Z2RHaGxJSEp2YjNRbktUdGNiaUFnSUNCOVhHNGdJQ0FnYVdZZ0tDRjBhR2x6VzA5UVZFbFBUbE5kTG1OdmJuUmxlSFFwSUh0Y2JpQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWduVTJoaGJHeHZkMWR5WVhCd1pYSTZPbU52Ym5SbGVIUW9LU0JqWVc0Z2IyNXNlU0JpWlNCallXeHNaV1FnYjI0Z1lTQjNjbUZ3Y0dWeUlIUm9ZWFFnZDJGeklHOXlhV2RwYm1Gc2JIa2djR0Z6YzJWa0lHRWdZMjl1ZEdWNGRDQnZjSFJwYjI0bktUdGNiaUFnSUNCOVhHNGdJQ0FnYVdZZ0tIUm9hWE11YVc1emRHRnVZMlVvS1NBOVBUMGdiblZzYkNrZ2UxeHVJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NkVGFHRnNiRzkzVjNKaGNIQmxjam82WTI5dWRHVjRkQ2dwSUdOaGJpQnZibXg1SUdKbElHTmhiR3hsWkNCdmJpQjNjbUZ3Y0dWa0lHNXZaR1Z6SUhSb1lYUWdhR0YyWlNCaElHNXZiaTF1ZFd4c0lHbHVjM1JoYm1ObEp5azdYRzRnSUNBZ2ZWeHVJQ0FnSUdOdmJuTjBJRjlqYjI1MFpYaDBJRDBnZEdocGN5NXphVzVuYkdVb0oyTnZiblJsZUhRbkxDQW9LU0E5UGlCMGFHbHpMbWx1YzNSaGJtTmxLQ2t1WTI5dWRHVjRkQ2s3WEc0Z0lDQWdhV1lnS0c1aGJXVXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQmZZMjl1ZEdWNGRGdHVZVzFsWFR0Y2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlGOWpiMjUwWlhoME8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRkpsZEhWeWJuTWdZU0J1WlhjZ2QzSmhjSEJsY2lCM2FYUm9JR0ZzYkNCdlppQjBhR1VnWTJocGJHUnlaVzRnYjJZZ2RHaGxJR04xY25KbGJuUWdkM0poY0hCbGNpNWNiaUFnSUNwY2JpQWdJQ29nUUhCaGNtRnRJSHRGYm5wNWJXVlRaV3hsWTNSdmNuMGdXM05sYkdWamRHOXlYVnh1SUNBZ0tpQkFjbVYwZFhKdWN5QjdVMmhoYkd4dmQxZHlZWEJ3WlhKOVhHNGdJQ0FxTDF4dUlDQmphR2xzWkhKbGJpaHpaV3hsWTNSdmNpa2dlMXh1SUNBZ0lHTnZibk4wSUdGc2JFTm9hV3hrY21WdUlEMGdkR2hwY3k1bWJHRjBUV0Z3S0NodUtTQTlQaUJqYUdsc1pISmxiazltVG05a1pTaHVMbWRsZEU1dlpHVkpiblJsY201aGJDZ3BLU2s3WEc0Z0lDQWdjbVYwZFhKdUlITmxiR1ZqZEc5eUlEOGdZV3hzUTJocGJHUnlaVzR1Wm1sc2RHVnlLSE5sYkdWamRHOXlLU0E2SUdGc2JFTm9hV3hrY21WdU8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRkpsZEhWeWJuTWdZU0J1WlhjZ2QzSmhjSEJsY2lCM2FYUm9JR0VnYzNCbFkybG1hV01nWTJocGJHUmNiaUFnSUNwY2JpQWdJQ29nUUhCaGNtRnRJSHRPZFcxaVpYSjlJRnRwYm1SbGVGMWNiaUFnSUNvZ1FISmxkSFZ5Ym5NZ2UxTm9ZV3hzYjNkWGNtRndjR1Z5ZlZ4dUlDQWdLaTljYmlBZ1kyaHBiR1JCZENocGJtUmxlQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG5OcGJtZHNaU2duWTJocGJHUkJkQ2NzSUNncElEMCtJSFJvYVhNdVkyaHBiR1J5Wlc0b0tTNWhkQ2hwYm1SbGVDa3BPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUZKbGRIVnlibk1nWVNCM2NtRndjR1Z5SUdGeWIzVnVaQ0JoYkd3Z2IyWWdkR2hsSUhCaGNtVnVkSE12WVc1alpYTjBiM0p6SUc5bUlIUm9aU0IzY21Gd2NHVnlMaUJFYjJWeklHNXZkQ0JwYm1Oc2RXUmxJSFJvWlNCdWIyUmxYRzRnSUNBcUlHbHVJSFJvWlNCamRYSnlaVzUwSUhkeVlYQndaWEl1WEc0Z0lDQXFYRzRnSUNBcUlFNVBWRVU2SUdOaGJpQnZibXg1SUdKbElHTmhiR3hsWkNCdmJpQmhJSGR5WVhCd1pYSWdiMllnWVNCemFXNW5iR1VnYm05a1pTNWNiaUFnSUNwY2JpQWdJQ29nUUhCaGNtRnRJSHRGYm5wNWJXVlRaV3hsWTNSdmNuMGdXM05sYkdWamRHOXlYVnh1SUNBZ0tpQkFjbVYwZFhKdWN5QjdVMmhoYkd4dmQxZHlZWEJ3WlhKOVhHNGdJQ0FxTDF4dUlDQndZWEpsYm5SektITmxiR1ZqZEc5eUtTQjdYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjMmx1WjJ4bEtDZHdZWEpsYm5Sekp5d2dLRzRwSUQwK0lIdGNiaUFnSUNBZ0lHTnZibk4wSUdGc2JGQmhjbVZ1ZEhNZ1BTQjBhR2x6TG5keVlYQW9ibTlrWlZCaGNtVnVkSE1vZEdocGN5d2diaWtwTzF4dUlDQWdJQ0FnY21WMGRYSnVJSE5sYkdWamRHOXlJRDhnWVd4c1VHRnlaVzUwY3k1bWFXeDBaWElvYzJWc1pXTjBiM0lwSURvZ1lXeHNVR0Z5Wlc1MGN6dGNiaUFnSUNCOUtUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJTWlhSMWNtNXpJR0VnZDNKaGNIQmxjaUJoY205MWJtUWdkR2hsSUdsdGJXVmthV0YwWlNCd1lYSmxiblFnYjJZZ2RHaGxJR04xY25KbGJuUWdibTlrWlM1Y2JpQWdJQ3BjYmlBZ0lDb2dRSEpsZEhWeWJuTWdlMU5vWVd4c2IzZFhjbUZ3Y0dWeWZWeHVJQ0FnS2k5Y2JpQWdjR0Z5Wlc1MEtDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbVpzWVhSTllYQW9LRzRwSUQwK0lGdHVMbkJoY21WdWRITW9LUzVuWlhRb01DbGRLVHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2x4dUlDQWdLaUJBY0dGeVlXMGdlMFZ1ZW5sdFpWTmxiR1ZqZEc5eWZTQnpaV3hsWTNSdmNseHVJQ0FnS2lCQWNtVjBkWEp1Y3lCN1UyaGhiR3h2ZDFkeVlYQndaWEo5WEc0Z0lDQXFMMXh1SUNCamJHOXpaWE4wS0hObGJHVmpkRzl5S1NCN1hHNGdJQ0FnYVdZZ0tIUm9hWE11YVhNb2MyVnNaV04wYjNJcEtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2RHaHBjenRjYmlBZ0lDQjlYRzRnSUNBZ1kyOXVjM1FnYldGMFkyaHBibWRCYm1ObGMzUnZjbk1nUFNCMGFHbHpMbkJoY21WdWRITW9LUzVtYVd4MFpYSW9jMlZzWldOMGIzSXBPMXh1SUNBZ0lISmxkSFZ5YmlCdFlYUmphR2x1WjBGdVkyVnpkRzl5Y3k1c1pXNW5kR2dnUGlBd0lEOGdiV0YwWTJocGJtZEJibU5sYzNSdmNuTXVabWx5YzNRb0tTQTZJSFJvYVhNdVptbHVaRmRvWlhKbEtDZ3BJRDArSUdaaGJITmxLVHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCVGFHRnNiRzkzSUhKbGJtUmxjbk1nZEdobElHTjFjbkpsYm5RZ2JtOWtaU0JoYm1RZ2NtVjBkWEp1Y3lCaElITm9ZV3hzYjNjZ2QzSmhjSEJsY2lCaGNtOTFibVFnYVhRdVhHNGdJQ0FxWEc0Z0lDQXFJRTVQVkVVNklHTmhiaUJ2Ym14NUlHSmxJR05oYkd4bFpDQnZiaUIzY21Gd2NHVnlJRzltSUdFZ2MybHVaMnhsSUc1dlpHVXVYRzRnSUNBcVhHNGdJQ0FxSUVCd1lYSmhiU0I3VDJKcVpXTjBmU0J2Y0hScGIyNXpYRzRnSUNBcUlFQnlaWFIxY201eklIdFRhR0ZzYkc5M1YzSmhjSEJsY24xY2JpQWdJQ292WEc0Z0lITm9ZV3hzYjNjb2IzQjBhVzl1Y3lBOUlIdDlLU0I3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11YzJsdVoyeGxLQ2R6YUdGc2JHOTNKeXdnS0c0cElEMCtJSHRjYmlBZ0lDQWdJR052Ym5OMElHTm9hV3hrVDNCMGFXOXVjeUE5SUcxaGEyVkpibWhsY21sMFpXUkRhR2xzWkU5d2RHbHZibk1vZEdocGN5d2diM0IwYVc5dWN5azdYRzRnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTUzY21Gd0tHZGxkRUZrWVhCMFpYSW9kR2hwYzF0UFVGUkpUMDVUWFNrdWJtOWtaVlJ2Uld4bGJXVnVkQ2h1S1N3Z2JuVnNiQ3dnWTJocGJHUlBjSFJwYjI1ektUdGNiaUFnSUNCOUtUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJTWlhSMWNtNXpJSFJvWlNCMllXeDFaU0J2WmlCd2NtOXdJSGRwZEdnZ2RHaGxJR2RwZG1WdUlHNWhiV1VnYjJZZ2RHaGxJR04xY25KbGJuUWdibTlrWlM1Y2JpQWdJQ3BjYmlBZ0lDb2dRSEJoY21GdElIQnliM0JPWVcxbFhHNGdJQ0FxSUVCeVpYUjFjbTV6SUhzcWZWeHVJQ0FnS2k5Y2JpQWdjSEp2Y0Nod2NtOXdUbUZ0WlNrZ2UxeHVJQ0FnSUhKbGRIVnliaUIwYUdsekxuQnliM0J6S0NsYmNISnZjRTVoYldWZE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRlZ6WldRZ2RHOGdhVzUyYjJ0bElHRWdablZ1WTNScGIyNGdjSEp2Y0M1Y2JpQWdJQ29nVjJsc2JDQnBiblp2YTJVZ1lXNGdablZ1WTNScGIyNGdjSEp2Y0NCaGJtUWdjbVYwZFhKdUlHbDBjeUIyWVd4MVpTNWNiaUFnSUNwY2JpQWdJQ29nUUhCaGNtRnRJSHRUZEhKcGJtZDlJSEJ5YjNCT1lXMWxYRzRnSUNBcUlFQnlaWFIxY201eklIdEJibmw5WEc0Z0lDQXFMMXh1SUNCcGJuWnZhMlVvY0hKdmNFNWhiV1VwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1emFXNW5iR1VvSjJsdWRtOXJaU2NzSUNncElEMCtJSHRjYmlBZ0lDQWdJR052Ym5OMElHaGhibVJzWlhJZ1BTQjBhR2x6TG5CeWIzQW9jSEp2Y0U1aGJXVXBPMXh1SUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUJvWVc1a2JHVnlJQ0U5UFNBblpuVnVZM1JwYjI0bktTQjdYRzRnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJVZVhCbFJYSnliM0lvSjFOb1lXeHNiM2RYY21Gd2NHVnlPanBwYm5admEyVW9LU0J5WlhGMWFYSmxjeUIwYUdVZ2JtRnRaU0J2WmlCaElIQnliM0FnZDJodmMyVWdkbUZzZFdVZ2FYTWdZU0JtZFc1amRHbHZiaWNwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnY21WMGRYSnVJQ2d1TGk1aGNtZHpLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUhKbGMzQnZibk5sSUQwZ2FHRnVaR3hsY2lndUxpNWhjbWR6S1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjMXRTVDA5VVhTNTFjR1JoZEdVb0tUdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlISmxjM0J2Ym5ObE8xeHVJQ0FnSUNBZ2ZUdGNiaUFnSUNCOUtUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJTWlhSMWNtNXpJR0VnZDNKaGNIQmxjaUJ2WmlCMGFHVWdibTlrWlNCeVpXNWtaWEpsWkNCaWVTQjBhR1VnY0hKdmRtbGtaV1FnY21WdVpHVnlJSEJ5YjNBdVhHNGdJQ0FxWEc0Z0lDQXFJRUJ3WVhKaGJTQjdVM1J5YVc1bmZTQndjbTl3VG1GdFpWeHVJQ0FnS2lCQWNtVjBkWEp1Y3lCN1JuVnVZM1JwYjI1OVhHNGdJQ0FxTDF4dUlDQnlaVzVrWlhKUWNtOXdLSEJ5YjNCT1lXMWxLU0I3WEc0Z0lDQWdZMjl1YzNRZ1lXUmhjSFJsY2lBOUlHZGxkRUZrWVhCMFpYSW9kR2hwYzF0UFVGUkpUMDVUWFNrN1hHNGdJQ0FnYVdZZ0tIUjVjR1Z2WmlCaFpHRndkR1Z5TG5keVlYQWdJVDA5SUNkbWRXNWpkR2x2YmljcElIdGNiaUFnSUNBZ0lIUm9jbTkzSUc1bGR5QlNZVzVuWlVWeWNtOXlLQ2Q1YjNWeUlHRmtZWEIwWlhJZ1pHOWxjeUJ1YjNRZ2MzVndjRzl5ZENCZ2QzSmhjR0F1SUZSeWVTQjFjR2R5WVdScGJtY2dhWFFoSnlrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdWMybHVaMnhsS0NkeVpXNWtaWEpRY205d0p5d2dLRzRwSUQwK0lIdGNiaUFnSUNBZ0lHbG1JQ2h1TG01dlpHVlVlWEJsSUQwOVBTQW5hRzl6ZENjcElIdGNiaUFnSUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRlI1Y0dWRmNuSnZjaWduVTJoaGJHeHZkMWR5WVhCd1pYSTZPbkpsYm1SbGNsQnliM0FvS1NCallXNGdiMjVzZVNCaVpTQmpZV3hzWldRZ2IyNGdZM1Z6ZEc5dElHTnZiWEJ2Ym1WdWRITW5LVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJR2xtSUNoMGVYQmxiMllnY0hKdmNFNWhiV1VnSVQwOUlDZHpkSEpwYm1jbktTQjdYRzRnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJVZVhCbFJYSnliM0lvSjFOb1lXeHNiM2RYY21Gd2NHVnlPanB5Wlc1a1pYSlFjbTl3S0NrNklHQndjbTl3VG1GdFpXQWdiWFZ6ZENCaVpTQmhJSE4wY21sdVp5Y3BPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdZMjl1YzNRZ2NISnZjSE1nUFNCMGFHbHpMbkJ5YjNCektDazdYRzRnSUNBZ0lDQnBaaUFvSVdoaGN5aHdjbTl3Y3l3Z2NISnZjRTVoYldVcEtTQjdYRzRnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpaGdVMmhoYkd4dmQxZHlZWEJ3WlhJNk9uSmxibVJsY2xCeWIzQW9LVG9nYm04Z2NISnZjQ0JqWVd4c1pXUWc0b0NjSkh0d2NtOXdUbUZ0WlgzaWdKd2dabTkxYm1SZ0tUdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lHTnZibk4wSUhCeWIzQldZV3gxWlNBOUlIQnliM0J6VzNCeWIzQk9ZVzFsWFR0Y2JpQWdJQ0FnSUdsbUlDaDBlWEJsYjJZZ2NISnZjRlpoYkhWbElDRTlQU0FuWm5WdVkzUnBiMjRuS1NCN1hHNGdJQ0FnSUNBZ0lIUm9jbTkzSUc1bGR5QlVlWEJsUlhKeWIzSW9ZRk5vWVd4c2IzZFhjbUZ3Y0dWeU9qcHlaVzVrWlhKUWNtOXdLQ2s2SUdWNGNHVmpkR1ZrSUhCeWIzQWc0b0NjSkh0d2NtOXdUbUZ0WlgzaWdKd2dkRzhnWTI5dWRHRnBiaUJoSUdaMWJtTjBhVzl1TENCaWRYUWdhWFFnYUc5c1pITWc0b0NjSkh0MGVYQmxiMllnY0hKdmNGWmhiSFZsZmVLQW5HQXBPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0J5WlhSMWNtNGdLQzR1TG1GeVozTXBJRDArSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnWld4bGJXVnVkQ0E5SUhCeWIzQldZV3gxWlNndUxpNWhjbWR6S1R0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnZDNKaGNIQmxaQ0E5SUdGa1lYQjBaWEl1ZDNKaGNDaGxiR1Z0Wlc1MEtUdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11ZDNKaGNDaDNjbUZ3Y0dWa0xDQnVkV3hzTENCMGFHbHpXMDlRVkVsUFRsTmRLVHRjYmlBZ0lDQWdJSDA3WEc0Z0lDQWdmU2s3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1VtVjBkWEp1Y3lCMGFHVWdhMlY1SUdGemMybG5ibVZrSUhSdklIUm9aU0JqZFhKeVpXNTBJRzV2WkdVdVhHNGdJQ0FxWEc0Z0lDQXFJRUJ5WlhSMWNtNXpJSHRUZEhKcGJtZDlYRzRnSUNBcUwxeHVJQ0JyWlhrb0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjMmx1WjJ4bEtDZHJaWGtuTENBb2Jpa2dQVDRnS0c0dWEyVjVJRDA5UFNCMWJtUmxabWx1WldRZ1B5QnVkV3hzSURvZ2JpNXJaWGtwS1R0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlNaWFIxY201eklIUm9aU0IwZVhCbElHOW1JSFJvWlNCamRYSnlaVzUwSUc1dlpHVWdiMllnZEdocGN5QjNjbUZ3Y0dWeUxpQkpaaUJwZENkeklHRWdZMjl0Y0c5emFYUmxJR052YlhCdmJtVnVkQ3dnZEdocGN5QjNhV3hzWEc0Z0lDQXFJR0psSUhSb1pTQmpiMjF3YjI1bGJuUWdZMjl1YzNSeWRXTjBiM0l1SUVsbUlHbDBKM01nWVNCdVlYUnBkbVVnUkU5TklHNXZaR1VzSUdsMElIZHBiR3dnWW1VZ1lTQnpkSEpwYm1jZ2IyWWdkR2hsSUhSaFp5QnVZVzFsTGx4dUlDQWdLaUJKWmlCcGRDZHpJRzUxYkd3c0lHbDBJSGRwYkd3Z1ltVWdiblZzYkM1Y2JpQWdJQ3BjYmlBZ0lDb2dRSEpsZEhWeWJuTWdlMU4wY21sdVozeEdkVzVqZEdsdmJueHVkV3hzZlZ4dUlDQWdLaTljYmlBZ2RIbHdaU2dwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1emFXNW5iR1VvSjNSNWNHVW5MQ0FvYmlrZ1BUNGdkSGx3WlU5bVRtOWtaU2h1S1NrN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dVbVYwZFhKdWN5QjBhR1VnYm1GdFpTQnZaaUIwYUdVZ1kzVnljbVZ1ZENCdWIyUmxJRzltSUhSb2FYTWdkM0poY0hCbGNpNWNiaUFnSUNwY2JpQWdJQ29nU1c0Z2IzSmtaWElnYjJZZ2NISmxZMlZrWlc1alpTQTlQaUIwZVhCbExtUnBjM0JzWVhsT1lXMWxJQzArSUhSNWNHVXVibUZ0WlNBdFBpQjBlWEJsTGx4dUlDQWdLbHh1SUNBZ0tpQkFjbVYwZFhKdWN5QjdVM1J5YVc1bmZWeHVJQ0FnS2k5Y2JpQWdibUZ0WlNncElIdGNiaUFnSUNCamIyNXpkQ0JoWkdGd2RHVnlJRDBnWjJWMFFXUmhjSFJsY2loMGFHbHpXMDlRVkVsUFRsTmRLVHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTV6YVc1bmJHVW9KMjVoYldVbkxDQW9iaWtnUFQ0Z0tGeHVJQ0FnSUNBZ1lXUmhjSFJsY2k1a2FYTndiR0Y1VG1GdFpVOW1UbTlrWlNBL0lHRmtZWEIwWlhJdVpHbHpjR3hoZVU1aGJXVlBaazV2WkdVb2Jpa2dPaUJrYVhOd2JHRjVUbUZ0WlU5bVRtOWtaU2h1S1Z4dUlDQWdJQ2twTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGSmxkSFZ5Ym5NZ2QyaGxkR2hsY2lCdmNpQnViM1FnZEdobElHTjFjbkpsYm5RZ2JtOWtaU0JvWVhNZ2RHaGxJR2RwZG1WdUlHTnNZWE56SUc1aGJXVWdiM0lnYm05MExseHVJQ0FnS2x4dUlDQWdLaUJPVDFSRk9pQmpZVzRnYjI1c2VTQmlaU0JqWVd4c1pXUWdiMjRnWVNCM2NtRndjR1Z5SUc5bUlHRWdjMmx1WjJ4bElHNXZaR1V1WEc0Z0lDQXFYRzRnSUNBcUlFQndZWEpoYlNCamJHRnpjMDVoYldWY2JpQWdJQ29nUUhKbGRIVnlibk1nZTBKdmIyeGxZVzU5WEc0Z0lDQXFMMXh1SUNCb1lYTkRiR0Z6Y3loamJHRnpjMDVoYldVcElIdGNiaUFnSUNCcFppQW9kSGx3Wlc5bUlHTnNZWE56VG1GdFpTQTlQVDBnSjNOMGNtbHVaeWNnSmlZZ1kyeGhjM05PWVcxbExtbHVaR1Y0VDJZb0p5NG5LU0FoUFQwZ0xURXBJSHRjYmlBZ0lDQWdJQzh2SUdWemJHbHVkQzFrYVhOaFlteGxMVzVsZUhRdGJHbHVaU0J1YnkxamIyNXpiMnhsWEc0Z0lDQWdJQ0JqYjI1emIyeGxMbmRoY200b0owbDBJR3h2YjJ0eklHeHBhMlVnZVc5MVhGd25jbVVnWTJGc2JHbHVaeUJnVTJoaGJHeHZkMWR5WVhCd1pYSTZPbWhoYzBOc1lYTnpLQ2xnSUhkcGRHZ2dZU0JEVTFNZ2MyVnNaV04wYjNJdUlHaGhjME5zWVhOektDa2daWGh3WldOMGN5QmhJR05zWVhOeklHNWhiV1VzSUc1dmRDQmhJRU5UVXlCelpXeGxZM1J2Y2k0bktUdGNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdWMybHVaMnhsS0Nkb1lYTkRiR0Z6Y3ljc0lDaHVLU0E5UGlCb1lYTkRiR0Z6YzA1aGJXVW9iaXdnWTJ4aGMzTk9ZVzFsS1NrN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dTWFJsY21GMFpYTWdkR2h5YjNWbmFDQmxZV05vSUc1dlpHVWdiMllnZEdobElHTjFjbkpsYm5RZ2QzSmhjSEJsY2lCaGJtUWdaWGhsWTNWMFpYTWdkR2hsSUhCeWIzWnBaR1ZrSUdaMWJtTjBhVzl1SUhkcGRHZ2dZVnh1SUNBZ0tpQjNjbUZ3Y0dWeUlHRnliM1Z1WkNCMGFHVWdZMjl5Y21WemNHOXVaR2x1WnlCdWIyUmxJSEJoYzNObFpDQnBiaUJoY3lCMGFHVWdabWx5YzNRZ1lYSm5kVzFsYm5RdVhHNGdJQ0FxWEc0Z0lDQXFJRUJ3WVhKaGJTQjdSblZ1WTNScGIyNTlJR1p1WEc0Z0lDQXFJRUJ5WlhSMWNtNXpJSHRUYUdGc2JHOTNWM0poY0hCbGNuMWNiaUFnSUNvdlhHNGdJR1p2Y2tWaFkyZ29abTRwSUh0Y2JpQWdJQ0IwYUdsekxtZGxkRTV2WkdWelNXNTBaWEp1WVd3b0tTNW1iM0pGWVdOb0tDaHVMQ0JwS1NBOVBpQm1iaTVqWVd4c0tIUm9hWE1zSUhSb2FYTXVkM0poY0NodUtTd2dhU2twTzF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFMWhjSE1nZEdobElHTjFjbkpsYm5RZ1lYSnlZWGtnYjJZZ2JtOWtaWE1nZEc4Z1lXNXZkR2hsY2lCaGNuSmhlUzRnUldGamFDQnViMlJsSUdseklIQmhjM05sWkNCcGJpQmhjeUJoSUdCVGFHRnNiRzkzVjNKaGNIQmxjbUJjYmlBZ0lDb2dkRzhnZEdobElHMWhjQ0JtZFc1amRHbHZiaTVjYmlBZ0lDcGNiaUFnSUNvZ1FIQmhjbUZ0SUh0R2RXNWpkR2x2Ym4wZ1ptNWNiaUFnSUNvZ1FISmxkSFZ5Ym5NZ2UwRnljbUY1ZlZ4dUlDQWdLaTljYmlBZ2JXRndLR1p1S1NCN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdVoyVjBUbTlrWlhOSmJuUmxjbTVoYkNncExtMWhjQ2dvYml3Z2FTa2dQVDRnWm00dVkyRnNiQ2gwYUdsekxDQjBhR2x6TG5keVlYQW9iaWtzSUdrcEtUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJTWldSMVkyVnpJSFJvWlNCamRYSnlaVzUwSUdGeWNtRjVJRzltSUc1dlpHVnpJSFJ2SUdFZ2RtRnNkV1V1SUVWaFkyZ2dibTlrWlNCcGN5QndZWE56WldRZ2FXNGdZWE1nWVNCZ1UyaGhiR3h2ZDFkeVlYQndaWEpnWEc0Z0lDQXFJSFJ2SUhSb1pTQnlaV1IxWTJWeUlHWjFibU4wYVc5dUxseHVJQ0FnS2x4dUlDQWdLaUJBY0dGeVlXMGdlMFoxYm1OMGFXOXVmU0JtYmlBdElIUm9aU0J5WldSMVkyVnlJR1oxYm1OMGFXOXVYRzRnSUNBcUlFQndZWEpoYlNCN0tuMGdhVzVwZEdsaGJGWmhiSFZsSUMwZ2RHaGxJR2x1YVhScFlXd2dkbUZzZFdWY2JpQWdJQ29nUUhKbGRIVnlibk1nZXlwOVhHNGdJQ0FxTDF4dUlDQnlaV1IxWTJVb1ptNHNJR2x1YVhScFlXeFdZV3gxWlNBOUlIVnVaR1ZtYVc1bFpDa2dlMXh1SUNBZ0lHbG1JQ2hoY21kMWJXVnVkSE11YkdWdVozUm9JRDRnTVNrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVaMlYwVG05a1pYTkpiblJsY201aGJDZ3BMbkpsWkhWalpTaGNiaUFnSUNBZ0lDQWdLR0ZqWTNWdExDQnVMQ0JwS1NBOVBpQm1iaTVqWVd4c0tIUm9hWE1zSUdGalkzVnRMQ0IwYUdsekxuZHlZWEFvYmlrc0lHa3BMRnh1SUNBZ0lDQWdJQ0JwYm1sMGFXRnNWbUZzZFdVc1hHNGdJQ0FnSUNBcE8xeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1blpYUk9iMlJsYzBsdWRHVnlibUZzS0NrdWNtVmtkV05sS0NoaFkyTjFiU3dnYml3Z2FTa2dQVDRnWm00dVkyRnNiQ2hjYmlBZ0lDQWdJSFJvYVhNc1hHNGdJQ0FnSUNCcElEMDlQU0F4SUQ4Z2RHaHBjeTUzY21Gd0tHRmpZM1Z0S1NBNklHRmpZM1Z0TEZ4dUlDQWdJQ0FnZEdocGN5NTNjbUZ3S0c0cExGeHVJQ0FnSUNBZ2FTeGNiaUFnSUNBcEtUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJTWldSMVkyVnpJSFJvWlNCamRYSnlaVzUwSUdGeWNtRjVJRzltSUc1dlpHVnpJSFJ2SUdGdWIzUm9aWElnWVhKeVlYa3NJR1p5YjIwZ2NtbG5hSFFnZEc4Z2JHVm1kQzRnUldGamFDQnViMlJsSUdseklIQmhjM05sWkZ4dUlDQWdLaUJwYmlCaGN5QmhJR0JUYUdGc2JHOTNWM0poY0hCbGNtQWdkRzhnZEdobElISmxaSFZqWlhJZ1puVnVZM1JwYjI0dVhHNGdJQ0FxWEc0Z0lDQXFJRUJ3WVhKaGJTQjdSblZ1WTNScGIyNTlJR1p1SUMwZ2RHaGxJSEpsWkhWalpYSWdablZ1WTNScGIyNWNiaUFnSUNvZ1FIQmhjbUZ0SUhzcWZTQnBibWwwYVdGc1ZtRnNkV1VnTFNCMGFHVWdhVzVwZEdsaGJDQjJZV3gxWlZ4dUlDQWdLaUJBY21WMGRYSnVjeUI3S24xY2JpQWdJQ292WEc0Z0lISmxaSFZqWlZKcFoyaDBLR1p1TENCcGJtbDBhV0ZzVm1Gc2RXVWdQU0IxYm1SbFptbHVaV1FwSUh0Y2JpQWdJQ0JwWmlBb1lYSm5kVzFsYm5SekxteGxibWQwYUNBK0lERXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1kbGRFNXZaR1Z6U1c1MFpYSnVZV3dvS1M1eVpXUjFZMlZTYVdkb2RDaGNiaUFnSUNBZ0lDQWdLR0ZqWTNWdExDQnVMQ0JwS1NBOVBpQm1iaTVqWVd4c0tIUm9hWE1zSUdGalkzVnRMQ0IwYUdsekxuZHlZWEFvYmlrc0lHa3BMRnh1SUNBZ0lDQWdJQ0JwYm1sMGFXRnNWbUZzZFdVc1hHNGdJQ0FnSUNBcE8xeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1blpYUk9iMlJsYzBsdWRHVnlibUZzS0NrdWNtVmtkV05sVW1sbmFIUW9LR0ZqWTNWdExDQnVMQ0JwS1NBOVBpQm1iaTVqWVd4c0tGeHVJQ0FnSUNBZ2RHaHBjeXhjYmlBZ0lDQWdJR2tnUFQwOUlERWdQeUIwYUdsekxuZHlZWEFvWVdOamRXMHBJRG9nWVdOamRXMHNYRzRnSUNBZ0lDQjBhR2x6TG5keVlYQW9iaWtzWEc0Z0lDQWdJQ0JwTEZ4dUlDQWdJQ2twTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGSmxkSFZ5Ym5NZ1lTQnVaWGNnZDNKaGNIQmxjaUIzYVhSb0lHRWdjM1ZpYzJWMElHOW1JSFJvWlNCdWIyUmxjeUJ2WmlCMGFHVWdiM0pwWjJsdVlXd2dkM0poY0hCbGNpd2dZV05qYjNKa2FXNW5JSFJ2SUhSb1pWeHVJQ0FnS2lCeWRXeGxjeUJ2WmlCZ1FYSnlZWGtqYzJ4cFkyVmdMbHh1SUNBZ0tseHVJQ0FnS2lCQWNHRnlZVzBnZTA1MWJXSmxjbjBnWW1WbmFXNWNiaUFnSUNvZ1FIQmhjbUZ0SUh0T2RXMWlaWEo5SUdWdVpGeHVJQ0FnS2lCQWNtVjBkWEp1Y3lCN1UyaGhiR3h2ZDFkeVlYQndaWEo5WEc0Z0lDQXFMMXh1SUNCemJHbGpaU2hpWldkcGJpd2daVzVrS1NCN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdWQzSmhjQ2gwYUdsekxtZGxkRTV2WkdWelNXNTBaWEp1WVd3b0tTNXpiR2xqWlNoaVpXZHBiaXdnWlc1a0tTazdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nVW1WMGRYSnVjeUIzYUdWMGFHVnlJRzl5SUc1dmRDQmhibmtnYjJZZ2RHaGxJRzV2WkdWeklHbHVJSFJvWlNCM2NtRndjR1Z5SUcxaGRHTm9JSFJvWlNCd2NtOTJhV1JsWkNCelpXeGxZM1J2Y2k1Y2JpQWdJQ3BjYmlBZ0lDb2dRSEJoY21GdElIdEZibnA1YldWVFpXeGxZM1J2Y24wZ2MyVnNaV04wYjNKY2JpQWdJQ29nUUhKbGRIVnlibk1nZTBKdmIyeGxZVzU5WEc0Z0lDQXFMMXh1SUNCemIyMWxLSE5sYkdWamRHOXlLU0I3WEc0Z0lDQWdhV1lnS0hSb2FYTmJVazlQVkYwZ1BUMDlJSFJvYVhNcElIdGNiaUFnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnblUyaGhiR3h2ZDFkeVlYQndaWEk2T25OdmJXVW9LU0JqWVc0Z2JtOTBJR0psSUdOaGJHeGxaQ0J2YmlCMGFHVWdjbTl2ZENjcE8xeHVJQ0FnSUgxY2JpQWdJQ0JqYjI1emRDQndjbVZrYVdOaGRHVWdQU0JpZFdsc1pGQnlaV1JwWTJGMFpTaHpaV3hsWTNSdmNpazdYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVaMlYwVG05a1pYTkpiblJsY201aGJDZ3BMbk52YldVb2NISmxaR2xqWVhSbEtUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJTWlhSMWNtNXpJSGRvWlhSb1pYSWdiM0lnYm05MElHRnVlU0J2WmlCMGFHVWdibTlrWlhNZ2FXNGdkR2hsSUhkeVlYQndaWElnY0dGemN5QjBhR1VnY0hKdmRtbGtaV1FnY0hKbFpHbGpZWFJsSUdaMWJtTjBhVzl1TGx4dUlDQWdLbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UwWjFibU4wYVc5dWZTQndjbVZrYVdOaGRHVmNiaUFnSUNvZ1FISmxkSFZ5Ym5NZ2UwSnZiMnhsWVc1OVhHNGdJQ0FxTDF4dUlDQnpiMjFsVjJobGNtVW9jSEpsWkdsallYUmxLU0I3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11WjJWMFRtOWtaWE5KYm5SbGNtNWhiQ2dwTG5OdmJXVW9LRzRzSUdrcElEMCtJSEJ5WldScFkyRjBaUzVqWVd4c0tIUm9hWE1zSUhSb2FYTXVkM0poY0NodUtTd2dhU2twTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGSmxkSFZ5Ym5NZ2QyaGxkR2hsY2lCdmNpQnViM1FnWVd4c0lHOW1JSFJvWlNCdWIyUmxjeUJwYmlCMGFHVWdkM0poY0hCbGNpQnRZWFJqYUNCMGFHVWdjSEp2ZG1sa1pXUWdjMlZzWldOMGIzSXVYRzRnSUNBcVhHNGdJQ0FxSUVCd1lYSmhiU0I3Ulc1NmVXMWxVMlZzWldOMGIzSjlJSE5sYkdWamRHOXlYRzRnSUNBcUlFQnlaWFIxY201eklIdENiMjlzWldGdWZWeHVJQ0FnS2k5Y2JpQWdaWFpsY25rb2MyVnNaV04wYjNJcElIdGNiaUFnSUNCamIyNXpkQ0J3Y21Wa2FXTmhkR1VnUFNCaWRXbHNaRkJ5WldScFkyRjBaU2h6Wld4bFkzUnZjaWs3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11WjJWMFRtOWtaWE5KYm5SbGNtNWhiQ2dwTG1WMlpYSjVLSEJ5WldScFkyRjBaU2s3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1VtVjBkWEp1Y3lCM2FHVjBhR1Z5SUc5eUlHNXZkQ0JoYm5rZ2IyWWdkR2hsSUc1dlpHVnpJR2x1SUhSb1pTQjNjbUZ3Y0dWeUlIQmhjM01nZEdobElIQnliM1pwWkdWa0lIQnlaV1JwWTJGMFpTQm1kVzVqZEdsdmJpNWNiaUFnSUNwY2JpQWdJQ29nUUhCaGNtRnRJSHRHZFc1amRHbHZibjBnY0hKbFpHbGpZWFJsWEc0Z0lDQXFJRUJ5WlhSMWNtNXpJSHRDYjI5c1pXRnVmVnh1SUNBZ0tpOWNiaUFnWlhabGNubFhhR1Z5WlNod2NtVmthV05oZEdVcElIdGNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NW5aWFJPYjJSbGMwbHVkR1Z5Ym1Gc0tDa3VaWFpsY25rb0tHNHNJR2twSUQwK0lIQnlaV1JwWTJGMFpTNWpZV3hzS0hSb2FYTXNJSFJvYVhNdWQzSmhjQ2h1S1N3Z2FTa3BPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUZWMGFXeHBkSGtnYldWMGFHOWtJSFZ6WldRZ2RHOGdZM0psWVhSbElHNWxkeUIzY21Gd2NHVnljeUIzYVhSb0lHRWdiV0Z3Y0dsdVp5Qm1kVzVqZEdsdmJpQjBhR0YwSUhKbGRIVnlibk1nWVc0Z1lYSnlZWGtnYjJaY2JpQWdJQ29nYm05a1pYTWdhVzRnY21WemNHOXVjMlVnZEc4Z1lTQnphVzVuYkdVZ2JtOWtaU0IzY21Gd2NHVnlMaUJVYUdVZ2NtVjBkWEp1WldRZ2QzSmhjSEJsY2lCcGN5QmhJSE5wYm1kc1pTQjNjbUZ3Y0dWeUlHRnliM1Z1WkZ4dUlDQWdLaUJoYkd3Z2IyWWdkR2hsSUcxaGNIQmxaQ0J1YjJSbGN5Qm1iR0YwZEdWdVpXUWdLR0Z1WkNCa1pTMWtkWEJzYVdOaGRHVmtLUzVjYmlBZ0lDcGNiaUFnSUNvZ1FIQmhjbUZ0SUh0R2RXNWpkR2x2Ym4wZ1ptNWNiaUFnSUNvZ1FISmxkSFZ5Ym5NZ2UxTm9ZV3hzYjNkWGNtRndjR1Z5ZlZ4dUlDQWdLaTljYmlBZ1pteGhkRTFoY0NobWJpa2dlMXh1SUNBZ0lHTnZibk4wSUc1dlpHVnpJRDBnZEdocGN5NW5aWFJPYjJSbGMwbHVkR1Z5Ym1Gc0tDa3ViV0Z3S0NodUxDQnBLU0E5UGlCbWJpNWpZV3hzS0hSb2FYTXNJSFJvYVhNdWQzSmhjQ2h1S1N3Z2FTa3BPMXh1SUNBZ0lHTnZibk4wSUdac1lYUjBaVzVsWkNBOUlHWnNZWFFvYm05a1pYTXNJREVwTzF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG5keVlYQW9abXhoZEhSbGJtVmtMbVpwYkhSbGNpaENiMjlzWldGdUtTazdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nUm1sdVpITWdZV3hzSUc1dlpHVnpJR2x1SUhSb1pTQmpkWEp5Wlc1MElIZHlZWEJ3WlhJZ2JtOWtaWE1uSUhKbGJtUmxjaUIwY21WbGN5QjBhR0YwSUcxaGRHTm9JSFJvWlNCd2NtOTJhV1JsWkNCd2NtVmthV05oZEdWY2JpQWdJQ29nWm5WdVkzUnBiMjR1SUZSb1pTQndjbVZrYVdOaGRHVWdablZ1WTNScGIyNGdkMmxzYkNCeVpXTmxhWFpsSUhSb1pTQnViMlJsY3lCcGJuTnBaR1VnWVNCVGFHRnNiRzkzVjNKaGNIQmxjaUJoY3lCcGRITmNiaUFnSUNvZ1ptbHljM1FnWVhKbmRXMWxiblF1WEc0Z0lDQXFYRzRnSUNBcUlFQndZWEpoYlNCN1JuVnVZM1JwYjI1OUlIQnlaV1JwWTJGMFpWeHVJQ0FnS2lCQWNtVjBkWEp1Y3lCN1UyaGhiR3h2ZDFkeVlYQndaWEo5WEc0Z0lDQXFMMXh1SUNCbWFXNWtWMmhsY21Vb2NISmxaR2xqWVhSbEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUdacGJtUlhhR1Z5WlZWdWQzSmhjSEJsWkNoMGFHbHpMQ0FvYmlrZ1BUNGdlMXh1SUNBZ0lDQWdZMjl1YzNRZ2JtOWtaU0E5SUhSb2FYTXVkM0poY0NodUtUdGNiaUFnSUNBZ0lISmxkSFZ5YmlCdWIyUmxMbXhsYm1kMGFDQStJREFnSmlZZ2NISmxaR2xqWVhSbEtHNXZaR1VwTzF4dUlDQWdJSDBwTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGSmxkSFZ5Ym5NZ2RHaGxJRzV2WkdVZ1lYUWdZU0JuYVhabGJpQnBibVJsZUNCdlppQjBhR1VnWTNWeWNtVnVkQ0IzY21Gd2NHVnlMbHh1SUNBZ0tseHVJQ0FnS2lCQWNHRnlZVzBnYVc1a1pYaGNiaUFnSUNvZ1FISmxkSFZ5Ym5NZ2UxSmxZV04wUld4bGJXVnVkSDFjYmlBZ0lDb3ZYRzRnSUdkbGRDaHBibVJsZUNrZ2UxeHVJQ0FnSUhKbGRIVnliaUIwYUdsekxtZGxkRVZzWlcxbGJuUnpLQ2xiYVc1a1pYaGRPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUZKbGRIVnlibk1nWVNCM2NtRndjR1Z5SUdGeWIzVnVaQ0IwYUdVZ2JtOWtaU0JoZENCaElHZHBkbVZ1SUdsdVpHVjRJRzltSUhSb1pTQmpkWEp5Wlc1MElIZHlZWEJ3WlhJdVhHNGdJQ0FxWEc0Z0lDQXFJRUJ3WVhKaGJTQnBibVJsZUZ4dUlDQWdLaUJBY21WMGRYSnVjeUI3VTJoaGJHeHZkMWR5WVhCd1pYSjlYRzRnSUNBcUwxeHVJQ0JoZENocGJtUmxlQ2tnZTF4dUlDQWdJR052Ym5OMElHNXZaR1Z6SUQwZ2RHaHBjeTVuWlhST2IyUmxjMGx1ZEdWeWJtRnNLQ2s3WEc0Z0lDQWdhV1lnS0dsdVpHVjRJRHdnYm05a1pYTXViR1Z1WjNSb0tTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTUzY21Gd0tHNXZaR1Z6VzJsdVpHVjRYU2s3WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbmR5WVhBb1cxMHBPMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUZKbGRIVnlibk1nWVNCM2NtRndjR1Z5SUdGeWIzVnVaQ0IwYUdVZ1ptbHljM1FnYm05a1pTQnZaaUIwYUdVZ1kzVnljbVZ1ZENCM2NtRndjR1Z5TGx4dUlDQWdLbHh1SUNBZ0tpQkFjbVYwZFhKdWN5QjdVMmhoYkd4dmQxZHlZWEJ3WlhKOVhHNGdJQ0FxTDF4dUlDQm1hWEp6ZENncElIdGNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NWhkQ2d3S1R0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlNaWFIxY201eklHRWdkM0poY0hCbGNpQmhjbTkxYm1RZ2RHaGxJR3hoYzNRZ2JtOWtaU0J2WmlCMGFHVWdZM1Z5Y21WdWRDQjNjbUZ3Y0dWeUxseHVJQ0FnS2x4dUlDQWdLaUJBY21WMGRYSnVjeUI3VTJoaGJHeHZkMWR5WVhCd1pYSjlYRzRnSUNBcUwxeHVJQ0JzWVhOMEtDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbUYwS0hSb2FYTXViR1Z1WjNSb0lDMGdNU2s3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1JHVnNaV2RoZEdWeklIUnZJR1Y0YVhOMGN5Z3BYRzRnSUNBcVhHNGdJQ0FxSUVCeVpYUjFjbTV6SUh0aWIyOXNaV0Z1ZlZ4dUlDQWdLaTljYmlBZ2FYTkZiWEIwZVNncElIdGNiaUFnSUNBdkx5QmxjMnhwYm5RdFpHbHpZV0pzWlMxdVpYaDBMV3hwYm1VZ2JtOHRZMjl1YzI5c1pWeHVJQ0FnSUdOdmJuTnZiR1V1ZDJGeWJpZ25SVzU2ZVcxbE9qcEVaWEJ5WldOaGRHVmtJRzFsZEdodlpDQnBjMFZ0Y0hSNUtDa2dZMkZzYkdWa0xDQjFjMlVnWlhocGMzUnpLQ2tnYVc1emRHVmhaQzRuS1R0Y2JpQWdJQ0J5WlhSMWNtNGdJWFJvYVhNdVpYaHBjM1J6S0NrN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dVbVYwZFhKdWN5QjBjblZsSUdsbUlIUm9aU0JqZFhKeVpXNTBJSGR5WVhCd1pYSWdhR0Z6SUc1dlpHVnpMaUJHWVd4elpTQnZkR2hsY25kcGMyVXVYRzRnSUNBcUlFbG1JR05oYkd4bFpDQjNhWFJvSUdFZ2MyVnNaV04wYjNJZ2FYUWdjbVYwZFhKdWN5QmdMbVpwYm1Rb2MyVnNaV04wYjNJcExtVjRhWE4wY3lncFlDQnBibk4wWldGa0xseHVJQ0FnS2x4dUlDQWdLaUJBY0dGeVlXMGdlMFZ1ZW5sdFpWTmxiR1ZqZEc5eWZTQnpaV3hsWTNSdmNpQW9iM0IwYVc5dVlXd3BYRzRnSUNBcUlFQnlaWFIxY201eklIdGliMjlzWldGdWZWeHVJQ0FnS2k5Y2JpQWdaWGhwYzNSektITmxiR1ZqZEc5eUlEMGdiblZzYkNrZ2UxeHVJQ0FnSUhKbGRIVnliaUJoY21kMWJXVnVkSE11YkdWdVozUm9JRDRnTUNBL0lIUm9hWE11Wm1sdVpDaHpaV3hsWTNSdmNpa3VaWGhwYzNSektDa2dPaUIwYUdsekxteGxibWQwYUNBK0lEQTdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nVlhScGJHbDBlU0J0WlhSb2IyUWdkR2hoZENCMGFISnZkM01nWVc0Z1pYSnliM0lnYVdZZ2RHaGxJR04xY25KbGJuUWdhVzV6ZEdGdVkyVWdhR0Z6SUdFZ2JHVnVaM1JvSUc5MGFHVnlJSFJvWVc0Z2IyNWxMbHh1SUNBZ0tpQlVhR2x6SUdseklIQnlhVzFoY21sc2VTQjFjMlZrSUhSdklHVnVabTl5WTJVZ2RHaGhkQ0JqWlhKMFlXbHVJRzFsZEdodlpITWdZWEpsSUc5dWJIa2djblZ1SUc5dUlHRWdkM0poY0hCbGNpQjNhR1Z1SUdsMElHbHpYRzRnSUNBcUlIZHlZWEJ3YVc1bklHRWdjMmx1WjJ4bElHNXZaR1V1WEc0Z0lDQXFYRzRnSUNBcUlFQndZWEpoYlNCbWJseHVJQ0FnS2lCQWNtVjBkWEp1Y3lCN0tuMWNiaUFnSUNvdlhHNGdJSE5wYm1kc1pTaHVZVzFsTENCbWJpa2dlMXh1SUNBZ0lHTnZibk4wSUdadVRtRnRaU0E5SUhSNWNHVnZaaUJ1WVcxbElEMDlQU0FuYzNSeWFXNW5KeUEvSUc1aGJXVWdPaUFuZFc1cmJtOTNiaWM3WEc0Z0lDQWdZMjl1YzNRZ1kyRnNiR0poWTJzZ1BTQjBlWEJsYjJZZ1ptNGdQVDA5SUNkbWRXNWpkR2x2YmljZ1B5Qm1iaUE2SUc1aGJXVTdYRzRnSUNBZ2FXWWdLSFJvYVhNdWJHVnVaM1JvSUNFOVBTQXhLU0I3WEc0Z0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9ZRTFsZEdodlpDRGlnSndrZTJadVRtRnRaWDNpZ0owZ2FYTWdiV1ZoYm5RZ2RHOGdZbVVnY25WdUlHOXVJREVnYm05a1pTNGdKSHQwYUdsekxteGxibWQwYUgwZ1ptOTFibVFnYVc1emRHVmhaQzVnS1R0Y2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlHTmhiR3hpWVdOckxtTmhiR3dvZEdocGN5d2dkR2hwY3k1blpYUk9iMlJsU1c1MFpYSnVZV3dvS1NrN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dTR1ZzY0daMWJDQjFkR2xzYVhSNUlHMWxkR2h2WkNCMGJ5QmpjbVZoZEdVZ1lTQnVaWGNnZDNKaGNIQmxjaUIzYVhSb0lIUm9aU0J6WVcxbElISnZiM1FnWVhNZ2RHaGxJR04xY25KbGJuUWdkM0poY0hCbGNpd2dkMmwwYUZ4dUlDQWdLaUJoYm5rZ2JtOWtaWE1nY0dGemMyVmtJR2x1SUdGeklIUm9aU0JtYVhKemRDQndZWEpoYldWMFpYSWdZWFYwYjIxaGRHbGpZV3hzZVNCM2NtRndjR1ZrTGx4dUlDQWdLbHh1SUNBZ0tpQkFjR0Z5WVcwZ2JtOWtaVnh1SUNBZ0tpQkFjbVYwZFhKdWN5QjdVMmhoYkd4dmQxZHlZWEJ3WlhKOVhHNGdJQ0FxTDF4dUlDQjNjbUZ3S0c1dlpHVXNJSEp2YjNRZ1BTQjBhR2x6VzFKUFQxUmRMQ0F1TGk1aGNtZHpLU0I3WEc0Z0lDQWdhV1lnS0c1dlpHVWdhVzV6ZEdGdVkyVnZaaUJUYUdGc2JHOTNWM0poY0hCbGNpa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlHNXZaR1U3WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCdVpYY2dVMmhoYkd4dmQxZHlZWEJ3WlhJb2JtOWtaU3dnY205dmRDd2dMaTR1WVhKbmN5azdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nVW1WMGRYSnVjeUJoYmlCSVZFMU1MV3hwYTJVZ2MzUnlhVzVuSUc5bUlIUm9aU0J6YUdGc2JHOTNJSEpsYm1SbGNpQm1iM0lnWkdWaWRXZG5hVzVuSUhCMWNuQnZjMlZ6TGx4dUlDQWdLbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UwOWlhbVZqZEgwZ1cyOXdkR2x2Ym5OZElDMGdVSEp2Y0dWeWRIa2dZbUZuSUc5bUlHRmtaR2wwYVc5dVlXd2diM0IwYVc5dWN5NWNiaUFnSUNvZ1FIQmhjbUZ0SUh0aWIyOXNaV0Z1ZlNCYmIzQjBhVzl1Y3k1cFoyNXZjbVZRY205d2MxMGdMU0JwWmlCMGNuVmxMQ0J3Y205d2N5QmhjbVVnYjIxcGRIUmxaQ0JtY205dElIUm9aU0J6ZEhKcGJtY3VYRzRnSUNBcUlFQndZWEpoYlNCN1ltOXZiR1ZoYm4wZ1cyOXdkR2x2Ym5NdWRtVnlZbTl6WlYwZ0xTQnBaaUIwY25WbExDQmhjbkpoZVhNZ1lXNWtJRzlpYW1WamRITWdkRzhnWW1VZ2RtVnlZbTl6Wld4NUlIQnlhVzUwWldRdVhHNGdJQ0FxSUVCeVpYUjFjbTV6SUh0VGRISnBibWQ5WEc0Z0lDQXFMMXh1SUNCa1pXSjFaeWh2Y0hScGIyNXpJRDBnZTMwcElIdGNiaUFnSUNCeVpYUjFjbTRnWkdWaWRXZE9iMlJsY3loMGFHbHpMbWRsZEU1dlpHVnpTVzUwWlhKdVlXd29LU3dnYjNCMGFXOXVjeWs3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1NXNTJiMnRsY3lCcGJuUmxjbU5sY0hSbGNpQmhibVFnY21WMGRYSnVjeUJwZEhObGJHWXVJR2x1ZEdWeVkyVndkR1Z5SUdseklHTmhiR3hsWkNCM2FYUm9JR2wwYzJWc1ppNWNiaUFnSUNvZ1ZHaHBjeUJwY3lCb1pXeHdablZzSUhkb1pXNGdaR1ZpZFdkbmFXNW5JRzV2WkdWeklHbHVJRzFsZEdodlpDQmphR0ZwYm5NdVhHNGdJQ0FxSUVCd1lYSmhiU0JtYmx4dUlDQWdLaUJBY21WMGRYSnVjeUI3VTJoaGJHeHZkMWR5WVhCd1pYSjlYRzRnSUNBcUwxeHVJQ0IwWVhBb2FXNTBaWEpqWlhCMFpYSXBJSHRjYmlBZ0lDQnBiblJsY21ObGNIUmxjaWgwYUdsektUdGNiaUFnSUNCeVpYUjFjbTRnZEdocGN6dGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJRY21sdFlYSnBiSGtnZFhObFpuVnNJR1p2Y2lCSVQwTnpJQ2hvYVdkb1pYSXRiM0prWlhJZ1kyOXRjRzl1Wlc1MGN5a3NJSFJvYVhNZ2JXVjBhRzlrSUcxaGVTQnZibXg1SUdKbFhHNGdJQ0FxSUhKMWJpQnZiaUJoSUhOcGJtZHNaU3dnYm05dUxVUlBUU0J1YjJSbExDQmhibVFnZDJsc2JDQnlaWFIxY200Z2RHaGxJRzV2WkdVc0lITm9ZV3hzYjNjdGNtVnVaR1Z5WldRdVhHNGdJQ0FxWEc0Z0lDQXFJRUJ3WVhKaGJTQjdUMkpxWldOMGZTQnZjSFJwYjI1elhHNGdJQ0FxSUVCeVpYUjFjbTV6SUh0VGFHRnNiRzkzVjNKaGNIQmxjbjFjYmlBZ0lDb3ZYRzRnSUdScGRtVW9iM0IwYVc5dWN5QTlJSHQ5S1NCN1hHNGdJQ0FnWTI5dWMzUWdZV1JoY0hSbGNpQTlJR2RsZEVGa1lYQjBaWElvZEdocGMxdFBVRlJKVDA1VFhTazdYRzRnSUNBZ1kyOXVjM1FnYm1GdFpTQTlJQ2RrYVhabEp6dGNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NXphVzVuYkdVb2JtRnRaU3dnS0c0cElEMCtJSHRjYmlBZ0lDQWdJR2xtSUNodUlDWW1JRzR1Ym05a1pWUjVjR1VnUFQwOUlDZG9iM04wSnlrZ2UxeHVJQ0FnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dWSGx3WlVWeWNtOXlLR0JUYUdGc2JHOTNWM0poY0hCbGNqbzZKSHR1WVcxbGZTZ3BJR05oYmlCdWIzUWdZbVVnWTJGc2JHVmtJRzl1SUVodmMzUWdRMjl0Y0c5dVpXNTBjMkFwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnWTI5dWMzUWdaV3dnUFNCblpYUkJaR0Z3ZEdWeUtIUm9hWE5iVDFCVVNVOU9VMTBwTG01dlpHVlViMFZzWlcxbGJuUW9iaWs3WEc0Z0lDQWdJQ0JwWmlBb0lXbHpRM1Z6ZEc5dFEyOXRjRzl1Wlc1MFJXeGxiV1Z1ZENobGJDd2dZV1JoY0hSbGNpa3BJSHRjYmlBZ0lDQWdJQ0FnZEdoeWIzY2dibVYzSUZSNWNHVkZjbkp2Y2loZ1UyaGhiR3h2ZDFkeVlYQndaWEk2T2lSN2JtRnRaWDBvS1NCallXNGdiMjVzZVNCaVpTQmpZV3hzWldRZ2IyNGdZMjl0Y0c5dVpXNTBjMkFwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnWTI5dWMzUWdZMmhwYkdSUGNIUnBiMjV6SUQwZ2JXRnJaVWx1YUdWeWFYUmxaRU5vYVd4a1QzQjBhVzl1Y3loMGFHbHpMQ0J2Y0hScGIyNXpLVHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5keVlYQW9aV3dzSUc1MWJHd3NJR05vYVd4a1QzQjBhVzl1Y3lrN1hHNGdJQ0FnZlNrN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dVM1J5YVhCeklHOTFkQ0JoYkd3Z2RHaGxJRzV2ZENCb2IzTjBMVzV2WkdWeklHWnliMjBnZEdobElHeHBjM1FnYjJZZ2JtOWtaWE5jYmlBZ0lDcGNiaUFnSUNvZ1ZHaHBjeUJ0WlhSb2IyUWdhWE1nZFhObFpuVnNJR2xtSUhsdmRTQjNZVzUwSUhSdklHTm9aV05ySUdadmNpQjBhR1VnY0hKbGMyVnVZMlVnYjJZZ2FHOXpkQ0J1YjJSbGMxeHVJQ0FnS2lBb1lXTjBkV0ZzYkhrZ2NtVnVaR1Z5WldRZ1NGUk5UQ0JsYkdWdFpXNTBjeWtnYVdkdWIzSnBibWNnZEdobElGSmxZV04wSUc1dlpHVnpMbHh1SUNBZ0tpOWNiaUFnYUc5emRFNXZaR1Z6S0NrZ2UxeHVJQ0FnSUhKbGRIVnliaUIwYUdsekxtWnBiSFJsY2xkb1pYSmxLQ2h1S1NBOVBpQjBlWEJsYjJZZ2JpNTBlWEJsS0NrZ1BUMDlJQ2R6ZEhKcGJtY25LVHRjYmlBZ2ZWeHVmVnh1WEc0dktpcGNiaUFxSUZWd1pHRjBaWE1nZEdobElHTnZiblJsZUhRZ2IyWWdkR2hsSUhCeWFXMWhjbmtnZDNKaGNIQmxjaUIzYUdWdUlIUm9aVnh1SUNvZ1lIZHlZWEJ3YVc1blEyOXRjRzl1Wlc1MFlDQnlaUzF5Wlc1a1pYSnpMbHh1SUNvdlhHNW1kVzVqZEdsdmJpQjFjR1JoZEdWUWNtbHRZWEo1VW05dmRFTnZiblJsZUhRb2QzSmhjSEJwYm1kRGIyMXdiMjVsYm5RcElIdGNiaUFnWTI5dWMzUWdZV1JoY0hSbGNpQTlJR2RsZEVGa1lYQjBaWElvZDNKaGNIQnBibWREYjIxd2IyNWxiblJiVDFCVVNVOU9VMTBwTzF4dUlDQmpiMjV6ZENCd2NtbHRZWEo1VjNKaGNIQmxjaUE5SUhkeVlYQndhVzVuUTI5dGNHOXVaVzUwVzFCU1NVMUJVbGxmVjFKQlVGQkZVbDA3WEc0Z0lHTnZibk4wSUhCeWFXMWhjbmxTWlc1a1pYSmxjaUE5SUhCeWFXMWhjbmxYY21Gd2NHVnlXMUpGVGtSRlVrVlNYVHRjYmlBZ1kyOXVjM1FnY0hKcGJXRnllVTV2WkdVZ1BTQndjbWx0WVhKNVVtVnVaR1Z5WlhJdVoyVjBUbTlrWlNncE8xeHVJQ0JqYjI1emRDQjdYRzRnSUNBZ2JHVm5ZV041UTI5dWRHVjRkQ3hjYmlBZ0lDQndjbTkyYVdSbGNsWmhiSFZsY3l4Y2JpQWdmU0E5SUdkbGRFTnZiblJsZUhSR2NtOXRWM0poY0hCcGJtZERiMjF3YjI1bGJuUW9kM0poY0hCcGJtZERiMjF3YjI1bGJuUXNJR0ZrWVhCMFpYSXBPMXh1SUNCamIyNXpkQ0J3Y21WMlVISnZkbWxrWlhKV1lXeDFaWE1nUFNCd2NtbHRZWEo1VjNKaGNIQmxjbHRRVWs5V1NVUkZVbDlXUVV4VlJWTmRPMXh1WEc0Z0lIQnlhVzFoY25sWGNtRndjR1Z5TG5ObGRFTnZiblJsZUhRb2UxeHVJQ0FnSUM0dUxuZHlZWEJ3YVc1blEyOXRjRzl1Wlc1MFcxQlNTVTFCVWxsZlYxSkJVRkJGVWwxYlQxQlVTVTlPVTEwdVkyOXVkR1Y0ZEN4Y2JpQWdJQ0F1TGk1c1pXZGhZM2xEYjI1MFpYaDBMRnh1SUNCOUtUdGNiaUFnY0hKcGJXRnllVmR5WVhCd1pYSmJVRkpQVmtsRVJWSmZWa0ZNVlVWVFhTQTlJRzVsZHlCTllYQW9XeTR1TG5CeVpYWlFjbTkyYVdSbGNsWmhiSFZsY3l3Z0xpNHVjSEp2ZG1sa1pYSldZV3gxWlhOZEtUdGNibHh1SUNCcFppQW9kSGx3Wlc5bUlHRmtZWEIwWlhJdWFYTkRiMjUwWlhoMFEyOXVjM1Z0WlhJZ1BUMDlJQ2RtZFc1amRHbHZiaWNnSmlZZ1lXUmhjSFJsY2k1cGMwTnZiblJsZUhSRGIyNXpkVzFsY2lod2NtbHRZWEo1VG05a1pTNTBlWEJsS1NrZ2UxeHVJQ0FnSUdOdmJuTjBJRU52Ym5OMWJXVnlJRDBnY0hKcGJXRnllVTV2WkdVdWRIbHdaVHRjYmlBZ0lDQXZMeUJCWkdGd2RHVnljeUIzYVhSb0lHRnVJR0JwYzBOdmJuUmxlSFJEYjI1emRXMWxjbUFnYldWMGFHOWtJSGRwYkd3Z1pHVm1hVzVwZEdWc2VTQm9ZWFpsSUdFZ1lHZGxkRkJ5YjNacFpHVnlSbkp2YlVOdmJuTjFiV1Z5WUZ4dUlDQWdJQzh2SUcxbGRHaHZaQzVjYmlBZ0lDQmpiMjV6ZENCUWNtOTJhV1JsY2lBOUlHRmtZWEIwWlhJdVoyVjBVSEp2ZG1sa1pYSkdjbTl0UTI5dWMzVnRaWElvUTI5dWMzVnRaWElwTzF4dUlDQWdJR052Ym5OMElHNWxkMVpoYkhWbElEMGdjSEp2ZG1sa1pYSldZV3gxWlhNdVoyVjBLRkJ5YjNacFpHVnlLVHRjYmlBZ0lDQmpiMjV6ZENCdmJHUldZV3gxWlNBOUlIQnlaWFpRY205MmFXUmxjbFpoYkhWbGN5NW5aWFFvVUhKdmRtbGtaWElwTzF4dVhHNGdJQ0FnTHk4Z1ZYTmxJSEpsWm1WeVpXNTBhV0ZzSUdOdmJYQmhjbWx6YjI0Z2JHbHJaU0JTWldGamRGeHVJQ0FnSUdsbUlDaHVaWGRXWVd4MVpTQWhQVDBnYjJ4a1ZtRnNkV1VwSUh0Y2JpQWdJQ0FnSUhCeWFXMWhjbmxYY21Gd2NHVnlMbkpsY21WdVpHVnlLQ2s3WEc0Z0lDQWdmVnh1SUNCOVhHNTlYRzVjYmk4cUtseHVJQ29nUVNBcWMzQmxZMmxoYkNvZ1hDSnliMjkwWENJZ2QzSmhjSEJsY2lCMGFHRjBJSEpsY0hKbGMyVnVkSE1nZEdobElHTnZiWEJ2Ym1WdWRDQndZWE56WldRZ1lYTWdZSGR5WVhCd2FXNW5RMjl0Y0c5dVpXNTBZQzVjYmlBcUlFbDBJR2x6SUd4cGJtdGxaQ0IwYnlCMGFHVWdjSEpwYldGeWVTQnliMjkwSUhOMVkyZ2dkR2hoZENCMWNHUmhkR1Z6SUhSdklHbDBJSGRwYkd3Z2RYQmtZWFJsSUhSb1pTQndjbWx0WVhKNUxseHVJQ3BjYmlBcUlFQmpiR0Z6Y3lCWGNtRndjR2x1WjBOdmJYQnZibVZ1ZEZkeVlYQndaWEpjYmlBcUwxeHVZMnhoYzNNZ1YzSmhjSEJwYm1kRGIyMXdiMjVsYm5SWGNtRndjR1Z5SUdWNGRHVnVaSE1nVTJoaGJHeHZkMWR5WVhCd1pYSWdlMXh1SUNCamIyNXpkSEoxWTNSdmNpaHViMlJsY3l3Z2NtOXZkQ3dnVW05dmRFWnBibVJsY2lrZ2UxeHVJQ0FnSUhOMWNHVnlLRzV2WkdWektUdGNiaUFnSUNCd2NtbDJZWFJsVTJWMEtIUm9hWE1zSUZCU1NVMUJVbGxmVjFKQlVGQkZVaXdnY205dmRDazdYRzRnSUNBZ2NISnBkbUYwWlZObGRDaDBhR2x6TENCU1QwOVVYMFpKVGtSRlVpd2dVbTl2ZEVacGJtUmxjaWs3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1RHbHJaU0J5WlhKbGJtUmxjaWdwSUc5dUlGTm9ZV3hzYjNkWGNtRndjR1Z5TENCbGVHTmxjSFFnYVhRZ1lXeHpieUJrYjJWeklHRWdYQ0ptZFd4c0lISmxibVJsY2x3aUlHOW1YRzRnSUNBcUlHbDBjMlZzWmlCaGJtUWdkWEJrWVhSbGN5QjBhR1VnY0hKcGJXRnllU0JUYUdGc2JHOTNWM0poY0hCbGNpZHpJR052Ym5SbGVIUXVYRzRnSUNBcUwxeHVJQ0J5WlhKbGJtUmxjaWd1TGk1aGNtZHpLU0I3WEc0Z0lDQWdZMjl1YzNRZ2NtVnpkV3gwSUQwZ2MzVndaWEl1Y21WeVpXNWtaWElvTGk0dVlYSm5jeWs3WEc0Z0lDQWdkWEJrWVhSbFVISnBiV0Z5ZVZKdmIzUkRiMjUwWlhoMEtIUm9hWE1wTzF4dUlDQWdJSEpsZEhWeWJpQnlaWE4xYkhRN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dUR2xyWlNCelpYUlRkR0YwWlNncElHOXVJRk5vWVd4c2IzZFhjbUZ3Y0dWeUxDQmxlR05sY0hRZ2FYUWdZV3h6YnlCa2IyVnpJR0VnWENKbWRXeHNJSEpsYm1SbGNsd2lJRzltWEc0Z0lDQXFJR2wwYzJWc1ppQmhibVFnZFhCa1lYUmxjeUIwYUdVZ2NISnBiV0Z5ZVNCVGFHRnNiRzkzVjNKaGNIQmxjaWR6SUdOdmJuUmxlSFF1WEc0Z0lDQXFMMXh1SUNCelpYUlRkR0YwWlNndUxpNWhjbWR6S1NCN1hHNGdJQ0FnWTI5dWMzUWdjbVZ6ZFd4MElEMGdjM1Z3WlhJdWMyVjBVM1JoZEdVb0xpNHVZWEpuY3lrN1hHNGdJQ0FnZFhCa1lYUmxVSEpwYldGeWVWSnZiM1JEYjI1MFpYaDBLSFJvYVhNcE8xeHVJQ0FnSUhKbGRIVnliaUJ5WlhOMWJIUTdYRzRnSUgxY2JseHVJQ0F2THlCbGMyeHBiblF0WkdsellXSnNaUzF1WlhoMExXeHBibVVnWTJ4aGMzTXRiV1YwYUc5a2N5MTFjMlV0ZEdocGMxeHVJQ0JuWlhSWGNtRndjR2x1WjBOdmJYQnZibVZ1ZENncElIdGNiaUFnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjFOb1lXeHNiM2RYY21Gd2NHVnlPanBuWlhSWGNtRndjR2x1WjBOdmJYQnZibVZ1ZENncElHTmhiaUJ2Ym14NUlHSmxJR05oYkd4bFpDQnZiaUIwYUdVZ2NtOXZkQ2NwTzF4dUlDQjlYRzU5WEc1Y2JtbG1JQ2hKVkVWU1FWUlBVbDlUV1UxQ1Qwd3BJSHRjYmlBZ1QySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLRk5vWVd4c2IzZFhjbUZ3Y0dWeUxuQnliM1J2ZEhsd1pTd2dTVlJGVWtGVVQxSmZVMWxOUWs5TUxDQjdYRzRnSUNBZ1kyOXVabWxuZFhKaFlteGxPaUIwY25WbExGeHVJQ0FnSUhaaGJIVmxPaUJtZFc1amRHbHZiaUJwZEdWeVlYUnZjaWdwSUh0Y2JpQWdJQ0FnSUdOdmJuTjBJR2wwWlhJZ1BTQjBhR2x6TG1kbGRFNXZaR1Z6U1c1MFpYSnVZV3dvS1Z0SlZFVlNRVlJQVWw5VFdVMUNUMHhkS0NrN1hHNGdJQ0FnSUNCamIyNXpkQ0JoWkdGd2RHVnlJRDBnWjJWMFFXUmhjSFJsY2loMGFHbHpXMDlRVkVsUFRsTmRLVHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjdYRzRnSUNBZ0lDQWdJRnRKVkVWU1FWUlBVbDlUV1UxQ1QweGRLQ2tnZXlCeVpYUjFjbTRnZEdocGN6c2dmU3hjYmlBZ0lDQWdJQ0FnYm1WNGRDZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNCamIyNXpkQ0J1WlhoMElEMGdhWFJsY2k1dVpYaDBLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLRzVsZUhRdVpHOXVaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIc2daRzl1WlRvZ2RISjFaU0I5TzF4dUlDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1pHOXVaVG9nWm1Gc2MyVXNYRzRnSUNBZ0lDQWdJQ0FnSUNCMllXeDFaVG9nWVdSaGNIUmxjaTV1YjJSbFZHOUZiR1Z0Wlc1MEtHNWxlSFF1ZG1Gc2RXVXBMRnh1SUNBZ0lDQWdJQ0FnSUgwN1hHNGdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQjlPMXh1SUNBZ0lIMHNYRzRnSUgwcE8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCd2NtbDJZWFJsVjJGeWJtbHVaeWh3Y205d0xDQmxlSFJ5WVUxbGMzTmhaMlVwSUh0Y2JpQWdUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0ZOb1lXeHNiM2RYY21Gd2NHVnlMbkJ5YjNSdmRIbHdaU3dnY0hKdmNDd2dlMXh1SUNBZ0lHZGxkQ2dwSUh0Y2JpQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWhnWEc0Z0lDQWdJQ0FnSUVGMGRHVnRjSFJsWkNCMGJ5QmhZMk5sYzNNZ1UyaGhiR3h2ZDFkeVlYQndaWEk2T2lSN2NISnZjSDBzSUhkb2FXTm9JSGRoY3lCd2NtVjJhVzkxYzJ4NUlHRWdjSEpwZG1GMFpTQndjbTl3WlhKMGVTQnZibHh1SUNBZ0lDQWdJQ0JGYm5wNWJXVWdVMmhoYkd4dmQxZHlZWEJ3WlhJZ2FXNXpkR0Z1WTJWekxDQmlkWFFnYVhNZ2JtOGdiRzl1WjJWeUlHRnVaQ0J6YUc5MWJHUWdibTkwSUdKbElISmxiR2xsWkNCMWNHOXVMbHh1SUNBZ0lDQWdJQ0FrZTJWNGRISmhUV1Z6YzJGblpYMWNiaUFnSUNBZ0lHQXBPMXh1SUNBZ0lIMHNYRzRnSUNBZ1pXNTFiV1Z5WVdKc1pUb2dabUZzYzJVc1hHNGdJQ0FnWTI5dVptbG5kWEpoWW14bE9pQm1ZV3h6WlN4Y2JpQWdmU2s3WEc1OVhHNWNibkJ5YVhaaGRHVlhZWEp1YVc1bktDZHViMlJsSnl3Z0owTnZibk5wWkdWeUlIVnphVzVuSUhSb1pTQm5aWFJGYkdWdFpXNTBLQ2tnYldWMGFHOWtJR2x1YzNSbFlXUXVKeWs3WEc1d2NtbDJZWFJsVjJGeWJtbHVaeWduYm05a1pYTW5MQ0FuUTI5dWMybGtaWElnZFhOcGJtY2dkR2hsSUdkbGRFVnNaVzFsYm5SektDa2diV1YwYUc5a0lHbHVjM1JsWVdRdUp5azdYRzV3Y21sMllYUmxWMkZ5Ym1sdVp5Z25jbVZ1WkdWeVpYSW5MQ0FuSnlrN1hHNXdjbWwyWVhSbFYyRnlibWx1WnlnbmIzQjBhVzl1Y3ljc0lDY25LVHRjYm5CeWFYWmhkR1ZYWVhKdWFXNW5LQ2RqYjIxd2JHVjRVMlZzWldOMGIzSW5MQ0FuSnlrN1hHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElGTm9ZV3hzYjNkWGNtRndjR1Z5TzF4dUlsMTlcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVNoYWxsb3dXcmFwcGVyLmpzLm1hcCIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuc2hhbGxvd0VxdWFsID0gZXhwb3J0cy5JVEVSQVRPUl9TWU1CT0wgPSB1bmRlZmluZWQ7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxudmFyIF9zbGljZWRUb0FycmF5ID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBzbGljZUl0ZXJhdG9yKGFyciwgaSkgeyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSkgX2lbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9IHJldHVybiBmdW5jdGlvbiAoYXJyLCBpKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgcmV0dXJuIGFycjsgfSBlbHNlIGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikpIHsgcmV0dXJuIHNsaWNlSXRlcmF0b3IoYXJyLCBpKTsgfSBlbHNlIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2VcIik7IH0gfTsgfSgpO1xuXG5leHBvcnRzLmdldEFkYXB0ZXIgPSBnZXRBZGFwdGVyO1xuZXhwb3J0cy5tYWtlT3B0aW9ucyA9IG1ha2VPcHRpb25zO1xuZXhwb3J0cy5pc0N1c3RvbUNvbXBvbmVudCA9IGlzQ3VzdG9tQ29tcG9uZW50O1xuZXhwb3J0cy5pc0N1c3RvbUNvbXBvbmVudEVsZW1lbnQgPSBpc0N1c3RvbUNvbXBvbmVudEVsZW1lbnQ7XG5leHBvcnRzLnByb3BzT2ZOb2RlID0gcHJvcHNPZk5vZGU7XG5leHBvcnRzLnR5cGVPZk5vZGUgPSB0eXBlT2ZOb2RlO1xuZXhwb3J0cy5ub2RlSGFzVHlwZSA9IG5vZGVIYXNUeXBlO1xuZXhwb3J0cy5ub2RlTWF0Y2hlcyA9IG5vZGVNYXRjaGVzO1xuZXhwb3J0cy5ub2RlRXF1YWwgPSBub2RlRXF1YWw7XG5leHBvcnRzLmNvbnRhaW5zQ2hpbGRyZW5TdWJBcnJheSA9IGNvbnRhaW5zQ2hpbGRyZW5TdWJBcnJheTtcbmV4cG9ydHMuY2hpbGRyZW5Ub1NpbXBsaWZpZWRBcnJheSA9IGNoaWxkcmVuVG9TaW1wbGlmaWVkQXJyYXk7XG5leHBvcnRzLmlzUmVhY3RFbGVtZW50QWxpa2UgPSBpc1JlYWN0RWxlbWVudEFsaWtlO1xuZXhwb3J0cy53aXRoU2V0U3RhdGVBbGxvd2VkID0gd2l0aFNldFN0YXRlQWxsb3dlZDtcbmV4cG9ydHMuQU5EID0gQU5EO1xuZXhwb3J0cy5kaXNwbGF5TmFtZU9mTm9kZSA9IGRpc3BsYXlOYW1lT2ZOb2RlO1xuZXhwb3J0cy5zeW0gPSBzeW07XG5leHBvcnRzLnByaXZhdGVTZXQgPSBwcml2YXRlU2V0O1xuZXhwb3J0cy5jbG9uZUVsZW1lbnQgPSBjbG9uZUVsZW1lbnQ7XG5leHBvcnRzLnNweU1ldGhvZCA9IHNweU1ldGhvZDtcblxudmFyIF9lbnp5bWVTaGFsbG93RXF1YWwgPSByZXF1aXJlKCdlbnp5bWUtc2hhbGxvdy1lcXVhbCcpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ3NoYWxsb3dFcXVhbCcsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2VuenltZVNoYWxsb3dFcXVhbClbJ2RlZmF1bHQnXTtcbiAgICB9XG5cbiAgICByZXR1cm4gZ2V0O1xuICB9KClcbn0pO1xuZXhwb3J0cy5pc0VtcHR5VmFsdWUgPSBpc0VtcHR5VmFsdWU7XG5leHBvcnRzLnJlbmRlcmVkRGl2ZSA9IHJlbmRlcmVkRGl2ZTtcbmV4cG9ydHMubG9hZENoZWVyaW9Sb290ID0gbG9hZENoZWVyaW9Sb290O1xuXG52YXIgX29iamVjdCA9IHJlcXVpcmUoJ29iamVjdC5hc3NpZ24nKTtcblxudmFyIF9vYmplY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfb2JqZWN0KTtcblxudmFyIF9sb2Rhc2ggPSByZXF1aXJlKCdsb2Rhc2guaXNlcXVhbCcpO1xuXG52YXIgX2xvZGFzaDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9sb2Rhc2gpO1xuXG52YXIgX29iamVjdElzID0gcmVxdWlyZSgnb2JqZWN0LWlzJyk7XG5cbnZhciBfb2JqZWN0SXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfb2JqZWN0SXMpO1xuXG52YXIgX29iamVjdDMgPSByZXF1aXJlKCdvYmplY3QuZW50cmllcycpO1xuXG52YXIgX29iamVjdDQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9vYmplY3QzKTtcblxudmFyIF9mdW5jdGlvblByb3RvdHlwZSA9IHJlcXVpcmUoJ2Z1bmN0aW9uLnByb3RvdHlwZS5uYW1lJyk7XG5cbnZhciBfZnVuY3Rpb25Qcm90b3R5cGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZnVuY3Rpb25Qcm90b3R5cGUpO1xuXG52YXIgX2hhcyA9IHJlcXVpcmUoJ2hhcycpO1xuXG52YXIgX2hhczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9oYXMpO1xuXG52YXIgX2FycmF5UHJvdG90eXBlID0gcmVxdWlyZSgnYXJyYXkucHJvdG90eXBlLmZsYXQnKTtcblxudmFyIF9hcnJheVByb3RvdHlwZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9hcnJheVByb3RvdHlwZSk7XG5cbnZhciBfc3RyaW5nUHJvdG90eXBlID0gcmVxdWlyZSgnc3RyaW5nLnByb3RvdHlwZS50cmltJyk7XG5cbnZhciBfc3RyaW5nUHJvdG90eXBlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3N0cmluZ1Byb3RvdHlwZSk7XG5cbnZhciBfY2hlZXJpbyA9IHJlcXVpcmUoJ2NoZWVyaW8nKTtcblxudmFyIF9jaGVlcmlvMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NoZWVyaW8pO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZSgnY2hlZXJpby9saWIvdXRpbHMnKTtcblxudmFyIF9jb25maWd1cmF0aW9uID0gcmVxdWlyZSgnLi9jb25maWd1cmF0aW9uJyk7XG5cbnZhciBfUlNUVHJhdmVyc2FsID0gcmVxdWlyZSgnLi9SU1RUcmF2ZXJzYWwnKTtcblxudmFyIF9nZXRBZGFwdGVyID0gcmVxdWlyZSgnLi9nZXRBZGFwdGVyJyk7XG5cbnZhciBfZ2V0QWRhcHRlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRBZGFwdGVyKTtcblxudmFyIF92YWxpZGF0ZUFkYXB0ZXIgPSByZXF1aXJlKCcuL3ZhbGlkYXRlQWRhcHRlcicpO1xuXG52YXIgX3ZhbGlkYXRlQWRhcHRlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF92YWxpZGF0ZUFkYXB0ZXIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH0gLyogZXNsaW50IG5vLXVzZS1iZWZvcmUtZGVmaW5lOiAwICovXG5cblxudmFyIElURVJBVE9SX1NZTUJPTCA9IGV4cG9ydHMuSVRFUkFUT1JfU1lNQk9MID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wuaXRlcmF0b3I7XG5cbmZ1bmN0aW9uIGdldEFkYXB0ZXIoKSB7XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICBjb25zb2xlLndhcm4oJ2dldEFkYXB0ZXIgZnJvbSBVdGlscyBpcyBkZXByZWNhdGVkOyBwbGVhc2UgdXNlIC4vZ2V0QWRhcHRlciBpbnN0ZWFkJyk7XG4gIHJldHVybiAoMCwgX2dldEFkYXB0ZXIyWydkZWZhdWx0J10pKG9wdGlvbnMpO1xufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZU1vdW50T3B0aW9ucyhhdHRhY2hUbywgaHlkcmF0ZUluKSB7XG4gIGlmIChhdHRhY2hUbyAmJiBoeWRyYXRlSW4gJiYgYXR0YWNoVG8gIT09IGh5ZHJhdGVJbikge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0lmIGJvdGggdGhlIGBhdHRhY2hUb2AgYW5kIGBoeWRyYXRlSW5gIG9wdGlvbnMgYXJlIHByb3ZpZGVkLCB0aGV5IG11c3QgYmUgPT09IChmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkpJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWFrZU9wdGlvbnMob3B0aW9ucykge1xuICB2YXIgX2dldCA9ICgwLCBfY29uZmlndXJhdGlvbi5nZXQpKCksXG4gICAgICBjb25maWdBdHRhY2hUbyA9IF9nZXQuYXR0YWNoVG8sXG4gICAgICBjb25maWdIeWRyYXRlSW4gPSBfZ2V0Lmh5ZHJhdGVJbixcbiAgICAgIGNvbmZpZyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfZ2V0LCBbJ2F0dGFjaFRvJywgJ2h5ZHJhdGVJbiddKTtcblxuICB2YWxpZGF0ZU1vdW50T3B0aW9ucyhjb25maWdBdHRhY2hUbywgY29uZmlnSHlkcmF0ZUluKTtcblxuICB2YXIgYXR0YWNoVG8gPSBvcHRpb25zLmF0dGFjaFRvLFxuICAgICAgaHlkcmF0ZUluID0gb3B0aW9ucy5oeWRyYXRlSW47XG5cbiAgdmFsaWRhdGVNb3VudE9wdGlvbnMoYXR0YWNoVG8sIGh5ZHJhdGVJbik7XG5cbiAgLy8gbmVpdGhlciBwcmVzZW50OiBib3RoIHVuZGVmaW5lZFxuICAvLyBvbmx5IGF0dGFjaFRvIHByZXNlbnQ6IGF0dGFjaFRvIHNldCwgaHlkcmF0ZUluIHVuZGVmaW5lZFxuICAvLyBvbmx5IGh5ZHJhdGVJbiBwcmVzZW50OiBib3RoIHNldCB0byBoeWRyYXRlSW5cbiAgLy8gYm90aCBwcmVzZW50IChhbmQgPT09LCBwZXIgYWJvdmUpOiBib3RoIHNldCB0byBoeWRyYXRlSW5cbiAgdmFyIGZpbmFsQXR0YWNoVG8gPSBoeWRyYXRlSW4gfHwgY29uZmlnSHlkcmF0ZUluIHx8IGNvbmZpZ0F0dGFjaFRvIHx8IGF0dGFjaFRvIHx8IHVuZGVmaW5lZDtcbiAgdmFyIGZpbmFsSHlkcmF0ZUluID0gaHlkcmF0ZUluIHx8IGNvbmZpZ0h5ZHJhdGVJbiB8fCB1bmRlZmluZWQ7XG4gIHZhciBtb3VudFRhcmdldHMgPSAoMCwgX29iamVjdDJbJ2RlZmF1bHQnXSkoe30sIGZpbmFsQXR0YWNoVG8gJiYgeyBhdHRhY2hUbzogZmluYWxBdHRhY2hUbyB9LCBmaW5hbEh5ZHJhdGVJbiAmJiB7IGh5ZHJhdGVJbjogZmluYWxIeWRyYXRlSW4gfSk7XG5cbiAgcmV0dXJuICgwLCBfb2JqZWN0MlsnZGVmYXVsdCddKSh7fSwgY29uZmlnLCBvcHRpb25zLCBtb3VudFRhcmdldHMpO1xufVxuXG5mdW5jdGlvbiBpc0N1c3RvbUNvbXBvbmVudChjb21wb25lbnQsIGFkYXB0ZXIpIHtcbiAgKDAsIF92YWxpZGF0ZUFkYXB0ZXIyWydkZWZhdWx0J10pKGFkYXB0ZXIpO1xuICBpZiAoYWRhcHRlci5pc0N1c3RvbUNvbXBvbmVudCkge1xuICAgIHJldHVybiAhIWFkYXB0ZXIuaXNDdXN0b21Db21wb25lbnQoY29tcG9uZW50KTtcbiAgfVxuICByZXR1cm4gdHlwZW9mIGNvbXBvbmVudCA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuZnVuY3Rpb24gaXNDdXN0b21Db21wb25lbnRFbGVtZW50KGluc3QsIGFkYXB0ZXIpIHtcbiAgaWYgKGFkYXB0ZXIuaXNDdXN0b21Db21wb25lbnRFbGVtZW50KSB7XG4gICAgcmV0dXJuICEhYWRhcHRlci5pc0N1c3RvbUNvbXBvbmVudEVsZW1lbnQoaW5zdCk7XG4gIH1cbiAgcmV0dXJuICEhaW5zdCAmJiBhZGFwdGVyLmlzVmFsaWRFbGVtZW50KGluc3QpICYmIHR5cGVvZiBpbnN0LnR5cGUgPT09ICdmdW5jdGlvbic7XG59XG5cbmZ1bmN0aW9uIHByb3BzT2ZOb2RlKG5vZGUpIHtcbiAgcmV0dXJuICgwLCBfb2JqZWN0NFsnZGVmYXVsdCddKShub2RlICYmIG5vZGUucHJvcHMgfHwge30pLmZpbHRlcihmdW5jdGlvbiAoX3JlZikge1xuICAgIHZhciBfcmVmMiA9IF9zbGljZWRUb0FycmF5KF9yZWYsIDIpLFxuICAgICAgICB2YWx1ZSA9IF9yZWYyWzFdO1xuXG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSAhPT0gJ3VuZGVmaW5lZCc7XG4gIH0pLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBfcmVmMykge1xuICAgIHZhciBfcmVmNCA9IF9zbGljZWRUb0FycmF5KF9yZWYzLCAyKSxcbiAgICAgICAga2V5ID0gX3JlZjRbMF0sXG4gICAgICAgIHZhbHVlID0gX3JlZjRbMV07XG5cbiAgICByZXR1cm4gKDAsIF9vYmplY3QyWydkZWZhdWx0J10pKGFjYywgX2RlZmluZVByb3BlcnR5KHt9LCBrZXksIHZhbHVlKSk7XG4gIH0sIHt9KTtcbn1cblxuZnVuY3Rpb24gdHlwZU9mTm9kZShub2RlKSB7XG4gIHJldHVybiBub2RlID8gbm9kZS50eXBlIDogbnVsbDtcbn1cblxuZnVuY3Rpb24gbm9kZUhhc1R5cGUobm9kZSwgdHlwZSkge1xuICBpZiAoIXR5cGUgfHwgIW5vZGUpIHJldHVybiBmYWxzZTtcblxuICB2YXIgYWRhcHRlciA9ICgwLCBfZ2V0QWRhcHRlcjJbJ2RlZmF1bHQnXSkoKTtcbiAgaWYgKGFkYXB0ZXIuZGlzcGxheU5hbWVPZk5vZGUpIHtcbiAgICB2YXIgZGlzcGxheU5hbWUgPSBhZGFwdGVyLmRpc3BsYXlOYW1lT2ZOb2RlKG5vZGUpO1xuICAgIHJldHVybiBkaXNwbGF5TmFtZSA9PT0gdHlwZTtcbiAgfVxuXG4gIGlmICghbm9kZS50eXBlKSByZXR1cm4gZmFsc2U7XG4gIGlmICh0eXBlb2Ygbm9kZS50eXBlID09PSAnc3RyaW5nJykgcmV0dXJuIG5vZGUudHlwZSA9PT0gdHlwZTtcbiAgcmV0dXJuICh0eXBlb2Ygbm9kZS50eXBlID09PSAnZnVuY3Rpb24nID8gKDAsIF9mdW5jdGlvblByb3RvdHlwZTJbJ2RlZmF1bHQnXSkobm9kZS50eXBlKSA9PT0gdHlwZSA6IG5vZGUudHlwZS5uYW1lID09PSB0eXBlKSB8fCBub2RlLnR5cGUuZGlzcGxheU5hbWUgPT09IHR5cGU7XG59XG5cbmZ1bmN0aW9uIGludGVybmFsQ2hpbGRyZW5Db21wYXJlKGEsIGIsIGxlbkNvbXAsIGlzTG9vc2UpIHtcbiAgdmFyIG5vZGVDb21wYXJlID0gaXNMb29zZSA/IG5vZGVNYXRjaGVzIDogbm9kZUVxdWFsO1xuXG4gIGlmIChhID09PSBiKSByZXR1cm4gdHJ1ZTtcbiAgaWYgKCFBcnJheS5pc0FycmF5KGEpICYmICFBcnJheS5pc0FycmF5KGIpKSB7XG4gICAgcmV0dXJuIG5vZGVDb21wYXJlKGEsIGIsIGxlbkNvbXApO1xuICB9XG4gIHZhciBmbGF0QSA9ICgwLCBfYXJyYXlQcm90b3R5cGUyWydkZWZhdWx0J10pKGEsIEluZmluaXR5KTtcbiAgdmFyIGZsYXRCID0gKDAsIF9hcnJheVByb3RvdHlwZTJbJ2RlZmF1bHQnXSkoYiwgSW5maW5pdHkpO1xuICBpZiAoZmxhdEEubGVuZ3RoICE9PSBmbGF0Qi5sZW5ndGgpIHJldHVybiBmYWxzZTtcbiAgaWYgKGZsYXRBLmxlbmd0aCA9PT0gMCAmJiBmbGF0Qi5sZW5ndGggPT09IDApIHJldHVybiB0cnVlO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGZsYXRBLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKCFub2RlQ29tcGFyZShmbGF0QVtpXSwgZmxhdEJbaV0sIGxlbkNvbXApKSByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGNoaWxkcmVuTWF0Y2goYSwgYiwgbGVuQ29tcCkge1xuICByZXR1cm4gaW50ZXJuYWxDaGlsZHJlbkNvbXBhcmUoYSwgYiwgbGVuQ29tcCwgdHJ1ZSk7XG59XG5cbmZ1bmN0aW9uIGNoaWxkcmVuRXF1YWwoYSwgYiwgbGVuQ29tcCkge1xuICByZXR1cm4gaW50ZXJuYWxDaGlsZHJlbkNvbXBhcmUoYSwgYiwgbGVuQ29tcCwgZmFsc2UpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVOdWxsYXJ5UmVkdWNlcihhY2MsIF9yZWY1KSB7XG4gIHZhciBfcmVmNiA9IF9zbGljZWRUb0FycmF5KF9yZWY1LCAyKSxcbiAgICAgIGtleSA9IF9yZWY2WzBdLFxuICAgICAgdmFsdWUgPSBfcmVmNlsxXTtcblxuICB2YXIgYWRkaXRpb24gPSB2YWx1ZSA9PSBudWxsID8ge30gOiBfZGVmaW5lUHJvcGVydHkoe30sIGtleSwgdmFsdWUpO1xuICByZXR1cm4gKDAsIF9vYmplY3QyWydkZWZhdWx0J10pKHt9LCBhY2MsIGFkZGl0aW9uKTtcbn1cblxuZnVuY3Rpb24gaW50ZXJuYWxOb2RlQ29tcGFyZShhLCBiLCBsZW5Db21wLCBpc0xvb3NlKSB7XG4gIGlmIChhID09PSBiKSByZXR1cm4gdHJ1ZTtcbiAgaWYgKCFhIHx8ICFiKSByZXR1cm4gZmFsc2U7XG4gIGlmIChhLnR5cGUgIT09IGIudHlwZSkgcmV0dXJuIGZhbHNlO1xuXG4gIHZhciBsZWZ0ID0gcHJvcHNPZk5vZGUoYSk7XG4gIHZhciByaWdodCA9IHByb3BzT2ZOb2RlKGIpO1xuICBpZiAoaXNMb29zZSkge1xuICAgIGxlZnQgPSAoMCwgX29iamVjdDRbJ2RlZmF1bHQnXSkobGVmdCkucmVkdWNlKHJlbW92ZU51bGxhcnlSZWR1Y2VyLCB7fSk7XG4gICAgcmlnaHQgPSAoMCwgX29iamVjdDRbJ2RlZmF1bHQnXSkocmlnaHQpLnJlZHVjZShyZW1vdmVOdWxsYXJ5UmVkdWNlciwge30pO1xuICB9XG5cbiAgdmFyIGxlZnRLZXlzID0gT2JqZWN0LmtleXMobGVmdCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVmdEtleXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICB2YXIgcHJvcCA9IGxlZnRLZXlzW2ldO1xuICAgIC8vIHdlIHdpbGwgY2hlY2sgY2hpbGRyZW4gbGF0ZXJcbiAgICBpZiAocHJvcCA9PT0gJ2NoaWxkcmVuJykge1xuICAgICAgLy8gY29udGludWU7XG4gICAgfSBlbHNlIGlmICghKHByb3AgaW4gcmlnaHQpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSBlbHNlIGlmIChyaWdodFtwcm9wXSA9PT0gbGVmdFtwcm9wXSkge1xuICAgICAgLy8gY29udGludWU7XG4gICAgfSBlbHNlIGlmIChfdHlwZW9mKHJpZ2h0W3Byb3BdKSA9PT0gX3R5cGVvZihsZWZ0W3Byb3BdKSAmJiBfdHlwZW9mKGxlZnRbcHJvcF0pID09PSAnb2JqZWN0Jykge1xuICAgICAgaWYgKCEoMCwgX2xvZGFzaDJbJ2RlZmF1bHQnXSkobGVmdFtwcm9wXSwgcmlnaHRbcHJvcF0pKSByZXR1cm4gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICB2YXIgbGVmdEhhc0NoaWxkcmVuID0gJ2NoaWxkcmVuJyBpbiBsZWZ0O1xuICB2YXIgcmlnaHRIYXNDaGlsZHJlbiA9ICdjaGlsZHJlbicgaW4gcmlnaHQ7XG4gIHZhciBjaGlsZENvbXBhcmUgPSBpc0xvb3NlID8gY2hpbGRyZW5NYXRjaCA6IGNoaWxkcmVuRXF1YWw7XG4gIGlmIChsZWZ0SGFzQ2hpbGRyZW4gfHwgcmlnaHRIYXNDaGlsZHJlbikge1xuICAgIGlmICghY2hpbGRDb21wYXJlKGNoaWxkcmVuVG9TaW1wbGlmaWVkQXJyYXkobGVmdC5jaGlsZHJlbiwgaXNMb29zZSksIGNoaWxkcmVuVG9TaW1wbGlmaWVkQXJyYXkocmlnaHQuY2hpbGRyZW4sIGlzTG9vc2UpLCBsZW5Db21wKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGlmICghaXNUZXh0dWFsTm9kZShhKSkge1xuICAgIHZhciByaWdodEtleXMgPSBPYmplY3Qua2V5cyhyaWdodCk7XG4gICAgcmV0dXJuIGxlbkNvbXAobGVmdEtleXMubGVuZ3RoIC0gbGVmdEhhc0NoaWxkcmVuLCByaWdodEtleXMubGVuZ3RoIC0gcmlnaHRIYXNDaGlsZHJlbik7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIG5vZGVNYXRjaGVzKGEsIGIpIHtcbiAgdmFyIGxlbkNvbXAgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IF9vYmplY3RJczJbJ2RlZmF1bHQnXTtcblxuICByZXR1cm4gaW50ZXJuYWxOb2RlQ29tcGFyZShhLCBiLCBsZW5Db21wLCB0cnVlKTtcbn1cblxuZnVuY3Rpb24gbm9kZUVxdWFsKGEsIGIpIHtcbiAgdmFyIGxlbkNvbXAgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IF9vYmplY3RJczJbJ2RlZmF1bHQnXTtcblxuICByZXR1cm4gaW50ZXJuYWxOb2RlQ29tcGFyZShhLCBiLCBsZW5Db21wLCBmYWxzZSk7XG59XG5cbmZ1bmN0aW9uIGNvbnRhaW5zQ2hpbGRyZW5TdWJBcnJheShtYXRjaCwgbm9kZSwgc3ViQXJyYXkpIHtcbiAgdmFyIGNoaWxkcmVuID0gKDAsIF9SU1RUcmF2ZXJzYWwuY2hpbGRyZW5PZk5vZGUpKG5vZGUpO1xuICB2YXIgY2hlY2tlciA9IGZ1bmN0aW9uIGNoZWNrZXIoXywgaSkge1xuICAgIHJldHVybiBhcnJheXNFcXVhbChtYXRjaCwgY2hpbGRyZW4uc2xpY2UoaSwgaSArIHN1YkFycmF5Lmxlbmd0aCksIHN1YkFycmF5KTtcbiAgfTtcbiAgcmV0dXJuIGNoaWxkcmVuLnNvbWUoY2hlY2tlcik7XG59XG5cbmZ1bmN0aW9uIGFycmF5c0VxdWFsKG1hdGNoLCBsZWZ0LCByaWdodCkge1xuICByZXR1cm4gbGVmdC5sZW5ndGggPT09IHJpZ2h0Lmxlbmd0aCAmJiBsZWZ0LmV2ZXJ5KGZ1bmN0aW9uIChlbCwgaSkge1xuICAgIHJldHVybiBtYXRjaChlbCwgcmlnaHRbaV0pO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gY2hpbGRyZW5Ub0FycmF5KGNoaWxkcmVuKSB7XG4gIHZhciByZXN1bHQgPSBbXTtcblxuICB2YXIgcHVzaCA9IGZ1bmN0aW9uIHB1c2goZWwpIHtcbiAgICBpZiAoZWwgPT09IG51bGwgfHwgZWwgPT09IGZhbHNlIHx8IHR5cGVvZiBlbCA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybjtcbiAgICByZXN1bHQucHVzaChlbCk7XG4gIH07XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pKSB7XG4gICAgY2hpbGRyZW4uZm9yRWFjaChwdXNoKTtcbiAgfSBlbHNlIHtcbiAgICBwdXNoKGNoaWxkcmVuKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBjaGlsZHJlblRvU2ltcGxpZmllZEFycmF5KG5vZGVDaGlsZHJlbikge1xuICB2YXIgaXNMb29zZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZmFsc2U7XG5cbiAgdmFyIGNoaWxkcmVuQXJyYXkgPSBjaGlsZHJlblRvQXJyYXkobm9kZUNoaWxkcmVuKTtcbiAgdmFyIHNpbXBsaWZpZWRBcnJheSA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW5BcnJheS5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHZhciBjaGlsZCA9IGNoaWxkcmVuQXJyYXlbaV07XG4gICAgdmFyIHByZXZpb3VzQ2hpbGQgPSBzaW1wbGlmaWVkQXJyYXkucG9wKCk7XG5cbiAgICBpZiAodHlwZW9mIHByZXZpb3VzQ2hpbGQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBzaW1wbGlmaWVkQXJyYXkucHVzaChjaGlsZCk7XG4gICAgfSBlbHNlIGlmIChpc1RleHR1YWxOb2RlKGNoaWxkKSAmJiBpc1RleHR1YWxOb2RlKHByZXZpb3VzQ2hpbGQpKSB7XG4gICAgICBzaW1wbGlmaWVkQXJyYXkucHVzaChwcmV2aW91c0NoaWxkICsgY2hpbGQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzaW1wbGlmaWVkQXJyYXkucHVzaChwcmV2aW91c0NoaWxkKTtcbiAgICAgIHNpbXBsaWZpZWRBcnJheS5wdXNoKGNoaWxkKTtcbiAgICB9XG4gIH1cblxuICBpZiAoaXNMb29zZSkge1xuICAgIHJldHVybiBzaW1wbGlmaWVkQXJyYXkubWFwKGZ1bmN0aW9uICh4KSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHggPT09ICdzdHJpbmcnID8gKDAsIF9zdHJpbmdQcm90b3R5cGUyWydkZWZhdWx0J10pKHgpIDogeDtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBzaW1wbGlmaWVkQXJyYXk7XG59XG5cbmZ1bmN0aW9uIGlzVGV4dHVhbE5vZGUobm9kZSkge1xuICByZXR1cm4gdHlwZW9mIG5vZGUgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBub2RlID09PSAnbnVtYmVyJztcbn1cblxuZnVuY3Rpb24gaXNSZWFjdEVsZW1lbnRBbGlrZShhcmcsIGFkYXB0ZXIpIHtcbiAgcmV0dXJuIGFkYXB0ZXIuaXNWYWxpZEVsZW1lbnQoYXJnKSB8fCBpc1RleHR1YWxOb2RlKGFyZykgfHwgQXJyYXkuaXNBcnJheShhcmcpO1xufVxuXG4vLyBUT0RPKGxtcik6IGNhbiB3ZSBnZXQgcmlkIG9mIHRoaXMgb3V0c2lkZSBvZiB0aGUgYWRhcHRlcj9cbmZ1bmN0aW9uIHdpdGhTZXRTdGF0ZUFsbG93ZWQoZm4pIHtcbiAgLy8gTk9URShsbXIpOlxuICAvLyB0aGlzIGlzIGN1cnJlbnRseSBoZXJlIHRvIGNpcmN1bXZlbnQgYSBSZWFjdCBidWcgd2hlcmUgYHNldFN0YXRlKClgIGlzXG4gIC8vIG5vdCBhbGxvd2VkIHdpdGhvdXQgZ2xvYmFsIGJlaW5nIGRlZmluZWQuXG4gIHZhciBjbGVhbnVwID0gZmFsc2U7XG4gIGlmICh0eXBlb2YgZ2xvYmFsLmRvY3VtZW50ID09PSAndW5kZWZpbmVkJykge1xuICAgIGNsZWFudXAgPSB0cnVlO1xuICAgIGdsb2JhbC5kb2N1bWVudCA9IHt9O1xuICB9XG4gIGZuKCk7XG4gIGlmIChjbGVhbnVwKSB7XG4gICAgLy8gVGhpcyB3b3JrcyBhcm91bmQgYSBidWcgaW4gbm9kZS9qZXN0IGluIHRoYXQgZGV2ZWxvcGVycyBhcmVuJ3QgYWJsZSB0b1xuICAgIC8vIGRlbGV0ZSB0aGluZ3MgZnJvbSBnbG9iYWwgd2hlbiBydW5uaW5nIGluIGEgbm9kZSB2bS5cbiAgICBnbG9iYWwuZG9jdW1lbnQgPSB1bmRlZmluZWQ7XG4gICAgZGVsZXRlIGdsb2JhbC5kb2N1bWVudDtcbiAgfVxufVxuXG5mdW5jdGlvbiBBTkQoZm5zKSB7XG4gIHZhciBmbnNSZXZlcnNlZCA9IGZucy5zbGljZSgpLnJldmVyc2UoKTtcbiAgcmV0dXJuIGZ1bmN0aW9uICh4KSB7XG4gICAgcmV0dXJuIGZuc1JldmVyc2VkLmV2ZXJ5KGZ1bmN0aW9uIChmbikge1xuICAgICAgcmV0dXJuIGZuKHgpO1xuICAgIH0pO1xuICB9O1xufVxuXG5mdW5jdGlvbiBkaXNwbGF5TmFtZU9mTm9kZShub2RlKSB7XG4gIGlmICghbm9kZSkgcmV0dXJuIG51bGw7XG5cbiAgdmFyIHR5cGUgPSBub2RlLnR5cGU7XG5cblxuICBpZiAoIXR5cGUpIHJldHVybiBudWxsO1xuXG4gIHJldHVybiB0eXBlLmRpc3BsYXlOYW1lIHx8ICh0eXBlb2YgdHlwZSA9PT0gJ2Z1bmN0aW9uJyA/ICgwLCBfZnVuY3Rpb25Qcm90b3R5cGUyWydkZWZhdWx0J10pKHR5cGUpIDogdHlwZS5uYW1lIHx8IHR5cGUpO1xufVxuXG5mdW5jdGlvbiBzeW0ocykge1xuICByZXR1cm4gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyA/IFN5bWJvbFsnZm9yJ10oJ2VuenltZS4nICsgU3RyaW5nKHMpKSA6IHM7XG59XG5cbmZ1bmN0aW9uIHByaXZhdGVTZXQob2JqLCBwcm9wLCB2YWx1ZSkge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBwcm9wLCB7XG4gICAgdmFsdWU6IHZhbHVlLFxuICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgIHdyaXRhYmxlOiB0cnVlXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBjbG9uZUVsZW1lbnQoYWRhcHRlciwgZWwsIHByb3BzKSB7XG4gIHJldHVybiBhZGFwdGVyLmNyZWF0ZUVsZW1lbnQoZWwudHlwZSwgKDAsIF9vYmplY3QyWydkZWZhdWx0J10pKHt9LCBlbC5wcm9wcywgcHJvcHMpKTtcbn1cblxuZnVuY3Rpb24gc3B5TWV0aG9kKGluc3RhbmNlLCBtZXRob2ROYW1lKSB7XG4gIHZhciBnZXRTdHViID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBmdW5jdGlvbiAoKSB7fTtcblxuICB2YXIgbGFzdFJldHVyblZhbHVlID0gdm9pZCAwO1xuICB2YXIgb3JpZ2luYWxNZXRob2QgPSBpbnN0YW5jZVttZXRob2ROYW1lXTtcbiAgdmFyIGhhc093biA9ICgwLCBfaGFzMlsnZGVmYXVsdCddKShpbnN0YW5jZSwgbWV0aG9kTmFtZSk7XG4gIHZhciBkZXNjcmlwdG9yID0gdm9pZCAwO1xuICBpZiAoaGFzT3duKSB7XG4gICAgZGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaW5zdGFuY2UsIG1ldGhvZE5hbWUpO1xuICB9XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShpbnN0YW5jZSwgbWV0aG9kTmFtZSwge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBlbnVtZXJhYmxlOiAhZGVzY3JpcHRvciB8fCAhIWRlc2NyaXB0b3IuZW51bWVyYWJsZSxcbiAgICB2YWx1ZTogZ2V0U3R1YihvcmlnaW5hbE1ldGhvZCkgfHwgZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gc3BpZWQoKSB7XG4gICAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciByZXN1bHQgPSBvcmlnaW5hbE1ldGhvZC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgbGFzdFJldHVyblZhbHVlID0gcmVzdWx0O1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc3BpZWQ7XG4gICAgfSgpXG4gIH0pO1xuICByZXR1cm4ge1xuICAgIHJlc3RvcmU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIHJlc3RvcmUoKSB7XG4gICAgICAgIGlmIChoYXNPd24pIHtcbiAgICAgICAgICBpZiAoZGVzY3JpcHRvcikge1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGluc3RhbmNlLCBtZXRob2ROYW1lLCBkZXNjcmlwdG9yKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLyogZXNsaW50LWRpc2FibGUgbm8tcGFyYW0tcmVhc3NpZ24gKi9cbiAgICAgICAgICAgIGluc3RhbmNlW21ldGhvZE5hbWVdID0gb3JpZ2luYWxNZXRob2Q7XG4gICAgICAgICAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLXBhcmFtLXJlYXNzaWduICovXG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXBhcmFtLXJlYXNzaWduICovXG4gICAgICAgICAgZGVsZXRlIGluc3RhbmNlW21ldGhvZE5hbWVdO1xuICAgICAgICAgIC8qIGVzbGludC1lbmFibGUgbm8tcGFyYW0tcmVhc3NpZ24gKi9cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzdG9yZTtcbiAgICB9KCksXG4gICAgZ2V0TGFzdFJldHVyblZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBnZXRMYXN0UmV0dXJuVmFsdWUoKSB7XG4gICAgICAgIHJldHVybiBsYXN0UmV0dXJuVmFsdWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBnZXRMYXN0UmV0dXJuVmFsdWU7XG4gICAgfSgpXG4gIH07XG59XG5cbmZ1bmN0aW9uIGlzRW1wdHlWYWx1ZShyZW5kZXJlZFZhbHVlKSB7XG4gIHJldHVybiByZW5kZXJlZFZhbHVlID09PSBudWxsIHx8IHJlbmRlcmVkVmFsdWUgPT09IGZhbHNlO1xufVxuXG5mdW5jdGlvbiByZW5kZXJlZERpdmUobm9kZXMpIHtcbiAgaWYgKGlzRW1wdHlWYWx1ZShub2RlcykpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBbXS5jb25jYXQobm9kZXMpLmV2ZXJ5KGZ1bmN0aW9uIChuKSB7XG4gICAgaWYgKG4pIHtcbiAgICAgIHZhciByZW5kZXJlZCA9IG4ucmVuZGVyZWQ7XG5cbiAgICAgIHJldHVybiBpc0VtcHR5VmFsdWUocmVuZGVyZWQpIHx8IHJlbmRlcmVkRGl2ZShyZW5kZXJlZCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGlzRW1wdHlWYWx1ZShuKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGxvYWRDaGVlcmlvUm9vdChodG1sKSB7XG4gIGlmICghaHRtbCkge1xuICAgIHJldHVybiBfY2hlZXJpbzJbJ2RlZmF1bHQnXS5yb290KCk7XG4gIH1cblxuICBpZiAoISgwLCBfdXRpbHMuaXNIdG1sKShodG1sKSkge1xuICAgIC8vIHVzZSBpc0RvY3VtZW50PWZhbHNlIHRvIGNyZWF0ZSBmcmFnbWVudFxuICAgIHJldHVybiBfY2hlZXJpbzJbJ2RlZmF1bHQnXS5sb2FkKGh0bWwsIG51bGwsIGZhbHNlKS5yb290KCk7XG4gIH1cblxuICByZXR1cm4gX2NoZWVyaW8yWydkZWZhdWx0J10ubG9hZCgnJykoaHRtbCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTR1TDNOeVl5OVZkR2xzY3k1cWN5SmRMQ0p1WVcxbGN5STZXeUpuWlhSQlpHRndkR1Z5SWl3aWJXRnJaVTl3ZEdsdmJuTWlMQ0pwYzBOMWMzUnZiVU52YlhCdmJtVnVkQ0lzSW1selEzVnpkRzl0UTI5dGNHOXVaVzUwUld4bGJXVnVkQ0lzSW5CeWIzQnpUMlpPYjJSbElpd2lkSGx3WlU5bVRtOWtaU0lzSW01dlpHVklZWE5VZVhCbElpd2libTlrWlUxaGRHTm9aWE1pTENKdWIyUmxSWEYxWVd3aUxDSmpiMjUwWVdsdWMwTm9hV3hrY21WdVUzVmlRWEp5WVhraUxDSmphR2xzWkhKbGJsUnZVMmx0Y0d4cFptbGxaRUZ5Y21GNUlpd2lhWE5TWldGamRFVnNaVzFsYm5SQmJHbHJaU0lzSW5kcGRHaFRaWFJUZEdGMFpVRnNiRzkzWldRaUxDSkJUa1FpTENKa2FYTndiR0Y1VG1GdFpVOW1UbTlrWlNJc0luTjViU0lzSW5CeWFYWmhkR1ZUWlhRaUxDSmpiRzl1WlVWc1pXMWxiblFpTENKemNIbE5aWFJvYjJRaUxDSnBjMFZ0Y0hSNVZtRnNkV1VpTENKeVpXNWtaWEpsWkVScGRtVWlMQ0pzYjJGa1EyaGxaWEpwYjFKdmIzUWlMQ0pKVkVWU1FWUlBVbDlUV1UxQ1Qwd2lMQ0pUZVcxaWIyd2lMQ0pwZEdWeVlYUnZjaUlzSW05d2RHbHZibk1pTENKamIyNXpiMnhsSWl3aWQyRnliaUlzSW5aaGJHbGtZWFJsVFc5MWJuUlBjSFJwYjI1eklpd2lZWFIwWVdOb1ZHOGlMQ0pvZVdSeVlYUmxTVzRpTENKVWVYQmxSWEp5YjNJaUxDSmpiMjVtYVdkQmRIUmhZMmhVYnlJc0ltTnZibVpwWjBoNVpISmhkR1ZKYmlJc0ltTnZibVpwWnlJc0ltWnBibUZzUVhSMFlXTm9WRzhpTENKMWJtUmxabWx1WldRaUxDSm1hVzVoYkVoNVpISmhkR1ZKYmlJc0ltMXZkVzUwVkdGeVoyVjBjeUlzSW1OdmJYQnZibVZ1ZENJc0ltRmtZWEIwWlhJaUxDSnBibk4wSWl3aWFYTldZV3hwWkVWc1pXMWxiblFpTENKMGVYQmxJaXdpYm05a1pTSXNJbkJ5YjNCeklpd2labWxzZEdWeUlpd2lkbUZzZFdVaUxDSnlaV1IxWTJVaUxDSmhZMk1pTENKclpYa2lMQ0prYVhOd2JHRjVUbUZ0WlNJc0ltNWhiV1VpTENKcGJuUmxjbTVoYkVOb2FXeGtjbVZ1UTI5dGNHRnlaU0lzSW1FaUxDSmlJaXdpYkdWdVEyOXRjQ0lzSW1selRHOXZjMlVpTENKdWIyUmxRMjl0Y0dGeVpTSXNJa0Z5Y21GNUlpd2lhWE5CY25KaGVTSXNJbVpzWVhSQklpd2lTVzVtYVc1cGRIa2lMQ0ptYkdGMFFpSXNJbXhsYm1kMGFDSXNJbWtpTENKamFHbHNaSEpsYmsxaGRHTm9JaXdpWTJocGJHUnlaVzVGY1hWaGJDSXNJbkpsYlc5MlpVNTFiR3hoY25sU1pXUjFZMlZ5SWl3aVlXUmthWFJwYjI0aUxDSnBiblJsY201aGJFNXZaR1ZEYjIxd1lYSmxJaXdpYkdWbWRDSXNJbkpwWjJoMElpd2liR1ZtZEV0bGVYTWlMQ0pQWW1wbFkzUWlMQ0pyWlhseklpd2ljSEp2Y0NJc0lteGxablJJWVhORGFHbHNaSEpsYmlJc0luSnBaMmgwU0dGelEyaHBiR1J5Wlc0aUxDSmphR2xzWkVOdmJYQmhjbVVpTENKamFHbHNaSEpsYmlJc0ltbHpWR1Y0ZEhWaGJFNXZaR1VpTENKeWFXZG9kRXRsZVhNaUxDSnBjeUlzSW0xaGRHTm9JaXdpYzNWaVFYSnlZWGtpTENKamFHVmphMlZ5SWl3aVh5SXNJbUZ5Y21GNWMwVnhkV0ZzSWl3aWMyeHBZMlVpTENKemIyMWxJaXdpWlhabGNua2lMQ0psYkNJc0ltTm9hV3hrY21WdVZHOUJjbkpoZVNJc0luSmxjM1ZzZENJc0luQjFjMmdpTENKbWIzSkZZV05vSWl3aWJtOWtaVU5vYVd4a2NtVnVJaXdpWTJocGJHUnlaVzVCY25KaGVTSXNJbk5wYlhCc2FXWnBaV1JCY25KaGVTSXNJbU5vYVd4a0lpd2ljSEpsZG1sdmRYTkRhR2xzWkNJc0luQnZjQ0lzSW0xaGNDSXNJbmdpTENKaGNtY2lMQ0ptYmlJc0ltTnNaV0Z1ZFhBaUxDSm5iRzlpWVd3aUxDSmtiMk4xYldWdWRDSXNJbVp1Y3lJc0ltWnVjMUpsZG1WeWMyVmtJaXdpY21WMlpYSnpaU0lzSW5NaUxDSnZZbW9pTENKa1pXWnBibVZRY205d1pYSjBlU0lzSW1WdWRXMWxjbUZpYkdVaUxDSjNjbWwwWVdKc1pTSXNJbU55WldGMFpVVnNaVzFsYm5RaUxDSnBibk4wWVc1alpTSXNJbTFsZEdodlpFNWhiV1VpTENKblpYUlRkSFZpSWl3aWJHRnpkRkpsZEhWeWJsWmhiSFZsSWl3aWIzSnBaMmx1WVd4TlpYUm9iMlFpTENKb1lYTlBkMjRpTENKa1pYTmpjbWx3ZEc5eUlpd2laMlYwVDNkdVVISnZjR1Z5ZEhsRVpYTmpjbWx3ZEc5eUlpd2lZMjl1Wm1sbmRYSmhZbXhsSWl3aWMzQnBaV1FpTENKaGNtZHpJaXdpWVhCd2JIa2lMQ0p5WlhOMGIzSmxJaXdpWjJWMFRHRnpkRkpsZEhWeWJsWmhiSFZsSWl3aWNtVnVaR1Z5WldSV1lXeDFaU0lzSW01dlpHVnpJaXdpWTI5dVkyRjBJaXdpYmlJc0luSmxibVJsY21Wa0lpd2lhSFJ0YkNJc0ltTm9aV1Z5YVc4aUxDSnliMjkwSWl3aWJHOWhaQ0pkTENKdFlYQndhVzVuY3lJNklqczdPenM3T3pzN096czdVVUZyUW1kQ1FTeFZMRWRCUVVGQkxGVTdVVUZYUVVNc1Z5eEhRVUZCUVN4WE8xRkJlVUpCUXl4cFFpeEhRVUZCUVN4cFFqdFJRVkZCUXl4M1FpeEhRVUZCUVN4M1FqdFJRVTlCUXl4WExFZEJRVUZCTEZjN1VVRk5RVU1zVlN4SFFVRkJRU3hWTzFGQlNVRkRMRmNzUjBGQlFVRXNWenRSUVdkSFFVTXNWeXhIUVVGQlFTeFhPMUZCU1VGRExGTXNSMEZCUVVFc1V6dFJRVWxCUXl4M1FpeEhRVUZCUVN4M1FqdFJRVEJDUVVNc2VVSXNSMEZCUVVFc2VVSTdVVUUyUWtGRExHMUNMRWRCUVVGQkxHMUNPMUZCUzBGRExHMUNMRWRCUVVGQkxHMUNPMUZCYTBKQlF5eEhMRWRCUVVGQkxFYzdVVUZMUVVNc2FVSXNSMEZCUVVFc2FVSTdVVUZWUVVNc1J5eEhRVUZCUVN4SE8xRkJTVUZETEZVc1IwRkJRVUVzVlR0UlFWRkJReXhaTEVkQlFVRkJMRms3VVVGUFFVTXNVeXhIUVVGQlFTeFRPenM3T3pzN096czdPenM3T3p0UlFYbERRVU1zV1N4SFFVRkJRU3haTzFGQlNVRkRMRmtzUjBGQlFVRXNXVHRSUVdWQlF5eGxMRWRCUVVGQkxHVTdPenM3T3p0QlFXeFhhRUk3T3pzN1FVRkRRVHM3T3p0QlFVTkJPenM3TzBGQlEwRTdPenM3UVVGRFFUczdPenRCUVVOQk96czdPMEZCUTBFN096czdRVUZEUVRzN096dEJRVU5CT3p0QlFVVkJPenRCUVVOQk96dEJRVU5CT3pzN08wRkJRMEU3T3pzN096czdPelpPUVdSQk96czdRVUZuUWs4c1NVRkJUVU1zTkVOQlFXdENMRTlCUVU5RExFMUJRVkFzUzBGQmEwSXNWVUZCYkVJc1NVRkJaME5CTEU5QlFVOURMRkZCUVM5RU96dEJRVVZCTEZOQlFWTjRRaXhWUVVGVUxFZEJRV3RETzBGQlFVRXNUVUZCWkhsQ0xFOUJRV01zZFVWQlFVb3NSVUZCU1RzN1FVRkRka05ETEZWQlFWRkRMRWxCUVZJc1EwRkJZU3h6UlVGQllqdEJRVU5CTEZOQlFVOHNOa0pCUVdWR0xFOUJRV1lzUTBGQlVEdEJRVU5FT3p0QlFVVkVMRk5CUVZOSExHOUNRVUZVTEVOQlFUaENReXhSUVVFNVFpeEZRVUYzUTBNc1UwRkJlRU1zUlVGQmJVUTdRVUZEYWtRc1RVRkJTVVFzV1VGQldVTXNVMEZCV2l4SlFVRjVRa1FzWVVGQllVTXNVMEZCTVVNc1JVRkJjVVE3UVVGRGJrUXNWVUZCVFN4SlFVRkpReXhUUVVGS0xFTkJRV01zTmtkQlFXUXNRMEZCVGp0QlFVTkVPMEZCUTBZN08wRkJSVTBzVTBGQlV6bENMRmRCUVZRc1EwRkJjVUozUWl4UFFVRnlRaXhGUVVFNFFqdEJRVUZCTEdGQlEzbERMSGxDUVVSNlF6dEJRVUZCTEUxQlEycENUeXhqUVVScFFpeFJRVU16UWtnc1VVRkVNa0k3UVVGQlFTeE5RVU5WU1N4bFFVUldMRkZCUTBSSUxGTkJSRU03UVVGQlFTeE5RVU00UWtrc1RVRkVPVUk3TzBGQlJXNURUaXgxUWtGQmNVSkpMR05CUVhKQ0xFVkJRWEZEUXl4bFFVRnlRenM3UVVGR2JVTXNUVUZKTTBKS0xGRkJTakpDTEVkQlNVaEtMRTlCU2tjc1EwRkpNMEpKTEZGQlNqSkNPMEZCUVVFc1RVRkpha0pETEZOQlNtbENMRWRCU1VoTUxFOUJTa2NzUTBGSmFrSkxMRk5CU21sQ096dEJRVXR1UTBZc2RVSkJRWEZDUXl4UlFVRnlRaXhGUVVFclFrTXNVMEZCTDBJN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4TlFVRk5TeXhuUWtGQlowSk1MR0ZCUVdGSExHVkJRV0lzU1VGQlowTkVMR05CUVdoRExFbEJRV3RFU0N4UlFVRnNSQ3hKUVVFNFJFOHNVMEZCY0VZN1FVRkRRU3hOUVVGTlF5eHBRa0ZCYVVKUUxHRkJRV0ZITEdWQlFXSXNTVUZCWjBOSExGTkJRWFpFTzBGQlEwRXNUVUZCVFVVc05FTkJRMEZJTEdsQ1FVRnBRaXhGUVVGRlRpeFZRVUZWVFN4aFFVRmFMRVZCUkdwQ0xFVkJSVUZGTEd0Q1FVRnJRaXhGUVVGRlVDeFhRVUZYVHl4alFVRmlMRVZCUm14Q0xFTkJRVTQ3TzBGQlMwRXNjME5CUTB0SUxFMUJSRXdzUlVGRlMxUXNUMEZHVEN4RlFVZExZU3haUVVoTU8wRkJTMFE3TzBGQlJVMHNVMEZCVTNCRExHbENRVUZVTEVOQlFUSkNjVU1zVTBGQk0wSXNSVUZCYzBORExFOUJRWFJETEVWQlFTdERPMEZCUTNCRUxHOURRVUZuUWtFc1QwRkJhRUk3UVVGRFFTeE5RVUZKUVN4UlFVRlJkRU1zYVVKQlFWb3NSVUZCSzBJN1FVRkROMElzVjBGQlR5eERRVUZETEVOQlFVTnpReXhSUVVGUmRFTXNhVUpCUVZJc1EwRkJNRUp4UXl4VFFVRXhRaXhEUVVGVU8wRkJRMFE3UVVGRFJDeFRRVUZQTEU5QlFVOUJMRk5CUVZBc1MwRkJjVUlzVlVGQk5VSTdRVUZEUkRzN1FVRkZUU3hUUVVGVGNFTXNkMEpCUVZRc1EwRkJhME56UXl4SlFVRnNReXhGUVVGM1EwUXNUMEZCZUVNc1JVRkJhVVE3UVVGRGRFUXNUVUZCU1VFc1VVRkJVWEpETEhkQ1FVRmFMRVZCUVhORE8wRkJRM0JETEZkQlFVOHNRMEZCUXl4RFFVRkRjVU1zVVVGQlVYSkRMSGRDUVVGU0xFTkJRV2xEYzBNc1NVRkJha01zUTBGQlZEdEJRVU5FTzBGQlEwUXNVMEZCVHl4RFFVRkRMRU5CUVVOQkxFbEJRVVlzU1VGQlZVUXNVVUZCVVVVc1kwRkJVaXhEUVVGMVFrUXNTVUZCZGtJc1EwRkJWaXhKUVVFd1F5eFBRVUZQUVN4TFFVRkxSU3hKUVVGYUxFdEJRWEZDTEZWQlFYUkZPMEZCUTBRN08wRkJSVTBzVTBGQlUzWkRMRmRCUVZRc1EwRkJjVUozUXl4SlFVRnlRaXhGUVVFeVFqdEJRVU5vUXl4VFFVRlBMSGxDUVVGVFFTeFJRVUZSUVN4TFFVRkxReXhMUVVGa0xFbEJRWGRDTEVWQlFXaERMRVZCUTBwRExFMUJSRWtzUTBGRFJ6dEJRVUZCTzBGQlFVRXNVVUZCU1VNc1MwRkJTanM3UVVGQlFTeFhRVUZsTEU5QlFVOUJMRXRCUVZBc1MwRkJhVUlzVjBGQmFFTTdRVUZCUVN4SFFVUklMRVZCUlVwRExFMUJSa2tzUTBGRlJ5eFZRVUZEUXl4SFFVRkVPMEZCUVVFN1FVRkJRU3hSUVVGUFF5eEhRVUZRTzBGQlFVRXNVVUZCV1Vnc1MwRkJXanM3UVVGQlFTeFhRVUYxUWl4NVFrRkJZMFVzUjBGQlpDeHpRa0ZCYzBKRExFZEJRWFJDTEVWQlFUUkNTQ3hMUVVFMVFpeEZRVUYyUWp0QlFVRkJMRWRCUmtnc1JVRkZaMFVzUlVGR2FFVXNRMEZCVUR0QlFVZEVPenRCUVVWTkxGTkJRVk14UXl4VlFVRlVMRU5CUVc5Q2RVTXNTVUZCY0VJc1JVRkJNRUk3UVVGREwwSXNVMEZCVDBFc1QwRkJUMEVzUzBGQlMwUXNTVUZCV2l4SFFVRnRRaXhKUVVFeFFqdEJRVU5FT3p0QlFVVk5MRk5CUVZOeVF5eFhRVUZVTEVOQlFYRkNjME1zU1VGQmNrSXNSVUZCTWtKRUxFbEJRVE5DTEVWQlFXbERPMEZCUTNSRExFMUJRVWtzUTBGQlEwRXNTVUZCUkN4SlFVRlRMRU5CUVVORExFbEJRV1FzUlVGQmIwSXNUMEZCVHl4TFFVRlFPenRCUVVWd1FpeE5RVUZOU2l4VlFVRlZMRGhDUVVGb1FqdEJRVU5CTEUxQlFVbEJMRkZCUVZFeFFpeHBRa0ZCV2l4RlFVRXJRanRCUVVNM1FpeFJRVUZOY1VNc1kwRkJZMWdzVVVGQlVURkNMR2xDUVVGU0xFTkJRVEJDT0VJc1NVRkJNVUlzUTBGQmNFSTdRVUZEUVN4WFFVRlBUeXhuUWtGQlowSlNMRWxCUVhaQ08wRkJRMFE3TzBGQlJVUXNUVUZCU1N4RFFVRkRReXhMUVVGTFJDeEpRVUZXTEVWQlFXZENMRTlCUVU4c1MwRkJVRHRCUVVOb1FpeE5RVUZKTEU5QlFVOURMRXRCUVV0RUxFbEJRVm9zUzBGQmNVSXNVVUZCZWtJc1JVRkJiVU1zVDBGQlQwTXNTMEZCUzBRc1NVRkJUQ3hMUVVGalFTeEpRVUZ5UWp0QlFVTnVReXhUUVVGUExFTkJRMHdzVDBGQlQwTXNTMEZCUzBRc1NVRkJXaXhMUVVGeFFpeFZRVUZ5UWl4SFFVRnJReXh2UTBGQllVTXNTMEZCUzBRc1NVRkJiRUlzVFVGQk5FSkJMRWxCUVRsRUxFZEJRWEZGUXl4TFFVRkxSQ3hKUVVGTUxFTkJRVlZUTEVsQlFWWXNTMEZCYlVKVUxFbEJSRzVHTEV0QlJVWkRMRXRCUVV0RUxFbEJRVXdzUTBGQlZWRXNWMEZCVml4TFFVRXdRbElzU1VGR0wwSTdRVUZIUkRzN1FVRkZSQ3hUUVVGVFZTeDFRa0ZCVkN4RFFVRnBRME1zUTBGQmFrTXNSVUZCYjBORExFTkJRWEJETEVWQlFYVkRReXhQUVVGMlF5eEZRVUZuUkVNc1QwRkJhRVFzUlVGQmVVUTdRVUZEZGtRc1RVRkJUVU1zWTBGQlkwUXNWVUZCVld4RUxGZEJRVllzUjBGQmQwSkRMRk5CUVRWRE96dEJRVVZCTEUxQlFVazRReXhOUVVGTlF5eERRVUZXTEVWQlFXRXNUMEZCVHl4SlFVRlFPMEZCUTJJc1RVRkJTU3hEUVVGRFNTeE5RVUZOUXl4UFFVRk9MRU5CUVdOT0xFTkJRV1FzUTBGQlJDeEpRVUZ4UWl4RFFVRkRTeXhOUVVGTlF5eFBRVUZPTEVOQlFXTk1MRU5CUVdRc1EwRkJNVUlzUlVGQk5FTTdRVUZETVVNc1YwRkJUMGNzV1VGQldVb3NRMEZCV2l4RlFVRmxReXhEUVVGbUxFVkJRV3RDUXl4UFFVRnNRaXhEUVVGUU8wRkJRMFE3UVVGRFJDeE5RVUZOU3l4UlFVRlJMR2xEUVVGTFVDeERRVUZNTEVWQlFWRlJMRkZCUVZJc1EwRkJaRHRCUVVOQkxFMUJRVTFETEZGQlFWRXNhVU5CUVV0U0xFTkJRVXdzUlVGQlVVOHNVVUZCVWl4RFFVRmtPMEZCUTBFc1RVRkJTVVFzVFVGQlRVY3NUVUZCVGl4TFFVRnBRa1FzVFVGQlRVTXNUVUZCTTBJc1JVRkJiVU1zVDBGQlR5eExRVUZRTzBGQlEyNURMRTFCUVVsSUxFMUJRVTFITEUxQlFVNHNTMEZCYVVJc1EwRkJha0lzU1VGQmMwSkVMRTFCUVUxRExFMUJRVTRzUzBGQmFVSXNRMEZCTTBNc1JVRkJPRU1zVDBGQlR5eEpRVUZRTzBGQlF6bERMRTlCUVVzc1NVRkJTVU1zU1VGQlNTeERRVUZpTEVWQlFXZENRU3hKUVVGSlNpeE5RVUZOUnl4TlFVRXhRaXhGUVVGclEwTXNTMEZCU3l4RFFVRjJReXhGUVVFd1F6dEJRVU40UXl4UlFVRkpMRU5CUVVOUUxGbEJRVmxITEUxQlFVMUpMRU5CUVU0c1EwRkJXaXhGUVVGelFrWXNUVUZCVFVVc1EwRkJUaXhEUVVGMFFpeEZRVUZuUTFRc1QwRkJhRU1zUTBGQlRDeEZRVUVyUXl4UFFVRlBMRXRCUVZBN1FVRkRhRVE3UVVGRFJDeFRRVUZQTEVsQlFWQTdRVUZEUkRzN1FVRkZSQ3hUUVVGVFZTeGhRVUZVTEVOQlFYVkNXaXhEUVVGMlFpeEZRVUV3UWtNc1EwRkJNVUlzUlVGQk5rSkRMRTlCUVRkQ0xFVkJRWE5ETzBGQlEzQkRMRk5CUVU5SUxIZENRVUYzUWtNc1EwRkJlRUlzUlVGQk1rSkRMRU5CUVROQ0xFVkJRVGhDUXl4UFFVRTVRaXhGUVVGMVF5eEpRVUYyUXl4RFFVRlFPMEZCUTBRN08wRkJSVVFzVTBGQlUxY3NZVUZCVkN4RFFVRjFRbUlzUTBGQmRrSXNSVUZCTUVKRExFTkJRVEZDTEVWQlFUWkNReXhQUVVFM1FpeEZRVUZ6UXp0QlFVTndReXhUUVVGUFNDeDNRa0ZCZDBKRExFTkJRWGhDTEVWQlFUSkNReXhEUVVFelFpeEZRVUU0UWtNc1QwRkJPVUlzUlVGQmRVTXNTMEZCZGtNc1EwRkJVRHRCUVVORU96dEJRVVZFTEZOQlFWTlpMRzlDUVVGVUxFTkJRVGhDYmtJc1IwRkJPVUlzVTBGQmFVUTdRVUZCUVR0QlFVRkJMRTFCUVdKRExFZEJRV0U3UVVGQlFTeE5RVUZTU0N4TFFVRlJPenRCUVVNdlF5eE5RVUZOYzBJc1YwRkJWM1JDTEZOQlFWTXNTVUZCVkN4SFFVRm5RaXhGUVVGb1FpeDFRa0ZCZDBKSExFZEJRWGhDTEVWQlFUaENTQ3hMUVVFNVFpeERRVUZxUWp0QlFVTkJMSE5EUVVGWlJTeEhRVUZhTEVWQlFXOUNiMElzVVVGQmNFSTdRVUZEUkRzN1FVRkZSQ3hUUVVGVFF5eHRRa0ZCVkN4RFFVRTJRbWhDTEVOQlFUZENMRVZCUVdkRFF5eERRVUZvUXl4RlFVRnRRME1zVDBGQmJrTXNSVUZCTkVORExFOUJRVFZETEVWQlFYRkVPMEZCUTI1RUxFMUJRVWxJTEUxQlFVMURMRU5CUVZZc1JVRkJZU3hQUVVGUExFbEJRVkE3UVVGRFlpeE5RVUZKTEVOQlFVTkVMRU5CUVVRc1NVRkJUU3hEUVVGRFF5eERRVUZZTEVWQlFXTXNUMEZCVHl4TFFVRlFPMEZCUTJRc1RVRkJTVVFzUlVGQlJWZ3NTVUZCUml4TFFVRlhXU3hGUVVGRldpeEpRVUZxUWl4RlFVRjFRaXhQUVVGUExFdEJRVkE3TzBGQlJYWkNMRTFCUVVrMFFpeFBRVUZQYmtVc1dVRkJXV3RFTEVOQlFWb3NRMEZCV0R0QlFVTkJMRTFCUVVsclFpeFJRVUZSY0VVc1dVRkJXVzFFTEVOQlFWb3NRMEZCV2p0QlFVTkJMRTFCUVVsRkxFOUJRVW9zUlVGQllUdEJRVU5ZWXl4WFFVRlBMSGxDUVVGUlFTeEpRVUZTTEVWQlFXTjJRaXhOUVVGa0xFTkJRWEZDYjBJc2IwSkJRWEpDTEVWQlFUSkRMRVZCUVRORExFTkJRVkE3UVVGRFFVa3NXVUZCVVN4NVFrRkJVVUVzUzBGQlVpeEZRVUZsZUVJc1RVRkJaaXhEUVVGelFtOUNMRzlDUVVGMFFpeEZRVUUwUXl4RlFVRTFReXhEUVVGU08wRkJRMFE3TzBGQlJVUXNUVUZCVFVzc1YwRkJWME1zVDBGQlQwTXNTVUZCVUN4RFFVRlpTaXhKUVVGYUxFTkJRV3BDTzBGQlEwRXNUMEZCU3l4SlFVRkpUaXhKUVVGSkxFTkJRV0lzUlVGQlowSkJMRWxCUVVsUkxGTkJRVk5VTEUxQlFUZENMRVZCUVhGRFF5eExRVUZMTEVOQlFURkRMRVZCUVRaRE8wRkJRek5ETEZGQlFVMVhMRTlCUVU5SUxGTkJRVk5TTEVOQlFWUXNRMEZCWWp0QlFVTkJPMEZCUTBFc1VVRkJTVmNzVTBGQlV5eFZRVUZpTEVWQlFYbENPMEZCUTNaQ08wRkJRMFFzUzBGR1JDeE5RVVZQTEVsQlFVa3NSVUZCUlVFc1VVRkJVVW9zUzBGQlZpeERRVUZLTEVWQlFYTkNPMEZCUXpOQ0xHRkJRVThzUzBGQlVEdEJRVU5FTEV0QlJrMHNUVUZGUVN4SlFVRkpRU3hOUVVGTlNTeEpRVUZPTEUxQlFXZENUQ3hMUVVGTFN5eEpRVUZNTEVOQlFYQkNMRVZCUVdkRE8wRkJRM0pETzBGQlEwUXNTMEZHVFN4TlFVVkJMRWxCUVVrc1VVRkJUMG9zVFVGQlRVa3NTVUZCVGl4RFFVRlFMR05CUVRoQ1RDeExRVUZMU3l4SlFVRk1MRU5CUVRsQ0xFdEJRVFJETEZGQlFVOU1MRXRCUVV0TExFbEJRVXdzUTBGQlVDeE5RVUZ6UWl4UlFVRjBSU3hGUVVGblJqdEJRVU55Uml4VlFVRkpMRU5CUVVNc2VVSkJRVkZNTEV0QlFVdExMRWxCUVV3c1EwRkJVaXhGUVVGdlFrb3NUVUZCVFVrc1NVRkJUaXhEUVVGd1FpeERRVUZNTEVWQlFYVkRMRTlCUVU4c1MwRkJVRHRCUVVONFF5eExRVVpOTEUxQlJVRTdRVUZEVEN4aFFVRlBMRXRCUVZBN1FVRkRSRHRCUVVOR096dEJRVVZFTEUxQlFVMURMR3RDUVVGclFpeGpRVUZqVGl4SlFVRjBRenRCUVVOQkxFMUJRVTFQTEcxQ1FVRnRRaXhqUVVGalRpeExRVUYyUXp0QlFVTkJMRTFCUVUxUExHVkJRV1YwUWl4VlFVRlZVeXhoUVVGV0xFZEJRVEJDUXl4aFFVRXZRenRCUVVOQkxFMUJRVWxWTEcxQ1FVRnRRa01zWjBKQlFYWkNMRVZCUVhsRE8wRkJRM1pETEZGQlFVa3NRMEZCUTBNc1lVRkRTSEpGTERCQ1FVRXdRalpFTEV0QlFVdFRMRkZCUVM5Q0xFVkJRWGxEZGtJc1QwRkJla01zUTBGRVJ5eEZRVVZJTDBNc01FSkJRVEJDT0VRc1RVRkJUVkVzVVVGQmFFTXNSVUZCTUVOMlFpeFBRVUV4UXl4RFFVWkhMRVZCUjBoRUxFOUJTRWNzUTBGQlRDeEZRVWxITzBGQlEwUXNZVUZCVHl4TFFVRlFPMEZCUTBRN1FVRkRSanM3UVVGRlJDeE5RVUZKTEVOQlFVTjVRaXhqUVVGak0wSXNRMEZCWkN4RFFVRk1MRVZCUVhWQ08wRkJRM0pDTEZGQlFVMDBRaXhaUVVGWlVpeFBRVUZQUXl4SlFVRlFMRU5CUVZsSUxFdEJRVm9zUTBGQmJFSTdRVUZEUVN4WFFVRlBhRUlzVVVGQlVXbENMRk5CUVZOVUxFMUJRVlFzUjBGQmEwSmhMR1ZCUVRGQ0xFVkJRVEpEU3l4VlFVRlZiRUlzVFVGQlZpeEhRVUZ0UW1Nc1owSkJRVGxFTEVOQlFWQTdRVUZEUkRzN1FVRkZSQ3hUUVVGUExFdEJRVkE3UVVGRFJEczdRVUZGVFN4VFFVRlRka1VzVjBGQlZDeERRVUZ4UWl0RExFTkJRWEpDTEVWQlFYZENReXhEUVVGNFFpeEZRVUY1UXp0QlFVRkJMRTFCUVdSRExFOUJRV01zZFVWQlFVb3lRaXh4UWtGQlNUczdRVUZET1VNc1UwRkJUMklzYjBKQlFXOUNhRUlzUTBGQmNFSXNSVUZCZFVKRExFTkJRWFpDTEVWQlFUQkNReXhQUVVFeFFpeEZRVUZ0UXl4SlFVRnVReXhEUVVGUU8wRkJRMFE3TzBGQlJVMHNVMEZCVTJoRUxGTkJRVlFzUTBGQmJVSTRReXhEUVVGdVFpeEZRVUZ6UWtNc1EwRkJkRUlzUlVGQmRVTTdRVUZCUVN4TlFVRmtReXhQUVVGakxIVkZRVUZLTWtJc2NVSkJRVWs3TzBGQlF6VkRMRk5CUVU5aUxHOUNRVUZ2UW1oQ0xFTkJRWEJDTEVWQlFYVkNReXhEUVVGMlFpeEZRVUV3UWtNc1QwRkJNVUlzUlVGQmJVTXNTMEZCYmtNc1EwRkJVRHRCUVVORU96dEJRVVZOTEZOQlFWTXZReXgzUWtGQlZDeERRVUZyUXpKRkxFdEJRV3hETEVWQlFYbERlRU1zU1VGQmVrTXNSVUZCSzBONVF5eFJRVUV2UXl4RlFVRjVSRHRCUVVNNVJDeE5RVUZOVEN4WFFVRlhMR3REUVVGbGNFTXNTVUZCWml4RFFVRnFRanRCUVVOQkxFMUJRVTB3UXl4VlFVRlZMRk5CUVZaQkxFOUJRVlVzUTBGQlEwTXNRMEZCUkN4RlFVRkpkRUlzUTBGQlNqdEJRVUZCTEZkQlFWVjFRaXhaUVVGWlNpeExRVUZhTEVWQlFXMUNTaXhUUVVGVFV5eExRVUZVTEVOQlFXVjRRaXhEUVVGbUxFVkJRV3RDUVN4SlFVRkpiMElzVTBGQlUzSkNMRTFCUVM5Q0xFTkJRVzVDTEVWQlFUSkVjVUlzVVVGQk0wUXNRMEZCVmp0QlFVRkJMRWRCUVdoQ08wRkJRMEVzVTBGQlQwd3NVMEZCVTFVc1NVRkJWQ3hEUVVGalNpeFBRVUZrTEVOQlFWQTdRVUZEUkRzN1FVRkZSQ3hUUVVGVFJTeFhRVUZVTEVOQlFYRkNTaXhMUVVGeVFpeEZRVUUwUW1Jc1NVRkJOVUlzUlVGQmEwTkRMRXRCUVd4RExFVkJRWGxETzBGQlEzWkRMRk5CUVU5RUxFdEJRVXRRTEUxQlFVd3NTMEZCWjBKUkxFMUJRVTFTTEUxQlFYUkNMRWxCUVdkRFR5eExRVUZMYjBJc1MwRkJUQ3hEUVVGWExGVkJRVU5ETEVWQlFVUXNSVUZCU3pOQ0xFTkJRVXc3UVVGQlFTeFhRVUZYYlVJc1RVRkJUVkVzUlVGQlRpeEZRVUZWY0VJc1RVRkJUVkFzUTBGQlRpeERRVUZXTEVOQlFWZzdRVUZCUVN4SFFVRllMRU5CUVhaRE8wRkJRMFE3TzBGQlJVUXNVMEZCVXpSQ0xHVkJRVlFzUTBGQmVVSmlMRkZCUVhwQ0xFVkJRVzFETzBGQlEycERMRTFCUVUxakxGTkJRVk1zUlVGQlpqczdRVUZGUVN4TlFVRk5ReXhQUVVGUExGTkJRVkJCTEVsQlFVOHNRMEZCUTBnc1JVRkJSQ3hGUVVGUk8wRkJRMjVDTEZGQlFVbEJMRTlCUVU4c1NVRkJVQ3hKUVVGbFFTeFBRVUZQTEV0QlFYUkNMRWxCUVN0Q0xFOUJRVTlCTEVWQlFWQXNTMEZCWXl4WFFVRnFSQ3hGUVVFNFJEdEJRVU01UkVVc1YwRkJUME1zU1VGQlVDeERRVUZaU0N4RlFVRmFPMEZCUTBRc1IwRklSRHM3UVVGTFFTeE5RVUZKYWtNc1RVRkJUVU1zVDBGQlRpeERRVUZqYjBJc1VVRkJaQ3hEUVVGS0xFVkJRVFpDTzBGQlF6TkNRU3hoUVVGVFowSXNUMEZCVkN4RFFVRnBRa1FzU1VGQmFrSTdRVUZEUkN4SFFVWkVMRTFCUlU4N1FVRkRURUVzVTBGQlMyWXNVVUZCVER0QlFVTkVPMEZCUTBRc1UwRkJUMk1zVFVGQlVEdEJRVU5FT3p0QlFVVk5MRk5CUVZOd1JpeDVRa0ZCVkN4RFFVRnRRM1ZHTEZsQlFXNURMRVZCUVd0Rk8wRkJRVUVzVFVGQmFrSjRReXhQUVVGcFFpeDFSVUZCVUN4TFFVRlBPenRCUVVOMlJTeE5RVUZOZVVNc1owSkJRV2RDVEN4blFrRkJaMEpKTEZsQlFXaENMRU5CUVhSQ08wRkJRMEVzVFVGQlRVVXNhMEpCUVd0Q0xFVkJRWGhDT3p0QlFVVkJMRTlCUVVzc1NVRkJTV3hETEVsQlFVa3NRMEZCWWl4RlFVRm5Ra0VzU1VGQlNXbERMR05CUVdOc1F5eE5RVUZzUXl4RlFVRXdRME1zUzBGQlN5eERRVUV2UXl4RlFVRnJSRHRCUVVOb1JDeFJRVUZOYlVNc1VVRkJVVVlzWTBGQlkycERMRU5CUVdRc1EwRkJaRHRCUVVOQkxGRkJRVTF2UXl4blFrRkJaMEpHTEdkQ1FVRm5Ra2NzUjBGQmFFSXNSVUZCZEVJN08wRkJSVUVzVVVGQlNTeFBRVUZQUkN4aFFVRlFMRXRCUVhsQ0xGZEJRVGRDTEVWQlFUQkRPMEZCUTNoRFJpeHpRa0ZCWjBKS0xFbEJRV2hDTEVOQlFYRkNTeXhMUVVGeVFqdEJRVU5FTEV0QlJrUXNUVUZGVHl4SlFVRkpia0lzWTBGQlkyMUNMRXRCUVdRc1MwRkJkMEp1UWl4alFVRmpiMElzWVVGQlpDeERRVUUxUWl4RlFVRXdSRHRCUVVNdlJFWXNjMEpCUVdkQ1NpeEpRVUZvUWl4RFFVRnhRazBzWjBKQlFXZENSQ3hMUVVGeVF6dEJRVU5FTEV0QlJrMHNUVUZGUVR0QlFVTk1SQ3h6UWtGQlowSktMRWxCUVdoQ0xFTkJRWEZDVFN4aFFVRnlRanRCUVVOQlJpeHpRa0ZCWjBKS0xFbEJRV2hDTEVOQlFYRkNTeXhMUVVGeVFqdEJRVU5FTzBGQlEwWTdPMEZCUlVRc1RVRkJTVE5ETEU5QlFVb3NSVUZCWVR0QlFVTllMRmRCUVU4d1F5eG5Ra0ZCWjBKSkxFZEJRV2hDTEVOQlFXOUNMRlZCUVVORExFTkJRVVE3UVVGQlFTeGhRVUZSTEU5QlFVOUJMRU5CUVZBc1MwRkJZU3hSUVVGaUxFZEJRWGRDTEd0RFFVRkxRU3hEUVVGTUxFTkJRWGhDTEVkQlFXdERRU3hEUVVFeFF6dEJRVUZCTEV0QlFYQkNMRU5CUVZBN1FVRkRSRHM3UVVGRlJDeFRRVUZQVEN4bFFVRlFPMEZCUTBRN08wRkJSVVFzVTBGQlUyeENMR0ZCUVZRc1EwRkJkVUp5UXl4SlFVRjJRaXhGUVVFMlFqdEJRVU16UWl4VFFVRlBMRTlCUVU5QkxFbEJRVkFzUzBGQlowSXNVVUZCYUVJc1NVRkJORUlzVDBGQlQwRXNTVUZCVUN4TFFVRm5RaXhSUVVGdVJEdEJRVU5FT3p0QlFVVk5MRk5CUVZOcVF5eHRRa0ZCVkN4RFFVRTJRamhHTEVkQlFUZENMRVZCUVd0RGFrVXNUMEZCYkVNc1JVRkJNa003UVVGRGFFUXNVMEZCVDBFc1VVRkJVVVVzWTBGQlVpeERRVUYxUWl0RUxFZEJRWFpDTEV0QlFTdENlRUlzWTBGQlkzZENMRWRCUVdRc1EwRkJMMElzU1VGQmNVUTVReXhOUVVGTlF5eFBRVUZPTEVOQlFXTTJReXhIUVVGa0xFTkJRVFZFTzBGQlEwUTdPMEZCUlVRN1FVRkRUeXhUUVVGVE4wWXNiVUpCUVZRc1EwRkJOa0k0Uml4RlFVRTNRaXhGUVVGcFF6dEJRVU4wUXp0QlFVTkJPMEZCUTBFN1FVRkRRU3hOUVVGSlF5eFZRVUZWTEV0QlFXUTdRVUZEUVN4TlFVRkpMRTlCUVU5RExFOUJRVTlETEZGQlFXUXNTMEZCTWtJc1YwRkJMMElzUlVGQk5FTTdRVUZETVVOR0xHTkJRVlVzU1VGQlZqdEJRVU5CUXl4WFFVRlBReXhSUVVGUUxFZEJRV3RDTEVWQlFXeENPMEZCUTBRN1FVRkRSRWc3UVVGRFFTeE5RVUZKUXl4UFFVRktMRVZCUVdFN1FVRkRXRHRCUVVOQk8wRkJRMEZETEZkQlFVOURMRkZCUVZBc1IwRkJhMEo2UlN4VFFVRnNRanRCUVVOQkxGZEJRVTkzUlN4UFFVRlBReXhSUVVGa08wRkJRMFE3UVVGRFJqczdRVUZGVFN4VFFVRlRhRWNzUjBGQlZDeERRVUZoYVVjc1IwRkJZaXhGUVVGclFqdEJRVU4yUWl4TlFVRk5ReXhqUVVGalJDeEpRVUZKY2tJc1MwRkJTaXhIUVVGWmRVSXNUMEZCV2l4RlFVRndRanRCUVVOQkxGTkJRVThzVlVGQlExSXNRMEZCUkR0QlFVRkJMRmRCUVU5UExGbEJRVmx3UWl4TFFVRmFMRU5CUVd0Q0xGVkJRVU5sTEVWQlFVUTdRVUZCUVN4aFFVRlJRU3hIUVVGSFJpeERRVUZJTEVOQlFWSTdRVUZCUVN4TFFVRnNRaXhEUVVGUU8wRkJRVUVzUjBGQlVEdEJRVU5FT3p0QlFVVk5MRk5CUVZNeFJpeHBRa0ZCVkN4RFFVRXlRamhDTEVsQlFUTkNMRVZCUVdsRE8wRkJRM1JETEUxQlFVa3NRMEZCUTBFc1NVRkJUQ3hGUVVGWExFOUJRVThzU1VGQlVEczdRVUZFTWtJc1RVRkhPVUpFTEVsQlNEaENMRWRCUjNKQ1F5eEpRVWh4UWl4RFFVYzVRa1FzU1VGSU9FSTdPenRCUVV0MFF5eE5RVUZKTEVOQlFVTkJMRWxCUVV3c1JVRkJWeXhQUVVGUExFbEJRVkE3TzBGQlJWZ3NVMEZCVDBFc1MwRkJTMUVzVjBGQlRDeExRVUZ4UWl4UFFVRlBVaXhKUVVGUUxFdEJRV2RDTEZWQlFXaENMRWRCUVRaQ0xHOURRVUZoUVN4SlFVRmlMRU5CUVRkQ0xFZEJRV3RFUVN4TFFVRkxVeXhKUVVGTUxFbEJRV0ZVTEVsQlFYQkdMRU5CUVZBN1FVRkRSRHM3UVVGRlRTeFRRVUZUTlVJc1IwRkJWQ3hEUVVGaGEwY3NRMEZCWWl4RlFVRm5RanRCUVVOeVFpeFRRVUZQTEU5QlFVOHhSaXhOUVVGUUxFdEJRV3RDTEZWQlFXeENMRWRCUVN0Q1FTeHBRMEZCY1VJd1JpeERRVUZ5UWl4RlFVRXZRaXhIUVVFeVJFRXNRMEZCYkVVN1FVRkRSRHM3UVVGRlRTeFRRVUZUYWtjc1ZVRkJWQ3hEUVVGdlFtdEhMRWRCUVhCQ0xFVkJRWGxDZEVNc1NVRkJla0lzUlVGQkswSTNRaXhMUVVFdlFpeEZRVUZ6UXp0QlFVTXpRekpDTEZOQlFVOTVReXhqUVVGUUxFTkJRWE5DUkN4SFFVRjBRaXhGUVVFeVFuUkRMRWxCUVROQ0xFVkJRV2xETzBGQlF5OUNOMElzWjBKQlJDdENPMEZCUlM5Q2NVVXNaMEpCUVZrc1MwRkdiVUk3UVVGSEwwSkRMR05CUVZVN1FVRkljVUlzUjBGQmFrTTdRVUZMUkRzN1FVRkZUU3hUUVVGVGNFY3NXVUZCVkN4RFFVRnpRblZDTEU5QlFYUkNMRVZCUVN0Q2IwUXNSVUZCTDBJc1JVRkJiVU12UXl4TFFVRnVReXhGUVVFd1F6dEJRVU12UXl4VFFVRlBUQ3hSUVVGUk9FVXNZVUZCVWl4RFFVTk1NVUlzUjBGQlIycEVMRWxCUkVVc0swSkJSVUZwUkN4SFFVRkhMME1zUzBGR1NDeEZRVVZoUVN4TFFVWmlMRVZCUVZBN1FVRkpSRHM3UVVGRlRTeFRRVUZUTTBJc1UwRkJWQ3hEUVVGdFFuRkhMRkZCUVc1Q0xFVkJRVFpDUXl4VlFVRTNRaXhGUVVFMlJEdEJRVUZCTEUxQlFYQkNReXhQUVVGdlFpeDFSVUZCVml4WlFVRk5MRU5CUVVVc1EwRkJSVHM3UVVGRGJFVXNUVUZCU1VNc2QwSkJRVW83UVVGRFFTeE5RVUZOUXl4cFFrRkJhVUpLTEZOQlFWTkRMRlZCUVZRc1EwRkJka0k3UVVGRFFTeE5RVUZOU1N4VFFVRlRMSE5DUVVGSlRDeFJRVUZLTEVWQlFXTkRMRlZCUVdRc1EwRkJaanRCUVVOQkxFMUJRVWxMTEcxQ1FVRktPMEZCUTBFc1RVRkJTVVFzVFVGQlNpeEZRVUZaTzBGQlExWkRMR2xDUVVGaGJrUXNUMEZCVDI5RUxIZENRVUZRTEVOQlFXZERVQ3hSUVVGb1F5eEZRVUV3UTBNc1ZVRkJNVU1zUTBGQllqdEJRVU5FTzBGQlEwUTVReXhUUVVGUGVVTXNZMEZCVUN4RFFVRnpRa2tzVVVGQmRFSXNSVUZCWjBORExGVkJRV2hETEVWQlFUUkRPMEZCUXpGRFR5eHJRa0ZCWXl4SlFVUTBRanRCUVVVeFExZ3NaMEpCUVZrc1EwRkJRMU1zVlVGQlJDeEpRVUZsTEVOQlFVTXNRMEZCUTBFc1YwRkJWMVFzVlVGR1JUdEJRVWN4UTNKRkxGZEJRVTh3UlN4UlFVRlJSU3hqUVVGU08wRkJRVEpDTEdWQlFWTkxMRXRCUVZRc1IwRkJkMEk3UVVGQlFTd3dRMEZCVGtNc1NVRkJUVHRCUVVGT1FTeGpRVUZOTzBGQlFVRTdPMEZCUTNoRUxGbEJRVTF1UXl4VFFVRlROa0lzWlVGQlpVOHNTMEZCWml4RFFVRnhRaXhKUVVGeVFpeEZRVUV5UWtRc1NVRkJNMElzUTBGQlpqdEJRVU5CVUN3d1FrRkJhMEkxUWl4TlFVRnNRanRCUVVOQkxHVkJRVTlCTEUxQlFWQTdRVUZEUkRzN1FVRktUU3hoUVVGdlEydERMRXRCUVhCRE8wRkJRVUU3UVVGSWJVTXNSMEZCTlVNN1FVRlRRU3hUUVVGUE8wRkJRMHhITEZkQlJFczdRVUZCUVN4NVFrRkRTenRCUVVOU0xGbEJRVWxRTEUxQlFVb3NSVUZCV1R0QlFVTldMR05CUVVsRExGVkJRVW9zUlVGQlowSTdRVUZEWkc1RUxHMUNRVUZQZVVNc1kwRkJVQ3hEUVVGelFra3NVVUZCZEVJc1JVRkJaME5ETEZWQlFXaERMRVZCUVRSRFN5eFZRVUUxUXp0QlFVTkVMRmRCUmtRc1RVRkZUenRCUVVOTU8wRkJRMEZPTEhGQ1FVRlRReXhWUVVGVUxFbEJRWFZDUnl4alFVRjJRanRCUVVOQk8wRkJRMFE3UVVGRFJpeFRRVkpFTEUxQlVVODdRVUZEVER0QlFVTkJMR2xDUVVGUFNpeFRRVUZUUXl4VlFVRlVMRU5CUVZBN1FVRkRRVHRCUVVORU8wRkJRMFk3TzBGQlprazdRVUZCUVR0QlFXZENURmtzYzBKQmFFSkxPMEZCUVVFc2IwTkJaMEpuUWp0QlFVTnVRaXhsUVVGUFZpeGxRVUZRTzBGQlEwUTdPMEZCYkVKSk8wRkJRVUU3UVVGQlFTeEhRVUZRTzBGQmIwSkVPenRCUVVsTkxGTkJRVk4yUnl4WlFVRlVMRU5CUVhOQ2EwZ3NZVUZCZEVJc1JVRkJjVU03UVVGRE1VTXNVMEZCVDBFc2EwSkJRV3RDTEVsQlFXeENMRWxCUVRCQ1FTeHJRa0ZCYTBJc1MwRkJia1E3UVVGRFJEczdRVUZGVFN4VFFVRlRha2dzV1VGQlZDeERRVUZ6UW10SUxFdEJRWFJDTEVWQlFUWkNPMEZCUTJ4RExFMUJRVWx1U0N4aFFVRmhiVWdzUzBGQllpeERRVUZLTEVWQlFYbENPMEZCUTNaQ0xGZEJRVThzU1VGQlVEdEJRVU5FT3p0QlFVVkVMRk5CUVU4c1IwRkJSME1zVFVGQlNDeERRVUZWUkN4TFFVRldMRVZCUVdsQ00wTXNTMEZCYWtJc1EwRkJkVUlzVlVGQlF6WkRMRU5CUVVRc1JVRkJUenRCUVVOdVF5eFJRVUZKUVN4RFFVRktMRVZCUVU4N1FVRkJRU3hWUVVOSFF5eFJRVVJJTEVkQlEyZENSQ3hEUVVSb1FpeERRVU5IUXl4UlFVUklPenRCUVVWTUxHRkJRVTkwU0N4aFFVRmhjMGdzVVVGQllpeExRVUV3UW5KSUxHRkJRV0Z4U0N4UlFVRmlMRU5CUVdwRE8wRkJRMFE3TzBGQlJVUXNWMEZCVDNSSUxHRkJRV0Z4U0N4RFFVRmlMRU5CUVZBN1FVRkRSQ3hIUVZCTkxFTkJRVkE3UVVGUlJEczdRVUZGVFN4VFFVRlRia2dzWlVGQlZDeERRVUY1UW5GSUxFbEJRWHBDTEVWQlFTdENPMEZCUTNCRExFMUJRVWtzUTBGQlEwRXNTVUZCVEN4RlFVRlhPMEZCUTFRc1YwRkJUME1zY1VKQlFWRkRMRWxCUVZJc1JVRkJVRHRCUVVORU96dEJRVVZFTEUxQlFVa3NRMEZCUXl4dFFrRkJUMFlzU1VGQlVDeERRVUZNTEVWQlFXMUNPMEZCUTJwQ08wRkJRMEVzVjBGQlQwTXNjVUpCUVZGRkxFbEJRVklzUTBGQllVZ3NTVUZCWWl4RlFVRnRRaXhKUVVGdVFpeEZRVUY1UWl4TFFVRjZRaXhGUVVGblEwVXNTVUZCYUVNc1JVRkJVRHRCUVVORU96dEJRVVZFTEZOQlFVOUVMSEZDUVVGUlJTeEpRVUZTTEVOQlFXRXNSVUZCWWl4RlFVRnBRa2dzU1VGQmFrSXNRMEZCVUR0QlFVTkVJaXdpWm1sc1pTSTZJbFYwYVd4ekxtcHpJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpTHlvZ1pYTnNhVzUwSUc1dkxYVnpaUzFpWldadmNtVXRaR1ZtYVc1bE9pQXdJQ292WEc1cGJYQnZjblFnYVhORmNYVmhiQ0JtY205dElDZHNiMlJoYzJndWFYTmxjWFZoYkNjN1hHNXBiWEJ2Y25RZ2FYTWdabkp2YlNBbmIySnFaV04wTFdsekp6dGNibWx0Y0c5eWRDQmxiblJ5YVdWeklHWnliMjBnSjI5aWFtVmpkQzVsYm5SeWFXVnpKenRjYm1sdGNHOXlkQ0JtZFc1amRHbHZiazVoYldVZ1puSnZiU0FuWm5WdVkzUnBiMjR1Y0hKdmRHOTBlWEJsTG01aGJXVW5PMXh1YVcxd2IzSjBJR2hoY3lCbWNtOXRJQ2RvWVhNbk8xeHVhVzF3YjNKMElHWnNZWFFnWm5KdmJTQW5ZWEp5WVhrdWNISnZkRzkwZVhCbExtWnNZWFFuTzF4dWFXMXdiM0owSUhSeWFXMGdabkp2YlNBbmMzUnlhVzVuTG5CeWIzUnZkSGx3WlM1MGNtbHRKenRjYm1sdGNHOXlkQ0JqYUdWbGNtbHZJR1p5YjIwZ0oyTm9aV1Z5YVc4bk8xeHVhVzF3YjNKMElIc2dhWE5JZEcxc0lIMGdabkp2YlNBblkyaGxaWEpwYnk5c2FXSXZkWFJwYkhNbk8xeHVYRzVwYlhCdmNuUWdleUJuWlhRZ2ZTQm1jbTl0SUNjdUwyTnZibVpwWjNWeVlYUnBiMjRuTzF4dWFXMXdiM0owSUhzZ1kyaHBiR1J5Wlc1UFprNXZaR1VnZlNCbWNtOXRJQ2N1TDFKVFZGUnlZWFpsY25OaGJDYzdYRzVwYlhCdmNuUWdjbVZoYkVkbGRFRmtZWEIwWlhJZ1puSnZiU0FuTGk5blpYUkJaR0Z3ZEdWeUp6dGNibWx0Y0c5eWRDQjJZV3hwWkdGMFpVRmtZWEIwWlhJZ1puSnZiU0FuTGk5MllXeHBaR0YwWlVGa1lYQjBaWEluTzF4dVhHNWxlSEJ2Y25RZ1kyOXVjM1FnU1ZSRlVrRlVUMUpmVTFsTlFrOU1JRDBnZEhsd1pXOW1JRk41YldKdmJDQTlQVDBnSjJaMWJtTjBhVzl1SnlBbUppQlRlVzFpYjJ3dWFYUmxjbUYwYjNJN1hHNWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQm5aWFJCWkdGd2RHVnlLRzl3ZEdsdmJuTWdQU0I3ZlNrZ2UxeHVJQ0JqYjI1emIyeGxMbmRoY200b0oyZGxkRUZrWVhCMFpYSWdabkp2YlNCVmRHbHNjeUJwY3lCa1pYQnlaV05oZEdWa095QndiR1ZoYzJVZ2RYTmxJQzR2WjJWMFFXUmhjSFJsY2lCcGJuTjBaV0ZrSnlrN1hHNGdJSEpsZEhWeWJpQnlaV0ZzUjJWMFFXUmhjSFJsY2lodmNIUnBiMjV6S1R0Y2JuMWNibHh1Wm5WdVkzUnBiMjRnZG1Gc2FXUmhkR1ZOYjNWdWRFOXdkR2x2Ym5Nb1lYUjBZV05vVkc4c0lHaDVaSEpoZEdWSmJpa2dlMXh1SUNCcFppQW9ZWFIwWVdOb1ZHOGdKaVlnYUhsa2NtRjBaVWx1SUNZbUlHRjBkR0ZqYUZSdklDRTlQU0JvZVdSeVlYUmxTVzRwSUh0Y2JpQWdJQ0IwYUhKdmR5QnVaWGNnVkhsd1pVVnljbTl5S0NkSlppQmliM1JvSUhSb1pTQmdZWFIwWVdOb1ZHOWdJR0Z1WkNCZ2FIbGtjbUYwWlVsdVlDQnZjSFJwYjI1eklHRnlaU0J3Y205MmFXUmxaQ3dnZEdobGVTQnRkWE4wSUdKbElEMDlQU0FvWm05eUlHSmhZMnQzWVhKa2N5QmpiMjF3WVhScFltbHNhWFI1S1NjcE8xeHVJQ0I5WEc1OVhHNWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQnRZV3RsVDNCMGFXOXVjeWh2Y0hScGIyNXpLU0I3WEc0Z0lHTnZibk4wSUhzZ1lYUjBZV05vVkc4NklHTnZibVpwWjBGMGRHRmphRlJ2TENCb2VXUnlZWFJsU1c0NklHTnZibVpwWjBoNVpISmhkR1ZKYml3Z0xpNHVZMjl1Wm1sbklIMGdQU0JuWlhRb0tUdGNiaUFnZG1Gc2FXUmhkR1ZOYjNWdWRFOXdkR2x2Ym5Nb1kyOXVabWxuUVhSMFlXTm9WRzhzSUdOdmJtWnBaMGg1WkhKaGRHVkpiaWs3WEc1Y2JpQWdZMjl1YzNRZ2V5QmhkSFJoWTJoVWJ5d2dhSGxrY21GMFpVbHVJSDBnUFNCdmNIUnBiMjV6TzF4dUlDQjJZV3hwWkdGMFpVMXZkVzUwVDNCMGFXOXVjeWhoZEhSaFkyaFVieXdnYUhsa2NtRjBaVWx1S1R0Y2JseHVJQ0F2THlCdVpXbDBhR1Z5SUhCeVpYTmxiblE2SUdKdmRHZ2dkVzVrWldacGJtVmtYRzRnSUM4dklHOXViSGtnWVhSMFlXTm9WRzhnY0hKbGMyVnVkRG9nWVhSMFlXTm9WRzhnYzJWMExDQm9lV1J5WVhSbFNXNGdkVzVrWldacGJtVmtYRzRnSUM4dklHOXViSGtnYUhsa2NtRjBaVWx1SUhCeVpYTmxiblE2SUdKdmRHZ2djMlYwSUhSdklHaDVaSEpoZEdWSmJseHVJQ0F2THlCaWIzUm9JSEJ5WlhObGJuUWdLR0Z1WkNBOVBUMHNJSEJsY2lCaFltOTJaU2s2SUdKdmRHZ2djMlYwSUhSdklHaDVaSEpoZEdWSmJseHVJQ0JqYjI1emRDQm1hVzVoYkVGMGRHRmphRlJ2SUQwZ2FIbGtjbUYwWlVsdUlIeDhJR052Ym1acFowaDVaSEpoZEdWSmJpQjhmQ0JqYjI1bWFXZEJkSFJoWTJoVWJ5QjhmQ0JoZEhSaFkyaFVieUI4ZkNCMWJtUmxabWx1WldRN1hHNGdJR052Ym5OMElHWnBibUZzU0hsa2NtRjBaVWx1SUQwZ2FIbGtjbUYwWlVsdUlIeDhJR052Ym1acFowaDVaSEpoZEdWSmJpQjhmQ0IxYm1SbFptbHVaV1E3WEc0Z0lHTnZibk4wSUcxdmRXNTBWR0Z5WjJWMGN5QTlJSHRjYmlBZ0lDQXVMaTRvWm1sdVlXeEJkSFJoWTJoVWJ5QW1KaUI3SUdGMGRHRmphRlJ2T2lCbWFXNWhiRUYwZEdGamFGUnZJSDBwTEZ4dUlDQWdJQzR1TGlobWFXNWhiRWg1WkhKaGRHVkpiaUFtSmlCN0lHaDVaSEpoZEdWSmJqb2dabWx1WVd4SWVXUnlZWFJsU1c0Z2ZTa3NYRzRnSUgwN1hHNWNiaUFnY21WMGRYSnVJSHRjYmlBZ0lDQXVMaTVqYjI1bWFXY3NYRzRnSUNBZ0xpNHViM0IwYVc5dWN5eGNiaUFnSUNBdUxpNXRiM1Z1ZEZSaGNtZGxkSE1zWEc0Z0lIMDdYRzU5WEc1Y2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCcGMwTjFjM1J2YlVOdmJYQnZibVZ1ZENoamIyMXdiMjVsYm5Rc0lHRmtZWEIwWlhJcElIdGNiaUFnZG1Gc2FXUmhkR1ZCWkdGd2RHVnlLR0ZrWVhCMFpYSXBPMXh1SUNCcFppQW9ZV1JoY0hSbGNpNXBjME4xYzNSdmJVTnZiWEJ2Ym1WdWRDa2dlMXh1SUNBZ0lISmxkSFZ5YmlBaElXRmtZWEIwWlhJdWFYTkRkWE4wYjIxRGIyMXdiMjVsYm5Rb1kyOXRjRzl1Wlc1MEtUdGNiaUFnZlZ4dUlDQnlaWFIxY200Z2RIbHdaVzltSUdOdmJYQnZibVZ1ZENBOVBUMGdKMloxYm1OMGFXOXVKenRjYm4xY2JseHVaWGh3YjNKMElHWjFibU4wYVc5dUlHbHpRM1Z6ZEc5dFEyOXRjRzl1Wlc1MFJXeGxiV1Z1ZENocGJuTjBMQ0JoWkdGd2RHVnlLU0I3WEc0Z0lHbG1JQ2hoWkdGd2RHVnlMbWx6UTNWemRHOXRRMjl0Y0c5dVpXNTBSV3hsYldWdWRDa2dlMXh1SUNBZ0lISmxkSFZ5YmlBaElXRmtZWEIwWlhJdWFYTkRkWE4wYjIxRGIyMXdiMjVsYm5SRmJHVnRaVzUwS0dsdWMzUXBPMXh1SUNCOVhHNGdJSEpsZEhWeWJpQWhJV2x1YzNRZ0ppWWdZV1JoY0hSbGNpNXBjMVpoYkdsa1JXeGxiV1Z1ZENocGJuTjBLU0FtSmlCMGVYQmxiMllnYVc1emRDNTBlWEJsSUQwOVBTQW5ablZ1WTNScGIyNG5PMXh1ZlZ4dVhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z2NISnZjSE5QWms1dlpHVW9ibTlrWlNrZ2UxeHVJQ0J5WlhSMWNtNGdaVzUwY21sbGN5Z29ibTlrWlNBbUppQnViMlJsTG5CeWIzQnpLU0I4ZkNCN2ZTbGNiaUFnSUNBdVptbHNkR1Z5S0NoYkxDQjJZV3gxWlYwcElEMCtJSFI1Y0dWdlppQjJZV3gxWlNBaFBUMGdKM1Z1WkdWbWFXNWxaQ2NwWEc0Z0lDQWdMbkpsWkhWalpTZ29ZV05qTENCYmEyVjVMQ0IyWVd4MVpWMHBJRDArSUU5aWFtVmpkQzVoYzNOcFoyNG9ZV05qTENCN0lGdHJaWGxkT2lCMllXeDFaU0I5S1N3Z2UzMHBPMXh1ZlZ4dVhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z2RIbHdaVTltVG05a1pTaHViMlJsS1NCN1hHNGdJSEpsZEhWeWJpQnViMlJsSUQ4Z2JtOWtaUzUwZVhCbElEb2diblZzYkR0Y2JuMWNibHh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJRzV2WkdWSVlYTlVlWEJsS0c1dlpHVXNJSFI1Y0dVcElIdGNiaUFnYVdZZ0tDRjBlWEJsSUh4OElDRnViMlJsS1NCeVpYUjFjbTRnWm1Gc2MyVTdYRzVjYmlBZ1kyOXVjM1FnWVdSaGNIUmxjaUE5SUhKbFlXeEhaWFJCWkdGd2RHVnlLQ2s3WEc0Z0lHbG1JQ2hoWkdGd2RHVnlMbVJwYzNCc1lYbE9ZVzFsVDJaT2IyUmxLU0I3WEc0Z0lDQWdZMjl1YzNRZ1pHbHpjR3hoZVU1aGJXVWdQU0JoWkdGd2RHVnlMbVJwYzNCc1lYbE9ZVzFsVDJaT2IyUmxLRzV2WkdVcE8xeHVJQ0FnSUhKbGRIVnliaUJrYVhOd2JHRjVUbUZ0WlNBOVBUMGdkSGx3WlR0Y2JpQWdmVnh1WEc0Z0lHbG1JQ2doYm05a1pTNTBlWEJsS1NCeVpYUjFjbTRnWm1Gc2MyVTdYRzRnSUdsbUlDaDBlWEJsYjJZZ2JtOWtaUzUwZVhCbElEMDlQU0FuYzNSeWFXNW5KeWtnY21WMGRYSnVJRzV2WkdVdWRIbHdaU0E5UFQwZ2RIbHdaVHRjYmlBZ2NtVjBkWEp1SUNoY2JpQWdJQ0IwZVhCbGIyWWdibTlrWlM1MGVYQmxJRDA5UFNBblpuVnVZM1JwYjI0bklEOGdablZ1WTNScGIyNU9ZVzFsS0c1dlpHVXVkSGx3WlNrZ1BUMDlJSFI1Y0dVZ09pQnViMlJsTG5SNWNHVXVibUZ0WlNBOVBUMGdkSGx3WlZ4dUlDQXBJSHg4SUc1dlpHVXVkSGx3WlM1a2FYTndiR0Y1VG1GdFpTQTlQVDBnZEhsd1pUdGNibjFjYmx4dVpuVnVZM1JwYjI0Z2FXNTBaWEp1WVd4RGFHbHNaSEpsYmtOdmJYQmhjbVVvWVN3Z1lpd2diR1Z1UTI5dGNDd2dhWE5NYjI5elpTa2dlMXh1SUNCamIyNXpkQ0J1YjJSbFEyOXRjR0Z5WlNBOUlHbHpURzl2YzJVZ1B5QnViMlJsVFdGMFkyaGxjeUE2SUc1dlpHVkZjWFZoYkR0Y2JseHVJQ0JwWmlBb1lTQTlQVDBnWWlrZ2NtVjBkWEp1SUhSeWRXVTdYRzRnSUdsbUlDZ2hRWEp5WVhrdWFYTkJjbkpoZVNoaEtTQW1KaUFoUVhKeVlYa3VhWE5CY25KaGVTaGlLU2tnZTF4dUlDQWdJSEpsZEhWeWJpQnViMlJsUTI5dGNHRnlaU2hoTENCaUxDQnNaVzVEYjIxd0tUdGNiaUFnZlZ4dUlDQmpiMjV6ZENCbWJHRjBRU0E5SUdac1lYUW9ZU3dnU1c1bWFXNXBkSGtwTzF4dUlDQmpiMjV6ZENCbWJHRjBRaUE5SUdac1lYUW9ZaXdnU1c1bWFXNXBkSGtwTzF4dUlDQnBaaUFvWm14aGRFRXViR1Z1WjNSb0lDRTlQU0JtYkdGMFFpNXNaVzVuZEdncElISmxkSFZ5YmlCbVlXeHpaVHRjYmlBZ2FXWWdLR1pzWVhSQkxteGxibWQwYUNBOVBUMGdNQ0FtSmlCbWJHRjBRaTVzWlc1bmRHZ2dQVDA5SURBcElISmxkSFZ5YmlCMGNuVmxPMXh1SUNCbWIzSWdLR3hsZENCcElEMGdNRHNnYVNBOElHWnNZWFJCTG14bGJtZDBhRHNnYVNBclBTQXhLU0I3WEc0Z0lDQWdhV1lnS0NGdWIyUmxRMjl0Y0dGeVpTaG1iR0YwUVZ0cFhTd2dabXhoZEVKYmFWMHNJR3hsYmtOdmJYQXBLU0J5WlhSMWNtNGdabUZzYzJVN1hHNGdJSDFjYmlBZ2NtVjBkWEp1SUhSeWRXVTdYRzU5WEc1Y2JtWjFibU4wYVc5dUlHTm9hV3hrY21WdVRXRjBZMmdvWVN3Z1lpd2diR1Z1UTI5dGNDa2dlMXh1SUNCeVpYUjFjbTRnYVc1MFpYSnVZV3hEYUdsc1pISmxia052YlhCaGNtVW9ZU3dnWWl3Z2JHVnVRMjl0Y0N3Z2RISjFaU2s3WEc1OVhHNWNibVoxYm1OMGFXOXVJR05vYVd4a2NtVnVSWEYxWVd3b1lTd2dZaXdnYkdWdVEyOXRjQ2tnZTF4dUlDQnlaWFIxY200Z2FXNTBaWEp1WVd4RGFHbHNaSEpsYmtOdmJYQmhjbVVvWVN3Z1lpd2diR1Z1UTI5dGNDd2dabUZzYzJVcE8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCeVpXMXZkbVZPZFd4c1lYSjVVbVZrZFdObGNpaGhZMk1zSUZ0clpYa3NJSFpoYkhWbFhTa2dlMXh1SUNCamIyNXpkQ0JoWkdScGRHbHZiaUE5SUhaaGJIVmxJRDA5SUc1MWJHd2dQeUI3ZlNBNklIc2dXMnRsZVYwNklIWmhiSFZsSUgwN1hHNGdJSEpsZEhWeWJpQjdJQzR1TG1Gall5d2dMaTR1WVdSa2FYUnBiMjRnZlR0Y2JuMWNibHh1Wm5WdVkzUnBiMjRnYVc1MFpYSnVZV3hPYjJSbFEyOXRjR0Z5WlNoaExDQmlMQ0JzWlc1RGIyMXdMQ0JwYzB4dmIzTmxLU0I3WEc0Z0lHbG1JQ2hoSUQwOVBTQmlLU0J5WlhSMWNtNGdkSEoxWlR0Y2JpQWdhV1lnS0NGaElIeDhJQ0ZpS1NCeVpYUjFjbTRnWm1Gc2MyVTdYRzRnSUdsbUlDaGhMblI1Y0dVZ0lUMDlJR0l1ZEhsd1pTa2djbVYwZFhKdUlHWmhiSE5sTzF4dVhHNGdJR3hsZENCc1pXWjBJRDBnY0hKdmNITlBaazV2WkdVb1lTazdYRzRnSUd4bGRDQnlhV2RvZENBOUlIQnliM0J6VDJaT2IyUmxLR0lwTzF4dUlDQnBaaUFvYVhOTWIyOXpaU2tnZTF4dUlDQWdJR3hsWm5RZ1BTQmxiblJ5YVdWektHeGxablFwTG5KbFpIVmpaU2h5WlcxdmRtVk9kV3hzWVhKNVVtVmtkV05sY2l3Z2UzMHBPMXh1SUNBZ0lISnBaMmgwSUQwZ1pXNTBjbWxsY3loeWFXZG9kQ2t1Y21Wa2RXTmxLSEpsYlc5MlpVNTFiR3hoY25sU1pXUjFZMlZ5TENCN2ZTazdYRzRnSUgxY2JseHVJQ0JqYjI1emRDQnNaV1owUzJWNWN5QTlJRTlpYW1WamRDNXJaWGx6S0d4bFpuUXBPMXh1SUNCbWIzSWdLR3hsZENCcElEMGdNRHNnYVNBOElHeGxablJMWlhsekxteGxibWQwYURzZ2FTQXJQU0F4S1NCN1hHNGdJQ0FnWTI5dWMzUWdjSEp2Y0NBOUlHeGxablJMWlhselcybGRPMXh1SUNBZ0lDOHZJSGRsSUhkcGJHd2dZMmhsWTJzZ1kyaHBiR1J5Wlc0Z2JHRjBaWEpjYmlBZ0lDQnBaaUFvY0hKdmNDQTlQVDBnSjJOb2FXeGtjbVZ1SnlrZ2UxeHVJQ0FnSUNBZ0x5OGdZMjl1ZEdsdWRXVTdYRzRnSUNBZ2ZTQmxiSE5sSUdsbUlDZ2hLSEJ5YjNBZ2FXNGdjbWxuYUhRcEtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z1ptRnNjMlU3WEc0Z0lDQWdmU0JsYkhObElHbG1JQ2h5YVdkb2RGdHdjbTl3WFNBOVBUMGdiR1ZtZEZ0d2NtOXdYU2tnZTF4dUlDQWdJQ0FnTHk4Z1kyOXVkR2x1ZFdVN1hHNGdJQ0FnZlNCbGJITmxJR2xtSUNoMGVYQmxiMllnY21sbmFIUmJjSEp2Y0YwZ1BUMDlJSFI1Y0dWdlppQnNaV1owVzNCeWIzQmRJQ1ltSUhSNWNHVnZaaUJzWldaMFczQnliM0JkSUQwOVBTQW5iMkpxWldOMEp5a2dlMXh1SUNBZ0lDQWdhV1lnS0NGcGMwVnhkV0ZzS0d4bFpuUmJjSEp2Y0Ywc0lISnBaMmgwVzNCeWIzQmRLU2tnY21WMGRYSnVJR1poYkhObE8xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdabUZzYzJVN1hHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ1kyOXVjM1FnYkdWbWRFaGhjME5vYVd4a2NtVnVJRDBnSjJOb2FXeGtjbVZ1SnlCcGJpQnNaV1owTzF4dUlDQmpiMjV6ZENCeWFXZG9kRWhoYzBOb2FXeGtjbVZ1SUQwZ0oyTm9hV3hrY21WdUp5QnBiaUJ5YVdkb2REdGNiaUFnWTI5dWMzUWdZMmhwYkdSRGIyMXdZWEpsSUQwZ2FYTk1iMjl6WlNBL0lHTm9hV3hrY21WdVRXRjBZMmdnT2lCamFHbHNaSEpsYmtWeGRXRnNPMXh1SUNCcFppQW9iR1ZtZEVoaGMwTm9hV3hrY21WdUlIeDhJSEpwWjJoMFNHRnpRMmhwYkdSeVpXNHBJSHRjYmlBZ0lDQnBaaUFvSVdOb2FXeGtRMjl0Y0dGeVpTaGNiaUFnSUNBZ0lHTm9hV3hrY21WdVZHOVRhVzF3YkdsbWFXVmtRWEp5WVhrb2JHVm1kQzVqYUdsc1pISmxiaXdnYVhOTWIyOXpaU2tzWEc0Z0lDQWdJQ0JqYUdsc1pISmxibFJ2VTJsdGNHeHBabWxsWkVGeWNtRjVLSEpwWjJoMExtTm9hV3hrY21WdUxDQnBjMHh2YjNObEtTeGNiaUFnSUNBZ0lHeGxia052YlhBc1hHNGdJQ0FnS1NrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUdaaGJITmxPMXh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJR2xtSUNnaGFYTlVaWGgwZFdGc1RtOWtaU2hoS1NrZ2UxeHVJQ0FnSUdOdmJuTjBJSEpwWjJoMFMyVjVjeUE5SUU5aWFtVmpkQzVyWlhsektISnBaMmgwS1R0Y2JpQWdJQ0J5WlhSMWNtNGdiR1Z1UTI5dGNDaHNaV1owUzJWNWN5NXNaVzVuZEdnZ0xTQnNaV1owU0dGelEyaHBiR1J5Wlc0c0lISnBaMmgwUzJWNWN5NXNaVzVuZEdnZ0xTQnlhV2RvZEVoaGMwTm9hV3hrY21WdUtUdGNiaUFnZlZ4dVhHNGdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JuMWNibHh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJRzV2WkdWTllYUmphR1Z6S0dFc0lHSXNJR3hsYmtOdmJYQWdQU0JwY3lrZ2UxeHVJQ0J5WlhSMWNtNGdhVzUwWlhKdVlXeE9iMlJsUTI5dGNHRnlaU2hoTENCaUxDQnNaVzVEYjIxd0xDQjBjblZsS1R0Y2JuMWNibHh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJRzV2WkdWRmNYVmhiQ2hoTENCaUxDQnNaVzVEYjIxd0lEMGdhWE1wSUh0Y2JpQWdjbVYwZFhKdUlHbHVkR1Z5Ym1Gc1RtOWtaVU52YlhCaGNtVW9ZU3dnWWl3Z2JHVnVRMjl0Y0N3Z1ptRnNjMlVwTzF4dWZWeHVYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdZMjl1ZEdGcGJuTkRhR2xzWkhKbGJsTjFZa0Z5Y21GNUtHMWhkR05vTENCdWIyUmxMQ0J6ZFdKQmNuSmhlU2tnZTF4dUlDQmpiMjV6ZENCamFHbHNaSEpsYmlBOUlHTm9hV3hrY21WdVQyWk9iMlJsS0c1dlpHVXBPMXh1SUNCamIyNXpkQ0JqYUdWamEyVnlJRDBnS0Y4c0lHa3BJRDArSUdGeWNtRjVjMFZ4ZFdGc0tHMWhkR05vTENCamFHbHNaSEpsYmk1emJHbGpaU2hwTENCcElDc2djM1ZpUVhKeVlYa3ViR1Z1WjNSb0tTd2djM1ZpUVhKeVlYa3BPMXh1SUNCeVpYUjFjbTRnWTJocGJHUnlaVzR1YzI5dFpTaGphR1ZqYTJWeUtUdGNibjFjYmx4dVpuVnVZM1JwYjI0Z1lYSnlZWGx6UlhGMVlXd29iV0YwWTJnc0lHeGxablFzSUhKcFoyaDBLU0I3WEc0Z0lISmxkSFZ5YmlCc1pXWjBMbXhsYm1kMGFDQTlQVDBnY21sbmFIUXViR1Z1WjNSb0lDWW1JR3hsWm5RdVpYWmxjbmtvS0dWc0xDQnBLU0E5UGlCdFlYUmphQ2hsYkN3Z2NtbG5hSFJiYVYwcEtUdGNibjFjYmx4dVpuVnVZM1JwYjI0Z1kyaHBiR1J5Wlc1VWIwRnljbUY1S0dOb2FXeGtjbVZ1S1NCN1hHNGdJR052Ym5OMElISmxjM1ZzZENBOUlGdGRPMXh1WEc0Z0lHTnZibk4wSUhCMWMyZ2dQU0FvWld3cElEMCtJSHRjYmlBZ0lDQnBaaUFvWld3Z1BUMDlJRzUxYkd3Z2ZId2daV3dnUFQwOUlHWmhiSE5sSUh4OElIUjVjR1Z2WmlCbGJDQTlQVDBnSjNWdVpHVm1hVzVsWkNjcElISmxkSFZ5Ymp0Y2JpQWdJQ0J5WlhOMWJIUXVjSFZ6YUNobGJDazdYRzRnSUgwN1hHNWNiaUFnYVdZZ0tFRnljbUY1TG1selFYSnlZWGtvWTJocGJHUnlaVzRwS1NCN1hHNGdJQ0FnWTJocGJHUnlaVzR1Wm05eVJXRmphQ2h3ZFhOb0tUdGNiaUFnZlNCbGJITmxJSHRjYmlBZ0lDQndkWE5vS0dOb2FXeGtjbVZ1S1R0Y2JpQWdmVnh1SUNCeVpYUjFjbTRnY21WemRXeDBPMXh1ZlZ4dVhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z1kyaHBiR1J5Wlc1VWIxTnBiWEJzYVdacFpXUkJjbkpoZVNodWIyUmxRMmhwYkdSeVpXNHNJR2x6VEc5dmMyVWdQU0JtWVd4elpTa2dlMXh1SUNCamIyNXpkQ0JqYUdsc1pISmxia0Z5Y21GNUlEMGdZMmhwYkdSeVpXNVViMEZ5Y21GNUtHNXZaR1ZEYUdsc1pISmxiaWs3WEc0Z0lHTnZibk4wSUhOcGJYQnNhV1pwWldSQmNuSmhlU0E5SUZ0ZE8xeHVYRzRnSUdadmNpQW9iR1YwSUdrZ1BTQXdPeUJwSUR3Z1kyaHBiR1J5Wlc1QmNuSmhlUzVzWlc1bmRHZzdJR2tnS3owZ01Ta2dlMXh1SUNBZ0lHTnZibk4wSUdOb2FXeGtJRDBnWTJocGJHUnlaVzVCY25KaGVWdHBYVHRjYmlBZ0lDQmpiMjV6ZENCd2NtVjJhVzkxYzBOb2FXeGtJRDBnYzJsdGNHeHBabWxsWkVGeWNtRjVMbkJ2Y0NncE8xeHVYRzRnSUNBZ2FXWWdLSFI1Y0dWdlppQndjbVYyYVc5MWMwTm9hV3hrSUQwOVBTQW5kVzVrWldacGJtVmtKeWtnZTF4dUlDQWdJQ0FnYzJsdGNHeHBabWxsWkVGeWNtRjVMbkIxYzJnb1kyaHBiR1FwTzF4dUlDQWdJSDBnWld4elpTQnBaaUFvYVhOVVpYaDBkV0ZzVG05a1pTaGphR2xzWkNrZ0ppWWdhWE5VWlhoMGRXRnNUbTlrWlNod2NtVjJhVzkxYzBOb2FXeGtLU2tnZTF4dUlDQWdJQ0FnYzJsdGNHeHBabWxsWkVGeWNtRjVMbkIxYzJnb2NISmxkbWx2ZFhORGFHbHNaQ0FySUdOb2FXeGtLVHRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ2MybHRjR3hwWm1sbFpFRnljbUY1TG5CMWMyZ29jSEpsZG1sdmRYTkRhR2xzWkNrN1hHNGdJQ0FnSUNCemFXMXdiR2xtYVdWa1FYSnlZWGt1Y0hWemFDaGphR2xzWkNrN1hHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ2FXWWdLR2x6VEc5dmMyVXBJSHRjYmlBZ0lDQnlaWFIxY200Z2MybHRjR3hwWm1sbFpFRnljbUY1TG0xaGNDZ29lQ2tnUFQ0Z0tIUjVjR1Z2WmlCNElEMDlQU0FuYzNSeWFXNW5KeUEvSUhSeWFXMG9lQ2tnT2lCNEtTazdYRzRnSUgxY2JseHVJQ0J5WlhSMWNtNGdjMmx0Y0d4cFptbGxaRUZ5Y21GNU8xeHVmVnh1WEc1bWRXNWpkR2x2YmlCcGMxUmxlSFIxWVd4T2IyUmxLRzV2WkdVcElIdGNiaUFnY21WMGRYSnVJSFI1Y0dWdlppQnViMlJsSUQwOVBTQW5jM1J5YVc1bkp5QjhmQ0IwZVhCbGIyWWdibTlrWlNBOVBUMGdKMjUxYldKbGNpYzdYRzU5WEc1Y2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCcGMxSmxZV04wUld4bGJXVnVkRUZzYVd0bEtHRnlaeXdnWVdSaGNIUmxjaWtnZTF4dUlDQnlaWFIxY200Z1lXUmhjSFJsY2k1cGMxWmhiR2xrUld4bGJXVnVkQ2hoY21jcElIeDhJR2x6VkdWNGRIVmhiRTV2WkdVb1lYSm5LU0I4ZkNCQmNuSmhlUzVwYzBGeWNtRjVLR0Z5WnlrN1hHNTlYRzVjYmk4dklGUlBSRThvYkcxeUtUb2dZMkZ1SUhkbElHZGxkQ0J5YVdRZ2IyWWdkR2hwY3lCdmRYUnphV1JsSUc5bUlIUm9aU0JoWkdGd2RHVnlQMXh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJSGRwZEdoVFpYUlRkR0YwWlVGc2JHOTNaV1FvWm00cElIdGNiaUFnTHk4Z1RrOVVSU2hzYlhJcE9seHVJQ0F2THlCMGFHbHpJR2x6SUdOMWNuSmxiblJzZVNCb1pYSmxJSFJ2SUdOcGNtTjFiWFpsYm5RZ1lTQlNaV0ZqZENCaWRXY2dkMmhsY21VZ1lITmxkRk4wWVhSbEtDbGdJR2x6WEc0Z0lDOHZJRzV2ZENCaGJHeHZkMlZrSUhkcGRHaHZkWFFnWjJ4dlltRnNJR0psYVc1bklHUmxabWx1WldRdVhHNGdJR3hsZENCamJHVmhiblZ3SUQwZ1ptRnNjMlU3WEc0Z0lHbG1JQ2gwZVhCbGIyWWdaMnh2WW1Gc0xtUnZZM1Z0Wlc1MElEMDlQU0FuZFc1a1pXWnBibVZrSnlrZ2UxeHVJQ0FnSUdOc1pXRnVkWEFnUFNCMGNuVmxPMXh1SUNBZ0lHZHNiMkpoYkM1a2IyTjFiV1Z1ZENBOUlIdDlPMXh1SUNCOVhHNGdJR1p1S0NrN1hHNGdJR2xtSUNoamJHVmhiblZ3S1NCN1hHNGdJQ0FnTHk4Z1ZHaHBjeUIzYjNKcmN5QmhjbTkxYm1RZ1lTQmlkV2NnYVc0Z2JtOWtaUzlxWlhOMElHbHVJSFJvWVhRZ1pHVjJaV3h2Y0dWeWN5QmhjbVZ1SjNRZ1lXSnNaU0IwYjF4dUlDQWdJQzh2SUdSbGJHVjBaU0IwYUdsdVozTWdabkp2YlNCbmJHOWlZV3dnZDJobGJpQnlkVzV1YVc1bklHbHVJR0VnYm05a1pTQjJiUzVjYmlBZ0lDQm5iRzlpWVd3dVpHOWpkVzFsYm5RZ1BTQjFibVJsWm1sdVpXUTdYRzRnSUNBZ1pHVnNaWFJsSUdkc2IySmhiQzVrYjJOMWJXVnVkRHRjYmlBZ2ZWeHVmVnh1WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnUVU1RUtHWnVjeWtnZTF4dUlDQmpiMjV6ZENCbWJuTlNaWFpsY25ObFpDQTlJR1p1Y3k1emJHbGpaU2dwTG5KbGRtVnljMlVvS1R0Y2JpQWdjbVYwZFhKdUlDaDRLU0E5UGlCbWJuTlNaWFpsY25ObFpDNWxkbVZ5ZVNnb1ptNHBJRDArSUdadUtIZ3BLVHRjYm4xY2JseHVaWGh3YjNKMElHWjFibU4wYVc5dUlHUnBjM0JzWVhsT1lXMWxUMlpPYjJSbEtHNXZaR1VwSUh0Y2JpQWdhV1lnS0NGdWIyUmxLU0J5WlhSMWNtNGdiblZzYkR0Y2JseHVJQ0JqYjI1emRDQjdJSFI1Y0dVZ2ZTQTlJRzV2WkdVN1hHNWNiaUFnYVdZZ0tDRjBlWEJsS1NCeVpYUjFjbTRnYm5Wc2JEdGNibHh1SUNCeVpYUjFjbTRnZEhsd1pTNWthWE53YkdGNVRtRnRaU0I4ZkNBb2RIbHdaVzltSUhSNWNHVWdQVDA5SUNkbWRXNWpkR2x2YmljZ1B5Qm1kVzVqZEdsdmJrNWhiV1VvZEhsd1pTa2dPaUIwZVhCbExtNWhiV1VnZkh3Z2RIbHdaU2s3WEc1OVhHNWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQnplVzBvY3lrZ2UxeHVJQ0J5WlhSMWNtNGdkSGx3Wlc5bUlGTjViV0p2YkNBOVBUMGdKMloxYm1OMGFXOXVKeUEvSUZONWJXSnZiQzVtYjNJb1lHVnVlbmx0WlM0a2UzTjlZQ2tnT2lCek8xeHVmVnh1WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnY0hKcGRtRjBaVk5sZENodlltb3NJSEJ5YjNBc0lIWmhiSFZsS1NCN1hHNGdJRTlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNodlltb3NJSEJ5YjNBc0lIdGNiaUFnSUNCMllXeDFaU3hjYmlBZ0lDQmxiblZ0WlhKaFlteGxPaUJtWVd4elpTeGNiaUFnSUNCM2NtbDBZV0pzWlRvZ2RISjFaU3hjYmlBZ2ZTazdYRzU5WEc1Y2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCamJHOXVaVVZzWlcxbGJuUW9ZV1JoY0hSbGNpd2daV3dzSUhCeWIzQnpLU0I3WEc0Z0lISmxkSFZ5YmlCaFpHRndkR1Z5TG1OeVpXRjBaVVZzWlcxbGJuUW9YRzRnSUNBZ1pXd3VkSGx3WlN4Y2JpQWdJQ0I3SUM0dUxtVnNMbkJ5YjNCekxDQXVMaTV3Y205d2N5QjlMRnh1SUNBcE8xeHVmVnh1WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnYzNCNVRXVjBhRzlrS0dsdWMzUmhibU5sTENCdFpYUm9iMlJPWVcxbExDQm5aWFJUZEhWaUlEMGdLQ2tnUFQ0Z2UzMHBJSHRjYmlBZ2JHVjBJR3hoYzNSU1pYUjFjbTVXWVd4MVpUdGNiaUFnWTI5dWMzUWdiM0pwWjJsdVlXeE5aWFJvYjJRZ1BTQnBibk4wWVc1alpWdHRaWFJvYjJST1lXMWxYVHRjYmlBZ1kyOXVjM1FnYUdGelQzZHVJRDBnYUdGektHbHVjM1JoYm1ObExDQnRaWFJvYjJST1lXMWxLVHRjYmlBZ2JHVjBJR1JsYzJOeWFYQjBiM0k3WEc0Z0lHbG1JQ2hvWVhOUGQyNHBJSHRjYmlBZ0lDQmtaWE5qY21sd2RHOXlJRDBnVDJKcVpXTjBMbWRsZEU5M2JsQnliM0JsY25SNVJHVnpZM0pwY0hSdmNpaHBibk4wWVc1alpTd2diV1YwYUc5a1RtRnRaU2s3WEc0Z0lIMWNiaUFnVDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtHbHVjM1JoYm1ObExDQnRaWFJvYjJST1lXMWxMQ0I3WEc0Z0lDQWdZMjl1Wm1sbmRYSmhZbXhsT2lCMGNuVmxMRnh1SUNBZ0lHVnVkVzFsY21GaWJHVTZJQ0ZrWlhOamNtbHdkRzl5SUh4OElDRWhaR1Z6WTNKcGNIUnZjaTVsYm5WdFpYSmhZbXhsTEZ4dUlDQWdJSFpoYkhWbE9pQm5aWFJUZEhWaUtHOXlhV2RwYm1Gc1RXVjBhRzlrS1NCOGZDQm1kVzVqZEdsdmJpQnpjR2xsWkNndUxpNWhjbWR6S1NCN1hHNGdJQ0FnSUNCamIyNXpkQ0J5WlhOMWJIUWdQU0J2Y21sbmFXNWhiRTFsZEdodlpDNWhjSEJzZVNoMGFHbHpMQ0JoY21kektUdGNiaUFnSUNBZ0lHeGhjM1JTWlhSMWNtNVdZV3gxWlNBOUlISmxjM1ZzZER0Y2JpQWdJQ0FnSUhKbGRIVnliaUJ5WlhOMWJIUTdYRzRnSUNBZ2ZTeGNiaUFnZlNrN1hHNGdJSEpsZEhWeWJpQjdYRzRnSUNBZ2NtVnpkRzl5WlNncElIdGNiaUFnSUNBZ0lHbG1JQ2hvWVhOUGQyNHBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHUmxjMk55YVhCMGIzSXBJSHRjYmlBZ0lDQWdJQ0FnSUNCUFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29hVzV6ZEdGdVkyVXNJRzFsZEdodlpFNWhiV1VzSUdSbGMyTnlhWEIwYjNJcE8xeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQzhxSUdWemJHbHVkQzFrYVhOaFlteGxJRzV2TFhCaGNtRnRMWEpsWVhOemFXZHVJQ292WEc0Z0lDQWdJQ0FnSUNBZ2FXNXpkR0Z1WTJWYmJXVjBhRzlrVG1GdFpWMGdQU0J2Y21sbmFXNWhiRTFsZEdodlpEdGNiaUFnSUNBZ0lDQWdJQ0F2S2lCbGMyeHBiblF0Wlc1aFlteGxJRzV2TFhCaGNtRnRMWEpsWVhOemFXZHVJQ292WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUM4cUlHVnpiR2x1ZEMxa2FYTmhZbXhsSUc1dkxYQmhjbUZ0TFhKbFlYTnphV2R1SUNvdlhHNGdJQ0FnSUNBZ0lHUmxiR1YwWlNCcGJuTjBZVzVqWlZ0dFpYUm9iMlJPWVcxbFhUdGNiaUFnSUNBZ0lDQWdMeW9nWlhOc2FXNTBMV1Z1WVdKc1pTQnVieTF3WVhKaGJTMXlaV0Z6YzJsbmJpQXFMMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMHNYRzRnSUNBZ1oyVjBUR0Z6ZEZKbGRIVnlibFpoYkhWbEtDa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlHeGhjM1JTWlhSMWNtNVdZV3gxWlR0Y2JpQWdJQ0I5TEZ4dUlDQjlPMXh1ZlZ4dVhHNWxlSEJ2Y25RZ2V5QmtaV1poZFd4MElHRnpJSE5vWVd4c2IzZEZjWFZoYkNCOUlHWnliMjBnSjJWdWVubHRaUzF6YUdGc2JHOTNMV1Z4ZFdGc0p6dGNibHh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJR2x6Ulcxd2RIbFdZV3gxWlNoeVpXNWtaWEpsWkZaaGJIVmxLU0I3WEc0Z0lISmxkSFZ5YmlCeVpXNWtaWEpsWkZaaGJIVmxJRDA5UFNCdWRXeHNJSHg4SUhKbGJtUmxjbVZrVm1Gc2RXVWdQVDA5SUdaaGJITmxPMXh1ZlZ4dVhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z2NtVnVaR1Z5WldSRWFYWmxLRzV2WkdWektTQjdYRzRnSUdsbUlDaHBjMFZ0Y0hSNVZtRnNkV1VvYm05a1pYTXBLU0I3WEc0Z0lDQWdjbVYwZFhKdUlIUnlkV1U3WEc0Z0lIMWNibHh1SUNCeVpYUjFjbTRnVzEwdVkyOXVZMkYwS0c1dlpHVnpLUzVsZG1WeWVTZ29iaWtnUFQ0Z2UxeHVJQ0FnSUdsbUlDaHVLU0I3WEc0Z0lDQWdJQ0JqYjI1emRDQjdJSEpsYm1SbGNtVmtJSDBnUFNCdU8xeHVJQ0FnSUNBZ2NtVjBkWEp1SUdselJXMXdkSGxXWVd4MVpTaHlaVzVrWlhKbFpDa2dmSHdnY21WdVpHVnlaV1JFYVhabEtISmxibVJsY21Wa0tUdGNiaUFnSUNCOVhHNWNiaUFnSUNCeVpYUjFjbTRnYVhORmJYQjBlVlpoYkhWbEtHNHBPMXh1SUNCOUtUdGNibjFjYmx4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUd4dllXUkRhR1ZsY21sdlVtOXZkQ2hvZEcxc0tTQjdYRzRnSUdsbUlDZ2hhSFJ0YkNrZ2UxeHVJQ0FnSUhKbGRIVnliaUJqYUdWbGNtbHZMbkp2YjNRb0tUdGNiaUFnZlZ4dVhHNGdJR2xtSUNnaGFYTklkRzFzS0doMGJXd3BLU0I3WEc0Z0lDQWdMeThnZFhObElHbHpSRzlqZFcxbGJuUTlabUZzYzJVZ2RHOGdZM0psWVhSbElHWnlZV2R0Wlc1MFhHNGdJQ0FnY21WMGRYSnVJR05vWldWeWFXOHViRzloWkNob2RHMXNMQ0J1ZFd4c0xDQm1ZV3h6WlNrdWNtOXZkQ2dwTzF4dUlDQjlYRzVjYmlBZ2NtVjBkWEp1SUdOb1pXVnlhVzh1Ykc5aFpDZ25KeWtvYUhSdGJDazdYRzU5WEc0aVhYMD1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVV0aWxzLmpzLm1hcCIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZ2V0ID0gZ2V0O1xuZXhwb3J0cy5tZXJnZSA9IG1lcmdlO1xuZXhwb3J0cy5yZXNldCA9IHJlc2V0O1xuXG52YXIgX29iamVjdCA9IHJlcXVpcmUoJ29iamVjdC5hc3NpZ24nKTtcblxudmFyIF9vYmplY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfb2JqZWN0KTtcblxudmFyIF92YWxpZGF0ZUFkYXB0ZXIgPSByZXF1aXJlKCcuL3ZhbGlkYXRlQWRhcHRlcicpO1xuXG52YXIgX3ZhbGlkYXRlQWRhcHRlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF92YWxpZGF0ZUFkYXB0ZXIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbnZhciBjb25maWd1cmF0aW9uID0ge307XG5cbmZ1bmN0aW9uIGdldCgpIHtcbiAgcmV0dXJuICgwLCBfb2JqZWN0MlsnZGVmYXVsdCddKSh7fSwgY29uZmlndXJhdGlvbik7XG59XG5cbmZ1bmN0aW9uIG1lcmdlKGV4dHJhKSB7XG4gIGlmIChleHRyYS5hZGFwdGVyKSB7XG4gICAgKDAsIF92YWxpZGF0ZUFkYXB0ZXIyWydkZWZhdWx0J10pKGV4dHJhLmFkYXB0ZXIpO1xuICB9XG4gICgwLCBfb2JqZWN0MlsnZGVmYXVsdCddKShjb25maWd1cmF0aW9uLCBleHRyYSk7XG59XG5cbmZ1bmN0aW9uIHJlc2V0KCkge1xuICB2YXIgcmVwbGFjZW1lbnRDb25maWcgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gIGNvbmZpZ3VyYXRpb24gPSB7fTtcbiAgbWVyZ2UocmVwbGFjZW1lbnRDb25maWcpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk0dUwzTnlZeTlqYjI1bWFXZDFjbUYwYVc5dUxtcHpJbDBzSW01aGJXVnpJanBiSW1kbGRDSXNJbTFsY21kbElpd2ljbVZ6WlhRaUxDSmpiMjVtYVdkMWNtRjBhVzl1SWl3aVpYaDBjbUVpTENKaFpHRndkR1Z5SWl3aWNtVndiR0ZqWlcxbGJuUkRiMjVtYVdjaVhTd2liV0Z3Y0dsdVozTWlPaUk3T3pzN08xRkJTV2RDUVN4SExFZEJRVUZCTEVjN1VVRkpRVU1zU3l4SFFVRkJRU3hMTzFGQlQwRkRMRXNzUjBGQlFVRXNTenM3T3pzN08wRkJabWhDT3pzN096czdRVUZGUVN4SlFVRkpReXhuUWtGQlowSXNSVUZCY0VJN08wRkJSVThzVTBGQlUwZ3NSMEZCVkN4SFFVRmxPMEZCUTNCQ0xITkRRVUZaUnl4aFFVRmFPMEZCUTBRN08wRkJSVTBzVTBGQlUwWXNTMEZCVkN4RFFVRmxSeXhMUVVGbUxFVkJRWE5DTzBGQlF6TkNMRTFCUVVsQkxFMUJRVTFETEU5QlFWWXNSVUZCYlVJN1FVRkRha0lzYzBOQlFXZENSQ3hOUVVGTlF5eFBRVUYwUWp0QlFVTkVPMEZCUTBRc01rSkJRV05HTEdGQlFXUXNSVUZCTmtKRExFdEJRVGRDTzBGQlEwUTdPMEZCUlUwc1UwRkJVMFlzUzBGQlZDeEhRVUYxUXp0QlFVRkJMRTFCUVhoQ1NTeHBRa0ZCZDBJc2RVVkJRVW9zUlVGQlNUczdRVUZETlVOSUxHdENRVUZuUWl4RlFVRm9RanRCUVVOQlJpeFJRVUZOU3l4cFFrRkJUanRCUVVORUlpd2labWxzWlNJNkltTnZibVpwWjNWeVlYUnBiMjR1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnBiWEJ2Y25RZ2RtRnNhV1JoZEdWQlpHRndkR1Z5SUdaeWIyMGdKeTR2ZG1Gc2FXUmhkR1ZCWkdGd2RHVnlKenRjYmx4dWJHVjBJR052Ym1acFozVnlZWFJwYjI0Z1BTQjdmVHRjYmx4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUdkbGRDZ3BJSHRjYmlBZ2NtVjBkWEp1SUhzZ0xpNHVZMjl1Wm1sbmRYSmhkR2x2YmlCOU8xeHVmVnh1WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnYldWeVoyVW9aWGgwY21FcElIdGNiaUFnYVdZZ0tHVjRkSEpoTG1Ga1lYQjBaWElwSUh0Y2JpQWdJQ0IyWVd4cFpHRjBaVUZrWVhCMFpYSW9aWGgwY21FdVlXUmhjSFJsY2lrN1hHNGdJSDFjYmlBZ1QySnFaV04wTG1GemMybG5iaWhqYjI1bWFXZDFjbUYwYVc5dUxDQmxlSFJ5WVNrN1hHNTlYRzVjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJ5WlhObGRDaHlaWEJzWVdObGJXVnVkRU52Ym1acFp5QTlJSHQ5S1NCN1hHNGdJR052Ym1acFozVnlZWFJwYjI0Z1BTQjdmVHRjYmlBZ2JXVnlaMlVvY21Wd2JHRmpaVzFsYm5SRGIyNW1hV2NwTzF4dWZWeHVJbDE5XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25maWd1cmF0aW9uLmpzLm1hcCIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IGdldEFkYXB0ZXI7XG5cbnZhciBfdmFsaWRhdGVBZGFwdGVyID0gcmVxdWlyZSgnLi92YWxpZGF0ZUFkYXB0ZXInKTtcblxudmFyIF92YWxpZGF0ZUFkYXB0ZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdmFsaWRhdGVBZGFwdGVyKTtcblxudmFyIF9jb25maWd1cmF0aW9uID0gcmVxdWlyZSgnLi9jb25maWd1cmF0aW9uJyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxuZnVuY3Rpb24gZ2V0QWRhcHRlcigpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gIGlmIChvcHRpb25zLmFkYXB0ZXIpIHtcbiAgICAoMCwgX3ZhbGlkYXRlQWRhcHRlcjJbJ2RlZmF1bHQnXSkob3B0aW9ucy5hZGFwdGVyKTtcbiAgICByZXR1cm4gb3B0aW9ucy5hZGFwdGVyO1xuICB9XG5cbiAgdmFyIF9nZXQgPSAoMCwgX2NvbmZpZ3VyYXRpb24uZ2V0KSgpLFxuICAgICAgYWRhcHRlciA9IF9nZXQuYWRhcHRlcjtcblxuICAoMCwgX3ZhbGlkYXRlQWRhcHRlcjJbJ2RlZmF1bHQnXSkoYWRhcHRlcik7XG4gIHJldHVybiBhZGFwdGVyO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk0dUwzTnlZeTluWlhSQlpHRndkR1Z5TG1weklsMHNJbTVoYldWeklqcGJJbWRsZEVGa1lYQjBaWElpTENKdmNIUnBiMjV6SWl3aVlXUmhjSFJsY2lKZExDSnRZWEJ3YVc1bmN5STZJanM3T3pzN2NVSkJSM2RDUVN4Vk96dEJRVWg0UWpzN096dEJRVU5CT3pzN08wRkJSV1VzVTBGQlUwRXNWVUZCVkN4SFFVRnJRenRCUVVGQkxFMUJRV1JETEU5QlFXTXNkVVZCUVVvc1JVRkJTVHM3UVVGREwwTXNUVUZCU1VFc1VVRkJVVU1zVDBGQldpeEZRVUZ4UWp0QlFVTnVRaXh6UTBGQlowSkVMRkZCUVZGRExFOUJRWGhDTzBGQlEwRXNWMEZCVDBRc1VVRkJVVU1zVDBGQlpqdEJRVU5FT3p0QlFVbzRReXhoUVVzelFpeDVRa0ZNTWtJN1FVRkJRU3hOUVV0MlEwRXNUMEZNZFVNc1VVRkxka05CTEU5QlRIVkRPenRCUVUwdlF5eHZRMEZCWjBKQkxFOUJRV2hDTzBGQlEwRXNVMEZCVDBFc1QwRkJVRHRCUVVORUlpd2labWxzWlNJNkltZGxkRUZrWVhCMFpYSXVhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKcGJYQnZjblFnZG1Gc2FXUmhkR1ZCWkdGd2RHVnlJR1p5YjIwZ0p5NHZkbUZzYVdSaGRHVkJaR0Z3ZEdWeUp6dGNibWx0Y0c5eWRDQjdJR2RsZENCOUlHWnliMjBnSnk0dlkyOXVabWxuZFhKaGRHbHZiaWM3WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUdaMWJtTjBhVzl1SUdkbGRFRmtZWEIwWlhJb2IzQjBhVzl1Y3lBOUlIdDlLU0I3WEc0Z0lHbG1JQ2h2Y0hScGIyNXpMbUZrWVhCMFpYSXBJSHRjYmlBZ0lDQjJZV3hwWkdGMFpVRmtZWEIwWlhJb2IzQjBhVzl1Y3k1aFpHRndkR1Z5S1R0Y2JpQWdJQ0J5WlhSMWNtNGdiM0IwYVc5dWN5NWhaR0Z3ZEdWeU8xeHVJQ0I5WEc0Z0lHTnZibk4wSUhzZ1lXUmhjSFJsY2lCOUlEMGdaMlYwS0NrN1hHNGdJSFpoYkdsa1lYUmxRV1JoY0hSbGNpaGhaR0Z3ZEdWeUtUdGNiaUFnY21WMGRYSnVJR0ZrWVhCMFpYSTdYRzU5WEc0aVhYMD1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldEFkYXB0ZXIuanMubWFwIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgX1JlYWN0V3JhcHBlciA9IHJlcXVpcmUoJy4vUmVhY3RXcmFwcGVyJyk7XG5cbnZhciBfUmVhY3RXcmFwcGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1JlYWN0V3JhcHBlcik7XG5cbnZhciBfU2hhbGxvd1dyYXBwZXIgPSByZXF1aXJlKCcuL1NoYWxsb3dXcmFwcGVyJyk7XG5cbnZhciBfU2hhbGxvd1dyYXBwZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfU2hhbGxvd1dyYXBwZXIpO1xuXG52YXIgX0VuenltZUFkYXB0ZXIgPSByZXF1aXJlKCcuL0VuenltZUFkYXB0ZXInKTtcblxudmFyIF9Fbnp5bWVBZGFwdGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0VuenltZUFkYXB0ZXIpO1xuXG52YXIgX21vdW50ID0gcmVxdWlyZSgnLi9tb3VudCcpO1xuXG52YXIgX21vdW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX21vdW50KTtcblxudmFyIF9zaGFsbG93ID0gcmVxdWlyZSgnLi9zaGFsbG93Jyk7XG5cbnZhciBfc2hhbGxvdzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zaGFsbG93KTtcblxudmFyIF9yZW5kZXIgPSByZXF1aXJlKCcuL3JlbmRlcicpO1xuXG52YXIgX3JlbmRlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZW5kZXIpO1xuXG52YXIgX2NvbmZpZ3VyYXRpb24gPSByZXF1aXJlKCcuL2NvbmZpZ3VyYXRpb24nKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgcmVuZGVyOiBfcmVuZGVyMlsnZGVmYXVsdCddLFxuICBzaGFsbG93OiBfc2hhbGxvdzJbJ2RlZmF1bHQnXSxcbiAgbW91bnQ6IF9tb3VudDJbJ2RlZmF1bHQnXSxcbiAgU2hhbGxvd1dyYXBwZXI6IF9TaGFsbG93V3JhcHBlcjJbJ2RlZmF1bHQnXSxcbiAgUmVhY3RXcmFwcGVyOiBfUmVhY3RXcmFwcGVyMlsnZGVmYXVsdCddLFxuICBjb25maWd1cmU6IF9jb25maWd1cmF0aW9uLm1lcmdlLFxuICBFbnp5bWVBZGFwdGVyOiBfRW56eW1lQWRhcHRlcjJbJ2RlZmF1bHQnXVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpNHVMM055WXk5cGJtUmxlQzVxY3lKZExDSnVZVzFsY3lJNld5SnRiMlIxYkdVaUxDSmxlSEJ2Y25Seklpd2ljbVZ1WkdWeUlpd2ljMmhoYkd4dmR5SXNJbTF2ZFc1MElpd2lVMmhoYkd4dmQxZHlZWEJ3WlhJaUxDSlNaV0ZqZEZkeVlYQndaWElpTENKamIyNW1hV2QxY21VaUxDSkZibnA1YldWQlpHRndkR1Z5SWwwc0ltMWhjSEJwYm1keklqb2lPenRCUVVGQk96czdPMEZCUTBFN096czdRVUZEUVRzN096dEJRVVZCT3pzN08wRkJRMEU3T3pzN1FVRkRRVHM3T3p0QlFVTkJPenM3TzBGQlJVRkJMRTlCUVU5RExFOUJRVkFzUjBGQmFVSTdRVUZEWmtNc05rSkJSR1U3UVVGRlprTXNLMEpCUm1VN1FVRkhaa01zTWtKQlNHVTdRVUZKWmtNc05rTkJTbVU3UVVGTFprTXNlVU5CVEdVN1FVRk5aa01zYVVOQlRtVTdRVUZQWmtNN1FVRlFaU3hEUVVGcVFpSXNJbVpwYkdVaU9pSnBibVJsZUM1cWN5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJbWx0Y0c5eWRDQlNaV0ZqZEZkeVlYQndaWElnWm5KdmJTQW5MaTlTWldGamRGZHlZWEJ3WlhJbk8xeHVhVzF3YjNKMElGTm9ZV3hzYjNkWGNtRndjR1Z5SUdaeWIyMGdKeTR2VTJoaGJHeHZkMWR5WVhCd1pYSW5PMXh1YVcxd2IzSjBJRVZ1ZW5sdFpVRmtZWEIwWlhJZ1puSnZiU0FuTGk5RmJucDViV1ZCWkdGd2RHVnlKenRjYmx4dWFXMXdiM0owSUcxdmRXNTBJR1p5YjIwZ0p5NHZiVzkxYm5Rbk8xeHVhVzF3YjNKMElITm9ZV3hzYjNjZ1puSnZiU0FuTGk5emFHRnNiRzkzSnp0Y2JtbHRjRzl5ZENCeVpXNWtaWElnWm5KdmJTQW5MaTl5Wlc1a1pYSW5PMXh1YVcxd2IzSjBJSHNnYldWeVoyVWdZWE1nWTI5dVptbG5kWEpsSUgwZ1puSnZiU0FuTGk5amIyNW1hV2QxY21GMGFXOXVKenRjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCN1hHNGdJSEpsYm1SbGNpeGNiaUFnYzJoaGJHeHZkeXhjYmlBZ2JXOTFiblFzWEc0Z0lGTm9ZV3hzYjNkWGNtRndjR1Z5TEZ4dUlDQlNaV0ZqZEZkeVlYQndaWElzWEc0Z0lHTnZibVpwWjNWeVpTeGNiaUFnUlc1NmVXMWxRV1JoY0hSbGNpeGNibjA3WEc0aVhYMD1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IG1vdW50O1xuXG52YXIgX1JlYWN0V3JhcHBlciA9IHJlcXVpcmUoJy4vUmVhY3RXcmFwcGVyJyk7XG5cbnZhciBfUmVhY3RXcmFwcGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1JlYWN0V3JhcHBlcik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxuLyoqXG4gKiBNb3VudHMgYW5kIHJlbmRlcnMgYSByZWFjdCBjb21wb25lbnQgaW50byB0aGUgZG9jdW1lbnQgYW5kIHByb3ZpZGVzIGEgdGVzdGluZyB3cmFwcGVyIGFyb3VuZCBpdC5cbiAqXG4gKiBAcGFyYW0gbm9kZVxuICogQHJldHVybnMge1JlYWN0V3JhcHBlcn1cbiAqL1xuZnVuY3Rpb24gbW91bnQobm9kZSwgb3B0aW9ucykge1xuICByZXR1cm4gbmV3IF9SZWFjdFdyYXBwZXIyWydkZWZhdWx0J10obm9kZSwgbnVsbCwgb3B0aW9ucyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTR1TDNOeVl5OXRiM1Z1ZEM1cWN5SmRMQ0p1WVcxbGN5STZXeUp0YjNWdWRDSXNJbTV2WkdVaUxDSnZjSFJwYjI1eklpd2lVbVZoWTNSWGNtRndjR1Z5SWwwc0ltMWhjSEJwYm1keklqb2lPenM3T3p0eFFrRlJkMEpCTEVzN08wRkJVbmhDT3pzN096czdRVUZGUVRzN096czdPMEZCVFdVc1UwRkJVMEVzUzBGQlZDeERRVUZsUXl4SlFVRm1MRVZCUVhGQ1F5eFBRVUZ5UWl4RlFVRTRRanRCUVVNelF5eFRRVUZQTEVsQlFVbERMSGxDUVVGS0xFTkJRV2xDUml4SlFVRnFRaXhGUVVGMVFpeEpRVUYyUWl4RlFVRTJRa01zVDBGQk4wSXNRMEZCVUR0QlFVTkVJaXdpWm1sc1pTSTZJbTF2ZFc1MExtcHpJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpYVcxd2IzSjBJRkpsWVdOMFYzSmhjSEJsY2lCbWNtOXRJQ2N1TDFKbFlXTjBWM0poY0hCbGNpYzdYRzVjYmk4cUtseHVJQ29nVFc5MWJuUnpJR0Z1WkNCeVpXNWtaWEp6SUdFZ2NtVmhZM1FnWTI5dGNHOXVaVzUwSUdsdWRHOGdkR2hsSUdSdlkzVnRaVzUwSUdGdVpDQndjbTkyYVdSbGN5QmhJSFJsYzNScGJtY2dkM0poY0hCbGNpQmhjbTkxYm1RZ2FYUXVYRzRnS2x4dUlDb2dRSEJoY21GdElHNXZaR1ZjYmlBcUlFQnlaWFIxY201eklIdFNaV0ZqZEZkeVlYQndaWEo5WEc0Z0tpOWNibVY0Y0c5eWRDQmtaV1poZFd4MElHWjFibU4wYVc5dUlHMXZkVzUwS0c1dlpHVXNJRzl3ZEdsdmJuTXBJSHRjYmlBZ2NtVjBkWEp1SUc1bGR5QlNaV0ZqZEZkeVlYQndaWElvYm05a1pTd2diblZzYkN3Z2IzQjBhVzl1Y3lrN1hHNTlYRzRpWFgwPVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bW91bnQuanMubWFwIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1snZGVmYXVsdCddID0gcmVuZGVyO1xuXG52YXIgX29iamVjdCA9IHJlcXVpcmUoJ29iamVjdC5hc3NpZ24nKTtcblxudmFyIF9vYmplY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfb2JqZWN0KTtcblxudmFyIF9nZXRBZGFwdGVyID0gcmVxdWlyZSgnLi9nZXRBZGFwdGVyJyk7XG5cbnZhciBfZ2V0QWRhcHRlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRBZGFwdGVyKTtcblxudmFyIF9VdGlscyA9IHJlcXVpcmUoJy4vVXRpbHMnKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG4vKipcbiAqIFJlbmRlcnMgYSByZWFjdCBjb21wb25lbnQgaW50byBzdGF0aWMgSFRNTCBhbmQgcHJvdmlkZXMgYSBjaGVlcmlvIHdyYXBwZXIgYXJvdW5kIGl0LiBUaGlzIGlzXG4gKiBzb21ld2hhdCBhc3ltbWV0cmljIHdpdGggYG1vdW50YCBhbmQgYHNoYWxsb3dgLCB3aGljaCBkb24ndCB1c2UgYW55IGV4dGVybmFsIGxpYnJhcmllcywgYnV0XG4gKiBDaGVlcmlvJ3MgQVBJIGlzIHByZXR0eSBjbG9zZSB0byB3aGF0IHdlIGFjdHVhbGx5IHdhbnQgYW5kIGhhcyBhIHNpZ25pZmljYW50IGFtb3VudCBvZiB1dGlsaXR5XG4gKiB0aGF0IHdvdWxkIGJlIHJlY3JlYXRpbmcgdGhlIHdoZWVsIGlmIHdlIGRpZG4ndCB1c2UgaXQuXG4gKlxuICogSSB0aGluayB0aGVyZSBhcmUgYSBsb3Qgb2YgZ29vZCB1c2UgY2FzZXMgdG8gdXNlIGByZW5kZXJgIGluc3RlYWQgb2YgYHNoYWxsb3dgIG9yIGBtb3VudGAsIGFuZFxuICogdGh1cyBJJ2QgbGlrZSB0byBrZWVwIHRoaXMgQVBJIGluIGhlcmUgZXZlbiB0aG91Z2ggaXQncyBub3QgcmVhbGx5IFwib3Vyc1wiLlxuICpcbiAqIEBwYXJhbSBub2RlXG4gKiBAcGFyYW0gb3B0aW9uc1xuICogQHJldHVybnMge0NoZWVyaW99XG4gKi9cblxuZnVuY3Rpb24gcmVuZGVyKG5vZGUpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXG4gIHZhciBhZGFwdGVyID0gKDAsIF9nZXRBZGFwdGVyMlsnZGVmYXVsdCddKShvcHRpb25zKTtcbiAgdmFyIHJlbmRlcmVyID0gYWRhcHRlci5jcmVhdGVSZW5kZXJlcigoMCwgX29iamVjdDJbJ2RlZmF1bHQnXSkoeyBtb2RlOiAnc3RyaW5nJyB9LCBvcHRpb25zKSk7XG4gIHZhciBodG1sID0gcmVuZGVyZXIucmVuZGVyKG5vZGUsIG9wdGlvbnMuY29udGV4dCk7XG4gIHJldHVybiAoMCwgX1V0aWxzLmxvYWRDaGVlcmlvUm9vdCkoaHRtbCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTR1TDNOeVl5OXlaVzVrWlhJdWFuTWlYU3dpYm1GdFpYTWlPbHNpY21WdVpHVnlJaXdpYm05a1pTSXNJbTl3ZEdsdmJuTWlMQ0poWkdGd2RHVnlJaXdpY21WdVpHVnlaWElpTENKamNtVmhkR1ZTWlc1a1pYSmxjaUlzSW0xdlpHVWlMQ0pvZEcxc0lpd2lZMjl1ZEdWNGRDSmRMQ0p0WVhCd2FXNW5jeUk2SWpzN096czdjVUpCYVVKM1FrRXNUVHM3T3pzN08wRkJha0o0UWpzN096dEJRVU5CT3pzN08wRkJSVUU3T3pzN096czdPenM3T3pzN08wRkJZMlVzVTBGQlUwRXNUVUZCVkN4RFFVRm5Ra01zU1VGQmFFSXNSVUZCYjBNN1FVRkJRU3hOUVVGa1F5eFBRVUZqTEhWRlFVRktMRVZCUVVrN08wRkJRMnBFTEUxQlFVMURMRlZCUVZVc05rSkJRVmRFTEU5QlFWZ3NRMEZCYUVJN1FVRkRRU3hOUVVGTlJTeFhRVUZYUkN4UlFVRlJSU3hqUVVGU0xEUkNRVUY1UWtNc1RVRkJUU3hSUVVFdlFpeEpRVUUwUTBvc1QwRkJOVU1zUlVGQmFrSTdRVUZEUVN4TlFVRk5TeXhQUVVGUFNDeFRRVUZUU2l4TlFVRlVMRU5CUVdkQ1F5eEpRVUZvUWl4RlFVRnpRa01zVVVGQlVVMHNUMEZCT1VJc1EwRkJZanRCUVVOQkxGTkJRVThzTkVKQlFXZENSQ3hKUVVGb1FpeERRVUZRTzBGQlEwUWlMQ0ptYVd4bElqb2ljbVZ1WkdWeUxtcHpJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpYVcxd2IzSjBJR2RsZEVGa1lYQjBaWElnWm5KdmJTQW5MaTluWlhSQlpHRndkR1Z5Snp0Y2JtbHRjRzl5ZENCN0lHeHZZV1JEYUdWbGNtbHZVbTl2ZENCOUlHWnliMjBnSnk0dlZYUnBiSE1uTzF4dVhHNHZLaXBjYmlBcUlGSmxibVJsY25NZ1lTQnlaV0ZqZENCamIyMXdiMjVsYm5RZ2FXNTBieUJ6ZEdGMGFXTWdTRlJOVENCaGJtUWdjSEp2ZG1sa1pYTWdZU0JqYUdWbGNtbHZJSGR5WVhCd1pYSWdZWEp2ZFc1a0lHbDBMaUJVYUdseklHbHpYRzRnS2lCemIyMWxkMmhoZENCaGMzbHRiV1YwY21saklIZHBkR2dnWUcxdmRXNTBZQ0JoYm1RZ1lITm9ZV3hzYjNkZ0xDQjNhR2xqYUNCa2IyNG5kQ0IxYzJVZ1lXNTVJR1Y0ZEdWeWJtRnNJR3hwWW5KaGNtbGxjeXdnWW5WMFhHNGdLaUJEYUdWbGNtbHZKM01nUVZCSklHbHpJSEJ5WlhSMGVTQmpiRzl6WlNCMGJ5QjNhR0YwSUhkbElHRmpkSFZoYkd4NUlIZGhiblFnWVc1a0lHaGhjeUJoSUhOcFoyNXBabWxqWVc1MElHRnRiM1Z1ZENCdlppQjFkR2xzYVhSNVhHNGdLaUIwYUdGMElIZHZkV3hrSUdKbElISmxZM0psWVhScGJtY2dkR2hsSUhkb1pXVnNJR2xtSUhkbElHUnBaRzRuZENCMWMyVWdhWFF1WEc0Z0tseHVJQ29nU1NCMGFHbHVheUIwYUdWeVpTQmhjbVVnWVNCc2IzUWdiMllnWjI5dlpDQjFjMlVnWTJGelpYTWdkRzhnZFhObElHQnlaVzVrWlhKZ0lHbHVjM1JsWVdRZ2IyWWdZSE5vWVd4c2IzZGdJRzl5SUdCdGIzVnVkR0FzSUdGdVpGeHVJQ29nZEdoMWN5QkpKMlFnYkdsclpTQjBieUJyWldWd0lIUm9hWE1nUVZCSklHbHVJR2hsY21VZ1pYWmxiaUIwYUc5MVoyZ2dhWFFuY3lCdWIzUWdjbVZoYkd4NUlGd2liM1Z5YzF3aUxseHVJQ3BjYmlBcUlFQndZWEpoYlNCdWIyUmxYRzRnS2lCQWNHRnlZVzBnYjNCMGFXOXVjMXh1SUNvZ1FISmxkSFZ5Ym5NZ2UwTm9aV1Z5YVc5OVhHNGdLaTljYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnWm5WdVkzUnBiMjRnY21WdVpHVnlLRzV2WkdVc0lHOXdkR2x2Ym5NZ1BTQjdmU2tnZTF4dUlDQmpiMjV6ZENCaFpHRndkR1Z5SUQwZ1oyVjBRV1JoY0hSbGNpaHZjSFJwYjI1ektUdGNiaUFnWTI5dWMzUWdjbVZ1WkdWeVpYSWdQU0JoWkdGd2RHVnlMbU55WldGMFpWSmxibVJsY21WeUtIc2diVzlrWlRvZ0ozTjBjbWx1Wnljc0lDNHVMbTl3ZEdsdmJuTWdmU2s3WEc0Z0lHTnZibk4wSUdoMGJXd2dQU0J5Wlc1a1pYSmxjaTV5Wlc1a1pYSW9ibTlrWlN3Z2IzQjBhVzl1Y3k1amIyNTBaWGgwS1R0Y2JpQWdjbVYwZFhKdUlHeHZZV1JEYUdWbGNtbHZVbTl2ZENob2RHMXNLVHRjYm4xY2JpSmRmUT09XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZW5kZXIuanMubWFwIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbnZhciBfc2xpY2VkVG9BcnJheSA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gc2xpY2VJdGVyYXRvcihhcnIsIGkpIHsgdmFyIF9hcnIgPSBbXTsgdmFyIF9uID0gdHJ1ZTsgdmFyIF9kID0gZmFsc2U7IHZhciBfZSA9IHVuZGVmaW5lZDsgdHJ5IHsgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgeyBfYXJyLnB1c2goX3MudmFsdWUpOyBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7IH0gfSBjYXRjaCAoZXJyKSB7IF9kID0gdHJ1ZTsgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0pIF9pW1wicmV0dXJuXCJdKCk7IH0gZmluYWxseSB7IGlmIChfZCkgdGhyb3cgX2U7IH0gfSByZXR1cm4gX2FycjsgfSByZXR1cm4gZnVuY3Rpb24gKGFyciwgaSkgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7IHJldHVybiBhcnI7IH0gZWxzZSBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChhcnIpKSB7IHJldHVybiBzbGljZUl0ZXJhdG9yKGFyciwgaSk7IH0gZWxzZSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpOyB9IH07IH0oKTtcblxuZXhwb3J0cy5idWlsZFByZWRpY2F0ZSA9IGJ1aWxkUHJlZGljYXRlO1xuZXhwb3J0cy5yZWR1Y2VUcmVlQnlTZWxlY3RvciA9IHJlZHVjZVRyZWVCeVNlbGVjdG9yO1xuZXhwb3J0cy5yZWR1Y2VUcmVlc0J5U2VsZWN0b3IgPSByZWR1Y2VUcmVlc0J5U2VsZWN0b3I7XG5cbnZhciBfcnN0U2VsZWN0b3JQYXJzZXIgPSByZXF1aXJlKCdyc3Qtc2VsZWN0b3ItcGFyc2VyJyk7XG5cbnZhciBfb2JqZWN0ID0gcmVxdWlyZSgnb2JqZWN0LnZhbHVlcycpO1xuXG52YXIgX29iamVjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9vYmplY3QpO1xuXG52YXIgX2FycmF5UHJvdG90eXBlID0gcmVxdWlyZSgnYXJyYXkucHJvdG90eXBlLmZsYXQnKTtcblxudmFyIF9hcnJheVByb3RvdHlwZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9hcnJheVByb3RvdHlwZSk7XG5cbnZhciBfb2JqZWN0SXMgPSByZXF1aXJlKCdvYmplY3QtaXMnKTtcblxudmFyIF9vYmplY3RJczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9vYmplY3RJcyk7XG5cbnZhciBfaGFzID0gcmVxdWlyZSgnaGFzJyk7XG5cbnZhciBfaGFzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2hhcyk7XG5cbnZhciBfYnlDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJ2h0bWwtZWxlbWVudC1tYXAvYnlDb25zdHJ1Y3RvcicpO1xuXG52YXIgX2J5Q29uc3RydWN0b3IyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYnlDb25zdHJ1Y3Rvcik7XG5cbnZhciBfUlNUVHJhdmVyc2FsID0gcmVxdWlyZSgnLi9SU1RUcmF2ZXJzYWwnKTtcblxudmFyIF9VdGlscyA9IHJlcXVpcmUoJy4vVXRpbHMnKTtcblxudmFyIF9nZXRBZGFwdGVyID0gcmVxdWlyZSgnLi9nZXRBZGFwdGVyJyk7XG5cbnZhciBfZ2V0QWRhcHRlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRBZGFwdGVyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBBcnJheShhcnIubGVuZ3RoKTsgaSA8IGFyci5sZW5ndGg7IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9IGVsc2UgeyByZXR1cm4gQXJyYXkuZnJvbShhcnIpOyB9IH1cblxuLy8gb3VyIENTUyBzZWxlY3RvciBwYXJzZXIgaW5zdGFuY2VcbnZhciBwYXJzZXIgPSAoMCwgX3JzdFNlbGVjdG9yUGFyc2VyLmNyZWF0ZVBhcnNlcikoKTtcblxuLy8gQ29tYmluYXRvcnMgdGhhdCBhbGxvdyB5b3UgdG8gY2hhbmNlIHNlbGVjdG9yc1xudmFyIENISUxEID0gJ2NoaWxkQ29tYmluYXRvcic7XG52YXIgQURKQUNFTlRfU0lCTElORyA9ICdhZGphY2VudFNpYmxpbmdDb21iaW5hdG9yJztcbnZhciBHRU5FUkFMX1NJQkxJTkcgPSAnZ2VuZXJhbFNpYmxpbmdDb21iaW5hdG9yJztcbnZhciBERVNDRU5EQU5UID0gJ2Rlc2NlbmRhbnRDb21iaW5hdG9yJztcblxuLy8gU2VsZWN0b3JzIGZvciB0YXJnZXRpbmcgZWxlbWVudHNcbnZhciBTRUxFQ1RPUiA9ICdzZWxlY3Rvcic7XG52YXIgVFlQRV9TRUxFQ1RPUiA9ICd0eXBlU2VsZWN0b3InO1xudmFyIENMQVNTX1NFTEVDVE9SID0gJ2NsYXNzU2VsZWN0b3InO1xudmFyIElEX1NFTEVDVE9SID0gJ2lkU2VsZWN0b3InO1xudmFyIFVOSVZFUlNBTF9TRUxFQ1RPUiA9ICd1bml2ZXJzYWxTZWxlY3Rvcic7XG52YXIgQVRUUklCVVRFX1BSRVNFTkNFID0gJ2F0dHJpYnV0ZVByZXNlbmNlU2VsZWN0b3InO1xudmFyIEFUVFJJQlVURV9WQUxVRSA9ICdhdHRyaWJ1dGVWYWx1ZVNlbGVjdG9yJztcbi8vIEBUT0RPIHdlIGRvbnQgc3VwcG9ydCB0aGVzZSwgdGhyb3cgaWYgdGhleSBhcmUgdXNlZFxudmFyIFBTRVVET19DTEFTUyA9ICdwc2V1ZG9DbGFzc1NlbGVjdG9yJztcbnZhciBQU0VVRE9fRUxFTUVOVCA9ICdwc2V1ZG9FbGVtZW50U2VsZWN0b3InO1xuXG52YXIgRVhBQ1RfQVRUUklCVVRFX09QRVJBVE9SID0gJz0nO1xudmFyIFdISVRFTElTVF9BVFRSSUJVVEVfT1BFUkFUT1IgPSAnfj0nO1xudmFyIEhZUEhFTkFURURfQVRUUklCVVRFX09QRVJBVE9SID0gJ3w9JztcbnZhciBQUkVGSVhfQVRUUklCVVRFX09QRVJBVE9SID0gJ149JztcbnZhciBTVUZGSVhfQVRUUklCVVRFX09QRVJBVE9SID0gJyQ9JztcbnZhciBTVUJTVFJJTkdfQVRUUklCVVRFX09QRVJBVE9SID0gJyo9JztcblxuZnVuY3Rpb24gdW5pcXVlKGFycikge1xuICByZXR1cm4gW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShuZXcgU2V0KGFycikpKTtcbn1cblxuLyoqXG4gKiBDYWxscyByZWR1Y2Ugb24gYSBhcnJheSBvZiBub2RlcyB3aXRoIHRoZSBwYXNzZWRcbiAqIGZ1bmN0aW9uLCByZXR1cm5pbmcgb25seSB1bmlxdWUgcmVzdWx0cy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKiBAcGFyYW0ge0FycmF5PE5vZGU+fSBub2Rlc1xuICovXG5mdW5jdGlvbiB1bmlxdWVSZWR1Y2UoZm4sIG5vZGVzKSB7XG4gIHJldHVybiB1bmlxdWUobm9kZXMucmVkdWNlKGZuLCBbXSkpO1xufVxuXG4vKipcbiAqIFRha2VzIGEgQ1NTIHNlbGVjdG9yIGFuZCByZXR1cm5zIGEgc2V0IG9mIHRva2VucyBwYXJzZWRcbiAqIGJ5IHNjYWxwZWwuXG4gKiBAcGFyYW0ge1N0cmluZ30gc2VsZWN0b3JcbiAqL1xuZnVuY3Rpb24gc2FmZWx5R2VuZXJhdGVUb2tlbnMoc2VsZWN0b3IpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gcGFyc2VyLnBhcnNlKHNlbGVjdG9yKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gcGFyc2Ugc2VsZWN0b3I6ICcgKyBTdHJpbmcoc2VsZWN0b3IpKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBtYXRjaEF0dHJpYnV0ZVNlbGVjdG9yKG5vZGUsIHRva2VuKSB7XG4gIHZhciBvcGVyYXRvciA9IHRva2VuLm9wZXJhdG9yLFxuICAgICAgdmFsdWUgPSB0b2tlbi52YWx1ZSxcbiAgICAgIG5hbWUgPSB0b2tlbi5uYW1lO1xuXG4gIHZhciBub2RlUHJvcHMgPSAoMCwgX1V0aWxzLnByb3BzT2ZOb2RlKShub2RlKTtcbiAgdmFyIGRlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG5vZGVQcm9wcywgbmFtZSk7XG4gIGlmIChkZXNjcmlwdG9yICYmIGRlc2NyaXB0b3IuZ2V0KSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBub2RlUHJvcFZhbHVlID0gbm9kZVByb3BzW25hbWVdO1xuICBpZiAodHlwZW9mIG5vZGVQcm9wVmFsdWUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmICh0b2tlbi50eXBlID09PSBBVFRSSUJVVEVfUFJFU0VOQ0UpIHtcbiAgICByZXR1cm4gKDAsIF9oYXMyWydkZWZhdWx0J10pKG5vZGVQcm9wcywgdG9rZW4ubmFtZSk7XG4gIH1cbiAgLy8gT25seSB0aGUgZXhhY3QgdmFsdWUgb3BlcmF0b3IgKFwiPVwiKSBjYW4gbWF0Y2ggbm9uLXN0cmluZ3NcbiAgaWYgKHR5cGVvZiBub2RlUHJvcFZhbHVlICE9PSAnc3RyaW5nJyB8fCB0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKG9wZXJhdG9yICE9PSBFWEFDVF9BVFRSSUJVVEVfT1BFUkFUT1IpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgc3dpdGNoIChvcGVyYXRvcikge1xuICAgIC8qKlxuICAgICAqIFJlcHJlc2VudHMgYW4gZWxlbWVudCB3aXRoIHRoZSBhdHQgYXR0cmlidXRlIHdob3NlIHZhbHVlIGlzIGV4YWN0bHkgXCJ2YWxcIi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIFthdHRyPVwidmFsXCJdIG1hdGNoZXMgYXR0cj1cInZhbFwiXG4gICAgICovXG4gICAgY2FzZSBFWEFDVF9BVFRSSUJVVEVfT1BFUkFUT1I6XG4gICAgICByZXR1cm4gKDAsIF9vYmplY3RJczJbJ2RlZmF1bHQnXSkobm9kZVByb3BWYWx1ZSwgdmFsdWUpO1xuICAgIC8qKlxuICAgICAqIFJlcHJlc2VudHMgYW4gZWxlbWVudCB3aXRoIHRoZSBhdHQgYXR0cmlidXRlIHdob3NlIHZhbHVlIGlzIGEgd2hpdGVzcGFjZS1zZXBhcmF0ZWRcbiAgICAgKiBsaXN0IG9mIHdvcmRzLCBvbmUgb2Ygd2hpY2ggaXMgZXhhY3RseVxuICAgICAqIEBleGFtcGxlXG4gICAgICogIFtyZWx+PVwiY29weXJpZ2h0XCJdIG1hdGNoZXMgcmVsPVwiY29weXJpZ2h0IG90aGVyXCJcbiAgICAgKi9cbiAgICBjYXNlIFdISVRFTElTVF9BVFRSSUJVVEVfT1BFUkFUT1I6XG4gICAgICByZXR1cm4gbm9kZVByb3BWYWx1ZS5zcGxpdCgnICcpLmluZGV4T2YodmFsdWUpICE9PSAtMTtcbiAgICAvKipcbiAgICAgKiBSZXByZXNlbnRzIGFuIGVsZW1lbnQgd2l0aCB0aGUgYXR0IGF0dHJpYnV0ZSwgaXRzIHZhbHVlIGVpdGhlciBiZWluZyBleGFjdGx5IHRoZVxuICAgICAqIHZhbHVlIG9yIGJlZ2lubmluZyB3aXRoIHRoZSB2YWx1ZSBpbW1lZGlhdGVseSBmb2xsb3dlZCBieSBcIi1cIlxuICAgICAqIEBleGFtcGxlXG4gICAgICogW2hyZWZsYW5nfD1cImVuXCJdIG1hdGNoZXMgaHJlZmxhbmc9XCJlbi1VU1wiXG4gICAgICovXG4gICAgY2FzZSBIWVBIRU5BVEVEX0FUVFJJQlVURV9PUEVSQVRPUjpcbiAgICAgIHJldHVybiBub2RlUHJvcFZhbHVlID09PSB2YWx1ZSB8fCBub2RlUHJvcFZhbHVlLnN0YXJ0c1dpdGgoU3RyaW5nKHZhbHVlKSArICctJyk7XG4gICAgLyoqXG4gICAgICogUmVwcmVzZW50cyBhbiBlbGVtZW50IHdpdGggdGhlIGF0dCBhdHRyaWJ1dGUgd2hvc2UgdmFsdWUgYmVnaW5zIHdpdGggdGhlIHByZWZpeCB2YWx1ZS5cbiAgICAgKiBJZiB0aGUgdmFsdWUgaXMgdGhlIGVtcHR5IHN0cmluZyB0aGVuIHRoZSBzZWxlY3RvciBkb2VzIG5vdCByZXByZXNlbnQgYW55dGhpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBbdHlwZV49XCJpbWFnZVwiXSBtYXRjaGVzIHR5cGU9XCJpbWFnZW9iamVjdFwiXG4gICAgICovXG4gICAgY2FzZSBQUkVGSVhfQVRUUklCVVRFX09QRVJBVE9SOlxuICAgICAgcmV0dXJuIHZhbHVlID09PSAnJyA/IGZhbHNlIDogbm9kZVByb3BWYWx1ZS5zbGljZSgwLCB2YWx1ZS5sZW5ndGgpID09PSB2YWx1ZTtcbiAgICAvKipcbiAgICAgKiBSZXByZXNlbnRzIGFuIGVsZW1lbnQgd2l0aCB0aGUgYXR0IGF0dHJpYnV0ZSB3aG9zZSB2YWx1ZSBlbmRzIHdpdGggdGhlIHN1ZmZpeCB2YWx1ZS5cbiAgICAgKiBJZiB0aGUgdmFsdWUgaXMgdGhlIGVtcHR5IHN0cmluZyB0aGVuIHRoZSBzZWxlY3RvciBkb2VzIG5vdCByZXByZXNlbnQgYW55dGhpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBbdHlwZSQ9XCJpbWFnZVwiXSBtYXRjaGVzIHR5cGU9XCJpbWFnZW9iamVjdFwiXG4gICAgICovXG4gICAgY2FzZSBTVUZGSVhfQVRUUklCVVRFX09QRVJBVE9SOlxuICAgICAgcmV0dXJuIHZhbHVlID09PSAnJyA/IGZhbHNlIDogbm9kZVByb3BWYWx1ZS5zbGljZSgtdmFsdWUubGVuZ3RoKSA9PT0gdmFsdWU7XG4gICAgLyoqXG4gICAgICogUmVwcmVzZW50cyBhbiBlbGVtZW50IHdpdGggdGhlIGF0dCBhdHRyaWJ1dGUgd2hvc2UgdmFsdWUgY29udGFpbnMgYXQgbGVhc3Qgb25lXG4gICAgICogaW5zdGFuY2Ugb2YgdGhlIHZhbHVlLiBJZiB2YWx1ZSBpcyB0aGUgZW1wdHkgc3RyaW5nIHRoZW4gdGhlXG4gICAgICogc2VsZWN0b3IgZG9lcyBub3QgcmVwcmVzZW50IGFueXRoaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICogW3RpdGxlKj1cImhlbGxvXCJdIG1hdGNoZXMgdGl0bGU9XCJ3ZWxsIGhlbGxvIHRoZXJlXCJcbiAgICAgKi9cbiAgICBjYXNlIFNVQlNUUklOR19BVFRSSUJVVEVfT1BFUkFUT1I6XG4gICAgICByZXR1cm4gdmFsdWUgPT09ICcnID8gZmFsc2UgOiBub2RlUHJvcFZhbHVlLmluZGV4T2YodmFsdWUpICE9PSAtMTtcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFbnp5bWU6OlNlbGVjdG9yOiBVbmtub3duIGF0dHJpYnV0ZSBzZWxlY3RvciBvcGVyYXRvciBcIicgKyBTdHJpbmcob3BlcmF0b3IpICsgJ1wiJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWF0Y2hQc2V1ZG9TZWxlY3Rvcihub2RlLCB0b2tlbiwgcm9vdCkge1xuICB2YXIgbmFtZSA9IHRva2VuLm5hbWUsXG4gICAgICBwYXJhbWV0ZXJzID0gdG9rZW4ucGFyYW1ldGVycztcblxuICBpZiAobmFtZSA9PT0gJ25vdCcpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlLWJlZm9yZS1kZWZpbmVcbiAgICByZXR1cm4gcGFyYW1ldGVycy5ldmVyeShmdW5jdGlvbiAoc2VsZWN0b3IpIHtcbiAgICAgIHJldHVybiByZWR1Y2VUcmVlQnlTZWxlY3RvcihzZWxlY3Rvciwgbm9kZSkubGVuZ3RoID09PSAwO1xuICAgIH0pO1xuICB9XG4gIGlmIChuYW1lID09PSAnZW1wdHknKSB7XG4gICAgcmV0dXJuICgwLCBfUlNUVHJhdmVyc2FsLnRyZWVGaWx0ZXIpKG5vZGUsIGZ1bmN0aW9uIChuKSB7XG4gICAgICByZXR1cm4gbiAhPT0gbm9kZTtcbiAgICB9KS5sZW5ndGggPT09IDA7XG4gIH1cbiAgaWYgKG5hbWUgPT09ICdmaXJzdC1jaGlsZCcpIHtcbiAgICB2YXIgX2ZpbmRQYXJlbnROb2RlID0gKDAsIF9SU1RUcmF2ZXJzYWwuZmluZFBhcmVudE5vZGUpKHJvb3QsIG5vZGUpLFxuICAgICAgICByZW5kZXJlZCA9IF9maW5kUGFyZW50Tm9kZS5yZW5kZXJlZDtcblxuICAgIHZhciBfcmVuZGVyZWQgPSBfc2xpY2VkVG9BcnJheShyZW5kZXJlZCwgMSksXG4gICAgICAgIGZpcnN0Q2hpbGQgPSBfcmVuZGVyZWRbMF07XG5cbiAgICByZXR1cm4gZmlyc3RDaGlsZCA9PT0gbm9kZTtcbiAgfVxuICBpZiAobmFtZSA9PT0gJ2xhc3QtY2hpbGQnKSB7XG4gICAgdmFyIF9maW5kUGFyZW50Tm9kZTIgPSAoMCwgX1JTVFRyYXZlcnNhbC5maW5kUGFyZW50Tm9kZSkocm9vdCwgbm9kZSksXG4gICAgICAgIF9yZW5kZXJlZDIgPSBfZmluZFBhcmVudE5vZGUyLnJlbmRlcmVkO1xuXG4gICAgcmV0dXJuIF9yZW5kZXJlZDJbX3JlbmRlcmVkMi5sZW5ndGggLSAxXSA9PT0gbm9kZTtcbiAgfVxuICBpZiAobmFtZSA9PT0gJ2ZvY3VzJykge1xuICAgIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0VuenltZTo6U2VsZWN0b3IgZG9lcyBub3Qgc3VwcG9ydCB0aGUgXCI6Zm9jdXNcIiBwc2V1ZG8tZWxlbWVudCB3aXRob3V0IGEgZ2xvYmFsIGBkb2N1bWVudGAuJyk7XG4gICAgfVxuICAgIHZhciBhZGFwdGVyID0gKDAsIF9nZXRBZGFwdGVyMlsnZGVmYXVsdCddKSgpO1xuICAgIC8qIGVzbGludC1lbnYgYnJvd3NlciAqL1xuICAgIHJldHVybiBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmIGFkYXB0ZXIubm9kZVRvSG9zdE5vZGUobm9kZSkgPT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG4gIH1cblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFbnp5bWU6OlNlbGVjdG9yIGRvZXMgbm90IHN1cHBvcnQgdGhlIFwiJyArIFN0cmluZyh0b2tlbi5uYW1lKSArICdcIiBwc2V1ZG8tZWxlbWVudCBvciBwc2V1ZG8tY2xhc3Mgc2VsZWN0b3JzLicpO1xufVxuXG4vKipcbiAqIFRha2VzIGEgbm9kZSBhbmQgYSB0b2tlbiBhbmQgZGV0ZXJtaW5lcyBpZiB0aGUgbm9kZVxuICogbWF0Y2hlcyB0aGUgcHJlZGljYXRlIGRlZmluZWQgYnkgdGhlIHRva2VuLlxuICogQHBhcmFtIHtOb2RlfSBub2RlXG4gKiBAcGFyYW0ge1Rva2VufSB0b2tlblxuICovXG5mdW5jdGlvbiBub2RlTWF0Y2hlc1Rva2VuKG5vZGUsIHRva2VuLCByb290KSB7XG4gIGlmIChub2RlID09PSBudWxsIHx8IHR5cGVvZiBub2RlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBzd2l0Y2ggKHRva2VuLnR5cGUpIHtcbiAgICAvKipcbiAgICAgKiBNYXRjaCBldmVyeSBub2RlXG4gICAgICogQGV4YW1wbGUgJyonIG1hdGNoZXMgZXZlcnkgbm9kZVxuICAgICAqL1xuICAgIGNhc2UgVU5JVkVSU0FMX1NFTEVDVE9SOlxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgLyoqXG4gICAgICogTWF0Y2ggYWdhaW5zdCB0aGUgY2xhc3NOYW1lIHByb3BcbiAgICAgKiBAZXhhbXBsZSAnLmFjdGl2ZScgbWF0Y2hlcyA8ZGl2IGNsYXNzTmFtZT0nYWN0aXZlJyAvPlxuICAgICAqL1xuICAgIGNhc2UgQ0xBU1NfU0VMRUNUT1I6XG4gICAgICByZXR1cm4gKDAsIF9SU1RUcmF2ZXJzYWwuaGFzQ2xhc3NOYW1lKShub2RlLCB0b2tlbi5uYW1lKTtcbiAgICAvKipcbiAgICAgKiBTaW1wbGUgdHlwZSBtYXRjaGluZ1xuICAgICAqIEBleGFtcGxlICdkaXYnIG1hdGNoZXMgPGRpdiAvPlxuICAgICAqL1xuICAgIGNhc2UgVFlQRV9TRUxFQ1RPUjpcbiAgICAgIHJldHVybiAoMCwgX1V0aWxzLm5vZGVIYXNUeXBlKShub2RlLCB0b2tlbi5uYW1lKTtcbiAgICAvKipcbiAgICAgKiBNYXRjaCBhZ2FpbnN0IHRoZSBgaWRgIHByb3BcbiAgICAgKiBAZXhhbXBsZSAnI25hdicgbWF0Y2hlcyA8dWwgaWQ9XCJuYXZcIiAvPlxuICAgICAqL1xuICAgIGNhc2UgSURfU0VMRUNUT1I6XG4gICAgICByZXR1cm4gKDAsIF9SU1RUcmF2ZXJzYWwubm9kZUhhc0lkKShub2RlLCB0b2tlbi5uYW1lKTtcbiAgICAvKipcbiAgICAgKiBNYXRjaGVzIGlmIGFuIGF0dHJpYnV0ZSBpcyBwcmVzZW50LCByZWdhcmRsZXNzXG4gICAgICogb2YgaXRzIHZhbHVlXG4gICAgICogQGV4YW1wbGUgJ1tkaXNhYmxlZF0nIG1hdGNoZXMgPGEgZGlzYWJsZWQgLz5cbiAgICAgKi9cbiAgICBjYXNlIEFUVFJJQlVURV9QUkVTRU5DRTpcbiAgICAgIHJldHVybiBtYXRjaEF0dHJpYnV0ZVNlbGVjdG9yKG5vZGUsIHRva2VuKTtcbiAgICAvKipcbiAgICAgKiBNYXRjaGVzIGlmIGFuIGF0dHJpYnV0ZSBpcyBwcmVzZW50IHdpdGggdGhlXG4gICAgICogcHJvdmlkZWQgdmFsdWVcbiAgICAgKiBAZXhhbXBsZSAnW2RhdGEtZm9vPWZvb10nIG1hdGNoZXMgPGRpdiBkYXRhLWZvbz1cImZvb1wiIC8+XG4gICAgICovXG4gICAgY2FzZSBBVFRSSUJVVEVfVkFMVUU6XG4gICAgICByZXR1cm4gbWF0Y2hBdHRyaWJ1dGVTZWxlY3Rvcihub2RlLCB0b2tlbik7XG4gICAgY2FzZSBQU0VVRE9fRUxFTUVOVDpcbiAgICBjYXNlIFBTRVVET19DTEFTUzpcbiAgICAgIHJldHVybiBtYXRjaFBzZXVkb1NlbGVjdG9yKG5vZGUsIHRva2VuLCByb290KTtcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIHRva2VuIHR5cGU6ICcgKyBTdHJpbmcodG9rZW4udHlwZSkpO1xuICB9XG59XG5cbi8qKlxuICogUmV0dXJucyBhIHByZWRpY2F0ZSBmdW5jdGlvbiB0aGF0IGNoZWNrcyBpZiBhXG4gKiBub2RlIG1hdGNoZXMgZXZlcnkgdG9rZW4gaW4gdGhlIGJvZHkgb2YgYSBzZWxlY3RvclxuICogdG9rZW4uXG4gKiBAcGFyYW0ge1Rva2VufSB0b2tlblxuICovXG5mdW5jdGlvbiBidWlsZFByZWRpY2F0ZUZyb21Ub2tlbih0b2tlbiwgcm9vdCkge1xuICByZXR1cm4gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICByZXR1cm4gdG9rZW4uYm9keS5ldmVyeShmdW5jdGlvbiAoYm9keVRva2VuKSB7XG4gICAgICByZXR1cm4gbm9kZU1hdGNoZXNUb2tlbihub2RlLCBib2R5VG9rZW4sIHJvb3QpO1xuICAgIH0pO1xuICB9O1xufVxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciBhIHBhcnNlZCBzZWxlY3RvciBpcyBhIGNvbXBsZXggc2VsZWN0b3IsIHdoaWNoXG4gKiBpcyBkZWZpbmVkIGFzIGEgc2VsZWN0b3IgdGhhdCBjb250YWlucyBjb21iaW5hdG9ycy5cbiAqIEBwYXJhbSB7QXJyYXk8VG9rZW4+fSB0b2tlbnNcbiAqL1xuZnVuY3Rpb24gaXNDb21wbGV4U2VsZWN0b3IodG9rZW5zKSB7XG4gIHJldHVybiB0b2tlbnMuc29tZShmdW5jdGlvbiAodG9rZW4pIHtcbiAgICByZXR1cm4gdG9rZW4udHlwZSAhPT0gU0VMRUNUT1I7XG4gIH0pO1xufVxuXG4vKipcbiAqIFRha2VzIGEgY29tcG9uZW50IGNvbnN0cnVjdG9yLCBvYmplY3QsIG9yIHN0cmluZyByZXByZXNlbnRpbmdcbiAqIGEgc2ltcGxlIHNlbGVjdG9yIGFuZCByZXR1cm5zIGEgcHJlZGljYXRlIGZ1bmN0aW9uIHRoYXQgY2FuXG4gKiBiZSBhcHBsaWVkIHRvIGEgc2luZ2xlIG5vZGUuXG4gKiBAcGFyYW0ge0VuenltZVNlbGVjdG9yfSBzZWxlY3RvclxuICovXG5mdW5jdGlvbiBidWlsZFByZWRpY2F0ZShzZWxlY3Rvcikge1xuICAvLyBJZiB0aGUgc2VsZWN0b3IgaXMgYSBzdHJpbmcsIHBhcnNlIGl0IGFzIGEgc2ltcGxlIENTUyBzZWxlY3RvclxuICBpZiAodHlwZW9mIHNlbGVjdG9yID09PSAnc3RyaW5nJykge1xuICAgIHZhciB0b2tlbnMgPSBzYWZlbHlHZW5lcmF0ZVRva2VucyhzZWxlY3Rvcik7XG4gICAgaWYgKGlzQ29tcGxleFNlbGVjdG9yKHRva2VucykpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoaXMgbWV0aG9kIGRvZXMgbm90IHN1cHBvcnQgY29tcGxleCBDU1Mgc2VsZWN0b3JzJyk7XG4gICAgfVxuICAgIC8vIFNpbXBsZSBzZWxlY3RvcnMgb25seSBoYXZlIGEgc2luZ2xlIHNlbGVjdG9yIHRva2VuXG4gICAgcmV0dXJuIGJ1aWxkUHJlZGljYXRlRnJvbVRva2VuKHRva2Vuc1swXSk7XG4gIH1cblxuICAvLyBJZiB0aGUgc2VsZWN0b3IgaXMgYW4gZWxlbWVudCB0eXBlLCBjaGVjayBpZiB0aGUgbm9kZSdzIHR5cGUgbWF0Y2hlc1xuICB2YXIgYWRhcHRlciA9ICgwLCBfZ2V0QWRhcHRlcjJbJ2RlZmF1bHQnXSkoKTtcbiAgdmFyIGlzRWxlbWVudFR5cGUgPSBhZGFwdGVyLmlzVmFsaWRFbGVtZW50VHlwZSA/IGFkYXB0ZXIuaXNWYWxpZEVsZW1lbnRUeXBlKHNlbGVjdG9yKSA6IHR5cGVvZiBzZWxlY3RvciA9PT0gJ2Z1bmN0aW9uJztcbiAgaWYgKGlzRWxlbWVudFR5cGUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIHJldHVybiBhZGFwdGVyLm1hdGNoZXNFbGVtZW50VHlwZShub2RlLCBzZWxlY3Rvcik7XG4gICAgfTtcbiAgfVxuICAvLyBJZiB0aGUgc2VsZWN0b3IgaXMgYW4gbm9uLWVtcHR5IG9iamVjdCwgdHJlYXQgdGhlIGtleXMvdmFsdWVzIGFzIHByb3BzXG4gIGlmICgodHlwZW9mIHNlbGVjdG9yID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihzZWxlY3RvcikpID09PSAnb2JqZWN0Jykge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShzZWxlY3RvcikgJiYgc2VsZWN0b3IgIT09IG51bGwgJiYgT2JqZWN0LmtleXMoc2VsZWN0b3IpLmxlbmd0aCA+IDApIHtcbiAgICAgIHZhciBoYXNVbmRlZmluZWRWYWx1ZXMgPSAoMCwgX29iamVjdDJbJ2RlZmF1bHQnXSkoc2VsZWN0b3IpLnNvbWUoZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnO1xuICAgICAgfSk7XG4gICAgICBpZiAoaGFzVW5kZWZpbmVkVmFsdWVzKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0VuenltZTo6UHJvcHMgY2Fu4oCZdCBoYXZlIGB1bmRlZmluZWRgIHZhbHVlcy4gVHJ5IHVzaW5nIOKAmGZpbmRXaGVyZSgp4oCZIGluc3RlYWQuJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgcmV0dXJuICgwLCBfUlNUVHJhdmVyc2FsLm5vZGVNYXRjaGVzT2JqZWN0UHJvcHMpKG5vZGUsIHNlbGVjdG9yKTtcbiAgICAgIH07XG4gICAgfVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0VuenltZTo6U2VsZWN0b3IgZG9lcyBub3Qgc3VwcG9ydCBhbiBhcnJheSwgbnVsbCwgb3IgZW1wdHkgb2JqZWN0IGFzIGEgc2VsZWN0b3InKTtcbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ0VuenltZTo6U2VsZWN0b3IgZXhwZWN0cyBhIHN0cmluZywgb2JqZWN0LCBvciB2YWxpZCBlbGVtZW50IHR5cGUgKENvbXBvbmVudCBDb25zdHJ1Y3RvciknKTtcbn1cblxuLyoqXG4gKiBNYXRjaGVzIG9ubHkgbm9kZXMgd2hpY2ggYXJlIGFkamFjZW50IHNpYmxpbmdzIChkaXJlY3QgbmV4dCBzaWJsaW5nKVxuICogYWdhaW5zdCBhIHByZWRpY2F0ZSwgcmV0dXJuaW5nIHRob3NlIHRoYXQgbWF0Y2guXG4gKiBAcGFyYW0ge0FycmF5PE5vZGU+fSBub2Rlc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlXG4gKiBAcGFyYW0ge05vZGV9IHJvb3RcbiAqL1xuZnVuY3Rpb24gbWF0Y2hBZGphY2VudFNpYmxpbmdzKG5vZGVzLCBwcmVkaWNhdGUsIHJvb3QpIHtcbiAgcmV0dXJuIG5vZGVzLnJlZHVjZShmdW5jdGlvbiAobWF0Y2hlcywgbm9kZSkge1xuICAgIHZhciBwYXJlbnQgPSAoMCwgX1JTVFRyYXZlcnNhbC5maW5kUGFyZW50Tm9kZSkocm9vdCwgbm9kZSk7XG4gICAgLy8gSWYgdGhlcmUncyBubyBwYXJlbnQsIHRoZXJlJ3Mgbm8gc2libGluZ3NcbiAgICBpZiAoIXBhcmVudCkge1xuICAgICAgcmV0dXJuIG1hdGNoZXM7XG4gICAgfVxuICAgIHZhciBwYXJlbnRDaGlsZHJlbiA9ICgwLCBfUlNUVHJhdmVyc2FsLmNoaWxkcmVuT2ZOb2RlKShwYXJlbnQpO1xuICAgIHZhciBub2RlSW5kZXggPSBwYXJlbnRDaGlsZHJlbi5pbmRleE9mKG5vZGUpO1xuICAgIHZhciBhZGphY2VudFNpYmxpbmcgPSBwYXJlbnRDaGlsZHJlbltub2RlSW5kZXggKyAxXTtcbiAgICAvLyBObyBzaWJsaW5nXG4gICAgaWYgKCFhZGphY2VudFNpYmxpbmcpIHtcbiAgICAgIHJldHVybiBtYXRjaGVzO1xuICAgIH1cbiAgICBpZiAocHJlZGljYXRlKGFkamFjZW50U2libGluZykpIHtcbiAgICAgIG1hdGNoZXMucHVzaChhZGphY2VudFNpYmxpbmcpO1xuICAgIH1cbiAgICByZXR1cm4gbWF0Y2hlcztcbiAgfSwgW10pO1xufVxuXG4vKipcbiAqIE1hdGNoZXMgb25seSBub2RlcyB3aGljaCBhcmUgZ2VuZXJhbCBzaWJsaW5ncyAoYW55IHNpYmxpbmcgKmFmdGVyKilcbiAqIGFnYWluc3QgYSBwcmVkaWNhdGUsIHJldHVybmluZyB0aG9zZSB0aGF0IG1hdGNoLlxuICogQHBhcmFtIHtBcnJheTxOb2RlPn0gbm9kZXNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZVxuICogQHBhcmFtIHtOb2RlfSByb290XG4gKi9cbmZ1bmN0aW9uIG1hdGNoR2VuZXJhbFNpYmxpbmcobm9kZXMsIHByZWRpY2F0ZSwgcm9vdCkge1xuICByZXR1cm4gdW5pcXVlUmVkdWNlKGZ1bmN0aW9uIChtYXRjaGVzLCBub2RlKSB7XG4gICAgdmFyIHBhcmVudCA9ICgwLCBfUlNUVHJhdmVyc2FsLmZpbmRQYXJlbnROb2RlKShyb290LCBub2RlKTtcbiAgICBpZiAoIXBhcmVudCkge1xuICAgICAgcmV0dXJuIG1hdGNoZXM7XG4gICAgfVxuICAgIHZhciBwYXJlbnRDaGlsZHJlbiA9ICgwLCBfUlNUVHJhdmVyc2FsLmNoaWxkcmVuT2ZOb2RlKShwYXJlbnQpO1xuICAgIHZhciBub2RlSW5kZXggPSBwYXJlbnRDaGlsZHJlbi5pbmRleE9mKG5vZGUpO1xuICAgIHZhciB5b3VuZ2VyU2libGluZ3MgPSBwYXJlbnRDaGlsZHJlbi5zbGljZShub2RlSW5kZXggKyAxKTtcbiAgICByZXR1cm4gbWF0Y2hlcy5jb25jYXQoeW91bmdlclNpYmxpbmdzLmZpbHRlcihwcmVkaWNhdGUpKTtcbiAgfSwgbm9kZXMpO1xufVxuXG4vKipcbiAqIE1hdGNoZXMgb25seSBub2RlcyB3aGljaCBhcmUgZGlyZWN0IGNoaWxkcmVuIChub3QgZ3JhbmRjaGlsZHJlbiwgZXRjLilcbiAqIGFnYWluc3QgYSBwcmVkaWNhdGUsIHJldHVybmluZyB0aG9zZSB0aGF0IG1hdGNoLlxuICogQHBhcmFtIHtBcnJheTxOb2RlPn0gbm9kZXNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZVxuICovXG5mdW5jdGlvbiBtYXRjaERpcmVjdENoaWxkKG5vZGVzLCBwcmVkaWNhdGUpIHtcbiAgcmV0dXJuIHVuaXF1ZVJlZHVjZShmdW5jdGlvbiAobWF0Y2hlcywgbm9kZSkge1xuICAgIHJldHVybiBtYXRjaGVzLmNvbmNhdCgoMCwgX1JTVFRyYXZlcnNhbC5jaGlsZHJlbk9mTm9kZSkobm9kZSkuZmlsdGVyKHByZWRpY2F0ZSkpO1xuICB9LCBub2Rlcyk7XG59XG5cbi8qKlxuICogTWF0Y2hlcyBhbGwgZGVzY2VuZGFudCBub2RlcyBhZ2FpbnN0IGEgcHJlZGljYXRlLFxuICogcmV0dXJuaW5nIHRob3NlIHRoYXQgbWF0Y2guXG4gKiBAcGFyYW0ge0FycmF5PE5vZGU+fSBub2Rlc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlXG4gKi9cbmZ1bmN0aW9uIG1hdGNoRGVzY2VuZGFudChub2RlcywgcHJlZGljYXRlKSB7XG4gIHJldHVybiB1bmlxdWVSZWR1Y2UoZnVuY3Rpb24gKG1hdGNoZXMsIG5vZGUpIHtcbiAgICByZXR1cm4gbWF0Y2hlcy5jb25jYXQoKDAsIF9SU1RUcmF2ZXJzYWwudHJlZUZpbHRlcikobm9kZSwgcHJlZGljYXRlKSk7XG4gIH0sICgwLCBfYXJyYXlQcm90b3R5cGUyWydkZWZhdWx0J10pKG5vZGVzLm1hcChfUlNUVHJhdmVyc2FsLmNoaWxkcmVuT2ZOb2RlKSkpO1xufVxuXG4vKipcbiAqIFRha2VzIGFuIFJTVCBhbmQgcmVkdWNlcyBpdCB0byBhIHNldCBvZiBub2RlcyBtYXRjaGluZ1xuICogdGhlIHNlbGVjdG9yLiBUaGUgc2VsZWN0b3IgY2FuIGJlIGEgc2ltcGxlIHNlbGVjdG9yLCB3aGljaFxuICogaXMgaGFuZGxlZCBieSBgYnVpbGRQcmVkaWNhdGVgLCBvciBhIGNvbXBsZXggQ1NTIHNlbGVjdG9yIHdoaWNoXG4gKiByZWR1Y2VUcmVlQnlTZWxlY3RvciBwYXJzZXMgYW5kIHJlZHVjZXMgdGhlIHRyZWUgYmFzZWQgb24gdGhlIGNvbWJpbmF0b3JzLlxuICpcbiAqIEBwYXJhbSB7RW56eW1lU2VsZWN0b3J9IHNlbGVjdG9yXG4gKiBAcGFyYW0ge1JTVE5vZGV9IHJvb3RcbiAqL1xuZnVuY3Rpb24gcmVkdWNlVHJlZUJ5U2VsZWN0b3Ioc2VsZWN0b3IsIHJvb3QpIHtcbiAgaWYgKHR5cGVvZiBzZWxlY3RvciAhPT0gJ3N0cmluZycpIHtcbiAgICB2YXIgZWxlbWVudHMgPSAoMCwgX2J5Q29uc3RydWN0b3IyWydkZWZhdWx0J10pKHNlbGVjdG9yKTtcbiAgICBpZiAoZWxlbWVudHMubGVuZ3RoID4gMCkge1xuICAgICAgcmV0dXJuICgwLCBfYXJyYXlQcm90b3R5cGUyWydkZWZhdWx0J10pKGVsZW1lbnRzLm1hcChmdW5jdGlvbiAoeCkge1xuICAgICAgICByZXR1cm4gcmVkdWNlVHJlZUJ5U2VsZWN0b3IoeC50YWcsIHJvb3QpO1xuICAgICAgfSkpO1xuXG4gICAgICAvLyB3aGVuIGh0dHBzOi8vZ2l0aHViLmNvbS9hd2VhcnkvcnN0LXNlbGVjdG9yLXBhcnNlci9pc3N1ZXMvMTUgaXMgcmVzb2x2ZWRcbiAgICAgIC8vIGNvbnN0IGh0bWxUYWdOYW1lcyA9IGVsZW1lbnRzLm1hcCh4ID0+IHgudGFnKS5qb2luKCcsICcpO1xuICAgICAgLy8gcmV0dXJuIHJlZHVjZVRyZWVCeVNlbGVjdG9yKGh0bWxUYWdOYW1lcywgcm9vdCk7XG4gICAgfVxuICB9XG5cbiAgaWYgKHR5cGVvZiBzZWxlY3RvciA9PT0gJ2Z1bmN0aW9uJyB8fCAodHlwZW9mIHNlbGVjdG9yID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihzZWxlY3RvcikpID09PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiAoMCwgX1JTVFRyYXZlcnNhbC50cmVlRmlsdGVyKShyb290LCBidWlsZFByZWRpY2F0ZShzZWxlY3RvcikpO1xuICB9XG5cbiAgdmFyIHJlc3VsdHMgPSBbXTtcbiAgaWYgKHR5cGVvZiBzZWxlY3RvciA9PT0gJ3N0cmluZycpIHtcbiAgICB2YXIgdG9rZW5zID0gc2FmZWx5R2VuZXJhdGVUb2tlbnMoc2VsZWN0b3IpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgd2hpbGUgKGluZGV4IDwgdG9rZW5zLmxlbmd0aCkge1xuICAgICAgdmFyIHRva2VuID0gdG9rZW5zW2luZGV4XTtcbiAgICAgIC8qKlxuICAgICAgICogVGhlcmUgYXJlIHR3byB0eXBlcyBvZiB0b2tlbnMgaW4gYSBDU1Mgc2VsZWN0b3I6XG4gICAgICAgKlxuICAgICAgICogMS4gU2VsZWN0b3IgdG9rZW5zLiBUaGVzZSB0YXJnZXQgbm9kZXMgZGlyZWN0bHksIGxpa2VcbiAgICAgICAqICAgIHR5cGUgb3IgYXR0cmlidXRlIHNlbGVjdG9ycy4gVGhlc2UgYXJlIGVhc3kgdG8gYXBwbHlcbiAgICAgICAqICAgIGJlY2F1c2Ugd2UgY2FuIHRyYXZlcnNlIHRoZSB0cmVlIGFuZCByZXR1cm4gb25seVxuICAgICAgICogICAgdGhlIG5vZGVzIHRoYXQgbWF0Y2ggdGhlIHByZWRpY2F0ZS5cbiAgICAgICAqXG4gICAgICAgKiAyLiBDb21iaW5hdG9yIHRva2Vucy4gVGhlc2UgdG9rZW5zIGNoYWluIHRvZ2V0aGVyXG4gICAgICAgKiAgICBzZWxlY3RvciBub2Rlcy4gRm9yIGV4YW1wbGUgPiBmb3IgY2hpbGRyZW4sIG9yICtcbiAgICAgICAqICAgIGZvciBhZGphY2VudCBzaWJsaW5ncy4gVGhlc2UgYXJlIGhhcmRlciB0byBtYXRjaFxuICAgICAgICogICAgYXMgd2UgaGF2ZSB0byB0cmFjayB3aGVyZSBpbiB0aGUgdHJlZSB3ZSBhcmVcbiAgICAgICAqICAgIHRvIGRldGVybWluZSBpZiBhIHNlbGVjdG9yIG5vZGUgYXBwbGllcyBvciBub3QuXG4gICAgICAgKi9cbiAgICAgIGlmICh0b2tlbi50eXBlID09PSBTRUxFQ1RPUikge1xuICAgICAgICB2YXIgcHJlZGljYXRlID0gYnVpbGRQcmVkaWNhdGVGcm9tVG9rZW4odG9rZW4sIHJvb3QpO1xuICAgICAgICByZXN1bHRzID0gcmVzdWx0cy5jb25jYXQoKDAsIF9SU1RUcmF2ZXJzYWwudHJlZUZpbHRlcikocm9vdCwgcHJlZGljYXRlKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBXZSBjYW4gYXNzdW1lIHRoZXJlIGFsd2F5cyBhbGwgcHJldmlvdXNseSBtYXRjaGVkIHRva2VucyBzaW5jZSBzZWxlY3RvcnNcbiAgICAgICAgLy8gY2Fubm90IHN0YXJ0IHdpdGggY29tYmluYXRvcnMuXG4gICAgICAgIHZhciB0eXBlID0gdG9rZW4udHlwZTtcbiAgICAgICAgLy8gV2UgYXNzdW1lIHRoZSBuZXh0IHRva2VuIGlzIGEgc2VsZWN0b3IsIHNvIG1vdmUgdGhlIGluZGV4XG4gICAgICAgIC8vIGZvcndhcmQgYW5kIGJ1aWxkIHRoZSBwcmVkaWNhdGUuXG5cbiAgICAgICAgaW5kZXggKz0gMTtcbiAgICAgICAgdmFyIF9wcmVkaWNhdGUgPSBidWlsZFByZWRpY2F0ZUZyb21Ub2tlbih0b2tlbnNbaW5kZXhdLCByb290KTtcbiAgICAgICAgLy8gV2UgbWF0Y2ggYWdhaW5zdCBvbmx5IHRoZSBub2RlcyB3aGljaCBoYXZlIGFscmVhZHkgYmVlbiBtYXRjaGVkLFxuICAgICAgICAvLyBzaW5jZSBhIGNvbWJpbmF0b3IgaXMgbWVhbnQgdG8gcmVmaW5lIGEgcHJldmlvdXMgc2VsZWN0b3IuXG4gICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgIC8vIFRoZSArIGNvbWJpbmF0b3JcbiAgICAgICAgICBjYXNlIEFESkFDRU5UX1NJQkxJTkc6XG4gICAgICAgICAgICByZXN1bHRzID0gbWF0Y2hBZGphY2VudFNpYmxpbmdzKHJlc3VsdHMsIF9wcmVkaWNhdGUsIHJvb3QpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgLy8gVGhlIH4gY29tYmluYXRvclxuICAgICAgICAgIGNhc2UgR0VORVJBTF9TSUJMSU5HOlxuICAgICAgICAgICAgcmVzdWx0cyA9IG1hdGNoR2VuZXJhbFNpYmxpbmcocmVzdWx0cywgX3ByZWRpY2F0ZSwgcm9vdCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAvLyBUaGUgPiBjb21iaW5hdG9yXG4gICAgICAgICAgY2FzZSBDSElMRDpcbiAgICAgICAgICAgIHJlc3VsdHMgPSBtYXRjaERpcmVjdENoaWxkKHJlc3VsdHMsIF9wcmVkaWNhdGUpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgLy8gVGhlICcgJyAod2hpdGVzcGFjZSkgY29tYmluYXRvclxuICAgICAgICAgIGNhc2UgREVTQ0VOREFOVDpcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgcmVzdWx0cyA9IG1hdGNoRGVzY2VuZGFudChyZXN1bHRzLCBfcHJlZGljYXRlKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBjb21iaW5hdG9yIHNlbGVjdG9yOiAnICsgU3RyaW5nKHR5cGUpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaW5kZXggKz0gMTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRW56eW1lOjpTZWxlY3RvciBleHBlY3RzIGEgc3RyaW5nLCBvYmplY3QsIG9yIENvbXBvbmVudCBDb25zdHJ1Y3RvcicpO1xuICB9XG4gIHJldHVybiByZXN1bHRzO1xufVxuXG5mdW5jdGlvbiByZWR1Y2VUcmVlc0J5U2VsZWN0b3Ioc2VsZWN0b3IsIHJvb3RzKSB7XG4gIHZhciByZXN1bHRzID0gcm9vdHMubWFwKGZ1bmN0aW9uIChuKSB7XG4gICAgcmV0dXJuIHJlZHVjZVRyZWVCeVNlbGVjdG9yKHNlbGVjdG9yLCBuKTtcbiAgfSk7XG4gIHJldHVybiB1bmlxdWUoKDAsIF9hcnJheVByb3RvdHlwZTJbJ2RlZmF1bHQnXSkocmVzdWx0cywgMSkpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWk0dUwzTnlZeTl6Wld4bFkzUnZjbk11YW5NaVhTd2libUZ0WlhNaU9sc2lZblZwYkdSUWNtVmthV05oZEdVaUxDSnlaV1IxWTJWVWNtVmxRbmxUWld4bFkzUnZjaUlzSW5KbFpIVmpaVlJ5WldWelFubFRaV3hsWTNSdmNpSXNJbkJoY25ObGNpSXNJa05JU1V4RUlpd2lRVVJLUVVORlRsUmZVMGxDVEVsT1J5SXNJa2RGVGtWU1FVeGZVMGxDVEVsT1J5SXNJa1JGVTBORlRrUkJUbFFpTENKVFJVeEZRMVJQVWlJc0lsUlpVRVZmVTBWTVJVTlVUMUlpTENKRFRFRlRVMTlUUlV4RlExUlBVaUlzSWtsRVgxTkZURVZEVkU5U0lpd2lWVTVKVmtWU1UwRk1YMU5GVEVWRFZFOVNJaXdpUVZSVVVrbENWVlJGWDFCU1JWTkZUa05GSWl3aVFWUlVVa2xDVlZSRlgxWkJURlZGSWl3aVVGTkZWVVJQWDBOTVFWTlRJaXdpVUZORlZVUlBYMFZNUlUxRlRsUWlMQ0pGV0VGRFZGOUJWRlJTU1VKVlZFVmZUMUJGVWtGVVQxSWlMQ0pYU0VsVVJVeEpVMVJmUVZSVVVrbENWVlJGWDA5UVJWSkJWRTlTSWl3aVNGbFFTRVZPUVZSRlJGOUJWRlJTU1VKVlZFVmZUMUJGVWtGVVQxSWlMQ0pRVWtWR1NWaGZRVlJVVWtsQ1ZWUkZYMDlRUlZKQlZFOVNJaXdpVTFWR1JrbFlYMEZVVkZKSlFsVlVSVjlQVUVWU1FWUlBVaUlzSWxOVlFsTlVVa2xPUjE5QlZGUlNTVUpWVkVWZlQxQkZVa0ZVVDFJaUxDSjFibWx4ZFdVaUxDSmhjbklpTENKVFpYUWlMQ0oxYm1seGRXVlNaV1IxWTJVaUxDSm1iaUlzSW01dlpHVnpJaXdpY21Wa2RXTmxJaXdpYzJGbVpXeDVSMlZ1WlhKaGRHVlViMnRsYm5NaUxDSnpaV3hsWTNSdmNpSXNJbkJoY25ObElpd2laWEp5SWl3aVJYSnliM0lpTENKdFlYUmphRUYwZEhKcFluVjBaVk5sYkdWamRHOXlJaXdpYm05a1pTSXNJblJ2YTJWdUlpd2liM0JsY21GMGIzSWlMQ0oyWVd4MVpTSXNJbTVoYldVaUxDSnViMlJsVUhKdmNITWlMQ0prWlhOamNtbHdkRzl5SWl3aVQySnFaV04wSWl3aVoyVjBUM2R1VUhKdmNHVnlkSGxFWlhOamNtbHdkRzl5SWl3aVoyVjBJaXdpYm05a1pWQnliM0JXWVd4MVpTSXNJblI1Y0dVaUxDSnpjR3hwZENJc0ltbHVaR1Y0VDJZaUxDSnpkR0Z5ZEhOWGFYUm9JaXdpYzJ4cFkyVWlMQ0pzWlc1bmRHZ2lMQ0p0WVhSamFGQnpaWFZrYjFObGJHVmpkRzl5SWl3aWNtOXZkQ0lzSW5CaGNtRnRaWFJsY25NaUxDSmxkbVZ5ZVNJc0ltNGlMQ0p5Wlc1a1pYSmxaQ0lzSW1acGNuTjBRMmhwYkdRaUxDSmtiMk4xYldWdWRDSXNJbUZrWVhCMFpYSWlMQ0poWTNScGRtVkZiR1Z0Wlc1MElpd2libTlrWlZSdlNHOXpkRTV2WkdVaUxDSlVlWEJsUlhKeWIzSWlMQ0p1YjJSbFRXRjBZMmhsYzFSdmEyVnVJaXdpWW5WcGJHUlFjbVZrYVdOaGRHVkdjbTl0Vkc5clpXNGlMQ0ppYjJSNUlpd2lZbTlrZVZSdmEyVnVJaXdpYVhORGIyMXdiR1Y0VTJWc1pXTjBiM0lpTENKMGIydGxibk1pTENKemIyMWxJaXdpYVhORmJHVnRaVzUwVkhsd1pTSXNJbWx6Vm1Gc2FXUkZiR1Z0Wlc1MFZIbHdaU0lzSW0xaGRHTm9aWE5GYkdWdFpXNTBWSGx3WlNJc0lrRnljbUY1SWl3aWFYTkJjbkpoZVNJc0ltdGxlWE1pTENKb1lYTlZibVJsWm1sdVpXUldZV3gxWlhNaUxDSnRZWFJqYUVGa2FtRmpaVzUwVTJsaWJHbHVaM01pTENKd2NtVmthV05oZEdVaUxDSnRZWFJqYUdWeklpd2ljR0Z5Wlc1MElpd2ljR0Z5Wlc1MFEyaHBiR1J5Wlc0aUxDSnViMlJsU1c1a1pYZ2lMQ0poWkdwaFkyVnVkRk5wWW14cGJtY2lMQ0p3ZFhOb0lpd2liV0YwWTJoSFpXNWxjbUZzVTJsaWJHbHVaeUlzSW5sdmRXNW5aWEpUYVdKc2FXNW5jeUlzSW1OdmJtTmhkQ0lzSW1acGJIUmxjaUlzSW0xaGRHTm9SR2x5WldOMFEyaHBiR1FpTENKdFlYUmphRVJsYzJObGJtUmhiblFpTENKdFlYQWlMQ0pqYUdsc1pISmxiazltVG05a1pTSXNJbVZzWlcxbGJuUnpJaXdpZUNJc0luUmhaeUlzSW5KbGMzVnNkSE1pTENKcGJtUmxlQ0lzSW5KdmIzUnpJbDBzSW0xaGNIQnBibWR6SWpvaU96czdPenM3T3pzN08xRkJiVkZuUWtFc1l5eEhRVUZCUVN4ak8xRkJjVWhCUXl4dlFpeEhRVUZCUVN4dlFqdFJRU3RGUVVNc2NVSXNSMEZCUVVFc2NVSTdPMEZCZG1Ob1FqczdRVUZEUVRzN096dEJRVU5CT3pzN08wRkJRMEU3T3pzN1FVRkRRVHM3T3p0QlFVTkJPenM3TzBGQlEwRTdPMEZCVVVFN08wRkJRMEU3T3pzN096czdPMEZCUTBFN1FVRkRRU3hKUVVGTlF5eFRRVUZUTEhORFFVRm1PenRCUVVWQk8wRkJRMEVzU1VGQlRVTXNVVUZCVVN4cFFrRkJaRHRCUVVOQkxFbEJRVTFETEcxQ1FVRnRRaXd5UWtGQmVrSTdRVUZEUVN4SlFVRk5ReXhyUWtGQmEwSXNNRUpCUVhoQ08wRkJRMEVzU1VGQlRVTXNZVUZCWVN4elFrRkJia0k3TzBGQlJVRTdRVUZEUVN4SlFVRk5ReXhYUVVGWExGVkJRV3BDTzBGQlEwRXNTVUZCVFVNc1owSkJRV2RDTEdOQlFYUkNPMEZCUTBFc1NVRkJUVU1zYVVKQlFXbENMR1ZCUVhaQ08wRkJRMEVzU1VGQlRVTXNZMEZCWXl4WlFVRndRanRCUVVOQkxFbEJRVTFETEhGQ1FVRnhRaXh0UWtGQk0wSTdRVUZEUVN4SlFVRk5ReXh4UWtGQmNVSXNNa0pCUVROQ08wRkJRMEVzU1VGQlRVTXNhMEpCUVd0Q0xIZENRVUY0UWp0QlFVTkJPMEZCUTBFc1NVRkJUVU1zWlVGQlpTeHhRa0ZCY2tJN1FVRkRRU3hKUVVGTlF5eHBRa0ZCYVVJc2RVSkJRWFpDT3p0QlFVVkJMRWxCUVUxRExESkNRVUV5UWl4SFFVRnFRenRCUVVOQkxFbEJRVTFETEN0Q1FVRXJRaXhKUVVGeVF6dEJRVU5CTEVsQlFVMURMR2REUVVGblF5eEpRVUYwUXp0QlFVTkJMRWxCUVUxRExEUkNRVUUwUWl4SlFVRnNRenRCUVVOQkxFbEJRVTFETERSQ1FVRTBRaXhKUVVGc1F6dEJRVU5CTEVsQlFVMURMQ3RDUVVFclFpeEpRVUZ5UXpzN1FVRkZRU3hUUVVGVFF5eE5RVUZVTEVOQlFXZENReXhIUVVGb1FpeEZRVUZ4UWp0QlFVTnVRaXh6UTBGQlZ5eEpRVUZKUXl4SFFVRktMRU5CUVZGRUxFZEJRVklzUTBGQldEdEJRVU5FT3p0QlFVVkVPenM3T3pzN1FVRk5RU3hUUVVGVFJTeFpRVUZVTEVOQlFYTkNReXhGUVVGMFFpeEZRVUV3UWtNc1MwRkJNVUlzUlVGQmFVTTdRVUZETDBJc1UwRkJUMHdzVDBGQlQwc3NUVUZCVFVNc1RVRkJUaXhEUVVGaFJpeEZRVUZpTEVWQlFXbENMRVZCUVdwQ0xFTkJRVkFzUTBGQlVEdEJRVU5FT3p0QlFVVkVPenM3T3p0QlFVdEJMRk5CUVZOSExHOUNRVUZVTEVOQlFUaENReXhSUVVFNVFpeEZRVUYzUXp0QlFVTjBReXhOUVVGSk8wRkJRMFlzVjBGQlR6VkNMRTlCUVU4MlFpeExRVUZRTEVOQlFXRkVMRkZCUVdJc1EwRkJVRHRCUVVORUxFZEJSa1FzUTBGRlJTeFBRVUZQUlN4SFFVRlFMRVZCUVZrN1FVRkRXaXhWUVVGTkxFbEJRVWxETEV0QlFVb3NkVU5CUVhWRFNDeFJRVUYyUXl4RlFVRk9PMEZCUTBRN1FVRkRSanM3UVVGRlJDeFRRVUZUU1N4elFrRkJWQ3hEUVVGblEwTXNTVUZCYUVNc1JVRkJjME5ETEV0QlFYUkRMRVZCUVRaRE8wRkJRVUVzVFVGRGJrTkRMRkZCUkcxRExFZEJRMVJFTEV0QlJGTXNRMEZEYmtORExGRkJSRzFETzBGQlFVRXNUVUZEZWtKRExFdEJSSGxDTEVkQlExUkdMRXRCUkZNc1EwRkRla0pGTEV0QlJIbENPMEZCUVVFc1RVRkRiRUpETEVsQlJHdENMRWRCUTFSSUxFdEJSRk1zUTBGRGJFSkhMRWxCUkd0Q096dEJRVVV6UXl4TlFVRk5ReXhaUVVGWkxIZENRVUZaVEN4SlFVRmFMRU5CUVd4Q08wRkJRMEVzVFVGQlRVMHNZVUZCWVVNc1QwRkJUME1zZDBKQlFWQXNRMEZCWjBOSUxGTkJRV2hETEVWQlFUSkRSQ3hKUVVFelF5eERRVUZ1UWp0QlFVTkJMRTFCUVVsRkxHTkJRV05CTEZkQlFWZEhMRWRCUVRkQ0xFVkJRV3RETzBGQlEyaERMRmRCUVU4c1MwRkJVRHRCUVVORU8wRkJRMFFzVFVGQlRVTXNaMEpCUVdkQ1RDeFZRVUZWUkN4SlFVRldMRU5CUVhSQ08wRkJRMEVzVFVGQlNTeFBRVUZQVFN4aFFVRlFMRXRCUVhsQ0xGZEJRVGRDTEVWQlFUQkRPMEZCUTNoRExGZEJRVThzUzBGQlVEdEJRVU5FTzBGQlEwUXNUVUZCU1ZRc1RVRkJUVlVzU1VGQlRpeExRVUZsYkVNc2EwSkJRVzVDTEVWQlFYVkRPMEZCUTNKRExGZEJRVThzYzBKQlFVazBRaXhUUVVGS0xFVkJRV1ZLTEUxQlFVMUhMRWxCUVhKQ0xFTkJRVkE3UVVGRFJEdEJRVU5FTzBGQlEwRXNUVUZCU1N4UFFVRlBUU3hoUVVGUUxFdEJRWGxDTEZGQlFYcENMRWxCUVhGRExFOUJRVTlRTEV0QlFWQXNTMEZCYVVJc1VVRkJNVVFzUlVGQmIwVTdRVUZEYkVVc1VVRkJTVVFzWVVGQllYSkNMSGRDUVVGcVFpeEZRVUV5UXp0QlFVTjZReXhoUVVGUExFdEJRVkE3UVVGRFJEdEJRVU5HTzBGQlEwUXNWVUZCVVhGQ0xGRkJRVkk3UVVGRFJUczdPenM3UVVGTFFTeFRRVUZMY2tJc2QwSkJRVXc3UVVGRFJTeGhRVUZQTERKQ1FVRkhOa0lzWVVGQlNDeEZRVUZyUWxBc1MwRkJiRUlzUTBGQlVEdEJRVU5HT3pzN096czdRVUZOUVN4VFFVRkxja0lzTkVKQlFVdzdRVUZEUlN4aFFVRlBORUlzWTBGQlkwVXNTMEZCWkN4RFFVRnZRaXhIUVVGd1FpeEZRVUY1UWtNc1QwRkJla0lzUTBGQmFVTldMRXRCUVdwRExFMUJRVFJETEVOQlFVTXNRMEZCY0VRN1FVRkRSanM3T3pzN08wRkJUVUVzVTBGQlMzQkNMRFpDUVVGTU8wRkJRMFVzWVVGQlR6SkNMR3RDUVVGclFsQXNTMEZCYkVJc1NVRkJNa0pQTEdOQlFXTkpMRlZCUVdRc1VVRkJORUpZTEV0QlFUVkNMRkZCUVd4RE8wRkJRMFk3T3pzN096dEJRVTFCTEZOQlFVdHVRaXg1UWtGQlREdEJRVU5GTEdGQlFVOXRRaXhWUVVGVkxFVkJRVllzUjBGQlpTeExRVUZtTEVkQlFYVkNUeXhqUVVGalN5eExRVUZrTEVOQlFXOUNMRU5CUVhCQ0xFVkJRWFZDV2l4TlFVRk5ZU3hOUVVFM1FpeE5RVUY1UTJJc1MwRkJka1U3UVVGRFJqczdPenM3TzBGQlRVRXNVMEZCUzJ4Q0xIbENRVUZNTzBGQlEwVXNZVUZCVDJ0Q0xGVkJRVlVzUlVGQlZpeEhRVUZsTEV0QlFXWXNSMEZCZFVKUExHTkJRV05MTEV0QlFXUXNRMEZCYjBJc1EwRkJRMW9zVFVGQlRXRXNUVUZCTTBJc1RVRkJkVU5pTEV0QlFYSkZPMEZCUTBZN096czdPenM3UVVGUFFTeFRRVUZMYWtJc05FSkJRVXc3UVVGRFJTeGhRVUZQYVVJc1ZVRkJWU3hGUVVGV0xFZEJRV1VzUzBGQlppeEhRVUYxUWs4c1kwRkJZMGNzVDBGQlpDeERRVUZ6UWxZc1MwRkJkRUlzVFVGQmFVTXNRMEZCUXl4RFFVRm9SVHRCUVVOR08wRkJRMFVzV1VGQlRTeEpRVUZKVEN4TFFVRktMRzlGUVVGdlJVa3NVVUZCY0VVc1VVRkJUanRCUVd4RVNqdEJRVzlFUkRzN1FVRkhSQ3hUUVVGVFpTeHRRa0ZCVkN4RFFVRTJRbXBDTEVsQlFUZENMRVZCUVcxRFF5eExRVUZ1UXl4RlFVRXdRMmxDTEVsQlFURkRMRVZCUVdkRU8wRkJRVUVzVFVGRGRFTmtMRWxCUkhORExFZEJRMnBDU0N4TFFVUnBRaXhEUVVOMFEwY3NTVUZFYzBNN1FVRkJRU3hOUVVOb1EyVXNWVUZFWjBNc1IwRkRha0pzUWl4TFFVUnBRaXhEUVVOb1EydENMRlZCUkdkRE96dEJRVVU1UXl4TlFVRkpaaXhUUVVGVExFdEJRV0lzUlVGQmIwSTdRVUZEYkVJN1FVRkRRU3hYUVVGUFpTeFhRVUZYUXl4TFFVRllMRU5CUVdsQ0xGVkJRVU42UWl4UlFVRkVPMEZCUVVFc1lVRkJZemxDTEhGQ1FVRnhRamhDTEZGQlFYSkNMRVZCUVN0Q1N5eEpRVUV2UWl4RlFVRnhRMmRDTEUxQlFYSkRMRXRCUVdkRUxFTkJRVGxFTzBGQlFVRXNTMEZCYWtJc1EwRkJVRHRCUVVORU8wRkJRMFFzVFVGQlNWb3NVMEZCVXl4UFFVRmlMRVZCUVhOQ08wRkJRM0JDTEZkQlFVOHNPRUpCUVZkS0xFbEJRVmdzUlVGQmFVSXNWVUZCUTNGQ0xFTkJRVVE3UVVGQlFTeGhRVUZQUVN4TlFVRk5ja0lzU1VGQllqdEJRVUZCTEV0QlFXcENMRVZCUVc5RFowSXNUVUZCY0VNc1MwRkJLME1zUTBGQmRFUTdRVUZEUkR0QlFVTkVMRTFCUVVsYUxGTkJRVk1zWVVGQllpeEZRVUUwUWp0QlFVRkJMREJDUVVOTUxHdERRVUZsWXl4SlFVRm1MRVZCUVhGQ2JFSXNTVUZCY2tJc1EwRkVTenRCUVVGQkxGRkJRMnhDYzBJc1VVRkVhMElzYlVKQlEyeENRU3hSUVVSclFqczdRVUZCUVN4dFEwRkZURUVzVVVGR1N6dEJRVUZCTEZGQlJXNUNReXhWUVVadFFqczdRVUZITVVJc1YwRkJUMEVzWlVGQlpYWkNMRWxCUVhSQ08wRkJRMFE3UVVGRFJDeE5RVUZKU1N4VFFVRlRMRmxCUVdJc1JVRkJNa0k3UVVGQlFTd3lRa0ZEU2l4clEwRkJaV01zU1VGQlppeEZRVUZ4UW14Q0xFbEJRWEpDTEVOQlJFazdRVUZCUVN4UlFVTnFRbk5DTEZWQlJHbENMRzlDUVVOcVFrRXNVVUZFYVVJN08wRkJSWHBDTEZkQlFVOUJMRmRCUVZOQkxGZEJRVk5PTEUxQlFWUXNSMEZCYTBJc1EwRkJNMElzVFVGQmEwTm9RaXhKUVVGNlF6dEJRVU5FTzBGQlEwUXNUVUZCU1Vrc1UwRkJVeXhQUVVGaUxFVkJRWE5DTzBGQlEzQkNMRkZCUVVrc1QwRkJUMjlDTEZGQlFWQXNTMEZCYjBJc1YwRkJlRUlzUlVGQmNVTTdRVUZEYmtNc1dVRkJUU3hKUVVGSk1VSXNTMEZCU2l4RFFVRlZMRFJHUVVGV0xFTkJRVTQ3UVVGRFJEdEJRVU5FTEZGQlFVMHlRaXhWUVVGVkxEaENRVUZvUWp0QlFVTkJPMEZCUTBFc1YwRkJUMFFzVTBGQlUwVXNZVUZCVkN4SlFVRXdRa1FzVVVGQlVVVXNZMEZCVWl4RFFVRjFRak5DTEVsQlFYWkNMRTFCUVdsRGQwSXNVMEZCVTBVc1lVRkJNMFU3UVVGRFJEczdRVUZGUkN4UlFVRk5MRWxCUVVsRkxGTkJRVW9zYjBSQlFYZEVNMElzVFVGQlRVY3NTVUZCT1VRc2EwUkJRVTQ3UVVGRFJEczdRVUZGUkRzN096czdPMEZCVFVFc1UwRkJVM2xDTEdkQ1FVRlVMRU5CUVRCQ04wSXNTVUZCTVVJc1JVRkJaME5ETEV0QlFXaERMRVZCUVhWRGFVSXNTVUZCZGtNc1JVRkJOa003UVVGRE0wTXNUVUZCU1d4Q0xGTkJRVk1zU1VGQlZDeEpRVUZwUWl4UFFVRlBRU3hKUVVGUUxFdEJRV2RDTEZGQlFYSkRMRVZCUVN0RE8wRkJRemRETEZkQlFVOHNTMEZCVUR0QlFVTkVPMEZCUTBRc1ZVRkJVVU1zVFVGQlRWVXNTVUZCWkR0QlFVTkZPenM3TzBGQlNVRXNVMEZCUzI1RExHdENRVUZNTzBGQlEwVXNZVUZCVHl4SlFVRlFPMEZCUTBZN096czdRVUZKUVN4VFFVRkxSaXhqUVVGTU8wRkJRMFVzWVVGQlR5eG5RMEZCWVRCQ0xFbEJRV0lzUlVGQmJVSkRMRTFCUVUxSExFbEJRWHBDTEVOQlFWQTdRVUZEUmpzN096dEJRVWxCTEZOQlFVc3ZRaXhoUVVGTU8wRkJRMFVzWVVGQlR5eDNRa0ZCV1RKQ0xFbEJRVm9zUlVGQmEwSkRMRTFCUVUxSExFbEJRWGhDTEVOQlFWQTdRVUZEUmpzN096dEJRVWxCTEZOQlFVczNRaXhYUVVGTU8wRkJRMFVzWVVGQlR5dzJRa0ZCVlhsQ0xFbEJRVllzUlVGQlowSkRMRTFCUVUxSExFbEJRWFJDTEVOQlFWQTdRVUZEUmpzN096czdRVUZMUVN4VFFVRkxNMElzYTBKQlFVdzdRVUZEUlN4aFFVRlBjMElzZFVKQlFYVkNReXhKUVVGMlFpeEZRVUUyUWtNc1MwRkJOMElzUTBGQlVEdEJRVU5HT3pzN096dEJRVXRCTEZOQlFVdDJRaXhsUVVGTU8wRkJRMFVzWVVGQlQzRkNMSFZDUVVGMVFrTXNTVUZCZGtJc1JVRkJOa0pETEV0QlFUZENMRU5CUVZBN1FVRkRSaXhUUVVGTGNrSXNZMEZCVER0QlFVTkJMRk5CUVV0RUxGbEJRVXc3UVVGRFJTeGhRVUZQYzBNc2IwSkJRVzlDYWtJc1NVRkJjRUlzUlVGQk1FSkRMRXRCUVRGQ0xFVkJRV2xEYVVJc1NVRkJha01zUTBGQlVEdEJRVU5HTzBGQlEwVXNXVUZCVFN4SlFVRkpjRUlzUzBGQlNpeHBRMEZCYVVOSExFMUJRVTFWTEVsQlFYWkRMRVZCUVU0N1FVRXpRMG83UVVFMlEwUTdPMEZCUlVRN096czdPenRCUVUxQkxGTkJRVk50UWl4MVFrRkJWQ3hEUVVGcFF6ZENMRXRCUVdwRExFVkJRWGREYVVJc1NVRkJlRU1zUlVGQk9FTTdRVUZETlVNc1UwRkJUeXhWUVVGRGJFSXNTVUZCUkR0QlFVRkJMRmRCUVZWRExFMUJRVTA0UWl4SlFVRk9MRU5CUVZkWUxFdEJRVmdzUTBGQmFVSXNWVUZCUTFrc1UwRkJSRHRCUVVGQkxHRkJRV1ZJTEdsQ1FVRnBRamRDTEVsQlFXcENMRVZCUVhWQ1owTXNVMEZCZGtJc1JVRkJhME5rTEVsQlFXeERMRU5CUVdZN1FVRkJRU3hMUVVGcVFpeERRVUZXTzBGQlFVRXNSMEZCVUR0QlFVTkVPenRCUVVWRU96czdPenRCUVV0QkxGTkJRVk5sTEdsQ1FVRlVMRU5CUVRKQ1F5eE5RVUV6UWl4RlFVRnRRenRCUVVOcVF5eFRRVUZQUVN4UFFVRlBReXhKUVVGUUxFTkJRVmtzVlVGQlEyeERMRXRCUVVRN1FVRkJRU3hYUVVGWFFTeE5RVUZOVlN4SlFVRk9MRXRCUVdWMlF5eFJRVUV4UWp0QlFVRkJMRWRCUVZvc1EwRkJVRHRCUVVORU96dEJRVWRFT3pzN096czdRVUZOVHl4VFFVRlRVaXhqUVVGVUxFTkJRWGRDSzBJc1VVRkJlRUlzUlVGQmEwTTdRVUZEZGtNN1FVRkRRU3hOUVVGSkxFOUJRVTlCTEZGQlFWQXNTMEZCYjBJc1VVRkJlRUlzUlVGQmEwTTdRVUZEYUVNc1VVRkJUWFZETEZOQlFWTjRReXh4UWtGQmNVSkRMRkZCUVhKQ0xFTkJRV1k3UVVGRFFTeFJRVUZKYzBNc2EwSkJRV3RDUXl4TlFVRnNRaXhEUVVGS0xFVkJRU3RDTzBGQlF6ZENMRmxCUVUwc1NVRkJTVTRzVTBGQlNpeERRVUZqTEc5RVFVRmtMRU5CUVU0N1FVRkRSRHRCUVVORU8wRkJRMEVzVjBGQlQwVXNkMEpCUVhkQ1NTeFBRVUZQTEVOQlFWQXNRMEZCZUVJc1EwRkJVRHRCUVVORU96dEJRVVZFTzBGQlEwRXNUVUZCVFZRc1ZVRkJWU3c0UWtGQmFFSTdRVUZEUVN4TlFVRk5WeXhuUWtGQlowSllMRkZCUVZGWkxHdENRVUZTTEVkQlEyeENXaXhSUVVGUldTeHJRa0ZCVWl4RFFVRXlRakZETEZGQlFUTkNMRU5CUkd0Q0xFZEJSV3hDTEU5QlFVOUJMRkZCUVZBc1MwRkJiMElzVlVGR2VFSTdRVUZIUVN4TlFVRkplVU1zWVVGQlNpeEZRVUZ0UWp0QlFVTnFRaXhYUVVGUExGVkJRVU53UXl4SlFVRkVPMEZCUVVFc1lVRkJWWGxDTEZGQlFWRmhMR3RDUVVGU0xFTkJRVEpDZEVNc1NVRkJNMElzUlVGQmFVTk1MRkZCUVdwRExFTkJRVlk3UVVGQlFTeExRVUZRTzBGQlEwUTdRVUZEUkR0QlFVTkJMRTFCUVVrc1VVRkJUMEVzVVVGQlVDeDVRMEZCVDBFc1VVRkJVQ3hQUVVGdlFpeFJRVUY0UWl4RlFVRnJRenRCUVVOb1F5eFJRVUZKTEVOQlFVTTBReXhOUVVGTlF5eFBRVUZPTEVOQlFXTTNReXhSUVVGa0xFTkJRVVFzU1VGQk5FSkJMR0ZCUVdFc1NVRkJla01zU1VGQmFVUlpMRTlCUVU5clF5eEpRVUZRTEVOQlFWazVReXhSUVVGYUxFVkJRWE5DY1VJc1RVRkJkRUlzUjBGQkswSXNRMEZCY0VZc1JVRkJkVVk3UVVGRGNrWXNWVUZCVFRCQ0xIRkNRVUZ4UWl4NVFrRkJUeTlETEZGQlFWQXNSVUZCYVVKM1F5eEpRVUZxUWl4RFFVRnpRaXhWUVVGRGFFTXNTMEZCUkR0QlFVRkJMR1ZCUVZjc1QwRkJUMEVzUzBGQlVDeExRVUZwUWl4WFFVRTFRanRCUVVGQkxFOUJRWFJDTEVOQlFUTkNPMEZCUTBFc1ZVRkJTWFZETEd0Q1FVRktMRVZCUVhkQ08wRkJRM1JDTEdOQlFVMHNTVUZCU1dRc1UwRkJTaXhEUVVGakxDdEZRVUZrTEVOQlFVNDdRVUZEUkR0QlFVTkVMR0ZCUVU4c1ZVRkJRelZDTEVsQlFVUTdRVUZCUVN4bFFVRlZMREJEUVVGMVFrRXNTVUZCZGtJc1JVRkJOa0pNTEZGQlFUZENMRU5CUVZZN1FVRkJRU3hQUVVGUU8wRkJRMFE3UVVGRFJDeFZRVUZOTEVsQlFVbHBReXhUUVVGS0xFTkJRV01zYVVaQlFXUXNRMEZCVGp0QlFVTkVPenRCUVVWRUxGRkJRVTBzU1VGQlNVRXNVMEZCU2l4RFFVRmpMREJHUVVGa0xFTkJRVTQ3UVVGRFJEczdRVUZGUkRzN096czdPenRCUVU5QkxGTkJRVk5sTEhGQ1FVRlVMRU5CUVN0Q2JrUXNTMEZCTDBJc1JVRkJjME52UkN4VFFVRjBReXhGUVVGcFJERkNMRWxCUVdwRUxFVkJRWFZFTzBGQlEzSkVMRk5CUVU4eFFpeE5RVUZOUXl4TlFVRk9MRU5CUVdFc1ZVRkJRMjlFTEU5QlFVUXNSVUZCVlRkRExFbEJRVllzUlVGQmJVSTdRVUZEY2tNc1VVRkJUVGhETEZOQlFWTXNhME5CUVdVMVFpeEpRVUZtTEVWQlFYRkNiRUlzU1VGQmNrSXNRMEZCWmp0QlFVTkJPMEZCUTBFc1VVRkJTU3hEUVVGRE9FTXNUVUZCVEN4RlFVRmhPMEZCUTFnc1lVRkJUMFFzVDBGQlVEdEJRVU5FTzBGQlEwUXNVVUZCVFVVc2FVSkJRV2xDTEd0RFFVRmxSQ3hOUVVGbUxFTkJRWFpDTzBGQlEwRXNVVUZCVFVVc1dVRkJXVVFzWlVGQlpXeERMRTlCUVdZc1EwRkJkVUppTEVsQlFYWkNMRU5CUVd4Q08wRkJRMEVzVVVGQlRXbEVMR3RDUVVGclFrWXNaVUZCWlVNc1dVRkJXU3hEUVVFelFpeERRVUY0UWp0QlFVTkJPMEZCUTBFc1VVRkJTU3hEUVVGRFF5eGxRVUZNTEVWQlFYTkNPMEZCUTNCQ0xHRkJRVTlLTEU5QlFWQTdRVUZEUkR0QlFVTkVMRkZCUVVsRUxGVkJRVlZMTEdWQlFWWXNRMEZCU2l4RlFVRm5RenRCUVVNNVFrb3NZMEZCVVVzc1NVRkJVaXhEUVVGaFJDeGxRVUZpTzBGQlEwUTdRVUZEUkN4WFFVRlBTaXhQUVVGUU8wRkJRMFFzUjBGcVFrMHNSVUZwUWtvc1JVRnFRa2tzUTBGQlVEdEJRV3RDUkRzN1FVRkZSRHM3T3pzN096dEJRVTlCTEZOQlFWTk5MRzFDUVVGVUxFTkJRVFpDTTBRc1MwRkJOMElzUlVGQmIwTnZSQ3hUUVVGd1F5eEZRVUVyUXpGQ0xFbEJRUzlETEVWQlFYRkVPMEZCUTI1RUxGTkJRVTgxUWl4aFFVRmhMRlZCUVVOMVJDeFBRVUZFTEVWQlFWVTNReXhKUVVGV0xFVkJRVzFDTzBGQlEzSkRMRkZCUVUwNFF5eFRRVUZUTEd0RFFVRmxOVUlzU1VGQlppeEZRVUZ4UW14Q0xFbEJRWEpDTEVOQlFXWTdRVUZEUVN4UlFVRkpMRU5CUVVNNFF5eE5RVUZNTEVWQlFXRTdRVUZEV0N4aFFVRlBSQ3hQUVVGUU8wRkJRMFE3UVVGRFJDeFJRVUZOUlN4cFFrRkJhVUlzYTBOQlFXVkVMRTFCUVdZc1EwRkJka0k3UVVGRFFTeFJRVUZOUlN4WlFVRlpSQ3hsUVVGbGJFTXNUMEZCWml4RFFVRjFRbUlzU1VGQmRrSXNRMEZCYkVJN1FVRkRRU3hSUVVGTmIwUXNhMEpCUVd0Q1RDeGxRVUZsYUVNc1MwRkJaaXhEUVVGeFFtbERMRmxCUVZrc1EwRkJha01zUTBGQmVFSTdRVUZEUVN4WFFVRlBTQ3hSUVVGUlVTeE5RVUZTTEVOQlFXVkVMR2RDUVVGblFrVXNUVUZCYUVJc1EwRkJkVUpXTEZOQlFYWkNMRU5CUVdZc1EwRkJVRHRCUVVORUxFZEJWRTBzUlVGVFNuQkVMRXRCVkVrc1EwRkJVRHRCUVZWRU96dEJRVVZFT3pzN096czdRVUZOUVN4VFFVRlRLMFFzWjBKQlFWUXNRMEZCTUVJdlJDeExRVUV4UWl4RlFVRnBRMjlFTEZOQlFXcERMRVZCUVRSRE8wRkJRekZETEZOQlFVOTBSQ3hoUVVOTUxGVkJRVU4xUkN4UFFVRkVMRVZCUVZVM1F5eEpRVUZXTzBGQlFVRXNWMEZCYlVJMlF5eFJRVUZSVVN4TlFVRlNMRU5CUVdVc2EwTkJRV1Z5UkN4SlFVRm1MRVZCUVhGQ2MwUXNUVUZCY2tJc1EwRkJORUpXTEZOQlFUVkNMRU5CUVdZc1EwRkJia0k3UVVGQlFTeEhRVVJMTEVWQlJVeHdSQ3hMUVVaTExFTkJRVkE3UVVGSlJEczdRVUZGUkRzN096czdPMEZCVFVFc1UwRkJVMmRGTEdWQlFWUXNRMEZCZVVKb1JTeExRVUY2UWl4RlFVRm5RMjlFTEZOQlFXaERMRVZCUVRKRE8wRkJRM3BETEZOQlFVOTBSQ3hoUVVOTUxGVkJRVU4xUkN4UFFVRkVMRVZCUVZVM1F5eEpRVUZXTzBGQlFVRXNWMEZCYlVJMlF5eFJRVUZSVVN4TlFVRlNMRU5CUVdVc09FSkJRVmR5UkN4SlFVRllMRVZCUVdsQ05FTXNVMEZCYWtJc1EwRkJaaXhEUVVGdVFqdEJRVUZCTEVkQlJFc3NSVUZGVEN4cFEwRkJTM0JFTEUxQlFVMXBSU3hIUVVGT0xFTkJRVlZETERSQ1FVRldMRU5CUVV3c1EwRkdTeXhEUVVGUU8wRkJTVVE3TzBGQlJVUTdPenM3T3pzN096dEJRVk5QTEZOQlFWTTNSaXh2UWtGQlZDeERRVUU0UWpoQ0xGRkJRVGxDTEVWQlFYZERkVUlzU1VGQmVFTXNSVUZCT0VNN1FVRkRia1FzVFVGQlNTeFBRVUZQZGtJc1VVRkJVQ3hMUVVGdlFpeFJRVUY0UWl4RlFVRnJRenRCUVVOb1F5eFJRVUZOWjBVc1YwRkJWeXhuUTBGQmMwSm9SU3hSUVVGMFFpeERRVUZxUWp0QlFVTkJMRkZCUVVsblJTeFRRVUZUTTBNc1RVRkJWQ3hIUVVGclFpeERRVUYwUWl4RlFVRjVRanRCUVVOMlFpeGhRVUZQTEdsRFFVRkxNa01zVTBGQlUwWXNSMEZCVkN4RFFVRmhMRlZCUVVOSExFTkJRVVE3UVVGQlFTeGxRVUZQTDBZc2NVSkJRWEZDSzBZc1JVRkJSVU1zUjBGQmRrSXNSVUZCTkVJelF5eEpRVUUxUWl4RFFVRlFPMEZCUVVFc1QwRkJZaXhEUVVGTUxFTkJRVkE3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBRN1FVRkRSanM3UVVGRlJDeE5RVUZKTEU5QlFVOTJRaXhSUVVGUUxFdEJRVzlDTEZWQlFYQkNMRWxCUVd0RExGRkJRVTlCTEZGQlFWQXNlVU5CUVU5QkxGRkJRVkFzVDBGQmIwSXNVVUZCTVVRc1JVRkJiMFU3UVVGRGJFVXNWMEZCVHl3NFFrRkJWM1ZDTEVsQlFWZ3NSVUZCYVVKMFJDeGxRVUZsSzBJc1VVRkJaaXhEUVVGcVFpeERRVUZRTzBGQlEwUTdPMEZCUlVRc1RVRkJTVzFGTEZWQlFWVXNSVUZCWkR0QlFVTkJMRTFCUVVrc1QwRkJUMjVGTEZGQlFWQXNTMEZCYjBJc1VVRkJlRUlzUlVGQmEwTTdRVUZEYUVNc1VVRkJUWFZETEZOQlFWTjRReXh4UWtGQmNVSkRMRkZCUVhKQ0xFTkJRV1k3UVVGRFFTeFJRVUZKYjBVc1VVRkJVU3hEUVVGYU8wRkJRMEVzVjBGQlQwRXNVVUZCVVRkQ0xFOUJRVTlzUWl4TlFVRjBRaXhGUVVFNFFqdEJRVU0xUWl4VlFVRk5aaXhSUVVGUmFVTXNUMEZCVHpaQ0xFdEJRVkFzUTBGQlpEdEJRVU5CT3pzN096czdPenM3T3pzN096dEJRV05CTEZWQlFVazVSQ3hOUVVGTlZTeEpRVUZPTEV0QlFXVjJReXhSUVVGdVFpeEZRVUUyUWp0QlFVTXpRaXhaUVVGTmQwVXNXVUZCV1dRc2QwSkJRWGRDTjBJc1MwRkJlRUlzUlVGQkswSnBRaXhKUVVFdlFpeERRVUZzUWp0QlFVTkJORU1zYTBKQlFWVkJMRkZCUVZGVUxFMUJRVklzUTBGQlpTdzRRa0ZCVjI1RExFbEJRVmdzUlVGQmFVSXdRaXhUUVVGcVFpeERRVUZtTEVOQlFWWTdRVUZEUkN4UFFVaEVMRTFCUjA4N1FVRkRURHRCUVVOQk8wRkJSa3NzV1VGSFIycERMRWxCU0Vnc1IwRkhXVllzUzBGSVdpeERRVWRIVlN4SlFVaElPMEZCU1V3N1FVRkRRVHM3UVVGRFFXOUVMR2xDUVVGVExFTkJRVlE3UVVGRFFTeFpRVUZOYmtJc1lVRkJXV1FzZDBKQlFYZENTU3hQUVVGUE5rSXNTMEZCVUN4RFFVRjRRaXhGUVVGMVF6ZERMRWxCUVhaRExFTkJRV3hDTzBGQlEwRTdRVUZEUVR0QlFVTkJMR2RDUVVGUlVDeEpRVUZTTzBGQlEwVTdRVUZEUVN4bFFVRkxNVU1zWjBKQlFVdzdRVUZEUlRaR0xITkNRVUZWYmtJc2MwSkJRWE5DYlVJc1QwRkJkRUlzUlVGQkswSnNRaXhWUVVFdlFpeEZRVUV3UXpGQ0xFbEJRVEZETEVOQlFWWTdRVUZEUVR0QlFVTkdPMEZCUTBFc1pVRkJTMmhFTEdWQlFVdzdRVUZEUlRSR0xITkNRVUZWV0N4dlFrRkJiMEpYTEU5QlFYQkNMRVZCUVRaQ2JFSXNWVUZCTjBJc1JVRkJkME14UWl4SlFVRjRReXhEUVVGV08wRkJRMEU3UVVGRFJqdEJRVU5CTEdWQlFVdHNSQ3hMUVVGTU8wRkJRMFU0Uml4elFrRkJWVkFzYVVKQlFXbENUeXhQUVVGcVFpeEZRVUV3UW14Q0xGVkJRVEZDTEVOQlFWWTdRVUZEUVR0QlFVTkdPMEZCUTBFc1pVRkJTM3BGTEZWQlFVdzdRVUZCYVVJN1FVRkRaakpHTEhkQ1FVRlZUaXhuUWtGQlowSk5MRTlCUVdoQ0xFVkJRWGxDYkVJc1ZVRkJla0lzUTBGQlZqdEJRVU5CTzBGQlEwUTdRVUZEUkR0QlFVTkZMR3RDUVVGTkxFbEJRVWs1UXl4TFFVRktMREJEUVVFd1EyRXNTVUZCTVVNc1JVRkJUanRCUVc1Q1NqdEJRWEZDUkR0QlFVTkViMFFzWlVGQlV5eERRVUZVTzBGQlEwUTdRVUZEUml4SFFYaEVSQ3hOUVhkRVR6dEJRVU5NTEZWQlFVMHNTVUZCU1c1RExGTkJRVW9zUTBGQll5eHhSVUZCWkN4RFFVRk9PMEZCUTBRN1FVRkRSQ3hUUVVGUGEwTXNUMEZCVUR0QlFVTkVPenRCUVVWTkxGTkJRVk5vUnl4eFFrRkJWQ3hEUVVFclFqWkNMRkZCUVM5Q0xFVkJRWGxEY1VVc1MwRkJla01zUlVGQlowUTdRVUZEY2tRc1RVRkJUVVlzVlVGQlZVVXNUVUZCVFZBc1IwRkJUaXhEUVVGVkxGVkJRVU53UXl4RFFVRkVPMEZCUVVFc1YwRkJUM2hFTEhGQ1FVRnhRamhDTEZGQlFYSkNMRVZCUVN0Q01FSXNRMEZCTDBJc1EwRkJVRHRCUVVGQkxFZEJRVllzUTBGQmFFSTdRVUZEUVN4VFFVRlBiRU1zVDBGQlR5eHBRMEZCU3pKRkxFOUJRVXdzUlVGQll5eERRVUZrTEVOQlFWQXNRMEZCVUR0QlFVTkVJaXdpWm1sc1pTSTZJbk5sYkdWamRHOXljeTVxY3lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkltbHRjRzl5ZENCN0lHTnlaV0YwWlZCaGNuTmxjaUI5SUdaeWIyMGdKM0p6ZEMxelpXeGxZM1J2Y2kxd1lYSnpaWEluTzF4dWFXMXdiM0owSUhaaGJIVmxjeUJtY205dElDZHZZbXBsWTNRdWRtRnNkV1Z6Snp0Y2JtbHRjRzl5ZENCbWJHRjBJR1p5YjIwZ0oyRnljbUY1TG5CeWIzUnZkSGx3WlM1bWJHRjBKenRjYm1sdGNHOXlkQ0JwY3lCbWNtOXRJQ2R2WW1wbFkzUXRhWE1uTzF4dWFXMXdiM0owSUdoaGN5Qm1jbTl0SUNkb1lYTW5PMXh1YVcxd2IzSjBJR1ZzWlcxbGJuUnpRbmxEYjI1emRISjFZM1J2Y2lCbWNtOXRJQ2RvZEcxc0xXVnNaVzFsYm5RdGJXRndMMko1UTI5dWMzUnlkV04wYjNJbk8xeHVhVzF3YjNKMElIdGNiaUFnZEhKbFpVWnBiSFJsY2l4Y2JpQWdibTlrWlVoaGMwbGtMRnh1SUNCbWFXNWtVR0Z5Wlc1MFRtOWtaU3hjYmlBZ2JtOWtaVTFoZEdOb1pYTlBZbXBsWTNSUWNtOXdjeXhjYmlBZ1kyaHBiR1J5Wlc1UFprNXZaR1VzWEc0Z0lHaGhjME5zWVhOelRtRnRaU3hjYm4wZ1puSnZiU0FuTGk5U1UxUlVjbUYyWlhKellXd25PMXh1YVcxd2IzSjBJSHNnYm05a1pVaGhjMVI1Y0dVc0lIQnliM0J6VDJaT2IyUmxJSDBnWm5KdmJTQW5MaTlWZEdsc2N5YzdYRzVwYlhCdmNuUWdaMlYwUVdSaGNIUmxjaUJtY205dElDY3VMMmRsZEVGa1lYQjBaWEluTzF4dUx5OGdiM1Z5SUVOVFV5QnpaV3hsWTNSdmNpQndZWEp6WlhJZ2FXNXpkR0Z1WTJWY2JtTnZibk4wSUhCaGNuTmxjaUE5SUdOeVpXRjBaVkJoY25ObGNpZ3BPMXh1WEc0dkx5QkRiMjFpYVc1aGRHOXljeUIwYUdGMElHRnNiRzkzSUhsdmRTQjBieUJqYUdGdVkyVWdjMlZzWldOMGIzSnpYRzVqYjI1emRDQkRTRWxNUkNBOUlDZGphR2xzWkVOdmJXSnBibUYwYjNJbk8xeHVZMjl1YzNRZ1FVUktRVU5GVGxSZlUwbENURWxPUnlBOUlDZGhaR3BoWTJWdWRGTnBZbXhwYm1kRGIyMWlhVzVoZEc5eUp6dGNibU52Ym5OMElFZEZUa1ZTUVV4ZlUwbENURWxPUnlBOUlDZG5aVzVsY21Gc1UybGliR2x1WjBOdmJXSnBibUYwYjNJbk8xeHVZMjl1YzNRZ1JFVlRRMFZPUkVGT1ZDQTlJQ2RrWlhOalpXNWtZVzUwUTI5dFltbHVZWFJ2Y2ljN1hHNWNiaTh2SUZObGJHVmpkRzl5Y3lCbWIzSWdkR0Z5WjJWMGFXNW5JR1ZzWlcxbGJuUnpYRzVqYjI1emRDQlRSVXhGUTFSUFVpQTlJQ2R6Wld4bFkzUnZjaWM3WEc1amIyNXpkQ0JVV1ZCRlgxTkZURVZEVkU5U0lEMGdKM1I1Y0dWVFpXeGxZM1J2Y2ljN1hHNWpiMjV6ZENCRFRFRlRVMTlUUlV4RlExUlBVaUE5SUNkamJHRnpjMU5sYkdWamRHOXlKenRjYm1OdmJuTjBJRWxFWDFORlRFVkRWRTlTSUQwZ0oybGtVMlZzWldOMGIzSW5PMXh1WTI5dWMzUWdWVTVKVmtWU1UwRk1YMU5GVEVWRFZFOVNJRDBnSjNWdWFYWmxjbk5oYkZObGJHVmpkRzl5Snp0Y2JtTnZibk4wSUVGVVZGSkpRbFZVUlY5UVVrVlRSVTVEUlNBOUlDZGhkSFJ5YVdKMWRHVlFjbVZ6Wlc1alpWTmxiR1ZqZEc5eUp6dGNibU52Ym5OMElFRlVWRkpKUWxWVVJWOVdRVXhWUlNBOUlDZGhkSFJ5YVdKMWRHVldZV3gxWlZObGJHVmpkRzl5Snp0Y2JpOHZJRUJVVDBSUElIZGxJR1J2Ym5RZ2MzVndjRzl5ZENCMGFHVnpaU3dnZEdoeWIzY2dhV1lnZEdobGVTQmhjbVVnZFhObFpGeHVZMjl1YzNRZ1VGTkZWVVJQWDBOTVFWTlRJRDBnSjNCelpYVmtiME5zWVhOelUyVnNaV04wYjNJbk8xeHVZMjl1YzNRZ1VGTkZWVVJQWDBWTVJVMUZUbFFnUFNBbmNITmxkV1J2Uld4bGJXVnVkRk5sYkdWamRHOXlKenRjYmx4dVkyOXVjM1FnUlZoQlExUmZRVlJVVWtsQ1ZWUkZYMDlRUlZKQlZFOVNJRDBnSnowbk8xeHVZMjl1YzNRZ1YwaEpWRVZNU1ZOVVgwRlVWRkpKUWxWVVJWOVBVRVZTUVZSUFVpQTlJQ2QrUFNjN1hHNWpiMjV6ZENCSVdWQklSVTVCVkVWRVgwRlVWRkpKUWxWVVJWOVBVRVZTUVZSUFVpQTlJQ2Q4UFNjN1hHNWpiMjV6ZENCUVVrVkdTVmhmUVZSVVVrbENWVlJGWDA5UVJWSkJWRTlTSUQwZ0oxNDlKenRjYm1OdmJuTjBJRk5WUmtaSldGOUJWRlJTU1VKVlZFVmZUMUJGVWtGVVQxSWdQU0FuSkQwbk8xeHVZMjl1YzNRZ1UxVkNVMVJTU1U1SFgwRlVWRkpKUWxWVVJWOVBVRVZTUVZSUFVpQTlJQ2NxUFNjN1hHNWNibVoxYm1OMGFXOXVJSFZ1YVhGMVpTaGhjbklwSUh0Y2JpQWdjbVYwZFhKdUlGc3VMaTV1WlhjZ1UyVjBLR0Z5Y2lsZE8xeHVmVnh1WEc0dktpcGNiaUFxSUVOaGJHeHpJSEpsWkhWalpTQnZiaUJoSUdGeWNtRjVJRzltSUc1dlpHVnpJSGRwZEdnZ2RHaGxJSEJoYzNObFpGeHVJQ29nWm5WdVkzUnBiMjRzSUhKbGRIVnlibWx1WnlCdmJteDVJSFZ1YVhGMVpTQnlaWE4xYkhSekxseHVJQ29nUUhCaGNtRnRJSHRHZFc1amRHbHZibjBnWm01Y2JpQXFJRUJ3WVhKaGJTQjdRWEp5WVhrOFRtOWtaVDU5SUc1dlpHVnpYRzRnS2k5Y2JtWjFibU4wYVc5dUlIVnVhWEYxWlZKbFpIVmpaU2htYml3Z2JtOWtaWE1wSUh0Y2JpQWdjbVYwZFhKdUlIVnVhWEYxWlNodWIyUmxjeTV5WldSMVkyVW9abTRzSUZ0ZEtTazdYRzU5WEc1Y2JpOHFLbHh1SUNvZ1ZHRnJaWE1nWVNCRFUxTWdjMlZzWldOMGIzSWdZVzVrSUhKbGRIVnlibk1nWVNCelpYUWdiMllnZEc5clpXNXpJSEJoY25ObFpGeHVJQ29nWW5rZ2MyTmhiSEJsYkM1Y2JpQXFJRUJ3WVhKaGJTQjdVM1J5YVc1bmZTQnpaV3hsWTNSdmNseHVJQ292WEc1bWRXNWpkR2x2YmlCellXWmxiSGxIWlc1bGNtRjBaVlJ2YTJWdWN5aHpaV3hsWTNSdmNpa2dlMXh1SUNCMGNua2dlMXh1SUNBZ0lISmxkSFZ5YmlCd1lYSnpaWEl1Y0dGeWMyVW9jMlZzWldOMGIzSXBPMXh1SUNCOUlHTmhkR05vSUNobGNuSXBJSHRjYmlBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb1lFWmhhV3hsWkNCMGJ5QndZWEp6WlNCelpXeGxZM1J2Y2pvZ0pIdHpaV3hsWTNSdmNuMWdLVHRjYmlBZ2ZWeHVmVnh1WEc1bWRXNWpkR2x2YmlCdFlYUmphRUYwZEhKcFluVjBaVk5sYkdWamRHOXlLRzV2WkdVc0lIUnZhMlZ1S1NCN1hHNGdJR052Ym5OMElIc2diM0JsY21GMGIzSXNJSFpoYkhWbExDQnVZVzFsSUgwZ1BTQjBiMnRsYmp0Y2JpQWdZMjl1YzNRZ2JtOWtaVkJ5YjNCeklEMGdjSEp2Y0hOUFprNXZaR1VvYm05a1pTazdYRzRnSUdOdmJuTjBJR1JsYzJOeWFYQjBiM0lnUFNCUFltcGxZM1F1WjJWMFQzZHVVSEp2Y0dWeWRIbEVaWE5qY21sd2RHOXlLRzV2WkdWUWNtOXdjeXdnYm1GdFpTazdYRzRnSUdsbUlDaGtaWE5qY21sd2RHOXlJQ1ltSUdSbGMyTnlhWEIwYjNJdVoyVjBLU0I3WEc0Z0lDQWdjbVYwZFhKdUlHWmhiSE5sTzF4dUlDQjlYRzRnSUdOdmJuTjBJRzV2WkdWUWNtOXdWbUZzZFdVZ1BTQnViMlJsVUhKdmNITmJibUZ0WlYwN1hHNGdJR2xtSUNoMGVYQmxiMllnYm05a1pWQnliM0JXWVd4MVpTQTlQVDBnSjNWdVpHVm1hVzVsWkNjcElIdGNiaUFnSUNCeVpYUjFjbTRnWm1Gc2MyVTdYRzRnSUgxY2JpQWdhV1lnS0hSdmEyVnVMblI1Y0dVZ1BUMDlJRUZVVkZKSlFsVlVSVjlRVWtWVFJVNURSU2tnZTF4dUlDQWdJSEpsZEhWeWJpQm9ZWE1vYm05a1pWQnliM0J6TENCMGIydGxiaTV1WVcxbEtUdGNiaUFnZlZ4dUlDQXZMeUJQYm14NUlIUm9aU0JsZUdGamRDQjJZV3gxWlNCdmNHVnlZWFJ2Y2lBb1hDSTlYQ0lwSUdOaGJpQnRZWFJqYUNCdWIyNHRjM1J5YVc1bmMxeHVJQ0JwWmlBb2RIbHdaVzltSUc1dlpHVlFjbTl3Vm1Gc2RXVWdJVDA5SUNkemRISnBibWNuSUh4OElIUjVjR1Z2WmlCMllXeDFaU0FoUFQwZ0ozTjBjbWx1WnljcElIdGNiaUFnSUNCcFppQW9iM0JsY21GMGIzSWdJVDA5SUVWWVFVTlVYMEZVVkZKSlFsVlVSVjlQVUVWU1FWUlBVaWtnZTF4dUlDQWdJQ0FnY21WMGRYSnVJR1poYkhObE8xeHVJQ0FnSUgxY2JpQWdmVnh1SUNCemQybDBZMmdnS0c5d1pYSmhkRzl5S1NCN1hHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1VtVndjbVZ6Wlc1MGN5QmhiaUJsYkdWdFpXNTBJSGRwZEdnZ2RHaGxJR0YwZENCaGRIUnlhV0oxZEdVZ2QyaHZjMlVnZG1Gc2RXVWdhWE1nWlhoaFkzUnNlU0JjSW5aaGJGd2lMbHh1SUNBZ0lDQXFJRUJsZUdGdGNHeGxYRzRnSUNBZ0lDb2dXMkYwZEhJOVhDSjJZV3hjSWwwZ2JXRjBZMmhsY3lCaGRIUnlQVndpZG1Gc1hDSmNiaUFnSUNBZ0tpOWNiaUFnSUNCallYTmxJRVZZUVVOVVgwRlVWRkpKUWxWVVJWOVBVRVZTUVZSUFVqcGNiaUFnSUNBZ0lISmxkSFZ5YmlCcGN5aHViMlJsVUhKdmNGWmhiSFZsTENCMllXeDFaU2s3WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nVW1Wd2NtVnpaVzUwY3lCaGJpQmxiR1Z0Wlc1MElIZHBkR2dnZEdobElHRjBkQ0JoZEhSeWFXSjFkR1VnZDJodmMyVWdkbUZzZFdVZ2FYTWdZU0IzYUdsMFpYTndZV05sTFhObGNHRnlZWFJsWkZ4dUlDQWdJQ0FxSUd4cGMzUWdiMllnZDI5eVpITXNJRzl1WlNCdlppQjNhR2xqYUNCcGN5QmxlR0ZqZEd4NVhHNGdJQ0FnSUNvZ1FHVjRZVzF3YkdWY2JpQWdJQ0FnS2lBZ1czSmxiSDQ5WENKamIzQjVjbWxuYUhSY0lsMGdiV0YwWTJobGN5QnlaV3c5WENKamIzQjVjbWxuYUhRZ2IzUm9aWEpjSWx4dUlDQWdJQ0FxTDF4dUlDQWdJR05oYzJVZ1YwaEpWRVZNU1ZOVVgwRlVWRkpKUWxWVVJWOVBVRVZTUVZSUFVqcGNiaUFnSUNBZ0lISmxkSFZ5YmlCdWIyUmxVSEp2Y0ZaaGJIVmxMbk53YkdsMEtDY2dKeWt1YVc1a1pYaFBaaWgyWVd4MVpTa2dJVDA5SUMweE8xeHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGSmxjSEpsYzJWdWRITWdZVzRnWld4bGJXVnVkQ0IzYVhSb0lIUm9aU0JoZEhRZ1lYUjBjbWxpZFhSbExDQnBkSE1nZG1Gc2RXVWdaV2wwYUdWeUlHSmxhVzVuSUdWNFlXTjBiSGtnZEdobFhHNGdJQ0FnSUNvZ2RtRnNkV1VnYjNJZ1ltVm5hVzV1YVc1bklIZHBkR2dnZEdobElIWmhiSFZsSUdsdGJXVmthV0YwWld4NUlHWnZiR3h2ZDJWa0lHSjVJRndpTFZ3aVhHNGdJQ0FnSUNvZ1FHVjRZVzF3YkdWY2JpQWdJQ0FnS2lCYmFISmxabXhoYm1kOFBWd2laVzVjSWwwZ2JXRjBZMmhsY3lCb2NtVm1iR0Z1WnoxY0ltVnVMVlZUWENKY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JqWVhObElFaFpVRWhGVGtGVVJVUmZRVlJVVWtsQ1ZWUkZYMDlRUlZKQlZFOVNPbHh1SUNBZ0lDQWdjbVYwZFhKdUlHNXZaR1ZRY205d1ZtRnNkV1VnUFQwOUlIWmhiSFZsSUh4OElHNXZaR1ZRY205d1ZtRnNkV1V1YzNSaGNuUnpWMmwwYUNoZ0pIdDJZV3gxWlgwdFlDazdYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dVbVZ3Y21WelpXNTBjeUJoYmlCbGJHVnRaVzUwSUhkcGRHZ2dkR2hsSUdGMGRDQmhkSFJ5YVdKMWRHVWdkMmh2YzJVZ2RtRnNkV1VnWW1WbmFXNXpJSGRwZEdnZ2RHaGxJSEJ5WldacGVDQjJZV3gxWlM1Y2JpQWdJQ0FnS2lCSlppQjBhR1VnZG1Gc2RXVWdhWE1nZEdobElHVnRjSFI1SUhOMGNtbHVaeUIwYUdWdUlIUm9aU0J6Wld4bFkzUnZjaUJrYjJWeklHNXZkQ0J5WlhCeVpYTmxiblFnWVc1NWRHaHBibWN1WEc0Z0lDQWdJQ29nUUdWNFlXMXdiR1ZjYmlBZ0lDQWdLaUJiZEhsd1pWNDlYQ0pwYldGblpWd2lYU0J0WVhSamFHVnpJSFI1Y0dVOVhDSnBiV0ZuWlc5aWFtVmpkRndpWEc0Z0lDQWdJQ292WEc0Z0lDQWdZMkZ6WlNCUVVrVkdTVmhmUVZSVVVrbENWVlJGWDA5UVJWSkJWRTlTT2x4dUlDQWdJQ0FnY21WMGRYSnVJSFpoYkhWbElEMDlQU0FuSnlBL0lHWmhiSE5sSURvZ2JtOWtaVkJ5YjNCV1lXeDFaUzV6YkdsalpTZ3dMQ0IyWVd4MVpTNXNaVzVuZEdncElEMDlQU0IyWVd4MVpUdGNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlNaWEJ5WlhObGJuUnpJR0Z1SUdWc1pXMWxiblFnZDJsMGFDQjBhR1VnWVhSMElHRjBkSEpwWW5WMFpTQjNhRzl6WlNCMllXeDFaU0JsYm1SeklIZHBkR2dnZEdobElITjFabVpwZUNCMllXeDFaUzVjYmlBZ0lDQWdLaUJKWmlCMGFHVWdkbUZzZFdVZ2FYTWdkR2hsSUdWdGNIUjVJSE4wY21sdVp5QjBhR1Z1SUhSb1pTQnpaV3hsWTNSdmNpQmtiMlZ6SUc1dmRDQnlaWEJ5WlhObGJuUWdZVzU1ZEdocGJtY3VYRzRnSUNBZ0lDb2dRR1Y0WVcxd2JHVmNiaUFnSUNBZ0tpQmJkSGx3WlNROVhDSnBiV0ZuWlZ3aVhTQnRZWFJqYUdWeklIUjVjR1U5WENKcGJXRm5aVzlpYW1WamRGd2lYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1kyRnpaU0JUVlVaR1NWaGZRVlJVVWtsQ1ZWUkZYMDlRUlZKQlZFOVNPbHh1SUNBZ0lDQWdjbVYwZFhKdUlIWmhiSFZsSUQwOVBTQW5KeUEvSUdaaGJITmxJRG9nYm05a1pWQnliM0JXWVd4MVpTNXpiR2xqWlNndGRtRnNkV1V1YkdWdVozUm9LU0E5UFQwZ2RtRnNkV1U3WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nVW1Wd2NtVnpaVzUwY3lCaGJpQmxiR1Z0Wlc1MElIZHBkR2dnZEdobElHRjBkQ0JoZEhSeWFXSjFkR1VnZDJodmMyVWdkbUZzZFdVZ1kyOXVkR0ZwYm5NZ1lYUWdiR1ZoYzNRZ2IyNWxYRzRnSUNBZ0lDb2dhVzV6ZEdGdVkyVWdiMllnZEdobElIWmhiSFZsTGlCSlppQjJZV3gxWlNCcGN5QjBhR1VnWlcxd2RIa2djM1J5YVc1bklIUm9aVzRnZEdobFhHNGdJQ0FnSUNvZ2MyVnNaV04wYjNJZ1pHOWxjeUJ1YjNRZ2NtVndjbVZ6Wlc1MElHRnVlWFJvYVc1bkxseHVJQ0FnSUNBcUlFQmxlR0Z0Y0d4bFhHNGdJQ0FnSUNvZ1czUnBkR3hsS2oxY0ltaGxiR3h2WENKZElHMWhkR05vWlhNZ2RHbDBiR1U5WENKM1pXeHNJR2hsYkd4dklIUm9aWEpsWENKY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JqWVhObElGTlZRbE5VVWtsT1IxOUJWRlJTU1VKVlZFVmZUMUJGVWtGVVQxSTZYRzRnSUNBZ0lDQnlaWFIxY200Z2RtRnNkV1VnUFQwOUlDY25JRDhnWm1Gc2MyVWdPaUJ1YjJSbFVISnZjRlpoYkhWbExtbHVaR1Y0VDJZb2RtRnNkV1VwSUNFOVBTQXRNVHRjYmlBZ0lDQmtaV1poZFd4ME9seHVJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0dCRmJucDViV1U2T2xObGJHVmpkRzl5T2lCVmJtdHViM2R1SUdGMGRISnBZblYwWlNCelpXeGxZM1J2Y2lCdmNHVnlZWFJ2Y2lCY0lpUjdiM0JsY21GMGIzSjlYQ0pnS1R0Y2JpQWdmVnh1ZlZ4dVhHNWNibVoxYm1OMGFXOXVJRzFoZEdOb1VITmxkV1J2VTJWc1pXTjBiM0lvYm05a1pTd2dkRzlyWlc0c0lISnZiM1FwSUh0Y2JpQWdZMjl1YzNRZ2V5QnVZVzFsTENCd1lYSmhiV1YwWlhKeklIMGdQU0IwYjJ0bGJqdGNiaUFnYVdZZ0tHNWhiV1VnUFQwOUlDZHViM1FuS1NCN1hHNGdJQ0FnTHk4Z1pYTnNhVzUwTFdScGMyRmliR1V0Ym1WNGRDMXNhVzVsSUc1dkxYVnpaUzFpWldadmNtVXRaR1ZtYVc1bFhHNGdJQ0FnY21WMGRYSnVJSEJoY21GdFpYUmxjbk11WlhabGNua29LSE5sYkdWamRHOXlLU0E5UGlCeVpXUjFZMlZVY21WbFFubFRaV3hsWTNSdmNpaHpaV3hsWTNSdmNpd2dibTlrWlNrdWJHVnVaM1JvSUQwOVBTQXdLVHRjYmlBZ2ZWeHVJQ0JwWmlBb2JtRnRaU0E5UFQwZ0oyVnRjSFI1SnlrZ2UxeHVJQ0FnSUhKbGRIVnliaUIwY21WbFJtbHNkR1Z5S0c1dlpHVXNJQ2h1S1NBOVBpQnVJQ0U5UFNCdWIyUmxLUzVzWlc1bmRHZ2dQVDA5SURBN1hHNGdJSDFjYmlBZ2FXWWdLRzVoYldVZ1BUMDlJQ2RtYVhKemRDMWphR2xzWkNjcElIdGNiaUFnSUNCamIyNXpkQ0I3SUhKbGJtUmxjbVZrSUgwZ1BTQm1hVzVrVUdGeVpXNTBUbTlrWlNoeWIyOTBMQ0J1YjJSbEtUdGNiaUFnSUNCamIyNXpkQ0JiWm1seWMzUkRhR2xzWkYwZ1BTQnlaVzVrWlhKbFpEdGNiaUFnSUNCeVpYUjFjbTRnWm1seWMzUkRhR2xzWkNBOVBUMGdibTlrWlR0Y2JpQWdmVnh1SUNCcFppQW9ibUZ0WlNBOVBUMGdKMnhoYzNRdFkyaHBiR1FuS1NCN1hHNGdJQ0FnWTI5dWMzUWdleUJ5Wlc1a1pYSmxaQ0I5SUQwZ1ptbHVaRkJoY21WdWRFNXZaR1VvY205dmRDd2dibTlrWlNrN1hHNGdJQ0FnY21WMGRYSnVJSEpsYm1SbGNtVmtXM0psYm1SbGNtVmtMbXhsYm1kMGFDQXRJREZkSUQwOVBTQnViMlJsTzF4dUlDQjlYRzRnSUdsbUlDaHVZVzFsSUQwOVBTQW5abTlqZFhNbktTQjdYRzRnSUNBZ2FXWWdLSFI1Y0dWdlppQmtiMk4xYldWdWRDQTlQVDBnSjNWdVpHVm1hVzVsWkNjcElIdGNiaUFnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnblJXNTZlVzFsT2pwVFpXeGxZM1J2Y2lCa2IyVnpJRzV2ZENCemRYQndiM0owSUhSb1pTQmNJanBtYjJOMWMxd2lJSEJ6WlhWa2J5MWxiR1Z0Wlc1MElIZHBkR2h2ZFhRZ1lTQm5iRzlpWVd3Z1lHUnZZM1Z0Wlc1MFlDNG5LVHRjYmlBZ0lDQjlYRzRnSUNBZ1kyOXVjM1FnWVdSaGNIUmxjaUE5SUdkbGRFRmtZWEIwWlhJb0tUdGNiaUFnSUNBdktpQmxjMnhwYm5RdFpXNTJJR0p5YjNkelpYSWdLaTljYmlBZ0lDQnlaWFIxY200Z1pHOWpkVzFsYm5RdVlXTjBhWFpsUld4bGJXVnVkQ0FtSmlCaFpHRndkR1Z5TG01dlpHVlViMGh2YzNST2IyUmxLRzV2WkdVcElEMDlQU0JrYjJOMWJXVnVkQzVoWTNScGRtVkZiR1Z0Wlc1ME8xeHVJQ0I5WEc1Y2JpQWdkR2h5YjNjZ2JtVjNJRlI1Y0dWRmNuSnZjaWhnUlc1NmVXMWxPanBUWld4bFkzUnZjaUJrYjJWeklHNXZkQ0J6ZFhCd2IzSjBJSFJvWlNCY0lpUjdkRzlyWlc0dWJtRnRaWDFjSWlCd2MyVjFaRzh0Wld4bGJXVnVkQ0J2Y2lCd2MyVjFaRzh0WTJ4aGMzTWdjMlZzWldOMGIzSnpMbUFwTzF4dWZWeHVYRzR2S2lwY2JpQXFJRlJoYTJWeklHRWdibTlrWlNCaGJtUWdZU0IwYjJ0bGJpQmhibVFnWkdWMFpYSnRhVzVsY3lCcFppQjBhR1VnYm05a1pWeHVJQ29nYldGMFkyaGxjeUIwYUdVZ2NISmxaR2xqWVhSbElHUmxabWx1WldRZ1lua2dkR2hsSUhSdmEyVnVMbHh1SUNvZ1FIQmhjbUZ0SUh0T2IyUmxmU0J1YjJSbFhHNGdLaUJBY0dGeVlXMGdlMVJ2YTJWdWZTQjBiMnRsYmx4dUlDb3ZYRzVtZFc1amRHbHZiaUJ1YjJSbFRXRjBZMmhsYzFSdmEyVnVLRzV2WkdVc0lIUnZhMlZ1TENCeWIyOTBLU0I3WEc0Z0lHbG1JQ2h1YjJSbElEMDlQU0J1ZFd4c0lIeDhJSFI1Y0dWdlppQnViMlJsSUQwOVBTQW5jM1J5YVc1bkp5a2dlMXh1SUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHRjYmlBZ2ZWeHVJQ0J6ZDJsMFkyZ2dLSFJ2YTJWdUxuUjVjR1VwSUh0Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCTllYUmphQ0JsZG1WeWVTQnViMlJsWEc0Z0lDQWdJQ29nUUdWNFlXMXdiR1VnSnlvbklHMWhkR05vWlhNZ1pYWmxjbmtnYm05a1pWeHVJQ0FnSUNBcUwxeHVJQ0FnSUdOaGMyVWdWVTVKVmtWU1UwRk1YMU5GVEVWRFZFOVNPbHh1SUNBZ0lDQWdjbVYwZFhKdUlIUnlkV1U3WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nVFdGMFkyZ2dZV2RoYVc1emRDQjBhR1VnWTJ4aGMzTk9ZVzFsSUhCeWIzQmNiaUFnSUNBZ0tpQkFaWGhoYlhCc1pTQW5MbUZqZEdsMlpTY2diV0YwWTJobGN5QThaR2wySUdOc1lYTnpUbUZ0WlQwbllXTjBhWFpsSnlBdlBseHVJQ0FnSUNBcUwxeHVJQ0FnSUdOaGMyVWdRMHhCVTFOZlUwVk1SVU5VVDFJNlhHNGdJQ0FnSUNCeVpYUjFjbTRnYUdGelEyeGhjM05PWVcxbEtHNXZaR1VzSUhSdmEyVnVMbTVoYldVcE8xeHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGTnBiWEJzWlNCMGVYQmxJRzFoZEdOb2FXNW5YRzRnSUNBZ0lDb2dRR1Y0WVcxd2JHVWdKMlJwZGljZ2JXRjBZMmhsY3lBOFpHbDJJQzgrWEc0Z0lDQWdJQ292WEc0Z0lDQWdZMkZ6WlNCVVdWQkZYMU5GVEVWRFZFOVNPbHh1SUNBZ0lDQWdjbVYwZFhKdUlHNXZaR1ZJWVhOVWVYQmxLRzV2WkdVc0lIUnZhMlZ1TG01aGJXVXBPMXh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRTFoZEdOb0lHRm5ZV2x1YzNRZ2RHaGxJR0JwWkdBZ2NISnZjRnh1SUNBZ0lDQXFJRUJsZUdGdGNHeGxJQ2NqYm1GMkp5QnRZWFJqYUdWeklEeDFiQ0JwWkQxY0ltNWhkbHdpSUM4K1hHNGdJQ0FnSUNvdlhHNGdJQ0FnWTJGelpTQkpSRjlUUlV4RlExUlBVanBjYmlBZ0lDQWdJSEpsZEhWeWJpQnViMlJsU0dGelNXUW9ibTlrWlN3Z2RHOXJaVzR1Ym1GdFpTazdYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dUV0YwWTJobGN5QnBaaUJoYmlCaGRIUnlhV0oxZEdVZ2FYTWdjSEpsYzJWdWRDd2djbVZuWVhKa2JHVnpjMXh1SUNBZ0lDQXFJRzltSUdsMGN5QjJZV3gxWlZ4dUlDQWdJQ0FxSUVCbGVHRnRjR3hsSUNkYlpHbHpZV0pzWldSZEp5QnRZWFJqYUdWeklEeGhJR1JwYzJGaWJHVmtJQzgrWEc0Z0lDQWdJQ292WEc0Z0lDQWdZMkZ6WlNCQlZGUlNTVUpWVkVWZlVGSkZVMFZPUTBVNlhHNGdJQ0FnSUNCeVpYUjFjbTRnYldGMFkyaEJkSFJ5YVdKMWRHVlRaV3hsWTNSdmNpaHViMlJsTENCMGIydGxiaWs3WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nVFdGMFkyaGxjeUJwWmlCaGJpQmhkSFJ5YVdKMWRHVWdhWE1nY0hKbGMyVnVkQ0IzYVhSb0lIUm9aVnh1SUNBZ0lDQXFJSEJ5YjNacFpHVmtJSFpoYkhWbFhHNGdJQ0FnSUNvZ1FHVjRZVzF3YkdVZ0oxdGtZWFJoTFdadmJ6MW1iMjlkSnlCdFlYUmphR1Z6SUR4a2FYWWdaR0YwWVMxbWIyODlYQ0ptYjI5Y0lpQXZQbHh1SUNBZ0lDQXFMMXh1SUNBZ0lHTmhjMlVnUVZSVVVrbENWVlJGWDFaQlRGVkZPbHh1SUNBZ0lDQWdjbVYwZFhKdUlHMWhkR05vUVhSMGNtbGlkWFJsVTJWc1pXTjBiM0lvYm05a1pTd2dkRzlyWlc0cE8xeHVJQ0FnSUdOaGMyVWdVRk5GVlVSUFgwVk1SVTFGVGxRNlhHNGdJQ0FnWTJGelpTQlFVMFZWUkU5ZlEweEJVMU02WEc0Z0lDQWdJQ0J5WlhSMWNtNGdiV0YwWTJoUWMyVjFaRzlUWld4bFkzUnZjaWh1YjJSbExDQjBiMnRsYml3Z2NtOXZkQ2s3WEc0Z0lDQWdaR1ZtWVhWc2REcGNiaUFnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2loZ1ZXNXJibTkzYmlCMGIydGxiaUIwZVhCbE9pQWtlM1J2YTJWdUxuUjVjR1Y5WUNrN1hHNGdJSDFjYm4xY2JseHVMeW9xWEc0Z0tpQlNaWFIxY201eklHRWdjSEpsWkdsallYUmxJR1oxYm1OMGFXOXVJSFJvWVhRZ1kyaGxZMnR6SUdsbUlHRmNiaUFxSUc1dlpHVWdiV0YwWTJobGN5QmxkbVZ5ZVNCMGIydGxiaUJwYmlCMGFHVWdZbTlrZVNCdlppQmhJSE5sYkdWamRHOXlYRzRnS2lCMGIydGxiaTVjYmlBcUlFQndZWEpoYlNCN1ZHOXJaVzU5SUhSdmEyVnVYRzRnS2k5Y2JtWjFibU4wYVc5dUlHSjFhV3hrVUhKbFpHbGpZWFJsUm5KdmJWUnZhMlZ1S0hSdmEyVnVMQ0J5YjI5MEtTQjdYRzRnSUhKbGRIVnliaUFvYm05a1pTa2dQVDRnZEc5clpXNHVZbTlrZVM1bGRtVnllU2dvWW05a2VWUnZhMlZ1S1NBOVBpQnViMlJsVFdGMFkyaGxjMVJ2YTJWdUtHNXZaR1VzSUdKdlpIbFViMnRsYml3Z2NtOXZkQ2twTzF4dWZWeHVYRzR2S2lwY2JpQXFJRkpsZEhWeWJuTWdkMmhsZEdobGNpQmhJSEJoY25ObFpDQnpaV3hsWTNSdmNpQnBjeUJoSUdOdmJYQnNaWGdnYzJWc1pXTjBiM0lzSUhkb2FXTm9YRzRnS2lCcGN5QmtaV1pwYm1Wa0lHRnpJR0VnYzJWc1pXTjBiM0lnZEdoaGRDQmpiMjUwWVdsdWN5QmpiMjFpYVc1aGRHOXljeTVjYmlBcUlFQndZWEpoYlNCN1FYSnlZWGs4Vkc5clpXNCtmU0IwYjJ0bGJuTmNiaUFxTDF4dVpuVnVZM1JwYjI0Z2FYTkRiMjF3YkdWNFUyVnNaV04wYjNJb2RHOXJaVzV6S1NCN1hHNGdJSEpsZEhWeWJpQjBiMnRsYm5NdWMyOXRaU2dvZEc5clpXNHBJRDArSUhSdmEyVnVMblI1Y0dVZ0lUMDlJRk5GVEVWRFZFOVNLVHRjYm4xY2JseHVYRzR2S2lwY2JpQXFJRlJoYTJWeklHRWdZMjl0Y0c5dVpXNTBJR052Ym5OMGNuVmpkRzl5TENCdlltcGxZM1FzSUc5eUlITjBjbWx1WnlCeVpYQnlaWE5sYm5ScGJtZGNiaUFxSUdFZ2MybHRjR3hsSUhObGJHVmpkRzl5SUdGdVpDQnlaWFIxY201eklHRWdjSEpsWkdsallYUmxJR1oxYm1OMGFXOXVJSFJvWVhRZ1kyRnVYRzRnS2lCaVpTQmhjSEJzYVdWa0lIUnZJR0VnYzJsdVoyeGxJRzV2WkdVdVhHNGdLaUJBY0dGeVlXMGdlMFZ1ZW5sdFpWTmxiR1ZqZEc5eWZTQnpaV3hsWTNSdmNseHVJQ292WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnWW5WcGJHUlFjbVZrYVdOaGRHVW9jMlZzWldOMGIzSXBJSHRjYmlBZ0x5OGdTV1lnZEdobElITmxiR1ZqZEc5eUlHbHpJR0VnYzNSeWFXNW5MQ0J3WVhKelpTQnBkQ0JoY3lCaElITnBiWEJzWlNCRFUxTWdjMlZzWldOMGIzSmNiaUFnYVdZZ0tIUjVjR1Z2WmlCelpXeGxZM1J2Y2lBOVBUMGdKM04wY21sdVp5Y3BJSHRjYmlBZ0lDQmpiMjV6ZENCMGIydGxibk1nUFNCellXWmxiSGxIWlc1bGNtRjBaVlJ2YTJWdWN5aHpaV3hsWTNSdmNpazdYRzRnSUNBZ2FXWWdLR2x6UTI5dGNHeGxlRk5sYkdWamRHOXlLSFJ2YTJWdWN5a3BJSHRjYmlBZ0lDQWdJSFJvY205M0lHNWxkeUJVZVhCbFJYSnliM0lvSjFSb2FYTWdiV1YwYUc5a0lHUnZaWE1nYm05MElITjFjSEJ2Y25RZ1kyOXRjR3hsZUNCRFUxTWdjMlZzWldOMGIzSnpKeWs3WEc0Z0lDQWdmVnh1SUNBZ0lDOHZJRk5wYlhCc1pTQnpaV3hsWTNSdmNuTWdiMjVzZVNCb1lYWmxJR0VnYzJsdVoyeGxJSE5sYkdWamRHOXlJSFJ2YTJWdVhHNGdJQ0FnY21WMGRYSnVJR0oxYVd4a1VISmxaR2xqWVhSbFJuSnZiVlJ2YTJWdUtIUnZhMlZ1YzFzd1hTazdYRzRnSUgxY2JseHVJQ0F2THlCSlppQjBhR1VnYzJWc1pXTjBiM0lnYVhNZ1lXNGdaV3hsYldWdWRDQjBlWEJsTENCamFHVmpheUJwWmlCMGFHVWdibTlrWlNkeklIUjVjR1VnYldGMFkyaGxjMXh1SUNCamIyNXpkQ0JoWkdGd2RHVnlJRDBnWjJWMFFXUmhjSFJsY2lncE8xeHVJQ0JqYjI1emRDQnBjMFZzWlcxbGJuUlVlWEJsSUQwZ1lXUmhjSFJsY2k1cGMxWmhiR2xrUld4bGJXVnVkRlI1Y0dWY2JpQWdJQ0EvSUdGa1lYQjBaWEl1YVhOV1lXeHBaRVZzWlcxbGJuUlVlWEJsS0hObGJHVmpkRzl5S1Z4dUlDQWdJRG9nZEhsd1pXOW1JSE5sYkdWamRHOXlJRDA5UFNBblpuVnVZM1JwYjI0bk8xeHVJQ0JwWmlBb2FYTkZiR1Z0Wlc1MFZIbHdaU2tnZTF4dUlDQWdJSEpsZEhWeWJpQW9ibTlrWlNrZ1BUNGdZV1JoY0hSbGNpNXRZWFJqYUdWelJXeGxiV1Z1ZEZSNWNHVW9ibTlrWlN3Z2MyVnNaV04wYjNJcE8xeHVJQ0I5WEc0Z0lDOHZJRWxtSUhSb1pTQnpaV3hsWTNSdmNpQnBjeUJoYmlCdWIyNHRaVzF3ZEhrZ2IySnFaV04wTENCMGNtVmhkQ0IwYUdVZ2EyVjVjeTkyWVd4MVpYTWdZWE1nY0hKdmNITmNiaUFnYVdZZ0tIUjVjR1Z2WmlCelpXeGxZM1J2Y2lBOVBUMGdKMjlpYW1WamRDY3BJSHRjYmlBZ0lDQnBaaUFvSVVGeWNtRjVMbWx6UVhKeVlYa29jMlZzWldOMGIzSXBJQ1ltSUhObGJHVmpkRzl5SUNFOVBTQnVkV3hzSUNZbUlFOWlhbVZqZEM1clpYbHpLSE5sYkdWamRHOXlLUzVzWlc1bmRHZ2dQaUF3S1NCN1hHNGdJQ0FnSUNCamIyNXpkQ0JvWVhOVmJtUmxabWx1WldSV1lXeDFaWE1nUFNCMllXeDFaWE1vYzJWc1pXTjBiM0lwTG5OdmJXVW9LSFpoYkhWbEtTQTlQaUIwZVhCbGIyWWdkbUZzZFdVZ1BUMDlJQ2QxYm1SbFptbHVaV1FuS1R0Y2JpQWdJQ0FnSUdsbUlDaG9ZWE5WYm1SbFptbHVaV1JXWVd4MVpYTXBJSHRjYmlBZ0lDQWdJQ0FnZEdoeWIzY2dibVYzSUZSNWNHVkZjbkp2Y2lnblJXNTZlVzFsT2pwUWNtOXdjeUJqWVc3aWdKbDBJR2hoZG1VZ1lIVnVaR1ZtYVc1bFpHQWdkbUZzZFdWekxpQlVjbmtnZFhOcGJtY2c0b0NZWm1sdVpGZG9aWEpsS0NuaWdKa2dhVzV6ZEdWaFpDNG5LVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJSEpsZEhWeWJpQW9ibTlrWlNrZ1BUNGdibTlrWlUxaGRHTm9aWE5QWW1wbFkzUlFjbTl3Y3lodWIyUmxMQ0J6Wld4bFkzUnZjaWs3WEc0Z0lDQWdmVnh1SUNBZ0lIUm9jbTkzSUc1bGR5QlVlWEJsUlhKeWIzSW9KMFZ1ZW5sdFpUbzZVMlZzWldOMGIzSWdaRzlsY3lCdWIzUWdjM1Z3Y0c5eWRDQmhiaUJoY25KaGVTd2diblZzYkN3Z2IzSWdaVzF3ZEhrZ2IySnFaV04wSUdGeklHRWdjMlZzWldOMGIzSW5LVHRjYmlBZ2ZWeHVYRzRnSUhSb2NtOTNJRzVsZHlCVWVYQmxSWEp5YjNJb0owVnVlbmx0WlRvNlUyVnNaV04wYjNJZ1pYaHdaV04wY3lCaElITjBjbWx1Wnl3Z2IySnFaV04wTENCdmNpQjJZV3hwWkNCbGJHVnRaVzUwSUhSNWNHVWdLRU52YlhCdmJtVnVkQ0JEYjI1emRISjFZM1J2Y2lrbktUdGNibjFjYmx4dUx5b3FYRzRnS2lCTllYUmphR1Z6SUc5dWJIa2dibTlrWlhNZ2QyaHBZMmdnWVhKbElHRmthbUZqWlc1MElITnBZbXhwYm1keklDaGthWEpsWTNRZ2JtVjRkQ0J6YVdKc2FXNW5LVnh1SUNvZ1lXZGhhVzV6ZENCaElIQnlaV1JwWTJGMFpTd2djbVYwZFhKdWFXNW5JSFJvYjNObElIUm9ZWFFnYldGMFkyZ3VYRzRnS2lCQWNHRnlZVzBnZTBGeWNtRjVQRTV2WkdVK2ZTQnViMlJsYzF4dUlDb2dRSEJoY21GdElIdEdkVzVqZEdsdmJuMGdjSEpsWkdsallYUmxYRzRnS2lCQWNHRnlZVzBnZTA1dlpHVjlJSEp2YjNSY2JpQXFMMXh1Wm5WdVkzUnBiMjRnYldGMFkyaEJaR3BoWTJWdWRGTnBZbXhwYm1kektHNXZaR1Z6TENCd2NtVmthV05oZEdVc0lISnZiM1FwSUh0Y2JpQWdjbVYwZFhKdUlHNXZaR1Z6TG5KbFpIVmpaU2dvYldGMFkyaGxjeXdnYm05a1pTa2dQVDRnZTF4dUlDQWdJR052Ym5OMElIQmhjbVZ1ZENBOUlHWnBibVJRWVhKbGJuUk9iMlJsS0hKdmIzUXNJRzV2WkdVcE8xeHVJQ0FnSUM4dklFbG1JSFJvWlhKbEozTWdibThnY0dGeVpXNTBMQ0IwYUdWeVpTZHpJRzV2SUhOcFlteHBibWR6WEc0Z0lDQWdhV1lnS0NGd1lYSmxiblFwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJ0WVhSamFHVnpPMXh1SUNBZ0lIMWNiaUFnSUNCamIyNXpkQ0J3WVhKbGJuUkRhR2xzWkhKbGJpQTlJR05vYVd4a2NtVnVUMlpPYjJSbEtIQmhjbVZ1ZENrN1hHNGdJQ0FnWTI5dWMzUWdibTlrWlVsdVpHVjRJRDBnY0dGeVpXNTBRMmhwYkdSeVpXNHVhVzVrWlhoUFppaHViMlJsS1R0Y2JpQWdJQ0JqYjI1emRDQmhaR3BoWTJWdWRGTnBZbXhwYm1jZ1BTQndZWEpsYm5SRGFHbHNaSEpsYmx0dWIyUmxTVzVrWlhnZ0t5QXhYVHRjYmlBZ0lDQXZMeUJPYnlCemFXSnNhVzVuWEc0Z0lDQWdhV1lnS0NGaFpHcGhZMlZ1ZEZOcFlteHBibWNwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJ0WVhSamFHVnpPMXh1SUNBZ0lIMWNiaUFnSUNCcFppQW9jSEpsWkdsallYUmxLR0ZrYW1GalpXNTBVMmxpYkdsdVp5a3BJSHRjYmlBZ0lDQWdJRzFoZEdOb1pYTXVjSFZ6YUNoaFpHcGhZMlZ1ZEZOcFlteHBibWNwTzF4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z2JXRjBZMmhsY3p0Y2JpQWdmU3dnVzEwcE8xeHVmVnh1WEc0dktpcGNiaUFxSUUxaGRHTm9aWE1nYjI1c2VTQnViMlJsY3lCM2FHbGphQ0JoY21VZ1oyVnVaWEpoYkNCemFXSnNhVzVuY3lBb1lXNTVJSE5wWW14cGJtY2dLbUZtZEdWeUtpbGNiaUFxSUdGbllXbHVjM1FnWVNCd2NtVmthV05oZEdVc0lISmxkSFZ5Ym1sdVp5QjBhRzl6WlNCMGFHRjBJRzFoZEdOb0xseHVJQ29nUUhCaGNtRnRJSHRCY25KaGVUeE9iMlJsUG4wZ2JtOWtaWE5jYmlBcUlFQndZWEpoYlNCN1JuVnVZM1JwYjI1OUlIQnlaV1JwWTJGMFpWeHVJQ29nUUhCaGNtRnRJSHRPYjJSbGZTQnliMjkwWEc0Z0tpOWNibVoxYm1OMGFXOXVJRzFoZEdOb1IyVnVaWEpoYkZOcFlteHBibWNvYm05a1pYTXNJSEJ5WldScFkyRjBaU3dnY205dmRDa2dlMXh1SUNCeVpYUjFjbTRnZFc1cGNYVmxVbVZrZFdObEtDaHRZWFJqYUdWekxDQnViMlJsS1NBOVBpQjdYRzRnSUNBZ1kyOXVjM1FnY0dGeVpXNTBJRDBnWm1sdVpGQmhjbVZ1ZEU1dlpHVW9jbTl2ZEN3Z2JtOWtaU2s3WEc0Z0lDQWdhV1lnS0NGd1lYSmxiblFwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJ0WVhSamFHVnpPMXh1SUNBZ0lIMWNiaUFnSUNCamIyNXpkQ0J3WVhKbGJuUkRhR2xzWkhKbGJpQTlJR05vYVd4a2NtVnVUMlpPYjJSbEtIQmhjbVZ1ZENrN1hHNGdJQ0FnWTI5dWMzUWdibTlrWlVsdVpHVjRJRDBnY0dGeVpXNTBRMmhwYkdSeVpXNHVhVzVrWlhoUFppaHViMlJsS1R0Y2JpQWdJQ0JqYjI1emRDQjViM1Z1WjJWeVUybGliR2x1WjNNZ1BTQndZWEpsYm5SRGFHbHNaSEpsYmk1emJHbGpaU2h1YjJSbFNXNWtaWGdnS3lBeEtUdGNiaUFnSUNCeVpYUjFjbTRnYldGMFkyaGxjeTVqYjI1allYUW9lVzkxYm1kbGNsTnBZbXhwYm1kekxtWnBiSFJsY2lod2NtVmthV05oZEdVcEtUdGNiaUFnZlN3Z2JtOWtaWE1wTzF4dWZWeHVYRzR2S2lwY2JpQXFJRTFoZEdOb1pYTWdiMjVzZVNCdWIyUmxjeUIzYUdsamFDQmhjbVVnWkdseVpXTjBJR05vYVd4a2NtVnVJQ2h1YjNRZ1ozSmhibVJqYUdsc1pISmxiaXdnWlhSakxpbGNiaUFxSUdGbllXbHVjM1FnWVNCd2NtVmthV05oZEdVc0lISmxkSFZ5Ym1sdVp5QjBhRzl6WlNCMGFHRjBJRzFoZEdOb0xseHVJQ29nUUhCaGNtRnRJSHRCY25KaGVUeE9iMlJsUG4wZ2JtOWtaWE5jYmlBcUlFQndZWEpoYlNCN1JuVnVZM1JwYjI1OUlIQnlaV1JwWTJGMFpWeHVJQ292WEc1bWRXNWpkR2x2YmlCdFlYUmphRVJwY21WamRFTm9hV3hrS0c1dlpHVnpMQ0J3Y21Wa2FXTmhkR1VwSUh0Y2JpQWdjbVYwZFhKdUlIVnVhWEYxWlZKbFpIVmpaU2hjYmlBZ0lDQW9iV0YwWTJobGN5d2dibTlrWlNrZ1BUNGdiV0YwWTJobGN5NWpiMjVqWVhRb1kyaHBiR1J5Wlc1UFprNXZaR1VvYm05a1pTa3VabWxzZEdWeUtIQnlaV1JwWTJGMFpTa3BMRnh1SUNBZ0lHNXZaR1Z6TEZ4dUlDQXBPMXh1ZlZ4dVhHNHZLaXBjYmlBcUlFMWhkR05vWlhNZ1lXeHNJR1JsYzJObGJtUmhiblFnYm05a1pYTWdZV2RoYVc1emRDQmhJSEJ5WldScFkyRjBaU3hjYmlBcUlISmxkSFZ5Ym1sdVp5QjBhRzl6WlNCMGFHRjBJRzFoZEdOb0xseHVJQ29nUUhCaGNtRnRJSHRCY25KaGVUeE9iMlJsUG4wZ2JtOWtaWE5jYmlBcUlFQndZWEpoYlNCN1JuVnVZM1JwYjI1OUlIQnlaV1JwWTJGMFpWeHVJQ292WEc1bWRXNWpkR2x2YmlCdFlYUmphRVJsYzJObGJtUmhiblFvYm05a1pYTXNJSEJ5WldScFkyRjBaU2tnZTF4dUlDQnlaWFIxY200Z2RXNXBjWFZsVW1Wa2RXTmxLRnh1SUNBZ0lDaHRZWFJqYUdWekxDQnViMlJsS1NBOVBpQnRZWFJqYUdWekxtTnZibU5oZENoMGNtVmxSbWxzZEdWeUtHNXZaR1VzSUhCeVpXUnBZMkYwWlNrcExGeHVJQ0FnSUdac1lYUW9ibTlrWlhNdWJXRndLR05vYVd4a2NtVnVUMlpPYjJSbEtTa3NYRzRnSUNrN1hHNTlYRzVjYmk4cUtseHVJQ29nVkdGclpYTWdZVzRnVWxOVUlHRnVaQ0J5WldSMVkyVnpJR2wwSUhSdklHRWdjMlYwSUc5bUlHNXZaR1Z6SUcxaGRHTm9hVzVuWEc0Z0tpQjBhR1VnYzJWc1pXTjBiM0l1SUZSb1pTQnpaV3hsWTNSdmNpQmpZVzRnWW1VZ1lTQnphVzF3YkdVZ2MyVnNaV04wYjNJc0lIZG9hV05vWEc0Z0tpQnBjeUJvWVc1a2JHVmtJR0o1SUdCaWRXbHNaRkJ5WldScFkyRjBaV0FzSUc5eUlHRWdZMjl0Y0d4bGVDQkRVMU1nYzJWc1pXTjBiM0lnZDJocFkyaGNiaUFxSUhKbFpIVmpaVlJ5WldWQ2VWTmxiR1ZqZEc5eUlIQmhjbk5sY3lCaGJtUWdjbVZrZFdObGN5QjBhR1VnZEhKbFpTQmlZWE5sWkNCdmJpQjBhR1VnWTI5dFltbHVZWFJ2Y25NdVhHNGdLbHh1SUNvZ1FIQmhjbUZ0SUh0RmJucDViV1ZUWld4bFkzUnZjbjBnYzJWc1pXTjBiM0pjYmlBcUlFQndZWEpoYlNCN1VsTlVUbTlrWlgwZ2NtOXZkRnh1SUNvdlhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z2NtVmtkV05sVkhKbFpVSjVVMlZzWldOMGIzSW9jMlZzWldOMGIzSXNJSEp2YjNRcElIdGNiaUFnYVdZZ0tIUjVjR1Z2WmlCelpXeGxZM1J2Y2lBaFBUMGdKM04wY21sdVp5Y3BJSHRjYmlBZ0lDQmpiMjV6ZENCbGJHVnRaVzUwY3lBOUlHVnNaVzFsYm5SelFubERiMjV6ZEhKMVkzUnZjaWh6Wld4bFkzUnZjaWs3WEc0Z0lDQWdhV1lnS0dWc1pXMWxiblJ6TG14bGJtZDBhQ0ErSURBcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCbWJHRjBLR1ZzWlcxbGJuUnpMbTFoY0Nnb2VDa2dQVDRnY21Wa2RXTmxWSEpsWlVKNVUyVnNaV04wYjNJb2VDNTBZV2NzSUhKdmIzUXBLU2s3WEc1Y2JpQWdJQ0FnSUM4dklIZG9aVzRnYUhSMGNITTZMeTluYVhSb2RXSXVZMjl0TDJGM1pXRnllUzl5YzNRdGMyVnNaV04wYjNJdGNHRnljMlZ5TDJsemMzVmxjeTh4TlNCcGN5QnlaWE52YkhabFpGeHVJQ0FnSUNBZ0x5OGdZMjl1YzNRZ2FIUnRiRlJoWjA1aGJXVnpJRDBnWld4bGJXVnVkSE11YldGd0tIZ2dQVDRnZUM1MFlXY3BMbXB2YVc0b0p5d2dKeWs3WEc0Z0lDQWdJQ0F2THlCeVpYUjFjbTRnY21Wa2RXTmxWSEpsWlVKNVUyVnNaV04wYjNJb2FIUnRiRlJoWjA1aGJXVnpMQ0J5YjI5MEtUdGNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQnBaaUFvZEhsd1pXOW1JSE5sYkdWamRHOXlJRDA5UFNBblpuVnVZM1JwYjI0bklIeDhJSFI1Y0dWdlppQnpaV3hsWTNSdmNpQTlQVDBnSjI5aWFtVmpkQ2NwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdkSEpsWlVacGJIUmxjaWh5YjI5MExDQmlkV2xzWkZCeVpXUnBZMkYwWlNoelpXeGxZM1J2Y2lrcE8xeHVJQ0I5WEc1Y2JpQWdiR1YwSUhKbGMzVnNkSE1nUFNCYlhUdGNiaUFnYVdZZ0tIUjVjR1Z2WmlCelpXeGxZM1J2Y2lBOVBUMGdKM04wY21sdVp5Y3BJSHRjYmlBZ0lDQmpiMjV6ZENCMGIydGxibk1nUFNCellXWmxiSGxIWlc1bGNtRjBaVlJ2YTJWdWN5aHpaV3hsWTNSdmNpazdYRzRnSUNBZ2JHVjBJR2x1WkdWNElEMGdNRHRjYmlBZ0lDQjNhR2xzWlNBb2FXNWtaWGdnUENCMGIydGxibk11YkdWdVozUm9LU0I3WEc0Z0lDQWdJQ0JqYjI1emRDQjBiMnRsYmlBOUlIUnZhMlZ1YzF0cGJtUmxlRjA3WEc0Z0lDQWdJQ0F2S2lwY2JpQWdJQ0FnSUNBcUlGUm9aWEpsSUdGeVpTQjBkMjhnZEhsd1pYTWdiMllnZEc5clpXNXpJR2x1SUdFZ1ExTlRJSE5sYkdWamRHOXlPbHh1SUNBZ0lDQWdJQ3BjYmlBZ0lDQWdJQ0FxSURFdUlGTmxiR1ZqZEc5eUlIUnZhMlZ1Y3k0Z1ZHaGxjMlVnZEdGeVoyVjBJRzV2WkdWeklHUnBjbVZqZEd4NUxDQnNhV3RsWEc0Z0lDQWdJQ0FnS2lBZ0lDQjBlWEJsSUc5eUlHRjBkSEpwWW5WMFpTQnpaV3hsWTNSdmNuTXVJRlJvWlhObElHRnlaU0JsWVhONUlIUnZJR0Z3Y0d4NVhHNGdJQ0FnSUNBZ0tpQWdJQ0JpWldOaGRYTmxJSGRsSUdOaGJpQjBjbUYyWlhKelpTQjBhR1VnZEhKbFpTQmhibVFnY21WMGRYSnVJRzl1YkhsY2JpQWdJQ0FnSUNBcUlDQWdJSFJvWlNCdWIyUmxjeUIwYUdGMElHMWhkR05vSUhSb1pTQndjbVZrYVdOaGRHVXVYRzRnSUNBZ0lDQWdLbHh1SUNBZ0lDQWdJQ29nTWk0Z1EyOXRZbWx1WVhSdmNpQjBiMnRsYm5NdUlGUm9aWE5sSUhSdmEyVnVjeUJqYUdGcGJpQjBiMmRsZEdobGNseHVJQ0FnSUNBZ0lDb2dJQ0FnYzJWc1pXTjBiM0lnYm05a1pYTXVJRVp2Y2lCbGVHRnRjR3hsSUQ0Z1ptOXlJR05vYVd4a2NtVnVMQ0J2Y2lBclhHNGdJQ0FnSUNBZ0tpQWdJQ0JtYjNJZ1lXUnFZV05sYm5RZ2MybGliR2x1WjNNdUlGUm9aWE5sSUdGeVpTQm9ZWEprWlhJZ2RHOGdiV0YwWTJoY2JpQWdJQ0FnSUNBcUlDQWdJR0Z6SUhkbElHaGhkbVVnZEc4Z2RISmhZMnNnZDJobGNtVWdhVzRnZEdobElIUnlaV1VnZDJVZ1lYSmxYRzRnSUNBZ0lDQWdLaUFnSUNCMGJ5QmtaWFJsY20xcGJtVWdhV1lnWVNCelpXeGxZM1J2Y2lCdWIyUmxJR0Z3Y0d4cFpYTWdiM0lnYm05MExseHVJQ0FnSUNBZ0lDb3ZYRzRnSUNBZ0lDQnBaaUFvZEc5clpXNHVkSGx3WlNBOVBUMGdVMFZNUlVOVVQxSXBJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdjSEpsWkdsallYUmxJRDBnWW5WcGJHUlFjbVZrYVdOaGRHVkdjbTl0Vkc5clpXNG9kRzlyWlc0c0lISnZiM1FwTzF4dUlDQWdJQ0FnSUNCeVpYTjFiSFJ6SUQwZ2NtVnpkV3gwY3k1amIyNWpZWFFvZEhKbFpVWnBiSFJsY2loeWIyOTBMQ0J3Y21Wa2FXTmhkR1VwS1R0Y2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUM4dklGZGxJR05oYmlCaGMzTjFiV1VnZEdobGNtVWdZV3gzWVhseklHRnNiQ0J3Y21WMmFXOTFjMng1SUcxaGRHTm9aV1FnZEc5clpXNXpJSE5wYm1ObElITmxiR1ZqZEc5eWMxeHVJQ0FnSUNBZ0lDQXZMeUJqWVc1dWIzUWdjM1JoY25RZ2QybDBhQ0JqYjIxaWFXNWhkRzl5Y3k1Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnZXlCMGVYQmxJSDBnUFNCMGIydGxianRjYmlBZ0lDQWdJQ0FnTHk4Z1YyVWdZWE56ZFcxbElIUm9aU0J1WlhoMElIUnZhMlZ1SUdseklHRWdjMlZzWldOMGIzSXNJSE52SUcxdmRtVWdkR2hsSUdsdVpHVjRYRzRnSUNBZ0lDQWdJQzh2SUdadmNuZGhjbVFnWVc1a0lHSjFhV3hrSUhSb1pTQndjbVZrYVdOaGRHVXVYRzRnSUNBZ0lDQWdJR2x1WkdWNElDczlJREU3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSEJ5WldScFkyRjBaU0E5SUdKMWFXeGtVSEpsWkdsallYUmxSbkp2YlZSdmEyVnVLSFJ2YTJWdWMxdHBibVJsZUYwc0lISnZiM1FwTzF4dUlDQWdJQ0FnSUNBdkx5QlhaU0J0WVhSamFDQmhaMkZwYm5OMElHOXViSGtnZEdobElHNXZaR1Z6SUhkb2FXTm9JR2hoZG1VZ1lXeHlaV0ZrZVNCaVpXVnVJRzFoZEdOb1pXUXNYRzRnSUNBZ0lDQWdJQzh2SUhOcGJtTmxJR0VnWTI5dFltbHVZWFJ2Y2lCcGN5QnRaV0Z1ZENCMGJ5QnlaV1pwYm1VZ1lTQndjbVYyYVc5MWN5QnpaV3hsWTNSdmNpNWNiaUFnSUNBZ0lDQWdjM2RwZEdOb0lDaDBlWEJsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdMeThnVkdobElDc2dZMjl0WW1sdVlYUnZjbHh1SUNBZ0lDQWdJQ0FnSUdOaGMyVWdRVVJLUVVORlRsUmZVMGxDVEVsT1J6cGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGMzVnNkSE1nUFNCdFlYUmphRUZrYW1GalpXNTBVMmxpYkdsdVozTW9jbVZ6ZFd4MGN5d2djSEpsWkdsallYUmxMQ0J5YjI5MEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lDQWdJQ0FnSUM4dklGUm9aU0IrSUdOdmJXSnBibUYwYjNKY2JpQWdJQ0FnSUNBZ0lDQmpZWE5sSUVkRlRrVlNRVXhmVTBsQ1RFbE9SenBjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxjM1ZzZEhNZ1BTQnRZWFJqYUVkbGJtVnlZV3hUYVdKc2FXNW5LSEpsYzNWc2RITXNJSEJ5WldScFkyRjBaU3dnY205dmRDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQWdJQ0FnSUNBdkx5QlVhR1VnUGlCamIyMWlhVzVoZEc5eVhHNGdJQ0FnSUNBZ0lDQWdZMkZ6WlNCRFNFbE1SRHBjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxjM1ZzZEhNZ1BTQnRZWFJqYUVScGNtVmpkRU5vYVd4a0tISmxjM1ZzZEhNc0lIQnlaV1JwWTJGMFpTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQWdJQ0FnSUNBdkx5QlVhR1VnSnlBbklDaDNhR2wwWlhOd1lXTmxLU0JqYjIxaWFXNWhkRzl5WEc0Z0lDQWdJQ0FnSUNBZ1kyRnpaU0JFUlZORFJVNUVRVTVVT2lCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhOMWJIUnpJRDBnYldGMFkyaEVaWE5qWlc1a1lXNTBLSEpsYzNWc2RITXNJSEJ5WldScFkyRjBaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnWkdWbVlYVnNkRHBjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2loZ1ZXNXJibTkzYmlCamIyMWlhVzVoZEc5eUlITmxiR1ZqZEc5eU9pQWtlM1I1Y0dWOVlDazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJR2x1WkdWNElDczlJREU3WEc0Z0lDQWdmVnh1SUNCOUlHVnNjMlVnZTF4dUlDQWdJSFJvY205M0lHNWxkeUJVZVhCbFJYSnliM0lvSjBWdWVubHRaVG82VTJWc1pXTjBiM0lnWlhod1pXTjBjeUJoSUhOMGNtbHVaeXdnYjJKcVpXTjBMQ0J2Y2lCRGIyMXdiMjVsYm5RZ1EyOXVjM1J5ZFdOMGIzSW5LVHRjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdjbVZ6ZFd4MGN6dGNibjFjYmx4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUhKbFpIVmpaVlJ5WldWelFubFRaV3hsWTNSdmNpaHpaV3hsWTNSdmNpd2djbTl2ZEhNcElIdGNiaUFnWTI5dWMzUWdjbVZ6ZFd4MGN5QTlJSEp2YjNSekxtMWhjQ2dvYmlrZ1BUNGdjbVZrZFdObFZISmxaVUo1VTJWc1pXTjBiM0lvYzJWc1pXTjBiM0lzSUc0cEtUdGNiaUFnY21WMGRYSnVJSFZ1YVhGMVpTaG1iR0YwS0hKbGMzVnNkSE1zSURFcEtUdGNibjFjYmlKZGZRPT1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNlbGVjdG9ycy5qcy5tYXAiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzWydkZWZhdWx0J10gPSBzaGFsbG93O1xuXG52YXIgX1NoYWxsb3dXcmFwcGVyID0gcmVxdWlyZSgnLi9TaGFsbG93V3JhcHBlcicpO1xuXG52YXIgX1NoYWxsb3dXcmFwcGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1NoYWxsb3dXcmFwcGVyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG4vKipcbiAqIFNoYWxsb3cgcmVuZGVycyBhIHJlYWN0IGNvbXBvbmVudCBhbmQgcHJvdmlkZXMgYSB0ZXN0aW5nIHdyYXBwZXIgYXJvdW5kIGl0LlxuICpcbiAqIEBwYXJhbSBub2RlXG4gKiBAcmV0dXJucyB7U2hhbGxvd1dyYXBwZXJ9XG4gKi9cbmZ1bmN0aW9uIHNoYWxsb3cobm9kZSwgb3B0aW9ucykge1xuICByZXR1cm4gbmV3IF9TaGFsbG93V3JhcHBlcjJbJ2RlZmF1bHQnXShub2RlLCBudWxsLCBvcHRpb25zKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpNHVMM055WXk5emFHRnNiRzkzTG1weklsMHNJbTVoYldWeklqcGJJbk5vWVd4c2IzY2lMQ0p1YjJSbElpd2liM0IwYVc5dWN5SXNJbE5vWVd4c2IzZFhjbUZ3Y0dWeUlsMHNJbTFoY0hCcGJtZHpJam9pT3pzN096dHhRa0ZSZDBKQkxFODdPMEZCVW5oQ096czdPenM3UVVGRlFUczdPenM3TzBGQlRXVXNVMEZCVTBFc1QwRkJWQ3hEUVVGcFFrTXNTVUZCYWtJc1JVRkJkVUpETEU5QlFYWkNMRVZCUVdkRE8wRkJRemRETEZOQlFVOHNTVUZCU1VNc01rSkJRVW9zUTBGQmJVSkdMRWxCUVc1Q0xFVkJRWGxDTEVsQlFYcENMRVZCUVN0Q1F5eFBRVUV2UWl4RFFVRlFPMEZCUTBRaUxDSm1hV3hsSWpvaWMyaGhiR3h2ZHk1cWN5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJbWx0Y0c5eWRDQlRhR0ZzYkc5M1YzSmhjSEJsY2lCbWNtOXRJQ2N1TDFOb1lXeHNiM2RYY21Gd2NHVnlKenRjYmx4dUx5b3FYRzRnS2lCVGFHRnNiRzkzSUhKbGJtUmxjbk1nWVNCeVpXRmpkQ0JqYjIxd2IyNWxiblFnWVc1a0lIQnliM1pwWkdWeklHRWdkR1Z6ZEdsdVp5QjNjbUZ3Y0dWeUlHRnliM1Z1WkNCcGRDNWNiaUFxWEc0Z0tpQkFjR0Z5WVcwZ2JtOWtaVnh1SUNvZ1FISmxkSFZ5Ym5NZ2UxTm9ZV3hzYjNkWGNtRndjR1Z5ZlZ4dUlDb3ZYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQm1kVzVqZEdsdmJpQnphR0ZzYkc5M0tHNXZaR1VzSUc5d2RHbHZibk1wSUh0Y2JpQWdjbVYwZFhKdUlHNWxkeUJUYUdGc2JHOTNWM0poY0hCbGNpaHViMlJsTENCdWRXeHNMQ0J2Y0hScGIyNXpLVHRjYm4xY2JpSmRmUT09XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zaGFsbG93LmpzLm1hcCIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IHZhbGlkYXRlQWRhcHRlcjtcblxudmFyIF9Fbnp5bWVBZGFwdGVyID0gcmVxdWlyZSgnLi9Fbnp5bWVBZGFwdGVyJyk7XG5cbnZhciBfRW56eW1lQWRhcHRlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Fbnp5bWVBZGFwdGVyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG5mdW5jdGlvbiB2YWxpZGF0ZUFkYXB0ZXIoYWRhcHRlcikge1xuICBpZiAoIWFkYXB0ZXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1xcbiAgICAgIEVuenltZSBJbnRlcm5hbCBFcnJvcjogRW56eW1lIGV4cGVjdHMgYW4gYWRhcHRlciB0byBiZSBjb25maWd1cmVkLCBidXQgZm91bmQgbm9uZS5cXG4gICAgICBUbyBjb25maWd1cmUgYW4gYWRhcHRlciwgeW91IHNob3VsZCBjYWxsIGBFbnp5bWUuY29uZmlndXJlKHsgYWRhcHRlcjogbmV3IEFkYXB0ZXIoKSB9KWBcXG4gICAgICBiZWZvcmUgdXNpbmcgYW55IG9mIEVuenltZVxcJ3MgdG9wIGxldmVsIEFQSXMsIHdoZXJlIGBBZGFwdGVyYCBpcyB0aGUgYWRhcHRlclxcbiAgICAgIGNvcnJlc3BvbmRpbmcgdG8gdGhlIGxpYnJhcnkgY3VycmVudGx5IGJlaW5nIHRlc3RlZC4gRm9yIGV4YW1wbGU6XFxuXFxuICAgICAgaW1wb3J0IEFkYXB0ZXIgZnJvbSBcXCdlbnp5bWUtYWRhcHRlci1yZWFjdC0xNVxcJztcXG5cXG4gICAgICBUbyBmaW5kIG91dCBtb3JlIGFib3V0IHRoaXMsIHNlZSBodHRwczovL2FpcmJuYi5pby9lbnp5bWUvZG9jcy9pbnN0YWxsYXRpb24vaW5kZXguaHRtbFxcbiAgICAnKTtcbiAgfVxuICBpZiAodHlwZW9mIGFkYXB0ZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICBpZiAoT2JqZWN0LmdldFByb3RvdHlwZU9mKGFkYXB0ZXIpID09PSBfRW56eW1lQWRhcHRlcjJbJ2RlZmF1bHQnXSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdcXG4gICAgICAgIEVuenltZSBJbnRlcm5hbCBFcnJvcjogRW56eW1lIGV4cGVjdHMgYW4gYWRhcHRlciBpbnN0YW5jZSB0byBiZSBjb25maWd1cmVkIC1cXG4gICAgICAgIHlvdSBwcm92aWRlZCBhbiBhZGFwdGVyICpjb25zdHJ1Y3RvciouXFxuICAgICAgICBUbyBjb25maWd1cmUgYW4gYWRhcHRlciwgeW91IHNob3VsZCBjYWxsIGBFbnp5bWUuY29uZmlndXJlKHsgYWRhcHRlcjogbmV3IEFkYXB0ZXIoKSB9KWBcXG4gICAgICAgIGJlZm9yZSB1c2luZyBhbnkgb2YgRW56eW1lXFwncyB0b3AgbGV2ZWwgQVBJcywgd2hlcmUgYEFkYXB0ZXJgIGlzIHRoZSBhZGFwdGVyXFxuICAgICAgICBjb3JyZXNwb25kaW5nIHRvIHRoZSBsaWJyYXJ5IGN1cnJlbnRseSBiZWluZyB0ZXN0ZWQuIEZvciBleGFtcGxlOlxcblxcbiAgICAgICAgaW1wb3J0IEFkYXB0ZXIgZnJvbSBcXCdlbnp5bWUtYWRhcHRlci1yZWFjdC0xNVxcJztcXG5cXG4gICAgICAgIFRvIGZpbmQgb3V0IG1vcmUgYWJvdXQgdGhpcywgc2VlIGh0dHBzOi8vYWlyYm5iLmlvL2VuenltZS9kb2NzL2luc3RhbGxhdGlvbi9pbmRleC5odG1sXFxuICAgICAgJyk7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcignXFxuICAgICAgRW56eW1lIEludGVybmFsIEVycm9yOiBFbnp5bWUgZXhwZWN0cyBhbiBhZGFwdGVyIHRvIGJlIGNvbmZpZ3VyZWQgLVxcbiAgICAgIGFuIGVuenltZSBhZGFwdGVyIG11c3QgYmUgYW4gb2JqZWN0IGluc3RhbmNlOyB5b3UgcHJvdmlkZWQgYSBmdW5jdGlvbi5cXG4gICAgICBUbyBjb25maWd1cmUgYW4gYWRhcHRlciwgeW91IHNob3VsZCBjYWxsIGBFbnp5bWUuY29uZmlndXJlKHsgYWRhcHRlcjogbmV3IEFkYXB0ZXIoKSB9KWBcXG4gICAgICBiZWZvcmUgdXNpbmcgYW55IG9mIEVuenltZVxcJ3MgdG9wIGxldmVsIEFQSXMsIHdoZXJlIGBBZGFwdGVyYCBpcyB0aGUgYWRhcHRlclxcbiAgICAgIGNvcnJlc3BvbmRpbmcgdG8gdGhlIGxpYnJhcnkgY3VycmVudGx5IGJlaW5nIHRlc3RlZC4gRm9yIGV4YW1wbGU6XFxuXFxuICAgICAgaW1wb3J0IEFkYXB0ZXIgZnJvbSBcXCdlbnp5bWUtYWRhcHRlci1yZWFjdC0xNVxcJztcXG5cXG4gICAgICBUbyBmaW5kIG91dCBtb3JlIGFib3V0IHRoaXMsIHNlZSBodHRwczovL2FpcmJuYi5pby9lbnp5bWUvZG9jcy9pbnN0YWxsYXRpb24vaW5kZXguaHRtbFxcbiAgICAnKTtcbiAgfVxuICBpZiAoIShhZGFwdGVyIGluc3RhbmNlb2YgX0VuenltZUFkYXB0ZXIyWydkZWZhdWx0J10pKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdFbnp5bWUgSW50ZXJuYWwgRXJyb3I6IGNvbmZpZ3VyZWQgZW56eW1lIGFkYXB0ZXIgZGlkIG5vdCBpbmhlcml0IGZyb20gdGhlIEVuenltZUFkYXB0ZXIgYmFzZSBjbGFzcycpO1xuICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJaTR1TDNOeVl5OTJZV3hwWkdGMFpVRmtZWEIwWlhJdWFuTWlYU3dpYm1GdFpYTWlPbHNpZG1Gc2FXUmhkR1ZCWkdGd2RHVnlJaXdpWVdSaGNIUmxjaUlzSWtWeWNtOXlJaXdpVDJKcVpXTjBJaXdpWjJWMFVISnZkRzkwZVhCbFQyWWlMQ0pGYm5wNWJXVkJaR0Z3ZEdWeUlsMHNJbTFoY0hCcGJtZHpJam9pT3pzN096dHhRa0ZGZDBKQkxHVTdPMEZCUm5oQ096czdPenM3UVVGRlpTeFRRVUZUUVN4bFFVRlVMRU5CUVhsQ1F5eFBRVUY2UWl4RlFVRnJRenRCUVVNdlF5eE5RVUZKTEVOQlFVTkJMRTlCUVV3c1JVRkJZenRCUVVOYUxGVkJRVTBzU1VGQlNVTXNTMEZCU2l3d1prRkJUanRCUVZWRU8wRkJRMFFzVFVGQlNTeFBRVUZQUkN4UFFVRlFMRXRCUVcxQ0xGVkJRWFpDTEVWQlFXMURPMEZCUTJwRExGRkJRVWxGTEU5QlFVOURMR05CUVZBc1EwRkJjMEpJTEU5QlFYUkNMRTFCUVcxRFNTd3dRa0ZCZGtNc1JVRkJjMFE3UVVGRGNFUXNXVUZCVFN4SlFVRkpTQ3hMUVVGS0xHdHFRa0ZCVGp0QlFWZEVPMEZCUTBRc1ZVRkJUU3hKUVVGSlFTeExRVUZLTEhscVFrRkJUanRCUVZkRU8wRkJRMFFzVFVGQlNTeEZRVUZGUkN4dFFrRkJiVUpKTERCQ1FVRnlRaXhEUVVGS0xFVkJRWGxETzBGQlEzWkRMRlZCUVUwc1NVRkJTVWdzUzBGQlNpeERRVUZWTEc5SFFVRldMRU5CUVU0N1FVRkRSRHRCUVVOR0lpd2labWxzWlNJNkluWmhiR2xrWVhSbFFXUmhjSFJsY2k1cWN5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJbWx0Y0c5eWRDQkZibnA1YldWQlpHRndkR1Z5SUdaeWIyMGdKeTR2Ulc1NmVXMWxRV1JoY0hSbGNpYzdYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJR1oxYm1OMGFXOXVJSFpoYkdsa1lYUmxRV1JoY0hSbGNpaGhaR0Z3ZEdWeUtTQjdYRzRnSUdsbUlDZ2hZV1JoY0hSbGNpa2dlMXh1SUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2loZ1hHNGdJQ0FnSUNCRmJucDViV1VnU1c1MFpYSnVZV3dnUlhKeWIzSTZJRVZ1ZW5sdFpTQmxlSEJsWTNSeklHRnVJR0ZrWVhCMFpYSWdkRzhnWW1VZ1kyOXVabWxuZFhKbFpDd2dZblYwSUdadmRXNWtJRzV2Ym1VdVhHNGdJQ0FnSUNCVWJ5QmpiMjVtYVdkMWNtVWdZVzRnWVdSaGNIUmxjaXdnZVc5MUlITm9iM1ZzWkNCallXeHNJRnhjWUVWdWVubHRaUzVqYjI1bWFXZDFjbVVvZXlCaFpHRndkR1Z5T2lCdVpYY2dRV1JoY0hSbGNpZ3BJSDBwWEZ4Z1hHNGdJQ0FnSUNCaVpXWnZjbVVnZFhOcGJtY2dZVzU1SUc5bUlFVnVlbmx0WlNkeklIUnZjQ0JzWlhabGJDQkJVRWx6TENCM2FHVnlaU0JjWEdCQlpHRndkR1Z5WEZ4Z0lHbHpJSFJvWlNCaFpHRndkR1Z5WEc0Z0lDQWdJQ0JqYjNKeVpYTndiMjVrYVc1bklIUnZJSFJvWlNCc2FXSnlZWEo1SUdOMWNuSmxiblJzZVNCaVpXbHVaeUIwWlhOMFpXUXVJRVp2Y2lCbGVHRnRjR3hsT2x4dVhHNGdJQ0FnSUNCcGJYQnZjblFnUVdSaGNIUmxjaUJtY205dElDZGxibnA1YldVdFlXUmhjSFJsY2kxeVpXRmpkQzB4TlNjN1hHNWNiaUFnSUNBZ0lGUnZJR1pwYm1RZ2IzVjBJRzF2Y21VZ1lXSnZkWFFnZEdocGN5d2djMlZsSUdoMGRIQnpPaTh2WVdseVltNWlMbWx2TDJWdWVubHRaUzlrYjJOekwybHVjM1JoYkd4aGRHbHZiaTlwYm1SbGVDNW9kRzFzWEc0Z0lDQWdZQ2s3WEc0Z0lIMWNiaUFnYVdZZ0tIUjVjR1Z2WmlCaFpHRndkR1Z5SUQwOVBTQW5ablZ1WTNScGIyNG5LU0I3WEc0Z0lDQWdhV1lnS0U5aWFtVmpkQzVuWlhSUWNtOTBiM1I1Y0dWUFppaGhaR0Z3ZEdWeUtTQTlQVDBnUlc1NmVXMWxRV1JoY0hSbGNpa2dlMXh1SUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtHQmNiaUFnSUNBZ0lDQWdSVzU2ZVcxbElFbHVkR1Z5Ym1Gc0lFVnljbTl5T2lCRmJucDViV1VnWlhod1pXTjBjeUJoYmlCaFpHRndkR1Z5SUdsdWMzUmhibU5sSUhSdklHSmxJR052Ym1acFozVnlaV1FnTFZ4dUlDQWdJQ0FnSUNCNWIzVWdjSEp2ZG1sa1pXUWdZVzRnWVdSaGNIUmxjaUFxWTI5dWMzUnlkV04wYjNJcUxseHVJQ0FnSUNBZ0lDQlVieUJqYjI1bWFXZDFjbVVnWVc0Z1lXUmhjSFJsY2l3Z2VXOTFJSE5vYjNWc1pDQmpZV3hzSUZ4Y1lFVnVlbmx0WlM1amIyNW1hV2QxY21Vb2V5QmhaR0Z3ZEdWeU9pQnVaWGNnUVdSaGNIUmxjaWdwSUgwcFhGeGdYRzRnSUNBZ0lDQWdJR0psWm05eVpTQjFjMmx1WnlCaGJua2diMllnUlc1NmVXMWxKM01nZEc5d0lHeGxkbVZzSUVGUVNYTXNJSGRvWlhKbElGeGNZRUZrWVhCMFpYSmNYR0FnYVhNZ2RHaGxJR0ZrWVhCMFpYSmNiaUFnSUNBZ0lDQWdZMjl5Y21WemNHOXVaR2x1WnlCMGJ5QjBhR1VnYkdsaWNtRnllU0JqZFhKeVpXNTBiSGtnWW1WcGJtY2dkR1Z6ZEdWa0xpQkdiM0lnWlhoaGJYQnNaVHBjYmx4dUlDQWdJQ0FnSUNCcGJYQnZjblFnUVdSaGNIUmxjaUJtY205dElDZGxibnA1YldVdFlXUmhjSFJsY2kxeVpXRmpkQzB4TlNjN1hHNWNiaUFnSUNBZ0lDQWdWRzhnWm1sdVpDQnZkWFFnYlc5eVpTQmhZbTkxZENCMGFHbHpMQ0J6WldVZ2FIUjBjSE02THk5aGFYSmlibUl1YVc4dlpXNTZlVzFsTDJSdlkzTXZhVzV6ZEdGc2JHRjBhVzl1TDJsdVpHVjRMbWgwYld4Y2JpQWdJQ0FnSUdBcE8xeHVJQ0FnSUgxY2JpQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9ZRnh1SUNBZ0lDQWdSVzU2ZVcxbElFbHVkR1Z5Ym1Gc0lFVnljbTl5T2lCRmJucDViV1VnWlhod1pXTjBjeUJoYmlCaFpHRndkR1Z5SUhSdklHSmxJR052Ym1acFozVnlaV1FnTFZ4dUlDQWdJQ0FnWVc0Z1pXNTZlVzFsSUdGa1lYQjBaWElnYlhWemRDQmlaU0JoYmlCdlltcGxZM1FnYVc1emRHRnVZMlU3SUhsdmRTQndjbTkyYVdSbFpDQmhJR1oxYm1OMGFXOXVMbHh1SUNBZ0lDQWdWRzhnWTI5dVptbG5kWEpsSUdGdUlHRmtZWEIwWlhJc0lIbHZkU0J6YUc5MWJHUWdZMkZzYkNCY1hHQkZibnA1YldVdVkyOXVabWxuZFhKbEtIc2dZV1JoY0hSbGNqb2dibVYzSUVGa1lYQjBaWElvS1NCOUtWeGNZRnh1SUNBZ0lDQWdZbVZtYjNKbElIVnphVzVuSUdGdWVTQnZaaUJGYm5wNWJXVW5jeUIwYjNBZ2JHVjJaV3dnUVZCSmN5d2dkMmhsY21VZ1hGeGdRV1JoY0hSbGNseGNZQ0JwY3lCMGFHVWdZV1JoY0hSbGNseHVJQ0FnSUNBZ1kyOXljbVZ6Y0c5dVpHbHVaeUIwYnlCMGFHVWdiR2xpY21GeWVTQmpkWEp5Wlc1MGJIa2dZbVZwYm1jZ2RHVnpkR1ZrTGlCR2IzSWdaWGhoYlhCc1pUcGNibHh1SUNBZ0lDQWdhVzF3YjNKMElFRmtZWEIwWlhJZ1puSnZiU0FuWlc1NmVXMWxMV0ZrWVhCMFpYSXRjbVZoWTNRdE1UVW5PMXh1WEc0Z0lDQWdJQ0JVYnlCbWFXNWtJRzkxZENCdGIzSmxJR0ZpYjNWMElIUm9hWE1zSUhObFpTQm9kSFJ3Y3pvdkwyRnBjbUp1WWk1cGJ5OWxibnA1YldVdlpHOWpjeTlwYm5OMFlXeHNZWFJwYjI0dmFXNWtaWGd1YUhSdGJGeHVJQ0FnSUdBcE8xeHVJQ0I5WEc0Z0lHbG1JQ2doS0dGa1lYQjBaWElnYVc1emRHRnVZMlZ2WmlCRmJucDViV1ZCWkdGd2RHVnlLU2tnZTF4dUlDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpZ25SVzU2ZVcxbElFbHVkR1Z5Ym1Gc0lFVnljbTl5T2lCamIyNW1hV2QxY21Wa0lHVnVlbmx0WlNCaFpHRndkR1Z5SUdScFpDQnViM1FnYVc1b1pYSnBkQ0JtY205dElIUm9aU0JGYm5wNWJXVkJaR0Z3ZEdWeUlHSmhjMlVnWTJ4aGMzTW5LVHRjYmlBZ2ZWeHVmVnh1SWwxOVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmFsaWRhdGVBZGFwdGVyLmpzLm1hcCIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcHJvcGVybHlCb3hlZChtZXRob2QpIHtcblx0Ly8gQ2hlY2sgbm9kZSAwLjYuMjEgYnVnIHdoZXJlIHRoaXJkIHBhcmFtZXRlciBpcyBub3QgYm94ZWRcblx0dmFyIHByb3Blcmx5Qm94ZXNOb25TdHJpY3QgPSB0cnVlO1xuXHR2YXIgcHJvcGVybHlCb3hlc1N0cmljdCA9IHRydWU7XG5cdHZhciB0aHJld0V4Y2VwdGlvbiA9IGZhbHNlO1xuXHRpZiAodHlwZW9mIG1ldGhvZCA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdHRyeSB7XG5cdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LXBhcmFtc1xuXHRcdFx0bWV0aG9kLmNhbGwoJ2YnLCBmdW5jdGlvbiAoXywgX18sIE8pIHtcblx0XHRcdFx0aWYgKHR5cGVvZiBPICE9PSAnb2JqZWN0Jykge1xuXHRcdFx0XHRcdHByb3Blcmx5Qm94ZXNOb25TdHJpY3QgPSBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdG1ldGhvZC5jYWxsKFxuXHRcdFx0XHRbbnVsbF0sXG5cdFx0XHRcdGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHQndXNlIHN0cmljdCc7XG5cblx0XHRcdFx0XHRwcm9wZXJseUJveGVzU3RyaWN0ID0gdHlwZW9mIHRoaXMgPT09ICdzdHJpbmcnOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWludmFsaWQtdGhpc1xuXHRcdFx0XHR9LFxuXHRcdFx0XHQneCdcblx0XHRcdCk7XG5cdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0dGhyZXdFeGNlcHRpb24gPSB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gIXRocmV3RXhjZXB0aW9uICYmIHByb3Blcmx5Qm94ZXNOb25TdHJpY3QgJiYgcHJvcGVybHlCb3hlc1N0cmljdDtcblx0fVxuXHRyZXR1cm4gZmFsc2U7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnZ2V0LWludHJpbnNpYycpO1xuXG4vKiogQHR5cGUge2ltcG9ydCgnLicpfSAqL1xudmFyICRkZWZpbmVQcm9wZXJ0eSA9IEdldEludHJpbnNpYygnJU9iamVjdC5kZWZpbmVQcm9wZXJ0eSUnLCB0cnVlKSB8fCBmYWxzZTtcbmlmICgkZGVmaW5lUHJvcGVydHkpIHtcblx0dHJ5IHtcblx0XHQkZGVmaW5lUHJvcGVydHkoe30sICdhJywgeyB2YWx1ZTogMSB9KTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdC8vIElFIDggaGFzIGEgYnJva2VuIGRlZmluZVByb3BlcnR5XG5cdFx0JGRlZmluZVByb3BlcnR5ID0gZmFsc2U7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSAkZGVmaW5lUHJvcGVydHk7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKiBAdHlwZSB7aW1wb3J0KCcuL2V2YWwnKX0gKi9cbm1vZHVsZS5leHBvcnRzID0gRXZhbEVycm9yO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKiogQHR5cGUge2ltcG9ydCgnLicpfSAqL1xubW9kdWxlLmV4cG9ydHMgPSBFcnJvcjtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqIEB0eXBlIHtpbXBvcnQoJy4vcmFuZ2UnKX0gKi9cbm1vZHVsZS5leHBvcnRzID0gUmFuZ2VFcnJvcjtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqIEB0eXBlIHtpbXBvcnQoJy4vcmVmJyl9ICovXG5tb2R1bGUuZXhwb3J0cyA9IFJlZmVyZW5jZUVycm9yO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKiogQHR5cGUge2ltcG9ydCgnLi9zeW50YXgnKX0gKi9cbm1vZHVsZS5leHBvcnRzID0gU3ludGF4RXJyb3I7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKiBAdHlwZSB7aW1wb3J0KCcuL3R5cGUnKX0gKi9cbm1vZHVsZS5leHBvcnRzID0gVHlwZUVycm9yO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKiogQHR5cGUge2ltcG9ydCgnLi91cmknKX0gKi9cbm1vZHVsZS5leHBvcnRzID0gVVJJRXJyb3I7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciAkVHlwZUVycm9yID0gcmVxdWlyZSgnZXMtZXJyb3JzL3R5cGUnKTtcblxuLyoqIEB0eXBlIHtpbXBvcnQoJy4vUmVxdWlyZU9iamVjdENvZXJjaWJsZScpfSAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHZhbHVlKSB7XG5cdGlmICh2YWx1ZSA9PSBudWxsKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoKGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1sxXSkgfHwgKCdDYW5ub3QgY2FsbCBtZXRob2Qgb24gJyArIHZhbHVlKSk7XG5cdH1cblx0cmV0dXJuIHZhbHVlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyICRPYmplY3QgPSByZXF1aXJlKCcuLycpO1xudmFyIFJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuL1JlcXVpcmVPYmplY3RDb2VyY2libGUnKTtcblxuLyoqIEB0eXBlIHtpbXBvcnQoJy4vVG9PYmplY3QnKX0gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gVG9PYmplY3QodmFsdWUpIHtcblx0UmVxdWlyZU9iamVjdENvZXJjaWJsZSh2YWx1ZSk7XG5cdHJldHVybiAkT2JqZWN0KHZhbHVlKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKiBAdHlwZSB7aW1wb3J0KCcuJyl9ICovXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdDtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGhhc093biA9IHJlcXVpcmUoJ2hhc293bicpO1xuXG52YXIgaGFzVW5zY29wYWJsZXMgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBTeW1ib2wudW5zY29wYWJsZXMgPT09ICdzeW1ib2wnO1xuXG52YXIgbWFwID0gaGFzVW5zY29wYWJsZXMgJiYgQXJyYXkucHJvdG90eXBlW1N5bWJvbC51bnNjb3BhYmxlc107XG5cbnZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNoaW1VbnNjb3BhYmxlcyhtZXRob2QpIHtcblx0aWYgKHR5cGVvZiBtZXRob2QgIT09ICdzdHJpbmcnIHx8ICFtZXRob2QpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignbWV0aG9kIG11c3QgYmUgYSBub24tZW1wdHkgc3RyaW5nJyk7XG5cdH1cblx0aWYgKCFoYXNPd24oQXJyYXkucHJvdG90eXBlLCBtZXRob2QpKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ21ldGhvZCBtdXN0IGJlIG9uIEFycmF5LnByb3RvdHlwZScpO1xuXHR9XG5cdGlmIChoYXNVbnNjb3BhYmxlcykge1xuXHRcdG1hcFttZXRob2RdID0gdHJ1ZTtcblx0fVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGhhc1N5bWJvbHMgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICdzeW1ib2wnO1xuXG52YXIgaXNQcmltaXRpdmUgPSByZXF1aXJlKCcuL2hlbHBlcnMvaXNQcmltaXRpdmUnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnaXMtY2FsbGFibGUnKTtcbnZhciBpc0RhdGUgPSByZXF1aXJlKCdpcy1kYXRlLW9iamVjdCcpO1xudmFyIGlzU3ltYm9sID0gcmVxdWlyZSgnaXMtc3ltYm9sJyk7XG5cbnZhciBvcmRpbmFyeVRvUHJpbWl0aXZlID0gZnVuY3Rpb24gT3JkaW5hcnlUb1ByaW1pdGl2ZShPLCBoaW50KSB7XG5cdGlmICh0eXBlb2YgTyA9PT0gJ3VuZGVmaW5lZCcgfHwgTyA9PT0gbnVsbCkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjYWxsIG1ldGhvZCBvbiAnICsgTyk7XG5cdH1cblx0aWYgKHR5cGVvZiBoaW50ICE9PSAnc3RyaW5nJyB8fCAoaGludCAhPT0gJ251bWJlcicgJiYgaGludCAhPT0gJ3N0cmluZycpKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignaGludCBtdXN0IGJlIFwic3RyaW5nXCIgb3IgXCJudW1iZXJcIicpO1xuXHR9XG5cdHZhciBtZXRob2ROYW1lcyA9IGhpbnQgPT09ICdzdHJpbmcnID8gWyd0b1N0cmluZycsICd2YWx1ZU9mJ10gOiBbJ3ZhbHVlT2YnLCAndG9TdHJpbmcnXTtcblx0dmFyIG1ldGhvZCwgcmVzdWx0LCBpO1xuXHRmb3IgKGkgPSAwOyBpIDwgbWV0aG9kTmFtZXMubGVuZ3RoOyArK2kpIHtcblx0XHRtZXRob2QgPSBPW21ldGhvZE5hbWVzW2ldXTtcblx0XHRpZiAoaXNDYWxsYWJsZShtZXRob2QpKSB7XG5cdFx0XHRyZXN1bHQgPSBtZXRob2QuY2FsbChPKTtcblx0XHRcdGlmIChpc1ByaW1pdGl2ZShyZXN1bHQpKSB7XG5cdFx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdHRocm93IG5ldyBUeXBlRXJyb3IoJ05vIGRlZmF1bHQgdmFsdWUnKTtcbn07XG5cbnZhciBHZXRNZXRob2QgPSBmdW5jdGlvbiBHZXRNZXRob2QoTywgUCkge1xuXHR2YXIgZnVuYyA9IE9bUF07XG5cdGlmIChmdW5jICE9PSBudWxsICYmIHR5cGVvZiBmdW5jICE9PSAndW5kZWZpbmVkJykge1xuXHRcdGlmICghaXNDYWxsYWJsZShmdW5jKSkge1xuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcihmdW5jICsgJyByZXR1cm5lZCBmb3IgcHJvcGVydHkgJyArIFAgKyAnIG9mIG9iamVjdCAnICsgTyArICcgaXMgbm90IGEgZnVuY3Rpb24nKTtcblx0XHR9XG5cdFx0cmV0dXJuIGZ1bmM7XG5cdH1cblx0cmV0dXJuIHZvaWQgMDtcbn07XG5cbi8vIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy10b3ByaW1pdGl2ZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBUb1ByaW1pdGl2ZShpbnB1dCkge1xuXHRpZiAoaXNQcmltaXRpdmUoaW5wdXQpKSB7XG5cdFx0cmV0dXJuIGlucHV0O1xuXHR9XG5cdHZhciBoaW50ID0gJ2RlZmF1bHQnO1xuXHRpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcblx0XHRpZiAoYXJndW1lbnRzWzFdID09PSBTdHJpbmcpIHtcblx0XHRcdGhpbnQgPSAnc3RyaW5nJztcblx0XHR9IGVsc2UgaWYgKGFyZ3VtZW50c1sxXSA9PT0gTnVtYmVyKSB7XG5cdFx0XHRoaW50ID0gJ251bWJlcic7XG5cdFx0fVxuXHR9XG5cblx0dmFyIGV4b3RpY1RvUHJpbTtcblx0aWYgKGhhc1N5bWJvbHMpIHtcblx0XHRpZiAoU3ltYm9sLnRvUHJpbWl0aXZlKSB7XG5cdFx0XHRleG90aWNUb1ByaW0gPSBHZXRNZXRob2QoaW5wdXQsIFN5bWJvbC50b1ByaW1pdGl2ZSk7XG5cdFx0fSBlbHNlIGlmIChpc1N5bWJvbChpbnB1dCkpIHtcblx0XHRcdGV4b3RpY1RvUHJpbSA9IFN5bWJvbC5wcm90b3R5cGUudmFsdWVPZjtcblx0XHR9XG5cdH1cblx0aWYgKHR5cGVvZiBleG90aWNUb1ByaW0gIT09ICd1bmRlZmluZWQnKSB7XG5cdFx0dmFyIHJlc3VsdCA9IGV4b3RpY1RvUHJpbS5jYWxsKGlucHV0LCBoaW50KTtcblx0XHRpZiAoaXNQcmltaXRpdmUocmVzdWx0KSkge1xuXHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHR9XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcigndW5hYmxlIHRvIGNvbnZlcnQgZXhvdGljIG9iamVjdCB0byBwcmltaXRpdmUnKTtcblx0fVxuXHRpZiAoaGludCA9PT0gJ2RlZmF1bHQnICYmIChpc0RhdGUoaW5wdXQpIHx8IGlzU3ltYm9sKGlucHV0KSkpIHtcblx0XHRoaW50ID0gJ3N0cmluZyc7XG5cdH1cblx0cmV0dXJuIG9yZGluYXJ5VG9QcmltaXRpdmUoaW5wdXQsIGhpbnQgPT09ICdkZWZhdWx0JyA/ICdudW1iZXInIDogaGludCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzUHJpbWl0aXZlKHZhbHVlKSB7XG5cdHJldHVybiB2YWx1ZSA9PT0gbnVsbCB8fCAodHlwZW9mIHZhbHVlICE9PSAnZnVuY3Rpb24nICYmIHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyogZXNsaW50IG5vLWludmFsaWQtdGhpczogMSAqL1xuXG52YXIgRVJST1JfTUVTU0FHRSA9ICdGdW5jdGlvbi5wcm90b3R5cGUuYmluZCBjYWxsZWQgb24gaW5jb21wYXRpYmxlICc7XG52YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIGZ1bmNUeXBlID0gJ1tvYmplY3QgRnVuY3Rpb25dJztcblxudmFyIGNvbmNhdHR5ID0gZnVuY3Rpb24gY29uY2F0dHkoYSwgYikge1xuICAgIHZhciBhcnIgPSBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBhcnJbaV0gPSBhW2ldO1xuICAgIH1cbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IGIubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgYXJyW2ogKyBhLmxlbmd0aF0gPSBiW2pdO1xuICAgIH1cblxuICAgIHJldHVybiBhcnI7XG59O1xuXG52YXIgc2xpY3kgPSBmdW5jdGlvbiBzbGljeShhcnJMaWtlLCBvZmZzZXQpIHtcbiAgICB2YXIgYXJyID0gW107XG4gICAgZm9yICh2YXIgaSA9IG9mZnNldCB8fCAwLCBqID0gMDsgaSA8IGFyckxpa2UubGVuZ3RoOyBpICs9IDEsIGogKz0gMSkge1xuICAgICAgICBhcnJbal0gPSBhcnJMaWtlW2ldO1xuICAgIH1cbiAgICByZXR1cm4gYXJyO1xufTtcblxudmFyIGpvaW55ID0gZnVuY3Rpb24gKGFyciwgam9pbmVyKSB7XG4gICAgdmFyIHN0ciA9ICcnO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHN0ciArPSBhcnJbaV07XG4gICAgICAgIGlmIChpICsgMSA8IGFyci5sZW5ndGgpIHtcbiAgICAgICAgICAgIHN0ciArPSBqb2luZXI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHN0cjtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYmluZCh0aGF0KSB7XG4gICAgdmFyIHRhcmdldCA9IHRoaXM7XG4gICAgaWYgKHR5cGVvZiB0YXJnZXQgIT09ICdmdW5jdGlvbicgfHwgdG9TdHIuYXBwbHkodGFyZ2V0KSAhPT0gZnVuY1R5cGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihFUlJPUl9NRVNTQUdFICsgdGFyZ2V0KTtcbiAgICB9XG4gICAgdmFyIGFyZ3MgPSBzbGljeShhcmd1bWVudHMsIDEpO1xuXG4gICAgdmFyIGJvdW5kO1xuICAgIHZhciBiaW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzIGluc3RhbmNlb2YgYm91bmQpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSB0YXJnZXQuYXBwbHkoXG4gICAgICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgICAgICBjb25jYXR0eShhcmdzLCBhcmd1bWVudHMpXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgaWYgKE9iamVjdChyZXN1bHQpID09PSByZXN1bHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRhcmdldC5hcHBseShcbiAgICAgICAgICAgIHRoYXQsXG4gICAgICAgICAgICBjb25jYXR0eShhcmdzLCBhcmd1bWVudHMpXG4gICAgICAgICk7XG5cbiAgICB9O1xuXG4gICAgdmFyIGJvdW5kTGVuZ3RoID0gbWF4KDAsIHRhcmdldC5sZW5ndGggLSBhcmdzLmxlbmd0aCk7XG4gICAgdmFyIGJvdW5kQXJncyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYm91bmRMZW5ndGg7IGkrKykge1xuICAgICAgICBib3VuZEFyZ3NbaV0gPSAnJCcgKyBpO1xuICAgIH1cblxuICAgIGJvdW5kID0gRnVuY3Rpb24oJ2JpbmRlcicsICdyZXR1cm4gZnVuY3Rpb24gKCcgKyBqb2lueShib3VuZEFyZ3MsICcsJykgKyAnKXsgcmV0dXJuIGJpbmRlci5hcHBseSh0aGlzLGFyZ3VtZW50cyk7IH0nKShiaW5kZXIpO1xuXG4gICAgaWYgKHRhcmdldC5wcm90b3R5cGUpIHtcbiAgICAgICAgdmFyIEVtcHR5ID0gZnVuY3Rpb24gRW1wdHkoKSB7fTtcbiAgICAgICAgRW1wdHkucHJvdG90eXBlID0gdGFyZ2V0LnByb3RvdHlwZTtcbiAgICAgICAgYm91bmQucHJvdG90eXBlID0gbmV3IEVtcHR5KCk7XG4gICAgICAgIEVtcHR5LnByb3RvdHlwZSA9IG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIGJvdW5kO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGltcGxlbWVudGF0aW9uID0gcmVxdWlyZSgnLi9pbXBsZW1lbnRhdGlvbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kIHx8IGltcGxlbWVudGF0aW9uO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgSXNDYWxsYWJsZSA9IHJlcXVpcmUoJ2VzLWFic3RyYWN0LzIwMjMvSXNDYWxsYWJsZScpO1xudmFyIEhhc093blByb3BlcnR5ID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAyMy9IYXNPd25Qcm9wZXJ0eScpO1xudmFyIGZ1bmN0aW9uc0hhdmVOYW1lcyA9IHJlcXVpcmUoJ2Z1bmN0aW9ucy1oYXZlLW5hbWVzJykoKTtcbnZhciBjYWxsQm91bmQgPSByZXF1aXJlKCdjYWxsLWJpbmQvY2FsbEJvdW5kJyk7XG52YXIgJGZ1bmN0aW9uVG9TdHJpbmcgPSBjYWxsQm91bmQoJ0Z1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZycpO1xudmFyICRzdHJpbmdNYXRjaCA9IGNhbGxCb3VuZCgnU3RyaW5nLnByb3RvdHlwZS5tYXRjaCcpO1xudmFyIHRvU3RyID0gY2FsbEJvdW5kKCdPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nJyk7XG5cbnZhciBjbGFzc1JlZ2V4ID0gL15jbGFzcyAvO1xuXG52YXIgaXNDbGFzcyA9IGZ1bmN0aW9uIGlzQ2xhc3NDb25zdHJ1Y3Rvcihmbikge1xuXHRpZiAoSXNDYWxsYWJsZShmbikpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0aWYgKHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJykge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXHR0cnkge1xuXHRcdHZhciBtYXRjaCA9ICRzdHJpbmdNYXRjaCgkZnVuY3Rpb25Ub1N0cmluZyhmbiksIGNsYXNzUmVnZXgpO1xuXHRcdHJldHVybiAhIW1hdGNoO1xuXHR9IGNhdGNoIChlKSB7fVxuXHRyZXR1cm4gZmFsc2U7XG59O1xuXG52YXIgcmVnZXggPSAvXFxzKmZ1bmN0aW9uXFxzKyhbXihcXHNdKilcXHMqLztcblxudmFyIGlzSUU2OCA9ICEoMCBpbiBbLF0pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNwYXJzZS1hcnJheXMsIGNvbW1hLXNwYWNpbmdcblxudmFyIG9iamVjdENsYXNzID0gJ1tvYmplY3QgT2JqZWN0XSc7XG52YXIgZGRhQ2xhc3MgPSAnW29iamVjdCBIVE1MQWxsQ29sbGVjdGlvbl0nO1xuXG52YXIgZnVuY3Rpb25Qcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcblxudmFyIGlzRERBID0gZnVuY3Rpb24gaXNEb2N1bWVudERvdEFsbCgpIHtcblx0cmV0dXJuIGZhbHNlO1xufTtcbmlmICh0eXBlb2YgZG9jdW1lbnQgPT09ICdvYmplY3QnKSB7XG5cdC8vIEZpcmVmb3ggMyBjYW5vbmljYWxpemVzIEREQSB0byB1bmRlZmluZWQgd2hlbiBpdCdzIG5vdCBhY2Nlc3NlZCBkaXJlY3RseVxuXHR2YXIgYWxsID0gZG9jdW1lbnQuYWxsO1xuXHRpZiAodG9TdHIoYWxsKSA9PT0gdG9TdHIoZG9jdW1lbnQuYWxsKSkge1xuXHRcdGlzRERBID0gZnVuY3Rpb24gaXNEb2N1bWVudERvdEFsbCh2YWx1ZSkge1xuXHRcdFx0LyogZ2xvYmFscyBkb2N1bWVudDogZmFsc2UgKi9cblx0XHRcdC8vIGluIElFIDYtOCwgdHlwZW9mIGRvY3VtZW50LmFsbCBpcyBcIm9iamVjdFwiIGFuZCBpdCdzIHRydXRoeVxuXHRcdFx0aWYgKChpc0lFNjggfHwgIXZhbHVlKSAmJiAodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJyB8fCB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSkge1xuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdHZhciBzdHIgPSB0b1N0cih2YWx1ZSk7XG5cdFx0XHRcdFx0Ly8gSUUgNi04IHVzZXMgYG9iamVjdENsYXNzYFxuXHRcdFx0XHRcdHJldHVybiAoc3RyID09PSBkZGFDbGFzcyB8fCBzdHIgPT09IG9iamVjdENsYXNzKSAmJiB2YWx1ZSgnJykgPT0gbnVsbDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBlcWVxZXFcblx0XHRcdFx0fSBjYXRjaCAoZSkgeyAvKiovIH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9O1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2V0TmFtZSgpIHtcblx0aWYgKGlzRERBKHRoaXMpIHx8ICghaXNDbGFzcyh0aGlzKSAmJiAhSXNDYWxsYWJsZSh0aGlzKSkpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdGdW5jdGlvbi5wcm90b3R5cGUubmFtZSBzaGFtIGdldHRlciBjYWxsZWQgb24gbm9uLWZ1bmN0aW9uJyk7XG5cdH1cblx0aWYgKGZ1bmN0aW9uc0hhdmVOYW1lcyAmJiBIYXNPd25Qcm9wZXJ0eSh0aGlzLCAnbmFtZScpKSB7XG5cdFx0cmV0dXJuIHRoaXMubmFtZTtcblx0fVxuXHRpZiAodGhpcyA9PT0gZnVuY3Rpb25Qcm90bykge1xuXHRcdHJldHVybiAnJztcblx0fVxuXHR2YXIgc3RyID0gJGZ1bmN0aW9uVG9TdHJpbmcodGhpcyk7XG5cdHZhciBtYXRjaCA9ICRzdHJpbmdNYXRjaChzdHIsIHJlZ2V4KTtcblx0dmFyIG5hbWUgPSBtYXRjaCAmJiBtYXRjaFsxXTtcblx0cmV0dXJuIG5hbWU7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZGVmaW5lID0gcmVxdWlyZSgnZGVmaW5lLXByb3BlcnRpZXMnKTtcbnZhciBjYWxsQmluZCA9IHJlcXVpcmUoJ2NhbGwtYmluZCcpO1xuXG52YXIgaW1wbGVtZW50YXRpb24gPSByZXF1aXJlKCcuL2ltcGxlbWVudGF0aW9uJyk7XG52YXIgZ2V0UG9seWZpbGwgPSByZXF1aXJlKCcuL3BvbHlmaWxsJyk7XG52YXIgc2hpbSA9IHJlcXVpcmUoJy4vc2hpbScpO1xuXG52YXIgYm91bmQgPSBjYWxsQmluZChpbXBsZW1lbnRhdGlvbik7XG5cbmRlZmluZShib3VuZCwge1xuXHRnZXRQb2x5ZmlsbDogZ2V0UG9seWZpbGwsXG5cdGltcGxlbWVudGF0aW9uOiBpbXBsZW1lbnRhdGlvbixcblx0c2hpbTogc2hpbVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gYm91bmQ7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpbXBsZW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vaW1wbGVtZW50YXRpb24nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZXRQb2x5ZmlsbCgpIHtcblx0cmV0dXJuIGltcGxlbWVudGF0aW9uO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHN1cHBvcnRzRGVzY3JpcHRvcnMgPSByZXF1aXJlKCdkZWZpbmUtcHJvcGVydGllcycpLnN1cHBvcnRzRGVzY3JpcHRvcnM7XG52YXIgZnVuY3Rpb25zSGF2ZU5hbWVzID0gcmVxdWlyZSgnZnVuY3Rpb25zLWhhdmUtbmFtZXMnKSgpO1xudmFyIGdldFBvbHlmaWxsID0gcmVxdWlyZSgnLi9wb2x5ZmlsbCcpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIFR5cGVFcnIgPSBUeXBlRXJyb3I7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2hpbU5hbWUoKSB7XG5cdHZhciBwb2x5ZmlsbCA9IGdldFBvbHlmaWxsKCk7XG5cdGlmIChmdW5jdGlvbnNIYXZlTmFtZXMpIHtcblx0XHRyZXR1cm4gcG9seWZpbGw7XG5cdH1cblx0aWYgKCFzdXBwb3J0c0Rlc2NyaXB0b3JzKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnIoJ1NoaW1taW5nIEZ1bmN0aW9uLnByb3RvdHlwZS5uYW1lIHN1cHBvcnQgcmVxdWlyZXMgRVM1IHByb3BlcnR5IGRlc2NyaXB0b3Igc3VwcG9ydC4nKTtcblx0fVxuXHR2YXIgZnVuY3Rpb25Qcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcblx0ZGVmaW5lUHJvcGVydHkoZnVuY3Rpb25Qcm90bywgJ25hbWUnLCB7XG5cdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdGVudW1lcmFibGU6IGZhbHNlLFxuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXHRcdFx0dmFyIG5hbWUgPSBwb2x5ZmlsbC5jYWxsKHRoaXMpO1xuXHRcdFx0aWYgKHRoaXMgIT09IGZ1bmN0aW9uUHJvdG8pIHtcblx0XHRcdFx0ZGVmaW5lUHJvcGVydHkodGhpcywgJ25hbWUnLCB7XG5cdFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdGVudW1lcmFibGU6IGZhbHNlLFxuXHRcdFx0XHRcdHZhbHVlOiBuYW1lLFxuXHRcdFx0XHRcdHdyaXRhYmxlOiBmYWxzZVxuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBuYW1lO1xuXHRcdH1cblx0fSk7XG5cdHJldHVybiBwb2x5ZmlsbDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBmdW5jdGlvbnNIYXZlTmFtZXMgPSBmdW5jdGlvbiBmdW5jdGlvbnNIYXZlTmFtZXMoKSB7XG5cdHJldHVybiB0eXBlb2YgZnVuY3Rpb24gZigpIHt9Lm5hbWUgPT09ICdzdHJpbmcnO1xufTtcblxudmFyIGdPUEQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuaWYgKGdPUEQpIHtcblx0dHJ5IHtcblx0XHRnT1BEKFtdLCAnbGVuZ3RoJyk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHQvLyBJRSA4IGhhcyBhIGJyb2tlbiBnT1BEXG5cdFx0Z09QRCA9IG51bGw7XG5cdH1cbn1cblxuZnVuY3Rpb25zSGF2ZU5hbWVzLmZ1bmN0aW9uc0hhdmVDb25maWd1cmFibGVOYW1lcyA9IGZ1bmN0aW9uIGZ1bmN0aW9uc0hhdmVDb25maWd1cmFibGVOYW1lcygpIHtcblx0aWYgKCFmdW5jdGlvbnNIYXZlTmFtZXMoKSB8fCAhZ09QRCkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXHR2YXIgZGVzYyA9IGdPUEQoZnVuY3Rpb24gKCkge30sICduYW1lJyk7XG5cdHJldHVybiAhIWRlc2MgJiYgISFkZXNjLmNvbmZpZ3VyYWJsZTtcbn07XG5cbnZhciAkYmluZCA9IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kO1xuXG5mdW5jdGlvbnNIYXZlTmFtZXMuYm91bmRGdW5jdGlvbnNIYXZlTmFtZXMgPSBmdW5jdGlvbiBib3VuZEZ1bmN0aW9uc0hhdmVOYW1lcygpIHtcblx0cmV0dXJuIGZ1bmN0aW9uc0hhdmVOYW1lcygpICYmIHR5cGVvZiAkYmluZCA9PT0gJ2Z1bmN0aW9uJyAmJiBmdW5jdGlvbiBmKCkge30uYmluZCgpLm5hbWUgIT09ICcnO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbnNIYXZlTmFtZXM7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1bmRlZmluZWQ7XG5cbnZhciAkRXJyb3IgPSByZXF1aXJlKCdlcy1lcnJvcnMnKTtcbnZhciAkRXZhbEVycm9yID0gcmVxdWlyZSgnZXMtZXJyb3JzL2V2YWwnKTtcbnZhciAkUmFuZ2VFcnJvciA9IHJlcXVpcmUoJ2VzLWVycm9ycy9yYW5nZScpO1xudmFyICRSZWZlcmVuY2VFcnJvciA9IHJlcXVpcmUoJ2VzLWVycm9ycy9yZWYnKTtcbnZhciAkU3ludGF4RXJyb3IgPSByZXF1aXJlKCdlcy1lcnJvcnMvc3ludGF4Jyk7XG52YXIgJFR5cGVFcnJvciA9IHJlcXVpcmUoJ2VzLWVycm9ycy90eXBlJyk7XG52YXIgJFVSSUVycm9yID0gcmVxdWlyZSgnZXMtZXJyb3JzL3VyaScpO1xuXG52YXIgJEZ1bmN0aW9uID0gRnVuY3Rpb247XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxudmFyIGdldEV2YWxsZWRDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uIChleHByZXNzaW9uU3ludGF4KSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuICRGdW5jdGlvbignXCJ1c2Ugc3RyaWN0XCI7IHJldHVybiAoJyArIGV4cHJlc3Npb25TeW50YXggKyAnKS5jb25zdHJ1Y3RvcjsnKSgpO1xuXHR9IGNhdGNoIChlKSB7fVxufTtcblxudmFyICRnT1BEID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbmlmICgkZ09QRCkge1xuXHR0cnkge1xuXHRcdCRnT1BEKHt9LCAnJyk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHQkZ09QRCA9IG51bGw7IC8vIHRoaXMgaXMgSUUgOCwgd2hpY2ggaGFzIGEgYnJva2VuIGdPUERcblx0fVxufVxuXG52YXIgdGhyb3dUeXBlRXJyb3IgPSBmdW5jdGlvbiAoKSB7XG5cdHRocm93IG5ldyAkVHlwZUVycm9yKCk7XG59O1xudmFyIFRocm93VHlwZUVycm9yID0gJGdPUERcblx0PyAoZnVuY3Rpb24gKCkge1xuXHRcdHRyeSB7XG5cdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLWV4cHJlc3Npb25zLCBuby1jYWxsZXIsIG5vLXJlc3RyaWN0ZWQtcHJvcGVydGllc1xuXHRcdFx0YXJndW1lbnRzLmNhbGxlZTsgLy8gSUUgOCBkb2VzIG5vdCB0aHJvdyBoZXJlXG5cdFx0XHRyZXR1cm4gdGhyb3dUeXBlRXJyb3I7XG5cdFx0fSBjYXRjaCAoY2FsbGVlVGhyb3dzKSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHQvLyBJRSA4IHRocm93cyBvbiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGFyZ3VtZW50cywgJycpXG5cdFx0XHRcdHJldHVybiAkZ09QRChhcmd1bWVudHMsICdjYWxsZWUnKS5nZXQ7XG5cdFx0XHR9IGNhdGNoIChnT1BEdGhyb3dzKSB7XG5cdFx0XHRcdHJldHVybiB0aHJvd1R5cGVFcnJvcjtcblx0XHRcdH1cblx0XHR9XG5cdH0oKSlcblx0OiB0aHJvd1R5cGVFcnJvcjtcblxudmFyIGhhc1N5bWJvbHMgPSByZXF1aXJlKCdoYXMtc3ltYm9scycpKCk7XG52YXIgaGFzUHJvdG8gPSByZXF1aXJlKCdoYXMtcHJvdG8nKSgpO1xuXG52YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgfHwgKFxuXHRoYXNQcm90b1xuXHRcdD8gZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHguX19wcm90b19fOyB9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcHJvdG9cblx0XHQ6IG51bGxcbik7XG5cbnZhciBuZWVkc0V2YWwgPSB7fTtcblxudmFyIFR5cGVkQXJyYXkgPSB0eXBlb2YgVWludDhBcnJheSA9PT0gJ3VuZGVmaW5lZCcgfHwgIWdldFByb3RvID8gdW5kZWZpbmVkIDogZ2V0UHJvdG8oVWludDhBcnJheSk7XG5cbnZhciBJTlRSSU5TSUNTID0ge1xuXHRfX3Byb3RvX186IG51bGwsXG5cdCclQWdncmVnYXRlRXJyb3IlJzogdHlwZW9mIEFnZ3JlZ2F0ZUVycm9yID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEFnZ3JlZ2F0ZUVycm9yLFxuXHQnJUFycmF5JSc6IEFycmF5LFxuXHQnJUFycmF5QnVmZmVyJSc6IHR5cGVvZiBBcnJheUJ1ZmZlciA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBBcnJheUJ1ZmZlcixcblx0JyVBcnJheUl0ZXJhdG9yUHJvdG90eXBlJSc6IGhhc1N5bWJvbHMgJiYgZ2V0UHJvdG8gPyBnZXRQcm90byhbXVtTeW1ib2wuaXRlcmF0b3JdKCkpIDogdW5kZWZpbmVkLFxuXHQnJUFzeW5jRnJvbVN5bmNJdGVyYXRvclByb3RvdHlwZSUnOiB1bmRlZmluZWQsXG5cdCclQXN5bmNGdW5jdGlvbiUnOiBuZWVkc0V2YWwsXG5cdCclQXN5bmNHZW5lcmF0b3IlJzogbmVlZHNFdmFsLFxuXHQnJUFzeW5jR2VuZXJhdG9yRnVuY3Rpb24lJzogbmVlZHNFdmFsLFxuXHQnJUFzeW5jSXRlcmF0b3JQcm90b3R5cGUlJzogbmVlZHNFdmFsLFxuXHQnJUF0b21pY3MlJzogdHlwZW9mIEF0b21pY3MgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogQXRvbWljcyxcblx0JyVCaWdJbnQlJzogdHlwZW9mIEJpZ0ludCA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBCaWdJbnQsXG5cdCclQmlnSW50NjRBcnJheSUnOiB0eXBlb2YgQmlnSW50NjRBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBCaWdJbnQ2NEFycmF5LFxuXHQnJUJpZ1VpbnQ2NEFycmF5JSc6IHR5cGVvZiBCaWdVaW50NjRBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBCaWdVaW50NjRBcnJheSxcblx0JyVCb29sZWFuJSc6IEJvb2xlYW4sXG5cdCclRGF0YVZpZXclJzogdHlwZW9mIERhdGFWaWV3ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IERhdGFWaWV3LFxuXHQnJURhdGUlJzogRGF0ZSxcblx0JyVkZWNvZGVVUkklJzogZGVjb2RlVVJJLFxuXHQnJWRlY29kZVVSSUNvbXBvbmVudCUnOiBkZWNvZGVVUklDb21wb25lbnQsXG5cdCclZW5jb2RlVVJJJSc6IGVuY29kZVVSSSxcblx0JyVlbmNvZGVVUklDb21wb25lbnQlJzogZW5jb2RlVVJJQ29tcG9uZW50LFxuXHQnJUVycm9yJSc6ICRFcnJvcixcblx0JyVldmFsJSc6IGV2YWwsIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZXZhbFxuXHQnJUV2YWxFcnJvciUnOiAkRXZhbEVycm9yLFxuXHQnJUZsb2F0MzJBcnJheSUnOiB0eXBlb2YgRmxvYXQzMkFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEZsb2F0MzJBcnJheSxcblx0JyVGbG9hdDY0QXJyYXklJzogdHlwZW9mIEZsb2F0NjRBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBGbG9hdDY0QXJyYXksXG5cdCclRmluYWxpemF0aW9uUmVnaXN0cnklJzogdHlwZW9mIEZpbmFsaXphdGlvblJlZ2lzdHJ5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEZpbmFsaXphdGlvblJlZ2lzdHJ5LFxuXHQnJUZ1bmN0aW9uJSc6ICRGdW5jdGlvbixcblx0JyVHZW5lcmF0b3JGdW5jdGlvbiUnOiBuZWVkc0V2YWwsXG5cdCclSW50OEFycmF5JSc6IHR5cGVvZiBJbnQ4QXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogSW50OEFycmF5LFxuXHQnJUludDE2QXJyYXklJzogdHlwZW9mIEludDE2QXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogSW50MTZBcnJheSxcblx0JyVJbnQzMkFycmF5JSc6IHR5cGVvZiBJbnQzMkFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEludDMyQXJyYXksXG5cdCclaXNGaW5pdGUlJzogaXNGaW5pdGUsXG5cdCclaXNOYU4lJzogaXNOYU4sXG5cdCclSXRlcmF0b3JQcm90b3R5cGUlJzogaGFzU3ltYm9scyAmJiBnZXRQcm90byA/IGdldFByb3RvKGdldFByb3RvKFtdW1N5bWJvbC5pdGVyYXRvcl0oKSkpIDogdW5kZWZpbmVkLFxuXHQnJUpTT04lJzogdHlwZW9mIEpTT04gPT09ICdvYmplY3QnID8gSlNPTiA6IHVuZGVmaW5lZCxcblx0JyVNYXAlJzogdHlwZW9mIE1hcCA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBNYXAsXG5cdCclTWFwSXRlcmF0b3JQcm90b3R5cGUlJzogdHlwZW9mIE1hcCA9PT0gJ3VuZGVmaW5lZCcgfHwgIWhhc1N5bWJvbHMgfHwgIWdldFByb3RvID8gdW5kZWZpbmVkIDogZ2V0UHJvdG8obmV3IE1hcCgpW1N5bWJvbC5pdGVyYXRvcl0oKSksXG5cdCclTWF0aCUnOiBNYXRoLFxuXHQnJU51bWJlciUnOiBOdW1iZXIsXG5cdCclT2JqZWN0JSc6IE9iamVjdCxcblx0JyVwYXJzZUZsb2F0JSc6IHBhcnNlRmxvYXQsXG5cdCclcGFyc2VJbnQlJzogcGFyc2VJbnQsXG5cdCclUHJvbWlzZSUnOiB0eXBlb2YgUHJvbWlzZSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBQcm9taXNlLFxuXHQnJVByb3h5JSc6IHR5cGVvZiBQcm94eSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBQcm94eSxcblx0JyVSYW5nZUVycm9yJSc6ICRSYW5nZUVycm9yLFxuXHQnJVJlZmVyZW5jZUVycm9yJSc6ICRSZWZlcmVuY2VFcnJvcixcblx0JyVSZWZsZWN0JSc6IHR5cGVvZiBSZWZsZWN0ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFJlZmxlY3QsXG5cdCclUmVnRXhwJSc6IFJlZ0V4cCxcblx0JyVTZXQlJzogdHlwZW9mIFNldCA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBTZXQsXG5cdCclU2V0SXRlcmF0b3JQcm90b3R5cGUlJzogdHlwZW9mIFNldCA9PT0gJ3VuZGVmaW5lZCcgfHwgIWhhc1N5bWJvbHMgfHwgIWdldFByb3RvID8gdW5kZWZpbmVkIDogZ2V0UHJvdG8obmV3IFNldCgpW1N5bWJvbC5pdGVyYXRvcl0oKSksXG5cdCclU2hhcmVkQXJyYXlCdWZmZXIlJzogdHlwZW9mIFNoYXJlZEFycmF5QnVmZmVyID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFNoYXJlZEFycmF5QnVmZmVyLFxuXHQnJVN0cmluZyUnOiBTdHJpbmcsXG5cdCclU3RyaW5nSXRlcmF0b3JQcm90b3R5cGUlJzogaGFzU3ltYm9scyAmJiBnZXRQcm90byA/IGdldFByb3RvKCcnW1N5bWJvbC5pdGVyYXRvcl0oKSkgOiB1bmRlZmluZWQsXG5cdCclU3ltYm9sJSc6IGhhc1N5bWJvbHMgPyBTeW1ib2wgOiB1bmRlZmluZWQsXG5cdCclU3ludGF4RXJyb3IlJzogJFN5bnRheEVycm9yLFxuXHQnJVRocm93VHlwZUVycm9yJSc6IFRocm93VHlwZUVycm9yLFxuXHQnJVR5cGVkQXJyYXklJzogVHlwZWRBcnJheSxcblx0JyVUeXBlRXJyb3IlJzogJFR5cGVFcnJvcixcblx0JyVVaW50OEFycmF5JSc6IHR5cGVvZiBVaW50OEFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFVpbnQ4QXJyYXksXG5cdCclVWludDhDbGFtcGVkQXJyYXklJzogdHlwZW9mIFVpbnQ4Q2xhbXBlZEFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFVpbnQ4Q2xhbXBlZEFycmF5LFxuXHQnJVVpbnQxNkFycmF5JSc6IHR5cGVvZiBVaW50MTZBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBVaW50MTZBcnJheSxcblx0JyVVaW50MzJBcnJheSUnOiB0eXBlb2YgVWludDMyQXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogVWludDMyQXJyYXksXG5cdCclVVJJRXJyb3IlJzogJFVSSUVycm9yLFxuXHQnJVdlYWtNYXAlJzogdHlwZW9mIFdlYWtNYXAgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogV2Vha01hcCxcblx0JyVXZWFrUmVmJSc6IHR5cGVvZiBXZWFrUmVmID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFdlYWtSZWYsXG5cdCclV2Vha1NldCUnOiB0eXBlb2YgV2Vha1NldCA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBXZWFrU2V0XG59O1xuXG5pZiAoZ2V0UHJvdG8pIHtcblx0dHJ5IHtcblx0XHRudWxsLmVycm9yOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC1leHByZXNzaW9uc1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0Ly8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc2hhZG93cmVhbG0vcHVsbC8zODQjaXNzdWVjb21tZW50LTEzNjQyNjQyMjlcblx0XHR2YXIgZXJyb3JQcm90byA9IGdldFByb3RvKGdldFByb3RvKGUpKTtcblx0XHRJTlRSSU5TSUNTWyclRXJyb3IucHJvdG90eXBlJSddID0gZXJyb3JQcm90bztcblx0fVxufVxuXG52YXIgZG9FdmFsID0gZnVuY3Rpb24gZG9FdmFsKG5hbWUpIHtcblx0dmFyIHZhbHVlO1xuXHRpZiAobmFtZSA9PT0gJyVBc3luY0Z1bmN0aW9uJScpIHtcblx0XHR2YWx1ZSA9IGdldEV2YWxsZWRDb25zdHJ1Y3RvcignYXN5bmMgZnVuY3Rpb24gKCkge30nKTtcblx0fSBlbHNlIGlmIChuYW1lID09PSAnJUdlbmVyYXRvckZ1bmN0aW9uJScpIHtcblx0XHR2YWx1ZSA9IGdldEV2YWxsZWRDb25zdHJ1Y3RvcignZnVuY3Rpb24qICgpIHt9Jyk7XG5cdH0gZWxzZSBpZiAobmFtZSA9PT0gJyVBc3luY0dlbmVyYXRvckZ1bmN0aW9uJScpIHtcblx0XHR2YWx1ZSA9IGdldEV2YWxsZWRDb25zdHJ1Y3RvcignYXN5bmMgZnVuY3Rpb24qICgpIHt9Jyk7XG5cdH0gZWxzZSBpZiAobmFtZSA9PT0gJyVBc3luY0dlbmVyYXRvciUnKSB7XG5cdFx0dmFyIGZuID0gZG9FdmFsKCclQXN5bmNHZW5lcmF0b3JGdW5jdGlvbiUnKTtcblx0XHRpZiAoZm4pIHtcblx0XHRcdHZhbHVlID0gZm4ucHJvdG90eXBlO1xuXHRcdH1cblx0fSBlbHNlIGlmIChuYW1lID09PSAnJUFzeW5jSXRlcmF0b3JQcm90b3R5cGUlJykge1xuXHRcdHZhciBnZW4gPSBkb0V2YWwoJyVBc3luY0dlbmVyYXRvciUnKTtcblx0XHRpZiAoZ2VuICYmIGdldFByb3RvKSB7XG5cdFx0XHR2YWx1ZSA9IGdldFByb3RvKGdlbi5wcm90b3R5cGUpO1xuXHRcdH1cblx0fVxuXG5cdElOVFJJTlNJQ1NbbmFtZV0gPSB2YWx1ZTtcblxuXHRyZXR1cm4gdmFsdWU7XG59O1xuXG52YXIgTEVHQUNZX0FMSUFTRVMgPSB7XG5cdF9fcHJvdG9fXzogbnVsbCxcblx0JyVBcnJheUJ1ZmZlclByb3RvdHlwZSUnOiBbJ0FycmF5QnVmZmVyJywgJ3Byb3RvdHlwZSddLFxuXHQnJUFycmF5UHJvdG90eXBlJSc6IFsnQXJyYXknLCAncHJvdG90eXBlJ10sXG5cdCclQXJyYXlQcm90b19lbnRyaWVzJSc6IFsnQXJyYXknLCAncHJvdG90eXBlJywgJ2VudHJpZXMnXSxcblx0JyVBcnJheVByb3RvX2ZvckVhY2glJzogWydBcnJheScsICdwcm90b3R5cGUnLCAnZm9yRWFjaCddLFxuXHQnJUFycmF5UHJvdG9fa2V5cyUnOiBbJ0FycmF5JywgJ3Byb3RvdHlwZScsICdrZXlzJ10sXG5cdCclQXJyYXlQcm90b192YWx1ZXMlJzogWydBcnJheScsICdwcm90b3R5cGUnLCAndmFsdWVzJ10sXG5cdCclQXN5bmNGdW5jdGlvblByb3RvdHlwZSUnOiBbJ0FzeW5jRnVuY3Rpb24nLCAncHJvdG90eXBlJ10sXG5cdCclQXN5bmNHZW5lcmF0b3IlJzogWydBc3luY0dlbmVyYXRvckZ1bmN0aW9uJywgJ3Byb3RvdHlwZSddLFxuXHQnJUFzeW5jR2VuZXJhdG9yUHJvdG90eXBlJSc6IFsnQXN5bmNHZW5lcmF0b3JGdW5jdGlvbicsICdwcm90b3R5cGUnLCAncHJvdG90eXBlJ10sXG5cdCclQm9vbGVhblByb3RvdHlwZSUnOiBbJ0Jvb2xlYW4nLCAncHJvdG90eXBlJ10sXG5cdCclRGF0YVZpZXdQcm90b3R5cGUlJzogWydEYXRhVmlldycsICdwcm90b3R5cGUnXSxcblx0JyVEYXRlUHJvdG90eXBlJSc6IFsnRGF0ZScsICdwcm90b3R5cGUnXSxcblx0JyVFcnJvclByb3RvdHlwZSUnOiBbJ0Vycm9yJywgJ3Byb3RvdHlwZSddLFxuXHQnJUV2YWxFcnJvclByb3RvdHlwZSUnOiBbJ0V2YWxFcnJvcicsICdwcm90b3R5cGUnXSxcblx0JyVGbG9hdDMyQXJyYXlQcm90b3R5cGUlJzogWydGbG9hdDMyQXJyYXknLCAncHJvdG90eXBlJ10sXG5cdCclRmxvYXQ2NEFycmF5UHJvdG90eXBlJSc6IFsnRmxvYXQ2NEFycmF5JywgJ3Byb3RvdHlwZSddLFxuXHQnJUZ1bmN0aW9uUHJvdG90eXBlJSc6IFsnRnVuY3Rpb24nLCAncHJvdG90eXBlJ10sXG5cdCclR2VuZXJhdG9yJSc6IFsnR2VuZXJhdG9yRnVuY3Rpb24nLCAncHJvdG90eXBlJ10sXG5cdCclR2VuZXJhdG9yUHJvdG90eXBlJSc6IFsnR2VuZXJhdG9yRnVuY3Rpb24nLCAncHJvdG90eXBlJywgJ3Byb3RvdHlwZSddLFxuXHQnJUludDhBcnJheVByb3RvdHlwZSUnOiBbJ0ludDhBcnJheScsICdwcm90b3R5cGUnXSxcblx0JyVJbnQxNkFycmF5UHJvdG90eXBlJSc6IFsnSW50MTZBcnJheScsICdwcm90b3R5cGUnXSxcblx0JyVJbnQzMkFycmF5UHJvdG90eXBlJSc6IFsnSW50MzJBcnJheScsICdwcm90b3R5cGUnXSxcblx0JyVKU09OUGFyc2UlJzogWydKU09OJywgJ3BhcnNlJ10sXG5cdCclSlNPTlN0cmluZ2lmeSUnOiBbJ0pTT04nLCAnc3RyaW5naWZ5J10sXG5cdCclTWFwUHJvdG90eXBlJSc6IFsnTWFwJywgJ3Byb3RvdHlwZSddLFxuXHQnJU51bWJlclByb3RvdHlwZSUnOiBbJ051bWJlcicsICdwcm90b3R5cGUnXSxcblx0JyVPYmplY3RQcm90b3R5cGUlJzogWydPYmplY3QnLCAncHJvdG90eXBlJ10sXG5cdCclT2JqUHJvdG9fdG9TdHJpbmclJzogWydPYmplY3QnLCAncHJvdG90eXBlJywgJ3RvU3RyaW5nJ10sXG5cdCclT2JqUHJvdG9fdmFsdWVPZiUnOiBbJ09iamVjdCcsICdwcm90b3R5cGUnLCAndmFsdWVPZiddLFxuXHQnJVByb21pc2VQcm90b3R5cGUlJzogWydQcm9taXNlJywgJ3Byb3RvdHlwZSddLFxuXHQnJVByb21pc2VQcm90b190aGVuJSc6IFsnUHJvbWlzZScsICdwcm90b3R5cGUnLCAndGhlbiddLFxuXHQnJVByb21pc2VfYWxsJSc6IFsnUHJvbWlzZScsICdhbGwnXSxcblx0JyVQcm9taXNlX3JlamVjdCUnOiBbJ1Byb21pc2UnLCAncmVqZWN0J10sXG5cdCclUHJvbWlzZV9yZXNvbHZlJSc6IFsnUHJvbWlzZScsICdyZXNvbHZlJ10sXG5cdCclUmFuZ2VFcnJvclByb3RvdHlwZSUnOiBbJ1JhbmdlRXJyb3InLCAncHJvdG90eXBlJ10sXG5cdCclUmVmZXJlbmNlRXJyb3JQcm90b3R5cGUlJzogWydSZWZlcmVuY2VFcnJvcicsICdwcm90b3R5cGUnXSxcblx0JyVSZWdFeHBQcm90b3R5cGUlJzogWydSZWdFeHAnLCAncHJvdG90eXBlJ10sXG5cdCclU2V0UHJvdG90eXBlJSc6IFsnU2V0JywgJ3Byb3RvdHlwZSddLFxuXHQnJVNoYXJlZEFycmF5QnVmZmVyUHJvdG90eXBlJSc6IFsnU2hhcmVkQXJyYXlCdWZmZXInLCAncHJvdG90eXBlJ10sXG5cdCclU3RyaW5nUHJvdG90eXBlJSc6IFsnU3RyaW5nJywgJ3Byb3RvdHlwZSddLFxuXHQnJVN5bWJvbFByb3RvdHlwZSUnOiBbJ1N5bWJvbCcsICdwcm90b3R5cGUnXSxcblx0JyVTeW50YXhFcnJvclByb3RvdHlwZSUnOiBbJ1N5bnRheEVycm9yJywgJ3Byb3RvdHlwZSddLFxuXHQnJVR5cGVkQXJyYXlQcm90b3R5cGUlJzogWydUeXBlZEFycmF5JywgJ3Byb3RvdHlwZSddLFxuXHQnJVR5cGVFcnJvclByb3RvdHlwZSUnOiBbJ1R5cGVFcnJvcicsICdwcm90b3R5cGUnXSxcblx0JyVVaW50OEFycmF5UHJvdG90eXBlJSc6IFsnVWludDhBcnJheScsICdwcm90b3R5cGUnXSxcblx0JyVVaW50OENsYW1wZWRBcnJheVByb3RvdHlwZSUnOiBbJ1VpbnQ4Q2xhbXBlZEFycmF5JywgJ3Byb3RvdHlwZSddLFxuXHQnJVVpbnQxNkFycmF5UHJvdG90eXBlJSc6IFsnVWludDE2QXJyYXknLCAncHJvdG90eXBlJ10sXG5cdCclVWludDMyQXJyYXlQcm90b3R5cGUlJzogWydVaW50MzJBcnJheScsICdwcm90b3R5cGUnXSxcblx0JyVVUklFcnJvclByb3RvdHlwZSUnOiBbJ1VSSUVycm9yJywgJ3Byb3RvdHlwZSddLFxuXHQnJVdlYWtNYXBQcm90b3R5cGUlJzogWydXZWFrTWFwJywgJ3Byb3RvdHlwZSddLFxuXHQnJVdlYWtTZXRQcm90b3R5cGUlJzogWydXZWFrU2V0JywgJ3Byb3RvdHlwZSddXG59O1xuXG52YXIgYmluZCA9IHJlcXVpcmUoJ2Z1bmN0aW9uLWJpbmQnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCdoYXNvd24nKTtcbnZhciAkY29uY2F0ID0gYmluZC5jYWxsKEZ1bmN0aW9uLmNhbGwsIEFycmF5LnByb3RvdHlwZS5jb25jYXQpO1xudmFyICRzcGxpY2VBcHBseSA9IGJpbmQuY2FsbChGdW5jdGlvbi5hcHBseSwgQXJyYXkucHJvdG90eXBlLnNwbGljZSk7XG52YXIgJHJlcGxhY2UgPSBiaW5kLmNhbGwoRnVuY3Rpb24uY2FsbCwgU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlKTtcbnZhciAkc3RyU2xpY2UgPSBiaW5kLmNhbGwoRnVuY3Rpb24uY2FsbCwgU3RyaW5nLnByb3RvdHlwZS5zbGljZSk7XG52YXIgJGV4ZWMgPSBiaW5kLmNhbGwoRnVuY3Rpb24uY2FsbCwgUmVnRXhwLnByb3RvdHlwZS5leGVjKTtcblxuLyogYWRhcHRlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9sb2Rhc2gvbG9kYXNoL2Jsb2IvNC4xNy4xNS9kaXN0L2xvZGFzaC5qcyNMNjczNS1MNjc0NCAqL1xudmFyIHJlUHJvcE5hbWUgPSAvW14lLltcXF1dK3xcXFsoPzooLT9cXGQrKD86XFwuXFxkKyk/KXwoW1wiJ10pKCg/Oig/IVxcMilbXlxcXFxdfFxcXFwuKSo/KVxcMilcXF18KD89KD86XFwufFxcW1xcXSkoPzpcXC58XFxbXFxdfCUkKSkvZztcbnZhciByZUVzY2FwZUNoYXIgPSAvXFxcXChcXFxcKT8vZzsgLyoqIFVzZWQgdG8gbWF0Y2ggYmFja3NsYXNoZXMgaW4gcHJvcGVydHkgcGF0aHMuICovXG52YXIgc3RyaW5nVG9QYXRoID0gZnVuY3Rpb24gc3RyaW5nVG9QYXRoKHN0cmluZykge1xuXHR2YXIgZmlyc3QgPSAkc3RyU2xpY2Uoc3RyaW5nLCAwLCAxKTtcblx0dmFyIGxhc3QgPSAkc3RyU2xpY2Uoc3RyaW5nLCAtMSk7XG5cdGlmIChmaXJzdCA9PT0gJyUnICYmIGxhc3QgIT09ICclJykge1xuXHRcdHRocm93IG5ldyAkU3ludGF4RXJyb3IoJ2ludmFsaWQgaW50cmluc2ljIHN5bnRheCwgZXhwZWN0ZWQgY2xvc2luZyBgJWAnKTtcblx0fSBlbHNlIGlmIChsYXN0ID09PSAnJScgJiYgZmlyc3QgIT09ICclJykge1xuXHRcdHRocm93IG5ldyAkU3ludGF4RXJyb3IoJ2ludmFsaWQgaW50cmluc2ljIHN5bnRheCwgZXhwZWN0ZWQgb3BlbmluZyBgJWAnKTtcblx0fVxuXHR2YXIgcmVzdWx0ID0gW107XG5cdCRyZXBsYWNlKHN0cmluZywgcmVQcm9wTmFtZSwgZnVuY3Rpb24gKG1hdGNoLCBudW1iZXIsIHF1b3RlLCBzdWJTdHJpbmcpIHtcblx0XHRyZXN1bHRbcmVzdWx0Lmxlbmd0aF0gPSBxdW90ZSA/ICRyZXBsYWNlKHN1YlN0cmluZywgcmVFc2NhcGVDaGFyLCAnJDEnKSA6IG51bWJlciB8fCBtYXRjaDtcblx0fSk7XG5cdHJldHVybiByZXN1bHQ7XG59O1xuLyogZW5kIGFkYXB0YXRpb24gKi9cblxudmFyIGdldEJhc2VJbnRyaW5zaWMgPSBmdW5jdGlvbiBnZXRCYXNlSW50cmluc2ljKG5hbWUsIGFsbG93TWlzc2luZykge1xuXHR2YXIgaW50cmluc2ljTmFtZSA9IG5hbWU7XG5cdHZhciBhbGlhcztcblx0aWYgKGhhc093bihMRUdBQ1lfQUxJQVNFUywgaW50cmluc2ljTmFtZSkpIHtcblx0XHRhbGlhcyA9IExFR0FDWV9BTElBU0VTW2ludHJpbnNpY05hbWVdO1xuXHRcdGludHJpbnNpY05hbWUgPSAnJScgKyBhbGlhc1swXSArICclJztcblx0fVxuXG5cdGlmIChoYXNPd24oSU5UUklOU0lDUywgaW50cmluc2ljTmFtZSkpIHtcblx0XHR2YXIgdmFsdWUgPSBJTlRSSU5TSUNTW2ludHJpbnNpY05hbWVdO1xuXHRcdGlmICh2YWx1ZSA9PT0gbmVlZHNFdmFsKSB7XG5cdFx0XHR2YWx1ZSA9IGRvRXZhbChpbnRyaW5zaWNOYW1lKTtcblx0XHR9XG5cdFx0aWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcgJiYgIWFsbG93TWlzc2luZykge1xuXHRcdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ2ludHJpbnNpYyAnICsgbmFtZSArICcgZXhpc3RzLCBidXQgaXMgbm90IGF2YWlsYWJsZS4gUGxlYXNlIGZpbGUgYW4gaXNzdWUhJyk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHtcblx0XHRcdGFsaWFzOiBhbGlhcyxcblx0XHRcdG5hbWU6IGludHJpbnNpY05hbWUsXG5cdFx0XHR2YWx1ZTogdmFsdWVcblx0XHR9O1xuXHR9XG5cblx0dGhyb3cgbmV3ICRTeW50YXhFcnJvcignaW50cmluc2ljICcgKyBuYW1lICsgJyBkb2VzIG5vdCBleGlzdCEnKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gR2V0SW50cmluc2ljKG5hbWUsIGFsbG93TWlzc2luZykge1xuXHRpZiAodHlwZW9mIG5hbWUgIT09ICdzdHJpbmcnIHx8IG5hbWUubGVuZ3RoID09PSAwKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ2ludHJpbnNpYyBuYW1lIG11c3QgYmUgYSBub24tZW1wdHkgc3RyaW5nJyk7XG5cdH1cblx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIHR5cGVvZiBhbGxvd01pc3NpbmcgIT09ICdib29sZWFuJykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdcImFsbG93TWlzc2luZ1wiIGFyZ3VtZW50IG11c3QgYmUgYSBib29sZWFuJyk7XG5cdH1cblxuXHRpZiAoJGV4ZWMoL14lP1teJV0qJT8kLywgbmFtZSkgPT09IG51bGwpIHtcblx0XHR0aHJvdyBuZXcgJFN5bnRheEVycm9yKCdgJWAgbWF5IG5vdCBiZSBwcmVzZW50IGFueXdoZXJlIGJ1dCBhdCB0aGUgYmVnaW5uaW5nIGFuZCBlbmQgb2YgdGhlIGludHJpbnNpYyBuYW1lJyk7XG5cdH1cblx0dmFyIHBhcnRzID0gc3RyaW5nVG9QYXRoKG5hbWUpO1xuXHR2YXIgaW50cmluc2ljQmFzZU5hbWUgPSBwYXJ0cy5sZW5ndGggPiAwID8gcGFydHNbMF0gOiAnJztcblxuXHR2YXIgaW50cmluc2ljID0gZ2V0QmFzZUludHJpbnNpYygnJScgKyBpbnRyaW5zaWNCYXNlTmFtZSArICclJywgYWxsb3dNaXNzaW5nKTtcblx0dmFyIGludHJpbnNpY1JlYWxOYW1lID0gaW50cmluc2ljLm5hbWU7XG5cdHZhciB2YWx1ZSA9IGludHJpbnNpYy52YWx1ZTtcblx0dmFyIHNraXBGdXJ0aGVyQ2FjaGluZyA9IGZhbHNlO1xuXG5cdHZhciBhbGlhcyA9IGludHJpbnNpYy5hbGlhcztcblx0aWYgKGFsaWFzKSB7XG5cdFx0aW50cmluc2ljQmFzZU5hbWUgPSBhbGlhc1swXTtcblx0XHQkc3BsaWNlQXBwbHkocGFydHMsICRjb25jYXQoWzAsIDFdLCBhbGlhcykpO1xuXHR9XG5cblx0Zm9yICh2YXIgaSA9IDEsIGlzT3duID0gdHJ1ZTsgaSA8IHBhcnRzLmxlbmd0aDsgaSArPSAxKSB7XG5cdFx0dmFyIHBhcnQgPSBwYXJ0c1tpXTtcblx0XHR2YXIgZmlyc3QgPSAkc3RyU2xpY2UocGFydCwgMCwgMSk7XG5cdFx0dmFyIGxhc3QgPSAkc3RyU2xpY2UocGFydCwgLTEpO1xuXHRcdGlmIChcblx0XHRcdChcblx0XHRcdFx0KGZpcnN0ID09PSAnXCInIHx8IGZpcnN0ID09PSBcIidcIiB8fCBmaXJzdCA9PT0gJ2AnKVxuXHRcdFx0XHR8fCAobGFzdCA9PT0gJ1wiJyB8fCBsYXN0ID09PSBcIidcIiB8fCBsYXN0ID09PSAnYCcpXG5cdFx0XHQpXG5cdFx0XHQmJiBmaXJzdCAhPT0gbGFzdFxuXHRcdCkge1xuXHRcdFx0dGhyb3cgbmV3ICRTeW50YXhFcnJvcigncHJvcGVydHkgbmFtZXMgd2l0aCBxdW90ZXMgbXVzdCBoYXZlIG1hdGNoaW5nIHF1b3RlcycpO1xuXHRcdH1cblx0XHRpZiAocGFydCA9PT0gJ2NvbnN0cnVjdG9yJyB8fCAhaXNPd24pIHtcblx0XHRcdHNraXBGdXJ0aGVyQ2FjaGluZyA9IHRydWU7XG5cdFx0fVxuXG5cdFx0aW50cmluc2ljQmFzZU5hbWUgKz0gJy4nICsgcGFydDtcblx0XHRpbnRyaW5zaWNSZWFsTmFtZSA9ICclJyArIGludHJpbnNpY0Jhc2VOYW1lICsgJyUnO1xuXG5cdFx0aWYgKGhhc093bihJTlRSSU5TSUNTLCBpbnRyaW5zaWNSZWFsTmFtZSkpIHtcblx0XHRcdHZhbHVlID0gSU5UUklOU0lDU1tpbnRyaW5zaWNSZWFsTmFtZV07XG5cdFx0fSBlbHNlIGlmICh2YWx1ZSAhPSBudWxsKSB7XG5cdFx0XHRpZiAoIShwYXJ0IGluIHZhbHVlKSkge1xuXHRcdFx0XHRpZiAoIWFsbG93TWlzc2luZykge1xuXHRcdFx0XHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdiYXNlIGludHJpbnNpYyBmb3IgJyArIG5hbWUgKyAnIGV4aXN0cywgYnV0IHRoZSBwcm9wZXJ0eSBpcyBub3QgYXZhaWxhYmxlLicpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB2b2lkIHVuZGVmaW5lZDtcblx0XHRcdH1cblx0XHRcdGlmICgkZ09QRCAmJiAoaSArIDEpID49IHBhcnRzLmxlbmd0aCkge1xuXHRcdFx0XHR2YXIgZGVzYyA9ICRnT1BEKHZhbHVlLCBwYXJ0KTtcblx0XHRcdFx0aXNPd24gPSAhIWRlc2M7XG5cblx0XHRcdFx0Ly8gQnkgY29udmVudGlvbiwgd2hlbiBhIGRhdGEgcHJvcGVydHkgaXMgY29udmVydGVkIHRvIGFuIGFjY2Vzc29yXG5cdFx0XHRcdC8vIHByb3BlcnR5IHRvIGVtdWxhdGUgYSBkYXRhIHByb3BlcnR5IHRoYXQgZG9lcyBub3Qgc3VmZmVyIGZyb21cblx0XHRcdFx0Ly8gdGhlIG92ZXJyaWRlIG1pc3Rha2UsIHRoYXQgYWNjZXNzb3IncyBnZXR0ZXIgaXMgbWFya2VkIHdpdGhcblx0XHRcdFx0Ly8gYW4gYG9yaWdpbmFsVmFsdWVgIHByb3BlcnR5LiBIZXJlLCB3aGVuIHdlIGRldGVjdCB0aGlzLCB3ZVxuXHRcdFx0XHQvLyB1cGhvbGQgdGhlIGlsbHVzaW9uIGJ5IHByZXRlbmRpbmcgdG8gc2VlIHRoYXQgb3JpZ2luYWwgZGF0YVxuXHRcdFx0XHQvLyBwcm9wZXJ0eSwgaS5lLiwgcmV0dXJuaW5nIHRoZSB2YWx1ZSByYXRoZXIgdGhhbiB0aGUgZ2V0dGVyXG5cdFx0XHRcdC8vIGl0c2VsZi5cblx0XHRcdFx0aWYgKGlzT3duICYmICdnZXQnIGluIGRlc2MgJiYgISgnb3JpZ2luYWxWYWx1ZScgaW4gZGVzYy5nZXQpKSB7XG5cdFx0XHRcdFx0dmFsdWUgPSBkZXNjLmdldDtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR2YWx1ZSA9IHZhbHVlW3BhcnRdO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpc093biA9IGhhc093bih2YWx1ZSwgcGFydCk7XG5cdFx0XHRcdHZhbHVlID0gdmFsdWVbcGFydF07XG5cdFx0XHR9XG5cblx0XHRcdGlmIChpc093biAmJiAhc2tpcEZ1cnRoZXJDYWNoaW5nKSB7XG5cdFx0XHRcdElOVFJJTlNJQ1NbaW50cmluc2ljUmVhbE5hbWVdID0gdmFsdWU7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdHJldHVybiB2YWx1ZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCdnZXQtaW50cmluc2ljJyk7XG5cbnZhciAkZ09QRCA9IEdldEludHJpbnNpYygnJU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IlJywgdHJ1ZSk7XG5cbmlmICgkZ09QRCkge1xuXHR0cnkge1xuXHRcdCRnT1BEKFtdLCAnbGVuZ3RoJyk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHQvLyBJRSA4IGhhcyBhIGJyb2tlbiBnT1BEXG5cdFx0JGdPUEQgPSBudWxsO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gJGdPUEQ7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciAkZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCdlcy1kZWZpbmUtcHJvcGVydHknKTtcblxudmFyIGhhc1Byb3BlcnR5RGVzY3JpcHRvcnMgPSBmdW5jdGlvbiBoYXNQcm9wZXJ0eURlc2NyaXB0b3JzKCkge1xuXHRyZXR1cm4gISEkZGVmaW5lUHJvcGVydHk7XG59O1xuXG5oYXNQcm9wZXJ0eURlc2NyaXB0b3JzLmhhc0FycmF5TGVuZ3RoRGVmaW5lQnVnID0gZnVuY3Rpb24gaGFzQXJyYXlMZW5ndGhEZWZpbmVCdWcoKSB7XG5cdC8vIG5vZGUgdjAuNiBoYXMgYSBidWcgd2hlcmUgYXJyYXkgbGVuZ3RocyBjYW4gYmUgU2V0IGJ1dCBub3QgRGVmaW5lZFxuXHRpZiAoISRkZWZpbmVQcm9wZXJ0eSkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cdHRyeSB7XG5cdFx0cmV0dXJuICRkZWZpbmVQcm9wZXJ0eShbXSwgJ2xlbmd0aCcsIHsgdmFsdWU6IDEgfSkubGVuZ3RoICE9PSAxO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0Ly8gSW4gRmlyZWZveCA0LTIyLCBkZWZpbmluZyBsZW5ndGggb24gYW4gYXJyYXkgdGhyb3dzIGFuIGV4Y2VwdGlvbi5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBoYXNQcm9wZXJ0eURlc2NyaXB0b3JzO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdGVzdCA9IHtcblx0X19wcm90b19fOiBudWxsLFxuXHRmb286IHt9XG59O1xuXG52YXIgJE9iamVjdCA9IE9iamVjdDtcblxuLyoqIEB0eXBlIHtpbXBvcnQoJy4nKX0gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaGFzUHJvdG8oKSB7XG5cdC8vIEB0cy1leHBlY3QtZXJyb3I6IFRTIGVycm9ycyBvbiBhbiBpbmhlcml0ZWQgcHJvcGVydHkgZm9yIHNvbWUgcmVhc29uXG5cdHJldHVybiB7IF9fcHJvdG9fXzogdGVzdCB9LmZvbyA9PT0gdGVzdC5mb29cblx0XHQmJiAhKHRlc3QgaW5zdGFuY2VvZiAkT2JqZWN0KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBvcmlnU3ltYm9sID0gdHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sO1xudmFyIGhhc1N5bWJvbFNoYW0gPSByZXF1aXJlKCcuL3NoYW1zJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaGFzTmF0aXZlU3ltYm9scygpIHtcblx0aWYgKHR5cGVvZiBvcmlnU3ltYm9sICE9PSAnZnVuY3Rpb24nKSB7IHJldHVybiBmYWxzZTsgfVxuXHRpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ2Z1bmN0aW9uJykgeyByZXR1cm4gZmFsc2U7IH1cblx0aWYgKHR5cGVvZiBvcmlnU3ltYm9sKCdmb28nKSAhPT0gJ3N5bWJvbCcpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdGlmICh0eXBlb2YgU3ltYm9sKCdiYXInKSAhPT0gJ3N5bWJvbCcpIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0cmV0dXJuIGhhc1N5bWJvbFNoYW0oKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qIGVzbGludCBjb21wbGV4aXR5OiBbMiwgMThdLCBtYXgtc3RhdGVtZW50czogWzIsIDMzXSAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBoYXNTeW1ib2xzKCkge1xuXHRpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyAhPT0gJ2Z1bmN0aW9uJykgeyByZXR1cm4gZmFsc2U7IH1cblx0aWYgKHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICdzeW1ib2wnKSB7IHJldHVybiB0cnVlOyB9XG5cblx0dmFyIG9iaiA9IHt9O1xuXHR2YXIgc3ltID0gU3ltYm9sKCd0ZXN0Jyk7XG5cdHZhciBzeW1PYmogPSBPYmplY3Qoc3ltKTtcblx0aWYgKHR5cGVvZiBzeW0gPT09ICdzdHJpbmcnKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoc3ltKSAhPT0gJ1tvYmplY3QgU3ltYm9sXScpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoc3ltT2JqKSAhPT0gJ1tvYmplY3QgU3ltYm9sXScpIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0Ly8gdGVtcCBkaXNhYmxlZCBwZXIgaHR0cHM6Ly9naXRodWIuY29tL2xqaGFyYi9vYmplY3QuYXNzaWduL2lzc3Vlcy8xN1xuXHQvLyBpZiAoc3ltIGluc3RhbmNlb2YgU3ltYm9sKSB7IHJldHVybiBmYWxzZTsgfVxuXHQvLyB0ZW1wIGRpc2FibGVkIHBlciBodHRwczovL2dpdGh1Yi5jb20vV2ViUmVmbGVjdGlvbi9nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMvaXNzdWVzLzRcblx0Ly8gaWYgKCEoc3ltT2JqIGluc3RhbmNlb2YgU3ltYm9sKSkgeyByZXR1cm4gZmFsc2U7IH1cblxuXHQvLyBpZiAodHlwZW9mIFN5bWJvbC5wcm90b3R5cGUudG9TdHJpbmcgIT09ICdmdW5jdGlvbicpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdC8vIGlmIChTdHJpbmcoc3ltKSAhPT0gU3ltYm9sLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHN5bSkpIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0dmFyIHN5bVZhbCA9IDQyO1xuXHRvYmpbc3ltXSA9IHN5bVZhbDtcblx0Zm9yIChzeW0gaW4gb2JqKSB7IHJldHVybiBmYWxzZTsgfSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4LCBuby11bnJlYWNoYWJsZS1sb29wXG5cdGlmICh0eXBlb2YgT2JqZWN0LmtleXMgPT09ICdmdW5jdGlvbicgJiYgT2JqZWN0LmtleXMob2JqKS5sZW5ndGggIT09IDApIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0aWYgKHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyA9PT0gJ2Z1bmN0aW9uJyAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmopLmxlbmd0aCAhPT0gMCkgeyByZXR1cm4gZmFsc2U7IH1cblxuXHR2YXIgc3ltcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqKTtcblx0aWYgKHN5bXMubGVuZ3RoICE9PSAxIHx8IHN5bXNbMF0gIT09IHN5bSkgeyByZXR1cm4gZmFsc2U7IH1cblxuXHRpZiAoIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChvYmosIHN5bSkpIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0aWYgKHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0dmFyIGRlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwgc3ltKTtcblx0XHRpZiAoZGVzY3JpcHRvci52YWx1ZSAhPT0gc3ltVmFsIHx8IGRlc2NyaXB0b3IuZW51bWVyYWJsZSAhPT0gdHJ1ZSkgeyByZXR1cm4gZmFsc2U7IH1cblx0fVxuXG5cdHJldHVybiB0cnVlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGhhc1N5bWJvbHMgPSByZXF1aXJlKCdoYXMtc3ltYm9scy9zaGFtcycpO1xuXG4vKiogQHR5cGUge2ltcG9ydCgnLicpfSAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBoYXNUb1N0cmluZ1RhZ1NoYW1zKCkge1xuXHRyZXR1cm4gaGFzU3ltYm9scygpICYmICEhU3ltYm9sLnRvU3RyaW5nVGFnO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGhhc093blByb3BlcnR5ID0ge30uaGFzT3duUHJvcGVydHk7XG52YXIgY2FsbCA9IEZ1bmN0aW9uLnByb3RvdHlwZS5jYWxsO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNhbGwuYmluZCA/IGNhbGwuYmluZChoYXNPd25Qcm9wZXJ0eSkgOiBmdW5jdGlvbiAoTywgUCkge1xuICByZXR1cm4gY2FsbC5jYWxsKGhhc093blByb3BlcnR5LCBPLCBQKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBjYWxsID0gRnVuY3Rpb24ucHJvdG90eXBlLmNhbGw7XG52YXIgJGhhc093biA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgYmluZCA9IHJlcXVpcmUoJ2Z1bmN0aW9uLWJpbmQnKTtcblxuLyoqIEB0eXBlIHtpbXBvcnQoJy4nKX0gKi9cbm1vZHVsZS5leHBvcnRzID0gYmluZC5jYWxsKGNhbGwsICRoYXNPd24pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZmlsdGVyID0gcmVxdWlyZSgnYXJyYXkucHJvdG90eXBlLmZpbHRlcicpO1xudmFyIGdldERhdGEgPSByZXF1aXJlKCcuL2dldERhdGEnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBieUNvbnN0cnVjdG9yKGNvbnN0cnVjdG9yKSB7XG5cdGlmICghY29uc3RydWN0b3IpIHtcblx0XHRyZXR1cm4gW107XG5cdH1cblxuXHR2YXIgZGF0YSA9IGdldERhdGEoKTtcblx0aWYgKGNvbnN0cnVjdG9yID09PSBkYXRhLnVua25vd24pIHtcblx0XHRyZXR1cm4gW107XG5cdH1cblx0aWYgKGNvbnN0cnVjdG9yID09PSBkYXRhLmFsbCkge1xuXHRcdHJldHVybiBkYXRhLmVsZW1lbnRzO1xuXHR9XG5cdHJldHVybiBmaWx0ZXIoZGF0YS5lbGVtZW50cywgZnVuY3Rpb24gKGl0ZW0pIHtcblx0XHRyZXR1cm4gaXRlbS5jb25zdHJ1Y3RvciA9PT0gY29uc3RydWN0b3I7XG5cdH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGNhbGxCb3VuZCA9IHJlcXVpcmUoJ2NhbGwtYmluZC9jYWxsQm91bmQnKTtcblxudmFyICRwdXNoID0gY2FsbEJvdW5kKCdBcnJheS5wcm90b3R5cGUucHVzaCcpO1xuXG52YXIgbWFwID0gZnVuY3Rpb24gKGFyciwgbWFwcGVyKSB7XG5cdHZhciBtYXBwZWQgPSBbXTtcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpICs9IDEpIHtcblx0XHQkcHVzaChtYXBwZWQsIG1hcHBlcihhcnJbaV0sIGkpKTtcblx0fVxuXHRyZXR1cm4gbWFwcGVkO1xufTtcblxudmFyIGV4cGVjdGVkcyA9IFtcblx0WydIVE1MRWxlbWVudCcsICdhcnRpY2xlJ10sXG5cdFsnSFRNTEVsZW1lbnQnLCAnc2VjdGlvbiddLFxuXHRbJ0hUTUxCYXNlRm9udEVsZW1lbnQnLCAnYmFzZWZvbnQnLCAnSFRNTEJhc2VGb250RWxlbWVudENvbnN0cnVjdG9yJ10sIC8vIFNhZmFyaSA1LjFcblx0WydIVE1MUGhyYXNlRWxlbWVudCcsICdjaXRlJywgJ0hUTUxFbGVtZW50J10sIC8vIFNhZmFyaSA1LjFcblx0WydIVE1MRWxlbWVudCcsICdub3NjcmlwdCddLFxuXHRbJ0hUTUxCR1NvdW5kRWxlbWVudCcsICdiZ3NvdW5kJywgJ0hUTUxFbGVtZW50J10sIC8vIFNhZmFyaSA1LjFcblx0WydIVE1MUGhyYXNlRWxlbWVudCcsICdibGluaycsICdIVE1MRWxlbWVudCddLCAvLyBTYWZhcmkgNS4xXG5cdFsnSFRNTEVsZW1lbnQnLCAnbXVsdGljb2wnXSxcblx0WydIVE1MTmV4dElkRWxlbWVudCcsICduZXh0aWQnLCAnSFRNTEVsZW1lbnQnXSwgLy8gU2FmYXJpIDUuMVxuXHRbJ0hUTUxFbGVtZW50JywgJ3JiJ10sXG5cdFsnSFRNTEVsZW1lbnQnLCAnc3BhY2VyJ10sXG5cdFsnSFRNTEFuY2hvckVsZW1lbnQnLCAnYScsICdIVE1MRWxlbWVudCddLCAvLyBTYWZhcmkgNS4xXG5cdC8vIFsnSFRNTEFwcGxldEVsZW1lbnQnLCAnYXBwbGV0J10sIC8vIGNvbW1lbnRlZCBvdXQgZHVlIHRvIElFIDExIGphdmEgdXBkYXRlIHBvcHVwXG5cdFsnSFRNTEFyZWFFbGVtZW50JywgJ2FyZWEnLCAnSFRNTEVsZW1lbnQnXSwgLy8gU2FmYXJpIDUuMVxuXHRbJ0hUTUxBdWRpb0VsZW1lbnQnLCAnYXVkaW8nLCAnSFRNTEVsZW1lbnQnXSwgLy8gU2FmYXJpIDUuMVxuXHRbJ0hUTUxCYXNlRWxlbWVudCcsICdiYXNlJywgJ0hUTUxFbGVtZW50J10sIC8vIFNhZmFyaSA1LjFcblx0WydIVE1MQm9keUVsZW1lbnQnLCAnYm9keScsICdIVE1MRWxlbWVudCddLCAvLyBTYWZhcmkgNS4xXG5cdFsnSFRNTEJSRWxlbWVudCcsICdicicsICdIVE1MRWxlbWVudCddLCAvLyBTYWZhcmkgNS4xXG5cdFsnSFRNTEJ1dHRvbkVsZW1lbnQnLCAnYnV0dG9uJ10sXG5cdFsnSFRNTENhbnZhc0VsZW1lbnQnLCAnY2FudmFzJ10sXG5cdFsnSFRNTENvbnRlbnRFbGVtZW50JywgJ2NvbnRlbnQnLCAnSFRNTEVsZW1lbnQnXSwgLy8gU2FmYXJpIDUuMVxuXHRbJ0hUTUxEYXRhRWxlbWVudCcsICdkYXRhJywgJ0hUTUxFbGVtZW50J10sIC8vIFNhZmFyaSA1LjFcblx0WydIVE1MRGF0YUxpc3RFbGVtZW50JywgJ2RhdGFsaXN0J10sXG5cdFsnSFRNTERpYWxvZ0VsZW1lbnQnLCAnZGlhbG9nJywgJ0hUTUxFbGVtZW50J10sIC8vIFNhZmFyaSA1LjFcblx0WydIVE1MRGlyZWN0b3J5RWxlbWVudCcsICdkaXInXSxcblx0WydIVE1MRGl2RWxlbWVudCcsICdkaXYnXSxcblx0WydIVE1MRExpc3RFbGVtZW50JywgJ2RsJ10sXG5cdFsnSFRNTEVtYmVkRWxlbWVudCcsICdlbWJlZCddLFxuXHRbJ0hUTUxGaWVsZFNldEVsZW1lbnQnLCAnZmllbGRzZXQnXSxcblx0WydIVE1MRm9udEVsZW1lbnQnLCAnZm9udCddLFxuXHRbJ0hUTUxGb3JtRWxlbWVudCcsICdmb3JtJ10sXG5cdFsnSFRNTEZyYW1lRWxlbWVudCcsICdmcmFtZSddLFxuXHRbJ0hUTUxGcmFtZVNldEVsZW1lbnQnLCAnZnJhbWVzZXQnXSxcblx0WydIVE1MSGVhZEVsZW1lbnQnLCAnaGVhZCddLFxuXHRbJ0hUTUxIZWFkaW5nRWxlbWVudCcsICdoMSddLFxuXHRbJ0hUTUxIZWFkaW5nRWxlbWVudCcsICdoMiddLFxuXHRbJ0hUTUxIZWFkaW5nRWxlbWVudCcsICdoMyddLFxuXHRbJ0hUTUxIZWFkaW5nRWxlbWVudCcsICdoNCddLFxuXHRbJ0hUTUxIZWFkaW5nRWxlbWVudCcsICdoNSddLFxuXHRbJ0hUTUxIZWFkaW5nRWxlbWVudCcsICdoNiddLFxuXHRbJ0hUTUxIdG1sRWxlbWVudCcsICdodG1sJ10sXG5cdFsnSFRNTEhSRWxlbWVudCcsICdociddLFxuXHRbJ0hUTUxJRnJhbWVFbGVtZW50JywgJ2lmcmFtZSddLFxuXHRbJ0hUTUxJbWFnZUVsZW1lbnQnLCAnaW1nJ10sXG5cdFsnSFRNTElucHV0RWxlbWVudCcsICdpbnB1dCddLFxuXHRbJ0hUTUxJc0luZGV4RWxlbWVudCcsICdpbmRleCcsICdIVE1MRWxlbWVudCddLCAvLyBpbiBIVE1MNSwgdGhpcyBpcyBIVE1MVW5rbm93bkVsZW1lbnQgKFNhZmFyaSA1LjEgZm9yIEhUTUxFbGVtZW50KVxuXHRbJ0hUTUxLZXlnZW5FbGVtZW50JywgJ2tleWdlbicsICdIVE1MQmxvY2tFbGVtZW50J10sXG5cdFsnSFRNTExhYmVsRWxlbWVudCcsICdsYWJlbCddLFxuXHRbJ0hUTUxMZWdlbmRFbGVtZW50JywgJ2xlZ2VuZCddLFxuXHRbJ0hUTUxMSUVsZW1lbnQnLCAnbGknXSxcblx0WydIVE1MTGlua0VsZW1lbnQnLCAnbGluayddLFxuXHRbJ0hUTUxFbGVtZW50JywgJ21haW4nXSwgLy8gaW4gSUUgOS0xMSwgdGhpcyBpcyBIVE1MVW5rbm93bkVsZW1lbnRcblx0WydIVE1MTWFwRWxlbWVudCcsICdtYXAnXSxcblx0WydIVE1MTWFycXVlZUVsZW1lbnQnLCAnbWFycXVlZSddLFxuXHRbJ0hUTUxNZW51RWxlbWVudCcsICdtZW51J10sXG5cdFsnSFRNTE1ldGFFbGVtZW50JywgJ21ldGEnXSxcblx0WydIVE1MTWV0ZXJFbGVtZW50JywgJ21ldGVyJywgJ0hUTUxFbGVtZW50J10sIC8vIFNhZmFyaSA1LjFcblx0WydIVE1MTW9kRWxlbWVudCcsICdkZWwnXSxcblx0WydIVE1MTW9kRWxlbWVudCcsICdpbnMnXSxcblx0WydIVE1MT2JqZWN0RWxlbWVudCcsICdvYmplY3QnXSxcblx0WydIVE1MT0xpc3RFbGVtZW50JywgJ29sJ10sXG5cdFsnSFRNTE9wdEdyb3VwRWxlbWVudCcsICdvcHRncm91cCddLFxuXHRbJ0hUTUxPcHRpb25FbGVtZW50JywgJ29wdGlvbiddLFxuXHRbJ0hUTUxPdXRwdXRFbGVtZW50JywgJ291dHB1dCddLFxuXHRbJ0hUTUxQYXJhZ3JhcGhFbGVtZW50JywgJ3AnXSxcblx0WydIVE1MUGFyYW1FbGVtZW50JywgJ3BhcmFtJ10sXG5cdFsnSFRNTFBpY3R1cmVFbGVtZW50JywgJ3BpY3R1cmUnLCAnSFRNTEVsZW1lbnQnXSwgLy8gU2FmYXJpIDUuMVxuXHRbJ0hUTUxQcmVFbGVtZW50JywgJ3ByZSddLFxuXHRbJ0hUTUxQcm9ncmVzc0VsZW1lbnQnLCAncHJvZ3Jlc3MnLCAnSFRNTEVsZW1lbnQnXSwgLy8gU2FmYXJpIDUuMVxuXHRbJ0hUTUxRdW90ZUVsZW1lbnQnLCAncScsICdIVE1MQmxvY2txdW90ZUVsZW1lbnQnXSwgLy8gU2FmYXJpIDUuMVxuXHRbJ0hUTUxRdW90ZUVsZW1lbnQnLCAnYmxvY2txdW90ZScsICdIVE1MQmxvY2tFbGVtZW50JywgJ0hUTUxCbG9ja3F1b3RlRWxlbWVudCddLCAvLyBTYWZhcmkgNS4xXG5cdFsnSFRNTFNjcmlwdEVsZW1lbnQnLCAnc2NyaXB0J10sXG5cdFsnSFRNTFNlbGVjdEVsZW1lbnQnLCAnc2VsZWN0J10sXG5cdFsnSFRNTFNoYWRvd0VsZW1lbnQnLCAnc2hhZG93JywgJ0hUTUxFbGVtZW50J10sIC8vIFNhZmFyaSA1LjFcblx0WydIVE1MU291cmNlRWxlbWVudCcsICdzb3VyY2UnXSxcblx0WydIVE1MU3BhbkVsZW1lbnQnLCAnc3BhbicsICdIVE1MRWxlbWVudCddLCAvLyBTYWZhcmkgNS4xXG5cdFsnSFRNTFN0eWxlRWxlbWVudCcsICdzdHlsZSddLFxuXHRbJ0hUTUxUYWJsZUVsZW1lbnQnLCAndGFibGUnXSxcblx0WydIVE1MVGFibGVDYXB0aW9uRWxlbWVudCcsICdjYXB0aW9uJ10sXG5cdFsnSFRNTFRhYmxlQ2VsbEVsZW1lbnQnLCAndGQnLCAnSFRNTFRhYmxlRGF0YUNlbGxFbGVtZW50J10sXG5cdFsnSFRNTFRhYmxlQ2VsbEVsZW1lbnQnLCAndGgnLCAnSFRNTFRhYmxlSGVhZGVyQ2VsbEVsZW1lbnQnXSxcblx0WydIVE1MVGFibGVSb3dFbGVtZW50JywgJ3RyJ10sXG5cdFsnSFRNTFRhYmxlQ29sRWxlbWVudCcsICdjb2wnXSxcblx0WydIVE1MVGFibGVDb2xFbGVtZW50JywgJ2NvbGdyb3VwJ10sXG5cdFsnSFRNTFRhYmxlU2VjdGlvbkVsZW1lbnQnLCAndGJvZHknXSxcblx0WydIVE1MVGFibGVTZWN0aW9uRWxlbWVudCcsICd0aGVhZCddLFxuXHRbJ0hUTUxUYWJsZVNlY3Rpb25FbGVtZW50JywgJ3Rmb290J10sXG5cdFsnSFRNTFRlbXBsYXRlRWxlbWVudCcsICd0ZW1wbGF0ZScsICdIVE1MRWxlbWVudCddLCAvLyBTYWZhcmkgNS4xXG5cdFsnSFRNTFRleHRBcmVhRWxlbWVudCcsICd0ZXh0YXJlYSddLFxuXHRbJ0hUTUxUaW1lRWxlbWVudCcsICd0aW1lJywgJ0hUTUxFbGVtZW50J10sIC8vIFNhZmFyaSA1LjFcblx0WydIVE1MVGl0bGVFbGVtZW50JywgJ3RpdGxlJ10sXG5cdFsnSFRNTFRyYWNrRWxlbWVudCcsICd0cmFjaycsICdIVE1MRWxlbWVudCddLCAvLyBTYWZhcmkgNS4xXG5cdFsnSFRNTFVMaXN0RWxlbWVudCcsICd1bCddLFxuXHRbJ0hUTUxWaWRlb0VsZW1lbnQnLCAndmlkZW8nXSxcblx0WydIVE1MRWxlbWVudCcsICdhYmJyJ10sXG5cdFsnSFRNTEVsZW1lbnQnLCAnYWRkcmVzcyddLFxuXHRbJ0hUTUxFbGVtZW50JywgJ2FzaWRlJ10sXG5cdFsnSFRNTEVsZW1lbnQnLCAnYiddLFxuXHRbJ0hUTUxFbGVtZW50JywgJ2JkaSddLFxuXHRbJ0hUTUxFbGVtZW50JywgJ2JkbyddLFxuXHRbJ0hUTUxFbGVtZW50JywgJ2NvZGUnXSxcblx0WydIVE1MRWxlbWVudCcsICdkZCddLFxuXHRbJ0hUTUxEZXRhaWxzRWxlbWVudCcsICdkZXRhaWxzJywgJ0hUTUxFbGVtZW50J10sIC8vIFNhZmFyaSA1LjFcblx0WydIVE1MRWxlbWVudCcsICdkZm4nXSxcblx0WydIVE1MRWxlbWVudCcsICdkdCddLFxuXHRbJ0hUTUxFbGVtZW50JywgJ2VtJ10sXG5cdFsnSFRNTEVsZW1lbnQnLCAnZmlnY2FwdGlvbiddLFxuXHRbJ0hUTUxFbGVtZW50JywgJ2ZpZ3VyZSddLFxuXHRbJ0hUTUxFbGVtZW50JywgJ2Zvb3RlciddLFxuXHRbJ0hUTUxFbGVtZW50JywgJ2hlYWRlciddLFxuXHRbJ0hUTUxFbGVtZW50JywgJ2hncm91cCddLFxuXHRbJ0hUTUxFbGVtZW50JywgJ2knXSxcblx0WydIVE1MRWxlbWVudCcsICdrYmQnXSxcblx0WydIVE1MRWxlbWVudCcsICdtYXJrJ10sXG5cdFsnSFRNTEVsZW1lbnQnLCAnbmF2J10sXG5cdFsnSFRNTEVsZW1lbnQnLCAncnAnXSxcblx0WydIVE1MRWxlbWVudCcsICdydCddLFxuXHRbJ0hUTUxFbGVtZW50JywgJ3J1YnknXSxcblx0WydIVE1MRWxlbWVudCcsICdzJ10sXG5cdFsnSFRNTEVsZW1lbnQnLCAnc2FtcCddLFxuXHRbJ0hUTUxTbG90RWxlbWVudCcsICdzbG90JywgJ0hUTUxFbGVtZW50J10sIC8vIFNhZmFyaSA1LjFcblx0WydIVE1MRWxlbWVudCcsICdzbWFsbCddLFxuXHRbJ0hUTUxFbGVtZW50JywgJ3N0cm9uZyddLFxuXHRbJ0hUTUxFbGVtZW50JywgJ3N1bW1hcnknXSxcblx0WydIVE1MRWxlbWVudCcsICd1J10sXG5cdFsnSFRNTEVsZW1lbnQnLCAndmFyJ10sXG5cdFsnSFRNTEVsZW1lbnQnLCAnd2JyJ11cbl07XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVybiwgbWF4LXBhcmFtc1xudmFyIGdldENvbnN0cnVjdG9yID0gZnVuY3Rpb24gZ2V0VGFnQ29uc3RydWN0b3IodGFnLCBjb25zdHJ1Y3RvciwgdW5rbm93bikge1xuXHRpZiAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdHZhciBhY3R1YWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZykuY29uc3RydWN0b3I7XG5cdFx0aWYgKGFjdHVhbCAhPT0gdW5rbm93bikge1xuXHRcdFx0cmV0dXJuIGFjdHVhbDtcblx0XHR9XG5cdH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2V0RGF0YSgpIHtcblx0dmFyIHVua25vd24gPSBnbG9iYWwuSFRNTFVua25vd25FbGVtZW50O1xuXHRyZXR1cm4ge1xuXHRcdGFsbDogZ2xvYmFsLkhUTUxFbGVtZW50LFxuXHRcdGVsZW1lbnRzOiBtYXAoZXhwZWN0ZWRzLCBmdW5jdGlvbiAoZXhwZWN0ZWQpIHtcblx0XHRcdHZhciBjb25zdHJ1Y3Rvck5hbWUgPSBleHBlY3RlZFswXTtcblx0XHRcdHZhciB0YWcgPSBleHBlY3RlZFsxXTtcblx0XHRcdHZhciBhbHRlcm5hdGU7XG5cdFx0XHR2YXIgYWx0Q29uc3RydWN0b3I7XG5cdFx0XHRmb3IgKHZhciBpID0gMjsgaSA8IGFyZ3VtZW50cy5sZW5ndGggJiYgIWFsdENvbnN0cnVjdG9yOyBpICs9IDEpIHtcblx0XHRcdFx0YWx0ZXJuYXRlID0gZXhwZWN0ZWRbaV07XG5cdFx0XHRcdGFsdENvbnN0cnVjdG9yID0gYWx0ZXJuYXRlICYmIGdsb2JhbFthbHRlcm5hdGVdO1xuXHRcdFx0fVxuXHRcdFx0dmFyIGNvbnN0cnVjdG9yID0gZ2xvYmFsW2NvbnN0cnVjdG9yTmFtZV07XG5cblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdGNvbnN0cnVjdG9yOiBnZXRDb25zdHJ1Y3Rvcih0YWcsIGFsdENvbnN0cnVjdG9yIHx8IGNvbnN0cnVjdG9yLCB1bmtub3duKSxcblx0XHRcdFx0Y29uc3RydWN0b3JOYW1lOiBhbHRDb25zdHJ1Y3RvciA/IGFsdGVybmF0ZSA6IGNvbnN0cnVjdG9yTmFtZSxcblx0XHRcdFx0ZXhwZWN0ZWRDb25zdHJ1Y3RvcjogYWx0Q29uc3RydWN0b3IgfHwgY29uc3RydWN0b3IsXG5cdFx0XHRcdHRhZzogdGFnXG5cdFx0XHR9O1xuXHRcdH0pLFxuXHRcdHVua25vd246IHVua25vd25cblx0fTtcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59KTtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5QYXJzZXIgPSB2b2lkIDA7XG52YXIgVG9rZW5pemVyX2pzXzEgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4vVG9rZW5pemVyLmpzXCIpKTtcbnZhciBkZWNvZGVfanNfMSA9IHJlcXVpcmUoXCJlbnRpdGllcy9saWIvZGVjb2RlLmpzXCIpO1xudmFyIGZvcm1UYWdzID0gbmV3IFNldChbXG4gICAgXCJpbnB1dFwiLFxuICAgIFwib3B0aW9uXCIsXG4gICAgXCJvcHRncm91cFwiLFxuICAgIFwic2VsZWN0XCIsXG4gICAgXCJidXR0b25cIixcbiAgICBcImRhdGFsaXN0XCIsXG4gICAgXCJ0ZXh0YXJlYVwiLFxuXSk7XG52YXIgcFRhZyA9IG5ldyBTZXQoW1wicFwiXSk7XG52YXIgdGFibGVTZWN0aW9uVGFncyA9IG5ldyBTZXQoW1widGhlYWRcIiwgXCJ0Ym9keVwiXSk7XG52YXIgZGR0VGFncyA9IG5ldyBTZXQoW1wiZGRcIiwgXCJkdFwiXSk7XG52YXIgcnRwVGFncyA9IG5ldyBTZXQoW1wicnRcIiwgXCJycFwiXSk7XG52YXIgb3BlbkltcGxpZXNDbG9zZSA9IG5ldyBNYXAoW1xuICAgIFtcInRyXCIsIG5ldyBTZXQoW1widHJcIiwgXCJ0aFwiLCBcInRkXCJdKV0sXG4gICAgW1widGhcIiwgbmV3IFNldChbXCJ0aFwiXSldLFxuICAgIFtcInRkXCIsIG5ldyBTZXQoW1widGhlYWRcIiwgXCJ0aFwiLCBcInRkXCJdKV0sXG4gICAgW1wiYm9keVwiLCBuZXcgU2V0KFtcImhlYWRcIiwgXCJsaW5rXCIsIFwic2NyaXB0XCJdKV0sXG4gICAgW1wibGlcIiwgbmV3IFNldChbXCJsaVwiXSldLFxuICAgIFtcInBcIiwgcFRhZ10sXG4gICAgW1wiaDFcIiwgcFRhZ10sXG4gICAgW1wiaDJcIiwgcFRhZ10sXG4gICAgW1wiaDNcIiwgcFRhZ10sXG4gICAgW1wiaDRcIiwgcFRhZ10sXG4gICAgW1wiaDVcIiwgcFRhZ10sXG4gICAgW1wiaDZcIiwgcFRhZ10sXG4gICAgW1wic2VsZWN0XCIsIGZvcm1UYWdzXSxcbiAgICBbXCJpbnB1dFwiLCBmb3JtVGFnc10sXG4gICAgW1wib3V0cHV0XCIsIGZvcm1UYWdzXSxcbiAgICBbXCJidXR0b25cIiwgZm9ybVRhZ3NdLFxuICAgIFtcImRhdGFsaXN0XCIsIGZvcm1UYWdzXSxcbiAgICBbXCJ0ZXh0YXJlYVwiLCBmb3JtVGFnc10sXG4gICAgW1wib3B0aW9uXCIsIG5ldyBTZXQoW1wib3B0aW9uXCJdKV0sXG4gICAgW1wib3B0Z3JvdXBcIiwgbmV3IFNldChbXCJvcHRncm91cFwiLCBcIm9wdGlvblwiXSldLFxuICAgIFtcImRkXCIsIGRkdFRhZ3NdLFxuICAgIFtcImR0XCIsIGRkdFRhZ3NdLFxuICAgIFtcImFkZHJlc3NcIiwgcFRhZ10sXG4gICAgW1wiYXJ0aWNsZVwiLCBwVGFnXSxcbiAgICBbXCJhc2lkZVwiLCBwVGFnXSxcbiAgICBbXCJibG9ja3F1b3RlXCIsIHBUYWddLFxuICAgIFtcImRldGFpbHNcIiwgcFRhZ10sXG4gICAgW1wiZGl2XCIsIHBUYWddLFxuICAgIFtcImRsXCIsIHBUYWddLFxuICAgIFtcImZpZWxkc2V0XCIsIHBUYWddLFxuICAgIFtcImZpZ2NhcHRpb25cIiwgcFRhZ10sXG4gICAgW1wiZmlndXJlXCIsIHBUYWddLFxuICAgIFtcImZvb3RlclwiLCBwVGFnXSxcbiAgICBbXCJmb3JtXCIsIHBUYWddLFxuICAgIFtcImhlYWRlclwiLCBwVGFnXSxcbiAgICBbXCJoclwiLCBwVGFnXSxcbiAgICBbXCJtYWluXCIsIHBUYWddLFxuICAgIFtcIm5hdlwiLCBwVGFnXSxcbiAgICBbXCJvbFwiLCBwVGFnXSxcbiAgICBbXCJwcmVcIiwgcFRhZ10sXG4gICAgW1wic2VjdGlvblwiLCBwVGFnXSxcbiAgICBbXCJ0YWJsZVwiLCBwVGFnXSxcbiAgICBbXCJ1bFwiLCBwVGFnXSxcbiAgICBbXCJydFwiLCBydHBUYWdzXSxcbiAgICBbXCJycFwiLCBydHBUYWdzXSxcbiAgICBbXCJ0Ym9keVwiLCB0YWJsZVNlY3Rpb25UYWdzXSxcbiAgICBbXCJ0Zm9vdFwiLCB0YWJsZVNlY3Rpb25UYWdzXSxcbl0pO1xudmFyIHZvaWRFbGVtZW50cyA9IG5ldyBTZXQoW1xuICAgIFwiYXJlYVwiLFxuICAgIFwiYmFzZVwiLFxuICAgIFwiYmFzZWZvbnRcIixcbiAgICBcImJyXCIsXG4gICAgXCJjb2xcIixcbiAgICBcImNvbW1hbmRcIixcbiAgICBcImVtYmVkXCIsXG4gICAgXCJmcmFtZVwiLFxuICAgIFwiaHJcIixcbiAgICBcImltZ1wiLFxuICAgIFwiaW5wdXRcIixcbiAgICBcImlzaW5kZXhcIixcbiAgICBcImtleWdlblwiLFxuICAgIFwibGlua1wiLFxuICAgIFwibWV0YVwiLFxuICAgIFwicGFyYW1cIixcbiAgICBcInNvdXJjZVwiLFxuICAgIFwidHJhY2tcIixcbiAgICBcIndiclwiLFxuXSk7XG52YXIgZm9yZWlnbkNvbnRleHRFbGVtZW50cyA9IG5ldyBTZXQoW1wibWF0aFwiLCBcInN2Z1wiXSk7XG52YXIgaHRtbEludGVncmF0aW9uRWxlbWVudHMgPSBuZXcgU2V0KFtcbiAgICBcIm1pXCIsXG4gICAgXCJtb1wiLFxuICAgIFwibW5cIixcbiAgICBcIm1zXCIsXG4gICAgXCJtdGV4dFwiLFxuICAgIFwiYW5ub3RhdGlvbi14bWxcIixcbiAgICBcImZvcmVpZ25vYmplY3RcIixcbiAgICBcImRlc2NcIixcbiAgICBcInRpdGxlXCIsXG5dKTtcbnZhciByZU5hbWVFbmQgPSAvXFxzfFxcLy87XG52YXIgUGFyc2VyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFBhcnNlcihjYnMsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgLyoqIFRoZSBzdGFydCBpbmRleCBvZiB0aGUgbGFzdCBldmVudC4gKi9cbiAgICAgICAgdGhpcy5zdGFydEluZGV4ID0gMDtcbiAgICAgICAgLyoqIFRoZSBlbmQgaW5kZXggb2YgdGhlIGxhc3QgZXZlbnQuICovXG4gICAgICAgIHRoaXMuZW5kSW5kZXggPSAwO1xuICAgICAgICAvKipcbiAgICAgICAgICogU3RvcmUgdGhlIHN0YXJ0IGluZGV4IG9mIHRoZSBjdXJyZW50IG9wZW4gdGFnLFxuICAgICAgICAgKiBzbyB3ZSBjYW4gdXBkYXRlIHRoZSBzdGFydCBpbmRleCBmb3IgYXR0cmlidXRlcy5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMub3BlblRhZ1N0YXJ0ID0gMDtcbiAgICAgICAgdGhpcy50YWduYW1lID0gXCJcIjtcbiAgICAgICAgdGhpcy5hdHRyaWJuYW1lID0gXCJcIjtcbiAgICAgICAgdGhpcy5hdHRyaWJ2YWx1ZSA9IFwiXCI7XG4gICAgICAgIHRoaXMuYXR0cmlicyA9IG51bGw7XG4gICAgICAgIHRoaXMuc3RhY2sgPSBbXTtcbiAgICAgICAgdGhpcy5mb3JlaWduQ29udGV4dCA9IFtdO1xuICAgICAgICB0aGlzLmJ1ZmZlcnMgPSBbXTtcbiAgICAgICAgdGhpcy5idWZmZXJPZmZzZXQgPSAwO1xuICAgICAgICAvKiogVGhlIGluZGV4IG9mIHRoZSBsYXN0IHdyaXR0ZW4gYnVmZmVyLiBVc2VkIHdoZW4gcmVzdW1pbmcgYWZ0ZXIgYSBgcGF1c2UoKWAuICovXG4gICAgICAgIHRoaXMud3JpdGVJbmRleCA9IDA7XG4gICAgICAgIC8qKiBJbmRpY2F0ZXMgd2hldGhlciB0aGUgcGFyc2VyIGhhcyBmaW5pc2hlZCBydW5uaW5nIC8gYC5lbmRgIGhhcyBiZWVuIGNhbGxlZC4gKi9cbiAgICAgICAgdGhpcy5lbmRlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmNicyA9IGNicyAhPT0gbnVsbCAmJiBjYnMgIT09IHZvaWQgMCA/IGNicyA6IHt9O1xuICAgICAgICB0aGlzLmxvd2VyQ2FzZVRhZ05hbWVzID0gKF9hID0gb3B0aW9ucy5sb3dlckNhc2VUYWdzKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAhb3B0aW9ucy54bWxNb2RlO1xuICAgICAgICB0aGlzLmxvd2VyQ2FzZUF0dHJpYnV0ZU5hbWVzID1cbiAgICAgICAgICAgIChfYiA9IG9wdGlvbnMubG93ZXJDYXNlQXR0cmlidXRlTmFtZXMpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6ICFvcHRpb25zLnhtbE1vZGU7XG4gICAgICAgIHRoaXMudG9rZW5pemVyID0gbmV3ICgoX2MgPSBvcHRpb25zLlRva2VuaXplcikgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogVG9rZW5pemVyX2pzXzEuZGVmYXVsdCkodGhpcy5vcHRpb25zLCB0aGlzKTtcbiAgICAgICAgKF9lID0gKF9kID0gdGhpcy5jYnMpLm9ucGFyc2VyaW5pdCkgPT09IG51bGwgfHwgX2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9lLmNhbGwoX2QsIHRoaXMpO1xuICAgIH1cbiAgICAvLyBUb2tlbml6ZXIgZXZlbnQgaGFuZGxlcnNcbiAgICAvKiogQGludGVybmFsICovXG4gICAgUGFyc2VyLnByb3RvdHlwZS5vbnRleHQgPSBmdW5jdGlvbiAoc3RhcnQsIGVuZEluZGV4KSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIHZhciBkYXRhID0gdGhpcy5nZXRTbGljZShzdGFydCwgZW5kSW5kZXgpO1xuICAgICAgICB0aGlzLmVuZEluZGV4ID0gZW5kSW5kZXggLSAxO1xuICAgICAgICAoX2IgPSAoX2EgPSB0aGlzLmNicykub250ZXh0KSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbChfYSwgZGF0YSk7XG4gICAgICAgIHRoaXMuc3RhcnRJbmRleCA9IGVuZEluZGV4O1xuICAgIH07XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIFBhcnNlci5wcm90b3R5cGUub250ZXh0ZW50aXR5ID0gZnVuY3Rpb24gKGNwKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIC8qXG4gICAgICAgICAqIEVudGl0aWVzIGNhbiBiZSBlbWl0dGVkIG9uIHRoZSBjaGFyYWN0ZXIsIG9yIGRpcmVjdGx5IGFmdGVyLlxuICAgICAgICAgKiBXZSB1c2UgdGhlIHNlY3Rpb24gc3RhcnQgaGVyZSB0byBnZXQgYWNjdXJhdGUgaW5kaWNlcy5cbiAgICAgICAgICovXG4gICAgICAgIHZhciBpbmRleCA9IHRoaXMudG9rZW5pemVyLmdldFNlY3Rpb25TdGFydCgpO1xuICAgICAgICB0aGlzLmVuZEluZGV4ID0gaW5kZXggLSAxO1xuICAgICAgICAoX2IgPSAoX2EgPSB0aGlzLmNicykub250ZXh0KSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbChfYSwgKDAsIGRlY29kZV9qc18xLmZyb21Db2RlUG9pbnQpKGNwKSk7XG4gICAgICAgIHRoaXMuc3RhcnRJbmRleCA9IGluZGV4O1xuICAgIH07XG4gICAgUGFyc2VyLnByb3RvdHlwZS5pc1ZvaWRFbGVtZW50ID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuICF0aGlzLm9wdGlvbnMueG1sTW9kZSAmJiB2b2lkRWxlbWVudHMuaGFzKG5hbWUpO1xuICAgIH07XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIFBhcnNlci5wcm90b3R5cGUub25vcGVudGFnbmFtZSA9IGZ1bmN0aW9uIChzdGFydCwgZW5kSW5kZXgpIHtcbiAgICAgICAgdGhpcy5lbmRJbmRleCA9IGVuZEluZGV4O1xuICAgICAgICB2YXIgbmFtZSA9IHRoaXMuZ2V0U2xpY2Uoc3RhcnQsIGVuZEluZGV4KTtcbiAgICAgICAgaWYgKHRoaXMubG93ZXJDYXNlVGFnTmFtZXMpIHtcbiAgICAgICAgICAgIG5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5lbWl0T3BlblRhZyhuYW1lKTtcbiAgICB9O1xuICAgIFBhcnNlci5wcm90b3R5cGUuZW1pdE9wZW5UYWcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYywgX2Q7XG4gICAgICAgIHRoaXMub3BlblRhZ1N0YXJ0ID0gdGhpcy5zdGFydEluZGV4O1xuICAgICAgICB0aGlzLnRhZ25hbWUgPSBuYW1lO1xuICAgICAgICB2YXIgaW1wbGllc0Nsb3NlID0gIXRoaXMub3B0aW9ucy54bWxNb2RlICYmIG9wZW5JbXBsaWVzQ2xvc2UuZ2V0KG5hbWUpO1xuICAgICAgICBpZiAoaW1wbGllc0Nsb3NlKSB7XG4gICAgICAgICAgICB3aGlsZSAodGhpcy5zdGFjay5sZW5ndGggPiAwICYmXG4gICAgICAgICAgICAgICAgaW1wbGllc0Nsb3NlLmhhcyh0aGlzLnN0YWNrW3RoaXMuc3RhY2subGVuZ3RoIC0gMV0pKSB7XG4gICAgICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSB0aGlzLnN0YWNrLnBvcCgpO1xuICAgICAgICAgICAgICAgIChfYiA9IChfYSA9IHRoaXMuY2JzKS5vbmNsb3NldGFnKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbChfYSwgZWxlbWVudCwgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLmlzVm9pZEVsZW1lbnQobmFtZSkpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhY2sucHVzaChuYW1lKTtcbiAgICAgICAgICAgIGlmIChmb3JlaWduQ29udGV4dEVsZW1lbnRzLmhhcyhuYW1lKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZm9yZWlnbkNvbnRleHQucHVzaCh0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGh0bWxJbnRlZ3JhdGlvbkVsZW1lbnRzLmhhcyhuYW1lKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZm9yZWlnbkNvbnRleHQucHVzaChmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgKF9kID0gKF9jID0gdGhpcy5jYnMpLm9ub3BlbnRhZ25hbWUpID09PSBudWxsIHx8IF9kID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZC5jYWxsKF9jLCBuYW1lKTtcbiAgICAgICAgaWYgKHRoaXMuY2JzLm9ub3BlbnRhZylcbiAgICAgICAgICAgIHRoaXMuYXR0cmlicyA9IHt9O1xuICAgIH07XG4gICAgUGFyc2VyLnByb3RvdHlwZS5lbmRPcGVuVGFnID0gZnVuY3Rpb24gKGlzSW1wbGllZCkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICB0aGlzLnN0YXJ0SW5kZXggPSB0aGlzLm9wZW5UYWdTdGFydDtcbiAgICAgICAgaWYgKHRoaXMuYXR0cmlicykge1xuICAgICAgICAgICAgKF9iID0gKF9hID0gdGhpcy5jYnMpLm9ub3BlbnRhZykgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwoX2EsIHRoaXMudGFnbmFtZSwgdGhpcy5hdHRyaWJzLCBpc0ltcGxpZWQpO1xuICAgICAgICAgICAgdGhpcy5hdHRyaWJzID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5jYnMub25jbG9zZXRhZyAmJiB0aGlzLmlzVm9pZEVsZW1lbnQodGhpcy50YWduYW1lKSkge1xuICAgICAgICAgICAgdGhpcy5jYnMub25jbG9zZXRhZyh0aGlzLnRhZ25hbWUsIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudGFnbmFtZSA9IFwiXCI7XG4gICAgfTtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgUGFyc2VyLnByb3RvdHlwZS5vbm9wZW50YWdlbmQgPSBmdW5jdGlvbiAoZW5kSW5kZXgpIHtcbiAgICAgICAgdGhpcy5lbmRJbmRleCA9IGVuZEluZGV4O1xuICAgICAgICB0aGlzLmVuZE9wZW5UYWcoZmFsc2UpO1xuICAgICAgICAvLyBTZXQgYHN0YXJ0SW5kZXhgIGZvciBuZXh0IG5vZGVcbiAgICAgICAgdGhpcy5zdGFydEluZGV4ID0gZW5kSW5kZXggKyAxO1xuICAgIH07XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIFBhcnNlci5wcm90b3R5cGUub25jbG9zZXRhZyA9IGZ1bmN0aW9uIChzdGFydCwgZW5kSW5kZXgpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZSwgX2Y7XG4gICAgICAgIHRoaXMuZW5kSW5kZXggPSBlbmRJbmRleDtcbiAgICAgICAgdmFyIG5hbWUgPSB0aGlzLmdldFNsaWNlKHN0YXJ0LCBlbmRJbmRleCk7XG4gICAgICAgIGlmICh0aGlzLmxvd2VyQ2FzZVRhZ05hbWVzKSB7XG4gICAgICAgICAgICBuYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmb3JlaWduQ29udGV4dEVsZW1lbnRzLmhhcyhuYW1lKSB8fFxuICAgICAgICAgICAgaHRtbEludGVncmF0aW9uRWxlbWVudHMuaGFzKG5hbWUpKSB7XG4gICAgICAgICAgICB0aGlzLmZvcmVpZ25Db250ZXh0LnBvcCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5pc1ZvaWRFbGVtZW50KG5hbWUpKSB7XG4gICAgICAgICAgICB2YXIgcG9zID0gdGhpcy5zdGFjay5sYXN0SW5kZXhPZihuYW1lKTtcbiAgICAgICAgICAgIGlmIChwb3MgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY2JzLm9uY2xvc2V0YWcpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvdW50ID0gdGhpcy5zdGFjay5sZW5ndGggLSBwb3M7XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChjb3VudC0tKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBXZSBrbm93IHRoZSBzdGFjayBoYXMgc3VmZmljaWVudCBlbGVtZW50cy5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2JzLm9uY2xvc2V0YWcodGhpcy5zdGFjay5wb3AoKSwgY291bnQgIT09IDApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGFjay5sZW5ndGggPSBwb3M7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICghdGhpcy5vcHRpb25zLnhtbE1vZGUgJiYgbmFtZSA9PT0gXCJwXCIpIHtcbiAgICAgICAgICAgICAgICAvLyBJbXBsaWNpdCBvcGVuIGJlZm9yZSBjbG9zZVxuICAgICAgICAgICAgICAgIHRoaXMuZW1pdE9wZW5UYWcoXCJwXCIpO1xuICAgICAgICAgICAgICAgIHRoaXMuY2xvc2VDdXJyZW50VGFnKHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCF0aGlzLm9wdGlvbnMueG1sTW9kZSAmJiBuYW1lID09PSBcImJyXCIpIHtcbiAgICAgICAgICAgIC8vIFdlIGNhbid0IHVzZSBgZW1pdE9wZW5UYWdgIGZvciBpbXBsaWNpdCBvcGVuLCBhcyBgYnJgIHdvdWxkIGJlIGltcGxpY2l0bHkgY2xvc2VkLlxuICAgICAgICAgICAgKF9iID0gKF9hID0gdGhpcy5jYnMpLm9ub3BlbnRhZ25hbWUpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jYWxsKF9hLCBcImJyXCIpO1xuICAgICAgICAgICAgKF9kID0gKF9jID0gdGhpcy5jYnMpLm9ub3BlbnRhZykgPT09IG51bGwgfHwgX2QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kLmNhbGwoX2MsIFwiYnJcIiwge30sIHRydWUpO1xuICAgICAgICAgICAgKF9mID0gKF9lID0gdGhpcy5jYnMpLm9uY2xvc2V0YWcpID09PSBudWxsIHx8IF9mID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZi5jYWxsKF9lLCBcImJyXCIsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBTZXQgYHN0YXJ0SW5kZXhgIGZvciBuZXh0IG5vZGVcbiAgICAgICAgdGhpcy5zdGFydEluZGV4ID0gZW5kSW5kZXggKyAxO1xuICAgIH07XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIFBhcnNlci5wcm90b3R5cGUub25zZWxmY2xvc2luZ3RhZyA9IGZ1bmN0aW9uIChlbmRJbmRleCkge1xuICAgICAgICB0aGlzLmVuZEluZGV4ID0gZW5kSW5kZXg7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMueG1sTW9kZSB8fFxuICAgICAgICAgICAgdGhpcy5vcHRpb25zLnJlY29nbml6ZVNlbGZDbG9zaW5nIHx8XG4gICAgICAgICAgICB0aGlzLmZvcmVpZ25Db250ZXh0W3RoaXMuZm9yZWlnbkNvbnRleHQubGVuZ3RoIC0gMV0pIHtcbiAgICAgICAgICAgIHRoaXMuY2xvc2VDdXJyZW50VGFnKGZhbHNlKTtcbiAgICAgICAgICAgIC8vIFNldCBgc3RhcnRJbmRleGAgZm9yIG5leHQgbm9kZVxuICAgICAgICAgICAgdGhpcy5zdGFydEluZGV4ID0gZW5kSW5kZXggKyAxO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gSWdub3JlIHRoZSBmYWN0IHRoYXQgdGhlIHRhZyBpcyBzZWxmLWNsb3NpbmcuXG4gICAgICAgICAgICB0aGlzLm9ub3BlbnRhZ2VuZChlbmRJbmRleCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFBhcnNlci5wcm90b3R5cGUuY2xvc2VDdXJyZW50VGFnID0gZnVuY3Rpb24gKGlzT3BlbkltcGxpZWQpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgdmFyIG5hbWUgPSB0aGlzLnRhZ25hbWU7XG4gICAgICAgIHRoaXMuZW5kT3BlblRhZyhpc09wZW5JbXBsaWVkKTtcbiAgICAgICAgLy8gU2VsZi1jbG9zaW5nIHRhZ3Mgd2lsbCBiZSBvbiB0aGUgdG9wIG9mIHRoZSBzdGFja1xuICAgICAgICBpZiAodGhpcy5zdGFja1t0aGlzLnN0YWNrLmxlbmd0aCAtIDFdID09PSBuYW1lKSB7XG4gICAgICAgICAgICAvLyBJZiB0aGUgb3BlbmluZyB0YWcgaXNuJ3QgaW1wbGllZCwgdGhlIGNsb3NpbmcgdGFnIGhhcyB0byBiZSBpbXBsaWVkLlxuICAgICAgICAgICAgKF9iID0gKF9hID0gdGhpcy5jYnMpLm9uY2xvc2V0YWcpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jYWxsKF9hLCBuYW1lLCAhaXNPcGVuSW1wbGllZCk7XG4gICAgICAgICAgICB0aGlzLnN0YWNrLnBvcCgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgUGFyc2VyLnByb3RvdHlwZS5vbmF0dHJpYm5hbWUgPSBmdW5jdGlvbiAoc3RhcnQsIGVuZEluZGV4KSB7XG4gICAgICAgIHRoaXMuc3RhcnRJbmRleCA9IHN0YXJ0O1xuICAgICAgICB2YXIgbmFtZSA9IHRoaXMuZ2V0U2xpY2Uoc3RhcnQsIGVuZEluZGV4KTtcbiAgICAgICAgdGhpcy5hdHRyaWJuYW1lID0gdGhpcy5sb3dlckNhc2VBdHRyaWJ1dGVOYW1lc1xuICAgICAgICAgICAgPyBuYW1lLnRvTG93ZXJDYXNlKClcbiAgICAgICAgICAgIDogbmFtZTtcbiAgICB9O1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBQYXJzZXIucHJvdG90eXBlLm9uYXR0cmliZGF0YSA9IGZ1bmN0aW9uIChzdGFydCwgZW5kSW5kZXgpIHtcbiAgICAgICAgdGhpcy5hdHRyaWJ2YWx1ZSArPSB0aGlzLmdldFNsaWNlKHN0YXJ0LCBlbmRJbmRleCk7XG4gICAgfTtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgUGFyc2VyLnByb3RvdHlwZS5vbmF0dHJpYmVudGl0eSA9IGZ1bmN0aW9uIChjcCkge1xuICAgICAgICB0aGlzLmF0dHJpYnZhbHVlICs9ICgwLCBkZWNvZGVfanNfMS5mcm9tQ29kZVBvaW50KShjcCk7XG4gICAgfTtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgUGFyc2VyLnByb3RvdHlwZS5vbmF0dHJpYmVuZCA9IGZ1bmN0aW9uIChxdW90ZSwgZW5kSW5kZXgpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgdGhpcy5lbmRJbmRleCA9IGVuZEluZGV4O1xuICAgICAgICAoX2IgPSAoX2EgPSB0aGlzLmNicykub25hdHRyaWJ1dGUpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jYWxsKF9hLCB0aGlzLmF0dHJpYm5hbWUsIHRoaXMuYXR0cmlidmFsdWUsIHF1b3RlID09PSBUb2tlbml6ZXJfanNfMS5RdW90ZVR5cGUuRG91YmxlXG4gICAgICAgICAgICA/ICdcIidcbiAgICAgICAgICAgIDogcXVvdGUgPT09IFRva2VuaXplcl9qc18xLlF1b3RlVHlwZS5TaW5nbGVcbiAgICAgICAgICAgICAgICA/IFwiJ1wiXG4gICAgICAgICAgICAgICAgOiBxdW90ZSA9PT0gVG9rZW5pemVyX2pzXzEuUXVvdGVUeXBlLk5vVmFsdWVcbiAgICAgICAgICAgICAgICAgICAgPyB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgOiBudWxsKTtcbiAgICAgICAgaWYgKHRoaXMuYXR0cmlicyAmJlxuICAgICAgICAgICAgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLmF0dHJpYnMsIHRoaXMuYXR0cmlibmFtZSkpIHtcbiAgICAgICAgICAgIHRoaXMuYXR0cmlic1t0aGlzLmF0dHJpYm5hbWVdID0gdGhpcy5hdHRyaWJ2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmF0dHJpYnZhbHVlID0gXCJcIjtcbiAgICB9O1xuICAgIFBhcnNlci5wcm90b3R5cGUuZ2V0SW5zdHJ1Y3Rpb25OYW1lID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBpbmRleCA9IHZhbHVlLnNlYXJjaChyZU5hbWVFbmQpO1xuICAgICAgICB2YXIgbmFtZSA9IGluZGV4IDwgMCA/IHZhbHVlIDogdmFsdWUuc3Vic3RyKDAsIGluZGV4KTtcbiAgICAgICAgaWYgKHRoaXMubG93ZXJDYXNlVGFnTmFtZXMpIHtcbiAgICAgICAgICAgIG5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5hbWU7XG4gICAgfTtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgUGFyc2VyLnByb3RvdHlwZS5vbmRlY2xhcmF0aW9uID0gZnVuY3Rpb24gKHN0YXJ0LCBlbmRJbmRleCkge1xuICAgICAgICB0aGlzLmVuZEluZGV4ID0gZW5kSW5kZXg7XG4gICAgICAgIHZhciB2YWx1ZSA9IHRoaXMuZ2V0U2xpY2Uoc3RhcnQsIGVuZEluZGV4KTtcbiAgICAgICAgaWYgKHRoaXMuY2JzLm9ucHJvY2Vzc2luZ2luc3RydWN0aW9uKSB7XG4gICAgICAgICAgICB2YXIgbmFtZSA9IHRoaXMuZ2V0SW5zdHJ1Y3Rpb25OYW1lKHZhbHVlKTtcbiAgICAgICAgICAgIHRoaXMuY2JzLm9ucHJvY2Vzc2luZ2luc3RydWN0aW9uKFwiIVwiLmNvbmNhdChuYW1lKSwgXCIhXCIuY29uY2F0KHZhbHVlKSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gU2V0IGBzdGFydEluZGV4YCBmb3IgbmV4dCBub2RlXG4gICAgICAgIHRoaXMuc3RhcnRJbmRleCA9IGVuZEluZGV4ICsgMTtcbiAgICB9O1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBQYXJzZXIucHJvdG90eXBlLm9ucHJvY2Vzc2luZ2luc3RydWN0aW9uID0gZnVuY3Rpb24gKHN0YXJ0LCBlbmRJbmRleCkge1xuICAgICAgICB0aGlzLmVuZEluZGV4ID0gZW5kSW5kZXg7XG4gICAgICAgIHZhciB2YWx1ZSA9IHRoaXMuZ2V0U2xpY2Uoc3RhcnQsIGVuZEluZGV4KTtcbiAgICAgICAgaWYgKHRoaXMuY2JzLm9ucHJvY2Vzc2luZ2luc3RydWN0aW9uKSB7XG4gICAgICAgICAgICB2YXIgbmFtZSA9IHRoaXMuZ2V0SW5zdHJ1Y3Rpb25OYW1lKHZhbHVlKTtcbiAgICAgICAgICAgIHRoaXMuY2JzLm9ucHJvY2Vzc2luZ2luc3RydWN0aW9uKFwiP1wiLmNvbmNhdChuYW1lKSwgXCI/XCIuY29uY2F0KHZhbHVlKSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gU2V0IGBzdGFydEluZGV4YCBmb3IgbmV4dCBub2RlXG4gICAgICAgIHRoaXMuc3RhcnRJbmRleCA9IGVuZEluZGV4ICsgMTtcbiAgICB9O1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBQYXJzZXIucHJvdG90eXBlLm9uY29tbWVudCA9IGZ1bmN0aW9uIChzdGFydCwgZW5kSW5kZXgsIG9mZnNldCkge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYywgX2Q7XG4gICAgICAgIHRoaXMuZW5kSW5kZXggPSBlbmRJbmRleDtcbiAgICAgICAgKF9iID0gKF9hID0gdGhpcy5jYnMpLm9uY29tbWVudCkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwoX2EsIHRoaXMuZ2V0U2xpY2Uoc3RhcnQsIGVuZEluZGV4IC0gb2Zmc2V0KSk7XG4gICAgICAgIChfZCA9IChfYyA9IHRoaXMuY2JzKS5vbmNvbW1lbnRlbmQpID09PSBudWxsIHx8IF9kID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZC5jYWxsKF9jKTtcbiAgICAgICAgLy8gU2V0IGBzdGFydEluZGV4YCBmb3IgbmV4dCBub2RlXG4gICAgICAgIHRoaXMuc3RhcnRJbmRleCA9IGVuZEluZGV4ICsgMTtcbiAgICB9O1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBQYXJzZXIucHJvdG90eXBlLm9uY2RhdGEgPSBmdW5jdGlvbiAoc3RhcnQsIGVuZEluZGV4LCBvZmZzZXQpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZSwgX2YsIF9nLCBfaCwgX2osIF9rO1xuICAgICAgICB0aGlzLmVuZEluZGV4ID0gZW5kSW5kZXg7XG4gICAgICAgIHZhciB2YWx1ZSA9IHRoaXMuZ2V0U2xpY2Uoc3RhcnQsIGVuZEluZGV4IC0gb2Zmc2V0KTtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy54bWxNb2RlIHx8IHRoaXMub3B0aW9ucy5yZWNvZ25pemVDREFUQSkge1xuICAgICAgICAgICAgKF9iID0gKF9hID0gdGhpcy5jYnMpLm9uY2RhdGFzdGFydCkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwoX2EpO1xuICAgICAgICAgICAgKF9kID0gKF9jID0gdGhpcy5jYnMpLm9udGV4dCkgPT09IG51bGwgfHwgX2QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kLmNhbGwoX2MsIHZhbHVlKTtcbiAgICAgICAgICAgIChfZiA9IChfZSA9IHRoaXMuY2JzKS5vbmNkYXRhZW5kKSA9PT0gbnVsbCB8fCBfZiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2YuY2FsbChfZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAoX2ggPSAoX2cgPSB0aGlzLmNicykub25jb21tZW50KSA9PT0gbnVsbCB8fCBfaCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2guY2FsbChfZywgXCJbQ0RBVEFbXCIuY29uY2F0KHZhbHVlLCBcIl1dXCIpKTtcbiAgICAgICAgICAgIChfayA9IChfaiA9IHRoaXMuY2JzKS5vbmNvbW1lbnRlbmQpID09PSBudWxsIHx8IF9rID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfay5jYWxsKF9qKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBTZXQgYHN0YXJ0SW5kZXhgIGZvciBuZXh0IG5vZGVcbiAgICAgICAgdGhpcy5zdGFydEluZGV4ID0gZW5kSW5kZXggKyAxO1xuICAgIH07XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIFBhcnNlci5wcm90b3R5cGUub25lbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIGlmICh0aGlzLmNicy5vbmNsb3NldGFnKSB7XG4gICAgICAgICAgICAvLyBTZXQgdGhlIGVuZCBpbmRleCBmb3IgYWxsIHJlbWFpbmluZyB0YWdzXG4gICAgICAgICAgICB0aGlzLmVuZEluZGV4ID0gdGhpcy5zdGFydEluZGV4O1xuICAgICAgICAgICAgZm9yICh2YXIgaW5kZXggPSB0aGlzLnN0YWNrLmxlbmd0aDsgaW5kZXggPiAwOyB0aGlzLmNicy5vbmNsb3NldGFnKHRoaXMuc3RhY2tbLS1pbmRleF0sIHRydWUpKVxuICAgICAgICAgICAgICAgIDtcbiAgICAgICAgfVxuICAgICAgICAoX2IgPSAoX2EgPSB0aGlzLmNicykub25lbmQpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jYWxsKF9hKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJlc2V0cyB0aGUgcGFyc2VyIHRvIGEgYmxhbmsgc3RhdGUsIHJlYWR5IHRvIHBhcnNlIGEgbmV3IEhUTUwgZG9jdW1lbnRcbiAgICAgKi9cbiAgICBQYXJzZXIucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYywgX2Q7XG4gICAgICAgIChfYiA9IChfYSA9IHRoaXMuY2JzKS5vbnJlc2V0KSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbChfYSk7XG4gICAgICAgIHRoaXMudG9rZW5pemVyLnJlc2V0KCk7XG4gICAgICAgIHRoaXMudGFnbmFtZSA9IFwiXCI7XG4gICAgICAgIHRoaXMuYXR0cmlibmFtZSA9IFwiXCI7XG4gICAgICAgIHRoaXMuYXR0cmlicyA9IG51bGw7XG4gICAgICAgIHRoaXMuc3RhY2subGVuZ3RoID0gMDtcbiAgICAgICAgdGhpcy5zdGFydEluZGV4ID0gMDtcbiAgICAgICAgdGhpcy5lbmRJbmRleCA9IDA7XG4gICAgICAgIChfZCA9IChfYyA9IHRoaXMuY2JzKS5vbnBhcnNlcmluaXQpID09PSBudWxsIHx8IF9kID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZC5jYWxsKF9jLCB0aGlzKTtcbiAgICAgICAgdGhpcy5idWZmZXJzLmxlbmd0aCA9IDA7XG4gICAgICAgIHRoaXMuYnVmZmVyT2Zmc2V0ID0gMDtcbiAgICAgICAgdGhpcy53cml0ZUluZGV4ID0gMDtcbiAgICAgICAgdGhpcy5lbmRlZCA9IGZhbHNlO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmVzZXRzIHRoZSBwYXJzZXIsIHRoZW4gcGFyc2VzIGEgY29tcGxldGUgZG9jdW1lbnQgYW5kXG4gICAgICogcHVzaGVzIGl0IHRvIHRoZSBoYW5kbGVyLlxuICAgICAqXG4gICAgICogQHBhcmFtIGRhdGEgRG9jdW1lbnQgdG8gcGFyc2UuXG4gICAgICovXG4gICAgUGFyc2VyLnByb3RvdHlwZS5wYXJzZUNvbXBsZXRlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgICAgICB0aGlzLmVuZChkYXRhKTtcbiAgICB9O1xuICAgIFBhcnNlci5wcm90b3R5cGUuZ2V0U2xpY2UgPSBmdW5jdGlvbiAoc3RhcnQsIGVuZCkge1xuICAgICAgICB3aGlsZSAoc3RhcnQgLSB0aGlzLmJ1ZmZlck9mZnNldCA+PSB0aGlzLmJ1ZmZlcnNbMF0ubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLnNoaWZ0QnVmZmVyKCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHNsaWNlID0gdGhpcy5idWZmZXJzWzBdLnNsaWNlKHN0YXJ0IC0gdGhpcy5idWZmZXJPZmZzZXQsIGVuZCAtIHRoaXMuYnVmZmVyT2Zmc2V0KTtcbiAgICAgICAgd2hpbGUgKGVuZCAtIHRoaXMuYnVmZmVyT2Zmc2V0ID4gdGhpcy5idWZmZXJzWzBdLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5zaGlmdEJ1ZmZlcigpO1xuICAgICAgICAgICAgc2xpY2UgKz0gdGhpcy5idWZmZXJzWzBdLnNsaWNlKDAsIGVuZCAtIHRoaXMuYnVmZmVyT2Zmc2V0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2xpY2U7XG4gICAgfTtcbiAgICBQYXJzZXIucHJvdG90eXBlLnNoaWZ0QnVmZmVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmJ1ZmZlck9mZnNldCArPSB0aGlzLmJ1ZmZlcnNbMF0ubGVuZ3RoO1xuICAgICAgICB0aGlzLndyaXRlSW5kZXgtLTtcbiAgICAgICAgdGhpcy5idWZmZXJzLnNoaWZ0KCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBQYXJzZXMgYSBjaHVuayBvZiBkYXRhIGFuZCBjYWxscyB0aGUgY29ycmVzcG9uZGluZyBjYWxsYmFja3MuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY2h1bmsgQ2h1bmsgdG8gcGFyc2UuXG4gICAgICovXG4gICAgUGFyc2VyLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIChjaHVuaykge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICBpZiAodGhpcy5lbmRlZCkge1xuICAgICAgICAgICAgKF9iID0gKF9hID0gdGhpcy5jYnMpLm9uZXJyb3IpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jYWxsKF9hLCBuZXcgRXJyb3IoXCIud3JpdGUoKSBhZnRlciBkb25lIVwiKSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5idWZmZXJzLnB1c2goY2h1bmspO1xuICAgICAgICBpZiAodGhpcy50b2tlbml6ZXIucnVubmluZykge1xuICAgICAgICAgICAgdGhpcy50b2tlbml6ZXIud3JpdGUoY2h1bmspO1xuICAgICAgICAgICAgdGhpcy53cml0ZUluZGV4Kys7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFBhcnNlcyB0aGUgZW5kIG9mIHRoZSBidWZmZXIgYW5kIGNsZWFycyB0aGUgc3RhY2ssIGNhbGxzIG9uZW5kLlxuICAgICAqXG4gICAgICogQHBhcmFtIGNodW5rIE9wdGlvbmFsIGZpbmFsIGNodW5rIHRvIHBhcnNlLlxuICAgICAqL1xuICAgIFBhcnNlci5wcm90b3R5cGUuZW5kID0gZnVuY3Rpb24gKGNodW5rKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIGlmICh0aGlzLmVuZGVkKSB7XG4gICAgICAgICAgICAoX2IgPSAoX2EgPSB0aGlzLmNicykub25lcnJvcikgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwoX2EsIG5ldyBFcnJvcihcIi5lbmQoKSBhZnRlciBkb25lIVwiKSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNodW5rKVxuICAgICAgICAgICAgdGhpcy53cml0ZShjaHVuayk7XG4gICAgICAgIHRoaXMuZW5kZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLnRva2VuaXplci5lbmQoKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFBhdXNlcyBwYXJzaW5nLiBUaGUgcGFyc2VyIHdvbid0IGVtaXQgZXZlbnRzIHVudGlsIGByZXN1bWVgIGlzIGNhbGxlZC5cbiAgICAgKi9cbiAgICBQYXJzZXIucHJvdG90eXBlLnBhdXNlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnRva2VuaXplci5wYXVzZSgpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmVzdW1lcyBwYXJzaW5nIGFmdGVyIGBwYXVzZWAgd2FzIGNhbGxlZC5cbiAgICAgKi9cbiAgICBQYXJzZXIucHJvdG90eXBlLnJlc3VtZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy50b2tlbml6ZXIucmVzdW1lKCk7XG4gICAgICAgIHdoaWxlICh0aGlzLnRva2VuaXplci5ydW5uaW5nICYmXG4gICAgICAgICAgICB0aGlzLndyaXRlSW5kZXggPCB0aGlzLmJ1ZmZlcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLnRva2VuaXplci53cml0ZSh0aGlzLmJ1ZmZlcnNbdGhpcy53cml0ZUluZGV4KytdKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5lbmRlZClcbiAgICAgICAgICAgIHRoaXMudG9rZW5pemVyLmVuZCgpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQWxpYXMgb2YgYHdyaXRlYCwgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LlxuICAgICAqXG4gICAgICogQHBhcmFtIGNodW5rIENodW5rIHRvIHBhcnNlLlxuICAgICAqIEBkZXByZWNhdGVkXG4gICAgICovXG4gICAgUGFyc2VyLnByb3RvdHlwZS5wYXJzZUNodW5rID0gZnVuY3Rpb24gKGNodW5rKSB7XG4gICAgICAgIHRoaXMud3JpdGUoY2h1bmspO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQWxpYXMgb2YgYGVuZGAsIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjaHVuayBPcHRpb25hbCBmaW5hbCBjaHVuayB0byBwYXJzZS5cbiAgICAgKiBAZGVwcmVjYXRlZFxuICAgICAqL1xuICAgIFBhcnNlci5wcm90b3R5cGUuZG9uZSA9IGZ1bmN0aW9uIChjaHVuaykge1xuICAgICAgICB0aGlzLmVuZChjaHVuayk7XG4gICAgfTtcbiAgICByZXR1cm4gUGFyc2VyO1xufSgpKTtcbmV4cG9ydHMuUGFyc2VyID0gUGFyc2VyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UGFyc2VyLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5RdW90ZVR5cGUgPSB2b2lkIDA7XG52YXIgZGVjb2RlX2pzXzEgPSByZXF1aXJlKFwiZW50aXRpZXMvbGliL2RlY29kZS5qc1wiKTtcbnZhciBDaGFyQ29kZXM7XG4oZnVuY3Rpb24gKENoYXJDb2Rlcykge1xuICAgIENoYXJDb2Rlc1tDaGFyQ29kZXNbXCJUYWJcIl0gPSA5XSA9IFwiVGFiXCI7XG4gICAgQ2hhckNvZGVzW0NoYXJDb2Rlc1tcIk5ld0xpbmVcIl0gPSAxMF0gPSBcIk5ld0xpbmVcIjtcbiAgICBDaGFyQ29kZXNbQ2hhckNvZGVzW1wiRm9ybUZlZWRcIl0gPSAxMl0gPSBcIkZvcm1GZWVkXCI7XG4gICAgQ2hhckNvZGVzW0NoYXJDb2Rlc1tcIkNhcnJpYWdlUmV0dXJuXCJdID0gMTNdID0gXCJDYXJyaWFnZVJldHVyblwiO1xuICAgIENoYXJDb2Rlc1tDaGFyQ29kZXNbXCJTcGFjZVwiXSA9IDMyXSA9IFwiU3BhY2VcIjtcbiAgICBDaGFyQ29kZXNbQ2hhckNvZGVzW1wiRXhjbGFtYXRpb25NYXJrXCJdID0gMzNdID0gXCJFeGNsYW1hdGlvbk1hcmtcIjtcbiAgICBDaGFyQ29kZXNbQ2hhckNvZGVzW1wiTnVtYmVyXCJdID0gMzVdID0gXCJOdW1iZXJcIjtcbiAgICBDaGFyQ29kZXNbQ2hhckNvZGVzW1wiQW1wXCJdID0gMzhdID0gXCJBbXBcIjtcbiAgICBDaGFyQ29kZXNbQ2hhckNvZGVzW1wiU2luZ2xlUXVvdGVcIl0gPSAzOV0gPSBcIlNpbmdsZVF1b3RlXCI7XG4gICAgQ2hhckNvZGVzW0NoYXJDb2Rlc1tcIkRvdWJsZVF1b3RlXCJdID0gMzRdID0gXCJEb3VibGVRdW90ZVwiO1xuICAgIENoYXJDb2Rlc1tDaGFyQ29kZXNbXCJEYXNoXCJdID0gNDVdID0gXCJEYXNoXCI7XG4gICAgQ2hhckNvZGVzW0NoYXJDb2Rlc1tcIlNsYXNoXCJdID0gNDddID0gXCJTbGFzaFwiO1xuICAgIENoYXJDb2Rlc1tDaGFyQ29kZXNbXCJaZXJvXCJdID0gNDhdID0gXCJaZXJvXCI7XG4gICAgQ2hhckNvZGVzW0NoYXJDb2Rlc1tcIk5pbmVcIl0gPSA1N10gPSBcIk5pbmVcIjtcbiAgICBDaGFyQ29kZXNbQ2hhckNvZGVzW1wiU2VtaVwiXSA9IDU5XSA9IFwiU2VtaVwiO1xuICAgIENoYXJDb2Rlc1tDaGFyQ29kZXNbXCJMdFwiXSA9IDYwXSA9IFwiTHRcIjtcbiAgICBDaGFyQ29kZXNbQ2hhckNvZGVzW1wiRXFcIl0gPSA2MV0gPSBcIkVxXCI7XG4gICAgQ2hhckNvZGVzW0NoYXJDb2Rlc1tcIkd0XCJdID0gNjJdID0gXCJHdFwiO1xuICAgIENoYXJDb2Rlc1tDaGFyQ29kZXNbXCJRdWVzdGlvbm1hcmtcIl0gPSA2M10gPSBcIlF1ZXN0aW9ubWFya1wiO1xuICAgIENoYXJDb2Rlc1tDaGFyQ29kZXNbXCJVcHBlckFcIl0gPSA2NV0gPSBcIlVwcGVyQVwiO1xuICAgIENoYXJDb2Rlc1tDaGFyQ29kZXNbXCJMb3dlckFcIl0gPSA5N10gPSBcIkxvd2VyQVwiO1xuICAgIENoYXJDb2Rlc1tDaGFyQ29kZXNbXCJVcHBlckZcIl0gPSA3MF0gPSBcIlVwcGVyRlwiO1xuICAgIENoYXJDb2Rlc1tDaGFyQ29kZXNbXCJMb3dlckZcIl0gPSAxMDJdID0gXCJMb3dlckZcIjtcbiAgICBDaGFyQ29kZXNbQ2hhckNvZGVzW1wiVXBwZXJaXCJdID0gOTBdID0gXCJVcHBlclpcIjtcbiAgICBDaGFyQ29kZXNbQ2hhckNvZGVzW1wiTG93ZXJaXCJdID0gMTIyXSA9IFwiTG93ZXJaXCI7XG4gICAgQ2hhckNvZGVzW0NoYXJDb2Rlc1tcIkxvd2VyWFwiXSA9IDEyMF0gPSBcIkxvd2VyWFwiO1xuICAgIENoYXJDb2Rlc1tDaGFyQ29kZXNbXCJPcGVuaW5nU3F1YXJlQnJhY2tldFwiXSA9IDkxXSA9IFwiT3BlbmluZ1NxdWFyZUJyYWNrZXRcIjtcbn0pKENoYXJDb2RlcyB8fCAoQ2hhckNvZGVzID0ge30pKTtcbi8qKiBBbGwgdGhlIHN0YXRlcyB0aGUgdG9rZW5pemVyIGNhbiBiZSBpbi4gKi9cbnZhciBTdGF0ZTtcbihmdW5jdGlvbiAoU3RhdGUpIHtcbiAgICBTdGF0ZVtTdGF0ZVtcIlRleHRcIl0gPSAxXSA9IFwiVGV4dFwiO1xuICAgIFN0YXRlW1N0YXRlW1wiQmVmb3JlVGFnTmFtZVwiXSA9IDJdID0gXCJCZWZvcmVUYWdOYW1lXCI7XG4gICAgU3RhdGVbU3RhdGVbXCJJblRhZ05hbWVcIl0gPSAzXSA9IFwiSW5UYWdOYW1lXCI7XG4gICAgU3RhdGVbU3RhdGVbXCJJblNlbGZDbG9zaW5nVGFnXCJdID0gNF0gPSBcIkluU2VsZkNsb3NpbmdUYWdcIjtcbiAgICBTdGF0ZVtTdGF0ZVtcIkJlZm9yZUNsb3NpbmdUYWdOYW1lXCJdID0gNV0gPSBcIkJlZm9yZUNsb3NpbmdUYWdOYW1lXCI7XG4gICAgU3RhdGVbU3RhdGVbXCJJbkNsb3NpbmdUYWdOYW1lXCJdID0gNl0gPSBcIkluQ2xvc2luZ1RhZ05hbWVcIjtcbiAgICBTdGF0ZVtTdGF0ZVtcIkFmdGVyQ2xvc2luZ1RhZ05hbWVcIl0gPSA3XSA9IFwiQWZ0ZXJDbG9zaW5nVGFnTmFtZVwiO1xuICAgIC8vIEF0dHJpYnV0ZXNcbiAgICBTdGF0ZVtTdGF0ZVtcIkJlZm9yZUF0dHJpYnV0ZU5hbWVcIl0gPSA4XSA9IFwiQmVmb3JlQXR0cmlidXRlTmFtZVwiO1xuICAgIFN0YXRlW1N0YXRlW1wiSW5BdHRyaWJ1dGVOYW1lXCJdID0gOV0gPSBcIkluQXR0cmlidXRlTmFtZVwiO1xuICAgIFN0YXRlW1N0YXRlW1wiQWZ0ZXJBdHRyaWJ1dGVOYW1lXCJdID0gMTBdID0gXCJBZnRlckF0dHJpYnV0ZU5hbWVcIjtcbiAgICBTdGF0ZVtTdGF0ZVtcIkJlZm9yZUF0dHJpYnV0ZVZhbHVlXCJdID0gMTFdID0gXCJCZWZvcmVBdHRyaWJ1dGVWYWx1ZVwiO1xuICAgIFN0YXRlW1N0YXRlW1wiSW5BdHRyaWJ1dGVWYWx1ZURxXCJdID0gMTJdID0gXCJJbkF0dHJpYnV0ZVZhbHVlRHFcIjtcbiAgICBTdGF0ZVtTdGF0ZVtcIkluQXR0cmlidXRlVmFsdWVTcVwiXSA9IDEzXSA9IFwiSW5BdHRyaWJ1dGVWYWx1ZVNxXCI7XG4gICAgU3RhdGVbU3RhdGVbXCJJbkF0dHJpYnV0ZVZhbHVlTnFcIl0gPSAxNF0gPSBcIkluQXR0cmlidXRlVmFsdWVOcVwiO1xuICAgIC8vIERlY2xhcmF0aW9uc1xuICAgIFN0YXRlW1N0YXRlW1wiQmVmb3JlRGVjbGFyYXRpb25cIl0gPSAxNV0gPSBcIkJlZm9yZURlY2xhcmF0aW9uXCI7XG4gICAgU3RhdGVbU3RhdGVbXCJJbkRlY2xhcmF0aW9uXCJdID0gMTZdID0gXCJJbkRlY2xhcmF0aW9uXCI7XG4gICAgLy8gUHJvY2Vzc2luZyBpbnN0cnVjdGlvbnNcbiAgICBTdGF0ZVtTdGF0ZVtcIkluUHJvY2Vzc2luZ0luc3RydWN0aW9uXCJdID0gMTddID0gXCJJblByb2Nlc3NpbmdJbnN0cnVjdGlvblwiO1xuICAgIC8vIENvbW1lbnRzICYgQ0RBVEFcbiAgICBTdGF0ZVtTdGF0ZVtcIkJlZm9yZUNvbW1lbnRcIl0gPSAxOF0gPSBcIkJlZm9yZUNvbW1lbnRcIjtcbiAgICBTdGF0ZVtTdGF0ZVtcIkNEQVRBU2VxdWVuY2VcIl0gPSAxOV0gPSBcIkNEQVRBU2VxdWVuY2VcIjtcbiAgICBTdGF0ZVtTdGF0ZVtcIkluU3BlY2lhbENvbW1lbnRcIl0gPSAyMF0gPSBcIkluU3BlY2lhbENvbW1lbnRcIjtcbiAgICBTdGF0ZVtTdGF0ZVtcIkluQ29tbWVudExpa2VcIl0gPSAyMV0gPSBcIkluQ29tbWVudExpa2VcIjtcbiAgICAvLyBTcGVjaWFsIHRhZ3NcbiAgICBTdGF0ZVtTdGF0ZVtcIkJlZm9yZVNwZWNpYWxTXCJdID0gMjJdID0gXCJCZWZvcmVTcGVjaWFsU1wiO1xuICAgIFN0YXRlW1N0YXRlW1wiU3BlY2lhbFN0YXJ0U2VxdWVuY2VcIl0gPSAyM10gPSBcIlNwZWNpYWxTdGFydFNlcXVlbmNlXCI7XG4gICAgU3RhdGVbU3RhdGVbXCJJblNwZWNpYWxUYWdcIl0gPSAyNF0gPSBcIkluU3BlY2lhbFRhZ1wiO1xuICAgIFN0YXRlW1N0YXRlW1wiQmVmb3JlRW50aXR5XCJdID0gMjVdID0gXCJCZWZvcmVFbnRpdHlcIjtcbiAgICBTdGF0ZVtTdGF0ZVtcIkJlZm9yZU51bWVyaWNFbnRpdHlcIl0gPSAyNl0gPSBcIkJlZm9yZU51bWVyaWNFbnRpdHlcIjtcbiAgICBTdGF0ZVtTdGF0ZVtcIkluTmFtZWRFbnRpdHlcIl0gPSAyN10gPSBcIkluTmFtZWRFbnRpdHlcIjtcbiAgICBTdGF0ZVtTdGF0ZVtcIkluTnVtZXJpY0VudGl0eVwiXSA9IDI4XSA9IFwiSW5OdW1lcmljRW50aXR5XCI7XG4gICAgU3RhdGVbU3RhdGVbXCJJbkhleEVudGl0eVwiXSA9IDI5XSA9IFwiSW5IZXhFbnRpdHlcIjtcbn0pKFN0YXRlIHx8IChTdGF0ZSA9IHt9KSk7XG5mdW5jdGlvbiBpc1doaXRlc3BhY2UoYykge1xuICAgIHJldHVybiAoYyA9PT0gQ2hhckNvZGVzLlNwYWNlIHx8XG4gICAgICAgIGMgPT09IENoYXJDb2Rlcy5OZXdMaW5lIHx8XG4gICAgICAgIGMgPT09IENoYXJDb2Rlcy5UYWIgfHxcbiAgICAgICAgYyA9PT0gQ2hhckNvZGVzLkZvcm1GZWVkIHx8XG4gICAgICAgIGMgPT09IENoYXJDb2Rlcy5DYXJyaWFnZVJldHVybik7XG59XG5mdW5jdGlvbiBpc0VuZE9mVGFnU2VjdGlvbihjKSB7XG4gICAgcmV0dXJuIGMgPT09IENoYXJDb2Rlcy5TbGFzaCB8fCBjID09PSBDaGFyQ29kZXMuR3QgfHwgaXNXaGl0ZXNwYWNlKGMpO1xufVxuZnVuY3Rpb24gaXNOdW1iZXIoYykge1xuICAgIHJldHVybiBjID49IENoYXJDb2Rlcy5aZXJvICYmIGMgPD0gQ2hhckNvZGVzLk5pbmU7XG59XG5mdW5jdGlvbiBpc0FTQ0lJQWxwaGEoYykge1xuICAgIHJldHVybiAoKGMgPj0gQ2hhckNvZGVzLkxvd2VyQSAmJiBjIDw9IENoYXJDb2Rlcy5Mb3dlclopIHx8XG4gICAgICAgIChjID49IENoYXJDb2Rlcy5VcHBlckEgJiYgYyA8PSBDaGFyQ29kZXMuVXBwZXJaKSk7XG59XG5mdW5jdGlvbiBpc0hleERpZ2l0KGMpIHtcbiAgICByZXR1cm4gKChjID49IENoYXJDb2Rlcy5VcHBlckEgJiYgYyA8PSBDaGFyQ29kZXMuVXBwZXJGKSB8fFxuICAgICAgICAoYyA+PSBDaGFyQ29kZXMuTG93ZXJBICYmIGMgPD0gQ2hhckNvZGVzLkxvd2VyRikpO1xufVxudmFyIFF1b3RlVHlwZTtcbihmdW5jdGlvbiAoUXVvdGVUeXBlKSB7XG4gICAgUXVvdGVUeXBlW1F1b3RlVHlwZVtcIk5vVmFsdWVcIl0gPSAwXSA9IFwiTm9WYWx1ZVwiO1xuICAgIFF1b3RlVHlwZVtRdW90ZVR5cGVbXCJVbnF1b3RlZFwiXSA9IDFdID0gXCJVbnF1b3RlZFwiO1xuICAgIFF1b3RlVHlwZVtRdW90ZVR5cGVbXCJTaW5nbGVcIl0gPSAyXSA9IFwiU2luZ2xlXCI7XG4gICAgUXVvdGVUeXBlW1F1b3RlVHlwZVtcIkRvdWJsZVwiXSA9IDNdID0gXCJEb3VibGVcIjtcbn0pKFF1b3RlVHlwZSA9IGV4cG9ydHMuUXVvdGVUeXBlIHx8IChleHBvcnRzLlF1b3RlVHlwZSA9IHt9KSk7XG4vKipcbiAqIFNlcXVlbmNlcyB1c2VkIHRvIG1hdGNoIGxvbmdlciBzdHJpbmdzLlxuICpcbiAqIFdlIGRvbid0IGhhdmUgYFNjcmlwdGAsIGBTdHlsZWAsIG9yIGBUaXRsZWAgaGVyZS4gSW5zdGVhZCwgd2UgcmUtdXNlIHRoZSAqRW5kXG4gKiBzZXF1ZW5jZXMgd2l0aCBhbiBpbmNyZWFzZWQgb2Zmc2V0LlxuICovXG52YXIgU2VxdWVuY2VzID0ge1xuICAgIENkYXRhOiBuZXcgVWludDhBcnJheShbMHg0MywgMHg0NCwgMHg0MSwgMHg1NCwgMHg0MSwgMHg1Yl0pLFxuICAgIENkYXRhRW5kOiBuZXcgVWludDhBcnJheShbMHg1ZCwgMHg1ZCwgMHgzZV0pLFxuICAgIENvbW1lbnRFbmQ6IG5ldyBVaW50OEFycmF5KFsweDJkLCAweDJkLCAweDNlXSksXG4gICAgU2NyaXB0RW5kOiBuZXcgVWludDhBcnJheShbMHgzYywgMHgyZiwgMHg3MywgMHg2MywgMHg3MiwgMHg2OSwgMHg3MCwgMHg3NF0pLFxuICAgIFN0eWxlRW5kOiBuZXcgVWludDhBcnJheShbMHgzYywgMHgyZiwgMHg3MywgMHg3NCwgMHg3OSwgMHg2YywgMHg2NV0pLFxuICAgIFRpdGxlRW5kOiBuZXcgVWludDhBcnJheShbMHgzYywgMHgyZiwgMHg3NCwgMHg2OSwgMHg3NCwgMHg2YywgMHg2NV0pLCAvLyBgPC90aXRsZWBcbn07XG52YXIgVG9rZW5pemVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFRva2VuaXplcihfYSwgY2JzKSB7XG4gICAgICAgIHZhciBfYiA9IF9hLnhtbE1vZGUsIHhtbE1vZGUgPSBfYiA9PT0gdm9pZCAwID8gZmFsc2UgOiBfYiwgX2MgPSBfYS5kZWNvZGVFbnRpdGllcywgZGVjb2RlRW50aXRpZXMgPSBfYyA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9jO1xuICAgICAgICB0aGlzLmNicyA9IGNicztcbiAgICAgICAgLyoqIFRoZSBjdXJyZW50IHN0YXRlIHRoZSB0b2tlbml6ZXIgaXMgaW4uICovXG4gICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5UZXh0O1xuICAgICAgICAvKiogVGhlIHJlYWQgYnVmZmVyLiAqL1xuICAgICAgICB0aGlzLmJ1ZmZlciA9IFwiXCI7XG4gICAgICAgIC8qKiBUaGUgYmVnaW5uaW5nIG9mIHRoZSBzZWN0aW9uIHRoYXQgaXMgY3VycmVudGx5IGJlaW5nIHJlYWQuICovXG4gICAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gMDtcbiAgICAgICAgLyoqIFRoZSBpbmRleCB3aXRoaW4gdGhlIGJ1ZmZlciB0aGF0IHdlIGFyZSBjdXJyZW50bHkgbG9va2luZyBhdC4gKi9cbiAgICAgICAgdGhpcy5pbmRleCA9IDA7XG4gICAgICAgIC8qKiBTb21lIGJlaGF2aW9yLCBlZy4gd2hlbiBkZWNvZGluZyBlbnRpdGllcywgaXMgZG9uZSB3aGlsZSB3ZSBhcmUgaW4gYW5vdGhlciBzdGF0ZS4gVGhpcyBrZWVwcyB0cmFjayBvZiB0aGUgb3RoZXIgc3RhdGUgdHlwZS4gKi9cbiAgICAgICAgdGhpcy5iYXNlU3RhdGUgPSBTdGF0ZS5UZXh0O1xuICAgICAgICAvKiogRm9yIHNwZWNpYWwgcGFyc2luZyBiZWhhdmlvciBpbnNpZGUgb2Ygc2NyaXB0IGFuZCBzdHlsZSB0YWdzLiAqL1xuICAgICAgICB0aGlzLmlzU3BlY2lhbCA9IGZhbHNlO1xuICAgICAgICAvKiogSW5kaWNhdGVzIHdoZXRoZXIgdGhlIHRva2VuaXplciBoYXMgYmVlbiBwYXVzZWQuICovXG4gICAgICAgIHRoaXMucnVubmluZyA9IHRydWU7XG4gICAgICAgIC8qKiBUaGUgb2Zmc2V0IG9mIHRoZSBjdXJyZW50IGJ1ZmZlci4gKi9cbiAgICAgICAgdGhpcy5vZmZzZXQgPSAwO1xuICAgICAgICB0aGlzLmN1cnJlbnRTZXF1ZW5jZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5zZXF1ZW5jZUluZGV4ID0gMDtcbiAgICAgICAgdGhpcy50cmllSW5kZXggPSAwO1xuICAgICAgICB0aGlzLnRyaWVDdXJyZW50ID0gMDtcbiAgICAgICAgLyoqIEZvciBuYW1lZCBlbnRpdGllcywgdGhlIGluZGV4IG9mIHRoZSB2YWx1ZS4gRm9yIG51bWVyaWMgZW50aXRpZXMsIHRoZSBjb2RlIHBvaW50LiAqL1xuICAgICAgICB0aGlzLmVudGl0eVJlc3VsdCA9IDA7XG4gICAgICAgIHRoaXMuZW50aXR5RXhjZXNzID0gMDtcbiAgICAgICAgdGhpcy54bWxNb2RlID0geG1sTW9kZTtcbiAgICAgICAgdGhpcy5kZWNvZGVFbnRpdGllcyA9IGRlY29kZUVudGl0aWVzO1xuICAgICAgICB0aGlzLmVudGl0eVRyaWUgPSB4bWxNb2RlID8gZGVjb2RlX2pzXzEueG1sRGVjb2RlVHJlZSA6IGRlY29kZV9qc18xLmh0bWxEZWNvZGVUcmVlO1xuICAgIH1cbiAgICBUb2tlbml6ZXIucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuVGV4dDtcbiAgICAgICAgdGhpcy5idWZmZXIgPSBcIlwiO1xuICAgICAgICB0aGlzLnNlY3Rpb25TdGFydCA9IDA7XG4gICAgICAgIHRoaXMuaW5kZXggPSAwO1xuICAgICAgICB0aGlzLmJhc2VTdGF0ZSA9IFN0YXRlLlRleHQ7XG4gICAgICAgIHRoaXMuY3VycmVudFNlcXVlbmNlID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnJ1bm5pbmcgPSB0cnVlO1xuICAgICAgICB0aGlzLm9mZnNldCA9IDA7XG4gICAgfTtcbiAgICBUb2tlbml6ZXIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gKGNodW5rKSB7XG4gICAgICAgIHRoaXMub2Zmc2V0ICs9IHRoaXMuYnVmZmVyLmxlbmd0aDtcbiAgICAgICAgdGhpcy5idWZmZXIgPSBjaHVuaztcbiAgICAgICAgdGhpcy5wYXJzZSgpO1xuICAgIH07XG4gICAgVG9rZW5pemVyLnByb3RvdHlwZS5lbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLnJ1bm5pbmcpXG4gICAgICAgICAgICB0aGlzLmZpbmlzaCgpO1xuICAgIH07XG4gICAgVG9rZW5pemVyLnByb3RvdHlwZS5wYXVzZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5ydW5uaW5nID0gZmFsc2U7XG4gICAgfTtcbiAgICBUb2tlbml6ZXIucHJvdG90eXBlLnJlc3VtZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5ydW5uaW5nID0gdHJ1ZTtcbiAgICAgICAgaWYgKHRoaXMuaW5kZXggPCB0aGlzLmJ1ZmZlci5sZW5ndGggKyB0aGlzLm9mZnNldCkge1xuICAgICAgICAgICAgdGhpcy5wYXJzZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBUaGUgY3VycmVudCBpbmRleCB3aXRoaW4gYWxsIG9mIHRoZSB3cml0dGVuIGRhdGEuXG4gICAgICovXG4gICAgVG9rZW5pemVyLnByb3RvdHlwZS5nZXRJbmRleCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5kZXg7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBUaGUgc3RhcnQgb2YgdGhlIGN1cnJlbnQgc2VjdGlvbi5cbiAgICAgKi9cbiAgICBUb2tlbml6ZXIucHJvdG90eXBlLmdldFNlY3Rpb25TdGFydCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VjdGlvblN0YXJ0O1xuICAgIH07XG4gICAgVG9rZW5pemVyLnByb3RvdHlwZS5zdGF0ZVRleHQgPSBmdW5jdGlvbiAoYykge1xuICAgICAgICBpZiAoYyA9PT0gQ2hhckNvZGVzLkx0IHx8XG4gICAgICAgICAgICAoIXRoaXMuZGVjb2RlRW50aXRpZXMgJiYgdGhpcy5mYXN0Rm9yd2FyZFRvKENoYXJDb2Rlcy5MdCkpKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5pbmRleCA+IHRoaXMuc2VjdGlvblN0YXJ0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jYnMub250ZXh0KHRoaXMuc2VjdGlvblN0YXJ0LCB0aGlzLmluZGV4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5CZWZvcmVUYWdOYW1lO1xuICAgICAgICAgICAgdGhpcy5zZWN0aW9uU3RhcnQgPSB0aGlzLmluZGV4O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuZGVjb2RlRW50aXRpZXMgJiYgYyA9PT0gQ2hhckNvZGVzLkFtcCkge1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLkJlZm9yZUVudGl0eTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVG9rZW5pemVyLnByb3RvdHlwZS5zdGF0ZVNwZWNpYWxTdGFydFNlcXVlbmNlID0gZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgdmFyIGlzRW5kID0gdGhpcy5zZXF1ZW5jZUluZGV4ID09PSB0aGlzLmN1cnJlbnRTZXF1ZW5jZS5sZW5ndGg7XG4gICAgICAgIHZhciBpc01hdGNoID0gaXNFbmRcbiAgICAgICAgICAgID8gLy8gSWYgd2UgYXJlIGF0IHRoZSBlbmQgb2YgdGhlIHNlcXVlbmNlLCBtYWtlIHN1cmUgdGhlIHRhZyBuYW1lIGhhcyBlbmRlZFxuICAgICAgICAgICAgICAgIGlzRW5kT2ZUYWdTZWN0aW9uKGMpXG4gICAgICAgICAgICA6IC8vIE90aGVyd2lzZSwgZG8gYSBjYXNlLWluc2Vuc2l0aXZlIGNvbXBhcmlzb25cbiAgICAgICAgICAgICAgICAoYyB8IDB4MjApID09PSB0aGlzLmN1cnJlbnRTZXF1ZW5jZVt0aGlzLnNlcXVlbmNlSW5kZXhdO1xuICAgICAgICBpZiAoIWlzTWF0Y2gpIHtcbiAgICAgICAgICAgIHRoaXMuaXNTcGVjaWFsID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIWlzRW5kKSB7XG4gICAgICAgICAgICB0aGlzLnNlcXVlbmNlSW5kZXgrKztcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNlcXVlbmNlSW5kZXggPSAwO1xuICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuSW5UYWdOYW1lO1xuICAgICAgICB0aGlzLnN0YXRlSW5UYWdOYW1lKGMpO1xuICAgIH07XG4gICAgLyoqIExvb2sgZm9yIGFuIGVuZCB0YWcuIEZvciA8dGl0bGU+IHRhZ3MsIGFsc28gZGVjb2RlIGVudGl0aWVzLiAqL1xuICAgIFRva2VuaXplci5wcm90b3R5cGUuc3RhdGVJblNwZWNpYWxUYWcgPSBmdW5jdGlvbiAoYykge1xuICAgICAgICBpZiAodGhpcy5zZXF1ZW5jZUluZGV4ID09PSB0aGlzLmN1cnJlbnRTZXF1ZW5jZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmIChjID09PSBDaGFyQ29kZXMuR3QgfHwgaXNXaGl0ZXNwYWNlKGMpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGVuZE9mVGV4dCA9IHRoaXMuaW5kZXggLSB0aGlzLmN1cnJlbnRTZXF1ZW5jZS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc2VjdGlvblN0YXJ0IDwgZW5kT2ZUZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFNwb29mIHRoZSBpbmRleCBzbyB0aGF0IHJlcG9ydGVkIGxvY2F0aW9ucyBtYXRjaCB1cC5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGFjdHVhbEluZGV4ID0gdGhpcy5pbmRleDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbmRleCA9IGVuZE9mVGV4dDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYnMub250ZXh0KHRoaXMuc2VjdGlvblN0YXJ0LCBlbmRPZlRleHQpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmluZGV4ID0gYWN0dWFsSW5kZXg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuaXNTcGVjaWFsID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy5zZWN0aW9uU3RhcnQgPSBlbmRPZlRleHQgKyAyOyAvLyBTa2lwIG92ZXIgdGhlIGA8L2BcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlSW5DbG9zaW5nVGFnTmFtZShjKTtcbiAgICAgICAgICAgICAgICByZXR1cm47IC8vIFdlIGFyZSBkb25lOyBza2lwIHRoZSByZXN0IG9mIHRoZSBmdW5jdGlvbi5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc2VxdWVuY2VJbmRleCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKChjIHwgMHgyMCkgPT09IHRoaXMuY3VycmVudFNlcXVlbmNlW3RoaXMuc2VxdWVuY2VJbmRleF0pIHtcbiAgICAgICAgICAgIHRoaXMuc2VxdWVuY2VJbmRleCArPSAxO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuc2VxdWVuY2VJbmRleCA9PT0gMCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuY3VycmVudFNlcXVlbmNlID09PSBTZXF1ZW5jZXMuVGl0bGVFbmQpIHtcbiAgICAgICAgICAgICAgICAvLyBXZSBoYXZlIHRvIHBhcnNlIGVudGl0aWVzIGluIDx0aXRsZT4gdGFncy5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5kZWNvZGVFbnRpdGllcyAmJiBjID09PSBDaGFyQ29kZXMuQW1wKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5CZWZvcmVFbnRpdHk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5mYXN0Rm9yd2FyZFRvKENoYXJDb2Rlcy5MdCkpIHtcbiAgICAgICAgICAgICAgICAvLyBPdXRzaWRlIG9mIDx0aXRsZT4gdGFncywgd2UgY2FuIGZhc3QtZm9yd2FyZC5cbiAgICAgICAgICAgICAgICB0aGlzLnNlcXVlbmNlSW5kZXggPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gSWYgd2Ugc2VlIGEgYDxgLCBzZXQgdGhlIHNlcXVlbmNlIGluZGV4IHRvIDE7IHVzZWZ1bCBmb3IgZWcuIGA8PC9zY3JpcHQ+YC5cbiAgICAgICAgICAgIHRoaXMuc2VxdWVuY2VJbmRleCA9IE51bWJlcihjID09PSBDaGFyQ29kZXMuTHQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUb2tlbml6ZXIucHJvdG90eXBlLnN0YXRlQ0RBVEFTZXF1ZW5jZSA9IGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIGlmIChjID09PSBTZXF1ZW5jZXMuQ2RhdGFbdGhpcy5zZXF1ZW5jZUluZGV4XSkge1xuICAgICAgICAgICAgaWYgKCsrdGhpcy5zZXF1ZW5jZUluZGV4ID09PSBTZXF1ZW5jZXMuQ2RhdGEubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLkluQ29tbWVudExpa2U7XG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50U2VxdWVuY2UgPSBTZXF1ZW5jZXMuQ2RhdGFFbmQ7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXF1ZW5jZUluZGV4ID0gMDtcbiAgICAgICAgICAgICAgICB0aGlzLnNlY3Rpb25TdGFydCA9IHRoaXMuaW5kZXggKyAxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zZXF1ZW5jZUluZGV4ID0gMDtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5JbkRlY2xhcmF0aW9uO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZUluRGVjbGFyYXRpb24oYyk7IC8vIFJlY29uc3VtZSB0aGUgY2hhcmFjdGVyXG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFdoZW4gd2Ugd2FpdCBmb3Igb25lIHNwZWNpZmljIGNoYXJhY3Rlciwgd2UgY2FuIHNwZWVkIHRoaW5ncyB1cFxuICAgICAqIGJ5IHNraXBwaW5nIHRocm91Z2ggdGhlIGJ1ZmZlciB1bnRpbCB3ZSBmaW5kIGl0LlxuICAgICAqXG4gICAgICogQHJldHVybnMgV2hldGhlciB0aGUgY2hhcmFjdGVyIHdhcyBmb3VuZC5cbiAgICAgKi9cbiAgICBUb2tlbml6ZXIucHJvdG90eXBlLmZhc3RGb3J3YXJkVG8gPSBmdW5jdGlvbiAoYykge1xuICAgICAgICB3aGlsZSAoKyt0aGlzLmluZGV4IDwgdGhpcy5idWZmZXIubGVuZ3RoICsgdGhpcy5vZmZzZXQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmJ1ZmZlci5jaGFyQ29kZUF0KHRoaXMuaW5kZXggLSB0aGlzLm9mZnNldCkgPT09IGMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvKlxuICAgICAgICAgKiBXZSBpbmNyZW1lbnQgdGhlIGluZGV4IGF0IHRoZSBlbmQgb2YgdGhlIGBwYXJzZWAgbG9vcCxcbiAgICAgICAgICogc28gc2V0IGl0IHRvIGBidWZmZXIubGVuZ3RoIC0gMWAgaGVyZS5cbiAgICAgICAgICpcbiAgICAgICAgICogVE9ETzogUmVmYWN0b3IgYHBhcnNlYCB0byBpbmNyZW1lbnQgaW5kZXggYmVmb3JlIGNhbGxpbmcgc3RhdGVzLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5pbmRleCA9IHRoaXMuYnVmZmVyLmxlbmd0aCArIHRoaXMub2Zmc2V0IC0gMTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQ29tbWVudHMgYW5kIENEQVRBIGVuZCB3aXRoIGAtLT5gIGFuZCBgXV0+YC5cbiAgICAgKlxuICAgICAqIFRoZWlyIGNvbW1vbiBxdWFsaXRpZXMgYXJlOlxuICAgICAqIC0gVGhlaXIgZW5kIHNlcXVlbmNlcyBoYXZlIGEgZGlzdGluY3QgY2hhcmFjdGVyIHRoZXkgc3RhcnQgd2l0aC5cbiAgICAgKiAtIFRoYXQgY2hhcmFjdGVyIGlzIHRoZW4gcmVwZWF0ZWQsIHNvIHdlIGhhdmUgdG8gY2hlY2sgbXVsdGlwbGUgcmVwZWF0cy5cbiAgICAgKiAtIEFsbCBjaGFyYWN0ZXJzIGJ1dCB0aGUgc3RhcnQgY2hhcmFjdGVyIG9mIHRoZSBzZXF1ZW5jZSBjYW4gYmUgc2tpcHBlZC5cbiAgICAgKi9cbiAgICBUb2tlbml6ZXIucHJvdG90eXBlLnN0YXRlSW5Db21tZW50TGlrZSA9IGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIGlmIChjID09PSB0aGlzLmN1cnJlbnRTZXF1ZW5jZVt0aGlzLnNlcXVlbmNlSW5kZXhdKSB7XG4gICAgICAgICAgICBpZiAoKyt0aGlzLnNlcXVlbmNlSW5kZXggPT09IHRoaXMuY3VycmVudFNlcXVlbmNlLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnRTZXF1ZW5jZSA9PT0gU2VxdWVuY2VzLkNkYXRhRW5kKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2JzLm9uY2RhdGEodGhpcy5zZWN0aW9uU3RhcnQsIHRoaXMuaW5kZXgsIDIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYnMub25jb21tZW50KHRoaXMuc2VjdGlvblN0YXJ0LCB0aGlzLmluZGV4LCAyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5zZXF1ZW5jZUluZGV4ID0gMDtcbiAgICAgICAgICAgICAgICB0aGlzLnNlY3Rpb25TdGFydCA9IHRoaXMuaW5kZXggKyAxO1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5UZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuc2VxdWVuY2VJbmRleCA9PT0gMCkge1xuICAgICAgICAgICAgLy8gRmFzdC1mb3J3YXJkIHRvIHRoZSBmaXJzdCBjaGFyYWN0ZXIgb2YgdGhlIHNlcXVlbmNlXG4gICAgICAgICAgICBpZiAodGhpcy5mYXN0Rm9yd2FyZFRvKHRoaXMuY3VycmVudFNlcXVlbmNlWzBdKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2VxdWVuY2VJbmRleCA9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYyAhPT0gdGhpcy5jdXJyZW50U2VxdWVuY2VbdGhpcy5zZXF1ZW5jZUluZGV4IC0gMV0pIHtcbiAgICAgICAgICAgIC8vIEFsbG93IGxvbmcgc2VxdWVuY2VzLCBlZy4gLS0tPiwgXV1dPlxuICAgICAgICAgICAgdGhpcy5zZXF1ZW5jZUluZGV4ID0gMDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogSFRNTCBvbmx5IGFsbG93cyBBU0NJSSBhbHBoYSBjaGFyYWN0ZXJzIChhLXogYW5kIEEtWikgYXQgdGhlIGJlZ2lubmluZyBvZiBhIHRhZyBuYW1lLlxuICAgICAqXG4gICAgICogWE1MIGFsbG93cyBhIGxvdCBtb3JlIGNoYXJhY3RlcnMgaGVyZSAoQHNlZSBodHRwczovL3d3dy53My5vcmcvVFIvUkVDLXhtbC8jTlQtTmFtZVN0YXJ0Q2hhcikuXG4gICAgICogV2UgYWxsb3cgYW55dGhpbmcgdGhhdCB3b3VsZG4ndCBlbmQgdGhlIHRhZy5cbiAgICAgKi9cbiAgICBUb2tlbml6ZXIucHJvdG90eXBlLmlzVGFnU3RhcnRDaGFyID0gZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMueG1sTW9kZSA/ICFpc0VuZE9mVGFnU2VjdGlvbihjKSA6IGlzQVNDSUlBbHBoYShjKTtcbiAgICB9O1xuICAgIFRva2VuaXplci5wcm90b3R5cGUuc3RhcnRTcGVjaWFsID0gZnVuY3Rpb24gKHNlcXVlbmNlLCBvZmZzZXQpIHtcbiAgICAgICAgdGhpcy5pc1NwZWNpYWwgPSB0cnVlO1xuICAgICAgICB0aGlzLmN1cnJlbnRTZXF1ZW5jZSA9IHNlcXVlbmNlO1xuICAgICAgICB0aGlzLnNlcXVlbmNlSW5kZXggPSBvZmZzZXQ7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5TcGVjaWFsU3RhcnRTZXF1ZW5jZTtcbiAgICB9O1xuICAgIFRva2VuaXplci5wcm90b3R5cGUuc3RhdGVCZWZvcmVUYWdOYW1lID0gZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgaWYgKGMgPT09IENoYXJDb2Rlcy5FeGNsYW1hdGlvbk1hcmspIHtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5CZWZvcmVEZWNsYXJhdGlvbjtcbiAgICAgICAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gdGhpcy5pbmRleCArIDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYyA9PT0gQ2hhckNvZGVzLlF1ZXN0aW9ubWFyaykge1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLkluUHJvY2Vzc2luZ0luc3RydWN0aW9uO1xuICAgICAgICAgICAgdGhpcy5zZWN0aW9uU3RhcnQgPSB0aGlzLmluZGV4ICsgMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLmlzVGFnU3RhcnRDaGFyKGMpKSB7XG4gICAgICAgICAgICB2YXIgbG93ZXIgPSBjIHwgMHgyMDtcbiAgICAgICAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gdGhpcy5pbmRleDtcbiAgICAgICAgICAgIGlmICghdGhpcy54bWxNb2RlICYmIGxvd2VyID09PSBTZXF1ZW5jZXMuVGl0bGVFbmRbMl0pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0U3BlY2lhbChTZXF1ZW5jZXMuVGl0bGVFbmQsIDMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9XG4gICAgICAgICAgICAgICAgICAgICF0aGlzLnhtbE1vZGUgJiYgbG93ZXIgPT09IFNlcXVlbmNlcy5TY3JpcHRFbmRbMl1cbiAgICAgICAgICAgICAgICAgICAgICAgID8gU3RhdGUuQmVmb3JlU3BlY2lhbFNcbiAgICAgICAgICAgICAgICAgICAgICAgIDogU3RhdGUuSW5UYWdOYW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGMgPT09IENoYXJDb2Rlcy5TbGFzaCkge1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLkJlZm9yZUNsb3NpbmdUYWdOYW1lO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLlRleHQ7XG4gICAgICAgICAgICB0aGlzLnN0YXRlVGV4dChjKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVG9rZW5pemVyLnByb3RvdHlwZS5zdGF0ZUluVGFnTmFtZSA9IGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIGlmIChpc0VuZE9mVGFnU2VjdGlvbihjKSkge1xuICAgICAgICAgICAgdGhpcy5jYnMub25vcGVudGFnbmFtZSh0aGlzLnNlY3Rpb25TdGFydCwgdGhpcy5pbmRleCk7XG4gICAgICAgICAgICB0aGlzLnNlY3Rpb25TdGFydCA9IC0xO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLkJlZm9yZUF0dHJpYnV0ZU5hbWU7XG4gICAgICAgICAgICB0aGlzLnN0YXRlQmVmb3JlQXR0cmlidXRlTmFtZShjKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVG9rZW5pemVyLnByb3RvdHlwZS5zdGF0ZUJlZm9yZUNsb3NpbmdUYWdOYW1lID0gZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgaWYgKGlzV2hpdGVzcGFjZShjKSkge1xuICAgICAgICAgICAgLy8gSWdub3JlXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYyA9PT0gQ2hhckNvZGVzLkd0KSB7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuVGV4dDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSB0aGlzLmlzVGFnU3RhcnRDaGFyKGMpXG4gICAgICAgICAgICAgICAgPyBTdGF0ZS5JbkNsb3NpbmdUYWdOYW1lXG4gICAgICAgICAgICAgICAgOiBTdGF0ZS5JblNwZWNpYWxDb21tZW50O1xuICAgICAgICAgICAgdGhpcy5zZWN0aW9uU3RhcnQgPSB0aGlzLmluZGV4O1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUb2tlbml6ZXIucHJvdG90eXBlLnN0YXRlSW5DbG9zaW5nVGFnTmFtZSA9IGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIGlmIChjID09PSBDaGFyQ29kZXMuR3QgfHwgaXNXaGl0ZXNwYWNlKGMpKSB7XG4gICAgICAgICAgICB0aGlzLmNicy5vbmNsb3NldGFnKHRoaXMuc2VjdGlvblN0YXJ0LCB0aGlzLmluZGV4KTtcbiAgICAgICAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gLTE7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuQWZ0ZXJDbG9zaW5nVGFnTmFtZTtcbiAgICAgICAgICAgIHRoaXMuc3RhdGVBZnRlckNsb3NpbmdUYWdOYW1lKGMpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUb2tlbml6ZXIucHJvdG90eXBlLnN0YXRlQWZ0ZXJDbG9zaW5nVGFnTmFtZSA9IGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIC8vIFNraXAgZXZlcnl0aGluZyB1bnRpbCBcIj5cIlxuICAgICAgICBpZiAoYyA9PT0gQ2hhckNvZGVzLkd0IHx8IHRoaXMuZmFzdEZvcndhcmRUbyhDaGFyQ29kZXMuR3QpKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuVGV4dDtcbiAgICAgICAgICAgIHRoaXMuYmFzZVN0YXRlID0gU3RhdGUuVGV4dDtcbiAgICAgICAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gdGhpcy5pbmRleCArIDE7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRva2VuaXplci5wcm90b3R5cGUuc3RhdGVCZWZvcmVBdHRyaWJ1dGVOYW1lID0gZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgaWYgKGMgPT09IENoYXJDb2Rlcy5HdCkge1xuICAgICAgICAgICAgdGhpcy5jYnMub25vcGVudGFnZW5kKHRoaXMuaW5kZXgpO1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNTcGVjaWFsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLkluU3BlY2lhbFRhZztcbiAgICAgICAgICAgICAgICB0aGlzLnNlcXVlbmNlSW5kZXggPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLlRleHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmJhc2VTdGF0ZSA9IHRoaXMuc3RhdGU7XG4gICAgICAgICAgICB0aGlzLnNlY3Rpb25TdGFydCA9IHRoaXMuaW5kZXggKyAxO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGMgPT09IENoYXJDb2Rlcy5TbGFzaCkge1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLkluU2VsZkNsb3NpbmdUYWc7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIWlzV2hpdGVzcGFjZShjKSkge1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLkluQXR0cmlidXRlTmFtZTtcbiAgICAgICAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gdGhpcy5pbmRleDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVG9rZW5pemVyLnByb3RvdHlwZS5zdGF0ZUluU2VsZkNsb3NpbmdUYWcgPSBmdW5jdGlvbiAoYykge1xuICAgICAgICBpZiAoYyA9PT0gQ2hhckNvZGVzLkd0KSB7XG4gICAgICAgICAgICB0aGlzLmNicy5vbnNlbGZjbG9zaW5ndGFnKHRoaXMuaW5kZXgpO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLlRleHQ7XG4gICAgICAgICAgICB0aGlzLmJhc2VTdGF0ZSA9IFN0YXRlLlRleHQ7XG4gICAgICAgICAgICB0aGlzLnNlY3Rpb25TdGFydCA9IHRoaXMuaW5kZXggKyAxO1xuICAgICAgICAgICAgdGhpcy5pc1NwZWNpYWwgPSBmYWxzZTsgLy8gUmVzZXQgc3BlY2lhbCBzdGF0ZSwgaW4gY2FzZSBvZiBzZWxmLWNsb3Npbmcgc3BlY2lhbCB0YWdzXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIWlzV2hpdGVzcGFjZShjKSkge1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLkJlZm9yZUF0dHJpYnV0ZU5hbWU7XG4gICAgICAgICAgICB0aGlzLnN0YXRlQmVmb3JlQXR0cmlidXRlTmFtZShjKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVG9rZW5pemVyLnByb3RvdHlwZS5zdGF0ZUluQXR0cmlidXRlTmFtZSA9IGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIGlmIChjID09PSBDaGFyQ29kZXMuRXEgfHwgaXNFbmRPZlRhZ1NlY3Rpb24oYykpIHtcbiAgICAgICAgICAgIHRoaXMuY2JzLm9uYXR0cmlibmFtZSh0aGlzLnNlY3Rpb25TdGFydCwgdGhpcy5pbmRleCk7XG4gICAgICAgICAgICB0aGlzLnNlY3Rpb25TdGFydCA9IC0xO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLkFmdGVyQXR0cmlidXRlTmFtZTtcbiAgICAgICAgICAgIHRoaXMuc3RhdGVBZnRlckF0dHJpYnV0ZU5hbWUoYyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRva2VuaXplci5wcm90b3R5cGUuc3RhdGVBZnRlckF0dHJpYnV0ZU5hbWUgPSBmdW5jdGlvbiAoYykge1xuICAgICAgICBpZiAoYyA9PT0gQ2hhckNvZGVzLkVxKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuQmVmb3JlQXR0cmlidXRlVmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYyA9PT0gQ2hhckNvZGVzLlNsYXNoIHx8IGMgPT09IENoYXJDb2Rlcy5HdCkge1xuICAgICAgICAgICAgdGhpcy5jYnMub25hdHRyaWJlbmQoUXVvdGVUeXBlLk5vVmFsdWUsIHRoaXMuaW5kZXgpO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLkJlZm9yZUF0dHJpYnV0ZU5hbWU7XG4gICAgICAgICAgICB0aGlzLnN0YXRlQmVmb3JlQXR0cmlidXRlTmFtZShjKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghaXNXaGl0ZXNwYWNlKGMpKSB7XG4gICAgICAgICAgICB0aGlzLmNicy5vbmF0dHJpYmVuZChRdW90ZVR5cGUuTm9WYWx1ZSwgdGhpcy5pbmRleCk7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuSW5BdHRyaWJ1dGVOYW1lO1xuICAgICAgICAgICAgdGhpcy5zZWN0aW9uU3RhcnQgPSB0aGlzLmluZGV4O1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUb2tlbml6ZXIucHJvdG90eXBlLnN0YXRlQmVmb3JlQXR0cmlidXRlVmFsdWUgPSBmdW5jdGlvbiAoYykge1xuICAgICAgICBpZiAoYyA9PT0gQ2hhckNvZGVzLkRvdWJsZVF1b3RlKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuSW5BdHRyaWJ1dGVWYWx1ZURxO1xuICAgICAgICAgICAgdGhpcy5zZWN0aW9uU3RhcnQgPSB0aGlzLmluZGV4ICsgMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjID09PSBDaGFyQ29kZXMuU2luZ2xlUXVvdGUpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5JbkF0dHJpYnV0ZVZhbHVlU3E7XG4gICAgICAgICAgICB0aGlzLnNlY3Rpb25TdGFydCA9IHRoaXMuaW5kZXggKyAxO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFpc1doaXRlc3BhY2UoYykpIHtcbiAgICAgICAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gdGhpcy5pbmRleDtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5JbkF0dHJpYnV0ZVZhbHVlTnE7XG4gICAgICAgICAgICB0aGlzLnN0YXRlSW5BdHRyaWJ1dGVWYWx1ZU5vUXVvdGVzKGMpOyAvLyBSZWNvbnN1bWUgdG9rZW5cbiAgICAgICAgfVxuICAgIH07XG4gICAgVG9rZW5pemVyLnByb3RvdHlwZS5oYW5kbGVJbkF0dHJpYnV0ZVZhbHVlID0gZnVuY3Rpb24gKGMsIHF1b3RlKSB7XG4gICAgICAgIGlmIChjID09PSBxdW90ZSB8fFxuICAgICAgICAgICAgKCF0aGlzLmRlY29kZUVudGl0aWVzICYmIHRoaXMuZmFzdEZvcndhcmRUbyhxdW90ZSkpKSB7XG4gICAgICAgICAgICB0aGlzLmNicy5vbmF0dHJpYmRhdGEodGhpcy5zZWN0aW9uU3RhcnQsIHRoaXMuaW5kZXgpO1xuICAgICAgICAgICAgdGhpcy5zZWN0aW9uU3RhcnQgPSAtMTtcbiAgICAgICAgICAgIHRoaXMuY2JzLm9uYXR0cmliZW5kKHF1b3RlID09PSBDaGFyQ29kZXMuRG91YmxlUXVvdGVcbiAgICAgICAgICAgICAgICA/IFF1b3RlVHlwZS5Eb3VibGVcbiAgICAgICAgICAgICAgICA6IFF1b3RlVHlwZS5TaW5nbGUsIHRoaXMuaW5kZXgpO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLkJlZm9yZUF0dHJpYnV0ZU5hbWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5kZWNvZGVFbnRpdGllcyAmJiBjID09PSBDaGFyQ29kZXMuQW1wKSB7XG4gICAgICAgICAgICB0aGlzLmJhc2VTdGF0ZSA9IHRoaXMuc3RhdGU7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuQmVmb3JlRW50aXR5O1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUb2tlbml6ZXIucHJvdG90eXBlLnN0YXRlSW5BdHRyaWJ1dGVWYWx1ZURvdWJsZVF1b3RlcyA9IGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIHRoaXMuaGFuZGxlSW5BdHRyaWJ1dGVWYWx1ZShjLCBDaGFyQ29kZXMuRG91YmxlUXVvdGUpO1xuICAgIH07XG4gICAgVG9rZW5pemVyLnByb3RvdHlwZS5zdGF0ZUluQXR0cmlidXRlVmFsdWVTaW5nbGVRdW90ZXMgPSBmdW5jdGlvbiAoYykge1xuICAgICAgICB0aGlzLmhhbmRsZUluQXR0cmlidXRlVmFsdWUoYywgQ2hhckNvZGVzLlNpbmdsZVF1b3RlKTtcbiAgICB9O1xuICAgIFRva2VuaXplci5wcm90b3R5cGUuc3RhdGVJbkF0dHJpYnV0ZVZhbHVlTm9RdW90ZXMgPSBmdW5jdGlvbiAoYykge1xuICAgICAgICBpZiAoaXNXaGl0ZXNwYWNlKGMpIHx8IGMgPT09IENoYXJDb2Rlcy5HdCkge1xuICAgICAgICAgICAgdGhpcy5jYnMub25hdHRyaWJkYXRhKHRoaXMuc2VjdGlvblN0YXJ0LCB0aGlzLmluZGV4KTtcbiAgICAgICAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gLTE7XG4gICAgICAgICAgICB0aGlzLmNicy5vbmF0dHJpYmVuZChRdW90ZVR5cGUuVW5xdW90ZWQsIHRoaXMuaW5kZXgpO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLkJlZm9yZUF0dHJpYnV0ZU5hbWU7XG4gICAgICAgICAgICB0aGlzLnN0YXRlQmVmb3JlQXR0cmlidXRlTmFtZShjKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLmRlY29kZUVudGl0aWVzICYmIGMgPT09IENoYXJDb2Rlcy5BbXApIHtcbiAgICAgICAgICAgIHRoaXMuYmFzZVN0YXRlID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5CZWZvcmVFbnRpdHk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRva2VuaXplci5wcm90b3R5cGUuc3RhdGVCZWZvcmVEZWNsYXJhdGlvbiA9IGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIGlmIChjID09PSBDaGFyQ29kZXMuT3BlbmluZ1NxdWFyZUJyYWNrZXQpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5DREFUQVNlcXVlbmNlO1xuICAgICAgICAgICAgdGhpcy5zZXF1ZW5jZUluZGV4ID0gMDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPVxuICAgICAgICAgICAgICAgIGMgPT09IENoYXJDb2Rlcy5EYXNoXG4gICAgICAgICAgICAgICAgICAgID8gU3RhdGUuQmVmb3JlQ29tbWVudFxuICAgICAgICAgICAgICAgICAgICA6IFN0YXRlLkluRGVjbGFyYXRpb247XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRva2VuaXplci5wcm90b3R5cGUuc3RhdGVJbkRlY2xhcmF0aW9uID0gZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgaWYgKGMgPT09IENoYXJDb2Rlcy5HdCB8fCB0aGlzLmZhc3RGb3J3YXJkVG8oQ2hhckNvZGVzLkd0KSkge1xuICAgICAgICAgICAgdGhpcy5jYnMub25kZWNsYXJhdGlvbih0aGlzLnNlY3Rpb25TdGFydCwgdGhpcy5pbmRleCk7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuVGV4dDtcbiAgICAgICAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gdGhpcy5pbmRleCArIDE7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRva2VuaXplci5wcm90b3R5cGUuc3RhdGVJblByb2Nlc3NpbmdJbnN0cnVjdGlvbiA9IGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIGlmIChjID09PSBDaGFyQ29kZXMuR3QgfHwgdGhpcy5mYXN0Rm9yd2FyZFRvKENoYXJDb2Rlcy5HdCkpIHtcbiAgICAgICAgICAgIHRoaXMuY2JzLm9ucHJvY2Vzc2luZ2luc3RydWN0aW9uKHRoaXMuc2VjdGlvblN0YXJ0LCB0aGlzLmluZGV4KTtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5UZXh0O1xuICAgICAgICAgICAgdGhpcy5zZWN0aW9uU3RhcnQgPSB0aGlzLmluZGV4ICsgMTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVG9rZW5pemVyLnByb3RvdHlwZS5zdGF0ZUJlZm9yZUNvbW1lbnQgPSBmdW5jdGlvbiAoYykge1xuICAgICAgICBpZiAoYyA9PT0gQ2hhckNvZGVzLkRhc2gpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5JbkNvbW1lbnRMaWtlO1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50U2VxdWVuY2UgPSBTZXF1ZW5jZXMuQ29tbWVudEVuZDtcbiAgICAgICAgICAgIC8vIEFsbG93IHNob3J0IGNvbW1lbnRzIChlZy4gPCEtLT4pXG4gICAgICAgICAgICB0aGlzLnNlcXVlbmNlSW5kZXggPSAyO1xuICAgICAgICAgICAgdGhpcy5zZWN0aW9uU3RhcnQgPSB0aGlzLmluZGV4ICsgMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5JbkRlY2xhcmF0aW9uO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUb2tlbml6ZXIucHJvdG90eXBlLnN0YXRlSW5TcGVjaWFsQ29tbWVudCA9IGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIGlmIChjID09PSBDaGFyQ29kZXMuR3QgfHwgdGhpcy5mYXN0Rm9yd2FyZFRvKENoYXJDb2Rlcy5HdCkpIHtcbiAgICAgICAgICAgIHRoaXMuY2JzLm9uY29tbWVudCh0aGlzLnNlY3Rpb25TdGFydCwgdGhpcy5pbmRleCwgMCk7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuVGV4dDtcbiAgICAgICAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gdGhpcy5pbmRleCArIDE7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRva2VuaXplci5wcm90b3R5cGUuc3RhdGVCZWZvcmVTcGVjaWFsUyA9IGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIHZhciBsb3dlciA9IGMgfCAweDIwO1xuICAgICAgICBpZiAobG93ZXIgPT09IFNlcXVlbmNlcy5TY3JpcHRFbmRbM10pIHtcbiAgICAgICAgICAgIHRoaXMuc3RhcnRTcGVjaWFsKFNlcXVlbmNlcy5TY3JpcHRFbmQsIDQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGxvd2VyID09PSBTZXF1ZW5jZXMuU3R5bGVFbmRbM10pIHtcbiAgICAgICAgICAgIHRoaXMuc3RhcnRTcGVjaWFsKFNlcXVlbmNlcy5TdHlsZUVuZCwgNCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuSW5UYWdOYW1lO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZUluVGFnTmFtZShjKTsgLy8gQ29uc3VtZSB0aGUgdG9rZW4gYWdhaW5cbiAgICAgICAgfVxuICAgIH07XG4gICAgVG9rZW5pemVyLnByb3RvdHlwZS5zdGF0ZUJlZm9yZUVudGl0eSA9IGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIC8vIFN0YXJ0IGV4Y2VzcyB3aXRoIDEgdG8gaW5jbHVkZSB0aGUgJyYnXG4gICAgICAgIHRoaXMuZW50aXR5RXhjZXNzID0gMTtcbiAgICAgICAgdGhpcy5lbnRpdHlSZXN1bHQgPSAwO1xuICAgICAgICBpZiAoYyA9PT0gQ2hhckNvZGVzLk51bWJlcikge1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLkJlZm9yZU51bWVyaWNFbnRpdHk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYyA9PT0gQ2hhckNvZGVzLkFtcCkge1xuICAgICAgICAgICAgLy8gV2UgaGF2ZSB0d28gYCZgIGNoYXJhY3RlcnMgaW4gYSByb3cuIFN0YXkgaW4gdGhlIGN1cnJlbnQgc3RhdGUuXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnRyaWVJbmRleCA9IDA7XG4gICAgICAgICAgICB0aGlzLnRyaWVDdXJyZW50ID0gdGhpcy5lbnRpdHlUcmllWzBdO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLkluTmFtZWRFbnRpdHk7XG4gICAgICAgICAgICB0aGlzLnN0YXRlSW5OYW1lZEVudGl0eShjKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVG9rZW5pemVyLnByb3RvdHlwZS5zdGF0ZUluTmFtZWRFbnRpdHkgPSBmdW5jdGlvbiAoYykge1xuICAgICAgICB0aGlzLmVudGl0eUV4Y2VzcyArPSAxO1xuICAgICAgICB0aGlzLnRyaWVJbmRleCA9ICgwLCBkZWNvZGVfanNfMS5kZXRlcm1pbmVCcmFuY2gpKHRoaXMuZW50aXR5VHJpZSwgdGhpcy50cmllQ3VycmVudCwgdGhpcy50cmllSW5kZXggKyAxLCBjKTtcbiAgICAgICAgaWYgKHRoaXMudHJpZUluZGV4IDwgMCkge1xuICAgICAgICAgICAgdGhpcy5lbWl0TmFtZWRFbnRpdHkoKTtcbiAgICAgICAgICAgIHRoaXMuaW5kZXgtLTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnRyaWVDdXJyZW50ID0gdGhpcy5lbnRpdHlUcmllW3RoaXMudHJpZUluZGV4XTtcbiAgICAgICAgdmFyIG1hc2tlZCA9IHRoaXMudHJpZUN1cnJlbnQgJiBkZWNvZGVfanNfMS5CaW5UcmllRmxhZ3MuVkFMVUVfTEVOR1RIO1xuICAgICAgICAvLyBJZiB0aGUgYnJhbmNoIGlzIGEgdmFsdWUsIHN0b3JlIGl0IGFuZCBjb250aW51ZVxuICAgICAgICBpZiAobWFza2VkKSB7XG4gICAgICAgICAgICAvLyBUaGUgbWFzayBpcyB0aGUgbnVtYmVyIG9mIGJ5dGVzIG9mIHRoZSB2YWx1ZSwgaW5jbHVkaW5nIHRoZSBjdXJyZW50IGJ5dGUuXG4gICAgICAgICAgICB2YXIgdmFsdWVMZW5ndGggPSAobWFza2VkID4+IDE0KSAtIDE7XG4gICAgICAgICAgICAvLyBJZiB3ZSBoYXZlIGEgbGVnYWN5IGVudGl0eSB3aGlsZSBwYXJzaW5nIHN0cmljdGx5LCBqdXN0IHNraXAgdGhlIG51bWJlciBvZiBieXRlc1xuICAgICAgICAgICAgaWYgKCF0aGlzLmFsbG93TGVnYWN5RW50aXR5KCkgJiYgYyAhPT0gQ2hhckNvZGVzLlNlbWkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRyaWVJbmRleCArPSB2YWx1ZUxlbmd0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIEFkZCAxIGFzIHdlIGhhdmUgYWxyZWFkeSBpbmNyZW1lbnRlZCB0aGUgZXhjZXNzXG4gICAgICAgICAgICAgICAgdmFyIGVudGl0eVN0YXJ0ID0gdGhpcy5pbmRleCAtIHRoaXMuZW50aXR5RXhjZXNzICsgMTtcbiAgICAgICAgICAgICAgICBpZiAoZW50aXR5U3RhcnQgPiB0aGlzLnNlY3Rpb25TdGFydCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXRQYXJ0aWFsKHRoaXMuc2VjdGlvblN0YXJ0LCBlbnRpdHlTdGFydCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIElmIHRoaXMgaXMgYSBzdXJyb2dhdGUgcGFpciwgY29uc3VtZSB0aGUgbmV4dCB0d28gYnl0ZXNcbiAgICAgICAgICAgICAgICB0aGlzLmVudGl0eVJlc3VsdCA9IHRoaXMudHJpZUluZGV4O1xuICAgICAgICAgICAgICAgIHRoaXMudHJpZUluZGV4ICs9IHZhbHVlTGVuZ3RoO1xuICAgICAgICAgICAgICAgIHRoaXMuZW50aXR5RXhjZXNzID0gMDtcbiAgICAgICAgICAgICAgICB0aGlzLnNlY3Rpb25TdGFydCA9IHRoaXMuaW5kZXggKyAxO1xuICAgICAgICAgICAgICAgIGlmICh2YWx1ZUxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXROYW1lZEVudGl0eSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgVG9rZW5pemVyLnByb3RvdHlwZS5lbWl0TmFtZWRFbnRpdHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB0aGlzLmJhc2VTdGF0ZTtcbiAgICAgICAgaWYgKHRoaXMuZW50aXR5UmVzdWx0ID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHZhbHVlTGVuZ3RoID0gKHRoaXMuZW50aXR5VHJpZVt0aGlzLmVudGl0eVJlc3VsdF0gJiBkZWNvZGVfanNfMS5CaW5UcmllRmxhZ3MuVkFMVUVfTEVOR1RIKSA+PlxuICAgICAgICAgICAgMTQ7XG4gICAgICAgIHN3aXRjaCAodmFsdWVMZW5ndGgpIHtcbiAgICAgICAgICAgIGNhc2UgMToge1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdENvZGVQb2ludCh0aGlzLmVudGl0eVRyaWVbdGhpcy5lbnRpdHlSZXN1bHRdICZcbiAgICAgICAgICAgICAgICAgICAgfmRlY29kZV9qc18xLkJpblRyaWVGbGFncy5WQUxVRV9MRU5HVEgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAyOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0Q29kZVBvaW50KHRoaXMuZW50aXR5VHJpZVt0aGlzLmVudGl0eVJlc3VsdCArIDFdKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgMzoge1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdENvZGVQb2ludCh0aGlzLmVudGl0eVRyaWVbdGhpcy5lbnRpdHlSZXN1bHQgKyAxXSk7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0Q29kZVBvaW50KHRoaXMuZW50aXR5VHJpZVt0aGlzLmVudGl0eVJlc3VsdCArIDJdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgVG9rZW5pemVyLnByb3RvdHlwZS5zdGF0ZUJlZm9yZU51bWVyaWNFbnRpdHkgPSBmdW5jdGlvbiAoYykge1xuICAgICAgICBpZiAoKGMgfCAweDIwKSA9PT0gQ2hhckNvZGVzLkxvd2VyWCkge1xuICAgICAgICAgICAgdGhpcy5lbnRpdHlFeGNlc3MrKztcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5JbkhleEVudGl0eTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5Jbk51bWVyaWNFbnRpdHk7XG4gICAgICAgICAgICB0aGlzLnN0YXRlSW5OdW1lcmljRW50aXR5KGMpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUb2tlbml6ZXIucHJvdG90eXBlLmVtaXROdW1lcmljRW50aXR5ID0gZnVuY3Rpb24gKHN0cmljdCkge1xuICAgICAgICB2YXIgZW50aXR5U3RhcnQgPSB0aGlzLmluZGV4IC0gdGhpcy5lbnRpdHlFeGNlc3MgLSAxO1xuICAgICAgICB2YXIgbnVtYmVyU3RhcnQgPSBlbnRpdHlTdGFydCArIDIgKyBOdW1iZXIodGhpcy5zdGF0ZSA9PT0gU3RhdGUuSW5IZXhFbnRpdHkpO1xuICAgICAgICBpZiAobnVtYmVyU3RhcnQgIT09IHRoaXMuaW5kZXgpIHtcbiAgICAgICAgICAgIC8vIEVtaXQgbGVhZGluZyBkYXRhIGlmIGFueVxuICAgICAgICAgICAgaWYgKGVudGl0eVN0YXJ0ID4gdGhpcy5zZWN0aW9uU3RhcnQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXRQYXJ0aWFsKHRoaXMuc2VjdGlvblN0YXJ0LCBlbnRpdHlTdGFydCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnNlY3Rpb25TdGFydCA9IHRoaXMuaW5kZXggKyBOdW1iZXIoc3RyaWN0KTtcbiAgICAgICAgICAgIHRoaXMuZW1pdENvZGVQb2ludCgoMCwgZGVjb2RlX2pzXzEucmVwbGFjZUNvZGVQb2ludCkodGhpcy5lbnRpdHlSZXN1bHQpKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnN0YXRlID0gdGhpcy5iYXNlU3RhdGU7XG4gICAgfTtcbiAgICBUb2tlbml6ZXIucHJvdG90eXBlLnN0YXRlSW5OdW1lcmljRW50aXR5ID0gZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgaWYgKGMgPT09IENoYXJDb2Rlcy5TZW1pKSB7XG4gICAgICAgICAgICB0aGlzLmVtaXROdW1lcmljRW50aXR5KHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzTnVtYmVyKGMpKSB7XG4gICAgICAgICAgICB0aGlzLmVudGl0eVJlc3VsdCA9IHRoaXMuZW50aXR5UmVzdWx0ICogMTAgKyAoYyAtIENoYXJDb2Rlcy5aZXJvKTtcbiAgICAgICAgICAgIHRoaXMuZW50aXR5RXhjZXNzKys7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAodGhpcy5hbGxvd0xlZ2FjeUVudGl0eSgpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0TnVtZXJpY0VudGl0eShmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gdGhpcy5iYXNlU3RhdGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmluZGV4LS07XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRva2VuaXplci5wcm90b3R5cGUuc3RhdGVJbkhleEVudGl0eSA9IGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIGlmIChjID09PSBDaGFyQ29kZXMuU2VtaSkge1xuICAgICAgICAgICAgdGhpcy5lbWl0TnVtZXJpY0VudGl0eSh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc051bWJlcihjKSkge1xuICAgICAgICAgICAgdGhpcy5lbnRpdHlSZXN1bHQgPSB0aGlzLmVudGl0eVJlc3VsdCAqIDE2ICsgKGMgLSBDaGFyQ29kZXMuWmVybyk7XG4gICAgICAgICAgICB0aGlzLmVudGl0eUV4Y2VzcysrO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzSGV4RGlnaXQoYykpIHtcbiAgICAgICAgICAgIHRoaXMuZW50aXR5UmVzdWx0ID1cbiAgICAgICAgICAgICAgICB0aGlzLmVudGl0eVJlc3VsdCAqIDE2ICsgKChjIHwgMHgyMCkgLSBDaGFyQ29kZXMuTG93ZXJBICsgMTApO1xuICAgICAgICAgICAgdGhpcy5lbnRpdHlFeGNlc3MrKztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmFsbG93TGVnYWN5RW50aXR5KCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXROdW1lcmljRW50aXR5KGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSB0aGlzLmJhc2VTdGF0ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuaW5kZXgtLTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVG9rZW5pemVyLnByb3RvdHlwZS5hbGxvd0xlZ2FjeUVudGl0eSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICghdGhpcy54bWxNb2RlICYmXG4gICAgICAgICAgICAodGhpcy5iYXNlU3RhdGUgPT09IFN0YXRlLlRleHQgfHxcbiAgICAgICAgICAgICAgICB0aGlzLmJhc2VTdGF0ZSA9PT0gU3RhdGUuSW5TcGVjaWFsVGFnKSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZW1vdmUgZGF0YSB0aGF0IGhhcyBhbHJlYWR5IGJlZW4gY29uc3VtZWQgZnJvbSB0aGUgYnVmZmVyLlxuICAgICAqL1xuICAgIFRva2VuaXplci5wcm90b3R5cGUuY2xlYW51cCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gSWYgd2UgYXJlIGluc2lkZSBvZiB0ZXh0IG9yIGF0dHJpYnV0ZXMsIGVtaXQgd2hhdCB3ZSBhbHJlYWR5IGhhdmUuXG4gICAgICAgIGlmICh0aGlzLnJ1bm5pbmcgJiYgdGhpcy5zZWN0aW9uU3RhcnQgIT09IHRoaXMuaW5kZXgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnN0YXRlID09PSBTdGF0ZS5UZXh0IHx8XG4gICAgICAgICAgICAgICAgKHRoaXMuc3RhdGUgPT09IFN0YXRlLkluU3BlY2lhbFRhZyAmJiB0aGlzLnNlcXVlbmNlSW5kZXggPT09IDApKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jYnMub250ZXh0KHRoaXMuc2VjdGlvblN0YXJ0LCB0aGlzLmluZGV4KTtcbiAgICAgICAgICAgICAgICB0aGlzLnNlY3Rpb25TdGFydCA9IHRoaXMuaW5kZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLnN0YXRlID09PSBTdGF0ZS5JbkF0dHJpYnV0ZVZhbHVlRHEgfHxcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID09PSBTdGF0ZS5JbkF0dHJpYnV0ZVZhbHVlU3EgfHxcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID09PSBTdGF0ZS5JbkF0dHJpYnV0ZVZhbHVlTnEpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNicy5vbmF0dHJpYmRhdGEodGhpcy5zZWN0aW9uU3RhcnQsIHRoaXMuaW5kZXgpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2VjdGlvblN0YXJ0ID0gdGhpcy5pbmRleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgVG9rZW5pemVyLnByb3RvdHlwZS5zaG91bGRDb250aW51ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5kZXggPCB0aGlzLmJ1ZmZlci5sZW5ndGggKyB0aGlzLm9mZnNldCAmJiB0aGlzLnJ1bm5pbmc7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBJdGVyYXRlcyB0aHJvdWdoIHRoZSBidWZmZXIsIGNhbGxpbmcgdGhlIGZ1bmN0aW9uIGNvcnJlc3BvbmRpbmcgdG8gdGhlIGN1cnJlbnQgc3RhdGUuXG4gICAgICpcbiAgICAgKiBTdGF0ZXMgdGhhdCBhcmUgbW9yZSBsaWtlbHkgdG8gYmUgaGl0IGFyZSBoaWdoZXIgdXAsIGFzIGEgcGVyZm9ybWFuY2UgaW1wcm92ZW1lbnQuXG4gICAgICovXG4gICAgVG9rZW5pemVyLnByb3RvdHlwZS5wYXJzZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgd2hpbGUgKHRoaXMuc2hvdWxkQ29udGludWUoKSkge1xuICAgICAgICAgICAgdmFyIGMgPSB0aGlzLmJ1ZmZlci5jaGFyQ29kZUF0KHRoaXMuaW5kZXggLSB0aGlzLm9mZnNldCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRoaXMuc3RhdGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlIFN0YXRlLlRleHQ6IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZVRleHQoYyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlIFN0YXRlLlNwZWNpYWxTdGFydFNlcXVlbmNlOiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGVTcGVjaWFsU3RhcnRTZXF1ZW5jZShjKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgU3RhdGUuSW5TcGVjaWFsVGFnOiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGVJblNwZWNpYWxUYWcoYyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlIFN0YXRlLkNEQVRBU2VxdWVuY2U6IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZUNEQVRBU2VxdWVuY2UoYyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlIFN0YXRlLkluQXR0cmlidXRlVmFsdWVEcToge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlSW5BdHRyaWJ1dGVWYWx1ZURvdWJsZVF1b3RlcyhjKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgU3RhdGUuSW5BdHRyaWJ1dGVOYW1lOiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGVJbkF0dHJpYnV0ZU5hbWUoYyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlIFN0YXRlLkluQ29tbWVudExpa2U6IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZUluQ29tbWVudExpa2UoYyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlIFN0YXRlLkluU3BlY2lhbENvbW1lbnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZUluU3BlY2lhbENvbW1lbnQoYyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlIFN0YXRlLkJlZm9yZUF0dHJpYnV0ZU5hbWU6IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZUJlZm9yZUF0dHJpYnV0ZU5hbWUoYyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlIFN0YXRlLkluVGFnTmFtZToge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlSW5UYWdOYW1lKGMpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSBTdGF0ZS5JbkNsb3NpbmdUYWdOYW1lOiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGVJbkNsb3NpbmdUYWdOYW1lKGMpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSBTdGF0ZS5CZWZvcmVUYWdOYW1lOiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGVCZWZvcmVUYWdOYW1lKGMpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSBTdGF0ZS5BZnRlckF0dHJpYnV0ZU5hbWU6IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZUFmdGVyQXR0cmlidXRlTmFtZShjKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgU3RhdGUuSW5BdHRyaWJ1dGVWYWx1ZVNxOiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGVJbkF0dHJpYnV0ZVZhbHVlU2luZ2xlUXVvdGVzKGMpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSBTdGF0ZS5CZWZvcmVBdHRyaWJ1dGVWYWx1ZToge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlQmVmb3JlQXR0cmlidXRlVmFsdWUoYyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlIFN0YXRlLkJlZm9yZUNsb3NpbmdUYWdOYW1lOiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGVCZWZvcmVDbG9zaW5nVGFnTmFtZShjKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgU3RhdGUuQWZ0ZXJDbG9zaW5nVGFnTmFtZToge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlQWZ0ZXJDbG9zaW5nVGFnTmFtZShjKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgU3RhdGUuQmVmb3JlU3BlY2lhbFM6IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZUJlZm9yZVNwZWNpYWxTKGMpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSBTdGF0ZS5JbkF0dHJpYnV0ZVZhbHVlTnE6IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZUluQXR0cmlidXRlVmFsdWVOb1F1b3RlcyhjKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgU3RhdGUuSW5TZWxmQ2xvc2luZ1RhZzoge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlSW5TZWxmQ2xvc2luZ1RhZyhjKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgU3RhdGUuSW5EZWNsYXJhdGlvbjoge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlSW5EZWNsYXJhdGlvbihjKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgU3RhdGUuQmVmb3JlRGVjbGFyYXRpb246IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZUJlZm9yZURlY2xhcmF0aW9uKGMpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSBTdGF0ZS5CZWZvcmVDb21tZW50OiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGVCZWZvcmVDb21tZW50KGMpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSBTdGF0ZS5JblByb2Nlc3NpbmdJbnN0cnVjdGlvbjoge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlSW5Qcm9jZXNzaW5nSW5zdHJ1Y3Rpb24oYyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlIFN0YXRlLkluTmFtZWRFbnRpdHk6IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZUluTmFtZWRFbnRpdHkoYyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlIFN0YXRlLkJlZm9yZUVudGl0eToge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlQmVmb3JlRW50aXR5KGMpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSBTdGF0ZS5JbkhleEVudGl0eToge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlSW5IZXhFbnRpdHkoYyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlIFN0YXRlLkluTnVtZXJpY0VudGl0eToge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlSW5OdW1lcmljRW50aXR5KGMpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgICAgICAgICAvLyBgdGhpcy5fc3RhdGUgPT09IFN0YXRlLkJlZm9yZU51bWVyaWNFbnRpdHlgXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGVCZWZvcmVOdW1lcmljRW50aXR5KGMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuaW5kZXgrKztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNsZWFudXAoKTtcbiAgICB9O1xuICAgIFRva2VuaXplci5wcm90b3R5cGUuZmluaXNoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5zdGF0ZSA9PT0gU3RhdGUuSW5OYW1lZEVudGl0eSkge1xuICAgICAgICAgICAgdGhpcy5lbWl0TmFtZWRFbnRpdHkoKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBJZiB0aGVyZSBpcyByZW1haW5pbmcgZGF0YSwgZW1pdCBpdCBpbiBhIHJlYXNvbmFibGUgd2F5XG4gICAgICAgIGlmICh0aGlzLnNlY3Rpb25TdGFydCA8IHRoaXMuaW5kZXgpIHtcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlVHJhaWxpbmdEYXRhKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jYnMub25lbmQoKTtcbiAgICB9O1xuICAgIC8qKiBIYW5kbGUgYW55IHRyYWlsaW5nIGRhdGEuICovXG4gICAgVG9rZW5pemVyLnByb3RvdHlwZS5oYW5kbGVUcmFpbGluZ0RhdGEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBlbmRJbmRleCA9IHRoaXMuYnVmZmVyLmxlbmd0aCArIHRoaXMub2Zmc2V0O1xuICAgICAgICBpZiAodGhpcy5zdGF0ZSA9PT0gU3RhdGUuSW5Db21tZW50TGlrZSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuY3VycmVudFNlcXVlbmNlID09PSBTZXF1ZW5jZXMuQ2RhdGFFbmQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNicy5vbmNkYXRhKHRoaXMuc2VjdGlvblN0YXJ0LCBlbmRJbmRleCwgMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNicy5vbmNvbW1lbnQodGhpcy5zZWN0aW9uU3RhcnQsIGVuZEluZGV4LCAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLnN0YXRlID09PSBTdGF0ZS5Jbk51bWVyaWNFbnRpdHkgJiZcbiAgICAgICAgICAgIHRoaXMuYWxsb3dMZWdhY3lFbnRpdHkoKSkge1xuICAgICAgICAgICAgdGhpcy5lbWl0TnVtZXJpY0VudGl0eShmYWxzZSk7XG4gICAgICAgICAgICAvLyBBbGwgdHJhaWxpbmcgZGF0YSB3aWxsIGhhdmUgYmVlbiBjb25zdW1lZFxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuc3RhdGUgPT09IFN0YXRlLkluSGV4RW50aXR5ICYmXG4gICAgICAgICAgICB0aGlzLmFsbG93TGVnYWN5RW50aXR5KCkpIHtcbiAgICAgICAgICAgIHRoaXMuZW1pdE51bWVyaWNFbnRpdHkoZmFsc2UpO1xuICAgICAgICAgICAgLy8gQWxsIHRyYWlsaW5nIGRhdGEgd2lsbCBoYXZlIGJlZW4gY29uc3VtZWRcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLnN0YXRlID09PSBTdGF0ZS5JblRhZ05hbWUgfHxcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPT09IFN0YXRlLkJlZm9yZUF0dHJpYnV0ZU5hbWUgfHxcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPT09IFN0YXRlLkJlZm9yZUF0dHJpYnV0ZVZhbHVlIHx8XG4gICAgICAgICAgICB0aGlzLnN0YXRlID09PSBTdGF0ZS5BZnRlckF0dHJpYnV0ZU5hbWUgfHxcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPT09IFN0YXRlLkluQXR0cmlidXRlTmFtZSB8fFxuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9PT0gU3RhdGUuSW5BdHRyaWJ1dGVWYWx1ZVNxIHx8XG4gICAgICAgICAgICB0aGlzLnN0YXRlID09PSBTdGF0ZS5JbkF0dHJpYnV0ZVZhbHVlRHEgfHxcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPT09IFN0YXRlLkluQXR0cmlidXRlVmFsdWVOcSB8fFxuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9PT0gU3RhdGUuSW5DbG9zaW5nVGFnTmFtZSkge1xuICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAqIElmIHdlIGFyZSBjdXJyZW50bHkgaW4gYW4gb3BlbmluZyBvciBjbG9zaW5nIHRhZywgdXMgbm90IGNhbGxpbmcgdGhlXG4gICAgICAgICAgICAgKiByZXNwZWN0aXZlIGNhbGxiYWNrIHNpZ25hbHMgdGhhdCB0aGUgdGFnIHNob3VsZCBiZSBpZ25vcmVkLlxuICAgICAgICAgICAgICovXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNicy5vbnRleHQodGhpcy5zZWN0aW9uU3RhcnQsIGVuZEluZGV4KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVG9rZW5pemVyLnByb3RvdHlwZS5lbWl0UGFydGlhbCA9IGZ1bmN0aW9uIChzdGFydCwgZW5kSW5kZXgpIHtcbiAgICAgICAgaWYgKHRoaXMuYmFzZVN0YXRlICE9PSBTdGF0ZS5UZXh0ICYmXG4gICAgICAgICAgICB0aGlzLmJhc2VTdGF0ZSAhPT0gU3RhdGUuSW5TcGVjaWFsVGFnKSB7XG4gICAgICAgICAgICB0aGlzLmNicy5vbmF0dHJpYmRhdGEoc3RhcnQsIGVuZEluZGV4KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuY2JzLm9udGV4dChzdGFydCwgZW5kSW5kZXgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUb2tlbml6ZXIucHJvdG90eXBlLmVtaXRDb2RlUG9pbnQgPSBmdW5jdGlvbiAoY3ApIHtcbiAgICAgICAgaWYgKHRoaXMuYmFzZVN0YXRlICE9PSBTdGF0ZS5UZXh0ICYmXG4gICAgICAgICAgICB0aGlzLmJhc2VTdGF0ZSAhPT0gU3RhdGUuSW5TcGVjaWFsVGFnKSB7XG4gICAgICAgICAgICB0aGlzLmNicy5vbmF0dHJpYmVudGl0eShjcCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNicy5vbnRleHRlbnRpdHkoY3ApO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gVG9rZW5pemVyO1xufSgpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IFRva2VuaXplcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVRva2VuaXplci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59KTtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Eb21VdGlscyA9IGV4cG9ydHMucGFyc2VGZWVkID0gZXhwb3J0cy5nZXRGZWVkID0gZXhwb3J0cy5FbGVtZW50VHlwZSA9IGV4cG9ydHMuVG9rZW5pemVyID0gZXhwb3J0cy5jcmVhdGVEb21TdHJlYW0gPSBleHBvcnRzLnBhcnNlRE9NID0gZXhwb3J0cy5wYXJzZURvY3VtZW50ID0gZXhwb3J0cy5EZWZhdWx0SGFuZGxlciA9IGV4cG9ydHMuRG9tSGFuZGxlciA9IGV4cG9ydHMuUGFyc2VyID0gdm9pZCAwO1xudmFyIFBhcnNlcl9qc18xID0gcmVxdWlyZShcIi4vUGFyc2VyLmpzXCIpO1xudmFyIFBhcnNlcl9qc18yID0gcmVxdWlyZShcIi4vUGFyc2VyLmpzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiUGFyc2VyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBQYXJzZXJfanNfMi5QYXJzZXI7IH0gfSk7XG52YXIgZG9taGFuZGxlcl8xID0gcmVxdWlyZShcImRvbWhhbmRsZXJcIik7XG52YXIgZG9taGFuZGxlcl8yID0gcmVxdWlyZShcImRvbWhhbmRsZXJcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJEb21IYW5kbGVyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkb21oYW5kbGVyXzIuRG9tSGFuZGxlcjsgfSB9KTtcbi8vIE9sZCBuYW1lIGZvciBEb21IYW5kbGVyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJEZWZhdWx0SGFuZGxlclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZG9taGFuZGxlcl8yLkRvbUhhbmRsZXI7IH0gfSk7XG4vLyBIZWxwZXIgbWV0aG9kc1xuLyoqXG4gKiBQYXJzZXMgdGhlIGRhdGEsIHJldHVybnMgdGhlIHJlc3VsdGluZyBkb2N1bWVudC5cbiAqXG4gKiBAcGFyYW0gZGF0YSBUaGUgZGF0YSB0aGF0IHNob3VsZCBiZSBwYXJzZWQuXG4gKiBAcGFyYW0gb3B0aW9ucyBPcHRpb25hbCBvcHRpb25zIGZvciB0aGUgcGFyc2VyIGFuZCBET00gYnVpbGRlci5cbiAqL1xuZnVuY3Rpb24gcGFyc2VEb2N1bWVudChkYXRhLCBvcHRpb25zKSB7XG4gICAgdmFyIGhhbmRsZXIgPSBuZXcgZG9taGFuZGxlcl8xLkRvbUhhbmRsZXIodW5kZWZpbmVkLCBvcHRpb25zKTtcbiAgICBuZXcgUGFyc2VyX2pzXzEuUGFyc2VyKGhhbmRsZXIsIG9wdGlvbnMpLmVuZChkYXRhKTtcbiAgICByZXR1cm4gaGFuZGxlci5yb290O1xufVxuZXhwb3J0cy5wYXJzZURvY3VtZW50ID0gcGFyc2VEb2N1bWVudDtcbi8qKlxuICogUGFyc2VzIGRhdGEsIHJldHVybnMgYW4gYXJyYXkgb2YgdGhlIHJvb3Qgbm9kZXMuXG4gKlxuICogTm90ZSB0aGF0IHRoZSByb290IG5vZGVzIHN0aWxsIGhhdmUgYSBgRG9jdW1lbnRgIG5vZGUgYXMgdGhlaXIgcGFyZW50LlxuICogVXNlIGBwYXJzZURvY3VtZW50YCB0byBnZXQgdGhlIGBEb2N1bWVudGAgbm9kZSBpbnN0ZWFkLlxuICpcbiAqIEBwYXJhbSBkYXRhIFRoZSBkYXRhIHRoYXQgc2hvdWxkIGJlIHBhcnNlZC5cbiAqIEBwYXJhbSBvcHRpb25zIE9wdGlvbmFsIG9wdGlvbnMgZm9yIHRoZSBwYXJzZXIgYW5kIERPTSBidWlsZGVyLlxuICogQGRlcHJlY2F0ZWQgVXNlIGBwYXJzZURvY3VtZW50YCBpbnN0ZWFkLlxuICovXG5mdW5jdGlvbiBwYXJzZURPTShkYXRhLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIHBhcnNlRG9jdW1lbnQoZGF0YSwgb3B0aW9ucykuY2hpbGRyZW47XG59XG5leHBvcnRzLnBhcnNlRE9NID0gcGFyc2VET007XG4vKipcbiAqIENyZWF0ZXMgYSBwYXJzZXIgaW5zdGFuY2UsIHdpdGggYW4gYXR0YWNoZWQgRE9NIGhhbmRsZXIuXG4gKlxuICogQHBhcmFtIGNhbGxiYWNrIEEgY2FsbGJhY2sgdGhhdCB3aWxsIGJlIGNhbGxlZCBvbmNlIHBhcnNpbmcgaGFzIGJlZW4gY29tcGxldGVkLlxuICogQHBhcmFtIG9wdGlvbnMgT3B0aW9uYWwgb3B0aW9ucyBmb3IgdGhlIHBhcnNlciBhbmQgRE9NIGJ1aWxkZXIuXG4gKiBAcGFyYW0gZWxlbWVudENhbGxiYWNrIEFuIG9wdGlvbmFsIGNhbGxiYWNrIHRoYXQgd2lsbCBiZSBjYWxsZWQgZXZlcnkgdGltZSBhIHRhZyBoYXMgYmVlbiBjb21wbGV0ZWQgaW5zaWRlIG9mIHRoZSBET00uXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZURvbVN0cmVhbShjYWxsYmFjaywgb3B0aW9ucywgZWxlbWVudENhbGxiYWNrKSB7XG4gICAgdmFyIGhhbmRsZXIgPSBuZXcgZG9taGFuZGxlcl8xLkRvbUhhbmRsZXIoY2FsbGJhY2ssIG9wdGlvbnMsIGVsZW1lbnRDYWxsYmFjayk7XG4gICAgcmV0dXJuIG5ldyBQYXJzZXJfanNfMS5QYXJzZXIoaGFuZGxlciwgb3B0aW9ucyk7XG59XG5leHBvcnRzLmNyZWF0ZURvbVN0cmVhbSA9IGNyZWF0ZURvbVN0cmVhbTtcbnZhciBUb2tlbml6ZXJfanNfMSA9IHJlcXVpcmUoXCIuL1Rva2VuaXplci5qc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlRva2VuaXplclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gX19pbXBvcnREZWZhdWx0KFRva2VuaXplcl9qc18xKS5kZWZhdWx0OyB9IH0pO1xuLypcbiAqIEFsbCBvZiB0aGUgZm9sbG93aW5nIGV4cG9ydHMgZXhpc3QgZm9yIGJhY2t3YXJkcy1jb21wYXRpYmlsaXR5LlxuICogVGhleSBzaG91bGQgcHJvYmFibHkgYmUgcmVtb3ZlZCBldmVudHVhbGx5LlxuICovXG5leHBvcnRzLkVsZW1lbnRUeXBlID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCJkb21lbGVtZW50dHlwZVwiKSk7XG52YXIgZG9tdXRpbHNfMSA9IHJlcXVpcmUoXCJkb211dGlsc1wiKTtcbnZhciBkb211dGlsc18yID0gcmVxdWlyZShcImRvbXV0aWxzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZ2V0RmVlZFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZG9tdXRpbHNfMi5nZXRGZWVkOyB9IH0pO1xudmFyIHBhcnNlRmVlZERlZmF1bHRPcHRpb25zID0geyB4bWxNb2RlOiB0cnVlIH07XG4vKipcbiAqIFBhcnNlIGEgZmVlZC5cbiAqXG4gKiBAcGFyYW0gZmVlZCBUaGUgZmVlZCB0aGF0IHNob3VsZCBiZSBwYXJzZWQsIGFzIGEgc3RyaW5nLlxuICogQHBhcmFtIG9wdGlvbnMgT3B0aW9uYWxseSwgb3B0aW9ucyBmb3IgcGFyc2luZy4gV2hlbiB1c2luZyB0aGlzLCB5b3Ugc2hvdWxkIHNldCBgeG1sTW9kZWAgdG8gYHRydWVgLlxuICovXG5mdW5jdGlvbiBwYXJzZUZlZWQoZmVlZCwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHBhcnNlRmVlZERlZmF1bHRPcHRpb25zOyB9XG4gICAgcmV0dXJuICgwLCBkb211dGlsc18xLmdldEZlZWQpKHBhcnNlRE9NKGZlZWQsIG9wdGlvbnMpKTtcbn1cbmV4cG9ydHMucGFyc2VGZWVkID0gcGFyc2VGZWVkO1xuZXhwb3J0cy5Eb21VdGlscyA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiZG9tdXRpbHNcIikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY2FsbEJvdW5kID0gcmVxdWlyZSgnY2FsbC1iaW5kL2NhbGxCb3VuZCcpO1xudmFyICRib29sVG9TdHIgPSBjYWxsQm91bmQoJ0Jvb2xlYW4ucHJvdG90eXBlLnRvU3RyaW5nJyk7XG52YXIgJHRvU3RyaW5nID0gY2FsbEJvdW5kKCdPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nJyk7XG5cbnZhciB0cnlCb29sZWFuT2JqZWN0ID0gZnVuY3Rpb24gYm9vbGVhbkJyYW5kQ2hlY2sodmFsdWUpIHtcblx0dHJ5IHtcblx0XHQkYm9vbFRvU3RyKHZhbHVlKTtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufTtcbnZhciBib29sQ2xhc3MgPSAnW29iamVjdCBCb29sZWFuXSc7XG52YXIgaGFzVG9TdHJpbmdUYWcgPSByZXF1aXJlKCdoYXMtdG9zdHJpbmd0YWcvc2hhbXMnKSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQm9vbGVhbih2YWx1ZSkge1xuXHRpZiAodHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbicpIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXHRpZiAodmFsdWUgPT09IG51bGwgfHwgdHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0Jykge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXHRyZXR1cm4gaGFzVG9TdHJpbmdUYWcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnIGluIHZhbHVlID8gdHJ5Qm9vbGVhbk9iamVjdCh2YWx1ZSkgOiAkdG9TdHJpbmcodmFsdWUpID09PSBib29sQ2xhc3M7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZm5Ub1N0ciA9IEZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZztcbnZhciByZWZsZWN0QXBwbHkgPSB0eXBlb2YgUmVmbGVjdCA9PT0gJ29iamVjdCcgJiYgUmVmbGVjdCAhPT0gbnVsbCAmJiBSZWZsZWN0LmFwcGx5O1xudmFyIGJhZEFycmF5TGlrZTtcbnZhciBpc0NhbGxhYmxlTWFya2VyO1xuaWYgKHR5cGVvZiByZWZsZWN0QXBwbHkgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSA9PT0gJ2Z1bmN0aW9uJykge1xuXHR0cnkge1xuXHRcdGJhZEFycmF5TGlrZSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ2xlbmd0aCcsIHtcblx0XHRcdGdldDogZnVuY3Rpb24gKCkge1xuXHRcdFx0XHR0aHJvdyBpc0NhbGxhYmxlTWFya2VyO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdGlzQ2FsbGFibGVNYXJrZXIgPSB7fTtcblx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdGhyb3ctbGl0ZXJhbFxuXHRcdHJlZmxlY3RBcHBseShmdW5jdGlvbiAoKSB7IHRocm93IDQyOyB9LCBudWxsLCBiYWRBcnJheUxpa2UpO1xuXHR9IGNhdGNoIChfKSB7XG5cdFx0aWYgKF8gIT09IGlzQ2FsbGFibGVNYXJrZXIpIHtcblx0XHRcdHJlZmxlY3RBcHBseSA9IG51bGw7XG5cdFx0fVxuXHR9XG59IGVsc2Uge1xuXHRyZWZsZWN0QXBwbHkgPSBudWxsO1xufVxuXG52YXIgY29uc3RydWN0b3JSZWdleCA9IC9eXFxzKmNsYXNzXFxiLztcbnZhciBpc0VTNkNsYXNzRm4gPSBmdW5jdGlvbiBpc0VTNkNsYXNzRnVuY3Rpb24odmFsdWUpIHtcblx0dHJ5IHtcblx0XHR2YXIgZm5TdHIgPSBmblRvU3RyLmNhbGwodmFsdWUpO1xuXHRcdHJldHVybiBjb25zdHJ1Y3RvclJlZ2V4LnRlc3QoZm5TdHIpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0cmV0dXJuIGZhbHNlOyAvLyBub3QgYSBmdW5jdGlvblxuXHR9XG59O1xuXG52YXIgdHJ5RnVuY3Rpb25PYmplY3QgPSBmdW5jdGlvbiB0cnlGdW5jdGlvblRvU3RyKHZhbHVlKSB7XG5cdHRyeSB7XG5cdFx0aWYgKGlzRVM2Q2xhc3NGbih2YWx1ZSkpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdFx0Zm5Ub1N0ci5jYWxsKHZhbHVlKTtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufTtcbnZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgb2JqZWN0Q2xhc3MgPSAnW29iamVjdCBPYmplY3RdJztcbnZhciBmbkNsYXNzID0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbnZhciBnZW5DbGFzcyA9ICdbb2JqZWN0IEdlbmVyYXRvckZ1bmN0aW9uXSc7XG52YXIgZGRhQ2xhc3MgPSAnW29iamVjdCBIVE1MQWxsQ29sbGVjdGlvbl0nOyAvLyBJRSAxMVxudmFyIGRkYUNsYXNzMiA9ICdbb2JqZWN0IEhUTUwgZG9jdW1lbnQuYWxsIGNsYXNzXSc7XG52YXIgZGRhQ2xhc3MzID0gJ1tvYmplY3QgSFRNTENvbGxlY3Rpb25dJzsgLy8gSUUgOS0xMFxudmFyIGhhc1RvU3RyaW5nVGFnID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiAhIVN5bWJvbC50b1N0cmluZ1RhZzsgLy8gYmV0dGVyOiB1c2UgYGhhcy10b3N0cmluZ3RhZ2BcblxudmFyIGlzSUU2OCA9ICEoMCBpbiBbLF0pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNwYXJzZS1hcnJheXMsIGNvbW1hLXNwYWNpbmdcblxudmFyIGlzRERBID0gZnVuY3Rpb24gaXNEb2N1bWVudERvdEFsbCgpIHsgcmV0dXJuIGZhbHNlOyB9O1xuaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gJ29iamVjdCcpIHtcblx0Ly8gRmlyZWZveCAzIGNhbm9uaWNhbGl6ZXMgRERBIHRvIHVuZGVmaW5lZCB3aGVuIGl0J3Mgbm90IGFjY2Vzc2VkIGRpcmVjdGx5XG5cdHZhciBhbGwgPSBkb2N1bWVudC5hbGw7XG5cdGlmICh0b1N0ci5jYWxsKGFsbCkgPT09IHRvU3RyLmNhbGwoZG9jdW1lbnQuYWxsKSkge1xuXHRcdGlzRERBID0gZnVuY3Rpb24gaXNEb2N1bWVudERvdEFsbCh2YWx1ZSkge1xuXHRcdFx0LyogZ2xvYmFscyBkb2N1bWVudDogZmFsc2UgKi9cblx0XHRcdC8vIGluIElFIDYtOCwgdHlwZW9mIGRvY3VtZW50LmFsbCBpcyBcIm9iamVjdFwiIGFuZCBpdCdzIHRydXRoeVxuXHRcdFx0aWYgKChpc0lFNjggfHwgIXZhbHVlKSAmJiAodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJyB8fCB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSkge1xuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdHZhciBzdHIgPSB0b1N0ci5jYWxsKHZhbHVlKTtcblx0XHRcdFx0XHRyZXR1cm4gKFxuXHRcdFx0XHRcdFx0c3RyID09PSBkZGFDbGFzc1xuXHRcdFx0XHRcdFx0fHwgc3RyID09PSBkZGFDbGFzczJcblx0XHRcdFx0XHRcdHx8IHN0ciA9PT0gZGRhQ2xhc3MzIC8vIG9wZXJhIDEyLjE2XG5cdFx0XHRcdFx0XHR8fCBzdHIgPT09IG9iamVjdENsYXNzIC8vIElFIDYtOFxuXHRcdFx0XHRcdCkgJiYgdmFsdWUoJycpID09IG51bGw7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZXFlcWVxXG5cdFx0XHRcdH0gY2F0Y2ggKGUpIHsgLyoqLyB9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlZmxlY3RBcHBseVxuXHQ/IGZ1bmN0aW9uIGlzQ2FsbGFibGUodmFsdWUpIHtcblx0XHRpZiAoaXNEREEodmFsdWUpKSB7IHJldHVybiB0cnVlOyB9XG5cdFx0aWYgKCF2YWx1ZSkgeyByZXR1cm4gZmFsc2U7IH1cblx0XHRpZiAodHlwZW9mIHZhbHVlICE9PSAnZnVuY3Rpb24nICYmIHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdFx0dHJ5IHtcblx0XHRcdHJlZmxlY3RBcHBseSh2YWx1ZSwgbnVsbCwgYmFkQXJyYXlMaWtlKTtcblx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRpZiAoZSAhPT0gaXNDYWxsYWJsZU1hcmtlcikgeyByZXR1cm4gZmFsc2U7IH1cblx0XHR9XG5cdFx0cmV0dXJuICFpc0VTNkNsYXNzRm4odmFsdWUpICYmIHRyeUZ1bmN0aW9uT2JqZWN0KHZhbHVlKTtcblx0fVxuXHQ6IGZ1bmN0aW9uIGlzQ2FsbGFibGUodmFsdWUpIHtcblx0XHRpZiAoaXNEREEodmFsdWUpKSB7IHJldHVybiB0cnVlOyB9XG5cdFx0aWYgKCF2YWx1ZSkgeyByZXR1cm4gZmFsc2U7IH1cblx0XHRpZiAodHlwZW9mIHZhbHVlICE9PSAnZnVuY3Rpb24nICYmIHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdFx0aWYgKGhhc1RvU3RyaW5nVGFnKSB7IHJldHVybiB0cnlGdW5jdGlvbk9iamVjdCh2YWx1ZSk7IH1cblx0XHRpZiAoaXNFUzZDbGFzc0ZuKHZhbHVlKSkgeyByZXR1cm4gZmFsc2U7IH1cblx0XHR2YXIgc3RyQ2xhc3MgPSB0b1N0ci5jYWxsKHZhbHVlKTtcblx0XHRpZiAoc3RyQ2xhc3MgIT09IGZuQ2xhc3MgJiYgc3RyQ2xhc3MgIT09IGdlbkNsYXNzICYmICEoL15cXFtvYmplY3QgSFRNTC8pLnRlc3Qoc3RyQ2xhc3MpKSB7IHJldHVybiBmYWxzZTsgfVxuXHRcdHJldHVybiB0cnlGdW5jdGlvbk9iamVjdCh2YWx1ZSk7XG5cdH07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBnZXREYXkgPSBEYXRlLnByb3RvdHlwZS5nZXREYXk7XG52YXIgdHJ5RGF0ZU9iamVjdCA9IGZ1bmN0aW9uIHRyeURhdGVHZXREYXlDYWxsKHZhbHVlKSB7XG5cdHRyeSB7XG5cdFx0Z2V0RGF5LmNhbGwodmFsdWUpO1xuXHRcdHJldHVybiB0cnVlO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59O1xuXG52YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIGRhdGVDbGFzcyA9ICdbb2JqZWN0IERhdGVdJztcbnZhciBoYXNUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJ2hhcy10b3N0cmluZ3RhZy9zaGFtcycpKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNEYXRlT2JqZWN0KHZhbHVlKSB7XG5cdGlmICh0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnIHx8IHZhbHVlID09PSBudWxsKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cdHJldHVybiBoYXNUb1N0cmluZ1RhZyA/IHRyeURhdGVPYmplY3QodmFsdWUpIDogdG9TdHIuY2FsbCh2YWx1ZSkgPT09IGRhdGVDbGFzcztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBudW1Ub1N0ciA9IE51bWJlci5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgdHJ5TnVtYmVyT2JqZWN0ID0gZnVuY3Rpb24gdHJ5TnVtYmVyT2JqZWN0KHZhbHVlKSB7XG5cdHRyeSB7XG5cdFx0bnVtVG9TdHIuY2FsbCh2YWx1ZSk7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn07XG52YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIG51bUNsYXNzID0gJ1tvYmplY3QgTnVtYmVyXSc7XG52YXIgaGFzVG9TdHJpbmdUYWcgPSByZXF1aXJlKCdoYXMtdG9zdHJpbmd0YWcvc2hhbXMnKSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzTnVtYmVyT2JqZWN0KHZhbHVlKSB7XG5cdGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblx0aWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0cmV0dXJuIGhhc1RvU3RyaW5nVGFnID8gdHJ5TnVtYmVyT2JqZWN0KHZhbHVlKSA6IHRvU3RyLmNhbGwodmFsdWUpID09PSBudW1DbGFzcztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBjYWxsQm91bmQgPSByZXF1aXJlKCdjYWxsLWJpbmQvY2FsbEJvdW5kJyk7XG52YXIgaGFzVG9TdHJpbmdUYWcgPSByZXF1aXJlKCdoYXMtdG9zdHJpbmd0YWcvc2hhbXMnKSgpO1xudmFyIGhhcztcbnZhciAkZXhlYztcbnZhciBpc1JlZ2V4TWFya2VyO1xudmFyIGJhZFN0cmluZ2lmaWVyO1xuXG5pZiAoaGFzVG9TdHJpbmdUYWcpIHtcblx0aGFzID0gY2FsbEJvdW5kKCdPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5Jyk7XG5cdCRleGVjID0gY2FsbEJvdW5kKCdSZWdFeHAucHJvdG90eXBlLmV4ZWMnKTtcblx0aXNSZWdleE1hcmtlciA9IHt9O1xuXG5cdHZhciB0aHJvd1JlZ2V4TWFya2VyID0gZnVuY3Rpb24gKCkge1xuXHRcdHRocm93IGlzUmVnZXhNYXJrZXI7XG5cdH07XG5cdGJhZFN0cmluZ2lmaWVyID0ge1xuXHRcdHRvU3RyaW5nOiB0aHJvd1JlZ2V4TWFya2VyLFxuXHRcdHZhbHVlT2Y6IHRocm93UmVnZXhNYXJrZXJcblx0fTtcblxuXHRpZiAodHlwZW9mIFN5bWJvbC50b1ByaW1pdGl2ZSA9PT0gJ3N5bWJvbCcpIHtcblx0XHRiYWRTdHJpbmdpZmllcltTeW1ib2wudG9QcmltaXRpdmVdID0gdGhyb3dSZWdleE1hcmtlcjtcblx0fVxufVxuXG52YXIgJHRvU3RyaW5nID0gY2FsbEJvdW5kKCdPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nJyk7XG52YXIgZ09QRCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgcmVnZXhDbGFzcyA9ICdbb2JqZWN0IFJlZ0V4cF0nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc1RvU3RyaW5nVGFnXG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuXHQ/IGZ1bmN0aW9uIGlzUmVnZXgodmFsdWUpIHtcblx0XHRpZiAoIXZhbHVlIHx8IHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHR2YXIgZGVzY3JpcHRvciA9IGdPUEQodmFsdWUsICdsYXN0SW5kZXgnKTtcblx0XHR2YXIgaGFzTGFzdEluZGV4RGF0YVByb3BlcnR5ID0gZGVzY3JpcHRvciAmJiBoYXMoZGVzY3JpcHRvciwgJ3ZhbHVlJyk7XG5cdFx0aWYgKCFoYXNMYXN0SW5kZXhEYXRhUHJvcGVydHkpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHR0cnkge1xuXHRcdFx0JGV4ZWModmFsdWUsIGJhZFN0cmluZ2lmaWVyKTtcblx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRyZXR1cm4gZSA9PT0gaXNSZWdleE1hcmtlcjtcblx0XHR9XG5cdH1cblx0OiBmdW5jdGlvbiBpc1JlZ2V4KHZhbHVlKSB7XG5cdFx0Ly8gSW4gb2xkZXIgYnJvd3NlcnMsIHR5cGVvZiByZWdleCBpbmNvcnJlY3RseSByZXR1cm5zICdmdW5jdGlvbidcblx0XHRpZiAoIXZhbHVlIHx8ICh0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnICYmIHR5cGVvZiB2YWx1ZSAhPT0gJ2Z1bmN0aW9uJykpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gJHRvU3RyaW5nKHZhbHVlKSA9PT0gcmVnZXhDbGFzcztcblx0fTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHN0clZhbHVlID0gU3RyaW5nLnByb3RvdHlwZS52YWx1ZU9mO1xudmFyIHRyeVN0cmluZ09iamVjdCA9IGZ1bmN0aW9uIHRyeVN0cmluZ09iamVjdCh2YWx1ZSkge1xuXHR0cnkge1xuXHRcdHN0clZhbHVlLmNhbGwodmFsdWUpO1xuXHRcdHJldHVybiB0cnVlO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59O1xudmFyIHRvU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbnZhciBzdHJDbGFzcyA9ICdbb2JqZWN0IFN0cmluZ10nO1xudmFyIGhhc1RvU3RyaW5nVGFnID0gcmVxdWlyZSgnaGFzLXRvc3RyaW5ndGFnL3NoYW1zJykoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc1N0cmluZyh2YWx1ZSkge1xuXHRpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cdGlmICh0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cdHJldHVybiBoYXNUb1N0cmluZ1RhZyA/IHRyeVN0cmluZ09iamVjdCh2YWx1ZSkgOiB0b1N0ci5jYWxsKHZhbHVlKSA9PT0gc3RyQ2xhc3M7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbi8qKlxuICogQ2hlY2sgaWYgYW4gb2JqZWN0IGlzIGNvbnRhaW5lZCB3aXRoaW4gYW5vdGhlciBvYmplY3QuXG4gKlxuICogUmV0dXJucyBgdHJ1ZWAgaWY6XG4gKiAtIGFsbCBlbnVtZXJhYmxlIGtleXMgb2YgKnN1YnNldCogYXJlIGFsc28gZW51bWVyYWJsZSBpbiAqc3VwZXJzZXQqLCBhbmRcbiAqIC0gZXZlcnkgdmFsdWUgYXNzaWduZWQgdG8gYW4gZW51bWVyYWJsZSBrZXkgb2YgKnN1YnNldCogc3RyaWN0bHkgZXF1YWxzXG4gKiAgIHRoZSB2YWx1ZSBhc3NpZ25lZCB0byB0aGUgc2FtZSBrZXkgb2YgKnN1cGVyc2V0KiDigJMgb3IgaXMgYSBzdWJzZXQgb2YgaXQuXG4gKlxuICogQHBhcmFtICB7T2JqZWN0fSAgc3VwZXJzZXRcbiAqIEBwYXJhbSAge09iamVjdH0gIHN1YnNldFxuICpcbiAqIEByZXR1cm5zICB7Qm9vbGVhbn1cbiAqXG4gKiBAbW9kdWxlICAgIGlzLXN1YnNldFxuICogQGZ1bmN0aW9uICBkZWZhdWx0XG4gKiBAYWxpYXMgICAgIGlzU3Vic2V0XG4gKi9cbnZhciBpc1N1YnNldCA9IChmdW5jdGlvbiAoX2lzU3Vic2V0KSB7XG4gIGZ1bmN0aW9uIGlzU3Vic2V0KF94LCBfeDIpIHtcbiAgICByZXR1cm4gX2lzU3Vic2V0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBpc1N1YnNldC50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2lzU3Vic2V0LnRvU3RyaW5nKCk7XG4gIH07XG5cbiAgcmV0dXJuIGlzU3Vic2V0O1xufSkoZnVuY3Rpb24gKHN1cGVyc2V0LCBzdWJzZXQpIHtcbiAgaWYgKHR5cGVvZiBzdXBlcnNldCAhPT0gJ29iamVjdCcgfHwgc3VwZXJzZXQgPT09IG51bGwgfHwgKHR5cGVvZiBzdWJzZXQgIT09ICdvYmplY3QnIHx8IHN1YnNldCA9PT0gbnVsbCkpIHJldHVybiBmYWxzZTtcblxuICByZXR1cm4gT2JqZWN0LmtleXMoc3Vic2V0KS5ldmVyeShmdW5jdGlvbiAoa2V5KSB7XG4gICAgaWYgKCFzdXBlcnNldC5wcm9wZXJ0eUlzRW51bWVyYWJsZShrZXkpKSByZXR1cm4gZmFsc2U7XG5cbiAgICB2YXIgc3Vic2V0SXRlbSA9IHN1YnNldFtrZXldO1xuICAgIHZhciBzdXBlcnNldEl0ZW0gPSBzdXBlcnNldFtrZXldO1xuICAgIGlmICh0eXBlb2Ygc3Vic2V0SXRlbSA9PT0gJ29iamVjdCcgJiYgc3Vic2V0SXRlbSAhPT0gbnVsbCA/ICFpc1N1YnNldChzdXBlcnNldEl0ZW0sIHN1YnNldEl0ZW0pIDogc3VwZXJzZXRJdGVtICE9PSBzdWJzZXRJdGVtKSByZXR1cm4gZmFsc2U7XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSk7XG59KTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gaXNTdWJzZXQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgaGFzU3ltYm9scyA9IHJlcXVpcmUoJ2hhcy1zeW1ib2xzJykoKTtcblxuaWYgKGhhc1N5bWJvbHMpIHtcblx0dmFyIHN5bVRvU3RyID0gU3ltYm9sLnByb3RvdHlwZS50b1N0cmluZztcblx0dmFyIHN5bVN0cmluZ1JlZ2V4ID0gL15TeW1ib2xcXCguKlxcKSQvO1xuXHR2YXIgaXNTeW1ib2xPYmplY3QgPSBmdW5jdGlvbiBpc1JlYWxTeW1ib2xPYmplY3QodmFsdWUpIHtcblx0XHRpZiAodHlwZW9mIHZhbHVlLnZhbHVlT2YoKSAhPT0gJ3N5bWJvbCcpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIHN5bVN0cmluZ1JlZ2V4LnRlc3Qoc3ltVG9TdHIuY2FsbCh2YWx1ZSkpO1xuXHR9O1xuXG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNTeW1ib2wodmFsdWUpIHtcblx0XHRpZiAodHlwZW9mIHZhbHVlID09PSAnc3ltYm9sJykge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXHRcdGlmICh0b1N0ci5jYWxsKHZhbHVlKSAhPT0gJ1tvYmplY3QgU3ltYm9sXScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0dHJ5IHtcblx0XHRcdHJldHVybiBpc1N5bWJvbE9iamVjdCh2YWx1ZSk7XG5cdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0fTtcbn0gZWxzZSB7XG5cblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc1N5bWJvbCh2YWx1ZSkge1xuXHRcdC8vIHRoaXMgZW52aXJvbm1lbnQgZG9lcyBub3Qgc3VwcG9ydCBTeW1ib2xzLlxuXHRcdHJldHVybiBmYWxzZSAmJiB2YWx1ZTtcblx0fTtcbn1cbiIsIi8qKlxuICogbG9kYXNoIChDdXN0b20gQnVpbGQpIDxodHRwczovL2xvZGFzaC5jb20vPlxuICogQnVpbGQ6IGBsb2Rhc2ggbW9kdWxhcml6ZSBleHBvcnRzPVwibnBtXCIgLW8gLi9gXG4gKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9ycyA8aHR0cHM6Ly9qcXVlcnkub3JnLz5cbiAqIFJlbGVhc2VkIHVuZGVyIE1JVCBsaWNlbnNlIDxodHRwczovL2xvZGFzaC5jb20vbGljZW5zZT5cbiAqIEJhc2VkIG9uIFVuZGVyc2NvcmUuanMgMS44LjMgPGh0dHA6Ly91bmRlcnNjb3JlanMub3JnL0xJQ0VOU0U+XG4gKiBDb3B5cmlnaHQgSmVyZW15IEFzaGtlbmFzLCBEb2N1bWVudENsb3VkIGFuZCBJbnZlc3RpZ2F0aXZlIFJlcG9ydGVycyAmIEVkaXRvcnNcbiAqL1xuXG4vKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBJTkZJTklUWSA9IDEgLyAwO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXSc7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIEhUTUwgZW50aXRpZXMgYW5kIEhUTUwgY2hhcmFjdGVycy4gKi9cbnZhciByZVVuZXNjYXBlZEh0bWwgPSAvWyY8PlwiJ2BdL2csXG4gICAgcmVIYXNVbmVzY2FwZWRIdG1sID0gUmVnRXhwKHJlVW5lc2NhcGVkSHRtbC5zb3VyY2UpO1xuXG4vKiogVXNlZCB0byBtYXAgY2hhcmFjdGVycyB0byBIVE1MIGVudGl0aWVzLiAqL1xudmFyIGh0bWxFc2NhcGVzID0ge1xuICAnJic6ICcmYW1wOycsXG4gICc8JzogJyZsdDsnLFxuICAnPic6ICcmZ3Q7JyxcbiAgJ1wiJzogJyZxdW90OycsXG4gIFwiJ1wiOiAnJiMzOTsnLFxuICAnYCc6ICcmIzk2Oydcbn07XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZ2xvYmFsYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsICYmIGdsb2JhbC5PYmplY3QgPT09IE9iamVjdCAmJiBnbG9iYWw7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovXG52YXIgZnJlZVNlbGYgPSB0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmICYmIHNlbGYuT2JqZWN0ID09PSBPYmplY3QgJiYgc2VsZjtcblxuLyoqIFVzZWQgYXMgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QuICovXG52YXIgcm9vdCA9IGZyZWVHbG9iYWwgfHwgZnJlZVNlbGYgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5wcm9wZXJ0eU9mYCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlUHJvcGVydHlPZihvYmplY3QpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGtleSkge1xuICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xuICB9O1xufVxuXG4vKipcbiAqIFVzZWQgYnkgYF8uZXNjYXBlYCB0byBjb252ZXJ0IGNoYXJhY3RlcnMgdG8gSFRNTCBlbnRpdGllcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IGNociBUaGUgbWF0Y2hlZCBjaGFyYWN0ZXIgdG8gZXNjYXBlLlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZXNjYXBlZCBjaGFyYWN0ZXIuXG4gKi9cbnZhciBlc2NhcGVIdG1sQ2hhciA9IGJhc2VQcm9wZXJ0eU9mKGh0bWxFc2NhcGVzKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIFN5bWJvbCA9IHJvb3QuU3ltYm9sO1xuXG4vKiogVXNlZCB0byBjb252ZXJ0IHN5bWJvbHMgdG8gcHJpbWl0aXZlcyBhbmQgc3RyaW5ncy4gKi9cbnZhciBzeW1ib2xQcm90byA9IFN5bWJvbCA/IFN5bWJvbC5wcm90b3R5cGUgOiB1bmRlZmluZWQsXG4gICAgc3ltYm9sVG9TdHJpbmcgPSBzeW1ib2xQcm90byA/IHN5bWJvbFByb3RvLnRvU3RyaW5nIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRvU3RyaW5nYCB3aGljaCBkb2Vzbid0IGNvbnZlcnQgbnVsbGlzaFxuICogdmFsdWVzIHRvIGVtcHR5IHN0cmluZ3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIGJhc2VUb1N0cmluZyh2YWx1ZSkge1xuICAvLyBFeGl0IGVhcmx5IGZvciBzdHJpbmdzIHRvIGF2b2lkIGEgcGVyZm9ybWFuY2UgaGl0IGluIHNvbWUgZW52aXJvbm1lbnRzLlxuICBpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGlmIChpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gc3ltYm9sVG9TdHJpbmcgPyBzeW1ib2xUb1N0cmluZy5jYWxsKHZhbHVlKSA6ICcnO1xuICB9XG4gIHZhciByZXN1bHQgPSAodmFsdWUgKyAnJyk7XG4gIHJldHVybiAocmVzdWx0ID09ICcwJyAmJiAoMSAvIHZhbHVlKSA9PSAtSU5GSU5JVFkpID8gJy0wJyA6IHJlc3VsdDtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdCBgbnVsbGBcbiAqIGFuZCBoYXMgYSBgdHlwZW9mYCByZXN1bHQgb2YgXCJvYmplY3RcIi5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZSh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gISF2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCc7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTeW1ib2xgIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzeW1ib2wsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc1N5bWJvbChTeW1ib2wuaXRlcmF0b3IpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNTeW1ib2woJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTeW1ib2wodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnc3ltYm9sJyB8fFxuICAgIChpc09iamVjdExpa2UodmFsdWUpICYmIG9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpID09IHN5bWJvbFRhZyk7XG59XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZy4gQW4gZW1wdHkgc3RyaW5nIGlzIHJldHVybmVkIGZvciBgbnVsbGBcbiAqIGFuZCBgdW5kZWZpbmVkYCB2YWx1ZXMuIFRoZSBzaWduIG9mIGAtMGAgaXMgcHJlc2VydmVkLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc3RyaW5nLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRvU3RyaW5nKG51bGwpO1xuICogLy8gPT4gJydcbiAqXG4gKiBfLnRvU3RyaW5nKC0wKTtcbiAqIC8vID0+ICctMCdcbiAqXG4gKiBfLnRvU3RyaW5nKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiAnMSwyLDMnXG4gKi9cbmZ1bmN0aW9uIHRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9PSBudWxsID8gJycgOiBiYXNlVG9TdHJpbmcodmFsdWUpO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIHRoZSBjaGFyYWN0ZXJzIFwiJlwiLCBcIjxcIiwgXCI+XCIsICdcIicsIFwiJ1wiLCBhbmQgXCJcXGBcIiBpbiBgc3RyaW5nYCB0b1xuICogdGhlaXIgY29ycmVzcG9uZGluZyBIVE1MIGVudGl0aWVzLlxuICpcbiAqICoqTm90ZToqKiBObyBvdGhlciBjaGFyYWN0ZXJzIGFyZSBlc2NhcGVkLiBUbyBlc2NhcGUgYWRkaXRpb25hbFxuICogY2hhcmFjdGVycyB1c2UgYSB0aGlyZC1wYXJ0eSBsaWJyYXJ5IGxpa2UgW19oZV9dKGh0dHBzOi8vbXRocy5iZS9oZSkuXG4gKlxuICogVGhvdWdoIHRoZSBcIj5cIiBjaGFyYWN0ZXIgaXMgZXNjYXBlZCBmb3Igc3ltbWV0cnksIGNoYXJhY3RlcnMgbGlrZVxuICogXCI+XCIgYW5kIFwiL1wiIGRvbid0IG5lZWQgZXNjYXBpbmcgaW4gSFRNTCBhbmQgaGF2ZSBubyBzcGVjaWFsIG1lYW5pbmdcbiAqIHVubGVzcyB0aGV5J3JlIHBhcnQgb2YgYSB0YWcgb3IgdW5xdW90ZWQgYXR0cmlidXRlIHZhbHVlLiBTZWVcbiAqIFtNYXRoaWFzIEJ5bmVucydzIGFydGljbGVdKGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9hbWJpZ3VvdXMtYW1wZXJzYW5kcylcbiAqICh1bmRlciBcInNlbWktcmVsYXRlZCBmdW4gZmFjdFwiKSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIEJhY2t0aWNrcyBhcmUgZXNjYXBlZCBiZWNhdXNlIGluIElFIDwgOSwgdGhleSBjYW4gYnJlYWsgb3V0IG9mXG4gKiBhdHRyaWJ1dGUgdmFsdWVzIG9yIEhUTUwgY29tbWVudHMuIFNlZSBbIzU5XShodHRwczovL2h0bWw1c2VjLm9yZy8jNTkpLFxuICogWyMxMDJdKGh0dHBzOi8vaHRtbDVzZWMub3JnLyMxMDIpLCBbIzEwOF0oaHR0cHM6Ly9odG1sNXNlYy5vcmcvIzEwOCksIGFuZFxuICogWyMxMzNdKGh0dHBzOi8vaHRtbDVzZWMub3JnLyMxMzMpIG9mIHRoZVxuICogW0hUTUw1IFNlY3VyaXR5IENoZWF0c2hlZXRdKGh0dHBzOi8vaHRtbDVzZWMub3JnLykgZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBXaGVuIHdvcmtpbmcgd2l0aCBIVE1MIHlvdSBzaG91bGQgYWx3YXlzXG4gKiBbcXVvdGUgYXR0cmlidXRlIHZhbHVlc10oaHR0cDovL3dvbmtvLmNvbS9wb3N0L2h0bWwtZXNjYXBpbmcpIHRvIHJlZHVjZVxuICogWFNTIHZlY3RvcnMuXG4gKlxuICogQHN0YXRpY1xuICogQHNpbmNlIDAuMS4wXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IFN0cmluZ1xuICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gZXNjYXBlLlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZXNjYXBlZCBzdHJpbmcuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uZXNjYXBlKCdmcmVkLCBiYXJuZXksICYgcGViYmxlcycpO1xuICogLy8gPT4gJ2ZyZWQsIGJhcm5leSwgJmFtcDsgcGViYmxlcydcbiAqL1xuZnVuY3Rpb24gZXNjYXBlKHN0cmluZykge1xuICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICByZXR1cm4gKHN0cmluZyAmJiByZUhhc1VuZXNjYXBlZEh0bWwudGVzdChzdHJpbmcpKVxuICAgID8gc3RyaW5nLnJlcGxhY2UocmVVbmVzY2FwZWRIdG1sLCBlc2NhcGVIdG1sQ2hhcilcbiAgICA6IHN0cmluZztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlc2NhcGU7XG4iLCIvKipcbiAqIGxvZGFzaCAoQ3VzdG9tIEJ1aWxkKSA8aHR0cHM6Ly9sb2Rhc2guY29tLz5cbiAqIEJ1aWxkOiBgbG9kYXNoIG1vZHVsYXJpemUgZXhwb3J0cz1cIm5wbVwiIC1vIC4vYFxuICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnMgPGh0dHBzOi8vanF1ZXJ5Lm9yZy8+XG4gKiBSZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZSA8aHR0cHM6Ly9sb2Rhc2guY29tL2xpY2Vuc2U+XG4gKiBCYXNlZCBvbiBVbmRlcnNjb3JlLmpzIDEuOC4zIDxodHRwOi8vdW5kZXJzY29yZWpzLm9yZy9MSUNFTlNFPlxuICogQ29weXJpZ2h0IEplcmVteSBBc2hrZW5hcywgRG9jdW1lbnRDbG91ZCBhbmQgSW52ZXN0aWdhdGl2ZSBSZXBvcnRlcnMgJiBFZGl0b3JzXG4gKi9cblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgSU5GSU5JVFkgPSAxIC8gMCxcbiAgICBNQVhfU0FGRV9JTlRFR0VSID0gOTAwNzE5OTI1NDc0MDk5MTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFyZ3NUYWcgPSAnW29iamVjdCBBcmd1bWVudHNdJyxcbiAgICBmdW5jVGFnID0gJ1tvYmplY3QgRnVuY3Rpb25dJyxcbiAgICBnZW5UYWcgPSAnW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl0nO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGdsb2JhbGAgZnJvbSBOb2RlLmpzLiAqL1xudmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCAmJiBnbG9iYWwuT2JqZWN0ID09PSBPYmplY3QgJiYgZ2xvYmFsO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHNlbGZgLiAqL1xudmFyIGZyZWVTZWxmID0gdHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgJiYgc2VsZiAmJiBzZWxmLk9iamVjdCA9PT0gT2JqZWN0ICYmIHNlbGY7XG5cbi8qKiBVc2VkIGFzIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0LiAqL1xudmFyIHJvb3QgPSBmcmVlR2xvYmFsIHx8IGZyZWVTZWxmIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbi8qKlxuICogQXBwZW5kcyB0aGUgZWxlbWVudHMgb2YgYHZhbHVlc2AgdG8gYGFycmF5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIGFwcGVuZC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICovXG5mdW5jdGlvbiBhcnJheVB1c2goYXJyYXksIHZhbHVlcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICBvZmZzZXQgPSBhcnJheS5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBhcnJheVtvZmZzZXQgKyBpbmRleF0gPSB2YWx1ZXNbaW5kZXhdO1xuICB9XG4gIHJldHVybiBhcnJheTtcbn1cblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIFN5bWJvbCA9IHJvb3QuU3ltYm9sLFxuICAgIHByb3BlcnR5SXNFbnVtZXJhYmxlID0gb2JqZWN0UHJvdG8ucHJvcGVydHlJc0VudW1lcmFibGUsXG4gICAgc3ByZWFkYWJsZVN5bWJvbCA9IFN5bWJvbCA/IFN5bWJvbC5pc0NvbmNhdFNwcmVhZGFibGUgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZmxhdHRlbmAgd2l0aCBzdXBwb3J0IGZvciByZXN0cmljdGluZyBmbGF0dGVuaW5nLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmxhdHRlbi5cbiAqIEBwYXJhbSB7bnVtYmVyfSBkZXB0aCBUaGUgbWF4aW11bSByZWN1cnNpb24gZGVwdGguXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtwcmVkaWNhdGU9aXNGbGF0dGVuYWJsZV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzU3RyaWN0XSBSZXN0cmljdCB0byB2YWx1ZXMgdGhhdCBwYXNzIGBwcmVkaWNhdGVgIGNoZWNrcy5cbiAqIEBwYXJhbSB7QXJyYXl9IFtyZXN1bHQ9W11dIFRoZSBpbml0aWFsIHJlc3VsdCB2YWx1ZS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gYmFzZUZsYXR0ZW4oYXJyYXksIGRlcHRoLCBwcmVkaWNhdGUsIGlzU3RyaWN0LCByZXN1bHQpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgcHJlZGljYXRlIHx8IChwcmVkaWNhdGUgPSBpc0ZsYXR0ZW5hYmxlKTtcbiAgcmVzdWx0IHx8IChyZXN1bHQgPSBbXSk7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgaWYgKGRlcHRoID4gMCAmJiBwcmVkaWNhdGUodmFsdWUpKSB7XG4gICAgICBpZiAoZGVwdGggPiAxKSB7XG4gICAgICAgIC8vIFJlY3Vyc2l2ZWx5IGZsYXR0ZW4gYXJyYXlzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgIGJhc2VGbGF0dGVuKHZhbHVlLCBkZXB0aCAtIDEsIHByZWRpY2F0ZSwgaXNTdHJpY3QsIHJlc3VsdCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhcnJheVB1c2gocmVzdWx0LCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghaXNTdHJpY3QpIHtcbiAgICAgIHJlc3VsdFtyZXN1bHQubGVuZ3RoXSA9IHZhbHVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgZmxhdHRlbmFibGUgYGFyZ3VtZW50c2Agb2JqZWN0IG9yIGFycmF5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGZsYXR0ZW5hYmxlLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzRmxhdHRlbmFibGUodmFsdWUpIHtcbiAgcmV0dXJuIGlzQXJyYXkodmFsdWUpIHx8IGlzQXJndW1lbnRzKHZhbHVlKSB8fFxuICAgICEhKHNwcmVhZGFibGVTeW1ib2wgJiYgdmFsdWUgJiYgdmFsdWVbc3ByZWFkYWJsZVN5bWJvbF0pO1xufVxuXG4vKipcbiAqIFJlY3Vyc2l2ZWx5IGZsYXR0ZW5zIGBhcnJheWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjAuMFxuICogQGNhdGVnb3J5IEFycmF5XG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmxhdHRlbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5mbGF0dGVuRGVlcChbMSwgWzIsIFszLCBbNF1dLCA1XV0pO1xuICogLy8gPT4gWzEsIDIsIDMsIDQsIDVdXG4gKi9cbmZ1bmN0aW9uIGZsYXR0ZW5EZWVwKGFycmF5KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheSA/IGFycmF5Lmxlbmd0aCA6IDA7XG4gIHJldHVybiBsZW5ndGggPyBiYXNlRmxhdHRlbihhcnJheSwgSU5GSU5JVFkpIDogW107XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGlrZWx5IGFuIGBhcmd1bWVudHNgIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBgYXJndW1lbnRzYCBvYmplY3QsXG4gKiAgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJndW1lbnRzKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcmd1bWVudHMoWzEsIDIsIDNdKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJndW1lbnRzKHZhbHVlKSB7XG4gIC8vIFNhZmFyaSA4LjEgbWFrZXMgYGFyZ3VtZW50cy5jYWxsZWVgIGVudW1lcmFibGUgaW4gc3RyaWN0IG1vZGUuXG4gIHJldHVybiBpc0FycmF5TGlrZU9iamVjdCh2YWx1ZSkgJiYgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpICYmXG4gICAgKCFwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHZhbHVlLCAnY2FsbGVlJykgfHwgb2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT0gYXJnc1RhZyk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhbiBgQXJyYXlgIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXkoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXkoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheSgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UuIEEgdmFsdWUgaXMgY29uc2lkZXJlZCBhcnJheS1saWtlIGlmIGl0J3NcbiAqIG5vdCBhIGZ1bmN0aW9uIGFuZCBoYXMgYSBgdmFsdWUubGVuZ3RoYCB0aGF0J3MgYW4gaW50ZWdlciBncmVhdGVyIHRoYW4gb3JcbiAqIGVxdWFsIHRvIGAwYCBhbmQgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIGBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUmAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYXJyYXktbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZShkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKCdhYmMnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiBpc0xlbmd0aCh2YWx1ZS5sZW5ndGgpICYmICFpc0Z1bmN0aW9uKHZhbHVlKTtcbn1cblxuLyoqXG4gKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmlzQXJyYXlMaWtlYCBleGNlcHQgdGhhdCBpdCBhbHNvIGNoZWNrcyBpZiBgdmFsdWVgXG4gKiBpcyBhbiBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXktbGlrZSBvYmplY3QsXG4gKiAgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZU9iamVjdChkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlT2JqZWN0KCdhYmMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0FycmF5TGlrZU9iamVjdChfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUxpa2VPYmplY3QodmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgaXNBcnJheUxpa2UodmFsdWUpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgRnVuY3Rpb25gIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGZ1bmN0aW9uLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNGdW5jdGlvbihfKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzRnVuY3Rpb24oL2FiYy8pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge1xuICAvLyBUaGUgdXNlIG9mIGBPYmplY3QjdG9TdHJpbmdgIGF2b2lkcyBpc3N1ZXMgd2l0aCB0aGUgYHR5cGVvZmAgb3BlcmF0b3JcbiAgLy8gaW4gU2FmYXJpIDgtOSB3aGljaCByZXR1cm5zICdvYmplY3QnIGZvciB0eXBlZCBhcnJheSBhbmQgb3RoZXIgY29uc3RydWN0b3JzLlxuICB2YXIgdGFnID0gaXNPYmplY3QodmFsdWUpID8gb2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSkgOiAnJztcbiAgcmV0dXJuIHRhZyA9PSBmdW5jVGFnIHx8IHRhZyA9PSBnZW5UYWc7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGxlbmd0aC5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvblxuICogW2BUb0xlbmd0aGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXRvbGVuZ3RoKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGxlbmd0aCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzTGVuZ3RoKDMpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNMZW5ndGgoTnVtYmVyLk1JTl9WQUxVRSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNMZW5ndGgoSW5maW5pdHkpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzTGVuZ3RoKCczJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0xlbmd0aCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdudW1iZXInICYmXG4gICAgdmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8PSBNQVhfU0FGRV9JTlRFR0VSO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHRoZVxuICogW2xhbmd1YWdlIHR5cGVdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1lY21hc2NyaXB0LWxhbmd1YWdlLXR5cGVzKVxuICogb2YgYE9iamVjdGAuIChlLmcuIGFycmF5cywgZnVuY3Rpb25zLCBvYmplY3RzLCByZWdleGVzLCBgbmV3IE51bWJlcigwKWAsIGFuZCBgbmV3IFN0cmluZygnJylgKVxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0KHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChfLm5vb3ApO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuICEhdmFsdWUgJiYgKHR5cGUgPT0gJ29iamVjdCcgfHwgdHlwZSA9PSAnZnVuY3Rpb24nKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdCBgbnVsbGBcbiAqIGFuZCBoYXMgYSBgdHlwZW9mYCByZXN1bHQgb2YgXCJvYmplY3RcIi5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZSh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gISF2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZmxhdHRlbkRlZXA7XG4iLCIvKipcbiAqIExvZGFzaCAoQ3VzdG9tIEJ1aWxkKSA8aHR0cHM6Ly9sb2Rhc2guY29tLz5cbiAqIEJ1aWxkOiBgbG9kYXNoIG1vZHVsYXJpemUgZXhwb3J0cz1cIm5wbVwiIC1vIC4vYFxuICogQ29weXJpZ2h0IEpTIEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9ycyA8aHR0cHM6Ly9qcy5mb3VuZGF0aW9uLz5cbiAqIFJlbGVhc2VkIHVuZGVyIE1JVCBsaWNlbnNlIDxodHRwczovL2xvZGFzaC5jb20vbGljZW5zZT5cbiAqIEJhc2VkIG9uIFVuZGVyc2NvcmUuanMgMS44LjMgPGh0dHA6Ly91bmRlcnNjb3JlanMub3JnL0xJQ0VOU0U+XG4gKiBDb3B5cmlnaHQgSmVyZW15IEFzaGtlbmFzLCBEb2N1bWVudENsb3VkIGFuZCBJbnZlc3RpZ2F0aXZlIFJlcG9ydGVycyAmIEVkaXRvcnNcbiAqL1xuXG4vKiogVXNlZCBhcyB0aGUgc2l6ZSB0byBlbmFibGUgbGFyZ2UgYXJyYXkgb3B0aW1pemF0aW9ucy4gKi9cbnZhciBMQVJHRV9BUlJBWV9TSVpFID0gMjAwO1xuXG4vKiogVXNlZCB0byBzdGFuZC1pbiBmb3IgYHVuZGVmaW5lZGAgaGFzaCB2YWx1ZXMuICovXG52YXIgSEFTSF9VTkRFRklORUQgPSAnX19sb2Rhc2hfaGFzaF91bmRlZmluZWRfXyc7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIHZhbHVlIGNvbXBhcmlzb25zLiAqL1xudmFyIENPTVBBUkVfUEFSVElBTF9GTEFHID0gMSxcbiAgICBDT01QQVJFX1VOT1JERVJFRF9GTEFHID0gMjtcblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgTUFYX1NBRkVfSU5URUdFUiA9IDkwMDcxOTkyNTQ3NDA5OTE7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBhcmdzVGFnID0gJ1tvYmplY3QgQXJndW1lbnRzXScsXG4gICAgYXJyYXlUYWcgPSAnW29iamVjdCBBcnJheV0nLFxuICAgIGFzeW5jVGFnID0gJ1tvYmplY3QgQXN5bmNGdW5jdGlvbl0nLFxuICAgIGJvb2xUYWcgPSAnW29iamVjdCBCb29sZWFuXScsXG4gICAgZGF0ZVRhZyA9ICdbb2JqZWN0IERhdGVdJyxcbiAgICBlcnJvclRhZyA9ICdbb2JqZWN0IEVycm9yXScsXG4gICAgZnVuY1RhZyA9ICdbb2JqZWN0IEZ1bmN0aW9uXScsXG4gICAgZ2VuVGFnID0gJ1tvYmplY3QgR2VuZXJhdG9yRnVuY3Rpb25dJyxcbiAgICBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICBudW1iZXJUYWcgPSAnW29iamVjdCBOdW1iZXJdJyxcbiAgICBudWxsVGFnID0gJ1tvYmplY3QgTnVsbF0nLFxuICAgIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nLFxuICAgIHByb21pc2VUYWcgPSAnW29iamVjdCBQcm9taXNlXScsXG4gICAgcHJveHlUYWcgPSAnW29iamVjdCBQcm94eV0nLFxuICAgIHJlZ2V4cFRhZyA9ICdbb2JqZWN0IFJlZ0V4cF0nLFxuICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nLFxuICAgIHN0cmluZ1RhZyA9ICdbb2JqZWN0IFN0cmluZ10nLFxuICAgIHN5bWJvbFRhZyA9ICdbb2JqZWN0IFN5bWJvbF0nLFxuICAgIHVuZGVmaW5lZFRhZyA9ICdbb2JqZWN0IFVuZGVmaW5lZF0nLFxuICAgIHdlYWtNYXBUYWcgPSAnW29iamVjdCBXZWFrTWFwXSc7XG5cbnZhciBhcnJheUJ1ZmZlclRhZyA9ICdbb2JqZWN0IEFycmF5QnVmZmVyXScsXG4gICAgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nLFxuICAgIGZsb2F0MzJUYWcgPSAnW29iamVjdCBGbG9hdDMyQXJyYXldJyxcbiAgICBmbG9hdDY0VGFnID0gJ1tvYmplY3QgRmxvYXQ2NEFycmF5XScsXG4gICAgaW50OFRhZyA9ICdbb2JqZWN0IEludDhBcnJheV0nLFxuICAgIGludDE2VGFnID0gJ1tvYmplY3QgSW50MTZBcnJheV0nLFxuICAgIGludDMyVGFnID0gJ1tvYmplY3QgSW50MzJBcnJheV0nLFxuICAgIHVpbnQ4VGFnID0gJ1tvYmplY3QgVWludDhBcnJheV0nLFxuICAgIHVpbnQ4Q2xhbXBlZFRhZyA9ICdbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XScsXG4gICAgdWludDE2VGFnID0gJ1tvYmplY3QgVWludDE2QXJyYXldJyxcbiAgICB1aW50MzJUYWcgPSAnW29iamVjdCBVaW50MzJBcnJheV0nO1xuXG4vKipcbiAqIFVzZWQgdG8gbWF0Y2ggYFJlZ0V4cGBcbiAqIFtzeW50YXggY2hhcmFjdGVyc10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcGF0dGVybnMpLlxuICovXG52YXIgcmVSZWdFeHBDaGFyID0gL1tcXFxcXiQuKis/KClbXFxde318XS9nO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgaG9zdCBjb25zdHJ1Y3RvcnMgKFNhZmFyaSkuICovXG52YXIgcmVJc0hvc3RDdG9yID0gL15cXFtvYmplY3QgLis/Q29uc3RydWN0b3JcXF0kLztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IHVuc2lnbmVkIGludGVnZXIgdmFsdWVzLiAqL1xudmFyIHJlSXNVaW50ID0gL14oPzowfFsxLTldXFxkKikkLztcblxuLyoqIFVzZWQgdG8gaWRlbnRpZnkgYHRvU3RyaW5nVGFnYCB2YWx1ZXMgb2YgdHlwZWQgYXJyYXlzLiAqL1xudmFyIHR5cGVkQXJyYXlUYWdzID0ge307XG50eXBlZEFycmF5VGFnc1tmbG9hdDMyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Zsb2F0NjRUYWddID1cbnR5cGVkQXJyYXlUYWdzW2ludDhUYWddID0gdHlwZWRBcnJheVRhZ3NbaW50MTZUYWddID1cbnR5cGVkQXJyYXlUYWdzW2ludDMyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW3VpbnQ4VGFnXSA9XG50eXBlZEFycmF5VGFnc1t1aW50OENsYW1wZWRUYWddID0gdHlwZWRBcnJheVRhZ3NbdWludDE2VGFnXSA9XG50eXBlZEFycmF5VGFnc1t1aW50MzJUYWddID0gdHJ1ZTtcbnR5cGVkQXJyYXlUYWdzW2FyZ3NUYWddID0gdHlwZWRBcnJheVRhZ3NbYXJyYXlUYWddID1cbnR5cGVkQXJyYXlUYWdzW2FycmF5QnVmZmVyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Jvb2xUYWddID1cbnR5cGVkQXJyYXlUYWdzW2RhdGFWaWV3VGFnXSA9IHR5cGVkQXJyYXlUYWdzW2RhdGVUYWddID1cbnR5cGVkQXJyYXlUYWdzW2Vycm9yVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Z1bmNUYWddID1cbnR5cGVkQXJyYXlUYWdzW21hcFRhZ10gPSB0eXBlZEFycmF5VGFnc1tudW1iZXJUYWddID1cbnR5cGVkQXJyYXlUYWdzW29iamVjdFRhZ10gPSB0eXBlZEFycmF5VGFnc1tyZWdleHBUYWddID1cbnR5cGVkQXJyYXlUYWdzW3NldFRhZ10gPSB0eXBlZEFycmF5VGFnc1tzdHJpbmdUYWddID1cbnR5cGVkQXJyYXlUYWdzW3dlYWtNYXBUYWddID0gZmFsc2U7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZ2xvYmFsYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsICYmIGdsb2JhbC5PYmplY3QgPT09IE9iamVjdCAmJiBnbG9iYWw7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovXG52YXIgZnJlZVNlbGYgPSB0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmICYmIHNlbGYuT2JqZWN0ID09PSBPYmplY3QgJiYgc2VsZjtcblxuLyoqIFVzZWQgYXMgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QuICovXG52YXIgcm9vdCA9IGZyZWVHbG9iYWwgfHwgZnJlZVNlbGYgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBleHBvcnRzYC4gKi9cbnZhciBmcmVlRXhwb3J0cyA9IHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHMgJiYgIWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xudmFyIGZyZWVNb2R1bGUgPSBmcmVlRXhwb3J0cyAmJiB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJiAhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTtcblxuLyoqIERldGVjdCB0aGUgcG9wdWxhciBDb21tb25KUyBleHRlbnNpb24gYG1vZHVsZS5leHBvcnRzYC4gKi9cbnZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHByb2Nlc3NgIGZyb20gTm9kZS5qcy4gKi9cbnZhciBmcmVlUHJvY2VzcyA9IG1vZHVsZUV4cG9ydHMgJiYgZnJlZUdsb2JhbC5wcm9jZXNzO1xuXG4vKiogVXNlZCB0byBhY2Nlc3MgZmFzdGVyIE5vZGUuanMgaGVscGVycy4gKi9cbnZhciBub2RlVXRpbCA9IChmdW5jdGlvbigpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZnJlZVByb2Nlc3MgJiYgZnJlZVByb2Nlc3MuYmluZGluZyAmJiBmcmVlUHJvY2Vzcy5iaW5kaW5nKCd1dGlsJyk7XG4gIH0gY2F0Y2ggKGUpIHt9XG59KCkpO1xuXG4vKiBOb2RlLmpzIGhlbHBlciByZWZlcmVuY2VzLiAqL1xudmFyIG5vZGVJc1R5cGVkQXJyYXkgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc1R5cGVkQXJyYXk7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmZpbHRlcmAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZpbHRlcmVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBhcnJheUZpbHRlcihhcnJheSwgcHJlZGljYXRlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICByZXNJbmRleCA9IDAsXG4gICAgICByZXN1bHQgPSBbXTtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBBcHBlbmRzIHRoZSBlbGVtZW50cyBvZiBgdmFsdWVzYCB0byBgYXJyYXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gYXBwZW5kLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gKi9cbmZ1bmN0aW9uIGFycmF5UHVzaChhcnJheSwgdmFsdWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgIG9mZnNldCA9IGFycmF5Lmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGFycmF5W29mZnNldCArIGluZGV4XSA9IHZhbHVlc1tpbmRleF07XG4gIH1cbiAgcmV0dXJuIGFycmF5O1xufVxuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5zb21lYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWVcbiAqIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFueSBlbGVtZW50IHBhc3NlcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICogIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYXJyYXlTb21lKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGlmIChwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRpbWVzYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHNcbiAqIG9yIG1heCBhcnJheSBsZW5ndGggY2hlY2tzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIGludm9rZSBgaXRlcmF0ZWVgLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcmVzdWx0cy5cbiAqL1xuZnVuY3Rpb24gYmFzZVRpbWVzKG4sIGl0ZXJhdGVlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gQXJyYXkobik7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBuKSB7XG4gICAgcmVzdWx0W2luZGV4XSA9IGl0ZXJhdGVlKGluZGV4KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVuYXJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yIHN0b3JpbmcgbWV0YWRhdGEuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNhcCBhcmd1bWVudHMgZm9yLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY2FwcGVkIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlVW5hcnkoZnVuYykge1xuICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gZnVuYyh2YWx1ZSk7XG4gIH07XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgYGNhY2hlYCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gY2FjaGUgVGhlIGNhY2hlIHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGNhY2hlSGFzKGNhY2hlLCBrZXkpIHtcbiAgcmV0dXJuIGNhY2hlLmhhcyhrZXkpO1xufVxuXG4vKipcbiAqIEdldHMgdGhlIHZhbHVlIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHByb3BlcnR5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBnZXRWYWx1ZShvYmplY3QsIGtleSkge1xuICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3Rba2V5XTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBgbWFwYCB0byBpdHMga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gbWFwIFRoZSBtYXAgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUga2V5LXZhbHVlIHBhaXJzLlxuICovXG5mdW5jdGlvbiBtYXBUb0FycmF5KG1hcCkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHJlc3VsdCA9IEFycmF5KG1hcC5zaXplKTtcblxuICBtYXAuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgcmVzdWx0WysraW5kZXhdID0gW2tleSwgdmFsdWVdO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgdW5hcnkgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGl0cyBhcmd1bWVudCB0cmFuc2Zvcm1lZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHRyYW5zZm9ybSBUaGUgYXJndW1lbnQgdHJhbnNmb3JtLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIG92ZXJBcmcoZnVuYywgdHJhbnNmb3JtKSB7XG4gIHJldHVybiBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gZnVuYyh0cmFuc2Zvcm0oYXJnKSk7XG4gIH07XG59XG5cbi8qKlxuICogQ29udmVydHMgYHNldGAgdG8gYW4gYXJyYXkgb2YgaXRzIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHNldCBUaGUgc2V0IHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHZhbHVlcy5cbiAqL1xuZnVuY3Rpb24gc2V0VG9BcnJheShzZXQpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSBBcnJheShzZXQuc2l6ZSk7XG5cbiAgc2V0LmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXN1bHRbKytpbmRleF0gPSB2YWx1ZTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBhcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlLFxuICAgIGZ1bmNQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZSxcbiAgICBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBvdmVycmVhY2hpbmcgY29yZS1qcyBzaGltcy4gKi9cbnZhciBjb3JlSnNEYXRhID0gcm9vdFsnX19jb3JlLWpzX3NoYXJlZF9fJ107XG5cbi8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbnZhciBmdW5jVG9TdHJpbmcgPSBmdW5jUHJvdG8udG9TdHJpbmc7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBtZXRob2RzIG1hc3F1ZXJhZGluZyBhcyBuYXRpdmUuICovXG52YXIgbWFza1NyY0tleSA9IChmdW5jdGlvbigpIHtcbiAgdmFyIHVpZCA9IC9bXi5dKyQvLmV4ZWMoY29yZUpzRGF0YSAmJiBjb3JlSnNEYXRhLmtleXMgJiYgY29yZUpzRGF0YS5rZXlzLklFX1BST1RPIHx8ICcnKTtcbiAgcmV0dXJuIHVpZCA/ICgnU3ltYm9sKHNyYylfMS4nICsgdWlkKSA6ICcnO1xufSgpKTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBpZiBhIG1ldGhvZCBpcyBuYXRpdmUuICovXG52YXIgcmVJc05hdGl2ZSA9IFJlZ0V4cCgnXicgK1xuICBmdW5jVG9TdHJpbmcuY2FsbChoYXNPd25Qcm9wZXJ0eSkucmVwbGFjZShyZVJlZ0V4cENoYXIsICdcXFxcJCYnKVxuICAucmVwbGFjZSgvaGFzT3duUHJvcGVydHl8KGZ1bmN0aW9uKS4qPyg/PVxcXFxcXCgpfCBmb3IgLis/KD89XFxcXFxcXSkvZywgJyQxLio/JykgKyAnJCdcbik7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIEJ1ZmZlciA9IG1vZHVsZUV4cG9ydHMgPyByb290LkJ1ZmZlciA6IHVuZGVmaW5lZCxcbiAgICBTeW1ib2wgPSByb290LlN5bWJvbCxcbiAgICBVaW50OEFycmF5ID0gcm9vdC5VaW50OEFycmF5LFxuICAgIHByb3BlcnR5SXNFbnVtZXJhYmxlID0gb2JqZWN0UHJvdG8ucHJvcGVydHlJc0VudW1lcmFibGUsXG4gICAgc3BsaWNlID0gYXJyYXlQcm90by5zcGxpY2UsXG4gICAgc3ltVG9TdHJpbmdUYWcgPSBTeW1ib2wgPyBTeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVHZXRTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyxcbiAgICBuYXRpdmVJc0J1ZmZlciA9IEJ1ZmZlciA/IEJ1ZmZlci5pc0J1ZmZlciA6IHVuZGVmaW5lZCxcbiAgICBuYXRpdmVLZXlzID0gb3ZlckFyZyhPYmplY3Qua2V5cywgT2JqZWN0KTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIERhdGFWaWV3ID0gZ2V0TmF0aXZlKHJvb3QsICdEYXRhVmlldycpLFxuICAgIE1hcCA9IGdldE5hdGl2ZShyb290LCAnTWFwJyksXG4gICAgUHJvbWlzZSA9IGdldE5hdGl2ZShyb290LCAnUHJvbWlzZScpLFxuICAgIFNldCA9IGdldE5hdGl2ZShyb290LCAnU2V0JyksXG4gICAgV2Vha01hcCA9IGdldE5hdGl2ZShyb290LCAnV2Vha01hcCcpLFxuICAgIG5hdGl2ZUNyZWF0ZSA9IGdldE5hdGl2ZShPYmplY3QsICdjcmVhdGUnKTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG1hcHMsIHNldHMsIGFuZCB3ZWFrbWFwcy4gKi9cbnZhciBkYXRhVmlld0N0b3JTdHJpbmcgPSB0b1NvdXJjZShEYXRhVmlldyksXG4gICAgbWFwQ3RvclN0cmluZyA9IHRvU291cmNlKE1hcCksXG4gICAgcHJvbWlzZUN0b3JTdHJpbmcgPSB0b1NvdXJjZShQcm9taXNlKSxcbiAgICBzZXRDdG9yU3RyaW5nID0gdG9Tb3VyY2UoU2V0KSxcbiAgICB3ZWFrTWFwQ3RvclN0cmluZyA9IHRvU291cmNlKFdlYWtNYXApO1xuXG4vKiogVXNlZCB0byBjb252ZXJ0IHN5bWJvbHMgdG8gcHJpbWl0aXZlcyBhbmQgc3RyaW5ncy4gKi9cbnZhciBzeW1ib2xQcm90byA9IFN5bWJvbCA/IFN5bWJvbC5wcm90b3R5cGUgOiB1bmRlZmluZWQsXG4gICAgc3ltYm9sVmFsdWVPZiA9IHN5bWJvbFByb3RvID8gc3ltYm9sUHJvdG8udmFsdWVPZiA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBDcmVhdGVzIGEgaGFzaCBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIEhhc2goZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICB0aGlzLmNsZWFyKCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxufVxuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGhhc2guXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgSGFzaFxuICovXG5mdW5jdGlvbiBoYXNoQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBuYXRpdmVDcmVhdGUgPyBuYXRpdmVDcmVhdGUobnVsbCkgOiB7fTtcbiAgdGhpcy5zaXplID0gMDtcbn1cblxuLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgaGFzaC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtPYmplY3R9IGhhc2ggVGhlIGhhc2ggdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGhhc2hEZWxldGUoa2V5KSB7XG4gIHZhciByZXN1bHQgPSB0aGlzLmhhcyhrZXkpICYmIGRlbGV0ZSB0aGlzLl9fZGF0YV9fW2tleV07XG4gIHRoaXMuc2l6ZSAtPSByZXN1bHQgPyAxIDogMDtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBoYXNoIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGhhc2hHZXQoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgaWYgKG5hdGl2ZUNyZWF0ZSkge1xuICAgIHZhciByZXN1bHQgPSBkYXRhW2tleV07XG4gICAgcmV0dXJuIHJlc3VsdCA9PT0gSEFTSF9VTkRFRklORUQgPyB1bmRlZmluZWQgOiByZXN1bHQ7XG4gIH1cbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KSA/IGRhdGFba2V5XSA6IHVuZGVmaW5lZDtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYSBoYXNoIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNoSGFzKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIHJldHVybiBuYXRpdmVDcmVhdGUgPyAoZGF0YVtrZXldICE9PSB1bmRlZmluZWQpIDogaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpO1xufVxuXG4vKipcbiAqIFNldHMgdGhlIGhhc2ggYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBoYXNoIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBoYXNoU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICB0aGlzLnNpemUgKz0gdGhpcy5oYXMoa2V5KSA/IDAgOiAxO1xuICBkYXRhW2tleV0gPSAobmF0aXZlQ3JlYXRlICYmIHZhbHVlID09PSB1bmRlZmluZWQpID8gSEFTSF9VTkRFRklORUQgOiB2YWx1ZTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBIYXNoYC5cbkhhc2gucHJvdG90eXBlLmNsZWFyID0gaGFzaENsZWFyO1xuSGFzaC5wcm90b3R5cGVbJ2RlbGV0ZSddID0gaGFzaERlbGV0ZTtcbkhhc2gucHJvdG90eXBlLmdldCA9IGhhc2hHZXQ7XG5IYXNoLnByb3RvdHlwZS5oYXMgPSBoYXNoSGFzO1xuSGFzaC5wcm90b3R5cGUuc2V0ID0gaGFzaFNldDtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGxpc3QgY2FjaGUgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBMaXN0Q2FjaGUoZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICB0aGlzLmNsZWFyKCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxufVxuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGxpc3QgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUNsZWFyKCkge1xuICB0aGlzLl9fZGF0YV9fID0gW107XG4gIHRoaXMuc2l6ZSA9IDA7XG59XG5cbi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGxpc3QgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZURlbGV0ZShrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICBpZiAoaW5kZXggPCAwKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBsYXN0SW5kZXggPSBkYXRhLmxlbmd0aCAtIDE7XG4gIGlmIChpbmRleCA9PSBsYXN0SW5kZXgpIHtcbiAgICBkYXRhLnBvcCgpO1xuICB9IGVsc2Uge1xuICAgIHNwbGljZS5jYWxsKGRhdGEsIGluZGV4LCAxKTtcbiAgfVxuICAtLXRoaXMuc2l6ZTtcbiAgcmV0dXJuIHRydWU7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgbGlzdCBjYWNoZSB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUdldChrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICByZXR1cm4gaW5kZXggPCAwID8gdW5kZWZpbmVkIDogZGF0YVtpbmRleF1bMV07XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgbGlzdCBjYWNoZSB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVIYXMoa2V5KSB7XG4gIHJldHVybiBhc3NvY0luZGV4T2YodGhpcy5fX2RhdGFfXywga2V5KSA+IC0xO1xufVxuXG4vKipcbiAqIFNldHMgdGhlIGxpc3QgY2FjaGUgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGxpc3QgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgaWYgKGluZGV4IDwgMCkge1xuICAgICsrdGhpcy5zaXplO1xuICAgIGRhdGEucHVzaChba2V5LCB2YWx1ZV0pO1xuICB9IGVsc2Uge1xuICAgIGRhdGFbaW5kZXhdWzFdID0gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBMaXN0Q2FjaGVgLlxuTGlzdENhY2hlLnByb3RvdHlwZS5jbGVhciA9IGxpc3RDYWNoZUNsZWFyO1xuTGlzdENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBsaXN0Q2FjaGVEZWxldGU7XG5MaXN0Q2FjaGUucHJvdG90eXBlLmdldCA9IGxpc3RDYWNoZUdldDtcbkxpc3RDYWNoZS5wcm90b3R5cGUuaGFzID0gbGlzdENhY2hlSGFzO1xuTGlzdENhY2hlLnByb3RvdHlwZS5zZXQgPSBsaXN0Q2FjaGVTZXQ7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG1hcCBjYWNoZSBvYmplY3QgdG8gc3RvcmUga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBNYXBDYWNoZShlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgbWFwLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlQ2xlYXIoKSB7XG4gIHRoaXMuc2l6ZSA9IDA7XG4gIHRoaXMuX19kYXRhX18gPSB7XG4gICAgJ2hhc2gnOiBuZXcgSGFzaCxcbiAgICAnbWFwJzogbmV3IChNYXAgfHwgTGlzdENhY2hlKSxcbiAgICAnc3RyaW5nJzogbmV3IEhhc2hcbiAgfTtcbn1cblxuLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbWFwLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlRGVsZXRlKGtleSkge1xuICB2YXIgcmVzdWx0ID0gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpWydkZWxldGUnXShrZXkpO1xuICB0aGlzLnNpemUgLT0gcmVzdWx0ID8gMSA6IDA7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgbWFwIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUdldChrZXkpIHtcbiAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5nZXQoa2V5KTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYSBtYXAgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUhhcyhrZXkpIHtcbiAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5oYXMoa2V5KTtcbn1cblxuLyoqXG4gKiBTZXRzIHRoZSBtYXAgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbWFwIGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLFxuICAgICAgc2l6ZSA9IGRhdGEuc2l6ZTtcblxuICBkYXRhLnNldChrZXksIHZhbHVlKTtcbiAgdGhpcy5zaXplICs9IGRhdGEuc2l6ZSA9PSBzaXplID8gMCA6IDE7XG4gIHJldHVybiB0aGlzO1xufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgTWFwQ2FjaGVgLlxuTWFwQ2FjaGUucHJvdG90eXBlLmNsZWFyID0gbWFwQ2FjaGVDbGVhcjtcbk1hcENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBtYXBDYWNoZURlbGV0ZTtcbk1hcENhY2hlLnByb3RvdHlwZS5nZXQgPSBtYXBDYWNoZUdldDtcbk1hcENhY2hlLnByb3RvdHlwZS5oYXMgPSBtYXBDYWNoZUhhcztcbk1hcENhY2hlLnByb3RvdHlwZS5zZXQgPSBtYXBDYWNoZVNldDtcblxuLyoqXG4gKlxuICogQ3JlYXRlcyBhbiBhcnJheSBjYWNoZSBvYmplY3QgdG8gc3RvcmUgdW5pcXVlIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBTZXRDYWNoZSh2YWx1ZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSB2YWx1ZXMgPT0gbnVsbCA/IDAgOiB2YWx1ZXMubGVuZ3RoO1xuXG4gIHRoaXMuX19kYXRhX18gPSBuZXcgTWFwQ2FjaGU7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdGhpcy5hZGQodmFsdWVzW2luZGV4XSk7XG4gIH1cbn1cblxuLyoqXG4gKiBBZGRzIGB2YWx1ZWAgdG8gdGhlIGFycmF5IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBhZGRcbiAqIEBtZW1iZXJPZiBTZXRDYWNoZVxuICogQGFsaWFzIHB1c2hcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNhY2hlLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIHNldENhY2hlQWRkKHZhbHVlKSB7XG4gIHRoaXMuX19kYXRhX18uc2V0KHZhbHVlLCBIQVNIX1VOREVGSU5FRCk7XG4gIHJldHVybiB0aGlzO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGluIHRoZSBhcnJheSBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgU2V0Q2FjaGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIHNldENhY2hlSGFzKHZhbHVlKSB7XG4gIHJldHVybiB0aGlzLl9fZGF0YV9fLmhhcyh2YWx1ZSk7XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBTZXRDYWNoZWAuXG5TZXRDYWNoZS5wcm90b3R5cGUuYWRkID0gU2V0Q2FjaGUucHJvdG90eXBlLnB1c2ggPSBzZXRDYWNoZUFkZDtcblNldENhY2hlLnByb3RvdHlwZS5oYXMgPSBzZXRDYWNoZUhhcztcblxuLyoqXG4gKiBDcmVhdGVzIGEgc3RhY2sgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gU3RhY2soZW50cmllcykge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18gPSBuZXcgTGlzdENhY2hlKGVudHJpZXMpO1xuICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG59XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgc3RhY2suXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqL1xuZnVuY3Rpb24gc3RhY2tDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IG5ldyBMaXN0Q2FjaGU7XG4gIHRoaXMuc2l6ZSA9IDA7XG59XG5cbi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIHN0YWNrLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrRGVsZXRlKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICByZXN1bHQgPSBkYXRhWydkZWxldGUnXShrZXkpO1xuXG4gIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBzdGFjayB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gc3RhY2tHZXQoa2V5KSB7XG4gIHJldHVybiB0aGlzLl9fZGF0YV9fLmdldChrZXkpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBhIHN0YWNrIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gc3RhY2tIYXMoa2V5KSB7XG4gIHJldHVybiB0aGlzLl9fZGF0YV9fLmhhcyhrZXkpO1xufVxuXG4vKipcbiAqIFNldHMgdGhlIHN0YWNrIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIHN0YWNrIGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBzdGFja1NldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgaWYgKGRhdGEgaW5zdGFuY2VvZiBMaXN0Q2FjaGUpIHtcbiAgICB2YXIgcGFpcnMgPSBkYXRhLl9fZGF0YV9fO1xuICAgIGlmICghTWFwIHx8IChwYWlycy5sZW5ndGggPCBMQVJHRV9BUlJBWV9TSVpFIC0gMSkpIHtcbiAgICAgIHBhaXJzLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgICAgIHRoaXMuc2l6ZSA9ICsrZGF0YS5zaXplO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGRhdGEgPSB0aGlzLl9fZGF0YV9fID0gbmV3IE1hcENhY2hlKHBhaXJzKTtcbiAgfVxuICBkYXRhLnNldChrZXksIHZhbHVlKTtcbiAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xuICByZXR1cm4gdGhpcztcbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYFN0YWNrYC5cblN0YWNrLnByb3RvdHlwZS5jbGVhciA9IHN0YWNrQ2xlYXI7XG5TdGFjay5wcm90b3R5cGVbJ2RlbGV0ZSddID0gc3RhY2tEZWxldGU7XG5TdGFjay5wcm90b3R5cGUuZ2V0ID0gc3RhY2tHZXQ7XG5TdGFjay5wcm90b3R5cGUuaGFzID0gc3RhY2tIYXM7XG5TdGFjay5wcm90b3R5cGUuc2V0ID0gc3RhY2tTZXQ7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiB0aGUgYXJyYXktbGlrZSBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaW5oZXJpdGVkIFNwZWNpZnkgcmV0dXJuaW5nIGluaGVyaXRlZCBwcm9wZXJ0eSBuYW1lcy5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKi9cbmZ1bmN0aW9uIGFycmF5TGlrZUtleXModmFsdWUsIGluaGVyaXRlZCkge1xuICB2YXIgaXNBcnIgPSBpc0FycmF5KHZhbHVlKSxcbiAgICAgIGlzQXJnID0gIWlzQXJyICYmIGlzQXJndW1lbnRzKHZhbHVlKSxcbiAgICAgIGlzQnVmZiA9ICFpc0FyciAmJiAhaXNBcmcgJiYgaXNCdWZmZXIodmFsdWUpLFxuICAgICAgaXNUeXBlID0gIWlzQXJyICYmICFpc0FyZyAmJiAhaXNCdWZmICYmIGlzVHlwZWRBcnJheSh2YWx1ZSksXG4gICAgICBza2lwSW5kZXhlcyA9IGlzQXJyIHx8IGlzQXJnIHx8IGlzQnVmZiB8fCBpc1R5cGUsXG4gICAgICByZXN1bHQgPSBza2lwSW5kZXhlcyA/IGJhc2VUaW1lcyh2YWx1ZS5sZW5ndGgsIFN0cmluZykgOiBbXSxcbiAgICAgIGxlbmd0aCA9IHJlc3VsdC5sZW5ndGg7XG5cbiAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgaWYgKChpbmhlcml0ZWQgfHwgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwga2V5KSkgJiZcbiAgICAgICAgIShza2lwSW5kZXhlcyAmJiAoXG4gICAgICAgICAgIC8vIFNhZmFyaSA5IGhhcyBlbnVtZXJhYmxlIGBhcmd1bWVudHMubGVuZ3RoYCBpbiBzdHJpY3QgbW9kZS5cbiAgICAgICAgICAga2V5ID09ICdsZW5ndGgnIHx8XG4gICAgICAgICAgIC8vIE5vZGUuanMgMC4xMCBoYXMgZW51bWVyYWJsZSBub24taW5kZXggcHJvcGVydGllcyBvbiBidWZmZXJzLlxuICAgICAgICAgICAoaXNCdWZmICYmIChrZXkgPT0gJ29mZnNldCcgfHwga2V5ID09ICdwYXJlbnQnKSkgfHxcbiAgICAgICAgICAgLy8gUGhhbnRvbUpTIDIgaGFzIGVudW1lcmFibGUgbm9uLWluZGV4IHByb3BlcnRpZXMgb24gdHlwZWQgYXJyYXlzLlxuICAgICAgICAgICAoaXNUeXBlICYmIChrZXkgPT0gJ2J1ZmZlcicgfHwga2V5ID09ICdieXRlTGVuZ3RoJyB8fCBrZXkgPT0gJ2J5dGVPZmZzZXQnKSkgfHxcbiAgICAgICAgICAgLy8gU2tpcCBpbmRleCBwcm9wZXJ0aWVzLlxuICAgICAgICAgICBpc0luZGV4KGtleSwgbGVuZ3RoKVxuICAgICAgICApKSkge1xuICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBpbmRleCBhdCB3aGljaCB0aGUgYGtleWAgaXMgZm91bmQgaW4gYGFycmF5YCBvZiBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHsqfSBrZXkgVGhlIGtleSB0byBzZWFyY2ggZm9yLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAqL1xuZnVuY3Rpb24gYXNzb2NJbmRleE9mKGFycmF5LCBrZXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgaWYgKGVxKGFycmF5W2xlbmd0aF1bMF0sIGtleSkpIHtcbiAgICAgIHJldHVybiBsZW5ndGg7XG4gICAgfVxuICB9XG4gIHJldHVybiAtMTtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgZ2V0QWxsS2V5c2AgYW5kIGBnZXRBbGxLZXlzSW5gIHdoaWNoIHVzZXNcbiAqIGBrZXlzRnVuY2AgYW5kIGBzeW1ib2xzRnVuY2AgdG8gZ2V0IHRoZSBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIGFuZFxuICogc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtGdW5jdGlvbn0ga2V5c0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUga2V5cyBvZiBgb2JqZWN0YC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHN5bWJvbHNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzLlxuICovXG5mdW5jdGlvbiBiYXNlR2V0QWxsS2V5cyhvYmplY3QsIGtleXNGdW5jLCBzeW1ib2xzRnVuYykge1xuICB2YXIgcmVzdWx0ID0ga2V5c0Z1bmMob2JqZWN0KTtcbiAgcmV0dXJuIGlzQXJyYXkob2JqZWN0KSA/IHJlc3VsdCA6IGFycmF5UHVzaChyZXN1bHQsIHN5bWJvbHNGdW5jKG9iamVjdCkpO1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRUYWdgIHdpdGhvdXQgZmFsbGJhY2tzIGZvciBidWdneSBlbnZpcm9ubWVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldFRhZyh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkVGFnIDogbnVsbFRhZztcbiAgfVxuICByZXR1cm4gKHN5bVRvU3RyaW5nVGFnICYmIHN5bVRvU3RyaW5nVGFnIGluIE9iamVjdCh2YWx1ZSkpXG4gICAgPyBnZXRSYXdUYWcodmFsdWUpXG4gICAgOiBvYmplY3RUb1N0cmluZyh2YWx1ZSk7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNBcmd1bWVudHNgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcbiAqL1xuZnVuY3Rpb24gYmFzZUlzQXJndW1lbnRzKHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IGFyZ3NUYWc7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNFcXVhbGAgd2hpY2ggc3VwcG9ydHMgcGFydGlhbCBjb21wYXJpc29uc1xuICogYW5kIHRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuXG4gKiAgMSAtIFVub3JkZXJlZCBjb21wYXJpc29uXG4gKiAgMiAtIFBhcnRpYWwgY29tcGFyaXNvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIGB2YWx1ZWAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc0VxdWFsKHZhbHVlLCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spIHtcbiAgaWYgKHZhbHVlID09PSBvdGhlcikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmICh2YWx1ZSA9PSBudWxsIHx8IG90aGVyID09IG51bGwgfHwgKCFpc09iamVjdExpa2UodmFsdWUpICYmICFpc09iamVjdExpa2Uob3RoZXIpKSkge1xuICAgIHJldHVybiB2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyO1xuICB9XG4gIHJldHVybiBiYXNlSXNFcXVhbERlZXAodmFsdWUsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBiYXNlSXNFcXVhbCwgc3RhY2spO1xufVxuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxgIGZvciBhcnJheXMgYW5kIG9iamVjdHMgd2hpY2ggcGVyZm9ybXNcbiAqIGRlZXAgY29tcGFyaXNvbnMgYW5kIHRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cyBlbmFibGluZyBvYmplY3RzIHdpdGggY2lyY3VsYXJcbiAqIHJlZmVyZW5jZXMgdG8gYmUgY29tcGFyZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc0VxdWFsRGVlcChvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gIHZhciBvYmpJc0FyciA9IGlzQXJyYXkob2JqZWN0KSxcbiAgICAgIG90aElzQXJyID0gaXNBcnJheShvdGhlciksXG4gICAgICBvYmpUYWcgPSBvYmpJc0FyciA/IGFycmF5VGFnIDogZ2V0VGFnKG9iamVjdCksXG4gICAgICBvdGhUYWcgPSBvdGhJc0FyciA/IGFycmF5VGFnIDogZ2V0VGFnKG90aGVyKTtcblxuICBvYmpUYWcgPSBvYmpUYWcgPT0gYXJnc1RhZyA/IG9iamVjdFRhZyA6IG9ialRhZztcbiAgb3RoVGFnID0gb3RoVGFnID09IGFyZ3NUYWcgPyBvYmplY3RUYWcgOiBvdGhUYWc7XG5cbiAgdmFyIG9iaklzT2JqID0gb2JqVGFnID09IG9iamVjdFRhZyxcbiAgICAgIG90aElzT2JqID0gb3RoVGFnID09IG9iamVjdFRhZyxcbiAgICAgIGlzU2FtZVRhZyA9IG9ialRhZyA9PSBvdGhUYWc7XG5cbiAgaWYgKGlzU2FtZVRhZyAmJiBpc0J1ZmZlcihvYmplY3QpKSB7XG4gICAgaWYgKCFpc0J1ZmZlcihvdGhlcikpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgb2JqSXNBcnIgPSB0cnVlO1xuICAgIG9iaklzT2JqID0gZmFsc2U7XG4gIH1cbiAgaWYgKGlzU2FtZVRhZyAmJiAhb2JqSXNPYmopIHtcbiAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgIHJldHVybiAob2JqSXNBcnIgfHwgaXNUeXBlZEFycmF5KG9iamVjdCkpXG4gICAgICA/IGVxdWFsQXJyYXlzKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spXG4gICAgICA6IGVxdWFsQnlUYWcob2JqZWN0LCBvdGhlciwgb2JqVGFnLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbiAgfVxuICBpZiAoIShiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUcpKSB7XG4gICAgdmFyIG9iaklzV3JhcHBlZCA9IG9iaklzT2JqICYmIGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCAnX193cmFwcGVkX18nKSxcbiAgICAgICAgb3RoSXNXcmFwcGVkID0gb3RoSXNPYmogJiYgaGFzT3duUHJvcGVydHkuY2FsbChvdGhlciwgJ19fd3JhcHBlZF9fJyk7XG5cbiAgICBpZiAob2JqSXNXcmFwcGVkIHx8IG90aElzV3JhcHBlZCkge1xuICAgICAgdmFyIG9ialVud3JhcHBlZCA9IG9iaklzV3JhcHBlZCA/IG9iamVjdC52YWx1ZSgpIDogb2JqZWN0LFxuICAgICAgICAgIG90aFVud3JhcHBlZCA9IG90aElzV3JhcHBlZCA/IG90aGVyLnZhbHVlKCkgOiBvdGhlcjtcblxuICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICAgIHJldHVybiBlcXVhbEZ1bmMob2JqVW53cmFwcGVkLCBvdGhVbndyYXBwZWQsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKTtcbiAgICB9XG4gIH1cbiAgaWYgKCFpc1NhbWVUYWcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgcmV0dXJuIGVxdWFsT2JqZWN0cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbn1cblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc05hdGl2ZWAgd2l0aG91dCBiYWQgc2hpbSBjaGVja3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBuYXRpdmUgZnVuY3Rpb24sXG4gKiAgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNOYXRpdmUodmFsdWUpIHtcbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkgfHwgaXNNYXNrZWQodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBwYXR0ZXJuID0gaXNGdW5jdGlvbih2YWx1ZSkgPyByZUlzTmF0aXZlIDogcmVJc0hvc3RDdG9yO1xuICByZXR1cm4gcGF0dGVybi50ZXN0KHRvU291cmNlKHZhbHVlKSk7XG59XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNUeXBlZEFycmF5YCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHR5cGVkIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc1R5cGVkQXJyYXkodmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiZcbiAgICBpc0xlbmd0aCh2YWx1ZS5sZW5ndGgpICYmICEhdHlwZWRBcnJheVRhZ3NbYmFzZUdldFRhZyh2YWx1ZSldO1xufVxuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmtleXNgIHdoaWNoIGRvZXNuJ3QgdHJlYXQgc3BhcnNlIGFycmF5cyBhcyBkZW5zZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gYmFzZUtleXMob2JqZWN0KSB7XG4gIGlmICghaXNQcm90b3R5cGUob2JqZWN0KSkge1xuICAgIHJldHVybiBuYXRpdmVLZXlzKG9iamVjdCk7XG4gIH1cbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBmb3IgKHZhciBrZXkgaW4gT2JqZWN0KG9iamVjdCkpIHtcbiAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkgJiYga2V5ICE9ICdjb25zdHJ1Y3RvcicpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBhcnJheXMgd2l0aCBzdXBwb3J0IGZvclxuICogcGFydGlhbCBkZWVwIGNvbXBhcmlzb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7QXJyYXl9IG90aGVyIFRoZSBvdGhlciBhcnJheSB0byBjb21wYXJlLlxuICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgYXJyYXlgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGFycmF5cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBlcXVhbEFycmF5cyhhcnJheSwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRyxcbiAgICAgIGFyckxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgIG90aExlbmd0aCA9IG90aGVyLmxlbmd0aDtcblxuICBpZiAoYXJyTGVuZ3RoICE9IG90aExlbmd0aCAmJiAhKGlzUGFydGlhbCAmJiBvdGhMZW5ndGggPiBhcnJMZW5ndGgpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vIEFzc3VtZSBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgdmFyIHN0YWNrZWQgPSBzdGFjay5nZXQoYXJyYXkpO1xuICBpZiAoc3RhY2tlZCAmJiBzdGFjay5nZXQob3RoZXIpKSB7XG4gICAgcmV0dXJuIHN0YWNrZWQgPT0gb3RoZXI7XG4gIH1cbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSB0cnVlLFxuICAgICAgc2VlbiA9IChiaXRtYXNrICYgQ09NUEFSRV9VTk9SREVSRURfRkxBRykgPyBuZXcgU2V0Q2FjaGUgOiB1bmRlZmluZWQ7XG5cbiAgc3RhY2suc2V0KGFycmF5LCBvdGhlcik7XG4gIHN0YWNrLnNldChvdGhlciwgYXJyYXkpO1xuXG4gIC8vIElnbm9yZSBub24taW5kZXggcHJvcGVydGllcy5cbiAgd2hpbGUgKCsraW5kZXggPCBhcnJMZW5ndGgpIHtcbiAgICB2YXIgYXJyVmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgIG90aFZhbHVlID0gb3RoZXJbaW5kZXhdO1xuXG4gICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgIHZhciBjb21wYXJlZCA9IGlzUGFydGlhbFxuICAgICAgICA/IGN1c3RvbWl6ZXIob3RoVmFsdWUsIGFyclZhbHVlLCBpbmRleCwgb3RoZXIsIGFycmF5LCBzdGFjaylcbiAgICAgICAgOiBjdXN0b21pemVyKGFyclZhbHVlLCBvdGhWYWx1ZSwgaW5kZXgsIGFycmF5LCBvdGhlciwgc3RhY2spO1xuICAgIH1cbiAgICBpZiAoY29tcGFyZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKGNvbXBhcmVkKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICBpZiAoc2Vlbikge1xuICAgICAgaWYgKCFhcnJheVNvbWUob3RoZXIsIGZ1bmN0aW9uKG90aFZhbHVlLCBvdGhJbmRleCkge1xuICAgICAgICAgICAgaWYgKCFjYWNoZUhhcyhzZWVuLCBvdGhJbmRleCkgJiZcbiAgICAgICAgICAgICAgICAoYXJyVmFsdWUgPT09IG90aFZhbHVlIHx8IGVxdWFsRnVuYyhhcnJWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKSkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHNlZW4ucHVzaChvdGhJbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSkpIHtcbiAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIShcbiAgICAgICAgICBhcnJWYWx1ZSA9PT0gb3RoVmFsdWUgfHxcbiAgICAgICAgICAgIGVxdWFsRnVuYyhhcnJWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKVxuICAgICAgICApKSB7XG4gICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICBzdGFja1snZGVsZXRlJ10oYXJyYXkpO1xuICBzdGFja1snZGVsZXRlJ10ob3RoZXIpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3IgY29tcGFyaW5nIG9iamVjdHMgb2ZcbiAqIHRoZSBzYW1lIGB0b1N0cmluZ1RhZ2AuXG4gKlxuICogKipOb3RlOioqIFRoaXMgZnVuY3Rpb24gb25seSBzdXBwb3J0cyBjb21wYXJpbmcgdmFsdWVzIHdpdGggdGFncyBvZlxuICogYEJvb2xlYW5gLCBgRGF0ZWAsIGBFcnJvcmAsIGBOdW1iZXJgLCBgUmVnRXhwYCwgb3IgYFN0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0YWcgVGhlIGB0b1N0cmluZ1RhZ2Agb2YgdGhlIG9iamVjdHMgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBlcXVhbEJ5VGFnKG9iamVjdCwgb3RoZXIsIHRhZywgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICBzd2l0Y2ggKHRhZykge1xuICAgIGNhc2UgZGF0YVZpZXdUYWc6XG4gICAgICBpZiAoKG9iamVjdC5ieXRlTGVuZ3RoICE9IG90aGVyLmJ5dGVMZW5ndGgpIHx8XG4gICAgICAgICAgKG9iamVjdC5ieXRlT2Zmc2V0ICE9IG90aGVyLmJ5dGVPZmZzZXQpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIG9iamVjdCA9IG9iamVjdC5idWZmZXI7XG4gICAgICBvdGhlciA9IG90aGVyLmJ1ZmZlcjtcblxuICAgIGNhc2UgYXJyYXlCdWZmZXJUYWc6XG4gICAgICBpZiAoKG9iamVjdC5ieXRlTGVuZ3RoICE9IG90aGVyLmJ5dGVMZW5ndGgpIHx8XG4gICAgICAgICAgIWVxdWFsRnVuYyhuZXcgVWludDhBcnJheShvYmplY3QpLCBuZXcgVWludDhBcnJheShvdGhlcikpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgY2FzZSBib29sVGFnOlxuICAgIGNhc2UgZGF0ZVRhZzpcbiAgICBjYXNlIG51bWJlclRhZzpcbiAgICAgIC8vIENvZXJjZSBib29sZWFucyB0byBgMWAgb3IgYDBgIGFuZCBkYXRlcyB0byBtaWxsaXNlY29uZHMuXG4gICAgICAvLyBJbnZhbGlkIGRhdGVzIGFyZSBjb2VyY2VkIHRvIGBOYU5gLlxuICAgICAgcmV0dXJuIGVxKCtvYmplY3QsICtvdGhlcik7XG5cbiAgICBjYXNlIGVycm9yVGFnOlxuICAgICAgcmV0dXJuIG9iamVjdC5uYW1lID09IG90aGVyLm5hbWUgJiYgb2JqZWN0Lm1lc3NhZ2UgPT0gb3RoZXIubWVzc2FnZTtcblxuICAgIGNhc2UgcmVnZXhwVGFnOlxuICAgIGNhc2Ugc3RyaW5nVGFnOlxuICAgICAgLy8gQ29lcmNlIHJlZ2V4ZXMgdG8gc3RyaW5ncyBhbmQgdHJlYXQgc3RyaW5ncywgcHJpbWl0aXZlcyBhbmQgb2JqZWN0cyxcbiAgICAgIC8vIGFzIGVxdWFsLiBTZWUgaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXJlZ2V4cC5wcm90b3R5cGUudG9zdHJpbmdcbiAgICAgIC8vIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICByZXR1cm4gb2JqZWN0ID09IChvdGhlciArICcnKTtcblxuICAgIGNhc2UgbWFwVGFnOlxuICAgICAgdmFyIGNvbnZlcnQgPSBtYXBUb0FycmF5O1xuXG4gICAgY2FzZSBzZXRUYWc6XG4gICAgICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHO1xuICAgICAgY29udmVydCB8fCAoY29udmVydCA9IHNldFRvQXJyYXkpO1xuXG4gICAgICBpZiAob2JqZWN0LnNpemUgIT0gb3RoZXIuc2l6ZSAmJiAhaXNQYXJ0aWFsKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIC8vIEFzc3VtZSBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgICAgIHZhciBzdGFja2VkID0gc3RhY2suZ2V0KG9iamVjdCk7XG4gICAgICBpZiAoc3RhY2tlZCkge1xuICAgICAgICByZXR1cm4gc3RhY2tlZCA9PSBvdGhlcjtcbiAgICAgIH1cbiAgICAgIGJpdG1hc2sgfD0gQ09NUEFSRV9VTk9SREVSRURfRkxBRztcblxuICAgICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBvYmplY3RzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICBzdGFjay5zZXQob2JqZWN0LCBvdGhlcik7XG4gICAgICB2YXIgcmVzdWx0ID0gZXF1YWxBcnJheXMoY29udmVydChvYmplY3QpLCBjb252ZXJ0KG90aGVyKSwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjayk7XG4gICAgICBzdGFja1snZGVsZXRlJ10ob2JqZWN0KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG5cbiAgICBjYXNlIHN5bWJvbFRhZzpcbiAgICAgIGlmIChzeW1ib2xWYWx1ZU9mKSB7XG4gICAgICAgIHJldHVybiBzeW1ib2xWYWx1ZU9mLmNhbGwob2JqZWN0KSA9PSBzeW1ib2xWYWx1ZU9mLmNhbGwob3RoZXIpO1xuICAgICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIG9iamVjdHMgd2l0aCBzdXBwb3J0IGZvclxuICogcGFydGlhbCBkZWVwIGNvbXBhcmlzb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzdGFjayBUcmFja3MgdHJhdmVyc2VkIGBvYmplY3RgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gZXF1YWxPYmplY3RzKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRyxcbiAgICAgIG9ialByb3BzID0gZ2V0QWxsS2V5cyhvYmplY3QpLFxuICAgICAgb2JqTGVuZ3RoID0gb2JqUHJvcHMubGVuZ3RoLFxuICAgICAgb3RoUHJvcHMgPSBnZXRBbGxLZXlzKG90aGVyKSxcbiAgICAgIG90aExlbmd0aCA9IG90aFByb3BzLmxlbmd0aDtcblxuICBpZiAob2JqTGVuZ3RoICE9IG90aExlbmd0aCAmJiAhaXNQYXJ0aWFsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBpbmRleCA9IG9iakxlbmd0aDtcbiAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICB2YXIga2V5ID0gb2JqUHJvcHNbaW5kZXhdO1xuICAgIGlmICghKGlzUGFydGlhbCA/IGtleSBpbiBvdGhlciA6IGhhc093blByb3BlcnR5LmNhbGwob3RoZXIsIGtleSkpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIC8vIEFzc3VtZSBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgdmFyIHN0YWNrZWQgPSBzdGFjay5nZXQob2JqZWN0KTtcbiAgaWYgKHN0YWNrZWQgJiYgc3RhY2suZ2V0KG90aGVyKSkge1xuICAgIHJldHVybiBzdGFja2VkID09IG90aGVyO1xuICB9XG4gIHZhciByZXN1bHQgPSB0cnVlO1xuICBzdGFjay5zZXQob2JqZWN0LCBvdGhlcik7XG4gIHN0YWNrLnNldChvdGhlciwgb2JqZWN0KTtcblxuICB2YXIgc2tpcEN0b3IgPSBpc1BhcnRpYWw7XG4gIHdoaWxlICgrK2luZGV4IDwgb2JqTGVuZ3RoKSB7XG4gICAga2V5ID0gb2JqUHJvcHNbaW5kZXhdO1xuICAgIHZhciBvYmpWYWx1ZSA9IG9iamVjdFtrZXldLFxuICAgICAgICBvdGhWYWx1ZSA9IG90aGVyW2tleV07XG5cbiAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgdmFyIGNvbXBhcmVkID0gaXNQYXJ0aWFsXG4gICAgICAgID8gY3VzdG9taXplcihvdGhWYWx1ZSwgb2JqVmFsdWUsIGtleSwgb3RoZXIsIG9iamVjdCwgc3RhY2spXG4gICAgICAgIDogY3VzdG9taXplcihvYmpWYWx1ZSwgb3RoVmFsdWUsIGtleSwgb2JqZWN0LCBvdGhlciwgc3RhY2spO1xuICAgIH1cbiAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIG9iamVjdHMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICBpZiAoIShjb21wYXJlZCA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgPyAob2JqVmFsdWUgPT09IG90aFZhbHVlIHx8IGVxdWFsRnVuYyhvYmpWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKSlcbiAgICAgICAgICA6IGNvbXBhcmVkXG4gICAgICAgICkpIHtcbiAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHNraXBDdG9yIHx8IChza2lwQ3RvciA9IGtleSA9PSAnY29uc3RydWN0b3InKTtcbiAgfVxuICBpZiAocmVzdWx0ICYmICFza2lwQ3Rvcikge1xuICAgIHZhciBvYmpDdG9yID0gb2JqZWN0LmNvbnN0cnVjdG9yLFxuICAgICAgICBvdGhDdG9yID0gb3RoZXIuY29uc3RydWN0b3I7XG5cbiAgICAvLyBOb24gYE9iamVjdGAgb2JqZWN0IGluc3RhbmNlcyB3aXRoIGRpZmZlcmVudCBjb25zdHJ1Y3RvcnMgYXJlIG5vdCBlcXVhbC5cbiAgICBpZiAob2JqQ3RvciAhPSBvdGhDdG9yICYmXG4gICAgICAgICgnY29uc3RydWN0b3InIGluIG9iamVjdCAmJiAnY29uc3RydWN0b3InIGluIG90aGVyKSAmJlxuICAgICAgICAhKHR5cGVvZiBvYmpDdG9yID09ICdmdW5jdGlvbicgJiYgb2JqQ3RvciBpbnN0YW5jZW9mIG9iakN0b3IgJiZcbiAgICAgICAgICB0eXBlb2Ygb3RoQ3RvciA9PSAnZnVuY3Rpb24nICYmIG90aEN0b3IgaW5zdGFuY2VvZiBvdGhDdG9yKSkge1xuICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIHN0YWNrWydkZWxldGUnXShvYmplY3QpO1xuICBzdGFja1snZGVsZXRlJ10ob3RoZXIpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygb3duIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMuXG4gKi9cbmZ1bmN0aW9uIGdldEFsbEtleXMob2JqZWN0KSB7XG4gIHJldHVybiBiYXNlR2V0QWxsS2V5cyhvYmplY3QsIGtleXMsIGdldFN5bWJvbHMpO1xufVxuXG4vKipcbiAqIEdldHMgdGhlIGRhdGEgZm9yIGBtYXBgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gbWFwIFRoZSBtYXAgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSByZWZlcmVuY2Uga2V5LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1hcCBkYXRhLlxuICovXG5mdW5jdGlvbiBnZXRNYXBEYXRhKG1hcCwga2V5KSB7XG4gIHZhciBkYXRhID0gbWFwLl9fZGF0YV9fO1xuICByZXR1cm4gaXNLZXlhYmxlKGtleSlcbiAgICA/IGRhdGFbdHlwZW9mIGtleSA9PSAnc3RyaW5nJyA/ICdzdHJpbmcnIDogJ2hhc2gnXVxuICAgIDogZGF0YS5tYXA7XG59XG5cbi8qKlxuICogR2V0cyB0aGUgbmF0aXZlIGZ1bmN0aW9uIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIG1ldGhvZCB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZnVuY3Rpb24gaWYgaXQncyBuYXRpdmUsIGVsc2UgYHVuZGVmaW5lZGAuXG4gKi9cbmZ1bmN0aW9uIGdldE5hdGl2ZShvYmplY3QsIGtleSkge1xuICB2YXIgdmFsdWUgPSBnZXRWYWx1ZShvYmplY3QsIGtleSk7XG4gIHJldHVybiBiYXNlSXNOYXRpdmUodmFsdWUpID8gdmFsdWUgOiB1bmRlZmluZWQ7XG59XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlR2V0VGFnYCB3aGljaCBpZ25vcmVzIGBTeW1ib2wudG9TdHJpbmdUYWdgIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSByYXcgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gZ2V0UmF3VGFnKHZhbHVlKSB7XG4gIHZhciBpc093biA9IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIHN5bVRvU3RyaW5nVGFnKSxcbiAgICAgIHRhZyA9IHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcblxuICB0cnkge1xuICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHVuZGVmaW5lZDtcbiAgICB2YXIgdW5tYXNrZWQgPSB0cnVlO1xuICB9IGNhdGNoIChlKSB7fVxuXG4gIHZhciByZXN1bHQgPSBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgaWYgKHVubWFza2VkKSB7XG4gICAgaWYgKGlzT3duKSB7XG4gICAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB0YWc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlbGV0ZSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGVudW1lcmFibGUgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBzeW1ib2xzLlxuICovXG52YXIgZ2V0U3ltYm9scyA9ICFuYXRpdmVHZXRTeW1ib2xzID8gc3R1YkFycmF5IDogZnVuY3Rpb24ob2JqZWN0KSB7XG4gIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcbiAgcmV0dXJuIGFycmF5RmlsdGVyKG5hdGl2ZUdldFN5bWJvbHMob2JqZWN0KSwgZnVuY3Rpb24oc3ltYm9sKSB7XG4gICAgcmV0dXJuIHByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwob2JqZWN0LCBzeW1ib2wpO1xuICB9KTtcbn07XG5cbi8qKlxuICogR2V0cyB0aGUgYHRvU3RyaW5nVGFnYCBvZiBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gKi9cbnZhciBnZXRUYWcgPSBiYXNlR2V0VGFnO1xuXG4vLyBGYWxsYmFjayBmb3IgZGF0YSB2aWV3cywgbWFwcywgc2V0cywgYW5kIHdlYWsgbWFwcyBpbiBJRSAxMSBhbmQgcHJvbWlzZXMgaW4gTm9kZS5qcyA8IDYuXG5pZiAoKERhdGFWaWV3ICYmIGdldFRhZyhuZXcgRGF0YVZpZXcobmV3IEFycmF5QnVmZmVyKDEpKSkgIT0gZGF0YVZpZXdUYWcpIHx8XG4gICAgKE1hcCAmJiBnZXRUYWcobmV3IE1hcCkgIT0gbWFwVGFnKSB8fFxuICAgIChQcm9taXNlICYmIGdldFRhZyhQcm9taXNlLnJlc29sdmUoKSkgIT0gcHJvbWlzZVRhZykgfHxcbiAgICAoU2V0ICYmIGdldFRhZyhuZXcgU2V0KSAhPSBzZXRUYWcpIHx8XG4gICAgKFdlYWtNYXAgJiYgZ2V0VGFnKG5ldyBXZWFrTWFwKSAhPSB3ZWFrTWFwVGFnKSkge1xuICBnZXRUYWcgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHZhciByZXN1bHQgPSBiYXNlR2V0VGFnKHZhbHVlKSxcbiAgICAgICAgQ3RvciA9IHJlc3VsdCA9PSBvYmplY3RUYWcgPyB2YWx1ZS5jb25zdHJ1Y3RvciA6IHVuZGVmaW5lZCxcbiAgICAgICAgY3RvclN0cmluZyA9IEN0b3IgPyB0b1NvdXJjZShDdG9yKSA6ICcnO1xuXG4gICAgaWYgKGN0b3JTdHJpbmcpIHtcbiAgICAgIHN3aXRjaCAoY3RvclN0cmluZykge1xuICAgICAgICBjYXNlIGRhdGFWaWV3Q3RvclN0cmluZzogcmV0dXJuIGRhdGFWaWV3VGFnO1xuICAgICAgICBjYXNlIG1hcEN0b3JTdHJpbmc6IHJldHVybiBtYXBUYWc7XG4gICAgICAgIGNhc2UgcHJvbWlzZUN0b3JTdHJpbmc6IHJldHVybiBwcm9taXNlVGFnO1xuICAgICAgICBjYXNlIHNldEN0b3JTdHJpbmc6IHJldHVybiBzZXRUYWc7XG4gICAgICAgIGNhc2Ugd2Vha01hcEN0b3JTdHJpbmc6IHJldHVybiB3ZWFrTWFwVGFnO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBpbmRleC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD1NQVhfU0FGRV9JTlRFR0VSXSBUaGUgdXBwZXIgYm91bmRzIG9mIGEgdmFsaWQgaW5kZXguXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGluZGV4LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzSW5kZXgodmFsdWUsIGxlbmd0aCkge1xuICBsZW5ndGggPSBsZW5ndGggPT0gbnVsbCA/IE1BWF9TQUZFX0lOVEVHRVIgOiBsZW5ndGg7XG4gIHJldHVybiAhIWxlbmd0aCAmJlxuICAgICh0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgfHwgcmVJc1VpbnQudGVzdCh2YWx1ZSkpICYmXG4gICAgKHZhbHVlID4gLTEgJiYgdmFsdWUgJSAxID09IDAgJiYgdmFsdWUgPCBsZW5ndGgpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlIGZvciB1c2UgYXMgdW5pcXVlIG9iamVjdCBrZXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNLZXlhYmxlKHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gKHR5cGUgPT0gJ3N0cmluZycgfHwgdHlwZSA9PSAnbnVtYmVyJyB8fCB0eXBlID09ICdzeW1ib2wnIHx8IHR5cGUgPT0gJ2Jvb2xlYW4nKVxuICAgID8gKHZhbHVlICE9PSAnX19wcm90b19fJylcbiAgICA6ICh2YWx1ZSA9PT0gbnVsbCk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGBmdW5jYCBoYXMgaXRzIHNvdXJjZSBtYXNrZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBmdW5jYCBpcyBtYXNrZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNNYXNrZWQoZnVuYykge1xuICByZXR1cm4gISFtYXNrU3JjS2V5ICYmIChtYXNrU3JjS2V5IGluIGZ1bmMpO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhIHByb3RvdHlwZSBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwcm90b3R5cGUsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNQcm90b3R5cGUodmFsdWUpIHtcbiAgdmFyIEN0b3IgPSB2YWx1ZSAmJiB2YWx1ZS5jb25zdHJ1Y3RvcixcbiAgICAgIHByb3RvID0gKHR5cGVvZiBDdG9yID09ICdmdW5jdGlvbicgJiYgQ3Rvci5wcm90b3R5cGUpIHx8IG9iamVjdFByb3RvO1xuXG4gIHJldHVybiB2YWx1ZSA9PT0gcHJvdG87XG59XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZyB1c2luZyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBvYmplY3RUb1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG59XG5cbi8qKlxuICogQ29udmVydHMgYGZ1bmNgIHRvIGl0cyBzb3VyY2UgY29kZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHNvdXJjZSBjb2RlLlxuICovXG5mdW5jdGlvbiB0b1NvdXJjZShmdW5jKSB7XG4gIGlmIChmdW5jICE9IG51bGwpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGZ1bmNUb1N0cmluZy5jYWxsKGZ1bmMpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiAoZnVuYyArICcnKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICB9XG4gIHJldHVybiAnJztcbn1cblxuLyoqXG4gKiBQZXJmb3JtcyBhXG4gKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICogY29tcGFyaXNvbiBiZXR3ZWVuIHR3byB2YWx1ZXMgdG8gZGV0ZXJtaW5lIGlmIHRoZXkgYXJlIGVxdWl2YWxlbnQuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gKiB2YXIgb3RoZXIgPSB7ICdhJzogMSB9O1xuICpcbiAqIF8uZXEob2JqZWN0LCBvYmplY3QpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uZXEob2JqZWN0LCBvdGhlcik7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uZXEoJ2EnLCAnYScpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uZXEoJ2EnLCBPYmplY3QoJ2EnKSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uZXEoTmFOLCBOYU4pO1xuICogLy8gPT4gdHJ1ZVxuICovXG5mdW5jdGlvbiBlcSh2YWx1ZSwgb3RoZXIpIHtcbiAgcmV0dXJuIHZhbHVlID09PSBvdGhlciB8fCAodmFsdWUgIT09IHZhbHVlICYmIG90aGVyICE9PSBvdGhlcik7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGlrZWx5IGFuIGBhcmd1bWVudHNgIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBgYXJndW1lbnRzYCBvYmplY3QsXG4gKiAgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJndW1lbnRzKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcmd1bWVudHMoWzEsIDIsIDNdKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0FyZ3VtZW50cyA9IGJhc2VJc0FyZ3VtZW50cyhmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA/IGJhc2VJc0FyZ3VtZW50cyA6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsICdjYWxsZWUnKSAmJlxuICAgICFwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHZhbHVlLCAnY2FsbGVlJyk7XG59O1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYW4gYEFycmF5YCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXkoJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXkoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLiBBIHZhbHVlIGlzIGNvbnNpZGVyZWQgYXJyYXktbGlrZSBpZiBpdCdzXG4gKiBub3QgYSBmdW5jdGlvbiBhbmQgaGFzIGEgYHZhbHVlLmxlbmd0aGAgdGhhdCdzIGFuIGludGVnZXIgZ3JlYXRlciB0aGFuIG9yXG4gKiBlcXVhbCB0byBgMGAgYW5kIGxlc3MgdGhhbiBvciBlcXVhbCB0byBgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVJgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZSgnYWJjJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUxpa2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgaXNMZW5ndGgodmFsdWUubGVuZ3RoKSAmJiAhaXNGdW5jdGlvbih2YWx1ZSk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBidWZmZXIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjMuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBidWZmZXIsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0J1ZmZlcihuZXcgQnVmZmVyKDIpKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQnVmZmVyKG5ldyBVaW50OEFycmF5KDIpKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0J1ZmZlciA9IG5hdGl2ZUlzQnVmZmVyIHx8IHN0dWJGYWxzZTtcblxuLyoqXG4gKiBQZXJmb3JtcyBhIGRlZXAgY29tcGFyaXNvbiBiZXR3ZWVuIHR3byB2YWx1ZXMgdG8gZGV0ZXJtaW5lIGlmIHRoZXkgYXJlXG4gKiBlcXVpdmFsZW50LlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBzdXBwb3J0cyBjb21wYXJpbmcgYXJyYXlzLCBhcnJheSBidWZmZXJzLCBib29sZWFucyxcbiAqIGRhdGUgb2JqZWN0cywgZXJyb3Igb2JqZWN0cywgbWFwcywgbnVtYmVycywgYE9iamVjdGAgb2JqZWN0cywgcmVnZXhlcyxcbiAqIHNldHMsIHN0cmluZ3MsIHN5bWJvbHMsIGFuZCB0eXBlZCBhcnJheXMuIGBPYmplY3RgIG9iamVjdHMgYXJlIGNvbXBhcmVkXG4gKiBieSB0aGVpciBvd24sIG5vdCBpbmhlcml0ZWQsIGVudW1lcmFibGUgcHJvcGVydGllcy4gRnVuY3Rpb25zIGFuZCBET01cbiAqIG5vZGVzIGFyZSBjb21wYXJlZCBieSBzdHJpY3QgZXF1YWxpdHksIGkuZS4gYD09PWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gKiB2YXIgb3RoZXIgPSB7ICdhJzogMSB9O1xuICpcbiAqIF8uaXNFcXVhbChvYmplY3QsIG90aGVyKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBvYmplY3QgPT09IG90aGVyO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNFcXVhbCh2YWx1ZSwgb3RoZXIpIHtcbiAgcmV0dXJuIGJhc2VJc0VxdWFsKHZhbHVlLCBvdGhlcik7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBGdW5jdGlvbmAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZnVuY3Rpb24sIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0Z1bmN0aW9uKF8pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNGdW5jdGlvbigvYWJjLyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3QodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vIFRoZSB1c2Ugb2YgYE9iamVjdCN0b1N0cmluZ2AgYXZvaWRzIGlzc3VlcyB3aXRoIHRoZSBgdHlwZW9mYCBvcGVyYXRvclxuICAvLyBpbiBTYWZhcmkgOSB3aGljaCByZXR1cm5zICdvYmplY3QnIGZvciB0eXBlZCBhcnJheXMgYW5kIG90aGVyIGNvbnN0cnVjdG9ycy5cbiAgdmFyIHRhZyA9IGJhc2VHZXRUYWcodmFsdWUpO1xuICByZXR1cm4gdGFnID09IGZ1bmNUYWcgfHwgdGFnID09IGdlblRhZyB8fCB0YWcgPT0gYXN5bmNUYWcgfHwgdGFnID09IHByb3h5VGFnO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBsZW5ndGguXG4gKlxuICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGxvb3NlbHkgYmFzZWQgb25cbiAqIFtgVG9MZW5ndGhgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10b2xlbmd0aCkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBsZW5ndGgsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0xlbmd0aCgzKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzTGVuZ3RoKE51bWJlci5NSU5fVkFMVUUpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzTGVuZ3RoKEluZmluaXR5KTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0xlbmd0aCgnMycpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNMZW5ndGgodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJlxuICAgIHZhbHVlID4gLTEgJiYgdmFsdWUgJSAxID09IDAgJiYgdmFsdWUgPD0gTUFYX1NBRkVfSU5URUdFUjtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyB0aGVcbiAqIFtsYW5ndWFnZSB0eXBlXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtZWNtYXNjcmlwdC1sYW5ndWFnZS10eXBlcylcbiAqIG9mIGBPYmplY3RgLiAoZS5nLiBhcnJheXMsIGZ1bmN0aW9ucywgb2JqZWN0cywgcmVnZXhlcywgYG5ldyBOdW1iZXIoMClgLCBhbmQgYG5ldyBTdHJpbmcoJycpYClcbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdCh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoXy5ub29wKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmICh0eXBlID09ICdvYmplY3QnIHx8IHR5cGUgPT0gJ2Z1bmN0aW9uJyk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UuIEEgdmFsdWUgaXMgb2JqZWN0LWxpa2UgaWYgaXQncyBub3QgYG51bGxgXG4gKiBhbmQgaGFzIGEgYHR5cGVvZmAgcmVzdWx0IG9mIFwib2JqZWN0XCIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdExpa2Uoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc09iamVjdExpa2UobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdExpa2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSB0eXBlZCBhcnJheS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDMuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHR5cGVkIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNUeXBlZEFycmF5KG5ldyBVaW50OEFycmF5KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzVHlwZWRBcnJheShbXSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNUeXBlZEFycmF5ID0gbm9kZUlzVHlwZWRBcnJheSA/IGJhc2VVbmFyeShub2RlSXNUeXBlZEFycmF5KSA6IGJhc2VJc1R5cGVkQXJyYXk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgYG9iamVjdGAuXG4gKlxuICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuIFNlZSB0aGVcbiAqIFtFUyBzcGVjXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3Qua2V5cylcbiAqIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogQHN0YXRpY1xuICogQHNpbmNlIDAuMS4wXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqIEBleGFtcGxlXG4gKlxuICogZnVuY3Rpb24gRm9vKCkge1xuICogICB0aGlzLmEgPSAxO1xuICogICB0aGlzLmIgPSAyO1xuICogfVxuICpcbiAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gKlxuICogXy5rZXlzKG5ldyBGb28pO1xuICogLy8gPT4gWydhJywgJ2InXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICpcbiAqIF8ua2V5cygnaGknKTtcbiAqIC8vID0+IFsnMCcsICcxJ11cbiAqL1xuZnVuY3Rpb24ga2V5cyhvYmplY3QpIHtcbiAgcmV0dXJuIGlzQXJyYXlMaWtlKG9iamVjdCkgPyBhcnJheUxpa2VLZXlzKG9iamVjdCkgOiBiYXNlS2V5cyhvYmplY3QpO1xufVxuXG4vKipcbiAqIFRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgZW1wdHkgYXJyYXkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjEzLjBcbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBlbXB0eSBhcnJheS5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIGFycmF5cyA9IF8udGltZXMoMiwgXy5zdHViQXJyYXkpO1xuICpcbiAqIGNvbnNvbGUubG9nKGFycmF5cyk7XG4gKiAvLyA9PiBbW10sIFtdXVxuICpcbiAqIGNvbnNvbGUubG9nKGFycmF5c1swXSA9PT0gYXJyYXlzWzFdKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIHN0dWJBcnJheSgpIHtcbiAgcmV0dXJuIFtdO1xufVxuXG4vKipcbiAqIFRoaXMgbWV0aG9kIHJldHVybnMgYGZhbHNlYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMTMuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udGltZXMoMiwgXy5zdHViRmFsc2UpO1xuICogLy8gPT4gW2ZhbHNlLCBmYWxzZV1cbiAqL1xuZnVuY3Rpb24gc3R1YkZhbHNlKCkge1xuICByZXR1cm4gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNFcXVhbDtcbiIsIihmdW5jdGlvbihyb290LCBmYWN0b3J5KSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJvb3QubmVhcmxleSA9IGZhY3RvcnkoKTtcbiAgICB9XG59KHRoaXMsIGZ1bmN0aW9uKCkge1xuXG4gICAgZnVuY3Rpb24gUnVsZShuYW1lLCBzeW1ib2xzLCBwb3N0cHJvY2Vzcykge1xuICAgICAgICB0aGlzLmlkID0gKytSdWxlLmhpZ2hlc3RJZDtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy5zeW1ib2xzID0gc3ltYm9sczsgICAgICAgIC8vIGEgbGlzdCBvZiBsaXRlcmFsIHwgcmVnZXggY2xhc3MgfCBub250ZXJtaW5hbFxuICAgICAgICB0aGlzLnBvc3Rwcm9jZXNzID0gcG9zdHByb2Nlc3M7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBSdWxlLmhpZ2hlc3RJZCA9IDA7XG5cbiAgICBSdWxlLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKHdpdGhDdXJzb3JBdCkge1xuICAgICAgICB2YXIgc3ltYm9sU2VxdWVuY2UgPSAodHlwZW9mIHdpdGhDdXJzb3JBdCA9PT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyB0aGlzLnN5bWJvbHMubWFwKGdldFN5bWJvbFNob3J0RGlzcGxheSkuam9pbignICcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogKCAgIHRoaXMuc3ltYm9scy5zbGljZSgwLCB3aXRoQ3Vyc29yQXQpLm1hcChnZXRTeW1ib2xTaG9ydERpc3BsYXkpLmpvaW4oJyAnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBcIiDil48gXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgdGhpcy5zeW1ib2xzLnNsaWNlKHdpdGhDdXJzb3JBdCkubWFwKGdldFN5bWJvbFNob3J0RGlzcGxheSkuam9pbignICcpICAgICApO1xuICAgICAgICByZXR1cm4gdGhpcy5uYW1lICsgXCIg4oaSIFwiICsgc3ltYm9sU2VxdWVuY2U7XG4gICAgfVxuXG5cbiAgICAvLyBhIFN0YXRlIGlzIGEgcnVsZSBhdCBhIHBvc2l0aW9uIGZyb20gYSBnaXZlbiBzdGFydGluZyBwb2ludCBpbiB0aGUgaW5wdXQgc3RyZWFtIChyZWZlcmVuY2UpXG4gICAgZnVuY3Rpb24gU3RhdGUocnVsZSwgZG90LCByZWZlcmVuY2UsIHdhbnRlZEJ5KSB7XG4gICAgICAgIHRoaXMucnVsZSA9IHJ1bGU7XG4gICAgICAgIHRoaXMuZG90ID0gZG90O1xuICAgICAgICB0aGlzLnJlZmVyZW5jZSA9IHJlZmVyZW5jZTtcbiAgICAgICAgdGhpcy5kYXRhID0gW107XG4gICAgICAgIHRoaXMud2FudGVkQnkgPSB3YW50ZWRCeTtcbiAgICAgICAgdGhpcy5pc0NvbXBsZXRlID0gdGhpcy5kb3QgPT09IHJ1bGUuc3ltYm9scy5sZW5ndGg7XG4gICAgfVxuXG4gICAgU3RhdGUucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBcIntcIiArIHRoaXMucnVsZS50b1N0cmluZyh0aGlzLmRvdCkgKyBcIn0sIGZyb206IFwiICsgKHRoaXMucmVmZXJlbmNlIHx8IDApO1xuICAgIH07XG5cbiAgICBTdGF0ZS5wcm90b3R5cGUubmV4dFN0YXRlID0gZnVuY3Rpb24oY2hpbGQpIHtcbiAgICAgICAgdmFyIHN0YXRlID0gbmV3IFN0YXRlKHRoaXMucnVsZSwgdGhpcy5kb3QgKyAxLCB0aGlzLnJlZmVyZW5jZSwgdGhpcy53YW50ZWRCeSk7XG4gICAgICAgIHN0YXRlLmxlZnQgPSB0aGlzO1xuICAgICAgICBzdGF0ZS5yaWdodCA9IGNoaWxkO1xuICAgICAgICBpZiAoc3RhdGUuaXNDb21wbGV0ZSkge1xuICAgICAgICAgICAgc3RhdGUuZGF0YSA9IHN0YXRlLmJ1aWxkKCk7XG4gICAgICAgICAgICAvLyBIYXZpbmcgcmlnaHQgc2V0IGhlcmUgd2lsbCBwcmV2ZW50IHRoZSByaWdodCBzdGF0ZSBhbmQgaXRzIGNoaWxkcmVuXG4gICAgICAgICAgICAvLyBmb3JtIGJlaW5nIGdhcmJhZ2UgY29sbGVjdGVkXG4gICAgICAgICAgICBzdGF0ZS5yaWdodCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgfTtcblxuICAgIFN0YXRlLnByb3RvdHlwZS5idWlsZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgY2hpbGRyZW4gPSBbXTtcbiAgICAgICAgdmFyIG5vZGUgPSB0aGlzO1xuICAgICAgICBkbyB7XG4gICAgICAgICAgICBjaGlsZHJlbi5wdXNoKG5vZGUucmlnaHQuZGF0YSk7XG4gICAgICAgICAgICBub2RlID0gbm9kZS5sZWZ0O1xuICAgICAgICB9IHdoaWxlIChub2RlLmxlZnQpO1xuICAgICAgICBjaGlsZHJlbi5yZXZlcnNlKCk7XG4gICAgICAgIHJldHVybiBjaGlsZHJlbjtcbiAgICB9O1xuXG4gICAgU3RhdGUucHJvdG90eXBlLmZpbmlzaCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5ydWxlLnBvc3Rwcm9jZXNzKSB7XG4gICAgICAgICAgICB0aGlzLmRhdGEgPSB0aGlzLnJ1bGUucG9zdHByb2Nlc3ModGhpcy5kYXRhLCB0aGlzLnJlZmVyZW5jZSwgUGFyc2VyLmZhaWwpO1xuICAgICAgICB9XG4gICAgfTtcblxuXG4gICAgZnVuY3Rpb24gQ29sdW1uKGdyYW1tYXIsIGluZGV4KSB7XG4gICAgICAgIHRoaXMuZ3JhbW1hciA9IGdyYW1tYXI7XG4gICAgICAgIHRoaXMuaW5kZXggPSBpbmRleDtcbiAgICAgICAgdGhpcy5zdGF0ZXMgPSBbXTtcbiAgICAgICAgdGhpcy53YW50cyA9IHt9OyAvLyBzdGF0ZXMgaW5kZXhlZCBieSB0aGUgbm9uLXRlcm1pbmFsIHRoZXkgZXhwZWN0XG4gICAgICAgIHRoaXMuc2Nhbm5hYmxlID0gW107IC8vIGxpc3Qgb2Ygc3RhdGVzIHRoYXQgZXhwZWN0IGEgdG9rZW5cbiAgICAgICAgdGhpcy5jb21wbGV0ZWQgPSB7fTsgLy8gc3RhdGVzIHRoYXQgYXJlIG51bGxhYmxlXG4gICAgfVxuXG5cbiAgICBDb2x1bW4ucHJvdG90eXBlLnByb2Nlc3MgPSBmdW5jdGlvbihuZXh0Q29sdW1uKSB7XG4gICAgICAgIHZhciBzdGF0ZXMgPSB0aGlzLnN0YXRlcztcbiAgICAgICAgdmFyIHdhbnRzID0gdGhpcy53YW50cztcbiAgICAgICAgdmFyIGNvbXBsZXRlZCA9IHRoaXMuY29tcGxldGVkO1xuXG4gICAgICAgIGZvciAodmFyIHcgPSAwOyB3IDwgc3RhdGVzLmxlbmd0aDsgdysrKSB7IC8vIG5iLiB3ZSBwdXNoKCkgZHVyaW5nIGl0ZXJhdGlvblxuICAgICAgICAgICAgdmFyIHN0YXRlID0gc3RhdGVzW3ddO1xuXG4gICAgICAgICAgICBpZiAoc3RhdGUuaXNDb21wbGV0ZSkge1xuICAgICAgICAgICAgICAgIHN0YXRlLmZpbmlzaCgpO1xuICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5kYXRhICE9PSBQYXJzZXIuZmFpbCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBjb21wbGV0ZVxuICAgICAgICAgICAgICAgICAgICB2YXIgd2FudGVkQnkgPSBzdGF0ZS53YW50ZWRCeTtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IHdhbnRlZEJ5Lmxlbmd0aDsgaS0tOyApIHsgLy8gdGhpcyBsaW5lIGlzIGhvdFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxlZnQgPSB3YW50ZWRCeVtpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29tcGxldGUobGVmdCwgc3RhdGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gc3BlY2lhbC1jYXNlIG51bGxhYmxlc1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGUucmVmZXJlbmNlID09PSB0aGlzLmluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBtYWtlIHN1cmUgZnV0dXJlIHByZWRpY3RvcnMgb2YgdGhpcyBydWxlIGdldCBjb21wbGV0ZWQuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXhwID0gc3RhdGUucnVsZS5uYW1lO1xuICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMuY29tcGxldGVkW2V4cF0gPSB0aGlzLmNvbXBsZXRlZFtleHBdIHx8IFtdKS5wdXNoKHN0YXRlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBxdWV1ZSBzY2FubmFibGUgc3RhdGVzXG4gICAgICAgICAgICAgICAgdmFyIGV4cCA9IHN0YXRlLnJ1bGUuc3ltYm9sc1tzdGF0ZS5kb3RdO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZXhwICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNjYW5uYWJsZS5wdXNoKHN0YXRlKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gcHJlZGljdFxuICAgICAgICAgICAgICAgIGlmICh3YW50c1tleHBdKSB7XG4gICAgICAgICAgICAgICAgICAgIHdhbnRzW2V4cF0ucHVzaChzdGF0ZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbXBsZXRlZC5oYXNPd25Qcm9wZXJ0eShleHApKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbnVsbHMgPSBjb21wbGV0ZWRbZXhwXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVsbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmlnaHQgPSBudWxsc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbXBsZXRlKHN0YXRlLCByaWdodCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB3YW50c1tleHBdID0gW3N0YXRlXTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcmVkaWN0KGV4cCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgQ29sdW1uLnByb3RvdHlwZS5wcmVkaWN0ID0gZnVuY3Rpb24oZXhwKSB7XG4gICAgICAgIHZhciBydWxlcyA9IHRoaXMuZ3JhbW1hci5ieU5hbWVbZXhwXSB8fCBbXTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJ1bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgciA9IHJ1bGVzW2ldO1xuICAgICAgICAgICAgdmFyIHdhbnRlZEJ5ID0gdGhpcy53YW50c1tleHBdO1xuICAgICAgICAgICAgdmFyIHMgPSBuZXcgU3RhdGUociwgMCwgdGhpcy5pbmRleCwgd2FudGVkQnkpO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZXMucHVzaChzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIENvbHVtbi5wcm90b3R5cGUuY29tcGxldGUgPSBmdW5jdGlvbihsZWZ0LCByaWdodCkge1xuICAgICAgICB2YXIgY29weSA9IGxlZnQubmV4dFN0YXRlKHJpZ2h0KTtcbiAgICAgICAgdGhpcy5zdGF0ZXMucHVzaChjb3B5KTtcbiAgICB9XG5cblxuICAgIGZ1bmN0aW9uIEdyYW1tYXIocnVsZXMsIHN0YXJ0KSB7XG4gICAgICAgIHRoaXMucnVsZXMgPSBydWxlcztcbiAgICAgICAgdGhpcy5zdGFydCA9IHN0YXJ0IHx8IHRoaXMucnVsZXNbMF0ubmFtZTtcbiAgICAgICAgdmFyIGJ5TmFtZSA9IHRoaXMuYnlOYW1lID0ge307XG4gICAgICAgIHRoaXMucnVsZXMuZm9yRWFjaChmdW5jdGlvbihydWxlKSB7XG4gICAgICAgICAgICBpZiAoIWJ5TmFtZS5oYXNPd25Qcm9wZXJ0eShydWxlLm5hbWUpKSB7XG4gICAgICAgICAgICAgICAgYnlOYW1lW3J1bGUubmFtZV0gPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJ5TmFtZVtydWxlLm5hbWVdLnB1c2gocnVsZSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIFNvIHdlIGNhbiBhbGxvdyBwYXNzaW5nIChydWxlcywgc3RhcnQpIGRpcmVjdGx5IHRvIFBhcnNlciBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcbiAgICBHcmFtbWFyLmZyb21Db21waWxlZCA9IGZ1bmN0aW9uKHJ1bGVzLCBzdGFydCkge1xuICAgICAgICB2YXIgbGV4ZXIgPSBydWxlcy5MZXhlcjtcbiAgICAgICAgaWYgKHJ1bGVzLlBhcnNlclN0YXJ0KSB7XG4gICAgICAgICAgc3RhcnQgPSBydWxlcy5QYXJzZXJTdGFydDtcbiAgICAgICAgICBydWxlcyA9IHJ1bGVzLlBhcnNlclJ1bGVzO1xuICAgICAgICB9XG4gICAgICAgIHZhciBydWxlcyA9IHJ1bGVzLm1hcChmdW5jdGlvbiAocikgeyByZXR1cm4gKG5ldyBSdWxlKHIubmFtZSwgci5zeW1ib2xzLCByLnBvc3Rwcm9jZXNzKSk7IH0pO1xuICAgICAgICB2YXIgZyA9IG5ldyBHcmFtbWFyKHJ1bGVzLCBzdGFydCk7XG4gICAgICAgIGcubGV4ZXIgPSBsZXhlcjsgLy8gbmIuIHN0b3JpbmcgbGV4ZXIgb24gR3JhbW1hciBpcyBpZmZ5LCBidXQgdW5hdm9pZGFibGVcbiAgICAgICAgcmV0dXJuIGc7XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBTdHJlYW1MZXhlcigpIHtcbiAgICAgIHRoaXMucmVzZXQoXCJcIik7XG4gICAgfVxuXG4gICAgU3RyZWFtTGV4ZXIucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24oZGF0YSwgc3RhdGUpIHtcbiAgICAgICAgdGhpcy5idWZmZXIgPSBkYXRhO1xuICAgICAgICB0aGlzLmluZGV4ID0gMDtcbiAgICAgICAgdGhpcy5saW5lID0gc3RhdGUgPyBzdGF0ZS5saW5lIDogMTtcbiAgICAgICAgdGhpcy5sYXN0TGluZUJyZWFrID0gc3RhdGUgPyAtc3RhdGUuY29sIDogMDtcbiAgICB9XG5cbiAgICBTdHJlYW1MZXhlci5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5pbmRleCA8IHRoaXMuYnVmZmVyLmxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIGNoID0gdGhpcy5idWZmZXJbdGhpcy5pbmRleCsrXTtcbiAgICAgICAgICAgIGlmIChjaCA9PT0gJ1xcbicpIHtcbiAgICAgICAgICAgICAgdGhpcy5saW5lICs9IDE7XG4gICAgICAgICAgICAgIHRoaXMubGFzdExpbmVCcmVhayA9IHRoaXMuaW5kZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4ge3ZhbHVlOiBjaH07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBTdHJlYW1MZXhlci5wcm90b3R5cGUuc2F2ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGluZTogdGhpcy5saW5lLFxuICAgICAgICBjb2w6IHRoaXMuaW5kZXggLSB0aGlzLmxhc3RMaW5lQnJlYWssXG4gICAgICB9XG4gICAgfVxuXG4gICAgU3RyZWFtTGV4ZXIucHJvdG90eXBlLmZvcm1hdEVycm9yID0gZnVuY3Rpb24odG9rZW4sIG1lc3NhZ2UpIHtcbiAgICAgICAgLy8gbmIuIHRoaXMgZ2V0cyBjYWxsZWQgYWZ0ZXIgY29uc3VtaW5nIHRoZSBvZmZlbmRpbmcgdG9rZW4sXG4gICAgICAgIC8vIHNvIHRoZSBjdWxwcml0IGlzIGluZGV4LTFcbiAgICAgICAgdmFyIGJ1ZmZlciA9IHRoaXMuYnVmZmVyO1xuICAgICAgICBpZiAodHlwZW9mIGJ1ZmZlciA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHZhciBsaW5lcyA9IGJ1ZmZlclxuICAgICAgICAgICAgICAgIC5zcGxpdChcIlxcblwiKVxuICAgICAgICAgICAgICAgIC5zbGljZShcbiAgICAgICAgICAgICAgICAgICAgTWF0aC5tYXgoMCwgdGhpcy5saW5lIC0gNSksIFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmxpbmVcbiAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICB2YXIgbmV4dExpbmVCcmVhayA9IGJ1ZmZlci5pbmRleE9mKCdcXG4nLCB0aGlzLmluZGV4KTtcbiAgICAgICAgICAgIGlmIChuZXh0TGluZUJyZWFrID09PSAtMSkgbmV4dExpbmVCcmVhayA9IGJ1ZmZlci5sZW5ndGg7XG4gICAgICAgICAgICB2YXIgY29sID0gdGhpcy5pbmRleCAtIHRoaXMubGFzdExpbmVCcmVhaztcbiAgICAgICAgICAgIHZhciBsYXN0TGluZURpZ2l0cyA9IFN0cmluZyh0aGlzLmxpbmUpLmxlbmd0aDtcbiAgICAgICAgICAgIG1lc3NhZ2UgKz0gXCIgYXQgbGluZSBcIiArIHRoaXMubGluZSArIFwiIGNvbCBcIiArIGNvbCArIFwiOlxcblxcblwiO1xuICAgICAgICAgICAgbWVzc2FnZSArPSBsaW5lc1xuICAgICAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24obGluZSwgaSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFkKHRoaXMubGluZSAtIGxpbmVzLmxlbmd0aCArIGkgKyAxLCBsYXN0TGluZURpZ2l0cykgKyBcIiBcIiArIGxpbmU7XG4gICAgICAgICAgICAgICAgfSwgdGhpcylcbiAgICAgICAgICAgICAgICAuam9pbihcIlxcblwiKTtcbiAgICAgICAgICAgIG1lc3NhZ2UgKz0gXCJcXG5cIiArIHBhZChcIlwiLCBsYXN0TGluZURpZ2l0cyArIGNvbCkgKyBcIl5cXG5cIjtcbiAgICAgICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG1lc3NhZ2UgKyBcIiBhdCBpbmRleCBcIiArICh0aGlzLmluZGV4IC0gMSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBwYWQobiwgbGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIgcyA9IFN0cmluZyhuKTtcbiAgICAgICAgICAgIHJldHVybiBBcnJheShsZW5ndGggLSBzLmxlbmd0aCArIDEpLmpvaW4oXCIgXCIpICsgcztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIFBhcnNlcihydWxlcywgc3RhcnQsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKHJ1bGVzIGluc3RhbmNlb2YgR3JhbW1hcikge1xuICAgICAgICAgICAgdmFyIGdyYW1tYXIgPSBydWxlcztcbiAgICAgICAgICAgIHZhciBvcHRpb25zID0gc3RhcnQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgZ3JhbW1hciA9IEdyYW1tYXIuZnJvbUNvbXBpbGVkKHJ1bGVzLCBzdGFydCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5ncmFtbWFyID0gZ3JhbW1hcjtcblxuICAgICAgICAvLyBSZWFkIG9wdGlvbnNcbiAgICAgICAgdGhpcy5vcHRpb25zID0ge1xuICAgICAgICAgICAga2VlcEhpc3Rvcnk6IGZhbHNlLFxuICAgICAgICAgICAgbGV4ZXI6IGdyYW1tYXIubGV4ZXIgfHwgbmV3IFN0cmVhbUxleGVyLFxuICAgICAgICB9O1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gKG9wdGlvbnMgfHwge30pKSB7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnNba2V5XSA9IG9wdGlvbnNba2V5XTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNldHVwIGxleGVyXG4gICAgICAgIHRoaXMubGV4ZXIgPSB0aGlzLm9wdGlvbnMubGV4ZXI7XG4gICAgICAgIHRoaXMubGV4ZXJTdGF0ZSA9IHVuZGVmaW5lZDtcblxuICAgICAgICAvLyBTZXR1cCBhIHRhYmxlXG4gICAgICAgIHZhciBjb2x1bW4gPSBuZXcgQ29sdW1uKGdyYW1tYXIsIDApO1xuICAgICAgICB2YXIgdGFibGUgPSB0aGlzLnRhYmxlID0gW2NvbHVtbl07XG5cbiAgICAgICAgLy8gSSBjb3VsZCBiZSBleHBlY3RpbmcgYW55dGhpbmcuXG4gICAgICAgIGNvbHVtbi53YW50c1tncmFtbWFyLnN0YXJ0XSA9IFtdO1xuICAgICAgICBjb2x1bW4ucHJlZGljdChncmFtbWFyLnN0YXJ0KTtcbiAgICAgICAgLy8gVE9ETyB3aGF0IGlmIHN0YXJ0IHJ1bGUgaXMgbnVsbGFibGU/XG4gICAgICAgIGNvbHVtbi5wcm9jZXNzKCk7XG4gICAgICAgIHRoaXMuY3VycmVudCA9IDA7IC8vIHRva2VuIGluZGV4XG4gICAgfVxuXG4gICAgLy8gY3JlYXRlIGEgcmVzZXJ2ZWQgdG9rZW4gZm9yIGluZGljYXRpbmcgYSBwYXJzZSBmYWlsXG4gICAgUGFyc2VyLmZhaWwgPSB7fTtcblxuICAgIFBhcnNlci5wcm90b3R5cGUuZmVlZCA9IGZ1bmN0aW9uKGNodW5rKSB7XG4gICAgICAgIHZhciBsZXhlciA9IHRoaXMubGV4ZXI7XG4gICAgICAgIGxleGVyLnJlc2V0KGNodW5rLCB0aGlzLmxleGVyU3RhdGUpO1xuXG4gICAgICAgIHZhciB0b2tlbjtcbiAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdG9rZW4gPSBsZXhlci5uZXh0KCk7XG4gICAgICAgICAgICAgICAgaWYgKCF0b2tlbikge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgLy8gQ3JlYXRlIHRoZSBuZXh0IGNvbHVtbiBzbyB0aGF0IHRoZSBlcnJvciByZXBvcnRlclxuICAgICAgICAgICAgICAgIC8vIGNhbiBkaXNwbGF5IHRoZSBjb3JyZWN0bHkgcHJlZGljdGVkIHN0YXRlcy5cbiAgICAgICAgICAgICAgICB2YXIgbmV4dENvbHVtbiA9IG5ldyBDb2x1bW4odGhpcy5ncmFtbWFyLCB0aGlzLmN1cnJlbnQgKyAxKTtcbiAgICAgICAgICAgICAgICB0aGlzLnRhYmxlLnB1c2gobmV4dENvbHVtbik7XG4gICAgICAgICAgICAgICAgdmFyIGVyciA9IG5ldyBFcnJvcih0aGlzLnJlcG9ydExleGVyRXJyb3IoZSkpO1xuICAgICAgICAgICAgICAgIGVyci5vZmZzZXQgPSB0aGlzLmN1cnJlbnQ7XG4gICAgICAgICAgICAgICAgZXJyLnRva2VuID0gZS50b2tlbjtcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBXZSBhZGQgbmV3IHN0YXRlcyB0byB0YWJsZVtjdXJyZW50KzFdXG4gICAgICAgICAgICB2YXIgY29sdW1uID0gdGhpcy50YWJsZVt0aGlzLmN1cnJlbnRdO1xuXG4gICAgICAgICAgICAvLyBHQyB1bnVzZWQgc3RhdGVzXG4gICAgICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5rZWVwSGlzdG9yeSkge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnRhYmxlW3RoaXMuY3VycmVudCAtIDFdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgbiA9IHRoaXMuY3VycmVudCArIDE7XG4gICAgICAgICAgICB2YXIgbmV4dENvbHVtbiA9IG5ldyBDb2x1bW4odGhpcy5ncmFtbWFyLCBuKTtcbiAgICAgICAgICAgIHRoaXMudGFibGUucHVzaChuZXh0Q29sdW1uKTtcblxuICAgICAgICAgICAgLy8gQWR2YW5jZSBhbGwgdG9rZW5zIHRoYXQgZXhwZWN0IHRoZSBzeW1ib2xcbiAgICAgICAgICAgIHZhciBsaXRlcmFsID0gdG9rZW4udGV4dCAhPT0gdW5kZWZpbmVkID8gdG9rZW4udGV4dCA6IHRva2VuLnZhbHVlO1xuICAgICAgICAgICAgdmFyIHZhbHVlID0gbGV4ZXIuY29uc3RydWN0b3IgPT09IFN0cmVhbUxleGVyID8gdG9rZW4udmFsdWUgOiB0b2tlbjtcbiAgICAgICAgICAgIHZhciBzY2FubmFibGUgPSBjb2x1bW4uc2Nhbm5hYmxlO1xuICAgICAgICAgICAgZm9yICh2YXIgdyA9IHNjYW5uYWJsZS5sZW5ndGg7IHctLTsgKSB7XG4gICAgICAgICAgICAgICAgdmFyIHN0YXRlID0gc2Nhbm5hYmxlW3ddO1xuICAgICAgICAgICAgICAgIHZhciBleHBlY3QgPSBzdGF0ZS5ydWxlLnN5bWJvbHNbc3RhdGUuZG90XTtcbiAgICAgICAgICAgICAgICAvLyBUcnkgdG8gY29uc3VtZSB0aGUgdG9rZW5cbiAgICAgICAgICAgICAgICAvLyBlaXRoZXIgcmVnZXggb3IgbGl0ZXJhbFxuICAgICAgICAgICAgICAgIGlmIChleHBlY3QudGVzdCA/IGV4cGVjdC50ZXN0KHZhbHVlKSA6XG4gICAgICAgICAgICAgICAgICAgIGV4cGVjdC50eXBlID8gZXhwZWN0LnR5cGUgPT09IHRva2VuLnR5cGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBleHBlY3QubGl0ZXJhbCA9PT0gbGl0ZXJhbCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBBZGQgaXRcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5leHQgPSBzdGF0ZS5uZXh0U3RhdGUoe2RhdGE6IHZhbHVlLCB0b2tlbjogdG9rZW4sIGlzVG9rZW46IHRydWUsIHJlZmVyZW5jZTogbiAtIDF9KTtcbiAgICAgICAgICAgICAgICAgICAgbmV4dENvbHVtbi5zdGF0ZXMucHVzaChuZXh0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIE5leHQsIGZvciBlYWNoIG9mIHRoZSBydWxlcywgd2UgZWl0aGVyXG4gICAgICAgICAgICAvLyAoYSkgY29tcGxldGUgaXQsIGFuZCB0cnkgdG8gc2VlIGlmIHRoZSByZWZlcmVuY2Ugcm93IGV4cGVjdGVkIHRoYXRcbiAgICAgICAgICAgIC8vICAgICBydWxlXG4gICAgICAgICAgICAvLyAoYikgcHJlZGljdCB0aGUgbmV4dCBub250ZXJtaW5hbCBpdCBleHBlY3RzIGJ5IGFkZGluZyB0aGF0XG4gICAgICAgICAgICAvLyAgICAgbm9udGVybWluYWwncyBzdGFydCBzdGF0ZVxuICAgICAgICAgICAgLy8gVG8gcHJldmVudCBkdXBsaWNhdGlvbiwgd2UgYWxzbyBrZWVwIHRyYWNrIG9mIHJ1bGVzIHdlIGhhdmUgYWxyZWFkeVxuICAgICAgICAgICAgLy8gYWRkZWRcblxuICAgICAgICAgICAgbmV4dENvbHVtbi5wcm9jZXNzKCk7XG5cbiAgICAgICAgICAgIC8vIElmIG5lZWRlZCwgdGhyb3cgYW4gZXJyb3I6XG4gICAgICAgICAgICBpZiAobmV4dENvbHVtbi5zdGF0ZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgLy8gTm8gc3RhdGVzIGF0IGFsbCEgVGhpcyBpcyBub3QgZ29vZC5cbiAgICAgICAgICAgICAgICB2YXIgZXJyID0gbmV3IEVycm9yKHRoaXMucmVwb3J0RXJyb3IodG9rZW4pKTtcbiAgICAgICAgICAgICAgICBlcnIub2Zmc2V0ID0gdGhpcy5jdXJyZW50O1xuICAgICAgICAgICAgICAgIGVyci50b2tlbiA9IHRva2VuO1xuICAgICAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gbWF5YmUgc2F2ZSBsZXhlciBzdGF0ZVxuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5rZWVwSGlzdG9yeSkge1xuICAgICAgICAgICAgICBjb2x1bW4ubGV4ZXJTdGF0ZSA9IGxleGVyLnNhdmUoKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnQrKztcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29sdW1uKSB7XG4gICAgICAgICAgdGhpcy5sZXhlclN0YXRlID0gbGV4ZXIuc2F2ZSgpXG4gICAgICAgIH1cblxuICAgICAgICAvLyBJbmNyZW1lbnRhbGx5IGtlZXAgdHJhY2sgb2YgcmVzdWx0c1xuICAgICAgICB0aGlzLnJlc3VsdHMgPSB0aGlzLmZpbmlzaCgpO1xuXG4gICAgICAgIC8vIEFsbG93IGNoYWluaW5nLCBmb3Igd2hhdGV2ZXIgaXQncyB3b3J0aFxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG4gICAgUGFyc2VyLnByb3RvdHlwZS5yZXBvcnRMZXhlckVycm9yID0gZnVuY3Rpb24obGV4ZXJFcnJvcikge1xuICAgICAgICB2YXIgdG9rZW5EaXNwbGF5LCBsZXhlck1lc3NhZ2U7XG4gICAgICAgIC8vIFBsYW5uaW5nIHRvIGFkZCBhIHRva2VuIHByb3BlcnR5IHRvIG1vbydzIHRocm93biBlcnJvclxuICAgICAgICAvLyBldmVuIG9uIGVycm9yaW5nIHRva2VucyB0byBiZSB1c2VkIGluIGVycm9yIGRpc3BsYXkgYmVsb3dcbiAgICAgICAgdmFyIHRva2VuID0gbGV4ZXJFcnJvci50b2tlbjtcbiAgICAgICAgaWYgKHRva2VuKSB7XG4gICAgICAgICAgICB0b2tlbkRpc3BsYXkgPSBcImlucHV0IFwiICsgSlNPTi5zdHJpbmdpZnkodG9rZW4udGV4dFswXSkgKyBcIiAobGV4ZXIgZXJyb3IpXCI7XG4gICAgICAgICAgICBsZXhlck1lc3NhZ2UgPSB0aGlzLmxleGVyLmZvcm1hdEVycm9yKHRva2VuLCBcIlN5bnRheCBlcnJvclwiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRva2VuRGlzcGxheSA9IFwiaW5wdXQgKGxleGVyIGVycm9yKVwiO1xuICAgICAgICAgICAgbGV4ZXJNZXNzYWdlID0gbGV4ZXJFcnJvci5tZXNzYWdlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnJlcG9ydEVycm9yQ29tbW9uKGxleGVyTWVzc2FnZSwgdG9rZW5EaXNwbGF5KTtcbiAgICB9O1xuXG4gICAgUGFyc2VyLnByb3RvdHlwZS5yZXBvcnRFcnJvciA9IGZ1bmN0aW9uKHRva2VuKSB7XG4gICAgICAgIHZhciB0b2tlbkRpc3BsYXkgPSAodG9rZW4udHlwZSA/IHRva2VuLnR5cGUgKyBcIiB0b2tlbjogXCIgOiBcIlwiKSArIEpTT04uc3RyaW5naWZ5KHRva2VuLnZhbHVlICE9PSB1bmRlZmluZWQgPyB0b2tlbi52YWx1ZSA6IHRva2VuKTtcbiAgICAgICAgdmFyIGxleGVyTWVzc2FnZSA9IHRoaXMubGV4ZXIuZm9ybWF0RXJyb3IodG9rZW4sIFwiU3ludGF4IGVycm9yXCIpO1xuICAgICAgICByZXR1cm4gdGhpcy5yZXBvcnRFcnJvckNvbW1vbihsZXhlck1lc3NhZ2UsIHRva2VuRGlzcGxheSk7XG4gICAgfTtcblxuICAgIFBhcnNlci5wcm90b3R5cGUucmVwb3J0RXJyb3JDb21tb24gPSBmdW5jdGlvbihsZXhlck1lc3NhZ2UsIHRva2VuRGlzcGxheSkge1xuICAgICAgICB2YXIgbGluZXMgPSBbXTtcbiAgICAgICAgbGluZXMucHVzaChsZXhlck1lc3NhZ2UpO1xuICAgICAgICB2YXIgbGFzdENvbHVtbkluZGV4ID0gdGhpcy50YWJsZS5sZW5ndGggLSAyO1xuICAgICAgICB2YXIgbGFzdENvbHVtbiA9IHRoaXMudGFibGVbbGFzdENvbHVtbkluZGV4XTtcbiAgICAgICAgdmFyIGV4cGVjdGFudFN0YXRlcyA9IGxhc3RDb2x1bW4uc3RhdGVzXG4gICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uKHN0YXRlKSB7XG4gICAgICAgICAgICAgICAgdmFyIG5leHRTeW1ib2wgPSBzdGF0ZS5ydWxlLnN5bWJvbHNbc3RhdGUuZG90XTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV4dFN5bWJvbCAmJiB0eXBlb2YgbmV4dFN5bWJvbCAhPT0gXCJzdHJpbmdcIjtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChleHBlY3RhbnRTdGF0ZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBsaW5lcy5wdXNoKCdVbmV4cGVjdGVkICcgKyB0b2tlbkRpc3BsYXkgKyAnLiBJIGRpZCBub3QgZXhwZWN0IGFueSBtb3JlIGlucHV0LiBIZXJlIGlzIHRoZSBzdGF0ZSBvZiBteSBwYXJzZSB0YWJsZTpcXG4nKTtcbiAgICAgICAgICAgIHRoaXMuZGlzcGxheVN0YXRlU3RhY2sobGFzdENvbHVtbi5zdGF0ZXMsIGxpbmVzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxpbmVzLnB1c2goJ1VuZXhwZWN0ZWQgJyArIHRva2VuRGlzcGxheSArICcuIEluc3RlYWQsIEkgd2FzIGV4cGVjdGluZyB0byBzZWUgb25lIG9mIHRoZSBmb2xsb3dpbmc6XFxuJyk7XG4gICAgICAgICAgICAvLyBEaXNwbGF5IGEgXCJzdGF0ZSBzdGFja1wiIGZvciBlYWNoIGV4cGVjdGFudCBzdGF0ZVxuICAgICAgICAgICAgLy8gLSB3aGljaCBzaG93cyB5b3UgaG93IHRoaXMgc3RhdGUgY2FtZSB0byBiZSwgc3RlcCBieSBzdGVwLlxuICAgICAgICAgICAgLy8gSWYgdGhlcmUgaXMgbW9yZSB0aGFuIG9uZSBkZXJpdmF0aW9uLCB3ZSBvbmx5IGRpc3BsYXkgdGhlIGZpcnN0IG9uZS5cbiAgICAgICAgICAgIHZhciBzdGF0ZVN0YWNrcyA9IGV4cGVjdGFudFN0YXRlc1xuICAgICAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24oc3RhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuYnVpbGRGaXJzdFN0YXRlU3RhY2soc3RhdGUsIFtdKSB8fCBbc3RhdGVdO1xuICAgICAgICAgICAgICAgIH0sIHRoaXMpO1xuICAgICAgICAgICAgLy8gRGlzcGxheSBlYWNoIHN0YXRlIHRoYXQgaXMgZXhwZWN0aW5nIGEgdGVybWluYWwgc3ltYm9sIG5leHQuXG4gICAgICAgICAgICBzdGF0ZVN0YWNrcy5mb3JFYWNoKGZ1bmN0aW9uKHN0YXRlU3RhY2spIHtcbiAgICAgICAgICAgICAgICB2YXIgc3RhdGUgPSBzdGF0ZVN0YWNrWzBdO1xuICAgICAgICAgICAgICAgIHZhciBuZXh0U3ltYm9sID0gc3RhdGUucnVsZS5zeW1ib2xzW3N0YXRlLmRvdF07XG4gICAgICAgICAgICAgICAgdmFyIHN5bWJvbERpc3BsYXkgPSB0aGlzLmdldFN5bWJvbERpc3BsYXkobmV4dFN5bWJvbCk7XG4gICAgICAgICAgICAgICAgbGluZXMucHVzaCgnQSAnICsgc3ltYm9sRGlzcGxheSArICcgYmFzZWQgb246Jyk7XG4gICAgICAgICAgICAgICAgdGhpcy5kaXNwbGF5U3RhdGVTdGFjayhzdGF0ZVN0YWNrLCBsaW5lcyk7XG4gICAgICAgICAgICB9LCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBsaW5lcy5wdXNoKFwiXCIpO1xuICAgICAgICByZXR1cm4gbGluZXMuam9pbihcIlxcblwiKTtcbiAgICB9XG4gICAgXG4gICAgUGFyc2VyLnByb3RvdHlwZS5kaXNwbGF5U3RhdGVTdGFjayA9IGZ1bmN0aW9uKHN0YXRlU3RhY2ssIGxpbmVzKSB7XG4gICAgICAgIHZhciBsYXN0RGlzcGxheTtcbiAgICAgICAgdmFyIHNhbWVEaXNwbGF5Q291bnQgPSAwO1xuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHN0YXRlU3RhY2subGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIHZhciBzdGF0ZSA9IHN0YXRlU3RhY2tbal07XG4gICAgICAgICAgICB2YXIgZGlzcGxheSA9IHN0YXRlLnJ1bGUudG9TdHJpbmcoc3RhdGUuZG90KTtcbiAgICAgICAgICAgIGlmIChkaXNwbGF5ID09PSBsYXN0RGlzcGxheSkge1xuICAgICAgICAgICAgICAgIHNhbWVEaXNwbGF5Q291bnQrKztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHNhbWVEaXNwbGF5Q291bnQgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGxpbmVzLnB1c2goJyAgICBeICcgKyBzYW1lRGlzcGxheUNvdW50ICsgJyBtb3JlIGxpbmVzIGlkZW50aWNhbCB0byB0aGlzJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNhbWVEaXNwbGF5Q291bnQgPSAwO1xuICAgICAgICAgICAgICAgIGxpbmVzLnB1c2goJyAgICAnICsgZGlzcGxheSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsYXN0RGlzcGxheSA9IGRpc3BsYXk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgUGFyc2VyLnByb3RvdHlwZS5nZXRTeW1ib2xEaXNwbGF5ID0gZnVuY3Rpb24oc3ltYm9sKSB7XG4gICAgICAgIHJldHVybiBnZXRTeW1ib2xMb25nRGlzcGxheShzeW1ib2wpO1xuICAgIH07XG5cbiAgICAvKlxuICAgIEJ1aWxkcyBhIHRoZSBmaXJzdCBzdGF0ZSBzdGFjay4gWW91IGNhbiB0aGluayBvZiBhIHN0YXRlIHN0YWNrIGFzIHRoZSBjYWxsIHN0YWNrXG4gICAgb2YgdGhlIHJlY3Vyc2l2ZS1kZXNjZW50IHBhcnNlciB3aGljaCB0aGUgTmVhcmxleSBwYXJzZSBhbGdvcml0aG0gc2ltdWxhdGVzLlxuICAgIEEgc3RhdGUgc3RhY2sgaXMgcmVwcmVzZW50ZWQgYXMgYW4gYXJyYXkgb2Ygc3RhdGUgb2JqZWN0cy4gV2l0aGluIGFcbiAgICBzdGF0ZSBzdGFjaywgdGhlIGZpcnN0IGl0ZW0gb2YgdGhlIGFycmF5IHdpbGwgYmUgdGhlIHN0YXJ0aW5nXG4gICAgc3RhdGUsIHdpdGggZWFjaCBzdWNjZXNzaXZlIGl0ZW0gaW4gdGhlIGFycmF5IGdvaW5nIGZ1cnRoZXIgYmFjayBpbnRvIGhpc3RvcnkuXG5cbiAgICBUaGlzIGZ1bmN0aW9uIG5lZWRzIHRvIGJlIGdpdmVuIGEgc3RhcnRpbmcgc3RhdGUgYW5kIGFuIGVtcHR5IGFycmF5IHJlcHJlc2VudGluZ1xuICAgIHRoZSB2aXNpdGVkIHN0YXRlcywgYW5kIGl0IHJldHVybnMgYW4gc2luZ2xlIHN0YXRlIHN0YWNrLlxuXG4gICAgKi9cbiAgICBQYXJzZXIucHJvdG90eXBlLmJ1aWxkRmlyc3RTdGF0ZVN0YWNrID0gZnVuY3Rpb24oc3RhdGUsIHZpc2l0ZWQpIHtcbiAgICAgICAgaWYgKHZpc2l0ZWQuaW5kZXhPZihzdGF0ZSkgIT09IC0xKSB7XG4gICAgICAgICAgICAvLyBGb3VuZCBjeWNsZSwgcmV0dXJuIG51bGxcbiAgICAgICAgICAgIC8vIHRvIGVsaW1pbmF0ZSB0aGlzIHBhdGggZnJvbSB0aGUgcmVzdWx0cywgYmVjYXVzZVxuICAgICAgICAgICAgLy8gd2UgZG9uJ3Qga25vdyBob3cgdG8gZGlzcGxheSBpdCBtZWFuaW5nZnVsbHlcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdGF0ZS53YW50ZWRCeS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBbc3RhdGVdO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwcmV2U3RhdGUgPSBzdGF0ZS53YW50ZWRCeVswXTtcbiAgICAgICAgdmFyIGNoaWxkVmlzaXRlZCA9IFtzdGF0ZV0uY29uY2F0KHZpc2l0ZWQpO1xuICAgICAgICB2YXIgY2hpbGRSZXN1bHQgPSB0aGlzLmJ1aWxkRmlyc3RTdGF0ZVN0YWNrKHByZXZTdGF0ZSwgY2hpbGRWaXNpdGVkKTtcbiAgICAgICAgaWYgKGNoaWxkUmVzdWx0ID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW3N0YXRlXS5jb25jYXQoY2hpbGRSZXN1bHQpO1xuICAgIH07XG5cbiAgICBQYXJzZXIucHJvdG90eXBlLnNhdmUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGNvbHVtbiA9IHRoaXMudGFibGVbdGhpcy5jdXJyZW50XTtcbiAgICAgICAgY29sdW1uLmxleGVyU3RhdGUgPSB0aGlzLmxleGVyU3RhdGU7XG4gICAgICAgIHJldHVybiBjb2x1bW47XG4gICAgfTtcblxuICAgIFBhcnNlci5wcm90b3R5cGUucmVzdG9yZSA9IGZ1bmN0aW9uKGNvbHVtbikge1xuICAgICAgICB2YXIgaW5kZXggPSBjb2x1bW4uaW5kZXg7XG4gICAgICAgIHRoaXMuY3VycmVudCA9IGluZGV4O1xuICAgICAgICB0aGlzLnRhYmxlW2luZGV4XSA9IGNvbHVtbjtcbiAgICAgICAgdGhpcy50YWJsZS5zcGxpY2UoaW5kZXggKyAxKTtcbiAgICAgICAgdGhpcy5sZXhlclN0YXRlID0gY29sdW1uLmxleGVyU3RhdGU7XG5cbiAgICAgICAgLy8gSW5jcmVtZW50YWxseSBrZWVwIHRyYWNrIG9mIHJlc3VsdHNcbiAgICAgICAgdGhpcy5yZXN1bHRzID0gdGhpcy5maW5pc2goKTtcbiAgICB9O1xuXG4gICAgLy8gbmIuIGRlcHJlY2F0ZWQ6IHVzZSBzYXZlL3Jlc3RvcmUgaW5zdGVhZCFcbiAgICBQYXJzZXIucHJvdG90eXBlLnJld2luZCA9IGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICAgIGlmICghdGhpcy5vcHRpb25zLmtlZXBIaXN0b3J5KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldCBvcHRpb24gYGtlZXBIaXN0b3J5YCB0byBlbmFibGUgcmV3aW5kaW5nJylcbiAgICAgICAgfVxuICAgICAgICAvLyBuYi4gcmVjYWxsIGNvbHVtbiAodGFibGUpIGluZGljaWVzIGZhbGwgYmV0d2VlbiB0b2tlbiBpbmRpY2llcy5cbiAgICAgICAgLy8gICAgICAgIGNvbCAwICAgLS0gICB0b2tlbiAwICAgLS0gICBjb2wgMVxuICAgICAgICB0aGlzLnJlc3RvcmUodGhpcy50YWJsZVtpbmRleF0pO1xuICAgIH07XG5cbiAgICBQYXJzZXIucHJvdG90eXBlLmZpbmlzaCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBSZXR1cm4gdGhlIHBvc3NpYmxlIHBhcnNpbmdzXG4gICAgICAgIHZhciBjb25zaWRlcmF0aW9ucyA9IFtdO1xuICAgICAgICB2YXIgc3RhcnQgPSB0aGlzLmdyYW1tYXIuc3RhcnQ7XG4gICAgICAgIHZhciBjb2x1bW4gPSB0aGlzLnRhYmxlW3RoaXMudGFibGUubGVuZ3RoIC0gMV1cbiAgICAgICAgY29sdW1uLnN0YXRlcy5mb3JFYWNoKGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICBpZiAodC5ydWxlLm5hbWUgPT09IHN0YXJ0XG4gICAgICAgICAgICAgICAgICAgICYmIHQuZG90ID09PSB0LnJ1bGUuc3ltYm9scy5sZW5ndGhcbiAgICAgICAgICAgICAgICAgICAgJiYgdC5yZWZlcmVuY2UgPT09IDBcbiAgICAgICAgICAgICAgICAgICAgJiYgdC5kYXRhICE9PSBQYXJzZXIuZmFpbCkge1xuICAgICAgICAgICAgICAgIGNvbnNpZGVyYXRpb25zLnB1c2godCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gY29uc2lkZXJhdGlvbnMubWFwKGZ1bmN0aW9uKGMpIHtyZXR1cm4gYy5kYXRhOyB9KTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gZ2V0U3ltYm9sTG9uZ0Rpc3BsYXkoc3ltYm9sKSB7XG4gICAgICAgIHZhciB0eXBlID0gdHlwZW9mIHN5bWJvbDtcbiAgICAgICAgaWYgKHR5cGUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBzeW1ib2w7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgaWYgKHN5bWJvbC5saXRlcmFsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHN5bWJvbC5saXRlcmFsKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3ltYm9sIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdjaGFyYWN0ZXIgbWF0Y2hpbmcgJyArIHN5bWJvbDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3ltYm9sLnR5cGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3ltYm9sLnR5cGUgKyAnIHRva2VuJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3ltYm9sLnRlc3QpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3Rva2VuIG1hdGNoaW5nICcgKyBTdHJpbmcoc3ltYm9sLnRlc3QpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gc3ltYm9sIHR5cGU6ICcgKyBzeW1ib2wpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U3ltYm9sU2hvcnREaXNwbGF5KHN5bWJvbCkge1xuICAgICAgICB2YXIgdHlwZSA9IHR5cGVvZiBzeW1ib2w7XG4gICAgICAgIGlmICh0eXBlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICByZXR1cm4gc3ltYm9sO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgIGlmIChzeW1ib2wubGl0ZXJhbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShzeW1ib2wubGl0ZXJhbCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHN5bWJvbCBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzeW1ib2wudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3ltYm9sLnR5cGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJyUnICsgc3ltYm9sLnR5cGU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHN5bWJvbC50ZXN0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICc8JyArIFN0cmluZyhzeW1ib2wudGVzdCkgKyAnPic7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBzeW1ib2wgdHlwZTogJyArIHN5bWJvbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBQYXJzZXI6IFBhcnNlcixcbiAgICAgICAgR3JhbW1hcjogR3JhbW1hcixcbiAgICAgICAgUnVsZTogUnVsZSxcbiAgICB9O1xuXG59KSk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2VuZXJhdGUgPSBleHBvcnRzLmNvbXBpbGUgPSB2b2lkIDA7XG52YXIgYm9vbGJhc2VfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiYm9vbGJhc2VcIikpO1xuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBjaGVja3MgaWYgYW4gZWxlbWVudHMgaW5kZXggbWF0Y2hlcyB0aGUgZ2l2ZW4gcnVsZVxuICogaGlnaGx5IG9wdGltaXplZCB0byByZXR1cm4gdGhlIGZhc3Rlc3Qgc29sdXRpb24uXG4gKlxuICogQHBhcmFtIHBhcnNlZCBBIHR1cGxlIFthLCBiXSwgYXMgcmV0dXJuZWQgYnkgYHBhcnNlYC5cbiAqIEByZXR1cm5zIEEgaGlnaGx5IG9wdGltaXplZCBmdW5jdGlvbiB0aGF0IHJldHVybnMgd2hldGhlciBhbiBpbmRleCBtYXRjaGVzIHRoZSBudGgtY2hlY2suXG4gKiBAZXhhbXBsZVxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBjaGVjayA9IG50aENoZWNrLmNvbXBpbGUoWzIsIDNdKTtcbiAqXG4gKiBjaGVjaygwKTsgLy8gYGZhbHNlYFxuICogY2hlY2soMSk7IC8vIGBmYWxzZWBcbiAqIGNoZWNrKDIpOyAvLyBgdHJ1ZWBcbiAqIGNoZWNrKDMpOyAvLyBgZmFsc2VgXG4gKiBjaGVjayg0KTsgLy8gYHRydWVgXG4gKiBjaGVjayg1KTsgLy8gYGZhbHNlYFxuICogY2hlY2soNik7IC8vIGB0cnVlYFxuICogYGBgXG4gKi9cbmZ1bmN0aW9uIGNvbXBpbGUocGFyc2VkKSB7XG4gICAgdmFyIGEgPSBwYXJzZWRbMF07XG4gICAgLy8gU3VidHJhY3QgMSBmcm9tIGBiYCwgdG8gY29udmVydCBmcm9tIG9uZS0gdG8gemVyby1pbmRleGVkLlxuICAgIHZhciBiID0gcGFyc2VkWzFdIC0gMTtcbiAgICAvKlxuICAgICAqIFdoZW4gYGIgPD0gMGAsIGBhICogbmAgd29uJ3QgYmUgbGVhZCB0byBhbnkgbWF0Y2hlcyBmb3IgYGEgPCAwYC5cbiAgICAgKiBCZXNpZGVzLCB0aGUgc3BlY2lmaWNhdGlvbiBzdGF0ZXMgdGhhdCBubyBlbGVtZW50cyBhcmVcbiAgICAgKiBtYXRjaGVkIHdoZW4gYGFgIGFuZCBgYmAgYXJlIDAuXG4gICAgICpcbiAgICAgKiBgYiA8IDBgIGhlcmUgYXMgd2Ugc3VidHJhY3RlZCAxIGZyb20gYGJgIGFib3ZlLlxuICAgICAqL1xuICAgIGlmIChiIDwgMCAmJiBhIDw9IDApXG4gICAgICAgIHJldHVybiBib29sYmFzZV8xLmRlZmF1bHQuZmFsc2VGdW5jO1xuICAgIC8vIFdoZW4gYGFgIGlzIGluIHRoZSByYW5nZSAtMS4uMSwgaXQgbWF0Y2hlcyBhbnkgZWxlbWVudCAoc28gb25seSBgYmAgaXMgY2hlY2tlZCkuXG4gICAgaWYgKGEgPT09IC0xKVxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGluZGV4KSB7IHJldHVybiBpbmRleCA8PSBiOyB9O1xuICAgIGlmIChhID09PSAwKVxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGluZGV4KSB7IHJldHVybiBpbmRleCA9PT0gYjsgfTtcbiAgICAvLyBXaGVuIGBiIDw9IDBgIGFuZCBgYSA9PT0gMWAsIHRoZXkgbWF0Y2ggYW55IGVsZW1lbnQuXG4gICAgaWYgKGEgPT09IDEpXG4gICAgICAgIHJldHVybiBiIDwgMCA/IGJvb2xiYXNlXzEuZGVmYXVsdC50cnVlRnVuYyA6IGZ1bmN0aW9uIChpbmRleCkgeyByZXR1cm4gaW5kZXggPj0gYjsgfTtcbiAgICAvKlxuICAgICAqIE90aGVyd2lzZSwgbW9kdWxvIGNhbiBiZSB1c2VkIHRvIGNoZWNrIGlmIHRoZXJlIGlzIGEgbWF0Y2guXG4gICAgICpcbiAgICAgKiBNb2R1bG8gZG9lc24ndCBjYXJlIGFib3V0IHRoZSBzaWduLCBzbyBsZXQncyB1c2UgYGFgcyBhYnNvbHV0ZSB2YWx1ZS5cbiAgICAgKi9cbiAgICB2YXIgYWJzQSA9IE1hdGguYWJzKGEpO1xuICAgIC8vIEdldCBgYiBtb2QgYWAsICsgYSBpZiB0aGlzIGlzIG5lZ2F0aXZlLlxuICAgIHZhciBiTW9kID0gKChiICUgYWJzQSkgKyBhYnNBKSAlIGFic0E7XG4gICAgcmV0dXJuIGEgPiAxXG4gICAgICAgID8gZnVuY3Rpb24gKGluZGV4KSB7IHJldHVybiBpbmRleCA+PSBiICYmIGluZGV4ICUgYWJzQSA9PT0gYk1vZDsgfVxuICAgICAgICA6IGZ1bmN0aW9uIChpbmRleCkgeyByZXR1cm4gaW5kZXggPD0gYiAmJiBpbmRleCAlIGFic0EgPT09IGJNb2Q7IH07XG59XG5leHBvcnRzLmNvbXBpbGUgPSBjb21waWxlO1xuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBwcm9kdWNlcyBhIG1vbm90b25vdXNseSBpbmNyZWFzaW5nIHNlcXVlbmNlIG9mIGluZGljZXMuXG4gKlxuICogSWYgdGhlIHNlcXVlbmNlIGhhcyBhbiBlbmQsIHRoZSByZXR1cm5lZCBmdW5jdGlvbiB3aWxsIHJldHVybiBgbnVsbGAgYWZ0ZXJcbiAqIHRoZSBsYXN0IGluZGV4IGluIHRoZSBzZXF1ZW5jZS5cbiAqXG4gKiBAcGFyYW0gcGFyc2VkIEEgdHVwbGUgW2EsIGJdLCBhcyByZXR1cm5lZCBieSBgcGFyc2VgLlxuICogQHJldHVybnMgQSBmdW5jdGlvbiB0aGF0IHByb2R1Y2VzIGEgc2VxdWVuY2Ugb2YgaW5kaWNlcy5cbiAqIEBleGFtcGxlIDxjYXB0aW9uPkFsd2F5cyBpbmNyZWFzaW5nICgybiszKTwvY2FwdGlvbj5cbiAqXG4gKiBgYGBqc1xuICogY29uc3QgZ2VuID0gbnRoQ2hlY2suZ2VuZXJhdGUoWzIsIDNdKVxuICpcbiAqIGdlbigpIC8vIGAxYFxuICogZ2VuKCkgLy8gYDNgXG4gKiBnZW4oKSAvLyBgNWBcbiAqIGdlbigpIC8vIGA4YFxuICogZ2VuKCkgLy8gYDExYFxuICogYGBgXG4gKlxuICogQGV4YW1wbGUgPGNhcHRpb24+V2l0aCBlbmQgdmFsdWUgKC0ybisxMCk8L2NhcHRpb24+XG4gKlxuICogYGBganNcbiAqXG4gKiBjb25zdCBnZW4gPSBudGhDaGVjay5nZW5lcmF0ZShbLTIsIDVdKTtcbiAqXG4gKiBnZW4oKSAvLyAwXG4gKiBnZW4oKSAvLyAyXG4gKiBnZW4oKSAvLyA0XG4gKiBnZW4oKSAvLyBudWxsXG4gKiBgYGBcbiAqL1xuZnVuY3Rpb24gZ2VuZXJhdGUocGFyc2VkKSB7XG4gICAgdmFyIGEgPSBwYXJzZWRbMF07XG4gICAgLy8gU3VidHJhY3QgMSBmcm9tIGBiYCwgdG8gY29udmVydCBmcm9tIG9uZS0gdG8gemVyby1pbmRleGVkLlxuICAgIHZhciBiID0gcGFyc2VkWzFdIC0gMTtcbiAgICB2YXIgbiA9IDA7XG4gICAgLy8gTWFrZSBzdXJlIHRvIGFsd2F5cyByZXR1cm4gYW4gaW5jcmVhc2luZyBzZXF1ZW5jZVxuICAgIGlmIChhIDwgMCkge1xuICAgICAgICB2YXIgYVBvc18xID0gLWE7XG4gICAgICAgIC8vIEdldCBgYiBtb2QgYWBcbiAgICAgICAgdmFyIG1pblZhbHVlXzEgPSAoKGIgJSBhUG9zXzEpICsgYVBvc18xKSAlIGFQb3NfMTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciB2YWwgPSBtaW5WYWx1ZV8xICsgYVBvc18xICogbisrO1xuICAgICAgICAgICAgcmV0dXJuIHZhbCA+IGIgPyBudWxsIDogdmFsO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBpZiAoYSA9PT0gMClcbiAgICAgICAgcmV0dXJuIGIgPCAwXG4gICAgICAgICAgICA/IC8vIFRoZXJlIGFyZSBubyByZXN1bHQg4oCUIGFsd2F5cyByZXR1cm4gYG51bGxgXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKCkgeyByZXR1cm4gbnVsbDsgfVxuICAgICAgICAgICAgOiAvLyBSZXR1cm4gYGJgIGV4YWN0bHkgb25jZVxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uICgpIHsgcmV0dXJuIChuKysgPT09IDAgPyBiIDogbnVsbCk7IH07XG4gICAgaWYgKGIgPCAwKSB7XG4gICAgICAgIGIgKz0gYSAqIE1hdGguY2VpbCgtYiAvIGEpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gYSAqIG4rKyArIGI7IH07XG59XG5leHBvcnRzLmdlbmVyYXRlID0gZ2VuZXJhdGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21waWxlLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zZXF1ZW5jZSA9IGV4cG9ydHMuZ2VuZXJhdGUgPSBleHBvcnRzLmNvbXBpbGUgPSBleHBvcnRzLnBhcnNlID0gdm9pZCAwO1xudmFyIHBhcnNlX2pzXzEgPSByZXF1aXJlKFwiLi9wYXJzZS5qc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInBhcnNlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwYXJzZV9qc18xLnBhcnNlOyB9IH0pO1xudmFyIGNvbXBpbGVfanNfMSA9IHJlcXVpcmUoXCIuL2NvbXBpbGUuanNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjb21waWxlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb21waWxlX2pzXzEuY29tcGlsZTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImdlbmVyYXRlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb21waWxlX2pzXzEuZ2VuZXJhdGU7IH0gfSk7XG4vKipcbiAqIFBhcnNlcyBhbmQgY29tcGlsZXMgYSBmb3JtdWxhIHRvIGEgaGlnaGx5IG9wdGltaXplZCBmdW5jdGlvbi5cbiAqIENvbWJpbmF0aW9uIG9mIHtAbGluayBwYXJzZX0gYW5kIHtAbGluayBjb21waWxlfS5cbiAqXG4gKiBJZiB0aGUgZm9ybXVsYSBkb2Vzbid0IG1hdGNoIGFueSBlbGVtZW50cyxcbiAqIGl0IHJldHVybnMgW2Bib29sYmFzZWBdKGh0dHBzOi8vZ2l0aHViLmNvbS9mYjU1L2Jvb2xiYXNlKSdzIGBmYWxzZUZ1bmNgLlxuICogT3RoZXJ3aXNlLCBhIGZ1bmN0aW9uIGFjY2VwdGluZyBhbiBfaW5kZXhfIGlzIHJldHVybmVkLCB3aGljaCByZXR1cm5zXG4gKiB3aGV0aGVyIG9yIG5vdCB0aGUgcGFzc2VkIF9pbmRleF8gbWF0Y2hlcyB0aGUgZm9ybXVsYS5cbiAqXG4gKiBOb3RlOiBUaGUgbnRoLXJ1bGUgc3RhcnRzIGNvdW50aW5nIGF0IGAxYCwgdGhlIHJldHVybmVkIGZ1bmN0aW9uIGF0IGAwYC5cbiAqXG4gKiBAcGFyYW0gZm9ybXVsYSBUaGUgZm9ybXVsYSB0byBjb21waWxlLlxuICogQGV4YW1wbGVcbiAqIGNvbnN0IGNoZWNrID0gbnRoQ2hlY2soXCIybiszXCIpO1xuICpcbiAqIGNoZWNrKDApOyAvLyBgZmFsc2VgXG4gKiBjaGVjaygxKTsgLy8gYGZhbHNlYFxuICogY2hlY2soMik7IC8vIGB0cnVlYFxuICogY2hlY2soMyk7IC8vIGBmYWxzZWBcbiAqIGNoZWNrKDQpOyAvLyBgdHJ1ZWBcbiAqIGNoZWNrKDUpOyAvLyBgZmFsc2VgXG4gKiBjaGVjayg2KTsgLy8gYHRydWVgXG4gKi9cbmZ1bmN0aW9uIG50aENoZWNrKGZvcm11bGEpIHtcbiAgICByZXR1cm4gKDAsIGNvbXBpbGVfanNfMS5jb21waWxlKSgoMCwgcGFyc2VfanNfMS5wYXJzZSkoZm9ybXVsYSkpO1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gbnRoQ2hlY2s7XG4vKipcbiAqIFBhcnNlcyBhbmQgY29tcGlsZXMgYSBmb3JtdWxhIHRvIGEgZ2VuZXJhdG9yIHRoYXQgcHJvZHVjZXMgYSBzZXF1ZW5jZSBvZiBpbmRpY2VzLlxuICogQ29tYmluYXRpb24gb2Yge0BsaW5rIHBhcnNlfSBhbmQge0BsaW5rIGdlbmVyYXRlfS5cbiAqXG4gKiBAcGFyYW0gZm9ybXVsYSBUaGUgZm9ybXVsYSB0byBjb21waWxlLlxuICogQHJldHVybnMgQSBmdW5jdGlvbiB0aGF0IHByb2R1Y2VzIGEgc2VxdWVuY2Ugb2YgaW5kaWNlcy5cbiAqIEBleGFtcGxlIDxjYXB0aW9uPkFsd2F5cyBpbmNyZWFzaW5nPC9jYXB0aW9uPlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBnZW4gPSBudGhDaGVjay5zZXF1ZW5jZSgnMm4rMycpXG4gKlxuICogZ2VuKCkgLy8gYDFgXG4gKiBnZW4oKSAvLyBgM2BcbiAqIGdlbigpIC8vIGA1YFxuICogZ2VuKCkgLy8gYDhgXG4gKiBnZW4oKSAvLyBgMTFgXG4gKiBgYGBcbiAqXG4gKiBAZXhhbXBsZSA8Y2FwdGlvbj5XaXRoIGVuZCB2YWx1ZTwvY2FwdGlvbj5cbiAqXG4gKiBgYGBqc1xuICpcbiAqIGNvbnN0IGdlbiA9IG50aENoZWNrLnNlcXVlbmNlKCctMm4rNScpO1xuICpcbiAqIGdlbigpIC8vIDBcbiAqIGdlbigpIC8vIDJcbiAqIGdlbigpIC8vIDRcbiAqIGdlbigpIC8vIG51bGxcbiAqIGBgYFxuICovXG5mdW5jdGlvbiBzZXF1ZW5jZShmb3JtdWxhKSB7XG4gICAgcmV0dXJuICgwLCBjb21waWxlX2pzXzEuZ2VuZXJhdGUpKCgwLCBwYXJzZV9qc18xLnBhcnNlKShmb3JtdWxhKSk7XG59XG5leHBvcnRzLnNlcXVlbmNlID0gc2VxdWVuY2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbi8vIEZvbGxvd2luZyBodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLXNlbGVjdG9ycy8jbnRoLWNoaWxkLXBzZXVkb1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5wYXJzZSA9IHZvaWQgMDtcbi8vIFdoaXRlc3BhY2UgYXMgcGVyIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMtMy8jbGV4IGlzIFwiIFxcdFxcclxcblxcZlwiXG52YXIgd2hpdGVzcGFjZSA9IG5ldyBTZXQoWzksIDEwLCAxMiwgMTMsIDMyXSk7XG52YXIgWkVSTyA9IFwiMFwiLmNoYXJDb2RlQXQoMCk7XG52YXIgTklORSA9IFwiOVwiLmNoYXJDb2RlQXQoMCk7XG4vKipcbiAqIFBhcnNlcyBhbiBleHByZXNzaW9uLlxuICpcbiAqIEB0aHJvd3MgQW4gYEVycm9yYCBpZiBwYXJzaW5nIGZhaWxzLlxuICogQHJldHVybnMgQW4gYXJyYXkgY29udGFpbmluZyB0aGUgaW50ZWdlciBzdGVwIHNpemUgYW5kIHRoZSBpbnRlZ2VyIG9mZnNldCBvZiB0aGUgbnRoIHJ1bGUuXG4gKiBAZXhhbXBsZSBudGhDaGVjay5wYXJzZShcIjJuKzNcIik7IC8vIHJldHVybnMgWzIsIDNdXG4gKi9cbmZ1bmN0aW9uIHBhcnNlKGZvcm11bGEpIHtcbiAgICBmb3JtdWxhID0gZm9ybXVsYS50cmltKCkudG9Mb3dlckNhc2UoKTtcbiAgICBpZiAoZm9ybXVsYSA9PT0gXCJldmVuXCIpIHtcbiAgICAgICAgcmV0dXJuIFsyLCAwXTtcbiAgICB9XG4gICAgZWxzZSBpZiAoZm9ybXVsYSA9PT0gXCJvZGRcIikge1xuICAgICAgICByZXR1cm4gWzIsIDFdO1xuICAgIH1cbiAgICAvLyBQYXJzZSBbIFsnLSd8JysnXT8gSU5URUdFUj8ge059IFsgUyogWyctJ3wnKyddIFMqIElOVEVHRVIgXT9cbiAgICB2YXIgaWR4ID0gMDtcbiAgICB2YXIgYSA9IDA7XG4gICAgdmFyIHNpZ24gPSByZWFkU2lnbigpO1xuICAgIHZhciBudW1iZXIgPSByZWFkTnVtYmVyKCk7XG4gICAgaWYgKGlkeCA8IGZvcm11bGEubGVuZ3RoICYmIGZvcm11bGEuY2hhckF0KGlkeCkgPT09IFwiblwiKSB7XG4gICAgICAgIGlkeCsrO1xuICAgICAgICBhID0gc2lnbiAqIChudW1iZXIgIT09IG51bGwgJiYgbnVtYmVyICE9PSB2b2lkIDAgPyBudW1iZXIgOiAxKTtcbiAgICAgICAgc2tpcFdoaXRlc3BhY2UoKTtcbiAgICAgICAgaWYgKGlkeCA8IGZvcm11bGEubGVuZ3RoKSB7XG4gICAgICAgICAgICBzaWduID0gcmVhZFNpZ24oKTtcbiAgICAgICAgICAgIHNraXBXaGl0ZXNwYWNlKCk7XG4gICAgICAgICAgICBudW1iZXIgPSByZWFkTnVtYmVyKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzaWduID0gbnVtYmVyID0gMDtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBUaHJvdyBpZiB0aGVyZSBpcyBhbnl0aGluZyBlbHNlXG4gICAgaWYgKG51bWJlciA9PT0gbnVsbCB8fCBpZHggPCBmb3JtdWxhLmxlbmd0aCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJuLXRoIHJ1bGUgY291bGRuJ3QgYmUgcGFyc2VkICgnXCIuY29uY2F0KGZvcm11bGEsIFwiJylcIikpO1xuICAgIH1cbiAgICByZXR1cm4gW2EsIHNpZ24gKiBudW1iZXJdO1xuICAgIGZ1bmN0aW9uIHJlYWRTaWduKCkge1xuICAgICAgICBpZiAoZm9ybXVsYS5jaGFyQXQoaWR4KSA9PT0gXCItXCIpIHtcbiAgICAgICAgICAgIGlkeCsrO1xuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmb3JtdWxhLmNoYXJBdChpZHgpID09PSBcIitcIikge1xuICAgICAgICAgICAgaWR4Kys7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIDE7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlYWROdW1iZXIoKSB7XG4gICAgICAgIHZhciBzdGFydCA9IGlkeDtcbiAgICAgICAgdmFyIHZhbHVlID0gMDtcbiAgICAgICAgd2hpbGUgKGlkeCA8IGZvcm11bGEubGVuZ3RoICYmXG4gICAgICAgICAgICBmb3JtdWxhLmNoYXJDb2RlQXQoaWR4KSA+PSBaRVJPICYmXG4gICAgICAgICAgICBmb3JtdWxhLmNoYXJDb2RlQXQoaWR4KSA8PSBOSU5FKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlICogMTAgKyAoZm9ybXVsYS5jaGFyQ29kZUF0KGlkeCkgLSBaRVJPKTtcbiAgICAgICAgICAgIGlkeCsrO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJldHVybiBgbnVsbGAgaWYgd2UgZGlkbid0IHJlYWQgYW55dGhpbmcuXG4gICAgICAgIHJldHVybiBpZHggPT09IHN0YXJ0ID8gbnVsbCA6IHZhbHVlO1xuICAgIH1cbiAgICBmdW5jdGlvbiBza2lwV2hpdGVzcGFjZSgpIHtcbiAgICAgICAgd2hpbGUgKGlkeCA8IGZvcm11bGEubGVuZ3RoICYmXG4gICAgICAgICAgICB3aGl0ZXNwYWNlLmhhcyhmb3JtdWxhLmNoYXJDb2RlQXQoaWR4KSkpIHtcbiAgICAgICAgICAgIGlkeCsrO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5wYXJzZSA9IHBhcnNlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFyc2UuanMubWFwIiwidmFyIGhhc01hcCA9IHR5cGVvZiBNYXAgPT09ICdmdW5jdGlvbicgJiYgTWFwLnByb3RvdHlwZTtcbnZhciBtYXBTaXplRGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgJiYgaGFzTWFwID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihNYXAucHJvdG90eXBlLCAnc2l6ZScpIDogbnVsbDtcbnZhciBtYXBTaXplID0gaGFzTWFwICYmIG1hcFNpemVEZXNjcmlwdG9yICYmIHR5cGVvZiBtYXBTaXplRGVzY3JpcHRvci5nZXQgPT09ICdmdW5jdGlvbicgPyBtYXBTaXplRGVzY3JpcHRvci5nZXQgOiBudWxsO1xudmFyIG1hcEZvckVhY2ggPSBoYXNNYXAgJiYgTWFwLnByb3RvdHlwZS5mb3JFYWNoO1xudmFyIGhhc1NldCA9IHR5cGVvZiBTZXQgPT09ICdmdW5jdGlvbicgJiYgU2V0LnByb3RvdHlwZTtcbnZhciBzZXRTaXplRGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgJiYgaGFzU2V0ID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihTZXQucHJvdG90eXBlLCAnc2l6ZScpIDogbnVsbDtcbnZhciBzZXRTaXplID0gaGFzU2V0ICYmIHNldFNpemVEZXNjcmlwdG9yICYmIHR5cGVvZiBzZXRTaXplRGVzY3JpcHRvci5nZXQgPT09ICdmdW5jdGlvbicgPyBzZXRTaXplRGVzY3JpcHRvci5nZXQgOiBudWxsO1xudmFyIHNldEZvckVhY2ggPSBoYXNTZXQgJiYgU2V0LnByb3RvdHlwZS5mb3JFYWNoO1xudmFyIGhhc1dlYWtNYXAgPSB0eXBlb2YgV2Vha01hcCA9PT0gJ2Z1bmN0aW9uJyAmJiBXZWFrTWFwLnByb3RvdHlwZTtcbnZhciB3ZWFrTWFwSGFzID0gaGFzV2Vha01hcCA/IFdlYWtNYXAucHJvdG90eXBlLmhhcyA6IG51bGw7XG52YXIgaGFzV2Vha1NldCA9IHR5cGVvZiBXZWFrU2V0ID09PSAnZnVuY3Rpb24nICYmIFdlYWtTZXQucHJvdG90eXBlO1xudmFyIHdlYWtTZXRIYXMgPSBoYXNXZWFrU2V0ID8gV2Vha1NldC5wcm90b3R5cGUuaGFzIDogbnVsbDtcbnZhciBoYXNXZWFrUmVmID0gdHlwZW9mIFdlYWtSZWYgPT09ICdmdW5jdGlvbicgJiYgV2Vha1JlZi5wcm90b3R5cGU7XG52YXIgd2Vha1JlZkRlcmVmID0gaGFzV2Vha1JlZiA/IFdlYWtSZWYucHJvdG90eXBlLmRlcmVmIDogbnVsbDtcbnZhciBib29sZWFuVmFsdWVPZiA9IEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2Y7XG52YXIgb2JqZWN0VG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIGZ1bmN0aW9uVG9TdHJpbmcgPSBGdW5jdGlvbi5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgJG1hdGNoID0gU3RyaW5nLnByb3RvdHlwZS5tYXRjaDtcbnZhciAkc2xpY2UgPSBTdHJpbmcucHJvdG90eXBlLnNsaWNlO1xudmFyICRyZXBsYWNlID0gU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlO1xudmFyICR0b1VwcGVyQ2FzZSA9IFN0cmluZy5wcm90b3R5cGUudG9VcHBlckNhc2U7XG52YXIgJHRvTG93ZXJDYXNlID0gU3RyaW5nLnByb3RvdHlwZS50b0xvd2VyQ2FzZTtcbnZhciAkdGVzdCA9IFJlZ0V4cC5wcm90b3R5cGUudGVzdDtcbnZhciAkY29uY2F0ID0gQXJyYXkucHJvdG90eXBlLmNvbmNhdDtcbnZhciAkam9pbiA9IEFycmF5LnByb3RvdHlwZS5qb2luO1xudmFyICRhcnJTbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcbnZhciAkZmxvb3IgPSBNYXRoLmZsb29yO1xudmFyIGJpZ0ludFZhbHVlT2YgPSB0eXBlb2YgQmlnSW50ID09PSAnZnVuY3Rpb24nID8gQmlnSW50LnByb3RvdHlwZS52YWx1ZU9mIDogbnVsbDtcbnZhciBnT1BTID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBzeW1Ub1N0cmluZyA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gJ3N5bWJvbCcgPyBTeW1ib2wucHJvdG90eXBlLnRvU3RyaW5nIDogbnVsbDtcbnZhciBoYXNTaGFtbWVkU3ltYm9scyA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gJ29iamVjdCc7XG4vLyBpZSwgYGhhcy10b3N0cmluZ3RhZy9zaGFtc1xudmFyIHRvU3RyaW5nVGFnID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcgJiYgKHR5cGVvZiBTeW1ib2wudG9TdHJpbmdUYWcgPT09IGhhc1NoYW1tZWRTeW1ib2xzID8gJ29iamVjdCcgOiAnc3ltYm9sJylcbiAgICA/IFN5bWJvbC50b1N0cmluZ1RhZ1xuICAgIDogbnVsbDtcbnZhciBpc0VudW1lcmFibGUgPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG52YXIgZ1BPID0gKHR5cGVvZiBSZWZsZWN0ID09PSAnZnVuY3Rpb24nID8gUmVmbGVjdC5nZXRQcm90b3R5cGVPZiA6IE9iamVjdC5nZXRQcm90b3R5cGVPZikgfHwgKFxuICAgIFtdLl9fcHJvdG9fXyA9PT0gQXJyYXkucHJvdG90eXBlIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcHJvdG9cbiAgICAgICAgPyBmdW5jdGlvbiAoTykge1xuICAgICAgICAgICAgcmV0dXJuIE8uX19wcm90b19fOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXByb3RvXG4gICAgICAgIH1cbiAgICAgICAgOiBudWxsXG4pO1xuXG5mdW5jdGlvbiBhZGROdW1lcmljU2VwYXJhdG9yKG51bSwgc3RyKSB7XG4gICAgaWYgKFxuICAgICAgICBudW0gPT09IEluZmluaXR5XG4gICAgICAgIHx8IG51bSA9PT0gLUluZmluaXR5XG4gICAgICAgIHx8IG51bSAhPT0gbnVtXG4gICAgICAgIHx8IChudW0gJiYgbnVtID4gLTEwMDAgJiYgbnVtIDwgMTAwMClcbiAgICAgICAgfHwgJHRlc3QuY2FsbCgvZS8sIHN0cilcbiAgICApIHtcbiAgICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG4gICAgdmFyIHNlcFJlZ2V4ID0gL1swLTldKD89KD86WzAtOV17M30pKyg/IVswLTldKSkvZztcbiAgICBpZiAodHlwZW9mIG51bSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgdmFyIGludCA9IG51bSA8IDAgPyAtJGZsb29yKC1udW0pIDogJGZsb29yKG51bSk7IC8vIHRydW5jKG51bSlcbiAgICAgICAgaWYgKGludCAhPT0gbnVtKSB7XG4gICAgICAgICAgICB2YXIgaW50U3RyID0gU3RyaW5nKGludCk7XG4gICAgICAgICAgICB2YXIgZGVjID0gJHNsaWNlLmNhbGwoc3RyLCBpbnRTdHIubGVuZ3RoICsgMSk7XG4gICAgICAgICAgICByZXR1cm4gJHJlcGxhY2UuY2FsbChpbnRTdHIsIHNlcFJlZ2V4LCAnJCZfJykgKyAnLicgKyAkcmVwbGFjZS5jYWxsKCRyZXBsYWNlLmNhbGwoZGVjLCAvKFswLTldezN9KS9nLCAnJCZfJyksIC9fJC8sICcnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gJHJlcGxhY2UuY2FsbChzdHIsIHNlcFJlZ2V4LCAnJCZfJyk7XG59XG5cbnZhciB1dGlsSW5zcGVjdCA9IHJlcXVpcmUoJy4vdXRpbC5pbnNwZWN0Jyk7XG52YXIgaW5zcGVjdEN1c3RvbSA9IHV0aWxJbnNwZWN0LmN1c3RvbTtcbnZhciBpbnNwZWN0U3ltYm9sID0gaXNTeW1ib2woaW5zcGVjdEN1c3RvbSkgPyBpbnNwZWN0Q3VzdG9tIDogbnVsbDtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbnNwZWN0XyhvYmosIG9wdGlvbnMsIGRlcHRoLCBzZWVuKSB7XG4gICAgdmFyIG9wdHMgPSBvcHRpb25zIHx8IHt9O1xuXG4gICAgaWYgKGhhcyhvcHRzLCAncXVvdGVTdHlsZScpICYmIChvcHRzLnF1b3RlU3R5bGUgIT09ICdzaW5nbGUnICYmIG9wdHMucXVvdGVTdHlsZSAhPT0gJ2RvdWJsZScpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ29wdGlvbiBcInF1b3RlU3R5bGVcIiBtdXN0IGJlIFwic2luZ2xlXCIgb3IgXCJkb3VibGVcIicpO1xuICAgIH1cbiAgICBpZiAoXG4gICAgICAgIGhhcyhvcHRzLCAnbWF4U3RyaW5nTGVuZ3RoJykgJiYgKHR5cGVvZiBvcHRzLm1heFN0cmluZ0xlbmd0aCA9PT0gJ251bWJlcidcbiAgICAgICAgICAgID8gb3B0cy5tYXhTdHJpbmdMZW5ndGggPCAwICYmIG9wdHMubWF4U3RyaW5nTGVuZ3RoICE9PSBJbmZpbml0eVxuICAgICAgICAgICAgOiBvcHRzLm1heFN0cmluZ0xlbmd0aCAhPT0gbnVsbFxuICAgICAgICApXG4gICAgKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ29wdGlvbiBcIm1heFN0cmluZ0xlbmd0aFwiLCBpZiBwcm92aWRlZCwgbXVzdCBiZSBhIHBvc2l0aXZlIGludGVnZXIsIEluZmluaXR5LCBvciBgbnVsbGAnKTtcbiAgICB9XG4gICAgdmFyIGN1c3RvbUluc3BlY3QgPSBoYXMob3B0cywgJ2N1c3RvbUluc3BlY3QnKSA/IG9wdHMuY3VzdG9tSW5zcGVjdCA6IHRydWU7XG4gICAgaWYgKHR5cGVvZiBjdXN0b21JbnNwZWN0ICE9PSAnYm9vbGVhbicgJiYgY3VzdG9tSW5zcGVjdCAhPT0gJ3N5bWJvbCcpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb3B0aW9uIFwiY3VzdG9tSW5zcGVjdFwiLCBpZiBwcm92aWRlZCwgbXVzdCBiZSBgdHJ1ZWAsIGBmYWxzZWAsIG9yIGBcXCdzeW1ib2xcXCdgJyk7XG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgICBoYXMob3B0cywgJ2luZGVudCcpXG4gICAgICAgICYmIG9wdHMuaW5kZW50ICE9PSBudWxsXG4gICAgICAgICYmIG9wdHMuaW5kZW50ICE9PSAnXFx0J1xuICAgICAgICAmJiAhKHBhcnNlSW50KG9wdHMuaW5kZW50LCAxMCkgPT09IG9wdHMuaW5kZW50ICYmIG9wdHMuaW5kZW50ID4gMClcbiAgICApIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb3B0aW9uIFwiaW5kZW50XCIgbXVzdCBiZSBcIlxcXFx0XCIsIGFuIGludGVnZXIgPiAwLCBvciBgbnVsbGAnKTtcbiAgICB9XG4gICAgaWYgKGhhcyhvcHRzLCAnbnVtZXJpY1NlcGFyYXRvcicpICYmIHR5cGVvZiBvcHRzLm51bWVyaWNTZXBhcmF0b3IgIT09ICdib29sZWFuJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvcHRpb24gXCJudW1lcmljU2VwYXJhdG9yXCIsIGlmIHByb3ZpZGVkLCBtdXN0IGJlIGB0cnVlYCBvciBgZmFsc2VgJyk7XG4gICAgfVxuICAgIHZhciBudW1lcmljU2VwYXJhdG9yID0gb3B0cy5udW1lcmljU2VwYXJhdG9yO1xuXG4gICAgaWYgKHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiAndW5kZWZpbmVkJztcbiAgICB9XG4gICAgaWYgKG9iaiA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gJ251bGwnO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG9iaiA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIHJldHVybiBvYmogPyAndHJ1ZScgOiAnZmFsc2UnO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygb2JqID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gaW5zcGVjdFN0cmluZyhvYmosIG9wdHMpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG9iaiA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgaWYgKG9iaiA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIEluZmluaXR5IC8gb2JqID4gMCA/ICcwJyA6ICctMCc7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHN0ciA9IFN0cmluZyhvYmopO1xuICAgICAgICByZXR1cm4gbnVtZXJpY1NlcGFyYXRvciA/IGFkZE51bWVyaWNTZXBhcmF0b3Iob2JqLCBzdHIpIDogc3RyO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG9iaiA9PT0gJ2JpZ2ludCcpIHtcbiAgICAgICAgdmFyIGJpZ0ludFN0ciA9IFN0cmluZyhvYmopICsgJ24nO1xuICAgICAgICByZXR1cm4gbnVtZXJpY1NlcGFyYXRvciA/IGFkZE51bWVyaWNTZXBhcmF0b3Iob2JqLCBiaWdJbnRTdHIpIDogYmlnSW50U3RyO1xuICAgIH1cblxuICAgIHZhciBtYXhEZXB0aCA9IHR5cGVvZiBvcHRzLmRlcHRoID09PSAndW5kZWZpbmVkJyA/IDUgOiBvcHRzLmRlcHRoO1xuICAgIGlmICh0eXBlb2YgZGVwdGggPT09ICd1bmRlZmluZWQnKSB7IGRlcHRoID0gMDsgfVxuICAgIGlmIChkZXB0aCA+PSBtYXhEZXB0aCAmJiBtYXhEZXB0aCA+IDAgJiYgdHlwZW9mIG9iaiA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIGlzQXJyYXkob2JqKSA/ICdbQXJyYXldJyA6ICdbT2JqZWN0XSc7XG4gICAgfVxuXG4gICAgdmFyIGluZGVudCA9IGdldEluZGVudChvcHRzLCBkZXB0aCk7XG5cbiAgICBpZiAodHlwZW9mIHNlZW4gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHNlZW4gPSBbXTtcbiAgICB9IGVsc2UgaWYgKGluZGV4T2Yoc2Vlbiwgb2JqKSA+PSAwKSB7XG4gICAgICAgIHJldHVybiAnW0NpcmN1bGFyXSc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zcGVjdCh2YWx1ZSwgZnJvbSwgbm9JbmRlbnQpIHtcbiAgICAgICAgaWYgKGZyb20pIHtcbiAgICAgICAgICAgIHNlZW4gPSAkYXJyU2xpY2UuY2FsbChzZWVuKTtcbiAgICAgICAgICAgIHNlZW4ucHVzaChmcm9tKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobm9JbmRlbnQpIHtcbiAgICAgICAgICAgIHZhciBuZXdPcHRzID0ge1xuICAgICAgICAgICAgICAgIGRlcHRoOiBvcHRzLmRlcHRoXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKGhhcyhvcHRzLCAncXVvdGVTdHlsZScpKSB7XG4gICAgICAgICAgICAgICAgbmV3T3B0cy5xdW90ZVN0eWxlID0gb3B0cy5xdW90ZVN0eWxlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGluc3BlY3RfKHZhbHVlLCBuZXdPcHRzLCBkZXB0aCArIDEsIHNlZW4pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpbnNwZWN0Xyh2YWx1ZSwgb3B0cywgZGVwdGggKyAxLCBzZWVuKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG9iaiA9PT0gJ2Z1bmN0aW9uJyAmJiAhaXNSZWdFeHAob2JqKSkgeyAvLyBpbiBvbGRlciBlbmdpbmVzLCByZWdleGVzIGFyZSBjYWxsYWJsZVxuICAgICAgICB2YXIgbmFtZSA9IG5hbWVPZihvYmopO1xuICAgICAgICB2YXIga2V5cyA9IGFyck9iaktleXMob2JqLCBpbnNwZWN0KTtcbiAgICAgICAgcmV0dXJuICdbRnVuY3Rpb24nICsgKG5hbWUgPyAnOiAnICsgbmFtZSA6ICcgKGFub255bW91cyknKSArICddJyArIChrZXlzLmxlbmd0aCA+IDAgPyAnIHsgJyArICRqb2luLmNhbGwoa2V5cywgJywgJykgKyAnIH0nIDogJycpO1xuICAgIH1cbiAgICBpZiAoaXNTeW1ib2wob2JqKSkge1xuICAgICAgICB2YXIgc3ltU3RyaW5nID0gaGFzU2hhbW1lZFN5bWJvbHMgPyAkcmVwbGFjZS5jYWxsKFN0cmluZyhvYmopLCAvXihTeW1ib2xcXCguKlxcKSlfW14pXSokLywgJyQxJykgOiBzeW1Ub1N0cmluZy5jYWxsKG9iaik7XG4gICAgICAgIHJldHVybiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyAmJiAhaGFzU2hhbW1lZFN5bWJvbHMgPyBtYXJrQm94ZWQoc3ltU3RyaW5nKSA6IHN5bVN0cmluZztcbiAgICB9XG4gICAgaWYgKGlzRWxlbWVudChvYmopKSB7XG4gICAgICAgIHZhciBzID0gJzwnICsgJHRvTG93ZXJDYXNlLmNhbGwoU3RyaW5nKG9iai5ub2RlTmFtZSkpO1xuICAgICAgICB2YXIgYXR0cnMgPSBvYmouYXR0cmlidXRlcyB8fCBbXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhdHRycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgcyArPSAnICcgKyBhdHRyc1tpXS5uYW1lICsgJz0nICsgd3JhcFF1b3RlcyhxdW90ZShhdHRyc1tpXS52YWx1ZSksICdkb3VibGUnLCBvcHRzKTtcbiAgICAgICAgfVxuICAgICAgICBzICs9ICc+JztcbiAgICAgICAgaWYgKG9iai5jaGlsZE5vZGVzICYmIG9iai5jaGlsZE5vZGVzLmxlbmd0aCkgeyBzICs9ICcuLi4nOyB9XG4gICAgICAgIHMgKz0gJzwvJyArICR0b0xvd2VyQ2FzZS5jYWxsKFN0cmluZyhvYmoubm9kZU5hbWUpKSArICc+JztcbiAgICAgICAgcmV0dXJuIHM7XG4gICAgfVxuICAgIGlmIChpc0FycmF5KG9iaikpIHtcbiAgICAgICAgaWYgKG9iai5sZW5ndGggPT09IDApIHsgcmV0dXJuICdbXSc7IH1cbiAgICAgICAgdmFyIHhzID0gYXJyT2JqS2V5cyhvYmosIGluc3BlY3QpO1xuICAgICAgICBpZiAoaW5kZW50ICYmICFzaW5nbGVMaW5lVmFsdWVzKHhzKSkge1xuICAgICAgICAgICAgcmV0dXJuICdbJyArIGluZGVudGVkSm9pbih4cywgaW5kZW50KSArICddJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJ1sgJyArICRqb2luLmNhbGwoeHMsICcsICcpICsgJyBdJztcbiAgICB9XG4gICAgaWYgKGlzRXJyb3Iob2JqKSkge1xuICAgICAgICB2YXIgcGFydHMgPSBhcnJPYmpLZXlzKG9iaiwgaW5zcGVjdCk7XG4gICAgICAgIGlmICghKCdjYXVzZScgaW4gRXJyb3IucHJvdG90eXBlKSAmJiAnY2F1c2UnIGluIG9iaiAmJiAhaXNFbnVtZXJhYmxlLmNhbGwob2JqLCAnY2F1c2UnKSkge1xuICAgICAgICAgICAgcmV0dXJuICd7IFsnICsgU3RyaW5nKG9iaikgKyAnXSAnICsgJGpvaW4uY2FsbCgkY29uY2F0LmNhbGwoJ1tjYXVzZV06ICcgKyBpbnNwZWN0KG9iai5jYXVzZSksIHBhcnRzKSwgJywgJykgKyAnIH0nO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJ0cy5sZW5ndGggPT09IDApIHsgcmV0dXJuICdbJyArIFN0cmluZyhvYmopICsgJ10nOyB9XG4gICAgICAgIHJldHVybiAneyBbJyArIFN0cmluZyhvYmopICsgJ10gJyArICRqb2luLmNhbGwocGFydHMsICcsICcpICsgJyB9JztcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmIGN1c3RvbUluc3BlY3QpIHtcbiAgICAgICAgaWYgKGluc3BlY3RTeW1ib2wgJiYgdHlwZW9mIG9ialtpbnNwZWN0U3ltYm9sXSA9PT0gJ2Z1bmN0aW9uJyAmJiB1dGlsSW5zcGVjdCkge1xuICAgICAgICAgICAgcmV0dXJuIHV0aWxJbnNwZWN0KG9iaiwgeyBkZXB0aDogbWF4RGVwdGggLSBkZXB0aCB9KTtcbiAgICAgICAgfSBlbHNlIGlmIChjdXN0b21JbnNwZWN0ICE9PSAnc3ltYm9sJyAmJiB0eXBlb2Ygb2JqLmluc3BlY3QgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHJldHVybiBvYmouaW5zcGVjdCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChpc01hcChvYmopKSB7XG4gICAgICAgIHZhciBtYXBQYXJ0cyA9IFtdO1xuICAgICAgICBpZiAobWFwRm9yRWFjaCkge1xuICAgICAgICAgICAgbWFwRm9yRWFjaC5jYWxsKG9iaiwgZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgICAgICAgICBtYXBQYXJ0cy5wdXNoKGluc3BlY3Qoa2V5LCBvYmosIHRydWUpICsgJyA9PiAnICsgaW5zcGVjdCh2YWx1ZSwgb2JqKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29sbGVjdGlvbk9mKCdNYXAnLCBtYXBTaXplLmNhbGwob2JqKSwgbWFwUGFydHMsIGluZGVudCk7XG4gICAgfVxuICAgIGlmIChpc1NldChvYmopKSB7XG4gICAgICAgIHZhciBzZXRQYXJ0cyA9IFtdO1xuICAgICAgICBpZiAoc2V0Rm9yRWFjaCkge1xuICAgICAgICAgICAgc2V0Rm9yRWFjaC5jYWxsKG9iaiwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgc2V0UGFydHMucHVzaChpbnNwZWN0KHZhbHVlLCBvYmopKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb2xsZWN0aW9uT2YoJ1NldCcsIHNldFNpemUuY2FsbChvYmopLCBzZXRQYXJ0cywgaW5kZW50KTtcbiAgICB9XG4gICAgaWYgKGlzV2Vha01hcChvYmopKSB7XG4gICAgICAgIHJldHVybiB3ZWFrQ29sbGVjdGlvbk9mKCdXZWFrTWFwJyk7XG4gICAgfVxuICAgIGlmIChpc1dlYWtTZXQob2JqKSkge1xuICAgICAgICByZXR1cm4gd2Vha0NvbGxlY3Rpb25PZignV2Vha1NldCcpO1xuICAgIH1cbiAgICBpZiAoaXNXZWFrUmVmKG9iaikpIHtcbiAgICAgICAgcmV0dXJuIHdlYWtDb2xsZWN0aW9uT2YoJ1dlYWtSZWYnKTtcbiAgICB9XG4gICAgaWYgKGlzTnVtYmVyKG9iaikpIHtcbiAgICAgICAgcmV0dXJuIG1hcmtCb3hlZChpbnNwZWN0KE51bWJlcihvYmopKSk7XG4gICAgfVxuICAgIGlmIChpc0JpZ0ludChvYmopKSB7XG4gICAgICAgIHJldHVybiBtYXJrQm94ZWQoaW5zcGVjdChiaWdJbnRWYWx1ZU9mLmNhbGwob2JqKSkpO1xuICAgIH1cbiAgICBpZiAoaXNCb29sZWFuKG9iaikpIHtcbiAgICAgICAgcmV0dXJuIG1hcmtCb3hlZChib29sZWFuVmFsdWVPZi5jYWxsKG9iaikpO1xuICAgIH1cbiAgICBpZiAoaXNTdHJpbmcob2JqKSkge1xuICAgICAgICByZXR1cm4gbWFya0JveGVkKGluc3BlY3QoU3RyaW5nKG9iaikpKTtcbiAgICB9XG4gICAgLy8gbm90ZTogaW4gSUUgOCwgc29tZXRpbWVzIGBnbG9iYWwgIT09IHdpbmRvd2AgYnV0IGJvdGggYXJlIHRoZSBwcm90b3R5cGVzIG9mIGVhY2ggb3RoZXJcbiAgICAvKiBlc2xpbnQtZW52IGJyb3dzZXIgKi9cbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgb2JqID09PSB3aW5kb3cpIHtcbiAgICAgICAgcmV0dXJuICd7IFtvYmplY3QgV2luZG93XSB9JztcbiAgICB9XG4gICAgaWYgKG9iaiA9PT0gZ2xvYmFsKSB7XG4gICAgICAgIHJldHVybiAneyBbb2JqZWN0IGdsb2JhbFRoaXNdIH0nO1xuICAgIH1cbiAgICBpZiAoIWlzRGF0ZShvYmopICYmICFpc1JlZ0V4cChvYmopKSB7XG4gICAgICAgIHZhciB5cyA9IGFyck9iaktleXMob2JqLCBpbnNwZWN0KTtcbiAgICAgICAgdmFyIGlzUGxhaW5PYmplY3QgPSBnUE8gPyBnUE8ob2JqKSA9PT0gT2JqZWN0LnByb3RvdHlwZSA6IG9iaiBpbnN0YW5jZW9mIE9iamVjdCB8fCBvYmouY29uc3RydWN0b3IgPT09IE9iamVjdDtcbiAgICAgICAgdmFyIHByb3RvVGFnID0gb2JqIGluc3RhbmNlb2YgT2JqZWN0ID8gJycgOiAnbnVsbCBwcm90b3R5cGUnO1xuICAgICAgICB2YXIgc3RyaW5nVGFnID0gIWlzUGxhaW5PYmplY3QgJiYgdG9TdHJpbmdUYWcgJiYgT2JqZWN0KG9iaikgPT09IG9iaiAmJiB0b1N0cmluZ1RhZyBpbiBvYmogPyAkc2xpY2UuY2FsbCh0b1N0cihvYmopLCA4LCAtMSkgOiBwcm90b1RhZyA/ICdPYmplY3QnIDogJyc7XG4gICAgICAgIHZhciBjb25zdHJ1Y3RvclRhZyA9IGlzUGxhaW5PYmplY3QgfHwgdHlwZW9mIG9iai5jb25zdHJ1Y3RvciAhPT0gJ2Z1bmN0aW9uJyA/ICcnIDogb2JqLmNvbnN0cnVjdG9yLm5hbWUgPyBvYmouY29uc3RydWN0b3IubmFtZSArICcgJyA6ICcnO1xuICAgICAgICB2YXIgdGFnID0gY29uc3RydWN0b3JUYWcgKyAoc3RyaW5nVGFnIHx8IHByb3RvVGFnID8gJ1snICsgJGpvaW4uY2FsbCgkY29uY2F0LmNhbGwoW10sIHN0cmluZ1RhZyB8fCBbXSwgcHJvdG9UYWcgfHwgW10pLCAnOiAnKSArICddICcgOiAnJyk7XG4gICAgICAgIGlmICh5cy5sZW5ndGggPT09IDApIHsgcmV0dXJuIHRhZyArICd7fSc7IH1cbiAgICAgICAgaWYgKGluZGVudCkge1xuICAgICAgICAgICAgcmV0dXJuIHRhZyArICd7JyArIGluZGVudGVkSm9pbih5cywgaW5kZW50KSArICd9JztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGFnICsgJ3sgJyArICRqb2luLmNhbGwoeXMsICcsICcpICsgJyB9JztcbiAgICB9XG4gICAgcmV0dXJuIFN0cmluZyhvYmopO1xufTtcblxuZnVuY3Rpb24gd3JhcFF1b3RlcyhzLCBkZWZhdWx0U3R5bGUsIG9wdHMpIHtcbiAgICB2YXIgcXVvdGVDaGFyID0gKG9wdHMucXVvdGVTdHlsZSB8fCBkZWZhdWx0U3R5bGUpID09PSAnZG91YmxlJyA/ICdcIicgOiBcIidcIjtcbiAgICByZXR1cm4gcXVvdGVDaGFyICsgcyArIHF1b3RlQ2hhcjtcbn1cblxuZnVuY3Rpb24gcXVvdGUocykge1xuICAgIHJldHVybiAkcmVwbGFjZS5jYWxsKFN0cmluZyhzKSwgL1wiL2csICcmcXVvdDsnKTtcbn1cblxuZnVuY3Rpb24gaXNBcnJheShvYmopIHsgcmV0dXJuIHRvU3RyKG9iaikgPT09ICdbb2JqZWN0IEFycmF5XScgJiYgKCF0b1N0cmluZ1RhZyB8fCAhKHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmIHRvU3RyaW5nVGFnIGluIG9iaikpOyB9XG5mdW5jdGlvbiBpc0RhdGUob2JqKSB7IHJldHVybiB0b1N0cihvYmopID09PSAnW29iamVjdCBEYXRlXScgJiYgKCF0b1N0cmluZ1RhZyB8fCAhKHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmIHRvU3RyaW5nVGFnIGluIG9iaikpOyB9XG5mdW5jdGlvbiBpc1JlZ0V4cChvYmopIHsgcmV0dXJuIHRvU3RyKG9iaikgPT09ICdbb2JqZWN0IFJlZ0V4cF0nICYmICghdG9TdHJpbmdUYWcgfHwgISh0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyAmJiB0b1N0cmluZ1RhZyBpbiBvYmopKTsgfVxuZnVuY3Rpb24gaXNFcnJvcihvYmopIHsgcmV0dXJuIHRvU3RyKG9iaikgPT09ICdbb2JqZWN0IEVycm9yXScgJiYgKCF0b1N0cmluZ1RhZyB8fCAhKHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmIHRvU3RyaW5nVGFnIGluIG9iaikpOyB9XG5mdW5jdGlvbiBpc1N0cmluZyhvYmopIHsgcmV0dXJuIHRvU3RyKG9iaikgPT09ICdbb2JqZWN0IFN0cmluZ10nICYmICghdG9TdHJpbmdUYWcgfHwgISh0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyAmJiB0b1N0cmluZ1RhZyBpbiBvYmopKTsgfVxuZnVuY3Rpb24gaXNOdW1iZXIob2JqKSB7IHJldHVybiB0b1N0cihvYmopID09PSAnW29iamVjdCBOdW1iZXJdJyAmJiAoIXRvU3RyaW5nVGFnIHx8ICEodHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgJiYgdG9TdHJpbmdUYWcgaW4gb2JqKSk7IH1cbmZ1bmN0aW9uIGlzQm9vbGVhbihvYmopIHsgcmV0dXJuIHRvU3RyKG9iaikgPT09ICdbb2JqZWN0IEJvb2xlYW5dJyAmJiAoIXRvU3RyaW5nVGFnIHx8ICEodHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgJiYgdG9TdHJpbmdUYWcgaW4gb2JqKSk7IH1cblxuLy8gU3ltYm9sIGFuZCBCaWdJbnQgZG8gaGF2ZSBTeW1ib2wudG9TdHJpbmdUYWcgYnkgc3BlYywgc28gdGhhdCBjYW4ndCBiZSB1c2VkIHRvIGVsaW1pbmF0ZSBmYWxzZSBwb3NpdGl2ZXNcbmZ1bmN0aW9uIGlzU3ltYm9sKG9iaikge1xuICAgIGlmIChoYXNTaGFtbWVkU3ltYm9scykge1xuICAgICAgICByZXR1cm4gb2JqICYmIHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmIG9iaiBpbnN0YW5jZW9mIFN5bWJvbDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBvYmogPT09ICdzeW1ib2wnKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoIW9iaiB8fCB0eXBlb2Ygb2JqICE9PSAnb2JqZWN0JyB8fCAhc3ltVG9TdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBzeW1Ub1N0cmluZy5jYWxsKG9iaik7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc0JpZ0ludChvYmopIHtcbiAgICBpZiAoIW9iaiB8fCB0eXBlb2Ygb2JqICE9PSAnb2JqZWN0JyB8fCAhYmlnSW50VmFsdWVPZikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGJpZ0ludFZhbHVlT2YuY2FsbChvYmopO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICAgIHJldHVybiBmYWxzZTtcbn1cblxudmFyIGhhc093biA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkgfHwgZnVuY3Rpb24gKGtleSkgeyByZXR1cm4ga2V5IGluIHRoaXM7IH07XG5mdW5jdGlvbiBoYXMob2JqLCBrZXkpIHtcbiAgICByZXR1cm4gaGFzT3duLmNhbGwob2JqLCBrZXkpO1xufVxuXG5mdW5jdGlvbiB0b1N0cihvYmopIHtcbiAgICByZXR1cm4gb2JqZWN0VG9TdHJpbmcuY2FsbChvYmopO1xufVxuXG5mdW5jdGlvbiBuYW1lT2YoZikge1xuICAgIGlmIChmLm5hbWUpIHsgcmV0dXJuIGYubmFtZTsgfVxuICAgIHZhciBtID0gJG1hdGNoLmNhbGwoZnVuY3Rpb25Ub1N0cmluZy5jYWxsKGYpLCAvXmZ1bmN0aW9uXFxzKihbXFx3JF0rKS8pO1xuICAgIGlmIChtKSB7IHJldHVybiBtWzFdOyB9XG4gICAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIGluZGV4T2YoeHMsIHgpIHtcbiAgICBpZiAoeHMuaW5kZXhPZikgeyByZXR1cm4geHMuaW5kZXhPZih4KTsgfVxuICAgIGZvciAodmFyIGkgPSAwLCBsID0geHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGlmICh4c1tpXSA9PT0geCkgeyByZXR1cm4gaTsgfVxuICAgIH1cbiAgICByZXR1cm4gLTE7XG59XG5cbmZ1bmN0aW9uIGlzTWFwKHgpIHtcbiAgICBpZiAoIW1hcFNpemUgfHwgIXggfHwgdHlwZW9mIHggIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgbWFwU2l6ZS5jYWxsKHgpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgc2V0U2l6ZS5jYWxsKHgpO1xuICAgICAgICB9IGNhdGNoIChzKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geCBpbnN0YW5jZW9mIE1hcDsgLy8gY29yZS1qcyB3b3JrYXJvdW5kLCBwcmUtdjIuNS4wXG4gICAgfSBjYXRjaCAoZSkge31cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzV2Vha01hcCh4KSB7XG4gICAgaWYgKCF3ZWFrTWFwSGFzIHx8ICF4IHx8IHR5cGVvZiB4ICE9PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIHdlYWtNYXBIYXMuY2FsbCh4LCB3ZWFrTWFwSGFzKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHdlYWtTZXRIYXMuY2FsbCh4LCB3ZWFrU2V0SGFzKTtcbiAgICAgICAgfSBjYXRjaCAocykge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHggaW5zdGFuY2VvZiBXZWFrTWFwOyAvLyBjb3JlLWpzIHdvcmthcm91bmQsIHByZS12Mi41LjBcbiAgICB9IGNhdGNoIChlKSB7fVxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNXZWFrUmVmKHgpIHtcbiAgICBpZiAoIXdlYWtSZWZEZXJlZiB8fCAheCB8fCB0eXBlb2YgeCAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICB3ZWFrUmVmRGVyZWYuY2FsbCh4KTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzU2V0KHgpIHtcbiAgICBpZiAoIXNldFNpemUgfHwgIXggfHwgdHlwZW9mIHggIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgc2V0U2l6ZS5jYWxsKHgpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgbWFwU2l6ZS5jYWxsKHgpO1xuICAgICAgICB9IGNhdGNoIChtKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geCBpbnN0YW5jZW9mIFNldDsgLy8gY29yZS1qcyB3b3JrYXJvdW5kLCBwcmUtdjIuNS4wXG4gICAgfSBjYXRjaCAoZSkge31cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzV2Vha1NldCh4KSB7XG4gICAgaWYgKCF3ZWFrU2V0SGFzIHx8ICF4IHx8IHR5cGVvZiB4ICE9PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIHdlYWtTZXRIYXMuY2FsbCh4LCB3ZWFrU2V0SGFzKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHdlYWtNYXBIYXMuY2FsbCh4LCB3ZWFrTWFwSGFzKTtcbiAgICAgICAgfSBjYXRjaCAocykge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHggaW5zdGFuY2VvZiBXZWFrU2V0OyAvLyBjb3JlLWpzIHdvcmthcm91bmQsIHByZS12Mi41LjBcbiAgICB9IGNhdGNoIChlKSB7fVxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNFbGVtZW50KHgpIHtcbiAgICBpZiAoIXggfHwgdHlwZW9mIHggIT09ICdvYmplY3QnKSB7IHJldHVybiBmYWxzZTsgfVxuICAgIGlmICh0eXBlb2YgSFRNTEVsZW1lbnQgIT09ICd1bmRlZmluZWQnICYmIHggaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHR5cGVvZiB4Lm5vZGVOYW1lID09PSAnc3RyaW5nJyAmJiB0eXBlb2YgeC5nZXRBdHRyaWJ1dGUgPT09ICdmdW5jdGlvbic7XG59XG5cbmZ1bmN0aW9uIGluc3BlY3RTdHJpbmcoc3RyLCBvcHRzKSB7XG4gICAgaWYgKHN0ci5sZW5ndGggPiBvcHRzLm1heFN0cmluZ0xlbmd0aCkge1xuICAgICAgICB2YXIgcmVtYWluaW5nID0gc3RyLmxlbmd0aCAtIG9wdHMubWF4U3RyaW5nTGVuZ3RoO1xuICAgICAgICB2YXIgdHJhaWxlciA9ICcuLi4gJyArIHJlbWFpbmluZyArICcgbW9yZSBjaGFyYWN0ZXInICsgKHJlbWFpbmluZyA+IDEgPyAncycgOiAnJyk7XG4gICAgICAgIHJldHVybiBpbnNwZWN0U3RyaW5nKCRzbGljZS5jYWxsKHN0ciwgMCwgb3B0cy5tYXhTdHJpbmdMZW5ndGgpLCBvcHRzKSArIHRyYWlsZXI7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb250cm9sLXJlZ2V4XG4gICAgdmFyIHMgPSAkcmVwbGFjZS5jYWxsKCRyZXBsYWNlLmNhbGwoc3RyLCAvKFsnXFxcXF0pL2csICdcXFxcJDEnKSwgL1tcXHgwMC1cXHgxZl0vZywgbG93Ynl0ZSk7XG4gICAgcmV0dXJuIHdyYXBRdW90ZXMocywgJ3NpbmdsZScsIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBsb3dieXRlKGMpIHtcbiAgICB2YXIgbiA9IGMuY2hhckNvZGVBdCgwKTtcbiAgICB2YXIgeCA9IHtcbiAgICAgICAgODogJ2InLFxuICAgICAgICA5OiAndCcsXG4gICAgICAgIDEwOiAnbicsXG4gICAgICAgIDEyOiAnZicsXG4gICAgICAgIDEzOiAncidcbiAgICB9W25dO1xuICAgIGlmICh4KSB7IHJldHVybiAnXFxcXCcgKyB4OyB9XG4gICAgcmV0dXJuICdcXFxceCcgKyAobiA8IDB4MTAgPyAnMCcgOiAnJykgKyAkdG9VcHBlckNhc2UuY2FsbChuLnRvU3RyaW5nKDE2KSk7XG59XG5cbmZ1bmN0aW9uIG1hcmtCb3hlZChzdHIpIHtcbiAgICByZXR1cm4gJ09iamVjdCgnICsgc3RyICsgJyknO1xufVxuXG5mdW5jdGlvbiB3ZWFrQ29sbGVjdGlvbk9mKHR5cGUpIHtcbiAgICByZXR1cm4gdHlwZSArICcgeyA/IH0nO1xufVxuXG5mdW5jdGlvbiBjb2xsZWN0aW9uT2YodHlwZSwgc2l6ZSwgZW50cmllcywgaW5kZW50KSB7XG4gICAgdmFyIGpvaW5lZEVudHJpZXMgPSBpbmRlbnQgPyBpbmRlbnRlZEpvaW4oZW50cmllcywgaW5kZW50KSA6ICRqb2luLmNhbGwoZW50cmllcywgJywgJyk7XG4gICAgcmV0dXJuIHR5cGUgKyAnICgnICsgc2l6ZSArICcpIHsnICsgam9pbmVkRW50cmllcyArICd9Jztcbn1cblxuZnVuY3Rpb24gc2luZ2xlTGluZVZhbHVlcyh4cykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgeHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGluZGV4T2YoeHNbaV0sICdcXG4nKSA+PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGdldEluZGVudChvcHRzLCBkZXB0aCkge1xuICAgIHZhciBiYXNlSW5kZW50O1xuICAgIGlmIChvcHRzLmluZGVudCA9PT0gJ1xcdCcpIHtcbiAgICAgICAgYmFzZUluZGVudCA9ICdcXHQnO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIG9wdHMuaW5kZW50ID09PSAnbnVtYmVyJyAmJiBvcHRzLmluZGVudCA+IDApIHtcbiAgICAgICAgYmFzZUluZGVudCA9ICRqb2luLmNhbGwoQXJyYXkob3B0cy5pbmRlbnQgKyAxKSwgJyAnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYmFzZTogYmFzZUluZGVudCxcbiAgICAgICAgcHJldjogJGpvaW4uY2FsbChBcnJheShkZXB0aCArIDEpLCBiYXNlSW5kZW50KVxuICAgIH07XG59XG5cbmZ1bmN0aW9uIGluZGVudGVkSm9pbih4cywgaW5kZW50KSB7XG4gICAgaWYgKHhzLmxlbmd0aCA9PT0gMCkgeyByZXR1cm4gJyc7IH1cbiAgICB2YXIgbGluZUpvaW5lciA9ICdcXG4nICsgaW5kZW50LnByZXYgKyBpbmRlbnQuYmFzZTtcbiAgICByZXR1cm4gbGluZUpvaW5lciArICRqb2luLmNhbGwoeHMsICcsJyArIGxpbmVKb2luZXIpICsgJ1xcbicgKyBpbmRlbnQucHJldjtcbn1cblxuZnVuY3Rpb24gYXJyT2JqS2V5cyhvYmosIGluc3BlY3QpIHtcbiAgICB2YXIgaXNBcnIgPSBpc0FycmF5KG9iaik7XG4gICAgdmFyIHhzID0gW107XG4gICAgaWYgKGlzQXJyKSB7XG4gICAgICAgIHhzLmxlbmd0aCA9IG9iai5sZW5ndGg7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2JqLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB4c1tpXSA9IGhhcyhvYmosIGkpID8gaW5zcGVjdChvYmpbaV0sIG9iaikgOiAnJztcbiAgICAgICAgfVxuICAgIH1cbiAgICB2YXIgc3ltcyA9IHR5cGVvZiBnT1BTID09PSAnZnVuY3Rpb24nID8gZ09QUyhvYmopIDogW107XG4gICAgdmFyIHN5bU1hcDtcbiAgICBpZiAoaGFzU2hhbW1lZFN5bWJvbHMpIHtcbiAgICAgICAgc3ltTWFwID0ge307XG4gICAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgc3ltcy5sZW5ndGg7IGsrKykge1xuICAgICAgICAgICAgc3ltTWFwWyckJyArIHN5bXNba11dID0gc3ltc1trXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheFxuICAgICAgICBpZiAoIWhhcyhvYmosIGtleSkpIHsgY29udGludWU7IH0gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheCwgbm8tY29udGludWVcbiAgICAgICAgaWYgKGlzQXJyICYmIFN0cmluZyhOdW1iZXIoa2V5KSkgPT09IGtleSAmJiBrZXkgPCBvYmoubGVuZ3RoKSB7IGNvbnRpbnVlOyB9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcmVzdHJpY3RlZC1zeW50YXgsIG5vLWNvbnRpbnVlXG4gICAgICAgIGlmIChoYXNTaGFtbWVkU3ltYm9scyAmJiBzeW1NYXBbJyQnICsga2V5XSBpbnN0YW5jZW9mIFN5bWJvbCkge1xuICAgICAgICAgICAgLy8gdGhpcyBpcyB0byBwcmV2ZW50IHNoYW1tZWQgU3ltYm9scywgd2hpY2ggYXJlIHN0b3JlZCBhcyBzdHJpbmdzLCBmcm9tIGJlaW5nIGluY2x1ZGVkIGluIHRoZSBzdHJpbmcga2V5IHNlY3Rpb25cbiAgICAgICAgICAgIGNvbnRpbnVlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4LCBuby1jb250aW51ZVxuICAgICAgICB9IGVsc2UgaWYgKCR0ZXN0LmNhbGwoL1teXFx3JF0vLCBrZXkpKSB7XG4gICAgICAgICAgICB4cy5wdXNoKGluc3BlY3Qoa2V5LCBvYmopICsgJzogJyArIGluc3BlY3Qob2JqW2tleV0sIG9iaikpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgeHMucHVzaChrZXkgKyAnOiAnICsgaW5zcGVjdChvYmpba2V5XSwgb2JqKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHR5cGVvZiBnT1BTID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgc3ltcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgaWYgKGlzRW51bWVyYWJsZS5jYWxsKG9iaiwgc3ltc1tqXSkpIHtcbiAgICAgICAgICAgICAgICB4cy5wdXNoKCdbJyArIGluc3BlY3Qoc3ltc1tqXSkgKyAnXTogJyArIGluc3BlY3Qob2JqW3N5bXNbal1dLCBvYmopKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4geHM7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBudW1iZXJJc05hTiA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuXHRyZXR1cm4gdmFsdWUgIT09IHZhbHVlO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpcyhhLCBiKSB7XG5cdGlmIChhID09PSAwICYmIGIgPT09IDApIHtcblx0XHRyZXR1cm4gMSAvIGEgPT09IDEgLyBiO1xuXHR9XG5cdGlmIChhID09PSBiKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblx0aWYgKG51bWJlcklzTmFOKGEpICYmIG51bWJlcklzTmFOKGIpKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblx0cmV0dXJuIGZhbHNlO1xufTtcblxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZGVmaW5lID0gcmVxdWlyZSgnZGVmaW5lLXByb3BlcnRpZXMnKTtcbnZhciBjYWxsQmluZCA9IHJlcXVpcmUoJ2NhbGwtYmluZCcpO1xuXG52YXIgaW1wbGVtZW50YXRpb24gPSByZXF1aXJlKCcuL2ltcGxlbWVudGF0aW9uJyk7XG52YXIgZ2V0UG9seWZpbGwgPSByZXF1aXJlKCcuL3BvbHlmaWxsJyk7XG52YXIgc2hpbSA9IHJlcXVpcmUoJy4vc2hpbScpO1xuXG52YXIgcG9seWZpbGwgPSBjYWxsQmluZChnZXRQb2x5ZmlsbCgpLCBPYmplY3QpO1xuXG5kZWZpbmUocG9seWZpbGwsIHtcblx0Z2V0UG9seWZpbGw6IGdldFBvbHlmaWxsLFxuXHRpbXBsZW1lbnRhdGlvbjogaW1wbGVtZW50YXRpb24sXG5cdHNoaW06IHNoaW1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBvbHlmaWxsO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW1wbGVtZW50YXRpb24gPSByZXF1aXJlKCcuL2ltcGxlbWVudGF0aW9uJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2V0UG9seWZpbGwoKSB7XG5cdHJldHVybiB0eXBlb2YgT2JqZWN0LmlzID09PSAnZnVuY3Rpb24nID8gT2JqZWN0LmlzIDogaW1wbGVtZW50YXRpb247XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZ2V0UG9seWZpbGwgPSByZXF1aXJlKCcuL3BvbHlmaWxsJyk7XG52YXIgZGVmaW5lID0gcmVxdWlyZSgnZGVmaW5lLXByb3BlcnRpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzaGltT2JqZWN0SXMoKSB7XG5cdHZhciBwb2x5ZmlsbCA9IGdldFBvbHlmaWxsKCk7XG5cdGRlZmluZShPYmplY3QsIHsgaXM6IHBvbHlmaWxsIH0sIHtcblx0XHRpczogZnVuY3Rpb24gdGVzdE9iamVjdElzKCkge1xuXHRcdFx0cmV0dXJuIE9iamVjdC5pcyAhPT0gcG9seWZpbGw7XG5cdFx0fVxuXHR9KTtcblx0cmV0dXJuIHBvbHlmaWxsO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGtleXNTaGltO1xuaWYgKCFPYmplY3Qua2V5cykge1xuXHQvLyBtb2RpZmllZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9lcy1zaGltcy9lczUtc2hpbVxuXHR2YXIgaGFzID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblx0dmFyIHRvU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblx0dmFyIGlzQXJncyA9IHJlcXVpcmUoJy4vaXNBcmd1bWVudHMnKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBnbG9iYWwtcmVxdWlyZVxuXHR2YXIgaXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblx0dmFyIGhhc0RvbnRFbnVtQnVnID0gIWlzRW51bWVyYWJsZS5jYWxsKHsgdG9TdHJpbmc6IG51bGwgfSwgJ3RvU3RyaW5nJyk7XG5cdHZhciBoYXNQcm90b0VudW1CdWcgPSBpc0VudW1lcmFibGUuY2FsbChmdW5jdGlvbiAoKSB7fSwgJ3Byb3RvdHlwZScpO1xuXHR2YXIgZG9udEVudW1zID0gW1xuXHRcdCd0b1N0cmluZycsXG5cdFx0J3RvTG9jYWxlU3RyaW5nJyxcblx0XHQndmFsdWVPZicsXG5cdFx0J2hhc093blByb3BlcnR5Jyxcblx0XHQnaXNQcm90b3R5cGVPZicsXG5cdFx0J3Byb3BlcnR5SXNFbnVtZXJhYmxlJyxcblx0XHQnY29uc3RydWN0b3InXG5cdF07XG5cdHZhciBlcXVhbHNDb25zdHJ1Y3RvclByb3RvdHlwZSA9IGZ1bmN0aW9uIChvKSB7XG5cdFx0dmFyIGN0b3IgPSBvLmNvbnN0cnVjdG9yO1xuXHRcdHJldHVybiBjdG9yICYmIGN0b3IucHJvdG90eXBlID09PSBvO1xuXHR9O1xuXHR2YXIgZXhjbHVkZWRLZXlzID0ge1xuXHRcdCRhcHBsaWNhdGlvbkNhY2hlOiB0cnVlLFxuXHRcdCRjb25zb2xlOiB0cnVlLFxuXHRcdCRleHRlcm5hbDogdHJ1ZSxcblx0XHQkZnJhbWU6IHRydWUsXG5cdFx0JGZyYW1lRWxlbWVudDogdHJ1ZSxcblx0XHQkZnJhbWVzOiB0cnVlLFxuXHRcdCRpbm5lckhlaWdodDogdHJ1ZSxcblx0XHQkaW5uZXJXaWR0aDogdHJ1ZSxcblx0XHQkb25tb3pmdWxsc2NyZWVuY2hhbmdlOiB0cnVlLFxuXHRcdCRvbm1vemZ1bGxzY3JlZW5lcnJvcjogdHJ1ZSxcblx0XHQkb3V0ZXJIZWlnaHQ6IHRydWUsXG5cdFx0JG91dGVyV2lkdGg6IHRydWUsXG5cdFx0JHBhZ2VYT2Zmc2V0OiB0cnVlLFxuXHRcdCRwYWdlWU9mZnNldDogdHJ1ZSxcblx0XHQkcGFyZW50OiB0cnVlLFxuXHRcdCRzY3JvbGxMZWZ0OiB0cnVlLFxuXHRcdCRzY3JvbGxUb3A6IHRydWUsXG5cdFx0JHNjcm9sbFg6IHRydWUsXG5cdFx0JHNjcm9sbFk6IHRydWUsXG5cdFx0JHNlbGY6IHRydWUsXG5cdFx0JHdlYmtpdEluZGV4ZWREQjogdHJ1ZSxcblx0XHQkd2Via2l0U3RvcmFnZUluZm86IHRydWUsXG5cdFx0JHdpbmRvdzogdHJ1ZVxuXHR9O1xuXHR2YXIgaGFzQXV0b21hdGlvbkVxdWFsaXR5QnVnID0gKGZ1bmN0aW9uICgpIHtcblx0XHQvKiBnbG9iYWwgd2luZG93ICovXG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSB7IHJldHVybiBmYWxzZTsgfVxuXHRcdGZvciAodmFyIGsgaW4gd2luZG93KSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRpZiAoIWV4Y2x1ZGVkS2V5c1snJCcgKyBrXSAmJiBoYXMuY2FsbCh3aW5kb3csIGspICYmIHdpbmRvd1trXSAhPT0gbnVsbCAmJiB0eXBlb2Ygd2luZG93W2tdID09PSAnb2JqZWN0Jykge1xuXHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRlcXVhbHNDb25zdHJ1Y3RvclByb3RvdHlwZSh3aW5kb3dba10pO1xuXHRcdFx0XHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9KCkpO1xuXHR2YXIgZXF1YWxzQ29uc3RydWN0b3JQcm90b3R5cGVJZk5vdEJ1Z2d5ID0gZnVuY3Rpb24gKG8pIHtcblx0XHQvKiBnbG9iYWwgd2luZG93ICovXG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnIHx8ICFoYXNBdXRvbWF0aW9uRXF1YWxpdHlCdWcpIHtcblx0XHRcdHJldHVybiBlcXVhbHNDb25zdHJ1Y3RvclByb3RvdHlwZShvKTtcblx0XHR9XG5cdFx0dHJ5IHtcblx0XHRcdHJldHVybiBlcXVhbHNDb25zdHJ1Y3RvclByb3RvdHlwZShvKTtcblx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHR9O1xuXG5cdGtleXNTaGltID0gZnVuY3Rpb24ga2V5cyhvYmplY3QpIHtcblx0XHR2YXIgaXNPYmplY3QgPSBvYmplY3QgIT09IG51bGwgJiYgdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCc7XG5cdFx0dmFyIGlzRnVuY3Rpb24gPSB0b1N0ci5jYWxsKG9iamVjdCkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG5cdFx0dmFyIGlzQXJndW1lbnRzID0gaXNBcmdzKG9iamVjdCk7XG5cdFx0dmFyIGlzU3RyaW5nID0gaXNPYmplY3QgJiYgdG9TdHIuY2FsbChvYmplY3QpID09PSAnW29iamVjdCBTdHJpbmddJztcblx0XHR2YXIgdGhlS2V5cyA9IFtdO1xuXG5cdFx0aWYgKCFpc09iamVjdCAmJiAhaXNGdW5jdGlvbiAmJiAhaXNBcmd1bWVudHMpIHtcblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5rZXlzIGNhbGxlZCBvbiBhIG5vbi1vYmplY3QnKTtcblx0XHR9XG5cblx0XHR2YXIgc2tpcFByb3RvID0gaGFzUHJvdG9FbnVtQnVnICYmIGlzRnVuY3Rpb247XG5cdFx0aWYgKGlzU3RyaW5nICYmIG9iamVjdC5sZW5ndGggPiAwICYmICFoYXMuY2FsbChvYmplY3QsIDApKSB7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IG9iamVjdC5sZW5ndGg7ICsraSkge1xuXHRcdFx0XHR0aGVLZXlzLnB1c2goU3RyaW5nKGkpKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoaXNBcmd1bWVudHMgJiYgb2JqZWN0Lmxlbmd0aCA+IDApIHtcblx0XHRcdGZvciAodmFyIGogPSAwOyBqIDwgb2JqZWN0Lmxlbmd0aDsgKytqKSB7XG5cdFx0XHRcdHRoZUtleXMucHVzaChTdHJpbmcoaikpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKHZhciBuYW1lIGluIG9iamVjdCkge1xuXHRcdFx0XHRpZiAoIShza2lwUHJvdG8gJiYgbmFtZSA9PT0gJ3Byb3RvdHlwZScpICYmIGhhcy5jYWxsKG9iamVjdCwgbmFtZSkpIHtcblx0XHRcdFx0XHR0aGVLZXlzLnB1c2goU3RyaW5nKG5hbWUpKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChoYXNEb250RW51bUJ1Zykge1xuXHRcdFx0dmFyIHNraXBDb25zdHJ1Y3RvciA9IGVxdWFsc0NvbnN0cnVjdG9yUHJvdG90eXBlSWZOb3RCdWdneShvYmplY3QpO1xuXG5cdFx0XHRmb3IgKHZhciBrID0gMDsgayA8IGRvbnRFbnVtcy5sZW5ndGg7ICsraykge1xuXHRcdFx0XHRpZiAoIShza2lwQ29uc3RydWN0b3IgJiYgZG9udEVudW1zW2tdID09PSAnY29uc3RydWN0b3InKSAmJiBoYXMuY2FsbChvYmplY3QsIGRvbnRFbnVtc1trXSkpIHtcblx0XHRcdFx0XHR0aGVLZXlzLnB1c2goZG9udEVudW1zW2tdKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gdGhlS2V5cztcblx0fTtcbn1cbm1vZHVsZS5leHBvcnRzID0ga2V5c1NoaW07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBzbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcbnZhciBpc0FyZ3MgPSByZXF1aXJlKCcuL2lzQXJndW1lbnRzJyk7XG5cbnZhciBvcmlnS2V5cyA9IE9iamVjdC5rZXlzO1xudmFyIGtleXNTaGltID0gb3JpZ0tleXMgPyBmdW5jdGlvbiBrZXlzKG8pIHsgcmV0dXJuIG9yaWdLZXlzKG8pOyB9IDogcmVxdWlyZSgnLi9pbXBsZW1lbnRhdGlvbicpO1xuXG52YXIgb3JpZ2luYWxLZXlzID0gT2JqZWN0LmtleXM7XG5cbmtleXNTaGltLnNoaW0gPSBmdW5jdGlvbiBzaGltT2JqZWN0S2V5cygpIHtcblx0aWYgKE9iamVjdC5rZXlzKSB7XG5cdFx0dmFyIGtleXNXb3Jrc1dpdGhBcmd1bWVudHMgPSAoZnVuY3Rpb24gKCkge1xuXHRcdFx0Ly8gU2FmYXJpIDUuMCBidWdcblx0XHRcdHZhciBhcmdzID0gT2JqZWN0LmtleXMoYXJndW1lbnRzKTtcblx0XHRcdHJldHVybiBhcmdzICYmIGFyZ3MubGVuZ3RoID09PSBhcmd1bWVudHMubGVuZ3RoO1xuXHRcdH0oMSwgMikpO1xuXHRcdGlmICgha2V5c1dvcmtzV2l0aEFyZ3VtZW50cykge1xuXHRcdFx0T2JqZWN0LmtleXMgPSBmdW5jdGlvbiBrZXlzKG9iamVjdCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGZ1bmMtbmFtZS1tYXRjaGluZ1xuXHRcdFx0XHRpZiAoaXNBcmdzKG9iamVjdCkpIHtcblx0XHRcdFx0XHRyZXR1cm4gb3JpZ2luYWxLZXlzKHNsaWNlLmNhbGwob2JqZWN0KSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIG9yaWdpbmFsS2V5cyhvYmplY3QpO1xuXHRcdFx0fTtcblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0T2JqZWN0LmtleXMgPSBrZXlzU2hpbTtcblx0fVxuXHRyZXR1cm4gT2JqZWN0LmtleXMgfHwga2V5c1NoaW07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGtleXNTaGltO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQXJndW1lbnRzKHZhbHVlKSB7XG5cdHZhciBzdHIgPSB0b1N0ci5jYWxsKHZhbHVlKTtcblx0dmFyIGlzQXJncyA9IHN0ciA9PT0gJ1tvYmplY3QgQXJndW1lbnRzXSc7XG5cdGlmICghaXNBcmdzKSB7XG5cdFx0aXNBcmdzID0gc3RyICE9PSAnW29iamVjdCBBcnJheV0nICYmXG5cdFx0XHR2YWx1ZSAhPT0gbnVsbCAmJlxuXHRcdFx0dHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJlxuXHRcdFx0dHlwZW9mIHZhbHVlLmxlbmd0aCA9PT0gJ251bWJlcicgJiZcblx0XHRcdHZhbHVlLmxlbmd0aCA+PSAwICYmXG5cdFx0XHR0b1N0ci5jYWxsKHZhbHVlLmNhbGxlZSkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG5cdH1cblx0cmV0dXJuIGlzQXJncztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8vIG1vZGlmaWVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2VzLXNoaW1zL2VzNi1zaGltXG52YXIgb2JqZWN0S2V5cyA9IHJlcXVpcmUoJ29iamVjdC1rZXlzJyk7XG52YXIgaGFzU3ltYm9scyA9IHJlcXVpcmUoJ2hhcy1zeW1ib2xzL3NoYW1zJykoKTtcbnZhciBjYWxsQm91bmQgPSByZXF1aXJlKCdjYWxsLWJpbmQvY2FsbEJvdW5kJyk7XG52YXIgdG9PYmplY3QgPSBPYmplY3Q7XG52YXIgJHB1c2ggPSBjYWxsQm91bmQoJ0FycmF5LnByb3RvdHlwZS5wdXNoJyk7XG52YXIgJHByb3BJc0VudW1lcmFibGUgPSBjYWxsQm91bmQoJ09iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUnKTtcbnZhciBvcmlnaW5hbEdldFN5bWJvbHMgPSBoYXNTeW1ib2xzID8gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA6IG51bGw7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBhc3NpZ24odGFyZ2V0LCBzb3VyY2UxKSB7XG5cdGlmICh0YXJnZXQgPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCd0YXJnZXQgbXVzdCBiZSBhbiBvYmplY3QnKTsgfVxuXHR2YXIgdG8gPSB0b09iamVjdCh0YXJnZXQpOyAvLyBzdGVwIDFcblx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcblx0XHRyZXR1cm4gdG87IC8vIHN0ZXAgMlxuXHR9XG5cdGZvciAodmFyIHMgPSAxOyBzIDwgYXJndW1lbnRzLmxlbmd0aDsgKytzKSB7XG5cdFx0dmFyIGZyb20gPSB0b09iamVjdChhcmd1bWVudHNbc10pOyAvLyBzdGVwIDMuYS5pXG5cblx0XHQvLyBzdGVwIDMuYS5paTpcblx0XHR2YXIga2V5cyA9IG9iamVjdEtleXMoZnJvbSk7XG5cdFx0dmFyIGdldFN5bWJvbHMgPSBoYXNTeW1ib2xzICYmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzIHx8IG9yaWdpbmFsR2V0U3ltYm9scyk7XG5cdFx0aWYgKGdldFN5bWJvbHMpIHtcblx0XHRcdHZhciBzeW1zID0gZ2V0U3ltYm9scyhmcm9tKTtcblx0XHRcdGZvciAodmFyIGogPSAwOyBqIDwgc3ltcy5sZW5ndGg7ICsraikge1xuXHRcdFx0XHR2YXIga2V5ID0gc3ltc1tqXTtcblx0XHRcdFx0aWYgKCRwcm9wSXNFbnVtZXJhYmxlKGZyb20sIGtleSkpIHtcblx0XHRcdFx0XHQkcHVzaChrZXlzLCBrZXkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gc3RlcCAzLmEuaWlpOlxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuXHRcdFx0dmFyIG5leHRLZXkgPSBrZXlzW2ldO1xuXHRcdFx0aWYgKCRwcm9wSXNFbnVtZXJhYmxlKGZyb20sIG5leHRLZXkpKSB7IC8vIHN0ZXAgMy5hLmlpaS4yXG5cdFx0XHRcdHZhciBwcm9wVmFsdWUgPSBmcm9tW25leHRLZXldOyAvLyBzdGVwIDMuYS5paWkuMi5hXG5cdFx0XHRcdHRvW25leHRLZXldID0gcHJvcFZhbHVlOyAvLyBzdGVwIDMuYS5paWkuMi5iXG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHRvOyAvLyBzdGVwIDRcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBkZWZpbmVQcm9wZXJ0aWVzID0gcmVxdWlyZSgnZGVmaW5lLXByb3BlcnRpZXMnKTtcbnZhciBjYWxsQmluZCA9IHJlcXVpcmUoJ2NhbGwtYmluZCcpO1xuXG52YXIgaW1wbGVtZW50YXRpb24gPSByZXF1aXJlKCcuL2ltcGxlbWVudGF0aW9uJyk7XG52YXIgZ2V0UG9seWZpbGwgPSByZXF1aXJlKCcuL3BvbHlmaWxsJyk7XG52YXIgc2hpbSA9IHJlcXVpcmUoJy4vc2hpbScpO1xuXG52YXIgcG9seWZpbGwgPSBjYWxsQmluZC5hcHBseShnZXRQb2x5ZmlsbCgpKTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xudmFyIGJvdW5kID0gZnVuY3Rpb24gYXNzaWduKHRhcmdldCwgc291cmNlMSkge1xuXHRyZXR1cm4gcG9seWZpbGwoT2JqZWN0LCBhcmd1bWVudHMpO1xufTtcblxuZGVmaW5lUHJvcGVydGllcyhib3VuZCwge1xuXHRnZXRQb2x5ZmlsbDogZ2V0UG9seWZpbGwsXG5cdGltcGxlbWVudGF0aW9uOiBpbXBsZW1lbnRhdGlvbixcblx0c2hpbTogc2hpbVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gYm91bmQ7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpbXBsZW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vaW1wbGVtZW50YXRpb24nKTtcblxudmFyIGxhY2tzUHJvcGVyRW51bWVyYXRpb25PcmRlciA9IGZ1bmN0aW9uICgpIHtcblx0aWYgKCFPYmplY3QuYXNzaWduKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cdC8qXG5cdCAqIHY4LCBzcGVjaWZpY2FsbHkgaW4gbm9kZSA0LngsIGhhcyBhIGJ1ZyB3aXRoIGluY29ycmVjdCBwcm9wZXJ0eSBlbnVtZXJhdGlvbiBvcmRlclxuXHQgKiBub3RlOiB0aGlzIGRvZXMgbm90IGRldGVjdCB0aGUgYnVnIHVubGVzcyB0aGVyZSdzIDIwIGNoYXJhY3RlcnNcblx0ICovXG5cdHZhciBzdHIgPSAnYWJjZGVmZ2hpamtsbW5vcHFyc3QnO1xuXHR2YXIgbGV0dGVycyA9IHN0ci5zcGxpdCgnJyk7XG5cdHZhciBtYXAgPSB7fTtcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBsZXR0ZXJzLmxlbmd0aDsgKytpKSB7XG5cdFx0bWFwW2xldHRlcnNbaV1dID0gbGV0dGVyc1tpXTtcblx0fVxuXHR2YXIgb2JqID0gT2JqZWN0LmFzc2lnbih7fSwgbWFwKTtcblx0dmFyIGFjdHVhbCA9ICcnO1xuXHRmb3IgKHZhciBrIGluIG9iaikge1xuXHRcdGFjdHVhbCArPSBrO1xuXHR9XG5cdHJldHVybiBzdHIgIT09IGFjdHVhbDtcbn07XG5cbnZhciBhc3NpZ25IYXNQZW5kaW5nRXhjZXB0aW9ucyA9IGZ1bmN0aW9uICgpIHtcblx0aWYgKCFPYmplY3QuYXNzaWduIHx8ICFPYmplY3QucHJldmVudEV4dGVuc2lvbnMpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0Lypcblx0ICogRmlyZWZveCAzNyBzdGlsbCBoYXMgXCJwZW5kaW5nIGV4Y2VwdGlvblwiIGxvZ2ljIGluIGl0cyBPYmplY3QuYXNzaWduIGltcGxlbWVudGF0aW9uLFxuXHQgKiB3aGljaCBpcyA3MiUgc2xvd2VyIHRoYW4gb3VyIHNoaW0sIGFuZCBGaXJlZm94IDQwJ3MgbmF0aXZlIGltcGxlbWVudGF0aW9uLlxuXHQgKi9cblx0dmFyIHRocm93ZXIgPSBPYmplY3QucHJldmVudEV4dGVuc2lvbnMoeyAxOiAyIH0pO1xuXHR0cnkge1xuXHRcdE9iamVjdC5hc3NpZ24odGhyb3dlciwgJ3h5Jyk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRyZXR1cm4gdGhyb3dlclsxXSA9PT0gJ3knO1xuXHR9XG5cdHJldHVybiBmYWxzZTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2V0UG9seWZpbGwoKSB7XG5cdGlmICghT2JqZWN0LmFzc2lnbikge1xuXHRcdHJldHVybiBpbXBsZW1lbnRhdGlvbjtcblx0fVxuXHRpZiAobGFja3NQcm9wZXJFbnVtZXJhdGlvbk9yZGVyKCkpIHtcblx0XHRyZXR1cm4gaW1wbGVtZW50YXRpb247XG5cdH1cblx0aWYgKGFzc2lnbkhhc1BlbmRpbmdFeGNlcHRpb25zKCkpIHtcblx0XHRyZXR1cm4gaW1wbGVtZW50YXRpb247XG5cdH1cblx0cmV0dXJuIE9iamVjdC5hc3NpZ247XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZGVmaW5lID0gcmVxdWlyZSgnZGVmaW5lLXByb3BlcnRpZXMnKTtcbnZhciBnZXRQb2x5ZmlsbCA9IHJlcXVpcmUoJy4vcG9seWZpbGwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzaGltQXNzaWduKCkge1xuXHR2YXIgcG9seWZpbGwgPSBnZXRQb2x5ZmlsbCgpO1xuXHRkZWZpbmUoXG5cdFx0T2JqZWN0LFxuXHRcdHsgYXNzaWduOiBwb2x5ZmlsbCB9LFxuXHRcdHsgYXNzaWduOiBmdW5jdGlvbiAoKSB7IHJldHVybiBPYmplY3QuYXNzaWduICE9PSBwb2x5ZmlsbDsgfSB9XG5cdCk7XG5cdHJldHVybiBwb2x5ZmlsbDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnZXMtb2JqZWN0LWF0b21zL1JlcXVpcmVPYmplY3RDb2VyY2libGUnKTtcbnZhciBjYWxsQm91bmQgPSByZXF1aXJlKCdjYWxsLWJpbmQvY2FsbEJvdW5kJyk7XG52YXIgJGlzRW51bWVyYWJsZSA9IGNhbGxCb3VuZCgnT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZScpO1xudmFyICRwdXNoID0gY2FsbEJvdW5kKCdBcnJheS5wcm90b3R5cGUucHVzaCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGVudHJpZXMoTykge1xuXHR2YXIgb2JqID0gUmVxdWlyZU9iamVjdENvZXJjaWJsZShPKTtcblx0dmFyIGVudHJ5cyA9IFtdO1xuXHRmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG5cdFx0aWYgKCRpc0VudW1lcmFibGUob2JqLCBrZXkpKSB7IC8vIGNoZWNrcyBvd24tbmVzcyBhcyB3ZWxsXG5cdFx0XHQkcHVzaChlbnRyeXMsIFtrZXksIG9ialtrZXldXSk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBlbnRyeXM7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZGVmaW5lID0gcmVxdWlyZSgnZGVmaW5lLXByb3BlcnRpZXMnKTtcbnZhciBjYWxsQmluZCA9IHJlcXVpcmUoJ2NhbGwtYmluZCcpO1xuXG52YXIgaW1wbGVtZW50YXRpb24gPSByZXF1aXJlKCcuL2ltcGxlbWVudGF0aW9uJyk7XG52YXIgZ2V0UG9seWZpbGwgPSByZXF1aXJlKCcuL3BvbHlmaWxsJyk7XG52YXIgc2hpbSA9IHJlcXVpcmUoJy4vc2hpbScpO1xuXG52YXIgcG9seWZpbGwgPSBjYWxsQmluZChnZXRQb2x5ZmlsbCgpLCBPYmplY3QpO1xuXG5kZWZpbmUocG9seWZpbGwsIHtcblx0Z2V0UG9seWZpbGw6IGdldFBvbHlmaWxsLFxuXHRpbXBsZW1lbnRhdGlvbjogaW1wbGVtZW50YXRpb24sXG5cdHNoaW06IHNoaW1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBvbHlmaWxsO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW1wbGVtZW50YXRpb24gPSByZXF1aXJlKCcuL2ltcGxlbWVudGF0aW9uJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2V0UG9seWZpbGwoKSB7XG5cdHJldHVybiB0eXBlb2YgT2JqZWN0LmVudHJpZXMgPT09ICdmdW5jdGlvbicgPyBPYmplY3QuZW50cmllcyA6IGltcGxlbWVudGF0aW9uO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGdldFBvbHlmaWxsID0gcmVxdWlyZSgnLi9wb2x5ZmlsbCcpO1xudmFyIGRlZmluZSA9IHJlcXVpcmUoJ2RlZmluZS1wcm9wZXJ0aWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2hpbUVudHJpZXMoKSB7XG5cdHZhciBwb2x5ZmlsbCA9IGdldFBvbHlmaWxsKCk7XG5cdGRlZmluZShPYmplY3QsIHsgZW50cmllczogcG9seWZpbGwgfSwge1xuXHRcdGVudHJpZXM6IGZ1bmN0aW9uIHRlc3RFbnRyaWVzKCkge1xuXHRcdFx0cmV0dXJuIE9iamVjdC5lbnRyaWVzICE9PSBwb2x5ZmlsbDtcblx0XHR9XG5cdH0pO1xuXHRyZXR1cm4gcG9seWZpbGw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJ2VzLW9iamVjdC1hdG9tcy9SZXF1aXJlT2JqZWN0Q29lcmNpYmxlJyk7XG52YXIgY2FsbEJvdW5kID0gcmVxdWlyZSgnY2FsbC1iaW5kL2NhbGxCb3VuZCcpO1xuXG52YXIgJGlzRW51bWVyYWJsZSA9IGNhbGxCb3VuZCgnT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZScpO1xudmFyICRwdXNoID0gY2FsbEJvdW5kKCdBcnJheS5wcm90b3R5cGUucHVzaCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHZhbHVlcyhPKSB7XG5cdHZhciBvYmogPSBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlKE8pO1xuXHR2YXIgdmFscyA9IFtdO1xuXHRmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG5cdFx0aWYgKCRpc0VudW1lcmFibGUob2JqLCBrZXkpKSB7IC8vIGNoZWNrcyBvd24tbmVzcyBhcyB3ZWxsXG5cdFx0XHQkcHVzaCh2YWxzLCBvYmpba2V5XSk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiB2YWxzO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGRlZmluZSA9IHJlcXVpcmUoJ2RlZmluZS1wcm9wZXJ0aWVzJyk7XG52YXIgY2FsbEJpbmQgPSByZXF1aXJlKCdjYWxsLWJpbmQnKTtcblxudmFyIGltcGxlbWVudGF0aW9uID0gcmVxdWlyZSgnLi9pbXBsZW1lbnRhdGlvbicpO1xudmFyIGdldFBvbHlmaWxsID0gcmVxdWlyZSgnLi9wb2x5ZmlsbCcpO1xudmFyIHNoaW0gPSByZXF1aXJlKCcuL3NoaW0nKTtcblxudmFyIHBvbHlmaWxsID0gY2FsbEJpbmQoZ2V0UG9seWZpbGwoKSwgT2JqZWN0KTtcblxuZGVmaW5lKHBvbHlmaWxsLCB7XG5cdGdldFBvbHlmaWxsOiBnZXRQb2x5ZmlsbCxcblx0aW1wbGVtZW50YXRpb246IGltcGxlbWVudGF0aW9uLFxuXHRzaGltOiBzaGltXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBwb2x5ZmlsbDtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGltcGxlbWVudGF0aW9uID0gcmVxdWlyZSgnLi9pbXBsZW1lbnRhdGlvbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdldFBvbHlmaWxsKCkge1xuXHRyZXR1cm4gdHlwZW9mIE9iamVjdC52YWx1ZXMgPT09ICdmdW5jdGlvbicgPyBPYmplY3QudmFsdWVzIDogaW1wbGVtZW50YXRpb247XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZ2V0UG9seWZpbGwgPSByZXF1aXJlKCcuL3BvbHlmaWxsJyk7XG52YXIgZGVmaW5lID0gcmVxdWlyZSgnZGVmaW5lLXByb3BlcnRpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzaGltVmFsdWVzKCkge1xuXHR2YXIgcG9seWZpbGwgPSBnZXRQb2x5ZmlsbCgpO1xuXHRkZWZpbmUoT2JqZWN0LCB7IHZhbHVlczogcG9seWZpbGwgfSwge1xuXHRcdHZhbHVlczogZnVuY3Rpb24gdGVzdFZhbHVlcygpIHtcblx0XHRcdHJldHVybiBPYmplY3QudmFsdWVzICE9PSBwb2x5ZmlsbDtcblx0XHR9XG5cdH0pO1xuXHRyZXR1cm4gcG9seWZpbGw7XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IHJlcXVpcmUoJy4vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0Jyk7XG5cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb24oKSB7fVxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbldpdGhSZXNldCgpIHt9XG5lbXB0eUZ1bmN0aW9uV2l0aFJlc2V0LnJlc2V0V2FybmluZ0NhY2hlID0gZW1wdHlGdW5jdGlvbjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gc2hpbShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCkge1xuICAgIGlmIChzZWNyZXQgPT09IFJlYWN0UHJvcFR5cGVzU2VjcmV0KSB7XG4gICAgICAvLyBJdCBpcyBzdGlsbCBzYWZlIHdoZW4gY2FsbGVkIGZyb20gUmVhY3QuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoXG4gICAgICAnQ2FsbGluZyBQcm9wVHlwZXMgdmFsaWRhdG9ycyBkaXJlY3RseSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBgcHJvcC10eXBlc2AgcGFja2FnZS4gJyArXG4gICAgICAnVXNlIFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcygpIHRvIGNhbGwgdGhlbS4gJyArXG4gICAgICAnUmVhZCBtb3JlIGF0IGh0dHA6Ly9mYi5tZS91c2UtY2hlY2stcHJvcC10eXBlcydcbiAgICApO1xuICAgIGVyci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIHRocm93IGVycjtcbiAgfTtcbiAgc2hpbS5pc1JlcXVpcmVkID0gc2hpbTtcbiAgZnVuY3Rpb24gZ2V0U2hpbSgpIHtcbiAgICByZXR1cm4gc2hpbTtcbiAgfTtcbiAgLy8gSW1wb3J0YW50IVxuICAvLyBLZWVwIHRoaXMgbGlzdCBpbiBzeW5jIHdpdGggcHJvZHVjdGlvbiB2ZXJzaW9uIGluIGAuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzLmpzYC5cbiAgdmFyIFJlYWN0UHJvcFR5cGVzID0ge1xuICAgIGFycmF5OiBzaGltLFxuICAgIGJpZ2ludDogc2hpbSxcbiAgICBib29sOiBzaGltLFxuICAgIGZ1bmM6IHNoaW0sXG4gICAgbnVtYmVyOiBzaGltLFxuICAgIG9iamVjdDogc2hpbSxcbiAgICBzdHJpbmc6IHNoaW0sXG4gICAgc3ltYm9sOiBzaGltLFxuXG4gICAgYW55OiBzaGltLFxuICAgIGFycmF5T2Y6IGdldFNoaW0sXG4gICAgZWxlbWVudDogc2hpbSxcbiAgICBlbGVtZW50VHlwZTogc2hpbSxcbiAgICBpbnN0YW5jZU9mOiBnZXRTaGltLFxuICAgIG5vZGU6IHNoaW0sXG4gICAgb2JqZWN0T2Y6IGdldFNoaW0sXG4gICAgb25lT2Y6IGdldFNoaW0sXG4gICAgb25lT2ZUeXBlOiBnZXRTaGltLFxuICAgIHNoYXBlOiBnZXRTaGltLFxuICAgIGV4YWN0OiBnZXRTaGltLFxuXG4gICAgY2hlY2tQcm9wVHlwZXM6IGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQsXG4gICAgcmVzZXRXYXJuaW5nQ2FjaGU6IGVtcHR5RnVuY3Rpb25cbiAgfTtcblxuICBSZWFjdFByb3BUeXBlcy5Qcm9wVHlwZXMgPSBSZWFjdFByb3BUeXBlcztcblxuICByZXR1cm4gUmVhY3RQcm9wVHlwZXM7XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgUmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgZGV2ZWxvcG1lbnQgYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgdmFyIHRocm93T25EaXJlY3RBY2Nlc3MgPSB0cnVlO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMnKShSZWFjdElzLmlzRWxlbWVudCwgdGhyb3dPbkRpcmVjdEFjY2Vzcyk7XG59IGVsc2Uge1xuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBwcm9kdWN0aW9uIGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMnKSgpO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9ICdTRUNSRVRfRE9fTk9UX1BBU1NfVEhJU19PUl9ZT1VfV0lMTF9CRV9GSVJFRCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZXNTZWNyZXQ7XG4iLCIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiByZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuLypcbiBNb2Rlcm5penIgMy4wLjBwcmUgKEN1c3RvbSBCdWlsZCkgfCBNSVRcbiovXG4ndXNlIHN0cmljdCc7dmFyIGFhPXJlcXVpcmUoXCJyZWFjdFwiKSxjYT1yZXF1aXJlKFwic2NoZWR1bGVyXCIpO2Z1bmN0aW9uIHAoYSl7Zm9yKHZhciBiPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxjPTE7Yzxhcmd1bWVudHMubGVuZ3RoO2MrKyliKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjXSk7cmV0dXJuXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgXCIrYitcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCJ9dmFyIGRhPW5ldyBTZXQsZWE9e307ZnVuY3Rpb24gZmEoYSxiKXtoYShhLGIpO2hhKGErXCJDYXB0dXJlXCIsYil9XG5mdW5jdGlvbiBoYShhLGIpe2VhW2FdPWI7Zm9yKGE9MDthPGIubGVuZ3RoO2ErKylkYS5hZGQoYlthXSl9XG52YXIgaWE9IShcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnR8fFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpLGphPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksa2E9L15bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRdWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXFwtLjAtOVxcdTAwQjdcXHUwMzAwLVxcdTAzNkZcXHUyMDNGLVxcdTIwNDBdKiQvLGxhPVxue30sbWE9e307ZnVuY3Rpb24gb2EoYSl7aWYoamEuY2FsbChtYSxhKSlyZXR1cm4hMDtpZihqYS5jYWxsKGxhLGEpKXJldHVybiExO2lmKGthLnRlc3QoYSkpcmV0dXJuIG1hW2FdPSEwO2xhW2FdPSEwO3JldHVybiExfWZ1bmN0aW9uIHBhKGEsYixjLGQpe2lmKG51bGwhPT1jJiYwPT09Yy50eXBlKXJldHVybiExO3N3aXRjaCh0eXBlb2YgYil7Y2FzZSBcImZ1bmN0aW9uXCI6Y2FzZSBcInN5bWJvbFwiOnJldHVybiEwO2Nhc2UgXCJib29sZWFuXCI6aWYoZClyZXR1cm4hMTtpZihudWxsIT09YylyZXR1cm4hYy5hY2NlcHRzQm9vbGVhbnM7YT1hLnRvTG93ZXJDYXNlKCkuc2xpY2UoMCw1KTtyZXR1cm5cImRhdGEtXCIhPT1hJiZcImFyaWEtXCIhPT1hO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gcWEoYSxiLGMsZCl7aWYobnVsbD09PWJ8fFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYnx8cGEoYSxiLGMsZCkpcmV0dXJuITA7aWYoZClyZXR1cm4hMTtpZihudWxsIT09Yylzd2l0Y2goYy50eXBlKXtjYXNlIDM6cmV0dXJuIWI7Y2FzZSA0OnJldHVybiExPT09YjtjYXNlIDU6cmV0dXJuIGlzTmFOKGIpO2Nhc2UgNjpyZXR1cm4gaXNOYU4oYil8fDE+Yn1yZXR1cm4hMX1mdW5jdGlvbiB2KGEsYixjLGQsZSxmLGcpe3RoaXMuYWNjZXB0c0Jvb2xlYW5zPTI9PT1ifHwzPT09Ynx8ND09PWI7dGhpcy5hdHRyaWJ1dGVOYW1lPWQ7dGhpcy5hdHRyaWJ1dGVOYW1lc3BhY2U9ZTt0aGlzLm11c3RVc2VQcm9wZXJ0eT1jO3RoaXMucHJvcGVydHlOYW1lPWE7dGhpcy50eXBlPWI7dGhpcy5zYW5pdGl6ZVVSTD1mO3RoaXMucmVtb3ZlRW1wdHlTdHJpbmc9Z312YXIgej17fTtcblwiY2hpbGRyZW4gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgZGVmYXVsdFZhbHVlIGRlZmF1bHRDaGVja2VkIGlubmVySFRNTCBzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmcgc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nIHN0eWxlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDAsITEsYSxudWxsLCExLCExKX0pO1tbXCJhY2NlcHRDaGFyc2V0XCIsXCJhY2NlcHQtY2hhcnNldFwiXSxbXCJjbGFzc05hbWVcIixcImNsYXNzXCJdLFtcImh0bWxGb3JcIixcImZvclwiXSxbXCJodHRwRXF1aXZcIixcImh0dHAtZXF1aXZcIl1dLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YVswXTt6W2JdPW5ldyB2KGIsMSwhMSxhWzFdLG51bGwsITEsITEpfSk7W1wiY29udGVudEVkaXRhYmxlXCIsXCJkcmFnZ2FibGVcIixcInNwZWxsQ2hlY2tcIixcInZhbHVlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDIsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7XG5bXCJhdXRvUmV2ZXJzZVwiLFwiZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZFwiLFwiZm9jdXNhYmxlXCIsXCJwcmVzZXJ2ZUFscGhhXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDIsITEsYSxudWxsLCExLCExKX0pO1wiYWxsb3dGdWxsU2NyZWVuIGFzeW5jIGF1dG9Gb2N1cyBhdXRvUGxheSBjb250cm9scyBkZWZhdWx0IGRlZmVyIGRpc2FibGVkIGRpc2FibGVQaWN0dXJlSW5QaWN0dXJlIGRpc2FibGVSZW1vdGVQbGF5YmFjayBmb3JtTm9WYWxpZGF0ZSBoaWRkZW4gbG9vcCBub01vZHVsZSBub1ZhbGlkYXRlIG9wZW4gcGxheXNJbmxpbmUgcmVhZE9ubHkgcmVxdWlyZWQgcmV2ZXJzZWQgc2NvcGVkIHNlYW1sZXNzIGl0ZW1TY29wZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSwzLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExLCExKX0pO1xuW1wiY2hlY2tlZFwiLFwibXVsdGlwbGVcIixcIm11dGVkXCIsXCJzZWxlY3RlZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSwzLCEwLGEsbnVsbCwhMSwhMSl9KTtbXCJjYXB0dXJlXCIsXCJkb3dubG9hZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSw0LCExLGEsbnVsbCwhMSwhMSl9KTtbXCJjb2xzXCIsXCJyb3dzXCIsXCJzaXplXCIsXCJzcGFuXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDYsITEsYSxudWxsLCExLCExKX0pO1tcInJvd1NwYW5cIixcInN0YXJ0XCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDUsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7dmFyIHJhPS9bXFwtOl0oW2Etel0pL2c7ZnVuY3Rpb24gc2EoYSl7cmV0dXJuIGFbMV0udG9VcHBlckNhc2UoKX1cblwiYWNjZW50LWhlaWdodCBhbGlnbm1lbnQtYmFzZWxpbmUgYXJhYmljLWZvcm0gYmFzZWxpbmUtc2hpZnQgY2FwLWhlaWdodCBjbGlwLXBhdGggY2xpcC1ydWxlIGNvbG9yLWludGVycG9sYXRpb24gY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzIGNvbG9yLXByb2ZpbGUgY29sb3ItcmVuZGVyaW5nIGRvbWluYW50LWJhc2VsaW5lIGVuYWJsZS1iYWNrZ3JvdW5kIGZpbGwtb3BhY2l0eSBmaWxsLXJ1bGUgZmxvb2QtY29sb3IgZmxvb2Qtb3BhY2l0eSBmb250LWZhbWlseSBmb250LXNpemUgZm9udC1zaXplLWFkanVzdCBmb250LXN0cmV0Y2ggZm9udC1zdHlsZSBmb250LXZhcmlhbnQgZm9udC13ZWlnaHQgZ2x5cGgtbmFtZSBnbHlwaC1vcmllbnRhdGlvbi1ob3Jpem9udGFsIGdseXBoLW9yaWVudGF0aW9uLXZlcnRpY2FsIGhvcml6LWFkdi14IGhvcml6LW9yaWdpbi14IGltYWdlLXJlbmRlcmluZyBsZXR0ZXItc3BhY2luZyBsaWdodGluZy1jb2xvciBtYXJrZXItZW5kIG1hcmtlci1taWQgbWFya2VyLXN0YXJ0IG92ZXJsaW5lLXBvc2l0aW9uIG92ZXJsaW5lLXRoaWNrbmVzcyBwYWludC1vcmRlciBwYW5vc2UtMSBwb2ludGVyLWV2ZW50cyByZW5kZXJpbmctaW50ZW50IHNoYXBlLXJlbmRlcmluZyBzdG9wLWNvbG9yIHN0b3Atb3BhY2l0eSBzdHJpa2V0aHJvdWdoLXBvc2l0aW9uIHN0cmlrZXRocm91Z2gtdGhpY2tuZXNzIHN0cm9rZS1kYXNoYXJyYXkgc3Ryb2tlLWRhc2hvZmZzZXQgc3Ryb2tlLWxpbmVjYXAgc3Ryb2tlLWxpbmVqb2luIHN0cm9rZS1taXRlcmxpbWl0IHN0cm9rZS1vcGFjaXR5IHN0cm9rZS13aWR0aCB0ZXh0LWFuY2hvciB0ZXh0LWRlY29yYXRpb24gdGV4dC1yZW5kZXJpbmcgdW5kZXJsaW5lLXBvc2l0aW9uIHVuZGVybGluZS10aGlja25lc3MgdW5pY29kZS1iaWRpIHVuaWNvZGUtcmFuZ2UgdW5pdHMtcGVyLWVtIHYtYWxwaGFiZXRpYyB2LWhhbmdpbmcgdi1pZGVvZ3JhcGhpYyB2LW1hdGhlbWF0aWNhbCB2ZWN0b3ItZWZmZWN0IHZlcnQtYWR2LXkgdmVydC1vcmlnaW4teCB2ZXJ0LW9yaWdpbi15IHdvcmQtc3BhY2luZyB3cml0aW5nLW1vZGUgeG1sbnM6eGxpbmsgeC1oZWlnaHRcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UocmEsXG5zYSk7eltiXT1uZXcgdihiLDEsITEsYSxudWxsLCExLCExKX0pO1wieGxpbms6YWN0dWF0ZSB4bGluazphcmNyb2xlIHhsaW5rOnJvbGUgeGxpbms6c2hvdyB4bGluazp0aXRsZSB4bGluazp0eXBlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKHJhLHNhKTt6W2JdPW5ldyB2KGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLCExLCExKX0pO1tcInhtbDpiYXNlXCIsXCJ4bWw6bGFuZ1wiLFwieG1sOnNwYWNlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKHJhLHNhKTt6W2JdPW5ldyB2KGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIsITEsITEpfSk7W1widGFiSW5kZXhcIixcImNyb3NzT3JpZ2luXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDEsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7XG56LnhsaW5rSHJlZj1uZXcgdihcInhsaW5rSHJlZlwiLDEsITEsXCJ4bGluazpocmVmXCIsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsITAsITEpO1tcInNyY1wiLFwiaHJlZlwiLFwiYWN0aW9uXCIsXCJmb3JtQWN0aW9uXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDEsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITAsITApfSk7XG5mdW5jdGlvbiB0YShhLGIsYyxkKXt2YXIgZT16Lmhhc093blByb3BlcnR5KGIpP3pbYl06bnVsbDtpZihudWxsIT09ZT8wIT09ZS50eXBlOmR8fCEoMjxiLmxlbmd0aCl8fFwib1wiIT09YlswXSYmXCJPXCIhPT1iWzBdfHxcIm5cIiE9PWJbMV0mJlwiTlwiIT09YlsxXSlxYShiLGMsZSxkKSYmKGM9bnVsbCksZHx8bnVsbD09PWU/b2EoYikmJihudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTphLnNldEF0dHJpYnV0ZShiLFwiXCIrYykpOmUubXVzdFVzZVByb3BlcnR5P2FbZS5wcm9wZXJ0eU5hbWVdPW51bGw9PT1jPzM9PT1lLnR5cGU/ITE6XCJcIjpjOihiPWUuYXR0cmlidXRlTmFtZSxkPWUuYXR0cmlidXRlTmFtZXNwYWNlLG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOihlPWUudHlwZSxjPTM9PT1lfHw0PT09ZSYmITA9PT1jP1wiXCI6XCJcIitjLGQ/YS5zZXRBdHRyaWJ1dGVOUyhkLGIsYyk6YS5zZXRBdHRyaWJ1dGUoYixjKSkpfVxudmFyIHVhPWFhLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVELHZhPVN5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpLHdhPVN5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIikseWE9U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpLHphPVN5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKSxBYT1TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIiksQmE9U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpLENhPVN5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpLERhPVN5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKSxFYT1TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIiksRmE9U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlX2xpc3RcIiksR2E9U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIiksSGE9U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik7U3ltYm9sLmZvcihcInJlYWN0LnNjb3BlXCIpO1N5bWJvbC5mb3IoXCJyZWFjdC5kZWJ1Z190cmFjZV9tb2RlXCIpO1xudmFyIElhPVN5bWJvbC5mb3IoXCJyZWFjdC5vZmZzY3JlZW5cIik7U3ltYm9sLmZvcihcInJlYWN0LmxlZ2FjeV9oaWRkZW5cIik7U3ltYm9sLmZvcihcInJlYWN0LmNhY2hlXCIpO1N5bWJvbC5mb3IoXCJyZWFjdC50cmFjaW5nX21hcmtlclwiKTt2YXIgSmE9U3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIEthKGEpe2lmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT1KYSYmYVtKYV18fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH12YXIgQT1PYmplY3QuYXNzaWduLExhO2Z1bmN0aW9uIE1hKGEpe2lmKHZvaWQgMD09PUxhKXRyeXt0aHJvdyBFcnJvcigpO31jYXRjaChjKXt2YXIgYj1jLnN0YWNrLnRyaW0oKS5tYXRjaCgvXFxuKCAqKGF0ICk/KS8pO0xhPWImJmJbMV18fFwiXCJ9cmV0dXJuXCJcXG5cIitMYSthfXZhciBOYT0hMTtcbmZ1bmN0aW9uIE9hKGEsYil7aWYoIWF8fE5hKXJldHVyblwiXCI7TmE9ITA7dmFyIGM9RXJyb3IucHJlcGFyZVN0YWNrVHJhY2U7RXJyb3IucHJlcGFyZVN0YWNrVHJhY2U9dm9pZCAwO3RyeXtpZihiKWlmKGI9ZnVuY3Rpb24oKXt0aHJvdyBFcnJvcigpO30sT2JqZWN0LmRlZmluZVByb3BlcnR5KGIucHJvdG90eXBlLFwicHJvcHNcIix7c2V0OmZ1bmN0aW9uKCl7dGhyb3cgRXJyb3IoKTt9fSksXCJvYmplY3RcIj09PXR5cGVvZiBSZWZsZWN0JiZSZWZsZWN0LmNvbnN0cnVjdCl7dHJ5e1JlZmxlY3QuY29uc3RydWN0KGIsW10pfWNhdGNoKGwpe3ZhciBkPWx9UmVmbGVjdC5jb25zdHJ1Y3QoYSxbXSxiKX1lbHNle3RyeXtiLmNhbGwoKX1jYXRjaChsKXtkPWx9YS5jYWxsKGIucHJvdG90eXBlKX1lbHNle3RyeXt0aHJvdyBFcnJvcigpO31jYXRjaChsKXtkPWx9YSgpfX1jYXRjaChsKXtpZihsJiZkJiZcInN0cmluZ1wiPT09dHlwZW9mIGwuc3RhY2spe2Zvcih2YXIgZT1sLnN0YWNrLnNwbGl0KFwiXFxuXCIpLFxuZj1kLnN0YWNrLnNwbGl0KFwiXFxuXCIpLGc9ZS5sZW5ndGgtMSxoPWYubGVuZ3RoLTE7MTw9ZyYmMDw9aCYmZVtnXSE9PWZbaF07KWgtLTtmb3IoOzE8PWcmJjA8PWg7Zy0tLGgtLSlpZihlW2ddIT09ZltoXSl7aWYoMSE9PWd8fDEhPT1oKXtkbyBpZihnLS0saC0tLDA+aHx8ZVtnXSE9PWZbaF0pe3ZhciBrPVwiXFxuXCIrZVtnXS5yZXBsYWNlKFwiIGF0IG5ldyBcIixcIiBhdCBcIik7YS5kaXNwbGF5TmFtZSYmay5pbmNsdWRlcyhcIjxhbm9ueW1vdXM+XCIpJiYoaz1rLnJlcGxhY2UoXCI8YW5vbnltb3VzPlwiLGEuZGlzcGxheU5hbWUpKTtyZXR1cm4ga313aGlsZSgxPD1nJiYwPD1oKX1icmVha319fWZpbmFsbHl7TmE9ITEsRXJyb3IucHJlcGFyZVN0YWNrVHJhY2U9Y31yZXR1cm4oYT1hP2EuZGlzcGxheU5hbWV8fGEubmFtZTpcIlwiKT9NYShhKTpcIlwifVxuZnVuY3Rpb24gUGEoYSl7c3dpdGNoKGEudGFnKXtjYXNlIDU6cmV0dXJuIE1hKGEudHlwZSk7Y2FzZSAxNjpyZXR1cm4gTWEoXCJMYXp5XCIpO2Nhc2UgMTM6cmV0dXJuIE1hKFwiU3VzcGVuc2VcIik7Y2FzZSAxOTpyZXR1cm4gTWEoXCJTdXNwZW5zZUxpc3RcIik7Y2FzZSAwOmNhc2UgMjpjYXNlIDE1OnJldHVybiBhPU9hKGEudHlwZSwhMSksYTtjYXNlIDExOnJldHVybiBhPU9hKGEudHlwZS5yZW5kZXIsITEpLGE7Y2FzZSAxOnJldHVybiBhPU9hKGEudHlwZSwhMCksYTtkZWZhdWx0OnJldHVyblwiXCJ9fVxuZnVuY3Rpb24gUWEoYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gYS5kaXNwbGF5TmFtZXx8YS5uYW1lfHxudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlyZXR1cm4gYTtzd2l0Y2goYSl7Y2FzZSB5YTpyZXR1cm5cIkZyYWdtZW50XCI7Y2FzZSB3YTpyZXR1cm5cIlBvcnRhbFwiO2Nhc2UgQWE6cmV0dXJuXCJQcm9maWxlclwiO2Nhc2UgemE6cmV0dXJuXCJTdHJpY3RNb2RlXCI7Y2FzZSBFYTpyZXR1cm5cIlN1c3BlbnNlXCI7Y2FzZSBGYTpyZXR1cm5cIlN1c3BlbnNlTGlzdFwifWlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBDYTpyZXR1cm4oYS5kaXNwbGF5TmFtZXx8XCJDb250ZXh0XCIpK1wiLkNvbnN1bWVyXCI7Y2FzZSBCYTpyZXR1cm4oYS5fY29udGV4dC5kaXNwbGF5TmFtZXx8XCJDb250ZXh0XCIpK1wiLlByb3ZpZGVyXCI7Y2FzZSBEYTp2YXIgYj1hLnJlbmRlcjthPWEuZGlzcGxheU5hbWU7YXx8KGE9Yi5kaXNwbGF5TmFtZXx8XG5iLm5hbWV8fFwiXCIsYT1cIlwiIT09YT9cIkZvcndhcmRSZWYoXCIrYStcIilcIjpcIkZvcndhcmRSZWZcIik7cmV0dXJuIGE7Y2FzZSBHYTpyZXR1cm4gYj1hLmRpc3BsYXlOYW1lfHxudWxsLG51bGwhPT1iP2I6UWEoYS50eXBlKXx8XCJNZW1vXCI7Y2FzZSBIYTpiPWEuX3BheWxvYWQ7YT1hLl9pbml0O3RyeXtyZXR1cm4gUWEoYShiKSl9Y2F0Y2goYyl7fX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFJhKGEpe3ZhciBiPWEudHlwZTtzd2l0Y2goYS50YWcpe2Nhc2UgMjQ6cmV0dXJuXCJDYWNoZVwiO2Nhc2UgOTpyZXR1cm4oYi5kaXNwbGF5TmFtZXx8XCJDb250ZXh0XCIpK1wiLkNvbnN1bWVyXCI7Y2FzZSAxMDpyZXR1cm4oYi5fY29udGV4dC5kaXNwbGF5TmFtZXx8XCJDb250ZXh0XCIpK1wiLlByb3ZpZGVyXCI7Y2FzZSAxODpyZXR1cm5cIkRlaHlkcmF0ZWRGcmFnbWVudFwiO2Nhc2UgMTE6cmV0dXJuIGE9Yi5yZW5kZXIsYT1hLmRpc3BsYXlOYW1lfHxhLm5hbWV8fFwiXCIsYi5kaXNwbGF5TmFtZXx8KFwiXCIhPT1hP1wiRm9yd2FyZFJlZihcIithK1wiKVwiOlwiRm9yd2FyZFJlZlwiKTtjYXNlIDc6cmV0dXJuXCJGcmFnbWVudFwiO2Nhc2UgNTpyZXR1cm4gYjtjYXNlIDQ6cmV0dXJuXCJQb3J0YWxcIjtjYXNlIDM6cmV0dXJuXCJSb290XCI7Y2FzZSA2OnJldHVyblwiVGV4dFwiO2Nhc2UgMTY6cmV0dXJuIFFhKGIpO2Nhc2UgODpyZXR1cm4gYj09PXphP1wiU3RyaWN0TW9kZVwiOlwiTW9kZVwiO2Nhc2UgMjI6cmV0dXJuXCJPZmZzY3JlZW5cIjtcbmNhc2UgMTI6cmV0dXJuXCJQcm9maWxlclwiO2Nhc2UgMjE6cmV0dXJuXCJTY29wZVwiO2Nhc2UgMTM6cmV0dXJuXCJTdXNwZW5zZVwiO2Nhc2UgMTk6cmV0dXJuXCJTdXNwZW5zZUxpc3RcIjtjYXNlIDI1OnJldHVyblwiVHJhY2luZ01hcmtlclwiO2Nhc2UgMTpjYXNlIDA6Y2FzZSAxNzpjYXNlIDI6Y2FzZSAxNDpjYXNlIDE1OmlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXJldHVybiBiLmRpc3BsYXlOYW1lfHxiLm5hbWV8fG51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBiKXJldHVybiBifXJldHVybiBudWxsfWZ1bmN0aW9uIFNhKGEpe3N3aXRjaCh0eXBlb2YgYSl7Y2FzZSBcImJvb2xlYW5cIjpjYXNlIFwibnVtYmVyXCI6Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJ1bmRlZmluZWRcIjpyZXR1cm4gYTtjYXNlIFwib2JqZWN0XCI6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm5cIlwifX1cbmZ1bmN0aW9uIFRhKGEpe3ZhciBiPWEudHlwZTtyZXR1cm4oYT1hLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09YS50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09Ynx8XCJyYWRpb1wiPT09Yil9XG5mdW5jdGlvbiBVYShhKXt2YXIgYj1UYShhKT9cImNoZWNrZWRcIjpcInZhbHVlXCIsYz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGEuY29uc3RydWN0b3IucHJvdG90eXBlLGIpLGQ9XCJcIithW2JdO2lmKCFhLmhhc093blByb3BlcnR5KGIpJiZcInVuZGVmaW5lZFwiIT09dHlwZW9mIGMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmdldCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuc2V0KXt2YXIgZT1jLmdldCxmPWMuc2V0O09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2NvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZS5jYWxsKHRoaXMpfSxzZXQ6ZnVuY3Rpb24oYSl7ZD1cIlwiK2E7Zi5jYWxsKHRoaXMsYSl9fSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7ZW51bWVyYWJsZTpjLmVudW1lcmFibGV9KTtyZXR1cm57Z2V0VmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gZH0sc2V0VmFsdWU6ZnVuY3Rpb24oYSl7ZD1cIlwiK2F9LHN0b3BUcmFja2luZzpmdW5jdGlvbigpe2EuX3ZhbHVlVHJhY2tlcj1cbm51bGw7ZGVsZXRlIGFbYl19fX19ZnVuY3Rpb24gVmEoYSl7YS5fdmFsdWVUcmFja2VyfHwoYS5fdmFsdWVUcmFja2VyPVVhKGEpKX1mdW5jdGlvbiBXYShhKXtpZighYSlyZXR1cm4hMTt2YXIgYj1hLl92YWx1ZVRyYWNrZXI7aWYoIWIpcmV0dXJuITA7dmFyIGM9Yi5nZXRWYWx1ZSgpO3ZhciBkPVwiXCI7YSYmKGQ9VGEoYSk/YS5jaGVja2VkP1widHJ1ZVwiOlwiZmFsc2VcIjphLnZhbHVlKTthPWQ7cmV0dXJuIGEhPT1jPyhiLnNldFZhbHVlKGEpLCEwKTohMX1mdW5jdGlvbiBYYShhKXthPWF8fChcInVuZGVmaW5lZFwiIT09dHlwZW9mIGRvY3VtZW50P2RvY3VtZW50OnZvaWQgMCk7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhKXJldHVybiBudWxsO3RyeXtyZXR1cm4gYS5hY3RpdmVFbGVtZW50fHxhLmJvZHl9Y2F0Y2goYil7cmV0dXJuIGEuYm9keX19XG5mdW5jdGlvbiBZYShhLGIpe3ZhciBjPWIuY2hlY2tlZDtyZXR1cm4gQSh7fSxiLHtkZWZhdWx0Q2hlY2tlZDp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCx2YWx1ZTp2b2lkIDAsY2hlY2tlZDpudWxsIT1jP2M6YS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkfSl9ZnVuY3Rpb24gWmEoYSxiKXt2YXIgYz1udWxsPT1iLmRlZmF1bHRWYWx1ZT9cIlwiOmIuZGVmYXVsdFZhbHVlLGQ9bnVsbCE9Yi5jaGVja2VkP2IuY2hlY2tlZDpiLmRlZmF1bHRDaGVja2VkO2M9U2EobnVsbCE9Yi52YWx1ZT9iLnZhbHVlOmMpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbENoZWNrZWQ6ZCxpbml0aWFsVmFsdWU6Yyxjb250cm9sbGVkOlwiY2hlY2tib3hcIj09PWIudHlwZXx8XCJyYWRpb1wiPT09Yi50eXBlP251bGwhPWIuY2hlY2tlZDpudWxsIT1iLnZhbHVlfX1mdW5jdGlvbiBhYihhLGIpe2I9Yi5jaGVja2VkO251bGwhPWImJnRhKGEsXCJjaGVja2VkXCIsYiwhMSl9XG5mdW5jdGlvbiBiYihhLGIpe2FiKGEsYik7dmFyIGM9U2EoYi52YWx1ZSksZD1iLnR5cGU7aWYobnVsbCE9YylpZihcIm51bWJlclwiPT09ZCl7aWYoMD09PWMmJlwiXCI9PT1hLnZhbHVlfHxhLnZhbHVlIT1jKWEudmFsdWU9XCJcIitjfWVsc2UgYS52YWx1ZSE9PVwiXCIrYyYmKGEudmFsdWU9XCJcIitjKTtlbHNlIGlmKFwic3VibWl0XCI9PT1kfHxcInJlc2V0XCI9PT1kKXthLnJlbW92ZUF0dHJpYnV0ZShcInZhbHVlXCIpO3JldHVybn1iLmhhc093blByb3BlcnR5KFwidmFsdWVcIik/Y2IoYSxiLnR5cGUsYyk6Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSYmY2IoYSxiLnR5cGUsU2EoYi5kZWZhdWx0VmFsdWUpKTtudWxsPT1iLmNoZWNrZWQmJm51bGwhPWIuZGVmYXVsdENoZWNrZWQmJihhLmRlZmF1bHRDaGVja2VkPSEhYi5kZWZhdWx0Q2hlY2tlZCl9XG5mdW5jdGlvbiBkYihhLGIsYyl7aWYoYi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpfHxiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpKXt2YXIgZD1iLnR5cGU7aWYoIShcInN1Ym1pdFwiIT09ZCYmXCJyZXNldFwiIT09ZHx8dm9pZCAwIT09Yi52YWx1ZSYmbnVsbCE9PWIudmFsdWUpKXJldHVybjtiPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTtjfHxiPT09YS52YWx1ZXx8KGEudmFsdWU9Yik7YS5kZWZhdWx0VmFsdWU9Yn1jPWEubmFtZTtcIlwiIT09YyYmKGEubmFtZT1cIlwiKTthLmRlZmF1bHRDaGVja2VkPSEhYS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkO1wiXCIhPT1jJiYoYS5uYW1lPWMpfVxuZnVuY3Rpb24gY2IoYSxiLGMpe2lmKFwibnVtYmVyXCIhPT1ifHxYYShhLm93bmVyRG9jdW1lbnQpIT09YSludWxsPT1jP2EuZGVmYXVsdFZhbHVlPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTphLmRlZmF1bHRWYWx1ZSE9PVwiXCIrYyYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrYyl9dmFyIGViPUFycmF5LmlzQXJyYXk7XG5mdW5jdGlvbiBmYihhLGIsYyxkKXthPWEub3B0aW9ucztpZihiKXtiPXt9O2Zvcih2YXIgZT0wO2U8Yy5sZW5ndGg7ZSsrKWJbXCIkXCIrY1tlXV09ITA7Zm9yKGM9MDtjPGEubGVuZ3RoO2MrKyllPWIuaGFzT3duUHJvcGVydHkoXCIkXCIrYVtjXS52YWx1ZSksYVtjXS5zZWxlY3RlZCE9PWUmJihhW2NdLnNlbGVjdGVkPWUpLGUmJmQmJihhW2NdLmRlZmF1bHRTZWxlY3RlZD0hMCl9ZWxzZXtjPVwiXCIrU2EoYyk7Yj1udWxsO2ZvcihlPTA7ZTxhLmxlbmd0aDtlKyspe2lmKGFbZV0udmFsdWU9PT1jKXthW2VdLnNlbGVjdGVkPSEwO2QmJihhW2VdLmRlZmF1bHRTZWxlY3RlZD0hMCk7cmV0dXJufW51bGwhPT1ifHxhW2VdLmRpc2FibGVkfHwoYj1hW2VdKX1udWxsIT09YiYmKGIuc2VsZWN0ZWQ9ITApfX1cbmZ1bmN0aW9uIGdiKGEsYil7aWYobnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCl0aHJvdyBFcnJvcihwKDkxKSk7cmV0dXJuIEEoe30sYix7dmFsdWU6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsY2hpbGRyZW46XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlfSl9ZnVuY3Rpb24gaGIoYSxiKXt2YXIgYz1iLnZhbHVlO2lmKG51bGw9PWMpe2M9Yi5jaGlsZHJlbjtiPWIuZGVmYXVsdFZhbHVlO2lmKG51bGwhPWMpe2lmKG51bGwhPWIpdGhyb3cgRXJyb3IocCg5MikpO2lmKGViKGMpKXtpZigxPGMubGVuZ3RoKXRocm93IEVycm9yKHAoOTMpKTtjPWNbMF19Yj1jfW51bGw9PWImJihiPVwiXCIpO2M9Yn1hLl93cmFwcGVyU3RhdGU9e2luaXRpYWxWYWx1ZTpTYShjKX19XG5mdW5jdGlvbiBpYihhLGIpe3ZhciBjPVNhKGIudmFsdWUpLGQ9U2EoYi5kZWZhdWx0VmFsdWUpO251bGwhPWMmJihjPVwiXCIrYyxjIT09YS52YWx1ZSYmKGEudmFsdWU9YyksbnVsbD09Yi5kZWZhdWx0VmFsdWUmJmEuZGVmYXVsdFZhbHVlIT09YyYmKGEuZGVmYXVsdFZhbHVlPWMpKTtudWxsIT1kJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitkKX1mdW5jdGlvbiBqYihhKXt2YXIgYj1hLnRleHRDb250ZW50O2I9PT1hLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlJiZcIlwiIT09YiYmbnVsbCE9PWImJihhLnZhbHVlPWIpfWZ1bmN0aW9uIGtiKGEpe3N3aXRjaChhKXtjYXNlIFwic3ZnXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiO2Nhc2UgXCJtYXRoXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCI7ZGVmYXVsdDpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIn19XG5mdW5jdGlvbiBsYihhLGIpe3JldHVybiBudWxsPT1hfHxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWE/a2IoYik6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPT09YSYmXCJmb3JlaWduT2JqZWN0XCI9PT1iP1wiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiOmF9XG52YXIgbWIsbmI9ZnVuY3Rpb24oYSl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBNU0FwcCYmTVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24/ZnVuY3Rpb24oYixjLGQsZSl7TVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24oZnVuY3Rpb24oKXtyZXR1cm4gYShiLGMsZCxlKX0pfTphfShmdW5jdGlvbihhLGIpe2lmKFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiE9PWEubmFtZXNwYWNlVVJJfHxcImlubmVySFRNTFwiaW4gYSlhLmlubmVySFRNTD1iO2Vsc2V7bWI9bWJ8fGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7bWIuaW5uZXJIVE1MPVwiPHN2Zz5cIitiLnZhbHVlT2YoKS50b1N0cmluZygpK1wiPC9zdmc+XCI7Zm9yKGI9bWIuZmlyc3RDaGlsZDthLmZpcnN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKTtmb3IoO2IuZmlyc3RDaGlsZDspYS5hcHBlbmRDaGlsZChiLmZpcnN0Q2hpbGQpfX0pO1xuZnVuY3Rpb24gb2IoYSxiKXtpZihiKXt2YXIgYz1hLmZpcnN0Q2hpbGQ7aWYoYyYmYz09PWEubGFzdENoaWxkJiYzPT09Yy5ub2RlVHlwZSl7Yy5ub2RlVmFsdWU9YjtyZXR1cm59fWEudGV4dENvbnRlbnQ9Yn1cbnZhciBwYj17YW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6ITAsYXNwZWN0UmF0aW86ITAsYm9yZGVySW1hZ2VPdXRzZXQ6ITAsYm9yZGVySW1hZ2VTbGljZTohMCxib3JkZXJJbWFnZVdpZHRoOiEwLGJveEZsZXg6ITAsYm94RmxleEdyb3VwOiEwLGJveE9yZGluYWxHcm91cDohMCxjb2x1bW5Db3VudDohMCxjb2x1bW5zOiEwLGZsZXg6ITAsZmxleEdyb3c6ITAsZmxleFBvc2l0aXZlOiEwLGZsZXhTaHJpbms6ITAsZmxleE5lZ2F0aXZlOiEwLGZsZXhPcmRlcjohMCxncmlkQXJlYTohMCxncmlkUm93OiEwLGdyaWRSb3dFbmQ6ITAsZ3JpZFJvd1NwYW46ITAsZ3JpZFJvd1N0YXJ0OiEwLGdyaWRDb2x1bW46ITAsZ3JpZENvbHVtbkVuZDohMCxncmlkQ29sdW1uU3BhbjohMCxncmlkQ29sdW1uU3RhcnQ6ITAsZm9udFdlaWdodDohMCxsaW5lQ2xhbXA6ITAsbGluZUhlaWdodDohMCxvcGFjaXR5OiEwLG9yZGVyOiEwLG9ycGhhbnM6ITAsdGFiU2l6ZTohMCx3aWRvd3M6ITAsekluZGV4OiEwLFxuem9vbTohMCxmaWxsT3BhY2l0eTohMCxmbG9vZE9wYWNpdHk6ITAsc3RvcE9wYWNpdHk6ITAsc3Ryb2tlRGFzaGFycmF5OiEwLHN0cm9rZURhc2hvZmZzZXQ6ITAsc3Ryb2tlTWl0ZXJsaW1pdDohMCxzdHJva2VPcGFjaXR5OiEwLHN0cm9rZVdpZHRoOiEwfSxxYj1bXCJXZWJraXRcIixcIm1zXCIsXCJNb3pcIixcIk9cIl07T2JqZWN0LmtleXMocGIpLmZvckVhY2goZnVuY3Rpb24oYSl7cWIuZm9yRWFjaChmdW5jdGlvbihiKXtiPWIrYS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSthLnN1YnN0cmluZygxKTtwYltiXT1wYlthXX0pfSk7ZnVuY3Rpb24gcmIoYSxiLGMpe3JldHVybiBudWxsPT1ifHxcImJvb2xlYW5cIj09PXR5cGVvZiBifHxcIlwiPT09Yj9cIlwiOmN8fFwibnVtYmVyXCIhPT10eXBlb2YgYnx8MD09PWJ8fHBiLmhhc093blByb3BlcnR5KGEpJiZwYlthXT8oXCJcIitiKS50cmltKCk6YitcInB4XCJ9XG5mdW5jdGlvbiBzYihhLGIpe2E9YS5zdHlsZTtmb3IodmFyIGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD0wPT09Yy5pbmRleE9mKFwiLS1cIiksZT1yYihjLGJbY10sZCk7XCJmbG9hdFwiPT09YyYmKGM9XCJjc3NGbG9hdFwiKTtkP2Euc2V0UHJvcGVydHkoYyxlKTphW2NdPWV9fXZhciB0Yj1BKHttZW51aXRlbTohMH0se2FyZWE6ITAsYmFzZTohMCxicjohMCxjb2w6ITAsZW1iZWQ6ITAsaHI6ITAsaW1nOiEwLGlucHV0OiEwLGtleWdlbjohMCxsaW5rOiEwLG1ldGE6ITAscGFyYW06ITAsc291cmNlOiEwLHRyYWNrOiEwLHdicjohMH0pO1xuZnVuY3Rpb24gdWIoYSxiKXtpZihiKXtpZih0YlthXSYmKG51bGwhPWIuY2hpbGRyZW58fG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpKXRocm93IEVycm9yKHAoMTM3LGEpKTtpZihudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKXtpZihudWxsIT1iLmNoaWxkcmVuKXRocm93IEVycm9yKHAoNjApKTtpZihcIm9iamVjdFwiIT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUx8fCEoXCJfX2h0bWxcImluIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpKXRocm93IEVycm9yKHAoNjEpKTt9aWYobnVsbCE9Yi5zdHlsZSYmXCJvYmplY3RcIiE9PXR5cGVvZiBiLnN0eWxlKXRocm93IEVycm9yKHAoNjIpKTt9fVxuZnVuY3Rpb24gdmIoYSxiKXtpZigtMT09PWEuaW5kZXhPZihcIi1cIikpcmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBiLmlzO3N3aXRjaChhKXtjYXNlIFwiYW5ub3RhdGlvbi14bWxcIjpjYXNlIFwiY29sb3ItcHJvZmlsZVwiOmNhc2UgXCJmb250LWZhY2VcIjpjYXNlIFwiZm9udC1mYWNlLXNyY1wiOmNhc2UgXCJmb250LWZhY2UtdXJpXCI6Y2FzZSBcImZvbnQtZmFjZS1mb3JtYXRcIjpjYXNlIFwiZm9udC1mYWNlLW5hbWVcIjpjYXNlIFwibWlzc2luZy1nbHlwaFwiOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITB9fXZhciB3Yj1udWxsO2Z1bmN0aW9uIHhiKGEpe2E9YS50YXJnZXR8fGEuc3JjRWxlbWVudHx8d2luZG93O2EuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQmJihhPWEuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQpO3JldHVybiAzPT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YX12YXIgeWI9bnVsbCx6Yj1udWxsLEFiPW51bGw7XG5mdW5jdGlvbiBCYihhKXtpZihhPUNiKGEpKXtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgeWIpdGhyb3cgRXJyb3IocCgyODApKTt2YXIgYj1hLnN0YXRlTm9kZTtiJiYoYj1EYihiKSx5YihhLnN0YXRlTm9kZSxhLnR5cGUsYikpfX1mdW5jdGlvbiBFYihhKXt6Yj9BYj9BYi5wdXNoKGEpOkFiPVthXTp6Yj1hfWZ1bmN0aW9uIEZiKCl7aWYoemIpe3ZhciBhPXpiLGI9QWI7QWI9emI9bnVsbDtCYihhKTtpZihiKWZvcihhPTA7YTxiLmxlbmd0aDthKyspQmIoYlthXSl9fWZ1bmN0aW9uIEdiKGEsYil7cmV0dXJuIGEoYil9ZnVuY3Rpb24gSGIoKXt9dmFyIEliPSExO2Z1bmN0aW9uIEpiKGEsYixjKXtpZihJYilyZXR1cm4gYShiLGMpO0liPSEwO3RyeXtyZXR1cm4gR2IoYSxiLGMpfWZpbmFsbHl7aWYoSWI9ITEsbnVsbCE9PXpifHxudWxsIT09QWIpSGIoKSxGYigpfX1cbmZ1bmN0aW9uIEtiKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7aWYobnVsbD09PWMpcmV0dXJuIG51bGw7dmFyIGQ9RGIoYyk7aWYobnVsbD09PWQpcmV0dXJuIG51bGw7Yz1kW2JdO2E6c3dpdGNoKGIpe2Nhc2UgXCJvbkNsaWNrXCI6Y2FzZSBcIm9uQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tcIjpjYXNlIFwib25Eb3VibGVDbGlja0NhcHR1cmVcIjpjYXNlIFwib25Nb3VzZURvd25cIjpjYXNlIFwib25Nb3VzZURvd25DYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlVXBcIjpjYXNlIFwib25Nb3VzZVVwQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRW50ZXJcIjooZD0hZC5kaXNhYmxlZCl8fChhPWEudHlwZSxkPSEoXCJidXR0b25cIj09PWF8fFwiaW5wdXRcIj09PWF8fFwic2VsZWN0XCI9PT1hfHxcInRleHRhcmVhXCI9PT1hKSk7YT0hZDticmVhayBhO2RlZmF1bHQ6YT0hMX1pZihhKXJldHVybiBudWxsO2lmKGMmJlwiZnVuY3Rpb25cIiE9PVxudHlwZW9mIGMpdGhyb3cgRXJyb3IocCgyMzEsYix0eXBlb2YgYykpO3JldHVybiBjfXZhciBMYj0hMTtpZihpYSl0cnl7dmFyIE1iPXt9O09iamVjdC5kZWZpbmVQcm9wZXJ0eShNYixcInBhc3NpdmVcIix7Z2V0OmZ1bmN0aW9uKCl7TGI9ITB9fSk7d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJ0ZXN0XCIsTWIsTWIpO3dpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwidGVzdFwiLE1iLE1iKX1jYXRjaChhKXtMYj0hMX1mdW5jdGlvbiBOYihhLGIsYyxkLGUsZixnLGgsayl7dmFyIGw9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDMpO3RyeXtiLmFwcGx5KGMsbCl9Y2F0Y2gobSl7dGhpcy5vbkVycm9yKG0pfX12YXIgT2I9ITEsUGI9bnVsbCxRYj0hMSxSYj1udWxsLFNiPXtvbkVycm9yOmZ1bmN0aW9uKGEpe09iPSEwO1BiPWF9fTtmdW5jdGlvbiBUYihhLGIsYyxkLGUsZixnLGgsayl7T2I9ITE7UGI9bnVsbDtOYi5hcHBseShTYixhcmd1bWVudHMpfVxuZnVuY3Rpb24gVWIoYSxiLGMsZCxlLGYsZyxoLGspe1RiLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtpZihPYil7aWYoT2Ipe3ZhciBsPVBiO09iPSExO1BiPW51bGx9ZWxzZSB0aHJvdyBFcnJvcihwKDE5OCkpO1FifHwoUWI9ITAsUmI9bCl9fWZ1bmN0aW9uIFZiKGEpe3ZhciBiPWEsYz1hO2lmKGEuYWx0ZXJuYXRlKWZvcig7Yi5yZXR1cm47KWI9Yi5yZXR1cm47ZWxzZXthPWI7ZG8gYj1hLDAhPT0oYi5mbGFncyY0MDk4KSYmKGM9Yi5yZXR1cm4pLGE9Yi5yZXR1cm47d2hpbGUoYSl9cmV0dXJuIDM9PT1iLnRhZz9jOm51bGx9ZnVuY3Rpb24gV2IoYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9YS5tZW1vaXplZFN0YXRlO251bGw9PT1iJiYoYT1hLmFsdGVybmF0ZSxudWxsIT09YSYmKGI9YS5tZW1vaXplZFN0YXRlKSk7aWYobnVsbCE9PWIpcmV0dXJuIGIuZGVoeWRyYXRlZH1yZXR1cm4gbnVsbH1mdW5jdGlvbiBYYihhKXtpZihWYihhKSE9PWEpdGhyb3cgRXJyb3IocCgxODgpKTt9XG5mdW5jdGlvbiBZYihhKXt2YXIgYj1hLmFsdGVybmF0ZTtpZighYil7Yj1WYihhKTtpZihudWxsPT09Yil0aHJvdyBFcnJvcihwKDE4OCkpO3JldHVybiBiIT09YT9udWxsOmF9Zm9yKHZhciBjPWEsZD1iOzspe3ZhciBlPWMucmV0dXJuO2lmKG51bGw9PT1lKWJyZWFrO3ZhciBmPWUuYWx0ZXJuYXRlO2lmKG51bGw9PT1mKXtkPWUucmV0dXJuO2lmKG51bGwhPT1kKXtjPWQ7Y29udGludWV9YnJlYWt9aWYoZS5jaGlsZD09PWYuY2hpbGQpe2ZvcihmPWUuY2hpbGQ7Zjspe2lmKGY9PT1jKXJldHVybiBYYihlKSxhO2lmKGY9PT1kKXJldHVybiBYYihlKSxiO2Y9Zi5zaWJsaW5nfXRocm93IEVycm9yKHAoMTg4KSk7fWlmKGMucmV0dXJuIT09ZC5yZXR1cm4pYz1lLGQ9ZjtlbHNle2Zvcih2YXIgZz0hMSxoPWUuY2hpbGQ7aDspe2lmKGg9PT1jKXtnPSEwO2M9ZTtkPWY7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1lO2M9ZjticmVha31oPWguc2libGluZ31pZighZyl7Zm9yKGg9Zi5jaGlsZDtoOyl7aWYoaD09PVxuYyl7Zz0hMDtjPWY7ZD1lO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZjtjPWU7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpdGhyb3cgRXJyb3IocCgxODkpKTt9fWlmKGMuYWx0ZXJuYXRlIT09ZCl0aHJvdyBFcnJvcihwKDE5MCkpO31pZigzIT09Yy50YWcpdGhyb3cgRXJyb3IocCgxODgpKTtyZXR1cm4gYy5zdGF0ZU5vZGUuY3VycmVudD09PWM/YTpifWZ1bmN0aW9uIFpiKGEpe2E9WWIoYSk7cmV0dXJuIG51bGwhPT1hPyRiKGEpOm51bGx9ZnVuY3Rpb24gJGIoYSl7aWYoNT09PWEudGFnfHw2PT09YS50YWcpcmV0dXJuIGE7Zm9yKGE9YS5jaGlsZDtudWxsIT09YTspe3ZhciBiPSRiKGEpO2lmKG51bGwhPT1iKXJldHVybiBiO2E9YS5zaWJsaW5nfXJldHVybiBudWxsfVxudmFyIGFjPWNhLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2ssYmM9Y2EudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2ssY2M9Y2EudW5zdGFibGVfc2hvdWxkWWllbGQsZGM9Y2EudW5zdGFibGVfcmVxdWVzdFBhaW50LEI9Y2EudW5zdGFibGVfbm93LGVjPWNhLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsLGZjPWNhLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5LGdjPWNhLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5LGhjPWNhLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LGljPWNhLnVuc3RhYmxlX0xvd1ByaW9yaXR5LGpjPWNhLnVuc3RhYmxlX0lkbGVQcmlvcml0eSxrYz1udWxsLGxjPW51bGw7ZnVuY3Rpb24gbWMoYSl7aWYobGMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBsYy5vbkNvbW1pdEZpYmVyUm9vdCl0cnl7bGMub25Db21taXRGaWJlclJvb3Qoa2MsYSx2b2lkIDAsMTI4PT09KGEuY3VycmVudC5mbGFncyYxMjgpKX1jYXRjaChiKXt9fVxudmFyIG9jPU1hdGguY2x6MzI/TWF0aC5jbHozMjpuYyxwYz1NYXRoLmxvZyxxYz1NYXRoLkxOMjtmdW5jdGlvbiBuYyhhKXthPj4+PTA7cmV0dXJuIDA9PT1hPzMyOjMxLShwYyhhKS9xY3wwKXwwfXZhciByYz02NCxzYz00MTk0MzA0O1xuZnVuY3Rpb24gdGMoYSl7c3dpdGNoKGEmLWEpe2Nhc2UgMTpyZXR1cm4gMTtjYXNlIDI6cmV0dXJuIDI7Y2FzZSA0OnJldHVybiA0O2Nhc2UgODpyZXR1cm4gODtjYXNlIDE2OnJldHVybiAxNjtjYXNlIDMyOnJldHVybiAzMjtjYXNlIDY0OmNhc2UgMTI4OmNhc2UgMjU2OmNhc2UgNTEyOmNhc2UgMTAyNDpjYXNlIDIwNDg6Y2FzZSA0MDk2OmNhc2UgODE5MjpjYXNlIDE2Mzg0OmNhc2UgMzI3Njg6Y2FzZSA2NTUzNjpjYXNlIDEzMTA3MjpjYXNlIDI2MjE0NDpjYXNlIDUyNDI4ODpjYXNlIDEwNDg1NzY6Y2FzZSAyMDk3MTUyOnJldHVybiBhJjQxOTQyNDA7Y2FzZSA0MTk0MzA0OmNhc2UgODM4ODYwODpjYXNlIDE2Nzc3MjE2OmNhc2UgMzM1NTQ0MzI6Y2FzZSA2NzEwODg2NDpyZXR1cm4gYSYxMzAwMjM0MjQ7Y2FzZSAxMzQyMTc3Mjg6cmV0dXJuIDEzNDIxNzcyODtjYXNlIDI2ODQzNTQ1NjpyZXR1cm4gMjY4NDM1NDU2O2Nhc2UgNTM2ODcwOTEyOnJldHVybiA1MzY4NzA5MTI7Y2FzZSAxMDczNzQxODI0OnJldHVybiAxMDczNzQxODI0O1xuZGVmYXVsdDpyZXR1cm4gYX19ZnVuY3Rpb24gdWMoYSxiKXt2YXIgYz1hLnBlbmRpbmdMYW5lcztpZigwPT09YylyZXR1cm4gMDt2YXIgZD0wLGU9YS5zdXNwZW5kZWRMYW5lcyxmPWEucGluZ2VkTGFuZXMsZz1jJjI2ODQzNTQ1NTtpZigwIT09Zyl7dmFyIGg9ZyZ+ZTswIT09aD9kPXRjKGgpOihmJj1nLDAhPT1mJiYoZD10YyhmKSkpfWVsc2UgZz1jJn5lLDAhPT1nP2Q9dGMoZyk6MCE9PWYmJihkPXRjKGYpKTtpZigwPT09ZClyZXR1cm4gMDtpZigwIT09YiYmYiE9PWQmJjA9PT0oYiZlKSYmKGU9ZCYtZCxmPWImLWIsZT49Znx8MTY9PT1lJiYwIT09KGYmNDE5NDI0MCkpKXJldHVybiBiOzAhPT0oZCY0KSYmKGR8PWMmMTYpO2I9YS5lbnRhbmdsZWRMYW5lcztpZigwIT09Yilmb3IoYT1hLmVudGFuZ2xlbWVudHMsYiY9ZDswPGI7KWM9MzEtb2MoYiksZT0xPDxjLGR8PWFbY10sYiY9fmU7cmV0dXJuIGR9XG5mdW5jdGlvbiB2YyhhLGIpe3N3aXRjaChhKXtjYXNlIDE6Y2FzZSAyOmNhc2UgNDpyZXR1cm4gYisyNTA7Y2FzZSA4OmNhc2UgMTY6Y2FzZSAzMjpjYXNlIDY0OmNhc2UgMTI4OmNhc2UgMjU2OmNhc2UgNTEyOmNhc2UgMTAyNDpjYXNlIDIwNDg6Y2FzZSA0MDk2OmNhc2UgODE5MjpjYXNlIDE2Mzg0OmNhc2UgMzI3Njg6Y2FzZSA2NTUzNjpjYXNlIDEzMTA3MjpjYXNlIDI2MjE0NDpjYXNlIDUyNDI4ODpjYXNlIDEwNDg1NzY6Y2FzZSAyMDk3MTUyOnJldHVybiBiKzVFMztjYXNlIDQxOTQzMDQ6Y2FzZSA4Mzg4NjA4OmNhc2UgMTY3NzcyMTY6Y2FzZSAzMzU1NDQzMjpjYXNlIDY3MTA4ODY0OnJldHVybi0xO2Nhc2UgMTM0MjE3NzI4OmNhc2UgMjY4NDM1NDU2OmNhc2UgNTM2ODcwOTEyOmNhc2UgMTA3Mzc0MTgyNDpyZXR1cm4tMTtkZWZhdWx0OnJldHVybi0xfX1cbmZ1bmN0aW9uIHdjKGEsYil7Zm9yKHZhciBjPWEuc3VzcGVuZGVkTGFuZXMsZD1hLnBpbmdlZExhbmVzLGU9YS5leHBpcmF0aW9uVGltZXMsZj1hLnBlbmRpbmdMYW5lczswPGY7KXt2YXIgZz0zMS1vYyhmKSxoPTE8PGcsaz1lW2ddO2lmKC0xPT09ayl7aWYoMD09PShoJmMpfHwwIT09KGgmZCkpZVtnXT12YyhoLGIpfWVsc2Ugazw9YiYmKGEuZXhwaXJlZExhbmVzfD1oKTtmJj1+aH19ZnVuY3Rpb24geGMoYSl7YT1hLnBlbmRpbmdMYW5lcyYtMTA3Mzc0MTgyNTtyZXR1cm4gMCE9PWE/YTphJjEwNzM3NDE4MjQ/MTA3Mzc0MTgyNDowfWZ1bmN0aW9uIHljKCl7dmFyIGE9cmM7cmM8PD0xOzA9PT0ocmMmNDE5NDI0MCkmJihyYz02NCk7cmV0dXJuIGF9ZnVuY3Rpb24gemMoYSl7Zm9yKHZhciBiPVtdLGM9MDszMT5jO2MrKyliLnB1c2goYSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiBBYyhhLGIsYyl7YS5wZW5kaW5nTGFuZXN8PWI7NTM2ODcwOTEyIT09YiYmKGEuc3VzcGVuZGVkTGFuZXM9MCxhLnBpbmdlZExhbmVzPTApO2E9YS5ldmVudFRpbWVzO2I9MzEtb2MoYik7YVtiXT1jfWZ1bmN0aW9uIEJjKGEsYil7dmFyIGM9YS5wZW5kaW5nTGFuZXMmfmI7YS5wZW5kaW5nTGFuZXM9YjthLnN1c3BlbmRlZExhbmVzPTA7YS5waW5nZWRMYW5lcz0wO2EuZXhwaXJlZExhbmVzJj1iO2EubXV0YWJsZVJlYWRMYW5lcyY9YjthLmVudGFuZ2xlZExhbmVzJj1iO2I9YS5lbnRhbmdsZW1lbnRzO3ZhciBkPWEuZXZlbnRUaW1lcztmb3IoYT1hLmV4cGlyYXRpb25UaW1lczswPGM7KXt2YXIgZT0zMS1vYyhjKSxmPTE8PGU7YltlXT0wO2RbZV09LTE7YVtlXT0tMTtjJj1+Zn19XG5mdW5jdGlvbiBDYyhhLGIpe3ZhciBjPWEuZW50YW5nbGVkTGFuZXN8PWI7Zm9yKGE9YS5lbnRhbmdsZW1lbnRzO2M7KXt2YXIgZD0zMS1vYyhjKSxlPTE8PGQ7ZSZifGFbZF0mYiYmKGFbZF18PWIpO2MmPX5lfX12YXIgQz0wO2Z1bmN0aW9uIERjKGEpe2EmPS1hO3JldHVybiAxPGE/NDxhPzAhPT0oYSYyNjg0MzU0NTUpPzE2OjUzNjg3MDkxMjo0OjF9dmFyIEVjLEZjLEdjLEhjLEljLEpjPSExLEtjPVtdLExjPW51bGwsTWM9bnVsbCxOYz1udWxsLE9jPW5ldyBNYXAsUGM9bmV3IE1hcCxRYz1bXSxSYz1cIm1vdXNlZG93biBtb3VzZXVwIHRvdWNoY2FuY2VsIHRvdWNoZW5kIHRvdWNoc3RhcnQgYXV4Y2xpY2sgZGJsY2xpY2sgcG9pbnRlcmNhbmNlbCBwb2ludGVyZG93biBwb2ludGVydXAgZHJhZ2VuZCBkcmFnc3RhcnQgZHJvcCBjb21wb3NpdGlvbmVuZCBjb21wb3NpdGlvbnN0YXJ0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgaW5wdXQgdGV4dElucHV0IGNvcHkgY3V0IHBhc3RlIGNsaWNrIGNoYW5nZSBjb250ZXh0bWVudSByZXNldCBzdWJtaXRcIi5zcGxpdChcIiBcIik7XG5mdW5jdGlvbiBTYyhhLGIpe3N3aXRjaChhKXtjYXNlIFwiZm9jdXNpblwiOmNhc2UgXCJmb2N1c291dFwiOkxjPW51bGw7YnJlYWs7Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnbGVhdmVcIjpNYz1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwibW91c2VvdXRcIjpOYz1udWxsO2JyZWFrO2Nhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVyb3V0XCI6T2MuZGVsZXRlKGIucG9pbnRlcklkKTticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6UGMuZGVsZXRlKGIucG9pbnRlcklkKX19XG5mdW5jdGlvbiBUYyhhLGIsYyxkLGUsZil7aWYobnVsbD09PWF8fGEubmF0aXZlRXZlbnQhPT1mKXJldHVybiBhPXtibG9ja2VkT246Yixkb21FdmVudE5hbWU6YyxldmVudFN5c3RlbUZsYWdzOmQsbmF0aXZlRXZlbnQ6Zix0YXJnZXRDb250YWluZXJzOltlXX0sbnVsbCE9PWImJihiPUNiKGIpLG51bGwhPT1iJiZGYyhiKSksYTthLmV2ZW50U3lzdGVtRmxhZ3N8PWQ7Yj1hLnRhcmdldENvbnRhaW5lcnM7bnVsbCE9PWUmJi0xPT09Yi5pbmRleE9mKGUpJiZiLnB1c2goZSk7cmV0dXJuIGF9XG5mdW5jdGlvbiBVYyhhLGIsYyxkLGUpe3N3aXRjaChiKXtjYXNlIFwiZm9jdXNpblwiOnJldHVybiBMYz1UYyhMYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJkcmFnZW50ZXJcIjpyZXR1cm4gTWM9VGMoTWMsYSxiLGMsZCxlKSwhMDtjYXNlIFwibW91c2VvdmVyXCI6cmV0dXJuIE5jPVRjKE5jLGEsYixjLGQsZSksITA7Y2FzZSBcInBvaW50ZXJvdmVyXCI6dmFyIGY9ZS5wb2ludGVySWQ7T2Muc2V0KGYsVGMoT2MuZ2V0KGYpfHxudWxsLGEsYixjLGQsZSkpO3JldHVybiEwO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOnJldHVybiBmPWUucG9pbnRlcklkLFBjLnNldChmLFRjKFBjLmdldChmKXx8bnVsbCxhLGIsYyxkLGUpKSwhMH1yZXR1cm4hMX1cbmZ1bmN0aW9uIFZjKGEpe3ZhciBiPVdjKGEudGFyZ2V0KTtpZihudWxsIT09Yil7dmFyIGM9VmIoYik7aWYobnVsbCE9PWMpaWYoYj1jLnRhZywxMz09PWIpe2lmKGI9V2IoYyksbnVsbCE9PWIpe2EuYmxvY2tlZE9uPWI7SWMoYS5wcmlvcml0eSxmdW5jdGlvbigpe0djKGMpfSk7cmV0dXJufX1lbHNlIGlmKDM9PT1iJiZjLnN0YXRlTm9kZS5jdXJyZW50Lm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkKXthLmJsb2NrZWRPbj0zPT09Yy50YWc/Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzpudWxsO3JldHVybn19YS5ibG9ja2VkT249bnVsbH1cbmZ1bmN0aW9uIFhjKGEpe2lmKG51bGwhPT1hLmJsb2NrZWRPbilyZXR1cm4hMTtmb3IodmFyIGI9YS50YXJnZXRDb250YWluZXJzOzA8Yi5sZW5ndGg7KXt2YXIgYz1ZYyhhLmRvbUV2ZW50TmFtZSxhLmV2ZW50U3lzdGVtRmxhZ3MsYlswXSxhLm5hdGl2ZUV2ZW50KTtpZihudWxsPT09Yyl7Yz1hLm5hdGl2ZUV2ZW50O3ZhciBkPW5ldyBjLmNvbnN0cnVjdG9yKGMudHlwZSxjKTt3Yj1kO2MudGFyZ2V0LmRpc3BhdGNoRXZlbnQoZCk7d2I9bnVsbH1lbHNlIHJldHVybiBiPUNiKGMpLG51bGwhPT1iJiZGYyhiKSxhLmJsb2NrZWRPbj1jLCExO2Iuc2hpZnQoKX1yZXR1cm4hMH1mdW5jdGlvbiBaYyhhLGIsYyl7WGMoYSkmJmMuZGVsZXRlKGIpfWZ1bmN0aW9uICRjKCl7SmM9ITE7bnVsbCE9PUxjJiZYYyhMYykmJihMYz1udWxsKTtudWxsIT09TWMmJlhjKE1jKSYmKE1jPW51bGwpO251bGwhPT1OYyYmWGMoTmMpJiYoTmM9bnVsbCk7T2MuZm9yRWFjaChaYyk7UGMuZm9yRWFjaChaYyl9XG5mdW5jdGlvbiBhZChhLGIpe2EuYmxvY2tlZE9uPT09YiYmKGEuYmxvY2tlZE9uPW51bGwsSmN8fChKYz0hMCxjYS51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrKGNhLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LCRjKSkpfVxuZnVuY3Rpb24gYmQoYSl7ZnVuY3Rpb24gYihiKXtyZXR1cm4gYWQoYixhKX1pZigwPEtjLmxlbmd0aCl7YWQoS2NbMF0sYSk7Zm9yKHZhciBjPTE7YzxLYy5sZW5ndGg7YysrKXt2YXIgZD1LY1tjXTtkLmJsb2NrZWRPbj09PWEmJihkLmJsb2NrZWRPbj1udWxsKX19bnVsbCE9PUxjJiZhZChMYyxhKTtudWxsIT09TWMmJmFkKE1jLGEpO251bGwhPT1OYyYmYWQoTmMsYSk7T2MuZm9yRWFjaChiKTtQYy5mb3JFYWNoKGIpO2ZvcihjPTA7YzxRYy5sZW5ndGg7YysrKWQ9UWNbY10sZC5ibG9ja2VkT249PT1hJiYoZC5ibG9ja2VkT249bnVsbCk7Zm9yKDswPFFjLmxlbmd0aCYmKGM9UWNbMF0sbnVsbD09PWMuYmxvY2tlZE9uKTspVmMoYyksbnVsbD09PWMuYmxvY2tlZE9uJiZRYy5zaGlmdCgpfXZhciBjZD11YS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZyxkZD0hMDtcbmZ1bmN0aW9uIGVkKGEsYixjLGQpe3ZhciBlPUMsZj1jZC50cmFuc2l0aW9uO2NkLnRyYW5zaXRpb249bnVsbDt0cnl7Qz0xLGZkKGEsYixjLGQpfWZpbmFsbHl7Qz1lLGNkLnRyYW5zaXRpb249Zn19ZnVuY3Rpb24gZ2QoYSxiLGMsZCl7dmFyIGU9QyxmPWNkLnRyYW5zaXRpb247Y2QudHJhbnNpdGlvbj1udWxsO3RyeXtDPTQsZmQoYSxiLGMsZCl9ZmluYWxseXtDPWUsY2QudHJhbnNpdGlvbj1mfX1cbmZ1bmN0aW9uIGZkKGEsYixjLGQpe2lmKGRkKXt2YXIgZT1ZYyhhLGIsYyxkKTtpZihudWxsPT09ZSloZChhLGIsZCxpZCxjKSxTYyhhLGQpO2Vsc2UgaWYoVWMoZSxhLGIsYyxkKSlkLnN0b3BQcm9wYWdhdGlvbigpO2Vsc2UgaWYoU2MoYSxkKSxiJjQmJi0xPFJjLmluZGV4T2YoYSkpe2Zvcig7bnVsbCE9PWU7KXt2YXIgZj1DYihlKTtudWxsIT09ZiYmRWMoZik7Zj1ZYyhhLGIsYyxkKTtudWxsPT09ZiYmaGQoYSxiLGQsaWQsYyk7aWYoZj09PWUpYnJlYWs7ZT1mfW51bGwhPT1lJiZkLnN0b3BQcm9wYWdhdGlvbigpfWVsc2UgaGQoYSxiLGQsbnVsbCxjKX19dmFyIGlkPW51bGw7XG5mdW5jdGlvbiBZYyhhLGIsYyxkKXtpZD1udWxsO2E9eGIoZCk7YT1XYyhhKTtpZihudWxsIT09YSlpZihiPVZiKGEpLG51bGw9PT1iKWE9bnVsbDtlbHNlIGlmKGM9Yi50YWcsMTM9PT1jKXthPVdiKGIpO2lmKG51bGwhPT1hKXJldHVybiBhO2E9bnVsbH1lbHNlIGlmKDM9PT1jKXtpZihiLnN0YXRlTm9kZS5jdXJyZW50Lm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkKXJldHVybiAzPT09Yi50YWc/Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzpudWxsO2E9bnVsbH1lbHNlIGIhPT1hJiYoYT1udWxsKTtpZD1hO3JldHVybiBudWxsfVxuZnVuY3Rpb24gamQoYSl7c3dpdGNoKGEpe2Nhc2UgXCJjYW5jZWxcIjpjYXNlIFwiY2xpY2tcIjpjYXNlIFwiY2xvc2VcIjpjYXNlIFwiY29udGV4dG1lbnVcIjpjYXNlIFwiY29weVwiOmNhc2UgXCJjdXRcIjpjYXNlIFwiYXV4Y2xpY2tcIjpjYXNlIFwiZGJsY2xpY2tcIjpjYXNlIFwiZHJhZ2VuZFwiOmNhc2UgXCJkcmFnc3RhcnRcIjpjYXNlIFwiZHJvcFwiOmNhc2UgXCJmb2N1c2luXCI6Y2FzZSBcImZvY3Vzb3V0XCI6Y2FzZSBcImlucHV0XCI6Y2FzZSBcImludmFsaWRcIjpjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXlwcmVzc1wiOmNhc2UgXCJrZXl1cFwiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJwYXN0ZVwiOmNhc2UgXCJwYXVzZVwiOmNhc2UgXCJwbGF5XCI6Y2FzZSBcInBvaW50ZXJjYW5jZWxcIjpjYXNlIFwicG9pbnRlcmRvd25cIjpjYXNlIFwicG9pbnRlcnVwXCI6Y2FzZSBcInJhdGVjaGFuZ2VcIjpjYXNlIFwicmVzZXRcIjpjYXNlIFwicmVzaXplXCI6Y2FzZSBcInNlZWtlZFwiOmNhc2UgXCJzdWJtaXRcIjpjYXNlIFwidG91Y2hjYW5jZWxcIjpjYXNlIFwidG91Y2hlbmRcIjpjYXNlIFwidG91Y2hzdGFydFwiOmNhc2UgXCJ2b2x1bWVjaGFuZ2VcIjpjYXNlIFwiY2hhbmdlXCI6Y2FzZSBcInNlbGVjdGlvbmNoYW5nZVwiOmNhc2UgXCJ0ZXh0SW5wdXRcIjpjYXNlIFwiY29tcG9zaXRpb25zdGFydFwiOmNhc2UgXCJjb21wb3NpdGlvbmVuZFwiOmNhc2UgXCJjb21wb3NpdGlvbnVwZGF0ZVwiOmNhc2UgXCJiZWZvcmVibHVyXCI6Y2FzZSBcImFmdGVyYmx1clwiOmNhc2UgXCJiZWZvcmVpbnB1dFwiOmNhc2UgXCJibHVyXCI6Y2FzZSBcImZ1bGxzY3JlZW5jaGFuZ2VcIjpjYXNlIFwiZm9jdXNcIjpjYXNlIFwiaGFzaGNoYW5nZVwiOmNhc2UgXCJwb3BzdGF0ZVwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwic2VsZWN0c3RhcnRcIjpyZXR1cm4gMTtjYXNlIFwiZHJhZ1wiOmNhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2V4aXRcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6Y2FzZSBcImRyYWdvdmVyXCI6Y2FzZSBcIm1vdXNlbW92ZVwiOmNhc2UgXCJtb3VzZW91dFwiOmNhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwicG9pbnRlcm1vdmVcIjpjYXNlIFwicG9pbnRlcm91dFwiOmNhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJzY3JvbGxcIjpjYXNlIFwidG9nZ2xlXCI6Y2FzZSBcInRvdWNobW92ZVwiOmNhc2UgXCJ3aGVlbFwiOmNhc2UgXCJtb3VzZWVudGVyXCI6Y2FzZSBcIm1vdXNlbGVhdmVcIjpjYXNlIFwicG9pbnRlcmVudGVyXCI6Y2FzZSBcInBvaW50ZXJsZWF2ZVwiOnJldHVybiA0O1xuY2FzZSBcIm1lc3NhZ2VcIjpzd2l0Y2goZWMoKSl7Y2FzZSBmYzpyZXR1cm4gMTtjYXNlIGdjOnJldHVybiA0O2Nhc2UgaGM6Y2FzZSBpYzpyZXR1cm4gMTY7Y2FzZSBqYzpyZXR1cm4gNTM2ODcwOTEyO2RlZmF1bHQ6cmV0dXJuIDE2fWRlZmF1bHQ6cmV0dXJuIDE2fX12YXIga2Q9bnVsbCxsZD1udWxsLG1kPW51bGw7ZnVuY3Rpb24gbmQoKXtpZihtZClyZXR1cm4gbWQ7dmFyIGEsYj1sZCxjPWIubGVuZ3RoLGQsZT1cInZhbHVlXCJpbiBrZD9rZC52YWx1ZTprZC50ZXh0Q29udGVudCxmPWUubGVuZ3RoO2ZvcihhPTA7YTxjJiZiW2FdPT09ZVthXTthKyspO3ZhciBnPWMtYTtmb3IoZD0xO2Q8PWcmJmJbYy1kXT09PWVbZi1kXTtkKyspO3JldHVybiBtZD1lLnNsaWNlKGEsMTxkPzEtZDp2b2lkIDApfVxuZnVuY3Rpb24gb2QoYSl7dmFyIGI9YS5rZXlDb2RlO1wiY2hhckNvZGVcImluIGE/KGE9YS5jaGFyQ29kZSwwPT09YSYmMTM9PT1iJiYoYT0xMykpOmE9YjsxMD09PWEmJihhPTEzKTtyZXR1cm4gMzI8PWF8fDEzPT09YT9hOjB9ZnVuY3Rpb24gcGQoKXtyZXR1cm4hMH1mdW5jdGlvbiBxZCgpe3JldHVybiExfVxuZnVuY3Rpb24gcmQoYSl7ZnVuY3Rpb24gYihiLGQsZSxmLGcpe3RoaXMuX3JlYWN0TmFtZT1iO3RoaXMuX3RhcmdldEluc3Q9ZTt0aGlzLnR5cGU9ZDt0aGlzLm5hdGl2ZUV2ZW50PWY7dGhpcy50YXJnZXQ9Zzt0aGlzLmN1cnJlbnRUYXJnZXQ9bnVsbDtmb3IodmFyIGMgaW4gYSlhLmhhc093blByb3BlcnR5KGMpJiYoYj1hW2NdLHRoaXNbY109Yj9iKGYpOmZbY10pO3RoaXMuaXNEZWZhdWx0UHJldmVudGVkPShudWxsIT1mLmRlZmF1bHRQcmV2ZW50ZWQ/Zi5kZWZhdWx0UHJldmVudGVkOiExPT09Zi5yZXR1cm5WYWx1ZSk/cGQ6cWQ7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1xZDtyZXR1cm4gdGhpc31BKGIucHJvdG90eXBlLHtwcmV2ZW50RGVmYXVsdDpmdW5jdGlvbigpe3RoaXMuZGVmYXVsdFByZXZlbnRlZD0hMDt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnByZXZlbnREZWZhdWx0P2EucHJldmVudERlZmF1bHQoKTpcInVua25vd25cIiE9PXR5cGVvZiBhLnJldHVyblZhbHVlJiZcbihhLnJldHVyblZhbHVlPSExKSx0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1wZCl9LHN0b3BQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEuc3RvcFByb3BhZ2F0aW9uP2Euc3RvcFByb3BhZ2F0aW9uKCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5jYW5jZWxCdWJibGUmJihhLmNhbmNlbEJ1YmJsZT0hMCksdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1wZCl9LHBlcnNpc3Q6ZnVuY3Rpb24oKXt9LGlzUGVyc2lzdGVudDpwZH0pO3JldHVybiBifVxudmFyIHNkPXtldmVudFBoYXNlOjAsYnViYmxlczowLGNhbmNlbGFibGU6MCx0aW1lU3RhbXA6ZnVuY3Rpb24oYSl7cmV0dXJuIGEudGltZVN0YW1wfHxEYXRlLm5vdygpfSxkZWZhdWx0UHJldmVudGVkOjAsaXNUcnVzdGVkOjB9LHRkPXJkKHNkKSx1ZD1BKHt9LHNkLHt2aWV3OjAsZGV0YWlsOjB9KSx2ZD1yZCh1ZCksd2QseGQseWQsQWQ9QSh7fSx1ZCx7c2NyZWVuWDowLHNjcmVlblk6MCxjbGllbnRYOjAsY2xpZW50WTowLHBhZ2VYOjAscGFnZVk6MCxjdHJsS2V5OjAsc2hpZnRLZXk6MCxhbHRLZXk6MCxtZXRhS2V5OjAsZ2V0TW9kaWZpZXJTdGF0ZTp6ZCxidXR0b246MCxidXR0b25zOjAscmVsYXRlZFRhcmdldDpmdW5jdGlvbihhKXtyZXR1cm4gdm9pZCAwPT09YS5yZWxhdGVkVGFyZ2V0P2EuZnJvbUVsZW1lbnQ9PT1hLnNyY0VsZW1lbnQ/YS50b0VsZW1lbnQ6YS5mcm9tRWxlbWVudDphLnJlbGF0ZWRUYXJnZXR9LG1vdmVtZW50WDpmdW5jdGlvbihhKXtpZihcIm1vdmVtZW50WFwiaW5cbmEpcmV0dXJuIGEubW92ZW1lbnRYO2EhPT15ZCYmKHlkJiZcIm1vdXNlbW92ZVwiPT09YS50eXBlPyh3ZD1hLnNjcmVlblgteWQuc2NyZWVuWCx4ZD1hLnNjcmVlblkteWQuc2NyZWVuWSk6eGQ9d2Q9MCx5ZD1hKTtyZXR1cm4gd2R9LG1vdmVtZW50WTpmdW5jdGlvbihhKXtyZXR1cm5cIm1vdmVtZW50WVwiaW4gYT9hLm1vdmVtZW50WTp4ZH19KSxCZD1yZChBZCksQ2Q9QSh7fSxBZCx7ZGF0YVRyYW5zZmVyOjB9KSxEZD1yZChDZCksRWQ9QSh7fSx1ZCx7cmVsYXRlZFRhcmdldDowfSksRmQ9cmQoRWQpLEdkPUEoe30sc2Qse2FuaW1hdGlvbk5hbWU6MCxlbGFwc2VkVGltZTowLHBzZXVkb0VsZW1lbnQ6MH0pLEhkPXJkKEdkKSxJZD1BKHt9LHNkLHtjbGlwYm9hcmREYXRhOmZ1bmN0aW9uKGEpe3JldHVyblwiY2xpcGJvYXJkRGF0YVwiaW4gYT9hLmNsaXBib2FyZERhdGE6d2luZG93LmNsaXBib2FyZERhdGF9fSksSmQ9cmQoSWQpLEtkPUEoe30sc2Qse2RhdGE6MH0pLExkPXJkKEtkKSxNZD17RXNjOlwiRXNjYXBlXCIsXG5TcGFjZWJhcjpcIiBcIixMZWZ0OlwiQXJyb3dMZWZ0XCIsVXA6XCJBcnJvd1VwXCIsUmlnaHQ6XCJBcnJvd1JpZ2h0XCIsRG93bjpcIkFycm93RG93blwiLERlbDpcIkRlbGV0ZVwiLFdpbjpcIk9TXCIsTWVudTpcIkNvbnRleHRNZW51XCIsQXBwczpcIkNvbnRleHRNZW51XCIsU2Nyb2xsOlwiU2Nyb2xsTG9ja1wiLE1velByaW50YWJsZUtleTpcIlVuaWRlbnRpZmllZFwifSxOZD17ODpcIkJhY2tzcGFjZVwiLDk6XCJUYWJcIiwxMjpcIkNsZWFyXCIsMTM6XCJFbnRlclwiLDE2OlwiU2hpZnRcIiwxNzpcIkNvbnRyb2xcIiwxODpcIkFsdFwiLDE5OlwiUGF1c2VcIiwyMDpcIkNhcHNMb2NrXCIsMjc6XCJFc2NhcGVcIiwzMjpcIiBcIiwzMzpcIlBhZ2VVcFwiLDM0OlwiUGFnZURvd25cIiwzNTpcIkVuZFwiLDM2OlwiSG9tZVwiLDM3OlwiQXJyb3dMZWZ0XCIsMzg6XCJBcnJvd1VwXCIsMzk6XCJBcnJvd1JpZ2h0XCIsNDA6XCJBcnJvd0Rvd25cIiw0NTpcIkluc2VydFwiLDQ2OlwiRGVsZXRlXCIsMTEyOlwiRjFcIiwxMTM6XCJGMlwiLDExNDpcIkYzXCIsMTE1OlwiRjRcIiwxMTY6XCJGNVwiLDExNzpcIkY2XCIsMTE4OlwiRjdcIixcbjExOTpcIkY4XCIsMTIwOlwiRjlcIiwxMjE6XCJGMTBcIiwxMjI6XCJGMTFcIiwxMjM6XCJGMTJcIiwxNDQ6XCJOdW1Mb2NrXCIsMTQ1OlwiU2Nyb2xsTG9ja1wiLDIyNDpcIk1ldGFcIn0sT2Q9e0FsdDpcImFsdEtleVwiLENvbnRyb2w6XCJjdHJsS2V5XCIsTWV0YTpcIm1ldGFLZXlcIixTaGlmdDpcInNoaWZ0S2V5XCJ9O2Z1bmN0aW9uIFBkKGEpe3ZhciBiPXRoaXMubmF0aXZlRXZlbnQ7cmV0dXJuIGIuZ2V0TW9kaWZpZXJTdGF0ZT9iLmdldE1vZGlmaWVyU3RhdGUoYSk6KGE9T2RbYV0pPyEhYlthXTohMX1mdW5jdGlvbiB6ZCgpe3JldHVybiBQZH1cbnZhciBRZD1BKHt9LHVkLHtrZXk6ZnVuY3Rpb24oYSl7aWYoYS5rZXkpe3ZhciBiPU1kW2Eua2V5XXx8YS5rZXk7aWYoXCJVbmlkZW50aWZpZWRcIiE9PWIpcmV0dXJuIGJ9cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlPyhhPW9kKGEpLDEzPT09YT9cIkVudGVyXCI6U3RyaW5nLmZyb21DaGFyQ29kZShhKSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9OZFthLmtleUNvZGVdfHxcIlVuaWRlbnRpZmllZFwiOlwiXCJ9LGNvZGU6MCxsb2NhdGlvbjowLGN0cmxLZXk6MCxzaGlmdEtleTowLGFsdEtleTowLG1ldGFLZXk6MCxyZXBlYXQ6MCxsb2NhbGU6MCxnZXRNb2RpZmllclN0YXRlOnpkLGNoYXJDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT9vZChhKTowfSxrZXlDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9LHdoaWNoOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PVxuYS50eXBlP29kKGEpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9fSksUmQ9cmQoUWQpLFNkPUEoe30sQWQse3BvaW50ZXJJZDowLHdpZHRoOjAsaGVpZ2h0OjAscHJlc3N1cmU6MCx0YW5nZW50aWFsUHJlc3N1cmU6MCx0aWx0WDowLHRpbHRZOjAsdHdpc3Q6MCxwb2ludGVyVHlwZTowLGlzUHJpbWFyeTowfSksVGQ9cmQoU2QpLFVkPUEoe30sdWQse3RvdWNoZXM6MCx0YXJnZXRUb3VjaGVzOjAsY2hhbmdlZFRvdWNoZXM6MCxhbHRLZXk6MCxtZXRhS2V5OjAsY3RybEtleTowLHNoaWZ0S2V5OjAsZ2V0TW9kaWZpZXJTdGF0ZTp6ZH0pLFZkPXJkKFVkKSxXZD1BKHt9LHNkLHtwcm9wZXJ0eU5hbWU6MCxlbGFwc2VkVGltZTowLHBzZXVkb0VsZW1lbnQ6MH0pLFhkPXJkKFdkKSxZZD1BKHt9LEFkLHtkZWx0YVg6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVhcImluIGE/YS5kZWx0YVg6XCJ3aGVlbERlbHRhWFwiaW4gYT8tYS53aGVlbERlbHRhWDowfSxcbmRlbHRhWTpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWVwiaW4gYT9hLmRlbHRhWTpcIndoZWVsRGVsdGFZXCJpbiBhPy1hLndoZWVsRGVsdGFZOlwid2hlZWxEZWx0YVwiaW4gYT8tYS53aGVlbERlbHRhOjB9LGRlbHRhWjowLGRlbHRhTW9kZTowfSksWmQ9cmQoWWQpLCRkPVs5LDEzLDI3LDMyXSxhZT1pYSYmXCJDb21wb3NpdGlvbkV2ZW50XCJpbiB3aW5kb3csYmU9bnVsbDtpYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYoYmU9ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTt2YXIgY2U9aWEmJlwiVGV4dEV2ZW50XCJpbiB3aW5kb3cmJiFiZSxkZT1pYSYmKCFhZXx8YmUmJjg8YmUmJjExPj1iZSksZWU9U3RyaW5nLmZyb21DaGFyQ29kZSgzMiksZmU9ITE7XG5mdW5jdGlvbiBnZShhLGIpe3N3aXRjaChhKXtjYXNlIFwia2V5dXBcIjpyZXR1cm4tMSE9PSRkLmluZGV4T2YoYi5rZXlDb2RlKTtjYXNlIFwia2V5ZG93blwiOnJldHVybiAyMjkhPT1iLmtleUNvZGU7Y2FzZSBcImtleXByZXNzXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJmb2N1c291dFwiOnJldHVybiEwO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIGhlKGEpe2E9YS5kZXRhaWw7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZcImRhdGFcImluIGE/YS5kYXRhOm51bGx9dmFyIGllPSExO2Z1bmN0aW9uIGplKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiBoZShiKTtjYXNlIFwia2V5cHJlc3NcIjppZigzMiE9PWIud2hpY2gpcmV0dXJuIG51bGw7ZmU9ITA7cmV0dXJuIGVlO2Nhc2UgXCJ0ZXh0SW5wdXRcIjpyZXR1cm4gYT1iLmRhdGEsYT09PWVlJiZmZT9udWxsOmE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG5mdW5jdGlvbiBrZShhLGIpe2lmKGllKXJldHVyblwiY29tcG9zaXRpb25lbmRcIj09PWF8fCFhZSYmZ2UoYSxiKT8oYT1uZCgpLG1kPWxkPWtkPW51bGwsaWU9ITEsYSk6bnVsbDtzd2l0Y2goYSl7Y2FzZSBcInBhc3RlXCI6cmV0dXJuIG51bGw7Y2FzZSBcImtleXByZXNzXCI6aWYoIShiLmN0cmxLZXl8fGIuYWx0S2V5fHxiLm1ldGFLZXkpfHxiLmN0cmxLZXkmJmIuYWx0S2V5KXtpZihiLmNoYXImJjE8Yi5jaGFyLmxlbmd0aClyZXR1cm4gYi5jaGFyO2lmKGIud2hpY2gpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYi53aGljaCl9cmV0dXJuIG51bGw7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIGRlJiZcImtvXCIhPT1iLmxvY2FsZT9udWxsOmIuZGF0YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbnZhciBsZT17Y29sb3I6ITAsZGF0ZTohMCxkYXRldGltZTohMCxcImRhdGV0aW1lLWxvY2FsXCI6ITAsZW1haWw6ITAsbW9udGg6ITAsbnVtYmVyOiEwLHBhc3N3b3JkOiEwLHJhbmdlOiEwLHNlYXJjaDohMCx0ZWw6ITAsdGV4dDohMCx0aW1lOiEwLHVybDohMCx3ZWVrOiEwfTtmdW5jdGlvbiBtZShhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09Yj8hIWxlW2EudHlwZV06XCJ0ZXh0YXJlYVwiPT09Yj8hMDohMX1mdW5jdGlvbiBuZShhLGIsYyxkKXtFYihkKTtiPW9lKGIsXCJvbkNoYW5nZVwiKTswPGIubGVuZ3RoJiYoYz1uZXcgdGQoXCJvbkNoYW5nZVwiLFwiY2hhbmdlXCIsbnVsbCxjLGQpLGEucHVzaCh7ZXZlbnQ6YyxsaXN0ZW5lcnM6Yn0pKX12YXIgcGU9bnVsbCxxZT1udWxsO2Z1bmN0aW9uIHJlKGEpe3NlKGEsMCl9ZnVuY3Rpb24gdGUoYSl7dmFyIGI9dWUoYSk7aWYoV2EoYikpcmV0dXJuIGF9XG5mdW5jdGlvbiB2ZShhLGIpe2lmKFwiY2hhbmdlXCI9PT1hKXJldHVybiBifXZhciB3ZT0hMTtpZihpYSl7dmFyIHhlO2lmKGlhKXt2YXIgeWU9XCJvbmlucHV0XCJpbiBkb2N1bWVudDtpZigheWUpe3ZhciB6ZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO3plLnNldEF0dHJpYnV0ZShcIm9uaW5wdXRcIixcInJldHVybjtcIik7eWU9XCJmdW5jdGlvblwiPT09dHlwZW9mIHplLm9uaW5wdXR9eGU9eWV9ZWxzZSB4ZT0hMTt3ZT14ZSYmKCFkb2N1bWVudC5kb2N1bWVudE1vZGV8fDk8ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKX1mdW5jdGlvbiBBZSgpe3BlJiYocGUuZGV0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsQmUpLHFlPXBlPW51bGwpfWZ1bmN0aW9uIEJlKGEpe2lmKFwidmFsdWVcIj09PWEucHJvcGVydHlOYW1lJiZ0ZShxZSkpe3ZhciBiPVtdO25lKGIscWUsYSx4YihhKSk7SmIocmUsYil9fVxuZnVuY3Rpb24gQ2UoYSxiLGMpe1wiZm9jdXNpblwiPT09YT8oQWUoKSxwZT1iLHFlPWMscGUuYXR0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsQmUpKTpcImZvY3Vzb3V0XCI9PT1hJiZBZSgpfWZ1bmN0aW9uIERlKGEpe2lmKFwic2VsZWN0aW9uY2hhbmdlXCI9PT1hfHxcImtleXVwXCI9PT1hfHxcImtleWRvd25cIj09PWEpcmV0dXJuIHRlKHFlKX1mdW5jdGlvbiBFZShhLGIpe2lmKFwiY2xpY2tcIj09PWEpcmV0dXJuIHRlKGIpfWZ1bmN0aW9uIEZlKGEsYil7aWYoXCJpbnB1dFwiPT09YXx8XCJjaGFuZ2VcIj09PWEpcmV0dXJuIHRlKGIpfWZ1bmN0aW9uIEdlKGEsYil7cmV0dXJuIGE9PT1iJiYoMCE9PWF8fDEvYT09PTEvYil8fGEhPT1hJiZiIT09Yn12YXIgSGU9XCJmdW5jdGlvblwiPT09dHlwZW9mIE9iamVjdC5pcz9PYmplY3QuaXM6R2U7XG5mdW5jdGlvbiBJZShhLGIpe2lmKEhlKGEsYikpcmV0dXJuITA7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhfHxudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBifHxudWxsPT09YilyZXR1cm4hMTt2YXIgYz1PYmplY3Qua2V5cyhhKSxkPU9iamVjdC5rZXlzKGIpO2lmKGMubGVuZ3RoIT09ZC5sZW5ndGgpcmV0dXJuITE7Zm9yKGQ9MDtkPGMubGVuZ3RoO2QrKyl7dmFyIGU9Y1tkXTtpZighamEuY2FsbChiLGUpfHwhSGUoYVtlXSxiW2VdKSlyZXR1cm4hMX1yZXR1cm4hMH1mdW5jdGlvbiBKZShhKXtmb3IoO2EmJmEuZmlyc3RDaGlsZDspYT1hLmZpcnN0Q2hpbGQ7cmV0dXJuIGF9XG5mdW5jdGlvbiBLZShhLGIpe3ZhciBjPUplKGEpO2E9MDtmb3IodmFyIGQ7Yzspe2lmKDM9PT1jLm5vZGVUeXBlKXtkPWErYy50ZXh0Q29udGVudC5sZW5ndGg7aWYoYTw9YiYmZD49YilyZXR1cm57bm9kZTpjLG9mZnNldDpiLWF9O2E9ZH1hOntmb3IoO2M7KXtpZihjLm5leHRTaWJsaW5nKXtjPWMubmV4dFNpYmxpbmc7YnJlYWsgYX1jPWMucGFyZW50Tm9kZX1jPXZvaWQgMH1jPUplKGMpfX1mdW5jdGlvbiBMZShhLGIpe3JldHVybiBhJiZiP2E9PT1iPyEwOmEmJjM9PT1hLm5vZGVUeXBlPyExOmImJjM9PT1iLm5vZGVUeXBlP0xlKGEsYi5wYXJlbnROb2RlKTpcImNvbnRhaW5zXCJpbiBhP2EuY29udGFpbnMoYik6YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbj8hIShhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGIpJjE2KTohMTohMX1cbmZ1bmN0aW9uIE1lKCl7Zm9yKHZhciBhPXdpbmRvdyxiPVhhKCk7YiBpbnN0YW5jZW9mIGEuSFRNTElGcmFtZUVsZW1lbnQ7KXt0cnl7dmFyIGM9XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNvbnRlbnRXaW5kb3cubG9jYXRpb24uaHJlZn1jYXRjaChkKXtjPSExfWlmKGMpYT1iLmNvbnRlbnRXaW5kb3c7ZWxzZSBicmVhaztiPVhhKGEuZG9jdW1lbnQpfXJldHVybiBifWZ1bmN0aW9uIE5lKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm4gYiYmKFwiaW5wdXRcIj09PWImJihcInRleHRcIj09PWEudHlwZXx8XCJzZWFyY2hcIj09PWEudHlwZXx8XCJ0ZWxcIj09PWEudHlwZXx8XCJ1cmxcIj09PWEudHlwZXx8XCJwYXNzd29yZFwiPT09YS50eXBlKXx8XCJ0ZXh0YXJlYVwiPT09Ynx8XCJ0cnVlXCI9PT1hLmNvbnRlbnRFZGl0YWJsZSl9XG5mdW5jdGlvbiBPZShhKXt2YXIgYj1NZSgpLGM9YS5mb2N1c2VkRWxlbSxkPWEuc2VsZWN0aW9uUmFuZ2U7aWYoYiE9PWMmJmMmJmMub3duZXJEb2N1bWVudCYmTGUoYy5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxjKSl7aWYobnVsbCE9PWQmJk5lKGMpKWlmKGI9ZC5zdGFydCxhPWQuZW5kLHZvaWQgMD09PWEmJihhPWIpLFwic2VsZWN0aW9uU3RhcnRcImluIGMpYy5zZWxlY3Rpb25TdGFydD1iLGMuc2VsZWN0aW9uRW5kPU1hdGgubWluKGEsYy52YWx1ZS5sZW5ndGgpO2Vsc2UgaWYoYT0oYj1jLm93bmVyRG9jdW1lbnR8fGRvY3VtZW50KSYmYi5kZWZhdWx0Vmlld3x8d2luZG93LGEuZ2V0U2VsZWN0aW9uKXthPWEuZ2V0U2VsZWN0aW9uKCk7dmFyIGU9Yy50ZXh0Q29udGVudC5sZW5ndGgsZj1NYXRoLm1pbihkLnN0YXJ0LGUpO2Q9dm9pZCAwPT09ZC5lbmQ/ZjpNYXRoLm1pbihkLmVuZCxlKTshYS5leHRlbmQmJmY+ZCYmKGU9ZCxkPWYsZj1lKTtlPUtlKGMsZik7dmFyIGc9S2UoYyxcbmQpO2UmJmcmJigxIT09YS5yYW5nZUNvdW50fHxhLmFuY2hvck5vZGUhPT1lLm5vZGV8fGEuYW5jaG9yT2Zmc2V0IT09ZS5vZmZzZXR8fGEuZm9jdXNOb2RlIT09Zy5ub2RlfHxhLmZvY3VzT2Zmc2V0IT09Zy5vZmZzZXQpJiYoYj1iLmNyZWF0ZVJhbmdlKCksYi5zZXRTdGFydChlLm5vZGUsZS5vZmZzZXQpLGEucmVtb3ZlQWxsUmFuZ2VzKCksZj5kPyhhLmFkZFJhbmdlKGIpLGEuZXh0ZW5kKGcubm9kZSxnLm9mZnNldCkpOihiLnNldEVuZChnLm5vZGUsZy5vZmZzZXQpLGEuYWRkUmFuZ2UoYikpKX1iPVtdO2ZvcihhPWM7YT1hLnBhcmVudE5vZGU7KTE9PT1hLm5vZGVUeXBlJiZiLnB1c2goe2VsZW1lbnQ6YSxsZWZ0OmEuc2Nyb2xsTGVmdCx0b3A6YS5zY3JvbGxUb3B9KTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5mb2N1cyYmYy5mb2N1cygpO2ZvcihjPTA7YzxiLmxlbmd0aDtjKyspYT1iW2NdLGEuZWxlbWVudC5zY3JvbGxMZWZ0PWEubGVmdCxhLmVsZW1lbnQuc2Nyb2xsVG9wPWEudG9wfX1cbnZhciBQZT1pYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYxMT49ZG9jdW1lbnQuZG9jdW1lbnRNb2RlLFFlPW51bGwsUmU9bnVsbCxTZT1udWxsLFRlPSExO1xuZnVuY3Rpb24gVWUoYSxiLGMpe3ZhciBkPWMud2luZG93PT09Yz9jLmRvY3VtZW50Ojk9PT1jLm5vZGVUeXBlP2M6Yy5vd25lckRvY3VtZW50O1RlfHxudWxsPT1RZXx8UWUhPT1YYShkKXx8KGQ9UWUsXCJzZWxlY3Rpb25TdGFydFwiaW4gZCYmTmUoZCk/ZD17c3RhcnQ6ZC5zZWxlY3Rpb25TdGFydCxlbmQ6ZC5zZWxlY3Rpb25FbmR9OihkPShkLm93bmVyRG9jdW1lbnQmJmQub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlld3x8d2luZG93KS5nZXRTZWxlY3Rpb24oKSxkPXthbmNob3JOb2RlOmQuYW5jaG9yTm9kZSxhbmNob3JPZmZzZXQ6ZC5hbmNob3JPZmZzZXQsZm9jdXNOb2RlOmQuZm9jdXNOb2RlLGZvY3VzT2Zmc2V0OmQuZm9jdXNPZmZzZXR9KSxTZSYmSWUoU2UsZCl8fChTZT1kLGQ9b2UoUmUsXCJvblNlbGVjdFwiKSwwPGQubGVuZ3RoJiYoYj1uZXcgdGQoXCJvblNlbGVjdFwiLFwic2VsZWN0XCIsbnVsbCxiLGMpLGEucHVzaCh7ZXZlbnQ6YixsaXN0ZW5lcnM6ZH0pLGIudGFyZ2V0PVFlKSkpfVxuZnVuY3Rpb24gVmUoYSxiKXt2YXIgYz17fTtjW2EudG9Mb3dlckNhc2UoKV09Yi50b0xvd2VyQ2FzZSgpO2NbXCJXZWJraXRcIithXT1cIndlYmtpdFwiK2I7Y1tcIk1velwiK2FdPVwibW96XCIrYjtyZXR1cm4gY312YXIgV2U9e2FuaW1hdGlvbmVuZDpWZShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uRW5kXCIpLGFuaW1hdGlvbml0ZXJhdGlvbjpWZShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uSXRlcmF0aW9uXCIpLGFuaW1hdGlvbnN0YXJ0OlZlKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25TdGFydFwiKSx0cmFuc2l0aW9uZW5kOlZlKFwiVHJhbnNpdGlvblwiLFwiVHJhbnNpdGlvbkVuZFwiKX0sWGU9e30sWWU9e307XG5pYSYmKFllPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGUsXCJBbmltYXRpb25FdmVudFwiaW4gd2luZG93fHwoZGVsZXRlIFdlLmFuaW1hdGlvbmVuZC5hbmltYXRpb24sZGVsZXRlIFdlLmFuaW1hdGlvbml0ZXJhdGlvbi5hbmltYXRpb24sZGVsZXRlIFdlLmFuaW1hdGlvbnN0YXJ0LmFuaW1hdGlvbiksXCJUcmFuc2l0aW9uRXZlbnRcImluIHdpbmRvd3x8ZGVsZXRlIFdlLnRyYW5zaXRpb25lbmQudHJhbnNpdGlvbik7ZnVuY3Rpb24gWmUoYSl7aWYoWGVbYV0pcmV0dXJuIFhlW2FdO2lmKCFXZVthXSlyZXR1cm4gYTt2YXIgYj1XZVthXSxjO2ZvcihjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSYmYyBpbiBZZSlyZXR1cm4gWGVbYV09YltjXTtyZXR1cm4gYX12YXIgJGU9WmUoXCJhbmltYXRpb25lbmRcIiksYWY9WmUoXCJhbmltYXRpb25pdGVyYXRpb25cIiksYmY9WmUoXCJhbmltYXRpb25zdGFydFwiKSxjZj1aZShcInRyYW5zaXRpb25lbmRcIiksZGY9bmV3IE1hcCxlZj1cImFib3J0IGF1eENsaWNrIGNhbmNlbCBjYW5QbGF5IGNhblBsYXlUaHJvdWdoIGNsaWNrIGNsb3NlIGNvbnRleHRNZW51IGNvcHkgY3V0IGRyYWcgZHJhZ0VuZCBkcmFnRW50ZXIgZHJhZ0V4aXQgZHJhZ0xlYXZlIGRyYWdPdmVyIGRyYWdTdGFydCBkcm9wIGR1cmF0aW9uQ2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGdvdFBvaW50ZXJDYXB0dXJlIGlucHV0IGludmFsaWQga2V5RG93biBrZXlQcmVzcyBrZXlVcCBsb2FkIGxvYWRlZERhdGEgbG9hZGVkTWV0YWRhdGEgbG9hZFN0YXJ0IGxvc3RQb2ludGVyQ2FwdHVyZSBtb3VzZURvd24gbW91c2VNb3ZlIG1vdXNlT3V0IG1vdXNlT3ZlciBtb3VzZVVwIHBhc3RlIHBhdXNlIHBsYXkgcGxheWluZyBwb2ludGVyQ2FuY2VsIHBvaW50ZXJEb3duIHBvaW50ZXJNb3ZlIHBvaW50ZXJPdXQgcG9pbnRlck92ZXIgcG9pbnRlclVwIHByb2dyZXNzIHJhdGVDaGFuZ2UgcmVzZXQgcmVzaXplIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VibWl0IHN1c3BlbmQgdGltZVVwZGF0ZSB0b3VjaENhbmNlbCB0b3VjaEVuZCB0b3VjaFN0YXJ0IHZvbHVtZUNoYW5nZSBzY3JvbGwgdG9nZ2xlIHRvdWNoTW92ZSB3YWl0aW5nIHdoZWVsXCIuc3BsaXQoXCIgXCIpO1xuZnVuY3Rpb24gZmYoYSxiKXtkZi5zZXQoYSxiKTtmYShiLFthXSl9Zm9yKHZhciBnZj0wO2dmPGVmLmxlbmd0aDtnZisrKXt2YXIgaGY9ZWZbZ2ZdLGpmPWhmLnRvTG93ZXJDYXNlKCksa2Y9aGZbMF0udG9VcHBlckNhc2UoKStoZi5zbGljZSgxKTtmZihqZixcIm9uXCIra2YpfWZmKCRlLFwib25BbmltYXRpb25FbmRcIik7ZmYoYWYsXCJvbkFuaW1hdGlvbkl0ZXJhdGlvblwiKTtmZihiZixcIm9uQW5pbWF0aW9uU3RhcnRcIik7ZmYoXCJkYmxjbGlja1wiLFwib25Eb3VibGVDbGlja1wiKTtmZihcImZvY3VzaW5cIixcIm9uRm9jdXNcIik7ZmYoXCJmb2N1c291dFwiLFwib25CbHVyXCIpO2ZmKGNmLFwib25UcmFuc2l0aW9uRW5kXCIpO2hhKFwib25Nb3VzZUVudGVyXCIsW1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXSk7aGEoXCJvbk1vdXNlTGVhdmVcIixbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdKTtoYShcIm9uUG9pbnRlckVudGVyXCIsW1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl0pO1xuaGEoXCJvblBvaW50ZXJMZWF2ZVwiLFtcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdKTtmYShcIm9uQ2hhbmdlXCIsXCJjaGFuZ2UgY2xpY2sgZm9jdXNpbiBmb2N1c291dCBpbnB1dCBrZXlkb3duIGtleXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKSk7ZmEoXCJvblNlbGVjdFwiLFwiZm9jdXNvdXQgY29udGV4dG1lbnUgZHJhZ2VuZCBmb2N1c2luIGtleWRvd24ga2V5dXAgbW91c2Vkb3duIG1vdXNldXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpKTtmYShcIm9uQmVmb3JlSW5wdXRcIixbXCJjb21wb3NpdGlvbmVuZFwiLFwia2V5cHJlc3NcIixcInRleHRJbnB1dFwiLFwicGFzdGVcIl0pO2ZhKFwib25Db21wb3NpdGlvbkVuZFwiLFwiY29tcG9zaXRpb25lbmQgZm9jdXNvdXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIikpO2ZhKFwib25Db21wb3NpdGlvblN0YXJ0XCIsXCJjb21wb3NpdGlvbnN0YXJ0IGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTtcbmZhKFwib25Db21wb3NpdGlvblVwZGF0ZVwiLFwiY29tcG9zaXRpb251cGRhdGUgZm9jdXNvdXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIikpO3ZhciBsZj1cImFib3J0IGNhbnBsYXkgY2FucGxheXRocm91Z2ggZHVyYXRpb25jaGFuZ2UgZW1wdGllZCBlbmNyeXB0ZWQgZW5kZWQgZXJyb3IgbG9hZGVkZGF0YSBsb2FkZWRtZXRhZGF0YSBsb2Fkc3RhcnQgcGF1c2UgcGxheSBwbGF5aW5nIHByb2dyZXNzIHJhdGVjaGFuZ2UgcmVzaXplIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VzcGVuZCB0aW1ldXBkYXRlIHZvbHVtZWNoYW5nZSB3YWl0aW5nXCIuc3BsaXQoXCIgXCIpLG1mPW5ldyBTZXQoXCJjYW5jZWwgY2xvc2UgaW52YWxpZCBsb2FkIHNjcm9sbCB0b2dnbGVcIi5zcGxpdChcIiBcIikuY29uY2F0KGxmKSk7XG5mdW5jdGlvbiBuZihhLGIsYyl7dmFyIGQ9YS50eXBlfHxcInVua25vd24tZXZlbnRcIjthLmN1cnJlbnRUYXJnZXQ9YztVYihkLGIsdm9pZCAwLGEpO2EuY3VycmVudFRhcmdldD1udWxsfVxuZnVuY3Rpb24gc2UoYSxiKXtiPTAhPT0oYiY0KTtmb3IodmFyIGM9MDtjPGEubGVuZ3RoO2MrKyl7dmFyIGQ9YVtjXSxlPWQuZXZlbnQ7ZD1kLmxpc3RlbmVyczthOnt2YXIgZj12b2lkIDA7aWYoYilmb3IodmFyIGc9ZC5sZW5ndGgtMTswPD1nO2ctLSl7dmFyIGg9ZFtnXSxrPWguaW5zdGFuY2UsbD1oLmN1cnJlbnRUYXJnZXQ7aD1oLmxpc3RlbmVyO2lmKGshPT1mJiZlLmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpYnJlYWsgYTtuZihlLGgsbCk7Zj1rfWVsc2UgZm9yKGc9MDtnPGQubGVuZ3RoO2crKyl7aD1kW2ddO2s9aC5pbnN0YW5jZTtsPWguY3VycmVudFRhcmdldDtoPWgubGlzdGVuZXI7aWYoayE9PWYmJmUuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSlicmVhayBhO25mKGUsaCxsKTtmPWt9fX1pZihRYil0aHJvdyBhPVJiLFFiPSExLFJiPW51bGwsYTt9XG5mdW5jdGlvbiBEKGEsYil7dmFyIGM9YltvZl07dm9pZCAwPT09YyYmKGM9YltvZl09bmV3IFNldCk7dmFyIGQ9YStcIl9fYnViYmxlXCI7Yy5oYXMoZCl8fChwZihiLGEsMiwhMSksYy5hZGQoZCkpfWZ1bmN0aW9uIHFmKGEsYixjKXt2YXIgZD0wO2ImJihkfD00KTtwZihjLGEsZCxiKX12YXIgcmY9XCJfcmVhY3RMaXN0ZW5pbmdcIitNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKTtmdW5jdGlvbiBzZihhKXtpZighYVtyZl0pe2FbcmZdPSEwO2RhLmZvckVhY2goZnVuY3Rpb24oYil7XCJzZWxlY3Rpb25jaGFuZ2VcIiE9PWImJihtZi5oYXMoYil8fHFmKGIsITEsYSkscWYoYiwhMCxhKSl9KTt2YXIgYj05PT09YS5ub2RlVHlwZT9hOmEub3duZXJEb2N1bWVudDtudWxsPT09Ynx8YltyZl18fChiW3JmXT0hMCxxZihcInNlbGVjdGlvbmNoYW5nZVwiLCExLGIpKX19XG5mdW5jdGlvbiBwZihhLGIsYyxkKXtzd2l0Y2goamQoYikpe2Nhc2UgMTp2YXIgZT1lZDticmVhaztjYXNlIDQ6ZT1nZDticmVhaztkZWZhdWx0OmU9ZmR9Yz1lLmJpbmQobnVsbCxiLGMsYSk7ZT12b2lkIDA7IUxifHxcInRvdWNoc3RhcnRcIiE9PWImJlwidG91Y2htb3ZlXCIhPT1iJiZcIndoZWVsXCIhPT1ifHwoZT0hMCk7ZD92b2lkIDAhPT1lP2EuYWRkRXZlbnRMaXN0ZW5lcihiLGMse2NhcHR1cmU6ITAscGFzc2l2ZTplfSk6YS5hZGRFdmVudExpc3RlbmVyKGIsYywhMCk6dm9pZCAwIT09ZT9hLmFkZEV2ZW50TGlzdGVuZXIoYixjLHtwYXNzaXZlOmV9KTphLmFkZEV2ZW50TGlzdGVuZXIoYixjLCExKX1cbmZ1bmN0aW9uIGhkKGEsYixjLGQsZSl7dmFyIGY9ZDtpZigwPT09KGImMSkmJjA9PT0oYiYyKSYmbnVsbCE9PWQpYTpmb3IoOzspe2lmKG51bGw9PT1kKXJldHVybjt2YXIgZz1kLnRhZztpZigzPT09Z3x8ND09PWcpe3ZhciBoPWQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87aWYoaD09PWV8fDg9PT1oLm5vZGVUeXBlJiZoLnBhcmVudE5vZGU9PT1lKWJyZWFrO2lmKDQ9PT1nKWZvcihnPWQucmV0dXJuO251bGwhPT1nOyl7dmFyIGs9Zy50YWc7aWYoMz09PWt8fDQ9PT1rKWlmKGs9Zy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyxrPT09ZXx8OD09PWsubm9kZVR5cGUmJmsucGFyZW50Tm9kZT09PWUpcmV0dXJuO2c9Zy5yZXR1cm59Zm9yKDtudWxsIT09aDspe2c9V2MoaCk7aWYobnVsbD09PWcpcmV0dXJuO2s9Zy50YWc7aWYoNT09PWt8fDY9PT1rKXtkPWY9Zztjb250aW51ZSBhfWg9aC5wYXJlbnROb2RlfX1kPWQucmV0dXJufUpiKGZ1bmN0aW9uKCl7dmFyIGQ9ZixlPXhiKGMpLGc9W107XG5hOnt2YXIgaD1kZi5nZXQoYSk7aWYodm9pZCAwIT09aCl7dmFyIGs9dGQsbj1hO3N3aXRjaChhKXtjYXNlIFwia2V5cHJlc3NcIjppZigwPT09b2QoYykpYnJlYWsgYTtjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOms9UmQ7YnJlYWs7Y2FzZSBcImZvY3VzaW5cIjpuPVwiZm9jdXNcIjtrPUZkO2JyZWFrO2Nhc2UgXCJmb2N1c291dFwiOm49XCJibHVyXCI7az1GZDticmVhaztjYXNlIFwiYmVmb3JlYmx1clwiOmNhc2UgXCJhZnRlcmJsdXJcIjprPUZkO2JyZWFrO2Nhc2UgXCJjbGlja1wiOmlmKDI9PT1jLmJ1dHRvbilicmVhayBhO2Nhc2UgXCJhdXhjbGlja1wiOmNhc2UgXCJkYmxjbGlja1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwibW91c2Vtb3ZlXCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwibW91c2VvdXRcIjpjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcImNvbnRleHRtZW51XCI6az1CZDticmVhaztjYXNlIFwiZHJhZ1wiOmNhc2UgXCJkcmFnZW5kXCI6Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnZXhpdFwiOmNhc2UgXCJkcmFnbGVhdmVcIjpjYXNlIFwiZHJhZ292ZXJcIjpjYXNlIFwiZHJhZ3N0YXJ0XCI6Y2FzZSBcImRyb3BcIjprPVxuRGQ7YnJlYWs7Y2FzZSBcInRvdWNoY2FuY2VsXCI6Y2FzZSBcInRvdWNoZW5kXCI6Y2FzZSBcInRvdWNobW92ZVwiOmNhc2UgXCJ0b3VjaHN0YXJ0XCI6az1WZDticmVhaztjYXNlICRlOmNhc2UgYWY6Y2FzZSBiZjprPUhkO2JyZWFrO2Nhc2UgY2Y6az1YZDticmVhaztjYXNlIFwic2Nyb2xsXCI6az12ZDticmVhaztjYXNlIFwid2hlZWxcIjprPVpkO2JyZWFrO2Nhc2UgXCJjb3B5XCI6Y2FzZSBcImN1dFwiOmNhc2UgXCJwYXN0ZVwiOms9SmQ7YnJlYWs7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcImxvc3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJwb2ludGVyY2FuY2VsXCI6Y2FzZSBcInBvaW50ZXJkb3duXCI6Y2FzZSBcInBvaW50ZXJtb3ZlXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwicG9pbnRlcnVwXCI6az1UZH12YXIgdD0wIT09KGImNCksSj0hdCYmXCJzY3JvbGxcIj09PWEseD10P251bGwhPT1oP2grXCJDYXB0dXJlXCI6bnVsbDpoO3Q9W107Zm9yKHZhciB3PWQsdTtudWxsIT09XG53Oyl7dT13O3ZhciBGPXUuc3RhdGVOb2RlOzU9PT11LnRhZyYmbnVsbCE9PUYmJih1PUYsbnVsbCE9PXgmJihGPUtiKHcseCksbnVsbCE9RiYmdC5wdXNoKHRmKHcsRix1KSkpKTtpZihKKWJyZWFrO3c9dy5yZXR1cm59MDx0Lmxlbmd0aCYmKGg9bmV3IGsoaCxuLG51bGwsYyxlKSxnLnB1c2goe2V2ZW50OmgsbGlzdGVuZXJzOnR9KSl9fWlmKDA9PT0oYiY3KSl7YTp7aD1cIm1vdXNlb3ZlclwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YTtrPVwibW91c2VvdXRcIj09PWF8fFwicG9pbnRlcm91dFwiPT09YTtpZihoJiZjIT09d2ImJihuPWMucmVsYXRlZFRhcmdldHx8Yy5mcm9tRWxlbWVudCkmJihXYyhuKXx8blt1Zl0pKWJyZWFrIGE7aWYoa3x8aCl7aD1lLndpbmRvdz09PWU/ZTooaD1lLm93bmVyRG9jdW1lbnQpP2guZGVmYXVsdFZpZXd8fGgucGFyZW50V2luZG93OndpbmRvdztpZihrKXtpZihuPWMucmVsYXRlZFRhcmdldHx8Yy50b0VsZW1lbnQsaz1kLG49bj9XYyhuKTpudWxsLG51bGwhPT1cbm4mJihKPVZiKG4pLG4hPT1KfHw1IT09bi50YWcmJjYhPT1uLnRhZykpbj1udWxsfWVsc2Ugaz1udWxsLG49ZDtpZihrIT09bil7dD1CZDtGPVwib25Nb3VzZUxlYXZlXCI7eD1cIm9uTW91c2VFbnRlclwiO3c9XCJtb3VzZVwiO2lmKFwicG9pbnRlcm91dFwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YSl0PVRkLEY9XCJvblBvaW50ZXJMZWF2ZVwiLHg9XCJvblBvaW50ZXJFbnRlclwiLHc9XCJwb2ludGVyXCI7Sj1udWxsPT1rP2g6dWUoayk7dT1udWxsPT1uP2g6dWUobik7aD1uZXcgdChGLHcrXCJsZWF2ZVwiLGssYyxlKTtoLnRhcmdldD1KO2gucmVsYXRlZFRhcmdldD11O0Y9bnVsbDtXYyhlKT09PWQmJih0PW5ldyB0KHgsdytcImVudGVyXCIsbixjLGUpLHQudGFyZ2V0PXUsdC5yZWxhdGVkVGFyZ2V0PUosRj10KTtKPUY7aWYoayYmbiliOnt0PWs7eD1uO3c9MDtmb3IodT10O3U7dT12Zih1KSl3Kys7dT0wO2ZvcihGPXg7RjtGPXZmKEYpKXUrKztmb3IoOzA8dy11Oyl0PXZmKHQpLHctLTtmb3IoOzA8dS13Oyl4PVxudmYoeCksdS0tO2Zvcig7dy0tOyl7aWYodD09PXh8fG51bGwhPT14JiZ0PT09eC5hbHRlcm5hdGUpYnJlYWsgYjt0PXZmKHQpO3g9dmYoeCl9dD1udWxsfWVsc2UgdD1udWxsO251bGwhPT1rJiZ3ZihnLGgsayx0LCExKTtudWxsIT09biYmbnVsbCE9PUomJndmKGcsSixuLHQsITApfX19YTp7aD1kP3VlKGQpOndpbmRvdztrPWgubm9kZU5hbWUmJmgubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtpZihcInNlbGVjdFwiPT09a3x8XCJpbnB1dFwiPT09ayYmXCJmaWxlXCI9PT1oLnR5cGUpdmFyIG5hPXZlO2Vsc2UgaWYobWUoaCkpaWYod2UpbmE9RmU7ZWxzZXtuYT1EZTt2YXIgeGE9Q2V9ZWxzZShrPWgubm9kZU5hbWUpJiZcImlucHV0XCI9PT1rLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1oLnR5cGV8fFwicmFkaW9cIj09PWgudHlwZSkmJihuYT1FZSk7aWYobmEmJihuYT1uYShhLGQpKSl7bmUoZyxuYSxjLGUpO2JyZWFrIGF9eGEmJnhhKGEsaCxkKTtcImZvY3Vzb3V0XCI9PT1hJiYoeGE9aC5fd3JhcHBlclN0YXRlKSYmXG54YS5jb250cm9sbGVkJiZcIm51bWJlclwiPT09aC50eXBlJiZjYihoLFwibnVtYmVyXCIsaC52YWx1ZSl9eGE9ZD91ZShkKTp3aW5kb3c7c3dpdGNoKGEpe2Nhc2UgXCJmb2N1c2luXCI6aWYobWUoeGEpfHxcInRydWVcIj09PXhhLmNvbnRlbnRFZGl0YWJsZSlRZT14YSxSZT1kLFNlPW51bGw7YnJlYWs7Y2FzZSBcImZvY3Vzb3V0XCI6U2U9UmU9UWU9bnVsbDticmVhaztjYXNlIFwibW91c2Vkb3duXCI6VGU9ITA7YnJlYWs7Y2FzZSBcImNvbnRleHRtZW51XCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwiZHJhZ2VuZFwiOlRlPSExO1VlKGcsYyxlKTticmVhaztjYXNlIFwic2VsZWN0aW9uY2hhbmdlXCI6aWYoUGUpYnJlYWs7Y2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjpVZShnLGMsZSl9dmFyICRhO2lmKGFlKWI6e3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25zdGFydFwiOnZhciBiYT1cIm9uQ29tcG9zaXRpb25TdGFydFwiO2JyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6YmE9XCJvbkNvbXBvc2l0aW9uRW5kXCI7XG5icmVhayBiO2Nhc2UgXCJjb21wb3NpdGlvbnVwZGF0ZVwiOmJhPVwib25Db21wb3NpdGlvblVwZGF0ZVwiO2JyZWFrIGJ9YmE9dm9pZCAwfWVsc2UgaWU/Z2UoYSxjKSYmKGJhPVwib25Db21wb3NpdGlvbkVuZFwiKTpcImtleWRvd25cIj09PWEmJjIyOT09PWMua2V5Q29kZSYmKGJhPVwib25Db21wb3NpdGlvblN0YXJ0XCIpO2JhJiYoZGUmJlwia29cIiE9PWMubG9jYWxlJiYoaWV8fFwib25Db21wb3NpdGlvblN0YXJ0XCIhPT1iYT9cIm9uQ29tcG9zaXRpb25FbmRcIj09PWJhJiZpZSYmKCRhPW5kKCkpOihrZD1lLGxkPVwidmFsdWVcImluIGtkP2tkLnZhbHVlOmtkLnRleHRDb250ZW50LGllPSEwKSkseGE9b2UoZCxiYSksMDx4YS5sZW5ndGgmJihiYT1uZXcgTGQoYmEsYSxudWxsLGMsZSksZy5wdXNoKHtldmVudDpiYSxsaXN0ZW5lcnM6eGF9KSwkYT9iYS5kYXRhPSRhOigkYT1oZShjKSxudWxsIT09JGEmJihiYS5kYXRhPSRhKSkpKTtpZigkYT1jZT9qZShhLGMpOmtlKGEsYykpZD1vZShkLFwib25CZWZvcmVJbnB1dFwiKSxcbjA8ZC5sZW5ndGgmJihlPW5ldyBMZChcIm9uQmVmb3JlSW5wdXRcIixcImJlZm9yZWlucHV0XCIsbnVsbCxjLGUpLGcucHVzaCh7ZXZlbnQ6ZSxsaXN0ZW5lcnM6ZH0pLGUuZGF0YT0kYSl9c2UoZyxiKX0pfWZ1bmN0aW9uIHRmKGEsYixjKXtyZXR1cm57aW5zdGFuY2U6YSxsaXN0ZW5lcjpiLGN1cnJlbnRUYXJnZXQ6Y319ZnVuY3Rpb24gb2UoYSxiKXtmb3IodmFyIGM9YitcIkNhcHR1cmVcIixkPVtdO251bGwhPT1hOyl7dmFyIGU9YSxmPWUuc3RhdGVOb2RlOzU9PT1lLnRhZyYmbnVsbCE9PWYmJihlPWYsZj1LYihhLGMpLG51bGwhPWYmJmQudW5zaGlmdCh0ZihhLGYsZSkpLGY9S2IoYSxiKSxudWxsIT1mJiZkLnB1c2godGYoYSxmLGUpKSk7YT1hLnJldHVybn1yZXR1cm4gZH1mdW5jdGlvbiB2ZihhKXtpZihudWxsPT09YSlyZXR1cm4gbnVsbDtkbyBhPWEucmV0dXJuO3doaWxlKGEmJjUhPT1hLnRhZyk7cmV0dXJuIGE/YTpudWxsfVxuZnVuY3Rpb24gd2YoYSxiLGMsZCxlKXtmb3IodmFyIGY9Yi5fcmVhY3ROYW1lLGc9W107bnVsbCE9PWMmJmMhPT1kOyl7dmFyIGg9YyxrPWguYWx0ZXJuYXRlLGw9aC5zdGF0ZU5vZGU7aWYobnVsbCE9PWsmJms9PT1kKWJyZWFrOzU9PT1oLnRhZyYmbnVsbCE9PWwmJihoPWwsZT8oaz1LYihjLGYpLG51bGwhPWsmJmcudW5zaGlmdCh0ZihjLGssaCkpKTplfHwoaz1LYihjLGYpLG51bGwhPWsmJmcucHVzaCh0ZihjLGssaCkpKSk7Yz1jLnJldHVybn0wIT09Zy5sZW5ndGgmJmEucHVzaCh7ZXZlbnQ6YixsaXN0ZW5lcnM6Z30pfXZhciB4Zj0vXFxyXFxuPy9nLHlmPS9cXHUwMDAwfFxcdUZGRkQvZztmdW5jdGlvbiB6ZihhKXtyZXR1cm4oXCJzdHJpbmdcIj09PXR5cGVvZiBhP2E6XCJcIithKS5yZXBsYWNlKHhmLFwiXFxuXCIpLnJlcGxhY2UoeWYsXCJcIil9ZnVuY3Rpb24gQWYoYSxiLGMpe2I9emYoYik7aWYoemYoYSkhPT1iJiZjKXRocm93IEVycm9yKHAoNDI1KSk7fWZ1bmN0aW9uIEJmKCl7fVxudmFyIENmPW51bGwsRGY9bnVsbDtmdW5jdGlvbiBFZihhLGIpe3JldHVyblwidGV4dGFyZWFcIj09PWF8fFwibm9zY3JpcHRcIj09PWF8fFwic3RyaW5nXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJudW1iZXJcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLl9faHRtbH1cbnZhciBGZj1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygc2V0VGltZW91dD9zZXRUaW1lb3V0OnZvaWQgMCxHZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2xlYXJUaW1lb3V0P2NsZWFyVGltZW91dDp2b2lkIDAsSGY9XCJmdW5jdGlvblwiPT09dHlwZW9mIFByb21pc2U/UHJvbWlzZTp2b2lkIDAsSmY9XCJmdW5jdGlvblwiPT09dHlwZW9mIHF1ZXVlTWljcm90YXNrP3F1ZXVlTWljcm90YXNrOlwidW5kZWZpbmVkXCIhPT10eXBlb2YgSGY/ZnVuY3Rpb24oYSl7cmV0dXJuIEhmLnJlc29sdmUobnVsbCkudGhlbihhKS5jYXRjaChJZil9OkZmO2Z1bmN0aW9uIElmKGEpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXt0aHJvdyBhO30pfVxuZnVuY3Rpb24gS2YoYSxiKXt2YXIgYz1iLGQ9MDtkb3t2YXIgZT1jLm5leHRTaWJsaW5nO2EucmVtb3ZlQ2hpbGQoYyk7aWYoZSYmOD09PWUubm9kZVR5cGUpaWYoYz1lLmRhdGEsXCIvJFwiPT09Yyl7aWYoMD09PWQpe2EucmVtb3ZlQ2hpbGQoZSk7YmQoYik7cmV0dXJufWQtLX1lbHNlXCIkXCIhPT1jJiZcIiQ/XCIhPT1jJiZcIiQhXCIhPT1jfHxkKys7Yz1lfXdoaWxlKGMpO2JkKGIpfWZ1bmN0aW9uIExmKGEpe2Zvcig7bnVsbCE9YTthPWEubmV4dFNpYmxpbmcpe3ZhciBiPWEubm9kZVR5cGU7aWYoMT09PWJ8fDM9PT1iKWJyZWFrO2lmKDg9PT1iKXtiPWEuZGF0YTtpZihcIiRcIj09PWJ8fFwiJCFcIj09PWJ8fFwiJD9cIj09PWIpYnJlYWs7aWYoXCIvJFwiPT09YilyZXR1cm4gbnVsbH19cmV0dXJuIGF9XG5mdW5jdGlvbiBNZihhKXthPWEucHJldmlvdXNTaWJsaW5nO2Zvcih2YXIgYj0wO2E7KXtpZig4PT09YS5ub2RlVHlwZSl7dmFyIGM9YS5kYXRhO2lmKFwiJFwiPT09Y3x8XCIkIVwiPT09Y3x8XCIkP1wiPT09Yyl7aWYoMD09PWIpcmV0dXJuIGE7Yi0tfWVsc2VcIi8kXCI9PT1jJiZiKyt9YT1hLnByZXZpb3VzU2libGluZ31yZXR1cm4gbnVsbH12YXIgTmY9TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMiksT2Y9XCJfX3JlYWN0RmliZXIkXCIrTmYsUGY9XCJfX3JlYWN0UHJvcHMkXCIrTmYsdWY9XCJfX3JlYWN0Q29udGFpbmVyJFwiK05mLG9mPVwiX19yZWFjdEV2ZW50cyRcIitOZixRZj1cIl9fcmVhY3RMaXN0ZW5lcnMkXCIrTmYsUmY9XCJfX3JlYWN0SGFuZGxlcyRcIitOZjtcbmZ1bmN0aW9uIFdjKGEpe3ZhciBiPWFbT2ZdO2lmKGIpcmV0dXJuIGI7Zm9yKHZhciBjPWEucGFyZW50Tm9kZTtjOyl7aWYoYj1jW3VmXXx8Y1tPZl0pe2M9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWIuY2hpbGR8fG51bGwhPT1jJiZudWxsIT09Yy5jaGlsZClmb3IoYT1NZihhKTtudWxsIT09YTspe2lmKGM9YVtPZl0pcmV0dXJuIGM7YT1NZihhKX1yZXR1cm4gYn1hPWM7Yz1hLnBhcmVudE5vZGV9cmV0dXJuIG51bGx9ZnVuY3Rpb24gQ2IoYSl7YT1hW09mXXx8YVt1Zl07cmV0dXJuIWF8fDUhPT1hLnRhZyYmNiE9PWEudGFnJiYxMyE9PWEudGFnJiYzIT09YS50YWc/bnVsbDphfWZ1bmN0aW9uIHVlKGEpe2lmKDU9PT1hLnRhZ3x8Nj09PWEudGFnKXJldHVybiBhLnN0YXRlTm9kZTt0aHJvdyBFcnJvcihwKDMzKSk7fWZ1bmN0aW9uIERiKGEpe3JldHVybiBhW1BmXXx8bnVsbH12YXIgU2Y9W10sVGY9LTE7ZnVuY3Rpb24gVWYoYSl7cmV0dXJue2N1cnJlbnQ6YX19XG5mdW5jdGlvbiBFKGEpezA+VGZ8fChhLmN1cnJlbnQ9U2ZbVGZdLFNmW1RmXT1udWxsLFRmLS0pfWZ1bmN0aW9uIEcoYSxiKXtUZisrO1NmW1RmXT1hLmN1cnJlbnQ7YS5jdXJyZW50PWJ9dmFyIFZmPXt9LEg9VWYoVmYpLFdmPVVmKCExKSxYZj1WZjtmdW5jdGlvbiBZZihhLGIpe3ZhciBjPWEudHlwZS5jb250ZXh0VHlwZXM7aWYoIWMpcmV0dXJuIFZmO3ZhciBkPWEuc3RhdGVOb2RlO2lmKGQmJmQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD09PWIpcmV0dXJuIGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ7dmFyIGU9e30sZjtmb3IoZiBpbiBjKWVbZl09YltmXTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9YixhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWUpO3JldHVybiBlfVxuZnVuY3Rpb24gWmYoYSl7YT1hLmNoaWxkQ29udGV4dFR5cGVzO3JldHVybiBudWxsIT09YSYmdm9pZCAwIT09YX1mdW5jdGlvbiAkZigpe0UoV2YpO0UoSCl9ZnVuY3Rpb24gYWcoYSxiLGMpe2lmKEguY3VycmVudCE9PVZmKXRocm93IEVycm9yKHAoMTY4KSk7RyhILGIpO0coV2YsYyl9ZnVuY3Rpb24gYmcoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2I9Yi5jaGlsZENvbnRleHRUeXBlcztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5nZXRDaGlsZENvbnRleHQpcmV0dXJuIGM7ZD1kLmdldENoaWxkQ29udGV4dCgpO2Zvcih2YXIgZSBpbiBkKWlmKCEoZSBpbiBiKSl0aHJvdyBFcnJvcihwKDEwOCxSYShhKXx8XCJVbmtub3duXCIsZSkpO3JldHVybiBBKHt9LGMsZCl9XG5mdW5jdGlvbiBjZyhhKXthPShhPWEuc3RhdGVOb2RlKSYmYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dHx8VmY7WGY9SC5jdXJyZW50O0coSCxhKTtHKFdmLFdmLmN1cnJlbnQpO3JldHVybiEwfWZ1bmN0aW9uIGRnKGEsYixjKXt2YXIgZD1hLnN0YXRlTm9kZTtpZighZCl0aHJvdyBFcnJvcihwKDE2OSkpO2M/KGE9YmcoYSxiLFhmKSxkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0PWEsRShXZiksRShIKSxHKEgsYSkpOkUoV2YpO0coV2YsYyl9dmFyIGVnPW51bGwsZmc9ITEsZ2c9ITE7ZnVuY3Rpb24gaGcoYSl7bnVsbD09PWVnP2VnPVthXTplZy5wdXNoKGEpfWZ1bmN0aW9uIGlnKGEpe2ZnPSEwO2hnKGEpfVxuZnVuY3Rpb24gamcoKXtpZighZ2cmJm51bGwhPT1lZyl7Z2c9ITA7dmFyIGE9MCxiPUM7dHJ5e3ZhciBjPWVnO2ZvcihDPTE7YTxjLmxlbmd0aDthKyspe3ZhciBkPWNbYV07ZG8gZD1kKCEwKTt3aGlsZShudWxsIT09ZCl9ZWc9bnVsbDtmZz0hMX1jYXRjaChlKXt0aHJvdyBudWxsIT09ZWcmJihlZz1lZy5zbGljZShhKzEpKSxhYyhmYyxqZyksZTt9ZmluYWxseXtDPWIsZ2c9ITF9fXJldHVybiBudWxsfXZhciBrZz1bXSxsZz0wLG1nPW51bGwsbmc9MCxvZz1bXSxwZz0wLHFnPW51bGwscmc9MSxzZz1cIlwiO2Z1bmN0aW9uIHRnKGEsYil7a2dbbGcrK109bmc7a2dbbGcrK109bWc7bWc9YTtuZz1ifVxuZnVuY3Rpb24gdWcoYSxiLGMpe29nW3BnKytdPXJnO29nW3BnKytdPXNnO29nW3BnKytdPXFnO3FnPWE7dmFyIGQ9cmc7YT1zZzt2YXIgZT0zMi1vYyhkKS0xO2QmPX4oMTw8ZSk7Yys9MTt2YXIgZj0zMi1vYyhiKStlO2lmKDMwPGYpe3ZhciBnPWUtZSU1O2Y9KGQmKDE8PGcpLTEpLnRvU3RyaW5nKDMyKTtkPj49ZztlLT1nO3JnPTE8PDMyLW9jKGIpK2V8Yzw8ZXxkO3NnPWYrYX1lbHNlIHJnPTE8PGZ8Yzw8ZXxkLHNnPWF9ZnVuY3Rpb24gdmcoYSl7bnVsbCE9PWEucmV0dXJuJiYodGcoYSwxKSx1ZyhhLDEsMCkpfWZ1bmN0aW9uIHdnKGEpe2Zvcig7YT09PW1nOyltZz1rZ1stLWxnXSxrZ1tsZ109bnVsbCxuZz1rZ1stLWxnXSxrZ1tsZ109bnVsbDtmb3IoO2E9PT1xZzspcWc9b2dbLS1wZ10sb2dbcGddPW51bGwsc2c9b2dbLS1wZ10sb2dbcGddPW51bGwscmc9b2dbLS1wZ10sb2dbcGddPW51bGx9dmFyIHhnPW51bGwseWc9bnVsbCxJPSExLHpnPW51bGw7XG5mdW5jdGlvbiBBZyhhLGIpe3ZhciBjPUJnKDUsbnVsbCxudWxsLDApO2MuZWxlbWVudFR5cGU9XCJERUxFVEVEXCI7Yy5zdGF0ZU5vZGU9YjtjLnJldHVybj1hO2I9YS5kZWxldGlvbnM7bnVsbD09PWI/KGEuZGVsZXRpb25zPVtjXSxhLmZsYWdzfD0xNik6Yi5wdXNoKGMpfVxuZnVuY3Rpb24gQ2coYSxiKXtzd2l0Y2goYS50YWcpe2Nhc2UgNTp2YXIgYz1hLnR5cGU7Yj0xIT09Yi5ub2RlVHlwZXx8Yy50b0xvd2VyQ2FzZSgpIT09Yi5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpP251bGw6YjtyZXR1cm4gbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIseGc9YSx5Zz1MZihiLmZpcnN0Q2hpbGQpLCEwKTohMTtjYXNlIDY6cmV0dXJuIGI9XCJcIj09PWEucGVuZGluZ1Byb3BzfHwzIT09Yi5ub2RlVHlwZT9udWxsOmIsbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIseGc9YSx5Zz1udWxsLCEwKTohMTtjYXNlIDEzOnJldHVybiBiPTghPT1iLm5vZGVUeXBlP251bGw6YixudWxsIT09Yj8oYz1udWxsIT09cWc/e2lkOnJnLG92ZXJmbG93OnNnfTpudWxsLGEubWVtb2l6ZWRTdGF0ZT17ZGVoeWRyYXRlZDpiLHRyZWVDb250ZXh0OmMscmV0cnlMYW5lOjEwNzM3NDE4MjR9LGM9QmcoMTgsbnVsbCxudWxsLDApLGMuc3RhdGVOb2RlPWIsYy5yZXR1cm49YSxhLmNoaWxkPWMseGc9YSx5Zz1cbm51bGwsITApOiExO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIERnKGEpe3JldHVybiAwIT09KGEubW9kZSYxKSYmMD09PShhLmZsYWdzJjEyOCl9ZnVuY3Rpb24gRWcoYSl7aWYoSSl7dmFyIGI9eWc7aWYoYil7dmFyIGM9YjtpZighQ2coYSxiKSl7aWYoRGcoYSkpdGhyb3cgRXJyb3IocCg0MTgpKTtiPUxmKGMubmV4dFNpYmxpbmcpO3ZhciBkPXhnO2ImJkNnKGEsYik/QWcoZCxjKTooYS5mbGFncz1hLmZsYWdzJi00MDk3fDIsST0hMSx4Zz1hKX19ZWxzZXtpZihEZyhhKSl0aHJvdyBFcnJvcihwKDQxOCkpO2EuZmxhZ3M9YS5mbGFncyYtNDA5N3wyO0k9ITE7eGc9YX19fWZ1bmN0aW9uIEZnKGEpe2ZvcihhPWEucmV0dXJuO251bGwhPT1hJiY1IT09YS50YWcmJjMhPT1hLnRhZyYmMTMhPT1hLnRhZzspYT1hLnJldHVybjt4Zz1hfVxuZnVuY3Rpb24gR2coYSl7aWYoYSE9PXhnKXJldHVybiExO2lmKCFJKXJldHVybiBGZyhhKSxJPSEwLCExO3ZhciBiOyhiPTMhPT1hLnRhZykmJiEoYj01IT09YS50YWcpJiYoYj1hLnR5cGUsYj1cImhlYWRcIiE9PWImJlwiYm9keVwiIT09YiYmIUVmKGEudHlwZSxhLm1lbW9pemVkUHJvcHMpKTtpZihiJiYoYj15Zykpe2lmKERnKGEpKXRocm93IEhnKCksRXJyb3IocCg0MTgpKTtmb3IoO2I7KUFnKGEsYiksYj1MZihiLm5leHRTaWJsaW5nKX1GZyhhKTtpZigxMz09PWEudGFnKXthPWEubWVtb2l6ZWRTdGF0ZTthPW51bGwhPT1hP2EuZGVoeWRyYXRlZDpudWxsO2lmKCFhKXRocm93IEVycm9yKHAoMzE3KSk7YTp7YT1hLm5leHRTaWJsaW5nO2ZvcihiPTA7YTspe2lmKDg9PT1hLm5vZGVUeXBlKXt2YXIgYz1hLmRhdGE7aWYoXCIvJFwiPT09Yyl7aWYoMD09PWIpe3lnPUxmKGEubmV4dFNpYmxpbmcpO2JyZWFrIGF9Yi0tfWVsc2VcIiRcIiE9PWMmJlwiJCFcIiE9PWMmJlwiJD9cIiE9PWN8fGIrK31hPWEubmV4dFNpYmxpbmd9eWc9XG5udWxsfX1lbHNlIHlnPXhnP0xmKGEuc3RhdGVOb2RlLm5leHRTaWJsaW5nKTpudWxsO3JldHVybiEwfWZ1bmN0aW9uIEhnKCl7Zm9yKHZhciBhPXlnO2E7KWE9TGYoYS5uZXh0U2libGluZyl9ZnVuY3Rpb24gSWcoKXt5Zz14Zz1udWxsO0k9ITF9ZnVuY3Rpb24gSmcoYSl7bnVsbD09PXpnP3pnPVthXTp6Zy5wdXNoKGEpfXZhciBLZz11YS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZztcbmZ1bmN0aW9uIExnKGEsYixjKXthPWMucmVmO2lmKG51bGwhPT1hJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmXCJvYmplY3RcIiE9PXR5cGVvZiBhKXtpZihjLl9vd25lcil7Yz1jLl9vd25lcjtpZihjKXtpZigxIT09Yy50YWcpdGhyb3cgRXJyb3IocCgzMDkpKTt2YXIgZD1jLnN0YXRlTm9kZX1pZighZCl0aHJvdyBFcnJvcihwKDE0NyxhKSk7dmFyIGU9ZCxmPVwiXCIrYTtpZihudWxsIT09YiYmbnVsbCE9PWIucmVmJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5yZWYmJmIucmVmLl9zdHJpbmdSZWY9PT1mKXJldHVybiBiLnJlZjtiPWZ1bmN0aW9uKGEpe3ZhciBiPWUucmVmcztudWxsPT09YT9kZWxldGUgYltmXTpiW2ZdPWF9O2IuX3N0cmluZ1JlZj1mO3JldHVybiBifWlmKFwic3RyaW5nXCIhPT10eXBlb2YgYSl0aHJvdyBFcnJvcihwKDI4NCkpO2lmKCFjLl9vd25lcil0aHJvdyBFcnJvcihwKDI5MCxhKSk7fXJldHVybiBhfVxuZnVuY3Rpb24gTWcoYSxiKXthPU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChiKTt0aHJvdyBFcnJvcihwKDMxLFwiW29iamVjdCBPYmplY3RdXCI9PT1hP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYikuam9pbihcIiwgXCIpK1wifVwiOmEpKTt9ZnVuY3Rpb24gTmcoYSl7dmFyIGI9YS5faW5pdDtyZXR1cm4gYihhLl9wYXlsb2FkKX1cbmZ1bmN0aW9uIE9nKGEpe2Z1bmN0aW9uIGIoYixjKXtpZihhKXt2YXIgZD1iLmRlbGV0aW9ucztudWxsPT09ZD8oYi5kZWxldGlvbnM9W2NdLGIuZmxhZ3N8PTE2KTpkLnB1c2goYyl9fWZ1bmN0aW9uIGMoYyxkKXtpZighYSlyZXR1cm4gbnVsbDtmb3IoO251bGwhPT1kOyliKGMsZCksZD1kLnNpYmxpbmc7cmV0dXJuIG51bGx9ZnVuY3Rpb24gZChhLGIpe2ZvcihhPW5ldyBNYXA7bnVsbCE9PWI7KW51bGwhPT1iLmtleT9hLnNldChiLmtleSxiKTphLnNldChiLmluZGV4LGIpLGI9Yi5zaWJsaW5nO3JldHVybiBhfWZ1bmN0aW9uIGUoYSxiKXthPVBnKGEsYik7YS5pbmRleD0wO2Euc2libGluZz1udWxsO3JldHVybiBhfWZ1bmN0aW9uIGYoYixjLGQpe2IuaW5kZXg9ZDtpZighYSlyZXR1cm4gYi5mbGFnc3w9MTA0ODU3NixjO2Q9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWQpcmV0dXJuIGQ9ZC5pbmRleCxkPGM/KGIuZmxhZ3N8PTIsYyk6ZDtiLmZsYWdzfD0yO3JldHVybiBjfWZ1bmN0aW9uIGcoYil7YSYmXG5udWxsPT09Yi5hbHRlcm5hdGUmJihiLmZsYWdzfD0yKTtyZXR1cm4gYn1mdW5jdGlvbiBoKGEsYixjLGQpe2lmKG51bGw9PT1ifHw2IT09Yi50YWcpcmV0dXJuIGI9UWcoYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gayhhLGIsYyxkKXt2YXIgZj1jLnR5cGU7aWYoZj09PXlhKXJldHVybiBtKGEsYixjLnByb3BzLmNoaWxkcmVuLGQsYy5rZXkpO2lmKG51bGwhPT1iJiYoYi5lbGVtZW50VHlwZT09PWZ8fFwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYmJmYuJCR0eXBlb2Y9PT1IYSYmTmcoZik9PT1iLnR5cGUpKXJldHVybiBkPWUoYixjLnByb3BzKSxkLnJlZj1MZyhhLGIsYyksZC5yZXR1cm49YSxkO2Q9UmcoYy50eXBlLGMua2V5LGMucHJvcHMsbnVsbCxhLm1vZGUsZCk7ZC5yZWY9TGcoYSxiLGMpO2QucmV0dXJuPWE7cmV0dXJuIGR9ZnVuY3Rpb24gbChhLGIsYyxkKXtpZihudWxsPT09Ynx8NCE9PWIudGFnfHxcbmIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8hPT1jLmNvbnRhaW5lckluZm98fGIuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uIT09Yy5pbXBsZW1lbnRhdGlvbilyZXR1cm4gYj1TZyhjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYy5jaGlsZHJlbnx8W10pO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gbShhLGIsYyxkLGYpe2lmKG51bGw9PT1ifHw3IT09Yi50YWcpcmV0dXJuIGI9VGcoYyxhLm1vZGUsZCxmKSxiLnJldHVybj1hLGI7Yj1lKGIsYyk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBxKGEsYixjKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGImJlwiXCIhPT1ifHxcIm51bWJlclwiPT09dHlwZW9mIGIpcmV0dXJuIGI9UWcoXCJcIitiLGEubW9kZSxjKSxiLnJldHVybj1hLGI7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBiJiZudWxsIT09Yil7c3dpdGNoKGIuJCR0eXBlb2Ype2Nhc2UgdmE6cmV0dXJuIGM9UmcoYi50eXBlLGIua2V5LGIucHJvcHMsbnVsbCxhLm1vZGUsYyksXG5jLnJlZj1MZyhhLG51bGwsYiksYy5yZXR1cm49YSxjO2Nhc2Ugd2E6cmV0dXJuIGI9U2coYixhLm1vZGUsYyksYi5yZXR1cm49YSxiO2Nhc2UgSGE6dmFyIGQ9Yi5faW5pdDtyZXR1cm4gcShhLGQoYi5fcGF5bG9hZCksYyl9aWYoZWIoYil8fEthKGIpKXJldHVybiBiPVRnKGIsYS5tb2RlLGMsbnVsbCksYi5yZXR1cm49YSxiO01nKGEsYil9cmV0dXJuIG51bGx9ZnVuY3Rpb24gcihhLGIsYyxkKXt2YXIgZT1udWxsIT09Yj9iLmtleTpudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYyYmXCJcIiE9PWN8fFwibnVtYmVyXCI9PT10eXBlb2YgYylyZXR1cm4gbnVsbCE9PWU/bnVsbDpoKGEsYixcIlwiK2MsZCk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yyl7c3dpdGNoKGMuJCR0eXBlb2Ype2Nhc2UgdmE6cmV0dXJuIGMua2V5PT09ZT9rKGEsYixjLGQpOm51bGw7Y2FzZSB3YTpyZXR1cm4gYy5rZXk9PT1lP2woYSxiLGMsZCk6bnVsbDtjYXNlIEhhOnJldHVybiBlPWMuX2luaXQscihhLFxuYixlKGMuX3BheWxvYWQpLGQpfWlmKGViKGMpfHxLYShjKSlyZXR1cm4gbnVsbCE9PWU/bnVsbDptKGEsYixjLGQsbnVsbCk7TWcoYSxjKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB5KGEsYixjLGQsZSl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBkJiZcIlwiIT09ZHx8XCJudW1iZXJcIj09PXR5cGVvZiBkKXJldHVybiBhPWEuZ2V0KGMpfHxudWxsLGgoYixhLFwiXCIrZCxlKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGQmJm51bGwhPT1kKXtzd2l0Y2goZC4kJHR5cGVvZil7Y2FzZSB2YTpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsayhiLGEsZCxlKTtjYXNlIHdhOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxsKGIsYSxkLGUpO2Nhc2UgSGE6dmFyIGY9ZC5faW5pdDtyZXR1cm4geShhLGIsYyxmKGQuX3BheWxvYWQpLGUpfWlmKGViKGQpfHxLYShkKSlyZXR1cm4gYT1hLmdldChjKXx8bnVsbCxtKGIsYSxkLGUsbnVsbCk7TWcoYixkKX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIG4oZSxnLGgsayl7Zm9yKHZhciBsPW51bGwsbT1udWxsLHU9Zyx3PWc9MCx4PW51bGw7bnVsbCE9PXUmJnc8aC5sZW5ndGg7dysrKXt1LmluZGV4Pnc/KHg9dSx1PW51bGwpOng9dS5zaWJsaW5nO3ZhciBuPXIoZSx1LGhbd10sayk7aWYobnVsbD09PW4pe251bGw9PT11JiYodT14KTticmVha31hJiZ1JiZudWxsPT09bi5hbHRlcm5hdGUmJmIoZSx1KTtnPWYobixnLHcpO251bGw9PT1tP2w9bjptLnNpYmxpbmc9bjttPW47dT14fWlmKHc9PT1oLmxlbmd0aClyZXR1cm4gYyhlLHUpLEkmJnRnKGUsdyksbDtpZihudWxsPT09dSl7Zm9yKDt3PGgubGVuZ3RoO3crKyl1PXEoZSxoW3ddLGspLG51bGwhPT11JiYoZz1mKHUsZyx3KSxudWxsPT09bT9sPXU6bS5zaWJsaW5nPXUsbT11KTtJJiZ0ZyhlLHcpO3JldHVybiBsfWZvcih1PWQoZSx1KTt3PGgubGVuZ3RoO3crKyl4PXkodSxlLHcsaFt3XSxrKSxudWxsIT09eCYmKGEmJm51bGwhPT14LmFsdGVybmF0ZSYmdS5kZWxldGUobnVsbD09PVxueC5rZXk/dzp4LmtleSksZz1mKHgsZyx3KSxudWxsPT09bT9sPXg6bS5zaWJsaW5nPXgsbT14KTthJiZ1LmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO0kmJnRnKGUsdyk7cmV0dXJuIGx9ZnVuY3Rpb24gdChlLGcsaCxrKXt2YXIgbD1LYShoKTtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgbCl0aHJvdyBFcnJvcihwKDE1MCkpO2g9bC5jYWxsKGgpO2lmKG51bGw9PWgpdGhyb3cgRXJyb3IocCgxNTEpKTtmb3IodmFyIHU9bD1udWxsLG09Zyx3PWc9MCx4PW51bGwsbj1oLm5leHQoKTtudWxsIT09bSYmIW4uZG9uZTt3Kyssbj1oLm5leHQoKSl7bS5pbmRleD53Pyh4PW0sbT1udWxsKTp4PW0uc2libGluZzt2YXIgdD1yKGUsbSxuLnZhbHVlLGspO2lmKG51bGw9PT10KXtudWxsPT09bSYmKG09eCk7YnJlYWt9YSYmbSYmbnVsbD09PXQuYWx0ZXJuYXRlJiZiKGUsbSk7Zz1mKHQsZyx3KTtudWxsPT09dT9sPXQ6dS5zaWJsaW5nPXQ7dT10O209eH1pZihuLmRvbmUpcmV0dXJuIGMoZSxcbm0pLEkmJnRnKGUsdyksbDtpZihudWxsPT09bSl7Zm9yKDshbi5kb25lO3crKyxuPWgubmV4dCgpKW49cShlLG4udmFsdWUsayksbnVsbCE9PW4mJihnPWYobixnLHcpLG51bGw9PT11P2w9bjp1LnNpYmxpbmc9bix1PW4pO0kmJnRnKGUsdyk7cmV0dXJuIGx9Zm9yKG09ZChlLG0pOyFuLmRvbmU7dysrLG49aC5uZXh0KCkpbj15KG0sZSx3LG4udmFsdWUsayksbnVsbCE9PW4mJihhJiZudWxsIT09bi5hbHRlcm5hdGUmJm0uZGVsZXRlKG51bGw9PT1uLmtleT93Om4ua2V5KSxnPWYobixnLHcpLG51bGw9PT11P2w9bjp1LnNpYmxpbmc9bix1PW4pO2EmJm0uZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7SSYmdGcoZSx3KTtyZXR1cm4gbH1mdW5jdGlvbiBKKGEsZCxmLGgpe1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYmJmYudHlwZT09PXlhJiZudWxsPT09Zi5rZXkmJihmPWYucHJvcHMuY2hpbGRyZW4pO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYpe3N3aXRjaChmLiQkdHlwZW9mKXtjYXNlIHZhOmE6e2Zvcih2YXIgaz1cbmYua2V5LGw9ZDtudWxsIT09bDspe2lmKGwua2V5PT09ayl7az1mLnR5cGU7aWYoaz09PXlhKXtpZig3PT09bC50YWcpe2MoYSxsLnNpYmxpbmcpO2Q9ZShsLGYucHJvcHMuY2hpbGRyZW4pO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9fWVsc2UgaWYobC5lbGVtZW50VHlwZT09PWt8fFwib2JqZWN0XCI9PT10eXBlb2YgayYmbnVsbCE9PWsmJmsuJCR0eXBlb2Y9PT1IYSYmTmcoayk9PT1sLnR5cGUpe2MoYSxsLnNpYmxpbmcpO2Q9ZShsLGYucHJvcHMpO2QucmVmPUxnKGEsbCxmKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWMoYSxsKTticmVha31lbHNlIGIoYSxsKTtsPWwuc2libGluZ31mLnR5cGU9PT15YT8oZD1UZyhmLnByb3BzLmNoaWxkcmVuLGEubW9kZSxoLGYua2V5KSxkLnJldHVybj1hLGE9ZCk6KGg9UmcoZi50eXBlLGYua2V5LGYucHJvcHMsbnVsbCxhLm1vZGUsaCksaC5yZWY9TGcoYSxkLGYpLGgucmV0dXJuPWEsYT1oKX1yZXR1cm4gZyhhKTtjYXNlIHdhOmE6e2ZvcihsPWYua2V5O251bGwhPT1cbmQ7KXtpZihkLmtleT09PWwpaWYoND09PWQudGFnJiZkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvPT09Zi5jb250YWluZXJJbmZvJiZkLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbj09PWYuaW1wbGVtZW50YXRpb24pe2MoYSxkLnNpYmxpbmcpO2Q9ZShkLGYuY2hpbGRyZW58fFtdKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWVsc2V7YyhhLGQpO2JyZWFrfWVsc2UgYihhLGQpO2Q9ZC5zaWJsaW5nfWQ9U2coZixhLm1vZGUsaCk7ZC5yZXR1cm49YTthPWR9cmV0dXJuIGcoYSk7Y2FzZSBIYTpyZXR1cm4gbD1mLl9pbml0LEooYSxkLGwoZi5fcGF5bG9hZCksaCl9aWYoZWIoZikpcmV0dXJuIG4oYSxkLGYsaCk7aWYoS2EoZikpcmV0dXJuIHQoYSxkLGYsaCk7TWcoYSxmKX1yZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGYmJlwiXCIhPT1mfHxcIm51bWJlclwiPT09dHlwZW9mIGY/KGY9XCJcIitmLG51bGwhPT1kJiY2PT09ZC50YWc/KGMoYSxkLnNpYmxpbmcpLGQ9ZShkLGYpLGQucmV0dXJuPWEsYT1kKTpcbihjKGEsZCksZD1RZyhmLGEubW9kZSxoKSxkLnJldHVybj1hLGE9ZCksZyhhKSk6YyhhLGQpfXJldHVybiBKfXZhciBVZz1PZyghMCksVmc9T2coITEpLFdnPVVmKG51bGwpLFhnPW51bGwsWWc9bnVsbCxaZz1udWxsO2Z1bmN0aW9uICRnKCl7Wmc9WWc9WGc9bnVsbH1mdW5jdGlvbiBhaChhKXt2YXIgYj1XZy5jdXJyZW50O0UoV2cpO2EuX2N1cnJlbnRWYWx1ZT1ifWZ1bmN0aW9uIGJoKGEsYixjKXtmb3IoO251bGwhPT1hOyl7dmFyIGQ9YS5hbHRlcm5hdGU7KGEuY2hpbGRMYW5lcyZiKSE9PWI/KGEuY2hpbGRMYW5lc3w9YixudWxsIT09ZCYmKGQuY2hpbGRMYW5lc3w9YikpOm51bGwhPT1kJiYoZC5jaGlsZExhbmVzJmIpIT09YiYmKGQuY2hpbGRMYW5lc3w9Yik7aWYoYT09PWMpYnJlYWs7YT1hLnJldHVybn19XG5mdW5jdGlvbiBjaChhLGIpe1hnPWE7Wmc9WWc9bnVsbDthPWEuZGVwZW5kZW5jaWVzO251bGwhPT1hJiZudWxsIT09YS5maXJzdENvbnRleHQmJigwIT09KGEubGFuZXMmYikmJihkaD0hMCksYS5maXJzdENvbnRleHQ9bnVsbCl9ZnVuY3Rpb24gZWgoYSl7dmFyIGI9YS5fY3VycmVudFZhbHVlO2lmKFpnIT09YSlpZihhPXtjb250ZXh0OmEsbWVtb2l6ZWRWYWx1ZTpiLG5leHQ6bnVsbH0sbnVsbD09PVlnKXtpZihudWxsPT09WGcpdGhyb3cgRXJyb3IocCgzMDgpKTtZZz1hO1hnLmRlcGVuZGVuY2llcz17bGFuZXM6MCxmaXJzdENvbnRleHQ6YX19ZWxzZSBZZz1ZZy5uZXh0PWE7cmV0dXJuIGJ9dmFyIGZoPW51bGw7ZnVuY3Rpb24gZ2goYSl7bnVsbD09PWZoP2ZoPVthXTpmaC5wdXNoKGEpfVxuZnVuY3Rpb24gaGgoYSxiLGMsZCl7dmFyIGU9Yi5pbnRlcmxlYXZlZDtudWxsPT09ZT8oYy5uZXh0PWMsZ2goYikpOihjLm5leHQ9ZS5uZXh0LGUubmV4dD1jKTtiLmludGVybGVhdmVkPWM7cmV0dXJuIGloKGEsZCl9ZnVuY3Rpb24gaWgoYSxiKXthLmxhbmVzfD1iO3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiYoYy5sYW5lc3w9Yik7Yz1hO2ZvcihhPWEucmV0dXJuO251bGwhPT1hOylhLmNoaWxkTGFuZXN8PWIsYz1hLmFsdGVybmF0ZSxudWxsIT09YyYmKGMuY2hpbGRMYW5lc3w9YiksYz1hLGE9YS5yZXR1cm47cmV0dXJuIDM9PT1jLnRhZz9jLnN0YXRlTm9kZTpudWxsfXZhciBqaD0hMTtmdW5jdGlvbiBraChhKXthLnVwZGF0ZVF1ZXVlPXtiYXNlU3RhdGU6YS5tZW1vaXplZFN0YXRlLGZpcnN0QmFzZVVwZGF0ZTpudWxsLGxhc3RCYXNlVXBkYXRlOm51bGwsc2hhcmVkOntwZW5kaW5nOm51bGwsaW50ZXJsZWF2ZWQ6bnVsbCxsYW5lczowfSxlZmZlY3RzOm51bGx9fVxuZnVuY3Rpb24gbGgoYSxiKXthPWEudXBkYXRlUXVldWU7Yi51cGRhdGVRdWV1ZT09PWEmJihiLnVwZGF0ZVF1ZXVlPXtiYXNlU3RhdGU6YS5iYXNlU3RhdGUsZmlyc3RCYXNlVXBkYXRlOmEuZmlyc3RCYXNlVXBkYXRlLGxhc3RCYXNlVXBkYXRlOmEubGFzdEJhc2VVcGRhdGUsc2hhcmVkOmEuc2hhcmVkLGVmZmVjdHM6YS5lZmZlY3RzfSl9ZnVuY3Rpb24gbWgoYSxiKXtyZXR1cm57ZXZlbnRUaW1lOmEsbGFuZTpiLHRhZzowLHBheWxvYWQ6bnVsbCxjYWxsYmFjazpudWxsLG5leHQ6bnVsbH19XG5mdW5jdGlvbiBuaChhLGIsYyl7dmFyIGQ9YS51cGRhdGVRdWV1ZTtpZihudWxsPT09ZClyZXR1cm4gbnVsbDtkPWQuc2hhcmVkO2lmKDAhPT0oSyYyKSl7dmFyIGU9ZC5wZW5kaW5nO251bGw9PT1lP2IubmV4dD1iOihiLm5leHQ9ZS5uZXh0LGUubmV4dD1iKTtkLnBlbmRpbmc9YjtyZXR1cm4gaWgoYSxjKX1lPWQuaW50ZXJsZWF2ZWQ7bnVsbD09PWU/KGIubmV4dD1iLGdoKGQpKTooYi5uZXh0PWUubmV4dCxlLm5leHQ9Yik7ZC5pbnRlcmxlYXZlZD1iO3JldHVybiBpaChhLGMpfWZ1bmN0aW9uIG9oKGEsYixjKXtiPWIudXBkYXRlUXVldWU7aWYobnVsbCE9PWImJihiPWIuc2hhcmVkLDAhPT0oYyY0MTk0MjQwKSkpe3ZhciBkPWIubGFuZXM7ZCY9YS5wZW5kaW5nTGFuZXM7Y3w9ZDtiLmxhbmVzPWM7Q2MoYSxjKX19XG5mdW5jdGlvbiBwaChhLGIpe3ZhciBjPWEudXBkYXRlUXVldWUsZD1hLmFsdGVybmF0ZTtpZihudWxsIT09ZCYmKGQ9ZC51cGRhdGVRdWV1ZSxjPT09ZCkpe3ZhciBlPW51bGwsZj1udWxsO2M9Yy5maXJzdEJhc2VVcGRhdGU7aWYobnVsbCE9PWMpe2Rve3ZhciBnPXtldmVudFRpbWU6Yy5ldmVudFRpbWUsbGFuZTpjLmxhbmUsdGFnOmMudGFnLHBheWxvYWQ6Yy5wYXlsb2FkLGNhbGxiYWNrOmMuY2FsbGJhY2ssbmV4dDpudWxsfTtudWxsPT09Zj9lPWY9ZzpmPWYubmV4dD1nO2M9Yy5uZXh0fXdoaWxlKG51bGwhPT1jKTtudWxsPT09Zj9lPWY9YjpmPWYubmV4dD1ifWVsc2UgZT1mPWI7Yz17YmFzZVN0YXRlOmQuYmFzZVN0YXRlLGZpcnN0QmFzZVVwZGF0ZTplLGxhc3RCYXNlVXBkYXRlOmYsc2hhcmVkOmQuc2hhcmVkLGVmZmVjdHM6ZC5lZmZlY3RzfTthLnVwZGF0ZVF1ZXVlPWM7cmV0dXJufWE9Yy5sYXN0QmFzZVVwZGF0ZTtudWxsPT09YT9jLmZpcnN0QmFzZVVwZGF0ZT1iOmEubmV4dD1cbmI7Yy5sYXN0QmFzZVVwZGF0ZT1ifVxuZnVuY3Rpb24gcWgoYSxiLGMsZCl7dmFyIGU9YS51cGRhdGVRdWV1ZTtqaD0hMTt2YXIgZj1lLmZpcnN0QmFzZVVwZGF0ZSxnPWUubGFzdEJhc2VVcGRhdGUsaD1lLnNoYXJlZC5wZW5kaW5nO2lmKG51bGwhPT1oKXtlLnNoYXJlZC5wZW5kaW5nPW51bGw7dmFyIGs9aCxsPWsubmV4dDtrLm5leHQ9bnVsbDtudWxsPT09Zz9mPWw6Zy5uZXh0PWw7Zz1rO3ZhciBtPWEuYWx0ZXJuYXRlO251bGwhPT1tJiYobT1tLnVwZGF0ZVF1ZXVlLGg9bS5sYXN0QmFzZVVwZGF0ZSxoIT09ZyYmKG51bGw9PT1oP20uZmlyc3RCYXNlVXBkYXRlPWw6aC5uZXh0PWwsbS5sYXN0QmFzZVVwZGF0ZT1rKSl9aWYobnVsbCE9PWYpe3ZhciBxPWUuYmFzZVN0YXRlO2c9MDttPWw9az1udWxsO2g9Zjtkb3t2YXIgcj1oLmxhbmUseT1oLmV2ZW50VGltZTtpZigoZCZyKT09PXIpe251bGwhPT1tJiYobT1tLm5leHQ9e2V2ZW50VGltZTp5LGxhbmU6MCx0YWc6aC50YWcscGF5bG9hZDpoLnBheWxvYWQsY2FsbGJhY2s6aC5jYWxsYmFjayxcbm5leHQ6bnVsbH0pO2E6e3ZhciBuPWEsdD1oO3I9Yjt5PWM7c3dpdGNoKHQudGFnKXtjYXNlIDE6bj10LnBheWxvYWQ7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIG4pe3E9bi5jYWxsKHkscSxyKTticmVhayBhfXE9bjticmVhayBhO2Nhc2UgMzpuLmZsYWdzPW4uZmxhZ3MmLTY1NTM3fDEyODtjYXNlIDA6bj10LnBheWxvYWQ7cj1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygbj9uLmNhbGwoeSxxLHIpOm47aWYobnVsbD09PXJ8fHZvaWQgMD09PXIpYnJlYWsgYTtxPUEoe30scSxyKTticmVhayBhO2Nhc2UgMjpqaD0hMH19bnVsbCE9PWguY2FsbGJhY2smJjAhPT1oLmxhbmUmJihhLmZsYWdzfD02NCxyPWUuZWZmZWN0cyxudWxsPT09cj9lLmVmZmVjdHM9W2hdOnIucHVzaChoKSl9ZWxzZSB5PXtldmVudFRpbWU6eSxsYW5lOnIsdGFnOmgudGFnLHBheWxvYWQ6aC5wYXlsb2FkLGNhbGxiYWNrOmguY2FsbGJhY2ssbmV4dDpudWxsfSxudWxsPT09bT8obD1tPXksaz1xKTptPW0ubmV4dD15LGd8PXI7XG5oPWgubmV4dDtpZihudWxsPT09aClpZihoPWUuc2hhcmVkLnBlbmRpbmcsbnVsbD09PWgpYnJlYWs7ZWxzZSByPWgsaD1yLm5leHQsci5uZXh0PW51bGwsZS5sYXN0QmFzZVVwZGF0ZT1yLGUuc2hhcmVkLnBlbmRpbmc9bnVsbH13aGlsZSgxKTtudWxsPT09bSYmKGs9cSk7ZS5iYXNlU3RhdGU9aztlLmZpcnN0QmFzZVVwZGF0ZT1sO2UubGFzdEJhc2VVcGRhdGU9bTtiPWUuc2hhcmVkLmludGVybGVhdmVkO2lmKG51bGwhPT1iKXtlPWI7ZG8gZ3w9ZS5sYW5lLGU9ZS5uZXh0O3doaWxlKGUhPT1iKX1lbHNlIG51bGw9PT1mJiYoZS5zaGFyZWQubGFuZXM9MCk7cmh8PWc7YS5sYW5lcz1nO2EubWVtb2l6ZWRTdGF0ZT1xfX1cbmZ1bmN0aW9uIHNoKGEsYixjKXthPWIuZWZmZWN0cztiLmVmZmVjdHM9bnVsbDtpZihudWxsIT09YSlmb3IoYj0wO2I8YS5sZW5ndGg7YisrKXt2YXIgZD1hW2JdLGU9ZC5jYWxsYmFjaztpZihudWxsIT09ZSl7ZC5jYWxsYmFjaz1udWxsO2Q9YztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZSl0aHJvdyBFcnJvcihwKDE5MSxlKSk7ZS5jYWxsKGQpfX19dmFyIHRoPXt9LHVoPVVmKHRoKSx2aD1VZih0aCksd2g9VWYodGgpO2Z1bmN0aW9uIHhoKGEpe2lmKGE9PT10aCl0aHJvdyBFcnJvcihwKDE3NCkpO3JldHVybiBhfVxuZnVuY3Rpb24geWgoYSxiKXtHKHdoLGIpO0codmgsYSk7Ryh1aCx0aCk7YT1iLm5vZGVUeXBlO3N3aXRjaChhKXtjYXNlIDk6Y2FzZSAxMTpiPShiPWIuZG9jdW1lbnRFbGVtZW50KT9iLm5hbWVzcGFjZVVSSTpsYihudWxsLFwiXCIpO2JyZWFrO2RlZmF1bHQ6YT04PT09YT9iLnBhcmVudE5vZGU6YixiPWEubmFtZXNwYWNlVVJJfHxudWxsLGE9YS50YWdOYW1lLGI9bGIoYixhKX1FKHVoKTtHKHVoLGIpfWZ1bmN0aW9uIHpoKCl7RSh1aCk7RSh2aCk7RSh3aCl9ZnVuY3Rpb24gQWgoYSl7eGgod2guY3VycmVudCk7dmFyIGI9eGgodWguY3VycmVudCk7dmFyIGM9bGIoYixhLnR5cGUpO2IhPT1jJiYoRyh2aCxhKSxHKHVoLGMpKX1mdW5jdGlvbiBCaChhKXt2aC5jdXJyZW50PT09YSYmKEUodWgpLEUodmgpKX12YXIgTD1VZigwKTtcbmZ1bmN0aW9uIENoKGEpe2Zvcih2YXIgYj1hO251bGwhPT1iOyl7aWYoMTM9PT1iLnRhZyl7dmFyIGM9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1jJiYoYz1jLmRlaHlkcmF0ZWQsbnVsbD09PWN8fFwiJD9cIj09PWMuZGF0YXx8XCIkIVwiPT09Yy5kYXRhKSlyZXR1cm4gYn1lbHNlIGlmKDE5PT09Yi50YWcmJnZvaWQgMCE9PWIubWVtb2l6ZWRQcm9wcy5yZXZlYWxPcmRlcil7aWYoMCE9PShiLmZsYWdzJjEyOCkpcmV0dXJuIGJ9ZWxzZSBpZihudWxsIT09Yi5jaGlsZCl7Yi5jaGlsZC5yZXR1cm49YjtiPWIuY2hpbGQ7Y29udGludWV9aWYoYj09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuIG51bGw7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfXJldHVybiBudWxsfXZhciBEaD1bXTtcbmZ1bmN0aW9uIEVoKCl7Zm9yKHZhciBhPTA7YTxEaC5sZW5ndGg7YSsrKURoW2FdLl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5PW51bGw7RGgubGVuZ3RoPTB9dmFyIEZoPXVhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsR2g9dWEuUmVhY3RDdXJyZW50QmF0Y2hDb25maWcsSGg9MCxNPW51bGwsTj1udWxsLE89bnVsbCxJaD0hMSxKaD0hMSxLaD0wLExoPTA7ZnVuY3Rpb24gUCgpe3Rocm93IEVycm9yKHAoMzIxKSk7fWZ1bmN0aW9uIE1oKGEsYil7aWYobnVsbD09PWIpcmV0dXJuITE7Zm9yKHZhciBjPTA7YzxiLmxlbmd0aCYmYzxhLmxlbmd0aDtjKyspaWYoIUhlKGFbY10sYltjXSkpcmV0dXJuITE7cmV0dXJuITB9XG5mdW5jdGlvbiBOaChhLGIsYyxkLGUsZil7SGg9ZjtNPWI7Yi5tZW1vaXplZFN0YXRlPW51bGw7Yi51cGRhdGVRdWV1ZT1udWxsO2IubGFuZXM9MDtGaC5jdXJyZW50PW51bGw9PT1hfHxudWxsPT09YS5tZW1vaXplZFN0YXRlP09oOlBoO2E9YyhkLGUpO2lmKEpoKXtmPTA7ZG97Smg9ITE7S2g9MDtpZigyNTw9Zil0aHJvdyBFcnJvcihwKDMwMSkpO2YrPTE7Tz1OPW51bGw7Yi51cGRhdGVRdWV1ZT1udWxsO0ZoLmN1cnJlbnQ9UWg7YT1jKGQsZSl9d2hpbGUoSmgpfUZoLmN1cnJlbnQ9Umg7Yj1udWxsIT09TiYmbnVsbCE9PU4ubmV4dDtIaD0wO089Tj1NPW51bGw7SWg9ITE7aWYoYil0aHJvdyBFcnJvcihwKDMwMCkpO3JldHVybiBhfWZ1bmN0aW9uIFNoKCl7dmFyIGE9MCE9PUtoO0toPTA7cmV0dXJuIGF9XG5mdW5jdGlvbiBUaCgpe3ZhciBhPXttZW1vaXplZFN0YXRlOm51bGwsYmFzZVN0YXRlOm51bGwsYmFzZVF1ZXVlOm51bGwscXVldWU6bnVsbCxuZXh0Om51bGx9O251bGw9PT1PP00ubWVtb2l6ZWRTdGF0ZT1PPWE6Tz1PLm5leHQ9YTtyZXR1cm4gT31mdW5jdGlvbiBVaCgpe2lmKG51bGw9PT1OKXt2YXIgYT1NLmFsdGVybmF0ZTthPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsfWVsc2UgYT1OLm5leHQ7dmFyIGI9bnVsbD09PU8/TS5tZW1vaXplZFN0YXRlOk8ubmV4dDtpZihudWxsIT09YilPPWIsTj1hO2Vsc2V7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IocCgzMTApKTtOPWE7YT17bWVtb2l6ZWRTdGF0ZTpOLm1lbW9pemVkU3RhdGUsYmFzZVN0YXRlOk4uYmFzZVN0YXRlLGJhc2VRdWV1ZTpOLmJhc2VRdWV1ZSxxdWV1ZTpOLnF1ZXVlLG5leHQ6bnVsbH07bnVsbD09PU8/TS5tZW1vaXplZFN0YXRlPU89YTpPPU8ubmV4dD1hfXJldHVybiBPfVxuZnVuY3Rpb24gVmgoYSxiKXtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKGEpOmJ9XG5mdW5jdGlvbiBXaChhKXt2YXIgYj1VaCgpLGM9Yi5xdWV1ZTtpZihudWxsPT09Yyl0aHJvdyBFcnJvcihwKDMxMSkpO2MubGFzdFJlbmRlcmVkUmVkdWNlcj1hO3ZhciBkPU4sZT1kLmJhc2VRdWV1ZSxmPWMucGVuZGluZztpZihudWxsIT09Zil7aWYobnVsbCE9PWUpe3ZhciBnPWUubmV4dDtlLm5leHQ9Zi5uZXh0O2YubmV4dD1nfWQuYmFzZVF1ZXVlPWU9ZjtjLnBlbmRpbmc9bnVsbH1pZihudWxsIT09ZSl7Zj1lLm5leHQ7ZD1kLmJhc2VTdGF0ZTt2YXIgaD1nPW51bGwsaz1udWxsLGw9Zjtkb3t2YXIgbT1sLmxhbmU7aWYoKEhoJm0pPT09bSludWxsIT09ayYmKGs9ay5uZXh0PXtsYW5lOjAsYWN0aW9uOmwuYWN0aW9uLGhhc0VhZ2VyU3RhdGU6bC5oYXNFYWdlclN0YXRlLGVhZ2VyU3RhdGU6bC5lYWdlclN0YXRlLG5leHQ6bnVsbH0pLGQ9bC5oYXNFYWdlclN0YXRlP2wuZWFnZXJTdGF0ZTphKGQsbC5hY3Rpb24pO2Vsc2V7dmFyIHE9e2xhbmU6bSxhY3Rpb246bC5hY3Rpb24saGFzRWFnZXJTdGF0ZTpsLmhhc0VhZ2VyU3RhdGUsXG5lYWdlclN0YXRlOmwuZWFnZXJTdGF0ZSxuZXh0Om51bGx9O251bGw9PT1rPyhoPWs9cSxnPWQpOms9ay5uZXh0PXE7TS5sYW5lc3w9bTtyaHw9bX1sPWwubmV4dH13aGlsZShudWxsIT09bCYmbCE9PWYpO251bGw9PT1rP2c9ZDprLm5leHQ9aDtIZShkLGIubWVtb2l6ZWRTdGF0ZSl8fChkaD0hMCk7Yi5tZW1vaXplZFN0YXRlPWQ7Yi5iYXNlU3RhdGU9ZztiLmJhc2VRdWV1ZT1rO2MubGFzdFJlbmRlcmVkU3RhdGU9ZH1hPWMuaW50ZXJsZWF2ZWQ7aWYobnVsbCE9PWEpe2U9YTtkbyBmPWUubGFuZSxNLmxhbmVzfD1mLHJofD1mLGU9ZS5uZXh0O3doaWxlKGUhPT1hKX1lbHNlIG51bGw9PT1lJiYoYy5sYW5lcz0wKTtyZXR1cm5bYi5tZW1vaXplZFN0YXRlLGMuZGlzcGF0Y2hdfVxuZnVuY3Rpb24gWGgoYSl7dmFyIGI9VWgoKSxjPWIucXVldWU7aWYobnVsbD09PWMpdGhyb3cgRXJyb3IocCgzMTEpKTtjLmxhc3RSZW5kZXJlZFJlZHVjZXI9YTt2YXIgZD1jLmRpc3BhdGNoLGU9Yy5wZW5kaW5nLGY9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1lKXtjLnBlbmRpbmc9bnVsbDt2YXIgZz1lPWUubmV4dDtkbyBmPWEoZixnLmFjdGlvbiksZz1nLm5leHQ7d2hpbGUoZyE9PWUpO0hlKGYsYi5tZW1vaXplZFN0YXRlKXx8KGRoPSEwKTtiLm1lbW9pemVkU3RhdGU9ZjtudWxsPT09Yi5iYXNlUXVldWUmJihiLmJhc2VTdGF0ZT1mKTtjLmxhc3RSZW5kZXJlZFN0YXRlPWZ9cmV0dXJuW2YsZF19ZnVuY3Rpb24gWWgoKXt9XG5mdW5jdGlvbiBaaChhLGIpe3ZhciBjPU0sZD1VaCgpLGU9YigpLGY9IUhlKGQubWVtb2l6ZWRTdGF0ZSxlKTtmJiYoZC5tZW1vaXplZFN0YXRlPWUsZGg9ITApO2Q9ZC5xdWV1ZTskaChhaS5iaW5kKG51bGwsYyxkLGEpLFthXSk7aWYoZC5nZXRTbmFwc2hvdCE9PWJ8fGZ8fG51bGwhPT1PJiZPLm1lbW9pemVkU3RhdGUudGFnJjEpe2MuZmxhZ3N8PTIwNDg7YmkoOSxjaS5iaW5kKG51bGwsYyxkLGUsYiksdm9pZCAwLG51bGwpO2lmKG51bGw9PT1RKXRocm93IEVycm9yKHAoMzQ5KSk7MCE9PShIaCYzMCl8fGRpKGMsYixlKX1yZXR1cm4gZX1mdW5jdGlvbiBkaShhLGIsYyl7YS5mbGFnc3w9MTYzODQ7YT17Z2V0U25hcHNob3Q6Yix2YWx1ZTpjfTtiPU0udXBkYXRlUXVldWU7bnVsbD09PWI/KGI9e2xhc3RFZmZlY3Q6bnVsbCxzdG9yZXM6bnVsbH0sTS51cGRhdGVRdWV1ZT1iLGIuc3RvcmVzPVthXSk6KGM9Yi5zdG9yZXMsbnVsbD09PWM/Yi5zdG9yZXM9W2FdOmMucHVzaChhKSl9XG5mdW5jdGlvbiBjaShhLGIsYyxkKXtiLnZhbHVlPWM7Yi5nZXRTbmFwc2hvdD1kO2VpKGIpJiZmaShhKX1mdW5jdGlvbiBhaShhLGIsYyl7cmV0dXJuIGMoZnVuY3Rpb24oKXtlaShiKSYmZmkoYSl9KX1mdW5jdGlvbiBlaShhKXt2YXIgYj1hLmdldFNuYXBzaG90O2E9YS52YWx1ZTt0cnl7dmFyIGM9YigpO3JldHVybiFIZShhLGMpfWNhdGNoKGQpe3JldHVybiEwfX1mdW5jdGlvbiBmaShhKXt2YXIgYj1paChhLDEpO251bGwhPT1iJiZnaShiLGEsMSwtMSl9XG5mdW5jdGlvbiBoaShhKXt2YXIgYj1UaCgpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBhJiYoYT1hKCkpO2IubWVtb2l6ZWRTdGF0ZT1iLmJhc2VTdGF0ZT1hO2E9e3BlbmRpbmc6bnVsbCxpbnRlcmxlYXZlZDpudWxsLGxhbmVzOjAsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOlZoLGxhc3RSZW5kZXJlZFN0YXRlOmF9O2IucXVldWU9YTthPWEuZGlzcGF0Y2g9aWkuYmluZChudWxsLE0sYSk7cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxhXX1cbmZ1bmN0aW9uIGJpKGEsYixjLGQpe2E9e3RhZzphLGNyZWF0ZTpiLGRlc3Ryb3k6YyxkZXBzOmQsbmV4dDpudWxsfTtiPU0udXBkYXRlUXVldWU7bnVsbD09PWI/KGI9e2xhc3RFZmZlY3Q6bnVsbCxzdG9yZXM6bnVsbH0sTS51cGRhdGVRdWV1ZT1iLGIubGFzdEVmZmVjdD1hLm5leHQ9YSk6KGM9Yi5sYXN0RWZmZWN0LG51bGw9PT1jP2IubGFzdEVmZmVjdD1hLm5leHQ9YTooZD1jLm5leHQsYy5uZXh0PWEsYS5uZXh0PWQsYi5sYXN0RWZmZWN0PWEpKTtyZXR1cm4gYX1mdW5jdGlvbiBqaSgpe3JldHVybiBVaCgpLm1lbW9pemVkU3RhdGV9ZnVuY3Rpb24ga2koYSxiLGMsZCl7dmFyIGU9VGgoKTtNLmZsYWdzfD1hO2UubWVtb2l6ZWRTdGF0ZT1iaSgxfGIsYyx2b2lkIDAsdm9pZCAwPT09ZD9udWxsOmQpfVxuZnVuY3Rpb24gbGkoYSxiLGMsZCl7dmFyIGU9VWgoKTtkPXZvaWQgMD09PWQ/bnVsbDpkO3ZhciBmPXZvaWQgMDtpZihudWxsIT09Til7dmFyIGc9Ti5tZW1vaXplZFN0YXRlO2Y9Zy5kZXN0cm95O2lmKG51bGwhPT1kJiZNaChkLGcuZGVwcykpe2UubWVtb2l6ZWRTdGF0ZT1iaShiLGMsZixkKTtyZXR1cm59fU0uZmxhZ3N8PWE7ZS5tZW1vaXplZFN0YXRlPWJpKDF8YixjLGYsZCl9ZnVuY3Rpb24gbWkoYSxiKXtyZXR1cm4ga2koODM5MDY1Niw4LGEsYil9ZnVuY3Rpb24gJGgoYSxiKXtyZXR1cm4gbGkoMjA0OCw4LGEsYil9ZnVuY3Rpb24gbmkoYSxiKXtyZXR1cm4gbGkoNCwyLGEsYil9ZnVuY3Rpb24gb2koYSxiKXtyZXR1cm4gbGkoNCw0LGEsYil9XG5mdW5jdGlvbiBwaShhLGIpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXJldHVybiBhPWEoKSxiKGEpLGZ1bmN0aW9uKCl7YihudWxsKX07aWYobnVsbCE9PWImJnZvaWQgMCE9PWIpcmV0dXJuIGE9YSgpLGIuY3VycmVudD1hLGZ1bmN0aW9uKCl7Yi5jdXJyZW50PW51bGx9fWZ1bmN0aW9uIHFpKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gbGkoNCw0LHBpLmJpbmQobnVsbCxiLGEpLGMpfWZ1bmN0aW9uIHJpKCl7fWZ1bmN0aW9uIHNpKGEsYil7dmFyIGM9VWgoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJk1oKGIsZFsxXSkpcmV0dXJuIGRbMF07Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfVxuZnVuY3Rpb24gdGkoYSxiKXt2YXIgYz1VaCgpO2I9dm9pZCAwPT09Yj9udWxsOmI7dmFyIGQ9Yy5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kJiZudWxsIT09YiYmTWgoYixkWzFdKSlyZXR1cm4gZFswXTthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9ZnVuY3Rpb24gdWkoYSxiLGMpe2lmKDA9PT0oSGgmMjEpKXJldHVybiBhLmJhc2VTdGF0ZSYmKGEuYmFzZVN0YXRlPSExLGRoPSEwKSxhLm1lbW9pemVkU3RhdGU9YztIZShjLGIpfHwoYz15YygpLE0ubGFuZXN8PWMscmh8PWMsYS5iYXNlU3RhdGU9ITApO3JldHVybiBifWZ1bmN0aW9uIHZpKGEsYil7dmFyIGM9QztDPTAhPT1jJiY0PmM/Yzo0O2EoITApO3ZhciBkPUdoLnRyYW5zaXRpb247R2gudHJhbnNpdGlvbj17fTt0cnl7YSghMSksYigpfWZpbmFsbHl7Qz1jLEdoLnRyYW5zaXRpb249ZH19ZnVuY3Rpb24gd2koKXtyZXR1cm4gVWgoKS5tZW1vaXplZFN0YXRlfVxuZnVuY3Rpb24geGkoYSxiLGMpe3ZhciBkPXlpKGEpO2M9e2xhbmU6ZCxhY3Rpb246YyxoYXNFYWdlclN0YXRlOiExLGVhZ2VyU3RhdGU6bnVsbCxuZXh0Om51bGx9O2lmKHppKGEpKUFpKGIsYyk7ZWxzZSBpZihjPWhoKGEsYixjLGQpLG51bGwhPT1jKXt2YXIgZT1SKCk7Z2koYyxhLGQsZSk7QmkoYyxiLGQpfX1cbmZ1bmN0aW9uIGlpKGEsYixjKXt2YXIgZD15aShhKSxlPXtsYW5lOmQsYWN0aW9uOmMsaGFzRWFnZXJTdGF0ZTohMSxlYWdlclN0YXRlOm51bGwsbmV4dDpudWxsfTtpZih6aShhKSlBaShiLGUpO2Vsc2V7dmFyIGY9YS5hbHRlcm5hdGU7aWYoMD09PWEubGFuZXMmJihudWxsPT09Znx8MD09PWYubGFuZXMpJiYoZj1iLmxhc3RSZW5kZXJlZFJlZHVjZXIsbnVsbCE9PWYpKXRyeXt2YXIgZz1iLmxhc3RSZW5kZXJlZFN0YXRlLGg9ZihnLGMpO2UuaGFzRWFnZXJTdGF0ZT0hMDtlLmVhZ2VyU3RhdGU9aDtpZihIZShoLGcpKXt2YXIgaz1iLmludGVybGVhdmVkO251bGw9PT1rPyhlLm5leHQ9ZSxnaChiKSk6KGUubmV4dD1rLm5leHQsay5uZXh0PWUpO2IuaW50ZXJsZWF2ZWQ9ZTtyZXR1cm59fWNhdGNoKGwpe31maW5hbGx5e31jPWhoKGEsYixlLGQpO251bGwhPT1jJiYoZT1SKCksZ2koYyxhLGQsZSksQmkoYyxiLGQpKX19XG5mdW5jdGlvbiB6aShhKXt2YXIgYj1hLmFsdGVybmF0ZTtyZXR1cm4gYT09PU18fG51bGwhPT1iJiZiPT09TX1mdW5jdGlvbiBBaShhLGIpe0poPUloPSEwO3ZhciBjPWEucGVuZGluZztudWxsPT09Yz9iLm5leHQ9YjooYi5uZXh0PWMubmV4dCxjLm5leHQ9Yik7YS5wZW5kaW5nPWJ9ZnVuY3Rpb24gQmkoYSxiLGMpe2lmKDAhPT0oYyY0MTk0MjQwKSl7dmFyIGQ9Yi5sYW5lcztkJj1hLnBlbmRpbmdMYW5lcztjfD1kO2IubGFuZXM9YztDYyhhLGMpfX1cbnZhciBSaD17cmVhZENvbnRleHQ6ZWgsdXNlQ2FsbGJhY2s6UCx1c2VDb250ZXh0OlAsdXNlRWZmZWN0OlAsdXNlSW1wZXJhdGl2ZUhhbmRsZTpQLHVzZUluc2VydGlvbkVmZmVjdDpQLHVzZUxheW91dEVmZmVjdDpQLHVzZU1lbW86UCx1c2VSZWR1Y2VyOlAsdXNlUmVmOlAsdXNlU3RhdGU6UCx1c2VEZWJ1Z1ZhbHVlOlAsdXNlRGVmZXJyZWRWYWx1ZTpQLHVzZVRyYW5zaXRpb246UCx1c2VNdXRhYmxlU291cmNlOlAsdXNlU3luY0V4dGVybmFsU3RvcmU6UCx1c2VJZDpQLHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sT2g9e3JlYWRDb250ZXh0OmVoLHVzZUNhbGxiYWNrOmZ1bmN0aW9uKGEsYil7VGgoKS5tZW1vaXplZFN0YXRlPVthLHZvaWQgMD09PWI/bnVsbDpiXTtyZXR1cm4gYX0sdXNlQ29udGV4dDplaCx1c2VFZmZlY3Q6bWksdXNlSW1wZXJhdGl2ZUhhbmRsZTpmdW5jdGlvbihhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOm51bGw7cmV0dXJuIGtpKDQxOTQzMDgsXG40LHBpLmJpbmQobnVsbCxiLGEpLGMpfSx1c2VMYXlvdXRFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4ga2koNDE5NDMwOCw0LGEsYil9LHVzZUluc2VydGlvbkVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiBraSg0LDIsYSxiKX0sdXNlTWVtbzpmdW5jdGlvbihhLGIpe3ZhciBjPVRoKCk7Yj12b2lkIDA9PT1iP251bGw6YjthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9LHVzZVJlZHVjZXI6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPVRoKCk7Yj12b2lkIDAhPT1jP2MoYik6YjtkLm1lbW9pemVkU3RhdGU9ZC5iYXNlU3RhdGU9YjthPXtwZW5kaW5nOm51bGwsaW50ZXJsZWF2ZWQ6bnVsbCxsYW5lczowLGRpc3BhdGNoOm51bGwsbGFzdFJlbmRlcmVkUmVkdWNlcjphLGxhc3RSZW5kZXJlZFN0YXRlOmJ9O2QucXVldWU9YTthPWEuZGlzcGF0Y2g9eGkuYmluZChudWxsLE0sYSk7cmV0dXJuW2QubWVtb2l6ZWRTdGF0ZSxhXX0sdXNlUmVmOmZ1bmN0aW9uKGEpe3ZhciBiPVxuVGgoKTthPXtjdXJyZW50OmF9O3JldHVybiBiLm1lbW9pemVkU3RhdGU9YX0sdXNlU3RhdGU6aGksdXNlRGVidWdWYWx1ZTpyaSx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEpe3JldHVybiBUaCgpLm1lbW9pemVkU3RhdGU9YX0sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbigpe3ZhciBhPWhpKCExKSxiPWFbMF07YT12aS5iaW5kKG51bGwsYVsxXSk7VGgoKS5tZW1vaXplZFN0YXRlPWE7cmV0dXJuW2IsYV19LHVzZU11dGFibGVTb3VyY2U6ZnVuY3Rpb24oKXt9LHVzZVN5bmNFeHRlcm5hbFN0b3JlOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1NLGU9VGgoKTtpZihJKXtpZih2b2lkIDA9PT1jKXRocm93IEVycm9yKHAoNDA3KSk7Yz1jKCl9ZWxzZXtjPWIoKTtpZihudWxsPT09USl0aHJvdyBFcnJvcihwKDM0OSkpOzAhPT0oSGgmMzApfHxkaShkLGIsYyl9ZS5tZW1vaXplZFN0YXRlPWM7dmFyIGY9e3ZhbHVlOmMsZ2V0U25hcHNob3Q6Yn07ZS5xdWV1ZT1mO21pKGFpLmJpbmQobnVsbCxkLFxuZixhKSxbYV0pO2QuZmxhZ3N8PTIwNDg7YmkoOSxjaS5iaW5kKG51bGwsZCxmLGMsYiksdm9pZCAwLG51bGwpO3JldHVybiBjfSx1c2VJZDpmdW5jdGlvbigpe3ZhciBhPVRoKCksYj1RLmlkZW50aWZpZXJQcmVmaXg7aWYoSSl7dmFyIGM9c2c7dmFyIGQ9cmc7Yz0oZCZ+KDE8PDMyLW9jKGQpLTEpKS50b1N0cmluZygzMikrYztiPVwiOlwiK2IrXCJSXCIrYztjPUtoKys7MDxjJiYoYis9XCJIXCIrYy50b1N0cmluZygzMikpO2IrPVwiOlwifWVsc2UgYz1MaCsrLGI9XCI6XCIrYitcInJcIitjLnRvU3RyaW5nKDMyKStcIjpcIjtyZXR1cm4gYS5tZW1vaXplZFN0YXRlPWJ9LHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sUGg9e3JlYWRDb250ZXh0OmVoLHVzZUNhbGxiYWNrOnNpLHVzZUNvbnRleHQ6ZWgsdXNlRWZmZWN0OiRoLHVzZUltcGVyYXRpdmVIYW5kbGU6cWksdXNlSW5zZXJ0aW9uRWZmZWN0Om5pLHVzZUxheW91dEVmZmVjdDpvaSx1c2VNZW1vOnRpLHVzZVJlZHVjZXI6V2gsdXNlUmVmOmppLHVzZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIFdoKFZoKX0sXG51c2VEZWJ1Z1ZhbHVlOnJpLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSl7dmFyIGI9VWgoKTtyZXR1cm4gdWkoYixOLm1lbW9pemVkU3RhdGUsYSl9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1XaChWaClbMF0sYj1VaCgpLm1lbW9pemVkU3RhdGU7cmV0dXJuW2EsYl19LHVzZU11dGFibGVTb3VyY2U6WWgsdXNlU3luY0V4dGVybmFsU3RvcmU6WmgsdXNlSWQ6d2ksdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSxRaD17cmVhZENvbnRleHQ6ZWgsdXNlQ2FsbGJhY2s6c2ksdXNlQ29udGV4dDplaCx1c2VFZmZlY3Q6JGgsdXNlSW1wZXJhdGl2ZUhhbmRsZTpxaSx1c2VJbnNlcnRpb25FZmZlY3Q6bmksdXNlTGF5b3V0RWZmZWN0Om9pLHVzZU1lbW86dGksdXNlUmVkdWNlcjpYaCx1c2VSZWY6amksdXNlU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gWGgoVmgpfSx1c2VEZWJ1Z1ZhbHVlOnJpLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSl7dmFyIGI9VWgoKTtyZXR1cm4gbnVsbD09PVxuTj9iLm1lbW9pemVkU3RhdGU9YTp1aShiLE4ubWVtb2l6ZWRTdGF0ZSxhKX0sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbigpe3ZhciBhPVhoKFZoKVswXSxiPVVoKCkubWVtb2l6ZWRTdGF0ZTtyZXR1cm5bYSxiXX0sdXNlTXV0YWJsZVNvdXJjZTpZaCx1c2VTeW5jRXh0ZXJuYWxTdG9yZTpaaCx1c2VJZDp3aSx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9O2Z1bmN0aW9uIENpKGEsYil7aWYoYSYmYS5kZWZhdWx0UHJvcHMpe2I9QSh7fSxiKTthPWEuZGVmYXVsdFByb3BzO2Zvcih2YXIgYyBpbiBhKXZvaWQgMD09PWJbY10mJihiW2NdPWFbY10pO3JldHVybiBifXJldHVybiBifWZ1bmN0aW9uIERpKGEsYixjLGQpe2I9YS5tZW1vaXplZFN0YXRlO2M9YyhkLGIpO2M9bnVsbD09PWN8fHZvaWQgMD09PWM/YjpBKHt9LGIsYyk7YS5tZW1vaXplZFN0YXRlPWM7MD09PWEubGFuZXMmJihhLnVwZGF0ZVF1ZXVlLmJhc2VTdGF0ZT1jKX1cbnZhciBFaT17aXNNb3VudGVkOmZ1bmN0aW9uKGEpe3JldHVybihhPWEuX3JlYWN0SW50ZXJuYWxzKT9WYihhKT09PWE6ITF9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsczt2YXIgZD1SKCksZT15aShhKSxmPW1oKGQsZSk7Zi5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihmLmNhbGxiYWNrPWMpO2I9bmgoYSxmLGUpO251bGwhPT1iJiYoZ2koYixhLGUsZCksb2goYixhLGUpKX0sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsczt2YXIgZD1SKCksZT15aShhKSxmPW1oKGQsZSk7Zi50YWc9MTtmLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGYuY2FsbGJhY2s9Yyk7Yj1uaChhLGYsZSk7bnVsbCE9PWImJihnaShiLGEsZSxkKSxvaChiLGEsZSkpfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oYSxiKXthPWEuX3JlYWN0SW50ZXJuYWxzO3ZhciBjPVIoKSxkPVxueWkoYSksZT1taChjLGQpO2UudGFnPTI7dm9pZCAwIT09YiYmbnVsbCE9PWImJihlLmNhbGxiYWNrPWIpO2I9bmgoYSxlLGQpO251bGwhPT1iJiYoZ2koYixhLGQsYyksb2goYixhLGQpKX19O2Z1bmN0aW9uIEZpKGEsYixjLGQsZSxmLGcpe2E9YS5zdGF0ZU5vZGU7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGEuc2hvdWxkQ29tcG9uZW50VXBkYXRlP2Euc2hvdWxkQ29tcG9uZW50VXBkYXRlKGQsZixnKTpiLnByb3RvdHlwZSYmYi5wcm90b3R5cGUuaXNQdXJlUmVhY3RDb21wb25lbnQ/IUllKGMsZCl8fCFJZShlLGYpOiEwfVxuZnVuY3Rpb24gR2koYSxiLGMpe3ZhciBkPSExLGU9VmY7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2Y9ZWgoZik6KGU9WmYoYik/WGY6SC5jdXJyZW50LGQ9Yi5jb250ZXh0VHlwZXMsZj0oZD1udWxsIT09ZCYmdm9pZCAwIT09ZCk/WWYoYSxlKTpWZik7Yj1uZXcgYihjLGYpO2EubWVtb2l6ZWRTdGF0ZT1udWxsIT09Yi5zdGF0ZSYmdm9pZCAwIT09Yi5zdGF0ZT9iLnN0YXRlOm51bGw7Yi51cGRhdGVyPUVpO2Euc3RhdGVOb2RlPWI7Yi5fcmVhY3RJbnRlcm5hbHM9YTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9ZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWYpO3JldHVybiBifVxuZnVuY3Rpb24gSGkoYSxiLGMsZCl7YT1iLnN0YXRlO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7Yi5zdGF0ZSE9PWEmJkVpLmVucXVldWVSZXBsYWNlU3RhdGUoYixiLnN0YXRlLG51bGwpfVxuZnVuY3Rpb24gSWkoYSxiLGMsZCl7dmFyIGU9YS5zdGF0ZU5vZGU7ZS5wcm9wcz1jO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2UucmVmcz17fTtraChhKTt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/ZS5jb250ZXh0PWVoKGYpOihmPVpmKGIpP1hmOkguY3VycmVudCxlLmNvbnRleHQ9WWYoYSxmKSk7ZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7Zj1iLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcImZ1bmN0aW9uXCI9PT10eXBlb2YgZiYmKERpKGEsYixmLGMpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHN8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnR8fChiPWUuc3RhdGUsXG5cImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnQmJmUuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCksYiE9PWUuc3RhdGUmJkVpLmVucXVldWVSZXBsYWNlU3RhdGUoZSxlLnN0YXRlLG51bGwpLHFoKGEsYyxlLGQpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnREaWRNb3VudCYmKGEuZmxhZ3N8PTQxOTQzMDgpfWZ1bmN0aW9uIEppKGEsYil7dHJ5e3ZhciBjPVwiXCIsZD1iO2RvIGMrPVBhKGQpLGQ9ZC5yZXR1cm47d2hpbGUoZCk7dmFyIGU9Y31jYXRjaChmKXtlPVwiXFxuRXJyb3IgZ2VuZXJhdGluZyBzdGFjazogXCIrZi5tZXNzYWdlK1wiXFxuXCIrZi5zdGFja31yZXR1cm57dmFsdWU6YSxzb3VyY2U6YixzdGFjazplLGRpZ2VzdDpudWxsfX1cbmZ1bmN0aW9uIEtpKGEsYixjKXtyZXR1cm57dmFsdWU6YSxzb3VyY2U6bnVsbCxzdGFjazpudWxsIT1jP2M6bnVsbCxkaWdlc3Q6bnVsbCE9Yj9iOm51bGx9fWZ1bmN0aW9uIExpKGEsYil7dHJ5e2NvbnNvbGUuZXJyb3IoYi52YWx1ZSl9Y2F0Y2goYyl7c2V0VGltZW91dChmdW5jdGlvbigpe3Rocm93IGM7fSl9fXZhciBNaT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha01hcD9XZWFrTWFwOk1hcDtmdW5jdGlvbiBOaShhLGIsYyl7Yz1taCgtMSxjKTtjLnRhZz0zO2MucGF5bG9hZD17ZWxlbWVudDpudWxsfTt2YXIgZD1iLnZhbHVlO2MuY2FsbGJhY2s9ZnVuY3Rpb24oKXtPaXx8KE9pPSEwLFBpPWQpO0xpKGEsYil9O3JldHVybiBjfVxuZnVuY3Rpb24gUWkoYSxiLGMpe2M9bWgoLTEsYyk7Yy50YWc9Mzt2YXIgZD1hLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXt2YXIgZT1iLnZhbHVlO2MucGF5bG9hZD1mdW5jdGlvbigpe3JldHVybiBkKGUpfTtjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7TGkoYSxiKX19dmFyIGY9YS5zdGF0ZU5vZGU7bnVsbCE9PWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLmNvbXBvbmVudERpZENhdGNoJiYoYy5jYWxsYmFjaz1mdW5jdGlvbigpe0xpKGEsYik7XCJmdW5jdGlvblwiIT09dHlwZW9mIGQmJihudWxsPT09Umk/Umk9bmV3IFNldChbdGhpc10pOlJpLmFkZCh0aGlzKSk7dmFyIGM9Yi5zdGFjazt0aGlzLmNvbXBvbmVudERpZENhdGNoKGIudmFsdWUse2NvbXBvbmVudFN0YWNrOm51bGwhPT1jP2M6XCJcIn0pfSk7cmV0dXJuIGN9XG5mdW5jdGlvbiBTaShhLGIsYyl7dmFyIGQ9YS5waW5nQ2FjaGU7aWYobnVsbD09PWQpe2Q9YS5waW5nQ2FjaGU9bmV3IE1pO3ZhciBlPW5ldyBTZXQ7ZC5zZXQoYixlKX1lbHNlIGU9ZC5nZXQoYiksdm9pZCAwPT09ZSYmKGU9bmV3IFNldCxkLnNldChiLGUpKTtlLmhhcyhjKXx8KGUuYWRkKGMpLGE9VGkuYmluZChudWxsLGEsYixjKSxiLnRoZW4oYSxhKSl9ZnVuY3Rpb24gVWkoYSl7ZG97dmFyIGI7aWYoYj0xMz09PWEudGFnKWI9YS5tZW1vaXplZFN0YXRlLGI9bnVsbCE9PWI/bnVsbCE9PWIuZGVoeWRyYXRlZD8hMDohMTohMDtpZihiKXJldHVybiBhO2E9YS5yZXR1cm59d2hpbGUobnVsbCE9PWEpO3JldHVybiBudWxsfVxuZnVuY3Rpb24gVmkoYSxiLGMsZCxlKXtpZigwPT09KGEubW9kZSYxKSlyZXR1cm4gYT09PWI/YS5mbGFnc3w9NjU1MzY6KGEuZmxhZ3N8PTEyOCxjLmZsYWdzfD0xMzEwNzIsYy5mbGFncyY9LTUyODA1LDE9PT1jLnRhZyYmKG51bGw9PT1jLmFsdGVybmF0ZT9jLnRhZz0xNzooYj1taCgtMSwxKSxiLnRhZz0yLG5oKGMsYiwxKSkpLGMubGFuZXN8PTEpLGE7YS5mbGFnc3w9NjU1MzY7YS5sYW5lcz1lO3JldHVybiBhfXZhciBXaT11YS5SZWFjdEN1cnJlbnRPd25lcixkaD0hMTtmdW5jdGlvbiBYaShhLGIsYyxkKXtiLmNoaWxkPW51bGw9PT1hP1ZnKGIsbnVsbCxjLGQpOlVnKGIsYS5jaGlsZCxjLGQpfVxuZnVuY3Rpb24gWWkoYSxiLGMsZCxlKXtjPWMucmVuZGVyO3ZhciBmPWIucmVmO2NoKGIsZSk7ZD1OaChhLGIsYyxkLGYsZSk7Yz1TaCgpO2lmKG51bGwhPT1hJiYhZGgpcmV0dXJuIGIudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxiLmZsYWdzJj0tMjA1MyxhLmxhbmVzJj1+ZSxaaShhLGIsZSk7SSYmYyYmdmcoYik7Yi5mbGFnc3w9MTtYaShhLGIsZCxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uICRpKGEsYixjLGQsZSl7aWYobnVsbD09PWEpe3ZhciBmPWMudHlwZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZiYmIWFqKGYpJiZ2b2lkIDA9PT1mLmRlZmF1bHRQcm9wcyYmbnVsbD09PWMuY29tcGFyZSYmdm9pZCAwPT09Yy5kZWZhdWx0UHJvcHMpcmV0dXJuIGIudGFnPTE1LGIudHlwZT1mLGJqKGEsYixmLGQsZSk7YT1SZyhjLnR5cGUsbnVsbCxkLGIsYi5tb2RlLGUpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1mPWEuY2hpbGQ7aWYoMD09PShhLmxhbmVzJmUpKXt2YXIgZz1mLm1lbW9pemVkUHJvcHM7Yz1jLmNvbXBhcmU7Yz1udWxsIT09Yz9jOkllO2lmKGMoZyxkKSYmYS5yZWY9PT1iLnJlZilyZXR1cm4gWmkoYSxiLGUpfWIuZmxhZ3N8PTE7YT1QZyhmLGQpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1cbmZ1bmN0aW9uIGJqKGEsYixjLGQsZSl7aWYobnVsbCE9PWEpe3ZhciBmPWEubWVtb2l6ZWRQcm9wcztpZihJZShmLGQpJiZhLnJlZj09PWIucmVmKWlmKGRoPSExLGIucGVuZGluZ1Byb3BzPWQ9ZiwwIT09KGEubGFuZXMmZSkpMCE9PShhLmZsYWdzJjEzMTA3MikmJihkaD0hMCk7ZWxzZSByZXR1cm4gYi5sYW5lcz1hLmxhbmVzLFppKGEsYixlKX1yZXR1cm4gY2ooYSxiLGMsZCxlKX1cbmZ1bmN0aW9uIGRqKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPWQuY2hpbGRyZW4sZj1udWxsIT09YT9hLm1lbW9pemVkU3RhdGU6bnVsbDtpZihcImhpZGRlblwiPT09ZC5tb2RlKWlmKDA9PT0oYi5tb2RlJjEpKWIubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOjAsY2FjaGVQb29sOm51bGwsdHJhbnNpdGlvbnM6bnVsbH0sRyhlaixmaiksZmp8PWM7ZWxzZXtpZigwPT09KGMmMTA3Mzc0MTgyNCkpcmV0dXJuIGE9bnVsbCE9PWY/Zi5iYXNlTGFuZXN8YzpjLGIubGFuZXM9Yi5jaGlsZExhbmVzPTEwNzM3NDE4MjQsYi5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6YSxjYWNoZVBvb2w6bnVsbCx0cmFuc2l0aW9uczpudWxsfSxiLnVwZGF0ZVF1ZXVlPW51bGwsRyhlaixmaiksZmp8PWEsbnVsbDtiLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczowLGNhY2hlUG9vbDpudWxsLHRyYW5zaXRpb25zOm51bGx9O2Q9bnVsbCE9PWY/Zi5iYXNlTGFuZXM6YztHKGVqLGZqKTtmanw9ZH1lbHNlIG51bGwhPT1cbmY/KGQ9Zi5iYXNlTGFuZXN8YyxiLm1lbW9pemVkU3RhdGU9bnVsbCk6ZD1jLEcoZWosZmopLGZqfD1kO1hpKGEsYixlLGMpO3JldHVybiBiLmNoaWxkfWZ1bmN0aW9uIGdqKGEsYil7dmFyIGM9Yi5yZWY7aWYobnVsbD09PWEmJm51bGwhPT1jfHxudWxsIT09YSYmYS5yZWYhPT1jKWIuZmxhZ3N8PTUxMixiLmZsYWdzfD0yMDk3MTUyfWZ1bmN0aW9uIGNqKGEsYixjLGQsZSl7dmFyIGY9WmYoYyk/WGY6SC5jdXJyZW50O2Y9WWYoYixmKTtjaChiLGUpO2M9TmgoYSxiLGMsZCxmLGUpO2Q9U2goKTtpZihudWxsIT09YSYmIWRoKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5mbGFncyY9LTIwNTMsYS5sYW5lcyY9fmUsWmkoYSxiLGUpO0kmJmQmJnZnKGIpO2IuZmxhZ3N8PTE7WGkoYSxiLGMsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBoaihhLGIsYyxkLGUpe2lmKFpmKGMpKXt2YXIgZj0hMDtjZyhiKX1lbHNlIGY9ITE7Y2goYixlKTtpZihudWxsPT09Yi5zdGF0ZU5vZGUpaWooYSxiKSxHaShiLGMsZCksSWkoYixjLGQsZSksZD0hMDtlbHNlIGlmKG51bGw9PT1hKXt2YXIgZz1iLnN0YXRlTm9kZSxoPWIubWVtb2l6ZWRQcm9wcztnLnByb3BzPWg7dmFyIGs9Zy5jb250ZXh0LGw9Yy5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGwmJm51bGwhPT1sP2w9ZWgobCk6KGw9WmYoYyk/WGY6SC5jdXJyZW50LGw9WWYoYixsKSk7dmFyIG09Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMscT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgbXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGU7cXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fFxuKGghPT1kfHxrIT09bCkmJkhpKGIsZyxkLGwpO2poPSExO3ZhciByPWIubWVtb2l6ZWRTdGF0ZTtnLnN0YXRlPXI7cWgoYixkLGcsZSk7az1iLm1lbW9pemVkU3RhdGU7aCE9PWR8fHIhPT1rfHxXZi5jdXJyZW50fHxqaD8oXCJmdW5jdGlvblwiPT09dHlwZW9mIG0mJihEaShiLGMsbSxkKSxrPWIubWVtb2l6ZWRTdGF0ZSksKGg9amh8fEZpKGIsYyxoLGQscixrLGwpKT8ocXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50fHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50JiZnLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZmxhZ3N8PTQxOTQzMDgpKTpcbihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZmxhZ3N8PTQxOTQzMDgpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT1rKSxnLnByb3BzPWQsZy5zdGF0ZT1rLGcuY29udGV4dD1sLGQ9aCk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5mbGFnc3w9NDE5NDMwOCksZD0hMSl9ZWxzZXtnPWIuc3RhdGVOb2RlO2xoKGEsYik7aD1iLm1lbW9pemVkUHJvcHM7bD1iLnR5cGU9PT1iLmVsZW1lbnRUeXBlP2g6Q2koYi50eXBlLGgpO2cucHJvcHM9bDtxPWIucGVuZGluZ1Byb3BzO3I9Zy5jb250ZXh0O2s9Yy5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGsmJm51bGwhPT1rP2s9ZWgoayk6KGs9WmYoYyk/WGY6SC5jdXJyZW50LGs9WWYoYixrKSk7dmFyIHk9Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7KG09XCJmdW5jdGlvblwiPT09dHlwZW9mIHl8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKXx8XG5cImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGghPT1xfHxyIT09aykmJkhpKGIsZyxkLGspO2poPSExO3I9Yi5tZW1vaXplZFN0YXRlO2cuc3RhdGU9cjtxaChiLGQsZyxlKTt2YXIgbj1iLm1lbW9pemVkU3RhdGU7aCE9PXF8fHIhPT1ufHxXZi5jdXJyZW50fHxqaD8oXCJmdW5jdGlvblwiPT09dHlwZW9mIHkmJihEaShiLGMseSxkKSxuPWIubWVtb2l6ZWRTdGF0ZSksKGw9amh8fEZpKGIsYyxsLGQscixuLGspfHwhMSk/KG18fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlfHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5jb21wb25lbnRXaWxsVXBkYXRlKGQsbixrKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmXG5nLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlKGQsbixrKSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlJiYoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUmJihiLmZsYWdzfD0xMDI0KSk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcj09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZyPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9MTAyNCksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPW4pLGcucHJvcHM9ZCxnLnN0YXRlPW4sZy5jb250ZXh0PWssZD1sKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZyPT09XG5hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcj09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTEwMjQpLGQ9ITEpfXJldHVybiBqaihhLGIsYyxkLGYsZSl9XG5mdW5jdGlvbiBqaihhLGIsYyxkLGUsZil7Z2ooYSxiKTt2YXIgZz0wIT09KGIuZmxhZ3MmMTI4KTtpZighZCYmIWcpcmV0dXJuIGUmJmRnKGIsYywhMSksWmkoYSxiLGYpO2Q9Yi5zdGF0ZU5vZGU7V2kuY3VycmVudD1iO3ZhciBoPWcmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcj9udWxsOmQucmVuZGVyKCk7Yi5mbGFnc3w9MTtudWxsIT09YSYmZz8oYi5jaGlsZD1VZyhiLGEuY2hpbGQsbnVsbCxmKSxiLmNoaWxkPVVnKGIsbnVsbCxoLGYpKTpYaShhLGIsaCxmKTtiLm1lbW9pemVkU3RhdGU9ZC5zdGF0ZTtlJiZkZyhiLGMsITApO3JldHVybiBiLmNoaWxkfWZ1bmN0aW9uIGtqKGEpe3ZhciBiPWEuc3RhdGVOb2RlO2IucGVuZGluZ0NvbnRleHQ/YWcoYSxiLnBlbmRpbmdDb250ZXh0LGIucGVuZGluZ0NvbnRleHQhPT1iLmNvbnRleHQpOmIuY29udGV4dCYmYWcoYSxiLmNvbnRleHQsITEpO3loKGEsYi5jb250YWluZXJJbmZvKX1cbmZ1bmN0aW9uIGxqKGEsYixjLGQsZSl7SWcoKTtKZyhlKTtiLmZsYWdzfD0yNTY7WGkoYSxiLGMsZCk7cmV0dXJuIGIuY2hpbGR9dmFyIG1qPXtkZWh5ZHJhdGVkOm51bGwsdHJlZUNvbnRleHQ6bnVsbCxyZXRyeUxhbmU6MH07ZnVuY3Rpb24gbmooYSl7cmV0dXJue2Jhc2VMYW5lczphLGNhY2hlUG9vbDpudWxsLHRyYW5zaXRpb25zOm51bGx9fVxuZnVuY3Rpb24gb2ooYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9TC5jdXJyZW50LGY9ITEsZz0wIT09KGIuZmxhZ3MmMTI4KSxoOyhoPWcpfHwoaD1udWxsIT09YSYmbnVsbD09PWEubWVtb2l6ZWRTdGF0ZT8hMTowIT09KGUmMikpO2lmKGgpZj0hMCxiLmZsYWdzJj0tMTI5O2Vsc2UgaWYobnVsbD09PWF8fG51bGwhPT1hLm1lbW9pemVkU3RhdGUpZXw9MTtHKEwsZSYxKTtpZihudWxsPT09YSl7RWcoYik7YT1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWEmJihhPWEuZGVoeWRyYXRlZCxudWxsIT09YSkpcmV0dXJuIDA9PT0oYi5tb2RlJjEpP2IubGFuZXM9MTpcIiQhXCI9PT1hLmRhdGE/Yi5sYW5lcz04OmIubGFuZXM9MTA3Mzc0MTgyNCxudWxsO2c9ZC5jaGlsZHJlbjthPWQuZmFsbGJhY2s7cmV0dXJuIGY/KGQ9Yi5tb2RlLGY9Yi5jaGlsZCxnPXttb2RlOlwiaGlkZGVuXCIsY2hpbGRyZW46Z30sMD09PShkJjEpJiZudWxsIT09Zj8oZi5jaGlsZExhbmVzPTAsZi5wZW5kaW5nUHJvcHM9XG5nKTpmPXBqKGcsZCwwLG51bGwpLGE9VGcoYSxkLGMsbnVsbCksZi5yZXR1cm49YixhLnJldHVybj1iLGYuc2libGluZz1hLGIuY2hpbGQ9ZixiLmNoaWxkLm1lbW9pemVkU3RhdGU9bmooYyksYi5tZW1vaXplZFN0YXRlPW1qLGEpOnFqKGIsZyl9ZT1hLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWUmJihoPWUuZGVoeWRyYXRlZCxudWxsIT09aCkpcmV0dXJuIHJqKGEsYixnLGQsaCxlLGMpO2lmKGYpe2Y9ZC5mYWxsYmFjaztnPWIubW9kZTtlPWEuY2hpbGQ7aD1lLnNpYmxpbmc7dmFyIGs9e21vZGU6XCJoaWRkZW5cIixjaGlsZHJlbjpkLmNoaWxkcmVufTswPT09KGcmMSkmJmIuY2hpbGQhPT1lPyhkPWIuY2hpbGQsZC5jaGlsZExhbmVzPTAsZC5wZW5kaW5nUHJvcHM9ayxiLmRlbGV0aW9ucz1udWxsKTooZD1QZyhlLGspLGQuc3VidHJlZUZsYWdzPWUuc3VidHJlZUZsYWdzJjE0NjgwMDY0KTtudWxsIT09aD9mPVBnKGgsZik6KGY9VGcoZixnLGMsbnVsbCksZi5mbGFnc3w9Mik7Zi5yZXR1cm49XG5iO2QucmV0dXJuPWI7ZC5zaWJsaW5nPWY7Yi5jaGlsZD1kO2Q9ZjtmPWIuY2hpbGQ7Zz1hLmNoaWxkLm1lbW9pemVkU3RhdGU7Zz1udWxsPT09Zz9uaihjKTp7YmFzZUxhbmVzOmcuYmFzZUxhbmVzfGMsY2FjaGVQb29sOm51bGwsdHJhbnNpdGlvbnM6Zy50cmFuc2l0aW9uc307Zi5tZW1vaXplZFN0YXRlPWc7Zi5jaGlsZExhbmVzPWEuY2hpbGRMYW5lcyZ+YztiLm1lbW9pemVkU3RhdGU9bWo7cmV0dXJuIGR9Zj1hLmNoaWxkO2E9Zi5zaWJsaW5nO2Q9UGcoZix7bW9kZTpcInZpc2libGVcIixjaGlsZHJlbjpkLmNoaWxkcmVufSk7MD09PShiLm1vZGUmMSkmJihkLmxhbmVzPWMpO2QucmV0dXJuPWI7ZC5zaWJsaW5nPW51bGw7bnVsbCE9PWEmJihjPWIuZGVsZXRpb25zLG51bGw9PT1jPyhiLmRlbGV0aW9ucz1bYV0sYi5mbGFnc3w9MTYpOmMucHVzaChhKSk7Yi5jaGlsZD1kO2IubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBkfVxuZnVuY3Rpb24gcWooYSxiKXtiPXBqKHttb2RlOlwidmlzaWJsZVwiLGNoaWxkcmVuOmJ9LGEubW9kZSwwLG51bGwpO2IucmV0dXJuPWE7cmV0dXJuIGEuY2hpbGQ9Yn1mdW5jdGlvbiBzaihhLGIsYyxkKXtudWxsIT09ZCYmSmcoZCk7VWcoYixhLmNoaWxkLG51bGwsYyk7YT1xaihiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuKTthLmZsYWdzfD0yO2IubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBhfVxuZnVuY3Rpb24gcmooYSxiLGMsZCxlLGYsZyl7aWYoYyl7aWYoYi5mbGFncyYyNTYpcmV0dXJuIGIuZmxhZ3MmPS0yNTcsZD1LaShFcnJvcihwKDQyMikpKSxzaihhLGIsZyxkKTtpZihudWxsIT09Yi5tZW1vaXplZFN0YXRlKXJldHVybiBiLmNoaWxkPWEuY2hpbGQsYi5mbGFnc3w9MTI4LG51bGw7Zj1kLmZhbGxiYWNrO2U9Yi5tb2RlO2Q9cGooe21vZGU6XCJ2aXNpYmxlXCIsY2hpbGRyZW46ZC5jaGlsZHJlbn0sZSwwLG51bGwpO2Y9VGcoZixlLGcsbnVsbCk7Zi5mbGFnc3w9MjtkLnJldHVybj1iO2YucmV0dXJuPWI7ZC5zaWJsaW5nPWY7Yi5jaGlsZD1kOzAhPT0oYi5tb2RlJjEpJiZVZyhiLGEuY2hpbGQsbnVsbCxnKTtiLmNoaWxkLm1lbW9pemVkU3RhdGU9bmooZyk7Yi5tZW1vaXplZFN0YXRlPW1qO3JldHVybiBmfWlmKDA9PT0oYi5tb2RlJjEpKXJldHVybiBzaihhLGIsZyxudWxsKTtpZihcIiQhXCI9PT1lLmRhdGEpe2Q9ZS5uZXh0U2libGluZyYmZS5uZXh0U2libGluZy5kYXRhc2V0O1xuaWYoZCl2YXIgaD1kLmRnc3Q7ZD1oO2Y9RXJyb3IocCg0MTkpKTtkPUtpKGYsZCx2b2lkIDApO3JldHVybiBzaihhLGIsZyxkKX1oPTAhPT0oZyZhLmNoaWxkTGFuZXMpO2lmKGRofHxoKXtkPVE7aWYobnVsbCE9PWQpe3N3aXRjaChnJi1nKXtjYXNlIDQ6ZT0yO2JyZWFrO2Nhc2UgMTY6ZT04O2JyZWFrO2Nhc2UgNjQ6Y2FzZSAxMjg6Y2FzZSAyNTY6Y2FzZSA1MTI6Y2FzZSAxMDI0OmNhc2UgMjA0ODpjYXNlIDQwOTY6Y2FzZSA4MTkyOmNhc2UgMTYzODQ6Y2FzZSAzMjc2ODpjYXNlIDY1NTM2OmNhc2UgMTMxMDcyOmNhc2UgMjYyMTQ0OmNhc2UgNTI0Mjg4OmNhc2UgMTA0ODU3NjpjYXNlIDIwOTcxNTI6Y2FzZSA0MTk0MzA0OmNhc2UgODM4ODYwODpjYXNlIDE2Nzc3MjE2OmNhc2UgMzM1NTQ0MzI6Y2FzZSA2NzEwODg2NDplPTMyO2JyZWFrO2Nhc2UgNTM2ODcwOTEyOmU9MjY4NDM1NDU2O2JyZWFrO2RlZmF1bHQ6ZT0wfWU9MCE9PShlJihkLnN1c3BlbmRlZExhbmVzfGcpKT8wOmU7XG4wIT09ZSYmZSE9PWYucmV0cnlMYW5lJiYoZi5yZXRyeUxhbmU9ZSxpaChhLGUpLGdpKGQsYSxlLC0xKSl9dGooKTtkPUtpKEVycm9yKHAoNDIxKSkpO3JldHVybiBzaihhLGIsZyxkKX1pZihcIiQ/XCI9PT1lLmRhdGEpcmV0dXJuIGIuZmxhZ3N8PTEyOCxiLmNoaWxkPWEuY2hpbGQsYj11ai5iaW5kKG51bGwsYSksZS5fcmVhY3RSZXRyeT1iLG51bGw7YT1mLnRyZWVDb250ZXh0O3lnPUxmKGUubmV4dFNpYmxpbmcpO3hnPWI7ST0hMDt6Zz1udWxsO251bGwhPT1hJiYob2dbcGcrK109cmcsb2dbcGcrK109c2csb2dbcGcrK109cWcscmc9YS5pZCxzZz1hLm92ZXJmbG93LHFnPWIpO2I9cWooYixkLmNoaWxkcmVuKTtiLmZsYWdzfD00MDk2O3JldHVybiBifWZ1bmN0aW9uIHZqKGEsYixjKXthLmxhbmVzfD1iO3ZhciBkPWEuYWx0ZXJuYXRlO251bGwhPT1kJiYoZC5sYW5lc3w9Yik7YmgoYS5yZXR1cm4sYixjKX1cbmZ1bmN0aW9uIHdqKGEsYixjLGQsZSl7dmFyIGY9YS5tZW1vaXplZFN0YXRlO251bGw9PT1mP2EubWVtb2l6ZWRTdGF0ZT17aXNCYWNrd2FyZHM6YixyZW5kZXJpbmc6bnVsbCxyZW5kZXJpbmdTdGFydFRpbWU6MCxsYXN0OmQsdGFpbDpjLHRhaWxNb2RlOmV9OihmLmlzQmFja3dhcmRzPWIsZi5yZW5kZXJpbmc9bnVsbCxmLnJlbmRlcmluZ1N0YXJ0VGltZT0wLGYubGFzdD1kLGYudGFpbD1jLGYudGFpbE1vZGU9ZSl9XG5mdW5jdGlvbiB4aihhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHMsZT1kLnJldmVhbE9yZGVyLGY9ZC50YWlsO1hpKGEsYixkLmNoaWxkcmVuLGMpO2Q9TC5jdXJyZW50O2lmKDAhPT0oZCYyKSlkPWQmMXwyLGIuZmxhZ3N8PTEyODtlbHNle2lmKG51bGwhPT1hJiYwIT09KGEuZmxhZ3MmMTI4KSlhOmZvcihhPWIuY2hpbGQ7bnVsbCE9PWE7KXtpZigxMz09PWEudGFnKW51bGwhPT1hLm1lbW9pemVkU3RhdGUmJnZqKGEsYyxiKTtlbHNlIGlmKDE5PT09YS50YWcpdmooYSxjLGIpO2Vsc2UgaWYobnVsbCE9PWEuY2hpbGQpe2EuY2hpbGQucmV0dXJuPWE7YT1hLmNoaWxkO2NvbnRpbnVlfWlmKGE9PT1iKWJyZWFrIGE7Zm9yKDtudWxsPT09YS5zaWJsaW5nOyl7aWYobnVsbD09PWEucmV0dXJufHxhLnJldHVybj09PWIpYnJlYWsgYTthPWEucmV0dXJufWEuc2libGluZy5yZXR1cm49YS5yZXR1cm47YT1hLnNpYmxpbmd9ZCY9MX1HKEwsZCk7aWYoMD09PShiLm1vZGUmMSkpYi5tZW1vaXplZFN0YXRlPVxubnVsbDtlbHNlIHN3aXRjaChlKXtjYXNlIFwiZm9yd2FyZHNcIjpjPWIuY2hpbGQ7Zm9yKGU9bnVsbDtudWxsIT09YzspYT1jLmFsdGVybmF0ZSxudWxsIT09YSYmbnVsbD09PUNoKGEpJiYoZT1jKSxjPWMuc2libGluZztjPWU7bnVsbD09PWM/KGU9Yi5jaGlsZCxiLmNoaWxkPW51bGwpOihlPWMuc2libGluZyxjLnNpYmxpbmc9bnVsbCk7d2ooYiwhMSxlLGMsZik7YnJlYWs7Y2FzZSBcImJhY2t3YXJkc1wiOmM9bnVsbDtlPWIuY2hpbGQ7Zm9yKGIuY2hpbGQ9bnVsbDtudWxsIT09ZTspe2E9ZS5hbHRlcm5hdGU7aWYobnVsbCE9PWEmJm51bGw9PT1DaChhKSl7Yi5jaGlsZD1lO2JyZWFrfWE9ZS5zaWJsaW5nO2Uuc2libGluZz1jO2M9ZTtlPWF9d2ooYiwhMCxjLG51bGwsZik7YnJlYWs7Y2FzZSBcInRvZ2V0aGVyXCI6d2ooYiwhMSxudWxsLG51bGwsdm9pZCAwKTticmVhaztkZWZhdWx0OmIubWVtb2l6ZWRTdGF0ZT1udWxsfXJldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gaWooYSxiKXswPT09KGIubW9kZSYxKSYmbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5mbGFnc3w9Mil9ZnVuY3Rpb24gWmkoYSxiLGMpe251bGwhPT1hJiYoYi5kZXBlbmRlbmNpZXM9YS5kZXBlbmRlbmNpZXMpO3JofD1iLmxhbmVzO2lmKDA9PT0oYyZiLmNoaWxkTGFuZXMpKXJldHVybiBudWxsO2lmKG51bGwhPT1hJiZiLmNoaWxkIT09YS5jaGlsZCl0aHJvdyBFcnJvcihwKDE1MykpO2lmKG51bGwhPT1iLmNoaWxkKXthPWIuY2hpbGQ7Yz1QZyhhLGEucGVuZGluZ1Byb3BzKTtiLmNoaWxkPWM7Zm9yKGMucmV0dXJuPWI7bnVsbCE9PWEuc2libGluZzspYT1hLnNpYmxpbmcsYz1jLnNpYmxpbmc9UGcoYSxhLnBlbmRpbmdQcm9wcyksYy5yZXR1cm49YjtjLnNpYmxpbmc9bnVsbH1yZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIHlqKGEsYixjKXtzd2l0Y2goYi50YWcpe2Nhc2UgMzpraihiKTtJZygpO2JyZWFrO2Nhc2UgNTpBaChiKTticmVhaztjYXNlIDE6WmYoYi50eXBlKSYmY2coYik7YnJlYWs7Y2FzZSA0OnloKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7YnJlYWs7Y2FzZSAxMDp2YXIgZD1iLnR5cGUuX2NvbnRleHQsZT1iLm1lbW9pemVkUHJvcHMudmFsdWU7RyhXZyxkLl9jdXJyZW50VmFsdWUpO2QuX2N1cnJlbnRWYWx1ZT1lO2JyZWFrO2Nhc2UgMTM6ZD1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQpe2lmKG51bGwhPT1kLmRlaHlkcmF0ZWQpcmV0dXJuIEcoTCxMLmN1cnJlbnQmMSksYi5mbGFnc3w9MTI4LG51bGw7aWYoMCE9PShjJmIuY2hpbGQuY2hpbGRMYW5lcykpcmV0dXJuIG9qKGEsYixjKTtHKEwsTC5jdXJyZW50JjEpO2E9WmkoYSxiLGMpO3JldHVybiBudWxsIT09YT9hLnNpYmxpbmc6bnVsbH1HKEwsTC5jdXJyZW50JjEpO2JyZWFrO2Nhc2UgMTk6ZD0wIT09KGMmXG5iLmNoaWxkTGFuZXMpO2lmKDAhPT0oYS5mbGFncyYxMjgpKXtpZihkKXJldHVybiB4aihhLGIsYyk7Yi5mbGFnc3w9MTI4fWU9Yi5tZW1vaXplZFN0YXRlO251bGwhPT1lJiYoZS5yZW5kZXJpbmc9bnVsbCxlLnRhaWw9bnVsbCxlLmxhc3RFZmZlY3Q9bnVsbCk7RyhMLEwuY3VycmVudCk7aWYoZClicmVhaztlbHNlIHJldHVybiBudWxsO2Nhc2UgMjI6Y2FzZSAyMzpyZXR1cm4gYi5sYW5lcz0wLGRqKGEsYixjKX1yZXR1cm4gWmkoYSxiLGMpfXZhciB6aixBaixCaixDajtcbnpqPWZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPWIuY2hpbGQ7bnVsbCE9PWM7KXtpZig1PT09Yy50YWd8fDY9PT1jLnRhZylhLmFwcGVuZENoaWxkKGMuc3RhdGVOb2RlKTtlbHNlIGlmKDQhPT1jLnRhZyYmbnVsbCE9PWMuY2hpbGQpe2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfWlmKGM9PT1iKWJyZWFrO2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8Yy5yZXR1cm49PT1iKXJldHVybjtjPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Yz1jLnNpYmxpbmd9fTtBaj1mdW5jdGlvbigpe307XG5Caj1mdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1hLm1lbW9pemVkUHJvcHM7aWYoZSE9PWQpe2E9Yi5zdGF0ZU5vZGU7eGgodWguY3VycmVudCk7dmFyIGY9bnVsbDtzd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6ZT1ZYShhLGUpO2Q9WWEoYSxkKTtmPVtdO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjplPUEoe30sZSx7dmFsdWU6dm9pZCAwfSk7ZD1BKHt9LGQse3ZhbHVlOnZvaWQgMH0pO2Y9W107YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6ZT1nYihhLGUpO2Q9Z2IoYSxkKTtmPVtdO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiIT09dHlwZW9mIGUub25DbGljayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGQub25DbGljayYmKGEub25jbGljaz1CZil9dWIoYyxkKTt2YXIgZztjPW51bGw7Zm9yKGwgaW4gZSlpZighZC5oYXNPd25Qcm9wZXJ0eShsKSYmZS5oYXNPd25Qcm9wZXJ0eShsKSYmbnVsbCE9ZVtsXSlpZihcInN0eWxlXCI9PT1sKXt2YXIgaD1lW2xdO2ZvcihnIGluIGgpaC5oYXNPd25Qcm9wZXJ0eShnKSYmXG4oY3x8KGM9e30pLGNbZ109XCJcIil9ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIiE9PWwmJlwiY2hpbGRyZW5cIiE9PWwmJlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1sJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09bCYmXCJhdXRvRm9jdXNcIiE9PWwmJihlYS5oYXNPd25Qcm9wZXJ0eShsKT9mfHwoZj1bXSk6KGY9Znx8W10pLnB1c2gobCxudWxsKSk7Zm9yKGwgaW4gZCl7dmFyIGs9ZFtsXTtoPW51bGwhPWU/ZVtsXTp2b2lkIDA7aWYoZC5oYXNPd25Qcm9wZXJ0eShsKSYmayE9PWgmJihudWxsIT1rfHxudWxsIT1oKSlpZihcInN0eWxlXCI9PT1sKWlmKGgpe2ZvcihnIGluIGgpIWguaGFzT3duUHJvcGVydHkoZyl8fGsmJmsuaGFzT3duUHJvcGVydHkoZyl8fChjfHwoYz17fSksY1tnXT1cIlwiKTtmb3IoZyBpbiBrKWsuaGFzT3duUHJvcGVydHkoZykmJmhbZ10hPT1rW2ddJiYoY3x8KGM9e30pLGNbZ109a1tnXSl9ZWxzZSBjfHwoZnx8KGY9W10pLGYucHVzaChsLFxuYykpLGM9aztlbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09bD8oaz1rP2suX19odG1sOnZvaWQgMCxoPWg/aC5fX2h0bWw6dm9pZCAwLG51bGwhPWsmJmghPT1rJiYoZj1mfHxbXSkucHVzaChsLGspKTpcImNoaWxkcmVuXCI9PT1sP1wic3RyaW5nXCIhPT10eXBlb2YgayYmXCJudW1iZXJcIiE9PXR5cGVvZiBrfHwoZj1mfHxbXSkucHVzaChsLFwiXCIrayk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWwmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1sJiYoZWEuaGFzT3duUHJvcGVydHkobCk/KG51bGwhPWsmJlwib25TY3JvbGxcIj09PWwmJkQoXCJzY3JvbGxcIixhKSxmfHxoPT09a3x8KGY9W10pKTooZj1mfHxbXSkucHVzaChsLGspKX1jJiYoZj1mfHxbXSkucHVzaChcInN0eWxlXCIsYyk7dmFyIGw9ZjtpZihiLnVwZGF0ZVF1ZXVlPWwpYi5mbGFnc3w9NH19O0NqPWZ1bmN0aW9uKGEsYixjLGQpe2MhPT1kJiYoYi5mbGFnc3w9NCl9O1xuZnVuY3Rpb24gRGooYSxiKXtpZighSSlzd2l0Y2goYS50YWlsTW9kZSl7Y2FzZSBcImhpZGRlblwiOmI9YS50YWlsO2Zvcih2YXIgYz1udWxsO251bGwhPT1iOyludWxsIT09Yi5hbHRlcm5hdGUmJihjPWIpLGI9Yi5zaWJsaW5nO251bGw9PT1jP2EudGFpbD1udWxsOmMuc2libGluZz1udWxsO2JyZWFrO2Nhc2UgXCJjb2xsYXBzZWRcIjpjPWEudGFpbDtmb3IodmFyIGQ9bnVsbDtudWxsIT09YzspbnVsbCE9PWMuYWx0ZXJuYXRlJiYoZD1jKSxjPWMuc2libGluZztudWxsPT09ZD9ifHxudWxsPT09YS50YWlsP2EudGFpbD1udWxsOmEudGFpbC5zaWJsaW5nPW51bGw6ZC5zaWJsaW5nPW51bGx9fVxuZnVuY3Rpb24gUyhhKXt2YXIgYj1udWxsIT09YS5hbHRlcm5hdGUmJmEuYWx0ZXJuYXRlLmNoaWxkPT09YS5jaGlsZCxjPTAsZD0wO2lmKGIpZm9yKHZhciBlPWEuY2hpbGQ7bnVsbCE9PWU7KWN8PWUubGFuZXN8ZS5jaGlsZExhbmVzLGR8PWUuc3VidHJlZUZsYWdzJjE0NjgwMDY0LGR8PWUuZmxhZ3MmMTQ2ODAwNjQsZS5yZXR1cm49YSxlPWUuc2libGluZztlbHNlIGZvcihlPWEuY2hpbGQ7bnVsbCE9PWU7KWN8PWUubGFuZXN8ZS5jaGlsZExhbmVzLGR8PWUuc3VidHJlZUZsYWdzLGR8PWUuZmxhZ3MsZS5yZXR1cm49YSxlPWUuc2libGluZzthLnN1YnRyZWVGbGFnc3w9ZDthLmNoaWxkTGFuZXM9YztyZXR1cm4gYn1cbmZ1bmN0aW9uIEVqKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wczt3ZyhiKTtzd2l0Y2goYi50YWcpe2Nhc2UgMjpjYXNlIDE2OmNhc2UgMTU6Y2FzZSAwOmNhc2UgMTE6Y2FzZSA3OmNhc2UgODpjYXNlIDEyOmNhc2UgOTpjYXNlIDE0OnJldHVybiBTKGIpLG51bGw7Y2FzZSAxOnJldHVybiBaZihiLnR5cGUpJiYkZigpLFMoYiksbnVsbDtjYXNlIDM6ZD1iLnN0YXRlTm9kZTt6aCgpO0UoV2YpO0UoSCk7RWgoKTtkLnBlbmRpbmdDb250ZXh0JiYoZC5jb250ZXh0PWQucGVuZGluZ0NvbnRleHQsZC5wZW5kaW5nQ29udGV4dD1udWxsKTtpZihudWxsPT09YXx8bnVsbD09PWEuY2hpbGQpR2coYik/Yi5mbGFnc3w9NDpudWxsPT09YXx8YS5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZCYmMD09PShiLmZsYWdzJjI1Nil8fChiLmZsYWdzfD0xMDI0LG51bGwhPT16ZyYmKEZqKHpnKSx6Zz1udWxsKSk7QWooYSxiKTtTKGIpO3JldHVybiBudWxsO2Nhc2UgNTpCaChiKTt2YXIgZT14aCh3aC5jdXJyZW50KTtcbmM9Yi50eXBlO2lmKG51bGwhPT1hJiZudWxsIT1iLnN0YXRlTm9kZSlCaihhLGIsYyxkLGUpLGEucmVmIT09Yi5yZWYmJihiLmZsYWdzfD01MTIsYi5mbGFnc3w9MjA5NzE1Mik7ZWxzZXtpZighZCl7aWYobnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHAoMTY2KSk7UyhiKTtyZXR1cm4gbnVsbH1hPXhoKHVoLmN1cnJlbnQpO2lmKEdnKGIpKXtkPWIuc3RhdGVOb2RlO2M9Yi50eXBlO3ZhciBmPWIubWVtb2l6ZWRQcm9wcztkW09mXT1iO2RbUGZdPWY7YT0wIT09KGIubW9kZSYxKTtzd2l0Y2goYyl7Y2FzZSBcImRpYWxvZ1wiOkQoXCJjYW5jZWxcIixkKTtEKFwiY2xvc2VcIixkKTticmVhaztjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJlbWJlZFwiOkQoXCJsb2FkXCIsZCk7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGU9MDtlPGxmLmxlbmd0aDtlKyspRChsZltlXSxkKTticmVhaztjYXNlIFwic291cmNlXCI6RChcImVycm9yXCIsZCk7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RChcImVycm9yXCIsXG5kKTtEKFwibG9hZFwiLGQpO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RChcInRvZ2dsZVwiLGQpO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOlphKGQsZik7RChcImludmFsaWRcIixkKTticmVhaztjYXNlIFwic2VsZWN0XCI6ZC5fd3JhcHBlclN0YXRlPXt3YXNNdWx0aXBsZTohIWYubXVsdGlwbGV9O0QoXCJpbnZhbGlkXCIsZCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aGIoZCxmKSxEKFwiaW52YWxpZFwiLGQpfXViKGMsZik7ZT1udWxsO2Zvcih2YXIgZyBpbiBmKWlmKGYuaGFzT3duUHJvcGVydHkoZykpe3ZhciBoPWZbZ107XCJjaGlsZHJlblwiPT09Zz9cInN0cmluZ1wiPT09dHlwZW9mIGg/ZC50ZXh0Q29udGVudCE9PWgmJighMCE9PWYuc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nJiZBZihkLnRleHRDb250ZW50LGgsYSksZT1bXCJjaGlsZHJlblwiLGhdKTpcIm51bWJlclwiPT09dHlwZW9mIGgmJmQudGV4dENvbnRlbnQhPT1cIlwiK2gmJighMCE9PWYuc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nJiZBZihkLnRleHRDb250ZW50LFxuaCxhKSxlPVtcImNoaWxkcmVuXCIsXCJcIitoXSk6ZWEuaGFzT3duUHJvcGVydHkoZykmJm51bGwhPWgmJlwib25TY3JvbGxcIj09PWcmJkQoXCJzY3JvbGxcIixkKX1zd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6VmEoZCk7ZGIoZCxmLCEwKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpWYShkKTtqYihkKTticmVhaztjYXNlIFwic2VsZWN0XCI6Y2FzZSBcIm9wdGlvblwiOmJyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGYub25DbGljayYmKGQub25jbGljaz1CZil9ZD1lO2IudXBkYXRlUXVldWU9ZDtudWxsIT09ZCYmKGIuZmxhZ3N8PTQpfWVsc2V7Zz05PT09ZS5ub2RlVHlwZT9lOmUub3duZXJEb2N1bWVudDtcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWEmJihhPWtiKGMpKTtcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWE/XCJzY3JpcHRcIj09PWM/KGE9Zy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGEuaW5uZXJIVE1MPVwiPHNjcmlwdD5cXHgzYy9zY3JpcHQ+XCIsYT1hLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCkpOlxuXCJzdHJpbmdcIj09PXR5cGVvZiBkLmlzP2E9Zy5jcmVhdGVFbGVtZW50KGMse2lzOmQuaXN9KTooYT1nLmNyZWF0ZUVsZW1lbnQoYyksXCJzZWxlY3RcIj09PWMmJihnPWEsZC5tdWx0aXBsZT9nLm11bHRpcGxlPSEwOmQuc2l6ZSYmKGcuc2l6ZT1kLnNpemUpKSk6YT1nLmNyZWF0ZUVsZW1lbnROUyhhLGMpO2FbT2ZdPWI7YVtQZl09ZDt6aihhLGIsITEsITEpO2Iuc3RhdGVOb2RlPWE7YTp7Zz12YihjLGQpO3N3aXRjaChjKXtjYXNlIFwiZGlhbG9nXCI6RChcImNhbmNlbFwiLGEpO0QoXCJjbG9zZVwiLGEpO2U9ZDticmVhaztjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJlbWJlZFwiOkQoXCJsb2FkXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihlPTA7ZTxsZi5sZW5ndGg7ZSsrKUQobGZbZV0sYSk7ZT1kO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpEKFwiZXJyb3JcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RChcImVycm9yXCIsXG5hKTtEKFwibG9hZFwiLGEpO2U9ZDticmVhaztjYXNlIFwiZGV0YWlsc1wiOkQoXCJ0b2dnbGVcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImlucHV0XCI6WmEoYSxkKTtlPVlhKGEsZCk7RChcImludmFsaWRcIixhKTticmVhaztjYXNlIFwib3B0aW9uXCI6ZT1kO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLl93cmFwcGVyU3RhdGU9e3dhc011bHRpcGxlOiEhZC5tdWx0aXBsZX07ZT1BKHt9LGQse3ZhbHVlOnZvaWQgMH0pO0QoXCJpbnZhbGlkXCIsYSk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aGIoYSxkKTtlPWdiKGEsZCk7RChcImludmFsaWRcIixhKTticmVhaztkZWZhdWx0OmU9ZH11YihjLGUpO2g9ZTtmb3IoZiBpbiBoKWlmKGguaGFzT3duUHJvcGVydHkoZikpe3ZhciBrPWhbZl07XCJzdHlsZVwiPT09Zj9zYihhLGspOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWY/KGs9az9rLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmbmIoYSxrKSk6XCJjaGlsZHJlblwiPT09Zj9cInN0cmluZ1wiPT09dHlwZW9mIGs/KFwidGV4dGFyZWFcIiE9PVxuY3x8XCJcIiE9PWspJiZvYihhLGspOlwibnVtYmVyXCI9PT10eXBlb2YgayYmb2IoYSxcIlwiK2spOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1mJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09ZiYmXCJhdXRvRm9jdXNcIiE9PWYmJihlYS5oYXNPd25Qcm9wZXJ0eShmKT9udWxsIT1rJiZcIm9uU2Nyb2xsXCI9PT1mJiZEKFwic2Nyb2xsXCIsYSk6bnVsbCE9ayYmdGEoYSxmLGssZykpfXN3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpWYShhKTtkYihhLGQsITEpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlZhKGEpO2piKGEpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpudWxsIT1kLnZhbHVlJiZhLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsXCJcIitTYShkLnZhbHVlKSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEubXVsdGlwbGU9ISFkLm11bHRpcGxlO2Y9ZC52YWx1ZTtudWxsIT1mP2ZiKGEsISFkLm11bHRpcGxlLGYsITEpOm51bGwhPWQuZGVmYXVsdFZhbHVlJiZmYihhLCEhZC5tdWx0aXBsZSxkLmRlZmF1bHRWYWx1ZSxcbiEwKTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLm9uQ2xpY2smJihhLm9uY2xpY2s9QmYpfXN3aXRjaChjKXtjYXNlIFwiYnV0dG9uXCI6Y2FzZSBcImlucHV0XCI6Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJ0ZXh0YXJlYVwiOmQ9ISFkLmF1dG9Gb2N1czticmVhayBhO2Nhc2UgXCJpbWdcIjpkPSEwO2JyZWFrIGE7ZGVmYXVsdDpkPSExfX1kJiYoYi5mbGFnc3w9NCl9bnVsbCE9PWIucmVmJiYoYi5mbGFnc3w9NTEyLGIuZmxhZ3N8PTIwOTcxNTIpfVMoYik7cmV0dXJuIG51bGw7Y2FzZSA2OmlmKGEmJm51bGwhPWIuc3RhdGVOb2RlKUNqKGEsYixhLm1lbW9pemVkUHJvcHMsZCk7ZWxzZXtpZihcInN0cmluZ1wiIT09dHlwZW9mIGQmJm51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcihwKDE2NikpO2M9eGgod2guY3VycmVudCk7eGgodWguY3VycmVudCk7aWYoR2coYikpe2Q9Yi5zdGF0ZU5vZGU7Yz1iLm1lbW9pemVkUHJvcHM7ZFtPZl09YjtpZihmPWQubm9kZVZhbHVlIT09YylpZihhPVxueGcsbnVsbCE9PWEpc3dpdGNoKGEudGFnKXtjYXNlIDM6QWYoZC5ub2RlVmFsdWUsYywwIT09KGEubW9kZSYxKSk7YnJlYWs7Y2FzZSA1OiEwIT09YS5tZW1vaXplZFByb3BzLnN1cHByZXNzSHlkcmF0aW9uV2FybmluZyYmQWYoZC5ub2RlVmFsdWUsYywwIT09KGEubW9kZSYxKSl9ZiYmKGIuZmxhZ3N8PTQpfWVsc2UgZD0oOT09PWMubm9kZVR5cGU/YzpjLm93bmVyRG9jdW1lbnQpLmNyZWF0ZVRleHROb2RlKGQpLGRbT2ZdPWIsYi5zdGF0ZU5vZGU9ZH1TKGIpO3JldHVybiBudWxsO2Nhc2UgMTM6RShMKTtkPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsPT09YXx8bnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSYmbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZS5kZWh5ZHJhdGVkKXtpZihJJiZudWxsIT09eWcmJjAhPT0oYi5tb2RlJjEpJiYwPT09KGIuZmxhZ3MmMTI4KSlIZygpLElnKCksYi5mbGFnc3w9OTg1NjAsZj0hMTtlbHNlIGlmKGY9R2coYiksbnVsbCE9PWQmJm51bGwhPT1kLmRlaHlkcmF0ZWQpe2lmKG51bGw9PT1cbmEpe2lmKCFmKXRocm93IEVycm9yKHAoMzE4KSk7Zj1iLm1lbW9pemVkU3RhdGU7Zj1udWxsIT09Zj9mLmRlaHlkcmF0ZWQ6bnVsbDtpZighZil0aHJvdyBFcnJvcihwKDMxNykpO2ZbT2ZdPWJ9ZWxzZSBJZygpLDA9PT0oYi5mbGFncyYxMjgpJiYoYi5tZW1vaXplZFN0YXRlPW51bGwpLGIuZmxhZ3N8PTQ7UyhiKTtmPSExfWVsc2UgbnVsbCE9PXpnJiYoRmooemcpLHpnPW51bGwpLGY9ITA7aWYoIWYpcmV0dXJuIGIuZmxhZ3MmNjU1MzY/YjpudWxsfWlmKDAhPT0oYi5mbGFncyYxMjgpKXJldHVybiBiLmxhbmVzPWMsYjtkPW51bGwhPT1kO2QhPT0obnVsbCE9PWEmJm51bGwhPT1hLm1lbW9pemVkU3RhdGUpJiZkJiYoYi5jaGlsZC5mbGFnc3w9ODE5MiwwIT09KGIubW9kZSYxKSYmKG51bGw9PT1hfHwwIT09KEwuY3VycmVudCYxKT8wPT09VCYmKFQ9Myk6dGooKSkpO251bGwhPT1iLnVwZGF0ZVF1ZXVlJiYoYi5mbGFnc3w9NCk7UyhiKTtyZXR1cm4gbnVsbDtjYXNlIDQ6cmV0dXJuIHpoKCksXG5BaihhLGIpLG51bGw9PT1hJiZzZihiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxTKGIpLG51bGw7Y2FzZSAxMDpyZXR1cm4gYWgoYi50eXBlLl9jb250ZXh0KSxTKGIpLG51bGw7Y2FzZSAxNzpyZXR1cm4gWmYoYi50eXBlKSYmJGYoKSxTKGIpLG51bGw7Y2FzZSAxOTpFKEwpO2Y9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGw9PT1mKXJldHVybiBTKGIpLG51bGw7ZD0wIT09KGIuZmxhZ3MmMTI4KTtnPWYucmVuZGVyaW5nO2lmKG51bGw9PT1nKWlmKGQpRGooZiwhMSk7ZWxzZXtpZigwIT09VHx8bnVsbCE9PWEmJjAhPT0oYS5mbGFncyYxMjgpKWZvcihhPWIuY2hpbGQ7bnVsbCE9PWE7KXtnPUNoKGEpO2lmKG51bGwhPT1nKXtiLmZsYWdzfD0xMjg7RGooZiwhMSk7ZD1nLnVwZGF0ZVF1ZXVlO251bGwhPT1kJiYoYi51cGRhdGVRdWV1ZT1kLGIuZmxhZ3N8PTQpO2Iuc3VidHJlZUZsYWdzPTA7ZD1jO2ZvcihjPWIuY2hpbGQ7bnVsbCE9PWM7KWY9YyxhPWQsZi5mbGFncyY9MTQ2ODAwNjYsXG5nPWYuYWx0ZXJuYXRlLG51bGw9PT1nPyhmLmNoaWxkTGFuZXM9MCxmLmxhbmVzPWEsZi5jaGlsZD1udWxsLGYuc3VidHJlZUZsYWdzPTAsZi5tZW1vaXplZFByb3BzPW51bGwsZi5tZW1vaXplZFN0YXRlPW51bGwsZi51cGRhdGVRdWV1ZT1udWxsLGYuZGVwZW5kZW5jaWVzPW51bGwsZi5zdGF0ZU5vZGU9bnVsbCk6KGYuY2hpbGRMYW5lcz1nLmNoaWxkTGFuZXMsZi5sYW5lcz1nLmxhbmVzLGYuY2hpbGQ9Zy5jaGlsZCxmLnN1YnRyZWVGbGFncz0wLGYuZGVsZXRpb25zPW51bGwsZi5tZW1vaXplZFByb3BzPWcubWVtb2l6ZWRQcm9wcyxmLm1lbW9pemVkU3RhdGU9Zy5tZW1vaXplZFN0YXRlLGYudXBkYXRlUXVldWU9Zy51cGRhdGVRdWV1ZSxmLnR5cGU9Zy50eXBlLGE9Zy5kZXBlbmRlbmNpZXMsZi5kZXBlbmRlbmNpZXM9bnVsbD09PWE/bnVsbDp7bGFuZXM6YS5sYW5lcyxmaXJzdENvbnRleHQ6YS5maXJzdENvbnRleHR9KSxjPWMuc2libGluZztHKEwsTC5jdXJyZW50JjF8Mik7cmV0dXJuIGIuY2hpbGR9YT1cbmEuc2libGluZ31udWxsIT09Zi50YWlsJiZCKCk+R2omJihiLmZsYWdzfD0xMjgsZD0hMCxEaihmLCExKSxiLmxhbmVzPTQxOTQzMDQpfWVsc2V7aWYoIWQpaWYoYT1DaChnKSxudWxsIT09YSl7aWYoYi5mbGFnc3w9MTI4LGQ9ITAsYz1hLnVwZGF0ZVF1ZXVlLG51bGwhPT1jJiYoYi51cGRhdGVRdWV1ZT1jLGIuZmxhZ3N8PTQpLERqKGYsITApLG51bGw9PT1mLnRhaWwmJlwiaGlkZGVuXCI9PT1mLnRhaWxNb2RlJiYhZy5hbHRlcm5hdGUmJiFJKXJldHVybiBTKGIpLG51bGx9ZWxzZSAyKkIoKS1mLnJlbmRlcmluZ1N0YXJ0VGltZT5HaiYmMTA3Mzc0MTgyNCE9PWMmJihiLmZsYWdzfD0xMjgsZD0hMCxEaihmLCExKSxiLmxhbmVzPTQxOTQzMDQpO2YuaXNCYWNrd2FyZHM/KGcuc2libGluZz1iLmNoaWxkLGIuY2hpbGQ9Zyk6KGM9Zi5sYXN0LG51bGwhPT1jP2Muc2libGluZz1nOmIuY2hpbGQ9ZyxmLmxhc3Q9Zyl9aWYobnVsbCE9PWYudGFpbClyZXR1cm4gYj1mLnRhaWwsZi5yZW5kZXJpbmc9XG5iLGYudGFpbD1iLnNpYmxpbmcsZi5yZW5kZXJpbmdTdGFydFRpbWU9QigpLGIuc2libGluZz1udWxsLGM9TC5jdXJyZW50LEcoTCxkP2MmMXwyOmMmMSksYjtTKGIpO3JldHVybiBudWxsO2Nhc2UgMjI6Y2FzZSAyMzpyZXR1cm4gSGooKSxkPW51bGwhPT1iLm1lbW9pemVkU3RhdGUsbnVsbCE9PWEmJm51bGwhPT1hLm1lbW9pemVkU3RhdGUhPT1kJiYoYi5mbGFnc3w9ODE5MiksZCYmMCE9PShiLm1vZGUmMSk/MCE9PShmaiYxMDczNzQxODI0KSYmKFMoYiksYi5zdWJ0cmVlRmxhZ3MmNiYmKGIuZmxhZ3N8PTgxOTIpKTpTKGIpLG51bGw7Y2FzZSAyNDpyZXR1cm4gbnVsbDtjYXNlIDI1OnJldHVybiBudWxsfXRocm93IEVycm9yKHAoMTU2LGIudGFnKSk7fVxuZnVuY3Rpb24gSWooYSxiKXt3ZyhiKTtzd2l0Y2goYi50YWcpe2Nhc2UgMTpyZXR1cm4gWmYoYi50eXBlKSYmJGYoKSxhPWIuZmxhZ3MsYSY2NTUzNj8oYi5mbGFncz1hJi02NTUzN3wxMjgsYik6bnVsbDtjYXNlIDM6cmV0dXJuIHpoKCksRShXZiksRShIKSxFaCgpLGE9Yi5mbGFncywwIT09KGEmNjU1MzYpJiYwPT09KGEmMTI4KT8oYi5mbGFncz1hJi02NTUzN3wxMjgsYik6bnVsbDtjYXNlIDU6cmV0dXJuIEJoKGIpLG51bGw7Y2FzZSAxMzpFKEwpO2E9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1hJiZudWxsIT09YS5kZWh5ZHJhdGVkKXtpZihudWxsPT09Yi5hbHRlcm5hdGUpdGhyb3cgRXJyb3IocCgzNDApKTtJZygpfWE9Yi5mbGFncztyZXR1cm4gYSY2NTUzNj8oYi5mbGFncz1hJi02NTUzN3wxMjgsYik6bnVsbDtjYXNlIDE5OnJldHVybiBFKEwpLG51bGw7Y2FzZSA0OnJldHVybiB6aCgpLG51bGw7Y2FzZSAxMDpyZXR1cm4gYWgoYi50eXBlLl9jb250ZXh0KSxudWxsO2Nhc2UgMjI6Y2FzZSAyMzpyZXR1cm4gSGooKSxcbm51bGw7Y2FzZSAyNDpyZXR1cm4gbnVsbDtkZWZhdWx0OnJldHVybiBudWxsfX12YXIgSmo9ITEsVT0hMSxLaj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha1NldD9XZWFrU2V0OlNldCxWPW51bGw7ZnVuY3Rpb24gTGooYSxiKXt2YXIgYz1hLnJlZjtpZihudWxsIT09YylpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYyl0cnl7YyhudWxsKX1jYXRjaChkKXtXKGEsYixkKX1lbHNlIGMuY3VycmVudD1udWxsfWZ1bmN0aW9uIE1qKGEsYixjKXt0cnl7YygpfWNhdGNoKGQpe1coYSxiLGQpfX12YXIgTmo9ITE7XG5mdW5jdGlvbiBPaihhLGIpe0NmPWRkO2E9TWUoKTtpZihOZShhKSl7aWYoXCJzZWxlY3Rpb25TdGFydFwiaW4gYSl2YXIgYz17c3RhcnQ6YS5zZWxlY3Rpb25TdGFydCxlbmQ6YS5zZWxlY3Rpb25FbmR9O2Vsc2UgYTp7Yz0oYz1hLm93bmVyRG9jdW1lbnQpJiZjLmRlZmF1bHRWaWV3fHx3aW5kb3c7dmFyIGQ9Yy5nZXRTZWxlY3Rpb24mJmMuZ2V0U2VsZWN0aW9uKCk7aWYoZCYmMCE9PWQucmFuZ2VDb3VudCl7Yz1kLmFuY2hvck5vZGU7dmFyIGU9ZC5hbmNob3JPZmZzZXQsZj1kLmZvY3VzTm9kZTtkPWQuZm9jdXNPZmZzZXQ7dHJ5e2Mubm9kZVR5cGUsZi5ub2RlVHlwZX1jYXRjaChGKXtjPW51bGw7YnJlYWsgYX12YXIgZz0wLGg9LTEsaz0tMSxsPTAsbT0wLHE9YSxyPW51bGw7Yjpmb3IoOzspe2Zvcih2YXIgeTs7KXtxIT09Y3x8MCE9PWUmJjMhPT1xLm5vZGVUeXBlfHwoaD1nK2UpO3EhPT1mfHwwIT09ZCYmMyE9PXEubm9kZVR5cGV8fChrPWcrZCk7Mz09PXEubm9kZVR5cGUmJihnKz1cbnEubm9kZVZhbHVlLmxlbmd0aCk7aWYobnVsbD09PSh5PXEuZmlyc3RDaGlsZCkpYnJlYWs7cj1xO3E9eX1mb3IoOzspe2lmKHE9PT1hKWJyZWFrIGI7cj09PWMmJisrbD09PWUmJihoPWcpO3I9PT1mJiYrK209PT1kJiYoaz1nKTtpZihudWxsIT09KHk9cS5uZXh0U2libGluZykpYnJlYWs7cT1yO3I9cS5wYXJlbnROb2RlfXE9eX1jPS0xPT09aHx8LTE9PT1rP251bGw6e3N0YXJ0OmgsZW5kOmt9fWVsc2UgYz1udWxsfWM9Y3x8e3N0YXJ0OjAsZW5kOjB9fWVsc2UgYz1udWxsO0RmPXtmb2N1c2VkRWxlbTphLHNlbGVjdGlvblJhbmdlOmN9O2RkPSExO2ZvcihWPWI7bnVsbCE9PVY7KWlmKGI9VixhPWIuY2hpbGQsMCE9PShiLnN1YnRyZWVGbGFncyYxMDI4KSYmbnVsbCE9PWEpYS5yZXR1cm49YixWPWE7ZWxzZSBmb3IoO251bGwhPT1WOyl7Yj1WO3RyeXt2YXIgbj1iLmFsdGVybmF0ZTtpZigwIT09KGIuZmxhZ3MmMTAyNCkpc3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OmJyZWFrO1xuY2FzZSAxOmlmKG51bGwhPT1uKXt2YXIgdD1uLm1lbW9pemVkUHJvcHMsSj1uLm1lbW9pemVkU3RhdGUseD1iLnN0YXRlTm9kZSx3PXguZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoYi5lbGVtZW50VHlwZT09PWIudHlwZT90OkNpKGIudHlwZSx0KSxKKTt4Ll9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlPXd9YnJlYWs7Y2FzZSAzOnZhciB1PWIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87MT09PXUubm9kZVR5cGU/dS50ZXh0Q29udGVudD1cIlwiOjk9PT11Lm5vZGVUeXBlJiZ1LmRvY3VtZW50RWxlbWVudCYmdS5yZW1vdmVDaGlsZCh1LmRvY3VtZW50RWxlbWVudCk7YnJlYWs7Y2FzZSA1OmNhc2UgNjpjYXNlIDQ6Y2FzZSAxNzpicmVhaztkZWZhdWx0OnRocm93IEVycm9yKHAoMTYzKSk7fX1jYXRjaChGKXtXKGIsYi5yZXR1cm4sRil9YT1iLnNpYmxpbmc7aWYobnVsbCE9PWEpe2EucmV0dXJuPWIucmV0dXJuO1Y9YTticmVha31WPWIucmV0dXJufW49Tmo7Tmo9ITE7cmV0dXJuIG59XG5mdW5jdGlvbiBQaihhLGIsYyl7dmFyIGQ9Yi51cGRhdGVRdWV1ZTtkPW51bGwhPT1kP2QubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1kKXt2YXIgZT1kPWQubmV4dDtkb3tpZigoZS50YWcmYSk9PT1hKXt2YXIgZj1lLmRlc3Ryb3k7ZS5kZXN0cm95PXZvaWQgMDt2b2lkIDAhPT1mJiZNaihiLGMsZil9ZT1lLm5leHR9d2hpbGUoZSE9PWQpfX1mdW5jdGlvbiBRaihhLGIpe2I9Yi51cGRhdGVRdWV1ZTtiPW51bGwhPT1iP2IubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1iKXt2YXIgYz1iPWIubmV4dDtkb3tpZigoYy50YWcmYSk9PT1hKXt2YXIgZD1jLmNyZWF0ZTtjLmRlc3Ryb3k9ZCgpfWM9Yy5uZXh0fXdoaWxlKGMhPT1iKX19ZnVuY3Rpb24gUmooYSl7dmFyIGI9YS5yZWY7aWYobnVsbCE9PWIpe3ZhciBjPWEuc3RhdGVOb2RlO3N3aXRjaChhLnRhZyl7Y2FzZSA1OmE9YzticmVhaztkZWZhdWx0OmE9Y31cImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKGEpOmIuY3VycmVudD1hfX1cbmZ1bmN0aW9uIFNqKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO251bGwhPT1iJiYoYS5hbHRlcm5hdGU9bnVsbCxTaihiKSk7YS5jaGlsZD1udWxsO2EuZGVsZXRpb25zPW51bGw7YS5zaWJsaW5nPW51bGw7NT09PWEudGFnJiYoYj1hLnN0YXRlTm9kZSxudWxsIT09YiYmKGRlbGV0ZSBiW09mXSxkZWxldGUgYltQZl0sZGVsZXRlIGJbb2ZdLGRlbGV0ZSBiW1FmXSxkZWxldGUgYltSZl0pKTthLnN0YXRlTm9kZT1udWxsO2EucmV0dXJuPW51bGw7YS5kZXBlbmRlbmNpZXM9bnVsbDthLm1lbW9pemVkUHJvcHM9bnVsbDthLm1lbW9pemVkU3RhdGU9bnVsbDthLnBlbmRpbmdQcm9wcz1udWxsO2Euc3RhdGVOb2RlPW51bGw7YS51cGRhdGVRdWV1ZT1udWxsfWZ1bmN0aW9uIFRqKGEpe3JldHVybiA1PT09YS50YWd8fDM9PT1hLnRhZ3x8ND09PWEudGFnfVxuZnVuY3Rpb24gVWooYSl7YTpmb3IoOzspe2Zvcig7bnVsbD09PWEuc2libGluZzspe2lmKG51bGw9PT1hLnJldHVybnx8VGooYS5yZXR1cm4pKXJldHVybiBudWxsO2E9YS5yZXR1cm59YS5zaWJsaW5nLnJldHVybj1hLnJldHVybjtmb3IoYT1hLnNpYmxpbmc7NSE9PWEudGFnJiY2IT09YS50YWcmJjE4IT09YS50YWc7KXtpZihhLmZsYWdzJjIpY29udGludWUgYTtpZihudWxsPT09YS5jaGlsZHx8ND09PWEudGFnKWNvbnRpbnVlIGE7ZWxzZSBhLmNoaWxkLnJldHVybj1hLGE9YS5jaGlsZH1pZighKGEuZmxhZ3MmMikpcmV0dXJuIGEuc3RhdGVOb2RlfX1cbmZ1bmN0aW9uIFZqKGEsYixjKXt2YXIgZD1hLnRhZztpZig1PT09ZHx8Nj09PWQpYT1hLnN0YXRlTm9kZSxiPzg9PT1jLm5vZGVUeXBlP2MucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYSxiKTpjLmluc2VydEJlZm9yZShhLGIpOig4PT09Yy5ub2RlVHlwZT8oYj1jLnBhcmVudE5vZGUsYi5pbnNlcnRCZWZvcmUoYSxjKSk6KGI9YyxiLmFwcGVuZENoaWxkKGEpKSxjPWMuX3JlYWN0Um9vdENvbnRhaW5lcixudWxsIT09YyYmdm9pZCAwIT09Y3x8bnVsbCE9PWIub25jbGlja3x8KGIub25jbGljaz1CZikpO2Vsc2UgaWYoNCE9PWQmJihhPWEuY2hpbGQsbnVsbCE9PWEpKWZvcihWaihhLGIsYyksYT1hLnNpYmxpbmc7bnVsbCE9PWE7KVZqKGEsYixjKSxhPWEuc2libGluZ31cbmZ1bmN0aW9uIFdqKGEsYixjKXt2YXIgZD1hLnRhZztpZig1PT09ZHx8Nj09PWQpYT1hLnN0YXRlTm9kZSxiP2MuaW5zZXJ0QmVmb3JlKGEsYik6Yy5hcHBlbmRDaGlsZChhKTtlbHNlIGlmKDQhPT1kJiYoYT1hLmNoaWxkLG51bGwhPT1hKSlmb3IoV2ooYSxiLGMpLGE9YS5zaWJsaW5nO251bGwhPT1hOylXaihhLGIsYyksYT1hLnNpYmxpbmd9dmFyIFg9bnVsbCxYaj0hMTtmdW5jdGlvbiBZaihhLGIsYyl7Zm9yKGM9Yy5jaGlsZDtudWxsIT09YzspWmooYSxiLGMpLGM9Yy5zaWJsaW5nfVxuZnVuY3Rpb24gWmooYSxiLGMpe2lmKGxjJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgbGMub25Db21taXRGaWJlclVubW91bnQpdHJ5e2xjLm9uQ29tbWl0RmliZXJVbm1vdW50KGtjLGMpfWNhdGNoKGgpe31zd2l0Y2goYy50YWcpe2Nhc2UgNTpVfHxMaihjLGIpO2Nhc2UgNjp2YXIgZD1YLGU9WGo7WD1udWxsO1lqKGEsYixjKTtYPWQ7WGo9ZTtudWxsIT09WCYmKFhqPyhhPVgsYz1jLnN0YXRlTm9kZSw4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoYyk6YS5yZW1vdmVDaGlsZChjKSk6WC5yZW1vdmVDaGlsZChjLnN0YXRlTm9kZSkpO2JyZWFrO2Nhc2UgMTg6bnVsbCE9PVgmJihYaj8oYT1YLGM9Yy5zdGF0ZU5vZGUsOD09PWEubm9kZVR5cGU/S2YoYS5wYXJlbnROb2RlLGMpOjE9PT1hLm5vZGVUeXBlJiZLZihhLGMpLGJkKGEpKTpLZihYLGMuc3RhdGVOb2RlKSk7YnJlYWs7Y2FzZSA0OmQ9WDtlPVhqO1g9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztYaj0hMDtcbllqKGEsYixjKTtYPWQ7WGo9ZTticmVhaztjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6aWYoIVUmJihkPWMudXBkYXRlUXVldWUsbnVsbCE9PWQmJihkPWQubGFzdEVmZmVjdCxudWxsIT09ZCkpKXtlPWQ9ZC5uZXh0O2Rve3ZhciBmPWUsZz1mLmRlc3Ryb3k7Zj1mLnRhZzt2b2lkIDAhPT1nJiYoMCE9PShmJjIpP01qKGMsYixnKTowIT09KGYmNCkmJk1qKGMsYixnKSk7ZT1lLm5leHR9d2hpbGUoZSE9PWQpfVlqKGEsYixjKTticmVhaztjYXNlIDE6aWYoIVUmJihMaihjLGIpLGQ9Yy5zdGF0ZU5vZGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50V2lsbFVubW91bnQpKXRyeXtkLnByb3BzPWMubWVtb2l6ZWRQcm9wcyxkLnN0YXRlPWMubWVtb2l6ZWRTdGF0ZSxkLmNvbXBvbmVudFdpbGxVbm1vdW50KCl9Y2F0Y2goaCl7VyhjLGIsaCl9WWooYSxiLGMpO2JyZWFrO2Nhc2UgMjE6WWooYSxiLGMpO2JyZWFrO2Nhc2UgMjI6Yy5tb2RlJjE/KFU9KGQ9VSl8fG51bGwhPT1cbmMubWVtb2l6ZWRTdGF0ZSxZaihhLGIsYyksVT1kKTpZaihhLGIsYyk7YnJlYWs7ZGVmYXVsdDpZaihhLGIsYyl9fWZ1bmN0aW9uIGFrKGEpe3ZhciBiPWEudXBkYXRlUXVldWU7aWYobnVsbCE9PWIpe2EudXBkYXRlUXVldWU9bnVsbDt2YXIgYz1hLnN0YXRlTm9kZTtudWxsPT09YyYmKGM9YS5zdGF0ZU5vZGU9bmV3IEtqKTtiLmZvckVhY2goZnVuY3Rpb24oYil7dmFyIGQ9YmsuYmluZChudWxsLGEsYik7Yy5oYXMoYil8fChjLmFkZChiKSxiLnRoZW4oZCxkKSl9KX19XG5mdW5jdGlvbiBjayhhLGIpe3ZhciBjPWIuZGVsZXRpb25zO2lmKG51bGwhPT1jKWZvcih2YXIgZD0wO2Q8Yy5sZW5ndGg7ZCsrKXt2YXIgZT1jW2RdO3RyeXt2YXIgZj1hLGc9YixoPWc7YTpmb3IoO251bGwhPT1oOyl7c3dpdGNoKGgudGFnKXtjYXNlIDU6WD1oLnN0YXRlTm9kZTtYaj0hMTticmVhayBhO2Nhc2UgMzpYPWguc3RhdGVOb2RlLmNvbnRhaW5lckluZm87WGo9ITA7YnJlYWsgYTtjYXNlIDQ6WD1oLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO1hqPSEwO2JyZWFrIGF9aD1oLnJldHVybn1pZihudWxsPT09WCl0aHJvdyBFcnJvcihwKDE2MCkpO1pqKGYsZyxlKTtYPW51bGw7WGo9ITE7dmFyIGs9ZS5hbHRlcm5hdGU7bnVsbCE9PWsmJihrLnJldHVybj1udWxsKTtlLnJldHVybj1udWxsfWNhdGNoKGwpe1coZSxiLGwpfX1pZihiLnN1YnRyZWVGbGFncyYxMjg1NClmb3IoYj1iLmNoaWxkO251bGwhPT1iOylkayhiLGEpLGI9Yi5zaWJsaW5nfVxuZnVuY3Rpb24gZGsoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZSxkPWEuZmxhZ3M7c3dpdGNoKGEudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6Y2soYixhKTtlayhhKTtpZihkJjQpe3RyeXtQaigzLGEsYS5yZXR1cm4pLFFqKDMsYSl9Y2F0Y2godCl7VyhhLGEucmV0dXJuLHQpfXRyeXtQaig1LGEsYS5yZXR1cm4pfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX19YnJlYWs7Y2FzZSAxOmNrKGIsYSk7ZWsoYSk7ZCY1MTImJm51bGwhPT1jJiZMaihjLGMucmV0dXJuKTticmVhaztjYXNlIDU6Y2soYixhKTtlayhhKTtkJjUxMiYmbnVsbCE9PWMmJkxqKGMsYy5yZXR1cm4pO2lmKGEuZmxhZ3MmMzIpe3ZhciBlPWEuc3RhdGVOb2RlO3RyeXtvYihlLFwiXCIpfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX19aWYoZCY0JiYoZT1hLnN0YXRlTm9kZSxudWxsIT1lKSl7dmFyIGY9YS5tZW1vaXplZFByb3BzLGc9bnVsbCE9PWM/Yy5tZW1vaXplZFByb3BzOmYsaD1hLnR5cGUsaz1hLnVwZGF0ZVF1ZXVlO1xuYS51cGRhdGVRdWV1ZT1udWxsO2lmKG51bGwhPT1rKXRyeXtcImlucHV0XCI9PT1oJiZcInJhZGlvXCI9PT1mLnR5cGUmJm51bGwhPWYubmFtZSYmYWIoZSxmKTt2YihoLGcpO3ZhciBsPXZiKGgsZik7Zm9yKGc9MDtnPGsubGVuZ3RoO2crPTIpe3ZhciBtPWtbZ10scT1rW2crMV07XCJzdHlsZVwiPT09bT9zYihlLHEpOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PW0/bmIoZSxxKTpcImNoaWxkcmVuXCI9PT1tP29iKGUscSk6dGEoZSxtLHEsbCl9c3dpdGNoKGgpe2Nhc2UgXCJpbnB1dFwiOmJiKGUsZik7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aWIoZSxmKTticmVhaztjYXNlIFwic2VsZWN0XCI6dmFyIHI9ZS5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlO2UuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZT0hIWYubXVsdGlwbGU7dmFyIHk9Zi52YWx1ZTtudWxsIT15P2ZiKGUsISFmLm11bHRpcGxlLHksITEpOnIhPT0hIWYubXVsdGlwbGUmJihudWxsIT1mLmRlZmF1bHRWYWx1ZT9mYihlLCEhZi5tdWx0aXBsZSxcbmYuZGVmYXVsdFZhbHVlLCEwKTpmYihlLCEhZi5tdWx0aXBsZSxmLm11bHRpcGxlP1tdOlwiXCIsITEpKX1lW1BmXT1mfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX19YnJlYWs7Y2FzZSA2OmNrKGIsYSk7ZWsoYSk7aWYoZCY0KXtpZihudWxsPT09YS5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IocCgxNjIpKTtlPWEuc3RhdGVOb2RlO2Y9YS5tZW1vaXplZFByb3BzO3RyeXtlLm5vZGVWYWx1ZT1mfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX19YnJlYWs7Y2FzZSAzOmNrKGIsYSk7ZWsoYSk7aWYoZCY0JiZudWxsIT09YyYmYy5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZCl0cnl7YmQoYi5jb250YWluZXJJbmZvKX1jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9YnJlYWs7Y2FzZSA0OmNrKGIsYSk7ZWsoYSk7YnJlYWs7Y2FzZSAxMzpjayhiLGEpO2VrKGEpO2U9YS5jaGlsZDtlLmZsYWdzJjgxOTImJihmPW51bGwhPT1lLm1lbW9pemVkU3RhdGUsZS5zdGF0ZU5vZGUuaXNIaWRkZW49ZiwhZnx8XG5udWxsIT09ZS5hbHRlcm5hdGUmJm51bGwhPT1lLmFsdGVybmF0ZS5tZW1vaXplZFN0YXRlfHwoZms9QigpKSk7ZCY0JiZhayhhKTticmVhaztjYXNlIDIyOm09bnVsbCE9PWMmJm51bGwhPT1jLm1lbW9pemVkU3RhdGU7YS5tb2RlJjE/KFU9KGw9VSl8fG0sY2soYixhKSxVPWwpOmNrKGIsYSk7ZWsoYSk7aWYoZCY4MTkyKXtsPW51bGwhPT1hLm1lbW9pemVkU3RhdGU7aWYoKGEuc3RhdGVOb2RlLmlzSGlkZGVuPWwpJiYhbSYmMCE9PShhLm1vZGUmMSkpZm9yKFY9YSxtPWEuY2hpbGQ7bnVsbCE9PW07KXtmb3IocT1WPW07bnVsbCE9PVY7KXtyPVY7eT1yLmNoaWxkO3N3aXRjaChyLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OlBqKDQscixyLnJldHVybik7YnJlYWs7Y2FzZSAxOkxqKHIsci5yZXR1cm4pO3ZhciBuPXIuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBuLmNvbXBvbmVudFdpbGxVbm1vdW50KXtkPXI7Yz1yLnJldHVybjt0cnl7Yj1kLG4ucHJvcHM9XG5iLm1lbW9pemVkUHJvcHMsbi5zdGF0ZT1iLm1lbW9pemVkU3RhdGUsbi5jb21wb25lbnRXaWxsVW5tb3VudCgpfWNhdGNoKHQpe1coZCxjLHQpfX1icmVhaztjYXNlIDU6TGoocixyLnJldHVybik7YnJlYWs7Y2FzZSAyMjppZihudWxsIT09ci5tZW1vaXplZFN0YXRlKXtnayhxKTtjb250aW51ZX19bnVsbCE9PXk/KHkucmV0dXJuPXIsVj15KTpnayhxKX1tPW0uc2libGluZ31hOmZvcihtPW51bGwscT1hOzspe2lmKDU9PT1xLnRhZyl7aWYobnVsbD09PW0pe209cTt0cnl7ZT1xLnN0YXRlTm9kZSxsPyhmPWUuc3R5bGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGYuc2V0UHJvcGVydHk/Zi5zZXRQcm9wZXJ0eShcImRpc3BsYXlcIixcIm5vbmVcIixcImltcG9ydGFudFwiKTpmLmRpc3BsYXk9XCJub25lXCIpOihoPXEuc3RhdGVOb2RlLGs9cS5tZW1vaXplZFByb3BzLnN0eWxlLGc9dm9pZCAwIT09ayYmbnVsbCE9PWsmJmsuaGFzT3duUHJvcGVydHkoXCJkaXNwbGF5XCIpP2suZGlzcGxheTpudWxsLGguc3R5bGUuZGlzcGxheT1cbnJiKFwiZGlzcGxheVwiLGcpKX1jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9fX1lbHNlIGlmKDY9PT1xLnRhZyl7aWYobnVsbD09PW0pdHJ5e3Euc3RhdGVOb2RlLm5vZGVWYWx1ZT1sP1wiXCI6cS5tZW1vaXplZFByb3BzfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX19ZWxzZSBpZigoMjIhPT1xLnRhZyYmMjMhPT1xLnRhZ3x8bnVsbD09PXEubWVtb2l6ZWRTdGF0ZXx8cT09PWEpJiZudWxsIT09cS5jaGlsZCl7cS5jaGlsZC5yZXR1cm49cTtxPXEuY2hpbGQ7Y29udGludWV9aWYocT09PWEpYnJlYWsgYTtmb3IoO251bGw9PT1xLnNpYmxpbmc7KXtpZihudWxsPT09cS5yZXR1cm58fHEucmV0dXJuPT09YSlicmVhayBhO209PT1xJiYobT1udWxsKTtxPXEucmV0dXJufW09PT1xJiYobT1udWxsKTtxLnNpYmxpbmcucmV0dXJuPXEucmV0dXJuO3E9cS5zaWJsaW5nfX1icmVhaztjYXNlIDE5OmNrKGIsYSk7ZWsoYSk7ZCY0JiZhayhhKTticmVhaztjYXNlIDIxOmJyZWFrO2RlZmF1bHQ6Y2soYixcbmEpLGVrKGEpfX1mdW5jdGlvbiBlayhhKXt2YXIgYj1hLmZsYWdzO2lmKGImMil7dHJ5e2E6e2Zvcih2YXIgYz1hLnJldHVybjtudWxsIT09Yzspe2lmKFRqKGMpKXt2YXIgZD1jO2JyZWFrIGF9Yz1jLnJldHVybn10aHJvdyBFcnJvcihwKDE2MCkpO31zd2l0Y2goZC50YWcpe2Nhc2UgNTp2YXIgZT1kLnN0YXRlTm9kZTtkLmZsYWdzJjMyJiYob2IoZSxcIlwiKSxkLmZsYWdzJj0tMzMpO3ZhciBmPVVqKGEpO1dqKGEsZixlKTticmVhaztjYXNlIDM6Y2FzZSA0OnZhciBnPWQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8saD1VaihhKTtWaihhLGgsZyk7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihwKDE2MSkpO319Y2F0Y2goayl7VyhhLGEucmV0dXJuLGspfWEuZmxhZ3MmPS0zfWImNDA5NiYmKGEuZmxhZ3MmPS00MDk3KX1mdW5jdGlvbiBoayhhLGIsYyl7Vj1hO2lrKGEsYixjKX1cbmZ1bmN0aW9uIGlrKGEsYixjKXtmb3IodmFyIGQ9MCE9PShhLm1vZGUmMSk7bnVsbCE9PVY7KXt2YXIgZT1WLGY9ZS5jaGlsZDtpZigyMj09PWUudGFnJiZkKXt2YXIgZz1udWxsIT09ZS5tZW1vaXplZFN0YXRlfHxKajtpZighZyl7dmFyIGg9ZS5hbHRlcm5hdGUsaz1udWxsIT09aCYmbnVsbCE9PWgubWVtb2l6ZWRTdGF0ZXx8VTtoPUpqO3ZhciBsPVU7Smo9ZztpZigoVT1rKSYmIWwpZm9yKFY9ZTtudWxsIT09VjspZz1WLGs9Zy5jaGlsZCwyMj09PWcudGFnJiZudWxsIT09Zy5tZW1vaXplZFN0YXRlP2prKGUpOm51bGwhPT1rPyhrLnJldHVybj1nLFY9ayk6amsoZSk7Zm9yKDtudWxsIT09ZjspVj1mLGlrKGYsYixjKSxmPWYuc2libGluZztWPWU7Smo9aDtVPWx9a2soYSxiLGMpfWVsc2UgMCE9PShlLnN1YnRyZWVGbGFncyY4NzcyKSYmbnVsbCE9PWY/KGYucmV0dXJuPWUsVj1mKTprayhhLGIsYyl9fVxuZnVuY3Rpb24ga2soYSl7Zm9yKDtudWxsIT09Vjspe3ZhciBiPVY7aWYoMCE9PShiLmZsYWdzJjg3NzIpKXt2YXIgYz1iLmFsdGVybmF0ZTt0cnl7aWYoMCE9PShiLmZsYWdzJjg3NzIpKXN3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpVfHxRaig1LGIpO2JyZWFrO2Nhc2UgMTp2YXIgZD1iLnN0YXRlTm9kZTtpZihiLmZsYWdzJjQmJiFVKWlmKG51bGw9PT1jKWQuY29tcG9uZW50RGlkTW91bnQoKTtlbHNle3ZhciBlPWIuZWxlbWVudFR5cGU9PT1iLnR5cGU/Yy5tZW1vaXplZFByb3BzOkNpKGIudHlwZSxjLm1lbW9pemVkUHJvcHMpO2QuY29tcG9uZW50RGlkVXBkYXRlKGUsYy5tZW1vaXplZFN0YXRlLGQuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUpfXZhciBmPWIudXBkYXRlUXVldWU7bnVsbCE9PWYmJnNoKGIsZixkKTticmVhaztjYXNlIDM6dmFyIGc9Yi51cGRhdGVRdWV1ZTtpZihudWxsIT09Zyl7Yz1udWxsO2lmKG51bGwhPT1iLmNoaWxkKXN3aXRjaChiLmNoaWxkLnRhZyl7Y2FzZSA1OmM9XG5iLmNoaWxkLnN0YXRlTm9kZTticmVhaztjYXNlIDE6Yz1iLmNoaWxkLnN0YXRlTm9kZX1zaChiLGcsYyl9YnJlYWs7Y2FzZSA1OnZhciBoPWIuc3RhdGVOb2RlO2lmKG51bGw9PT1jJiZiLmZsYWdzJjQpe2M9aDt2YXIgaz1iLm1lbW9pemVkUHJvcHM7c3dpdGNoKGIudHlwZSl7Y2FzZSBcImJ1dHRvblwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwidGV4dGFyZWFcIjprLmF1dG9Gb2N1cyYmYy5mb2N1cygpO2JyZWFrO2Nhc2UgXCJpbWdcIjprLnNyYyYmKGMuc3JjPWsuc3JjKX19YnJlYWs7Y2FzZSA2OmJyZWFrO2Nhc2UgNDpicmVhaztjYXNlIDEyOmJyZWFrO2Nhc2UgMTM6aWYobnVsbD09PWIubWVtb2l6ZWRTdGF0ZSl7dmFyIGw9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWwpe3ZhciBtPWwubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09bSl7dmFyIHE9bS5kZWh5ZHJhdGVkO251bGwhPT1xJiZiZChxKX19fWJyZWFrO2Nhc2UgMTk6Y2FzZSAxNzpjYXNlIDIxOmNhc2UgMjI6Y2FzZSAyMzpjYXNlIDI1OmJyZWFrO1xuZGVmYXVsdDp0aHJvdyBFcnJvcihwKDE2MykpO31VfHxiLmZsYWdzJjUxMiYmUmooYil9Y2F0Y2gocil7VyhiLGIucmV0dXJuLHIpfX1pZihiPT09YSl7Vj1udWxsO2JyZWFrfWM9Yi5zaWJsaW5nO2lmKG51bGwhPT1jKXtjLnJldHVybj1iLnJldHVybjtWPWM7YnJlYWt9Vj1iLnJldHVybn19ZnVuY3Rpb24gZ2soYSl7Zm9yKDtudWxsIT09Vjspe3ZhciBiPVY7aWYoYj09PWEpe1Y9bnVsbDticmVha312YXIgYz1iLnNpYmxpbmc7aWYobnVsbCE9PWMpe2MucmV0dXJuPWIucmV0dXJuO1Y9YzticmVha31WPWIucmV0dXJufX1cbmZ1bmN0aW9uIGprKGEpe2Zvcig7bnVsbCE9PVY7KXt2YXIgYj1WO3RyeXtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6dmFyIGM9Yi5yZXR1cm47dHJ5e1FqKDQsYil9Y2F0Y2goayl7VyhiLGMsayl9YnJlYWs7Y2FzZSAxOnZhciBkPWIuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZE1vdW50KXt2YXIgZT1iLnJldHVybjt0cnl7ZC5jb21wb25lbnREaWRNb3VudCgpfWNhdGNoKGspe1coYixlLGspfX12YXIgZj1iLnJldHVybjt0cnl7UmooYil9Y2F0Y2goayl7VyhiLGYsayl9YnJlYWs7Y2FzZSA1OnZhciBnPWIucmV0dXJuO3RyeXtSaihiKX1jYXRjaChrKXtXKGIsZyxrKX19fWNhdGNoKGspe1coYixiLnJldHVybixrKX1pZihiPT09YSl7Vj1udWxsO2JyZWFrfXZhciBoPWIuc2libGluZztpZihudWxsIT09aCl7aC5yZXR1cm49Yi5yZXR1cm47Vj1oO2JyZWFrfVY9Yi5yZXR1cm59fVxudmFyIGxrPU1hdGguY2VpbCxtaz11YS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLG5rPXVhLlJlYWN0Q3VycmVudE93bmVyLG9rPXVhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLEs9MCxRPW51bGwsWT1udWxsLFo9MCxmaj0wLGVqPVVmKDApLFQ9MCxwaz1udWxsLHJoPTAscWs9MCxyaz0wLHNrPW51bGwsdGs9bnVsbCxmaz0wLEdqPUluZmluaXR5LHVrPW51bGwsT2k9ITEsUGk9bnVsbCxSaT1udWxsLHZrPSExLHdrPW51bGwseGs9MCx5az0wLHprPW51bGwsQWs9LTEsQms9MDtmdW5jdGlvbiBSKCl7cmV0dXJuIDAhPT0oSyY2KT9CKCk6LTEhPT1Baz9BazpBaz1CKCl9XG5mdW5jdGlvbiB5aShhKXtpZigwPT09KGEubW9kZSYxKSlyZXR1cm4gMTtpZigwIT09KEsmMikmJjAhPT1aKXJldHVybiBaJi1aO2lmKG51bGwhPT1LZy50cmFuc2l0aW9uKXJldHVybiAwPT09QmsmJihCaz15YygpKSxCazthPUM7aWYoMCE9PWEpcmV0dXJuIGE7YT13aW5kb3cuZXZlbnQ7YT12b2lkIDA9PT1hPzE2OmpkKGEudHlwZSk7cmV0dXJuIGF9ZnVuY3Rpb24gZ2koYSxiLGMsZCl7aWYoNTA8eWspdGhyb3cgeWs9MCx6az1udWxsLEVycm9yKHAoMTg1KSk7QWMoYSxjLGQpO2lmKDA9PT0oSyYyKXx8YSE9PVEpYT09PVEmJigwPT09KEsmMikmJihxa3w9YyksND09PVQmJkNrKGEsWikpLERrKGEsZCksMT09PWMmJjA9PT1LJiYwPT09KGIubW9kZSYxKSYmKEdqPUIoKSs1MDAsZmcmJmpnKCkpfVxuZnVuY3Rpb24gRGsoYSxiKXt2YXIgYz1hLmNhbGxiYWNrTm9kZTt3YyhhLGIpO3ZhciBkPXVjKGEsYT09PVE/WjowKTtpZigwPT09ZCludWxsIT09YyYmYmMoYyksYS5jYWxsYmFja05vZGU9bnVsbCxhLmNhbGxiYWNrUHJpb3JpdHk9MDtlbHNlIGlmKGI9ZCYtZCxhLmNhbGxiYWNrUHJpb3JpdHkhPT1iKXtudWxsIT1jJiZiYyhjKTtpZigxPT09YikwPT09YS50YWc/aWcoRWsuYmluZChudWxsLGEpKTpoZyhFay5iaW5kKG51bGwsYSkpLEpmKGZ1bmN0aW9uKCl7MD09PShLJjYpJiZqZygpfSksYz1udWxsO2Vsc2V7c3dpdGNoKERjKGQpKXtjYXNlIDE6Yz1mYzticmVhaztjYXNlIDQ6Yz1nYzticmVhaztjYXNlIDE2OmM9aGM7YnJlYWs7Y2FzZSA1MzY4NzA5MTI6Yz1qYzticmVhaztkZWZhdWx0OmM9aGN9Yz1GayhjLEdrLmJpbmQobnVsbCxhKSl9YS5jYWxsYmFja1ByaW9yaXR5PWI7YS5jYWxsYmFja05vZGU9Y319XG5mdW5jdGlvbiBHayhhLGIpe0FrPS0xO0JrPTA7aWYoMCE9PShLJjYpKXRocm93IEVycm9yKHAoMzI3KSk7dmFyIGM9YS5jYWxsYmFja05vZGU7aWYoSGsoKSYmYS5jYWxsYmFja05vZGUhPT1jKXJldHVybiBudWxsO3ZhciBkPXVjKGEsYT09PVE/WjowKTtpZigwPT09ZClyZXR1cm4gbnVsbDtpZigwIT09KGQmMzApfHwwIT09KGQmYS5leHBpcmVkTGFuZXMpfHxiKWI9SWsoYSxkKTtlbHNle2I9ZDt2YXIgZT1LO0t8PTI7dmFyIGY9SmsoKTtpZihRIT09YXx8WiE9PWIpdWs9bnVsbCxHaj1CKCkrNTAwLEtrKGEsYik7ZG8gdHJ5e0xrKCk7YnJlYWt9Y2F0Y2goaCl7TWsoYSxoKX13aGlsZSgxKTskZygpO21rLmN1cnJlbnQ9ZjtLPWU7bnVsbCE9PVk/Yj0wOihRPW51bGwsWj0wLGI9VCl9aWYoMCE9PWIpezI9PT1iJiYoZT14YyhhKSwwIT09ZSYmKGQ9ZSxiPU5rKGEsZSkpKTtpZigxPT09Yil0aHJvdyBjPXBrLEtrKGEsMCksQ2soYSxkKSxEayhhLEIoKSksYztpZig2PT09YilDayhhLGQpO1xuZWxzZXtlPWEuY3VycmVudC5hbHRlcm5hdGU7aWYoMD09PShkJjMwKSYmIU9rKGUpJiYoYj1JayhhLGQpLDI9PT1iJiYoZj14YyhhKSwwIT09ZiYmKGQ9ZixiPU5rKGEsZikpKSwxPT09YikpdGhyb3cgYz1wayxLayhhLDApLENrKGEsZCksRGsoYSxCKCkpLGM7YS5maW5pc2hlZFdvcms9ZTthLmZpbmlzaGVkTGFuZXM9ZDtzd2l0Y2goYil7Y2FzZSAwOmNhc2UgMTp0aHJvdyBFcnJvcihwKDM0NSkpO2Nhc2UgMjpQayhhLHRrLHVrKTticmVhaztjYXNlIDM6Q2soYSxkKTtpZigoZCYxMzAwMjM0MjQpPT09ZCYmKGI9ZmsrNTAwLUIoKSwxMDxiKSl7aWYoMCE9PXVjKGEsMCkpYnJlYWs7ZT1hLnN1c3BlbmRlZExhbmVzO2lmKChlJmQpIT09ZCl7UigpO2EucGluZ2VkTGFuZXN8PWEuc3VzcGVuZGVkTGFuZXMmZTticmVha31hLnRpbWVvdXRIYW5kbGU9RmYoUGsuYmluZChudWxsLGEsdGssdWspLGIpO2JyZWFrfVBrKGEsdGssdWspO2JyZWFrO2Nhc2UgNDpDayhhLGQpO2lmKChkJjQxOTQyNDApPT09XG5kKWJyZWFrO2I9YS5ldmVudFRpbWVzO2ZvcihlPS0xOzA8ZDspe3ZhciBnPTMxLW9jKGQpO2Y9MTw8ZztnPWJbZ107Zz5lJiYoZT1nKTtkJj1+Zn1kPWU7ZD1CKCktZDtkPSgxMjA+ZD8xMjA6NDgwPmQ/NDgwOjEwODA+ZD8xMDgwOjE5MjA+ZD8xOTIwOjNFMz5kPzNFMzo0MzIwPmQ/NDMyMDoxOTYwKmxrKGQvMTk2MCkpLWQ7aWYoMTA8ZCl7YS50aW1lb3V0SGFuZGxlPUZmKFBrLmJpbmQobnVsbCxhLHRrLHVrKSxkKTticmVha31QayhhLHRrLHVrKTticmVhaztjYXNlIDU6UGsoYSx0ayx1ayk7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihwKDMyOSkpO319fURrKGEsQigpKTtyZXR1cm4gYS5jYWxsYmFja05vZGU9PT1jP0drLmJpbmQobnVsbCxhKTpudWxsfVxuZnVuY3Rpb24gTmsoYSxiKXt2YXIgYz1zazthLmN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQmJihLayhhLGIpLmZsYWdzfD0yNTYpO2E9SWsoYSxiKTsyIT09YSYmKGI9dGssdGs9YyxudWxsIT09YiYmRmooYikpO3JldHVybiBhfWZ1bmN0aW9uIEZqKGEpe251bGw9PT10az90az1hOnRrLnB1c2guYXBwbHkodGssYSl9XG5mdW5jdGlvbiBPayhhKXtmb3IodmFyIGI9YTs7KXtpZihiLmZsYWdzJjE2Mzg0KXt2YXIgYz1iLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1jJiYoYz1jLnN0b3JlcyxudWxsIT09YykpZm9yKHZhciBkPTA7ZDxjLmxlbmd0aDtkKyspe3ZhciBlPWNbZF0sZj1lLmdldFNuYXBzaG90O2U9ZS52YWx1ZTt0cnl7aWYoIUhlKGYoKSxlKSlyZXR1cm4hMX1jYXRjaChnKXtyZXR1cm4hMX19fWM9Yi5jaGlsZDtpZihiLnN1YnRyZWVGbGFncyYxNjM4NCYmbnVsbCE9PWMpYy5yZXR1cm49YixiPWM7ZWxzZXtpZihiPT09YSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09Yi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4hMDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9fXJldHVybiEwfVxuZnVuY3Rpb24gQ2soYSxiKXtiJj1+cms7YiY9fnFrO2Euc3VzcGVuZGVkTGFuZXN8PWI7YS5waW5nZWRMYW5lcyY9fmI7Zm9yKGE9YS5leHBpcmF0aW9uVGltZXM7MDxiOyl7dmFyIGM9MzEtb2MoYiksZD0xPDxjO2FbY109LTE7YiY9fmR9fWZ1bmN0aW9uIEVrKGEpe2lmKDAhPT0oSyY2KSl0aHJvdyBFcnJvcihwKDMyNykpO0hrKCk7dmFyIGI9dWMoYSwwKTtpZigwPT09KGImMSkpcmV0dXJuIERrKGEsQigpKSxudWxsO3ZhciBjPUlrKGEsYik7aWYoMCE9PWEudGFnJiYyPT09Yyl7dmFyIGQ9eGMoYSk7MCE9PWQmJihiPWQsYz1OayhhLGQpKX1pZigxPT09Yyl0aHJvdyBjPXBrLEtrKGEsMCksQ2soYSxiKSxEayhhLEIoKSksYztpZig2PT09Yyl0aHJvdyBFcnJvcihwKDM0NSkpO2EuZmluaXNoZWRXb3JrPWEuY3VycmVudC5hbHRlcm5hdGU7YS5maW5pc2hlZExhbmVzPWI7UGsoYSx0ayx1ayk7RGsoYSxCKCkpO3JldHVybiBudWxsfVxuZnVuY3Rpb24gUWsoYSxiKXt2YXIgYz1LO0t8PTE7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7Sz1jLDA9PT1LJiYoR2o9QigpKzUwMCxmZyYmamcoKSl9fWZ1bmN0aW9uIFJrKGEpe251bGwhPT13ayYmMD09PXdrLnRhZyYmMD09PShLJjYpJiZIaygpO3ZhciBiPUs7S3w9MTt2YXIgYz1vay50cmFuc2l0aW9uLGQ9Qzt0cnl7aWYob2sudHJhbnNpdGlvbj1udWxsLEM9MSxhKXJldHVybiBhKCl9ZmluYWxseXtDPWQsb2sudHJhbnNpdGlvbj1jLEs9YiwwPT09KEsmNikmJmpnKCl9fWZ1bmN0aW9uIEhqKCl7Zmo9ZWouY3VycmVudDtFKGVqKX1cbmZ1bmN0aW9uIEtrKGEsYil7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkTGFuZXM9MDt2YXIgYz1hLnRpbWVvdXRIYW5kbGU7LTEhPT1jJiYoYS50aW1lb3V0SGFuZGxlPS0xLEdmKGMpKTtpZihudWxsIT09WSlmb3IoYz1ZLnJldHVybjtudWxsIT09Yzspe3ZhciBkPWM7d2coZCk7c3dpdGNoKGQudGFnKXtjYXNlIDE6ZD1kLnR5cGUuY2hpbGRDb250ZXh0VHlwZXM7bnVsbCE9PWQmJnZvaWQgMCE9PWQmJiRmKCk7YnJlYWs7Y2FzZSAzOnpoKCk7RShXZik7RShIKTtFaCgpO2JyZWFrO2Nhc2UgNTpCaChkKTticmVhaztjYXNlIDQ6emgoKTticmVhaztjYXNlIDEzOkUoTCk7YnJlYWs7Y2FzZSAxOTpFKEwpO2JyZWFrO2Nhc2UgMTA6YWgoZC50eXBlLl9jb250ZXh0KTticmVhaztjYXNlIDIyOmNhc2UgMjM6SGooKX1jPWMucmV0dXJufVE9YTtZPWE9UGcoYS5jdXJyZW50LG51bGwpO1o9Zmo9YjtUPTA7cGs9bnVsbDtyaz1xaz1yaD0wO3RrPXNrPW51bGw7aWYobnVsbCE9PWZoKXtmb3IoYj1cbjA7YjxmaC5sZW5ndGg7YisrKWlmKGM9ZmhbYl0sZD1jLmludGVybGVhdmVkLG51bGwhPT1kKXtjLmludGVybGVhdmVkPW51bGw7dmFyIGU9ZC5uZXh0LGY9Yy5wZW5kaW5nO2lmKG51bGwhPT1mKXt2YXIgZz1mLm5leHQ7Zi5uZXh0PWU7ZC5uZXh0PWd9Yy5wZW5kaW5nPWR9Zmg9bnVsbH1yZXR1cm4gYX1cbmZ1bmN0aW9uIE1rKGEsYil7ZG97dmFyIGM9WTt0cnl7JGcoKTtGaC5jdXJyZW50PVJoO2lmKEloKXtmb3IodmFyIGQ9TS5tZW1vaXplZFN0YXRlO251bGwhPT1kOyl7dmFyIGU9ZC5xdWV1ZTtudWxsIT09ZSYmKGUucGVuZGluZz1udWxsKTtkPWQubmV4dH1JaD0hMX1IaD0wO089Tj1NPW51bGw7Smg9ITE7S2g9MDtuay5jdXJyZW50PW51bGw7aWYobnVsbD09PWN8fG51bGw9PT1jLnJldHVybil7VD0xO3BrPWI7WT1udWxsO2JyZWFrfWE6e3ZhciBmPWEsZz1jLnJldHVybixoPWMsaz1iO2I9WjtoLmZsYWdzfD0zMjc2ODtpZihudWxsIT09ayYmXCJvYmplY3RcIj09PXR5cGVvZiBrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2Ygay50aGVuKXt2YXIgbD1rLG09aCxxPW0udGFnO2lmKDA9PT0obS5tb2RlJjEpJiYoMD09PXF8fDExPT09cXx8MTU9PT1xKSl7dmFyIHI9bS5hbHRlcm5hdGU7cj8obS51cGRhdGVRdWV1ZT1yLnVwZGF0ZVF1ZXVlLG0ubWVtb2l6ZWRTdGF0ZT1yLm1lbW9pemVkU3RhdGUsXG5tLmxhbmVzPXIubGFuZXMpOihtLnVwZGF0ZVF1ZXVlPW51bGwsbS5tZW1vaXplZFN0YXRlPW51bGwpfXZhciB5PVVpKGcpO2lmKG51bGwhPT15KXt5LmZsYWdzJj0tMjU3O1ZpKHksZyxoLGYsYik7eS5tb2RlJjEmJlNpKGYsbCxiKTtiPXk7az1sO3ZhciBuPWIudXBkYXRlUXVldWU7aWYobnVsbD09PW4pe3ZhciB0PW5ldyBTZXQ7dC5hZGQoayk7Yi51cGRhdGVRdWV1ZT10fWVsc2Ugbi5hZGQoayk7YnJlYWsgYX1lbHNle2lmKDA9PT0oYiYxKSl7U2koZixsLGIpO3RqKCk7YnJlYWsgYX1rPUVycm9yKHAoNDI2KSl9fWVsc2UgaWYoSSYmaC5tb2RlJjEpe3ZhciBKPVVpKGcpO2lmKG51bGwhPT1KKXswPT09KEouZmxhZ3MmNjU1MzYpJiYoSi5mbGFnc3w9MjU2KTtWaShKLGcsaCxmLGIpO0pnKEppKGssaCkpO2JyZWFrIGF9fWY9az1KaShrLGgpOzQhPT1UJiYoVD0yKTtudWxsPT09c2s/c2s9W2ZdOnNrLnB1c2goZik7Zj1nO2Rve3N3aXRjaChmLnRhZyl7Y2FzZSAzOmYuZmxhZ3N8PTY1NTM2O1xuYiY9LWI7Zi5sYW5lc3w9Yjt2YXIgeD1OaShmLGssYik7cGgoZix4KTticmVhayBhO2Nhc2UgMTpoPWs7dmFyIHc9Zi50eXBlLHU9Zi5zdGF0ZU5vZGU7aWYoMD09PShmLmZsYWdzJjEyOCkmJihcImZ1bmN0aW9uXCI9PT10eXBlb2Ygdy5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fG51bGwhPT11JiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgdS5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1SaXx8IVJpLmhhcyh1KSkpKXtmLmZsYWdzfD02NTUzNjtiJj0tYjtmLmxhbmVzfD1iO3ZhciBGPVFpKGYsaCxiKTtwaChmLEYpO2JyZWFrIGF9fWY9Zi5yZXR1cm59d2hpbGUobnVsbCE9PWYpfVNrKGMpfWNhdGNoKG5hKXtiPW5hO1k9PT1jJiZudWxsIT09YyYmKFk9Yz1jLnJldHVybik7Y29udGludWV9YnJlYWt9d2hpbGUoMSl9ZnVuY3Rpb24gSmsoKXt2YXIgYT1tay5jdXJyZW50O21rLmN1cnJlbnQ9Umg7cmV0dXJuIG51bGw9PT1hP1JoOmF9XG5mdW5jdGlvbiB0aigpe2lmKDA9PT1UfHwzPT09VHx8Mj09PVQpVD00O251bGw9PT1RfHwwPT09KHJoJjI2ODQzNTQ1NSkmJjA9PT0ocWsmMjY4NDM1NDU1KXx8Q2soUSxaKX1mdW5jdGlvbiBJayhhLGIpe3ZhciBjPUs7S3w9Mjt2YXIgZD1KaygpO2lmKFEhPT1hfHxaIT09Yil1az1udWxsLEtrKGEsYik7ZG8gdHJ5e1RrKCk7YnJlYWt9Y2F0Y2goZSl7TWsoYSxlKX13aGlsZSgxKTskZygpO0s9Yzttay5jdXJyZW50PWQ7aWYobnVsbCE9PVkpdGhyb3cgRXJyb3IocCgyNjEpKTtRPW51bGw7Wj0wO3JldHVybiBUfWZ1bmN0aW9uIFRrKCl7Zm9yKDtudWxsIT09WTspVWsoWSl9ZnVuY3Rpb24gTGsoKXtmb3IoO251bGwhPT1ZJiYhY2MoKTspVWsoWSl9ZnVuY3Rpb24gVWsoYSl7dmFyIGI9VmsoYS5hbHRlcm5hdGUsYSxmaik7YS5tZW1vaXplZFByb3BzPWEucGVuZGluZ1Byb3BzO251bGw9PT1iP1NrKGEpOlk9Yjtuay5jdXJyZW50PW51bGx9XG5mdW5jdGlvbiBTayhhKXt2YXIgYj1hO2Rve3ZhciBjPWIuYWx0ZXJuYXRlO2E9Yi5yZXR1cm47aWYoMD09PShiLmZsYWdzJjMyNzY4KSl7aWYoYz1FaihjLGIsZmopLG51bGwhPT1jKXtZPWM7cmV0dXJufX1lbHNle2M9SWooYyxiKTtpZihudWxsIT09Yyl7Yy5mbGFncyY9MzI3Njc7WT1jO3JldHVybn1pZihudWxsIT09YSlhLmZsYWdzfD0zMjc2OCxhLnN1YnRyZWVGbGFncz0wLGEuZGVsZXRpb25zPW51bGw7ZWxzZXtUPTY7WT1udWxsO3JldHVybn19Yj1iLnNpYmxpbmc7aWYobnVsbCE9PWIpe1k9YjtyZXR1cm59WT1iPWF9d2hpbGUobnVsbCE9PWIpOzA9PT1UJiYoVD01KX1mdW5jdGlvbiBQayhhLGIsYyl7dmFyIGQ9QyxlPW9rLnRyYW5zaXRpb247dHJ5e29rLnRyYW5zaXRpb249bnVsbCxDPTEsV2soYSxiLGMsZCl9ZmluYWxseXtvay50cmFuc2l0aW9uPWUsQz1kfXJldHVybiBudWxsfVxuZnVuY3Rpb24gV2soYSxiLGMsZCl7ZG8gSGsoKTt3aGlsZShudWxsIT09d2spO2lmKDAhPT0oSyY2KSl0aHJvdyBFcnJvcihwKDMyNykpO2M9YS5maW5pc2hlZFdvcms7dmFyIGU9YS5maW5pc2hlZExhbmVzO2lmKG51bGw9PT1jKXJldHVybiBudWxsO2EuZmluaXNoZWRXb3JrPW51bGw7YS5maW5pc2hlZExhbmVzPTA7aWYoYz09PWEuY3VycmVudCl0aHJvdyBFcnJvcihwKDE3NykpO2EuY2FsbGJhY2tOb2RlPW51bGw7YS5jYWxsYmFja1ByaW9yaXR5PTA7dmFyIGY9Yy5sYW5lc3xjLmNoaWxkTGFuZXM7QmMoYSxmKTthPT09USYmKFk9UT1udWxsLFo9MCk7MD09PShjLnN1YnRyZWVGbGFncyYyMDY0KSYmMD09PShjLmZsYWdzJjIwNjQpfHx2a3x8KHZrPSEwLEZrKGhjLGZ1bmN0aW9uKCl7SGsoKTtyZXR1cm4gbnVsbH0pKTtmPTAhPT0oYy5mbGFncyYxNTk5MCk7aWYoMCE9PShjLnN1YnRyZWVGbGFncyYxNTk5MCl8fGYpe2Y9b2sudHJhbnNpdGlvbjtvay50cmFuc2l0aW9uPW51bGw7XG52YXIgZz1DO0M9MTt2YXIgaD1LO0t8PTQ7bmsuY3VycmVudD1udWxsO09qKGEsYyk7ZGsoYyxhKTtPZShEZik7ZGQ9ISFDZjtEZj1DZj1udWxsO2EuY3VycmVudD1jO2hrKGMsYSxlKTtkYygpO0s9aDtDPWc7b2sudHJhbnNpdGlvbj1mfWVsc2UgYS5jdXJyZW50PWM7dmsmJih2az0hMSx3az1hLHhrPWUpO2Y9YS5wZW5kaW5nTGFuZXM7MD09PWYmJihSaT1udWxsKTttYyhjLnN0YXRlTm9kZSxkKTtEayhhLEIoKSk7aWYobnVsbCE9PWIpZm9yKGQ9YS5vblJlY292ZXJhYmxlRXJyb3IsYz0wO2M8Yi5sZW5ndGg7YysrKWU9YltjXSxkKGUudmFsdWUse2NvbXBvbmVudFN0YWNrOmUuc3RhY2ssZGlnZXN0OmUuZGlnZXN0fSk7aWYoT2kpdGhyb3cgT2k9ITEsYT1QaSxQaT1udWxsLGE7MCE9PSh4ayYxKSYmMCE9PWEudGFnJiZIaygpO2Y9YS5wZW5kaW5nTGFuZXM7MCE9PShmJjEpP2E9PT16az95aysrOih5az0wLHprPWEpOnlrPTA7amcoKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIEhrKCl7aWYobnVsbCE9PXdrKXt2YXIgYT1EYyh4ayksYj1vay50cmFuc2l0aW9uLGM9Qzt0cnl7b2sudHJhbnNpdGlvbj1udWxsO0M9MTY+YT8xNjphO2lmKG51bGw9PT13ayl2YXIgZD0hMTtlbHNle2E9d2s7d2s9bnVsbDt4az0wO2lmKDAhPT0oSyY2KSl0aHJvdyBFcnJvcihwKDMzMSkpO3ZhciBlPUs7S3w9NDtmb3IoVj1hLmN1cnJlbnQ7bnVsbCE9PVY7KXt2YXIgZj1WLGc9Zi5jaGlsZDtpZigwIT09KFYuZmxhZ3MmMTYpKXt2YXIgaD1mLmRlbGV0aW9ucztpZihudWxsIT09aCl7Zm9yKHZhciBrPTA7azxoLmxlbmd0aDtrKyspe3ZhciBsPWhba107Zm9yKFY9bDtudWxsIT09Vjspe3ZhciBtPVY7c3dpdGNoKG0udGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OlBqKDgsbSxmKX12YXIgcT1tLmNoaWxkO2lmKG51bGwhPT1xKXEucmV0dXJuPW0sVj1xO2Vsc2UgZm9yKDtudWxsIT09Vjspe209Vjt2YXIgcj1tLnNpYmxpbmcseT1tLnJldHVybjtTaihtKTtpZihtPT09XG5sKXtWPW51bGw7YnJlYWt9aWYobnVsbCE9PXIpe3IucmV0dXJuPXk7Vj1yO2JyZWFrfVY9eX19fXZhciBuPWYuYWx0ZXJuYXRlO2lmKG51bGwhPT1uKXt2YXIgdD1uLmNoaWxkO2lmKG51bGwhPT10KXtuLmNoaWxkPW51bGw7ZG97dmFyIEo9dC5zaWJsaW5nO3Quc2libGluZz1udWxsO3Q9Sn13aGlsZShudWxsIT09dCl9fVY9Zn19aWYoMCE9PShmLnN1YnRyZWVGbGFncyYyMDY0KSYmbnVsbCE9PWcpZy5yZXR1cm49ZixWPWc7ZWxzZSBiOmZvcig7bnVsbCE9PVY7KXtmPVY7aWYoMCE9PShmLmZsYWdzJjIwNDgpKXN3aXRjaChmLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpQaig5LGYsZi5yZXR1cm4pfXZhciB4PWYuc2libGluZztpZihudWxsIT09eCl7eC5yZXR1cm49Zi5yZXR1cm47Vj14O2JyZWFrIGJ9Vj1mLnJldHVybn19dmFyIHc9YS5jdXJyZW50O2ZvcihWPXc7bnVsbCE9PVY7KXtnPVY7dmFyIHU9Zy5jaGlsZDtpZigwIT09KGcuc3VidHJlZUZsYWdzJjIwNjQpJiZudWxsIT09XG51KXUucmV0dXJuPWcsVj11O2Vsc2UgYjpmb3IoZz13O251bGwhPT1WOyl7aD1WO2lmKDAhPT0oaC5mbGFncyYyMDQ4KSl0cnl7c3dpdGNoKGgudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OlFqKDksaCl9fWNhdGNoKG5hKXtXKGgsaC5yZXR1cm4sbmEpfWlmKGg9PT1nKXtWPW51bGw7YnJlYWsgYn12YXIgRj1oLnNpYmxpbmc7aWYobnVsbCE9PUYpe0YucmV0dXJuPWgucmV0dXJuO1Y9RjticmVhayBifVY9aC5yZXR1cm59fUs9ZTtqZygpO2lmKGxjJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgbGMub25Qb3N0Q29tbWl0RmliZXJSb290KXRyeXtsYy5vblBvc3RDb21taXRGaWJlclJvb3Qoa2MsYSl9Y2F0Y2gobmEpe31kPSEwfXJldHVybiBkfWZpbmFsbHl7Qz1jLG9rLnRyYW5zaXRpb249Yn19cmV0dXJuITF9ZnVuY3Rpb24gWGsoYSxiLGMpe2I9SmkoYyxiKTtiPU5pKGEsYiwxKTthPW5oKGEsYiwxKTtiPVIoKTtudWxsIT09YSYmKEFjKGEsMSxiKSxEayhhLGIpKX1cbmZ1bmN0aW9uIFcoYSxiLGMpe2lmKDM9PT1hLnRhZylYayhhLGEsYyk7ZWxzZSBmb3IoO251bGwhPT1iOyl7aWYoMz09PWIudGFnKXtYayhiLGEsYyk7YnJlYWt9ZWxzZSBpZigxPT09Yi50YWcpe3ZhciBkPWIuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1SaXx8IVJpLmhhcyhkKSkpe2E9SmkoYyxhKTthPVFpKGIsYSwxKTtiPW5oKGIsYSwxKTthPVIoKTtudWxsIT09YiYmKEFjKGIsMSxhKSxEayhiLGEpKTticmVha319Yj1iLnJldHVybn19XG5mdW5jdGlvbiBUaShhLGIsYyl7dmFyIGQ9YS5waW5nQ2FjaGU7bnVsbCE9PWQmJmQuZGVsZXRlKGIpO2I9UigpO2EucGluZ2VkTGFuZXN8PWEuc3VzcGVuZGVkTGFuZXMmYztRPT09YSYmKFomYyk9PT1jJiYoND09PVR8fDM9PT1UJiYoWiYxMzAwMjM0MjQpPT09WiYmNTAwPkIoKS1maz9LayhhLDApOnJrfD1jKTtEayhhLGIpfWZ1bmN0aW9uIFlrKGEsYil7MD09PWImJigwPT09KGEubW9kZSYxKT9iPTE6KGI9c2Msc2M8PD0xLDA9PT0oc2MmMTMwMDIzNDI0KSYmKHNjPTQxOTQzMDQpKSk7dmFyIGM9UigpO2E9aWgoYSxiKTtudWxsIT09YSYmKEFjKGEsYixjKSxEayhhLGMpKX1mdW5jdGlvbiB1aihhKXt2YXIgYj1hLm1lbW9pemVkU3RhdGUsYz0wO251bGwhPT1iJiYoYz1iLnJldHJ5TGFuZSk7WWsoYSxjKX1cbmZ1bmN0aW9uIGJrKGEsYil7dmFyIGM9MDtzd2l0Y2goYS50YWcpe2Nhc2UgMTM6dmFyIGQ9YS5zdGF0ZU5vZGU7dmFyIGU9YS5tZW1vaXplZFN0YXRlO251bGwhPT1lJiYoYz1lLnJldHJ5TGFuZSk7YnJlYWs7Y2FzZSAxOTpkPWEuc3RhdGVOb2RlO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IocCgzMTQpKTt9bnVsbCE9PWQmJmQuZGVsZXRlKGIpO1lrKGEsYyl9dmFyIFZrO1xuVms9ZnVuY3Rpb24oYSxiLGMpe2lmKG51bGwhPT1hKWlmKGEubWVtb2l6ZWRQcm9wcyE9PWIucGVuZGluZ1Byb3BzfHxXZi5jdXJyZW50KWRoPSEwO2Vsc2V7aWYoMD09PShhLmxhbmVzJmMpJiYwPT09KGIuZmxhZ3MmMTI4KSlyZXR1cm4gZGg9ITEseWooYSxiLGMpO2RoPTAhPT0oYS5mbGFncyYxMzEwNzIpPyEwOiExfWVsc2UgZGg9ITEsSSYmMCE9PShiLmZsYWdzJjEwNDg1NzYpJiZ1ZyhiLG5nLGIuaW5kZXgpO2IubGFuZXM9MDtzd2l0Y2goYi50YWcpe2Nhc2UgMjp2YXIgZD1iLnR5cGU7aWooYSxiKTthPWIucGVuZGluZ1Byb3BzO3ZhciBlPVlmKGIsSC5jdXJyZW50KTtjaChiLGMpO2U9TmgobnVsbCxiLGQsYSxlLGMpO3ZhciBmPVNoKCk7Yi5mbGFnc3w9MTtcIm9iamVjdFwiPT09dHlwZW9mIGUmJm51bGwhPT1lJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5yZW5kZXImJnZvaWQgMD09PWUuJCR0eXBlb2Y/KGIudGFnPTEsYi5tZW1vaXplZFN0YXRlPW51bGwsYi51cGRhdGVRdWV1ZT1cbm51bGwsWmYoZCk/KGY9ITAsY2coYikpOmY9ITEsYi5tZW1vaXplZFN0YXRlPW51bGwhPT1lLnN0YXRlJiZ2b2lkIDAhPT1lLnN0YXRlP2Uuc3RhdGU6bnVsbCxraChiKSxlLnVwZGF0ZXI9RWksYi5zdGF0ZU5vZGU9ZSxlLl9yZWFjdEludGVybmFscz1iLElpKGIsZCxhLGMpLGI9amoobnVsbCxiLGQsITAsZixjKSk6KGIudGFnPTAsSSYmZiYmdmcoYiksWGkobnVsbCxiLGUsYyksYj1iLmNoaWxkKTtyZXR1cm4gYjtjYXNlIDE2OmQ9Yi5lbGVtZW50VHlwZTthOntpaihhLGIpO2E9Yi5wZW5kaW5nUHJvcHM7ZT1kLl9pbml0O2Q9ZShkLl9wYXlsb2FkKTtiLnR5cGU9ZDtlPWIudGFnPVprKGQpO2E9Q2koZCxhKTtzd2l0Y2goZSl7Y2FzZSAwOmI9Y2oobnVsbCxiLGQsYSxjKTticmVhayBhO2Nhc2UgMTpiPWhqKG51bGwsYixkLGEsYyk7YnJlYWsgYTtjYXNlIDExOmI9WWkobnVsbCxiLGQsYSxjKTticmVhayBhO2Nhc2UgMTQ6Yj0kaShudWxsLGIsZCxDaShkLnR5cGUsYSksYyk7YnJlYWsgYX10aHJvdyBFcnJvcihwKDMwNixcbmQsXCJcIikpO31yZXR1cm4gYjtjYXNlIDA6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOkNpKGQsZSksY2ooYSxiLGQsZSxjKTtjYXNlIDE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOkNpKGQsZSksaGooYSxiLGQsZSxjKTtjYXNlIDM6YTp7a2ooYik7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IocCgzODcpKTtkPWIucGVuZGluZ1Byb3BzO2Y9Yi5tZW1vaXplZFN0YXRlO2U9Zi5lbGVtZW50O2xoKGEsYik7cWgoYixkLG51bGwsYyk7dmFyIGc9Yi5tZW1vaXplZFN0YXRlO2Q9Zy5lbGVtZW50O2lmKGYuaXNEZWh5ZHJhdGVkKWlmKGY9e2VsZW1lbnQ6ZCxpc0RlaHlkcmF0ZWQ6ITEsY2FjaGU6Zy5jYWNoZSxwZW5kaW5nU3VzcGVuc2VCb3VuZGFyaWVzOmcucGVuZGluZ1N1c3BlbnNlQm91bmRhcmllcyx0cmFuc2l0aW9uczpnLnRyYW5zaXRpb25zfSxiLnVwZGF0ZVF1ZXVlLmJhc2VTdGF0ZT1cbmYsYi5tZW1vaXplZFN0YXRlPWYsYi5mbGFncyYyNTYpe2U9SmkoRXJyb3IocCg0MjMpKSxiKTtiPWxqKGEsYixkLGMsZSk7YnJlYWsgYX1lbHNlIGlmKGQhPT1lKXtlPUppKEVycm9yKHAoNDI0KSksYik7Yj1saihhLGIsZCxjLGUpO2JyZWFrIGF9ZWxzZSBmb3IoeWc9TGYoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mby5maXJzdENoaWxkKSx4Zz1iLEk9ITAsemc9bnVsbCxjPVZnKGIsbnVsbCxkLGMpLGIuY2hpbGQ9YztjOyljLmZsYWdzPWMuZmxhZ3MmLTN8NDA5NixjPWMuc2libGluZztlbHNle0lnKCk7aWYoZD09PWUpe2I9WmkoYSxiLGMpO2JyZWFrIGF9WGkoYSxiLGQsYyl9Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgNTpyZXR1cm4gQWgoYiksbnVsbD09PWEmJkVnKGIpLGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZj1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6bnVsbCxnPWUuY2hpbGRyZW4sRWYoZCxlKT9nPW51bGw6bnVsbCE9PWYmJkVmKGQsZikmJihiLmZsYWdzfD0zMiksXG5naihhLGIpLFhpKGEsYixnLGMpLGIuY2hpbGQ7Y2FzZSA2OnJldHVybiBudWxsPT09YSYmRWcoYiksbnVsbDtjYXNlIDEzOnJldHVybiBvaihhLGIsYyk7Y2FzZSA0OnJldHVybiB5aChiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLGQ9Yi5wZW5kaW5nUHJvcHMsbnVsbD09PWE/Yi5jaGlsZD1VZyhiLG51bGwsZCxjKTpYaShhLGIsZCxjKSxiLmNoaWxkO2Nhc2UgMTE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOkNpKGQsZSksWWkoYSxiLGQsZSxjKTtjYXNlIDc6cmV0dXJuIFhpKGEsYixiLnBlbmRpbmdQcm9wcyxjKSxiLmNoaWxkO2Nhc2UgODpyZXR1cm4gWGkoYSxiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLGMpLGIuY2hpbGQ7Y2FzZSAxMjpyZXR1cm4gWGkoYSxiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLGMpLGIuY2hpbGQ7Y2FzZSAxMDphOntkPWIudHlwZS5fY29udGV4dDtlPWIucGVuZGluZ1Byb3BzO2Y9Yi5tZW1vaXplZFByb3BzO1xuZz1lLnZhbHVlO0coV2csZC5fY3VycmVudFZhbHVlKTtkLl9jdXJyZW50VmFsdWU9ZztpZihudWxsIT09ZilpZihIZShmLnZhbHVlLGcpKXtpZihmLmNoaWxkcmVuPT09ZS5jaGlsZHJlbiYmIVdmLmN1cnJlbnQpe2I9WmkoYSxiLGMpO2JyZWFrIGF9fWVsc2UgZm9yKGY9Yi5jaGlsZCxudWxsIT09ZiYmKGYucmV0dXJuPWIpO251bGwhPT1mOyl7dmFyIGg9Zi5kZXBlbmRlbmNpZXM7aWYobnVsbCE9PWgpe2c9Zi5jaGlsZDtmb3IodmFyIGs9aC5maXJzdENvbnRleHQ7bnVsbCE9PWs7KXtpZihrLmNvbnRleHQ9PT1kKXtpZigxPT09Zi50YWcpe2s9bWgoLTEsYyYtYyk7ay50YWc9Mjt2YXIgbD1mLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1sKXtsPWwuc2hhcmVkO3ZhciBtPWwucGVuZGluZztudWxsPT09bT9rLm5leHQ9azooay5uZXh0PW0ubmV4dCxtLm5leHQ9ayk7bC5wZW5kaW5nPWt9fWYubGFuZXN8PWM7az1mLmFsdGVybmF0ZTtudWxsIT09ayYmKGsubGFuZXN8PWMpO2JoKGYucmV0dXJuLFxuYyxiKTtoLmxhbmVzfD1jO2JyZWFrfWs9ay5uZXh0fX1lbHNlIGlmKDEwPT09Zi50YWcpZz1mLnR5cGU9PT1iLnR5cGU/bnVsbDpmLmNoaWxkO2Vsc2UgaWYoMTg9PT1mLnRhZyl7Zz1mLnJldHVybjtpZihudWxsPT09Zyl0aHJvdyBFcnJvcihwKDM0MSkpO2cubGFuZXN8PWM7aD1nLmFsdGVybmF0ZTtudWxsIT09aCYmKGgubGFuZXN8PWMpO2JoKGcsYyxiKTtnPWYuc2libGluZ31lbHNlIGc9Zi5jaGlsZDtpZihudWxsIT09ZylnLnJldHVybj1mO2Vsc2UgZm9yKGc9ZjtudWxsIT09Zzspe2lmKGc9PT1iKXtnPW51bGw7YnJlYWt9Zj1nLnNpYmxpbmc7aWYobnVsbCE9PWYpe2YucmV0dXJuPWcucmV0dXJuO2c9ZjticmVha31nPWcucmV0dXJufWY9Z31YaShhLGIsZS5jaGlsZHJlbixjKTtiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA5OnJldHVybiBlPWIudHlwZSxkPWIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLGNoKGIsYyksZT1laChlKSxkPWQoZSksYi5mbGFnc3w9MSxYaShhLGIsZCxjKSxcbmIuY2hpbGQ7Y2FzZSAxNDpyZXR1cm4gZD1iLnR5cGUsZT1DaShkLGIucGVuZGluZ1Byb3BzKSxlPUNpKGQudHlwZSxlKSwkaShhLGIsZCxlLGMpO2Nhc2UgMTU6cmV0dXJuIGJqKGEsYixiLnR5cGUsYi5wZW5kaW5nUHJvcHMsYyk7Y2FzZSAxNzpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6Q2koZCxlKSxpaihhLGIpLGIudGFnPTEsWmYoZCk/KGE9ITAsY2coYikpOmE9ITEsY2goYixjKSxHaShiLGQsZSksSWkoYixkLGUsYyksamoobnVsbCxiLGQsITAsYSxjKTtjYXNlIDE5OnJldHVybiB4aihhLGIsYyk7Y2FzZSAyMjpyZXR1cm4gZGooYSxiLGMpfXRocm93IEVycm9yKHAoMTU2LGIudGFnKSk7fTtmdW5jdGlvbiBGayhhLGIpe3JldHVybiBhYyhhLGIpfVxuZnVuY3Rpb24gJGsoYSxiLGMsZCl7dGhpcy50YWc9YTt0aGlzLmtleT1jO3RoaXMuc2libGluZz10aGlzLmNoaWxkPXRoaXMucmV0dXJuPXRoaXMuc3RhdGVOb2RlPXRoaXMudHlwZT10aGlzLmVsZW1lbnRUeXBlPW51bGw7dGhpcy5pbmRleD0wO3RoaXMucmVmPW51bGw7dGhpcy5wZW5kaW5nUHJvcHM9Yjt0aGlzLmRlcGVuZGVuY2llcz10aGlzLm1lbW9pemVkU3RhdGU9dGhpcy51cGRhdGVRdWV1ZT10aGlzLm1lbW9pemVkUHJvcHM9bnVsbDt0aGlzLm1vZGU9ZDt0aGlzLnN1YnRyZWVGbGFncz10aGlzLmZsYWdzPTA7dGhpcy5kZWxldGlvbnM9bnVsbDt0aGlzLmNoaWxkTGFuZXM9dGhpcy5sYW5lcz0wO3RoaXMuYWx0ZXJuYXRlPW51bGx9ZnVuY3Rpb24gQmcoYSxiLGMsZCl7cmV0dXJuIG5ldyAkayhhLGIsYyxkKX1mdW5jdGlvbiBhaihhKXthPWEucHJvdG90eXBlO3JldHVybiEoIWF8fCFhLmlzUmVhY3RDb21wb25lbnQpfVxuZnVuY3Rpb24gWmsoYSl7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIGFqKGEpPzE6MDtpZih2b2lkIDAhPT1hJiZudWxsIT09YSl7YT1hLiQkdHlwZW9mO2lmKGE9PT1EYSlyZXR1cm4gMTE7aWYoYT09PUdhKXJldHVybiAxNH1yZXR1cm4gMn1cbmZ1bmN0aW9uIFBnKGEsYil7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbD09PWM/KGM9QmcoYS50YWcsYixhLmtleSxhLm1vZGUpLGMuZWxlbWVudFR5cGU9YS5lbGVtZW50VHlwZSxjLnR5cGU9YS50eXBlLGMuc3RhdGVOb2RlPWEuc3RhdGVOb2RlLGMuYWx0ZXJuYXRlPWEsYS5hbHRlcm5hdGU9Yyk6KGMucGVuZGluZ1Byb3BzPWIsYy50eXBlPWEudHlwZSxjLmZsYWdzPTAsYy5zdWJ0cmVlRmxhZ3M9MCxjLmRlbGV0aW9ucz1udWxsKTtjLmZsYWdzPWEuZmxhZ3MmMTQ2ODAwNjQ7Yy5jaGlsZExhbmVzPWEuY2hpbGRMYW5lcztjLmxhbmVzPWEubGFuZXM7Yy5jaGlsZD1hLmNoaWxkO2MubWVtb2l6ZWRQcm9wcz1hLm1lbW9pemVkUHJvcHM7Yy5tZW1vaXplZFN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtjLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWU7Yj1hLmRlcGVuZGVuY2llcztjLmRlcGVuZGVuY2llcz1udWxsPT09Yj9udWxsOntsYW5lczpiLmxhbmVzLGZpcnN0Q29udGV4dDpiLmZpcnN0Q29udGV4dH07XG5jLnNpYmxpbmc9YS5zaWJsaW5nO2MuaW5kZXg9YS5pbmRleDtjLnJlZj1hLnJlZjtyZXR1cm4gY31cbmZ1bmN0aW9uIFJnKGEsYixjLGQsZSxmKXt2YXIgZz0yO2Q9YTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlhaihhKSYmKGc9MSk7ZWxzZSBpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpZz01O2Vsc2UgYTpzd2l0Y2goYSl7Y2FzZSB5YTpyZXR1cm4gVGcoYy5jaGlsZHJlbixlLGYsYik7Y2FzZSB6YTpnPTg7ZXw9ODticmVhaztjYXNlIEFhOnJldHVybiBhPUJnKDEyLGMsYixlfDIpLGEuZWxlbWVudFR5cGU9QWEsYS5sYW5lcz1mLGE7Y2FzZSBFYTpyZXR1cm4gYT1CZygxMyxjLGIsZSksYS5lbGVtZW50VHlwZT1FYSxhLmxhbmVzPWYsYTtjYXNlIEZhOnJldHVybiBhPUJnKDE5LGMsYixlKSxhLmVsZW1lbnRUeXBlPUZhLGEubGFuZXM9ZixhO2Nhc2UgSWE6cmV0dXJuIHBqKGMsZSxmLGIpO2RlZmF1bHQ6aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBCYTpnPTEwO2JyZWFrIGE7Y2FzZSBDYTpnPTk7YnJlYWsgYTtjYXNlIERhOmc9MTE7XG5icmVhayBhO2Nhc2UgR2E6Zz0xNDticmVhayBhO2Nhc2UgSGE6Zz0xNjtkPW51bGw7YnJlYWsgYX10aHJvdyBFcnJvcihwKDEzMCxudWxsPT1hP2E6dHlwZW9mIGEsXCJcIikpO31iPUJnKGcsYyxiLGUpO2IuZWxlbWVudFR5cGU9YTtiLnR5cGU9ZDtiLmxhbmVzPWY7cmV0dXJuIGJ9ZnVuY3Rpb24gVGcoYSxiLGMsZCl7YT1CZyg3LGEsZCxiKTthLmxhbmVzPWM7cmV0dXJuIGF9ZnVuY3Rpb24gcGooYSxiLGMsZCl7YT1CZygyMixhLGQsYik7YS5lbGVtZW50VHlwZT1JYTthLmxhbmVzPWM7YS5zdGF0ZU5vZGU9e2lzSGlkZGVuOiExfTtyZXR1cm4gYX1mdW5jdGlvbiBRZyhhLGIsYyl7YT1CZyg2LGEsbnVsbCxiKTthLmxhbmVzPWM7cmV0dXJuIGF9XG5mdW5jdGlvbiBTZyhhLGIsYyl7Yj1CZyg0LG51bGwhPT1hLmNoaWxkcmVuP2EuY2hpbGRyZW46W10sYS5rZXksYik7Yi5sYW5lcz1jO2Iuc3RhdGVOb2RlPXtjb250YWluZXJJbmZvOmEuY29udGFpbmVySW5mbyxwZW5kaW5nQ2hpbGRyZW46bnVsbCxpbXBsZW1lbnRhdGlvbjphLmltcGxlbWVudGF0aW9ufTtyZXR1cm4gYn1cbmZ1bmN0aW9uIGFsKGEsYixjLGQsZSl7dGhpcy50YWc9Yjt0aGlzLmNvbnRhaW5lckluZm89YTt0aGlzLmZpbmlzaGVkV29yaz10aGlzLnBpbmdDYWNoZT10aGlzLmN1cnJlbnQ9dGhpcy5wZW5kaW5nQ2hpbGRyZW49bnVsbDt0aGlzLnRpbWVvdXRIYW5kbGU9LTE7dGhpcy5jYWxsYmFja05vZGU9dGhpcy5wZW5kaW5nQ29udGV4dD10aGlzLmNvbnRleHQ9bnVsbDt0aGlzLmNhbGxiYWNrUHJpb3JpdHk9MDt0aGlzLmV2ZW50VGltZXM9emMoMCk7dGhpcy5leHBpcmF0aW9uVGltZXM9emMoLTEpO3RoaXMuZW50YW5nbGVkTGFuZXM9dGhpcy5maW5pc2hlZExhbmVzPXRoaXMubXV0YWJsZVJlYWRMYW5lcz10aGlzLmV4cGlyZWRMYW5lcz10aGlzLnBpbmdlZExhbmVzPXRoaXMuc3VzcGVuZGVkTGFuZXM9dGhpcy5wZW5kaW5nTGFuZXM9MDt0aGlzLmVudGFuZ2xlbWVudHM9emMoMCk7dGhpcy5pZGVudGlmaWVyUHJlZml4PWQ7dGhpcy5vblJlY292ZXJhYmxlRXJyb3I9ZTt0aGlzLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE9XG5udWxsfWZ1bmN0aW9uIGJsKGEsYixjLGQsZSxmLGcsaCxrKXthPW5ldyBhbChhLGIsYyxoLGspOzE9PT1iPyhiPTEsITA9PT1mJiYoYnw9OCkpOmI9MDtmPUJnKDMsbnVsbCxudWxsLGIpO2EuY3VycmVudD1mO2Yuc3RhdGVOb2RlPWE7Zi5tZW1vaXplZFN0YXRlPXtlbGVtZW50OmQsaXNEZWh5ZHJhdGVkOmMsY2FjaGU6bnVsbCx0cmFuc2l0aW9uczpudWxsLHBlbmRpbmdTdXNwZW5zZUJvdW5kYXJpZXM6bnVsbH07a2goZik7cmV0dXJuIGF9ZnVuY3Rpb24gY2woYSxiLGMpe3ZhciBkPTM8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpudWxsO3JldHVybnskJHR5cGVvZjp3YSxrZXk6bnVsbD09ZD9udWxsOlwiXCIrZCxjaGlsZHJlbjphLGNvbnRhaW5lckluZm86YixpbXBsZW1lbnRhdGlvbjpjfX1cbmZ1bmN0aW9uIGRsKGEpe2lmKCFhKXJldHVybiBWZjthPWEuX3JlYWN0SW50ZXJuYWxzO2E6e2lmKFZiKGEpIT09YXx8MSE9PWEudGFnKXRocm93IEVycm9yKHAoMTcwKSk7dmFyIGI9YTtkb3tzd2l0Y2goYi50YWcpe2Nhc2UgMzpiPWIuc3RhdGVOb2RlLmNvbnRleHQ7YnJlYWsgYTtjYXNlIDE6aWYoWmYoYi50eXBlKSl7Yj1iLnN0YXRlTm9kZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dDticmVhayBhfX1iPWIucmV0dXJufXdoaWxlKG51bGwhPT1iKTt0aHJvdyBFcnJvcihwKDE3MSkpO31pZigxPT09YS50YWcpe3ZhciBjPWEudHlwZTtpZihaZihjKSlyZXR1cm4gYmcoYSxjLGIpfXJldHVybiBifVxuZnVuY3Rpb24gZWwoYSxiLGMsZCxlLGYsZyxoLGspe2E9YmwoYyxkLCEwLGEsZSxmLGcsaCxrKTthLmNvbnRleHQ9ZGwobnVsbCk7Yz1hLmN1cnJlbnQ7ZD1SKCk7ZT15aShjKTtmPW1oKGQsZSk7Zi5jYWxsYmFjaz12b2lkIDAhPT1iJiZudWxsIT09Yj9iOm51bGw7bmgoYyxmLGUpO2EuY3VycmVudC5sYW5lcz1lO0FjKGEsZSxkKTtEayhhLGQpO3JldHVybiBhfWZ1bmN0aW9uIGZsKGEsYixjLGQpe3ZhciBlPWIuY3VycmVudCxmPVIoKSxnPXlpKGUpO2M9ZGwoYyk7bnVsbD09PWIuY29udGV4dD9iLmNvbnRleHQ9YzpiLnBlbmRpbmdDb250ZXh0PWM7Yj1taChmLGcpO2IucGF5bG9hZD17ZWxlbWVudDphfTtkPXZvaWQgMD09PWQ/bnVsbDpkO251bGwhPT1kJiYoYi5jYWxsYmFjaz1kKTthPW5oKGUsYixnKTtudWxsIT09YSYmKGdpKGEsZSxnLGYpLG9oKGEsZSxnKSk7cmV0dXJuIGd9XG5mdW5jdGlvbiBnbChhKXthPWEuY3VycmVudDtpZighYS5jaGlsZClyZXR1cm4gbnVsbDtzd2l0Y2goYS5jaGlsZC50YWcpe2Nhc2UgNTpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGU7ZGVmYXVsdDpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGV9fWZ1bmN0aW9uIGhsKGEsYil7YT1hLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWEmJm51bGwhPT1hLmRlaHlkcmF0ZWQpe3ZhciBjPWEucmV0cnlMYW5lO2EucmV0cnlMYW5lPTAhPT1jJiZjPGI/YzpifX1mdW5jdGlvbiBpbChhLGIpe2hsKGEsYik7KGE9YS5hbHRlcm5hdGUpJiZobChhLGIpfWZ1bmN0aW9uIGpsKCl7cmV0dXJuIG51bGx9dmFyIGtsPVwiZnVuY3Rpb25cIj09PXR5cGVvZiByZXBvcnRFcnJvcj9yZXBvcnRFcnJvcjpmdW5jdGlvbihhKXtjb25zb2xlLmVycm9yKGEpfTtmdW5jdGlvbiBsbChhKXt0aGlzLl9pbnRlcm5hbFJvb3Q9YX1cbm1sLnByb3RvdHlwZS5yZW5kZXI9bGwucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbihhKXt2YXIgYj10aGlzLl9pbnRlcm5hbFJvb3Q7aWYobnVsbD09PWIpdGhyb3cgRXJyb3IocCg0MDkpKTtmbChhLGIsbnVsbCxudWxsKX07bWwucHJvdG90eXBlLnVubW91bnQ9bGwucHJvdG90eXBlLnVubW91bnQ9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLl9pbnRlcm5hbFJvb3Q7aWYobnVsbCE9PWEpe3RoaXMuX2ludGVybmFsUm9vdD1udWxsO3ZhciBiPWEuY29udGFpbmVySW5mbztSayhmdW5jdGlvbigpe2ZsKG51bGwsYSxudWxsLG51bGwpfSk7Ylt1Zl09bnVsbH19O2Z1bmN0aW9uIG1sKGEpe3RoaXMuX2ludGVybmFsUm9vdD1hfVxubWwucHJvdG90eXBlLnVuc3RhYmxlX3NjaGVkdWxlSHlkcmF0aW9uPWZ1bmN0aW9uKGEpe2lmKGEpe3ZhciBiPUhjKCk7YT17YmxvY2tlZE9uOm51bGwsdGFyZ2V0OmEscHJpb3JpdHk6Yn07Zm9yKHZhciBjPTA7YzxRYy5sZW5ndGgmJjAhPT1iJiZiPFFjW2NdLnByaW9yaXR5O2MrKyk7UWMuc3BsaWNlKGMsMCxhKTswPT09YyYmVmMoYSl9fTtmdW5jdGlvbiBubChhKXtyZXR1cm4hKCFhfHwxIT09YS5ub2RlVHlwZSYmOSE9PWEubm9kZVR5cGUmJjExIT09YS5ub2RlVHlwZSl9ZnVuY3Rpb24gb2woYSl7cmV0dXJuISghYXx8MSE9PWEubm9kZVR5cGUmJjkhPT1hLm5vZGVUeXBlJiYxMSE9PWEubm9kZVR5cGUmJig4IT09YS5ub2RlVHlwZXx8XCIgcmVhY3QtbW91bnQtcG9pbnQtdW5zdGFibGUgXCIhPT1hLm5vZGVWYWx1ZSkpfWZ1bmN0aW9uIHBsKCl7fVxuZnVuY3Rpb24gcWwoYSxiLGMsZCxlKXtpZihlKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7dmFyIGY9ZDtkPWZ1bmN0aW9uKCl7dmFyIGE9Z2woZyk7Zi5jYWxsKGEpfX12YXIgZz1lbChiLGQsYSwwLG51bGwsITEsITEsXCJcIixwbCk7YS5fcmVhY3RSb290Q29udGFpbmVyPWc7YVt1Zl09Zy5jdXJyZW50O3NmKDg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphKTtSaygpO3JldHVybiBnfWZvcig7ZT1hLmxhc3RDaGlsZDspYS5yZW1vdmVDaGlsZChlKTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7dmFyIGg9ZDtkPWZ1bmN0aW9uKCl7dmFyIGE9Z2woayk7aC5jYWxsKGEpfX12YXIgaz1ibChhLDAsITEsbnVsbCxudWxsLCExLCExLFwiXCIscGwpO2EuX3JlYWN0Um9vdENvbnRhaW5lcj1rO2FbdWZdPWsuY3VycmVudDtzZig4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YSk7UmsoZnVuY3Rpb24oKXtmbChiLGssYyxkKX0pO3JldHVybiBrfVxuZnVuY3Rpb24gcmwoYSxiLGMsZCxlKXt2YXIgZj1jLl9yZWFjdFJvb3RDb250YWluZXI7aWYoZil7dmFyIGc9ZjtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGg9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9Z2woZyk7aC5jYWxsKGEpfX1mbChiLGcsYSxlKX1lbHNlIGc9cWwoYyxiLGEsZSxkKTtyZXR1cm4gZ2woZyl9RWM9ZnVuY3Rpb24oYSl7c3dpdGNoKGEudGFnKXtjYXNlIDM6dmFyIGI9YS5zdGF0ZU5vZGU7aWYoYi5jdXJyZW50Lm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkKXt2YXIgYz10YyhiLnBlbmRpbmdMYW5lcyk7MCE9PWMmJihDYyhiLGN8MSksRGsoYixCKCkpLDA9PT0oSyY2KSYmKEdqPUIoKSs1MDAsamcoKSkpfWJyZWFrO2Nhc2UgMTM6UmsoZnVuY3Rpb24oKXt2YXIgYj1paChhLDEpO2lmKG51bGwhPT1iKXt2YXIgYz1SKCk7Z2koYixhLDEsYyl9fSksaWwoYSwxKX19O1xuRmM9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9aWgoYSwxMzQyMTc3MjgpO2lmKG51bGwhPT1iKXt2YXIgYz1SKCk7Z2koYixhLDEzNDIxNzcyOCxjKX1pbChhLDEzNDIxNzcyOCl9fTtHYz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj15aShhKSxjPWloKGEsYik7aWYobnVsbCE9PWMpe3ZhciBkPVIoKTtnaShjLGEsYixkKX1pbChhLGIpfX07SGM9ZnVuY3Rpb24oKXtyZXR1cm4gQ307SWM9ZnVuY3Rpb24oYSxiKXt2YXIgYz1DO3RyeXtyZXR1cm4gQz1hLGIoKX1maW5hbGx5e0M9Y319O1xueWI9ZnVuY3Rpb24oYSxiLGMpe3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjpiYihhLGMpO2I9Yy5uYW1lO2lmKFwicmFkaW9cIj09PWMudHlwZSYmbnVsbCE9Yil7Zm9yKGM9YTtjLnBhcmVudE5vZGU7KWM9Yy5wYXJlbnROb2RlO2M9Yy5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXRbbmFtZT1cIitKU09OLnN0cmluZ2lmeShcIlwiK2IpKyddW3R5cGU9XCJyYWRpb1wiXScpO2ZvcihiPTA7YjxjLmxlbmd0aDtiKyspe3ZhciBkPWNbYl07aWYoZCE9PWEmJmQuZm9ybT09PWEuZm9ybSl7dmFyIGU9RGIoZCk7aWYoIWUpdGhyb3cgRXJyb3IocCg5MCkpO1dhKGQpO2JiKGQsZSl9fX1icmVhaztjYXNlIFwidGV4dGFyZWFcIjppYihhLGMpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpiPWMudmFsdWUsbnVsbCE9YiYmZmIoYSwhIWMubXVsdGlwbGUsYiwhMSl9fTtHYj1RaztIYj1SaztcbnZhciBzbD17dXNpbmdDbGllbnRFbnRyeVBvaW50OiExLEV2ZW50czpbQ2IsdWUsRGIsRWIsRmIsUWtdfSx0bD17ZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6V2MsYnVuZGxlVHlwZTowLHZlcnNpb246XCIxOC4zLjFcIixyZW5kZXJlclBhY2thZ2VOYW1lOlwicmVhY3QtZG9tXCJ9O1xudmFyIHVsPXtidW5kbGVUeXBlOnRsLmJ1bmRsZVR5cGUsdmVyc2lvbjp0bC52ZXJzaW9uLHJlbmRlcmVyUGFja2FnZU5hbWU6dGwucmVuZGVyZXJQYWNrYWdlTmFtZSxyZW5kZXJlckNvbmZpZzp0bC5yZW5kZXJlckNvbmZpZyxvdmVycmlkZUhvb2tTdGF0ZTpudWxsLG92ZXJyaWRlSG9va1N0YXRlRGVsZXRlUGF0aDpudWxsLG92ZXJyaWRlSG9va1N0YXRlUmVuYW1lUGF0aDpudWxsLG92ZXJyaWRlUHJvcHM6bnVsbCxvdmVycmlkZVByb3BzRGVsZXRlUGF0aDpudWxsLG92ZXJyaWRlUHJvcHNSZW5hbWVQYXRoOm51bGwsc2V0RXJyb3JIYW5kbGVyOm51bGwsc2V0U3VzcGVuc2VIYW5kbGVyOm51bGwsc2NoZWR1bGVVcGRhdGU6bnVsbCxjdXJyZW50RGlzcGF0Y2hlclJlZjp1YS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLGZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyOmZ1bmN0aW9uKGEpe2E9WmIoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOnRsLmZpbmRGaWJlckJ5SG9zdEluc3RhbmNlfHxcbmpsLGZpbmRIb3N0SW5zdGFuY2VzRm9yUmVmcmVzaDpudWxsLHNjaGVkdWxlUmVmcmVzaDpudWxsLHNjaGVkdWxlUm9vdDpudWxsLHNldFJlZnJlc2hIYW5kbGVyOm51bGwsZ2V0Q3VycmVudEZpYmVyOm51bGwscmVjb25jaWxlclZlcnNpb246XCIxOC4zLjEtbmV4dC1mMTMzOGY4MDgwLTIwMjQwNDI2XCJ9O2lmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fKXt2YXIgdmw9X19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fO2lmKCF2bC5pc0Rpc2FibGVkJiZ2bC5zdXBwb3J0c0ZpYmVyKXRyeXtrYz12bC5pbmplY3QodWwpLGxjPXZsfWNhdGNoKGEpe319ZXhwb3J0cy5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRD1zbDtcbmV4cG9ydHMuY3JlYXRlUG9ydGFsPWZ1bmN0aW9uKGEsYil7dmFyIGM9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOm51bGw7aWYoIW5sKGIpKXRocm93IEVycm9yKHAoMjAwKSk7cmV0dXJuIGNsKGEsYixudWxsLGMpfTtleHBvcnRzLmNyZWF0ZVJvb3Q9ZnVuY3Rpb24oYSxiKXtpZighbmwoYSkpdGhyb3cgRXJyb3IocCgyOTkpKTt2YXIgYz0hMSxkPVwiXCIsZT1rbDtudWxsIT09YiYmdm9pZCAwIT09YiYmKCEwPT09Yi51bnN0YWJsZV9zdHJpY3RNb2RlJiYoYz0hMCksdm9pZCAwIT09Yi5pZGVudGlmaWVyUHJlZml4JiYoZD1iLmlkZW50aWZpZXJQcmVmaXgpLHZvaWQgMCE9PWIub25SZWNvdmVyYWJsZUVycm9yJiYoZT1iLm9uUmVjb3ZlcmFibGVFcnJvcikpO2I9YmwoYSwxLCExLG51bGwsbnVsbCxjLCExLGQsZSk7YVt1Zl09Yi5jdXJyZW50O3NmKDg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphKTtyZXR1cm4gbmV3IGxsKGIpfTtcbmV4cG9ydHMuZmluZERPTU5vZGU9ZnVuY3Rpb24oYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZigxPT09YS5ub2RlVHlwZSlyZXR1cm4gYTt2YXIgYj1hLl9yZWFjdEludGVybmFscztpZih2b2lkIDA9PT1iKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5yZW5kZXIpdGhyb3cgRXJyb3IocCgxODgpKTthPU9iamVjdC5rZXlzKGEpLmpvaW4oXCIsXCIpO3Rocm93IEVycm9yKHAoMjY4LGEpKTt9YT1aYihiKTthPW51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGU7cmV0dXJuIGF9O2V4cG9ydHMuZmx1c2hTeW5jPWZ1bmN0aW9uKGEpe3JldHVybiBSayhhKX07ZXhwb3J0cy5oeWRyYXRlPWZ1bmN0aW9uKGEsYixjKXtpZighb2woYikpdGhyb3cgRXJyb3IocCgyMDApKTtyZXR1cm4gcmwobnVsbCxhLGIsITAsYyl9O1xuZXhwb3J0cy5oeWRyYXRlUm9vdD1mdW5jdGlvbihhLGIsYyl7aWYoIW5sKGEpKXRocm93IEVycm9yKHAoNDA1KSk7dmFyIGQ9bnVsbCE9YyYmYy5oeWRyYXRlZFNvdXJjZXN8fG51bGwsZT0hMSxmPVwiXCIsZz1rbDtudWxsIT09YyYmdm9pZCAwIT09YyYmKCEwPT09Yy51bnN0YWJsZV9zdHJpY3RNb2RlJiYoZT0hMCksdm9pZCAwIT09Yy5pZGVudGlmaWVyUHJlZml4JiYoZj1jLmlkZW50aWZpZXJQcmVmaXgpLHZvaWQgMCE9PWMub25SZWNvdmVyYWJsZUVycm9yJiYoZz1jLm9uUmVjb3ZlcmFibGVFcnJvcikpO2I9ZWwoYixudWxsLGEsMSxudWxsIT1jP2M6bnVsbCxlLCExLGYsZyk7YVt1Zl09Yi5jdXJyZW50O3NmKGEpO2lmKGQpZm9yKGE9MDthPGQubGVuZ3RoO2ErKyljPWRbYV0sZT1jLl9nZXRWZXJzaW9uLGU9ZShjLl9zb3VyY2UpLG51bGw9PWIubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YT9iLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE9W2MsZV06Yi5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhLnB1c2goYyxcbmUpO3JldHVybiBuZXcgbWwoYil9O2V4cG9ydHMucmVuZGVyPWZ1bmN0aW9uKGEsYixjKXtpZighb2woYikpdGhyb3cgRXJyb3IocCgyMDApKTtyZXR1cm4gcmwobnVsbCxhLGIsITEsYyl9O2V4cG9ydHMudW5tb3VudENvbXBvbmVudEF0Tm9kZT1mdW5jdGlvbihhKXtpZighb2woYSkpdGhyb3cgRXJyb3IocCg0MCkpO3JldHVybiBhLl9yZWFjdFJvb3RDb250YWluZXI/KFJrKGZ1bmN0aW9uKCl7cmwobnVsbCxudWxsLGEsITEsZnVuY3Rpb24oKXthLl9yZWFjdFJvb3RDb250YWluZXI9bnVsbDthW3VmXT1udWxsfSl9KSwhMCk6ITF9O2V4cG9ydHMudW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXM9UWs7XG5leHBvcnRzLnVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyPWZ1bmN0aW9uKGEsYixjLGQpe2lmKCFvbChjKSl0aHJvdyBFcnJvcihwKDIwMCkpO2lmKG51bGw9PWF8fHZvaWQgMD09PWEuX3JlYWN0SW50ZXJuYWxzKXRocm93IEVycm9yKHAoMzgpKTtyZXR1cm4gcmwoYSxiLGMsITEsZCl9O2V4cG9ydHMudmVyc2lvbj1cIjE4LjMuMS1uZXh0LWYxMzM4ZjgwODAtMjAyNDA0MjZcIjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIG0gPSByZXF1aXJlKCdyZWFjdC1kb20nKTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIGV4cG9ydHMuY3JlYXRlUm9vdCA9IG0uY3JlYXRlUm9vdDtcbiAgZXhwb3J0cy5oeWRyYXRlUm9vdCA9IG0uaHlkcmF0ZVJvb3Q7XG59IGVsc2Uge1xuICB2YXIgaSA9IG0uX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ7XG4gIGV4cG9ydHMuY3JlYXRlUm9vdCA9IGZ1bmN0aW9uKGMsIG8pIHtcbiAgICBpLnVzaW5nQ2xpZW50RW50cnlQb2ludCA9IHRydWU7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBtLmNyZWF0ZVJvb3QoYywgbyk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGkudXNpbmdDbGllbnRFbnRyeVBvaW50ID0gZmFsc2U7XG4gICAgfVxuICB9O1xuICBleHBvcnRzLmh5ZHJhdGVSb290ID0gZnVuY3Rpb24oYywgaCwgbykge1xuICAgIGkudXNpbmdDbGllbnRFbnRyeVBvaW50ID0gdHJ1ZTtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIG0uaHlkcmF0ZVJvb3QoYywgaCwgbyk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGkudXNpbmdDbGllbnRFbnRyeVBvaW50ID0gZmFsc2U7XG4gICAgfVxuICB9O1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBjaGVja0RDRSgpIHtcbiAgLyogZ2xvYmFsIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyAqL1xuICBpZiAoXG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFICE9PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIFRoaXMgYnJhbmNoIGlzIHVucmVhY2hhYmxlIGJlY2F1c2UgdGhpcyBmdW5jdGlvbiBpcyBvbmx5IGNhbGxlZFxuICAgIC8vIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgY29uZGl0aW9uIGlzIHRydWUgb25seSBpbiBkZXZlbG9wbWVudC5cbiAgICAvLyBUaGVyZWZvcmUgaWYgdGhlIGJyYW5jaCBpcyBzdGlsbCBoZXJlLCBkZWFkIGNvZGUgZWxpbWluYXRpb24gd2Fzbid0XG4gICAgLy8gcHJvcGVybHkgYXBwbGllZC5cbiAgICAvLyBEb24ndCBjaGFuZ2UgdGhlIG1lc3NhZ2UuIFJlYWN0IERldlRvb2xzIHJlbGllcyBvbiBpdC4gQWxzbyBtYWtlIHN1cmVcbiAgICAvLyB0aGlzIG1lc3NhZ2UgZG9lc24ndCBvY2N1ciBlbHNld2hlcmUgaW4gdGhpcyBmdW5jdGlvbiwgb3IgaXQgd2lsbCBjYXVzZVxuICAgIC8vIGEgZmFsc2UgcG9zaXRpdmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKCdeX14nKTtcbiAgfVxuICB0cnkge1xuICAgIC8vIFZlcmlmeSB0aGF0IHRoZSBjb2RlIGFib3ZlIGhhcyBiZWVuIGRlYWQgY29kZSBlbGltaW5hdGVkIChEQ0UnZCkuXG4gICAgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFKGNoZWNrRENFKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gRGV2VG9vbHMgc2hvdWxkbid0IGNyYXNoIFJlYWN0LCBubyBtYXR0ZXIgd2hhdC5cbiAgICAvLyBXZSBzaG91bGQgc3RpbGwgcmVwb3J0IGluIGNhc2Ugd2UgYnJlYWsgdGhpcyBjb2RlLlxuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgfVxufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAvLyBEQ0UgY2hlY2sgc2hvdWxkIGhhcHBlbiBiZWZvcmUgUmVhY3RET00gYnVuZGxlIGV4ZWN1dGVzIHNvIHRoYXRcbiAgLy8gRGV2VG9vbHMgY2FuIHJlcG9ydCBiYWQgbWluaWZpY2F0aW9uIGR1cmluZyBpbmplY3Rpb24uXG4gIGNoZWNrRENFKCk7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqXG4gKiBAbGljZW5zZSBSZWFjdFxuICogcmVhY3QucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO3ZhciBsPVN5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpLG49U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKSxwPVN5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKSxxPVN5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKSxyPVN5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKSx0PVN5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKSx1PVN5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpLHY9U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpLHc9U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpLHg9U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIikseT1TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKSx6PVN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBBKGEpe2lmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT16JiZhW3pdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9XG52YXIgQj17aXNNb3VudGVkOmZ1bmN0aW9uKCl7cmV0dXJuITF9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKCl7fX0sQz1PYmplY3QuYXNzaWduLEQ9e307ZnVuY3Rpb24gRShhLGIsZSl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1EO3RoaXMudXBkYXRlcj1lfHxCfUUucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ9e307XG5FLnByb3RvdHlwZS5zZXRTdGF0ZT1mdW5jdGlvbihhLGIpe2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJm51bGwhPWEpdGhyb3cgRXJyb3IoXCJzZXRTdGF0ZSguLi4pOiB0YWtlcyBhbiBvYmplY3Qgb2Ygc3RhdGUgdmFyaWFibGVzIHRvIHVwZGF0ZSBvciBhIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYW4gb2JqZWN0IG9mIHN0YXRlIHZhcmlhYmxlcy5cIik7dGhpcy51cGRhdGVyLmVucXVldWVTZXRTdGF0ZSh0aGlzLGEsYixcInNldFN0YXRlXCIpfTtFLnByb3RvdHlwZS5mb3JjZVVwZGF0ZT1mdW5jdGlvbihhKXt0aGlzLnVwZGF0ZXIuZW5xdWV1ZUZvcmNlVXBkYXRlKHRoaXMsYSxcImZvcmNlVXBkYXRlXCIpfTtmdW5jdGlvbiBGKCl7fUYucHJvdG90eXBlPUUucHJvdG90eXBlO2Z1bmN0aW9uIEcoYSxiLGUpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9RDt0aGlzLnVwZGF0ZXI9ZXx8Qn12YXIgSD1HLnByb3RvdHlwZT1uZXcgRjtcbkguY29uc3RydWN0b3I9RztDKEgsRS5wcm90b3R5cGUpO0guaXNQdXJlUmVhY3RDb21wb25lbnQ9ITA7dmFyIEk9QXJyYXkuaXNBcnJheSxKPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksSz17Y3VycmVudDpudWxsfSxMPXtrZXk6ITAscmVmOiEwLF9fc2VsZjohMCxfX3NvdXJjZTohMH07XG5mdW5jdGlvbiBNKGEsYixlKXt2YXIgZCxjPXt9LGs9bnVsbCxoPW51bGw7aWYobnVsbCE9Yilmb3IoZCBpbiB2b2lkIDAhPT1iLnJlZiYmKGg9Yi5yZWYpLHZvaWQgMCE9PWIua2V5JiYoaz1cIlwiK2Iua2V5KSxiKUouY2FsbChiLGQpJiYhTC5oYXNPd25Qcm9wZXJ0eShkKSYmKGNbZF09YltkXSk7dmFyIGc9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1nKWMuY2hpbGRyZW49ZTtlbHNlIGlmKDE8Zyl7Zm9yKHZhciBmPUFycmF5KGcpLG09MDttPGc7bSsrKWZbbV09YXJndW1lbnRzW20rMl07Yy5jaGlsZHJlbj1mfWlmKGEmJmEuZGVmYXVsdFByb3BzKWZvcihkIGluIGc9YS5kZWZhdWx0UHJvcHMsZyl2b2lkIDA9PT1jW2RdJiYoY1tkXT1nW2RdKTtyZXR1cm57JCR0eXBlb2Y6bCx0eXBlOmEsa2V5OmsscmVmOmgscHJvcHM6Yyxfb3duZXI6Sy5jdXJyZW50fX1cbmZ1bmN0aW9uIE4oYSxiKXtyZXR1cm57JCR0eXBlb2Y6bCx0eXBlOmEudHlwZSxrZXk6YixyZWY6YS5yZWYscHJvcHM6YS5wcm9wcyxfb3duZXI6YS5fb3duZXJ9fWZ1bmN0aW9uIE8oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PWx9ZnVuY3Rpb24gZXNjYXBlKGEpe3ZhciBiPXtcIj1cIjpcIj0wXCIsXCI6XCI6XCI9MlwifTtyZXR1cm5cIiRcIithLnJlcGxhY2UoL1s9Ol0vZyxmdW5jdGlvbihhKXtyZXR1cm4gYlthXX0pfXZhciBQPS9cXC8rL2c7ZnVuY3Rpb24gUShhLGIpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJm51bGwhPWEua2V5P2VzY2FwZShcIlwiK2Eua2V5KTpiLnRvU3RyaW5nKDM2KX1cbmZ1bmN0aW9uIFIoYSxiLGUsZCxjKXt2YXIgaz10eXBlb2YgYTtpZihcInVuZGVmaW5lZFwiPT09a3x8XCJib29sZWFuXCI9PT1rKWE9bnVsbDt2YXIgaD0hMTtpZihudWxsPT09YSloPSEwO2Vsc2Ugc3dpdGNoKGspe2Nhc2UgXCJzdHJpbmdcIjpjYXNlIFwibnVtYmVyXCI6aD0hMDticmVhaztjYXNlIFwib2JqZWN0XCI6c3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgbDpjYXNlIG46aD0hMH19aWYoaClyZXR1cm4gaD1hLGM9YyhoKSxhPVwiXCI9PT1kP1wiLlwiK1EoaCwwKTpkLEkoYyk/KGU9XCJcIixudWxsIT1hJiYoZT1hLnJlcGxhY2UoUCxcIiQmL1wiKStcIi9cIiksUihjLGIsZSxcIlwiLGZ1bmN0aW9uKGEpe3JldHVybiBhfSkpOm51bGwhPWMmJihPKGMpJiYoYz1OKGMsZSsoIWMua2V5fHxoJiZoLmtleT09PWMua2V5P1wiXCI6KFwiXCIrYy5rZXkpLnJlcGxhY2UoUCxcIiQmL1wiKStcIi9cIikrYSkpLGIucHVzaChjKSksMTtoPTA7ZD1cIlwiPT09ZD9cIi5cIjpkK1wiOlwiO2lmKEkoYSkpZm9yKHZhciBnPTA7ZzxhLmxlbmd0aDtnKyspe2s9XG5hW2ddO3ZhciBmPWQrUShrLGcpO2grPVIoayxiLGUsZixjKX1lbHNlIGlmKGY9QShhKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZilmb3IoYT1mLmNhbGwoYSksZz0wOyEoaz1hLm5leHQoKSkuZG9uZTspaz1rLnZhbHVlLGY9ZCtRKGssZysrKSxoKz1SKGssYixlLGYsYyk7ZWxzZSBpZihcIm9iamVjdFwiPT09ayl0aHJvdyBiPVN0cmluZyhhKSxFcnJvcihcIk9iamVjdHMgYXJlIG5vdCB2YWxpZCBhcyBhIFJlYWN0IGNoaWxkIChmb3VuZDogXCIrKFwiW29iamVjdCBPYmplY3RdXCI9PT1iP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYSkuam9pbihcIiwgXCIpK1wifVwiOmIpK1wiKS4gSWYgeW91IG1lYW50IHRvIHJlbmRlciBhIGNvbGxlY3Rpb24gb2YgY2hpbGRyZW4sIHVzZSBhbiBhcnJheSBpbnN0ZWFkLlwiKTtyZXR1cm4gaH1cbmZ1bmN0aW9uIFMoYSxiLGUpe2lmKG51bGw9PWEpcmV0dXJuIGE7dmFyIGQ9W10sYz0wO1IoYSxkLFwiXCIsXCJcIixmdW5jdGlvbihhKXtyZXR1cm4gYi5jYWxsKGUsYSxjKyspfSk7cmV0dXJuIGR9ZnVuY3Rpb24gVChhKXtpZigtMT09PWEuX3N0YXR1cyl7dmFyIGI9YS5fcmVzdWx0O2I9YigpO2IudGhlbihmdW5jdGlvbihiKXtpZigwPT09YS5fc3RhdHVzfHwtMT09PWEuX3N0YXR1cylhLl9zdGF0dXM9MSxhLl9yZXN1bHQ9Yn0sZnVuY3Rpb24oYil7aWYoMD09PWEuX3N0YXR1c3x8LTE9PT1hLl9zdGF0dXMpYS5fc3RhdHVzPTIsYS5fcmVzdWx0PWJ9KTstMT09PWEuX3N0YXR1cyYmKGEuX3N0YXR1cz0wLGEuX3Jlc3VsdD1iKX1pZigxPT09YS5fc3RhdHVzKXJldHVybiBhLl9yZXN1bHQuZGVmYXVsdDt0aHJvdyBhLl9yZXN1bHQ7fVxudmFyIFU9e2N1cnJlbnQ6bnVsbH0sVj17dHJhbnNpdGlvbjpudWxsfSxXPXtSZWFjdEN1cnJlbnREaXNwYXRjaGVyOlUsUmVhY3RDdXJyZW50QmF0Y2hDb25maWc6VixSZWFjdEN1cnJlbnRPd25lcjpLfTtmdW5jdGlvbiBYKCl7dGhyb3cgRXJyb3IoXCJhY3QoLi4uKSBpcyBub3Qgc3VwcG9ydGVkIGluIHByb2R1Y3Rpb24gYnVpbGRzIG9mIFJlYWN0LlwiKTt9XG5leHBvcnRzLkNoaWxkcmVuPXttYXA6Uyxmb3JFYWNoOmZ1bmN0aW9uKGEsYixlKXtTKGEsZnVuY3Rpb24oKXtiLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0sZSl9LGNvdW50OmZ1bmN0aW9uKGEpe3ZhciBiPTA7UyhhLGZ1bmN0aW9uKCl7YisrfSk7cmV0dXJuIGJ9LHRvQXJyYXk6ZnVuY3Rpb24oYSl7cmV0dXJuIFMoYSxmdW5jdGlvbihhKXtyZXR1cm4gYX0pfHxbXX0sb25seTpmdW5jdGlvbihhKXtpZighTyhhKSl0aHJvdyBFcnJvcihcIlJlYWN0LkNoaWxkcmVuLm9ubHkgZXhwZWN0ZWQgdG8gcmVjZWl2ZSBhIHNpbmdsZSBSZWFjdCBlbGVtZW50IGNoaWxkLlwiKTtyZXR1cm4gYX19O2V4cG9ydHMuQ29tcG9uZW50PUU7ZXhwb3J0cy5GcmFnbWVudD1wO2V4cG9ydHMuUHJvZmlsZXI9cjtleHBvcnRzLlB1cmVDb21wb25lbnQ9RztleHBvcnRzLlN0cmljdE1vZGU9cTtleHBvcnRzLlN1c3BlbnNlPXc7XG5leHBvcnRzLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEPVc7ZXhwb3J0cy5hY3Q9WDtcbmV4cG9ydHMuY2xvbmVFbGVtZW50PWZ1bmN0aW9uKGEsYixlKXtpZihudWxsPT09YXx8dm9pZCAwPT09YSl0aHJvdyBFcnJvcihcIlJlYWN0LmNsb25lRWxlbWVudCguLi4pOiBUaGUgYXJndW1lbnQgbXVzdCBiZSBhIFJlYWN0IGVsZW1lbnQsIGJ1dCB5b3UgcGFzc2VkIFwiK2ErXCIuXCIpO3ZhciBkPUMoe30sYS5wcm9wcyksYz1hLmtleSxrPWEucmVmLGg9YS5fb3duZXI7aWYobnVsbCE9Yil7dm9pZCAwIT09Yi5yZWYmJihrPWIucmVmLGg9Sy5jdXJyZW50KTt2b2lkIDAhPT1iLmtleSYmKGM9XCJcIitiLmtleSk7aWYoYS50eXBlJiZhLnR5cGUuZGVmYXVsdFByb3BzKXZhciBnPWEudHlwZS5kZWZhdWx0UHJvcHM7Zm9yKGYgaW4gYilKLmNhbGwoYixmKSYmIUwuaGFzT3duUHJvcGVydHkoZikmJihkW2ZdPXZvaWQgMD09PWJbZl0mJnZvaWQgMCE9PWc/Z1tmXTpiW2ZdKX12YXIgZj1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWYpZC5jaGlsZHJlbj1lO2Vsc2UgaWYoMTxmKXtnPUFycmF5KGYpO1xuZm9yKHZhciBtPTA7bTxmO20rKylnW21dPWFyZ3VtZW50c1ttKzJdO2QuY2hpbGRyZW49Z31yZXR1cm57JCR0eXBlb2Y6bCx0eXBlOmEudHlwZSxrZXk6YyxyZWY6ayxwcm9wczpkLF9vd25lcjpofX07ZXhwb3J0cy5jcmVhdGVDb250ZXh0PWZ1bmN0aW9uKGEpe2E9eyQkdHlwZW9mOnUsX2N1cnJlbnRWYWx1ZTphLF9jdXJyZW50VmFsdWUyOmEsX3RocmVhZENvdW50OjAsUHJvdmlkZXI6bnVsbCxDb25zdW1lcjpudWxsLF9kZWZhdWx0VmFsdWU6bnVsbCxfZ2xvYmFsTmFtZTpudWxsfTthLlByb3ZpZGVyPXskJHR5cGVvZjp0LF9jb250ZXh0OmF9O3JldHVybiBhLkNvbnN1bWVyPWF9O2V4cG9ydHMuY3JlYXRlRWxlbWVudD1NO2V4cG9ydHMuY3JlYXRlRmFjdG9yeT1mdW5jdGlvbihhKXt2YXIgYj1NLmJpbmQobnVsbCxhKTtiLnR5cGU9YTtyZXR1cm4gYn07ZXhwb3J0cy5jcmVhdGVSZWY9ZnVuY3Rpb24oKXtyZXR1cm57Y3VycmVudDpudWxsfX07XG5leHBvcnRzLmZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOnYscmVuZGVyOmF9fTtleHBvcnRzLmlzVmFsaWRFbGVtZW50PU87ZXhwb3J0cy5sYXp5PWZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjp5LF9wYXlsb2FkOntfc3RhdHVzOi0xLF9yZXN1bHQ6YX0sX2luaXQ6VH19O2V4cG9ydHMubWVtbz1mdW5jdGlvbihhLGIpe3JldHVybnskJHR5cGVvZjp4LHR5cGU6YSxjb21wYXJlOnZvaWQgMD09PWI/bnVsbDpifX07ZXhwb3J0cy5zdGFydFRyYW5zaXRpb249ZnVuY3Rpb24oYSl7dmFyIGI9Vi50cmFuc2l0aW9uO1YudHJhbnNpdGlvbj17fTt0cnl7YSgpfWZpbmFsbHl7Vi50cmFuc2l0aW9uPWJ9fTtleHBvcnRzLnVuc3RhYmxlX2FjdD1YO2V4cG9ydHMudXNlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVS5jdXJyZW50LnVzZUNhbGxiYWNrKGEsYil9O2V4cG9ydHMudXNlQ29udGV4dD1mdW5jdGlvbihhKXtyZXR1cm4gVS5jdXJyZW50LnVzZUNvbnRleHQoYSl9O1xuZXhwb3J0cy51c2VEZWJ1Z1ZhbHVlPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVzZURlZmVycmVkVmFsdWU9ZnVuY3Rpb24oYSl7cmV0dXJuIFUuY3VycmVudC51c2VEZWZlcnJlZFZhbHVlKGEpfTtleHBvcnRzLnVzZUVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBVLmN1cnJlbnQudXNlRWZmZWN0KGEsYil9O2V4cG9ydHMudXNlSWQ9ZnVuY3Rpb24oKXtyZXR1cm4gVS5jdXJyZW50LnVzZUlkKCl9O2V4cG9ydHMudXNlSW1wZXJhdGl2ZUhhbmRsZT1mdW5jdGlvbihhLGIsZSl7cmV0dXJuIFUuY3VycmVudC51c2VJbXBlcmF0aXZlSGFuZGxlKGEsYixlKX07ZXhwb3J0cy51c2VJbnNlcnRpb25FZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVS5jdXJyZW50LnVzZUluc2VydGlvbkVmZmVjdChhLGIpfTtleHBvcnRzLnVzZUxheW91dEVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBVLmN1cnJlbnQudXNlTGF5b3V0RWZmZWN0KGEsYil9O1xuZXhwb3J0cy51c2VNZW1vPWZ1bmN0aW9uKGEsYil7cmV0dXJuIFUuY3VycmVudC51c2VNZW1vKGEsYil9O2V4cG9ydHMudXNlUmVkdWNlcj1mdW5jdGlvbihhLGIsZSl7cmV0dXJuIFUuY3VycmVudC51c2VSZWR1Y2VyKGEsYixlKX07ZXhwb3J0cy51c2VSZWY9ZnVuY3Rpb24oYSl7cmV0dXJuIFUuY3VycmVudC51c2VSZWYoYSl9O2V4cG9ydHMudXNlU3RhdGU9ZnVuY3Rpb24oYSl7cmV0dXJuIFUuY3VycmVudC51c2VTdGF0ZShhKX07ZXhwb3J0cy51c2VTeW5jRXh0ZXJuYWxTdG9yZT1mdW5jdGlvbihhLGIsZSl7cmV0dXJuIFUuY3VycmVudC51c2VTeW5jRXh0ZXJuYWxTdG9yZShhLGIsZSl9O2V4cG9ydHMudXNlVHJhbnNpdGlvbj1mdW5jdGlvbigpe3JldHVybiBVLmN1cnJlbnQudXNlVHJhbnNpdGlvbigpfTtleHBvcnRzLnZlcnNpb249XCIxOC4zLjFcIjtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuLy8gQGZsb3dcblxuLyo6OiBpbXBvcnQgdHlwZSB7XG4gIENvbWJpbmF0b3JUb2tlblR5cGUsXG4gIFNlbGVjdG9yVG9rZW5UeXBlXG59IGZyb20gJy4vdHlwZXMnOyovXG5cblxudmFyIGVzY2FwZVZhbHVlID0gZnVuY3Rpb24gZXNjYXBlVmFsdWUodmFsdWUgLyo6IHN0cmluZyovKSAvKjogc3RyaW5nKi8ge1xuICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xufTtcblxudmFyIHJlbmRlclNlbGVjdG9yID0gZnVuY3Rpb24gcmVuZGVyU2VsZWN0b3Ioc2VsZWN0b3JUb2tlbiAvKjogU2VsZWN0b3JUb2tlblR5cGUqLykge1xuICB2YXIgdG9rZW5zID0gc2VsZWN0b3JUb2tlbi5ib2R5O1xuICB2YXIgcGFydHMgPSBbXTtcblxuICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWU7XG4gIHZhciBfZGlkSXRlcmF0b3JFcnJvciA9IGZhbHNlO1xuICB2YXIgX2l0ZXJhdG9yRXJyb3IgPSB1bmRlZmluZWQ7XG5cbiAgdHJ5IHtcbiAgICBmb3IgKHZhciBfaXRlcmF0b3IgPSB0b2tlbnNbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gKF9zdGVwID0gX2l0ZXJhdG9yLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlKSB7XG4gICAgICB2YXIgdG9rZW4gPSBfc3RlcC52YWx1ZTtcblxuICAgICAgdmFyIHBhcnQgPSB2b2lkIDA7XG5cbiAgICAgIGlmICh0b2tlbi50eXBlID09PSAndW5pdmVyc2FsU2VsZWN0b3InKSB7XG4gICAgICAgIHBhcnQgPSAnKic7XG4gICAgICB9IGVsc2UgaWYgKHRva2VuLnR5cGUgPT09ICd0eXBlU2VsZWN0b3InKSB7XG4gICAgICAgIHBhcnQgPSB0b2tlbi5uYW1lO1xuICAgICAgfSBlbHNlIGlmICh0b2tlbi50eXBlID09PSAnaWRTZWxlY3RvcicpIHtcbiAgICAgICAgcGFydCA9ICcjJyArIHRva2VuLm5hbWU7XG4gICAgICB9IGVsc2UgaWYgKHRva2VuLnR5cGUgPT09ICdjbGFzc1NlbGVjdG9yJykge1xuICAgICAgICBwYXJ0ID0gJy4nICsgdG9rZW4ubmFtZTtcbiAgICAgIH0gZWxzZSBpZiAodG9rZW4udHlwZSA9PT0gJ2F0dHJpYnV0ZVByZXNlbmNlU2VsZWN0b3InKSB7XG4gICAgICAgIHBhcnQgPSAnWycgKyB0b2tlbi5uYW1lICsgJ10nO1xuICAgICAgfSBlbHNlIGlmICh0b2tlbi50eXBlID09PSAnYXR0cmlidXRlVmFsdWVTZWxlY3RvcicpIHtcbiAgICAgICAgcGFydCA9ICdbJyArIHRva2VuLm5hbWUgKyB0b2tlbi5vcGVyYXRvciArIGVzY2FwZVZhbHVlKHRva2VuLnZhbHVlKSArICddJztcbiAgICAgIH0gZWxzZSBpZiAodG9rZW4udHlwZSA9PT0gJ3BzZXVkb0NsYXNzU2VsZWN0b3InKSB7XG4gICAgICAgIHBhcnQgPSAnOicgKyB0b2tlbi5uYW1lO1xuXG4gICAgICAgIGlmICh0b2tlbi5wYXJhbWV0ZXJzLmxlbmd0aCkge1xuICAgICAgICAgIHBhcnQgKz0gJygnICsgdG9rZW4ucGFyYW1ldGVycy5tYXAoZXNjYXBlVmFsdWUpLmpvaW4oJywgJykgKyAnKSc7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodG9rZW4udHlwZSA9PT0gJ3BzZXVkb0VsZW1lbnRTZWxlY3RvcicpIHtcbiAgICAgICAgcGFydCA9ICc6OicgKyB0b2tlbi5uYW1lO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIHRva2VuLicpO1xuICAgICAgfVxuXG4gICAgICBwYXJ0cy5wdXNoKHBhcnQpO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgX2RpZEl0ZXJhdG9yRXJyb3IgPSB0cnVlO1xuICAgIF9pdGVyYXRvckVycm9yID0gZXJyO1xuICB9IGZpbmFsbHkge1xuICAgIHRyeSB7XG4gICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gJiYgX2l0ZXJhdG9yLnJldHVybikge1xuICAgICAgICBfaXRlcmF0b3IucmV0dXJuKCk7XG4gICAgICB9XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcikge1xuICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gcGFydHMuam9pbignJyk7XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBnZW5lcmF0ZSA9IGZ1bmN0aW9uIGdlbmVyYXRlKHRva2VucyAvKjogQXJyYXk8U2VsZWN0b3JUb2tlblR5cGUgfCBDb21iaW5hdG9yVG9rZW5UeXBlPiovKSAvKjogc3RyaW5nKi8ge1xuICAgIC8qKlxuICAgICAqIEB0b2RvIFRoaW5rIG9mIGEgYmV0dGVyIG5hbWUuIFRoaXMgYXJyYXkgY29udGFpbnMgc2VsZWN0b3JzIG9yIGNvbWJpbmF0b3JzLlxuICAgICAqL1xuICAgIHZhciBzZXF1ZW5jZXMgLyo6IEFycmF5PHN0cmluZz4qLyA9IFtdO1xuXG4gICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yID0gdHJ1ZTtcbiAgICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3IyID0gZmFsc2U7XG4gICAgdmFyIF9pdGVyYXRvckVycm9yMiA9IHVuZGVmaW5lZDtcblxuICAgIHRyeSB7XG4gICAgICBmb3IgKHZhciBfaXRlcmF0b3IyID0gdG9rZW5zW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXAyOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yID0gKF9zdGVwMiA9IF9pdGVyYXRvcjIubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgPSB0cnVlKSB7XG4gICAgICAgIHZhciB0b2tlbiA9IF9zdGVwMi52YWx1ZTtcblxuICAgICAgICBpZiAodG9rZW4udHlwZSA9PT0gJ3NlbGVjdG9yJykge1xuICAgICAgICAgIHNlcXVlbmNlcy5wdXNoKHJlbmRlclNlbGVjdG9yKHRva2VuKSk7XG4gICAgICAgIH0gZWxzZSBpZiAodG9rZW4udHlwZSA9PT0gJ2Rlc2NlbmRhbnRDb21iaW5hdG9yJykge1xuICAgICAgICAgIHNlcXVlbmNlcy5wdXNoKCcgJyk7XG4gICAgICAgIH0gZWxzZSBpZiAodG9rZW4udHlwZSA9PT0gJ2NoaWxkQ29tYmluYXRvcicpIHtcbiAgICAgICAgICBzZXF1ZW5jZXMucHVzaCgnID4gJyk7XG4gICAgICAgIH0gZWxzZSBpZiAodG9rZW4udHlwZSA9PT0gJ2FkamFjZW50U2libGluZ0NvbWJpbmF0b3InKSB7XG4gICAgICAgICAgc2VxdWVuY2VzLnB1c2goJyArICcpO1xuICAgICAgICB9IGVsc2UgaWYgKHRva2VuLnR5cGUgPT09ICdnZW5lcmFsU2libGluZ0NvbWJpbmF0b3InKSB7XG4gICAgICAgICAgc2VxdWVuY2VzLnB1c2goJyB+ICcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biB0b2tlbi4nKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IyID0gdHJ1ZTtcbiAgICAgIF9pdGVyYXRvckVycm9yMiA9IGVycjtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiAmJiBfaXRlcmF0b3IyLnJldHVybikge1xuICAgICAgICAgIF9pdGVyYXRvcjIucmV0dXJuKCk7XG4gICAgICAgIH1cbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcjIpIHtcbiAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc2VxdWVuY2VzLmpvaW4oJycpO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgZ2VuZXJhdGU6IGdlbmVyYXRlXG4gIH07XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3JlYXRlR2VuZXJhdG9yLmpzLm1hcCIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9uZWFybGV5ID0gcmVxdWlyZSgnbmVhcmxleScpO1xuXG52YXIgX2dyYW1tYXIgPSByZXF1aXJlKCcuL2dyYW1tYXInKTtcblxudmFyIF9ncmFtbWFyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dyYW1tYXIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKjo6IGltcG9ydCB0eXBlIHtcbiAgQ29tYmluYXRvclRva2VuVHlwZSxcbiAgU2VsZWN0b3JUb2tlblR5cGVcbn0gZnJvbSAnLi90eXBlcyc7Ki8gLy8gQGZsb3dcblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKCkge1xuICB2YXIgcGFyc2UgPSBmdW5jdGlvbiBwYXJzZShzZWxlY3RvciAvKjogc3RyaW5nKi8pIC8qOiBBcnJheTxTZWxlY3RvclRva2VuVHlwZSB8IENvbWJpbmF0b3JUb2tlblR5cGU+Ki8ge1xuICAgIHZhciBwYXJzZXIgPSBuZXcgX25lYXJsZXkuUGFyc2VyKF9ncmFtbWFyMi5kZWZhdWx0LlBhcnNlclJ1bGVzLCBfZ3JhbW1hcjIuZGVmYXVsdC5QYXJzZXJTdGFydCk7XG5cbiAgICB2YXIgcmVzdWx0cyA9IHBhcnNlci5mZWVkKHNlbGVjdG9yKS5yZXN1bHRzO1xuXG4gICAgaWYgKHJlc3VsdHMubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZvdW5kIG5vIHBhcnNpbmdzLicpO1xuICAgIH1cblxuICAgIGlmIChyZXN1bHRzLmxlbmd0aCA+IDEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQW1iaWd1b3VzIHJlc3VsdHMuJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdHNbMF07XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBwYXJzZTogcGFyc2VcbiAgfTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcmVhdGVQYXJzZXIuanMubWFwIiwiJ3VzZSBzdHJpY3QnO1xuXG4vLyBHZW5lcmF0ZWQgYXV0b21hdGljYWxseSBieSBuZWFybGV5XG4vLyBodHRwOi8vZ2l0aHViLmNvbS9IYXJkbWF0aDEyMy9uZWFybGV5XG4oZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBpZCh4KSB7XG4gICAgcmV0dXJuIHhbMF07XG4gIH1cblxuICB2YXIgZmxhdHRlbkRlZXAgPSByZXF1aXJlKCdsb2Rhc2guZmxhdHRlbmRlZXAnKTtcbiAgdmFyIGFwcGVuZEl0ZW0gPSBmdW5jdGlvbiBhcHBlbmRJdGVtKGEsIGIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQpIHtcbiAgICAgIHJldHVybiBkW2FdLmNvbmNhdChbZFtiXV0pO1xuICAgIH07XG4gIH07XG4gIHZhciBhcHBlbmRJdGVtQ2hhciA9IGZ1bmN0aW9uIGFwcGVuZEl0ZW1DaGFyKGEsIGIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQpIHtcbiAgICAgIHJldHVybiBkW2FdLmNvbmNhdChkW2JdKTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBmbGF0dGVuID0gZnVuY3Rpb24gZmxhdHRlbihkKSB7XG4gICAgZCA9IGQuZmlsdGVyKGZ1bmN0aW9uIChyKSB7XG4gICAgICByZXR1cm4gciAhPT0gbnVsbDtcbiAgICB9KTtcbiAgICByZXR1cm4gZmxhdHRlbkRlZXAoZCk7XG4gIH07XG5cbiAgdmFyIGNvbWJpbmF0b3JNYXAgPSB7XG4gICAgJyAnOiAnZGVzY2VuZGFudENvbWJpbmF0b3InLFxuICAgICcrJzogJ2FkamFjZW50U2libGluZ0NvbWJpbmF0b3InLFxuICAgICc+JzogJ2NoaWxkQ29tYmluYXRvcicsXG4gICAgJ34nOiAnZ2VuZXJhbFNpYmxpbmdDb21iaW5hdG9yJ1xuICB9O1xuXG4gIHZhciBjb25jYXRVc2luZ0NvbWJpbmF0b3IgPSBmdW5jdGlvbiBjb25jYXRVc2luZ0NvbWJpbmF0b3IoZCkge1xuICAgIHJldHVybiAoQXJyYXkuaXNBcnJheShkWzBdKSA/IGRbMF0gOiBbZFswXV0pLmNvbmNhdCh7XG4gICAgICB0eXBlOiBjb21iaW5hdG9yTWFwW2RbMl1dXG4gICAgfSkuY29uY2F0KGRbNF0pO1xuICB9O1xuXG4gIHZhciBwYXJzZUFzTnVtYmVyID0gZnVuY3Rpb24gcGFyc2VBc051bWJlcihkLCBpLCByZWplY3QpIHtcbiAgICB2YXIgam9pbmVkID0gZmxhdHRlbkRlZXAoZCkuam9pbignJyk7XG4gICAgdmFyIHBhcnNlZCA9IHBhcnNlRmxvYXQoam9pbmVkKTtcbiAgICBpZiAoaXNOYU4ocGFyc2VkKSkge1xuICAgICAgcmV0dXJuIHJlamVjdDtcbiAgICB9XG4gICAgcmV0dXJuIHBhcnNlZDtcbiAgfTtcblxuICB2YXIgcGFyc2VBc0Jvb2xlYW4gPSBmdW5jdGlvbiBwYXJzZUFzQm9vbGVhbihkLCBpLCByZWplY3QpIHtcbiAgICBpZiAoZFswXSA9PT0gJ3RydWUnKSByZXR1cm4gdHJ1ZTtcbiAgICBpZiAoZFswXSA9PT0gJ2ZhbHNlJykgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiByZWplY3Q7XG4gIH07XG5cbiAgdmFyIHBhcnNlRmFsc3lQcmltaXRpdmUgPSBmdW5jdGlvbiBwYXJzZUZhbHN5UHJpbWl0aXZlKGQsIGksIHJlamVjdCkge1xuICAgIGlmIChkWzBdID09PSAnTmFOJykgcmV0dXJuIE5hTjtcbiAgICBpZiAoZFswXSA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgaWYgKGRbMF0gPT09ICdudWxsJykgcmV0dXJuIG51bGw7XG4gICAgcmV0dXJuIHJlamVjdDtcbiAgfTtcbiAgdmFyIGdyYW1tYXIgPSB7XG4gICAgTGV4ZXI6IHVuZGVmaW5lZCxcbiAgICBQYXJzZXJSdWxlczogW3sgXCJuYW1lXCI6IFwiY29tYmluYXRvclwiLCBcInN5bWJvbHNcIjogW1wic2VsZWN0b3JcIl0gfSwgeyBcIm5hbWVcIjogXCJjb21iaW5hdG9yXCIsIFwic3ltYm9sc1wiOiBbXCJjb21iaW5hdG9yXCIsIFwiX1wiLCAvWz4rfiBdLywgXCJfXCIsIFwic2VsZWN0b3JcIl0sIFwicG9zdHByb2Nlc3NcIjogY29uY2F0VXNpbmdDb21iaW5hdG9yIH0sIHsgXCJuYW1lXCI6IFwic2VsZWN0b3JcIiwgXCJzeW1ib2xzXCI6IFtcInNlbGVjdG9yQm9keVwiXSwgXCJwb3N0cHJvY2Vzc1wiOiBmdW5jdGlvbiBwb3N0cHJvY2VzcyhkKSB7XG4gICAgICAgIHJldHVybiB7IHR5cGU6ICdzZWxlY3RvcicsIGJvZHk6IGRbMF0gfTtcbiAgICAgIH0gfSwgeyBcIm5hbWVcIjogXCJzZWxlY3RvckJvZHkkZWJuZiQxXCIsIFwic3ltYm9sc1wiOiBbXCJ0eXBlU2VsZWN0b3JcIl0sIFwicG9zdHByb2Nlc3NcIjogaWQgfSwgeyBcIm5hbWVcIjogXCJzZWxlY3RvckJvZHkkZWJuZiQxXCIsIFwic3ltYm9sc1wiOiBbXSwgXCJwb3N0cHJvY2Vzc1wiOiBmdW5jdGlvbiBwb3N0cHJvY2VzcyhkKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfSB9LCB7IFwibmFtZVwiOiBcInNlbGVjdG9yQm9keSRlYm5mJDJcIiwgXCJzeW1ib2xzXCI6IFtdIH0sIHsgXCJuYW1lXCI6IFwic2VsZWN0b3JCb2R5JGVibmYkMlwiLCBcInN5bWJvbHNcIjogW1wic2VsZWN0b3JCb2R5JGVibmYkMlwiLCBcInNpbXBsZVNlbGVjdG9yXCJdLCBcInBvc3Rwcm9jZXNzXCI6IGZ1bmN0aW9uIGFycnB1c2goZCkge1xuICAgICAgICByZXR1cm4gZFswXS5jb25jYXQoW2RbMV1dKTtcbiAgICAgIH0gfSwgeyBcIm5hbWVcIjogXCJzZWxlY3RvckJvZHlcIiwgXCJzeW1ib2xzXCI6IFtcInNlbGVjdG9yQm9keSRlYm5mJDFcIiwgXCJzZWxlY3RvckJvZHkkZWJuZiQyXCJdLCBcInBvc3Rwcm9jZXNzXCI6IGZ1bmN0aW9uIHBvc3Rwcm9jZXNzKGQsIGksIHJlamVjdCkge1xuICAgICAgICB2YXIgc2VsZWN0b3JzID0gZmxhdHRlbihkKTtpZiAoIXNlbGVjdG9ycy5sZW5ndGgpIHJldHVybiByZWplY3Q7cmV0dXJuIHNlbGVjdG9ycztcbiAgICAgIH0gfSwgeyBcIm5hbWVcIjogXCJzZWxlY3RvckJvZHkkZWJuZiQzXCIsIFwic3ltYm9sc1wiOiBbXSB9LCB7IFwibmFtZVwiOiBcInNlbGVjdG9yQm9keSRlYm5mJDNcIiwgXCJzeW1ib2xzXCI6IFtcInNlbGVjdG9yQm9keSRlYm5mJDNcIiwgXCJzaW1wbGVTZWxlY3RvclwiXSwgXCJwb3N0cHJvY2Vzc1wiOiBmdW5jdGlvbiBhcnJwdXNoKGQpIHtcbiAgICAgICAgcmV0dXJuIGRbMF0uY29uY2F0KFtkWzFdXSk7XG4gICAgICB9IH0sIHsgXCJuYW1lXCI6IFwic2VsZWN0b3JCb2R5XCIsIFwic3ltYm9sc1wiOiBbXCJ1bml2ZXJzYWxTZWxlY3RvclwiLCBcInNlbGVjdG9yQm9keSRlYm5mJDNcIl0sIFwicG9zdHByb2Nlc3NcIjogZmxhdHRlbiB9LCB7IFwibmFtZVwiOiBcInNpbXBsZVNlbGVjdG9yXCIsIFwic3ltYm9sc1wiOiBbXCJpZFNlbGVjdG9yXCJdIH0sIHsgXCJuYW1lXCI6IFwic2ltcGxlU2VsZWN0b3JcIiwgXCJzeW1ib2xzXCI6IFtcImNsYXNzU2VsZWN0b3JcIl0gfSwgeyBcIm5hbWVcIjogXCJzaW1wbGVTZWxlY3RvclwiLCBcInN5bWJvbHNcIjogW1wiYXR0cmlidXRlVmFsdWVTZWxlY3RvclwiXSB9LCB7IFwibmFtZVwiOiBcInNpbXBsZVNlbGVjdG9yXCIsIFwic3ltYm9sc1wiOiBbXCJhdHRyaWJ1dGVQcmVzZW5jZVNlbGVjdG9yXCJdIH0sIHsgXCJuYW1lXCI6IFwic2ltcGxlU2VsZWN0b3JcIiwgXCJzeW1ib2xzXCI6IFtcInBzZXVkb0NsYXNzU2VsZWN0b3JcIl0gfSwgeyBcIm5hbWVcIjogXCJzaW1wbGVTZWxlY3RvclwiLCBcInN5bWJvbHNcIjogW1wicHNldWRvRWxlbWVudFNlbGVjdG9yXCJdIH0sIHsgXCJuYW1lXCI6IFwidHlwZVNlbGVjdG9yXCIsIFwic3ltYm9sc1wiOiBbXCJhdHRyaWJ1dGVOYW1lXCJdLCBcInBvc3Rwcm9jZXNzXCI6IGZ1bmN0aW9uIHBvc3Rwcm9jZXNzKGQpIHtcbiAgICAgICAgcmV0dXJuIHsgdHlwZTogJ3R5cGVTZWxlY3RvcicsIG5hbWU6IGRbMF0gfTtcbiAgICAgIH0gfSwgeyBcIm5hbWVcIjogXCJjbGFzc05hbWUkZWJuZiQxXCIsIFwic3ltYm9sc1wiOiBbeyBcImxpdGVyYWxcIjogXCItXCIgfV0sIFwicG9zdHByb2Nlc3NcIjogaWQgfSwgeyBcIm5hbWVcIjogXCJjbGFzc05hbWUkZWJuZiQxXCIsIFwic3ltYm9sc1wiOiBbXSwgXCJwb3N0cHJvY2Vzc1wiOiBmdW5jdGlvbiBwb3N0cHJvY2VzcyhkKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfSB9LCB7IFwibmFtZVwiOiBcImNsYXNzTmFtZSRlYm5mJDJcIiwgXCJzeW1ib2xzXCI6IFtdIH0sIHsgXCJuYW1lXCI6IFwiY2xhc3NOYW1lJGVibmYkMlwiLCBcInN5bWJvbHNcIjogW1wiY2xhc3NOYW1lJGVibmYkMlwiLCAvW19hLXpBLVowLTktXS9dLCBcInBvc3Rwcm9jZXNzXCI6IGZ1bmN0aW9uIGFycnB1c2goZCkge1xuICAgICAgICByZXR1cm4gZFswXS5jb25jYXQoW2RbMV1dKTtcbiAgICAgIH0gfSwgeyBcIm5hbWVcIjogXCJjbGFzc05hbWVcIiwgXCJzeW1ib2xzXCI6IFtcImNsYXNzTmFtZSRlYm5mJDFcIiwgL1tfYS16QS1aXS8sIFwiY2xhc3NOYW1lJGVibmYkMlwiXSwgXCJwb3N0cHJvY2Vzc1wiOiBmdW5jdGlvbiBwb3N0cHJvY2VzcyhkKSB7XG4gICAgICAgIHJldHVybiAoZFswXSB8fCAnJykgKyBkWzFdICsgZFsyXS5qb2luKCcnKTtcbiAgICAgIH0gfSwgeyBcIm5hbWVcIjogXCJhdHRyaWJ1dGVOYW1lJGVibmYkMVwiLCBcInN5bWJvbHNcIjogW10gfSwgeyBcIm5hbWVcIjogXCJhdHRyaWJ1dGVOYW1lJGVibmYkMVwiLCBcInN5bWJvbHNcIjogW1wiYXR0cmlidXRlTmFtZSRlYm5mJDFcIiwgL1tfYS16QS1aKCkwLTktXS9dLCBcInBvc3Rwcm9jZXNzXCI6IGZ1bmN0aW9uIGFycnB1c2goZCkge1xuICAgICAgICByZXR1cm4gZFswXS5jb25jYXQoW2RbMV1dKTtcbiAgICAgIH0gfSwgeyBcIm5hbWVcIjogXCJhdHRyaWJ1dGVOYW1lXCIsIFwic3ltYm9sc1wiOiBbL1tfYS16KClBLVpdLywgXCJhdHRyaWJ1dGVOYW1lJGVibmYkMVwiXSwgXCJwb3N0cHJvY2Vzc1wiOiBmdW5jdGlvbiBwb3N0cHJvY2VzcyhkKSB7XG4gICAgICAgIHJldHVybiBkWzBdICsgZFsxXS5qb2luKCcnKTtcbiAgICAgIH0gfSwgeyBcIm5hbWVcIjogXCJjbGFzc1NlbGVjdG9yXCIsIFwic3ltYm9sc1wiOiBbeyBcImxpdGVyYWxcIjogXCIuXCIgfSwgXCJjbGFzc05hbWVcIl0sIFwicG9zdHByb2Nlc3NcIjogZnVuY3Rpb24gcG9zdHByb2Nlc3MoZCkge1xuICAgICAgICByZXR1cm4geyB0eXBlOiAnY2xhc3NTZWxlY3RvcicsIG5hbWU6IGRbMV0gfTtcbiAgICAgIH0gfSwgeyBcIm5hbWVcIjogXCJpZFNlbGVjdG9yXCIsIFwic3ltYm9sc1wiOiBbeyBcImxpdGVyYWxcIjogXCIjXCIgfSwgXCJhdHRyaWJ1dGVOYW1lXCJdLCBcInBvc3Rwcm9jZXNzXCI6IGZ1bmN0aW9uIHBvc3Rwcm9jZXNzKGQpIHtcbiAgICAgICAgcmV0dXJuIHsgdHlwZTogJ2lkU2VsZWN0b3InLCBuYW1lOiBkWzFdIH07XG4gICAgICB9IH0sIHsgXCJuYW1lXCI6IFwidW5pdmVyc2FsU2VsZWN0b3JcIiwgXCJzeW1ib2xzXCI6IFt7IFwibGl0ZXJhbFwiOiBcIipcIiB9XSwgXCJwb3N0cHJvY2Vzc1wiOiBmdW5jdGlvbiBwb3N0cHJvY2VzcyhkKSB7XG4gICAgICAgIHJldHVybiB7IHR5cGU6ICd1bml2ZXJzYWxTZWxlY3RvcicgfTtcbiAgICAgIH0gfSwgeyBcIm5hbWVcIjogXCJhdHRyaWJ1dGVQcmVzZW5jZVNlbGVjdG9yXCIsIFwic3ltYm9sc1wiOiBbeyBcImxpdGVyYWxcIjogXCJbXCIgfSwgXCJhdHRyaWJ1dGVOYW1lXCIsIHsgXCJsaXRlcmFsXCI6IFwiXVwiIH1dLCBcInBvc3Rwcm9jZXNzXCI6IGZ1bmN0aW9uIHBvc3Rwcm9jZXNzKGQpIHtcbiAgICAgICAgcmV0dXJuIHsgdHlwZTogJ2F0dHJpYnV0ZVByZXNlbmNlU2VsZWN0b3InLCBuYW1lOiBkWzFdIH07XG4gICAgICB9IH0sIHsgXCJuYW1lXCI6IFwiYXR0cmlidXRlT3BlcmF0b3JcIiwgXCJzeW1ib2xzXCI6IFt7IFwibGl0ZXJhbFwiOiBcIj1cIiB9XSB9LCB7IFwibmFtZVwiOiBcImF0dHJpYnV0ZU9wZXJhdG9yJHN0cmluZyQxXCIsIFwic3ltYm9sc1wiOiBbeyBcImxpdGVyYWxcIjogXCJ+XCIgfSwgeyBcImxpdGVyYWxcIjogXCI9XCIgfV0sIFwicG9zdHByb2Nlc3NcIjogZnVuY3Rpb24gam9pbmVyKGQpIHtcbiAgICAgICAgcmV0dXJuIGQuam9pbignJyk7XG4gICAgICB9IH0sIHsgXCJuYW1lXCI6IFwiYXR0cmlidXRlT3BlcmF0b3JcIiwgXCJzeW1ib2xzXCI6IFtcImF0dHJpYnV0ZU9wZXJhdG9yJHN0cmluZyQxXCJdIH0sIHsgXCJuYW1lXCI6IFwiYXR0cmlidXRlT3BlcmF0b3Ikc3RyaW5nJDJcIiwgXCJzeW1ib2xzXCI6IFt7IFwibGl0ZXJhbFwiOiBcInxcIiB9LCB7IFwibGl0ZXJhbFwiOiBcIj1cIiB9XSwgXCJwb3N0cHJvY2Vzc1wiOiBmdW5jdGlvbiBqb2luZXIoZCkge1xuICAgICAgICByZXR1cm4gZC5qb2luKCcnKTtcbiAgICAgIH0gfSwgeyBcIm5hbWVcIjogXCJhdHRyaWJ1dGVPcGVyYXRvclwiLCBcInN5bWJvbHNcIjogW1wiYXR0cmlidXRlT3BlcmF0b3Ikc3RyaW5nJDJcIl0gfSwgeyBcIm5hbWVcIjogXCJhdHRyaWJ1dGVPcGVyYXRvciRzdHJpbmckM1wiLCBcInN5bWJvbHNcIjogW3sgXCJsaXRlcmFsXCI6IFwiXlwiIH0sIHsgXCJsaXRlcmFsXCI6IFwiPVwiIH1dLCBcInBvc3Rwcm9jZXNzXCI6IGZ1bmN0aW9uIGpvaW5lcihkKSB7XG4gICAgICAgIHJldHVybiBkLmpvaW4oJycpO1xuICAgICAgfSB9LCB7IFwibmFtZVwiOiBcImF0dHJpYnV0ZU9wZXJhdG9yXCIsIFwic3ltYm9sc1wiOiBbXCJhdHRyaWJ1dGVPcGVyYXRvciRzdHJpbmckM1wiXSB9LCB7IFwibmFtZVwiOiBcImF0dHJpYnV0ZU9wZXJhdG9yJHN0cmluZyQ0XCIsIFwic3ltYm9sc1wiOiBbeyBcImxpdGVyYWxcIjogXCIkXCIgfSwgeyBcImxpdGVyYWxcIjogXCI9XCIgfV0sIFwicG9zdHByb2Nlc3NcIjogZnVuY3Rpb24gam9pbmVyKGQpIHtcbiAgICAgICAgcmV0dXJuIGQuam9pbignJyk7XG4gICAgICB9IH0sIHsgXCJuYW1lXCI6IFwiYXR0cmlidXRlT3BlcmF0b3JcIiwgXCJzeW1ib2xzXCI6IFtcImF0dHJpYnV0ZU9wZXJhdG9yJHN0cmluZyQ0XCJdIH0sIHsgXCJuYW1lXCI6IFwiYXR0cmlidXRlT3BlcmF0b3Ikc3RyaW5nJDVcIiwgXCJzeW1ib2xzXCI6IFt7IFwibGl0ZXJhbFwiOiBcIipcIiB9LCB7IFwibGl0ZXJhbFwiOiBcIj1cIiB9XSwgXCJwb3N0cHJvY2Vzc1wiOiBmdW5jdGlvbiBqb2luZXIoZCkge1xuICAgICAgICByZXR1cm4gZC5qb2luKCcnKTtcbiAgICAgIH0gfSwgeyBcIm5hbWVcIjogXCJhdHRyaWJ1dGVPcGVyYXRvclwiLCBcInN5bWJvbHNcIjogW1wiYXR0cmlidXRlT3BlcmF0b3Ikc3RyaW5nJDVcIl0gfSwgeyBcIm5hbWVcIjogXCJhdHRyaWJ1dGVWYWx1ZVNlbGVjdG9yXCIsIFwic3ltYm9sc1wiOiBbeyBcImxpdGVyYWxcIjogXCJbXCIgfSwgXCJhdHRyaWJ1dGVOYW1lXCIsIFwiYXR0cmlidXRlT3BlcmF0b3JcIiwgXCJhdHRyaWJ1dGVWYWx1ZVwiLCB7IFwibGl0ZXJhbFwiOiBcIl1cIiB9XSwgXCJwb3N0cHJvY2Vzc1wiOiBmdW5jdGlvbiBwb3N0cHJvY2VzcyhkKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdHlwZTogJ2F0dHJpYnV0ZVZhbHVlU2VsZWN0b3InLFxuICAgICAgICAgIG5hbWU6IGRbMV0sXG4gICAgICAgICAgdmFsdWU6IGRbM10sXG4gICAgICAgICAgb3BlcmF0b3I6IGRbMl1bMF1cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9LCB7IFwibmFtZVwiOiBcImF0dHJpYnV0ZVZhbHVlXCIsIFwic3ltYm9sc1wiOiBbXCJmYWxzeVByaW1pdGl2ZVN0cmluZ3NcIl0sIFwicG9zdHByb2Nlc3NcIjogaWQgfSwgeyBcIm5hbWVcIjogXCJhdHRyaWJ1dGVWYWx1ZVwiLCBcInN5bWJvbHNcIjogW1wibnVtZXJpY1ZhbHVlXCJdLCBcInBvc3Rwcm9jZXNzXCI6IGlkIH0sIHsgXCJuYW1lXCI6IFwiYXR0cmlidXRlVmFsdWVcIiwgXCJzeW1ib2xzXCI6IFtcInNxc3RyaW5nXCJdLCBcInBvc3Rwcm9jZXNzXCI6IGlkIH0sIHsgXCJuYW1lXCI6IFwiYXR0cmlidXRlVmFsdWVcIiwgXCJzeW1ib2xzXCI6IFtcImRxc3RyaW5nXCJdLCBcInBvc3Rwcm9jZXNzXCI6IGlkIH0sIHsgXCJuYW1lXCI6IFwiZmFsc3lQcmltaXRpdmVTdHJpbmdzJHN0cmluZyQxXCIsIFwic3ltYm9sc1wiOiBbeyBcImxpdGVyYWxcIjogXCJmXCIgfSwgeyBcImxpdGVyYWxcIjogXCJhXCIgfSwgeyBcImxpdGVyYWxcIjogXCJsXCIgfSwgeyBcImxpdGVyYWxcIjogXCJzXCIgfSwgeyBcImxpdGVyYWxcIjogXCJlXCIgfV0sIFwicG9zdHByb2Nlc3NcIjogZnVuY3Rpb24gam9pbmVyKGQpIHtcbiAgICAgICAgcmV0dXJuIGQuam9pbignJyk7XG4gICAgICB9IH0sIHsgXCJuYW1lXCI6IFwiZmFsc3lQcmltaXRpdmVTdHJpbmdzXCIsIFwic3ltYm9sc1wiOiBbXCJmYWxzeVByaW1pdGl2ZVN0cmluZ3Mkc3RyaW5nJDFcIl0sIFwicG9zdHByb2Nlc3NcIjogcGFyc2VBc0Jvb2xlYW4gfSwgeyBcIm5hbWVcIjogXCJmYWxzeVByaW1pdGl2ZVN0cmluZ3Mkc3RyaW5nJDJcIiwgXCJzeW1ib2xzXCI6IFt7IFwibGl0ZXJhbFwiOiBcInRcIiB9LCB7IFwibGl0ZXJhbFwiOiBcInJcIiB9LCB7IFwibGl0ZXJhbFwiOiBcInVcIiB9LCB7IFwibGl0ZXJhbFwiOiBcImVcIiB9XSwgXCJwb3N0cHJvY2Vzc1wiOiBmdW5jdGlvbiBqb2luZXIoZCkge1xuICAgICAgICByZXR1cm4gZC5qb2luKCcnKTtcbiAgICAgIH0gfSwgeyBcIm5hbWVcIjogXCJmYWxzeVByaW1pdGl2ZVN0cmluZ3NcIiwgXCJzeW1ib2xzXCI6IFtcImZhbHN5UHJpbWl0aXZlU3RyaW5ncyRzdHJpbmckMlwiXSwgXCJwb3N0cHJvY2Vzc1wiOiBwYXJzZUFzQm9vbGVhbiB9LCB7IFwibmFtZVwiOiBcImZhbHN5UHJpbWl0aXZlU3RyaW5ncyRzdHJpbmckM1wiLCBcInN5bWJvbHNcIjogW3sgXCJsaXRlcmFsXCI6IFwiTlwiIH0sIHsgXCJsaXRlcmFsXCI6IFwiYVwiIH0sIHsgXCJsaXRlcmFsXCI6IFwiTlwiIH1dLCBcInBvc3Rwcm9jZXNzXCI6IGZ1bmN0aW9uIGpvaW5lcihkKSB7XG4gICAgICAgIHJldHVybiBkLmpvaW4oJycpO1xuICAgICAgfSB9LCB7IFwibmFtZVwiOiBcImZhbHN5UHJpbWl0aXZlU3RyaW5nc1wiLCBcInN5bWJvbHNcIjogW1wiZmFsc3lQcmltaXRpdmVTdHJpbmdzJHN0cmluZyQzXCJdLCBcInBvc3Rwcm9jZXNzXCI6IHBhcnNlRmFsc3lQcmltaXRpdmUgfSwgeyBcIm5hbWVcIjogXCJmYWxzeVByaW1pdGl2ZVN0cmluZ3Mkc3RyaW5nJDRcIiwgXCJzeW1ib2xzXCI6IFt7IFwibGl0ZXJhbFwiOiBcIm5cIiB9LCB7IFwibGl0ZXJhbFwiOiBcInVcIiB9LCB7IFwibGl0ZXJhbFwiOiBcImxcIiB9LCB7IFwibGl0ZXJhbFwiOiBcImxcIiB9XSwgXCJwb3N0cHJvY2Vzc1wiOiBmdW5jdGlvbiBqb2luZXIoZCkge1xuICAgICAgICByZXR1cm4gZC5qb2luKCcnKTtcbiAgICAgIH0gfSwgeyBcIm5hbWVcIjogXCJmYWxzeVByaW1pdGl2ZVN0cmluZ3NcIiwgXCJzeW1ib2xzXCI6IFtcImZhbHN5UHJpbWl0aXZlU3RyaW5ncyRzdHJpbmckNFwiXSwgXCJwb3N0cHJvY2Vzc1wiOiBwYXJzZUZhbHN5UHJpbWl0aXZlIH0sIHsgXCJuYW1lXCI6IFwiZmFsc3lQcmltaXRpdmVTdHJpbmdzJHN0cmluZyQ1XCIsIFwic3ltYm9sc1wiOiBbeyBcImxpdGVyYWxcIjogXCJ1XCIgfSwgeyBcImxpdGVyYWxcIjogXCJuXCIgfSwgeyBcImxpdGVyYWxcIjogXCJkXCIgfSwgeyBcImxpdGVyYWxcIjogXCJlXCIgfSwgeyBcImxpdGVyYWxcIjogXCJmXCIgfSwgeyBcImxpdGVyYWxcIjogXCJpXCIgfSwgeyBcImxpdGVyYWxcIjogXCJuXCIgfSwgeyBcImxpdGVyYWxcIjogXCJlXCIgfSwgeyBcImxpdGVyYWxcIjogXCJkXCIgfV0sIFwicG9zdHByb2Nlc3NcIjogZnVuY3Rpb24gam9pbmVyKGQpIHtcbiAgICAgICAgcmV0dXJuIGQuam9pbignJyk7XG4gICAgICB9IH0sIHsgXCJuYW1lXCI6IFwiZmFsc3lQcmltaXRpdmVTdHJpbmdzXCIsIFwic3ltYm9sc1wiOiBbXCJmYWxzeVByaW1pdGl2ZVN0cmluZ3Mkc3RyaW5nJDVcIl0sIFwicG9zdHByb2Nlc3NcIjogcGFyc2VGYWxzeVByaW1pdGl2ZSB9LCB7IFwibmFtZVwiOiBcIm51bWVyaWNWYWx1ZVwiLCBcInN5bWJvbHNcIjogW1wiaW50XCIsIHsgXCJsaXRlcmFsXCI6IFwiLlwiIH0sIFwiaW50XCJdLCBcInBvc3Rwcm9jZXNzXCI6IHBhcnNlQXNOdW1iZXIgfSwgeyBcIm5hbWVcIjogXCJudW1lcmljVmFsdWVcIiwgXCJzeW1ib2xzXCI6IFt7IFwibGl0ZXJhbFwiOiBcIitcIiB9LCBcImludFwiLCB7IFwibGl0ZXJhbFwiOiBcIi5cIiB9LCBcImludFwiXSwgXCJwb3N0cHJvY2Vzc1wiOiBwYXJzZUFzTnVtYmVyIH0sIHsgXCJuYW1lXCI6IFwibnVtZXJpY1ZhbHVlXCIsIFwic3ltYm9sc1wiOiBbeyBcImxpdGVyYWxcIjogXCItXCIgfSwgXCJpbnRcIiwgeyBcImxpdGVyYWxcIjogXCIuXCIgfSwgXCJpbnRcIl0sIFwicG9zdHByb2Nlc3NcIjogcGFyc2VBc051bWJlciB9LCB7IFwibmFtZVwiOiBcIm51bWVyaWNWYWx1ZVwiLCBcInN5bWJvbHNcIjogW3sgXCJsaXRlcmFsXCI6IFwiLVwiIH0sIFwiaW50XCJdLCBcInBvc3Rwcm9jZXNzXCI6IHBhcnNlQXNOdW1iZXIgfSwgeyBcIm5hbWVcIjogXCJudW1lcmljVmFsdWVcIiwgXCJzeW1ib2xzXCI6IFtcImludFwiXSwgXCJwb3N0cHJvY2Vzc1wiOiBwYXJzZUFzTnVtYmVyIH0sIHsgXCJuYW1lXCI6IFwibnVtZXJpY1ZhbHVlXCIsIFwic3ltYm9sc1wiOiBbeyBcImxpdGVyYWxcIjogXCIrXCIgfSwgXCJpbnRcIl0sIFwicG9zdHByb2Nlc3NcIjogcGFyc2VBc051bWJlciB9LCB7IFwibmFtZVwiOiBcIm51bWVyaWNWYWx1ZSRzdHJpbmckMVwiLCBcInN5bWJvbHNcIjogW3sgXCJsaXRlcmFsXCI6IFwiSVwiIH0sIHsgXCJsaXRlcmFsXCI6IFwiblwiIH0sIHsgXCJsaXRlcmFsXCI6IFwiZlwiIH0sIHsgXCJsaXRlcmFsXCI6IFwiaVwiIH0sIHsgXCJsaXRlcmFsXCI6IFwiblwiIH0sIHsgXCJsaXRlcmFsXCI6IFwiaVwiIH0sIHsgXCJsaXRlcmFsXCI6IFwidFwiIH0sIHsgXCJsaXRlcmFsXCI6IFwieVwiIH1dLCBcInBvc3Rwcm9jZXNzXCI6IGZ1bmN0aW9uIGpvaW5lcihkKSB7XG4gICAgICAgIHJldHVybiBkLmpvaW4oJycpO1xuICAgICAgfSB9LCB7IFwibmFtZVwiOiBcIm51bWVyaWNWYWx1ZVwiLCBcInN5bWJvbHNcIjogW1wibnVtZXJpY1ZhbHVlJHN0cmluZyQxXCJdLCBcInBvc3Rwcm9jZXNzXCI6IHBhcnNlQXNOdW1iZXIgfSwgeyBcIm5hbWVcIjogXCJudW1lcmljVmFsdWUkc3RyaW5nJDJcIiwgXCJzeW1ib2xzXCI6IFt7IFwibGl0ZXJhbFwiOiBcIitcIiB9LCB7IFwibGl0ZXJhbFwiOiBcIklcIiB9LCB7IFwibGl0ZXJhbFwiOiBcIm5cIiB9LCB7IFwibGl0ZXJhbFwiOiBcImZcIiB9LCB7IFwibGl0ZXJhbFwiOiBcImlcIiB9LCB7IFwibGl0ZXJhbFwiOiBcIm5cIiB9LCB7IFwibGl0ZXJhbFwiOiBcImlcIiB9LCB7IFwibGl0ZXJhbFwiOiBcInRcIiB9LCB7IFwibGl0ZXJhbFwiOiBcInlcIiB9XSwgXCJwb3N0cHJvY2Vzc1wiOiBmdW5jdGlvbiBqb2luZXIoZCkge1xuICAgICAgICByZXR1cm4gZC5qb2luKCcnKTtcbiAgICAgIH0gfSwgeyBcIm5hbWVcIjogXCJudW1lcmljVmFsdWVcIiwgXCJzeW1ib2xzXCI6IFtcIm51bWVyaWNWYWx1ZSRzdHJpbmckMlwiXSwgXCJwb3N0cHJvY2Vzc1wiOiBwYXJzZUFzTnVtYmVyIH0sIHsgXCJuYW1lXCI6IFwibnVtZXJpY1ZhbHVlJHN0cmluZyQzXCIsIFwic3ltYm9sc1wiOiBbeyBcImxpdGVyYWxcIjogXCItXCIgfSwgeyBcImxpdGVyYWxcIjogXCJJXCIgfSwgeyBcImxpdGVyYWxcIjogXCJuXCIgfSwgeyBcImxpdGVyYWxcIjogXCJmXCIgfSwgeyBcImxpdGVyYWxcIjogXCJpXCIgfSwgeyBcImxpdGVyYWxcIjogXCJuXCIgfSwgeyBcImxpdGVyYWxcIjogXCJpXCIgfSwgeyBcImxpdGVyYWxcIjogXCJ0XCIgfSwgeyBcImxpdGVyYWxcIjogXCJ5XCIgfV0sIFwicG9zdHByb2Nlc3NcIjogZnVuY3Rpb24gam9pbmVyKGQpIHtcbiAgICAgICAgcmV0dXJuIGQuam9pbignJyk7XG4gICAgICB9IH0sIHsgXCJuYW1lXCI6IFwibnVtZXJpY1ZhbHVlXCIsIFwic3ltYm9sc1wiOiBbXCJudW1lcmljVmFsdWUkc3RyaW5nJDNcIl0sIFwicG9zdHByb2Nlc3NcIjogcGFyc2VBc051bWJlciB9LCB7IFwibmFtZVwiOiBcImludCRlYm5mJDFcIiwgXCJzeW1ib2xzXCI6IFsvWzAtOV0vXSB9LCB7IFwibmFtZVwiOiBcImludCRlYm5mJDFcIiwgXCJzeW1ib2xzXCI6IFtcImludCRlYm5mJDFcIiwgL1swLTldL10sIFwicG9zdHByb2Nlc3NcIjogZnVuY3Rpb24gYXJycHVzaChkKSB7XG4gICAgICAgIHJldHVybiBkWzBdLmNvbmNhdChbZFsxXV0pO1xuICAgICAgfSB9LCB7IFwibmFtZVwiOiBcImludFwiLCBcInN5bWJvbHNcIjogW1wiaW50JGVibmYkMVwiXSB9LCB7IFwibmFtZVwiOiBcImNsYXNzUGFyYW1ldGVyc1wiLCBcInN5bWJvbHNcIjogW10gfSwgeyBcIm5hbWVcIjogXCJjbGFzc1BhcmFtZXRlcnNcIiwgXCJzeW1ib2xzXCI6IFtcImNsYXNzUGFyYW1ldGVyXCJdIH0sIHsgXCJuYW1lXCI6IFwiY2xhc3NQYXJhbWV0ZXJzXCIsIFwic3ltYm9sc1wiOiBbXCJjbGFzc1BhcmFtZXRlcnNcIiwgeyBcImxpdGVyYWxcIjogXCIsXCIgfSwgXCJfXCIsIFwiY2xhc3NQYXJhbWV0ZXJcIl0sIFwicG9zdHByb2Nlc3NcIjogYXBwZW5kSXRlbSgwLCAzKSB9LCB7IFwibmFtZVwiOiBcImNsYXNzUGFyYW1ldGVyJGVibmYkMVwiLCBcInN5bWJvbHNcIjogWy9bXigpXCInLCBdL10gfSwgeyBcIm5hbWVcIjogXCJjbGFzc1BhcmFtZXRlciRlYm5mJDFcIiwgXCJzeW1ib2xzXCI6IFtcImNsYXNzUGFyYW1ldGVyJGVibmYkMVwiLCAvW14oKVwiJywgXS9dLCBcInBvc3Rwcm9jZXNzXCI6IGZ1bmN0aW9uIGFycnB1c2goZCkge1xuICAgICAgICByZXR1cm4gZFswXS5jb25jYXQoW2RbMV1dKTtcbiAgICAgIH0gfSwgeyBcIm5hbWVcIjogXCJjbGFzc1BhcmFtZXRlclwiLCBcInN5bWJvbHNcIjogW1wiY2xhc3NQYXJhbWV0ZXIkZWJuZiQxXCJdLCBcInBvc3Rwcm9jZXNzXCI6IGZ1bmN0aW9uIHBvc3Rwcm9jZXNzKGQpIHtcbiAgICAgICAgcmV0dXJuIGRbMF0uam9pbignJyk7XG4gICAgICB9IH0sIHsgXCJuYW1lXCI6IFwiY2xhc3NQYXJhbWV0ZXJcIiwgXCJzeW1ib2xzXCI6IFtcInNxc3RyaW5nXCJdLCBcInBvc3Rwcm9jZXNzXCI6IGlkIH0sIHsgXCJuYW1lXCI6IFwiY2xhc3NQYXJhbWV0ZXJcIiwgXCJzeW1ib2xzXCI6IFtcImRxc3RyaW5nXCJdLCBcInBvc3Rwcm9jZXNzXCI6IGlkIH0sIHsgXCJuYW1lXCI6IFwicHNldWRvRWxlbWVudFNlbGVjdG9yJHN0cmluZyQxXCIsIFwic3ltYm9sc1wiOiBbeyBcImxpdGVyYWxcIjogXCI6XCIgfSwgeyBcImxpdGVyYWxcIjogXCI6XCIgfV0sIFwicG9zdHByb2Nlc3NcIjogZnVuY3Rpb24gam9pbmVyKGQpIHtcbiAgICAgICAgcmV0dXJuIGQuam9pbignJyk7XG4gICAgICB9IH0sIHsgXCJuYW1lXCI6IFwicHNldWRvRWxlbWVudFNlbGVjdG9yXCIsIFwic3ltYm9sc1wiOiBbXCJwc2V1ZG9FbGVtZW50U2VsZWN0b3Ikc3RyaW5nJDFcIiwgXCJwc2V1ZG9DbGFzc1NlbGVjdG9yTmFtZVwiXSwgXCJwb3N0cHJvY2Vzc1wiOiBmdW5jdGlvbiBwb3N0cHJvY2VzcyhkKSB7XG4gICAgICAgIHJldHVybiB7IHR5cGU6ICdwc2V1ZG9FbGVtZW50U2VsZWN0b3InLCBuYW1lOiBkWzFdIH07XG4gICAgICB9IH0sIHsgXCJuYW1lXCI6IFwicHNldWRvQ2xhc3NTZWxlY3RvclwiLCBcInN5bWJvbHNcIjogW3sgXCJsaXRlcmFsXCI6IFwiOlwiIH0sIFwicHNldWRvQ2xhc3NTZWxlY3Rvck5hbWVcIl0sIFwicG9zdHByb2Nlc3NcIjogZnVuY3Rpb24gcG9zdHByb2Nlc3MoZCkge1xuICAgICAgICByZXR1cm4geyB0eXBlOiAncHNldWRvQ2xhc3NTZWxlY3RvcicsIG5hbWU6IGRbMV0gfTtcbiAgICAgIH0gfSwgeyBcIm5hbWVcIjogXCJwc2V1ZG9DbGFzc1NlbGVjdG9yXCIsIFwic3ltYm9sc1wiOiBbeyBcImxpdGVyYWxcIjogXCI6XCIgfSwgXCJwc2V1ZG9DbGFzc1NlbGVjdG9yTmFtZVwiLCB7IFwibGl0ZXJhbFwiOiBcIihcIiB9LCBcImNsYXNzUGFyYW1ldGVyc1wiLCB7IFwibGl0ZXJhbFwiOiBcIilcIiB9XSwgXCJwb3N0cHJvY2Vzc1wiOiBmdW5jdGlvbiBwb3N0cHJvY2VzcyhkKSB7XG4gICAgICAgIHJldHVybiB7IHR5cGU6ICdwc2V1ZG9DbGFzc1NlbGVjdG9yJywgbmFtZTogZFsxXSwgcGFyYW1ldGVyczogZFszXSB9O1xuICAgICAgfSB9LCB7IFwibmFtZVwiOiBcInBzZXVkb0NsYXNzU2VsZWN0b3JOYW1lJGVibmYkMVwiLCBcInN5bWJvbHNcIjogWy9bYS16QS1aMC05LV9dL10gfSwgeyBcIm5hbWVcIjogXCJwc2V1ZG9DbGFzc1NlbGVjdG9yTmFtZSRlYm5mJDFcIiwgXCJzeW1ib2xzXCI6IFtcInBzZXVkb0NsYXNzU2VsZWN0b3JOYW1lJGVibmYkMVwiLCAvW2EtekEtWjAtOS1fXS9dLCBcInBvc3Rwcm9jZXNzXCI6IGZ1bmN0aW9uIGFycnB1c2goZCkge1xuICAgICAgICByZXR1cm4gZFswXS5jb25jYXQoW2RbMV1dKTtcbiAgICAgIH0gfSwgeyBcIm5hbWVcIjogXCJwc2V1ZG9DbGFzc1NlbGVjdG9yTmFtZVwiLCBcInN5bWJvbHNcIjogWy9bYS16QS1aXS8sIFwicHNldWRvQ2xhc3NTZWxlY3Rvck5hbWUkZWJuZiQxXCJdLCBcInBvc3Rwcm9jZXNzXCI6IGZ1bmN0aW9uIHBvc3Rwcm9jZXNzKGQpIHtcbiAgICAgICAgcmV0dXJuIGRbMF0gKyBkWzFdLmpvaW4oJycpO1xuICAgICAgfSB9LCB7IFwibmFtZVwiOiBcImRxc3RyaW5nJGVibmYkMVwiLCBcInN5bWJvbHNcIjogW10gfSwgeyBcIm5hbWVcIjogXCJkcXN0cmluZyRlYm5mJDFcIiwgXCJzeW1ib2xzXCI6IFtcImRxc3RyaW5nJGVibmYkMVwiLCBcImRzdHJjaGFyXCJdLCBcInBvc3Rwcm9jZXNzXCI6IGZ1bmN0aW9uIGFycnB1c2goZCkge1xuICAgICAgICByZXR1cm4gZFswXS5jb25jYXQoW2RbMV1dKTtcbiAgICAgIH0gfSwgeyBcIm5hbWVcIjogXCJkcXN0cmluZ1wiLCBcInN5bWJvbHNcIjogW3sgXCJsaXRlcmFsXCI6IFwiXFxcIlwiIH0sIFwiZHFzdHJpbmckZWJuZiQxXCIsIHsgXCJsaXRlcmFsXCI6IFwiXFxcIlwiIH1dLCBcInBvc3Rwcm9jZXNzXCI6IGZ1bmN0aW9uIHBvc3Rwcm9jZXNzKGQpIHtcbiAgICAgICAgcmV0dXJuIGRbMV0uam9pbignJyk7XG4gICAgICB9IH0sIHsgXCJuYW1lXCI6IFwiZHN0cmNoYXJcIiwgXCJzeW1ib2xzXCI6IFsvW15cIl0vXSwgXCJwb3N0cHJvY2Vzc1wiOiBpZCB9LCB7IFwibmFtZVwiOiBcImRzdHJjaGFyJHN0cmluZyQxXCIsIFwic3ltYm9sc1wiOiBbeyBcImxpdGVyYWxcIjogXCJcXFxcXCIgfSwgeyBcImxpdGVyYWxcIjogXCJcXFwiXCIgfV0sIFwicG9zdHByb2Nlc3NcIjogZnVuY3Rpb24gam9pbmVyKGQpIHtcbiAgICAgICAgcmV0dXJuIGQuam9pbignJyk7XG4gICAgICB9IH0sIHsgXCJuYW1lXCI6IFwiZHN0cmNoYXJcIiwgXCJzeW1ib2xzXCI6IFtcImRzdHJjaGFyJHN0cmluZyQxXCJdLCBcInBvc3Rwcm9jZXNzXCI6IGZ1bmN0aW9uIHBvc3Rwcm9jZXNzKGQpIHtcbiAgICAgICAgcmV0dXJuICdcIic7XG4gICAgICB9IH0sIHsgXCJuYW1lXCI6IFwic3FzdHJpbmckZWJuZiQxXCIsIFwic3ltYm9sc1wiOiBbXSB9LCB7IFwibmFtZVwiOiBcInNxc3RyaW5nJGVibmYkMVwiLCBcInN5bWJvbHNcIjogW1wic3FzdHJpbmckZWJuZiQxXCIsIFwic3N0cmNoYXJcIl0sIFwicG9zdHByb2Nlc3NcIjogZnVuY3Rpb24gYXJycHVzaChkKSB7XG4gICAgICAgIHJldHVybiBkWzBdLmNvbmNhdChbZFsxXV0pO1xuICAgICAgfSB9LCB7IFwibmFtZVwiOiBcInNxc3RyaW5nXCIsIFwic3ltYm9sc1wiOiBbeyBcImxpdGVyYWxcIjogXCInXCIgfSwgXCJzcXN0cmluZyRlYm5mJDFcIiwgeyBcImxpdGVyYWxcIjogXCInXCIgfV0sIFwicG9zdHByb2Nlc3NcIjogZnVuY3Rpb24gcG9zdHByb2Nlc3MoZCkge1xuICAgICAgICByZXR1cm4gZFsxXS5qb2luKCcnKTtcbiAgICAgIH0gfSwgeyBcIm5hbWVcIjogXCJzc3RyY2hhclwiLCBcInN5bWJvbHNcIjogWy9bXiddL10sIFwicG9zdHByb2Nlc3NcIjogaWQgfSwgeyBcIm5hbWVcIjogXCJzc3RyY2hhciRzdHJpbmckMVwiLCBcInN5bWJvbHNcIjogW3sgXCJsaXRlcmFsXCI6IFwiXFxcXFwiIH0sIHsgXCJsaXRlcmFsXCI6IFwiJ1wiIH1dLCBcInBvc3Rwcm9jZXNzXCI6IGZ1bmN0aW9uIGpvaW5lcihkKSB7XG4gICAgICAgIHJldHVybiBkLmpvaW4oJycpO1xuICAgICAgfSB9LCB7IFwibmFtZVwiOiBcInNzdHJjaGFyXCIsIFwic3ltYm9sc1wiOiBbXCJzc3RyY2hhciRzdHJpbmckMVwiXSwgXCJwb3N0cHJvY2Vzc1wiOiBmdW5jdGlvbiBwb3N0cHJvY2VzcyhkKSB7XG4gICAgICAgIHJldHVybiAnXFwnJztcbiAgICAgIH0gfSwgeyBcIm5hbWVcIjogXCJfJGVibmYkMVwiLCBcInN5bWJvbHNcIjogW10gfSwgeyBcIm5hbWVcIjogXCJfJGVibmYkMVwiLCBcInN5bWJvbHNcIjogW1wiXyRlYm5mJDFcIiwgL1sgXS9dLCBcInBvc3Rwcm9jZXNzXCI6IGZ1bmN0aW9uIGFycnB1c2goZCkge1xuICAgICAgICByZXR1cm4gZFswXS5jb25jYXQoW2RbMV1dKTtcbiAgICAgIH0gfSwgeyBcIm5hbWVcIjogXCJfXCIsIFwic3ltYm9sc1wiOiBbXCJfJGVibmYkMVwiXSwgXCJwb3N0cHJvY2Vzc1wiOiBmdW5jdGlvbiBwb3N0cHJvY2VzcyhkKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfSB9XSxcbiAgICBQYXJzZXJTdGFydDogXCJjb21iaW5hdG9yXCJcbiAgfTtcbiAgaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGdyYW1tYXI7XG4gIH0gZWxzZSB7XG4gICAgd2luZG93LmdyYW1tYXIgPSBncmFtbWFyO1xuICB9XG59KSgpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z3JhbW1hci5qcy5tYXAiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmNyZWF0ZVBhcnNlciA9IGV4cG9ydHMuY3JlYXRlR2VuZXJhdG9yID0gdW5kZWZpbmVkO1xuXG52YXIgX2NyZWF0ZUdlbmVyYXRvciA9IHJlcXVpcmUoJy4vY3JlYXRlR2VuZXJhdG9yJyk7XG5cbnZhciBfY3JlYXRlR2VuZXJhdG9yMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUdlbmVyYXRvcik7XG5cbnZhciBfY3JlYXRlUGFyc2VyID0gcmVxdWlyZSgnLi9jcmVhdGVQYXJzZXInKTtcblxudmFyIF9jcmVhdGVQYXJzZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlUGFyc2VyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLy8gQGZsb3dcblxuZXhwb3J0cy5jcmVhdGVHZW5lcmF0b3IgPSBfY3JlYXRlR2VuZXJhdG9yMi5kZWZhdWx0O1xuZXhwb3J0cy5jcmVhdGVQYXJzZXIgPSBfY3JlYXRlUGFyc2VyMi5kZWZhdWx0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY2FsbEJvdW5kID0gcmVxdWlyZSgnY2FsbC1iaW5kL2NhbGxCb3VuZCcpO1xudmFyIGlzUmVnZXggPSByZXF1aXJlKCdpcy1yZWdleCcpO1xuXG52YXIgJGV4ZWMgPSBjYWxsQm91bmQoJ1JlZ0V4cC5wcm90b3R5cGUuZXhlYycpO1xudmFyICRUeXBlRXJyb3IgPSByZXF1aXJlKCdlcy1lcnJvcnMvdHlwZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHJlZ2V4VGVzdGVyKHJlZ2V4KSB7XG5cdGlmICghaXNSZWdleChyZWdleCkpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignYHJlZ2V4YCBtdXN0IGJlIGEgUmVnRXhwJyk7XG5cdH1cblx0cmV0dXJuIGZ1bmN0aW9uIHRlc3Qocykge1xuXHRcdHJldHVybiAkZXhlYyhyZWdleCwgcykgIT09IG51bGw7XG5cdH07XG59O1xuIiwiLyoqXG4gKiBAbGljZW5zZSBSZWFjdFxuICogc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0JztmdW5jdGlvbiBmKGEsYil7dmFyIGM9YS5sZW5ndGg7YS5wdXNoKGIpO2E6Zm9yKDswPGM7KXt2YXIgZD1jLTE+Pj4xLGU9YVtkXTtpZigwPGcoZSxiKSlhW2RdPWIsYVtjXT1lLGM9ZDtlbHNlIGJyZWFrIGF9fWZ1bmN0aW9uIGgoYSl7cmV0dXJuIDA9PT1hLmxlbmd0aD9udWxsOmFbMF19ZnVuY3Rpb24gayhhKXtpZigwPT09YS5sZW5ndGgpcmV0dXJuIG51bGw7dmFyIGI9YVswXSxjPWEucG9wKCk7aWYoYyE9PWIpe2FbMF09YzthOmZvcih2YXIgZD0wLGU9YS5sZW5ndGgsdz1lPj4+MTtkPHc7KXt2YXIgbT0yKihkKzEpLTEsQz1hW21dLG49bSsxLHg9YVtuXTtpZigwPmcoQyxjKSluPGUmJjA+Zyh4LEMpPyhhW2RdPXgsYVtuXT1jLGQ9bik6KGFbZF09QyxhW21dPWMsZD1tKTtlbHNlIGlmKG48ZSYmMD5nKHgsYykpYVtkXT14LGFbbl09YyxkPW47ZWxzZSBicmVhayBhfX1yZXR1cm4gYn1cbmZ1bmN0aW9uIGcoYSxiKXt2YXIgYz1hLnNvcnRJbmRleC1iLnNvcnRJbmRleDtyZXR1cm4gMCE9PWM/YzphLmlkLWIuaWR9aWYoXCJvYmplY3RcIj09PXR5cGVvZiBwZXJmb3JtYW5jZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIHBlcmZvcm1hbmNlLm5vdyl7dmFyIGw9cGVyZm9ybWFuY2U7ZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4gbC5ub3coKX19ZWxzZXt2YXIgcD1EYXRlLHE9cC5ub3coKTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBwLm5vdygpLXF9fXZhciByPVtdLHQ9W10sdT0xLHY9bnVsbCx5PTMsej0hMSxBPSExLEI9ITEsRD1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygc2V0VGltZW91dD9zZXRUaW1lb3V0Om51bGwsRT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2xlYXJUaW1lb3V0P2NsZWFyVGltZW91dDpudWxsLEY9XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBzZXRJbW1lZGlhdGU/c2V0SW1tZWRpYXRlOm51bGw7XG5cInVuZGVmaW5lZFwiIT09dHlwZW9mIG5hdmlnYXRvciYmdm9pZCAwIT09bmF2aWdhdG9yLnNjaGVkdWxpbmcmJnZvaWQgMCE9PW5hdmlnYXRvci5zY2hlZHVsaW5nLmlzSW5wdXRQZW5kaW5nJiZuYXZpZ2F0b3Iuc2NoZWR1bGluZy5pc0lucHV0UGVuZGluZy5iaW5kKG5hdmlnYXRvci5zY2hlZHVsaW5nKTtmdW5jdGlvbiBHKGEpe2Zvcih2YXIgYj1oKHQpO251bGwhPT1iOyl7aWYobnVsbD09PWIuY2FsbGJhY2spayh0KTtlbHNlIGlmKGIuc3RhcnRUaW1lPD1hKWsodCksYi5zb3J0SW5kZXg9Yi5leHBpcmF0aW9uVGltZSxmKHIsYik7ZWxzZSBicmVhaztiPWgodCl9fWZ1bmN0aW9uIEgoYSl7Qj0hMTtHKGEpO2lmKCFBKWlmKG51bGwhPT1oKHIpKUE9ITAsSShKKTtlbHNle3ZhciBiPWgodCk7bnVsbCE9PWImJksoSCxiLnN0YXJ0VGltZS1hKX19XG5mdW5jdGlvbiBKKGEsYil7QT0hMTtCJiYoQj0hMSxFKEwpLEw9LTEpO3o9ITA7dmFyIGM9eTt0cnl7RyhiKTtmb3Iodj1oKHIpO251bGwhPT12JiYoISh2LmV4cGlyYXRpb25UaW1lPmIpfHxhJiYhTSgpKTspe3ZhciBkPXYuY2FsbGJhY2s7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe3YuY2FsbGJhY2s9bnVsbDt5PXYucHJpb3JpdHlMZXZlbDt2YXIgZT1kKHYuZXhwaXJhdGlvblRpbWU8PWIpO2I9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZT92LmNhbGxiYWNrPWU6dj09PWgocikmJmsocik7RyhiKX1lbHNlIGsocik7dj1oKHIpfWlmKG51bGwhPT12KXZhciB3PSEwO2Vsc2V7dmFyIG09aCh0KTtudWxsIT09bSYmSyhILG0uc3RhcnRUaW1lLWIpO3c9ITF9cmV0dXJuIHd9ZmluYWxseXt2PW51bGwseT1jLHo9ITF9fXZhciBOPSExLE89bnVsbCxMPS0xLFA9NSxRPS0xO1xuZnVuY3Rpb24gTSgpe3JldHVybiBleHBvcnRzLnVuc3RhYmxlX25vdygpLVE8UD8hMTohMH1mdW5jdGlvbiBSKCl7aWYobnVsbCE9PU8pe3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7UT1hO3ZhciBiPSEwO3RyeXtiPU8oITAsYSl9ZmluYWxseXtiP1MoKTooTj0hMSxPPW51bGwpfX1lbHNlIE49ITF9dmFyIFM7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIEYpUz1mdW5jdGlvbigpe0YoUil9O2Vsc2UgaWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBNZXNzYWdlQ2hhbm5lbCl7dmFyIFQ9bmV3IE1lc3NhZ2VDaGFubmVsLFU9VC5wb3J0MjtULnBvcnQxLm9ubWVzc2FnZT1SO1M9ZnVuY3Rpb24oKXtVLnBvc3RNZXNzYWdlKG51bGwpfX1lbHNlIFM9ZnVuY3Rpb24oKXtEKFIsMCl9O2Z1bmN0aW9uIEkoYSl7Tz1hO058fChOPSEwLFMoKSl9ZnVuY3Rpb24gSyhhLGIpe0w9RChmdW5jdGlvbigpe2EoZXhwb3J0cy51bnN0YWJsZV9ub3coKSl9LGIpfVxuZXhwb3J0cy51bnN0YWJsZV9JZGxlUHJpb3JpdHk9NTtleHBvcnRzLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5PTE7ZXhwb3J0cy51bnN0YWJsZV9Mb3dQcmlvcml0eT00O2V4cG9ydHMudW5zdGFibGVfTm9ybWFsUHJpb3JpdHk9MztleHBvcnRzLnVuc3RhYmxlX1Byb2ZpbGluZz1udWxsO2V4cG9ydHMudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHk9MjtleHBvcnRzLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrPWZ1bmN0aW9uKGEpe2EuY2FsbGJhY2s9bnVsbH07ZXhwb3J0cy51bnN0YWJsZV9jb250aW51ZUV4ZWN1dGlvbj1mdW5jdGlvbigpe0F8fHp8fChBPSEwLEkoSikpfTtcbmV4cG9ydHMudW5zdGFibGVfZm9yY2VGcmFtZVJhdGU9ZnVuY3Rpb24oYSl7MD5hfHwxMjU8YT9jb25zb2xlLmVycm9yKFwiZm9yY2VGcmFtZVJhdGUgdGFrZXMgYSBwb3NpdGl2ZSBpbnQgYmV0d2VlbiAwIGFuZCAxMjUsIGZvcmNpbmcgZnJhbWUgcmF0ZXMgaGlnaGVyIHRoYW4gMTI1IGZwcyBpcyBub3Qgc3VwcG9ydGVkXCIpOlA9MDxhP01hdGguZmxvb3IoMUUzL2EpOjV9O2V4cG9ydHMudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWw9ZnVuY3Rpb24oKXtyZXR1cm4geX07ZXhwb3J0cy51bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZT1mdW5jdGlvbigpe3JldHVybiBoKHIpfTtleHBvcnRzLnVuc3RhYmxlX25leHQ9ZnVuY3Rpb24oYSl7c3dpdGNoKHkpe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOnZhciBiPTM7YnJlYWs7ZGVmYXVsdDpiPXl9dmFyIGM9eTt5PWI7dHJ5e3JldHVybiBhKCl9ZmluYWxseXt5PWN9fTtleHBvcnRzLnVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7fTtcbmV4cG9ydHMudW5zdGFibGVfcmVxdWVzdFBhaW50PWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eT1mdW5jdGlvbihhLGIpe3N3aXRjaChhKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzpjYXNlIDQ6Y2FzZSA1OmJyZWFrO2RlZmF1bHQ6YT0zfXZhciBjPXk7eT1hO3RyeXtyZXR1cm4gYigpfWZpbmFsbHl7eT1jfX07XG5leHBvcnRzLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWV4cG9ydHMudW5zdGFibGVfbm93KCk7XCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yz8oYz1jLmRlbGF5LGM9XCJudW1iZXJcIj09PXR5cGVvZiBjJiYwPGM/ZCtjOmQpOmM9ZDtzd2l0Y2goYSl7Y2FzZSAxOnZhciBlPS0xO2JyZWFrO2Nhc2UgMjplPTI1MDticmVhaztjYXNlIDU6ZT0xMDczNzQxODIzO2JyZWFrO2Nhc2UgNDplPTFFNDticmVhaztkZWZhdWx0OmU9NUUzfWU9YytlO2E9e2lkOnUrKyxjYWxsYmFjazpiLHByaW9yaXR5TGV2ZWw6YSxzdGFydFRpbWU6YyxleHBpcmF0aW9uVGltZTplLHNvcnRJbmRleDotMX07Yz5kPyhhLnNvcnRJbmRleD1jLGYodCxhKSxudWxsPT09aChyKSYmYT09PWgodCkmJihCPyhFKEwpLEw9LTEpOkI9ITAsSyhILGMtZCkpKTooYS5zb3J0SW5kZXg9ZSxmKHIsYSksQXx8enx8KEE9ITAsSShKKSkpO3JldHVybiBhfTtcbmV4cG9ydHMudW5zdGFibGVfc2hvdWxkWWllbGQ9TTtleHBvcnRzLnVuc3RhYmxlX3dyYXBDYWxsYmFjaz1mdW5jdGlvbihhKXt2YXIgYj15O3JldHVybiBmdW5jdGlvbigpe3ZhciBjPXk7eT1iO3RyeXtyZXR1cm4gYS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9ZmluYWxseXt5PWN9fX07XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnZ2V0LWludHJpbnNpYycpO1xudmFyIGRlZmluZSA9IHJlcXVpcmUoJ2RlZmluZS1kYXRhLXByb3BlcnR5Jyk7XG52YXIgaGFzRGVzY3JpcHRvcnMgPSByZXF1aXJlKCdoYXMtcHJvcGVydHktZGVzY3JpcHRvcnMnKSgpO1xudmFyIGdPUEQgPSByZXF1aXJlKCdnb3BkJyk7XG5cbnZhciAkVHlwZUVycm9yID0gcmVxdWlyZSgnZXMtZXJyb3JzL3R5cGUnKTtcbnZhciAkZmxvb3IgPSBHZXRJbnRyaW5zaWMoJyVNYXRoLmZsb29yJScpO1xuXG4vKiogQHR5cGUge2ltcG9ydCgnLicpfSAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzZXRGdW5jdGlvbkxlbmd0aChmbiwgbGVuZ3RoKSB7XG5cdGlmICh0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignYGZuYCBpcyBub3QgYSBmdW5jdGlvbicpO1xuXHR9XG5cdGlmICh0eXBlb2YgbGVuZ3RoICE9PSAnbnVtYmVyJyB8fCBsZW5ndGggPCAwIHx8IGxlbmd0aCA+IDB4RkZGRkZGRkYgfHwgJGZsb29yKGxlbmd0aCkgIT09IGxlbmd0aCkge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdgbGVuZ3RoYCBtdXN0IGJlIGEgcG9zaXRpdmUgMzItYml0IGludGVnZXInKTtcblx0fVxuXG5cdHZhciBsb29zZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmICEhYXJndW1lbnRzWzJdO1xuXG5cdHZhciBmdW5jdGlvbkxlbmd0aElzQ29uZmlndXJhYmxlID0gdHJ1ZTtcblx0dmFyIGZ1bmN0aW9uTGVuZ3RoSXNXcml0YWJsZSA9IHRydWU7XG5cdGlmICgnbGVuZ3RoJyBpbiBmbiAmJiBnT1BEKSB7XG5cdFx0dmFyIGRlc2MgPSBnT1BEKGZuLCAnbGVuZ3RoJyk7XG5cdFx0aWYgKGRlc2MgJiYgIWRlc2MuY29uZmlndXJhYmxlKSB7XG5cdFx0XHRmdW5jdGlvbkxlbmd0aElzQ29uZmlndXJhYmxlID0gZmFsc2U7XG5cdFx0fVxuXHRcdGlmIChkZXNjICYmICFkZXNjLndyaXRhYmxlKSB7XG5cdFx0XHRmdW5jdGlvbkxlbmd0aElzV3JpdGFibGUgPSBmYWxzZTtcblx0XHR9XG5cdH1cblxuXHRpZiAoZnVuY3Rpb25MZW5ndGhJc0NvbmZpZ3VyYWJsZSB8fCBmdW5jdGlvbkxlbmd0aElzV3JpdGFibGUgfHwgIWxvb3NlKSB7XG5cdFx0aWYgKGhhc0Rlc2NyaXB0b3JzKSB7XG5cdFx0XHRkZWZpbmUoLyoqIEB0eXBlIHtQYXJhbWV0ZXJzPGRlZmluZT5bMF19ICovIChmbiksICdsZW5ndGgnLCBsZW5ndGgsIHRydWUsIHRydWUpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRkZWZpbmUoLyoqIEB0eXBlIHtQYXJhbWV0ZXJzPGRlZmluZT5bMF19ICovIChmbiksICdsZW5ndGgnLCBsZW5ndGgpO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gZm47XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJ2VzLW9iamVjdC1hdG9tcy9SZXF1aXJlT2JqZWN0Q29lcmNpYmxlJyk7XG52YXIgVG9TdHJpbmcgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC8yMDI0L1RvU3RyaW5nJyk7XG52YXIgY2FsbEJvdW5kID0gcmVxdWlyZSgnY2FsbC1iaW5kL2NhbGxCb3VuZCcpO1xudmFyICRyZXBsYWNlID0gY2FsbEJvdW5kKCdTdHJpbmcucHJvdG90eXBlLnJlcGxhY2UnKTtcblxudmFyIG12c0lzV1MgPSAoL15cXHMkLykudGVzdCgnXFx1MTgwRScpO1xuLyogZXNsaW50LWRpc2FibGUgbm8tY29udHJvbC1yZWdleCAqL1xudmFyIGxlZnRXaGl0ZXNwYWNlID0gbXZzSXNXU1xuXHQ/IC9eW1xceDA5XFx4MEFcXHgwQlxceDBDXFx4MERcXHgyMFxceEEwXFx1MTY4MFxcdTE4MEVcXHUyMDAwXFx1MjAwMVxcdTIwMDJcXHUyMDAzXFx1MjAwNFxcdTIwMDVcXHUyMDA2XFx1MjAwN1xcdTIwMDhcXHUyMDA5XFx1MjAwQVxcdTIwMkZcXHUyMDVGXFx1MzAwMFxcdTIwMjhcXHUyMDI5XFx1RkVGRl0rL1xuXHQ6IC9eW1xceDA5XFx4MEFcXHgwQlxceDBDXFx4MERcXHgyMFxceEEwXFx1MTY4MFxcdTIwMDBcXHUyMDAxXFx1MjAwMlxcdTIwMDNcXHUyMDA0XFx1MjAwNVxcdTIwMDZcXHUyMDA3XFx1MjAwOFxcdTIwMDlcXHUyMDBBXFx1MjAyRlxcdTIwNUZcXHUzMDAwXFx1MjAyOFxcdTIwMjlcXHVGRUZGXSsvO1xudmFyIHJpZ2h0V2hpdGVzcGFjZSA9IG12c0lzV1Ncblx0PyAvW1xceDA5XFx4MEFcXHgwQlxceDBDXFx4MERcXHgyMFxceEEwXFx1MTY4MFxcdTE4MEVcXHUyMDAwXFx1MjAwMVxcdTIwMDJcXHUyMDAzXFx1MjAwNFxcdTIwMDVcXHUyMDA2XFx1MjAwN1xcdTIwMDhcXHUyMDA5XFx1MjAwQVxcdTIwMkZcXHUyMDVGXFx1MzAwMFxcdTIwMjhcXHUyMDI5XFx1RkVGRl0rJC9cblx0OiAvW1xceDA5XFx4MEFcXHgwQlxceDBDXFx4MERcXHgyMFxceEEwXFx1MTY4MFxcdTIwMDBcXHUyMDAxXFx1MjAwMlxcdTIwMDNcXHUyMDA0XFx1MjAwNVxcdTIwMDZcXHUyMDA3XFx1MjAwOFxcdTIwMDlcXHUyMDBBXFx1MjAyRlxcdTIwNUZcXHUzMDAwXFx1MjAyOFxcdTIwMjlcXHVGRUZGXSskLztcbi8qIGVzbGludC1lbmFibGUgbm8tY29udHJvbC1yZWdleCAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHRyaW0oKSB7XG5cdHZhciBTID0gVG9TdHJpbmcoUmVxdWlyZU9iamVjdENvZXJjaWJsZSh0aGlzKSk7XG5cdHJldHVybiAkcmVwbGFjZSgkcmVwbGFjZShTLCBsZWZ0V2hpdGVzcGFjZSwgJycpLCByaWdodFdoaXRlc3BhY2UsICcnKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBjYWxsQmluZCA9IHJlcXVpcmUoJ2NhbGwtYmluZCcpO1xudmFyIGRlZmluZSA9IHJlcXVpcmUoJ2RlZmluZS1wcm9wZXJ0aWVzJyk7XG52YXIgUmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJ2VzLW9iamVjdC1hdG9tcy9SZXF1aXJlT2JqZWN0Q29lcmNpYmxlJyk7XG5cbnZhciBpbXBsZW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vaW1wbGVtZW50YXRpb24nKTtcbnZhciBnZXRQb2x5ZmlsbCA9IHJlcXVpcmUoJy4vcG9seWZpbGwnKTtcbnZhciBzaGltID0gcmVxdWlyZSgnLi9zaGltJyk7XG5cbnZhciBib3VuZCA9IGNhbGxCaW5kKGdldFBvbHlmaWxsKCkpO1xudmFyIGJvdW5kTWV0aG9kID0gZnVuY3Rpb24gdHJpbShyZWNlaXZlcikge1xuXHRSZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHJlY2VpdmVyKTtcblx0cmV0dXJuIGJvdW5kKHJlY2VpdmVyKTtcbn07XG5cbmRlZmluZShib3VuZE1ldGhvZCwge1xuXHRnZXRQb2x5ZmlsbDogZ2V0UG9seWZpbGwsXG5cdGltcGxlbWVudGF0aW9uOiBpbXBsZW1lbnRhdGlvbixcblx0c2hpbTogc2hpbVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gYm91bmRNZXRob2Q7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpbXBsZW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vaW1wbGVtZW50YXRpb24nKTtcblxudmFyIHplcm9XaWR0aFNwYWNlID0gJ1xcdTIwMGInO1xudmFyIG1vbmdvbGlhblZvd2VsU2VwYXJhdG9yID0gJ1xcdTE4MEUnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdldFBvbHlmaWxsKCkge1xuXHRpZiAoXG5cdFx0U3RyaW5nLnByb3RvdHlwZS50cmltXG5cdFx0JiYgemVyb1dpZHRoU3BhY2UudHJpbSgpID09PSB6ZXJvV2lkdGhTcGFjZVxuXHRcdCYmIG1vbmdvbGlhblZvd2VsU2VwYXJhdG9yLnRyaW0oKSA9PT0gbW9uZ29saWFuVm93ZWxTZXBhcmF0b3Jcblx0XHQmJiAoJ18nICsgbW9uZ29saWFuVm93ZWxTZXBhcmF0b3IpLnRyaW0oKSA9PT0gKCdfJyArIG1vbmdvbGlhblZvd2VsU2VwYXJhdG9yKVxuXHRcdCYmIChtb25nb2xpYW5Wb3dlbFNlcGFyYXRvciArICdfJykudHJpbSgpID09PSAobW9uZ29saWFuVm93ZWxTZXBhcmF0b3IgKyAnXycpXG5cdCkge1xuXHRcdHJldHVybiBTdHJpbmcucHJvdG90eXBlLnRyaW07XG5cdH1cblx0cmV0dXJuIGltcGxlbWVudGF0aW9uO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGRlZmluZSA9IHJlcXVpcmUoJ2RlZmluZS1wcm9wZXJ0aWVzJyk7XG52YXIgZ2V0UG9seWZpbGwgPSByZXF1aXJlKCcuL3BvbHlmaWxsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2hpbVN0cmluZ1RyaW0oKSB7XG5cdHZhciBwb2x5ZmlsbCA9IGdldFBvbHlmaWxsKCk7XG5cdGRlZmluZShTdHJpbmcucHJvdG90eXBlLCB7IHRyaW06IHBvbHlmaWxsIH0sIHtcblx0XHR0cmltOiBmdW5jdGlvbiB0ZXN0VHJpbSgpIHtcblx0XHRcdHJldHVybiBTdHJpbmcucHJvdG90eXBlLnRyaW0gIT09IHBvbHlmaWxsO1xuXHRcdH1cblx0fSk7XG5cdHJldHVybiBwb2x5ZmlsbDtcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRE9NID0gW107XG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG4gICAgaWYgKGluZGV4QnlJZGVudGlmaWVyICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB1cGRhdGVyID0gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucyk7XG4gICAgICBvcHRpb25zLmJ5SW5kZXggPSBpO1xuICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKGksIDAsIHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogdXBkYXRlcixcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuZnVuY3Rpb24gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgYXBpID0gb3B0aW9ucy5kb21BUEkob3B0aW9ucyk7XG4gIGFwaS51cGRhdGUob2JqKTtcbiAgdmFyIHVwZGF0ZXIgPSBmdW5jdGlvbiB1cGRhdGVyKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXAgJiYgbmV3T2JqLnN1cHBvcnRzID09PSBvYmouc3VwcG9ydHMgJiYgbmV3T2JqLmxheWVyID09PSBvYmoubGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gdXBkYXRlcjtcbn1cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuICAgICAgaWYgKHN0eWxlc0luRE9NW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRPTVtfaW5kZXhdLnVwZGF0ZXIoKTtcbiAgICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcblxuICAgIC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG4gICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuICByZXR1cm4gbWVtb1t0YXJnZXRdO1xufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydEJ5U2VsZWN0b3IoaW5zZXJ0LCBzdHlsZSkge1xuICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGluc2VydCk7XG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRCeVNlbGVjdG9yOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICBvcHRpb25zLnNldEF0dHJpYnV0ZXMoZWxlbWVudCwgb3B0aW9ucy5hdHRyaWJ1dGVzKTtcbiAgb3B0aW9ucy5pbnNlcnQoZWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydFN0eWxlRWxlbWVudDsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcbiAgaWYgKG5vbmNlKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IFwiXCI7XG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChvYmouc3VwcG9ydHMsIFwiKSB7XCIpO1xuICB9XG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKTtcbiAgfVxuICB2YXIgbmVlZExheWVyID0gdHlwZW9mIG9iai5sYXllciAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIkBsYXllclwiLmNvbmNhdChvYmoubGF5ZXIubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChvYmoubGF5ZXIpIDogXCJcIiwgXCIge1wiKTtcbiAgfVxuICBjc3MgKz0gb2JqLmNzcztcbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfVxuXG4gIC8vIEZvciBvbGQgSUVcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuICBvcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xufVxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlRWxlbWVudC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudCk7XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gZG9tQVBJKG9wdGlvbnMpIHtcbiAgaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHJldHVybiB7XG4gICAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSgpIHt9LFxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7fVxuICAgIH07XG4gIH1cbiAgdmFyIHN0eWxlRWxlbWVudCA9IG9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKG9iaikge1xuICAgICAgYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KTtcbiAgICB9XG4gIH07XG59XG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG4gICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHN0eWxlVGFnVHJhbnNmb3JtOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJ2dldC1pbnRyaW5zaWMnKTtcblxudmFyICRBcnJheVByb3RvdHlwZSA9IEdldEludHJpbnNpYygnJUFycmF5LnByb3RvdHlwZSUnKTtcbnZhciAkUmFuZ2VFcnJvciA9IHJlcXVpcmUoJ2VzLWVycm9ycy9yYW5nZScpO1xudmFyICRTeW50YXhFcnJvciA9IHJlcXVpcmUoJ2VzLWVycm9ycy9zeW50YXgnKTtcbnZhciAkVHlwZUVycm9yID0gcmVxdWlyZSgnZXMtZXJyb3JzL3R5cGUnKTtcblxudmFyIGlzSW50ZWdlciA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvaXNJbnRlZ2VyJyk7XG5cbnZhciBNQVhfQVJSQVlfTEVOR1RIID0gTWF0aC5wb3coMiwgMzIpIC0gMTtcblxudmFyIGhhc1Byb3RvID0gcmVxdWlyZSgnaGFzLXByb3RvJykoKTtcblxudmFyICRzZXRQcm90byA9IEdldEludHJpbnNpYygnJU9iamVjdC5zZXRQcm90b3R5cGVPZiUnLCB0cnVlKSB8fCAoXG5cdGhhc1Byb3RvXG5cdFx0PyBmdW5jdGlvbiAoTywgcHJvdG8pIHtcblx0XHRcdE8uX19wcm90b19fID0gcHJvdG87IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcHJvdG8sIG5vLXBhcmFtLXJlYXNzaWduXG5cdFx0XHRyZXR1cm4gTztcblx0XHR9XG5cdFx0OiBudWxsXG4pO1xuXG4vLyBodHRwczovLzI2Mi5lY21hLWludGVybmF0aW9uYWwub3JnLzEyLjAvI3NlYy1hcnJheWNyZWF0ZVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIEFycmF5Q3JlYXRlKGxlbmd0aCkge1xuXHRpZiAoIWlzSW50ZWdlcihsZW5ndGgpIHx8IGxlbmd0aCA8IDApIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogYGxlbmd0aGAgbXVzdCBiZSBhbiBpbnRlZ2VyIE51bWJlciA+PSAwJyk7XG5cdH1cblx0aWYgKGxlbmd0aCA+IE1BWF9BUlJBWV9MRU5HVEgpIHtcblx0XHR0aHJvdyBuZXcgJFJhbmdlRXJyb3IoJ2xlbmd0aCBpcyBncmVhdGVyIHRoYW4gKDIqKjMyIC0gMSknKTtcblx0fVxuXHR2YXIgcHJvdG8gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6ICRBcnJheVByb3RvdHlwZTtcblx0dmFyIEEgPSBbXTsgLy8gc3RlcHMgMywgNVxuXHRpZiAocHJvdG8gIT09ICRBcnJheVByb3RvdHlwZSkgeyAvLyBzdGVwIDRcblx0XHRpZiAoISRzZXRQcm90bykge1xuXHRcdFx0dGhyb3cgbmV3ICRTeW50YXhFcnJvcignQXJyYXlDcmVhdGU6IGEgYHByb3RvYCBhcmd1bWVudCB0aGF0IGlzIG5vdCBgQXJyYXkucHJvdG90eXBlYCBpcyBub3Qgc3VwcG9ydGVkIGluIGFuIGVudmlyb25tZW50IHRoYXQgZG9lcyBub3Qgc3VwcG9ydCBzZXR0aW5nIHRoZSBbW1Byb3RvdHlwZV1dJyk7XG5cdFx0fVxuXHRcdCRzZXRQcm90byhBLCBwcm90byk7XG5cdH1cblx0aWYgKGxlbmd0aCAhPT0gMCkgeyAvLyBieXBhc3NlcyB0aGUgbmVlZCBmb3Igc3RlcCA2XG5cdFx0QS5sZW5ndGggPSBsZW5ndGg7XG5cdH1cblx0Lyogc3RlcCA2LCB0aGUgYWJvdmUgYXMgYSBzaG9ydGN1dCBmb3IgdGhlIGJlbG93XG5cdE9yZGluYXJ5RGVmaW5lT3duUHJvcGVydHkoQSwgJ2xlbmd0aCcsIHtcblx0XHQnW1tDb25maWd1cmFibGVdXSc6IGZhbHNlLFxuXHRcdCdbW0VudW1lcmFibGVdXSc6IGZhbHNlLFxuXHRcdCdbW1ZhbHVlXV0nOiBsZW5ndGgsXG5cdFx0J1tbV3JpdGFibGVdXSc6IHRydWVcblx0fSk7XG5cdCovXG5cdHJldHVybiBBO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJ2dldC1pbnRyaW5zaWMnKTtcblxudmFyICRzcGVjaWVzID0gR2V0SW50cmluc2ljKCclU3ltYm9sLnNwZWNpZXMlJywgdHJ1ZSk7XG52YXIgJFR5cGVFcnJvciA9IHJlcXVpcmUoJ2VzLWVycm9ycy90eXBlJyk7XG5cbnZhciBBcnJheUNyZWF0ZSA9IHJlcXVpcmUoJy4vQXJyYXlDcmVhdGUnKTtcbnZhciBHZXQgPSByZXF1aXJlKCcuL0dldCcpO1xudmFyIElzQXJyYXkgPSByZXF1aXJlKCcuL0lzQXJyYXknKTtcbnZhciBJc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9Jc0NvbnN0cnVjdG9yJyk7XG52YXIgVHlwZSA9IHJlcXVpcmUoJy4vVHlwZScpO1xuXG52YXIgaXNJbnRlZ2VyID0gcmVxdWlyZSgnLi4vaGVscGVycy9pc0ludGVnZXInKTtcblxuLy8gaHR0cHM6Ly8yNjIuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy8xMi4wLyNzZWMtYXJyYXlzcGVjaWVzY3JlYXRlXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gQXJyYXlTcGVjaWVzQ3JlYXRlKG9yaWdpbmFsQXJyYXksIGxlbmd0aCkge1xuXHRpZiAoIWlzSW50ZWdlcihsZW5ndGgpIHx8IGxlbmd0aCA8IDApIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogbGVuZ3RoIG11c3QgYmUgYW4gaW50ZWdlciA+PSAwJyk7XG5cdH1cblxuXHR2YXIgaXNBcnJheSA9IElzQXJyYXkob3JpZ2luYWxBcnJheSk7XG5cdGlmICghaXNBcnJheSkge1xuXHRcdHJldHVybiBBcnJheUNyZWF0ZShsZW5ndGgpO1xuXHR9XG5cblx0dmFyIEMgPSBHZXQob3JpZ2luYWxBcnJheSwgJ2NvbnN0cnVjdG9yJyk7XG5cdC8vIFRPRE86IGZpZ3VyZSBvdXQgaG93IHRvIG1ha2UgYSBjcm9zcy1yZWFsbSBub3JtYWwgQXJyYXksIGEgc2FtZS1yZWFsbSBBcnJheVxuXHQvLyBpZiAoSXNDb25zdHJ1Y3RvcihDKSkge1xuXHQvLyBcdGlmIEMgaXMgYW5vdGhlciByZWFsbSdzIEFycmF5LCBDID0gdW5kZWZpbmVkXG5cdC8vIFx0T2JqZWN0LmdldFByb3RvdHlwZU9mKE9iamVjdC5nZXRQcm90b3R5cGVPZihPYmplY3QuZ2V0UHJvdG90eXBlT2YoQXJyYXkpKSkgPT09IG51bGwgP1xuXHQvLyB9XG5cdGlmICgkc3BlY2llcyAmJiBUeXBlKEMpID09PSAnT2JqZWN0Jykge1xuXHRcdEMgPSBHZXQoQywgJHNwZWNpZXMpO1xuXHRcdGlmIChDID09PSBudWxsKSB7XG5cdFx0XHRDID0gdm9pZCAwO1xuXHRcdH1cblx0fVxuXG5cdGlmICh0eXBlb2YgQyA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRyZXR1cm4gQXJyYXlDcmVhdGUobGVuZ3RoKTtcblx0fVxuXHRpZiAoIUlzQ29uc3RydWN0b3IoQykpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQyBtdXN0IGJlIGEgY29uc3RydWN0b3InKTtcblx0fVxuXHRyZXR1cm4gbmV3IEMobGVuZ3RoKTsgLy8gQ29uc3RydWN0KEMsIGxlbmd0aCk7XG59O1xuXG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCdnZXQtaW50cmluc2ljJyk7XG52YXIgY2FsbEJvdW5kID0gcmVxdWlyZSgnY2FsbC1iaW5kL2NhbGxCb3VuZCcpO1xuXG52YXIgJFR5cGVFcnJvciA9IHJlcXVpcmUoJ2VzLWVycm9ycy90eXBlJyk7XG5cbnZhciBJc0FycmF5ID0gcmVxdWlyZSgnLi9Jc0FycmF5Jyk7XG5cbnZhciAkYXBwbHkgPSBHZXRJbnRyaW5zaWMoJyVSZWZsZWN0LmFwcGx5JScsIHRydWUpIHx8IGNhbGxCb3VuZCgnRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5Jyk7XG5cbi8vIGh0dHBzOi8vMjYyLmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvNi4wLyNzZWMtY2FsbFxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIENhbGwoRiwgVikge1xuXHR2YXIgYXJndW1lbnRzTGlzdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogW107XG5cdGlmICghSXNBcnJheShhcmd1bWVudHNMaXN0KSkge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBvcHRpb25hbCBgYXJndW1lbnRzTGlzdGAsIGlmIHByb3ZpZGVkLCBtdXN0IGJlIGEgTGlzdCcpO1xuXHR9XG5cdHJldHVybiAkYXBwbHkoRiwgViwgYXJndW1lbnRzTGlzdCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgJFR5cGVFcnJvciA9IHJlcXVpcmUoJ2VzLWVycm9ycy90eXBlJyk7XG5cbnZhciBJc1Byb3BlcnR5S2V5ID0gcmVxdWlyZSgnLi9Jc1Byb3BlcnR5S2V5Jyk7XG52YXIgT3JkaW5hcnlEZWZpbmVPd25Qcm9wZXJ0eSA9IHJlcXVpcmUoJy4vT3JkaW5hcnlEZWZpbmVPd25Qcm9wZXJ0eScpO1xudmFyIFR5cGUgPSByZXF1aXJlKCcuL1R5cGUnKTtcblxuLy8gaHR0cHM6Ly8yNjIuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy82LjAvI3NlYy1jcmVhdGVkYXRhcHJvcGVydHlcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBDcmVhdGVEYXRhUHJvcGVydHkoTywgUCwgVikge1xuXHRpZiAoVHlwZShPKSAhPT0gJ09iamVjdCcpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogVHlwZShPKSBpcyBub3QgT2JqZWN0Jyk7XG5cdH1cblx0aWYgKCFJc1Byb3BlcnR5S2V5KFApKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IElzUHJvcGVydHlLZXkoUCkgaXMgbm90IHRydWUnKTtcblx0fVxuXHR2YXIgbmV3RGVzYyA9IHtcblx0XHQnW1tDb25maWd1cmFibGVdXSc6IHRydWUsXG5cdFx0J1tbRW51bWVyYWJsZV1dJzogdHJ1ZSxcblx0XHQnW1tWYWx1ZV1dJzogVixcblx0XHQnW1tXcml0YWJsZV1dJzogdHJ1ZVxuXHR9O1xuXHRyZXR1cm4gT3JkaW5hcnlEZWZpbmVPd25Qcm9wZXJ0eShPLCBQLCBuZXdEZXNjKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciAkVHlwZUVycm9yID0gcmVxdWlyZSgnZXMtZXJyb3JzL3R5cGUnKTtcblxudmFyIENyZWF0ZURhdGFQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vQ3JlYXRlRGF0YVByb3BlcnR5Jyk7XG52YXIgSXNQcm9wZXJ0eUtleSA9IHJlcXVpcmUoJy4vSXNQcm9wZXJ0eUtleScpO1xudmFyIFR5cGUgPSByZXF1aXJlKCcuL1R5cGUnKTtcblxuLy8gLy8gaHR0cHM6Ly8yNjIuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy8xNC4wLyNzZWMtY3JlYXRlZGF0YXByb3BlcnR5b3J0aHJvd1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIENyZWF0ZURhdGFQcm9wZXJ0eU9yVGhyb3coTywgUCwgVikge1xuXHRpZiAoVHlwZShPKSAhPT0gJ09iamVjdCcpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogVHlwZShPKSBpcyBub3QgT2JqZWN0Jyk7XG5cdH1cblx0aWYgKCFJc1Byb3BlcnR5S2V5KFApKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IElzUHJvcGVydHlLZXkoUCkgaXMgbm90IHRydWUnKTtcblx0fVxuXHR2YXIgc3VjY2VzcyA9IENyZWF0ZURhdGFQcm9wZXJ0eShPLCBQLCBWKTtcblx0aWYgKCFzdWNjZXNzKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ3VuYWJsZSB0byBjcmVhdGUgZGF0YSBwcm9wZXJ0eScpO1xuXHR9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgJFR5cGVFcnJvciA9IHJlcXVpcmUoJ2VzLWVycm9ycy90eXBlJyk7XG5cbnZhciBpc1Byb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvcmVjb3Jkcy9wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgRGVmaW5lT3duUHJvcGVydHkgPSByZXF1aXJlKCcuLi9oZWxwZXJzL0RlZmluZU93blByb3BlcnR5Jyk7XG5cbnZhciBGcm9tUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9Gcm9tUHJvcGVydHlEZXNjcmlwdG9yJyk7XG52YXIgSXNEYXRhRGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vSXNEYXRhRGVzY3JpcHRvcicpO1xudmFyIElzUHJvcGVydHlLZXkgPSByZXF1aXJlKCcuL0lzUHJvcGVydHlLZXknKTtcbnZhciBTYW1lVmFsdWUgPSByZXF1aXJlKCcuL1NhbWVWYWx1ZScpO1xudmFyIFRvUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9Ub1Byb3BlcnR5RGVzY3JpcHRvcicpO1xudmFyIFR5cGUgPSByZXF1aXJlKCcuL1R5cGUnKTtcblxuLy8gaHR0cHM6Ly8yNjIuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy82LjAvI3NlYy1kZWZpbmVwcm9wZXJ0eW9ydGhyb3dcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBEZWZpbmVQcm9wZXJ0eU9yVGhyb3coTywgUCwgZGVzYykge1xuXHRpZiAoVHlwZShPKSAhPT0gJ09iamVjdCcpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogVHlwZShPKSBpcyBub3QgT2JqZWN0Jyk7XG5cdH1cblxuXHRpZiAoIUlzUHJvcGVydHlLZXkoUCkpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogSXNQcm9wZXJ0eUtleShQKSBpcyBub3QgdHJ1ZScpO1xuXHR9XG5cblx0dmFyIERlc2MgPSBpc1Byb3BlcnR5RGVzY3JpcHRvcihkZXNjKSA/IGRlc2MgOiBUb1Byb3BlcnR5RGVzY3JpcHRvcihkZXNjKTtcblx0aWYgKCFpc1Byb3BlcnR5RGVzY3JpcHRvcihEZXNjKSkge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBEZXNjIGlzIG5vdCBhIHZhbGlkIFByb3BlcnR5IERlc2NyaXB0b3InKTtcblx0fVxuXG5cdHJldHVybiBEZWZpbmVPd25Qcm9wZXJ0eShcblx0XHRJc0RhdGFEZXNjcmlwdG9yLFxuXHRcdFNhbWVWYWx1ZSxcblx0XHRGcm9tUHJvcGVydHlEZXNjcmlwdG9yLFxuXHRcdE8sXG5cdFx0UCxcblx0XHREZXNjXG5cdCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgJFR5cGVFcnJvciA9IHJlcXVpcmUoJ2VzLWVycm9ycy90eXBlJyk7XG5cbnZhciBNQVhfU0FGRV9JTlRFR0VSID0gcmVxdWlyZSgnLi4vaGVscGVycy9tYXhTYWZlSW50ZWdlcicpO1xuXG52YXIgQ2FsbCA9IHJlcXVpcmUoJy4vQ2FsbCcpO1xudmFyIENyZWF0ZURhdGFQcm9wZXJ0eU9yVGhyb3cgPSByZXF1aXJlKCcuL0NyZWF0ZURhdGFQcm9wZXJ0eU9yVGhyb3cnKTtcbnZhciBHZXQgPSByZXF1aXJlKCcuL0dldCcpO1xudmFyIEhhc1Byb3BlcnR5ID0gcmVxdWlyZSgnLi9IYXNQcm9wZXJ0eScpO1xudmFyIElzQXJyYXkgPSByZXF1aXJlKCcuL0lzQXJyYXknKTtcbnZhciBMZW5ndGhPZkFycmF5TGlrZSA9IHJlcXVpcmUoJy4vTGVuZ3RoT2ZBcnJheUxpa2UnKTtcbnZhciBUb1N0cmluZyA9IHJlcXVpcmUoJy4vVG9TdHJpbmcnKTtcblxuLy8gaHR0cHM6Ly8yNjIuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy8xMS4wLyNzZWMtZmxhdHRlbmludG9hcnJheVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIEZsYXR0ZW5JbnRvQXJyYXkodGFyZ2V0LCBzb3VyY2UsIHNvdXJjZUxlbiwgc3RhcnQsIGRlcHRoKSB7XG5cdHZhciBtYXBwZXJGdW5jdGlvbjtcblx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPiA1KSB7XG5cdFx0bWFwcGVyRnVuY3Rpb24gPSBhcmd1bWVudHNbNV07XG5cdH1cblxuXHR2YXIgdGFyZ2V0SW5kZXggPSBzdGFydDtcblx0dmFyIHNvdXJjZUluZGV4ID0gMDtcblx0d2hpbGUgKHNvdXJjZUluZGV4IDwgc291cmNlTGVuKSB7XG5cdFx0dmFyIFAgPSBUb1N0cmluZyhzb3VyY2VJbmRleCk7XG5cdFx0dmFyIGV4aXN0cyA9IEhhc1Byb3BlcnR5KHNvdXJjZSwgUCk7XG5cdFx0aWYgKGV4aXN0cyA9PT0gdHJ1ZSkge1xuXHRcdFx0dmFyIGVsZW1lbnQgPSBHZXQoc291cmNlLCBQKTtcblx0XHRcdGlmICh0eXBlb2YgbWFwcGVyRnVuY3Rpb24gIT09ICd1bmRlZmluZWQnKSB7XG5cdFx0XHRcdGlmIChhcmd1bWVudHMubGVuZ3RoIDw9IDYpIHtcblx0XHRcdFx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogdGhpc0FyZyBpcyByZXF1aXJlZCB3aGVuIG1hcHBlckZ1bmN0aW9uIGlzIHByb3ZpZGVkJyk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxlbWVudCA9IENhbGwobWFwcGVyRnVuY3Rpb24sIGFyZ3VtZW50c1s2XSwgW2VsZW1lbnQsIHNvdXJjZUluZGV4LCBzb3VyY2VdKTtcblx0XHRcdH1cblx0XHRcdHZhciBzaG91bGRGbGF0dGVuID0gZmFsc2U7XG5cdFx0XHRpZiAoZGVwdGggPiAwKSB7XG5cdFx0XHRcdHNob3VsZEZsYXR0ZW4gPSBJc0FycmF5KGVsZW1lbnQpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHNob3VsZEZsYXR0ZW4pIHtcblx0XHRcdFx0dmFyIGVsZW1lbnRMZW4gPSBMZW5ndGhPZkFycmF5TGlrZShlbGVtZW50KTtcblx0XHRcdFx0dGFyZ2V0SW5kZXggPSBGbGF0dGVuSW50b0FycmF5KHRhcmdldCwgZWxlbWVudCwgZWxlbWVudExlbiwgdGFyZ2V0SW5kZXgsIGRlcHRoIC0gMSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpZiAodGFyZ2V0SW5kZXggPj0gTUFYX1NBRkVfSU5URUdFUikge1xuXHRcdFx0XHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdpbmRleCB0b28gbGFyZ2UnKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRDcmVhdGVEYXRhUHJvcGVydHlPclRocm93KHRhcmdldCwgVG9TdHJpbmcodGFyZ2V0SW5kZXgpLCBlbGVtZW50KTtcblx0XHRcdFx0dGFyZ2V0SW5kZXggKz0gMTtcblx0XHRcdH1cblx0XHR9XG5cdFx0c291cmNlSW5kZXggKz0gMTtcblx0fVxuXG5cdHJldHVybiB0YXJnZXRJbmRleDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciAkVHlwZUVycm9yID0gcmVxdWlyZSgnZXMtZXJyb3JzL3R5cGUnKTtcblxudmFyIGlzUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaGVscGVycy9yZWNvcmRzL3Byb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBmcm9tUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaGVscGVycy9mcm9tUHJvcGVydHlEZXNjcmlwdG9yJyk7XG5cbi8vIGh0dHBzOi8vMjYyLmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvNi4wLyNzZWMtZnJvbXByb3BlcnR5ZGVzY3JpcHRvclxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIEZyb21Qcm9wZXJ0eURlc2NyaXB0b3IoRGVzYykge1xuXHRpZiAodHlwZW9mIERlc2MgIT09ICd1bmRlZmluZWQnICYmICFpc1Byb3BlcnR5RGVzY3JpcHRvcihEZXNjKSkge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBgRGVzY2AgbXVzdCBiZSBhIFByb3BlcnR5IERlc2NyaXB0b3InKTtcblx0fVxuXG5cdHJldHVybiBmcm9tUHJvcGVydHlEZXNjcmlwdG9yKERlc2MpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyICRUeXBlRXJyb3IgPSByZXF1aXJlKCdlcy1lcnJvcnMvdHlwZScpO1xuXG52YXIgaW5zcGVjdCA9IHJlcXVpcmUoJ29iamVjdC1pbnNwZWN0Jyk7XG5cbnZhciBJc1Byb3BlcnR5S2V5ID0gcmVxdWlyZSgnLi9Jc1Byb3BlcnR5S2V5Jyk7XG52YXIgVHlwZSA9IHJlcXVpcmUoJy4vVHlwZScpO1xuXG4vLyBodHRwczovLzI2Mi5lY21hLWludGVybmF0aW9uYWwub3JnLzYuMC8jc2VjLWdldC1vLXBcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBHZXQoTywgUCkge1xuXHQvLyA3LjMuMS4xXG5cdGlmIChUeXBlKE8pICE9PSAnT2JqZWN0Jykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBUeXBlKE8pIGlzIG5vdCBPYmplY3QnKTtcblx0fVxuXHQvLyA3LjMuMS4yXG5cdGlmICghSXNQcm9wZXJ0eUtleShQKSkge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBJc1Byb3BlcnR5S2V5KFApIGlzIG5vdCB0cnVlLCBnb3QgJyArIGluc3BlY3QoUCkpO1xuXHR9XG5cdC8vIDcuMy4xLjNcblx0cmV0dXJuIE9bUF07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgJFR5cGVFcnJvciA9IHJlcXVpcmUoJ2VzLWVycm9ycy90eXBlJyk7XG5cbnZhciBoYXNPd24gPSByZXF1aXJlKCdoYXNvd24nKTtcblxudmFyIElzUHJvcGVydHlLZXkgPSByZXF1aXJlKCcuL0lzUHJvcGVydHlLZXknKTtcbnZhciBUeXBlID0gcmVxdWlyZSgnLi9UeXBlJyk7XG5cbi8vIGh0dHBzOi8vMjYyLmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvNi4wLyNzZWMtaGFzb3ducHJvcGVydHlcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBIYXNPd25Qcm9wZXJ0eShPLCBQKSB7XG5cdGlmIChUeXBlKE8pICE9PSAnT2JqZWN0Jykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBgT2AgbXVzdCBiZSBhbiBPYmplY3QnKTtcblx0fVxuXHRpZiAoIUlzUHJvcGVydHlLZXkoUCkpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogYFBgIG11c3QgYmUgYSBQcm9wZXJ0eSBLZXknKTtcblx0fVxuXHRyZXR1cm4gaGFzT3duKE8sIFApO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyICRUeXBlRXJyb3IgPSByZXF1aXJlKCdlcy1lcnJvcnMvdHlwZScpO1xuXG52YXIgSXNQcm9wZXJ0eUtleSA9IHJlcXVpcmUoJy4vSXNQcm9wZXJ0eUtleScpO1xudmFyIFR5cGUgPSByZXF1aXJlKCcuL1R5cGUnKTtcblxuLy8gaHR0cHM6Ly8yNjIuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy82LjAvI3NlYy1oYXNwcm9wZXJ0eVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIEhhc1Byb3BlcnR5KE8sIFApIHtcblx0aWYgKFR5cGUoTykgIT09ICdPYmplY3QnKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IGBPYCBtdXN0IGJlIGFuIE9iamVjdCcpO1xuXHR9XG5cdGlmICghSXNQcm9wZXJ0eUtleShQKSkge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBgUGAgbXVzdCBiZSBhIFByb3BlcnR5IEtleScpO1xuXHR9XG5cdHJldHVybiBQIGluIE87XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgJFR5cGVFcnJvciA9IHJlcXVpcmUoJ2VzLWVycm9ycy90eXBlJyk7XG5cbnZhciBoYXNPd24gPSByZXF1aXJlKCdoYXNvd24nKTtcblxudmFyIGlzUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaGVscGVycy9yZWNvcmRzL3Byb3BlcnR5LWRlc2NyaXB0b3InKTtcblxuLy8gaHR0cHM6Ly8yNjIuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy81LjEvI3NlYy04LjEwLjFcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBJc0FjY2Vzc29yRGVzY3JpcHRvcihEZXNjKSB7XG5cdGlmICh0eXBlb2YgRGVzYyA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRpZiAoIWlzUHJvcGVydHlEZXNjcmlwdG9yKERlc2MpKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IGBEZXNjYCBtdXN0IGJlIGEgUHJvcGVydHkgRGVzY3JpcHRvcicpO1xuXHR9XG5cblx0aWYgKCFoYXNPd24oRGVzYywgJ1tbR2V0XV0nKSAmJiAhaGFzT3duKERlc2MsICdbW1NldF1dJykpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRyZXR1cm4gdHJ1ZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8vIGh0dHBzOi8vMjYyLmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvNi4wLyNzZWMtaXNhcnJheVxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi9oZWxwZXJzL0lzQXJyYXknKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLy8gaHR0cDovLzI2Mi5lY21hLWludGVybmF0aW9uYWwub3JnLzUuMS8jc2VjLTkuMTFcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCdpcy1jYWxsYWJsZScpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnLi4vR2V0SW50cmluc2ljLmpzJyk7XG5cbnZhciAkY29uc3RydWN0ID0gR2V0SW50cmluc2ljKCclUmVmbGVjdC5jb25zdHJ1Y3QlJywgdHJ1ZSk7XG5cbnZhciBEZWZpbmVQcm9wZXJ0eU9yVGhyb3cgPSByZXF1aXJlKCcuL0RlZmluZVByb3BlcnR5T3JUaHJvdycpO1xudHJ5IHtcblx0RGVmaW5lUHJvcGVydHlPclRocm93KHt9LCAnJywgeyAnW1tHZXRdXSc6IGZ1bmN0aW9uICgpIHt9IH0pO1xufSBjYXRjaCAoZSkge1xuXHQvLyBBY2Nlc3NvciBwcm9wZXJ0aWVzIGFyZW4ndCBzdXBwb3J0ZWRcblx0RGVmaW5lUHJvcGVydHlPclRocm93ID0gbnVsbDtcbn1cblxuLy8gaHR0cHM6Ly8yNjIuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy82LjAvI3NlYy1pc2NvbnN0cnVjdG9yXG5cbmlmIChEZWZpbmVQcm9wZXJ0eU9yVGhyb3cgJiYgJGNvbnN0cnVjdCkge1xuXHR2YXIgaXNDb25zdHJ1Y3Rvck1hcmtlciA9IHt9O1xuXHR2YXIgYmFkQXJyYXlMaWtlID0ge307XG5cdERlZmluZVByb3BlcnR5T3JUaHJvdyhiYWRBcnJheUxpa2UsICdsZW5ndGgnLCB7XG5cdFx0J1tbR2V0XV0nOiBmdW5jdGlvbiAoKSB7XG5cdFx0XHR0aHJvdyBpc0NvbnN0cnVjdG9yTWFya2VyO1xuXHRcdH0sXG5cdFx0J1tbRW51bWVyYWJsZV1dJzogdHJ1ZVxuXHR9KTtcblxuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIElzQ29uc3RydWN0b3IoYXJndW1lbnQpIHtcblx0XHR0cnkge1xuXHRcdFx0Ly8gYFJlZmxlY3QuY29uc3RydWN0YCBpbnZva2VzIGBJc0NvbnN0cnVjdG9yKHRhcmdldClgIGJlZm9yZSBgR2V0KGFyZ3MsICdsZW5ndGgnKWA6XG5cdFx0XHQkY29uc3RydWN0KGFyZ3VtZW50LCBiYWRBcnJheUxpa2UpO1xuXHRcdH0gY2F0Y2ggKGVycikge1xuXHRcdFx0cmV0dXJuIGVyciA9PT0gaXNDb25zdHJ1Y3Rvck1hcmtlcjtcblx0XHR9XG5cdH07XG59IGVsc2Uge1xuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIElzQ29uc3RydWN0b3IoYXJndW1lbnQpIHtcblx0XHQvLyB1bmZvcnR1bmF0ZWx5IHRoZXJlJ3Mgbm8gd2F5IHRvIHRydWx5IGNoZWNrIHRoaXMgd2l0aG91dCB0cnkvY2F0Y2ggYG5ldyBhcmd1bWVudGAgaW4gb2xkIGVudmlyb25tZW50c1xuXHRcdHJldHVybiB0eXBlb2YgYXJndW1lbnQgPT09ICdmdW5jdGlvbicgJiYgISFhcmd1bWVudC5wcm90b3R5cGU7XG5cdH07XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciAkVHlwZUVycm9yID0gcmVxdWlyZSgnZXMtZXJyb3JzL3R5cGUnKTtcblxudmFyIGhhc093biA9IHJlcXVpcmUoJ2hhc293bicpO1xuXG52YXIgaXNQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9oZWxwZXJzL3JlY29yZHMvcHJvcGVydHktZGVzY3JpcHRvcicpO1xuXG4vLyBodHRwczovLzI2Mi5lY21hLWludGVybmF0aW9uYWwub3JnLzUuMS8jc2VjLTguMTAuMlxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIElzRGF0YURlc2NyaXB0b3IoRGVzYykge1xuXHRpZiAodHlwZW9mIERlc2MgPT09ICd1bmRlZmluZWQnKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0aWYgKCFpc1Byb3BlcnR5RGVzY3JpcHRvcihEZXNjKSkge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBgRGVzY2AgbXVzdCBiZSBhIFByb3BlcnR5IERlc2NyaXB0b3InKTtcblx0fVxuXG5cdGlmICghaGFzT3duKERlc2MsICdbW1ZhbHVlXV0nKSAmJiAhaGFzT3duKERlc2MsICdbW1dyaXRhYmxlXV0nKSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdHJldHVybiB0cnVlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJ2dldC1pbnRyaW5zaWMnKTtcblxudmFyICRwcmV2ZW50RXh0ZW5zaW9ucyA9IEdldEludHJpbnNpYygnJU9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyUnLCB0cnVlKTtcbnZhciAkaXNFeHRlbnNpYmxlID0gR2V0SW50cmluc2ljKCclT2JqZWN0LmlzRXh0ZW5zaWJsZSUnLCB0cnVlKTtcblxudmFyIGlzUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaGVscGVycy9pc1ByaW1pdGl2ZScpO1xuXG4vLyBodHRwczovLzI2Mi5lY21hLWludGVybmF0aW9uYWwub3JnLzYuMC8jc2VjLWlzZXh0ZW5zaWJsZS1vXG5cbm1vZHVsZS5leHBvcnRzID0gJHByZXZlbnRFeHRlbnNpb25zXG5cdD8gZnVuY3Rpb24gSXNFeHRlbnNpYmxlKG9iaikge1xuXHRcdHJldHVybiAhaXNQcmltaXRpdmUob2JqKSAmJiAkaXNFeHRlbnNpYmxlKG9iaik7XG5cdH1cblx0OiBmdW5jdGlvbiBJc0V4dGVuc2libGUob2JqKSB7XG5cdFx0cmV0dXJuICFpc1ByaW1pdGl2ZShvYmopO1xuXHR9O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgJFR5cGVFcnJvciA9IHJlcXVpcmUoJ2VzLWVycm9ycy90eXBlJyk7XG5cbnZhciBJc0FjY2Vzc29yRGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vSXNBY2Nlc3NvckRlc2NyaXB0b3InKTtcbnZhciBJc0RhdGFEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9Jc0RhdGFEZXNjcmlwdG9yJyk7XG5cbnZhciBpc1Byb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvcmVjb3Jkcy9wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5cbi8vIGh0dHBzOi8vMjYyLmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvNi4wLyNzZWMtaXNnZW5lcmljZGVzY3JpcHRvclxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIElzR2VuZXJpY0Rlc2NyaXB0b3IoRGVzYykge1xuXHRpZiAodHlwZW9mIERlc2MgPT09ICd1bmRlZmluZWQnKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0aWYgKCFpc1Byb3BlcnR5RGVzY3JpcHRvcihEZXNjKSkge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBgRGVzY2AgbXVzdCBiZSBhIFByb3BlcnR5IERlc2NyaXB0b3InKTtcblx0fVxuXG5cdGlmICghSXNBY2Nlc3NvckRlc2NyaXB0b3IoRGVzYykgJiYgIUlzRGF0YURlc2NyaXB0b3IoRGVzYykpIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdHJldHVybiBmYWxzZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8vIGh0dHBzOi8vMjYyLmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvNi4wLyNzZWMtaXNwcm9wZXJ0eWtleVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIElzUHJvcGVydHlLZXkoYXJndW1lbnQpIHtcblx0cmV0dXJuIHR5cGVvZiBhcmd1bWVudCA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIGFyZ3VtZW50ID09PSAnc3ltYm9sJztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciAkVHlwZUVycm9yID0gcmVxdWlyZSgnZXMtZXJyb3JzL3R5cGUnKTtcblxudmFyIEdldCA9IHJlcXVpcmUoJy4vR2V0Jyk7XG52YXIgVG9MZW5ndGggPSByZXF1aXJlKCcuL1RvTGVuZ3RoJyk7XG52YXIgVHlwZSA9IHJlcXVpcmUoJy4vVHlwZScpO1xuXG4vLyBodHRwczovLzI2Mi5lY21hLWludGVybmF0aW9uYWwub3JnLzExLjAvI3NlYy1sZW5ndGhvZmFycmF5bGlrZVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIExlbmd0aE9mQXJyYXlMaWtlKG9iaikge1xuXHRpZiAoVHlwZShvYmopICE9PSAnT2JqZWN0Jykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBgb2JqYCBtdXN0IGJlIGFuIE9iamVjdCcpO1xuXHR9XG5cdHJldHVybiBUb0xlbmd0aChHZXQob2JqLCAnbGVuZ3RoJykpO1xufTtcblxuLy8gVE9ETzogdXNlIHRoaXMgYWxsIG92ZXJcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyICRnT1BEID0gcmVxdWlyZSgnZ29wZCcpO1xudmFyICRTeW50YXhFcnJvciA9IHJlcXVpcmUoJ2VzLWVycm9ycy9zeW50YXgnKTtcbnZhciAkVHlwZUVycm9yID0gcmVxdWlyZSgnZXMtZXJyb3JzL3R5cGUnKTtcblxudmFyIGlzUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaGVscGVycy9yZWNvcmRzL3Byb3BlcnR5LWRlc2NyaXB0b3InKTtcblxudmFyIElzQWNjZXNzb3JEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9Jc0FjY2Vzc29yRGVzY3JpcHRvcicpO1xudmFyIElzRXh0ZW5zaWJsZSA9IHJlcXVpcmUoJy4vSXNFeHRlbnNpYmxlJyk7XG52YXIgSXNQcm9wZXJ0eUtleSA9IHJlcXVpcmUoJy4vSXNQcm9wZXJ0eUtleScpO1xudmFyIFRvUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9Ub1Byb3BlcnR5RGVzY3JpcHRvcicpO1xudmFyIFNhbWVWYWx1ZSA9IHJlcXVpcmUoJy4vU2FtZVZhbHVlJyk7XG52YXIgVHlwZSA9IHJlcXVpcmUoJy4vVHlwZScpO1xudmFyIFZhbGlkYXRlQW5kQXBwbHlQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuL1ZhbGlkYXRlQW5kQXBwbHlQcm9wZXJ0eURlc2NyaXB0b3InKTtcblxuLy8gaHR0cHM6Ly8yNjIuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy82LjAvI3NlYy1vcmRpbmFyeWRlZmluZW93bnByb3BlcnR5XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gT3JkaW5hcnlEZWZpbmVPd25Qcm9wZXJ0eShPLCBQLCBEZXNjKSB7XG5cdGlmIChUeXBlKE8pICE9PSAnT2JqZWN0Jykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBPIG11c3QgYmUgYW4gT2JqZWN0Jyk7XG5cdH1cblx0aWYgKCFJc1Byb3BlcnR5S2V5KFApKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IFAgbXVzdCBiZSBhIFByb3BlcnR5IEtleScpO1xuXHR9XG5cdGlmICghaXNQcm9wZXJ0eURlc2NyaXB0b3IoRGVzYykpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogRGVzYyBtdXN0IGJlIGEgUHJvcGVydHkgRGVzY3JpcHRvcicpO1xuXHR9XG5cdGlmICghJGdPUEQpIHtcblx0XHQvLyBFUzMvSUUgOCBmYWxsYmFja1xuXHRcdGlmIChJc0FjY2Vzc29yRGVzY3JpcHRvcihEZXNjKSkge1xuXHRcdFx0dGhyb3cgbmV3ICRTeW50YXhFcnJvcignVGhpcyBlbnZpcm9ubWVudCBkb2VzIG5vdCBzdXBwb3J0IGFjY2Vzc29yIHByb3BlcnR5IGRlc2NyaXB0b3JzLicpO1xuXHRcdH1cblx0XHR2YXIgY3JlYXRpbmdOb3JtYWxEYXRhUHJvcGVydHkgPSAhKFAgaW4gTylcblx0XHRcdCYmIERlc2NbJ1tbV3JpdGFibGVdXSddXG5cdFx0XHQmJiBEZXNjWydbW0VudW1lcmFibGVdXSddXG5cdFx0XHQmJiBEZXNjWydbW0NvbmZpZ3VyYWJsZV1dJ11cblx0XHRcdCYmICdbW1ZhbHVlXV0nIGluIERlc2M7XG5cdFx0dmFyIHNldHRpbmdFeGlzdGluZ0RhdGFQcm9wZXJ0eSA9IChQIGluIE8pXG5cdFx0XHQmJiAoISgnW1tDb25maWd1cmFibGVdXScgaW4gRGVzYykgfHwgRGVzY1snW1tDb25maWd1cmFibGVdXSddKVxuXHRcdFx0JiYgKCEoJ1tbRW51bWVyYWJsZV1dJyBpbiBEZXNjKSB8fCBEZXNjWydbW0VudW1lcmFibGVdXSddKVxuXHRcdFx0JiYgKCEoJ1tbV3JpdGFibGVdXScgaW4gRGVzYykgfHwgRGVzY1snW1tXcml0YWJsZV1dJ10pXG5cdFx0XHQmJiAnW1tWYWx1ZV1dJyBpbiBEZXNjO1xuXHRcdGlmIChjcmVhdGluZ05vcm1hbERhdGFQcm9wZXJ0eSB8fCBzZXR0aW5nRXhpc3RpbmdEYXRhUHJvcGVydHkpIHtcblx0XHRcdE9bUF0gPSBEZXNjWydbW1ZhbHVlXV0nXTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuXHRcdFx0cmV0dXJuIFNhbWVWYWx1ZShPW1BdLCBEZXNjWydbW1ZhbHVlXV0nXSk7XG5cdFx0fVxuXHRcdHRocm93IG5ldyAkU3ludGF4RXJyb3IoJ1RoaXMgZW52aXJvbm1lbnQgZG9lcyBub3Qgc3VwcG9ydCBkZWZpbmluZyBub24td3JpdGFibGUsIG5vbi1lbnVtZXJhYmxlLCBvciBub24tY29uZmlndXJhYmxlIHByb3BlcnRpZXMnKTtcblx0fVxuXHR2YXIgZGVzYyA9ICRnT1BEKE8sIFApO1xuXHR2YXIgY3VycmVudCA9IGRlc2MgJiYgVG9Qcm9wZXJ0eURlc2NyaXB0b3IoZGVzYyk7XG5cdHZhciBleHRlbnNpYmxlID0gSXNFeHRlbnNpYmxlKE8pO1xuXHRyZXR1cm4gVmFsaWRhdGVBbmRBcHBseVByb3BlcnR5RGVzY3JpcHRvcihPLCBQLCBleHRlbnNpYmxlLCBEZXNjLCBjdXJyZW50KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciAkaXNOYU4gPSByZXF1aXJlKCcuLi9oZWxwZXJzL2lzTmFOJyk7XG5cbi8vIGh0dHA6Ly8yNjIuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy81LjEvI3NlYy05LjEyXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gU2FtZVZhbHVlKHgsIHkpIHtcblx0aWYgKHggPT09IHkpIHsgLy8gMCA9PT0gLTAsIGJ1dCB0aGV5IGFyZSBub3QgaWRlbnRpY2FsLlxuXHRcdGlmICh4ID09PSAwKSB7IHJldHVybiAxIC8geCA9PT0gMSAvIHk7IH1cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXHRyZXR1cm4gJGlzTmFOKHgpICYmICRpc05hTih5KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCdnZXQtaW50cmluc2ljJyk7XG5cbnZhciAkTnVtYmVyID0gR2V0SW50cmluc2ljKCclTnVtYmVyJScpO1xudmFyICRSZWdFeHAgPSBHZXRJbnRyaW5zaWMoJyVSZWdFeHAlJyk7XG52YXIgJFR5cGVFcnJvciA9IHJlcXVpcmUoJ2VzLWVycm9ycy90eXBlJyk7XG52YXIgJHBhcnNlSW50ZWdlciA9IEdldEludHJpbnNpYygnJXBhcnNlSW50JScpO1xuXG52YXIgY2FsbEJvdW5kID0gcmVxdWlyZSgnY2FsbC1iaW5kL2NhbGxCb3VuZCcpO1xudmFyIHJlZ2V4VGVzdGVyID0gcmVxdWlyZSgnc2FmZS1yZWdleC10ZXN0Jyk7XG5cbnZhciAkc3RyU2xpY2UgPSBjYWxsQm91bmQoJ1N0cmluZy5wcm90b3R5cGUuc2xpY2UnKTtcbnZhciBpc0JpbmFyeSA9IHJlZ2V4VGVzdGVyKC9eMGJbMDFdKyQvaSk7XG52YXIgaXNPY3RhbCA9IHJlZ2V4VGVzdGVyKC9eMG9bMC03XSskL2kpO1xudmFyIGlzSW52YWxpZEhleExpdGVyYWwgPSByZWdleFRlc3RlcigvXlstK10weFswLTlhLWZdKyQvaSk7XG52YXIgbm9uV1MgPSBbJ1xcdTAwODUnLCAnXFx1MjAwYicsICdcXHVmZmZlJ10uam9pbignJyk7XG52YXIgbm9uV1NyZWdleCA9IG5ldyAkUmVnRXhwKCdbJyArIG5vbldTICsgJ10nLCAnZycpO1xudmFyIGhhc05vbldTID0gcmVnZXhUZXN0ZXIobm9uV1NyZWdleCk7XG5cbnZhciAkdHJpbSA9IHJlcXVpcmUoJ3N0cmluZy5wcm90b3R5cGUudHJpbScpO1xuXG4vLyBodHRwczovLzI2Mi5lY21hLWludGVybmF0aW9uYWwub3JnLzEzLjAvI3NlYy1zdHJpbmd0b251bWJlclxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIFN0cmluZ1RvTnVtYmVyKGFyZ3VtZW50KSB7XG5cdGlmICh0eXBlb2YgYXJndW1lbnQgIT09ICdzdHJpbmcnKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IGBhcmd1bWVudGAgaXMgbm90IGEgU3RyaW5nJyk7XG5cdH1cblx0aWYgKGlzQmluYXJ5KGFyZ3VtZW50KSkge1xuXHRcdHJldHVybiAkTnVtYmVyKCRwYXJzZUludGVnZXIoJHN0clNsaWNlKGFyZ3VtZW50LCAyKSwgMikpO1xuXHR9XG5cdGlmIChpc09jdGFsKGFyZ3VtZW50KSkge1xuXHRcdHJldHVybiAkTnVtYmVyKCRwYXJzZUludGVnZXIoJHN0clNsaWNlKGFyZ3VtZW50LCAyKSwgOCkpO1xuXHR9XG5cdGlmIChoYXNOb25XUyhhcmd1bWVudCkgfHwgaXNJbnZhbGlkSGV4TGl0ZXJhbChhcmd1bWVudCkpIHtcblx0XHRyZXR1cm4gTmFOO1xuXHR9XG5cdHZhciB0cmltbWVkID0gJHRyaW0oYXJndW1lbnQpO1xuXHRpZiAodHJpbW1lZCAhPT0gYXJndW1lbnQpIHtcblx0XHRyZXR1cm4gU3RyaW5nVG9OdW1iZXIodHJpbW1lZCk7XG5cdH1cblx0cmV0dXJuICROdW1iZXIoYXJndW1lbnQpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLy8gaHR0cDovLzI2Mi5lY21hLWludGVybmF0aW9uYWwub3JnLzUuMS8jc2VjLTkuMlxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIFRvQm9vbGVhbih2YWx1ZSkgeyByZXR1cm4gISF2YWx1ZTsgfTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIFRvTnVtYmVyID0gcmVxdWlyZSgnLi9Ub051bWJlcicpO1xudmFyIHRydW5jYXRlID0gcmVxdWlyZSgnLi90cnVuY2F0ZScpO1xuXG52YXIgJGlzTmFOID0gcmVxdWlyZSgnLi4vaGVscGVycy9pc05hTicpO1xudmFyICRpc0Zpbml0ZSA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvaXNGaW5pdGUnKTtcblxuLy8gaHR0cHM6Ly8yNjIuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy8xNC4wLyNzZWMtdG9pbnRlZ2Vyb3JpbmZpbml0eVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIFRvSW50ZWdlck9ySW5maW5pdHkodmFsdWUpIHtcblx0dmFyIG51bWJlciA9IFRvTnVtYmVyKHZhbHVlKTtcblx0aWYgKCRpc05hTihudW1iZXIpIHx8IG51bWJlciA9PT0gMCkgeyByZXR1cm4gMDsgfVxuXHRpZiAoISRpc0Zpbml0ZShudW1iZXIpKSB7IHJldHVybiBudW1iZXI7IH1cblx0cmV0dXJuIHRydW5jYXRlKG51bWJlcik7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgTUFYX1NBRkVfSU5URUdFUiA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvbWF4U2FmZUludGVnZXInKTtcblxudmFyIFRvSW50ZWdlck9ySW5maW5pdHkgPSByZXF1aXJlKCcuL1RvSW50ZWdlck9ySW5maW5pdHknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBUb0xlbmd0aChhcmd1bWVudCkge1xuXHR2YXIgbGVuID0gVG9JbnRlZ2VyT3JJbmZpbml0eShhcmd1bWVudCk7XG5cdGlmIChsZW4gPD0gMCkgeyByZXR1cm4gMDsgfSAvLyBpbmNsdWRlcyBjb252ZXJ0aW5nIC0wIHRvICswXG5cdGlmIChsZW4gPiBNQVhfU0FGRV9JTlRFR0VSKSB7IHJldHVybiBNQVhfU0FGRV9JTlRFR0VSOyB9XG5cdHJldHVybiBsZW47XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnZ2V0LWludHJpbnNpYycpO1xuXG52YXIgJFR5cGVFcnJvciA9IHJlcXVpcmUoJ2VzLWVycm9ycy90eXBlJyk7XG52YXIgJE51bWJlciA9IEdldEludHJpbnNpYygnJU51bWJlciUnKTtcbnZhciBpc1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvaXNQcmltaXRpdmUnKTtcblxudmFyIFRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9Ub1ByaW1pdGl2ZScpO1xudmFyIFN0cmluZ1RvTnVtYmVyID0gcmVxdWlyZSgnLi9TdHJpbmdUb051bWJlcicpO1xuXG4vLyBodHRwczovLzI2Mi5lY21hLWludGVybmF0aW9uYWwub3JnLzEzLjAvI3NlYy10b251bWJlclxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIFRvTnVtYmVyKGFyZ3VtZW50KSB7XG5cdHZhciB2YWx1ZSA9IGlzUHJpbWl0aXZlKGFyZ3VtZW50KSA/IGFyZ3VtZW50IDogVG9QcmltaXRpdmUoYXJndW1lbnQsICROdW1iZXIpO1xuXHRpZiAodHlwZW9mIHZhbHVlID09PSAnc3ltYm9sJykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdDYW5ub3QgY29udmVydCBhIFN5bWJvbCB2YWx1ZSB0byBhIG51bWJlcicpO1xuXHR9XG5cdGlmICh0eXBlb2YgdmFsdWUgPT09ICdiaWdpbnQnKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0NvbnZlcnNpb24gZnJvbSBcXCdCaWdJbnRcXCcgdG8gXFwnbnVtYmVyXFwnIGlzIG5vdCBhbGxvd2VkLicpO1xuXHR9XG5cdGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG5cdFx0cmV0dXJuIFN0cmluZ1RvTnVtYmVyKHZhbHVlKTtcblx0fVxuXHRyZXR1cm4gJE51bWJlcih2YWx1ZSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vLyBodHRwczovLzI2Mi5lY21hLWludGVybmF0aW9uYWwub3JnLzYuMC8jc2VjLXRvb2JqZWN0XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnZXMtb2JqZWN0LWF0b21zL1RvT2JqZWN0Jyk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJ2VzLXRvLXByaW1pdGl2ZS9lczIwMTUnKTtcblxuLy8gaHR0cHM6Ly8yNjIuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy82LjAvI3NlYy10b3ByaW1pdGl2ZVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIFRvUHJpbWl0aXZlKGlucHV0KSB7XG5cdGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuXHRcdHJldHVybiB0b1ByaW1pdGl2ZShpbnB1dCwgYXJndW1lbnRzWzFdKTtcblx0fVxuXHRyZXR1cm4gdG9QcmltaXRpdmUoaW5wdXQpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGhhc093biA9IHJlcXVpcmUoJ2hhc293bicpO1xuXG52YXIgJFR5cGVFcnJvciA9IHJlcXVpcmUoJ2VzLWVycm9ycy90eXBlJyk7XG5cbnZhciBUeXBlID0gcmVxdWlyZSgnLi9UeXBlJyk7XG52YXIgVG9Cb29sZWFuID0gcmVxdWlyZSgnLi9Ub0Jvb2xlYW4nKTtcbnZhciBJc0NhbGxhYmxlID0gcmVxdWlyZSgnLi9Jc0NhbGxhYmxlJyk7XG5cbi8vIGh0dHBzOi8vMjYyLmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvNS4xLyNzZWMtOC4xMC41XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gVG9Qcm9wZXJ0eURlc2NyaXB0b3IoT2JqKSB7XG5cdGlmIChUeXBlKE9iaikgIT09ICdPYmplY3QnKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ1RvUHJvcGVydHlEZXNjcmlwdG9yIHJlcXVpcmVzIGFuIG9iamVjdCcpO1xuXHR9XG5cblx0dmFyIGRlc2MgPSB7fTtcblx0aWYgKGhhc093bihPYmosICdlbnVtZXJhYmxlJykpIHtcblx0XHRkZXNjWydbW0VudW1lcmFibGVdXSddID0gVG9Cb29sZWFuKE9iai5lbnVtZXJhYmxlKTtcblx0fVxuXHRpZiAoaGFzT3duKE9iaiwgJ2NvbmZpZ3VyYWJsZScpKSB7XG5cdFx0ZGVzY1snW1tDb25maWd1cmFibGVdXSddID0gVG9Cb29sZWFuKE9iai5jb25maWd1cmFibGUpO1xuXHR9XG5cdGlmIChoYXNPd24oT2JqLCAndmFsdWUnKSkge1xuXHRcdGRlc2NbJ1tbVmFsdWVdXSddID0gT2JqLnZhbHVlO1xuXHR9XG5cdGlmIChoYXNPd24oT2JqLCAnd3JpdGFibGUnKSkge1xuXHRcdGRlc2NbJ1tbV3JpdGFibGVdXSddID0gVG9Cb29sZWFuKE9iai53cml0YWJsZSk7XG5cdH1cblx0aWYgKGhhc093bihPYmosICdnZXQnKSkge1xuXHRcdHZhciBnZXR0ZXIgPSBPYmouZ2V0O1xuXHRcdGlmICh0eXBlb2YgZ2V0dGVyICE9PSAndW5kZWZpbmVkJyAmJiAhSXNDYWxsYWJsZShnZXR0ZXIpKSB7XG5cdFx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignZ2V0dGVyIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuXHRcdH1cblx0XHRkZXNjWydbW0dldF1dJ10gPSBnZXR0ZXI7XG5cdH1cblx0aWYgKGhhc093bihPYmosICdzZXQnKSkge1xuXHRcdHZhciBzZXR0ZXIgPSBPYmouc2V0O1xuXHRcdGlmICh0eXBlb2Ygc2V0dGVyICE9PSAndW5kZWZpbmVkJyAmJiAhSXNDYWxsYWJsZShzZXR0ZXIpKSB7XG5cdFx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignc2V0dGVyIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuXHRcdH1cblx0XHRkZXNjWydbW1NldF1dJ10gPSBzZXR0ZXI7XG5cdH1cblxuXHRpZiAoKGhhc093bihkZXNjLCAnW1tHZXRdXScpIHx8IGhhc093bihkZXNjLCAnW1tTZXRdXScpKSAmJiAoaGFzT3duKGRlc2MsICdbW1ZhbHVlXV0nKSB8fCBoYXNPd24oZGVzYywgJ1tbV3JpdGFibGVdXScpKSkge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdJbnZhbGlkIHByb3BlcnR5IGRlc2NyaXB0b3IuIENhbm5vdCBib3RoIHNwZWNpZnkgYWNjZXNzb3JzIGFuZCBhIHZhbHVlIG9yIHdyaXRhYmxlIGF0dHJpYnV0ZScpO1xuXHR9XG5cdHJldHVybiBkZXNjO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJ2dldC1pbnRyaW5zaWMnKTtcblxudmFyICRTdHJpbmcgPSBHZXRJbnRyaW5zaWMoJyVTdHJpbmclJyk7XG52YXIgJFR5cGVFcnJvciA9IHJlcXVpcmUoJ2VzLWVycm9ycy90eXBlJyk7XG5cbi8vIGh0dHBzOi8vMjYyLmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvNi4wLyNzZWMtdG9zdHJpbmdcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBUb1N0cmluZyhhcmd1bWVudCkge1xuXHRpZiAodHlwZW9mIGFyZ3VtZW50ID09PSAnc3ltYm9sJykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdDYW5ub3QgY29udmVydCBhIFN5bWJvbCB2YWx1ZSB0byBhIHN0cmluZycpO1xuXHR9XG5cdHJldHVybiAkU3RyaW5nKGFyZ3VtZW50KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBFUzVUeXBlID0gcmVxdWlyZSgnLi4vNS9UeXBlJyk7XG5cbi8vIGh0dHBzOi8vMjYyLmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvMTEuMC8jc2VjLWVjbWFzY3JpcHQtZGF0YS10eXBlcy1hbmQtdmFsdWVzXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gVHlwZSh4KSB7XG5cdGlmICh0eXBlb2YgeCA9PT0gJ3N5bWJvbCcpIHtcblx0XHRyZXR1cm4gJ1N5bWJvbCc7XG5cdH1cblx0aWYgKHR5cGVvZiB4ID09PSAnYmlnaW50Jykge1xuXHRcdHJldHVybiAnQmlnSW50Jztcblx0fVxuXHRyZXR1cm4gRVM1VHlwZSh4KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciAkVHlwZUVycm9yID0gcmVxdWlyZSgnZXMtZXJyb3JzL3R5cGUnKTtcblxudmFyIERlZmluZU93blByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaGVscGVycy9EZWZpbmVPd25Qcm9wZXJ0eScpO1xudmFyIGlzRnVsbHlQb3B1bGF0ZWRQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2lzRnVsbHlQb3B1bGF0ZWRQcm9wZXJ0eURlc2NyaXB0b3InKTtcbnZhciBpc1Byb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvcmVjb3Jkcy9wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5cbnZhciBGcm9tUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9Gcm9tUHJvcGVydHlEZXNjcmlwdG9yJyk7XG52YXIgSXNBY2Nlc3NvckRlc2NyaXB0b3IgPSByZXF1aXJlKCcuL0lzQWNjZXNzb3JEZXNjcmlwdG9yJyk7XG52YXIgSXNEYXRhRGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vSXNEYXRhRGVzY3JpcHRvcicpO1xudmFyIElzR2VuZXJpY0Rlc2NyaXB0b3IgPSByZXF1aXJlKCcuL0lzR2VuZXJpY0Rlc2NyaXB0b3InKTtcbnZhciBJc1Byb3BlcnR5S2V5ID0gcmVxdWlyZSgnLi9Jc1Byb3BlcnR5S2V5Jyk7XG52YXIgU2FtZVZhbHVlID0gcmVxdWlyZSgnLi9TYW1lVmFsdWUnKTtcbnZhciBUeXBlID0gcmVxdWlyZSgnLi9UeXBlJyk7XG5cbi8vIGh0dHBzOi8vMjYyLmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvMTMuMC8jc2VjLXZhbGlkYXRlYW5kYXBwbHlwcm9wZXJ0eWRlc2NyaXB0b3JcblxuLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L2VjbWEyNjIvcHVsbC8yNDY4IGZvciBFUzIwMjIgY2hhbmdlc1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LWxpbmVzLXBlci1mdW5jdGlvbiwgbWF4LXN0YXRlbWVudHNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gVmFsaWRhdGVBbmRBcHBseVByb3BlcnR5RGVzY3JpcHRvcihPLCBQLCBleHRlbnNpYmxlLCBEZXNjLCBjdXJyZW50KSB7XG5cdHZhciBvVHlwZSA9IFR5cGUoTyk7XG5cdGlmIChvVHlwZSAhPT0gJ1VuZGVmaW5lZCcgJiYgb1R5cGUgIT09ICdPYmplY3QnKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IE8gbXVzdCBiZSB1bmRlZmluZWQgb3IgYW4gT2JqZWN0Jyk7XG5cdH1cblx0aWYgKCFJc1Byb3BlcnR5S2V5KFApKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IFAgbXVzdCBiZSBhIFByb3BlcnR5IEtleScpO1xuXHR9XG5cdGlmICh0eXBlb2YgZXh0ZW5zaWJsZSAhPT0gJ2Jvb2xlYW4nKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IGV4dGVuc2libGUgbXVzdCBiZSBhIEJvb2xlYW4nKTtcblx0fVxuXHRpZiAoIWlzUHJvcGVydHlEZXNjcmlwdG9yKERlc2MpKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IERlc2MgbXVzdCBiZSBhIFByb3BlcnR5IERlc2NyaXB0b3InKTtcblx0fVxuXHRpZiAodHlwZW9mIGN1cnJlbnQgIT09ICd1bmRlZmluZWQnICYmICFpc1Byb3BlcnR5RGVzY3JpcHRvcihjdXJyZW50KSkge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBjdXJyZW50IG11c3QgYmUgYSBQcm9wZXJ0eSBEZXNjcmlwdG9yLCBvciB1bmRlZmluZWQnKTtcblx0fVxuXG5cdGlmICh0eXBlb2YgY3VycmVudCA9PT0gJ3VuZGVmaW5lZCcpIHsgLy8gc3RlcCAyXG5cdFx0aWYgKCFleHRlbnNpYmxlKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7IC8vIHN0ZXAgMi5hXG5cdFx0fVxuXHRcdGlmIChvVHlwZSA9PT0gJ1VuZGVmaW5lZCcpIHtcblx0XHRcdHJldHVybiB0cnVlOyAvLyBzdGVwIDIuYlxuXHRcdH1cblx0XHRpZiAoSXNBY2Nlc3NvckRlc2NyaXB0b3IoRGVzYykpIHsgLy8gc3RlcCAyLmNcblx0XHRcdHJldHVybiBEZWZpbmVPd25Qcm9wZXJ0eShcblx0XHRcdFx0SXNEYXRhRGVzY3JpcHRvcixcblx0XHRcdFx0U2FtZVZhbHVlLFxuXHRcdFx0XHRGcm9tUHJvcGVydHlEZXNjcmlwdG9yLFxuXHRcdFx0XHRPLFxuXHRcdFx0XHRQLFxuXHRcdFx0XHREZXNjXG5cdFx0XHQpO1xuXHRcdH1cblx0XHQvLyBzdGVwIDIuZFxuXHRcdHJldHVybiBEZWZpbmVPd25Qcm9wZXJ0eShcblx0XHRcdElzRGF0YURlc2NyaXB0b3IsXG5cdFx0XHRTYW1lVmFsdWUsXG5cdFx0XHRGcm9tUHJvcGVydHlEZXNjcmlwdG9yLFxuXHRcdFx0Tyxcblx0XHRcdFAsXG5cdFx0XHR7XG5cdFx0XHRcdCdbW0NvbmZpZ3VyYWJsZV1dJzogISFEZXNjWydbW0NvbmZpZ3VyYWJsZV1dJ10sXG5cdFx0XHRcdCdbW0VudW1lcmFibGVdXSc6ICEhRGVzY1snW1tFbnVtZXJhYmxlXV0nXSxcblx0XHRcdFx0J1tbVmFsdWVdXSc6IERlc2NbJ1tbVmFsdWVdXSddLFxuXHRcdFx0XHQnW1tXcml0YWJsZV1dJzogISFEZXNjWydbW1dyaXRhYmxlXV0nXVxuXHRcdFx0fVxuXHRcdCk7XG5cdH1cblxuXHQvLyAzLiBBc3NlcnQ6IGN1cnJlbnQgaXMgYSBmdWxseSBwb3B1bGF0ZWQgUHJvcGVydHkgRGVzY3JpcHRvci5cblx0aWYgKFxuXHRcdCFpc0Z1bGx5UG9wdWxhdGVkUHJvcGVydHlEZXNjcmlwdG9yKFxuXHRcdFx0e1xuXHRcdFx0XHRJc0FjY2Vzc29yRGVzY3JpcHRvcjogSXNBY2Nlc3NvckRlc2NyaXB0b3IsXG5cdFx0XHRcdElzRGF0YURlc2NyaXB0b3I6IElzRGF0YURlc2NyaXB0b3Jcblx0XHRcdH0sXG5cdFx0XHRjdXJyZW50XG5cdFx0KVxuXHQpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignYGN1cnJlbnRgLCB3aGVuIHByZXNlbnQsIG11c3QgYmUgYSBmdWxseSBwb3B1bGF0ZWQgYW5kIHZhbGlkIFByb3BlcnR5IERlc2NyaXB0b3InKTtcblx0fVxuXG5cdC8vIDQuIElmIGV2ZXJ5IGZpZWxkIGluIERlc2MgaXMgYWJzZW50LCByZXR1cm4gdHJ1ZS5cblx0Ly8gdGhpcyBjYW4ndCByZWFsbHkgbWF0Y2ggdGhlIGFzc2VydGlvbiB0aGF0IGl0J3MgYSBQcm9wZXJ0eSBEZXNjcmlwdG9yIGluIG91ciBKUyBpbXBsZW1lbnRhdGlvblxuXG5cdC8vIDUuIElmIGN1cnJlbnQuW1tDb25maWd1cmFibGVdXSBpcyBmYWxzZSwgdGhlblxuXHRpZiAoIWN1cnJlbnRbJ1tbQ29uZmlndXJhYmxlXV0nXSkge1xuXHRcdGlmICgnW1tDb25maWd1cmFibGVdXScgaW4gRGVzYyAmJiBEZXNjWydbW0NvbmZpZ3VyYWJsZV1dJ10pIHtcblx0XHRcdC8vIHN0ZXAgNS5hXG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdGlmICgnW1tFbnVtZXJhYmxlXV0nIGluIERlc2MgJiYgIVNhbWVWYWx1ZShEZXNjWydbW0VudW1lcmFibGVdXSddLCBjdXJyZW50WydbW0VudW1lcmFibGVdXSddKSkge1xuXHRcdFx0Ly8gc3RlcCA1LmJcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0aWYgKCFJc0dlbmVyaWNEZXNjcmlwdG9yKERlc2MpICYmICFTYW1lVmFsdWUoSXNBY2Nlc3NvckRlc2NyaXB0b3IoRGVzYyksIElzQWNjZXNzb3JEZXNjcmlwdG9yKGN1cnJlbnQpKSkge1xuXHRcdFx0Ly8gc3RlcCA1LmNcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0aWYgKElzQWNjZXNzb3JEZXNjcmlwdG9yKGN1cnJlbnQpKSB7IC8vIHN0ZXAgNS5kXG5cdFx0XHRpZiAoJ1tbR2V0XV0nIGluIERlc2MgJiYgIVNhbWVWYWx1ZShEZXNjWydbW0dldF1dJ10sIGN1cnJlbnRbJ1tbR2V0XV0nXSkpIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCdbW1NldF1dJyBpbiBEZXNjICYmICFTYW1lVmFsdWUoRGVzY1snW1tTZXRdXSddLCBjdXJyZW50WydbW1NldF1dJ10pKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHR9IGVsc2UgaWYgKCFjdXJyZW50WydbW1dyaXRhYmxlXV0nXSkgeyAvLyBzdGVwIDUuZVxuXHRcdFx0aWYgKCdbW1dyaXRhYmxlXV0nIGluIERlc2MgJiYgRGVzY1snW1tXcml0YWJsZV1dJ10pIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCdbW1ZhbHVlXV0nIGluIERlc2MgJiYgIVNhbWVWYWx1ZShEZXNjWydbW1ZhbHVlXV0nXSwgY3VycmVudFsnW1tWYWx1ZV1dJ10pKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyA2LiBJZiBPIGlzIG5vdCB1bmRlZmluZWQsIHRoZW5cblx0aWYgKG9UeXBlICE9PSAnVW5kZWZpbmVkJykge1xuXHRcdHZhciBjb25maWd1cmFibGU7XG5cdFx0dmFyIGVudW1lcmFibGU7XG5cdFx0aWYgKElzRGF0YURlc2NyaXB0b3IoY3VycmVudCkgJiYgSXNBY2Nlc3NvckRlc2NyaXB0b3IoRGVzYykpIHsgLy8gc3RlcCA2LmFcblx0XHRcdGNvbmZpZ3VyYWJsZSA9ICgnW1tDb25maWd1cmFibGVdXScgaW4gRGVzYyA/IERlc2MgOiBjdXJyZW50KVsnW1tDb25maWd1cmFibGVdXSddO1xuXHRcdFx0ZW51bWVyYWJsZSA9ICgnW1tFbnVtZXJhYmxlXV0nIGluIERlc2MgPyBEZXNjIDogY3VycmVudClbJ1tbRW51bWVyYWJsZV1dJ107XG5cdFx0XHQvLyBSZXBsYWNlIHRoZSBwcm9wZXJ0eSBuYW1lZCBQIG9mIG9iamVjdCBPIHdpdGggYW4gYWNjZXNzb3IgcHJvcGVydHkgaGF2aW5nIFtbQ29uZmlndXJhYmxlXV0gYW5kIFtbRW51bWVyYWJsZV1dIGF0dHJpYnV0ZXMgYXMgZGVzY3JpYmVkIGJ5IGN1cnJlbnQgYW5kIGVhY2ggb3RoZXIgYXR0cmlidXRlIHNldCB0byBpdHMgZGVmYXVsdCB2YWx1ZS5cblx0XHRcdHJldHVybiBEZWZpbmVPd25Qcm9wZXJ0eShcblx0XHRcdFx0SXNEYXRhRGVzY3JpcHRvcixcblx0XHRcdFx0U2FtZVZhbHVlLFxuXHRcdFx0XHRGcm9tUHJvcGVydHlEZXNjcmlwdG9yLFxuXHRcdFx0XHRPLFxuXHRcdFx0XHRQLFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0J1tbQ29uZmlndXJhYmxlXV0nOiAhIWNvbmZpZ3VyYWJsZSxcblx0XHRcdFx0XHQnW1tFbnVtZXJhYmxlXV0nOiAhIWVudW1lcmFibGUsXG5cdFx0XHRcdFx0J1tbR2V0XV0nOiAoJ1tbR2V0XV0nIGluIERlc2MgPyBEZXNjIDogY3VycmVudClbJ1tbR2V0XV0nXSxcblx0XHRcdFx0XHQnW1tTZXRdXSc6ICgnW1tTZXRdXScgaW4gRGVzYyA/IERlc2MgOiBjdXJyZW50KVsnW1tTZXRdXSddXG5cdFx0XHRcdH1cblx0XHRcdCk7XG5cdFx0fSBlbHNlIGlmIChJc0FjY2Vzc29yRGVzY3JpcHRvcihjdXJyZW50KSAmJiBJc0RhdGFEZXNjcmlwdG9yKERlc2MpKSB7XG5cdFx0XHRjb25maWd1cmFibGUgPSAoJ1tbQ29uZmlndXJhYmxlXV0nIGluIERlc2MgPyBEZXNjIDogY3VycmVudClbJ1tbQ29uZmlndXJhYmxlXV0nXTtcblx0XHRcdGVudW1lcmFibGUgPSAoJ1tbRW51bWVyYWJsZV1dJyBpbiBEZXNjID8gRGVzYyA6IGN1cnJlbnQpWydbW0VudW1lcmFibGVdXSddO1xuXHRcdFx0Ly8gaS4gUmVwbGFjZSB0aGUgcHJvcGVydHkgbmFtZWQgUCBvZiBvYmplY3QgTyB3aXRoIGEgZGF0YSBwcm9wZXJ0eSBoYXZpbmcgW1tDb25maWd1cmFibGVdXSBhbmQgW1tFbnVtZXJhYmxlXV0gYXR0cmlidXRlcyBhcyBkZXNjcmliZWQgYnkgY3VycmVudCBhbmQgZWFjaCBvdGhlciBhdHRyaWJ1dGUgc2V0IHRvIGl0cyBkZWZhdWx0IHZhbHVlLlxuXHRcdFx0cmV0dXJuIERlZmluZU93blByb3BlcnR5KFxuXHRcdFx0XHRJc0RhdGFEZXNjcmlwdG9yLFxuXHRcdFx0XHRTYW1lVmFsdWUsXG5cdFx0XHRcdEZyb21Qcm9wZXJ0eURlc2NyaXB0b3IsXG5cdFx0XHRcdE8sXG5cdFx0XHRcdFAsXG5cdFx0XHRcdHtcblx0XHRcdFx0XHQnW1tDb25maWd1cmFibGVdXSc6ICEhY29uZmlndXJhYmxlLFxuXHRcdFx0XHRcdCdbW0VudW1lcmFibGVdXSc6ICEhZW51bWVyYWJsZSxcblx0XHRcdFx0XHQnW1tWYWx1ZV1dJzogKCdbW1ZhbHVlXV0nIGluIERlc2MgPyBEZXNjIDogY3VycmVudClbJ1tbVmFsdWVdXSddLFxuXHRcdFx0XHRcdCdbW1dyaXRhYmxlXV0nOiAhISgnW1tXcml0YWJsZV1dJyBpbiBEZXNjID8gRGVzYyA6IGN1cnJlbnQpWydbW1dyaXRhYmxlXV0nXVxuXHRcdFx0XHR9XG5cdFx0XHQpO1xuXHRcdH1cblxuXHRcdC8vIEZvciBlYWNoIGZpZWxkIG9mIERlc2MgdGhhdCBpcyBwcmVzZW50LCBzZXQgdGhlIGNvcnJlc3BvbmRpbmcgYXR0cmlidXRlIG9mIHRoZSBwcm9wZXJ0eSBuYW1lZCBQIG9mIG9iamVjdCBPIHRvIHRoZSB2YWx1ZSBvZiB0aGUgZmllbGQuXG5cdFx0cmV0dXJuIERlZmluZU93blByb3BlcnR5KFxuXHRcdFx0SXNEYXRhRGVzY3JpcHRvcixcblx0XHRcdFNhbWVWYWx1ZSxcblx0XHRcdEZyb21Qcm9wZXJ0eURlc2NyaXB0b3IsXG5cdFx0XHRPLFxuXHRcdFx0UCxcblx0XHRcdERlc2Ncblx0XHQpO1xuXHR9XG5cblx0cmV0dXJuIHRydWU7IC8vIHN0ZXAgN1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLy8gdmFyIG1vZHVsbyA9IHJlcXVpcmUoJy4vbW9kdWxvJyk7XG52YXIgJGZsb29yID0gTWF0aC5mbG9vcjtcblxuLy8gaHR0cDovLzI2Mi5lY21hLWludGVybmF0aW9uYWwub3JnLzExLjAvI2Vxbi1mbG9vclxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGZsb29yKHgpIHtcblx0Ly8gcmV0dXJuIHggLSBtb2R1bG8oeCwgMSk7XG5cdGlmICh0eXBlb2YgeCA9PT0gJ2JpZ2ludCcpIHtcblx0XHRyZXR1cm4geDtcblx0fVxuXHRyZXR1cm4gJGZsb29yKHgpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGZsb29yID0gcmVxdWlyZSgnLi9mbG9vcicpO1xuXG52YXIgJFR5cGVFcnJvciA9IHJlcXVpcmUoJ2VzLWVycm9ycy90eXBlJyk7XG5cbi8vIGh0dHBzOi8vMjYyLmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvMTQuMC8jZXFuLXRydW5jYXRlXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gdHJ1bmNhdGUoeCkge1xuXHRpZiAodHlwZW9mIHggIT09ICdudW1iZXInICYmIHR5cGVvZiB4ICE9PSAnYmlnaW50Jykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdhcmd1bWVudCBtdXN0IGJlIGEgTnVtYmVyIG9yIGEgQmlnSW50Jyk7XG5cdH1cblx0dmFyIHJlc3VsdCA9IHggPCAwID8gLWZsb29yKC14KSA6IGZsb29yKHgpO1xuXHRyZXR1cm4gcmVzdWx0ID09PSAwID8gMCA6IHJlc3VsdDsgLy8gaW4gdGhlIHNwZWMsIHRoZXNlIGFyZSBtYXRoIHZhbHVlcywgc28gd2UgZmlsdGVyIG91dCAtMCBoZXJlXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnZ2V0LWludHJpbnNpYycpO1xuXG52YXIgJEFycmF5UHJvdG90eXBlID0gR2V0SW50cmluc2ljKCclQXJyYXkucHJvdG90eXBlJScpO1xudmFyICRSYW5nZUVycm9yID0gcmVxdWlyZSgnZXMtZXJyb3JzL3JhbmdlJyk7XG52YXIgJFN5bnRheEVycm9yID0gcmVxdWlyZSgnZXMtZXJyb3JzL3N5bnRheCcpO1xudmFyICRUeXBlRXJyb3IgPSByZXF1aXJlKCdlcy1lcnJvcnMvdHlwZScpO1xuXG52YXIgaXNJbnRlZ2VyID0gcmVxdWlyZSgnLi4vaGVscGVycy9pc0ludGVnZXInKTtcblxudmFyIE1BWF9BUlJBWV9MRU5HVEggPSBNYXRoLnBvdygyLCAzMikgLSAxO1xuXG52YXIgaGFzUHJvdG8gPSByZXF1aXJlKCdoYXMtcHJvdG8nKSgpO1xuXG52YXIgJHNldFByb3RvID0gR2V0SW50cmluc2ljKCclT2JqZWN0LnNldFByb3RvdHlwZU9mJScsIHRydWUpIHx8IChcblx0aGFzUHJvdG9cblx0XHQ/IGZ1bmN0aW9uIChPLCBwcm90bykge1xuXHRcdFx0Ty5fX3Byb3RvX18gPSBwcm90bzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1wcm90bywgbm8tcGFyYW0tcmVhc3NpZ25cblx0XHRcdHJldHVybiBPO1xuXHRcdH1cblx0XHQ6IG51bGxcbik7XG5cbi8vIGh0dHBzOi8vMjYyLmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvMTIuMC8jc2VjLWFycmF5Y3JlYXRlXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gQXJyYXlDcmVhdGUobGVuZ3RoKSB7XG5cdGlmICghaXNJbnRlZ2VyKGxlbmd0aCkgfHwgbGVuZ3RoIDwgMCkge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBgbGVuZ3RoYCBtdXN0IGJlIGFuIGludGVnZXIgTnVtYmVyID49IDAnKTtcblx0fVxuXHRpZiAobGVuZ3RoID4gTUFYX0FSUkFZX0xFTkdUSCkge1xuXHRcdHRocm93IG5ldyAkUmFuZ2VFcnJvcignbGVuZ3RoIGlzIGdyZWF0ZXIgdGhhbiAoMioqMzIgLSAxKScpO1xuXHR9XG5cdHZhciBwcm90byA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogJEFycmF5UHJvdG90eXBlO1xuXHR2YXIgQSA9IFtdOyAvLyBzdGVwcyAzLCA1XG5cdGlmIChwcm90byAhPT0gJEFycmF5UHJvdG90eXBlKSB7IC8vIHN0ZXAgNFxuXHRcdGlmICghJHNldFByb3RvKSB7XG5cdFx0XHR0aHJvdyBuZXcgJFN5bnRheEVycm9yKCdBcnJheUNyZWF0ZTogYSBgcHJvdG9gIGFyZ3VtZW50IHRoYXQgaXMgbm90IGBBcnJheS5wcm90b3R5cGVgIGlzIG5vdCBzdXBwb3J0ZWQgaW4gYW4gZW52aXJvbm1lbnQgdGhhdCBkb2VzIG5vdCBzdXBwb3J0IHNldHRpbmcgdGhlIFtbUHJvdG90eXBlXV0nKTtcblx0XHR9XG5cdFx0JHNldFByb3RvKEEsIHByb3RvKTtcblx0fVxuXHRpZiAobGVuZ3RoICE9PSAwKSB7IC8vIGJ5cGFzc2VzIHRoZSBuZWVkIGZvciBzdGVwIDZcblx0XHRBLmxlbmd0aCA9IGxlbmd0aDtcblx0fVxuXHQvKiBzdGVwIDYsIHRoZSBhYm92ZSBhcyBhIHNob3J0Y3V0IGZvciB0aGUgYmVsb3dcblx0T3JkaW5hcnlEZWZpbmVPd25Qcm9wZXJ0eShBLCAnbGVuZ3RoJywge1xuXHRcdCdbW0NvbmZpZ3VyYWJsZV1dJzogZmFsc2UsXG5cdFx0J1tbRW51bWVyYWJsZV1dJzogZmFsc2UsXG5cdFx0J1tbVmFsdWVdXSc6IGxlbmd0aCxcblx0XHQnW1tXcml0YWJsZV1dJzogdHJ1ZVxuXHR9KTtcblx0Ki9cblx0cmV0dXJuIEE7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnZ2V0LWludHJpbnNpYycpO1xuXG52YXIgJHNwZWNpZXMgPSBHZXRJbnRyaW5zaWMoJyVTeW1ib2wuc3BlY2llcyUnLCB0cnVlKTtcbnZhciAkVHlwZUVycm9yID0gcmVxdWlyZSgnZXMtZXJyb3JzL3R5cGUnKTtcblxudmFyIEFycmF5Q3JlYXRlID0gcmVxdWlyZSgnLi9BcnJheUNyZWF0ZScpO1xudmFyIEdldCA9IHJlcXVpcmUoJy4vR2V0Jyk7XG52YXIgSXNBcnJheSA9IHJlcXVpcmUoJy4vSXNBcnJheScpO1xudmFyIElzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL0lzQ29uc3RydWN0b3InKTtcbnZhciBUeXBlID0gcmVxdWlyZSgnLi9UeXBlJyk7XG5cbnZhciBpc0ludGVnZXIgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2lzSW50ZWdlcicpO1xuXG4vLyBodHRwczovLzI2Mi5lY21hLWludGVybmF0aW9uYWwub3JnLzEyLjAvI3NlYy1hcnJheXNwZWNpZXNjcmVhdGVcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBBcnJheVNwZWNpZXNDcmVhdGUob3JpZ2luYWxBcnJheSwgbGVuZ3RoKSB7XG5cdGlmICghaXNJbnRlZ2VyKGxlbmd0aCkgfHwgbGVuZ3RoIDwgMCkge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBsZW5ndGggbXVzdCBiZSBhbiBpbnRlZ2VyID49IDAnKTtcblx0fVxuXG5cdHZhciBpc0FycmF5ID0gSXNBcnJheShvcmlnaW5hbEFycmF5KTtcblx0aWYgKCFpc0FycmF5KSB7XG5cdFx0cmV0dXJuIEFycmF5Q3JlYXRlKGxlbmd0aCk7XG5cdH1cblxuXHR2YXIgQyA9IEdldChvcmlnaW5hbEFycmF5LCAnY29uc3RydWN0b3InKTtcblx0Ly8gVE9ETzogZmlndXJlIG91dCBob3cgdG8gbWFrZSBhIGNyb3NzLXJlYWxtIG5vcm1hbCBBcnJheSwgYSBzYW1lLXJlYWxtIEFycmF5XG5cdC8vIGlmIChJc0NvbnN0cnVjdG9yKEMpKSB7XG5cdC8vIFx0aWYgQyBpcyBhbm90aGVyIHJlYWxtJ3MgQXJyYXksIEMgPSB1bmRlZmluZWRcblx0Ly8gXHRPYmplY3QuZ2V0UHJvdG90eXBlT2YoT2JqZWN0LmdldFByb3RvdHlwZU9mKE9iamVjdC5nZXRQcm90b3R5cGVPZihBcnJheSkpKSA9PT0gbnVsbCA/XG5cdC8vIH1cblx0aWYgKCRzcGVjaWVzICYmIFR5cGUoQykgPT09ICdPYmplY3QnKSB7XG5cdFx0QyA9IEdldChDLCAkc3BlY2llcyk7XG5cdFx0aWYgKEMgPT09IG51bGwpIHtcblx0XHRcdEMgPSB2b2lkIDA7XG5cdFx0fVxuXHR9XG5cblx0aWYgKHR5cGVvZiBDID09PSAndW5kZWZpbmVkJykge1xuXHRcdHJldHVybiBBcnJheUNyZWF0ZShsZW5ndGgpO1xuXHR9XG5cdGlmICghSXNDb25zdHJ1Y3RvcihDKSkge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdDIG11c3QgYmUgYSBjb25zdHJ1Y3RvcicpO1xuXHR9XG5cdHJldHVybiBuZXcgQyhsZW5ndGgpOyAvLyBDb25zdHJ1Y3QoQywgbGVuZ3RoKTtcbn07XG5cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJ2dldC1pbnRyaW5zaWMnKTtcbnZhciBjYWxsQm91bmQgPSByZXF1aXJlKCdjYWxsLWJpbmQvY2FsbEJvdW5kJyk7XG5cbnZhciAkVHlwZUVycm9yID0gcmVxdWlyZSgnZXMtZXJyb3JzL3R5cGUnKTtcblxudmFyIElzQXJyYXkgPSByZXF1aXJlKCcuL0lzQXJyYXknKTtcblxudmFyICRhcHBseSA9IEdldEludHJpbnNpYygnJVJlZmxlY3QuYXBwbHklJywgdHJ1ZSkgfHwgY2FsbEJvdW5kKCdGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHknKTtcblxuLy8gaHR0cHM6Ly8yNjIuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy82LjAvI3NlYy1jYWxsXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gQ2FsbChGLCBWKSB7XG5cdHZhciBhcmd1bWVudHNMaXN0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiBbXTtcblx0aWYgKCFJc0FycmF5KGFyZ3VtZW50c0xpc3QpKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IG9wdGlvbmFsIGBhcmd1bWVudHNMaXN0YCwgaWYgcHJvdmlkZWQsIG11c3QgYmUgYSBMaXN0Jyk7XG5cdH1cblx0cmV0dXJuICRhcHBseShGLCBWLCBhcmd1bWVudHNMaXN0KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciAkVHlwZUVycm9yID0gcmVxdWlyZSgnZXMtZXJyb3JzL3R5cGUnKTtcblxudmFyIElzUHJvcGVydHlLZXkgPSByZXF1aXJlKCcuL0lzUHJvcGVydHlLZXknKTtcbnZhciBPcmRpbmFyeURlZmluZU93blByb3BlcnR5ID0gcmVxdWlyZSgnLi9PcmRpbmFyeURlZmluZU93blByb3BlcnR5Jyk7XG52YXIgVHlwZSA9IHJlcXVpcmUoJy4vVHlwZScpO1xuXG4vLyBodHRwczovLzI2Mi5lY21hLWludGVybmF0aW9uYWwub3JnLzYuMC8jc2VjLWNyZWF0ZWRhdGFwcm9wZXJ0eVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIENyZWF0ZURhdGFQcm9wZXJ0eShPLCBQLCBWKSB7XG5cdGlmIChUeXBlKE8pICE9PSAnT2JqZWN0Jykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBUeXBlKE8pIGlzIG5vdCBPYmplY3QnKTtcblx0fVxuXHRpZiAoIUlzUHJvcGVydHlLZXkoUCkpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogSXNQcm9wZXJ0eUtleShQKSBpcyBub3QgdHJ1ZScpO1xuXHR9XG5cdHZhciBuZXdEZXNjID0ge1xuXHRcdCdbW0NvbmZpZ3VyYWJsZV1dJzogdHJ1ZSxcblx0XHQnW1tFbnVtZXJhYmxlXV0nOiB0cnVlLFxuXHRcdCdbW1ZhbHVlXV0nOiBWLFxuXHRcdCdbW1dyaXRhYmxlXV0nOiB0cnVlXG5cdH07XG5cdHJldHVybiBPcmRpbmFyeURlZmluZU93blByb3BlcnR5KE8sIFAsIG5ld0Rlc2MpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyICRUeXBlRXJyb3IgPSByZXF1aXJlKCdlcy1lcnJvcnMvdHlwZScpO1xuXG52YXIgQ3JlYXRlRGF0YVByb3BlcnR5ID0gcmVxdWlyZSgnLi9DcmVhdGVEYXRhUHJvcGVydHknKTtcbnZhciBJc1Byb3BlcnR5S2V5ID0gcmVxdWlyZSgnLi9Jc1Byb3BlcnR5S2V5Jyk7XG52YXIgVHlwZSA9IHJlcXVpcmUoJy4vVHlwZScpO1xuXG4vLyAvLyBodHRwczovLzI2Mi5lY21hLWludGVybmF0aW9uYWwub3JnLzE0LjAvI3NlYy1jcmVhdGVkYXRhcHJvcGVydHlvcnRocm93XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gQ3JlYXRlRGF0YVByb3BlcnR5T3JUaHJvdyhPLCBQLCBWKSB7XG5cdGlmIChUeXBlKE8pICE9PSAnT2JqZWN0Jykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBUeXBlKE8pIGlzIG5vdCBPYmplY3QnKTtcblx0fVxuXHRpZiAoIUlzUHJvcGVydHlLZXkoUCkpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogSXNQcm9wZXJ0eUtleShQKSBpcyBub3QgdHJ1ZScpO1xuXHR9XG5cdHZhciBzdWNjZXNzID0gQ3JlYXRlRGF0YVByb3BlcnR5KE8sIFAsIFYpO1xuXHRpZiAoIXN1Y2Nlc3MpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcigndW5hYmxlIHRvIGNyZWF0ZSBkYXRhIHByb3BlcnR5Jyk7XG5cdH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciAkVHlwZUVycm9yID0gcmVxdWlyZSgnZXMtZXJyb3JzL3R5cGUnKTtcblxudmFyIGlzUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaGVscGVycy9yZWNvcmRzL3Byb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBEZWZpbmVPd25Qcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvRGVmaW5lT3duUHJvcGVydHknKTtcblxudmFyIEZyb21Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuL0Zyb21Qcm9wZXJ0eURlc2NyaXB0b3InKTtcbnZhciBJc0RhdGFEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9Jc0RhdGFEZXNjcmlwdG9yJyk7XG52YXIgSXNQcm9wZXJ0eUtleSA9IHJlcXVpcmUoJy4vSXNQcm9wZXJ0eUtleScpO1xudmFyIFNhbWVWYWx1ZSA9IHJlcXVpcmUoJy4vU2FtZVZhbHVlJyk7XG52YXIgVG9Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuL1RvUHJvcGVydHlEZXNjcmlwdG9yJyk7XG52YXIgVHlwZSA9IHJlcXVpcmUoJy4vVHlwZScpO1xuXG4vLyBodHRwczovLzI2Mi5lY21hLWludGVybmF0aW9uYWwub3JnLzYuMC8jc2VjLWRlZmluZXByb3BlcnR5b3J0aHJvd1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIERlZmluZVByb3BlcnR5T3JUaHJvdyhPLCBQLCBkZXNjKSB7XG5cdGlmIChUeXBlKE8pICE9PSAnT2JqZWN0Jykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBUeXBlKE8pIGlzIG5vdCBPYmplY3QnKTtcblx0fVxuXG5cdGlmICghSXNQcm9wZXJ0eUtleShQKSkge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBJc1Byb3BlcnR5S2V5KFApIGlzIG5vdCB0cnVlJyk7XG5cdH1cblxuXHR2YXIgRGVzYyA9IGlzUHJvcGVydHlEZXNjcmlwdG9yKGRlc2MpID8gZGVzYyA6IFRvUHJvcGVydHlEZXNjcmlwdG9yKGRlc2MpO1xuXHRpZiAoIWlzUHJvcGVydHlEZXNjcmlwdG9yKERlc2MpKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IERlc2MgaXMgbm90IGEgdmFsaWQgUHJvcGVydHkgRGVzY3JpcHRvcicpO1xuXHR9XG5cblx0cmV0dXJuIERlZmluZU93blByb3BlcnR5KFxuXHRcdElzRGF0YURlc2NyaXB0b3IsXG5cdFx0U2FtZVZhbHVlLFxuXHRcdEZyb21Qcm9wZXJ0eURlc2NyaXB0b3IsXG5cdFx0Tyxcblx0XHRQLFxuXHRcdERlc2Ncblx0KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciAkVHlwZUVycm9yID0gcmVxdWlyZSgnZXMtZXJyb3JzL3R5cGUnKTtcblxudmFyIGlzUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaGVscGVycy9yZWNvcmRzL3Byb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBmcm9tUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaGVscGVycy9mcm9tUHJvcGVydHlEZXNjcmlwdG9yJyk7XG5cbi8vIGh0dHBzOi8vMjYyLmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvNi4wLyNzZWMtZnJvbXByb3BlcnR5ZGVzY3JpcHRvclxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIEZyb21Qcm9wZXJ0eURlc2NyaXB0b3IoRGVzYykge1xuXHRpZiAodHlwZW9mIERlc2MgIT09ICd1bmRlZmluZWQnICYmICFpc1Byb3BlcnR5RGVzY3JpcHRvcihEZXNjKSkge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBgRGVzY2AgbXVzdCBiZSBhIFByb3BlcnR5IERlc2NyaXB0b3InKTtcblx0fVxuXG5cdHJldHVybiBmcm9tUHJvcGVydHlEZXNjcmlwdG9yKERlc2MpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyICRUeXBlRXJyb3IgPSByZXF1aXJlKCdlcy1lcnJvcnMvdHlwZScpO1xuXG52YXIgaW5zcGVjdCA9IHJlcXVpcmUoJ29iamVjdC1pbnNwZWN0Jyk7XG5cbnZhciBJc1Byb3BlcnR5S2V5ID0gcmVxdWlyZSgnLi9Jc1Byb3BlcnR5S2V5Jyk7XG52YXIgVHlwZSA9IHJlcXVpcmUoJy4vVHlwZScpO1xuXG4vLyBodHRwczovLzI2Mi5lY21hLWludGVybmF0aW9uYWwub3JnLzYuMC8jc2VjLWdldC1vLXBcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBHZXQoTywgUCkge1xuXHQvLyA3LjMuMS4xXG5cdGlmIChUeXBlKE8pICE9PSAnT2JqZWN0Jykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBUeXBlKE8pIGlzIG5vdCBPYmplY3QnKTtcblx0fVxuXHQvLyA3LjMuMS4yXG5cdGlmICghSXNQcm9wZXJ0eUtleShQKSkge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBJc1Byb3BlcnR5S2V5KFApIGlzIG5vdCB0cnVlLCBnb3QgJyArIGluc3BlY3QoUCkpO1xuXHR9XG5cdC8vIDcuMy4xLjNcblx0cmV0dXJuIE9bUF07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgJFR5cGVFcnJvciA9IHJlcXVpcmUoJ2VzLWVycm9ycy90eXBlJyk7XG5cbnZhciBJc1Byb3BlcnR5S2V5ID0gcmVxdWlyZSgnLi9Jc1Byb3BlcnR5S2V5Jyk7XG52YXIgVHlwZSA9IHJlcXVpcmUoJy4vVHlwZScpO1xuXG4vLyBodHRwczovLzI2Mi5lY21hLWludGVybmF0aW9uYWwub3JnLzYuMC8jc2VjLWhhc3Byb3BlcnR5XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gSGFzUHJvcGVydHkoTywgUCkge1xuXHRpZiAoVHlwZShPKSAhPT0gJ09iamVjdCcpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogYE9gIG11c3QgYmUgYW4gT2JqZWN0Jyk7XG5cdH1cblx0aWYgKCFJc1Byb3BlcnR5S2V5KFApKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IGBQYCBtdXN0IGJlIGEgUHJvcGVydHkgS2V5Jyk7XG5cdH1cblx0cmV0dXJuIFAgaW4gTztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciAkVHlwZUVycm9yID0gcmVxdWlyZSgnZXMtZXJyb3JzL3R5cGUnKTtcblxudmFyIGhhc093biA9IHJlcXVpcmUoJ2hhc293bicpO1xuXG52YXIgaXNQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9oZWxwZXJzL3JlY29yZHMvcHJvcGVydHktZGVzY3JpcHRvcicpO1xuXG4vLyBodHRwczovLzI2Mi5lY21hLWludGVybmF0aW9uYWwub3JnLzUuMS8jc2VjLTguMTAuMVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIElzQWNjZXNzb3JEZXNjcmlwdG9yKERlc2MpIHtcblx0aWYgKHR5cGVvZiBEZXNjID09PSAndW5kZWZpbmVkJykge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdGlmICghaXNQcm9wZXJ0eURlc2NyaXB0b3IoRGVzYykpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogYERlc2NgIG11c3QgYmUgYSBQcm9wZXJ0eSBEZXNjcmlwdG9yJyk7XG5cdH1cblxuXHRpZiAoIWhhc093bihEZXNjLCAnW1tHZXRdXScpICYmICFoYXNPd24oRGVzYywgJ1tbU2V0XV0nKSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdHJldHVybiB0cnVlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLy8gaHR0cHM6Ly8yNjIuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy82LjAvI3NlYy1pc2FycmF5XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvSXNBcnJheScpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vLyBodHRwOi8vMjYyLmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvNS4xLyNzZWMtOS4xMVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJ2lzLWNhbGxhYmxlJyk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCcuLi9HZXRJbnRyaW5zaWMuanMnKTtcblxudmFyICRjb25zdHJ1Y3QgPSBHZXRJbnRyaW5zaWMoJyVSZWZsZWN0LmNvbnN0cnVjdCUnLCB0cnVlKTtcblxudmFyIERlZmluZVByb3BlcnR5T3JUaHJvdyA9IHJlcXVpcmUoJy4vRGVmaW5lUHJvcGVydHlPclRocm93Jyk7XG50cnkge1xuXHREZWZpbmVQcm9wZXJ0eU9yVGhyb3coe30sICcnLCB7ICdbW0dldF1dJzogZnVuY3Rpb24gKCkge30gfSk7XG59IGNhdGNoIChlKSB7XG5cdC8vIEFjY2Vzc29yIHByb3BlcnRpZXMgYXJlbid0IHN1cHBvcnRlZFxuXHREZWZpbmVQcm9wZXJ0eU9yVGhyb3cgPSBudWxsO1xufVxuXG4vLyBodHRwczovLzI2Mi5lY21hLWludGVybmF0aW9uYWwub3JnLzYuMC8jc2VjLWlzY29uc3RydWN0b3JcblxuaWYgKERlZmluZVByb3BlcnR5T3JUaHJvdyAmJiAkY29uc3RydWN0KSB7XG5cdHZhciBpc0NvbnN0cnVjdG9yTWFya2VyID0ge307XG5cdHZhciBiYWRBcnJheUxpa2UgPSB7fTtcblx0RGVmaW5lUHJvcGVydHlPclRocm93KGJhZEFycmF5TGlrZSwgJ2xlbmd0aCcsIHtcblx0XHQnW1tHZXRdXSc6IGZ1bmN0aW9uICgpIHtcblx0XHRcdHRocm93IGlzQ29uc3RydWN0b3JNYXJrZXI7XG5cdFx0fSxcblx0XHQnW1tFbnVtZXJhYmxlXV0nOiB0cnVlXG5cdH0pO1xuXG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gSXNDb25zdHJ1Y3Rvcihhcmd1bWVudCkge1xuXHRcdHRyeSB7XG5cdFx0XHQvLyBgUmVmbGVjdC5jb25zdHJ1Y3RgIGludm9rZXMgYElzQ29uc3RydWN0b3IodGFyZ2V0KWAgYmVmb3JlIGBHZXQoYXJncywgJ2xlbmd0aCcpYDpcblx0XHRcdCRjb25zdHJ1Y3QoYXJndW1lbnQsIGJhZEFycmF5TGlrZSk7XG5cdFx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0XHRyZXR1cm4gZXJyID09PSBpc0NvbnN0cnVjdG9yTWFya2VyO1xuXHRcdH1cblx0fTtcbn0gZWxzZSB7XG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gSXNDb25zdHJ1Y3Rvcihhcmd1bWVudCkge1xuXHRcdC8vIHVuZm9ydHVuYXRlbHkgdGhlcmUncyBubyB3YXkgdG8gdHJ1bHkgY2hlY2sgdGhpcyB3aXRob3V0IHRyeS9jYXRjaCBgbmV3IGFyZ3VtZW50YCBpbiBvbGQgZW52aXJvbm1lbnRzXG5cdFx0cmV0dXJuIHR5cGVvZiBhcmd1bWVudCA9PT0gJ2Z1bmN0aW9uJyAmJiAhIWFyZ3VtZW50LnByb3RvdHlwZTtcblx0fTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyICRUeXBlRXJyb3IgPSByZXF1aXJlKCdlcy1lcnJvcnMvdHlwZScpO1xuXG52YXIgaGFzT3duID0gcmVxdWlyZSgnaGFzb3duJyk7XG5cbnZhciBpc1Byb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvcmVjb3Jkcy9wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5cbi8vIGh0dHBzOi8vMjYyLmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvNS4xLyNzZWMtOC4xMC4yXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gSXNEYXRhRGVzY3JpcHRvcihEZXNjKSB7XG5cdGlmICh0eXBlb2YgRGVzYyA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRpZiAoIWlzUHJvcGVydHlEZXNjcmlwdG9yKERlc2MpKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IGBEZXNjYCBtdXN0IGJlIGEgUHJvcGVydHkgRGVzY3JpcHRvcicpO1xuXHR9XG5cblx0aWYgKCFoYXNPd24oRGVzYywgJ1tbVmFsdWVdXScpICYmICFoYXNPd24oRGVzYywgJ1tbV3JpdGFibGVdXScpKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0cmV0dXJuIHRydWU7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnZ2V0LWludHJpbnNpYycpO1xuXG52YXIgJHByZXZlbnRFeHRlbnNpb25zID0gR2V0SW50cmluc2ljKCclT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zJScsIHRydWUpO1xudmFyICRpc0V4dGVuc2libGUgPSBHZXRJbnRyaW5zaWMoJyVPYmplY3QuaXNFeHRlbnNpYmxlJScsIHRydWUpO1xuXG52YXIgaXNQcmltaXRpdmUgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2lzUHJpbWl0aXZlJyk7XG5cbi8vIGh0dHBzOi8vMjYyLmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvNi4wLyNzZWMtaXNleHRlbnNpYmxlLW9cblxubW9kdWxlLmV4cG9ydHMgPSAkcHJldmVudEV4dGVuc2lvbnNcblx0PyBmdW5jdGlvbiBJc0V4dGVuc2libGUob2JqKSB7XG5cdFx0cmV0dXJuICFpc1ByaW1pdGl2ZShvYmopICYmICRpc0V4dGVuc2libGUob2JqKTtcblx0fVxuXHQ6IGZ1bmN0aW9uIElzRXh0ZW5zaWJsZShvYmopIHtcblx0XHRyZXR1cm4gIWlzUHJpbWl0aXZlKG9iaik7XG5cdH07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciAkVHlwZUVycm9yID0gcmVxdWlyZSgnZXMtZXJyb3JzL3R5cGUnKTtcblxudmFyIElzQWNjZXNzb3JEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9Jc0FjY2Vzc29yRGVzY3JpcHRvcicpO1xudmFyIElzRGF0YURlc2NyaXB0b3IgPSByZXF1aXJlKCcuL0lzRGF0YURlc2NyaXB0b3InKTtcblxudmFyIGlzUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaGVscGVycy9yZWNvcmRzL3Byb3BlcnR5LWRlc2NyaXB0b3InKTtcblxuLy8gaHR0cHM6Ly8yNjIuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy82LjAvI3NlYy1pc2dlbmVyaWNkZXNjcmlwdG9yXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gSXNHZW5lcmljRGVzY3JpcHRvcihEZXNjKSB7XG5cdGlmICh0eXBlb2YgRGVzYyA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRpZiAoIWlzUHJvcGVydHlEZXNjcmlwdG9yKERlc2MpKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IGBEZXNjYCBtdXN0IGJlIGEgUHJvcGVydHkgRGVzY3JpcHRvcicpO1xuXHR9XG5cblx0aWYgKCFJc0FjY2Vzc29yRGVzY3JpcHRvcihEZXNjKSAmJiAhSXNEYXRhRGVzY3JpcHRvcihEZXNjKSkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0cmV0dXJuIGZhbHNlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLy8gaHR0cHM6Ly8yNjIuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy82LjAvI3NlYy1pc3Byb3BlcnR5a2V5XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gSXNQcm9wZXJ0eUtleShhcmd1bWVudCkge1xuXHRyZXR1cm4gdHlwZW9mIGFyZ3VtZW50ID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgYXJndW1lbnQgPT09ICdzeW1ib2wnO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyICRUeXBlRXJyb3IgPSByZXF1aXJlKCdlcy1lcnJvcnMvdHlwZScpO1xuXG52YXIgR2V0ID0gcmVxdWlyZSgnLi9HZXQnKTtcbnZhciBUb0xlbmd0aCA9IHJlcXVpcmUoJy4vVG9MZW5ndGgnKTtcbnZhciBUeXBlID0gcmVxdWlyZSgnLi9UeXBlJyk7XG5cbi8vIGh0dHBzOi8vMjYyLmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvMTEuMC8jc2VjLWxlbmd0aG9mYXJyYXlsaWtlXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gTGVuZ3RoT2ZBcnJheUxpa2Uob2JqKSB7XG5cdGlmIChUeXBlKG9iaikgIT09ICdPYmplY3QnKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IGBvYmpgIG11c3QgYmUgYW4gT2JqZWN0Jyk7XG5cdH1cblx0cmV0dXJuIFRvTGVuZ3RoKEdldChvYmosICdsZW5ndGgnKSk7XG59O1xuXG4vLyBUT0RPOiB1c2UgdGhpcyBhbGwgb3ZlclxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgJGdPUEQgPSByZXF1aXJlKCdnb3BkJyk7XG52YXIgJFN5bnRheEVycm9yID0gcmVxdWlyZSgnZXMtZXJyb3JzL3N5bnRheCcpO1xudmFyICRUeXBlRXJyb3IgPSByZXF1aXJlKCdlcy1lcnJvcnMvdHlwZScpO1xuXG52YXIgaXNQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9oZWxwZXJzL3JlY29yZHMvcHJvcGVydHktZGVzY3JpcHRvcicpO1xuXG52YXIgSXNBY2Nlc3NvckRlc2NyaXB0b3IgPSByZXF1aXJlKCcuL0lzQWNjZXNzb3JEZXNjcmlwdG9yJyk7XG52YXIgSXNFeHRlbnNpYmxlID0gcmVxdWlyZSgnLi9Jc0V4dGVuc2libGUnKTtcbnZhciBJc1Byb3BlcnR5S2V5ID0gcmVxdWlyZSgnLi9Jc1Byb3BlcnR5S2V5Jyk7XG52YXIgVG9Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuL1RvUHJvcGVydHlEZXNjcmlwdG9yJyk7XG52YXIgU2FtZVZhbHVlID0gcmVxdWlyZSgnLi9TYW1lVmFsdWUnKTtcbnZhciBUeXBlID0gcmVxdWlyZSgnLi9UeXBlJyk7XG52YXIgVmFsaWRhdGVBbmRBcHBseVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vVmFsaWRhdGVBbmRBcHBseVByb3BlcnR5RGVzY3JpcHRvcicpO1xuXG4vLyBodHRwczovLzI2Mi5lY21hLWludGVybmF0aW9uYWwub3JnLzYuMC8jc2VjLW9yZGluYXJ5ZGVmaW5lb3ducHJvcGVydHlcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBPcmRpbmFyeURlZmluZU93blByb3BlcnR5KE8sIFAsIERlc2MpIHtcblx0aWYgKFR5cGUoTykgIT09ICdPYmplY3QnKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IE8gbXVzdCBiZSBhbiBPYmplY3QnKTtcblx0fVxuXHRpZiAoIUlzUHJvcGVydHlLZXkoUCkpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogUCBtdXN0IGJlIGEgUHJvcGVydHkgS2V5Jyk7XG5cdH1cblx0aWYgKCFpc1Byb3BlcnR5RGVzY3JpcHRvcihEZXNjKSkge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBEZXNjIG11c3QgYmUgYSBQcm9wZXJ0eSBEZXNjcmlwdG9yJyk7XG5cdH1cblx0aWYgKCEkZ09QRCkge1xuXHRcdC8vIEVTMy9JRSA4IGZhbGxiYWNrXG5cdFx0aWYgKElzQWNjZXNzb3JEZXNjcmlwdG9yKERlc2MpKSB7XG5cdFx0XHR0aHJvdyBuZXcgJFN5bnRheEVycm9yKCdUaGlzIGVudmlyb25tZW50IGRvZXMgbm90IHN1cHBvcnQgYWNjZXNzb3IgcHJvcGVydHkgZGVzY3JpcHRvcnMuJyk7XG5cdFx0fVxuXHRcdHZhciBjcmVhdGluZ05vcm1hbERhdGFQcm9wZXJ0eSA9ICEoUCBpbiBPKVxuXHRcdFx0JiYgRGVzY1snW1tXcml0YWJsZV1dJ11cblx0XHRcdCYmIERlc2NbJ1tbRW51bWVyYWJsZV1dJ11cblx0XHRcdCYmIERlc2NbJ1tbQ29uZmlndXJhYmxlXV0nXVxuXHRcdFx0JiYgJ1tbVmFsdWVdXScgaW4gRGVzYztcblx0XHR2YXIgc2V0dGluZ0V4aXN0aW5nRGF0YVByb3BlcnR5ID0gKFAgaW4gTylcblx0XHRcdCYmICghKCdbW0NvbmZpZ3VyYWJsZV1dJyBpbiBEZXNjKSB8fCBEZXNjWydbW0NvbmZpZ3VyYWJsZV1dJ10pXG5cdFx0XHQmJiAoISgnW1tFbnVtZXJhYmxlXV0nIGluIERlc2MpIHx8IERlc2NbJ1tbRW51bWVyYWJsZV1dJ10pXG5cdFx0XHQmJiAoISgnW1tXcml0YWJsZV1dJyBpbiBEZXNjKSB8fCBEZXNjWydbW1dyaXRhYmxlXV0nXSlcblx0XHRcdCYmICdbW1ZhbHVlXV0nIGluIERlc2M7XG5cdFx0aWYgKGNyZWF0aW5nTm9ybWFsRGF0YVByb3BlcnR5IHx8IHNldHRpbmdFeGlzdGluZ0RhdGFQcm9wZXJ0eSkge1xuXHRcdFx0T1tQXSA9IERlc2NbJ1tbVmFsdWVdXSddOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG5cdFx0XHRyZXR1cm4gU2FtZVZhbHVlKE9bUF0sIERlc2NbJ1tbVmFsdWVdXSddKTtcblx0XHR9XG5cdFx0dGhyb3cgbmV3ICRTeW50YXhFcnJvcignVGhpcyBlbnZpcm9ubWVudCBkb2VzIG5vdCBzdXBwb3J0IGRlZmluaW5nIG5vbi13cml0YWJsZSwgbm9uLWVudW1lcmFibGUsIG9yIG5vbi1jb25maWd1cmFibGUgcHJvcGVydGllcycpO1xuXHR9XG5cdHZhciBkZXNjID0gJGdPUEQoTywgUCk7XG5cdHZhciBjdXJyZW50ID0gZGVzYyAmJiBUb1Byb3BlcnR5RGVzY3JpcHRvcihkZXNjKTtcblx0dmFyIGV4dGVuc2libGUgPSBJc0V4dGVuc2libGUoTyk7XG5cdHJldHVybiBWYWxpZGF0ZUFuZEFwcGx5UHJvcGVydHlEZXNjcmlwdG9yKE8sIFAsIGV4dGVuc2libGUsIERlc2MsIGN1cnJlbnQpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyICRpc05hTiA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvaXNOYU4nKTtcblxuLy8gaHR0cDovLzI2Mi5lY21hLWludGVybmF0aW9uYWwub3JnLzUuMS8jc2VjLTkuMTJcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBTYW1lVmFsdWUoeCwgeSkge1xuXHRpZiAoeCA9PT0geSkgeyAvLyAwID09PSAtMCwgYnV0IHRoZXkgYXJlIG5vdCBpZGVudGljYWwuXG5cdFx0aWYgKHggPT09IDApIHsgcmV0dXJuIDEgLyB4ID09PSAxIC8geTsgfVxuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cdHJldHVybiAkaXNOYU4oeCkgJiYgJGlzTmFOKHkpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJ2dldC1pbnRyaW5zaWMnKTtcblxudmFyICROdW1iZXIgPSBHZXRJbnRyaW5zaWMoJyVOdW1iZXIlJyk7XG52YXIgJFJlZ0V4cCA9IEdldEludHJpbnNpYygnJVJlZ0V4cCUnKTtcbnZhciAkVHlwZUVycm9yID0gcmVxdWlyZSgnZXMtZXJyb3JzL3R5cGUnKTtcbnZhciAkcGFyc2VJbnRlZ2VyID0gR2V0SW50cmluc2ljKCclcGFyc2VJbnQlJyk7XG5cbnZhciBjYWxsQm91bmQgPSByZXF1aXJlKCdjYWxsLWJpbmQvY2FsbEJvdW5kJyk7XG52YXIgcmVnZXhUZXN0ZXIgPSByZXF1aXJlKCdzYWZlLXJlZ2V4LXRlc3QnKTtcblxudmFyICRzdHJTbGljZSA9IGNhbGxCb3VuZCgnU3RyaW5nLnByb3RvdHlwZS5zbGljZScpO1xudmFyIGlzQmluYXJ5ID0gcmVnZXhUZXN0ZXIoL14wYlswMV0rJC9pKTtcbnZhciBpc09jdGFsID0gcmVnZXhUZXN0ZXIoL14wb1swLTddKyQvaSk7XG52YXIgaXNJbnZhbGlkSGV4TGl0ZXJhbCA9IHJlZ2V4VGVzdGVyKC9eWy0rXTB4WzAtOWEtZl0rJC9pKTtcbnZhciBub25XUyA9IFsnXFx1MDA4NScsICdcXHUyMDBiJywgJ1xcdWZmZmUnXS5qb2luKCcnKTtcbnZhciBub25XU3JlZ2V4ID0gbmV3ICRSZWdFeHAoJ1snICsgbm9uV1MgKyAnXScsICdnJyk7XG52YXIgaGFzTm9uV1MgPSByZWdleFRlc3Rlcihub25XU3JlZ2V4KTtcblxudmFyICR0cmltID0gcmVxdWlyZSgnc3RyaW5nLnByb3RvdHlwZS50cmltJyk7XG5cbi8vIGh0dHBzOi8vMjYyLmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvMTMuMC8jc2VjLXN0cmluZ3RvbnVtYmVyXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gU3RyaW5nVG9OdW1iZXIoYXJndW1lbnQpIHtcblx0aWYgKHR5cGVvZiBhcmd1bWVudCAhPT0gJ3N0cmluZycpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogYGFyZ3VtZW50YCBpcyBub3QgYSBTdHJpbmcnKTtcblx0fVxuXHRpZiAoaXNCaW5hcnkoYXJndW1lbnQpKSB7XG5cdFx0cmV0dXJuICROdW1iZXIoJHBhcnNlSW50ZWdlcigkc3RyU2xpY2UoYXJndW1lbnQsIDIpLCAyKSk7XG5cdH1cblx0aWYgKGlzT2N0YWwoYXJndW1lbnQpKSB7XG5cdFx0cmV0dXJuICROdW1iZXIoJHBhcnNlSW50ZWdlcigkc3RyU2xpY2UoYXJndW1lbnQsIDIpLCA4KSk7XG5cdH1cblx0aWYgKGhhc05vbldTKGFyZ3VtZW50KSB8fCBpc0ludmFsaWRIZXhMaXRlcmFsKGFyZ3VtZW50KSkge1xuXHRcdHJldHVybiBOYU47XG5cdH1cblx0dmFyIHRyaW1tZWQgPSAkdHJpbShhcmd1bWVudCk7XG5cdGlmICh0cmltbWVkICE9PSBhcmd1bWVudCkge1xuXHRcdHJldHVybiBTdHJpbmdUb051bWJlcih0cmltbWVkKTtcblx0fVxuXHRyZXR1cm4gJE51bWJlcihhcmd1bWVudCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vLyBodHRwOi8vMjYyLmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvNS4xLyNzZWMtOS4yXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gVG9Cb29sZWFuKHZhbHVlKSB7IHJldHVybiAhIXZhbHVlOyB9O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgVG9OdW1iZXIgPSByZXF1aXJlKCcuL1RvTnVtYmVyJyk7XG52YXIgdHJ1bmNhdGUgPSByZXF1aXJlKCcuL3RydW5jYXRlJyk7XG5cbnZhciAkaXNOYU4gPSByZXF1aXJlKCcuLi9oZWxwZXJzL2lzTmFOJyk7XG52YXIgJGlzRmluaXRlID0gcmVxdWlyZSgnLi4vaGVscGVycy9pc0Zpbml0ZScpO1xuXG4vLyBodHRwczovLzI2Mi5lY21hLWludGVybmF0aW9uYWwub3JnLzE0LjAvI3NlYy10b2ludGVnZXJvcmluZmluaXR5XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gVG9JbnRlZ2VyT3JJbmZpbml0eSh2YWx1ZSkge1xuXHR2YXIgbnVtYmVyID0gVG9OdW1iZXIodmFsdWUpO1xuXHRpZiAoJGlzTmFOKG51bWJlcikgfHwgbnVtYmVyID09PSAwKSB7IHJldHVybiAwOyB9XG5cdGlmICghJGlzRmluaXRlKG51bWJlcikpIHsgcmV0dXJuIG51bWJlcjsgfVxuXHRyZXR1cm4gdHJ1bmNhdGUobnVtYmVyKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBNQVhfU0FGRV9JTlRFR0VSID0gcmVxdWlyZSgnLi4vaGVscGVycy9tYXhTYWZlSW50ZWdlcicpO1xuXG52YXIgVG9JbnRlZ2VyT3JJbmZpbml0eSA9IHJlcXVpcmUoJy4vVG9JbnRlZ2VyT3JJbmZpbml0eScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIFRvTGVuZ3RoKGFyZ3VtZW50KSB7XG5cdHZhciBsZW4gPSBUb0ludGVnZXJPckluZmluaXR5KGFyZ3VtZW50KTtcblx0aWYgKGxlbiA8PSAwKSB7IHJldHVybiAwOyB9IC8vIGluY2x1ZGVzIGNvbnZlcnRpbmcgLTAgdG8gKzBcblx0aWYgKGxlbiA+IE1BWF9TQUZFX0lOVEVHRVIpIHsgcmV0dXJuIE1BWF9TQUZFX0lOVEVHRVI7IH1cblx0cmV0dXJuIGxlbjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCdnZXQtaW50cmluc2ljJyk7XG5cbnZhciAkVHlwZUVycm9yID0gcmVxdWlyZSgnZXMtZXJyb3JzL3R5cGUnKTtcbnZhciAkTnVtYmVyID0gR2V0SW50cmluc2ljKCclTnVtYmVyJScpO1xudmFyIGlzUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaGVscGVycy9pc1ByaW1pdGl2ZScpO1xuXG52YXIgVG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL1RvUHJpbWl0aXZlJyk7XG52YXIgU3RyaW5nVG9OdW1iZXIgPSByZXF1aXJlKCcuL1N0cmluZ1RvTnVtYmVyJyk7XG5cbi8vIGh0dHBzOi8vMjYyLmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvMTMuMC8jc2VjLXRvbnVtYmVyXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gVG9OdW1iZXIoYXJndW1lbnQpIHtcblx0dmFyIHZhbHVlID0gaXNQcmltaXRpdmUoYXJndW1lbnQpID8gYXJndW1lbnQgOiBUb1ByaW1pdGl2ZShhcmd1bWVudCwgJE51bWJlcik7XG5cdGlmICh0eXBlb2YgdmFsdWUgPT09ICdzeW1ib2wnKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Nhbm5vdCBjb252ZXJ0IGEgU3ltYm9sIHZhbHVlIHRvIGEgbnVtYmVyJyk7XG5cdH1cblx0aWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2JpZ2ludCcpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQ29udmVyc2lvbiBmcm9tIFxcJ0JpZ0ludFxcJyB0byBcXCdudW1iZXJcXCcgaXMgbm90IGFsbG93ZWQuJyk7XG5cdH1cblx0aWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcblx0XHRyZXR1cm4gU3RyaW5nVG9OdW1iZXIodmFsdWUpO1xuXHR9XG5cdHJldHVybiAkTnVtYmVyKHZhbHVlKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJ2VzLXRvLXByaW1pdGl2ZS9lczIwMTUnKTtcblxuLy8gaHR0cHM6Ly8yNjIuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy82LjAvI3NlYy10b3ByaW1pdGl2ZVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIFRvUHJpbWl0aXZlKGlucHV0KSB7XG5cdGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuXHRcdHJldHVybiB0b1ByaW1pdGl2ZShpbnB1dCwgYXJndW1lbnRzWzFdKTtcblx0fVxuXHRyZXR1cm4gdG9QcmltaXRpdmUoaW5wdXQpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGhhc093biA9IHJlcXVpcmUoJ2hhc293bicpO1xuXG52YXIgJFR5cGVFcnJvciA9IHJlcXVpcmUoJ2VzLWVycm9ycy90eXBlJyk7XG5cbnZhciBUeXBlID0gcmVxdWlyZSgnLi9UeXBlJyk7XG52YXIgVG9Cb29sZWFuID0gcmVxdWlyZSgnLi9Ub0Jvb2xlYW4nKTtcbnZhciBJc0NhbGxhYmxlID0gcmVxdWlyZSgnLi9Jc0NhbGxhYmxlJyk7XG5cbi8vIGh0dHBzOi8vMjYyLmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvNS4xLyNzZWMtOC4xMC41XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gVG9Qcm9wZXJ0eURlc2NyaXB0b3IoT2JqKSB7XG5cdGlmIChUeXBlKE9iaikgIT09ICdPYmplY3QnKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ1RvUHJvcGVydHlEZXNjcmlwdG9yIHJlcXVpcmVzIGFuIG9iamVjdCcpO1xuXHR9XG5cblx0dmFyIGRlc2MgPSB7fTtcblx0aWYgKGhhc093bihPYmosICdlbnVtZXJhYmxlJykpIHtcblx0XHRkZXNjWydbW0VudW1lcmFibGVdXSddID0gVG9Cb29sZWFuKE9iai5lbnVtZXJhYmxlKTtcblx0fVxuXHRpZiAoaGFzT3duKE9iaiwgJ2NvbmZpZ3VyYWJsZScpKSB7XG5cdFx0ZGVzY1snW1tDb25maWd1cmFibGVdXSddID0gVG9Cb29sZWFuKE9iai5jb25maWd1cmFibGUpO1xuXHR9XG5cdGlmIChoYXNPd24oT2JqLCAndmFsdWUnKSkge1xuXHRcdGRlc2NbJ1tbVmFsdWVdXSddID0gT2JqLnZhbHVlO1xuXHR9XG5cdGlmIChoYXNPd24oT2JqLCAnd3JpdGFibGUnKSkge1xuXHRcdGRlc2NbJ1tbV3JpdGFibGVdXSddID0gVG9Cb29sZWFuKE9iai53cml0YWJsZSk7XG5cdH1cblx0aWYgKGhhc093bihPYmosICdnZXQnKSkge1xuXHRcdHZhciBnZXR0ZXIgPSBPYmouZ2V0O1xuXHRcdGlmICh0eXBlb2YgZ2V0dGVyICE9PSAndW5kZWZpbmVkJyAmJiAhSXNDYWxsYWJsZShnZXR0ZXIpKSB7XG5cdFx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignZ2V0dGVyIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuXHRcdH1cblx0XHRkZXNjWydbW0dldF1dJ10gPSBnZXR0ZXI7XG5cdH1cblx0aWYgKGhhc093bihPYmosICdzZXQnKSkge1xuXHRcdHZhciBzZXR0ZXIgPSBPYmouc2V0O1xuXHRcdGlmICh0eXBlb2Ygc2V0dGVyICE9PSAndW5kZWZpbmVkJyAmJiAhSXNDYWxsYWJsZShzZXR0ZXIpKSB7XG5cdFx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignc2V0dGVyIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuXHRcdH1cblx0XHRkZXNjWydbW1NldF1dJ10gPSBzZXR0ZXI7XG5cdH1cblxuXHRpZiAoKGhhc093bihkZXNjLCAnW1tHZXRdXScpIHx8IGhhc093bihkZXNjLCAnW1tTZXRdXScpKSAmJiAoaGFzT3duKGRlc2MsICdbW1ZhbHVlXV0nKSB8fCBoYXNPd24oZGVzYywgJ1tbV3JpdGFibGVdXScpKSkge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdJbnZhbGlkIHByb3BlcnR5IGRlc2NyaXB0b3IuIENhbm5vdCBib3RoIHNwZWNpZnkgYWNjZXNzb3JzIGFuZCBhIHZhbHVlIG9yIHdyaXRhYmxlIGF0dHJpYnV0ZScpO1xuXHR9XG5cdHJldHVybiBkZXNjO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJ2dldC1pbnRyaW5zaWMnKTtcblxudmFyICRTdHJpbmcgPSBHZXRJbnRyaW5zaWMoJyVTdHJpbmclJyk7XG52YXIgJFR5cGVFcnJvciA9IHJlcXVpcmUoJ2VzLWVycm9ycy90eXBlJyk7XG5cbi8vIGh0dHBzOi8vMjYyLmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvNi4wLyNzZWMtdG9zdHJpbmdcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBUb1N0cmluZyhhcmd1bWVudCkge1xuXHRpZiAodHlwZW9mIGFyZ3VtZW50ID09PSAnc3ltYm9sJykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdDYW5ub3QgY29udmVydCBhIFN5bWJvbCB2YWx1ZSB0byBhIHN0cmluZycpO1xuXHR9XG5cdHJldHVybiAkU3RyaW5nKGFyZ3VtZW50KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBFUzVUeXBlID0gcmVxdWlyZSgnLi4vNS9UeXBlJyk7XG5cbi8vIGh0dHBzOi8vMjYyLmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvMTEuMC8jc2VjLWVjbWFzY3JpcHQtZGF0YS10eXBlcy1hbmQtdmFsdWVzXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gVHlwZSh4KSB7XG5cdGlmICh0eXBlb2YgeCA9PT0gJ3N5bWJvbCcpIHtcblx0XHRyZXR1cm4gJ1N5bWJvbCc7XG5cdH1cblx0aWYgKHR5cGVvZiB4ID09PSAnYmlnaW50Jykge1xuXHRcdHJldHVybiAnQmlnSW50Jztcblx0fVxuXHRyZXR1cm4gRVM1VHlwZSh4KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciAkVHlwZUVycm9yID0gcmVxdWlyZSgnZXMtZXJyb3JzL3R5cGUnKTtcblxudmFyIERlZmluZU93blByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaGVscGVycy9EZWZpbmVPd25Qcm9wZXJ0eScpO1xudmFyIGlzRnVsbHlQb3B1bGF0ZWRQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2lzRnVsbHlQb3B1bGF0ZWRQcm9wZXJ0eURlc2NyaXB0b3InKTtcbnZhciBpc1Byb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvcmVjb3Jkcy9wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5cbnZhciBGcm9tUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9Gcm9tUHJvcGVydHlEZXNjcmlwdG9yJyk7XG52YXIgSXNBY2Nlc3NvckRlc2NyaXB0b3IgPSByZXF1aXJlKCcuL0lzQWNjZXNzb3JEZXNjcmlwdG9yJyk7XG52YXIgSXNEYXRhRGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vSXNEYXRhRGVzY3JpcHRvcicpO1xudmFyIElzR2VuZXJpY0Rlc2NyaXB0b3IgPSByZXF1aXJlKCcuL0lzR2VuZXJpY0Rlc2NyaXB0b3InKTtcbnZhciBJc1Byb3BlcnR5S2V5ID0gcmVxdWlyZSgnLi9Jc1Byb3BlcnR5S2V5Jyk7XG52YXIgU2FtZVZhbHVlID0gcmVxdWlyZSgnLi9TYW1lVmFsdWUnKTtcbnZhciBUeXBlID0gcmVxdWlyZSgnLi9UeXBlJyk7XG5cbi8vIGh0dHBzOi8vMjYyLmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvMTMuMC8jc2VjLXZhbGlkYXRlYW5kYXBwbHlwcm9wZXJ0eWRlc2NyaXB0b3JcblxuLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L2VjbWEyNjIvcHVsbC8yNDY4IGZvciBFUzIwMjIgY2hhbmdlc1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LWxpbmVzLXBlci1mdW5jdGlvbiwgbWF4LXN0YXRlbWVudHNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gVmFsaWRhdGVBbmRBcHBseVByb3BlcnR5RGVzY3JpcHRvcihPLCBQLCBleHRlbnNpYmxlLCBEZXNjLCBjdXJyZW50KSB7XG5cdHZhciBvVHlwZSA9IFR5cGUoTyk7XG5cdGlmIChvVHlwZSAhPT0gJ1VuZGVmaW5lZCcgJiYgb1R5cGUgIT09ICdPYmplY3QnKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IE8gbXVzdCBiZSB1bmRlZmluZWQgb3IgYW4gT2JqZWN0Jyk7XG5cdH1cblx0aWYgKCFJc1Byb3BlcnR5S2V5KFApKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IFAgbXVzdCBiZSBhIFByb3BlcnR5IEtleScpO1xuXHR9XG5cdGlmICh0eXBlb2YgZXh0ZW5zaWJsZSAhPT0gJ2Jvb2xlYW4nKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IGV4dGVuc2libGUgbXVzdCBiZSBhIEJvb2xlYW4nKTtcblx0fVxuXHRpZiAoIWlzUHJvcGVydHlEZXNjcmlwdG9yKERlc2MpKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IERlc2MgbXVzdCBiZSBhIFByb3BlcnR5IERlc2NyaXB0b3InKTtcblx0fVxuXHRpZiAodHlwZW9mIGN1cnJlbnQgIT09ICd1bmRlZmluZWQnICYmICFpc1Byb3BlcnR5RGVzY3JpcHRvcihjdXJyZW50KSkge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBjdXJyZW50IG11c3QgYmUgYSBQcm9wZXJ0eSBEZXNjcmlwdG9yLCBvciB1bmRlZmluZWQnKTtcblx0fVxuXG5cdGlmICh0eXBlb2YgY3VycmVudCA9PT0gJ3VuZGVmaW5lZCcpIHsgLy8gc3RlcCAyXG5cdFx0aWYgKCFleHRlbnNpYmxlKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7IC8vIHN0ZXAgMi5hXG5cdFx0fVxuXHRcdGlmIChvVHlwZSA9PT0gJ1VuZGVmaW5lZCcpIHtcblx0XHRcdHJldHVybiB0cnVlOyAvLyBzdGVwIDIuYlxuXHRcdH1cblx0XHRpZiAoSXNBY2Nlc3NvckRlc2NyaXB0b3IoRGVzYykpIHsgLy8gc3RlcCAyLmNcblx0XHRcdHJldHVybiBEZWZpbmVPd25Qcm9wZXJ0eShcblx0XHRcdFx0SXNEYXRhRGVzY3JpcHRvcixcblx0XHRcdFx0U2FtZVZhbHVlLFxuXHRcdFx0XHRGcm9tUHJvcGVydHlEZXNjcmlwdG9yLFxuXHRcdFx0XHRPLFxuXHRcdFx0XHRQLFxuXHRcdFx0XHREZXNjXG5cdFx0XHQpO1xuXHRcdH1cblx0XHQvLyBzdGVwIDIuZFxuXHRcdHJldHVybiBEZWZpbmVPd25Qcm9wZXJ0eShcblx0XHRcdElzRGF0YURlc2NyaXB0b3IsXG5cdFx0XHRTYW1lVmFsdWUsXG5cdFx0XHRGcm9tUHJvcGVydHlEZXNjcmlwdG9yLFxuXHRcdFx0Tyxcblx0XHRcdFAsXG5cdFx0XHR7XG5cdFx0XHRcdCdbW0NvbmZpZ3VyYWJsZV1dJzogISFEZXNjWydbW0NvbmZpZ3VyYWJsZV1dJ10sXG5cdFx0XHRcdCdbW0VudW1lcmFibGVdXSc6ICEhRGVzY1snW1tFbnVtZXJhYmxlXV0nXSxcblx0XHRcdFx0J1tbVmFsdWVdXSc6IERlc2NbJ1tbVmFsdWVdXSddLFxuXHRcdFx0XHQnW1tXcml0YWJsZV1dJzogISFEZXNjWydbW1dyaXRhYmxlXV0nXVxuXHRcdFx0fVxuXHRcdCk7XG5cdH1cblxuXHQvLyAzLiBBc3NlcnQ6IGN1cnJlbnQgaXMgYSBmdWxseSBwb3B1bGF0ZWQgUHJvcGVydHkgRGVzY3JpcHRvci5cblx0aWYgKFxuXHRcdCFpc0Z1bGx5UG9wdWxhdGVkUHJvcGVydHlEZXNjcmlwdG9yKFxuXHRcdFx0e1xuXHRcdFx0XHRJc0FjY2Vzc29yRGVzY3JpcHRvcjogSXNBY2Nlc3NvckRlc2NyaXB0b3IsXG5cdFx0XHRcdElzRGF0YURlc2NyaXB0b3I6IElzRGF0YURlc2NyaXB0b3Jcblx0XHRcdH0sXG5cdFx0XHRjdXJyZW50XG5cdFx0KVxuXHQpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignYGN1cnJlbnRgLCB3aGVuIHByZXNlbnQsIG11c3QgYmUgYSBmdWxseSBwb3B1bGF0ZWQgYW5kIHZhbGlkIFByb3BlcnR5IERlc2NyaXB0b3InKTtcblx0fVxuXG5cdC8vIDQuIElmIGV2ZXJ5IGZpZWxkIGluIERlc2MgaXMgYWJzZW50LCByZXR1cm4gdHJ1ZS5cblx0Ly8gdGhpcyBjYW4ndCByZWFsbHkgbWF0Y2ggdGhlIGFzc2VydGlvbiB0aGF0IGl0J3MgYSBQcm9wZXJ0eSBEZXNjcmlwdG9yIGluIG91ciBKUyBpbXBsZW1lbnRhdGlvblxuXG5cdC8vIDUuIElmIGN1cnJlbnQuW1tDb25maWd1cmFibGVdXSBpcyBmYWxzZSwgdGhlblxuXHRpZiAoIWN1cnJlbnRbJ1tbQ29uZmlndXJhYmxlXV0nXSkge1xuXHRcdGlmICgnW1tDb25maWd1cmFibGVdXScgaW4gRGVzYyAmJiBEZXNjWydbW0NvbmZpZ3VyYWJsZV1dJ10pIHtcblx0XHRcdC8vIHN0ZXAgNS5hXG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdGlmICgnW1tFbnVtZXJhYmxlXV0nIGluIERlc2MgJiYgIVNhbWVWYWx1ZShEZXNjWydbW0VudW1lcmFibGVdXSddLCBjdXJyZW50WydbW0VudW1lcmFibGVdXSddKSkge1xuXHRcdFx0Ly8gc3RlcCA1LmJcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0aWYgKCFJc0dlbmVyaWNEZXNjcmlwdG9yKERlc2MpICYmICFTYW1lVmFsdWUoSXNBY2Nlc3NvckRlc2NyaXB0b3IoRGVzYyksIElzQWNjZXNzb3JEZXNjcmlwdG9yKGN1cnJlbnQpKSkge1xuXHRcdFx0Ly8gc3RlcCA1LmNcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0aWYgKElzQWNjZXNzb3JEZXNjcmlwdG9yKGN1cnJlbnQpKSB7IC8vIHN0ZXAgNS5kXG5cdFx0XHRpZiAoJ1tbR2V0XV0nIGluIERlc2MgJiYgIVNhbWVWYWx1ZShEZXNjWydbW0dldF1dJ10sIGN1cnJlbnRbJ1tbR2V0XV0nXSkpIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCdbW1NldF1dJyBpbiBEZXNjICYmICFTYW1lVmFsdWUoRGVzY1snW1tTZXRdXSddLCBjdXJyZW50WydbW1NldF1dJ10pKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHR9IGVsc2UgaWYgKCFjdXJyZW50WydbW1dyaXRhYmxlXV0nXSkgeyAvLyBzdGVwIDUuZVxuXHRcdFx0aWYgKCdbW1dyaXRhYmxlXV0nIGluIERlc2MgJiYgRGVzY1snW1tXcml0YWJsZV1dJ10pIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCdbW1ZhbHVlXV0nIGluIERlc2MgJiYgIVNhbWVWYWx1ZShEZXNjWydbW1ZhbHVlXV0nXSwgY3VycmVudFsnW1tWYWx1ZV1dJ10pKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyA2LiBJZiBPIGlzIG5vdCB1bmRlZmluZWQsIHRoZW5cblx0aWYgKG9UeXBlICE9PSAnVW5kZWZpbmVkJykge1xuXHRcdHZhciBjb25maWd1cmFibGU7XG5cdFx0dmFyIGVudW1lcmFibGU7XG5cdFx0aWYgKElzRGF0YURlc2NyaXB0b3IoY3VycmVudCkgJiYgSXNBY2Nlc3NvckRlc2NyaXB0b3IoRGVzYykpIHsgLy8gc3RlcCA2LmFcblx0XHRcdGNvbmZpZ3VyYWJsZSA9ICgnW1tDb25maWd1cmFibGVdXScgaW4gRGVzYyA/IERlc2MgOiBjdXJyZW50KVsnW1tDb25maWd1cmFibGVdXSddO1xuXHRcdFx0ZW51bWVyYWJsZSA9ICgnW1tFbnVtZXJhYmxlXV0nIGluIERlc2MgPyBEZXNjIDogY3VycmVudClbJ1tbRW51bWVyYWJsZV1dJ107XG5cdFx0XHQvLyBSZXBsYWNlIHRoZSBwcm9wZXJ0eSBuYW1lZCBQIG9mIG9iamVjdCBPIHdpdGggYW4gYWNjZXNzb3IgcHJvcGVydHkgaGF2aW5nIFtbQ29uZmlndXJhYmxlXV0gYW5kIFtbRW51bWVyYWJsZV1dIGF0dHJpYnV0ZXMgYXMgZGVzY3JpYmVkIGJ5IGN1cnJlbnQgYW5kIGVhY2ggb3RoZXIgYXR0cmlidXRlIHNldCB0byBpdHMgZGVmYXVsdCB2YWx1ZS5cblx0XHRcdHJldHVybiBEZWZpbmVPd25Qcm9wZXJ0eShcblx0XHRcdFx0SXNEYXRhRGVzY3JpcHRvcixcblx0XHRcdFx0U2FtZVZhbHVlLFxuXHRcdFx0XHRGcm9tUHJvcGVydHlEZXNjcmlwdG9yLFxuXHRcdFx0XHRPLFxuXHRcdFx0XHRQLFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0J1tbQ29uZmlndXJhYmxlXV0nOiAhIWNvbmZpZ3VyYWJsZSxcblx0XHRcdFx0XHQnW1tFbnVtZXJhYmxlXV0nOiAhIWVudW1lcmFibGUsXG5cdFx0XHRcdFx0J1tbR2V0XV0nOiAoJ1tbR2V0XV0nIGluIERlc2MgPyBEZXNjIDogY3VycmVudClbJ1tbR2V0XV0nXSxcblx0XHRcdFx0XHQnW1tTZXRdXSc6ICgnW1tTZXRdXScgaW4gRGVzYyA/IERlc2MgOiBjdXJyZW50KVsnW1tTZXRdXSddXG5cdFx0XHRcdH1cblx0XHRcdCk7XG5cdFx0fSBlbHNlIGlmIChJc0FjY2Vzc29yRGVzY3JpcHRvcihjdXJyZW50KSAmJiBJc0RhdGFEZXNjcmlwdG9yKERlc2MpKSB7XG5cdFx0XHRjb25maWd1cmFibGUgPSAoJ1tbQ29uZmlndXJhYmxlXV0nIGluIERlc2MgPyBEZXNjIDogY3VycmVudClbJ1tbQ29uZmlndXJhYmxlXV0nXTtcblx0XHRcdGVudW1lcmFibGUgPSAoJ1tbRW51bWVyYWJsZV1dJyBpbiBEZXNjID8gRGVzYyA6IGN1cnJlbnQpWydbW0VudW1lcmFibGVdXSddO1xuXHRcdFx0Ly8gaS4gUmVwbGFjZSB0aGUgcHJvcGVydHkgbmFtZWQgUCBvZiBvYmplY3QgTyB3aXRoIGEgZGF0YSBwcm9wZXJ0eSBoYXZpbmcgW1tDb25maWd1cmFibGVdXSBhbmQgW1tFbnVtZXJhYmxlXV0gYXR0cmlidXRlcyBhcyBkZXNjcmliZWQgYnkgY3VycmVudCBhbmQgZWFjaCBvdGhlciBhdHRyaWJ1dGUgc2V0IHRvIGl0cyBkZWZhdWx0IHZhbHVlLlxuXHRcdFx0cmV0dXJuIERlZmluZU93blByb3BlcnR5KFxuXHRcdFx0XHRJc0RhdGFEZXNjcmlwdG9yLFxuXHRcdFx0XHRTYW1lVmFsdWUsXG5cdFx0XHRcdEZyb21Qcm9wZXJ0eURlc2NyaXB0b3IsXG5cdFx0XHRcdE8sXG5cdFx0XHRcdFAsXG5cdFx0XHRcdHtcblx0XHRcdFx0XHQnW1tDb25maWd1cmFibGVdXSc6ICEhY29uZmlndXJhYmxlLFxuXHRcdFx0XHRcdCdbW0VudW1lcmFibGVdXSc6ICEhZW51bWVyYWJsZSxcblx0XHRcdFx0XHQnW1tWYWx1ZV1dJzogKCdbW1ZhbHVlXV0nIGluIERlc2MgPyBEZXNjIDogY3VycmVudClbJ1tbVmFsdWVdXSddLFxuXHRcdFx0XHRcdCdbW1dyaXRhYmxlXV0nOiAhISgnW1tXcml0YWJsZV1dJyBpbiBEZXNjID8gRGVzYyA6IGN1cnJlbnQpWydbW1dyaXRhYmxlXV0nXVxuXHRcdFx0XHR9XG5cdFx0XHQpO1xuXHRcdH1cblxuXHRcdC8vIEZvciBlYWNoIGZpZWxkIG9mIERlc2MgdGhhdCBpcyBwcmVzZW50LCBzZXQgdGhlIGNvcnJlc3BvbmRpbmcgYXR0cmlidXRlIG9mIHRoZSBwcm9wZXJ0eSBuYW1lZCBQIG9mIG9iamVjdCBPIHRvIHRoZSB2YWx1ZSBvZiB0aGUgZmllbGQuXG5cdFx0cmV0dXJuIERlZmluZU93blByb3BlcnR5KFxuXHRcdFx0SXNEYXRhRGVzY3JpcHRvcixcblx0XHRcdFNhbWVWYWx1ZSxcblx0XHRcdEZyb21Qcm9wZXJ0eURlc2NyaXB0b3IsXG5cdFx0XHRPLFxuXHRcdFx0UCxcblx0XHRcdERlc2Ncblx0XHQpO1xuXHR9XG5cblx0cmV0dXJuIHRydWU7IC8vIHN0ZXAgN1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLy8gdmFyIG1vZHVsbyA9IHJlcXVpcmUoJy4vbW9kdWxvJyk7XG52YXIgJGZsb29yID0gTWF0aC5mbG9vcjtcblxuLy8gaHR0cDovLzI2Mi5lY21hLWludGVybmF0aW9uYWwub3JnLzExLjAvI2Vxbi1mbG9vclxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGZsb29yKHgpIHtcblx0Ly8gcmV0dXJuIHggLSBtb2R1bG8oeCwgMSk7XG5cdGlmICh0eXBlb2YgeCA9PT0gJ2JpZ2ludCcpIHtcblx0XHRyZXR1cm4geDtcblx0fVxuXHRyZXR1cm4gJGZsb29yKHgpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGZsb29yID0gcmVxdWlyZSgnLi9mbG9vcicpO1xuXG52YXIgJFR5cGVFcnJvciA9IHJlcXVpcmUoJ2VzLWVycm9ycy90eXBlJyk7XG5cbi8vIGh0dHBzOi8vMjYyLmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvMTQuMC8jZXFuLXRydW5jYXRlXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gdHJ1bmNhdGUoeCkge1xuXHRpZiAodHlwZW9mIHggIT09ICdudW1iZXInICYmIHR5cGVvZiB4ICE9PSAnYmlnaW50Jykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdhcmd1bWVudCBtdXN0IGJlIGEgTnVtYmVyIG9yIGEgQmlnSW50Jyk7XG5cdH1cblx0dmFyIHJlc3VsdCA9IHggPCAwID8gLWZsb29yKC14KSA6IGZsb29yKHgpO1xuXHRyZXR1cm4gcmVzdWx0ID09PSAwID8gMCA6IHJlc3VsdDsgLy8gaW4gdGhlIHNwZWMsIHRoZXNlIGFyZSBtYXRoIHZhbHVlcywgc28gd2UgZmlsdGVyIG91dCAtMCBoZXJlXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vLyBodHRwczovLzI2Mi5lY21hLWludGVybmF0aW9uYWwub3JnLzUuMS8jc2VjLThcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBUeXBlKHgpIHtcblx0aWYgKHggPT09IG51bGwpIHtcblx0XHRyZXR1cm4gJ051bGwnO1xuXHR9XG5cdGlmICh0eXBlb2YgeCA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRyZXR1cm4gJ1VuZGVmaW5lZCc7XG5cdH1cblx0aWYgKHR5cGVvZiB4ID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiB4ID09PSAnb2JqZWN0Jykge1xuXHRcdHJldHVybiAnT2JqZWN0Jztcblx0fVxuXHRpZiAodHlwZW9mIHggPT09ICdudW1iZXInKSB7XG5cdFx0cmV0dXJuICdOdW1iZXInO1xuXHR9XG5cdGlmICh0eXBlb2YgeCA9PT0gJ2Jvb2xlYW4nKSB7XG5cdFx0cmV0dXJuICdCb29sZWFuJztcblx0fVxuXHRpZiAodHlwZW9mIHggPT09ICdzdHJpbmcnKSB7XG5cdFx0cmV0dXJuICdTdHJpbmcnO1xuXHR9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vLyBUT0RPOiByZW1vdmUsIHNlbXZlci1tYWpvclxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJ2dldC1pbnRyaW5zaWMnKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGhhc1Byb3BlcnR5RGVzY3JpcHRvcnMgPSByZXF1aXJlKCdoYXMtcHJvcGVydHktZGVzY3JpcHRvcnMnKTtcblxudmFyICRkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJ2VzLWRlZmluZS1wcm9wZXJ0eScpO1xuXG52YXIgaGFzQXJyYXlMZW5ndGhEZWZpbmVCdWcgPSBoYXNQcm9wZXJ0eURlc2NyaXB0b3JzLmhhc0FycmF5TGVuZ3RoRGVmaW5lQnVnKCk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBnbG9iYWwtcmVxdWlyZVxudmFyIGlzQXJyYXkgPSBoYXNBcnJheUxlbmd0aERlZmluZUJ1ZyAmJiByZXF1aXJlKCcuLi9oZWxwZXJzL0lzQXJyYXknKTtcblxudmFyIGNhbGxCb3VuZCA9IHJlcXVpcmUoJ2NhbGwtYmluZC9jYWxsQm91bmQnKTtcblxudmFyICRpc0VudW1lcmFibGUgPSBjYWxsQm91bmQoJ09iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUnKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1wYXJhbXNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gRGVmaW5lT3duUHJvcGVydHkoSXNEYXRhRGVzY3JpcHRvciwgU2FtZVZhbHVlLCBGcm9tUHJvcGVydHlEZXNjcmlwdG9yLCBPLCBQLCBkZXNjKSB7XG5cdGlmICghJGRlZmluZVByb3BlcnR5KSB7XG5cdFx0aWYgKCFJc0RhdGFEZXNjcmlwdG9yKGRlc2MpKSB7XG5cdFx0XHQvLyBFUzMgZG9lcyBub3Qgc3VwcG9ydCBnZXR0ZXJzL3NldHRlcnNcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0aWYgKCFkZXNjWydbW0NvbmZpZ3VyYWJsZV1dJ10gfHwgIWRlc2NbJ1tbV3JpdGFibGVdXSddKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gZmFsbGJhY2sgZm9yIEVTM1xuXHRcdGlmIChQIGluIE8gJiYgJGlzRW51bWVyYWJsZShPLCBQKSAhPT0gISFkZXNjWydbW0VudW1lcmFibGVdXSddKSB7XG5cdFx0XHQvLyBhIG5vbi1lbnVtZXJhYmxlIGV4aXN0aW5nIHByb3BlcnR5XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gcHJvcGVydHkgZG9lcyBub3QgZXhpc3QgYXQgYWxsLCBvciBleGlzdHMgYnV0IGlzIGVudW1lcmFibGVcblx0XHR2YXIgViA9IGRlc2NbJ1tbVmFsdWVdXSddO1xuXHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuXHRcdE9bUF0gPSBWOyAvLyB3aWxsIHVzZSBbW0RlZmluZV1dXG5cdFx0cmV0dXJuIFNhbWVWYWx1ZShPW1BdLCBWKTtcblx0fVxuXHRpZiAoXG5cdFx0aGFzQXJyYXlMZW5ndGhEZWZpbmVCdWdcblx0XHQmJiBQID09PSAnbGVuZ3RoJ1xuXHRcdCYmICdbW1ZhbHVlXV0nIGluIGRlc2Ncblx0XHQmJiBpc0FycmF5KE8pXG5cdFx0JiYgTy5sZW5ndGggIT09IGRlc2NbJ1tbVmFsdWVdXSddXG5cdCkge1xuXHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuXHRcdE8ubGVuZ3RoID0gZGVzY1snW1tWYWx1ZV1dJ107XG5cdFx0cmV0dXJuIE8ubGVuZ3RoID09PSBkZXNjWydbW1ZhbHVlXV0nXTtcblx0fVxuXG5cdCRkZWZpbmVQcm9wZXJ0eShPLCBQLCBGcm9tUHJvcGVydHlEZXNjcmlwdG9yKGRlc2MpKTtcblx0cmV0dXJuIHRydWU7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnZ2V0LWludHJpbnNpYycpO1xuXG52YXIgJEFycmF5ID0gR2V0SW50cmluc2ljKCclQXJyYXklJyk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBnbG9iYWwtcmVxdWlyZVxudmFyIHRvU3RyID0gISRBcnJheS5pc0FycmF5ICYmIHJlcXVpcmUoJ2NhbGwtYmluZC9jYWxsQm91bmQnKSgnT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICRBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIElzQXJyYXkoYXJndW1lbnQpIHtcblx0cmV0dXJuIHRvU3RyKGFyZ3VtZW50KSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZnJvbVByb3BlcnR5RGVzY3JpcHRvcihEZXNjKSB7XG5cdGlmICh0eXBlb2YgRGVzYyA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRyZXR1cm4gRGVzYztcblx0fVxuXHR2YXIgb2JqID0ge307XG5cdGlmICgnW1tWYWx1ZV1dJyBpbiBEZXNjKSB7XG5cdFx0b2JqLnZhbHVlID0gRGVzY1snW1tWYWx1ZV1dJ107XG5cdH1cblx0aWYgKCdbW1dyaXRhYmxlXV0nIGluIERlc2MpIHtcblx0XHRvYmoud3JpdGFibGUgPSAhIURlc2NbJ1tbV3JpdGFibGVdXSddO1xuXHR9XG5cdGlmICgnW1tHZXRdXScgaW4gRGVzYykge1xuXHRcdG9iai5nZXQgPSBEZXNjWydbW0dldF1dJ107XG5cdH1cblx0aWYgKCdbW1NldF1dJyBpbiBEZXNjKSB7XG5cdFx0b2JqLnNldCA9IERlc2NbJ1tbU2V0XV0nXTtcblx0fVxuXHRpZiAoJ1tbRW51bWVyYWJsZV1dJyBpbiBEZXNjKSB7XG5cdFx0b2JqLmVudW1lcmFibGUgPSAhIURlc2NbJ1tbRW51bWVyYWJsZV1dJ107XG5cdH1cblx0aWYgKCdbW0NvbmZpZ3VyYWJsZV1dJyBpbiBEZXNjKSB7XG5cdFx0b2JqLmNvbmZpZ3VyYWJsZSA9ICEhRGVzY1snW1tDb25maWd1cmFibGVdXSddO1xuXHR9XG5cdHJldHVybiBvYmo7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgJGlzTmFOID0gcmVxdWlyZSgnLi9pc05hTicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh4KSB7IHJldHVybiAodHlwZW9mIHggPT09ICdudW1iZXInIHx8IHR5cGVvZiB4ID09PSAnYmlnaW50JykgJiYgISRpc05hTih4KSAmJiB4ICE9PSBJbmZpbml0eSAmJiB4ICE9PSAtSW5maW5pdHk7IH07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpc1Byb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vcmVjb3Jkcy9wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNGdWxseVBvcHVsYXRlZFByb3BlcnR5RGVzY3JpcHRvcihFUywgRGVzYykge1xuXHRyZXR1cm4gaXNQcm9wZXJ0eURlc2NyaXB0b3IoRGVzYylcblx0XHQmJiB0eXBlb2YgRGVzYyA9PT0gJ29iamVjdCdcblx0XHQmJiAnW1tFbnVtZXJhYmxlXV0nIGluIERlc2Ncblx0XHQmJiAnW1tDb25maWd1cmFibGVdXScgaW4gRGVzY1xuXHRcdCYmIChFUy5Jc0FjY2Vzc29yRGVzY3JpcHRvcihEZXNjKSB8fCBFUy5Jc0RhdGFEZXNjcmlwdG9yKERlc2MpKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCdnZXQtaW50cmluc2ljJyk7XG5cbnZhciAkYWJzID0gR2V0SW50cmluc2ljKCclTWF0aC5hYnMlJyk7XG52YXIgJGZsb29yID0gR2V0SW50cmluc2ljKCclTWF0aC5mbG9vciUnKTtcblxudmFyICRpc05hTiA9IHJlcXVpcmUoJy4vaXNOYU4nKTtcbnZhciAkaXNGaW5pdGUgPSByZXF1aXJlKCcuL2lzRmluaXRlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNJbnRlZ2VyKGFyZ3VtZW50KSB7XG5cdGlmICh0eXBlb2YgYXJndW1lbnQgIT09ICdudW1iZXInIHx8ICRpc05hTihhcmd1bWVudCkgfHwgISRpc0Zpbml0ZShhcmd1bWVudCkpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0dmFyIGFic1ZhbHVlID0gJGFicyhhcmd1bWVudCk7XG5cdHJldHVybiAkZmxvb3IoYWJzVmFsdWUpID09PSBhYnNWYWx1ZTtcbn07XG5cbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBOdW1iZXIuaXNOYU4gfHwgZnVuY3Rpb24gaXNOYU4oYSkge1xuXHRyZXR1cm4gYSAhPT0gYTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNQcmltaXRpdmUodmFsdWUpIHtcblx0cmV0dXJuIHZhbHVlID09PSBudWxsIHx8ICh0eXBlb2YgdmFsdWUgIT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0Jyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSIHx8IDkwMDcxOTkyNTQ3NDA5OTE7IC8vIE1hdGgucG93KDIsIDUzKSAtIDE7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciAkVHlwZUVycm9yID0gcmVxdWlyZSgnZXMtZXJyb3JzL3R5cGUnKTtcblxudmFyIGhhc093biA9IHJlcXVpcmUoJ2hhc293bicpO1xuXG52YXIgYWxsb3dlZCA9IHtcblx0X19wcm90b19fOiBudWxsLFxuXHQnW1tDb25maWd1cmFibGVdXSc6IHRydWUsXG5cdCdbW0VudW1lcmFibGVdXSc6IHRydWUsXG5cdCdbW0dldF1dJzogdHJ1ZSxcblx0J1tbU2V0XV0nOiB0cnVlLFxuXHQnW1tWYWx1ZV1dJzogdHJ1ZSxcblx0J1tbV3JpdGFibGVdXSc6IHRydWVcbn07XG5cbi8vIGh0dHBzOi8vMjYyLmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvNi4wLyNzZWMtcHJvcGVydHktZGVzY3JpcHRvci1zcGVjaWZpY2F0aW9uLXR5cGVcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc1Byb3BlcnR5RGVzY3JpcHRvcihEZXNjKSB7XG5cdGlmICghRGVzYyB8fCB0eXBlb2YgRGVzYyAhPT0gJ29iamVjdCcpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRmb3IgKHZhciBrZXkgaW4gRGVzYykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cdFx0aWYgKGhhc093bihEZXNjLCBrZXkpICYmICFhbGxvd2VkW2tleV0pIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdH1cblxuXHR2YXIgaXNEYXRhID0gaGFzT3duKERlc2MsICdbW1ZhbHVlXV0nKSB8fCBoYXNPd24oRGVzYywgJ1tbV3JpdGFibGVdXScpO1xuXHR2YXIgSXNBY2Nlc3NvciA9IGhhc093bihEZXNjLCAnW1tHZXRdXScpIHx8IGhhc093bihEZXNjLCAnW1tTZXRdXScpO1xuXHRpZiAoaXNEYXRhICYmIElzQWNjZXNzb3IpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignUHJvcGVydHkgRGVzY3JpcHRvcnMgbWF5IG5vdCBiZSBib3RoIGFjY2Vzc29yIGFuZCBkYXRhIGRlc2NyaXB0b3JzJyk7XG5cdH1cblx0cmV0dXJuIHRydWU7XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmFkYXB0ZXIgPSBleHBvcnRzLnNlcmlhbGl6ZURvY3R5cGVDb250ZW50ID0gdm9pZCAwO1xuY29uc3QgcGFyc2U1XzEgPSByZXF1aXJlKFwicGFyc2U1XCIpO1xuY29uc3QgZG9taGFuZGxlcl8xID0gcmVxdWlyZShcImRvbWhhbmRsZXJcIik7XG5mdW5jdGlvbiBjcmVhdGVUZXh0Tm9kZSh2YWx1ZSkge1xuICAgIHJldHVybiBuZXcgZG9taGFuZGxlcl8xLlRleHQodmFsdWUpO1xufVxuZnVuY3Rpb24gZW5xdW90ZURvY3R5cGVJZChpZCkge1xuICAgIGNvbnN0IHF1b3RlID0gaWQuaW5jbHVkZXMoJ1wiJykgPyBcIidcIiA6ICdcIic7XG4gICAgcmV0dXJuIHF1b3RlICsgaWQgKyBxdW90ZTtcbn1cbi8qKiBAaW50ZXJuYWwgKi9cbmZ1bmN0aW9uIHNlcmlhbGl6ZURvY3R5cGVDb250ZW50KG5hbWUsIHB1YmxpY0lkLCBzeXN0ZW1JZCkge1xuICAgIGxldCBzdHIgPSAnIURPQ1RZUEUgJztcbiAgICBpZiAobmFtZSkge1xuICAgICAgICBzdHIgKz0gbmFtZTtcbiAgICB9XG4gICAgaWYgKHB1YmxpY0lkKSB7XG4gICAgICAgIHN0ciArPSBgIFBVQkxJQyAke2VucXVvdGVEb2N0eXBlSWQocHVibGljSWQpfWA7XG4gICAgfVxuICAgIGVsc2UgaWYgKHN5c3RlbUlkKSB7XG4gICAgICAgIHN0ciArPSAnIFNZU1RFTSc7XG4gICAgfVxuICAgIGlmIChzeXN0ZW1JZCkge1xuICAgICAgICBzdHIgKz0gYCAke2VucXVvdGVEb2N0eXBlSWQoc3lzdGVtSWQpfWA7XG4gICAgfVxuICAgIHJldHVybiBzdHI7XG59XG5leHBvcnRzLnNlcmlhbGl6ZURvY3R5cGVDb250ZW50ID0gc2VyaWFsaXplRG9jdHlwZUNvbnRlbnQ7XG5leHBvcnRzLmFkYXB0ZXIgPSB7XG4gICAgLy8gUmUtZXhwb3J0cyBmcm9tIGRvbWhhbmRsZXJcbiAgICBpc0NvbW1lbnROb2RlOiBkb21oYW5kbGVyXzEuaXNDb21tZW50LFxuICAgIGlzRWxlbWVudE5vZGU6IGRvbWhhbmRsZXJfMS5pc1RhZyxcbiAgICBpc1RleHROb2RlOiBkb21oYW5kbGVyXzEuaXNUZXh0LFxuICAgIC8vTm9kZSBjb25zdHJ1Y3Rpb25cbiAgICBjcmVhdGVEb2N1bWVudCgpIHtcbiAgICAgICAgY29uc3Qgbm9kZSA9IG5ldyBkb21oYW5kbGVyXzEuRG9jdW1lbnQoW10pO1xuICAgICAgICBub2RlWyd4LW1vZGUnXSA9IHBhcnNlNV8xLmh0bWwuRE9DVU1FTlRfTU9ERS5OT19RVUlSS1M7XG4gICAgICAgIHJldHVybiBub2RlO1xuICAgIH0sXG4gICAgY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBkb21oYW5kbGVyXzEuRG9jdW1lbnQoW10pO1xuICAgIH0sXG4gICAgY3JlYXRlRWxlbWVudCh0YWdOYW1lLCBuYW1lc3BhY2VVUkksIGF0dHJzKSB7XG4gICAgICAgIGNvbnN0IGF0dHJpYnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICBjb25zdCBhdHRyaWJzTmFtZXNwYWNlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgY29uc3QgYXR0cmlic1ByZWZpeCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXR0cnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGF0dHJOYW1lID0gYXR0cnNbaV0ubmFtZTtcbiAgICAgICAgICAgIGF0dHJpYnNbYXR0ck5hbWVdID0gYXR0cnNbaV0udmFsdWU7XG4gICAgICAgICAgICBhdHRyaWJzTmFtZXNwYWNlW2F0dHJOYW1lXSA9IGF0dHJzW2ldLm5hbWVzcGFjZTtcbiAgICAgICAgICAgIGF0dHJpYnNQcmVmaXhbYXR0ck5hbWVdID0gYXR0cnNbaV0ucHJlZml4O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG5vZGUgPSBuZXcgZG9taGFuZGxlcl8xLkVsZW1lbnQodGFnTmFtZSwgYXR0cmlicywgW10pO1xuICAgICAgICBub2RlLm5hbWVzcGFjZSA9IG5hbWVzcGFjZVVSSTtcbiAgICAgICAgbm9kZVsneC1hdHRyaWJzTmFtZXNwYWNlJ10gPSBhdHRyaWJzTmFtZXNwYWNlO1xuICAgICAgICBub2RlWyd4LWF0dHJpYnNQcmVmaXgnXSA9IGF0dHJpYnNQcmVmaXg7XG4gICAgICAgIHJldHVybiBub2RlO1xuICAgIH0sXG4gICAgY3JlYXRlQ29tbWVudE5vZGUoZGF0YSkge1xuICAgICAgICByZXR1cm4gbmV3IGRvbWhhbmRsZXJfMS5Db21tZW50KGRhdGEpO1xuICAgIH0sXG4gICAgLy9UcmVlIG11dGF0aW9uXG4gICAgYXBwZW5kQ2hpbGQocGFyZW50Tm9kZSwgbmV3Tm9kZSkge1xuICAgICAgICBjb25zdCBwcmV2ID0gcGFyZW50Tm9kZS5jaGlsZHJlbltwYXJlbnROb2RlLmNoaWxkcmVuLmxlbmd0aCAtIDFdO1xuICAgICAgICBpZiAocHJldikge1xuICAgICAgICAgICAgcHJldi5uZXh0ID0gbmV3Tm9kZTtcbiAgICAgICAgICAgIG5ld05vZGUucHJldiA9IHByZXY7XG4gICAgICAgIH1cbiAgICAgICAgcGFyZW50Tm9kZS5jaGlsZHJlbi5wdXNoKG5ld05vZGUpO1xuICAgICAgICBuZXdOb2RlLnBhcmVudCA9IHBhcmVudE5vZGU7XG4gICAgfSxcbiAgICBpbnNlcnRCZWZvcmUocGFyZW50Tm9kZSwgbmV3Tm9kZSwgcmVmZXJlbmNlTm9kZSkge1xuICAgICAgICBjb25zdCBpbnNlcnRpb25JZHggPSBwYXJlbnROb2RlLmNoaWxkcmVuLmluZGV4T2YocmVmZXJlbmNlTm9kZSk7XG4gICAgICAgIGNvbnN0IHsgcHJldiB9ID0gcmVmZXJlbmNlTm9kZTtcbiAgICAgICAgaWYgKHByZXYpIHtcbiAgICAgICAgICAgIHByZXYubmV4dCA9IG5ld05vZGU7XG4gICAgICAgICAgICBuZXdOb2RlLnByZXYgPSBwcmV2O1xuICAgICAgICB9XG4gICAgICAgIHJlZmVyZW5jZU5vZGUucHJldiA9IG5ld05vZGU7XG4gICAgICAgIG5ld05vZGUubmV4dCA9IHJlZmVyZW5jZU5vZGU7XG4gICAgICAgIHBhcmVudE5vZGUuY2hpbGRyZW4uc3BsaWNlKGluc2VydGlvbklkeCwgMCwgbmV3Tm9kZSk7XG4gICAgICAgIG5ld05vZGUucGFyZW50ID0gcGFyZW50Tm9kZTtcbiAgICB9LFxuICAgIHNldFRlbXBsYXRlQ29udGVudCh0ZW1wbGF0ZUVsZW1lbnQsIGNvbnRlbnRFbGVtZW50KSB7XG4gICAgICAgIGV4cG9ydHMuYWRhcHRlci5hcHBlbmRDaGlsZCh0ZW1wbGF0ZUVsZW1lbnQsIGNvbnRlbnRFbGVtZW50KTtcbiAgICB9LFxuICAgIGdldFRlbXBsYXRlQ29udGVudCh0ZW1wbGF0ZUVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIHRlbXBsYXRlRWxlbWVudC5jaGlsZHJlblswXTtcbiAgICB9LFxuICAgIHNldERvY3VtZW50VHlwZShkb2N1bWVudCwgbmFtZSwgcHVibGljSWQsIHN5c3RlbUlkKSB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBzZXJpYWxpemVEb2N0eXBlQ29udGVudChuYW1lLCBwdWJsaWNJZCwgc3lzdGVtSWQpO1xuICAgICAgICBsZXQgZG9jdHlwZU5vZGUgPSBkb2N1bWVudC5jaGlsZHJlbi5maW5kKChub2RlKSA9PiAoMCwgZG9taGFuZGxlcl8xLmlzRGlyZWN0aXZlKShub2RlKSAmJiBub2RlLm5hbWUgPT09ICchZG9jdHlwZScpO1xuICAgICAgICBpZiAoZG9jdHlwZU5vZGUpIHtcbiAgICAgICAgICAgIGRvY3R5cGVOb2RlLmRhdGEgPSBkYXRhICE9PSBudWxsICYmIGRhdGEgIT09IHZvaWQgMCA/IGRhdGEgOiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZG9jdHlwZU5vZGUgPSBuZXcgZG9taGFuZGxlcl8xLlByb2Nlc3NpbmdJbnN0cnVjdGlvbignIWRvY3R5cGUnLCBkYXRhKTtcbiAgICAgICAgICAgIGV4cG9ydHMuYWRhcHRlci5hcHBlbmRDaGlsZChkb2N1bWVudCwgZG9jdHlwZU5vZGUpO1xuICAgICAgICB9XG4gICAgICAgIGRvY3R5cGVOb2RlWyd4LW5hbWUnXSA9IG5hbWUgIT09IG51bGwgJiYgbmFtZSAhPT0gdm9pZCAwID8gbmFtZSA6IHVuZGVmaW5lZDtcbiAgICAgICAgZG9jdHlwZU5vZGVbJ3gtcHVibGljSWQnXSA9IHB1YmxpY0lkICE9PSBudWxsICYmIHB1YmxpY0lkICE9PSB2b2lkIDAgPyBwdWJsaWNJZCA6IHVuZGVmaW5lZDtcbiAgICAgICAgZG9jdHlwZU5vZGVbJ3gtc3lzdGVtSWQnXSA9IHN5c3RlbUlkICE9PSBudWxsICYmIHN5c3RlbUlkICE9PSB2b2lkIDAgPyBzeXN0ZW1JZCA6IHVuZGVmaW5lZDtcbiAgICB9LFxuICAgIHNldERvY3VtZW50TW9kZShkb2N1bWVudCwgbW9kZSkge1xuICAgICAgICBkb2N1bWVudFsneC1tb2RlJ10gPSBtb2RlO1xuICAgIH0sXG4gICAgZ2V0RG9jdW1lbnRNb2RlKGRvY3VtZW50KSB7XG4gICAgICAgIHJldHVybiBkb2N1bWVudFsneC1tb2RlJ107XG4gICAgfSxcbiAgICBkZXRhY2hOb2RlKG5vZGUpIHtcbiAgICAgICAgaWYgKG5vZGUucGFyZW50KSB7XG4gICAgICAgICAgICBjb25zdCBpZHggPSBub2RlLnBhcmVudC5jaGlsZHJlbi5pbmRleE9mKG5vZGUpO1xuICAgICAgICAgICAgY29uc3QgeyBwcmV2LCBuZXh0IH0gPSBub2RlO1xuICAgICAgICAgICAgbm9kZS5wcmV2ID0gbnVsbDtcbiAgICAgICAgICAgIG5vZGUubmV4dCA9IG51bGw7XG4gICAgICAgICAgICBpZiAocHJldikge1xuICAgICAgICAgICAgICAgIHByZXYubmV4dCA9IG5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobmV4dCkge1xuICAgICAgICAgICAgICAgIG5leHQucHJldiA9IHByZXY7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBub2RlLnBhcmVudC5jaGlsZHJlbi5zcGxpY2UoaWR4LCAxKTtcbiAgICAgICAgICAgIG5vZGUucGFyZW50ID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgaW5zZXJ0VGV4dChwYXJlbnROb2RlLCB0ZXh0KSB7XG4gICAgICAgIGNvbnN0IGxhc3RDaGlsZCA9IHBhcmVudE5vZGUuY2hpbGRyZW5bcGFyZW50Tm9kZS5jaGlsZHJlbi5sZW5ndGggLSAxXTtcbiAgICAgICAgaWYgKGxhc3RDaGlsZCAmJiAoMCwgZG9taGFuZGxlcl8xLmlzVGV4dCkobGFzdENoaWxkKSkge1xuICAgICAgICAgICAgbGFzdENoaWxkLmRhdGEgKz0gdGV4dDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGV4cG9ydHMuYWRhcHRlci5hcHBlbmRDaGlsZChwYXJlbnROb2RlLCBjcmVhdGVUZXh0Tm9kZSh0ZXh0KSk7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGluc2VydFRleHRCZWZvcmUocGFyZW50Tm9kZSwgdGV4dCwgcmVmZXJlbmNlTm9kZSkge1xuICAgICAgICBjb25zdCBwcmV2Tm9kZSA9IHBhcmVudE5vZGUuY2hpbGRyZW5bcGFyZW50Tm9kZS5jaGlsZHJlbi5pbmRleE9mKHJlZmVyZW5jZU5vZGUpIC0gMV07XG4gICAgICAgIGlmIChwcmV2Tm9kZSAmJiAoMCwgZG9taGFuZGxlcl8xLmlzVGV4dCkocHJldk5vZGUpKSB7XG4gICAgICAgICAgICBwcmV2Tm9kZS5kYXRhICs9IHRleHQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBleHBvcnRzLmFkYXB0ZXIuaW5zZXJ0QmVmb3JlKHBhcmVudE5vZGUsIGNyZWF0ZVRleHROb2RlKHRleHQpLCByZWZlcmVuY2VOb2RlKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgYWRvcHRBdHRyaWJ1dGVzKHJlY2lwaWVudCwgYXR0cnMpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhdHRycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgYXR0ck5hbWUgPSBhdHRyc1tpXS5uYW1lO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiByZWNpcGllbnQuYXR0cmlic1thdHRyTmFtZV0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgcmVjaXBpZW50LmF0dHJpYnNbYXR0ck5hbWVdID0gYXR0cnNbaV0udmFsdWU7XG4gICAgICAgICAgICAgICAgcmVjaXBpZW50Wyd4LWF0dHJpYnNOYW1lc3BhY2UnXVthdHRyTmFtZV0gPSBhdHRyc1tpXS5uYW1lc3BhY2U7XG4gICAgICAgICAgICAgICAgcmVjaXBpZW50Wyd4LWF0dHJpYnNQcmVmaXgnXVthdHRyTmFtZV0gPSBhdHRyc1tpXS5wcmVmaXg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuICAgIC8vVHJlZSB0cmF2ZXJzaW5nXG4gICAgZ2V0Rmlyc3RDaGlsZChub2RlKSB7XG4gICAgICAgIHJldHVybiBub2RlLmNoaWxkcmVuWzBdO1xuICAgIH0sXG4gICAgZ2V0Q2hpbGROb2Rlcyhub2RlKSB7XG4gICAgICAgIHJldHVybiBub2RlLmNoaWxkcmVuO1xuICAgIH0sXG4gICAgZ2V0UGFyZW50Tm9kZShub2RlKSB7XG4gICAgICAgIHJldHVybiBub2RlLnBhcmVudDtcbiAgICB9LFxuICAgIGdldEF0dHJMaXN0KGVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQuYXR0cmlidXRlcztcbiAgICB9LFxuICAgIC8vTm9kZSBkYXRhXG4gICAgZ2V0VGFnTmFtZShlbGVtZW50KSB7XG4gICAgICAgIHJldHVybiBlbGVtZW50Lm5hbWU7XG4gICAgfSxcbiAgICBnZXROYW1lc3BhY2VVUkkoZWxlbWVudCkge1xuICAgICAgICByZXR1cm4gZWxlbWVudC5uYW1lc3BhY2U7XG4gICAgfSxcbiAgICBnZXRUZXh0Tm9kZUNvbnRlbnQodGV4dE5vZGUpIHtcbiAgICAgICAgcmV0dXJuIHRleHROb2RlLmRhdGE7XG4gICAgfSxcbiAgICBnZXRDb21tZW50Tm9kZUNvbnRlbnQoY29tbWVudE5vZGUpIHtcbiAgICAgICAgcmV0dXJuIGNvbW1lbnROb2RlLmRhdGE7XG4gICAgfSxcbiAgICBnZXREb2N1bWVudFR5cGVOb2RlTmFtZShkb2N0eXBlTm9kZSkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHJldHVybiAoX2EgPSBkb2N0eXBlTm9kZVsneC1uYW1lJ10pICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6ICcnO1xuICAgIH0sXG4gICAgZ2V0RG9jdW1lbnRUeXBlTm9kZVB1YmxpY0lkKGRvY3R5cGVOb2RlKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgcmV0dXJuIChfYSA9IGRvY3R5cGVOb2RlWyd4LXB1YmxpY0lkJ10pICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6ICcnO1xuICAgIH0sXG4gICAgZ2V0RG9jdW1lbnRUeXBlTm9kZVN5c3RlbUlkKGRvY3R5cGVOb2RlKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgcmV0dXJuIChfYSA9IGRvY3R5cGVOb2RlWyd4LXN5c3RlbUlkJ10pICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6ICcnO1xuICAgIH0sXG4gICAgLy9Ob2RlIHR5cGVzXG4gICAgaXNEb2N1bWVudFR5cGVOb2RlKG5vZGUpIHtcbiAgICAgICAgcmV0dXJuICgwLCBkb21oYW5kbGVyXzEuaXNEaXJlY3RpdmUpKG5vZGUpICYmIG5vZGUubmFtZSA9PT0gJyFkb2N0eXBlJztcbiAgICB9LFxuICAgIC8vIFNvdXJjZSBjb2RlIGxvY2F0aW9uXG4gICAgc2V0Tm9kZVNvdXJjZUNvZGVMb2NhdGlvbihub2RlLCBsb2NhdGlvbikge1xuICAgICAgICBpZiAobG9jYXRpb24pIHtcbiAgICAgICAgICAgIG5vZGUuc3RhcnRJbmRleCA9IGxvY2F0aW9uLnN0YXJ0T2Zmc2V0O1xuICAgICAgICAgICAgbm9kZS5lbmRJbmRleCA9IGxvY2F0aW9uLmVuZE9mZnNldDtcbiAgICAgICAgfVxuICAgICAgICBub2RlLnNvdXJjZUNvZGVMb2NhdGlvbiA9IGxvY2F0aW9uO1xuICAgIH0sXG4gICAgZ2V0Tm9kZVNvdXJjZUNvZGVMb2NhdGlvbihub2RlKSB7XG4gICAgICAgIHJldHVybiBub2RlLnNvdXJjZUNvZGVMb2NhdGlvbjtcbiAgICB9LFxuICAgIHVwZGF0ZU5vZGVTb3VyY2VDb2RlTG9jYXRpb24obm9kZSwgZW5kTG9jYXRpb24pIHtcbiAgICAgICAgaWYgKGVuZExvY2F0aW9uLmVuZE9mZnNldCAhPSBudWxsKVxuICAgICAgICAgICAgbm9kZS5lbmRJbmRleCA9IGVuZExvY2F0aW9uLmVuZE9mZnNldDtcbiAgICAgICAgbm9kZS5zb3VyY2VDb2RlTG9jYXRpb24gPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIG5vZGUuc291cmNlQ29kZUxvY2F0aW9uKSwgZW5kTG9jYXRpb24pO1xuICAgIH0sXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdldERvY3VtZW50TW9kZSA9IGV4cG9ydHMuaXNDb25mb3JtaW5nID0gdm9pZCAwO1xuY29uc3QgaHRtbF9qc18xID0gcmVxdWlyZShcIi4vaHRtbC5qc1wiKTtcbi8vQ29uc3RcbmNvbnN0IFZBTElEX0RPQ1RZUEVfTkFNRSA9ICdodG1sJztcbmNvbnN0IFZBTElEX1NZU1RFTV9JRCA9ICdhYm91dDpsZWdhY3ktY29tcGF0JztcbmNvbnN0IFFVSVJLU19NT0RFX1NZU1RFTV9JRCA9ICdodHRwOi8vd3d3LmlibS5jb20vZGF0YS9kdGQvdjExL2libXhodG1sMS10cmFuc2l0aW9uYWwuZHRkJztcbmNvbnN0IFFVSVJLU19NT0RFX1BVQkxJQ19JRF9QUkVGSVhFUyA9IFtcbiAgICAnKy8vc2lsbWFyaWwvL2R0ZCBodG1sIHBybyB2MHIxMSAxOTk3MDEwMS8vJyxcbiAgICAnLS8vYXMvL2R0ZCBodG1sIDMuMCBhc3dlZGl0ICsgZXh0ZW5zaW9ucy8vJyxcbiAgICAnLS8vYWR2YXNvZnQgbHRkLy9kdGQgaHRtbCAzLjAgYXN3ZWRpdCArIGV4dGVuc2lvbnMvLycsXG4gICAgJy0vL2lldGYvL2R0ZCBodG1sIDIuMCBsZXZlbCAxLy8nLFxuICAgICctLy9pZXRmLy9kdGQgaHRtbCAyLjAgbGV2ZWwgMi8vJyxcbiAgICAnLS8vaWV0Zi8vZHRkIGh0bWwgMi4wIHN0cmljdCBsZXZlbCAxLy8nLFxuICAgICctLy9pZXRmLy9kdGQgaHRtbCAyLjAgc3RyaWN0IGxldmVsIDIvLycsXG4gICAgJy0vL2lldGYvL2R0ZCBodG1sIDIuMCBzdHJpY3QvLycsXG4gICAgJy0vL2lldGYvL2R0ZCBodG1sIDIuMC8vJyxcbiAgICAnLS8vaWV0Zi8vZHRkIGh0bWwgMi4xZS8vJyxcbiAgICAnLS8vaWV0Zi8vZHRkIGh0bWwgMy4wLy8nLFxuICAgICctLy9pZXRmLy9kdGQgaHRtbCAzLjIgZmluYWwvLycsXG4gICAgJy0vL2lldGYvL2R0ZCBodG1sIDMuMi8vJyxcbiAgICAnLS8vaWV0Zi8vZHRkIGh0bWwgMy8vJyxcbiAgICAnLS8vaWV0Zi8vZHRkIGh0bWwgbGV2ZWwgMC8vJyxcbiAgICAnLS8vaWV0Zi8vZHRkIGh0bWwgbGV2ZWwgMS8vJyxcbiAgICAnLS8vaWV0Zi8vZHRkIGh0bWwgbGV2ZWwgMi8vJyxcbiAgICAnLS8vaWV0Zi8vZHRkIGh0bWwgbGV2ZWwgMy8vJyxcbiAgICAnLS8vaWV0Zi8vZHRkIGh0bWwgc3RyaWN0IGxldmVsIDAvLycsXG4gICAgJy0vL2lldGYvL2R0ZCBodG1sIHN0cmljdCBsZXZlbCAxLy8nLFxuICAgICctLy9pZXRmLy9kdGQgaHRtbCBzdHJpY3QgbGV2ZWwgMi8vJyxcbiAgICAnLS8vaWV0Zi8vZHRkIGh0bWwgc3RyaWN0IGxldmVsIDMvLycsXG4gICAgJy0vL2lldGYvL2R0ZCBodG1sIHN0cmljdC8vJyxcbiAgICAnLS8vaWV0Zi8vZHRkIGh0bWwvLycsXG4gICAgJy0vL21ldHJpdXMvL2R0ZCBtZXRyaXVzIHByZXNlbnRhdGlvbmFsLy8nLFxuICAgICctLy9taWNyb3NvZnQvL2R0ZCBpbnRlcm5ldCBleHBsb3JlciAyLjAgaHRtbCBzdHJpY3QvLycsXG4gICAgJy0vL21pY3Jvc29mdC8vZHRkIGludGVybmV0IGV4cGxvcmVyIDIuMCBodG1sLy8nLFxuICAgICctLy9taWNyb3NvZnQvL2R0ZCBpbnRlcm5ldCBleHBsb3JlciAyLjAgdGFibGVzLy8nLFxuICAgICctLy9taWNyb3NvZnQvL2R0ZCBpbnRlcm5ldCBleHBsb3JlciAzLjAgaHRtbCBzdHJpY3QvLycsXG4gICAgJy0vL21pY3Jvc29mdC8vZHRkIGludGVybmV0IGV4cGxvcmVyIDMuMCBodG1sLy8nLFxuICAgICctLy9taWNyb3NvZnQvL2R0ZCBpbnRlcm5ldCBleHBsb3JlciAzLjAgdGFibGVzLy8nLFxuICAgICctLy9uZXRzY2FwZSBjb21tLiBjb3JwLi8vZHRkIGh0bWwvLycsXG4gICAgJy0vL25ldHNjYXBlIGNvbW0uIGNvcnAuLy9kdGQgc3RyaWN0IGh0bWwvLycsXG4gICAgXCItLy9vJ3JlaWxseSBhbmQgYXNzb2NpYXRlcy8vZHRkIGh0bWwgMi4wLy9cIixcbiAgICBcIi0vL28ncmVpbGx5IGFuZCBhc3NvY2lhdGVzLy9kdGQgaHRtbCBleHRlbmRlZCAxLjAvL1wiLFxuICAgIFwiLS8vbydyZWlsbHkgYW5kIGFzc29jaWF0ZXMvL2R0ZCBodG1sIGV4dGVuZGVkIHJlbGF4ZWQgMS4wLy9cIixcbiAgICAnLS8vc3EvL2R0ZCBodG1sIDIuMCBob3RtZXRhbCArIGV4dGVuc2lvbnMvLycsXG4gICAgJy0vL3NvZnRxdWFkIHNvZnR3YXJlLy9kdGQgaG90bWV0YWwgcHJvIDYuMDo6MTk5OTA2MDE6OmV4dGVuc2lvbnMgdG8gaHRtbCA0LjAvLycsXG4gICAgJy0vL3NvZnRxdWFkLy9kdGQgaG90bWV0YWwgcHJvIDQuMDo6MTk5NzEwMTA6OmV4dGVuc2lvbnMgdG8gaHRtbCA0LjAvLycsXG4gICAgJy0vL3NweWdsYXNzLy9kdGQgaHRtbCAyLjAgZXh0ZW5kZWQvLycsXG4gICAgJy0vL3N1biBtaWNyb3N5c3RlbXMgY29ycC4vL2R0ZCBob3RqYXZhIGh0bWwvLycsXG4gICAgJy0vL3N1biBtaWNyb3N5c3RlbXMgY29ycC4vL2R0ZCBob3RqYXZhIHN0cmljdCBodG1sLy8nLFxuICAgICctLy93M2MvL2R0ZCBodG1sIDMgMTk5NS0wMy0yNC8vJyxcbiAgICAnLS8vdzNjLy9kdGQgaHRtbCAzLjIgZHJhZnQvLycsXG4gICAgJy0vL3czYy8vZHRkIGh0bWwgMy4yIGZpbmFsLy8nLFxuICAgICctLy93M2MvL2R0ZCBodG1sIDMuMi8vJyxcbiAgICAnLS8vdzNjLy9kdGQgaHRtbCAzLjJzIGRyYWZ0Ly8nLFxuICAgICctLy93M2MvL2R0ZCBodG1sIDQuMCBmcmFtZXNldC8vJyxcbiAgICAnLS8vdzNjLy9kdGQgaHRtbCA0LjAgdHJhbnNpdGlvbmFsLy8nLFxuICAgICctLy93M2MvL2R0ZCBodG1sIGV4cGVyaW1lbnRhbCAxOTk2MDcxMi8vJyxcbiAgICAnLS8vdzNjLy9kdGQgaHRtbCBleHBlcmltZW50YWwgOTcwNDIxLy8nLFxuICAgICctLy93M2MvL2R0ZCB3MyBodG1sLy8nLFxuICAgICctLy93M28vL2R0ZCB3MyBodG1sIDMuMC8vJyxcbiAgICAnLS8vd2VidGVjaHMvL2R0ZCBtb3ppbGxhIGh0bWwgMi4wLy8nLFxuICAgICctLy93ZWJ0ZWNocy8vZHRkIG1vemlsbGEgaHRtbC8vJyxcbl07XG5jb25zdCBRVUlSS1NfTU9ERV9OT19TWVNURU1fSURfUFVCTElDX0lEX1BSRUZJWEVTID0gW1xuICAgIC4uLlFVSVJLU19NT0RFX1BVQkxJQ19JRF9QUkVGSVhFUyxcbiAgICAnLS8vdzNjLy9kdGQgaHRtbCA0LjAxIGZyYW1lc2V0Ly8nLFxuICAgICctLy93M2MvL2R0ZCBodG1sIDQuMDEgdHJhbnNpdGlvbmFsLy8nLFxuXTtcbmNvbnN0IFFVSVJLU19NT0RFX1BVQkxJQ19JRFMgPSBuZXcgU2V0KFtcbiAgICAnLS8vdzNvLy9kdGQgdzMgaHRtbCBzdHJpY3QgMy4wLy9lbi8vJyxcbiAgICAnLS93M2MvZHRkIGh0bWwgNC4wIHRyYW5zaXRpb25hbC9lbicsXG4gICAgJ2h0bWwnLFxuXSk7XG5jb25zdCBMSU1JVEVEX1FVSVJLU19QVUJMSUNfSURfUFJFRklYRVMgPSBbJy0vL3czYy8vZHRkIHhodG1sIDEuMCBmcmFtZXNldC8vJywgJy0vL3czYy8vZHRkIHhodG1sIDEuMCB0cmFuc2l0aW9uYWwvLyddO1xuY29uc3QgTElNSVRFRF9RVUlSS1NfV0lUSF9TWVNURU1fSURfUFVCTElDX0lEX1BSRUZJWEVTID0gW1xuICAgIC4uLkxJTUlURURfUVVJUktTX1BVQkxJQ19JRF9QUkVGSVhFUyxcbiAgICAnLS8vdzNjLy9kdGQgaHRtbCA0LjAxIGZyYW1lc2V0Ly8nLFxuICAgICctLy93M2MvL2R0ZCBodG1sIDQuMDEgdHJhbnNpdGlvbmFsLy8nLFxuXTtcbi8vVXRpbHNcbmZ1bmN0aW9uIGhhc1ByZWZpeChwdWJsaWNJZCwgcHJlZml4ZXMpIHtcbiAgICByZXR1cm4gcHJlZml4ZXMuc29tZSgocHJlZml4KSA9PiBwdWJsaWNJZC5zdGFydHNXaXRoKHByZWZpeCkpO1xufVxuLy9BUElcbmZ1bmN0aW9uIGlzQ29uZm9ybWluZyh0b2tlbikge1xuICAgIHJldHVybiAodG9rZW4ubmFtZSA9PT0gVkFMSURfRE9DVFlQRV9OQU1FICYmXG4gICAgICAgIHRva2VuLnB1YmxpY0lkID09PSBudWxsICYmXG4gICAgICAgICh0b2tlbi5zeXN0ZW1JZCA9PT0gbnVsbCB8fCB0b2tlbi5zeXN0ZW1JZCA9PT0gVkFMSURfU1lTVEVNX0lEKSk7XG59XG5leHBvcnRzLmlzQ29uZm9ybWluZyA9IGlzQ29uZm9ybWluZztcbmZ1bmN0aW9uIGdldERvY3VtZW50TW9kZSh0b2tlbikge1xuICAgIGlmICh0b2tlbi5uYW1lICE9PSBWQUxJRF9ET0NUWVBFX05BTUUpIHtcbiAgICAgICAgcmV0dXJuIGh0bWxfanNfMS5ET0NVTUVOVF9NT0RFLlFVSVJLUztcbiAgICB9XG4gICAgY29uc3QgeyBzeXN0ZW1JZCB9ID0gdG9rZW47XG4gICAgaWYgKHN5c3RlbUlkICYmIHN5c3RlbUlkLnRvTG93ZXJDYXNlKCkgPT09IFFVSVJLU19NT0RFX1NZU1RFTV9JRCkge1xuICAgICAgICByZXR1cm4gaHRtbF9qc18xLkRPQ1VNRU5UX01PREUuUVVJUktTO1xuICAgIH1cbiAgICBsZXQgeyBwdWJsaWNJZCB9ID0gdG9rZW47XG4gICAgaWYgKHB1YmxpY0lkICE9PSBudWxsKSB7XG4gICAgICAgIHB1YmxpY0lkID0gcHVibGljSWQudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgaWYgKFFVSVJLU19NT0RFX1BVQkxJQ19JRFMuaGFzKHB1YmxpY0lkKSkge1xuICAgICAgICAgICAgcmV0dXJuIGh0bWxfanNfMS5ET0NVTUVOVF9NT0RFLlFVSVJLUztcbiAgICAgICAgfVxuICAgICAgICBsZXQgcHJlZml4ZXMgPSBzeXN0ZW1JZCA9PT0gbnVsbCA/IFFVSVJLU19NT0RFX05PX1NZU1RFTV9JRF9QVUJMSUNfSURfUFJFRklYRVMgOiBRVUlSS1NfTU9ERV9QVUJMSUNfSURfUFJFRklYRVM7XG4gICAgICAgIGlmIChoYXNQcmVmaXgocHVibGljSWQsIHByZWZpeGVzKSkge1xuICAgICAgICAgICAgcmV0dXJuIGh0bWxfanNfMS5ET0NVTUVOVF9NT0RFLlFVSVJLUztcbiAgICAgICAgfVxuICAgICAgICBwcmVmaXhlcyA9XG4gICAgICAgICAgICBzeXN0ZW1JZCA9PT0gbnVsbCA/IExJTUlURURfUVVJUktTX1BVQkxJQ19JRF9QUkVGSVhFUyA6IExJTUlURURfUVVJUktTX1dJVEhfU1lTVEVNX0lEX1BVQkxJQ19JRF9QUkVGSVhFUztcbiAgICAgICAgaWYgKGhhc1ByZWZpeChwdWJsaWNJZCwgcHJlZml4ZXMpKSB7XG4gICAgICAgICAgICByZXR1cm4gaHRtbF9qc18xLkRPQ1VNRU5UX01PREUuTElNSVRFRF9RVUlSS1M7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGh0bWxfanNfMS5ET0NVTUVOVF9NT0RFLk5PX1FVSVJLUztcbn1cbmV4cG9ydHMuZ2V0RG9jdW1lbnRNb2RlID0gZ2V0RG9jdW1lbnRNb2RlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZG9jdHlwZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRVJSID0gdm9pZCAwO1xudmFyIEVSUjtcbihmdW5jdGlvbiAoRVJSKSB7XG4gICAgRVJSW1wiY29udHJvbENoYXJhY3RlckluSW5wdXRTdHJlYW1cIl0gPSBcImNvbnRyb2wtY2hhcmFjdGVyLWluLWlucHV0LXN0cmVhbVwiO1xuICAgIEVSUltcIm5vbmNoYXJhY3RlckluSW5wdXRTdHJlYW1cIl0gPSBcIm5vbmNoYXJhY3Rlci1pbi1pbnB1dC1zdHJlYW1cIjtcbiAgICBFUlJbXCJzdXJyb2dhdGVJbklucHV0U3RyZWFtXCJdID0gXCJzdXJyb2dhdGUtaW4taW5wdXQtc3RyZWFtXCI7XG4gICAgRVJSW1wibm9uVm9pZEh0bWxFbGVtZW50U3RhcnRUYWdXaXRoVHJhaWxpbmdTb2xpZHVzXCJdID0gXCJub24tdm9pZC1odG1sLWVsZW1lbnQtc3RhcnQtdGFnLXdpdGgtdHJhaWxpbmctc29saWR1c1wiO1xuICAgIEVSUltcImVuZFRhZ1dpdGhBdHRyaWJ1dGVzXCJdID0gXCJlbmQtdGFnLXdpdGgtYXR0cmlidXRlc1wiO1xuICAgIEVSUltcImVuZFRhZ1dpdGhUcmFpbGluZ1NvbGlkdXNcIl0gPSBcImVuZC10YWctd2l0aC10cmFpbGluZy1zb2xpZHVzXCI7XG4gICAgRVJSW1widW5leHBlY3RlZFNvbGlkdXNJblRhZ1wiXSA9IFwidW5leHBlY3RlZC1zb2xpZHVzLWluLXRhZ1wiO1xuICAgIEVSUltcInVuZXhwZWN0ZWROdWxsQ2hhcmFjdGVyXCJdID0gXCJ1bmV4cGVjdGVkLW51bGwtY2hhcmFjdGVyXCI7XG4gICAgRVJSW1widW5leHBlY3RlZFF1ZXN0aW9uTWFya0luc3RlYWRPZlRhZ05hbWVcIl0gPSBcInVuZXhwZWN0ZWQtcXVlc3Rpb24tbWFyay1pbnN0ZWFkLW9mLXRhZy1uYW1lXCI7XG4gICAgRVJSW1wiaW52YWxpZEZpcnN0Q2hhcmFjdGVyT2ZUYWdOYW1lXCJdID0gXCJpbnZhbGlkLWZpcnN0LWNoYXJhY3Rlci1vZi10YWctbmFtZVwiO1xuICAgIEVSUltcInVuZXhwZWN0ZWRFcXVhbHNTaWduQmVmb3JlQXR0cmlidXRlTmFtZVwiXSA9IFwidW5leHBlY3RlZC1lcXVhbHMtc2lnbi1iZWZvcmUtYXR0cmlidXRlLW5hbWVcIjtcbiAgICBFUlJbXCJtaXNzaW5nRW5kVGFnTmFtZVwiXSA9IFwibWlzc2luZy1lbmQtdGFnLW5hbWVcIjtcbiAgICBFUlJbXCJ1bmV4cGVjdGVkQ2hhcmFjdGVySW5BdHRyaWJ1dGVOYW1lXCJdID0gXCJ1bmV4cGVjdGVkLWNoYXJhY3Rlci1pbi1hdHRyaWJ1dGUtbmFtZVwiO1xuICAgIEVSUltcInVua25vd25OYW1lZENoYXJhY3RlclJlZmVyZW5jZVwiXSA9IFwidW5rbm93bi1uYW1lZC1jaGFyYWN0ZXItcmVmZXJlbmNlXCI7XG4gICAgRVJSW1wibWlzc2luZ1NlbWljb2xvbkFmdGVyQ2hhcmFjdGVyUmVmZXJlbmNlXCJdID0gXCJtaXNzaW5nLXNlbWljb2xvbi1hZnRlci1jaGFyYWN0ZXItcmVmZXJlbmNlXCI7XG4gICAgRVJSW1widW5leHBlY3RlZENoYXJhY3RlckFmdGVyRG9jdHlwZVN5c3RlbUlkZW50aWZpZXJcIl0gPSBcInVuZXhwZWN0ZWQtY2hhcmFjdGVyLWFmdGVyLWRvY3R5cGUtc3lzdGVtLWlkZW50aWZpZXJcIjtcbiAgICBFUlJbXCJ1bmV4cGVjdGVkQ2hhcmFjdGVySW5VbnF1b3RlZEF0dHJpYnV0ZVZhbHVlXCJdID0gXCJ1bmV4cGVjdGVkLWNoYXJhY3Rlci1pbi11bnF1b3RlZC1hdHRyaWJ1dGUtdmFsdWVcIjtcbiAgICBFUlJbXCJlb2ZCZWZvcmVUYWdOYW1lXCJdID0gXCJlb2YtYmVmb3JlLXRhZy1uYW1lXCI7XG4gICAgRVJSW1wiZW9mSW5UYWdcIl0gPSBcImVvZi1pbi10YWdcIjtcbiAgICBFUlJbXCJtaXNzaW5nQXR0cmlidXRlVmFsdWVcIl0gPSBcIm1pc3NpbmctYXR0cmlidXRlLXZhbHVlXCI7XG4gICAgRVJSW1wibWlzc2luZ1doaXRlc3BhY2VCZXR3ZWVuQXR0cmlidXRlc1wiXSA9IFwibWlzc2luZy13aGl0ZXNwYWNlLWJldHdlZW4tYXR0cmlidXRlc1wiO1xuICAgIEVSUltcIm1pc3NpbmdXaGl0ZXNwYWNlQWZ0ZXJEb2N0eXBlUHVibGljS2V5d29yZFwiXSA9IFwibWlzc2luZy13aGl0ZXNwYWNlLWFmdGVyLWRvY3R5cGUtcHVibGljLWtleXdvcmRcIjtcbiAgICBFUlJbXCJtaXNzaW5nV2hpdGVzcGFjZUJldHdlZW5Eb2N0eXBlUHVibGljQW5kU3lzdGVtSWRlbnRpZmllcnNcIl0gPSBcIm1pc3Npbmctd2hpdGVzcGFjZS1iZXR3ZWVuLWRvY3R5cGUtcHVibGljLWFuZC1zeXN0ZW0taWRlbnRpZmllcnNcIjtcbiAgICBFUlJbXCJtaXNzaW5nV2hpdGVzcGFjZUFmdGVyRG9jdHlwZVN5c3RlbUtleXdvcmRcIl0gPSBcIm1pc3Npbmctd2hpdGVzcGFjZS1hZnRlci1kb2N0eXBlLXN5c3RlbS1rZXl3b3JkXCI7XG4gICAgRVJSW1wibWlzc2luZ1F1b3RlQmVmb3JlRG9jdHlwZVB1YmxpY0lkZW50aWZpZXJcIl0gPSBcIm1pc3NpbmctcXVvdGUtYmVmb3JlLWRvY3R5cGUtcHVibGljLWlkZW50aWZpZXJcIjtcbiAgICBFUlJbXCJtaXNzaW5nUXVvdGVCZWZvcmVEb2N0eXBlU3lzdGVtSWRlbnRpZmllclwiXSA9IFwibWlzc2luZy1xdW90ZS1iZWZvcmUtZG9jdHlwZS1zeXN0ZW0taWRlbnRpZmllclwiO1xuICAgIEVSUltcIm1pc3NpbmdEb2N0eXBlUHVibGljSWRlbnRpZmllclwiXSA9IFwibWlzc2luZy1kb2N0eXBlLXB1YmxpYy1pZGVudGlmaWVyXCI7XG4gICAgRVJSW1wibWlzc2luZ0RvY3R5cGVTeXN0ZW1JZGVudGlmaWVyXCJdID0gXCJtaXNzaW5nLWRvY3R5cGUtc3lzdGVtLWlkZW50aWZpZXJcIjtcbiAgICBFUlJbXCJhYnJ1cHREb2N0eXBlUHVibGljSWRlbnRpZmllclwiXSA9IFwiYWJydXB0LWRvY3R5cGUtcHVibGljLWlkZW50aWZpZXJcIjtcbiAgICBFUlJbXCJhYnJ1cHREb2N0eXBlU3lzdGVtSWRlbnRpZmllclwiXSA9IFwiYWJydXB0LWRvY3R5cGUtc3lzdGVtLWlkZW50aWZpZXJcIjtcbiAgICBFUlJbXCJjZGF0YUluSHRtbENvbnRlbnRcIl0gPSBcImNkYXRhLWluLWh0bWwtY29udGVudFwiO1xuICAgIEVSUltcImluY29ycmVjdGx5T3BlbmVkQ29tbWVudFwiXSA9IFwiaW5jb3JyZWN0bHktb3BlbmVkLWNvbW1lbnRcIjtcbiAgICBFUlJbXCJlb2ZJblNjcmlwdEh0bWxDb21tZW50TGlrZVRleHRcIl0gPSBcImVvZi1pbi1zY3JpcHQtaHRtbC1jb21tZW50LWxpa2UtdGV4dFwiO1xuICAgIEVSUltcImVvZkluRG9jdHlwZVwiXSA9IFwiZW9mLWluLWRvY3R5cGVcIjtcbiAgICBFUlJbXCJuZXN0ZWRDb21tZW50XCJdID0gXCJuZXN0ZWQtY29tbWVudFwiO1xuICAgIEVSUltcImFicnVwdENsb3NpbmdPZkVtcHR5Q29tbWVudFwiXSA9IFwiYWJydXB0LWNsb3Npbmctb2YtZW1wdHktY29tbWVudFwiO1xuICAgIEVSUltcImVvZkluQ29tbWVudFwiXSA9IFwiZW9mLWluLWNvbW1lbnRcIjtcbiAgICBFUlJbXCJpbmNvcnJlY3RseUNsb3NlZENvbW1lbnRcIl0gPSBcImluY29ycmVjdGx5LWNsb3NlZC1jb21tZW50XCI7XG4gICAgRVJSW1wiZW9mSW5DZGF0YVwiXSA9IFwiZW9mLWluLWNkYXRhXCI7XG4gICAgRVJSW1wiYWJzZW5jZU9mRGlnaXRzSW5OdW1lcmljQ2hhcmFjdGVyUmVmZXJlbmNlXCJdID0gXCJhYnNlbmNlLW9mLWRpZ2l0cy1pbi1udW1lcmljLWNoYXJhY3Rlci1yZWZlcmVuY2VcIjtcbiAgICBFUlJbXCJudWxsQ2hhcmFjdGVyUmVmZXJlbmNlXCJdID0gXCJudWxsLWNoYXJhY3Rlci1yZWZlcmVuY2VcIjtcbiAgICBFUlJbXCJzdXJyb2dhdGVDaGFyYWN0ZXJSZWZlcmVuY2VcIl0gPSBcInN1cnJvZ2F0ZS1jaGFyYWN0ZXItcmVmZXJlbmNlXCI7XG4gICAgRVJSW1wiY2hhcmFjdGVyUmVmZXJlbmNlT3V0c2lkZVVuaWNvZGVSYW5nZVwiXSA9IFwiY2hhcmFjdGVyLXJlZmVyZW5jZS1vdXRzaWRlLXVuaWNvZGUtcmFuZ2VcIjtcbiAgICBFUlJbXCJjb250cm9sQ2hhcmFjdGVyUmVmZXJlbmNlXCJdID0gXCJjb250cm9sLWNoYXJhY3Rlci1yZWZlcmVuY2VcIjtcbiAgICBFUlJbXCJub25jaGFyYWN0ZXJDaGFyYWN0ZXJSZWZlcmVuY2VcIl0gPSBcIm5vbmNoYXJhY3Rlci1jaGFyYWN0ZXItcmVmZXJlbmNlXCI7XG4gICAgRVJSW1wibWlzc2luZ1doaXRlc3BhY2VCZWZvcmVEb2N0eXBlTmFtZVwiXSA9IFwibWlzc2luZy13aGl0ZXNwYWNlLWJlZm9yZS1kb2N0eXBlLW5hbWVcIjtcbiAgICBFUlJbXCJtaXNzaW5nRG9jdHlwZU5hbWVcIl0gPSBcIm1pc3NpbmctZG9jdHlwZS1uYW1lXCI7XG4gICAgRVJSW1wiaW52YWxpZENoYXJhY3RlclNlcXVlbmNlQWZ0ZXJEb2N0eXBlTmFtZVwiXSA9IFwiaW52YWxpZC1jaGFyYWN0ZXItc2VxdWVuY2UtYWZ0ZXItZG9jdHlwZS1uYW1lXCI7XG4gICAgRVJSW1wiZHVwbGljYXRlQXR0cmlidXRlXCJdID0gXCJkdXBsaWNhdGUtYXR0cmlidXRlXCI7XG4gICAgRVJSW1wibm9uQ29uZm9ybWluZ0RvY3R5cGVcIl0gPSBcIm5vbi1jb25mb3JtaW5nLWRvY3R5cGVcIjtcbiAgICBFUlJbXCJtaXNzaW5nRG9jdHlwZVwiXSA9IFwibWlzc2luZy1kb2N0eXBlXCI7XG4gICAgRVJSW1wibWlzcGxhY2VkRG9jdHlwZVwiXSA9IFwibWlzcGxhY2VkLWRvY3R5cGVcIjtcbiAgICBFUlJbXCJlbmRUYWdXaXRob3V0TWF0Y2hpbmdPcGVuRWxlbWVudFwiXSA9IFwiZW5kLXRhZy13aXRob3V0LW1hdGNoaW5nLW9wZW4tZWxlbWVudFwiO1xuICAgIEVSUltcImNsb3NpbmdPZkVsZW1lbnRXaXRoT3BlbkNoaWxkRWxlbWVudHNcIl0gPSBcImNsb3Npbmctb2YtZWxlbWVudC13aXRoLW9wZW4tY2hpbGQtZWxlbWVudHNcIjtcbiAgICBFUlJbXCJkaXNhbGxvd2VkQ29udGVudEluTm9zY3JpcHRJbkhlYWRcIl0gPSBcImRpc2FsbG93ZWQtY29udGVudC1pbi1ub3NjcmlwdC1pbi1oZWFkXCI7XG4gICAgRVJSW1wib3BlbkVsZW1lbnRzTGVmdEFmdGVyRW9mXCJdID0gXCJvcGVuLWVsZW1lbnRzLWxlZnQtYWZ0ZXItZW9mXCI7XG4gICAgRVJSW1wiYWJhbmRvbmVkSGVhZEVsZW1lbnRDaGlsZFwiXSA9IFwiYWJhbmRvbmVkLWhlYWQtZWxlbWVudC1jaGlsZFwiO1xuICAgIEVSUltcIm1pc3BsYWNlZFN0YXJ0VGFnRm9ySGVhZEVsZW1lbnRcIl0gPSBcIm1pc3BsYWNlZC1zdGFydC10YWctZm9yLWhlYWQtZWxlbWVudFwiO1xuICAgIEVSUltcIm5lc3RlZE5vc2NyaXB0SW5IZWFkXCJdID0gXCJuZXN0ZWQtbm9zY3JpcHQtaW4taGVhZFwiO1xuICAgIEVSUltcImVvZkluRWxlbWVudFRoYXRDYW5Db250YWluT25seVRleHRcIl0gPSBcImVvZi1pbi1lbGVtZW50LXRoYXQtY2FuLWNvbnRhaW4tb25seS10ZXh0XCI7XG59KShFUlIgPSBleHBvcnRzLkVSUiB8fCAoZXhwb3J0cy5FUlIgPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXJyb3ItY29kZXMuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmlzSW50ZWdyYXRpb25Qb2ludCA9IGV4cG9ydHMuYWRqdXN0VG9rZW5TVkdUYWdOYW1lID0gZXhwb3J0cy5hZGp1c3RUb2tlblhNTEF0dHJzID0gZXhwb3J0cy5hZGp1c3RUb2tlblNWR0F0dHJzID0gZXhwb3J0cy5hZGp1c3RUb2tlbk1hdGhNTEF0dHJzID0gZXhwb3J0cy5jYXVzZXNFeGl0ID0gZXhwb3J0cy5TVkdfVEFHX05BTUVTX0FESlVTVE1FTlRfTUFQID0gdm9pZCAwO1xuY29uc3QgaHRtbF9qc18xID0gcmVxdWlyZShcIi4vaHRtbC5qc1wiKTtcbi8vTUlNRSB0eXBlc1xuY29uc3QgTUlNRV9UWVBFUyA9IHtcbiAgICBURVhUX0hUTUw6ICd0ZXh0L2h0bWwnLFxuICAgIEFQUExJQ0FUSU9OX1hNTDogJ2FwcGxpY2F0aW9uL3hodG1sK3htbCcsXG59O1xuLy9BdHRyaWJ1dGVzXG5jb25zdCBERUZJTklUSU9OX1VSTF9BVFRSID0gJ2RlZmluaXRpb251cmwnO1xuY29uc3QgQURKVVNURURfREVGSU5JVElPTl9VUkxfQVRUUiA9ICdkZWZpbml0aW9uVVJMJztcbmNvbnN0IFNWR19BVFRSU19BREpVU1RNRU5UX01BUCA9IG5ldyBNYXAoW1xuICAgICdhdHRyaWJ1dGVOYW1lJyxcbiAgICAnYXR0cmlidXRlVHlwZScsXG4gICAgJ2Jhc2VGcmVxdWVuY3knLFxuICAgICdiYXNlUHJvZmlsZScsXG4gICAgJ2NhbGNNb2RlJyxcbiAgICAnY2xpcFBhdGhVbml0cycsXG4gICAgJ2RpZmZ1c2VDb25zdGFudCcsXG4gICAgJ2VkZ2VNb2RlJyxcbiAgICAnZmlsdGVyVW5pdHMnLFxuICAgICdnbHlwaFJlZicsXG4gICAgJ2dyYWRpZW50VHJhbnNmb3JtJyxcbiAgICAnZ3JhZGllbnRVbml0cycsXG4gICAgJ2tlcm5lbE1hdHJpeCcsXG4gICAgJ2tlcm5lbFVuaXRMZW5ndGgnLFxuICAgICdrZXlQb2ludHMnLFxuICAgICdrZXlTcGxpbmVzJyxcbiAgICAna2V5VGltZXMnLFxuICAgICdsZW5ndGhBZGp1c3QnLFxuICAgICdsaW1pdGluZ0NvbmVBbmdsZScsXG4gICAgJ21hcmtlckhlaWdodCcsXG4gICAgJ21hcmtlclVuaXRzJyxcbiAgICAnbWFya2VyV2lkdGgnLFxuICAgICdtYXNrQ29udGVudFVuaXRzJyxcbiAgICAnbWFza1VuaXRzJyxcbiAgICAnbnVtT2N0YXZlcycsXG4gICAgJ3BhdGhMZW5ndGgnLFxuICAgICdwYXR0ZXJuQ29udGVudFVuaXRzJyxcbiAgICAncGF0dGVyblRyYW5zZm9ybScsXG4gICAgJ3BhdHRlcm5Vbml0cycsXG4gICAgJ3BvaW50c0F0WCcsXG4gICAgJ3BvaW50c0F0WScsXG4gICAgJ3BvaW50c0F0WicsXG4gICAgJ3ByZXNlcnZlQWxwaGEnLFxuICAgICdwcmVzZXJ2ZUFzcGVjdFJhdGlvJyxcbiAgICAncHJpbWl0aXZlVW5pdHMnLFxuICAgICdyZWZYJyxcbiAgICAncmVmWScsXG4gICAgJ3JlcGVhdENvdW50JyxcbiAgICAncmVwZWF0RHVyJyxcbiAgICAncmVxdWlyZWRFeHRlbnNpb25zJyxcbiAgICAncmVxdWlyZWRGZWF0dXJlcycsXG4gICAgJ3NwZWN1bGFyQ29uc3RhbnQnLFxuICAgICdzcGVjdWxhckV4cG9uZW50JyxcbiAgICAnc3ByZWFkTWV0aG9kJyxcbiAgICAnc3RhcnRPZmZzZXQnLFxuICAgICdzdGREZXZpYXRpb24nLFxuICAgICdzdGl0Y2hUaWxlcycsXG4gICAgJ3N1cmZhY2VTY2FsZScsXG4gICAgJ3N5c3RlbUxhbmd1YWdlJyxcbiAgICAndGFibGVWYWx1ZXMnLFxuICAgICd0YXJnZXRYJyxcbiAgICAndGFyZ2V0WScsXG4gICAgJ3RleHRMZW5ndGgnLFxuICAgICd2aWV3Qm94JyxcbiAgICAndmlld1RhcmdldCcsXG4gICAgJ3hDaGFubmVsU2VsZWN0b3InLFxuICAgICd5Q2hhbm5lbFNlbGVjdG9yJyxcbiAgICAnem9vbUFuZFBhbicsXG5dLm1hcCgoYXR0cikgPT4gW2F0dHIudG9Mb3dlckNhc2UoKSwgYXR0cl0pKTtcbmNvbnN0IFhNTF9BVFRSU19BREpVU1RNRU5UX01BUCA9IG5ldyBNYXAoW1xuICAgIFsneGxpbms6YWN0dWF0ZScsIHsgcHJlZml4OiAneGxpbmsnLCBuYW1lOiAnYWN0dWF0ZScsIG5hbWVzcGFjZTogaHRtbF9qc18xLk5TLlhMSU5LIH1dLFxuICAgIFsneGxpbms6YXJjcm9sZScsIHsgcHJlZml4OiAneGxpbmsnLCBuYW1lOiAnYXJjcm9sZScsIG5hbWVzcGFjZTogaHRtbF9qc18xLk5TLlhMSU5LIH1dLFxuICAgIFsneGxpbms6aHJlZicsIHsgcHJlZml4OiAneGxpbmsnLCBuYW1lOiAnaHJlZicsIG5hbWVzcGFjZTogaHRtbF9qc18xLk5TLlhMSU5LIH1dLFxuICAgIFsneGxpbms6cm9sZScsIHsgcHJlZml4OiAneGxpbmsnLCBuYW1lOiAncm9sZScsIG5hbWVzcGFjZTogaHRtbF9qc18xLk5TLlhMSU5LIH1dLFxuICAgIFsneGxpbms6c2hvdycsIHsgcHJlZml4OiAneGxpbmsnLCBuYW1lOiAnc2hvdycsIG5hbWVzcGFjZTogaHRtbF9qc18xLk5TLlhMSU5LIH1dLFxuICAgIFsneGxpbms6dGl0bGUnLCB7IHByZWZpeDogJ3hsaW5rJywgbmFtZTogJ3RpdGxlJywgbmFtZXNwYWNlOiBodG1sX2pzXzEuTlMuWExJTksgfV0sXG4gICAgWyd4bGluazp0eXBlJywgeyBwcmVmaXg6ICd4bGluaycsIG5hbWU6ICd0eXBlJywgbmFtZXNwYWNlOiBodG1sX2pzXzEuTlMuWExJTksgfV0sXG4gICAgWyd4bWw6YmFzZScsIHsgcHJlZml4OiAneG1sJywgbmFtZTogJ2Jhc2UnLCBuYW1lc3BhY2U6IGh0bWxfanNfMS5OUy5YTUwgfV0sXG4gICAgWyd4bWw6bGFuZycsIHsgcHJlZml4OiAneG1sJywgbmFtZTogJ2xhbmcnLCBuYW1lc3BhY2U6IGh0bWxfanNfMS5OUy5YTUwgfV0sXG4gICAgWyd4bWw6c3BhY2UnLCB7IHByZWZpeDogJ3htbCcsIG5hbWU6ICdzcGFjZScsIG5hbWVzcGFjZTogaHRtbF9qc18xLk5TLlhNTCB9XSxcbiAgICBbJ3htbG5zJywgeyBwcmVmaXg6ICcnLCBuYW1lOiAneG1sbnMnLCBuYW1lc3BhY2U6IGh0bWxfanNfMS5OUy5YTUxOUyB9XSxcbiAgICBbJ3htbG5zOnhsaW5rJywgeyBwcmVmaXg6ICd4bWxucycsIG5hbWU6ICd4bGluaycsIG5hbWVzcGFjZTogaHRtbF9qc18xLk5TLlhNTE5TIH1dLFxuXSk7XG4vL1NWRyB0YWcgbmFtZXMgYWRqdXN0bWVudCBtYXBcbmV4cG9ydHMuU1ZHX1RBR19OQU1FU19BREpVU1RNRU5UX01BUCA9IG5ldyBNYXAoW1xuICAgICdhbHRHbHlwaCcsXG4gICAgJ2FsdEdseXBoRGVmJyxcbiAgICAnYWx0R2x5cGhJdGVtJyxcbiAgICAnYW5pbWF0ZUNvbG9yJyxcbiAgICAnYW5pbWF0ZU1vdGlvbicsXG4gICAgJ2FuaW1hdGVUcmFuc2Zvcm0nLFxuICAgICdjbGlwUGF0aCcsXG4gICAgJ2ZlQmxlbmQnLFxuICAgICdmZUNvbG9yTWF0cml4JyxcbiAgICAnZmVDb21wb25lbnRUcmFuc2ZlcicsXG4gICAgJ2ZlQ29tcG9zaXRlJyxcbiAgICAnZmVDb252b2x2ZU1hdHJpeCcsXG4gICAgJ2ZlRGlmZnVzZUxpZ2h0aW5nJyxcbiAgICAnZmVEaXNwbGFjZW1lbnRNYXAnLFxuICAgICdmZURpc3RhbnRMaWdodCcsXG4gICAgJ2ZlRmxvb2QnLFxuICAgICdmZUZ1bmNBJyxcbiAgICAnZmVGdW5jQicsXG4gICAgJ2ZlRnVuY0cnLFxuICAgICdmZUZ1bmNSJyxcbiAgICAnZmVHYXVzc2lhbkJsdXInLFxuICAgICdmZUltYWdlJyxcbiAgICAnZmVNZXJnZScsXG4gICAgJ2ZlTWVyZ2VOb2RlJyxcbiAgICAnZmVNb3JwaG9sb2d5JyxcbiAgICAnZmVPZmZzZXQnLFxuICAgICdmZVBvaW50TGlnaHQnLFxuICAgICdmZVNwZWN1bGFyTGlnaHRpbmcnLFxuICAgICdmZVNwb3RMaWdodCcsXG4gICAgJ2ZlVGlsZScsXG4gICAgJ2ZlVHVyYnVsZW5jZScsXG4gICAgJ2ZvcmVpZ25PYmplY3QnLFxuICAgICdnbHlwaFJlZicsXG4gICAgJ2xpbmVhckdyYWRpZW50JyxcbiAgICAncmFkaWFsR3JhZGllbnQnLFxuICAgICd0ZXh0UGF0aCcsXG5dLm1hcCgodG4pID0+IFt0bi50b0xvd2VyQ2FzZSgpLCB0bl0pKTtcbi8vVGFncyB0aGF0IGNhdXNlcyBleGl0IGZyb20gZm9yZWlnbiBjb250ZW50XG5jb25zdCBFWElUU19GT1JFSUdOX0NPTlRFTlQgPSBuZXcgU2V0KFtcbiAgICBodG1sX2pzXzEuVEFHX0lELkIsXG4gICAgaHRtbF9qc18xLlRBR19JRC5CSUcsXG4gICAgaHRtbF9qc18xLlRBR19JRC5CTE9DS1FVT1RFLFxuICAgIGh0bWxfanNfMS5UQUdfSUQuQk9EWSxcbiAgICBodG1sX2pzXzEuVEFHX0lELkJSLFxuICAgIGh0bWxfanNfMS5UQUdfSUQuQ0VOVEVSLFxuICAgIGh0bWxfanNfMS5UQUdfSUQuQ09ERSxcbiAgICBodG1sX2pzXzEuVEFHX0lELkRELFxuICAgIGh0bWxfanNfMS5UQUdfSUQuRElWLFxuICAgIGh0bWxfanNfMS5UQUdfSUQuREwsXG4gICAgaHRtbF9qc18xLlRBR19JRC5EVCxcbiAgICBodG1sX2pzXzEuVEFHX0lELkVNLFxuICAgIGh0bWxfanNfMS5UQUdfSUQuRU1CRUQsXG4gICAgaHRtbF9qc18xLlRBR19JRC5IMSxcbiAgICBodG1sX2pzXzEuVEFHX0lELkgyLFxuICAgIGh0bWxfanNfMS5UQUdfSUQuSDMsXG4gICAgaHRtbF9qc18xLlRBR19JRC5INCxcbiAgICBodG1sX2pzXzEuVEFHX0lELkg1LFxuICAgIGh0bWxfanNfMS5UQUdfSUQuSDYsXG4gICAgaHRtbF9qc18xLlRBR19JRC5IRUFELFxuICAgIGh0bWxfanNfMS5UQUdfSUQuSFIsXG4gICAgaHRtbF9qc18xLlRBR19JRC5JLFxuICAgIGh0bWxfanNfMS5UQUdfSUQuSU1HLFxuICAgIGh0bWxfanNfMS5UQUdfSUQuTEksXG4gICAgaHRtbF9qc18xLlRBR19JRC5MSVNUSU5HLFxuICAgIGh0bWxfanNfMS5UQUdfSUQuTUVOVSxcbiAgICBodG1sX2pzXzEuVEFHX0lELk1FVEEsXG4gICAgaHRtbF9qc18xLlRBR19JRC5OT0JSLFxuICAgIGh0bWxfanNfMS5UQUdfSUQuT0wsXG4gICAgaHRtbF9qc18xLlRBR19JRC5QLFxuICAgIGh0bWxfanNfMS5UQUdfSUQuUFJFLFxuICAgIGh0bWxfanNfMS5UQUdfSUQuUlVCWSxcbiAgICBodG1sX2pzXzEuVEFHX0lELlMsXG4gICAgaHRtbF9qc18xLlRBR19JRC5TTUFMTCxcbiAgICBodG1sX2pzXzEuVEFHX0lELlNQQU4sXG4gICAgaHRtbF9qc18xLlRBR19JRC5TVFJPTkcsXG4gICAgaHRtbF9qc18xLlRBR19JRC5TVFJJS0UsXG4gICAgaHRtbF9qc18xLlRBR19JRC5TVUIsXG4gICAgaHRtbF9qc18xLlRBR19JRC5TVVAsXG4gICAgaHRtbF9qc18xLlRBR19JRC5UQUJMRSxcbiAgICBodG1sX2pzXzEuVEFHX0lELlRULFxuICAgIGh0bWxfanNfMS5UQUdfSUQuVSxcbiAgICBodG1sX2pzXzEuVEFHX0lELlVMLFxuICAgIGh0bWxfanNfMS5UQUdfSUQuVkFSLFxuXSk7XG4vL0NoZWNrIGV4aXQgZnJvbSBmb3JlaWduIGNvbnRlbnRcbmZ1bmN0aW9uIGNhdXNlc0V4aXQoc3RhcnRUYWdUb2tlbikge1xuICAgIGNvbnN0IHRuID0gc3RhcnRUYWdUb2tlbi50YWdJRDtcbiAgICBjb25zdCBpc0ZvbnRXaXRoQXR0cnMgPSB0biA9PT0gaHRtbF9qc18xLlRBR19JRC5GT05UICYmXG4gICAgICAgIHN0YXJ0VGFnVG9rZW4uYXR0cnMuc29tZSgoeyBuYW1lIH0pID0+IG5hbWUgPT09IGh0bWxfanNfMS5BVFRSUy5DT0xPUiB8fCBuYW1lID09PSBodG1sX2pzXzEuQVRUUlMuU0laRSB8fCBuYW1lID09PSBodG1sX2pzXzEuQVRUUlMuRkFDRSk7XG4gICAgcmV0dXJuIGlzRm9udFdpdGhBdHRycyB8fCBFWElUU19GT1JFSUdOX0NPTlRFTlQuaGFzKHRuKTtcbn1cbmV4cG9ydHMuY2F1c2VzRXhpdCA9IGNhdXNlc0V4aXQ7XG4vL1Rva2VuIGFkanVzdG1lbnRzXG5mdW5jdGlvbiBhZGp1c3RUb2tlbk1hdGhNTEF0dHJzKHRva2VuKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0b2tlbi5hdHRycy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAodG9rZW4uYXR0cnNbaV0ubmFtZSA9PT0gREVGSU5JVElPTl9VUkxfQVRUUikge1xuICAgICAgICAgICAgdG9rZW4uYXR0cnNbaV0ubmFtZSA9IEFESlVTVEVEX0RFRklOSVRJT05fVVJMX0FUVFI7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuYWRqdXN0VG9rZW5NYXRoTUxBdHRycyA9IGFkanVzdFRva2VuTWF0aE1MQXR0cnM7XG5mdW5jdGlvbiBhZGp1c3RUb2tlblNWR0F0dHJzKHRva2VuKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0b2tlbi5hdHRycy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBhZGp1c3RlZEF0dHJOYW1lID0gU1ZHX0FUVFJTX0FESlVTVE1FTlRfTUFQLmdldCh0b2tlbi5hdHRyc1tpXS5uYW1lKTtcbiAgICAgICAgaWYgKGFkanVzdGVkQXR0ck5hbWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgdG9rZW4uYXR0cnNbaV0ubmFtZSA9IGFkanVzdGVkQXR0ck5hbWU7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLmFkanVzdFRva2VuU1ZHQXR0cnMgPSBhZGp1c3RUb2tlblNWR0F0dHJzO1xuZnVuY3Rpb24gYWRqdXN0VG9rZW5YTUxBdHRycyh0b2tlbikge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdG9rZW4uYXR0cnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgYWRqdXN0ZWRBdHRyRW50cnkgPSBYTUxfQVRUUlNfQURKVVNUTUVOVF9NQVAuZ2V0KHRva2VuLmF0dHJzW2ldLm5hbWUpO1xuICAgICAgICBpZiAoYWRqdXN0ZWRBdHRyRW50cnkpIHtcbiAgICAgICAgICAgIHRva2VuLmF0dHJzW2ldLnByZWZpeCA9IGFkanVzdGVkQXR0ckVudHJ5LnByZWZpeDtcbiAgICAgICAgICAgIHRva2VuLmF0dHJzW2ldLm5hbWUgPSBhZGp1c3RlZEF0dHJFbnRyeS5uYW1lO1xuICAgICAgICAgICAgdG9rZW4uYXR0cnNbaV0ubmFtZXNwYWNlID0gYWRqdXN0ZWRBdHRyRW50cnkubmFtZXNwYWNlO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5hZGp1c3RUb2tlblhNTEF0dHJzID0gYWRqdXN0VG9rZW5YTUxBdHRycztcbmZ1bmN0aW9uIGFkanVzdFRva2VuU1ZHVGFnTmFtZSh0b2tlbikge1xuICAgIGNvbnN0IGFkanVzdGVkVGFnTmFtZSA9IGV4cG9ydHMuU1ZHX1RBR19OQU1FU19BREpVU1RNRU5UX01BUC5nZXQodG9rZW4udGFnTmFtZSk7XG4gICAgaWYgKGFkanVzdGVkVGFnTmFtZSAhPSBudWxsKSB7XG4gICAgICAgIHRva2VuLnRhZ05hbWUgPSBhZGp1c3RlZFRhZ05hbWU7XG4gICAgICAgIHRva2VuLnRhZ0lEID0gKDAsIGh0bWxfanNfMS5nZXRUYWdJRCkodG9rZW4udGFnTmFtZSk7XG4gICAgfVxufVxuZXhwb3J0cy5hZGp1c3RUb2tlblNWR1RhZ05hbWUgPSBhZGp1c3RUb2tlblNWR1RhZ05hbWU7XG4vL0ludGVncmF0aW9uIHBvaW50c1xuZnVuY3Rpb24gaXNNYXRoTUxUZXh0SW50ZWdyYXRpb25Qb2ludCh0biwgbnMpIHtcbiAgICByZXR1cm4gbnMgPT09IGh0bWxfanNfMS5OUy5NQVRITUwgJiYgKHRuID09PSBodG1sX2pzXzEuVEFHX0lELk1JIHx8IHRuID09PSBodG1sX2pzXzEuVEFHX0lELk1PIHx8IHRuID09PSBodG1sX2pzXzEuVEFHX0lELk1OIHx8IHRuID09PSBodG1sX2pzXzEuVEFHX0lELk1TIHx8IHRuID09PSBodG1sX2pzXzEuVEFHX0lELk1URVhUKTtcbn1cbmZ1bmN0aW9uIGlzSHRtbEludGVncmF0aW9uUG9pbnQodG4sIG5zLCBhdHRycykge1xuICAgIGlmIChucyA9PT0gaHRtbF9qc18xLk5TLk1BVEhNTCAmJiB0biA9PT0gaHRtbF9qc18xLlRBR19JRC5BTk5PVEFUSU9OX1hNTCkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGF0dHJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoYXR0cnNbaV0ubmFtZSA9PT0gaHRtbF9qc18xLkFUVFJTLkVOQ09ESU5HKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBhdHRyc1tpXS52YWx1ZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZSA9PT0gTUlNRV9UWVBFUy5URVhUX0hUTUwgfHwgdmFsdWUgPT09IE1JTUVfVFlQRVMuQVBQTElDQVRJT05fWE1MO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBucyA9PT0gaHRtbF9qc18xLk5TLlNWRyAmJiAodG4gPT09IGh0bWxfanNfMS5UQUdfSUQuRk9SRUlHTl9PQkpFQ1QgfHwgdG4gPT09IGh0bWxfanNfMS5UQUdfSUQuREVTQyB8fCB0biA9PT0gaHRtbF9qc18xLlRBR19JRC5USVRMRSk7XG59XG5mdW5jdGlvbiBpc0ludGVncmF0aW9uUG9pbnQodG4sIG5zLCBhdHRycywgZm9yZWlnbk5TKSB7XG4gICAgcmV0dXJuICgoKCFmb3JlaWduTlMgfHwgZm9yZWlnbk5TID09PSBodG1sX2pzXzEuTlMuSFRNTCkgJiYgaXNIdG1sSW50ZWdyYXRpb25Qb2ludCh0biwgbnMsIGF0dHJzKSkgfHxcbiAgICAgICAgKCghZm9yZWlnbk5TIHx8IGZvcmVpZ25OUyA9PT0gaHRtbF9qc18xLk5TLk1BVEhNTCkgJiYgaXNNYXRoTUxUZXh0SW50ZWdyYXRpb25Qb2ludCh0biwgbnMpKSk7XG59XG5leHBvcnRzLmlzSW50ZWdyYXRpb25Qb2ludCA9IGlzSW50ZWdyYXRpb25Qb2ludDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZvcmVpZ24tY29udGVudC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaGFzVW5lc2NhcGVkVGV4dCA9IGV4cG9ydHMuaXNOdW1iZXJlZEhlYWRlciA9IGV4cG9ydHMuU1BFQ0lBTF9FTEVNRU5UUyA9IGV4cG9ydHMuZ2V0VGFnSUQgPSBleHBvcnRzLlRBR19JRCA9IGV4cG9ydHMuVEFHX05BTUVTID0gZXhwb3J0cy5ET0NVTUVOVF9NT0RFID0gZXhwb3J0cy5BVFRSUyA9IGV4cG9ydHMuTlMgPSB2b2lkIDA7XG4vKiogQWxsIHZhbGlkIG5hbWVzcGFjZXMgaW4gSFRNTC4gKi9cbnZhciBOUztcbihmdW5jdGlvbiAoTlMpIHtcbiAgICBOU1tcIkhUTUxcIl0gPSBcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIjtcbiAgICBOU1tcIk1BVEhNTFwiXSA9IFwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiO1xuICAgIE5TW1wiU1ZHXCJdID0gXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiO1xuICAgIE5TW1wiWExJTktcIl0gPSBcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIjtcbiAgICBOU1tcIlhNTFwiXSA9IFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCI7XG4gICAgTlNbXCJYTUxOU1wiXSA9IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC94bWxucy9cIjtcbn0pKE5TID0gZXhwb3J0cy5OUyB8fCAoZXhwb3J0cy5OUyA9IHt9KSk7XG52YXIgQVRUUlM7XG4oZnVuY3Rpb24gKEFUVFJTKSB7XG4gICAgQVRUUlNbXCJUWVBFXCJdID0gXCJ0eXBlXCI7XG4gICAgQVRUUlNbXCJBQ1RJT05cIl0gPSBcImFjdGlvblwiO1xuICAgIEFUVFJTW1wiRU5DT0RJTkdcIl0gPSBcImVuY29kaW5nXCI7XG4gICAgQVRUUlNbXCJQUk9NUFRcIl0gPSBcInByb21wdFwiO1xuICAgIEFUVFJTW1wiTkFNRVwiXSA9IFwibmFtZVwiO1xuICAgIEFUVFJTW1wiQ09MT1JcIl0gPSBcImNvbG9yXCI7XG4gICAgQVRUUlNbXCJGQUNFXCJdID0gXCJmYWNlXCI7XG4gICAgQVRUUlNbXCJTSVpFXCJdID0gXCJzaXplXCI7XG59KShBVFRSUyA9IGV4cG9ydHMuQVRUUlMgfHwgKGV4cG9ydHMuQVRUUlMgPSB7fSkpO1xuLyoqXG4gKiBUaGUgbW9kZSBvZiB0aGUgZG9jdW1lbnQuXG4gKlxuICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9kb20uc3BlYy53aGF0d2cub3JnLyNjb25jZXB0LWRvY3VtZW50LWxpbWl0ZWQtcXVpcmtzfVxuICovXG52YXIgRE9DVU1FTlRfTU9ERTtcbihmdW5jdGlvbiAoRE9DVU1FTlRfTU9ERSkge1xuICAgIERPQ1VNRU5UX01PREVbXCJOT19RVUlSS1NcIl0gPSBcIm5vLXF1aXJrc1wiO1xuICAgIERPQ1VNRU5UX01PREVbXCJRVUlSS1NcIl0gPSBcInF1aXJrc1wiO1xuICAgIERPQ1VNRU5UX01PREVbXCJMSU1JVEVEX1FVSVJLU1wiXSA9IFwibGltaXRlZC1xdWlya3NcIjtcbn0pKERPQ1VNRU5UX01PREUgPSBleHBvcnRzLkRPQ1VNRU5UX01PREUgfHwgKGV4cG9ydHMuRE9DVU1FTlRfTU9ERSA9IHt9KSk7XG52YXIgVEFHX05BTUVTO1xuKGZ1bmN0aW9uIChUQUdfTkFNRVMpIHtcbiAgICBUQUdfTkFNRVNbXCJBXCJdID0gXCJhXCI7XG4gICAgVEFHX05BTUVTW1wiQUREUkVTU1wiXSA9IFwiYWRkcmVzc1wiO1xuICAgIFRBR19OQU1FU1tcIkFOTk9UQVRJT05fWE1MXCJdID0gXCJhbm5vdGF0aW9uLXhtbFwiO1xuICAgIFRBR19OQU1FU1tcIkFQUExFVFwiXSA9IFwiYXBwbGV0XCI7XG4gICAgVEFHX05BTUVTW1wiQVJFQVwiXSA9IFwiYXJlYVwiO1xuICAgIFRBR19OQU1FU1tcIkFSVElDTEVcIl0gPSBcImFydGljbGVcIjtcbiAgICBUQUdfTkFNRVNbXCJBU0lERVwiXSA9IFwiYXNpZGVcIjtcbiAgICBUQUdfTkFNRVNbXCJCXCJdID0gXCJiXCI7XG4gICAgVEFHX05BTUVTW1wiQkFTRVwiXSA9IFwiYmFzZVwiO1xuICAgIFRBR19OQU1FU1tcIkJBU0VGT05UXCJdID0gXCJiYXNlZm9udFwiO1xuICAgIFRBR19OQU1FU1tcIkJHU09VTkRcIl0gPSBcImJnc291bmRcIjtcbiAgICBUQUdfTkFNRVNbXCJCSUdcIl0gPSBcImJpZ1wiO1xuICAgIFRBR19OQU1FU1tcIkJMT0NLUVVPVEVcIl0gPSBcImJsb2NrcXVvdGVcIjtcbiAgICBUQUdfTkFNRVNbXCJCT0RZXCJdID0gXCJib2R5XCI7XG4gICAgVEFHX05BTUVTW1wiQlJcIl0gPSBcImJyXCI7XG4gICAgVEFHX05BTUVTW1wiQlVUVE9OXCJdID0gXCJidXR0b25cIjtcbiAgICBUQUdfTkFNRVNbXCJDQVBUSU9OXCJdID0gXCJjYXB0aW9uXCI7XG4gICAgVEFHX05BTUVTW1wiQ0VOVEVSXCJdID0gXCJjZW50ZXJcIjtcbiAgICBUQUdfTkFNRVNbXCJDT0RFXCJdID0gXCJjb2RlXCI7XG4gICAgVEFHX05BTUVTW1wiQ09MXCJdID0gXCJjb2xcIjtcbiAgICBUQUdfTkFNRVNbXCJDT0xHUk9VUFwiXSA9IFwiY29sZ3JvdXBcIjtcbiAgICBUQUdfTkFNRVNbXCJERFwiXSA9IFwiZGRcIjtcbiAgICBUQUdfTkFNRVNbXCJERVNDXCJdID0gXCJkZXNjXCI7XG4gICAgVEFHX05BTUVTW1wiREVUQUlMU1wiXSA9IFwiZGV0YWlsc1wiO1xuICAgIFRBR19OQU1FU1tcIkRJQUxPR1wiXSA9IFwiZGlhbG9nXCI7XG4gICAgVEFHX05BTUVTW1wiRElSXCJdID0gXCJkaXJcIjtcbiAgICBUQUdfTkFNRVNbXCJESVZcIl0gPSBcImRpdlwiO1xuICAgIFRBR19OQU1FU1tcIkRMXCJdID0gXCJkbFwiO1xuICAgIFRBR19OQU1FU1tcIkRUXCJdID0gXCJkdFwiO1xuICAgIFRBR19OQU1FU1tcIkVNXCJdID0gXCJlbVwiO1xuICAgIFRBR19OQU1FU1tcIkVNQkVEXCJdID0gXCJlbWJlZFwiO1xuICAgIFRBR19OQU1FU1tcIkZJRUxEU0VUXCJdID0gXCJmaWVsZHNldFwiO1xuICAgIFRBR19OQU1FU1tcIkZJR0NBUFRJT05cIl0gPSBcImZpZ2NhcHRpb25cIjtcbiAgICBUQUdfTkFNRVNbXCJGSUdVUkVcIl0gPSBcImZpZ3VyZVwiO1xuICAgIFRBR19OQU1FU1tcIkZPTlRcIl0gPSBcImZvbnRcIjtcbiAgICBUQUdfTkFNRVNbXCJGT09URVJcIl0gPSBcImZvb3RlclwiO1xuICAgIFRBR19OQU1FU1tcIkZPUkVJR05fT0JKRUNUXCJdID0gXCJmb3JlaWduT2JqZWN0XCI7XG4gICAgVEFHX05BTUVTW1wiRk9STVwiXSA9IFwiZm9ybVwiO1xuICAgIFRBR19OQU1FU1tcIkZSQU1FXCJdID0gXCJmcmFtZVwiO1xuICAgIFRBR19OQU1FU1tcIkZSQU1FU0VUXCJdID0gXCJmcmFtZXNldFwiO1xuICAgIFRBR19OQU1FU1tcIkgxXCJdID0gXCJoMVwiO1xuICAgIFRBR19OQU1FU1tcIkgyXCJdID0gXCJoMlwiO1xuICAgIFRBR19OQU1FU1tcIkgzXCJdID0gXCJoM1wiO1xuICAgIFRBR19OQU1FU1tcIkg0XCJdID0gXCJoNFwiO1xuICAgIFRBR19OQU1FU1tcIkg1XCJdID0gXCJoNVwiO1xuICAgIFRBR19OQU1FU1tcIkg2XCJdID0gXCJoNlwiO1xuICAgIFRBR19OQU1FU1tcIkhFQURcIl0gPSBcImhlYWRcIjtcbiAgICBUQUdfTkFNRVNbXCJIRUFERVJcIl0gPSBcImhlYWRlclwiO1xuICAgIFRBR19OQU1FU1tcIkhHUk9VUFwiXSA9IFwiaGdyb3VwXCI7XG4gICAgVEFHX05BTUVTW1wiSFJcIl0gPSBcImhyXCI7XG4gICAgVEFHX05BTUVTW1wiSFRNTFwiXSA9IFwiaHRtbFwiO1xuICAgIFRBR19OQU1FU1tcIklcIl0gPSBcImlcIjtcbiAgICBUQUdfTkFNRVNbXCJJTUdcIl0gPSBcImltZ1wiO1xuICAgIFRBR19OQU1FU1tcIklNQUdFXCJdID0gXCJpbWFnZVwiO1xuICAgIFRBR19OQU1FU1tcIklOUFVUXCJdID0gXCJpbnB1dFwiO1xuICAgIFRBR19OQU1FU1tcIklGUkFNRVwiXSA9IFwiaWZyYW1lXCI7XG4gICAgVEFHX05BTUVTW1wiS0VZR0VOXCJdID0gXCJrZXlnZW5cIjtcbiAgICBUQUdfTkFNRVNbXCJMQUJFTFwiXSA9IFwibGFiZWxcIjtcbiAgICBUQUdfTkFNRVNbXCJMSVwiXSA9IFwibGlcIjtcbiAgICBUQUdfTkFNRVNbXCJMSU5LXCJdID0gXCJsaW5rXCI7XG4gICAgVEFHX05BTUVTW1wiTElTVElOR1wiXSA9IFwibGlzdGluZ1wiO1xuICAgIFRBR19OQU1FU1tcIk1BSU5cIl0gPSBcIm1haW5cIjtcbiAgICBUQUdfTkFNRVNbXCJNQUxJR05NQVJLXCJdID0gXCJtYWxpZ25tYXJrXCI7XG4gICAgVEFHX05BTUVTW1wiTUFSUVVFRVwiXSA9IFwibWFycXVlZVwiO1xuICAgIFRBR19OQU1FU1tcIk1BVEhcIl0gPSBcIm1hdGhcIjtcbiAgICBUQUdfTkFNRVNbXCJNRU5VXCJdID0gXCJtZW51XCI7XG4gICAgVEFHX05BTUVTW1wiTUVUQVwiXSA9IFwibWV0YVwiO1xuICAgIFRBR19OQU1FU1tcIk1HTFlQSFwiXSA9IFwibWdseXBoXCI7XG4gICAgVEFHX05BTUVTW1wiTUlcIl0gPSBcIm1pXCI7XG4gICAgVEFHX05BTUVTW1wiTU9cIl0gPSBcIm1vXCI7XG4gICAgVEFHX05BTUVTW1wiTU5cIl0gPSBcIm1uXCI7XG4gICAgVEFHX05BTUVTW1wiTVNcIl0gPSBcIm1zXCI7XG4gICAgVEFHX05BTUVTW1wiTVRFWFRcIl0gPSBcIm10ZXh0XCI7XG4gICAgVEFHX05BTUVTW1wiTkFWXCJdID0gXCJuYXZcIjtcbiAgICBUQUdfTkFNRVNbXCJOT0JSXCJdID0gXCJub2JyXCI7XG4gICAgVEFHX05BTUVTW1wiTk9GUkFNRVNcIl0gPSBcIm5vZnJhbWVzXCI7XG4gICAgVEFHX05BTUVTW1wiTk9FTUJFRFwiXSA9IFwibm9lbWJlZFwiO1xuICAgIFRBR19OQU1FU1tcIk5PU0NSSVBUXCJdID0gXCJub3NjcmlwdFwiO1xuICAgIFRBR19OQU1FU1tcIk9CSkVDVFwiXSA9IFwib2JqZWN0XCI7XG4gICAgVEFHX05BTUVTW1wiT0xcIl0gPSBcIm9sXCI7XG4gICAgVEFHX05BTUVTW1wiT1BUR1JPVVBcIl0gPSBcIm9wdGdyb3VwXCI7XG4gICAgVEFHX05BTUVTW1wiT1BUSU9OXCJdID0gXCJvcHRpb25cIjtcbiAgICBUQUdfTkFNRVNbXCJQXCJdID0gXCJwXCI7XG4gICAgVEFHX05BTUVTW1wiUEFSQU1cIl0gPSBcInBhcmFtXCI7XG4gICAgVEFHX05BTUVTW1wiUExBSU5URVhUXCJdID0gXCJwbGFpbnRleHRcIjtcbiAgICBUQUdfTkFNRVNbXCJQUkVcIl0gPSBcInByZVwiO1xuICAgIFRBR19OQU1FU1tcIlJCXCJdID0gXCJyYlwiO1xuICAgIFRBR19OQU1FU1tcIlJQXCJdID0gXCJycFwiO1xuICAgIFRBR19OQU1FU1tcIlJUXCJdID0gXCJydFwiO1xuICAgIFRBR19OQU1FU1tcIlJUQ1wiXSA9IFwicnRjXCI7XG4gICAgVEFHX05BTUVTW1wiUlVCWVwiXSA9IFwicnVieVwiO1xuICAgIFRBR19OQU1FU1tcIlNcIl0gPSBcInNcIjtcbiAgICBUQUdfTkFNRVNbXCJTQ1JJUFRcIl0gPSBcInNjcmlwdFwiO1xuICAgIFRBR19OQU1FU1tcIlNFQ1RJT05cIl0gPSBcInNlY3Rpb25cIjtcbiAgICBUQUdfTkFNRVNbXCJTRUxFQ1RcIl0gPSBcInNlbGVjdFwiO1xuICAgIFRBR19OQU1FU1tcIlNPVVJDRVwiXSA9IFwic291cmNlXCI7XG4gICAgVEFHX05BTUVTW1wiU01BTExcIl0gPSBcInNtYWxsXCI7XG4gICAgVEFHX05BTUVTW1wiU1BBTlwiXSA9IFwic3BhblwiO1xuICAgIFRBR19OQU1FU1tcIlNUUklLRVwiXSA9IFwic3RyaWtlXCI7XG4gICAgVEFHX05BTUVTW1wiU1RST05HXCJdID0gXCJzdHJvbmdcIjtcbiAgICBUQUdfTkFNRVNbXCJTVFlMRVwiXSA9IFwic3R5bGVcIjtcbiAgICBUQUdfTkFNRVNbXCJTVUJcIl0gPSBcInN1YlwiO1xuICAgIFRBR19OQU1FU1tcIlNVTU1BUllcIl0gPSBcInN1bW1hcnlcIjtcbiAgICBUQUdfTkFNRVNbXCJTVVBcIl0gPSBcInN1cFwiO1xuICAgIFRBR19OQU1FU1tcIlRBQkxFXCJdID0gXCJ0YWJsZVwiO1xuICAgIFRBR19OQU1FU1tcIlRCT0RZXCJdID0gXCJ0Ym9keVwiO1xuICAgIFRBR19OQU1FU1tcIlRFTVBMQVRFXCJdID0gXCJ0ZW1wbGF0ZVwiO1xuICAgIFRBR19OQU1FU1tcIlRFWFRBUkVBXCJdID0gXCJ0ZXh0YXJlYVwiO1xuICAgIFRBR19OQU1FU1tcIlRGT09UXCJdID0gXCJ0Zm9vdFwiO1xuICAgIFRBR19OQU1FU1tcIlREXCJdID0gXCJ0ZFwiO1xuICAgIFRBR19OQU1FU1tcIlRIXCJdID0gXCJ0aFwiO1xuICAgIFRBR19OQU1FU1tcIlRIRUFEXCJdID0gXCJ0aGVhZFwiO1xuICAgIFRBR19OQU1FU1tcIlRJVExFXCJdID0gXCJ0aXRsZVwiO1xuICAgIFRBR19OQU1FU1tcIlRSXCJdID0gXCJ0clwiO1xuICAgIFRBR19OQU1FU1tcIlRSQUNLXCJdID0gXCJ0cmFja1wiO1xuICAgIFRBR19OQU1FU1tcIlRUXCJdID0gXCJ0dFwiO1xuICAgIFRBR19OQU1FU1tcIlVcIl0gPSBcInVcIjtcbiAgICBUQUdfTkFNRVNbXCJVTFwiXSA9IFwidWxcIjtcbiAgICBUQUdfTkFNRVNbXCJTVkdcIl0gPSBcInN2Z1wiO1xuICAgIFRBR19OQU1FU1tcIlZBUlwiXSA9IFwidmFyXCI7XG4gICAgVEFHX05BTUVTW1wiV0JSXCJdID0gXCJ3YnJcIjtcbiAgICBUQUdfTkFNRVNbXCJYTVBcIl0gPSBcInhtcFwiO1xufSkoVEFHX05BTUVTID0gZXhwb3J0cy5UQUdfTkFNRVMgfHwgKGV4cG9ydHMuVEFHX05BTUVTID0ge30pKTtcbi8qKlxuICogVGFnIElEcyBhcmUgbnVtZXJpYyBJRHMgZm9yIGtub3duIHRhZyBuYW1lcy5cbiAqXG4gKiBXZSB1c2UgdGFnIElEcyB0byBpbXByb3ZlIHRoZSBwZXJmb3JtYW5jZSBvZiB0YWcgbmFtZSBjb21wYXJpc29ucy5cbiAqL1xudmFyIFRBR19JRDtcbihmdW5jdGlvbiAoVEFHX0lEKSB7XG4gICAgVEFHX0lEW1RBR19JRFtcIlVOS05PV05cIl0gPSAwXSA9IFwiVU5LTk9XTlwiO1xuICAgIFRBR19JRFtUQUdfSURbXCJBXCJdID0gMV0gPSBcIkFcIjtcbiAgICBUQUdfSURbVEFHX0lEW1wiQUREUkVTU1wiXSA9IDJdID0gXCJBRERSRVNTXCI7XG4gICAgVEFHX0lEW1RBR19JRFtcIkFOTk9UQVRJT05fWE1MXCJdID0gM10gPSBcIkFOTk9UQVRJT05fWE1MXCI7XG4gICAgVEFHX0lEW1RBR19JRFtcIkFQUExFVFwiXSA9IDRdID0gXCJBUFBMRVRcIjtcbiAgICBUQUdfSURbVEFHX0lEW1wiQVJFQVwiXSA9IDVdID0gXCJBUkVBXCI7XG4gICAgVEFHX0lEW1RBR19JRFtcIkFSVElDTEVcIl0gPSA2XSA9IFwiQVJUSUNMRVwiO1xuICAgIFRBR19JRFtUQUdfSURbXCJBU0lERVwiXSA9IDddID0gXCJBU0lERVwiO1xuICAgIFRBR19JRFtUQUdfSURbXCJCXCJdID0gOF0gPSBcIkJcIjtcbiAgICBUQUdfSURbVEFHX0lEW1wiQkFTRVwiXSA9IDldID0gXCJCQVNFXCI7XG4gICAgVEFHX0lEW1RBR19JRFtcIkJBU0VGT05UXCJdID0gMTBdID0gXCJCQVNFRk9OVFwiO1xuICAgIFRBR19JRFtUQUdfSURbXCJCR1NPVU5EXCJdID0gMTFdID0gXCJCR1NPVU5EXCI7XG4gICAgVEFHX0lEW1RBR19JRFtcIkJJR1wiXSA9IDEyXSA9IFwiQklHXCI7XG4gICAgVEFHX0lEW1RBR19JRFtcIkJMT0NLUVVPVEVcIl0gPSAxM10gPSBcIkJMT0NLUVVPVEVcIjtcbiAgICBUQUdfSURbVEFHX0lEW1wiQk9EWVwiXSA9IDE0XSA9IFwiQk9EWVwiO1xuICAgIFRBR19JRFtUQUdfSURbXCJCUlwiXSA9IDE1XSA9IFwiQlJcIjtcbiAgICBUQUdfSURbVEFHX0lEW1wiQlVUVE9OXCJdID0gMTZdID0gXCJCVVRUT05cIjtcbiAgICBUQUdfSURbVEFHX0lEW1wiQ0FQVElPTlwiXSA9IDE3XSA9IFwiQ0FQVElPTlwiO1xuICAgIFRBR19JRFtUQUdfSURbXCJDRU5URVJcIl0gPSAxOF0gPSBcIkNFTlRFUlwiO1xuICAgIFRBR19JRFtUQUdfSURbXCJDT0RFXCJdID0gMTldID0gXCJDT0RFXCI7XG4gICAgVEFHX0lEW1RBR19JRFtcIkNPTFwiXSA9IDIwXSA9IFwiQ09MXCI7XG4gICAgVEFHX0lEW1RBR19JRFtcIkNPTEdST1VQXCJdID0gMjFdID0gXCJDT0xHUk9VUFwiO1xuICAgIFRBR19JRFtUQUdfSURbXCJERFwiXSA9IDIyXSA9IFwiRERcIjtcbiAgICBUQUdfSURbVEFHX0lEW1wiREVTQ1wiXSA9IDIzXSA9IFwiREVTQ1wiO1xuICAgIFRBR19JRFtUQUdfSURbXCJERVRBSUxTXCJdID0gMjRdID0gXCJERVRBSUxTXCI7XG4gICAgVEFHX0lEW1RBR19JRFtcIkRJQUxPR1wiXSA9IDI1XSA9IFwiRElBTE9HXCI7XG4gICAgVEFHX0lEW1RBR19JRFtcIkRJUlwiXSA9IDI2XSA9IFwiRElSXCI7XG4gICAgVEFHX0lEW1RBR19JRFtcIkRJVlwiXSA9IDI3XSA9IFwiRElWXCI7XG4gICAgVEFHX0lEW1RBR19JRFtcIkRMXCJdID0gMjhdID0gXCJETFwiO1xuICAgIFRBR19JRFtUQUdfSURbXCJEVFwiXSA9IDI5XSA9IFwiRFRcIjtcbiAgICBUQUdfSURbVEFHX0lEW1wiRU1cIl0gPSAzMF0gPSBcIkVNXCI7XG4gICAgVEFHX0lEW1RBR19JRFtcIkVNQkVEXCJdID0gMzFdID0gXCJFTUJFRFwiO1xuICAgIFRBR19JRFtUQUdfSURbXCJGSUVMRFNFVFwiXSA9IDMyXSA9IFwiRklFTERTRVRcIjtcbiAgICBUQUdfSURbVEFHX0lEW1wiRklHQ0FQVElPTlwiXSA9IDMzXSA9IFwiRklHQ0FQVElPTlwiO1xuICAgIFRBR19JRFtUQUdfSURbXCJGSUdVUkVcIl0gPSAzNF0gPSBcIkZJR1VSRVwiO1xuICAgIFRBR19JRFtUQUdfSURbXCJGT05UXCJdID0gMzVdID0gXCJGT05UXCI7XG4gICAgVEFHX0lEW1RBR19JRFtcIkZPT1RFUlwiXSA9IDM2XSA9IFwiRk9PVEVSXCI7XG4gICAgVEFHX0lEW1RBR19JRFtcIkZPUkVJR05fT0JKRUNUXCJdID0gMzddID0gXCJGT1JFSUdOX09CSkVDVFwiO1xuICAgIFRBR19JRFtUQUdfSURbXCJGT1JNXCJdID0gMzhdID0gXCJGT1JNXCI7XG4gICAgVEFHX0lEW1RBR19JRFtcIkZSQU1FXCJdID0gMzldID0gXCJGUkFNRVwiO1xuICAgIFRBR19JRFtUQUdfSURbXCJGUkFNRVNFVFwiXSA9IDQwXSA9IFwiRlJBTUVTRVRcIjtcbiAgICBUQUdfSURbVEFHX0lEW1wiSDFcIl0gPSA0MV0gPSBcIkgxXCI7XG4gICAgVEFHX0lEW1RBR19JRFtcIkgyXCJdID0gNDJdID0gXCJIMlwiO1xuICAgIFRBR19JRFtUQUdfSURbXCJIM1wiXSA9IDQzXSA9IFwiSDNcIjtcbiAgICBUQUdfSURbVEFHX0lEW1wiSDRcIl0gPSA0NF0gPSBcIkg0XCI7XG4gICAgVEFHX0lEW1RBR19JRFtcIkg1XCJdID0gNDVdID0gXCJINVwiO1xuICAgIFRBR19JRFtUQUdfSURbXCJINlwiXSA9IDQ2XSA9IFwiSDZcIjtcbiAgICBUQUdfSURbVEFHX0lEW1wiSEVBRFwiXSA9IDQ3XSA9IFwiSEVBRFwiO1xuICAgIFRBR19JRFtUQUdfSURbXCJIRUFERVJcIl0gPSA0OF0gPSBcIkhFQURFUlwiO1xuICAgIFRBR19JRFtUQUdfSURbXCJIR1JPVVBcIl0gPSA0OV0gPSBcIkhHUk9VUFwiO1xuICAgIFRBR19JRFtUQUdfSURbXCJIUlwiXSA9IDUwXSA9IFwiSFJcIjtcbiAgICBUQUdfSURbVEFHX0lEW1wiSFRNTFwiXSA9IDUxXSA9IFwiSFRNTFwiO1xuICAgIFRBR19JRFtUQUdfSURbXCJJXCJdID0gNTJdID0gXCJJXCI7XG4gICAgVEFHX0lEW1RBR19JRFtcIklNR1wiXSA9IDUzXSA9IFwiSU1HXCI7XG4gICAgVEFHX0lEW1RBR19JRFtcIklNQUdFXCJdID0gNTRdID0gXCJJTUFHRVwiO1xuICAgIFRBR19JRFtUQUdfSURbXCJJTlBVVFwiXSA9IDU1XSA9IFwiSU5QVVRcIjtcbiAgICBUQUdfSURbVEFHX0lEW1wiSUZSQU1FXCJdID0gNTZdID0gXCJJRlJBTUVcIjtcbiAgICBUQUdfSURbVEFHX0lEW1wiS0VZR0VOXCJdID0gNTddID0gXCJLRVlHRU5cIjtcbiAgICBUQUdfSURbVEFHX0lEW1wiTEFCRUxcIl0gPSA1OF0gPSBcIkxBQkVMXCI7XG4gICAgVEFHX0lEW1RBR19JRFtcIkxJXCJdID0gNTldID0gXCJMSVwiO1xuICAgIFRBR19JRFtUQUdfSURbXCJMSU5LXCJdID0gNjBdID0gXCJMSU5LXCI7XG4gICAgVEFHX0lEW1RBR19JRFtcIkxJU1RJTkdcIl0gPSA2MV0gPSBcIkxJU1RJTkdcIjtcbiAgICBUQUdfSURbVEFHX0lEW1wiTUFJTlwiXSA9IDYyXSA9IFwiTUFJTlwiO1xuICAgIFRBR19JRFtUQUdfSURbXCJNQUxJR05NQVJLXCJdID0gNjNdID0gXCJNQUxJR05NQVJLXCI7XG4gICAgVEFHX0lEW1RBR19JRFtcIk1BUlFVRUVcIl0gPSA2NF0gPSBcIk1BUlFVRUVcIjtcbiAgICBUQUdfSURbVEFHX0lEW1wiTUFUSFwiXSA9IDY1XSA9IFwiTUFUSFwiO1xuICAgIFRBR19JRFtUQUdfSURbXCJNRU5VXCJdID0gNjZdID0gXCJNRU5VXCI7XG4gICAgVEFHX0lEW1RBR19JRFtcIk1FVEFcIl0gPSA2N10gPSBcIk1FVEFcIjtcbiAgICBUQUdfSURbVEFHX0lEW1wiTUdMWVBIXCJdID0gNjhdID0gXCJNR0xZUEhcIjtcbiAgICBUQUdfSURbVEFHX0lEW1wiTUlcIl0gPSA2OV0gPSBcIk1JXCI7XG4gICAgVEFHX0lEW1RBR19JRFtcIk1PXCJdID0gNzBdID0gXCJNT1wiO1xuICAgIFRBR19JRFtUQUdfSURbXCJNTlwiXSA9IDcxXSA9IFwiTU5cIjtcbiAgICBUQUdfSURbVEFHX0lEW1wiTVNcIl0gPSA3Ml0gPSBcIk1TXCI7XG4gICAgVEFHX0lEW1RBR19JRFtcIk1URVhUXCJdID0gNzNdID0gXCJNVEVYVFwiO1xuICAgIFRBR19JRFtUQUdfSURbXCJOQVZcIl0gPSA3NF0gPSBcIk5BVlwiO1xuICAgIFRBR19JRFtUQUdfSURbXCJOT0JSXCJdID0gNzVdID0gXCJOT0JSXCI7XG4gICAgVEFHX0lEW1RBR19JRFtcIk5PRlJBTUVTXCJdID0gNzZdID0gXCJOT0ZSQU1FU1wiO1xuICAgIFRBR19JRFtUQUdfSURbXCJOT0VNQkVEXCJdID0gNzddID0gXCJOT0VNQkVEXCI7XG4gICAgVEFHX0lEW1RBR19JRFtcIk5PU0NSSVBUXCJdID0gNzhdID0gXCJOT1NDUklQVFwiO1xuICAgIFRBR19JRFtUQUdfSURbXCJPQkpFQ1RcIl0gPSA3OV0gPSBcIk9CSkVDVFwiO1xuICAgIFRBR19JRFtUQUdfSURbXCJPTFwiXSA9IDgwXSA9IFwiT0xcIjtcbiAgICBUQUdfSURbVEFHX0lEW1wiT1BUR1JPVVBcIl0gPSA4MV0gPSBcIk9QVEdST1VQXCI7XG4gICAgVEFHX0lEW1RBR19JRFtcIk9QVElPTlwiXSA9IDgyXSA9IFwiT1BUSU9OXCI7XG4gICAgVEFHX0lEW1RBR19JRFtcIlBcIl0gPSA4M10gPSBcIlBcIjtcbiAgICBUQUdfSURbVEFHX0lEW1wiUEFSQU1cIl0gPSA4NF0gPSBcIlBBUkFNXCI7XG4gICAgVEFHX0lEW1RBR19JRFtcIlBMQUlOVEVYVFwiXSA9IDg1XSA9IFwiUExBSU5URVhUXCI7XG4gICAgVEFHX0lEW1RBR19JRFtcIlBSRVwiXSA9IDg2XSA9IFwiUFJFXCI7XG4gICAgVEFHX0lEW1RBR19JRFtcIlJCXCJdID0gODddID0gXCJSQlwiO1xuICAgIFRBR19JRFtUQUdfSURbXCJSUFwiXSA9IDg4XSA9IFwiUlBcIjtcbiAgICBUQUdfSURbVEFHX0lEW1wiUlRcIl0gPSA4OV0gPSBcIlJUXCI7XG4gICAgVEFHX0lEW1RBR19JRFtcIlJUQ1wiXSA9IDkwXSA9IFwiUlRDXCI7XG4gICAgVEFHX0lEW1RBR19JRFtcIlJVQllcIl0gPSA5MV0gPSBcIlJVQllcIjtcbiAgICBUQUdfSURbVEFHX0lEW1wiU1wiXSA9IDkyXSA9IFwiU1wiO1xuICAgIFRBR19JRFtUQUdfSURbXCJTQ1JJUFRcIl0gPSA5M10gPSBcIlNDUklQVFwiO1xuICAgIFRBR19JRFtUQUdfSURbXCJTRUNUSU9OXCJdID0gOTRdID0gXCJTRUNUSU9OXCI7XG4gICAgVEFHX0lEW1RBR19JRFtcIlNFTEVDVFwiXSA9IDk1XSA9IFwiU0VMRUNUXCI7XG4gICAgVEFHX0lEW1RBR19JRFtcIlNPVVJDRVwiXSA9IDk2XSA9IFwiU09VUkNFXCI7XG4gICAgVEFHX0lEW1RBR19JRFtcIlNNQUxMXCJdID0gOTddID0gXCJTTUFMTFwiO1xuICAgIFRBR19JRFtUQUdfSURbXCJTUEFOXCJdID0gOThdID0gXCJTUEFOXCI7XG4gICAgVEFHX0lEW1RBR19JRFtcIlNUUklLRVwiXSA9IDk5XSA9IFwiU1RSSUtFXCI7XG4gICAgVEFHX0lEW1RBR19JRFtcIlNUUk9OR1wiXSA9IDEwMF0gPSBcIlNUUk9OR1wiO1xuICAgIFRBR19JRFtUQUdfSURbXCJTVFlMRVwiXSA9IDEwMV0gPSBcIlNUWUxFXCI7XG4gICAgVEFHX0lEW1RBR19JRFtcIlNVQlwiXSA9IDEwMl0gPSBcIlNVQlwiO1xuICAgIFRBR19JRFtUQUdfSURbXCJTVU1NQVJZXCJdID0gMTAzXSA9IFwiU1VNTUFSWVwiO1xuICAgIFRBR19JRFtUQUdfSURbXCJTVVBcIl0gPSAxMDRdID0gXCJTVVBcIjtcbiAgICBUQUdfSURbVEFHX0lEW1wiVEFCTEVcIl0gPSAxMDVdID0gXCJUQUJMRVwiO1xuICAgIFRBR19JRFtUQUdfSURbXCJUQk9EWVwiXSA9IDEwNl0gPSBcIlRCT0RZXCI7XG4gICAgVEFHX0lEW1RBR19JRFtcIlRFTVBMQVRFXCJdID0gMTA3XSA9IFwiVEVNUExBVEVcIjtcbiAgICBUQUdfSURbVEFHX0lEW1wiVEVYVEFSRUFcIl0gPSAxMDhdID0gXCJURVhUQVJFQVwiO1xuICAgIFRBR19JRFtUQUdfSURbXCJURk9PVFwiXSA9IDEwOV0gPSBcIlRGT09UXCI7XG4gICAgVEFHX0lEW1RBR19JRFtcIlREXCJdID0gMTEwXSA9IFwiVERcIjtcbiAgICBUQUdfSURbVEFHX0lEW1wiVEhcIl0gPSAxMTFdID0gXCJUSFwiO1xuICAgIFRBR19JRFtUQUdfSURbXCJUSEVBRFwiXSA9IDExMl0gPSBcIlRIRUFEXCI7XG4gICAgVEFHX0lEW1RBR19JRFtcIlRJVExFXCJdID0gMTEzXSA9IFwiVElUTEVcIjtcbiAgICBUQUdfSURbVEFHX0lEW1wiVFJcIl0gPSAxMTRdID0gXCJUUlwiO1xuICAgIFRBR19JRFtUQUdfSURbXCJUUkFDS1wiXSA9IDExNV0gPSBcIlRSQUNLXCI7XG4gICAgVEFHX0lEW1RBR19JRFtcIlRUXCJdID0gMTE2XSA9IFwiVFRcIjtcbiAgICBUQUdfSURbVEFHX0lEW1wiVVwiXSA9IDExN10gPSBcIlVcIjtcbiAgICBUQUdfSURbVEFHX0lEW1wiVUxcIl0gPSAxMThdID0gXCJVTFwiO1xuICAgIFRBR19JRFtUQUdfSURbXCJTVkdcIl0gPSAxMTldID0gXCJTVkdcIjtcbiAgICBUQUdfSURbVEFHX0lEW1wiVkFSXCJdID0gMTIwXSA9IFwiVkFSXCI7XG4gICAgVEFHX0lEW1RBR19JRFtcIldCUlwiXSA9IDEyMV0gPSBcIldCUlwiO1xuICAgIFRBR19JRFtUQUdfSURbXCJYTVBcIl0gPSAxMjJdID0gXCJYTVBcIjtcbn0pKFRBR19JRCA9IGV4cG9ydHMuVEFHX0lEIHx8IChleHBvcnRzLlRBR19JRCA9IHt9KSk7XG5jb25zdCBUQUdfTkFNRV9UT19JRCA9IG5ldyBNYXAoW1xuICAgIFtUQUdfTkFNRVMuQSwgVEFHX0lELkFdLFxuICAgIFtUQUdfTkFNRVMuQUREUkVTUywgVEFHX0lELkFERFJFU1NdLFxuICAgIFtUQUdfTkFNRVMuQU5OT1RBVElPTl9YTUwsIFRBR19JRC5BTk5PVEFUSU9OX1hNTF0sXG4gICAgW1RBR19OQU1FUy5BUFBMRVQsIFRBR19JRC5BUFBMRVRdLFxuICAgIFtUQUdfTkFNRVMuQVJFQSwgVEFHX0lELkFSRUFdLFxuICAgIFtUQUdfTkFNRVMuQVJUSUNMRSwgVEFHX0lELkFSVElDTEVdLFxuICAgIFtUQUdfTkFNRVMuQVNJREUsIFRBR19JRC5BU0lERV0sXG4gICAgW1RBR19OQU1FUy5CLCBUQUdfSUQuQl0sXG4gICAgW1RBR19OQU1FUy5CQVNFLCBUQUdfSUQuQkFTRV0sXG4gICAgW1RBR19OQU1FUy5CQVNFRk9OVCwgVEFHX0lELkJBU0VGT05UXSxcbiAgICBbVEFHX05BTUVTLkJHU09VTkQsIFRBR19JRC5CR1NPVU5EXSxcbiAgICBbVEFHX05BTUVTLkJJRywgVEFHX0lELkJJR10sXG4gICAgW1RBR19OQU1FUy5CTE9DS1FVT1RFLCBUQUdfSUQuQkxPQ0tRVU9URV0sXG4gICAgW1RBR19OQU1FUy5CT0RZLCBUQUdfSUQuQk9EWV0sXG4gICAgW1RBR19OQU1FUy5CUiwgVEFHX0lELkJSXSxcbiAgICBbVEFHX05BTUVTLkJVVFRPTiwgVEFHX0lELkJVVFRPTl0sXG4gICAgW1RBR19OQU1FUy5DQVBUSU9OLCBUQUdfSUQuQ0FQVElPTl0sXG4gICAgW1RBR19OQU1FUy5DRU5URVIsIFRBR19JRC5DRU5URVJdLFxuICAgIFtUQUdfTkFNRVMuQ09ERSwgVEFHX0lELkNPREVdLFxuICAgIFtUQUdfTkFNRVMuQ09MLCBUQUdfSUQuQ09MXSxcbiAgICBbVEFHX05BTUVTLkNPTEdST1VQLCBUQUdfSUQuQ09MR1JPVVBdLFxuICAgIFtUQUdfTkFNRVMuREQsIFRBR19JRC5ERF0sXG4gICAgW1RBR19OQU1FUy5ERVNDLCBUQUdfSUQuREVTQ10sXG4gICAgW1RBR19OQU1FUy5ERVRBSUxTLCBUQUdfSUQuREVUQUlMU10sXG4gICAgW1RBR19OQU1FUy5ESUFMT0csIFRBR19JRC5ESUFMT0ddLFxuICAgIFtUQUdfTkFNRVMuRElSLCBUQUdfSUQuRElSXSxcbiAgICBbVEFHX05BTUVTLkRJViwgVEFHX0lELkRJVl0sXG4gICAgW1RBR19OQU1FUy5ETCwgVEFHX0lELkRMXSxcbiAgICBbVEFHX05BTUVTLkRULCBUQUdfSUQuRFRdLFxuICAgIFtUQUdfTkFNRVMuRU0sIFRBR19JRC5FTV0sXG4gICAgW1RBR19OQU1FUy5FTUJFRCwgVEFHX0lELkVNQkVEXSxcbiAgICBbVEFHX05BTUVTLkZJRUxEU0VULCBUQUdfSUQuRklFTERTRVRdLFxuICAgIFtUQUdfTkFNRVMuRklHQ0FQVElPTiwgVEFHX0lELkZJR0NBUFRJT05dLFxuICAgIFtUQUdfTkFNRVMuRklHVVJFLCBUQUdfSUQuRklHVVJFXSxcbiAgICBbVEFHX05BTUVTLkZPTlQsIFRBR19JRC5GT05UXSxcbiAgICBbVEFHX05BTUVTLkZPT1RFUiwgVEFHX0lELkZPT1RFUl0sXG4gICAgW1RBR19OQU1FUy5GT1JFSUdOX09CSkVDVCwgVEFHX0lELkZPUkVJR05fT0JKRUNUXSxcbiAgICBbVEFHX05BTUVTLkZPUk0sIFRBR19JRC5GT1JNXSxcbiAgICBbVEFHX05BTUVTLkZSQU1FLCBUQUdfSUQuRlJBTUVdLFxuICAgIFtUQUdfTkFNRVMuRlJBTUVTRVQsIFRBR19JRC5GUkFNRVNFVF0sXG4gICAgW1RBR19OQU1FUy5IMSwgVEFHX0lELkgxXSxcbiAgICBbVEFHX05BTUVTLkgyLCBUQUdfSUQuSDJdLFxuICAgIFtUQUdfTkFNRVMuSDMsIFRBR19JRC5IM10sXG4gICAgW1RBR19OQU1FUy5INCwgVEFHX0lELkg0XSxcbiAgICBbVEFHX05BTUVTLkg1LCBUQUdfSUQuSDVdLFxuICAgIFtUQUdfTkFNRVMuSDYsIFRBR19JRC5INl0sXG4gICAgW1RBR19OQU1FUy5IRUFELCBUQUdfSUQuSEVBRF0sXG4gICAgW1RBR19OQU1FUy5IRUFERVIsIFRBR19JRC5IRUFERVJdLFxuICAgIFtUQUdfTkFNRVMuSEdST1VQLCBUQUdfSUQuSEdST1VQXSxcbiAgICBbVEFHX05BTUVTLkhSLCBUQUdfSUQuSFJdLFxuICAgIFtUQUdfTkFNRVMuSFRNTCwgVEFHX0lELkhUTUxdLFxuICAgIFtUQUdfTkFNRVMuSSwgVEFHX0lELkldLFxuICAgIFtUQUdfTkFNRVMuSU1HLCBUQUdfSUQuSU1HXSxcbiAgICBbVEFHX05BTUVTLklNQUdFLCBUQUdfSUQuSU1BR0VdLFxuICAgIFtUQUdfTkFNRVMuSU5QVVQsIFRBR19JRC5JTlBVVF0sXG4gICAgW1RBR19OQU1FUy5JRlJBTUUsIFRBR19JRC5JRlJBTUVdLFxuICAgIFtUQUdfTkFNRVMuS0VZR0VOLCBUQUdfSUQuS0VZR0VOXSxcbiAgICBbVEFHX05BTUVTLkxBQkVMLCBUQUdfSUQuTEFCRUxdLFxuICAgIFtUQUdfTkFNRVMuTEksIFRBR19JRC5MSV0sXG4gICAgW1RBR19OQU1FUy5MSU5LLCBUQUdfSUQuTElOS10sXG4gICAgW1RBR19OQU1FUy5MSVNUSU5HLCBUQUdfSUQuTElTVElOR10sXG4gICAgW1RBR19OQU1FUy5NQUlOLCBUQUdfSUQuTUFJTl0sXG4gICAgW1RBR19OQU1FUy5NQUxJR05NQVJLLCBUQUdfSUQuTUFMSUdOTUFSS10sXG4gICAgW1RBR19OQU1FUy5NQVJRVUVFLCBUQUdfSUQuTUFSUVVFRV0sXG4gICAgW1RBR19OQU1FUy5NQVRILCBUQUdfSUQuTUFUSF0sXG4gICAgW1RBR19OQU1FUy5NRU5VLCBUQUdfSUQuTUVOVV0sXG4gICAgW1RBR19OQU1FUy5NRVRBLCBUQUdfSUQuTUVUQV0sXG4gICAgW1RBR19OQU1FUy5NR0xZUEgsIFRBR19JRC5NR0xZUEhdLFxuICAgIFtUQUdfTkFNRVMuTUksIFRBR19JRC5NSV0sXG4gICAgW1RBR19OQU1FUy5NTywgVEFHX0lELk1PXSxcbiAgICBbVEFHX05BTUVTLk1OLCBUQUdfSUQuTU5dLFxuICAgIFtUQUdfTkFNRVMuTVMsIFRBR19JRC5NU10sXG4gICAgW1RBR19OQU1FUy5NVEVYVCwgVEFHX0lELk1URVhUXSxcbiAgICBbVEFHX05BTUVTLk5BViwgVEFHX0lELk5BVl0sXG4gICAgW1RBR19OQU1FUy5OT0JSLCBUQUdfSUQuTk9CUl0sXG4gICAgW1RBR19OQU1FUy5OT0ZSQU1FUywgVEFHX0lELk5PRlJBTUVTXSxcbiAgICBbVEFHX05BTUVTLk5PRU1CRUQsIFRBR19JRC5OT0VNQkVEXSxcbiAgICBbVEFHX05BTUVTLk5PU0NSSVBULCBUQUdfSUQuTk9TQ1JJUFRdLFxuICAgIFtUQUdfTkFNRVMuT0JKRUNULCBUQUdfSUQuT0JKRUNUXSxcbiAgICBbVEFHX05BTUVTLk9MLCBUQUdfSUQuT0xdLFxuICAgIFtUQUdfTkFNRVMuT1BUR1JPVVAsIFRBR19JRC5PUFRHUk9VUF0sXG4gICAgW1RBR19OQU1FUy5PUFRJT04sIFRBR19JRC5PUFRJT05dLFxuICAgIFtUQUdfTkFNRVMuUCwgVEFHX0lELlBdLFxuICAgIFtUQUdfTkFNRVMuUEFSQU0sIFRBR19JRC5QQVJBTV0sXG4gICAgW1RBR19OQU1FUy5QTEFJTlRFWFQsIFRBR19JRC5QTEFJTlRFWFRdLFxuICAgIFtUQUdfTkFNRVMuUFJFLCBUQUdfSUQuUFJFXSxcbiAgICBbVEFHX05BTUVTLlJCLCBUQUdfSUQuUkJdLFxuICAgIFtUQUdfTkFNRVMuUlAsIFRBR19JRC5SUF0sXG4gICAgW1RBR19OQU1FUy5SVCwgVEFHX0lELlJUXSxcbiAgICBbVEFHX05BTUVTLlJUQywgVEFHX0lELlJUQ10sXG4gICAgW1RBR19OQU1FUy5SVUJZLCBUQUdfSUQuUlVCWV0sXG4gICAgW1RBR19OQU1FUy5TLCBUQUdfSUQuU10sXG4gICAgW1RBR19OQU1FUy5TQ1JJUFQsIFRBR19JRC5TQ1JJUFRdLFxuICAgIFtUQUdfTkFNRVMuU0VDVElPTiwgVEFHX0lELlNFQ1RJT05dLFxuICAgIFtUQUdfTkFNRVMuU0VMRUNULCBUQUdfSUQuU0VMRUNUXSxcbiAgICBbVEFHX05BTUVTLlNPVVJDRSwgVEFHX0lELlNPVVJDRV0sXG4gICAgW1RBR19OQU1FUy5TTUFMTCwgVEFHX0lELlNNQUxMXSxcbiAgICBbVEFHX05BTUVTLlNQQU4sIFRBR19JRC5TUEFOXSxcbiAgICBbVEFHX05BTUVTLlNUUklLRSwgVEFHX0lELlNUUklLRV0sXG4gICAgW1RBR19OQU1FUy5TVFJPTkcsIFRBR19JRC5TVFJPTkddLFxuICAgIFtUQUdfTkFNRVMuU1RZTEUsIFRBR19JRC5TVFlMRV0sXG4gICAgW1RBR19OQU1FUy5TVUIsIFRBR19JRC5TVUJdLFxuICAgIFtUQUdfTkFNRVMuU1VNTUFSWSwgVEFHX0lELlNVTU1BUlldLFxuICAgIFtUQUdfTkFNRVMuU1VQLCBUQUdfSUQuU1VQXSxcbiAgICBbVEFHX05BTUVTLlRBQkxFLCBUQUdfSUQuVEFCTEVdLFxuICAgIFtUQUdfTkFNRVMuVEJPRFksIFRBR19JRC5UQk9EWV0sXG4gICAgW1RBR19OQU1FUy5URU1QTEFURSwgVEFHX0lELlRFTVBMQVRFXSxcbiAgICBbVEFHX05BTUVTLlRFWFRBUkVBLCBUQUdfSUQuVEVYVEFSRUFdLFxuICAgIFtUQUdfTkFNRVMuVEZPT1QsIFRBR19JRC5URk9PVF0sXG4gICAgW1RBR19OQU1FUy5URCwgVEFHX0lELlREXSxcbiAgICBbVEFHX05BTUVTLlRILCBUQUdfSUQuVEhdLFxuICAgIFtUQUdfTkFNRVMuVEhFQUQsIFRBR19JRC5USEVBRF0sXG4gICAgW1RBR19OQU1FUy5USVRMRSwgVEFHX0lELlRJVExFXSxcbiAgICBbVEFHX05BTUVTLlRSLCBUQUdfSUQuVFJdLFxuICAgIFtUQUdfTkFNRVMuVFJBQ0ssIFRBR19JRC5UUkFDS10sXG4gICAgW1RBR19OQU1FUy5UVCwgVEFHX0lELlRUXSxcbiAgICBbVEFHX05BTUVTLlUsIFRBR19JRC5VXSxcbiAgICBbVEFHX05BTUVTLlVMLCBUQUdfSUQuVUxdLFxuICAgIFtUQUdfTkFNRVMuU1ZHLCBUQUdfSUQuU1ZHXSxcbiAgICBbVEFHX05BTUVTLlZBUiwgVEFHX0lELlZBUl0sXG4gICAgW1RBR19OQU1FUy5XQlIsIFRBR19JRC5XQlJdLFxuICAgIFtUQUdfTkFNRVMuWE1QLCBUQUdfSUQuWE1QXSxcbl0pO1xuZnVuY3Rpb24gZ2V0VGFnSUQodGFnTmFtZSkge1xuICAgIHZhciBfYTtcbiAgICByZXR1cm4gKF9hID0gVEFHX05BTUVfVE9fSUQuZ2V0KHRhZ05hbWUpKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBUQUdfSUQuVU5LTk9XTjtcbn1cbmV4cG9ydHMuZ2V0VGFnSUQgPSBnZXRUYWdJRDtcbmNvbnN0ICQgPSBUQUdfSUQ7XG5leHBvcnRzLlNQRUNJQUxfRUxFTUVOVFMgPSB7XG4gICAgW05TLkhUTUxdOiBuZXcgU2V0KFtcbiAgICAgICAgJC5BRERSRVNTLFxuICAgICAgICAkLkFQUExFVCxcbiAgICAgICAgJC5BUkVBLFxuICAgICAgICAkLkFSVElDTEUsXG4gICAgICAgICQuQVNJREUsXG4gICAgICAgICQuQkFTRSxcbiAgICAgICAgJC5CQVNFRk9OVCxcbiAgICAgICAgJC5CR1NPVU5ELFxuICAgICAgICAkLkJMT0NLUVVPVEUsXG4gICAgICAgICQuQk9EWSxcbiAgICAgICAgJC5CUixcbiAgICAgICAgJC5CVVRUT04sXG4gICAgICAgICQuQ0FQVElPTixcbiAgICAgICAgJC5DRU5URVIsXG4gICAgICAgICQuQ09MLFxuICAgICAgICAkLkNPTEdST1VQLFxuICAgICAgICAkLkRELFxuICAgICAgICAkLkRFVEFJTFMsXG4gICAgICAgICQuRElSLFxuICAgICAgICAkLkRJVixcbiAgICAgICAgJC5ETCxcbiAgICAgICAgJC5EVCxcbiAgICAgICAgJC5FTUJFRCxcbiAgICAgICAgJC5GSUVMRFNFVCxcbiAgICAgICAgJC5GSUdDQVBUSU9OLFxuICAgICAgICAkLkZJR1VSRSxcbiAgICAgICAgJC5GT09URVIsXG4gICAgICAgICQuRk9STSxcbiAgICAgICAgJC5GUkFNRSxcbiAgICAgICAgJC5GUkFNRVNFVCxcbiAgICAgICAgJC5IMSxcbiAgICAgICAgJC5IMixcbiAgICAgICAgJC5IMyxcbiAgICAgICAgJC5INCxcbiAgICAgICAgJC5INSxcbiAgICAgICAgJC5INixcbiAgICAgICAgJC5IRUFELFxuICAgICAgICAkLkhFQURFUixcbiAgICAgICAgJC5IR1JPVVAsXG4gICAgICAgICQuSFIsXG4gICAgICAgICQuSFRNTCxcbiAgICAgICAgJC5JRlJBTUUsXG4gICAgICAgICQuSU1HLFxuICAgICAgICAkLklOUFVULFxuICAgICAgICAkLkxJLFxuICAgICAgICAkLkxJTkssXG4gICAgICAgICQuTElTVElORyxcbiAgICAgICAgJC5NQUlOLFxuICAgICAgICAkLk1BUlFVRUUsXG4gICAgICAgICQuTUVOVSxcbiAgICAgICAgJC5NRVRBLFxuICAgICAgICAkLk5BVixcbiAgICAgICAgJC5OT0VNQkVELFxuICAgICAgICAkLk5PRlJBTUVTLFxuICAgICAgICAkLk5PU0NSSVBULFxuICAgICAgICAkLk9CSkVDVCxcbiAgICAgICAgJC5PTCxcbiAgICAgICAgJC5QLFxuICAgICAgICAkLlBBUkFNLFxuICAgICAgICAkLlBMQUlOVEVYVCxcbiAgICAgICAgJC5QUkUsXG4gICAgICAgICQuU0NSSVBULFxuICAgICAgICAkLlNFQ1RJT04sXG4gICAgICAgICQuU0VMRUNULFxuICAgICAgICAkLlNPVVJDRSxcbiAgICAgICAgJC5TVFlMRSxcbiAgICAgICAgJC5TVU1NQVJZLFxuICAgICAgICAkLlRBQkxFLFxuICAgICAgICAkLlRCT0RZLFxuICAgICAgICAkLlRELFxuICAgICAgICAkLlRFTVBMQVRFLFxuICAgICAgICAkLlRFWFRBUkVBLFxuICAgICAgICAkLlRGT09ULFxuICAgICAgICAkLlRILFxuICAgICAgICAkLlRIRUFELFxuICAgICAgICAkLlRJVExFLFxuICAgICAgICAkLlRSLFxuICAgICAgICAkLlRSQUNLLFxuICAgICAgICAkLlVMLFxuICAgICAgICAkLldCUixcbiAgICAgICAgJC5YTVAsXG4gICAgXSksXG4gICAgW05TLk1BVEhNTF06IG5ldyBTZXQoWyQuTUksICQuTU8sICQuTU4sICQuTVMsICQuTVRFWFQsICQuQU5OT1RBVElPTl9YTUxdKSxcbiAgICBbTlMuU1ZHXTogbmV3IFNldChbJC5USVRMRSwgJC5GT1JFSUdOX09CSkVDVCwgJC5ERVNDXSksXG4gICAgW05TLlhMSU5LXTogbmV3IFNldCgpLFxuICAgIFtOUy5YTUxdOiBuZXcgU2V0KCksXG4gICAgW05TLlhNTE5TXTogbmV3IFNldCgpLFxufTtcbmZ1bmN0aW9uIGlzTnVtYmVyZWRIZWFkZXIodG4pIHtcbiAgICByZXR1cm4gdG4gPT09ICQuSDEgfHwgdG4gPT09ICQuSDIgfHwgdG4gPT09ICQuSDMgfHwgdG4gPT09ICQuSDQgfHwgdG4gPT09ICQuSDUgfHwgdG4gPT09ICQuSDY7XG59XG5leHBvcnRzLmlzTnVtYmVyZWRIZWFkZXIgPSBpc051bWJlcmVkSGVhZGVyO1xuY29uc3QgVU5FU0NBUEVEX1RFWFQgPSBuZXcgU2V0KFtcbiAgICBUQUdfTkFNRVMuU1RZTEUsXG4gICAgVEFHX05BTUVTLlNDUklQVCxcbiAgICBUQUdfTkFNRVMuWE1QLFxuICAgIFRBR19OQU1FUy5JRlJBTUUsXG4gICAgVEFHX05BTUVTLk5PRU1CRUQsXG4gICAgVEFHX05BTUVTLk5PRlJBTUVTLFxuICAgIFRBR19OQU1FUy5QTEFJTlRFWFQsXG5dKTtcbmZ1bmN0aW9uIGhhc1VuZXNjYXBlZFRleHQodG4sIHNjcmlwdGluZ0VuYWJsZWQpIHtcbiAgICByZXR1cm4gVU5FU0NBUEVEX1RFWFQuaGFzKHRuKSB8fCAoc2NyaXB0aW5nRW5hYmxlZCAmJiB0biA9PT0gVEFHX05BTUVTLk5PU0NSSVBUKTtcbn1cbmV4cG9ydHMuaGFzVW5lc2NhcGVkVGV4dCA9IGhhc1VuZXNjYXBlZFRleHQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1odG1sLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZXRUb2tlbkF0dHIgPSBleHBvcnRzLlRva2VuVHlwZSA9IHZvaWQgMDtcbnZhciBUb2tlblR5cGU7XG4oZnVuY3Rpb24gKFRva2VuVHlwZSkge1xuICAgIFRva2VuVHlwZVtUb2tlblR5cGVbXCJDSEFSQUNURVJcIl0gPSAwXSA9IFwiQ0hBUkFDVEVSXCI7XG4gICAgVG9rZW5UeXBlW1Rva2VuVHlwZVtcIk5VTExfQ0hBUkFDVEVSXCJdID0gMV0gPSBcIk5VTExfQ0hBUkFDVEVSXCI7XG4gICAgVG9rZW5UeXBlW1Rva2VuVHlwZVtcIldISVRFU1BBQ0VfQ0hBUkFDVEVSXCJdID0gMl0gPSBcIldISVRFU1BBQ0VfQ0hBUkFDVEVSXCI7XG4gICAgVG9rZW5UeXBlW1Rva2VuVHlwZVtcIlNUQVJUX1RBR1wiXSA9IDNdID0gXCJTVEFSVF9UQUdcIjtcbiAgICBUb2tlblR5cGVbVG9rZW5UeXBlW1wiRU5EX1RBR1wiXSA9IDRdID0gXCJFTkRfVEFHXCI7XG4gICAgVG9rZW5UeXBlW1Rva2VuVHlwZVtcIkNPTU1FTlRcIl0gPSA1XSA9IFwiQ09NTUVOVFwiO1xuICAgIFRva2VuVHlwZVtUb2tlblR5cGVbXCJET0NUWVBFXCJdID0gNl0gPSBcIkRPQ1RZUEVcIjtcbiAgICBUb2tlblR5cGVbVG9rZW5UeXBlW1wiRU9GXCJdID0gN10gPSBcIkVPRlwiO1xuICAgIFRva2VuVHlwZVtUb2tlblR5cGVbXCJISUJFUk5BVElPTlwiXSA9IDhdID0gXCJISUJFUk5BVElPTlwiO1xufSkoVG9rZW5UeXBlID0gZXhwb3J0cy5Ub2tlblR5cGUgfHwgKGV4cG9ydHMuVG9rZW5UeXBlID0ge30pKTtcbmZ1bmN0aW9uIGdldFRva2VuQXR0cih0b2tlbiwgYXR0ck5hbWUpIHtcbiAgICBmb3IgKGxldCBpID0gdG9rZW4uYXR0cnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgaWYgKHRva2VuLmF0dHJzW2ldLm5hbWUgPT09IGF0dHJOYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gdG9rZW4uYXR0cnNbaV0udmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG5leHBvcnRzLmdldFRva2VuQXR0ciA9IGdldFRva2VuQXR0cjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRva2VuLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5pc1VuZGVmaW5lZENvZGVQb2ludCA9IGV4cG9ydHMuaXNDb250cm9sQ29kZVBvaW50ID0gZXhwb3J0cy5nZXRTdXJyb2dhdGVQYWlyQ29kZVBvaW50ID0gZXhwb3J0cy5pc1N1cnJvZ2F0ZVBhaXIgPSBleHBvcnRzLmlzU3Vycm9nYXRlID0gZXhwb3J0cy5TRVFVRU5DRVMgPSBleHBvcnRzLkNPREVfUE9JTlRTID0gZXhwb3J0cy5SRVBMQUNFTUVOVF9DSEFSQUNURVIgPSB2b2lkIDA7XG5jb25zdCBVTkRFRklORURfQ09ERV9QT0lOVFMgPSBuZXcgU2V0KFtcbiAgICA2NTUzNCwgNjU1MzUsIDEzMTA3MCwgMTMxMDcxLCAxOTY2MDYsIDE5NjYwNywgMjYyMTQyLCAyNjIxNDMsIDMyNzY3OCwgMzI3Njc5LCAzOTMyMTQsXG4gICAgMzkzMjE1LCA0NTg3NTAsIDQ1ODc1MSwgNTI0Mjg2LCA1MjQyODcsIDU4OTgyMiwgNTg5ODIzLCA2NTUzNTgsIDY1NTM1OSwgNzIwODk0LFxuICAgIDcyMDg5NSwgNzg2NDMwLCA3ODY0MzEsIDg1MTk2NiwgODUxOTY3LCA5MTc1MDIsIDkxNzUwMywgOTgzMDM4LCA5ODMwMzksIDEwNDg1NzQsXG4gICAgMTA0ODU3NSwgMTExNDExMCwgMTExNDExMSxcbl0pO1xuZXhwb3J0cy5SRVBMQUNFTUVOVF9DSEFSQUNURVIgPSAnXFx1RkZGRCc7XG52YXIgQ09ERV9QT0lOVFM7XG4oZnVuY3Rpb24gKENPREVfUE9JTlRTKSB7XG4gICAgQ09ERV9QT0lOVFNbQ09ERV9QT0lOVFNbXCJFT0ZcIl0gPSAtMV0gPSBcIkVPRlwiO1xuICAgIENPREVfUE9JTlRTW0NPREVfUE9JTlRTW1wiTlVMTFwiXSA9IDBdID0gXCJOVUxMXCI7XG4gICAgQ09ERV9QT0lOVFNbQ09ERV9QT0lOVFNbXCJUQUJVTEFUSU9OXCJdID0gOV0gPSBcIlRBQlVMQVRJT05cIjtcbiAgICBDT0RFX1BPSU5UU1tDT0RFX1BPSU5UU1tcIkNBUlJJQUdFX1JFVFVSTlwiXSA9IDEzXSA9IFwiQ0FSUklBR0VfUkVUVVJOXCI7XG4gICAgQ09ERV9QT0lOVFNbQ09ERV9QT0lOVFNbXCJMSU5FX0ZFRURcIl0gPSAxMF0gPSBcIkxJTkVfRkVFRFwiO1xuICAgIENPREVfUE9JTlRTW0NPREVfUE9JTlRTW1wiRk9STV9GRUVEXCJdID0gMTJdID0gXCJGT1JNX0ZFRURcIjtcbiAgICBDT0RFX1BPSU5UU1tDT0RFX1BPSU5UU1tcIlNQQUNFXCJdID0gMzJdID0gXCJTUEFDRVwiO1xuICAgIENPREVfUE9JTlRTW0NPREVfUE9JTlRTW1wiRVhDTEFNQVRJT05fTUFSS1wiXSA9IDMzXSA9IFwiRVhDTEFNQVRJT05fTUFSS1wiO1xuICAgIENPREVfUE9JTlRTW0NPREVfUE9JTlRTW1wiUVVPVEFUSU9OX01BUktcIl0gPSAzNF0gPSBcIlFVT1RBVElPTl9NQVJLXCI7XG4gICAgQ09ERV9QT0lOVFNbQ09ERV9QT0lOVFNbXCJOVU1CRVJfU0lHTlwiXSA9IDM1XSA9IFwiTlVNQkVSX1NJR05cIjtcbiAgICBDT0RFX1BPSU5UU1tDT0RFX1BPSU5UU1tcIkFNUEVSU0FORFwiXSA9IDM4XSA9IFwiQU1QRVJTQU5EXCI7XG4gICAgQ09ERV9QT0lOVFNbQ09ERV9QT0lOVFNbXCJBUE9TVFJPUEhFXCJdID0gMzldID0gXCJBUE9TVFJPUEhFXCI7XG4gICAgQ09ERV9QT0lOVFNbQ09ERV9QT0lOVFNbXCJIWVBIRU5fTUlOVVNcIl0gPSA0NV0gPSBcIkhZUEhFTl9NSU5VU1wiO1xuICAgIENPREVfUE9JTlRTW0NPREVfUE9JTlRTW1wiU09MSURVU1wiXSA9IDQ3XSA9IFwiU09MSURVU1wiO1xuICAgIENPREVfUE9JTlRTW0NPREVfUE9JTlRTW1wiRElHSVRfMFwiXSA9IDQ4XSA9IFwiRElHSVRfMFwiO1xuICAgIENPREVfUE9JTlRTW0NPREVfUE9JTlRTW1wiRElHSVRfOVwiXSA9IDU3XSA9IFwiRElHSVRfOVwiO1xuICAgIENPREVfUE9JTlRTW0NPREVfUE9JTlRTW1wiU0VNSUNPTE9OXCJdID0gNTldID0gXCJTRU1JQ09MT05cIjtcbiAgICBDT0RFX1BPSU5UU1tDT0RFX1BPSU5UU1tcIkxFU1NfVEhBTl9TSUdOXCJdID0gNjBdID0gXCJMRVNTX1RIQU5fU0lHTlwiO1xuICAgIENPREVfUE9JTlRTW0NPREVfUE9JTlRTW1wiRVFVQUxTX1NJR05cIl0gPSA2MV0gPSBcIkVRVUFMU19TSUdOXCI7XG4gICAgQ09ERV9QT0lOVFNbQ09ERV9QT0lOVFNbXCJHUkVBVEVSX1RIQU5fU0lHTlwiXSA9IDYyXSA9IFwiR1JFQVRFUl9USEFOX1NJR05cIjtcbiAgICBDT0RFX1BPSU5UU1tDT0RFX1BPSU5UU1tcIlFVRVNUSU9OX01BUktcIl0gPSA2M10gPSBcIlFVRVNUSU9OX01BUktcIjtcbiAgICBDT0RFX1BPSU5UU1tDT0RFX1BPSU5UU1tcIkxBVElOX0NBUElUQUxfQVwiXSA9IDY1XSA9IFwiTEFUSU5fQ0FQSVRBTF9BXCI7XG4gICAgQ09ERV9QT0lOVFNbQ09ERV9QT0lOVFNbXCJMQVRJTl9DQVBJVEFMX0ZcIl0gPSA3MF0gPSBcIkxBVElOX0NBUElUQUxfRlwiO1xuICAgIENPREVfUE9JTlRTW0NPREVfUE9JTlRTW1wiTEFUSU5fQ0FQSVRBTF9YXCJdID0gODhdID0gXCJMQVRJTl9DQVBJVEFMX1hcIjtcbiAgICBDT0RFX1BPSU5UU1tDT0RFX1BPSU5UU1tcIkxBVElOX0NBUElUQUxfWlwiXSA9IDkwXSA9IFwiTEFUSU5fQ0FQSVRBTF9aXCI7XG4gICAgQ09ERV9QT0lOVFNbQ09ERV9QT0lOVFNbXCJSSUdIVF9TUVVBUkVfQlJBQ0tFVFwiXSA9IDkzXSA9IFwiUklHSFRfU1FVQVJFX0JSQUNLRVRcIjtcbiAgICBDT0RFX1BPSU5UU1tDT0RFX1BPSU5UU1tcIkdSQVZFX0FDQ0VOVFwiXSA9IDk2XSA9IFwiR1JBVkVfQUNDRU5UXCI7XG4gICAgQ09ERV9QT0lOVFNbQ09ERV9QT0lOVFNbXCJMQVRJTl9TTUFMTF9BXCJdID0gOTddID0gXCJMQVRJTl9TTUFMTF9BXCI7XG4gICAgQ09ERV9QT0lOVFNbQ09ERV9QT0lOVFNbXCJMQVRJTl9TTUFMTF9GXCJdID0gMTAyXSA9IFwiTEFUSU5fU01BTExfRlwiO1xuICAgIENPREVfUE9JTlRTW0NPREVfUE9JTlRTW1wiTEFUSU5fU01BTExfWFwiXSA9IDEyMF0gPSBcIkxBVElOX1NNQUxMX1hcIjtcbiAgICBDT0RFX1BPSU5UU1tDT0RFX1BPSU5UU1tcIkxBVElOX1NNQUxMX1pcIl0gPSAxMjJdID0gXCJMQVRJTl9TTUFMTF9aXCI7XG4gICAgQ09ERV9QT0lOVFNbQ09ERV9QT0lOVFNbXCJSRVBMQUNFTUVOVF9DSEFSQUNURVJcIl0gPSA2NTUzM10gPSBcIlJFUExBQ0VNRU5UX0NIQVJBQ1RFUlwiO1xufSkoQ09ERV9QT0lOVFMgPSBleHBvcnRzLkNPREVfUE9JTlRTIHx8IChleHBvcnRzLkNPREVfUE9JTlRTID0ge30pKTtcbmV4cG9ydHMuU0VRVUVOQ0VTID0ge1xuICAgIERBU0hfREFTSDogJy0tJyxcbiAgICBDREFUQV9TVEFSVDogJ1tDREFUQVsnLFxuICAgIERPQ1RZUEU6ICdkb2N0eXBlJyxcbiAgICBTQ1JJUFQ6ICdzY3JpcHQnLFxuICAgIFBVQkxJQzogJ3B1YmxpYycsXG4gICAgU1lTVEVNOiAnc3lzdGVtJyxcbn07XG4vL1N1cnJvZ2F0ZXNcbmZ1bmN0aW9uIGlzU3Vycm9nYXRlKGNwKSB7XG4gICAgcmV0dXJuIGNwID49IDU1Mjk2ICYmIGNwIDw9IDU3MzQzO1xufVxuZXhwb3J0cy5pc1N1cnJvZ2F0ZSA9IGlzU3Vycm9nYXRlO1xuZnVuY3Rpb24gaXNTdXJyb2dhdGVQYWlyKGNwKSB7XG4gICAgcmV0dXJuIGNwID49IDU2MzIwICYmIGNwIDw9IDU3MzQzO1xufVxuZXhwb3J0cy5pc1N1cnJvZ2F0ZVBhaXIgPSBpc1N1cnJvZ2F0ZVBhaXI7XG5mdW5jdGlvbiBnZXRTdXJyb2dhdGVQYWlyQ29kZVBvaW50KGNwMSwgY3AyKSB7XG4gICAgcmV0dXJuIChjcDEgLSA1NTI5NikgKiAxMDI0ICsgOTIxNiArIGNwMjtcbn1cbmV4cG9ydHMuZ2V0U3Vycm9nYXRlUGFpckNvZGVQb2ludCA9IGdldFN1cnJvZ2F0ZVBhaXJDb2RlUG9pbnQ7XG4vL05PVEU6IGV4Y2x1ZGluZyBOVUxMIGFuZCBBU0NJSSB3aGl0ZXNwYWNlXG5mdW5jdGlvbiBpc0NvbnRyb2xDb2RlUG9pbnQoY3ApIHtcbiAgICByZXR1cm4gKChjcCAhPT0gMHgyMCAmJiBjcCAhPT0gMHgwYSAmJiBjcCAhPT0gMHgwZCAmJiBjcCAhPT0gMHgwOSAmJiBjcCAhPT0gMHgwYyAmJiBjcCA+PSAweDAxICYmIGNwIDw9IDB4MWYpIHx8XG4gICAgICAgIChjcCA+PSAweDdmICYmIGNwIDw9IDB4OWYpKTtcbn1cbmV4cG9ydHMuaXNDb250cm9sQ29kZVBvaW50ID0gaXNDb250cm9sQ29kZVBvaW50O1xuZnVuY3Rpb24gaXNVbmRlZmluZWRDb2RlUG9pbnQoY3ApIHtcbiAgICByZXR1cm4gKGNwID49IDY0OTc2ICYmIGNwIDw9IDY1MDA3KSB8fCBVTkRFRklORURfQ09ERV9QT0lOVFMuaGFzKGNwKTtcbn1cbmV4cG9ydHMuaXNVbmRlZmluZWRDb2RlUG9pbnQgPSBpc1VuZGVmaW5lZENvZGVQb2ludDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVuaWNvZGUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnBhcnNlRnJhZ21lbnQgPSBleHBvcnRzLnBhcnNlID0gZXhwb3J0cy5Ub2tlbml6ZXJNb2RlID0gZXhwb3J0cy5Ub2tlbml6ZXIgPSBleHBvcnRzLlRva2VuID0gZXhwb3J0cy5odG1sID0gZXhwb3J0cy5mb3JlaWduQ29udGVudCA9IGV4cG9ydHMuRXJyb3JDb2RlcyA9IGV4cG9ydHMuc2VyaWFsaXplT3V0ZXIgPSBleHBvcnRzLnNlcmlhbGl6ZSA9IGV4cG9ydHMuUGFyc2VyID0gZXhwb3J0cy5kZWZhdWx0VHJlZUFkYXB0ZXIgPSB2b2lkIDA7XG5jb25zdCBpbmRleF9qc18xID0gcmVxdWlyZShcIi4vcGFyc2VyL2luZGV4LmpzXCIpO1xudmFyIGRlZmF1bHRfanNfMSA9IHJlcXVpcmUoXCIuL3RyZWUtYWRhcHRlcnMvZGVmYXVsdC5qc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRUcmVlQWRhcHRlclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZGVmYXVsdF9qc18xLmRlZmF1bHRUcmVlQWRhcHRlcjsgfSB9KTtcbnZhciBpbmRleF9qc18yID0gcmVxdWlyZShcIi4vcGFyc2VyL2luZGV4LmpzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiUGFyc2VyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBpbmRleF9qc18yLlBhcnNlcjsgfSB9KTtcbnZhciBpbmRleF9qc18zID0gcmVxdWlyZShcIi4vc2VyaWFsaXplci9pbmRleC5qc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInNlcmlhbGl6ZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gaW5kZXhfanNfMy5zZXJpYWxpemU7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJzZXJpYWxpemVPdXRlclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gaW5kZXhfanNfMy5zZXJpYWxpemVPdXRlcjsgfSB9KTtcbnZhciBlcnJvcl9jb2Rlc19qc18xID0gcmVxdWlyZShcIi4vY29tbW9uL2Vycm9yLWNvZGVzLmpzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRXJyb3JDb2Rlc1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZXJyb3JfY29kZXNfanNfMS5FUlI7IH0gfSk7XG4vKiogQGludGVybmFsICovXG5leHBvcnRzLmZvcmVpZ25Db250ZW50ID0gcmVxdWlyZShcIi4vY29tbW9uL2ZvcmVpZ24tY29udGVudC5qc1wiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydHMuaHRtbCA9IHJlcXVpcmUoXCIuL2NvbW1vbi9odG1sLmpzXCIpO1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0cy5Ub2tlbiA9IHJlcXVpcmUoXCIuL2NvbW1vbi90b2tlbi5qc1wiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbnZhciBpbmRleF9qc180ID0gcmVxdWlyZShcIi4vdG9rZW5pemVyL2luZGV4LmpzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVG9rZW5pemVyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBpbmRleF9qc180LlRva2VuaXplcjsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlRva2VuaXplck1vZGVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGluZGV4X2pzXzQuVG9rZW5pemVyTW9kZTsgfSB9KTtcbi8vIFNob3J0aGFuZHNcbi8qKlxuICogUGFyc2VzIGFuIEhUTUwgc3RyaW5nLlxuICpcbiAqIEBwYXJhbSBodG1sIElucHV0IEhUTUwgc3RyaW5nLlxuICogQHBhcmFtIG9wdGlvbnMgUGFyc2luZyBvcHRpb25zLlxuICogQHJldHVybnMgRG9jdW1lbnRcbiAqXG4gKiBAZXhhbXBsZVxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBwYXJzZTUgPSByZXF1aXJlKCdwYXJzZTUnKTtcbiAqXG4gKiBjb25zdCBkb2N1bWVudCA9IHBhcnNlNS5wYXJzZSgnPCFET0NUWVBFIGh0bWw+PGh0bWw+PGhlYWQ+PC9oZWFkPjxib2R5PkhpIHRoZXJlITwvYm9keT48L2h0bWw+Jyk7XG4gKlxuICogY29uc29sZS5sb2coZG9jdW1lbnQuY2hpbGROb2Rlc1sxXS50YWdOYW1lKTsgLy8+ICdodG1sJ1xuICpgYGBcbiAqL1xuZnVuY3Rpb24gcGFyc2UoaHRtbCwgb3B0aW9ucykge1xuICAgIHJldHVybiBpbmRleF9qc18xLlBhcnNlci5wYXJzZShodG1sLCBvcHRpb25zKTtcbn1cbmV4cG9ydHMucGFyc2UgPSBwYXJzZTtcbmZ1bmN0aW9uIHBhcnNlRnJhZ21lbnQoZnJhZ21lbnRDb250ZXh0LCBodG1sLCBvcHRpb25zKSB7XG4gICAgaWYgKHR5cGVvZiBmcmFnbWVudENvbnRleHQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIG9wdGlvbnMgPSBodG1sO1xuICAgICAgICBodG1sID0gZnJhZ21lbnRDb250ZXh0O1xuICAgICAgICBmcmFnbWVudENvbnRleHQgPSBudWxsO1xuICAgIH1cbiAgICBjb25zdCBwYXJzZXIgPSBpbmRleF9qc18xLlBhcnNlci5nZXRGcmFnbWVudFBhcnNlcihmcmFnbWVudENvbnRleHQsIG9wdGlvbnMpO1xuICAgIHBhcnNlci50b2tlbml6ZXIud3JpdGUoaHRtbCwgdHJ1ZSk7XG4gICAgcmV0dXJuIHBhcnNlci5nZXRGcmFnbWVudCgpO1xufVxuZXhwb3J0cy5wYXJzZUZyYWdtZW50ID0gcGFyc2VGcmFnbWVudDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Gb3JtYXR0aW5nRWxlbWVudExpc3QgPSBleHBvcnRzLkVudHJ5VHlwZSA9IHZvaWQgMDtcbi8vQ29uc3RcbmNvbnN0IE5PQUhfQVJLX0NBUEFDSVRZID0gMztcbnZhciBFbnRyeVR5cGU7XG4oZnVuY3Rpb24gKEVudHJ5VHlwZSkge1xuICAgIEVudHJ5VHlwZVtFbnRyeVR5cGVbXCJNYXJrZXJcIl0gPSAwXSA9IFwiTWFya2VyXCI7XG4gICAgRW50cnlUeXBlW0VudHJ5VHlwZVtcIkVsZW1lbnRcIl0gPSAxXSA9IFwiRWxlbWVudFwiO1xufSkoRW50cnlUeXBlID0gZXhwb3J0cy5FbnRyeVR5cGUgfHwgKGV4cG9ydHMuRW50cnlUeXBlID0ge30pKTtcbmNvbnN0IE1BUktFUiA9IHsgdHlwZTogRW50cnlUeXBlLk1hcmtlciB9O1xuLy9MaXN0IG9mIGZvcm1hdHRpbmcgZWxlbWVudHNcbmNsYXNzIEZvcm1hdHRpbmdFbGVtZW50TGlzdCB7XG4gICAgY29uc3RydWN0b3IodHJlZUFkYXB0ZXIpIHtcbiAgICAgICAgdGhpcy50cmVlQWRhcHRlciA9IHRyZWVBZGFwdGVyO1xuICAgICAgICB0aGlzLmVudHJpZXMgPSBbXTtcbiAgICAgICAgdGhpcy5ib29rbWFyayA9IG51bGw7XG4gICAgfVxuICAgIC8vTm9haCBBcmsncyBjb25kaXRpb25cbiAgICAvL09QVElNSVpBVElPTjogYXQgZmlyc3Qgd2UgdHJ5IHRvIGZpbmQgcG9zc2libGUgY2FuZGlkYXRlcyBmb3IgZXhjbHVzaW9uIHVzaW5nXG4gICAgLy9saWdodHdlaWdodCBoZXVyaXN0aWNzIHdpdGhvdXQgdGhvcm91Z2ggYXR0cmlidXRlcyBjaGVjay5cbiAgICBfZ2V0Tm9haEFya0NvbmRpdGlvbkNhbmRpZGF0ZXMobmV3RWxlbWVudCwgbmVBdHRycykge1xuICAgICAgICBjb25zdCBjYW5kaWRhdGVzID0gW107XG4gICAgICAgIGNvbnN0IG5lQXR0cnNMZW5ndGggPSBuZUF0dHJzLmxlbmd0aDtcbiAgICAgICAgY29uc3QgbmVUYWdOYW1lID0gdGhpcy50cmVlQWRhcHRlci5nZXRUYWdOYW1lKG5ld0VsZW1lbnQpO1xuICAgICAgICBjb25zdCBuZU5hbWVzcGFjZVVSSSA9IHRoaXMudHJlZUFkYXB0ZXIuZ2V0TmFtZXNwYWNlVVJJKG5ld0VsZW1lbnQpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZW50cmllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgZW50cnkgPSB0aGlzLmVudHJpZXNbaV07XG4gICAgICAgICAgICBpZiAoZW50cnkudHlwZSA9PT0gRW50cnlUeXBlLk1hcmtlcikge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgeyBlbGVtZW50IH0gPSBlbnRyeTtcbiAgICAgICAgICAgIGlmICh0aGlzLnRyZWVBZGFwdGVyLmdldFRhZ05hbWUoZWxlbWVudCkgPT09IG5lVGFnTmFtZSAmJlxuICAgICAgICAgICAgICAgIHRoaXMudHJlZUFkYXB0ZXIuZ2V0TmFtZXNwYWNlVVJJKGVsZW1lbnQpID09PSBuZU5hbWVzcGFjZVVSSSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGVsZW1lbnRBdHRycyA9IHRoaXMudHJlZUFkYXB0ZXIuZ2V0QXR0ckxpc3QoZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgaWYgKGVsZW1lbnRBdHRycy5sZW5ndGggPT09IG5lQXR0cnNMZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FuZGlkYXRlcy5wdXNoKHsgaWR4OiBpLCBhdHRyczogZWxlbWVudEF0dHJzIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2FuZGlkYXRlcztcbiAgICB9XG4gICAgX2Vuc3VyZU5vYWhBcmtDb25kaXRpb24obmV3RWxlbWVudCkge1xuICAgICAgICBpZiAodGhpcy5lbnRyaWVzLmxlbmd0aCA8IE5PQUhfQVJLX0NBUEFDSVRZKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjb25zdCBuZUF0dHJzID0gdGhpcy50cmVlQWRhcHRlci5nZXRBdHRyTGlzdChuZXdFbGVtZW50KTtcbiAgICAgICAgY29uc3QgY2FuZGlkYXRlcyA9IHRoaXMuX2dldE5vYWhBcmtDb25kaXRpb25DYW5kaWRhdGVzKG5ld0VsZW1lbnQsIG5lQXR0cnMpO1xuICAgICAgICBpZiAoY2FuZGlkYXRlcy5sZW5ndGggPCBOT0FIX0FSS19DQVBBQ0lUWSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgLy9OT1RFOiBidWlsZCBhdHRycyBtYXAgZm9yIHRoZSBuZXcgZWxlbWVudCwgc28gd2UgY2FuIHBlcmZvcm0gZmFzdCBsb29rdXBzXG4gICAgICAgIGNvbnN0IG5lQXR0cnNNYXAgPSBuZXcgTWFwKG5lQXR0cnMubWFwKChuZUF0dHIpID0+IFtuZUF0dHIubmFtZSwgbmVBdHRyLnZhbHVlXSkpO1xuICAgICAgICBsZXQgdmFsaWRDYW5kaWRhdGVzID0gMDtcbiAgICAgICAgLy9OT1RFOiByZW1vdmUgYm90dG9tbW9zdCBjYW5kaWRhdGVzLCB1bnRpbCBOb2FoJ3MgQXJrIGNvbmRpdGlvbiB3aWxsIG5vdCBiZSBtZXRcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjYW5kaWRhdGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBjYW5kaWRhdGUgPSBjYW5kaWRhdGVzW2ldO1xuICAgICAgICAgICAgLy8gV2Uga25vdyB0aGF0IGBjYW5kaWRhdGUuYXR0cnMubGVuZ3RoID09PSBuZUF0dHJzLmxlbmd0aGBcbiAgICAgICAgICAgIGlmIChjYW5kaWRhdGUuYXR0cnMuZXZlcnkoKGNBdHRyKSA9PiBuZUF0dHJzTWFwLmdldChjQXR0ci5uYW1lKSA9PT0gY0F0dHIudmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgdmFsaWRDYW5kaWRhdGVzICs9IDE7XG4gICAgICAgICAgICAgICAgaWYgKHZhbGlkQ2FuZGlkYXRlcyA+PSBOT0FIX0FSS19DQVBBQ0lUWSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVudHJpZXMuc3BsaWNlKGNhbmRpZGF0ZS5pZHgsIDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvL011dGF0aW9uc1xuICAgIGluc2VydE1hcmtlcigpIHtcbiAgICAgICAgdGhpcy5lbnRyaWVzLnVuc2hpZnQoTUFSS0VSKTtcbiAgICB9XG4gICAgcHVzaEVsZW1lbnQoZWxlbWVudCwgdG9rZW4pIHtcbiAgICAgICAgdGhpcy5fZW5zdXJlTm9haEFya0NvbmRpdGlvbihlbGVtZW50KTtcbiAgICAgICAgdGhpcy5lbnRyaWVzLnVuc2hpZnQoe1xuICAgICAgICAgICAgdHlwZTogRW50cnlUeXBlLkVsZW1lbnQsXG4gICAgICAgICAgICBlbGVtZW50LFxuICAgICAgICAgICAgdG9rZW4sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpbnNlcnRFbGVtZW50QWZ0ZXJCb29rbWFyayhlbGVtZW50LCB0b2tlbikge1xuICAgICAgICBjb25zdCBib29rbWFya0lkeCA9IHRoaXMuZW50cmllcy5pbmRleE9mKHRoaXMuYm9va21hcmspO1xuICAgICAgICB0aGlzLmVudHJpZXMuc3BsaWNlKGJvb2ttYXJrSWR4LCAwLCB7XG4gICAgICAgICAgICB0eXBlOiBFbnRyeVR5cGUuRWxlbWVudCxcbiAgICAgICAgICAgIGVsZW1lbnQsXG4gICAgICAgICAgICB0b2tlbixcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJlbW92ZUVudHJ5KGVudHJ5KSB7XG4gICAgICAgIGNvbnN0IGVudHJ5SW5kZXggPSB0aGlzLmVudHJpZXMuaW5kZXhPZihlbnRyeSk7XG4gICAgICAgIGlmIChlbnRyeUluZGV4ID49IDApIHtcbiAgICAgICAgICAgIHRoaXMuZW50cmllcy5zcGxpY2UoZW50cnlJbmRleCwgMSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2xlYXJzIHRoZSBsaXN0IG9mIGZvcm1hdHRpbmcgZWxlbWVudHMgdXAgdG8gdGhlIGxhc3QgbWFya2VyLlxuICAgICAqXG4gICAgICogQHNlZSBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9wYXJzaW5nLmh0bWwjY2xlYXItdGhlLWxpc3Qtb2YtYWN0aXZlLWZvcm1hdHRpbmctZWxlbWVudHMtdXAtdG8tdGhlLWxhc3QtbWFya2VyXG4gICAgICovXG4gICAgY2xlYXJUb0xhc3RNYXJrZXIoKSB7XG4gICAgICAgIGNvbnN0IG1hcmtlcklkeCA9IHRoaXMuZW50cmllcy5pbmRleE9mKE1BUktFUik7XG4gICAgICAgIGlmIChtYXJrZXJJZHggPj0gMCkge1xuICAgICAgICAgICAgdGhpcy5lbnRyaWVzLnNwbGljZSgwLCBtYXJrZXJJZHggKyAxKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZW50cmllcy5sZW5ndGggPSAwO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vU2VhcmNoXG4gICAgZ2V0RWxlbWVudEVudHJ5SW5TY29wZVdpdGhUYWdOYW1lKHRhZ05hbWUpIHtcbiAgICAgICAgY29uc3QgZW50cnkgPSB0aGlzLmVudHJpZXMuZmluZCgoZW50cnkpID0+IGVudHJ5LnR5cGUgPT09IEVudHJ5VHlwZS5NYXJrZXIgfHwgdGhpcy50cmVlQWRhcHRlci5nZXRUYWdOYW1lKGVudHJ5LmVsZW1lbnQpID09PSB0YWdOYW1lKTtcbiAgICAgICAgcmV0dXJuIGVudHJ5ICYmIGVudHJ5LnR5cGUgPT09IEVudHJ5VHlwZS5FbGVtZW50ID8gZW50cnkgOiBudWxsO1xuICAgIH1cbiAgICBnZXRFbGVtZW50RW50cnkoZWxlbWVudCkge1xuICAgICAgICByZXR1cm4gdGhpcy5lbnRyaWVzLmZpbmQoKGVudHJ5KSA9PiBlbnRyeS50eXBlID09PSBFbnRyeVR5cGUuRWxlbWVudCAmJiBlbnRyeS5lbGVtZW50ID09PSBlbGVtZW50KTtcbiAgICB9XG59XG5leHBvcnRzLkZvcm1hdHRpbmdFbGVtZW50TGlzdCA9IEZvcm1hdHRpbmdFbGVtZW50TGlzdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZvcm1hdHRpbmctZWxlbWVudC1saXN0LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5QYXJzZXIgPSB2b2lkIDA7XG5jb25zdCBpbmRleF9qc18xID0gcmVxdWlyZShcIi4uL3Rva2VuaXplci9pbmRleC5qc1wiKTtcbmNvbnN0IG9wZW5fZWxlbWVudF9zdGFja19qc18xID0gcmVxdWlyZShcIi4vb3Blbi1lbGVtZW50LXN0YWNrLmpzXCIpO1xuY29uc3QgZm9ybWF0dGluZ19lbGVtZW50X2xpc3RfanNfMSA9IHJlcXVpcmUoXCIuL2Zvcm1hdHRpbmctZWxlbWVudC1saXN0LmpzXCIpO1xuY29uc3QgZGVmYXVsdF9qc18xID0gcmVxdWlyZShcIi4uL3RyZWUtYWRhcHRlcnMvZGVmYXVsdC5qc1wiKTtcbmNvbnN0IGRvY3R5cGUgPSByZXF1aXJlKFwiLi4vY29tbW9uL2RvY3R5cGUuanNcIik7XG5jb25zdCBmb3JlaWduQ29udGVudCA9IHJlcXVpcmUoXCIuLi9jb21tb24vZm9yZWlnbi1jb250ZW50LmpzXCIpO1xuY29uc3QgZXJyb3JfY29kZXNfanNfMSA9IHJlcXVpcmUoXCIuLi9jb21tb24vZXJyb3ItY29kZXMuanNcIik7XG5jb25zdCB1bmljb2RlID0gcmVxdWlyZShcIi4uL2NvbW1vbi91bmljb2RlLmpzXCIpO1xuY29uc3QgaHRtbF9qc18xID0gcmVxdWlyZShcIi4uL2NvbW1vbi9odG1sLmpzXCIpO1xuY29uc3QgdG9rZW5fanNfMSA9IHJlcXVpcmUoXCIuLi9jb21tb24vdG9rZW4uanNcIik7XG4vL01pc2MgY29uc3RhbnRzXG5jb25zdCBISURERU5fSU5QVVRfVFlQRSA9ICdoaWRkZW4nO1xuLy9BZG9wdGlvbiBhZ2VuY3kgbG9vcHMgaXRlcmF0aW9uIGNvdW50XG5jb25zdCBBQV9PVVRFUl9MT09QX0lURVIgPSA4O1xuY29uc3QgQUFfSU5ORVJfTE9PUF9JVEVSID0gMztcbi8vSW5zZXJ0aW9uIG1vZGVzXG52YXIgSW5zZXJ0aW9uTW9kZTtcbihmdW5jdGlvbiAoSW5zZXJ0aW9uTW9kZSkge1xuICAgIEluc2VydGlvbk1vZGVbSW5zZXJ0aW9uTW9kZVtcIklOSVRJQUxcIl0gPSAwXSA9IFwiSU5JVElBTFwiO1xuICAgIEluc2VydGlvbk1vZGVbSW5zZXJ0aW9uTW9kZVtcIkJFRk9SRV9IVE1MXCJdID0gMV0gPSBcIkJFRk9SRV9IVE1MXCI7XG4gICAgSW5zZXJ0aW9uTW9kZVtJbnNlcnRpb25Nb2RlW1wiQkVGT1JFX0hFQURcIl0gPSAyXSA9IFwiQkVGT1JFX0hFQURcIjtcbiAgICBJbnNlcnRpb25Nb2RlW0luc2VydGlvbk1vZGVbXCJJTl9IRUFEXCJdID0gM10gPSBcIklOX0hFQURcIjtcbiAgICBJbnNlcnRpb25Nb2RlW0luc2VydGlvbk1vZGVbXCJJTl9IRUFEX05PX1NDUklQVFwiXSA9IDRdID0gXCJJTl9IRUFEX05PX1NDUklQVFwiO1xuICAgIEluc2VydGlvbk1vZGVbSW5zZXJ0aW9uTW9kZVtcIkFGVEVSX0hFQURcIl0gPSA1XSA9IFwiQUZURVJfSEVBRFwiO1xuICAgIEluc2VydGlvbk1vZGVbSW5zZXJ0aW9uTW9kZVtcIklOX0JPRFlcIl0gPSA2XSA9IFwiSU5fQk9EWVwiO1xuICAgIEluc2VydGlvbk1vZGVbSW5zZXJ0aW9uTW9kZVtcIlRFWFRcIl0gPSA3XSA9IFwiVEVYVFwiO1xuICAgIEluc2VydGlvbk1vZGVbSW5zZXJ0aW9uTW9kZVtcIklOX1RBQkxFXCJdID0gOF0gPSBcIklOX1RBQkxFXCI7XG4gICAgSW5zZXJ0aW9uTW9kZVtJbnNlcnRpb25Nb2RlW1wiSU5fVEFCTEVfVEVYVFwiXSA9IDldID0gXCJJTl9UQUJMRV9URVhUXCI7XG4gICAgSW5zZXJ0aW9uTW9kZVtJbnNlcnRpb25Nb2RlW1wiSU5fQ0FQVElPTlwiXSA9IDEwXSA9IFwiSU5fQ0FQVElPTlwiO1xuICAgIEluc2VydGlvbk1vZGVbSW5zZXJ0aW9uTW9kZVtcIklOX0NPTFVNTl9HUk9VUFwiXSA9IDExXSA9IFwiSU5fQ09MVU1OX0dST1VQXCI7XG4gICAgSW5zZXJ0aW9uTW9kZVtJbnNlcnRpb25Nb2RlW1wiSU5fVEFCTEVfQk9EWVwiXSA9IDEyXSA9IFwiSU5fVEFCTEVfQk9EWVwiO1xuICAgIEluc2VydGlvbk1vZGVbSW5zZXJ0aW9uTW9kZVtcIklOX1JPV1wiXSA9IDEzXSA9IFwiSU5fUk9XXCI7XG4gICAgSW5zZXJ0aW9uTW9kZVtJbnNlcnRpb25Nb2RlW1wiSU5fQ0VMTFwiXSA9IDE0XSA9IFwiSU5fQ0VMTFwiO1xuICAgIEluc2VydGlvbk1vZGVbSW5zZXJ0aW9uTW9kZVtcIklOX1NFTEVDVFwiXSA9IDE1XSA9IFwiSU5fU0VMRUNUXCI7XG4gICAgSW5zZXJ0aW9uTW9kZVtJbnNlcnRpb25Nb2RlW1wiSU5fU0VMRUNUX0lOX1RBQkxFXCJdID0gMTZdID0gXCJJTl9TRUxFQ1RfSU5fVEFCTEVcIjtcbiAgICBJbnNlcnRpb25Nb2RlW0luc2VydGlvbk1vZGVbXCJJTl9URU1QTEFURVwiXSA9IDE3XSA9IFwiSU5fVEVNUExBVEVcIjtcbiAgICBJbnNlcnRpb25Nb2RlW0luc2VydGlvbk1vZGVbXCJBRlRFUl9CT0RZXCJdID0gMThdID0gXCJBRlRFUl9CT0RZXCI7XG4gICAgSW5zZXJ0aW9uTW9kZVtJbnNlcnRpb25Nb2RlW1wiSU5fRlJBTUVTRVRcIl0gPSAxOV0gPSBcIklOX0ZSQU1FU0VUXCI7XG4gICAgSW5zZXJ0aW9uTW9kZVtJbnNlcnRpb25Nb2RlW1wiQUZURVJfRlJBTUVTRVRcIl0gPSAyMF0gPSBcIkFGVEVSX0ZSQU1FU0VUXCI7XG4gICAgSW5zZXJ0aW9uTW9kZVtJbnNlcnRpb25Nb2RlW1wiQUZURVJfQUZURVJfQk9EWVwiXSA9IDIxXSA9IFwiQUZURVJfQUZURVJfQk9EWVwiO1xuICAgIEluc2VydGlvbk1vZGVbSW5zZXJ0aW9uTW9kZVtcIkFGVEVSX0FGVEVSX0ZSQU1FU0VUXCJdID0gMjJdID0gXCJBRlRFUl9BRlRFUl9GUkFNRVNFVFwiO1xufSkoSW5zZXJ0aW9uTW9kZSB8fCAoSW5zZXJ0aW9uTW9kZSA9IHt9KSk7XG5jb25zdCBCQVNFX0xPQyA9IHtcbiAgICBzdGFydExpbmU6IC0xLFxuICAgIHN0YXJ0Q29sOiAtMSxcbiAgICBzdGFydE9mZnNldDogLTEsXG4gICAgZW5kTGluZTogLTEsXG4gICAgZW5kQ29sOiAtMSxcbiAgICBlbmRPZmZzZXQ6IC0xLFxufTtcbmNvbnN0IFRBQkxFX1NUUlVDVFVSRV9UQUdTID0gbmV3IFNldChbaHRtbF9qc18xLlRBR19JRC5UQUJMRSwgaHRtbF9qc18xLlRBR19JRC5UQk9EWSwgaHRtbF9qc18xLlRBR19JRC5URk9PVCwgaHRtbF9qc18xLlRBR19JRC5USEVBRCwgaHRtbF9qc18xLlRBR19JRC5UUl0pO1xuY29uc3QgZGVmYXVsdFBhcnNlck9wdGlvbnMgPSB7XG4gICAgc2NyaXB0aW5nRW5hYmxlZDogdHJ1ZSxcbiAgICBzb3VyY2VDb2RlTG9jYXRpb25JbmZvOiBmYWxzZSxcbiAgICB0cmVlQWRhcHRlcjogZGVmYXVsdF9qc18xLmRlZmF1bHRUcmVlQWRhcHRlcixcbiAgICBvblBhcnNlRXJyb3I6IG51bGwsXG59O1xuLy9QYXJzZXJcbmNsYXNzIFBhcnNlciB7XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucywgZG9jdW1lbnQsIGZyYWdtZW50Q29udGV4dCA9IG51bGwsIHNjcmlwdEhhbmRsZXIgPSBudWxsKSB7XG4gICAgICAgIHRoaXMuZnJhZ21lbnRDb250ZXh0ID0gZnJhZ21lbnRDb250ZXh0O1xuICAgICAgICB0aGlzLnNjcmlwdEhhbmRsZXIgPSBzY3JpcHRIYW5kbGVyO1xuICAgICAgICB0aGlzLmN1cnJlbnRUb2tlbiA9IG51bGw7XG4gICAgICAgIHRoaXMuc3RvcHBlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmluc2VydGlvbk1vZGUgPSBJbnNlcnRpb25Nb2RlLklOSVRJQUw7XG4gICAgICAgIHRoaXMub3JpZ2luYWxJbnNlcnRpb25Nb2RlID0gSW5zZXJ0aW9uTW9kZS5JTklUSUFMO1xuICAgICAgICB0aGlzLmhlYWRFbGVtZW50ID0gbnVsbDtcbiAgICAgICAgdGhpcy5mb3JtRWxlbWVudCA9IG51bGw7XG4gICAgICAgIC8qKiBJbmRpY2F0ZXMgdGhhdCB0aGUgY3VycmVudCBub2RlIGlzIG5vdCBhbiBlbGVtZW50IGluIHRoZSBIVE1MIG5hbWVzcGFjZSAqL1xuICAgICAgICB0aGlzLmN1cnJlbnROb3RJbkhUTUwgPSBmYWxzZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSB0ZW1wbGF0ZSBpbnNlcnRpb24gbW9kZSBzdGFjayBpcyBtYWludGFpbmVkIGZyb20gdGhlIGxlZnQuXG4gICAgICAgICAqIEllLiB0aGUgdG9wbW9zdCBlbGVtZW50IHdpbGwgYWx3YXlzIGhhdmUgaW5kZXggMC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMudG1wbEluc2VydGlvbk1vZGVTdGFjayA9IFtdO1xuICAgICAgICB0aGlzLnBlbmRpbmdDaGFyYWN0ZXJUb2tlbnMgPSBbXTtcbiAgICAgICAgdGhpcy5oYXNOb25XaGl0ZXNwYWNlUGVuZGluZ0NoYXJhY3RlclRva2VuID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZnJhbWVzZXRPayA9IHRydWU7XG4gICAgICAgIHRoaXMuc2tpcE5leHROZXdMaW5lID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZm9zdGVyUGFyZW50aW5nRW5hYmxlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRQYXJzZXJPcHRpb25zKSwgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMudHJlZUFkYXB0ZXIgPSB0aGlzLm9wdGlvbnMudHJlZUFkYXB0ZXI7XG4gICAgICAgIHRoaXMub25QYXJzZUVycm9yID0gdGhpcy5vcHRpb25zLm9uUGFyc2VFcnJvcjtcbiAgICAgICAgLy8gQWx3YXlzIGVuYWJsZSBsb2NhdGlvbiBpbmZvIGlmIHdlIHJlcG9ydCBwYXJzZSBlcnJvcnMuXG4gICAgICAgIGlmICh0aGlzLm9uUGFyc2VFcnJvcikge1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zLnNvdXJjZUNvZGVMb2NhdGlvbkluZm8gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZG9jdW1lbnQgPSBkb2N1bWVudCAhPT0gbnVsbCAmJiBkb2N1bWVudCAhPT0gdm9pZCAwID8gZG9jdW1lbnQgOiB0aGlzLnRyZWVBZGFwdGVyLmNyZWF0ZURvY3VtZW50KCk7XG4gICAgICAgIHRoaXMudG9rZW5pemVyID0gbmV3IGluZGV4X2pzXzEuVG9rZW5pemVyKHRoaXMub3B0aW9ucywgdGhpcyk7XG4gICAgICAgIHRoaXMuYWN0aXZlRm9ybWF0dGluZ0VsZW1lbnRzID0gbmV3IGZvcm1hdHRpbmdfZWxlbWVudF9saXN0X2pzXzEuRm9ybWF0dGluZ0VsZW1lbnRMaXN0KHRoaXMudHJlZUFkYXB0ZXIpO1xuICAgICAgICB0aGlzLmZyYWdtZW50Q29udGV4dElEID0gZnJhZ21lbnRDb250ZXh0ID8gKDAsIGh0bWxfanNfMS5nZXRUYWdJRCkodGhpcy50cmVlQWRhcHRlci5nZXRUYWdOYW1lKGZyYWdtZW50Q29udGV4dCkpIDogaHRtbF9qc18xLlRBR19JRC5VTktOT1dOO1xuICAgICAgICB0aGlzLl9zZXRDb250ZXh0TW9kZXMoZnJhZ21lbnRDb250ZXh0ICE9PSBudWxsICYmIGZyYWdtZW50Q29udGV4dCAhPT0gdm9pZCAwID8gZnJhZ21lbnRDb250ZXh0IDogdGhpcy5kb2N1bWVudCwgdGhpcy5mcmFnbWVudENvbnRleHRJRCk7XG4gICAgICAgIHRoaXMub3BlbkVsZW1lbnRzID0gbmV3IG9wZW5fZWxlbWVudF9zdGFja19qc18xLk9wZW5FbGVtZW50U3RhY2sodGhpcy5kb2N1bWVudCwgdGhpcy50cmVlQWRhcHRlciwgdGhpcyk7XG4gICAgfVxuICAgIC8vIEFQSVxuICAgIHN0YXRpYyBwYXJzZShodG1sLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHBhcnNlciA9IG5ldyB0aGlzKG9wdGlvbnMpO1xuICAgICAgICBwYXJzZXIudG9rZW5pemVyLndyaXRlKGh0bWwsIHRydWUpO1xuICAgICAgICByZXR1cm4gcGFyc2VyLmRvY3VtZW50O1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0RnJhZ21lbnRQYXJzZXIoZnJhZ21lbnRDb250ZXh0LCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IG9wdHMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRQYXJzZXJPcHRpb25zKSwgb3B0aW9ucyk7XG4gICAgICAgIC8vTk9URTogdXNlIGEgPHRlbXBsYXRlPiBlbGVtZW50IGFzIHRoZSBmcmFnbWVudCBjb250ZXh0IGlmIG5vIGNvbnRleHQgZWxlbWVudCB3YXMgcHJvdmlkZWQsXG4gICAgICAgIC8vc28gd2Ugd2lsbCBwYXJzZSBpbiBhIFwiZm9yZ2l2aW5nXCIgbWFubmVyXG4gICAgICAgIGZyYWdtZW50Q29udGV4dCAhPT0gbnVsbCAmJiBmcmFnbWVudENvbnRleHQgIT09IHZvaWQgMCA/IGZyYWdtZW50Q29udGV4dCA6IChmcmFnbWVudENvbnRleHQgPSBvcHRzLnRyZWVBZGFwdGVyLmNyZWF0ZUVsZW1lbnQoaHRtbF9qc18xLlRBR19OQU1FUy5URU1QTEFURSwgaHRtbF9qc18xLk5TLkhUTUwsIFtdKSk7XG4gICAgICAgIC8vTk9URTogY3JlYXRlIGEgZmFrZSBlbGVtZW50IHdoaWNoIHdpbGwgYmUgdXNlZCBhcyB0aGUgYGRvY3VtZW50YCBmb3IgZnJhZ21lbnQgcGFyc2luZy5cbiAgICAgICAgLy9UaGlzIGlzIGltcG9ydGFudCBmb3IganNkb20sIHdoZXJlIGEgbmV3IGBkb2N1bWVudGAgY2Fubm90IGJlIGNyZWF0ZWQuIFRoaXMgbGVkIHRvXG4gICAgICAgIC8vZnJhZ21lbnQgcGFyc2luZyBtZXNzaW5nIHdpdGggdGhlIG1haW4gYGRvY3VtZW50YC5cbiAgICAgICAgY29uc3QgZG9jdW1lbnRNb2NrID0gb3B0cy50cmVlQWRhcHRlci5jcmVhdGVFbGVtZW50KCdkb2N1bWVudG1vY2snLCBodG1sX2pzXzEuTlMuSFRNTCwgW10pO1xuICAgICAgICBjb25zdCBwYXJzZXIgPSBuZXcgdGhpcyhvcHRzLCBkb2N1bWVudE1vY2ssIGZyYWdtZW50Q29udGV4dCk7XG4gICAgICAgIGlmIChwYXJzZXIuZnJhZ21lbnRDb250ZXh0SUQgPT09IGh0bWxfanNfMS5UQUdfSUQuVEVNUExBVEUpIHtcbiAgICAgICAgICAgIHBhcnNlci50bXBsSW5zZXJ0aW9uTW9kZVN0YWNrLnVuc2hpZnQoSW5zZXJ0aW9uTW9kZS5JTl9URU1QTEFURSk7XG4gICAgICAgIH1cbiAgICAgICAgcGFyc2VyLl9pbml0VG9rZW5pemVyRm9yRnJhZ21lbnRQYXJzaW5nKCk7XG4gICAgICAgIHBhcnNlci5faW5zZXJ0RmFrZVJvb3RFbGVtZW50KCk7XG4gICAgICAgIHBhcnNlci5fcmVzZXRJbnNlcnRpb25Nb2RlKCk7XG4gICAgICAgIHBhcnNlci5fZmluZEZvcm1JbkZyYWdtZW50Q29udGV4dCgpO1xuICAgICAgICByZXR1cm4gcGFyc2VyO1xuICAgIH1cbiAgICBnZXRGcmFnbWVudCgpIHtcbiAgICAgICAgY29uc3Qgcm9vdEVsZW1lbnQgPSB0aGlzLnRyZWVBZGFwdGVyLmdldEZpcnN0Q2hpbGQodGhpcy5kb2N1bWVudCk7XG4gICAgICAgIGNvbnN0IGZyYWdtZW50ID0gdGhpcy50cmVlQWRhcHRlci5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG4gICAgICAgIHRoaXMuX2Fkb3B0Tm9kZXMocm9vdEVsZW1lbnQsIGZyYWdtZW50KTtcbiAgICAgICAgcmV0dXJuIGZyYWdtZW50O1xuICAgIH1cbiAgICAvL0Vycm9yc1xuICAgIF9lcnIodG9rZW4sIGNvZGUsIGJlZm9yZVRva2VuKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKCF0aGlzLm9uUGFyc2VFcnJvcilcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY29uc3QgbG9jID0gKF9hID0gdG9rZW4ubG9jYXRpb24pICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IEJBU0VfTE9DO1xuICAgICAgICBjb25zdCBlcnIgPSB7XG4gICAgICAgICAgICBjb2RlLFxuICAgICAgICAgICAgc3RhcnRMaW5lOiBsb2Muc3RhcnRMaW5lLFxuICAgICAgICAgICAgc3RhcnRDb2w6IGxvYy5zdGFydENvbCxcbiAgICAgICAgICAgIHN0YXJ0T2Zmc2V0OiBsb2Muc3RhcnRPZmZzZXQsXG4gICAgICAgICAgICBlbmRMaW5lOiBiZWZvcmVUb2tlbiA/IGxvYy5zdGFydExpbmUgOiBsb2MuZW5kTGluZSxcbiAgICAgICAgICAgIGVuZENvbDogYmVmb3JlVG9rZW4gPyBsb2Muc3RhcnRDb2wgOiBsb2MuZW5kQ29sLFxuICAgICAgICAgICAgZW5kT2Zmc2V0OiBiZWZvcmVUb2tlbiA/IGxvYy5zdGFydE9mZnNldCA6IGxvYy5lbmRPZmZzZXQsXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMub25QYXJzZUVycm9yKGVycik7XG4gICAgfVxuICAgIC8vU3RhY2sgZXZlbnRzXG4gICAgb25JdGVtUHVzaChub2RlLCB0aWQsIGlzVG9wKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIChfYiA9IChfYSA9IHRoaXMudHJlZUFkYXB0ZXIpLm9uSXRlbVB1c2gpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jYWxsKF9hLCBub2RlKTtcbiAgICAgICAgaWYgKGlzVG9wICYmIHRoaXMub3BlbkVsZW1lbnRzLnN0YWNrVG9wID4gMClcbiAgICAgICAgICAgIHRoaXMuX3NldENvbnRleHRNb2Rlcyhub2RlLCB0aWQpO1xuICAgIH1cbiAgICBvbkl0ZW1Qb3Aobm9kZSwgaXNUb3ApIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5zb3VyY2VDb2RlTG9jYXRpb25JbmZvKSB7XG4gICAgICAgICAgICB0aGlzLl9zZXRFbmRMb2NhdGlvbihub2RlLCB0aGlzLmN1cnJlbnRUb2tlbik7XG4gICAgICAgIH1cbiAgICAgICAgKF9iID0gKF9hID0gdGhpcy50cmVlQWRhcHRlcikub25JdGVtUG9wKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbChfYSwgbm9kZSwgdGhpcy5vcGVuRWxlbWVudHMuY3VycmVudCk7XG4gICAgICAgIGlmIChpc1RvcCkge1xuICAgICAgICAgICAgbGV0IGN1cnJlbnQ7XG4gICAgICAgICAgICBsZXQgY3VycmVudFRhZ0lkO1xuICAgICAgICAgICAgaWYgKHRoaXMub3BlbkVsZW1lbnRzLnN0YWNrVG9wID09PSAwICYmIHRoaXMuZnJhZ21lbnRDb250ZXh0KSB7XG4gICAgICAgICAgICAgICAgY3VycmVudCA9IHRoaXMuZnJhZ21lbnRDb250ZXh0O1xuICAgICAgICAgICAgICAgIGN1cnJlbnRUYWdJZCA9IHRoaXMuZnJhZ21lbnRDb250ZXh0SUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAoeyBjdXJyZW50LCBjdXJyZW50VGFnSWQgfSA9IHRoaXMub3BlbkVsZW1lbnRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX3NldENvbnRleHRNb2RlcyhjdXJyZW50LCBjdXJyZW50VGFnSWQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9zZXRDb250ZXh0TW9kZXMoY3VycmVudCwgdGlkKSB7XG4gICAgICAgIGNvbnN0IGlzSFRNTCA9IGN1cnJlbnQgPT09IHRoaXMuZG9jdW1lbnQgfHwgdGhpcy50cmVlQWRhcHRlci5nZXROYW1lc3BhY2VVUkkoY3VycmVudCkgPT09IGh0bWxfanNfMS5OUy5IVE1MO1xuICAgICAgICB0aGlzLmN1cnJlbnROb3RJbkhUTUwgPSAhaXNIVE1MO1xuICAgICAgICB0aGlzLnRva2VuaXplci5pbkZvcmVpZ25Ob2RlID0gIWlzSFRNTCAmJiAhdGhpcy5faXNJbnRlZ3JhdGlvblBvaW50KHRpZCwgY3VycmVudCk7XG4gICAgfVxuICAgIF9zd2l0Y2hUb1RleHRQYXJzaW5nKGN1cnJlbnRUb2tlbiwgbmV4dFRva2VuaXplclN0YXRlKSB7XG4gICAgICAgIHRoaXMuX2luc2VydEVsZW1lbnQoY3VycmVudFRva2VuLCBodG1sX2pzXzEuTlMuSFRNTCk7XG4gICAgICAgIHRoaXMudG9rZW5pemVyLnN0YXRlID0gbmV4dFRva2VuaXplclN0YXRlO1xuICAgICAgICB0aGlzLm9yaWdpbmFsSW5zZXJ0aW9uTW9kZSA9IHRoaXMuaW5zZXJ0aW9uTW9kZTtcbiAgICAgICAgdGhpcy5pbnNlcnRpb25Nb2RlID0gSW5zZXJ0aW9uTW9kZS5URVhUO1xuICAgIH1cbiAgICBzd2l0Y2hUb1BsYWludGV4dFBhcnNpbmcoKSB7XG4gICAgICAgIHRoaXMuaW5zZXJ0aW9uTW9kZSA9IEluc2VydGlvbk1vZGUuVEVYVDtcbiAgICAgICAgdGhpcy5vcmlnaW5hbEluc2VydGlvbk1vZGUgPSBJbnNlcnRpb25Nb2RlLklOX0JPRFk7XG4gICAgICAgIHRoaXMudG9rZW5pemVyLnN0YXRlID0gaW5kZXhfanNfMS5Ub2tlbml6ZXJNb2RlLlBMQUlOVEVYVDtcbiAgICB9XG4gICAgLy9GcmFnbWVudCBwYXJzaW5nXG4gICAgX2dldEFkanVzdGVkQ3VycmVudEVsZW1lbnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wZW5FbGVtZW50cy5zdGFja1RvcCA9PT0gMCAmJiB0aGlzLmZyYWdtZW50Q29udGV4dFxuICAgICAgICAgICAgPyB0aGlzLmZyYWdtZW50Q29udGV4dFxuICAgICAgICAgICAgOiB0aGlzLm9wZW5FbGVtZW50cy5jdXJyZW50O1xuICAgIH1cbiAgICBfZmluZEZvcm1JbkZyYWdtZW50Q29udGV4dCgpIHtcbiAgICAgICAgbGV0IG5vZGUgPSB0aGlzLmZyYWdtZW50Q29udGV4dDtcbiAgICAgICAgd2hpbGUgKG5vZGUpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnRyZWVBZGFwdGVyLmdldFRhZ05hbWUobm9kZSkgPT09IGh0bWxfanNfMS5UQUdfTkFNRVMuRk9STSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZm9ybUVsZW1lbnQgPSBub2RlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbm9kZSA9IHRoaXMudHJlZUFkYXB0ZXIuZ2V0UGFyZW50Tm9kZShub2RlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfaW5pdFRva2VuaXplckZvckZyYWdtZW50UGFyc2luZygpIHtcbiAgICAgICAgaWYgKCF0aGlzLmZyYWdtZW50Q29udGV4dCB8fCB0aGlzLnRyZWVBZGFwdGVyLmdldE5hbWVzcGFjZVVSSSh0aGlzLmZyYWdtZW50Q29udGV4dCkgIT09IGh0bWxfanNfMS5OUy5IVE1MKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgc3dpdGNoICh0aGlzLmZyYWdtZW50Q29udGV4dElEKSB7XG4gICAgICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuVElUTEU6XG4gICAgICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuVEVYVEFSRUE6IHtcbiAgICAgICAgICAgICAgICB0aGlzLnRva2VuaXplci5zdGF0ZSA9IGluZGV4X2pzXzEuVG9rZW5pemVyTW9kZS5SQ0RBVEE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuU1RZTEU6XG4gICAgICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuWE1QOlxuICAgICAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELklGUkFNRTpcbiAgICAgICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5OT0VNQkVEOlxuICAgICAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELk5PRlJBTUVTOlxuICAgICAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELk5PU0NSSVBUOiB7XG4gICAgICAgICAgICAgICAgdGhpcy50b2tlbml6ZXIuc3RhdGUgPSBpbmRleF9qc18xLlRva2VuaXplck1vZGUuUkFXVEVYVDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5TQ1JJUFQ6IHtcbiAgICAgICAgICAgICAgICB0aGlzLnRva2VuaXplci5zdGF0ZSA9IGluZGV4X2pzXzEuVG9rZW5pemVyTW9kZS5TQ1JJUFRfREFUQTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5QTEFJTlRFWFQ6IHtcbiAgICAgICAgICAgICAgICB0aGlzLnRva2VuaXplci5zdGF0ZSA9IGluZGV4X2pzXzEuVG9rZW5pemVyTW9kZS5QTEFJTlRFWFQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgLy8gRG8gbm90aGluZ1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vVHJlZSBtdXRhdGlvblxuICAgIF9zZXREb2N1bWVudFR5cGUodG9rZW4pIHtcbiAgICAgICAgY29uc3QgbmFtZSA9IHRva2VuLm5hbWUgfHwgJyc7XG4gICAgICAgIGNvbnN0IHB1YmxpY0lkID0gdG9rZW4ucHVibGljSWQgfHwgJyc7XG4gICAgICAgIGNvbnN0IHN5c3RlbUlkID0gdG9rZW4uc3lzdGVtSWQgfHwgJyc7XG4gICAgICAgIHRoaXMudHJlZUFkYXB0ZXIuc2V0RG9jdW1lbnRUeXBlKHRoaXMuZG9jdW1lbnQsIG5hbWUsIHB1YmxpY0lkLCBzeXN0ZW1JZCk7XG4gICAgICAgIGlmICh0b2tlbi5sb2NhdGlvbikge1xuICAgICAgICAgICAgY29uc3QgZG9jdW1lbnRDaGlsZHJlbiA9IHRoaXMudHJlZUFkYXB0ZXIuZ2V0Q2hpbGROb2Rlcyh0aGlzLmRvY3VtZW50KTtcbiAgICAgICAgICAgIGNvbnN0IGRvY1R5cGVOb2RlID0gZG9jdW1lbnRDaGlsZHJlbi5maW5kKChub2RlKSA9PiB0aGlzLnRyZWVBZGFwdGVyLmlzRG9jdW1lbnRUeXBlTm9kZShub2RlKSk7XG4gICAgICAgICAgICBpZiAoZG9jVHlwZU5vZGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRyZWVBZGFwdGVyLnNldE5vZGVTb3VyY2VDb2RlTG9jYXRpb24oZG9jVHlwZU5vZGUsIHRva2VuLmxvY2F0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBfYXR0YWNoRWxlbWVudFRvVHJlZShlbGVtZW50LCBsb2NhdGlvbikge1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnNvdXJjZUNvZGVMb2NhdGlvbkluZm8pIHtcbiAgICAgICAgICAgIGNvbnN0IGxvYyA9IGxvY2F0aW9uICYmIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgbG9jYXRpb24pLCB7IHN0YXJ0VGFnOiBsb2NhdGlvbiB9KTtcbiAgICAgICAgICAgIHRoaXMudHJlZUFkYXB0ZXIuc2V0Tm9kZVNvdXJjZUNvZGVMb2NhdGlvbihlbGVtZW50LCBsb2MpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9zaG91bGRGb3N0ZXJQYXJlbnRPbkluc2VydGlvbigpKSB7XG4gICAgICAgICAgICB0aGlzLl9mb3N0ZXJQYXJlbnRFbGVtZW50KGVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgcGFyZW50ID0gdGhpcy5vcGVuRWxlbWVudHMuY3VycmVudFRtcGxDb250ZW50T3JOb2RlO1xuICAgICAgICAgICAgdGhpcy50cmVlQWRhcHRlci5hcHBlbmRDaGlsZChwYXJlbnQsIGVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9hcHBlbmRFbGVtZW50KHRva2VuLCBuYW1lc3BhY2VVUkkpIHtcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IHRoaXMudHJlZUFkYXB0ZXIuY3JlYXRlRWxlbWVudCh0b2tlbi50YWdOYW1lLCBuYW1lc3BhY2VVUkksIHRva2VuLmF0dHJzKTtcbiAgICAgICAgdGhpcy5fYXR0YWNoRWxlbWVudFRvVHJlZShlbGVtZW50LCB0b2tlbi5sb2NhdGlvbik7XG4gICAgfVxuICAgIF9pbnNlcnRFbGVtZW50KHRva2VuLCBuYW1lc3BhY2VVUkkpIHtcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IHRoaXMudHJlZUFkYXB0ZXIuY3JlYXRlRWxlbWVudCh0b2tlbi50YWdOYW1lLCBuYW1lc3BhY2VVUkksIHRva2VuLmF0dHJzKTtcbiAgICAgICAgdGhpcy5fYXR0YWNoRWxlbWVudFRvVHJlZShlbGVtZW50LCB0b2tlbi5sb2NhdGlvbik7XG4gICAgICAgIHRoaXMub3BlbkVsZW1lbnRzLnB1c2goZWxlbWVudCwgdG9rZW4udGFnSUQpO1xuICAgIH1cbiAgICBfaW5zZXJ0RmFrZUVsZW1lbnQodGFnTmFtZSwgdGFnSUQpIHtcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IHRoaXMudHJlZUFkYXB0ZXIuY3JlYXRlRWxlbWVudCh0YWdOYW1lLCBodG1sX2pzXzEuTlMuSFRNTCwgW10pO1xuICAgICAgICB0aGlzLl9hdHRhY2hFbGVtZW50VG9UcmVlKGVsZW1lbnQsIG51bGwpO1xuICAgICAgICB0aGlzLm9wZW5FbGVtZW50cy5wdXNoKGVsZW1lbnQsIHRhZ0lEKTtcbiAgICB9XG4gICAgX2luc2VydFRlbXBsYXRlKHRva2VuKSB7XG4gICAgICAgIGNvbnN0IHRtcGwgPSB0aGlzLnRyZWVBZGFwdGVyLmNyZWF0ZUVsZW1lbnQodG9rZW4udGFnTmFtZSwgaHRtbF9qc18xLk5TLkhUTUwsIHRva2VuLmF0dHJzKTtcbiAgICAgICAgY29uc3QgY29udGVudCA9IHRoaXMudHJlZUFkYXB0ZXIuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuICAgICAgICB0aGlzLnRyZWVBZGFwdGVyLnNldFRlbXBsYXRlQ29udGVudCh0bXBsLCBjb250ZW50KTtcbiAgICAgICAgdGhpcy5fYXR0YWNoRWxlbWVudFRvVHJlZSh0bXBsLCB0b2tlbi5sb2NhdGlvbik7XG4gICAgICAgIHRoaXMub3BlbkVsZW1lbnRzLnB1c2godG1wbCwgdG9rZW4udGFnSUQpO1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnNvdXJjZUNvZGVMb2NhdGlvbkluZm8pXG4gICAgICAgICAgICB0aGlzLnRyZWVBZGFwdGVyLnNldE5vZGVTb3VyY2VDb2RlTG9jYXRpb24oY29udGVudCwgbnVsbCk7XG4gICAgfVxuICAgIF9pbnNlcnRGYWtlUm9vdEVsZW1lbnQoKSB7XG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLnRyZWVBZGFwdGVyLmNyZWF0ZUVsZW1lbnQoaHRtbF9qc18xLlRBR19OQU1FUy5IVE1MLCBodG1sX2pzXzEuTlMuSFRNTCwgW10pO1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnNvdXJjZUNvZGVMb2NhdGlvbkluZm8pXG4gICAgICAgICAgICB0aGlzLnRyZWVBZGFwdGVyLnNldE5vZGVTb3VyY2VDb2RlTG9jYXRpb24oZWxlbWVudCwgbnVsbCk7XG4gICAgICAgIHRoaXMudHJlZUFkYXB0ZXIuYXBwZW5kQ2hpbGQodGhpcy5vcGVuRWxlbWVudHMuY3VycmVudCwgZWxlbWVudCk7XG4gICAgICAgIHRoaXMub3BlbkVsZW1lbnRzLnB1c2goZWxlbWVudCwgaHRtbF9qc18xLlRBR19JRC5IVE1MKTtcbiAgICB9XG4gICAgX2FwcGVuZENvbW1lbnROb2RlKHRva2VuLCBwYXJlbnQpIHtcbiAgICAgICAgY29uc3QgY29tbWVudE5vZGUgPSB0aGlzLnRyZWVBZGFwdGVyLmNyZWF0ZUNvbW1lbnROb2RlKHRva2VuLmRhdGEpO1xuICAgICAgICB0aGlzLnRyZWVBZGFwdGVyLmFwcGVuZENoaWxkKHBhcmVudCwgY29tbWVudE5vZGUpO1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnNvdXJjZUNvZGVMb2NhdGlvbkluZm8pIHtcbiAgICAgICAgICAgIHRoaXMudHJlZUFkYXB0ZXIuc2V0Tm9kZVNvdXJjZUNvZGVMb2NhdGlvbihjb21tZW50Tm9kZSwgdG9rZW4ubG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9pbnNlcnRDaGFyYWN0ZXJzKHRva2VuKSB7XG4gICAgICAgIGxldCBwYXJlbnQ7XG4gICAgICAgIGxldCBiZWZvcmVFbGVtZW50O1xuICAgICAgICBpZiAodGhpcy5fc2hvdWxkRm9zdGVyUGFyZW50T25JbnNlcnRpb24oKSkge1xuICAgICAgICAgICAgKHsgcGFyZW50LCBiZWZvcmVFbGVtZW50IH0gPSB0aGlzLl9maW5kRm9zdGVyUGFyZW50aW5nTG9jYXRpb24oKSk7XG4gICAgICAgICAgICBpZiAoYmVmb3JlRWxlbWVudCkge1xuICAgICAgICAgICAgICAgIHRoaXMudHJlZUFkYXB0ZXIuaW5zZXJ0VGV4dEJlZm9yZShwYXJlbnQsIHRva2VuLmNoYXJzLCBiZWZvcmVFbGVtZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMudHJlZUFkYXB0ZXIuaW5zZXJ0VGV4dChwYXJlbnQsIHRva2VuLmNoYXJzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHBhcmVudCA9IHRoaXMub3BlbkVsZW1lbnRzLmN1cnJlbnRUbXBsQ29udGVudE9yTm9kZTtcbiAgICAgICAgICAgIHRoaXMudHJlZUFkYXB0ZXIuaW5zZXJ0VGV4dChwYXJlbnQsIHRva2VuLmNoYXJzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRva2VuLmxvY2F0aW9uKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjb25zdCBzaWJsaW5ncyA9IHRoaXMudHJlZUFkYXB0ZXIuZ2V0Q2hpbGROb2RlcyhwYXJlbnQpO1xuICAgICAgICBjb25zdCB0ZXh0Tm9kZUlkeCA9IGJlZm9yZUVsZW1lbnQgPyBzaWJsaW5ncy5sYXN0SW5kZXhPZihiZWZvcmVFbGVtZW50KSA6IHNpYmxpbmdzLmxlbmd0aDtcbiAgICAgICAgY29uc3QgdGV4dE5vZGUgPSBzaWJsaW5nc1t0ZXh0Tm9kZUlkeCAtIDFdO1xuICAgICAgICAvL05PVEU6IGlmIHdlIGhhdmUgYSBsb2NhdGlvbiBhc3NpZ25lZCBieSBhbm90aGVyIHRva2VuLCB0aGVuIGp1c3QgdXBkYXRlIHRoZSBlbmQgcG9zaXRpb25cbiAgICAgICAgY29uc3QgdG5Mb2MgPSB0aGlzLnRyZWVBZGFwdGVyLmdldE5vZGVTb3VyY2VDb2RlTG9jYXRpb24odGV4dE5vZGUpO1xuICAgICAgICBpZiAodG5Mb2MpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgZW5kTGluZSwgZW5kQ29sLCBlbmRPZmZzZXQgfSA9IHRva2VuLmxvY2F0aW9uO1xuICAgICAgICAgICAgdGhpcy50cmVlQWRhcHRlci51cGRhdGVOb2RlU291cmNlQ29kZUxvY2F0aW9uKHRleHROb2RlLCB7IGVuZExpbmUsIGVuZENvbCwgZW5kT2Zmc2V0IH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMub3B0aW9ucy5zb3VyY2VDb2RlTG9jYXRpb25JbmZvKSB7XG4gICAgICAgICAgICB0aGlzLnRyZWVBZGFwdGVyLnNldE5vZGVTb3VyY2VDb2RlTG9jYXRpb24odGV4dE5vZGUsIHRva2VuLmxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfYWRvcHROb2Rlcyhkb25vciwgcmVjaXBpZW50KSB7XG4gICAgICAgIGZvciAobGV0IGNoaWxkID0gdGhpcy50cmVlQWRhcHRlci5nZXRGaXJzdENoaWxkKGRvbm9yKTsgY2hpbGQ7IGNoaWxkID0gdGhpcy50cmVlQWRhcHRlci5nZXRGaXJzdENoaWxkKGRvbm9yKSkge1xuICAgICAgICAgICAgdGhpcy50cmVlQWRhcHRlci5kZXRhY2hOb2RlKGNoaWxkKTtcbiAgICAgICAgICAgIHRoaXMudHJlZUFkYXB0ZXIuYXBwZW5kQ2hpbGQocmVjaXBpZW50LCBjaGlsZCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX3NldEVuZExvY2F0aW9uKGVsZW1lbnQsIGNsb3NpbmdUb2tlbikge1xuICAgICAgICBpZiAodGhpcy50cmVlQWRhcHRlci5nZXROb2RlU291cmNlQ29kZUxvY2F0aW9uKGVsZW1lbnQpICYmIGNsb3NpbmdUb2tlbi5sb2NhdGlvbikge1xuICAgICAgICAgICAgY29uc3QgY3RMb2MgPSBjbG9zaW5nVG9rZW4ubG9jYXRpb247XG4gICAgICAgICAgICBjb25zdCB0biA9IHRoaXMudHJlZUFkYXB0ZXIuZ2V0VGFnTmFtZShlbGVtZW50KTtcbiAgICAgICAgICAgIGNvbnN0IGVuZExvYyA9IFxuICAgICAgICAgICAgLy8gTk9URTogRm9yIGNhc2VzIGxpa2UgPHA+IDxwPiA8L3A+IC0gRmlyc3QgJ3AnIGNsb3NlcyB3aXRob3V0IGEgY2xvc2luZ1xuICAgICAgICAgICAgLy8gdGFnIGFuZCBmb3IgY2FzZXMgbGlrZSA8dGQ+IDxwPiA8L3RkPiAtICdwJyBjbG9zZXMgd2l0aG91dCBhIGNsb3NpbmcgdGFnLlxuICAgICAgICAgICAgY2xvc2luZ1Rva2VuLnR5cGUgPT09IHRva2VuX2pzXzEuVG9rZW5UeXBlLkVORF9UQUcgJiYgdG4gPT09IGNsb3NpbmdUb2tlbi50YWdOYW1lXG4gICAgICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgICAgIGVuZFRhZzogT2JqZWN0LmFzc2lnbih7fSwgY3RMb2MpLFxuICAgICAgICAgICAgICAgICAgICBlbmRMaW5lOiBjdExvYy5lbmRMaW5lLFxuICAgICAgICAgICAgICAgICAgICBlbmRDb2w6IGN0TG9jLmVuZENvbCxcbiAgICAgICAgICAgICAgICAgICAgZW5kT2Zmc2V0OiBjdExvYy5lbmRPZmZzZXQsXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIDoge1xuICAgICAgICAgICAgICAgICAgICBlbmRMaW5lOiBjdExvYy5zdGFydExpbmUsXG4gICAgICAgICAgICAgICAgICAgIGVuZENvbDogY3RMb2Muc3RhcnRDb2wsXG4gICAgICAgICAgICAgICAgICAgIGVuZE9mZnNldDogY3RMb2Muc3RhcnRPZmZzZXQsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMudHJlZUFkYXB0ZXIudXBkYXRlTm9kZVNvdXJjZUNvZGVMb2NhdGlvbihlbGVtZW50LCBlbmRMb2MpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vVG9rZW4gcHJvY2Vzc2luZ1xuICAgIHNob3VsZFByb2Nlc3NTdGFydFRhZ1Rva2VuSW5Gb3JlaWduQ29udGVudCh0b2tlbikge1xuICAgICAgICAvLyBDaGVjayB0aGF0IG5laXRoZXIgY3VycmVudCA9PT0gZG9jdW1lbnQsIG9yIG5zID09PSBOUy5IVE1MXG4gICAgICAgIGlmICghdGhpcy5jdXJyZW50Tm90SW5IVE1MKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBsZXQgY3VycmVudDtcbiAgICAgICAgbGV0IGN1cnJlbnRUYWdJZDtcbiAgICAgICAgaWYgKHRoaXMub3BlbkVsZW1lbnRzLnN0YWNrVG9wID09PSAwICYmIHRoaXMuZnJhZ21lbnRDb250ZXh0KSB7XG4gICAgICAgICAgICBjdXJyZW50ID0gdGhpcy5mcmFnbWVudENvbnRleHQ7XG4gICAgICAgICAgICBjdXJyZW50VGFnSWQgPSB0aGlzLmZyYWdtZW50Q29udGV4dElEO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgKHsgY3VycmVudCwgY3VycmVudFRhZ0lkIH0gPSB0aGlzLm9wZW5FbGVtZW50cyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRva2VuLnRhZ0lEID09PSBodG1sX2pzXzEuVEFHX0lELlNWRyAmJlxuICAgICAgICAgICAgdGhpcy50cmVlQWRhcHRlci5nZXRUYWdOYW1lKGN1cnJlbnQpID09PSBodG1sX2pzXzEuVEFHX05BTUVTLkFOTk9UQVRJT05fWE1MICYmXG4gICAgICAgICAgICB0aGlzLnRyZWVBZGFwdGVyLmdldE5hbWVzcGFjZVVSSShjdXJyZW50KSA9PT0gaHRtbF9qc18xLk5TLk1BVEhNTCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgIC8vIENoZWNrIHRoYXQgYGN1cnJlbnRgIGlzIG5vdCBhbiBpbnRlZ3JhdGlvbiBwb2ludCBmb3IgSFRNTCBvciBNYXRoTUwgZWxlbWVudHMuXG4gICAgICAgIHRoaXMudG9rZW5pemVyLmluRm9yZWlnbk5vZGUgfHxcbiAgICAgICAgICAgIC8vIElmIGl0IF9pc18gYW4gaW50ZWdyYXRpb24gcG9pbnQsIHRoZW4gd2UgbWlnaHQgaGF2ZSB0byBjaGVjayB0aGF0IGl0IGlzIG5vdCBhbiBIVE1MXG4gICAgICAgICAgICAvLyBpbnRlZ3JhdGlvbiBwb2ludC5cbiAgICAgICAgICAgICgodG9rZW4udGFnSUQgPT09IGh0bWxfanNfMS5UQUdfSUQuTUdMWVBIIHx8IHRva2VuLnRhZ0lEID09PSBodG1sX2pzXzEuVEFHX0lELk1BTElHTk1BUkspICYmXG4gICAgICAgICAgICAgICAgIXRoaXMuX2lzSW50ZWdyYXRpb25Qb2ludChjdXJyZW50VGFnSWQsIGN1cnJlbnQsIGh0bWxfanNfMS5OUy5IVE1MKSkpO1xuICAgIH1cbiAgICBfcHJvY2Vzc1Rva2VuKHRva2VuKSB7XG4gICAgICAgIHN3aXRjaCAodG9rZW4udHlwZSkge1xuICAgICAgICAgICAgY2FzZSB0b2tlbl9qc18xLlRva2VuVHlwZS5DSEFSQUNURVI6IHtcbiAgICAgICAgICAgICAgICB0aGlzLm9uQ2hhcmFjdGVyKHRva2VuKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgdG9rZW5fanNfMS5Ub2tlblR5cGUuTlVMTF9DSEFSQUNURVI6IHtcbiAgICAgICAgICAgICAgICB0aGlzLm9uTnVsbENoYXJhY3Rlcih0b2tlbik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIHRva2VuX2pzXzEuVG9rZW5UeXBlLkNPTU1FTlQ6IHtcbiAgICAgICAgICAgICAgICB0aGlzLm9uQ29tbWVudCh0b2tlbik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIHRva2VuX2pzXzEuVG9rZW5UeXBlLkRPQ1RZUEU6IHtcbiAgICAgICAgICAgICAgICB0aGlzLm9uRG9jdHlwZSh0b2tlbik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIHRva2VuX2pzXzEuVG9rZW5UeXBlLlNUQVJUX1RBRzoge1xuICAgICAgICAgICAgICAgIHRoaXMuX3Byb2Nlc3NTdGFydFRhZyh0b2tlbik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIHRva2VuX2pzXzEuVG9rZW5UeXBlLkVORF9UQUc6IHtcbiAgICAgICAgICAgICAgICB0aGlzLm9uRW5kVGFnKHRva2VuKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgdG9rZW5fanNfMS5Ub2tlblR5cGUuRU9GOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5vbkVvZih0b2tlbik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIHRva2VuX2pzXzEuVG9rZW5UeXBlLldISVRFU1BBQ0VfQ0hBUkFDVEVSOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5vbldoaXRlc3BhY2VDaGFyYWN0ZXIodG9rZW4pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8vSW50ZWdyYXRpb24gcG9pbnRzXG4gICAgX2lzSW50ZWdyYXRpb25Qb2ludCh0aWQsIGVsZW1lbnQsIGZvcmVpZ25OUykge1xuICAgICAgICBjb25zdCBucyA9IHRoaXMudHJlZUFkYXB0ZXIuZ2V0TmFtZXNwYWNlVVJJKGVsZW1lbnQpO1xuICAgICAgICBjb25zdCBhdHRycyA9IHRoaXMudHJlZUFkYXB0ZXIuZ2V0QXR0ckxpc3QoZWxlbWVudCk7XG4gICAgICAgIHJldHVybiBmb3JlaWduQ29udGVudC5pc0ludGVncmF0aW9uUG9pbnQodGlkLCBucywgYXR0cnMsIGZvcmVpZ25OUyk7XG4gICAgfVxuICAgIC8vQWN0aXZlIGZvcm1hdHRpbmcgZWxlbWVudHMgcmVjb25zdHJ1Y3Rpb25cbiAgICBfcmVjb25zdHJ1Y3RBY3RpdmVGb3JtYXR0aW5nRWxlbWVudHMoKSB7XG4gICAgICAgIGNvbnN0IGxpc3RMZW5ndGggPSB0aGlzLmFjdGl2ZUZvcm1hdHRpbmdFbGVtZW50cy5lbnRyaWVzLmxlbmd0aDtcbiAgICAgICAgaWYgKGxpc3RMZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnN0IGVuZEluZGV4ID0gdGhpcy5hY3RpdmVGb3JtYXR0aW5nRWxlbWVudHMuZW50cmllcy5maW5kSW5kZXgoKGVudHJ5KSA9PiBlbnRyeS50eXBlID09PSBmb3JtYXR0aW5nX2VsZW1lbnRfbGlzdF9qc18xLkVudHJ5VHlwZS5NYXJrZXIgfHwgdGhpcy5vcGVuRWxlbWVudHMuY29udGFpbnMoZW50cnkuZWxlbWVudCkpO1xuICAgICAgICAgICAgY29uc3QgdW5vcGVuSWR4ID0gZW5kSW5kZXggPCAwID8gbGlzdExlbmd0aCAtIDEgOiBlbmRJbmRleCAtIDE7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gdW5vcGVuSWR4OyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGVudHJ5ID0gdGhpcy5hY3RpdmVGb3JtYXR0aW5nRWxlbWVudHMuZW50cmllc1tpXTtcbiAgICAgICAgICAgICAgICB0aGlzLl9pbnNlcnRFbGVtZW50KGVudHJ5LnRva2VuLCB0aGlzLnRyZWVBZGFwdGVyLmdldE5hbWVzcGFjZVVSSShlbnRyeS5lbGVtZW50KSk7XG4gICAgICAgICAgICAgICAgZW50cnkuZWxlbWVudCA9IHRoaXMub3BlbkVsZW1lbnRzLmN1cnJlbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy9DbG9zZSBlbGVtZW50c1xuICAgIF9jbG9zZVRhYmxlQ2VsbCgpIHtcbiAgICAgICAgdGhpcy5vcGVuRWxlbWVudHMuZ2VuZXJhdGVJbXBsaWVkRW5kVGFncygpO1xuICAgICAgICB0aGlzLm9wZW5FbGVtZW50cy5wb3BVbnRpbFRhYmxlQ2VsbFBvcHBlZCgpO1xuICAgICAgICB0aGlzLmFjdGl2ZUZvcm1hdHRpbmdFbGVtZW50cy5jbGVhclRvTGFzdE1hcmtlcigpO1xuICAgICAgICB0aGlzLmluc2VydGlvbk1vZGUgPSBJbnNlcnRpb25Nb2RlLklOX1JPVztcbiAgICB9XG4gICAgX2Nsb3NlUEVsZW1lbnQoKSB7XG4gICAgICAgIHRoaXMub3BlbkVsZW1lbnRzLmdlbmVyYXRlSW1wbGllZEVuZFRhZ3NXaXRoRXhjbHVzaW9uKGh0bWxfanNfMS5UQUdfSUQuUCk7XG4gICAgICAgIHRoaXMub3BlbkVsZW1lbnRzLnBvcFVudGlsVGFnTmFtZVBvcHBlZChodG1sX2pzXzEuVEFHX0lELlApO1xuICAgIH1cbiAgICAvL0luc2VydGlvbiBtb2Rlc1xuICAgIF9yZXNldEluc2VydGlvbk1vZGUoKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSB0aGlzLm9wZW5FbGVtZW50cy5zdGFja1RvcDsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgIC8vSW5zZXJ0aW9uIG1vZGUgcmVzZXQgbWFwXG4gICAgICAgICAgICBzd2l0Y2ggKGkgPT09IDAgJiYgdGhpcy5mcmFnbWVudENvbnRleHQgPyB0aGlzLmZyYWdtZW50Q29udGV4dElEIDogdGhpcy5vcGVuRWxlbWVudHMudGFnSURzW2ldKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELlRSOiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5zZXJ0aW9uTW9kZSA9IEluc2VydGlvbk1vZGUuSU5fUk9XO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5UQk9EWTpcbiAgICAgICAgICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuVEhFQUQ6XG4gICAgICAgICAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELlRGT09UOiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5zZXJ0aW9uTW9kZSA9IEluc2VydGlvbk1vZGUuSU5fVEFCTEVfQk9EWTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuQ0FQVElPTjoge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmluc2VydGlvbk1vZGUgPSBJbnNlcnRpb25Nb2RlLklOX0NBUFRJT047XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELkNPTEdST1VQOiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5zZXJ0aW9uTW9kZSA9IEluc2VydGlvbk1vZGUuSU5fQ09MVU1OX0dST1VQO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5UQUJMRToge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmluc2VydGlvbk1vZGUgPSBJbnNlcnRpb25Nb2RlLklOX1RBQkxFO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5CT0RZOiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5zZXJ0aW9uTW9kZSA9IEluc2VydGlvbk1vZGUuSU5fQk9EWTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuRlJBTUVTRVQ6IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnNlcnRpb25Nb2RlID0gSW5zZXJ0aW9uTW9kZS5JTl9GUkFNRVNFVDtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuU0VMRUNUOiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3Jlc2V0SW5zZXJ0aW9uTW9kZUZvclNlbGVjdChpKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuVEVNUExBVEU6IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnNlcnRpb25Nb2RlID0gdGhpcy50bXBsSW5zZXJ0aW9uTW9kZVN0YWNrWzBdO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5IVE1MOiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5zZXJ0aW9uTW9kZSA9IHRoaXMuaGVhZEVsZW1lbnQgPyBJbnNlcnRpb25Nb2RlLkFGVEVSX0hFQUQgOiBJbnNlcnRpb25Nb2RlLkJFRk9SRV9IRUFEO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5URDpcbiAgICAgICAgICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuVEg6IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGkgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmluc2VydGlvbk1vZGUgPSBJbnNlcnRpb25Nb2RlLklOX0NFTEw7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5IRUFEOiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnNlcnRpb25Nb2RlID0gSW5zZXJ0aW9uTW9kZS5JTl9IRUFEO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmluc2VydGlvbk1vZGUgPSBJbnNlcnRpb25Nb2RlLklOX0JPRFk7XG4gICAgfVxuICAgIF9yZXNldEluc2VydGlvbk1vZGVGb3JTZWxlY3Qoc2VsZWN0SWR4KSB7XG4gICAgICAgIGlmIChzZWxlY3RJZHggPiAwKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gc2VsZWN0SWR4IC0gMTsgaSA+IDA7IGktLSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRuID0gdGhpcy5vcGVuRWxlbWVudHMudGFnSURzW2ldO1xuICAgICAgICAgICAgICAgIGlmICh0biA9PT0gaHRtbF9qc18xLlRBR19JRC5URU1QTEFURSkge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodG4gPT09IGh0bWxfanNfMS5UQUdfSUQuVEFCTEUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnNlcnRpb25Nb2RlID0gSW5zZXJ0aW9uTW9kZS5JTl9TRUxFQ1RfSU5fVEFCTEU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pbnNlcnRpb25Nb2RlID0gSW5zZXJ0aW9uTW9kZS5JTl9TRUxFQ1Q7XG4gICAgfVxuICAgIC8vRm9zdGVyIHBhcmVudGluZ1xuICAgIF9pc0VsZW1lbnRDYXVzZXNGb3N0ZXJQYXJlbnRpbmcodG4pIHtcbiAgICAgICAgcmV0dXJuIFRBQkxFX1NUUlVDVFVSRV9UQUdTLmhhcyh0bik7XG4gICAgfVxuICAgIF9zaG91bGRGb3N0ZXJQYXJlbnRPbkluc2VydGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZm9zdGVyUGFyZW50aW5nRW5hYmxlZCAmJiB0aGlzLl9pc0VsZW1lbnRDYXVzZXNGb3N0ZXJQYXJlbnRpbmcodGhpcy5vcGVuRWxlbWVudHMuY3VycmVudFRhZ0lkKTtcbiAgICB9XG4gICAgX2ZpbmRGb3N0ZXJQYXJlbnRpbmdMb2NhdGlvbigpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IHRoaXMub3BlbkVsZW1lbnRzLnN0YWNrVG9wOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgY29uc3Qgb3BlbkVsZW1lbnQgPSB0aGlzLm9wZW5FbGVtZW50cy5pdGVtc1tpXTtcbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5vcGVuRWxlbWVudHMudGFnSURzW2ldKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELlRFTVBMQVRFOiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnRyZWVBZGFwdGVyLmdldE5hbWVzcGFjZVVSSShvcGVuRWxlbWVudCkgPT09IGh0bWxfanNfMS5OUy5IVE1MKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBwYXJlbnQ6IHRoaXMudHJlZUFkYXB0ZXIuZ2V0VGVtcGxhdGVDb250ZW50KG9wZW5FbGVtZW50KSwgYmVmb3JlRWxlbWVudDogbnVsbCB9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuVEFCTEU6IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFyZW50ID0gdGhpcy50cmVlQWRhcHRlci5nZXRQYXJlbnROb2RlKG9wZW5FbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgcGFyZW50LCBiZWZvcmVFbGVtZW50OiBvcGVuRWxlbWVudCB9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7IHBhcmVudDogdGhpcy5vcGVuRWxlbWVudHMuaXRlbXNbaSAtIDFdLCBiZWZvcmVFbGVtZW50OiBudWxsIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgLy8gRG8gbm90aGluZ1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IHBhcmVudDogdGhpcy5vcGVuRWxlbWVudHMuaXRlbXNbMF0sIGJlZm9yZUVsZW1lbnQ6IG51bGwgfTtcbiAgICB9XG4gICAgX2Zvc3RlclBhcmVudEVsZW1lbnQoZWxlbWVudCkge1xuICAgICAgICBjb25zdCBsb2NhdGlvbiA9IHRoaXMuX2ZpbmRGb3N0ZXJQYXJlbnRpbmdMb2NhdGlvbigpO1xuICAgICAgICBpZiAobG9jYXRpb24uYmVmb3JlRWxlbWVudCkge1xuICAgICAgICAgICAgdGhpcy50cmVlQWRhcHRlci5pbnNlcnRCZWZvcmUobG9jYXRpb24ucGFyZW50LCBlbGVtZW50LCBsb2NhdGlvbi5iZWZvcmVFbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudHJlZUFkYXB0ZXIuYXBwZW5kQ2hpbGQobG9jYXRpb24ucGFyZW50LCBlbGVtZW50KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvL1NwZWNpYWwgZWxlbWVudHNcbiAgICBfaXNTcGVjaWFsRWxlbWVudChlbGVtZW50LCBpZCkge1xuICAgICAgICBjb25zdCBucyA9IHRoaXMudHJlZUFkYXB0ZXIuZ2V0TmFtZXNwYWNlVVJJKGVsZW1lbnQpO1xuICAgICAgICByZXR1cm4gaHRtbF9qc18xLlNQRUNJQUxfRUxFTUVOVFNbbnNdLmhhcyhpZCk7XG4gICAgfVxuICAgIG9uQ2hhcmFjdGVyKHRva2VuKSB7XG4gICAgICAgIHRoaXMuc2tpcE5leHROZXdMaW5lID0gZmFsc2U7XG4gICAgICAgIGlmICh0aGlzLnRva2VuaXplci5pbkZvcmVpZ25Ob2RlKSB7XG4gICAgICAgICAgICBjaGFyYWN0ZXJJbkZvcmVpZ25Db250ZW50KHRoaXMsIHRva2VuKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBzd2l0Y2ggKHRoaXMuaW5zZXJ0aW9uTW9kZSkge1xuICAgICAgICAgICAgY2FzZSBJbnNlcnRpb25Nb2RlLklOSVRJQUw6IHtcbiAgICAgICAgICAgICAgICB0b2tlbkluSW5pdGlhbE1vZGUodGhpcywgdG9rZW4pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBJbnNlcnRpb25Nb2RlLkJFRk9SRV9IVE1MOiB7XG4gICAgICAgICAgICAgICAgdG9rZW5CZWZvcmVIdG1sKHRoaXMsIHRva2VuKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgSW5zZXJ0aW9uTW9kZS5CRUZPUkVfSEVBRDoge1xuICAgICAgICAgICAgICAgIHRva2VuQmVmb3JlSGVhZCh0aGlzLCB0b2tlbik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIEluc2VydGlvbk1vZGUuSU5fSEVBRDoge1xuICAgICAgICAgICAgICAgIHRva2VuSW5IZWFkKHRoaXMsIHRva2VuKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgSW5zZXJ0aW9uTW9kZS5JTl9IRUFEX05PX1NDUklQVDoge1xuICAgICAgICAgICAgICAgIHRva2VuSW5IZWFkTm9TY3JpcHQodGhpcywgdG9rZW4pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBJbnNlcnRpb25Nb2RlLkFGVEVSX0hFQUQ6IHtcbiAgICAgICAgICAgICAgICB0b2tlbkFmdGVySGVhZCh0aGlzLCB0b2tlbik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIEluc2VydGlvbk1vZGUuSU5fQk9EWTpcbiAgICAgICAgICAgIGNhc2UgSW5zZXJ0aW9uTW9kZS5JTl9DQVBUSU9OOlxuICAgICAgICAgICAgY2FzZSBJbnNlcnRpb25Nb2RlLklOX0NFTEw6XG4gICAgICAgICAgICBjYXNlIEluc2VydGlvbk1vZGUuSU5fVEVNUExBVEU6IHtcbiAgICAgICAgICAgICAgICBjaGFyYWN0ZXJJbkJvZHkodGhpcywgdG9rZW4pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBJbnNlcnRpb25Nb2RlLlRFWFQ6XG4gICAgICAgICAgICBjYXNlIEluc2VydGlvbk1vZGUuSU5fU0VMRUNUOlxuICAgICAgICAgICAgY2FzZSBJbnNlcnRpb25Nb2RlLklOX1NFTEVDVF9JTl9UQUJMRToge1xuICAgICAgICAgICAgICAgIHRoaXMuX2luc2VydENoYXJhY3RlcnModG9rZW4pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBJbnNlcnRpb25Nb2RlLklOX1RBQkxFOlxuICAgICAgICAgICAgY2FzZSBJbnNlcnRpb25Nb2RlLklOX1RBQkxFX0JPRFk6XG4gICAgICAgICAgICBjYXNlIEluc2VydGlvbk1vZGUuSU5fUk9XOiB7XG4gICAgICAgICAgICAgICAgY2hhcmFjdGVySW5UYWJsZSh0aGlzLCB0b2tlbik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIEluc2VydGlvbk1vZGUuSU5fVEFCTEVfVEVYVDoge1xuICAgICAgICAgICAgICAgIGNoYXJhY3RlckluVGFibGVUZXh0KHRoaXMsIHRva2VuKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgSW5zZXJ0aW9uTW9kZS5JTl9DT0xVTU5fR1JPVVA6IHtcbiAgICAgICAgICAgICAgICB0b2tlbkluQ29sdW1uR3JvdXAodGhpcywgdG9rZW4pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBJbnNlcnRpb25Nb2RlLkFGVEVSX0JPRFk6IHtcbiAgICAgICAgICAgICAgICB0b2tlbkFmdGVyQm9keSh0aGlzLCB0b2tlbik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIEluc2VydGlvbk1vZGUuQUZURVJfQUZURVJfQk9EWToge1xuICAgICAgICAgICAgICAgIHRva2VuQWZ0ZXJBZnRlckJvZHkodGhpcywgdG9rZW4pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIC8vIERvIG5vdGhpbmdcbiAgICAgICAgfVxuICAgIH1cbiAgICBvbk51bGxDaGFyYWN0ZXIodG9rZW4pIHtcbiAgICAgICAgdGhpcy5za2lwTmV4dE5ld0xpbmUgPSBmYWxzZTtcbiAgICAgICAgaWYgKHRoaXMudG9rZW5pemVyLmluRm9yZWlnbk5vZGUpIHtcbiAgICAgICAgICAgIG51bGxDaGFyYWN0ZXJJbkZvcmVpZ25Db250ZW50KHRoaXMsIHRva2VuKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBzd2l0Y2ggKHRoaXMuaW5zZXJ0aW9uTW9kZSkge1xuICAgICAgICAgICAgY2FzZSBJbnNlcnRpb25Nb2RlLklOSVRJQUw6IHtcbiAgICAgICAgICAgICAgICB0b2tlbkluSW5pdGlhbE1vZGUodGhpcywgdG9rZW4pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBJbnNlcnRpb25Nb2RlLkJFRk9SRV9IVE1MOiB7XG4gICAgICAgICAgICAgICAgdG9rZW5CZWZvcmVIdG1sKHRoaXMsIHRva2VuKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgSW5zZXJ0aW9uTW9kZS5CRUZPUkVfSEVBRDoge1xuICAgICAgICAgICAgICAgIHRva2VuQmVmb3JlSGVhZCh0aGlzLCB0b2tlbik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIEluc2VydGlvbk1vZGUuSU5fSEVBRDoge1xuICAgICAgICAgICAgICAgIHRva2VuSW5IZWFkKHRoaXMsIHRva2VuKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgSW5zZXJ0aW9uTW9kZS5JTl9IRUFEX05PX1NDUklQVDoge1xuICAgICAgICAgICAgICAgIHRva2VuSW5IZWFkTm9TY3JpcHQodGhpcywgdG9rZW4pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBJbnNlcnRpb25Nb2RlLkFGVEVSX0hFQUQ6IHtcbiAgICAgICAgICAgICAgICB0b2tlbkFmdGVySGVhZCh0aGlzLCB0b2tlbik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIEluc2VydGlvbk1vZGUuVEVYVDoge1xuICAgICAgICAgICAgICAgIHRoaXMuX2luc2VydENoYXJhY3RlcnModG9rZW4pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBJbnNlcnRpb25Nb2RlLklOX1RBQkxFOlxuICAgICAgICAgICAgY2FzZSBJbnNlcnRpb25Nb2RlLklOX1RBQkxFX0JPRFk6XG4gICAgICAgICAgICBjYXNlIEluc2VydGlvbk1vZGUuSU5fUk9XOiB7XG4gICAgICAgICAgICAgICAgY2hhcmFjdGVySW5UYWJsZSh0aGlzLCB0b2tlbik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIEluc2VydGlvbk1vZGUuSU5fQ09MVU1OX0dST1VQOiB7XG4gICAgICAgICAgICAgICAgdG9rZW5JbkNvbHVtbkdyb3VwKHRoaXMsIHRva2VuKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgSW5zZXJ0aW9uTW9kZS5BRlRFUl9CT0RZOiB7XG4gICAgICAgICAgICAgICAgdG9rZW5BZnRlckJvZHkodGhpcywgdG9rZW4pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBJbnNlcnRpb25Nb2RlLkFGVEVSX0FGVEVSX0JPRFk6IHtcbiAgICAgICAgICAgICAgICB0b2tlbkFmdGVyQWZ0ZXJCb2R5KHRoaXMsIHRva2VuKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAvLyBEbyBub3RoaW5nXG4gICAgICAgIH1cbiAgICB9XG4gICAgb25Db21tZW50KHRva2VuKSB7XG4gICAgICAgIHRoaXMuc2tpcE5leHROZXdMaW5lID0gZmFsc2U7XG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnROb3RJbkhUTUwpIHtcbiAgICAgICAgICAgIGFwcGVuZENvbW1lbnQodGhpcywgdG9rZW4pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHN3aXRjaCAodGhpcy5pbnNlcnRpb25Nb2RlKSB7XG4gICAgICAgICAgICBjYXNlIEluc2VydGlvbk1vZGUuSU5JVElBTDpcbiAgICAgICAgICAgIGNhc2UgSW5zZXJ0aW9uTW9kZS5CRUZPUkVfSFRNTDpcbiAgICAgICAgICAgIGNhc2UgSW5zZXJ0aW9uTW9kZS5CRUZPUkVfSEVBRDpcbiAgICAgICAgICAgIGNhc2UgSW5zZXJ0aW9uTW9kZS5JTl9IRUFEOlxuICAgICAgICAgICAgY2FzZSBJbnNlcnRpb25Nb2RlLklOX0hFQURfTk9fU0NSSVBUOlxuICAgICAgICAgICAgY2FzZSBJbnNlcnRpb25Nb2RlLkFGVEVSX0hFQUQ6XG4gICAgICAgICAgICBjYXNlIEluc2VydGlvbk1vZGUuSU5fQk9EWTpcbiAgICAgICAgICAgIGNhc2UgSW5zZXJ0aW9uTW9kZS5JTl9UQUJMRTpcbiAgICAgICAgICAgIGNhc2UgSW5zZXJ0aW9uTW9kZS5JTl9DQVBUSU9OOlxuICAgICAgICAgICAgY2FzZSBJbnNlcnRpb25Nb2RlLklOX0NPTFVNTl9HUk9VUDpcbiAgICAgICAgICAgIGNhc2UgSW5zZXJ0aW9uTW9kZS5JTl9UQUJMRV9CT0RZOlxuICAgICAgICAgICAgY2FzZSBJbnNlcnRpb25Nb2RlLklOX1JPVzpcbiAgICAgICAgICAgIGNhc2UgSW5zZXJ0aW9uTW9kZS5JTl9DRUxMOlxuICAgICAgICAgICAgY2FzZSBJbnNlcnRpb25Nb2RlLklOX1NFTEVDVDpcbiAgICAgICAgICAgIGNhc2UgSW5zZXJ0aW9uTW9kZS5JTl9TRUxFQ1RfSU5fVEFCTEU6XG4gICAgICAgICAgICBjYXNlIEluc2VydGlvbk1vZGUuSU5fVEVNUExBVEU6XG4gICAgICAgICAgICBjYXNlIEluc2VydGlvbk1vZGUuSU5fRlJBTUVTRVQ6XG4gICAgICAgICAgICBjYXNlIEluc2VydGlvbk1vZGUuQUZURVJfRlJBTUVTRVQ6IHtcbiAgICAgICAgICAgICAgICBhcHBlbmRDb21tZW50KHRoaXMsIHRva2VuKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgSW5zZXJ0aW9uTW9kZS5JTl9UQUJMRV9URVhUOiB7XG4gICAgICAgICAgICAgICAgdG9rZW5JblRhYmxlVGV4dCh0aGlzLCB0b2tlbik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIEluc2VydGlvbk1vZGUuQUZURVJfQk9EWToge1xuICAgICAgICAgICAgICAgIGFwcGVuZENvbW1lbnRUb1Jvb3RIdG1sRWxlbWVudCh0aGlzLCB0b2tlbik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIEluc2VydGlvbk1vZGUuQUZURVJfQUZURVJfQk9EWTpcbiAgICAgICAgICAgIGNhc2UgSW5zZXJ0aW9uTW9kZS5BRlRFUl9BRlRFUl9GUkFNRVNFVDoge1xuICAgICAgICAgICAgICAgIGFwcGVuZENvbW1lbnRUb0RvY3VtZW50KHRoaXMsIHRva2VuKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAvLyBEbyBub3RoaW5nXG4gICAgICAgIH1cbiAgICB9XG4gICAgb25Eb2N0eXBlKHRva2VuKSB7XG4gICAgICAgIHRoaXMuc2tpcE5leHROZXdMaW5lID0gZmFsc2U7XG4gICAgICAgIHN3aXRjaCAodGhpcy5pbnNlcnRpb25Nb2RlKSB7XG4gICAgICAgICAgICBjYXNlIEluc2VydGlvbk1vZGUuSU5JVElBTDoge1xuICAgICAgICAgICAgICAgIGRvY3R5cGVJbkluaXRpYWxNb2RlKHRoaXMsIHRva2VuKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgSW5zZXJ0aW9uTW9kZS5CRUZPUkVfSEVBRDpcbiAgICAgICAgICAgIGNhc2UgSW5zZXJ0aW9uTW9kZS5JTl9IRUFEOlxuICAgICAgICAgICAgY2FzZSBJbnNlcnRpb25Nb2RlLklOX0hFQURfTk9fU0NSSVBUOlxuICAgICAgICAgICAgY2FzZSBJbnNlcnRpb25Nb2RlLkFGVEVSX0hFQUQ6IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9lcnIodG9rZW4sIGVycm9yX2NvZGVzX2pzXzEuRVJSLm1pc3BsYWNlZERvY3R5cGUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBJbnNlcnRpb25Nb2RlLklOX1RBQkxFX1RFWFQ6IHtcbiAgICAgICAgICAgICAgICB0b2tlbkluVGFibGVUZXh0KHRoaXMsIHRva2VuKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAvLyBEbyBub3RoaW5nXG4gICAgICAgIH1cbiAgICB9XG4gICAgb25TdGFydFRhZyh0b2tlbikge1xuICAgICAgICB0aGlzLnNraXBOZXh0TmV3TGluZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLmN1cnJlbnRUb2tlbiA9IHRva2VuO1xuICAgICAgICB0aGlzLl9wcm9jZXNzU3RhcnRUYWcodG9rZW4pO1xuICAgICAgICBpZiAodG9rZW4uc2VsZkNsb3NpbmcgJiYgIXRva2VuLmFja1NlbGZDbG9zaW5nKSB7XG4gICAgICAgICAgICB0aGlzLl9lcnIodG9rZW4sIGVycm9yX2NvZGVzX2pzXzEuRVJSLm5vblZvaWRIdG1sRWxlbWVudFN0YXJ0VGFnV2l0aFRyYWlsaW5nU29saWR1cyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogUHJvY2Vzc2VzIGEgZ2l2ZW4gc3RhcnQgdGFnLlxuICAgICAqXG4gICAgICogYG9uU3RhcnRUYWdgIGNoZWNrcyBpZiBhIHNlbGYtY2xvc2luZyB0YWcgd2FzIHJlY29nbml6ZWQuIFdoZW4gYSB0b2tlblxuICAgICAqIGlzIG1vdmVkIGluYmV0d2VlbiBtdWx0aXBsZSBpbnNlcnRpb24gbW9kZXMsIHRoaXMgY2hlY2sgZm9yIHNlbGYtY2xvc2luZ1xuICAgICAqIGNvdWxkIGxlYWQgdG8gZmFsc2UgcG9zaXRpdmVzLiBUbyBhdm9pZCB0aGlzLCBgX3Byb2Nlc3NTdGFydFRhZ2AgaXMgdXNlZFxuICAgICAqIGZvciBuZXN0ZWQgY2FsbHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdG9rZW4gVGhlIHRva2VuIHRvIHByb2Nlc3MuXG4gICAgICovXG4gICAgX3Byb2Nlc3NTdGFydFRhZyh0b2tlbikge1xuICAgICAgICBpZiAodGhpcy5zaG91bGRQcm9jZXNzU3RhcnRUYWdUb2tlbkluRm9yZWlnbkNvbnRlbnQodG9rZW4pKSB7XG4gICAgICAgICAgICBzdGFydFRhZ0luRm9yZWlnbkNvbnRlbnQodGhpcywgdG9rZW4pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fc3RhcnRUYWdPdXRzaWRlRm9yZWlnbkNvbnRlbnQodG9rZW4pO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9zdGFydFRhZ091dHNpZGVGb3JlaWduQ29udGVudCh0b2tlbikge1xuICAgICAgICBzd2l0Y2ggKHRoaXMuaW5zZXJ0aW9uTW9kZSkge1xuICAgICAgICAgICAgY2FzZSBJbnNlcnRpb25Nb2RlLklOSVRJQUw6IHtcbiAgICAgICAgICAgICAgICB0b2tlbkluSW5pdGlhbE1vZGUodGhpcywgdG9rZW4pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBJbnNlcnRpb25Nb2RlLkJFRk9SRV9IVE1MOiB7XG4gICAgICAgICAgICAgICAgc3RhcnRUYWdCZWZvcmVIdG1sKHRoaXMsIHRva2VuKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgSW5zZXJ0aW9uTW9kZS5CRUZPUkVfSEVBRDoge1xuICAgICAgICAgICAgICAgIHN0YXJ0VGFnQmVmb3JlSGVhZCh0aGlzLCB0b2tlbik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIEluc2VydGlvbk1vZGUuSU5fSEVBRDoge1xuICAgICAgICAgICAgICAgIHN0YXJ0VGFnSW5IZWFkKHRoaXMsIHRva2VuKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgSW5zZXJ0aW9uTW9kZS5JTl9IRUFEX05PX1NDUklQVDoge1xuICAgICAgICAgICAgICAgIHN0YXJ0VGFnSW5IZWFkTm9TY3JpcHQodGhpcywgdG9rZW4pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBJbnNlcnRpb25Nb2RlLkFGVEVSX0hFQUQ6IHtcbiAgICAgICAgICAgICAgICBzdGFydFRhZ0FmdGVySGVhZCh0aGlzLCB0b2tlbik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIEluc2VydGlvbk1vZGUuSU5fQk9EWToge1xuICAgICAgICAgICAgICAgIHN0YXJ0VGFnSW5Cb2R5KHRoaXMsIHRva2VuKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgSW5zZXJ0aW9uTW9kZS5JTl9UQUJMRToge1xuICAgICAgICAgICAgICAgIHN0YXJ0VGFnSW5UYWJsZSh0aGlzLCB0b2tlbik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIEluc2VydGlvbk1vZGUuSU5fVEFCTEVfVEVYVDoge1xuICAgICAgICAgICAgICAgIHRva2VuSW5UYWJsZVRleHQodGhpcywgdG9rZW4pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBJbnNlcnRpb25Nb2RlLklOX0NBUFRJT046IHtcbiAgICAgICAgICAgICAgICBzdGFydFRhZ0luQ2FwdGlvbih0aGlzLCB0b2tlbik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIEluc2VydGlvbk1vZGUuSU5fQ09MVU1OX0dST1VQOiB7XG4gICAgICAgICAgICAgICAgc3RhcnRUYWdJbkNvbHVtbkdyb3VwKHRoaXMsIHRva2VuKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgSW5zZXJ0aW9uTW9kZS5JTl9UQUJMRV9CT0RZOiB7XG4gICAgICAgICAgICAgICAgc3RhcnRUYWdJblRhYmxlQm9keSh0aGlzLCB0b2tlbik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIEluc2VydGlvbk1vZGUuSU5fUk9XOiB7XG4gICAgICAgICAgICAgICAgc3RhcnRUYWdJblJvdyh0aGlzLCB0b2tlbik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIEluc2VydGlvbk1vZGUuSU5fQ0VMTDoge1xuICAgICAgICAgICAgICAgIHN0YXJ0VGFnSW5DZWxsKHRoaXMsIHRva2VuKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgSW5zZXJ0aW9uTW9kZS5JTl9TRUxFQ1Q6IHtcbiAgICAgICAgICAgICAgICBzdGFydFRhZ0luU2VsZWN0KHRoaXMsIHRva2VuKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgSW5zZXJ0aW9uTW9kZS5JTl9TRUxFQ1RfSU5fVEFCTEU6IHtcbiAgICAgICAgICAgICAgICBzdGFydFRhZ0luU2VsZWN0SW5UYWJsZSh0aGlzLCB0b2tlbik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIEluc2VydGlvbk1vZGUuSU5fVEVNUExBVEU6IHtcbiAgICAgICAgICAgICAgICBzdGFydFRhZ0luVGVtcGxhdGUodGhpcywgdG9rZW4pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBJbnNlcnRpb25Nb2RlLkFGVEVSX0JPRFk6IHtcbiAgICAgICAgICAgICAgICBzdGFydFRhZ0FmdGVyQm9keSh0aGlzLCB0b2tlbik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIEluc2VydGlvbk1vZGUuSU5fRlJBTUVTRVQ6IHtcbiAgICAgICAgICAgICAgICBzdGFydFRhZ0luRnJhbWVzZXQodGhpcywgdG9rZW4pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBJbnNlcnRpb25Nb2RlLkFGVEVSX0ZSQU1FU0VUOiB7XG4gICAgICAgICAgICAgICAgc3RhcnRUYWdBZnRlckZyYW1lc2V0KHRoaXMsIHRva2VuKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgSW5zZXJ0aW9uTW9kZS5BRlRFUl9BRlRFUl9CT0RZOiB7XG4gICAgICAgICAgICAgICAgc3RhcnRUYWdBZnRlckFmdGVyQm9keSh0aGlzLCB0b2tlbik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIEluc2VydGlvbk1vZGUuQUZURVJfQUZURVJfRlJBTUVTRVQ6IHtcbiAgICAgICAgICAgICAgICBzdGFydFRhZ0FmdGVyQWZ0ZXJGcmFtZXNldCh0aGlzLCB0b2tlbik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgLy8gRG8gbm90aGluZ1xuICAgICAgICB9XG4gICAgfVxuICAgIG9uRW5kVGFnKHRva2VuKSB7XG4gICAgICAgIHRoaXMuc2tpcE5leHROZXdMaW5lID0gZmFsc2U7XG4gICAgICAgIHRoaXMuY3VycmVudFRva2VuID0gdG9rZW47XG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnROb3RJbkhUTUwpIHtcbiAgICAgICAgICAgIGVuZFRhZ0luRm9yZWlnbkNvbnRlbnQodGhpcywgdG9rZW4pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fZW5kVGFnT3V0c2lkZUZvcmVpZ25Db250ZW50KHRva2VuKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfZW5kVGFnT3V0c2lkZUZvcmVpZ25Db250ZW50KHRva2VuKSB7XG4gICAgICAgIHN3aXRjaCAodGhpcy5pbnNlcnRpb25Nb2RlKSB7XG4gICAgICAgICAgICBjYXNlIEluc2VydGlvbk1vZGUuSU5JVElBTDoge1xuICAgICAgICAgICAgICAgIHRva2VuSW5Jbml0aWFsTW9kZSh0aGlzLCB0b2tlbik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIEluc2VydGlvbk1vZGUuQkVGT1JFX0hUTUw6IHtcbiAgICAgICAgICAgICAgICBlbmRUYWdCZWZvcmVIdG1sKHRoaXMsIHRva2VuKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgSW5zZXJ0aW9uTW9kZS5CRUZPUkVfSEVBRDoge1xuICAgICAgICAgICAgICAgIGVuZFRhZ0JlZm9yZUhlYWQodGhpcywgdG9rZW4pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBJbnNlcnRpb25Nb2RlLklOX0hFQUQ6IHtcbiAgICAgICAgICAgICAgICBlbmRUYWdJbkhlYWQodGhpcywgdG9rZW4pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBJbnNlcnRpb25Nb2RlLklOX0hFQURfTk9fU0NSSVBUOiB7XG4gICAgICAgICAgICAgICAgZW5kVGFnSW5IZWFkTm9TY3JpcHQodGhpcywgdG9rZW4pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBJbnNlcnRpb25Nb2RlLkFGVEVSX0hFQUQ6IHtcbiAgICAgICAgICAgICAgICBlbmRUYWdBZnRlckhlYWQodGhpcywgdG9rZW4pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBJbnNlcnRpb25Nb2RlLklOX0JPRFk6IHtcbiAgICAgICAgICAgICAgICBlbmRUYWdJbkJvZHkodGhpcywgdG9rZW4pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBJbnNlcnRpb25Nb2RlLlRFWFQ6IHtcbiAgICAgICAgICAgICAgICBlbmRUYWdJblRleHQodGhpcywgdG9rZW4pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBJbnNlcnRpb25Nb2RlLklOX1RBQkxFOiB7XG4gICAgICAgICAgICAgICAgZW5kVGFnSW5UYWJsZSh0aGlzLCB0b2tlbik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIEluc2VydGlvbk1vZGUuSU5fVEFCTEVfVEVYVDoge1xuICAgICAgICAgICAgICAgIHRva2VuSW5UYWJsZVRleHQodGhpcywgdG9rZW4pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBJbnNlcnRpb25Nb2RlLklOX0NBUFRJT046IHtcbiAgICAgICAgICAgICAgICBlbmRUYWdJbkNhcHRpb24odGhpcywgdG9rZW4pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBJbnNlcnRpb25Nb2RlLklOX0NPTFVNTl9HUk9VUDoge1xuICAgICAgICAgICAgICAgIGVuZFRhZ0luQ29sdW1uR3JvdXAodGhpcywgdG9rZW4pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBJbnNlcnRpb25Nb2RlLklOX1RBQkxFX0JPRFk6IHtcbiAgICAgICAgICAgICAgICBlbmRUYWdJblRhYmxlQm9keSh0aGlzLCB0b2tlbik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIEluc2VydGlvbk1vZGUuSU5fUk9XOiB7XG4gICAgICAgICAgICAgICAgZW5kVGFnSW5Sb3codGhpcywgdG9rZW4pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBJbnNlcnRpb25Nb2RlLklOX0NFTEw6IHtcbiAgICAgICAgICAgICAgICBlbmRUYWdJbkNlbGwodGhpcywgdG9rZW4pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBJbnNlcnRpb25Nb2RlLklOX1NFTEVDVDoge1xuICAgICAgICAgICAgICAgIGVuZFRhZ0luU2VsZWN0KHRoaXMsIHRva2VuKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgSW5zZXJ0aW9uTW9kZS5JTl9TRUxFQ1RfSU5fVEFCTEU6IHtcbiAgICAgICAgICAgICAgICBlbmRUYWdJblNlbGVjdEluVGFibGUodGhpcywgdG9rZW4pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBJbnNlcnRpb25Nb2RlLklOX1RFTVBMQVRFOiB7XG4gICAgICAgICAgICAgICAgZW5kVGFnSW5UZW1wbGF0ZSh0aGlzLCB0b2tlbik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIEluc2VydGlvbk1vZGUuQUZURVJfQk9EWToge1xuICAgICAgICAgICAgICAgIGVuZFRhZ0FmdGVyQm9keSh0aGlzLCB0b2tlbik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIEluc2VydGlvbk1vZGUuSU5fRlJBTUVTRVQ6IHtcbiAgICAgICAgICAgICAgICBlbmRUYWdJbkZyYW1lc2V0KHRoaXMsIHRva2VuKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgSW5zZXJ0aW9uTW9kZS5BRlRFUl9GUkFNRVNFVDoge1xuICAgICAgICAgICAgICAgIGVuZFRhZ0FmdGVyRnJhbWVzZXQodGhpcywgdG9rZW4pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBJbnNlcnRpb25Nb2RlLkFGVEVSX0FGVEVSX0JPRFk6IHtcbiAgICAgICAgICAgICAgICB0b2tlbkFmdGVyQWZ0ZXJCb2R5KHRoaXMsIHRva2VuKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAvLyBEbyBub3RoaW5nXG4gICAgICAgIH1cbiAgICB9XG4gICAgb25Fb2YodG9rZW4pIHtcbiAgICAgICAgc3dpdGNoICh0aGlzLmluc2VydGlvbk1vZGUpIHtcbiAgICAgICAgICAgIGNhc2UgSW5zZXJ0aW9uTW9kZS5JTklUSUFMOiB7XG4gICAgICAgICAgICAgICAgdG9rZW5JbkluaXRpYWxNb2RlKHRoaXMsIHRva2VuKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgSW5zZXJ0aW9uTW9kZS5CRUZPUkVfSFRNTDoge1xuICAgICAgICAgICAgICAgIHRva2VuQmVmb3JlSHRtbCh0aGlzLCB0b2tlbik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIEluc2VydGlvbk1vZGUuQkVGT1JFX0hFQUQ6IHtcbiAgICAgICAgICAgICAgICB0b2tlbkJlZm9yZUhlYWQodGhpcywgdG9rZW4pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBJbnNlcnRpb25Nb2RlLklOX0hFQUQ6IHtcbiAgICAgICAgICAgICAgICB0b2tlbkluSGVhZCh0aGlzLCB0b2tlbik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIEluc2VydGlvbk1vZGUuSU5fSEVBRF9OT19TQ1JJUFQ6IHtcbiAgICAgICAgICAgICAgICB0b2tlbkluSGVhZE5vU2NyaXB0KHRoaXMsIHRva2VuKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgSW5zZXJ0aW9uTW9kZS5BRlRFUl9IRUFEOiB7XG4gICAgICAgICAgICAgICAgdG9rZW5BZnRlckhlYWQodGhpcywgdG9rZW4pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBJbnNlcnRpb25Nb2RlLklOX0JPRFk6XG4gICAgICAgICAgICBjYXNlIEluc2VydGlvbk1vZGUuSU5fVEFCTEU6XG4gICAgICAgICAgICBjYXNlIEluc2VydGlvbk1vZGUuSU5fQ0FQVElPTjpcbiAgICAgICAgICAgIGNhc2UgSW5zZXJ0aW9uTW9kZS5JTl9DT0xVTU5fR1JPVVA6XG4gICAgICAgICAgICBjYXNlIEluc2VydGlvbk1vZGUuSU5fVEFCTEVfQk9EWTpcbiAgICAgICAgICAgIGNhc2UgSW5zZXJ0aW9uTW9kZS5JTl9ST1c6XG4gICAgICAgICAgICBjYXNlIEluc2VydGlvbk1vZGUuSU5fQ0VMTDpcbiAgICAgICAgICAgIGNhc2UgSW5zZXJ0aW9uTW9kZS5JTl9TRUxFQ1Q6XG4gICAgICAgICAgICBjYXNlIEluc2VydGlvbk1vZGUuSU5fU0VMRUNUX0lOX1RBQkxFOiB7XG4gICAgICAgICAgICAgICAgZW9mSW5Cb2R5KHRoaXMsIHRva2VuKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgSW5zZXJ0aW9uTW9kZS5URVhUOiB7XG4gICAgICAgICAgICAgICAgZW9mSW5UZXh0KHRoaXMsIHRva2VuKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgSW5zZXJ0aW9uTW9kZS5JTl9UQUJMRV9URVhUOiB7XG4gICAgICAgICAgICAgICAgdG9rZW5JblRhYmxlVGV4dCh0aGlzLCB0b2tlbik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIEluc2VydGlvbk1vZGUuSU5fVEVNUExBVEU6IHtcbiAgICAgICAgICAgICAgICBlb2ZJblRlbXBsYXRlKHRoaXMsIHRva2VuKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgSW5zZXJ0aW9uTW9kZS5BRlRFUl9CT0RZOlxuICAgICAgICAgICAgY2FzZSBJbnNlcnRpb25Nb2RlLklOX0ZSQU1FU0VUOlxuICAgICAgICAgICAgY2FzZSBJbnNlcnRpb25Nb2RlLkFGVEVSX0ZSQU1FU0VUOlxuICAgICAgICAgICAgY2FzZSBJbnNlcnRpb25Nb2RlLkFGVEVSX0FGVEVSX0JPRFk6XG4gICAgICAgICAgICBjYXNlIEluc2VydGlvbk1vZGUuQUZURVJfQUZURVJfRlJBTUVTRVQ6IHtcbiAgICAgICAgICAgICAgICBzdG9wUGFyc2luZyh0aGlzLCB0b2tlbik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgLy8gRG8gbm90aGluZ1xuICAgICAgICB9XG4gICAgfVxuICAgIG9uV2hpdGVzcGFjZUNoYXJhY3Rlcih0b2tlbikge1xuICAgICAgICBpZiAodGhpcy5za2lwTmV4dE5ld0xpbmUpIHtcbiAgICAgICAgICAgIHRoaXMuc2tpcE5leHROZXdMaW5lID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAodG9rZW4uY2hhcnMuY2hhckNvZGVBdCgwKSA9PT0gdW5pY29kZS5DT0RFX1BPSU5UUy5MSU5FX0ZFRUQpIHtcbiAgICAgICAgICAgICAgICBpZiAodG9rZW4uY2hhcnMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdG9rZW4uY2hhcnMgPSB0b2tlbi5jaGFycy5zdWJzdHIoMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMudG9rZW5pemVyLmluRm9yZWlnbk5vZGUpIHtcbiAgICAgICAgICAgIHRoaXMuX2luc2VydENoYXJhY3RlcnModG9rZW4pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHN3aXRjaCAodGhpcy5pbnNlcnRpb25Nb2RlKSB7XG4gICAgICAgICAgICBjYXNlIEluc2VydGlvbk1vZGUuSU5fSEVBRDpcbiAgICAgICAgICAgIGNhc2UgSW5zZXJ0aW9uTW9kZS5JTl9IRUFEX05PX1NDUklQVDpcbiAgICAgICAgICAgIGNhc2UgSW5zZXJ0aW9uTW9kZS5BRlRFUl9IRUFEOlxuICAgICAgICAgICAgY2FzZSBJbnNlcnRpb25Nb2RlLlRFWFQ6XG4gICAgICAgICAgICBjYXNlIEluc2VydGlvbk1vZGUuSU5fQ09MVU1OX0dST1VQOlxuICAgICAgICAgICAgY2FzZSBJbnNlcnRpb25Nb2RlLklOX1NFTEVDVDpcbiAgICAgICAgICAgIGNhc2UgSW5zZXJ0aW9uTW9kZS5JTl9TRUxFQ1RfSU5fVEFCTEU6XG4gICAgICAgICAgICBjYXNlIEluc2VydGlvbk1vZGUuSU5fRlJBTUVTRVQ6XG4gICAgICAgICAgICBjYXNlIEluc2VydGlvbk1vZGUuQUZURVJfRlJBTUVTRVQ6IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9pbnNlcnRDaGFyYWN0ZXJzKHRva2VuKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgSW5zZXJ0aW9uTW9kZS5JTl9CT0RZOlxuICAgICAgICAgICAgY2FzZSBJbnNlcnRpb25Nb2RlLklOX0NBUFRJT046XG4gICAgICAgICAgICBjYXNlIEluc2VydGlvbk1vZGUuSU5fQ0VMTDpcbiAgICAgICAgICAgIGNhc2UgSW5zZXJ0aW9uTW9kZS5JTl9URU1QTEFURTpcbiAgICAgICAgICAgIGNhc2UgSW5zZXJ0aW9uTW9kZS5BRlRFUl9CT0RZOlxuICAgICAgICAgICAgY2FzZSBJbnNlcnRpb25Nb2RlLkFGVEVSX0FGVEVSX0JPRFk6XG4gICAgICAgICAgICBjYXNlIEluc2VydGlvbk1vZGUuQUZURVJfQUZURVJfRlJBTUVTRVQ6IHtcbiAgICAgICAgICAgICAgICB3aGl0ZXNwYWNlQ2hhcmFjdGVySW5Cb2R5KHRoaXMsIHRva2VuKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgSW5zZXJ0aW9uTW9kZS5JTl9UQUJMRTpcbiAgICAgICAgICAgIGNhc2UgSW5zZXJ0aW9uTW9kZS5JTl9UQUJMRV9CT0RZOlxuICAgICAgICAgICAgY2FzZSBJbnNlcnRpb25Nb2RlLklOX1JPVzoge1xuICAgICAgICAgICAgICAgIGNoYXJhY3RlckluVGFibGUodGhpcywgdG9rZW4pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBJbnNlcnRpb25Nb2RlLklOX1RBQkxFX1RFWFQ6IHtcbiAgICAgICAgICAgICAgICB3aGl0ZXNwYWNlQ2hhcmFjdGVySW5UYWJsZVRleHQodGhpcywgdG9rZW4pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIC8vIERvIG5vdGhpbmdcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuUGFyc2VyID0gUGFyc2VyO1xuLy9BZG9wdGlvbiBhZ2VuY3kgYWxnb3JpdGhtXG4vLyhzZWU6IGh0dHA6Ly93d3cud2hhdHdnLm9yZy9zcGVjcy93ZWItYXBwcy9jdXJyZW50LXdvcmsvbXVsdGlwYWdlL3RyZWUtY29uc3RydWN0aW9uLmh0bWwjYWRvcHRpb25BZ2VuY3kpXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy9TdGVwcyA1LTggb2YgdGhlIGFsZ29yaXRobVxuZnVuY3Rpb24gYWFPYnRhaW5Gb3JtYXR0aW5nRWxlbWVudEVudHJ5KHAsIHRva2VuKSB7XG4gICAgbGV0IGZvcm1hdHRpbmdFbGVtZW50RW50cnkgPSBwLmFjdGl2ZUZvcm1hdHRpbmdFbGVtZW50cy5nZXRFbGVtZW50RW50cnlJblNjb3BlV2l0aFRhZ05hbWUodG9rZW4udGFnTmFtZSk7XG4gICAgaWYgKGZvcm1hdHRpbmdFbGVtZW50RW50cnkpIHtcbiAgICAgICAgaWYgKCFwLm9wZW5FbGVtZW50cy5jb250YWlucyhmb3JtYXR0aW5nRWxlbWVudEVudHJ5LmVsZW1lbnQpKSB7XG4gICAgICAgICAgICBwLmFjdGl2ZUZvcm1hdHRpbmdFbGVtZW50cy5yZW1vdmVFbnRyeShmb3JtYXR0aW5nRWxlbWVudEVudHJ5KTtcbiAgICAgICAgICAgIGZvcm1hdHRpbmdFbGVtZW50RW50cnkgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFwLm9wZW5FbGVtZW50cy5oYXNJblNjb3BlKHRva2VuLnRhZ0lEKSkge1xuICAgICAgICAgICAgZm9ybWF0dGluZ0VsZW1lbnRFbnRyeSA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGdlbmVyaWNFbmRUYWdJbkJvZHkocCwgdG9rZW4pO1xuICAgIH1cbiAgICByZXR1cm4gZm9ybWF0dGluZ0VsZW1lbnRFbnRyeTtcbn1cbi8vU3RlcHMgOSBhbmQgMTAgb2YgdGhlIGFsZ29yaXRobVxuZnVuY3Rpb24gYWFPYnRhaW5GdXJ0aGVzdEJsb2NrKHAsIGZvcm1hdHRpbmdFbGVtZW50RW50cnkpIHtcbiAgICBsZXQgZnVydGhlc3RCbG9jayA9IG51bGw7XG4gICAgbGV0IGlkeCA9IHAub3BlbkVsZW1lbnRzLnN0YWNrVG9wO1xuICAgIGZvciAoOyBpZHggPj0gMDsgaWR4LS0pIHtcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IHAub3BlbkVsZW1lbnRzLml0ZW1zW2lkeF07XG4gICAgICAgIGlmIChlbGVtZW50ID09PSBmb3JtYXR0aW5nRWxlbWVudEVudHJ5LmVsZW1lbnQpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwLl9pc1NwZWNpYWxFbGVtZW50KGVsZW1lbnQsIHAub3BlbkVsZW1lbnRzLnRhZ0lEc1tpZHhdKSkge1xuICAgICAgICAgICAgZnVydGhlc3RCbG9jayA9IGVsZW1lbnQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFmdXJ0aGVzdEJsb2NrKSB7XG4gICAgICAgIHAub3BlbkVsZW1lbnRzLnNob3J0ZW5Ub0xlbmd0aChpZHggPCAwID8gMCA6IGlkeCk7XG4gICAgICAgIHAuYWN0aXZlRm9ybWF0dGluZ0VsZW1lbnRzLnJlbW92ZUVudHJ5KGZvcm1hdHRpbmdFbGVtZW50RW50cnkpO1xuICAgIH1cbiAgICByZXR1cm4gZnVydGhlc3RCbG9jaztcbn1cbi8vU3RlcCAxMyBvZiB0aGUgYWxnb3JpdGhtXG5mdW5jdGlvbiBhYUlubmVyTG9vcChwLCBmdXJ0aGVzdEJsb2NrLCBmb3JtYXR0aW5nRWxlbWVudCkge1xuICAgIGxldCBsYXN0RWxlbWVudCA9IGZ1cnRoZXN0QmxvY2s7XG4gICAgbGV0IG5leHRFbGVtZW50ID0gcC5vcGVuRWxlbWVudHMuZ2V0Q29tbW9uQW5jZXN0b3IoZnVydGhlc3RCbG9jayk7XG4gICAgZm9yIChsZXQgaSA9IDAsIGVsZW1lbnQgPSBuZXh0RWxlbWVudDsgZWxlbWVudCAhPT0gZm9ybWF0dGluZ0VsZW1lbnQ7IGkrKywgZWxlbWVudCA9IG5leHRFbGVtZW50KSB7XG4gICAgICAgIC8vTk9URTogc3RvcmUgdGhlIG5leHQgZWxlbWVudCBmb3IgdGhlIG5leHQgbG9vcCBpdGVyYXRpb24gKGl0IG1heSBiZSBkZWxldGVkIGZyb20gdGhlIHN0YWNrIGJ5IHN0ZXAgOS41KVxuICAgICAgICBuZXh0RWxlbWVudCA9IHAub3BlbkVsZW1lbnRzLmdldENvbW1vbkFuY2VzdG9yKGVsZW1lbnQpO1xuICAgICAgICBjb25zdCBlbGVtZW50RW50cnkgPSBwLmFjdGl2ZUZvcm1hdHRpbmdFbGVtZW50cy5nZXRFbGVtZW50RW50cnkoZWxlbWVudCk7XG4gICAgICAgIGNvbnN0IGNvdW50ZXJPdmVyZmxvdyA9IGVsZW1lbnRFbnRyeSAmJiBpID49IEFBX0lOTkVSX0xPT1BfSVRFUjtcbiAgICAgICAgY29uc3Qgc2hvdWxkUmVtb3ZlRnJvbU9wZW5FbGVtZW50cyA9ICFlbGVtZW50RW50cnkgfHwgY291bnRlck92ZXJmbG93O1xuICAgICAgICBpZiAoc2hvdWxkUmVtb3ZlRnJvbU9wZW5FbGVtZW50cykge1xuICAgICAgICAgICAgaWYgKGNvdW50ZXJPdmVyZmxvdykge1xuICAgICAgICAgICAgICAgIHAuYWN0aXZlRm9ybWF0dGluZ0VsZW1lbnRzLnJlbW92ZUVudHJ5KGVsZW1lbnRFbnRyeSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwLm9wZW5FbGVtZW50cy5yZW1vdmUoZWxlbWVudCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBlbGVtZW50ID0gYWFSZWNyZWF0ZUVsZW1lbnRGcm9tRW50cnkocCwgZWxlbWVudEVudHJ5KTtcbiAgICAgICAgICAgIGlmIChsYXN0RWxlbWVudCA9PT0gZnVydGhlc3RCbG9jaykge1xuICAgICAgICAgICAgICAgIHAuYWN0aXZlRm9ybWF0dGluZ0VsZW1lbnRzLmJvb2ttYXJrID0gZWxlbWVudEVudHJ5O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcC50cmVlQWRhcHRlci5kZXRhY2hOb2RlKGxhc3RFbGVtZW50KTtcbiAgICAgICAgICAgIHAudHJlZUFkYXB0ZXIuYXBwZW5kQ2hpbGQoZWxlbWVudCwgbGFzdEVsZW1lbnQpO1xuICAgICAgICAgICAgbGFzdEVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBsYXN0RWxlbWVudDtcbn1cbi8vU3RlcCAxMy43IG9mIHRoZSBhbGdvcml0aG1cbmZ1bmN0aW9uIGFhUmVjcmVhdGVFbGVtZW50RnJvbUVudHJ5KHAsIGVsZW1lbnRFbnRyeSkge1xuICAgIGNvbnN0IG5zID0gcC50cmVlQWRhcHRlci5nZXROYW1lc3BhY2VVUkkoZWxlbWVudEVudHJ5LmVsZW1lbnQpO1xuICAgIGNvbnN0IG5ld0VsZW1lbnQgPSBwLnRyZWVBZGFwdGVyLmNyZWF0ZUVsZW1lbnQoZWxlbWVudEVudHJ5LnRva2VuLnRhZ05hbWUsIG5zLCBlbGVtZW50RW50cnkudG9rZW4uYXR0cnMpO1xuICAgIHAub3BlbkVsZW1lbnRzLnJlcGxhY2UoZWxlbWVudEVudHJ5LmVsZW1lbnQsIG5ld0VsZW1lbnQpO1xuICAgIGVsZW1lbnRFbnRyeS5lbGVtZW50ID0gbmV3RWxlbWVudDtcbiAgICByZXR1cm4gbmV3RWxlbWVudDtcbn1cbi8vU3RlcCAxNCBvZiB0aGUgYWxnb3JpdGhtXG5mdW5jdGlvbiBhYUluc2VydExhc3ROb2RlSW5Db21tb25BbmNlc3RvcihwLCBjb21tb25BbmNlc3RvciwgbGFzdEVsZW1lbnQpIHtcbiAgICBjb25zdCB0biA9IHAudHJlZUFkYXB0ZXIuZ2V0VGFnTmFtZShjb21tb25BbmNlc3Rvcik7XG4gICAgY29uc3QgdGlkID0gKDAsIGh0bWxfanNfMS5nZXRUYWdJRCkodG4pO1xuICAgIGlmIChwLl9pc0VsZW1lbnRDYXVzZXNGb3N0ZXJQYXJlbnRpbmcodGlkKSkge1xuICAgICAgICBwLl9mb3N0ZXJQYXJlbnRFbGVtZW50KGxhc3RFbGVtZW50KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IG5zID0gcC50cmVlQWRhcHRlci5nZXROYW1lc3BhY2VVUkkoY29tbW9uQW5jZXN0b3IpO1xuICAgICAgICBpZiAodGlkID09PSBodG1sX2pzXzEuVEFHX0lELlRFTVBMQVRFICYmIG5zID09PSBodG1sX2pzXzEuTlMuSFRNTCkge1xuICAgICAgICAgICAgY29tbW9uQW5jZXN0b3IgPSBwLnRyZWVBZGFwdGVyLmdldFRlbXBsYXRlQ29udGVudChjb21tb25BbmNlc3Rvcik7XG4gICAgICAgIH1cbiAgICAgICAgcC50cmVlQWRhcHRlci5hcHBlbmRDaGlsZChjb21tb25BbmNlc3RvciwgbGFzdEVsZW1lbnQpO1xuICAgIH1cbn1cbi8vU3RlcHMgMTUtMTkgb2YgdGhlIGFsZ29yaXRobVxuZnVuY3Rpb24gYWFSZXBsYWNlRm9ybWF0dGluZ0VsZW1lbnQocCwgZnVydGhlc3RCbG9jaywgZm9ybWF0dGluZ0VsZW1lbnRFbnRyeSkge1xuICAgIGNvbnN0IG5zID0gcC50cmVlQWRhcHRlci5nZXROYW1lc3BhY2VVUkkoZm9ybWF0dGluZ0VsZW1lbnRFbnRyeS5lbGVtZW50KTtcbiAgICBjb25zdCB7IHRva2VuIH0gPSBmb3JtYXR0aW5nRWxlbWVudEVudHJ5O1xuICAgIGNvbnN0IG5ld0VsZW1lbnQgPSBwLnRyZWVBZGFwdGVyLmNyZWF0ZUVsZW1lbnQodG9rZW4udGFnTmFtZSwgbnMsIHRva2VuLmF0dHJzKTtcbiAgICBwLl9hZG9wdE5vZGVzKGZ1cnRoZXN0QmxvY2ssIG5ld0VsZW1lbnQpO1xuICAgIHAudHJlZUFkYXB0ZXIuYXBwZW5kQ2hpbGQoZnVydGhlc3RCbG9jaywgbmV3RWxlbWVudCk7XG4gICAgcC5hY3RpdmVGb3JtYXR0aW5nRWxlbWVudHMuaW5zZXJ0RWxlbWVudEFmdGVyQm9va21hcmsobmV3RWxlbWVudCwgdG9rZW4pO1xuICAgIHAuYWN0aXZlRm9ybWF0dGluZ0VsZW1lbnRzLnJlbW92ZUVudHJ5KGZvcm1hdHRpbmdFbGVtZW50RW50cnkpO1xuICAgIHAub3BlbkVsZW1lbnRzLnJlbW92ZShmb3JtYXR0aW5nRWxlbWVudEVudHJ5LmVsZW1lbnQpO1xuICAgIHAub3BlbkVsZW1lbnRzLmluc2VydEFmdGVyKGZ1cnRoZXN0QmxvY2ssIG5ld0VsZW1lbnQsIHRva2VuLnRhZ0lEKTtcbn1cbi8vQWxnb3JpdGhtIGVudHJ5IHBvaW50XG5mdW5jdGlvbiBjYWxsQWRvcHRpb25BZ2VuY3kocCwgdG9rZW4pIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IEFBX09VVEVSX0xPT1BfSVRFUjsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGZvcm1hdHRpbmdFbGVtZW50RW50cnkgPSBhYU9idGFpbkZvcm1hdHRpbmdFbGVtZW50RW50cnkocCwgdG9rZW4pO1xuICAgICAgICBpZiAoIWZvcm1hdHRpbmdFbGVtZW50RW50cnkpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGZ1cnRoZXN0QmxvY2sgPSBhYU9idGFpbkZ1cnRoZXN0QmxvY2socCwgZm9ybWF0dGluZ0VsZW1lbnRFbnRyeSk7XG4gICAgICAgIGlmICghZnVydGhlc3RCbG9jaykge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgcC5hY3RpdmVGb3JtYXR0aW5nRWxlbWVudHMuYm9va21hcmsgPSBmb3JtYXR0aW5nRWxlbWVudEVudHJ5O1xuICAgICAgICBjb25zdCBsYXN0RWxlbWVudCA9IGFhSW5uZXJMb29wKHAsIGZ1cnRoZXN0QmxvY2ssIGZvcm1hdHRpbmdFbGVtZW50RW50cnkuZWxlbWVudCk7XG4gICAgICAgIGNvbnN0IGNvbW1vbkFuY2VzdG9yID0gcC5vcGVuRWxlbWVudHMuZ2V0Q29tbW9uQW5jZXN0b3IoZm9ybWF0dGluZ0VsZW1lbnRFbnRyeS5lbGVtZW50KTtcbiAgICAgICAgcC50cmVlQWRhcHRlci5kZXRhY2hOb2RlKGxhc3RFbGVtZW50KTtcbiAgICAgICAgaWYgKGNvbW1vbkFuY2VzdG9yKVxuICAgICAgICAgICAgYWFJbnNlcnRMYXN0Tm9kZUluQ29tbW9uQW5jZXN0b3IocCwgY29tbW9uQW5jZXN0b3IsIGxhc3RFbGVtZW50KTtcbiAgICAgICAgYWFSZXBsYWNlRm9ybWF0dGluZ0VsZW1lbnQocCwgZnVydGhlc3RCbG9jaywgZm9ybWF0dGluZ0VsZW1lbnRFbnRyeSk7XG4gICAgfVxufVxuLy9HZW5lcmljIHRva2VuIGhhbmRsZXJzXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuZnVuY3Rpb24gYXBwZW5kQ29tbWVudChwLCB0b2tlbikge1xuICAgIHAuX2FwcGVuZENvbW1lbnROb2RlKHRva2VuLCBwLm9wZW5FbGVtZW50cy5jdXJyZW50VG1wbENvbnRlbnRPck5vZGUpO1xufVxuZnVuY3Rpb24gYXBwZW5kQ29tbWVudFRvUm9vdEh0bWxFbGVtZW50KHAsIHRva2VuKSB7XG4gICAgcC5fYXBwZW5kQ29tbWVudE5vZGUodG9rZW4sIHAub3BlbkVsZW1lbnRzLml0ZW1zWzBdKTtcbn1cbmZ1bmN0aW9uIGFwcGVuZENvbW1lbnRUb0RvY3VtZW50KHAsIHRva2VuKSB7XG4gICAgcC5fYXBwZW5kQ29tbWVudE5vZGUodG9rZW4sIHAuZG9jdW1lbnQpO1xufVxuZnVuY3Rpb24gc3RvcFBhcnNpbmcocCwgdG9rZW4pIHtcbiAgICBwLnN0b3BwZWQgPSB0cnVlO1xuICAgIC8vIE5PVEU6IFNldCBlbmQgbG9jYXRpb25zIGZvciBlbGVtZW50cyB0aGF0IHJlbWFpbiBvbiB0aGUgb3BlbiBlbGVtZW50IHN0YWNrLlxuICAgIGlmICh0b2tlbi5sb2NhdGlvbikge1xuICAgICAgICAvLyBOT1RFOiBJZiB3ZSBhcmUgbm90IGluIGEgZnJhZ21lbnQsIGBodG1sYCBhbmQgYGJvZHlgIHdpbGwgc3RheSBvbiB0aGUgc3RhY2suXG4gICAgICAgIC8vIFRoaXMgaXMgYSBwcm9ibGVtLCBhcyB3ZSBtaWdodCBvdmVyd3JpdGUgdGhlaXIgZW5kIHBvc2l0aW9uIGhlcmUuXG4gICAgICAgIGNvbnN0IHRhcmdldCA9IHAuZnJhZ21lbnRDb250ZXh0ID8gMCA6IDI7XG4gICAgICAgIGZvciAobGV0IGkgPSBwLm9wZW5FbGVtZW50cy5zdGFja1RvcDsgaSA+PSB0YXJnZXQ7IGktLSkge1xuICAgICAgICAgICAgcC5fc2V0RW5kTG9jYXRpb24ocC5vcGVuRWxlbWVudHMuaXRlbXNbaV0sIHRva2VuKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBIYW5kbGUgYGh0bWxgIGFuZCBgYm9keWBcbiAgICAgICAgaWYgKCFwLmZyYWdtZW50Q29udGV4dCAmJiBwLm9wZW5FbGVtZW50cy5zdGFja1RvcCA+PSAwKSB7XG4gICAgICAgICAgICBjb25zdCBodG1sRWxlbWVudCA9IHAub3BlbkVsZW1lbnRzLml0ZW1zWzBdO1xuICAgICAgICAgICAgY29uc3QgaHRtbExvY2F0aW9uID0gcC50cmVlQWRhcHRlci5nZXROb2RlU291cmNlQ29kZUxvY2F0aW9uKGh0bWxFbGVtZW50KTtcbiAgICAgICAgICAgIGlmIChodG1sTG9jYXRpb24gJiYgIWh0bWxMb2NhdGlvbi5lbmRUYWcpIHtcbiAgICAgICAgICAgICAgICBwLl9zZXRFbmRMb2NhdGlvbihodG1sRWxlbWVudCwgdG9rZW4pO1xuICAgICAgICAgICAgICAgIGlmIChwLm9wZW5FbGVtZW50cy5zdGFja1RvcCA+PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGJvZHlFbGVtZW50ID0gcC5vcGVuRWxlbWVudHMuaXRlbXNbMV07XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGJvZHlMb2NhdGlvbiA9IHAudHJlZUFkYXB0ZXIuZ2V0Tm9kZVNvdXJjZUNvZGVMb2NhdGlvbihib2R5RWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChib2R5TG9jYXRpb24gJiYgIWJvZHlMb2NhdGlvbi5lbmRUYWcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHAuX3NldEVuZExvY2F0aW9uKGJvZHlFbGVtZW50LCB0b2tlbik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG4vLyBUaGUgXCJpbml0aWFsXCIgaW5zZXJ0aW9uIG1vZGVcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5mdW5jdGlvbiBkb2N0eXBlSW5Jbml0aWFsTW9kZShwLCB0b2tlbikge1xuICAgIHAuX3NldERvY3VtZW50VHlwZSh0b2tlbik7XG4gICAgY29uc3QgbW9kZSA9IHRva2VuLmZvcmNlUXVpcmtzID8gaHRtbF9qc18xLkRPQ1VNRU5UX01PREUuUVVJUktTIDogZG9jdHlwZS5nZXREb2N1bWVudE1vZGUodG9rZW4pO1xuICAgIGlmICghZG9jdHlwZS5pc0NvbmZvcm1pbmcodG9rZW4pKSB7XG4gICAgICAgIHAuX2Vycih0b2tlbiwgZXJyb3JfY29kZXNfanNfMS5FUlIubm9uQ29uZm9ybWluZ0RvY3R5cGUpO1xuICAgIH1cbiAgICBwLnRyZWVBZGFwdGVyLnNldERvY3VtZW50TW9kZShwLmRvY3VtZW50LCBtb2RlKTtcbiAgICBwLmluc2VydGlvbk1vZGUgPSBJbnNlcnRpb25Nb2RlLkJFRk9SRV9IVE1MO1xufVxuZnVuY3Rpb24gdG9rZW5JbkluaXRpYWxNb2RlKHAsIHRva2VuKSB7XG4gICAgcC5fZXJyKHRva2VuLCBlcnJvcl9jb2Rlc19qc18xLkVSUi5taXNzaW5nRG9jdHlwZSwgdHJ1ZSk7XG4gICAgcC50cmVlQWRhcHRlci5zZXREb2N1bWVudE1vZGUocC5kb2N1bWVudCwgaHRtbF9qc18xLkRPQ1VNRU5UX01PREUuUVVJUktTKTtcbiAgICBwLmluc2VydGlvbk1vZGUgPSBJbnNlcnRpb25Nb2RlLkJFRk9SRV9IVE1MO1xuICAgIHAuX3Byb2Nlc3NUb2tlbih0b2tlbik7XG59XG4vLyBUaGUgXCJiZWZvcmUgaHRtbFwiIGluc2VydGlvbiBtb2RlXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuZnVuY3Rpb24gc3RhcnRUYWdCZWZvcmVIdG1sKHAsIHRva2VuKSB7XG4gICAgaWYgKHRva2VuLnRhZ0lEID09PSBodG1sX2pzXzEuVEFHX0lELkhUTUwpIHtcbiAgICAgICAgcC5faW5zZXJ0RWxlbWVudCh0b2tlbiwgaHRtbF9qc18xLk5TLkhUTUwpO1xuICAgICAgICBwLmluc2VydGlvbk1vZGUgPSBJbnNlcnRpb25Nb2RlLkJFRk9SRV9IRUFEO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdG9rZW5CZWZvcmVIdG1sKHAsIHRva2VuKTtcbiAgICB9XG59XG5mdW5jdGlvbiBlbmRUYWdCZWZvcmVIdG1sKHAsIHRva2VuKSB7XG4gICAgY29uc3QgdG4gPSB0b2tlbi50YWdJRDtcbiAgICBpZiAodG4gPT09IGh0bWxfanNfMS5UQUdfSUQuSFRNTCB8fCB0biA9PT0gaHRtbF9qc18xLlRBR19JRC5IRUFEIHx8IHRuID09PSBodG1sX2pzXzEuVEFHX0lELkJPRFkgfHwgdG4gPT09IGh0bWxfanNfMS5UQUdfSUQuQlIpIHtcbiAgICAgICAgdG9rZW5CZWZvcmVIdG1sKHAsIHRva2VuKTtcbiAgICB9XG59XG5mdW5jdGlvbiB0b2tlbkJlZm9yZUh0bWwocCwgdG9rZW4pIHtcbiAgICBwLl9pbnNlcnRGYWtlUm9vdEVsZW1lbnQoKTtcbiAgICBwLmluc2VydGlvbk1vZGUgPSBJbnNlcnRpb25Nb2RlLkJFRk9SRV9IRUFEO1xuICAgIHAuX3Byb2Nlc3NUb2tlbih0b2tlbik7XG59XG4vLyBUaGUgXCJiZWZvcmUgaGVhZFwiIGluc2VydGlvbiBtb2RlXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuZnVuY3Rpb24gc3RhcnRUYWdCZWZvcmVIZWFkKHAsIHRva2VuKSB7XG4gICAgc3dpdGNoICh0b2tlbi50YWdJRCkge1xuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuSFRNTDoge1xuICAgICAgICAgICAgc3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELkhFQUQ6IHtcbiAgICAgICAgICAgIHAuX2luc2VydEVsZW1lbnQodG9rZW4sIGh0bWxfanNfMS5OUy5IVE1MKTtcbiAgICAgICAgICAgIHAuaGVhZEVsZW1lbnQgPSBwLm9wZW5FbGVtZW50cy5jdXJyZW50O1xuICAgICAgICAgICAgcC5pbnNlcnRpb25Nb2RlID0gSW5zZXJ0aW9uTW9kZS5JTl9IRUFEO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgdG9rZW5CZWZvcmVIZWFkKHAsIHRva2VuKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGVuZFRhZ0JlZm9yZUhlYWQocCwgdG9rZW4pIHtcbiAgICBjb25zdCB0biA9IHRva2VuLnRhZ0lEO1xuICAgIGlmICh0biA9PT0gaHRtbF9qc18xLlRBR19JRC5IRUFEIHx8IHRuID09PSBodG1sX2pzXzEuVEFHX0lELkJPRFkgfHwgdG4gPT09IGh0bWxfanNfMS5UQUdfSUQuSFRNTCB8fCB0biA9PT0gaHRtbF9qc18xLlRBR19JRC5CUikge1xuICAgICAgICB0b2tlbkJlZm9yZUhlYWQocCwgdG9rZW4pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcC5fZXJyKHRva2VuLCBlcnJvcl9jb2Rlc19qc18xLkVSUi5lbmRUYWdXaXRob3V0TWF0Y2hpbmdPcGVuRWxlbWVudCk7XG4gICAgfVxufVxuZnVuY3Rpb24gdG9rZW5CZWZvcmVIZWFkKHAsIHRva2VuKSB7XG4gICAgcC5faW5zZXJ0RmFrZUVsZW1lbnQoaHRtbF9qc18xLlRBR19OQU1FUy5IRUFELCBodG1sX2pzXzEuVEFHX0lELkhFQUQpO1xuICAgIHAuaGVhZEVsZW1lbnQgPSBwLm9wZW5FbGVtZW50cy5jdXJyZW50O1xuICAgIHAuaW5zZXJ0aW9uTW9kZSA9IEluc2VydGlvbk1vZGUuSU5fSEVBRDtcbiAgICBwLl9wcm9jZXNzVG9rZW4odG9rZW4pO1xufVxuLy8gVGhlIFwiaW4gaGVhZFwiIGluc2VydGlvbiBtb2RlXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuZnVuY3Rpb24gc3RhcnRUYWdJbkhlYWQocCwgdG9rZW4pIHtcbiAgICBzd2l0Y2ggKHRva2VuLnRhZ0lEKSB7XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5IVE1MOiB7XG4gICAgICAgICAgICBzdGFydFRhZ0luQm9keShwLCB0b2tlbik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuQkFTRTpcbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELkJBU0VGT05UOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuQkdTT1VORDpcbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELkxJTks6XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5NRVRBOiB7XG4gICAgICAgICAgICBwLl9hcHBlbmRFbGVtZW50KHRva2VuLCBodG1sX2pzXzEuTlMuSFRNTCk7XG4gICAgICAgICAgICB0b2tlbi5hY2tTZWxmQ2xvc2luZyA9IHRydWU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuVElUTEU6IHtcbiAgICAgICAgICAgIHAuX3N3aXRjaFRvVGV4dFBhcnNpbmcodG9rZW4sIGluZGV4X2pzXzEuVG9rZW5pemVyTW9kZS5SQ0RBVEEpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELk5PU0NSSVBUOiB7XG4gICAgICAgICAgICBpZiAocC5vcHRpb25zLnNjcmlwdGluZ0VuYWJsZWQpIHtcbiAgICAgICAgICAgICAgICBwLl9zd2l0Y2hUb1RleHRQYXJzaW5nKHRva2VuLCBpbmRleF9qc18xLlRva2VuaXplck1vZGUuUkFXVEVYVCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBwLl9pbnNlcnRFbGVtZW50KHRva2VuLCBodG1sX2pzXzEuTlMuSFRNTCk7XG4gICAgICAgICAgICAgICAgcC5pbnNlcnRpb25Nb2RlID0gSW5zZXJ0aW9uTW9kZS5JTl9IRUFEX05PX1NDUklQVDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5OT0ZSQU1FUzpcbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELlNUWUxFOiB7XG4gICAgICAgICAgICBwLl9zd2l0Y2hUb1RleHRQYXJzaW5nKHRva2VuLCBpbmRleF9qc18xLlRva2VuaXplck1vZGUuUkFXVEVYVCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuU0NSSVBUOiB7XG4gICAgICAgICAgICBwLl9zd2l0Y2hUb1RleHRQYXJzaW5nKHRva2VuLCBpbmRleF9qc18xLlRva2VuaXplck1vZGUuU0NSSVBUX0RBVEEpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELlRFTVBMQVRFOiB7XG4gICAgICAgICAgICBwLl9pbnNlcnRUZW1wbGF0ZSh0b2tlbik7XG4gICAgICAgICAgICBwLmFjdGl2ZUZvcm1hdHRpbmdFbGVtZW50cy5pbnNlcnRNYXJrZXIoKTtcbiAgICAgICAgICAgIHAuZnJhbWVzZXRPayA9IGZhbHNlO1xuICAgICAgICAgICAgcC5pbnNlcnRpb25Nb2RlID0gSW5zZXJ0aW9uTW9kZS5JTl9URU1QTEFURTtcbiAgICAgICAgICAgIHAudG1wbEluc2VydGlvbk1vZGVTdGFjay51bnNoaWZ0KEluc2VydGlvbk1vZGUuSU5fVEVNUExBVEUpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELkhFQUQ6IHtcbiAgICAgICAgICAgIHAuX2Vycih0b2tlbiwgZXJyb3JfY29kZXNfanNfMS5FUlIubWlzcGxhY2VkU3RhcnRUYWdGb3JIZWFkRWxlbWVudCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICB0b2tlbkluSGVhZChwLCB0b2tlbik7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBlbmRUYWdJbkhlYWQocCwgdG9rZW4pIHtcbiAgICBzd2l0Y2ggKHRva2VuLnRhZ0lEKSB7XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5IRUFEOiB7XG4gICAgICAgICAgICBwLm9wZW5FbGVtZW50cy5wb3AoKTtcbiAgICAgICAgICAgIHAuaW5zZXJ0aW9uTW9kZSA9IEluc2VydGlvbk1vZGUuQUZURVJfSEVBRDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5CT0RZOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuQlI6XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5IVE1MOiB7XG4gICAgICAgICAgICB0b2tlbkluSGVhZChwLCB0b2tlbik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuVEVNUExBVEU6IHtcbiAgICAgICAgICAgIHRlbXBsYXRlRW5kVGFnSW5IZWFkKHAsIHRva2VuKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgIHAuX2Vycih0b2tlbiwgZXJyb3JfY29kZXNfanNfMS5FUlIuZW5kVGFnV2l0aG91dE1hdGNoaW5nT3BlbkVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gdGVtcGxhdGVFbmRUYWdJbkhlYWQocCwgdG9rZW4pIHtcbiAgICBpZiAocC5vcGVuRWxlbWVudHMudG1wbENvdW50ID4gMCkge1xuICAgICAgICBwLm9wZW5FbGVtZW50cy5nZW5lcmF0ZUltcGxpZWRFbmRUYWdzVGhvcm91Z2hseSgpO1xuICAgICAgICBpZiAocC5vcGVuRWxlbWVudHMuY3VycmVudFRhZ0lkICE9PSBodG1sX2pzXzEuVEFHX0lELlRFTVBMQVRFKSB7XG4gICAgICAgICAgICBwLl9lcnIodG9rZW4sIGVycm9yX2NvZGVzX2pzXzEuRVJSLmNsb3NpbmdPZkVsZW1lbnRXaXRoT3BlbkNoaWxkRWxlbWVudHMpO1xuICAgICAgICB9XG4gICAgICAgIHAub3BlbkVsZW1lbnRzLnBvcFVudGlsVGFnTmFtZVBvcHBlZChodG1sX2pzXzEuVEFHX0lELlRFTVBMQVRFKTtcbiAgICAgICAgcC5hY3RpdmVGb3JtYXR0aW5nRWxlbWVudHMuY2xlYXJUb0xhc3RNYXJrZXIoKTtcbiAgICAgICAgcC50bXBsSW5zZXJ0aW9uTW9kZVN0YWNrLnNoaWZ0KCk7XG4gICAgICAgIHAuX3Jlc2V0SW5zZXJ0aW9uTW9kZSgpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcC5fZXJyKHRva2VuLCBlcnJvcl9jb2Rlc19qc18xLkVSUi5lbmRUYWdXaXRob3V0TWF0Y2hpbmdPcGVuRWxlbWVudCk7XG4gICAgfVxufVxuZnVuY3Rpb24gdG9rZW5JbkhlYWQocCwgdG9rZW4pIHtcbiAgICBwLm9wZW5FbGVtZW50cy5wb3AoKTtcbiAgICBwLmluc2VydGlvbk1vZGUgPSBJbnNlcnRpb25Nb2RlLkFGVEVSX0hFQUQ7XG4gICAgcC5fcHJvY2Vzc1Rva2VuKHRva2VuKTtcbn1cbi8vIFRoZSBcImluIGhlYWQgbm8gc2NyaXB0XCIgaW5zZXJ0aW9uIG1vZGVcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5mdW5jdGlvbiBzdGFydFRhZ0luSGVhZE5vU2NyaXB0KHAsIHRva2VuKSB7XG4gICAgc3dpdGNoICh0b2tlbi50YWdJRCkge1xuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuSFRNTDoge1xuICAgICAgICAgICAgc3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELkJBU0VGT05UOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuQkdTT1VORDpcbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELkhFQUQ6XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5MSU5LOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuTUVUQTpcbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELk5PRlJBTUVTOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuU1RZTEU6IHtcbiAgICAgICAgICAgIHN0YXJ0VGFnSW5IZWFkKHAsIHRva2VuKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5OT1NDUklQVDoge1xuICAgICAgICAgICAgcC5fZXJyKHRva2VuLCBlcnJvcl9jb2Rlc19qc18xLkVSUi5uZXN0ZWROb3NjcmlwdEluSGVhZCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICB0b2tlbkluSGVhZE5vU2NyaXB0KHAsIHRva2VuKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGVuZFRhZ0luSGVhZE5vU2NyaXB0KHAsIHRva2VuKSB7XG4gICAgc3dpdGNoICh0b2tlbi50YWdJRCkge1xuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuTk9TQ1JJUFQ6IHtcbiAgICAgICAgICAgIHAub3BlbkVsZW1lbnRzLnBvcCgpO1xuICAgICAgICAgICAgcC5pbnNlcnRpb25Nb2RlID0gSW5zZXJ0aW9uTW9kZS5JTl9IRUFEO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELkJSOiB7XG4gICAgICAgICAgICB0b2tlbkluSGVhZE5vU2NyaXB0KHAsIHRva2VuKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgIHAuX2Vycih0b2tlbiwgZXJyb3JfY29kZXNfanNfMS5FUlIuZW5kVGFnV2l0aG91dE1hdGNoaW5nT3BlbkVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gdG9rZW5JbkhlYWROb1NjcmlwdChwLCB0b2tlbikge1xuICAgIGNvbnN0IGVyckNvZGUgPSB0b2tlbi50eXBlID09PSB0b2tlbl9qc18xLlRva2VuVHlwZS5FT0YgPyBlcnJvcl9jb2Rlc19qc18xLkVSUi5vcGVuRWxlbWVudHNMZWZ0QWZ0ZXJFb2YgOiBlcnJvcl9jb2Rlc19qc18xLkVSUi5kaXNhbGxvd2VkQ29udGVudEluTm9zY3JpcHRJbkhlYWQ7XG4gICAgcC5fZXJyKHRva2VuLCBlcnJDb2RlKTtcbiAgICBwLm9wZW5FbGVtZW50cy5wb3AoKTtcbiAgICBwLmluc2VydGlvbk1vZGUgPSBJbnNlcnRpb25Nb2RlLklOX0hFQUQ7XG4gICAgcC5fcHJvY2Vzc1Rva2VuKHRva2VuKTtcbn1cbi8vIFRoZSBcImFmdGVyIGhlYWRcIiBpbnNlcnRpb24gbW9kZVxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbmZ1bmN0aW9uIHN0YXJ0VGFnQWZ0ZXJIZWFkKHAsIHRva2VuKSB7XG4gICAgc3dpdGNoICh0b2tlbi50YWdJRCkge1xuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuSFRNTDoge1xuICAgICAgICAgICAgc3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELkJPRFk6IHtcbiAgICAgICAgICAgIHAuX2luc2VydEVsZW1lbnQodG9rZW4sIGh0bWxfanNfMS5OUy5IVE1MKTtcbiAgICAgICAgICAgIHAuZnJhbWVzZXRPayA9IGZhbHNlO1xuICAgICAgICAgICAgcC5pbnNlcnRpb25Nb2RlID0gSW5zZXJ0aW9uTW9kZS5JTl9CT0RZO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELkZSQU1FU0VUOiB7XG4gICAgICAgICAgICBwLl9pbnNlcnRFbGVtZW50KHRva2VuLCBodG1sX2pzXzEuTlMuSFRNTCk7XG4gICAgICAgICAgICBwLmluc2VydGlvbk1vZGUgPSBJbnNlcnRpb25Nb2RlLklOX0ZSQU1FU0VUO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELkJBU0U6XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5CQVNFRk9OVDpcbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELkJHU09VTkQ6XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5MSU5LOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuTUVUQTpcbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELk5PRlJBTUVTOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuU0NSSVBUOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuU1RZTEU6XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5URU1QTEFURTpcbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELlRJVExFOiB7XG4gICAgICAgICAgICBwLl9lcnIodG9rZW4sIGVycm9yX2NvZGVzX2pzXzEuRVJSLmFiYW5kb25lZEhlYWRFbGVtZW50Q2hpbGQpO1xuICAgICAgICAgICAgcC5vcGVuRWxlbWVudHMucHVzaChwLmhlYWRFbGVtZW50LCBodG1sX2pzXzEuVEFHX0lELkhFQUQpO1xuICAgICAgICAgICAgc3RhcnRUYWdJbkhlYWQocCwgdG9rZW4pO1xuICAgICAgICAgICAgcC5vcGVuRWxlbWVudHMucmVtb3ZlKHAuaGVhZEVsZW1lbnQpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELkhFQUQ6IHtcbiAgICAgICAgICAgIHAuX2Vycih0b2tlbiwgZXJyb3JfY29kZXNfanNfMS5FUlIubWlzcGxhY2VkU3RhcnRUYWdGb3JIZWFkRWxlbWVudCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICB0b2tlbkFmdGVySGVhZChwLCB0b2tlbik7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBlbmRUYWdBZnRlckhlYWQocCwgdG9rZW4pIHtcbiAgICBzd2l0Y2ggKHRva2VuLnRhZ0lEKSB7XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5CT0RZOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuSFRNTDpcbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELkJSOiB7XG4gICAgICAgICAgICB0b2tlbkFmdGVySGVhZChwLCB0b2tlbik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuVEVNUExBVEU6IHtcbiAgICAgICAgICAgIHRlbXBsYXRlRW5kVGFnSW5IZWFkKHAsIHRva2VuKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgIHAuX2Vycih0b2tlbiwgZXJyb3JfY29kZXNfanNfMS5FUlIuZW5kVGFnV2l0aG91dE1hdGNoaW5nT3BlbkVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gdG9rZW5BZnRlckhlYWQocCwgdG9rZW4pIHtcbiAgICBwLl9pbnNlcnRGYWtlRWxlbWVudChodG1sX2pzXzEuVEFHX05BTUVTLkJPRFksIGh0bWxfanNfMS5UQUdfSUQuQk9EWSk7XG4gICAgcC5pbnNlcnRpb25Nb2RlID0gSW5zZXJ0aW9uTW9kZS5JTl9CT0RZO1xuICAgIG1vZGVJbkJvZHkocCwgdG9rZW4pO1xufVxuLy8gVGhlIFwiaW4gYm9keVwiIGluc2VydGlvbiBtb2RlXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuZnVuY3Rpb24gbW9kZUluQm9keShwLCB0b2tlbikge1xuICAgIHN3aXRjaCAodG9rZW4udHlwZSkge1xuICAgICAgICBjYXNlIHRva2VuX2pzXzEuVG9rZW5UeXBlLkNIQVJBQ1RFUjoge1xuICAgICAgICAgICAgY2hhcmFjdGVySW5Cb2R5KHAsIHRva2VuKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgdG9rZW5fanNfMS5Ub2tlblR5cGUuV0hJVEVTUEFDRV9DSEFSQUNURVI6IHtcbiAgICAgICAgICAgIHdoaXRlc3BhY2VDaGFyYWN0ZXJJbkJvZHkocCwgdG9rZW4pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSB0b2tlbl9qc18xLlRva2VuVHlwZS5DT01NRU5UOiB7XG4gICAgICAgICAgICBhcHBlbmRDb21tZW50KHAsIHRva2VuKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgdG9rZW5fanNfMS5Ub2tlblR5cGUuU1RBUlRfVEFHOiB7XG4gICAgICAgICAgICBzdGFydFRhZ0luQm9keShwLCB0b2tlbik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIHRva2VuX2pzXzEuVG9rZW5UeXBlLkVORF9UQUc6IHtcbiAgICAgICAgICAgIGVuZFRhZ0luQm9keShwLCB0b2tlbik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIHRva2VuX2pzXzEuVG9rZW5UeXBlLkVPRjoge1xuICAgICAgICAgICAgZW9mSW5Cb2R5KHAsIHRva2VuKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgIC8vIERvIG5vdGhpbmdcbiAgICB9XG59XG5mdW5jdGlvbiB3aGl0ZXNwYWNlQ2hhcmFjdGVySW5Cb2R5KHAsIHRva2VuKSB7XG4gICAgcC5fcmVjb25zdHJ1Y3RBY3RpdmVGb3JtYXR0aW5nRWxlbWVudHMoKTtcbiAgICBwLl9pbnNlcnRDaGFyYWN0ZXJzKHRva2VuKTtcbn1cbmZ1bmN0aW9uIGNoYXJhY3RlckluQm9keShwLCB0b2tlbikge1xuICAgIHAuX3JlY29uc3RydWN0QWN0aXZlRm9ybWF0dGluZ0VsZW1lbnRzKCk7XG4gICAgcC5faW5zZXJ0Q2hhcmFjdGVycyh0b2tlbik7XG4gICAgcC5mcmFtZXNldE9rID0gZmFsc2U7XG59XG5mdW5jdGlvbiBodG1sU3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pIHtcbiAgICBpZiAocC5vcGVuRWxlbWVudHMudG1wbENvdW50ID09PSAwKSB7XG4gICAgICAgIHAudHJlZUFkYXB0ZXIuYWRvcHRBdHRyaWJ1dGVzKHAub3BlbkVsZW1lbnRzLml0ZW1zWzBdLCB0b2tlbi5hdHRycyk7XG4gICAgfVxufVxuZnVuY3Rpb24gYm9keVN0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKSB7XG4gICAgY29uc3QgYm9keUVsZW1lbnQgPSBwLm9wZW5FbGVtZW50cy50cnlQZWVrUHJvcGVybHlOZXN0ZWRCb2R5RWxlbWVudCgpO1xuICAgIGlmIChib2R5RWxlbWVudCAmJiBwLm9wZW5FbGVtZW50cy50bXBsQ291bnQgPT09IDApIHtcbiAgICAgICAgcC5mcmFtZXNldE9rID0gZmFsc2U7XG4gICAgICAgIHAudHJlZUFkYXB0ZXIuYWRvcHRBdHRyaWJ1dGVzKGJvZHlFbGVtZW50LCB0b2tlbi5hdHRycyk7XG4gICAgfVxufVxuZnVuY3Rpb24gZnJhbWVzZXRTdGFydFRhZ0luQm9keShwLCB0b2tlbikge1xuICAgIGNvbnN0IGJvZHlFbGVtZW50ID0gcC5vcGVuRWxlbWVudHMudHJ5UGVla1Byb3Blcmx5TmVzdGVkQm9keUVsZW1lbnQoKTtcbiAgICBpZiAocC5mcmFtZXNldE9rICYmIGJvZHlFbGVtZW50KSB7XG4gICAgICAgIHAudHJlZUFkYXB0ZXIuZGV0YWNoTm9kZShib2R5RWxlbWVudCk7XG4gICAgICAgIHAub3BlbkVsZW1lbnRzLnBvcEFsbFVwVG9IdG1sRWxlbWVudCgpO1xuICAgICAgICBwLl9pbnNlcnRFbGVtZW50KHRva2VuLCBodG1sX2pzXzEuTlMuSFRNTCk7XG4gICAgICAgIHAuaW5zZXJ0aW9uTW9kZSA9IEluc2VydGlvbk1vZGUuSU5fRlJBTUVTRVQ7XG4gICAgfVxufVxuZnVuY3Rpb24gYWRkcmVzc1N0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKSB7XG4gICAgaWYgKHAub3BlbkVsZW1lbnRzLmhhc0luQnV0dG9uU2NvcGUoaHRtbF9qc18xLlRBR19JRC5QKSkge1xuICAgICAgICBwLl9jbG9zZVBFbGVtZW50KCk7XG4gICAgfVxuICAgIHAuX2luc2VydEVsZW1lbnQodG9rZW4sIGh0bWxfanNfMS5OUy5IVE1MKTtcbn1cbmZ1bmN0aW9uIG51bWJlcmVkSGVhZGVyU3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pIHtcbiAgICBpZiAocC5vcGVuRWxlbWVudHMuaGFzSW5CdXR0b25TY29wZShodG1sX2pzXzEuVEFHX0lELlApKSB7XG4gICAgICAgIHAuX2Nsb3NlUEVsZW1lbnQoKTtcbiAgICB9XG4gICAgaWYgKCgwLCBodG1sX2pzXzEuaXNOdW1iZXJlZEhlYWRlcikocC5vcGVuRWxlbWVudHMuY3VycmVudFRhZ0lkKSkge1xuICAgICAgICBwLm9wZW5FbGVtZW50cy5wb3AoKTtcbiAgICB9XG4gICAgcC5faW5zZXJ0RWxlbWVudCh0b2tlbiwgaHRtbF9qc18xLk5TLkhUTUwpO1xufVxuZnVuY3Rpb24gcHJlU3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pIHtcbiAgICBpZiAocC5vcGVuRWxlbWVudHMuaGFzSW5CdXR0b25TY29wZShodG1sX2pzXzEuVEFHX0lELlApKSB7XG4gICAgICAgIHAuX2Nsb3NlUEVsZW1lbnQoKTtcbiAgICB9XG4gICAgcC5faW5zZXJ0RWxlbWVudCh0b2tlbiwgaHRtbF9qc18xLk5TLkhUTUwpO1xuICAgIC8vTk9URTogSWYgdGhlIG5leHQgdG9rZW4gaXMgYSBVKzAwMEEgTElORSBGRUVEIChMRikgY2hhcmFjdGVyIHRva2VuLCB0aGVuIGlnbm9yZSB0aGF0IHRva2VuIGFuZCBtb3ZlXG4gICAgLy9vbiB0byB0aGUgbmV4dCBvbmUuIChOZXdsaW5lcyBhdCB0aGUgc3RhcnQgb2YgcHJlIGJsb2NrcyBhcmUgaWdub3JlZCBhcyBhbiBhdXRob3JpbmcgY29udmVuaWVuY2UuKVxuICAgIHAuc2tpcE5leHROZXdMaW5lID0gdHJ1ZTtcbiAgICBwLmZyYW1lc2V0T2sgPSBmYWxzZTtcbn1cbmZ1bmN0aW9uIGZvcm1TdGFydFRhZ0luQm9keShwLCB0b2tlbikge1xuICAgIGNvbnN0IGluVGVtcGxhdGUgPSBwLm9wZW5FbGVtZW50cy50bXBsQ291bnQgPiAwO1xuICAgIGlmICghcC5mb3JtRWxlbWVudCB8fCBpblRlbXBsYXRlKSB7XG4gICAgICAgIGlmIChwLm9wZW5FbGVtZW50cy5oYXNJbkJ1dHRvblNjb3BlKGh0bWxfanNfMS5UQUdfSUQuUCkpIHtcbiAgICAgICAgICAgIHAuX2Nsb3NlUEVsZW1lbnQoKTtcbiAgICAgICAgfVxuICAgICAgICBwLl9pbnNlcnRFbGVtZW50KHRva2VuLCBodG1sX2pzXzEuTlMuSFRNTCk7XG4gICAgICAgIGlmICghaW5UZW1wbGF0ZSkge1xuICAgICAgICAgICAgcC5mb3JtRWxlbWVudCA9IHAub3BlbkVsZW1lbnRzLmN1cnJlbnQ7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBsaXN0SXRlbVN0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKSB7XG4gICAgcC5mcmFtZXNldE9rID0gZmFsc2U7XG4gICAgY29uc3QgdG4gPSB0b2tlbi50YWdJRDtcbiAgICBmb3IgKGxldCBpID0gcC5vcGVuRWxlbWVudHMuc3RhY2tUb3A7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIGNvbnN0IGVsZW1lbnRJZCA9IHAub3BlbkVsZW1lbnRzLnRhZ0lEc1tpXTtcbiAgICAgICAgaWYgKCh0biA9PT0gaHRtbF9qc18xLlRBR19JRC5MSSAmJiBlbGVtZW50SWQgPT09IGh0bWxfanNfMS5UQUdfSUQuTEkpIHx8XG4gICAgICAgICAgICAoKHRuID09PSBodG1sX2pzXzEuVEFHX0lELkREIHx8IHRuID09PSBodG1sX2pzXzEuVEFHX0lELkRUKSAmJiAoZWxlbWVudElkID09PSBodG1sX2pzXzEuVEFHX0lELkREIHx8IGVsZW1lbnRJZCA9PT0gaHRtbF9qc18xLlRBR19JRC5EVCkpKSB7XG4gICAgICAgICAgICBwLm9wZW5FbGVtZW50cy5nZW5lcmF0ZUltcGxpZWRFbmRUYWdzV2l0aEV4Y2x1c2lvbihlbGVtZW50SWQpO1xuICAgICAgICAgICAgcC5vcGVuRWxlbWVudHMucG9wVW50aWxUYWdOYW1lUG9wcGVkKGVsZW1lbnRJZCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoZWxlbWVudElkICE9PSBodG1sX2pzXzEuVEFHX0lELkFERFJFU1MgJiZcbiAgICAgICAgICAgIGVsZW1lbnRJZCAhPT0gaHRtbF9qc18xLlRBR19JRC5ESVYgJiZcbiAgICAgICAgICAgIGVsZW1lbnRJZCAhPT0gaHRtbF9qc18xLlRBR19JRC5QICYmXG4gICAgICAgICAgICBwLl9pc1NwZWNpYWxFbGVtZW50KHAub3BlbkVsZW1lbnRzLml0ZW1zW2ldLCBlbGVtZW50SWQpKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAocC5vcGVuRWxlbWVudHMuaGFzSW5CdXR0b25TY29wZShodG1sX2pzXzEuVEFHX0lELlApKSB7XG4gICAgICAgIHAuX2Nsb3NlUEVsZW1lbnQoKTtcbiAgICB9XG4gICAgcC5faW5zZXJ0RWxlbWVudCh0b2tlbiwgaHRtbF9qc18xLk5TLkhUTUwpO1xufVxuZnVuY3Rpb24gcGxhaW50ZXh0U3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pIHtcbiAgICBpZiAocC5vcGVuRWxlbWVudHMuaGFzSW5CdXR0b25TY29wZShodG1sX2pzXzEuVEFHX0lELlApKSB7XG4gICAgICAgIHAuX2Nsb3NlUEVsZW1lbnQoKTtcbiAgICB9XG4gICAgcC5faW5zZXJ0RWxlbWVudCh0b2tlbiwgaHRtbF9qc18xLk5TLkhUTUwpO1xuICAgIHAudG9rZW5pemVyLnN0YXRlID0gaW5kZXhfanNfMS5Ub2tlbml6ZXJNb2RlLlBMQUlOVEVYVDtcbn1cbmZ1bmN0aW9uIGJ1dHRvblN0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKSB7XG4gICAgaWYgKHAub3BlbkVsZW1lbnRzLmhhc0luU2NvcGUoaHRtbF9qc18xLlRBR19JRC5CVVRUT04pKSB7XG4gICAgICAgIHAub3BlbkVsZW1lbnRzLmdlbmVyYXRlSW1wbGllZEVuZFRhZ3MoKTtcbiAgICAgICAgcC5vcGVuRWxlbWVudHMucG9wVW50aWxUYWdOYW1lUG9wcGVkKGh0bWxfanNfMS5UQUdfSUQuQlVUVE9OKTtcbiAgICB9XG4gICAgcC5fcmVjb25zdHJ1Y3RBY3RpdmVGb3JtYXR0aW5nRWxlbWVudHMoKTtcbiAgICBwLl9pbnNlcnRFbGVtZW50KHRva2VuLCBodG1sX2pzXzEuTlMuSFRNTCk7XG4gICAgcC5mcmFtZXNldE9rID0gZmFsc2U7XG59XG5mdW5jdGlvbiBhU3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pIHtcbiAgICBjb25zdCBhY3RpdmVFbGVtZW50RW50cnkgPSBwLmFjdGl2ZUZvcm1hdHRpbmdFbGVtZW50cy5nZXRFbGVtZW50RW50cnlJblNjb3BlV2l0aFRhZ05hbWUoaHRtbF9qc18xLlRBR19OQU1FUy5BKTtcbiAgICBpZiAoYWN0aXZlRWxlbWVudEVudHJ5KSB7XG4gICAgICAgIGNhbGxBZG9wdGlvbkFnZW5jeShwLCB0b2tlbik7XG4gICAgICAgIHAub3BlbkVsZW1lbnRzLnJlbW92ZShhY3RpdmVFbGVtZW50RW50cnkuZWxlbWVudCk7XG4gICAgICAgIHAuYWN0aXZlRm9ybWF0dGluZ0VsZW1lbnRzLnJlbW92ZUVudHJ5KGFjdGl2ZUVsZW1lbnRFbnRyeSk7XG4gICAgfVxuICAgIHAuX3JlY29uc3RydWN0QWN0aXZlRm9ybWF0dGluZ0VsZW1lbnRzKCk7XG4gICAgcC5faW5zZXJ0RWxlbWVudCh0b2tlbiwgaHRtbF9qc18xLk5TLkhUTUwpO1xuICAgIHAuYWN0aXZlRm9ybWF0dGluZ0VsZW1lbnRzLnB1c2hFbGVtZW50KHAub3BlbkVsZW1lbnRzLmN1cnJlbnQsIHRva2VuKTtcbn1cbmZ1bmN0aW9uIGJTdGFydFRhZ0luQm9keShwLCB0b2tlbikge1xuICAgIHAuX3JlY29uc3RydWN0QWN0aXZlRm9ybWF0dGluZ0VsZW1lbnRzKCk7XG4gICAgcC5faW5zZXJ0RWxlbWVudCh0b2tlbiwgaHRtbF9qc18xLk5TLkhUTUwpO1xuICAgIHAuYWN0aXZlRm9ybWF0dGluZ0VsZW1lbnRzLnB1c2hFbGVtZW50KHAub3BlbkVsZW1lbnRzLmN1cnJlbnQsIHRva2VuKTtcbn1cbmZ1bmN0aW9uIG5vYnJTdGFydFRhZ0luQm9keShwLCB0b2tlbikge1xuICAgIHAuX3JlY29uc3RydWN0QWN0aXZlRm9ybWF0dGluZ0VsZW1lbnRzKCk7XG4gICAgaWYgKHAub3BlbkVsZW1lbnRzLmhhc0luU2NvcGUoaHRtbF9qc18xLlRBR19JRC5OT0JSKSkge1xuICAgICAgICBjYWxsQWRvcHRpb25BZ2VuY3kocCwgdG9rZW4pO1xuICAgICAgICBwLl9yZWNvbnN0cnVjdEFjdGl2ZUZvcm1hdHRpbmdFbGVtZW50cygpO1xuICAgIH1cbiAgICBwLl9pbnNlcnRFbGVtZW50KHRva2VuLCBodG1sX2pzXzEuTlMuSFRNTCk7XG4gICAgcC5hY3RpdmVGb3JtYXR0aW5nRWxlbWVudHMucHVzaEVsZW1lbnQocC5vcGVuRWxlbWVudHMuY3VycmVudCwgdG9rZW4pO1xufVxuZnVuY3Rpb24gYXBwbGV0U3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pIHtcbiAgICBwLl9yZWNvbnN0cnVjdEFjdGl2ZUZvcm1hdHRpbmdFbGVtZW50cygpO1xuICAgIHAuX2luc2VydEVsZW1lbnQodG9rZW4sIGh0bWxfanNfMS5OUy5IVE1MKTtcbiAgICBwLmFjdGl2ZUZvcm1hdHRpbmdFbGVtZW50cy5pbnNlcnRNYXJrZXIoKTtcbiAgICBwLmZyYW1lc2V0T2sgPSBmYWxzZTtcbn1cbmZ1bmN0aW9uIHRhYmxlU3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pIHtcbiAgICBpZiAocC50cmVlQWRhcHRlci5nZXREb2N1bWVudE1vZGUocC5kb2N1bWVudCkgIT09IGh0bWxfanNfMS5ET0NVTUVOVF9NT0RFLlFVSVJLUyAmJiBwLm9wZW5FbGVtZW50cy5oYXNJbkJ1dHRvblNjb3BlKGh0bWxfanNfMS5UQUdfSUQuUCkpIHtcbiAgICAgICAgcC5fY2xvc2VQRWxlbWVudCgpO1xuICAgIH1cbiAgICBwLl9pbnNlcnRFbGVtZW50KHRva2VuLCBodG1sX2pzXzEuTlMuSFRNTCk7XG4gICAgcC5mcmFtZXNldE9rID0gZmFsc2U7XG4gICAgcC5pbnNlcnRpb25Nb2RlID0gSW5zZXJ0aW9uTW9kZS5JTl9UQUJMRTtcbn1cbmZ1bmN0aW9uIGFyZWFTdGFydFRhZ0luQm9keShwLCB0b2tlbikge1xuICAgIHAuX3JlY29uc3RydWN0QWN0aXZlRm9ybWF0dGluZ0VsZW1lbnRzKCk7XG4gICAgcC5fYXBwZW5kRWxlbWVudCh0b2tlbiwgaHRtbF9qc18xLk5TLkhUTUwpO1xuICAgIHAuZnJhbWVzZXRPayA9IGZhbHNlO1xuICAgIHRva2VuLmFja1NlbGZDbG9zaW5nID0gdHJ1ZTtcbn1cbmZ1bmN0aW9uIGlzSGlkZGVuSW5wdXQodG9rZW4pIHtcbiAgICBjb25zdCBpbnB1dFR5cGUgPSAoMCwgdG9rZW5fanNfMS5nZXRUb2tlbkF0dHIpKHRva2VuLCBodG1sX2pzXzEuQVRUUlMuVFlQRSk7XG4gICAgcmV0dXJuIGlucHV0VHlwZSAhPSBudWxsICYmIGlucHV0VHlwZS50b0xvd2VyQ2FzZSgpID09PSBISURERU5fSU5QVVRfVFlQRTtcbn1cbmZ1bmN0aW9uIGlucHV0U3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pIHtcbiAgICBwLl9yZWNvbnN0cnVjdEFjdGl2ZUZvcm1hdHRpbmdFbGVtZW50cygpO1xuICAgIHAuX2FwcGVuZEVsZW1lbnQodG9rZW4sIGh0bWxfanNfMS5OUy5IVE1MKTtcbiAgICBpZiAoIWlzSGlkZGVuSW5wdXQodG9rZW4pKSB7XG4gICAgICAgIHAuZnJhbWVzZXRPayA9IGZhbHNlO1xuICAgIH1cbiAgICB0b2tlbi5hY2tTZWxmQ2xvc2luZyA9IHRydWU7XG59XG5mdW5jdGlvbiBwYXJhbVN0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKSB7XG4gICAgcC5fYXBwZW5kRWxlbWVudCh0b2tlbiwgaHRtbF9qc18xLk5TLkhUTUwpO1xuICAgIHRva2VuLmFja1NlbGZDbG9zaW5nID0gdHJ1ZTtcbn1cbmZ1bmN0aW9uIGhyU3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pIHtcbiAgICBpZiAocC5vcGVuRWxlbWVudHMuaGFzSW5CdXR0b25TY29wZShodG1sX2pzXzEuVEFHX0lELlApKSB7XG4gICAgICAgIHAuX2Nsb3NlUEVsZW1lbnQoKTtcbiAgICB9XG4gICAgcC5fYXBwZW5kRWxlbWVudCh0b2tlbiwgaHRtbF9qc18xLk5TLkhUTUwpO1xuICAgIHAuZnJhbWVzZXRPayA9IGZhbHNlO1xuICAgIHRva2VuLmFja1NlbGZDbG9zaW5nID0gdHJ1ZTtcbn1cbmZ1bmN0aW9uIGltYWdlU3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pIHtcbiAgICB0b2tlbi50YWdOYW1lID0gaHRtbF9qc18xLlRBR19OQU1FUy5JTUc7XG4gICAgdG9rZW4udGFnSUQgPSBodG1sX2pzXzEuVEFHX0lELklNRztcbiAgICBhcmVhU3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pO1xufVxuZnVuY3Rpb24gdGV4dGFyZWFTdGFydFRhZ0luQm9keShwLCB0b2tlbikge1xuICAgIHAuX2luc2VydEVsZW1lbnQodG9rZW4sIGh0bWxfanNfMS5OUy5IVE1MKTtcbiAgICAvL05PVEU6IElmIHRoZSBuZXh0IHRva2VuIGlzIGEgVSswMDBBIExJTkUgRkVFRCAoTEYpIGNoYXJhY3RlciB0b2tlbiwgdGhlbiBpZ25vcmUgdGhhdCB0b2tlbiBhbmQgbW92ZVxuICAgIC8vb24gdG8gdGhlIG5leHQgb25lLiAoTmV3bGluZXMgYXQgdGhlIHN0YXJ0IG9mIHRleHRhcmVhIGVsZW1lbnRzIGFyZSBpZ25vcmVkIGFzIGFuIGF1dGhvcmluZyBjb252ZW5pZW5jZS4pXG4gICAgcC5za2lwTmV4dE5ld0xpbmUgPSB0cnVlO1xuICAgIHAudG9rZW5pemVyLnN0YXRlID0gaW5kZXhfanNfMS5Ub2tlbml6ZXJNb2RlLlJDREFUQTtcbiAgICBwLm9yaWdpbmFsSW5zZXJ0aW9uTW9kZSA9IHAuaW5zZXJ0aW9uTW9kZTtcbiAgICBwLmZyYW1lc2V0T2sgPSBmYWxzZTtcbiAgICBwLmluc2VydGlvbk1vZGUgPSBJbnNlcnRpb25Nb2RlLlRFWFQ7XG59XG5mdW5jdGlvbiB4bXBTdGFydFRhZ0luQm9keShwLCB0b2tlbikge1xuICAgIGlmIChwLm9wZW5FbGVtZW50cy5oYXNJbkJ1dHRvblNjb3BlKGh0bWxfanNfMS5UQUdfSUQuUCkpIHtcbiAgICAgICAgcC5fY2xvc2VQRWxlbWVudCgpO1xuICAgIH1cbiAgICBwLl9yZWNvbnN0cnVjdEFjdGl2ZUZvcm1hdHRpbmdFbGVtZW50cygpO1xuICAgIHAuZnJhbWVzZXRPayA9IGZhbHNlO1xuICAgIHAuX3N3aXRjaFRvVGV4dFBhcnNpbmcodG9rZW4sIGluZGV4X2pzXzEuVG9rZW5pemVyTW9kZS5SQVdURVhUKTtcbn1cbmZ1bmN0aW9uIGlmcmFtZVN0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKSB7XG4gICAgcC5mcmFtZXNldE9rID0gZmFsc2U7XG4gICAgcC5fc3dpdGNoVG9UZXh0UGFyc2luZyh0b2tlbiwgaW5kZXhfanNfMS5Ub2tlbml6ZXJNb2RlLlJBV1RFWFQpO1xufVxuLy9OT1RFOiBoZXJlIHdlIGFzc3VtZSB0aGF0IHdlIGFsd2F5cyBhY3QgYXMgYW4gdXNlciBhZ2VudCB3aXRoIGVuYWJsZWQgcGx1Z2lucywgc28gd2UgcGFyc2Vcbi8vPG5vZW1iZWQ+IGFzIHJhd3RleHQuXG5mdW5jdGlvbiBub2VtYmVkU3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pIHtcbiAgICBwLl9zd2l0Y2hUb1RleHRQYXJzaW5nKHRva2VuLCBpbmRleF9qc18xLlRva2VuaXplck1vZGUuUkFXVEVYVCk7XG59XG5mdW5jdGlvbiBzZWxlY3RTdGFydFRhZ0luQm9keShwLCB0b2tlbikge1xuICAgIHAuX3JlY29uc3RydWN0QWN0aXZlRm9ybWF0dGluZ0VsZW1lbnRzKCk7XG4gICAgcC5faW5zZXJ0RWxlbWVudCh0b2tlbiwgaHRtbF9qc18xLk5TLkhUTUwpO1xuICAgIHAuZnJhbWVzZXRPayA9IGZhbHNlO1xuICAgIHAuaW5zZXJ0aW9uTW9kZSA9XG4gICAgICAgIHAuaW5zZXJ0aW9uTW9kZSA9PT0gSW5zZXJ0aW9uTW9kZS5JTl9UQUJMRSB8fFxuICAgICAgICAgICAgcC5pbnNlcnRpb25Nb2RlID09PSBJbnNlcnRpb25Nb2RlLklOX0NBUFRJT04gfHxcbiAgICAgICAgICAgIHAuaW5zZXJ0aW9uTW9kZSA9PT0gSW5zZXJ0aW9uTW9kZS5JTl9UQUJMRV9CT0RZIHx8XG4gICAgICAgICAgICBwLmluc2VydGlvbk1vZGUgPT09IEluc2VydGlvbk1vZGUuSU5fUk9XIHx8XG4gICAgICAgICAgICBwLmluc2VydGlvbk1vZGUgPT09IEluc2VydGlvbk1vZGUuSU5fQ0VMTFxuICAgICAgICAgICAgPyBJbnNlcnRpb25Nb2RlLklOX1NFTEVDVF9JTl9UQUJMRVxuICAgICAgICAgICAgOiBJbnNlcnRpb25Nb2RlLklOX1NFTEVDVDtcbn1cbmZ1bmN0aW9uIG9wdGdyb3VwU3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pIHtcbiAgICBpZiAocC5vcGVuRWxlbWVudHMuY3VycmVudFRhZ0lkID09PSBodG1sX2pzXzEuVEFHX0lELk9QVElPTikge1xuICAgICAgICBwLm9wZW5FbGVtZW50cy5wb3AoKTtcbiAgICB9XG4gICAgcC5fcmVjb25zdHJ1Y3RBY3RpdmVGb3JtYXR0aW5nRWxlbWVudHMoKTtcbiAgICBwLl9pbnNlcnRFbGVtZW50KHRva2VuLCBodG1sX2pzXzEuTlMuSFRNTCk7XG59XG5mdW5jdGlvbiByYlN0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKSB7XG4gICAgaWYgKHAub3BlbkVsZW1lbnRzLmhhc0luU2NvcGUoaHRtbF9qc18xLlRBR19JRC5SVUJZKSkge1xuICAgICAgICBwLm9wZW5FbGVtZW50cy5nZW5lcmF0ZUltcGxpZWRFbmRUYWdzKCk7XG4gICAgfVxuICAgIHAuX2luc2VydEVsZW1lbnQodG9rZW4sIGh0bWxfanNfMS5OUy5IVE1MKTtcbn1cbmZ1bmN0aW9uIHJ0U3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pIHtcbiAgICBpZiAocC5vcGVuRWxlbWVudHMuaGFzSW5TY29wZShodG1sX2pzXzEuVEFHX0lELlJVQlkpKSB7XG4gICAgICAgIHAub3BlbkVsZW1lbnRzLmdlbmVyYXRlSW1wbGllZEVuZFRhZ3NXaXRoRXhjbHVzaW9uKGh0bWxfanNfMS5UQUdfSUQuUlRDKTtcbiAgICB9XG4gICAgcC5faW5zZXJ0RWxlbWVudCh0b2tlbiwgaHRtbF9qc18xLk5TLkhUTUwpO1xufVxuZnVuY3Rpb24gbWF0aFN0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKSB7XG4gICAgcC5fcmVjb25zdHJ1Y3RBY3RpdmVGb3JtYXR0aW5nRWxlbWVudHMoKTtcbiAgICBmb3JlaWduQ29udGVudC5hZGp1c3RUb2tlbk1hdGhNTEF0dHJzKHRva2VuKTtcbiAgICBmb3JlaWduQ29udGVudC5hZGp1c3RUb2tlblhNTEF0dHJzKHRva2VuKTtcbiAgICBpZiAodG9rZW4uc2VsZkNsb3NpbmcpIHtcbiAgICAgICAgcC5fYXBwZW5kRWxlbWVudCh0b2tlbiwgaHRtbF9qc18xLk5TLk1BVEhNTCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBwLl9pbnNlcnRFbGVtZW50KHRva2VuLCBodG1sX2pzXzEuTlMuTUFUSE1MKTtcbiAgICB9XG4gICAgdG9rZW4uYWNrU2VsZkNsb3NpbmcgPSB0cnVlO1xufVxuZnVuY3Rpb24gc3ZnU3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pIHtcbiAgICBwLl9yZWNvbnN0cnVjdEFjdGl2ZUZvcm1hdHRpbmdFbGVtZW50cygpO1xuICAgIGZvcmVpZ25Db250ZW50LmFkanVzdFRva2VuU1ZHQXR0cnModG9rZW4pO1xuICAgIGZvcmVpZ25Db250ZW50LmFkanVzdFRva2VuWE1MQXR0cnModG9rZW4pO1xuICAgIGlmICh0b2tlbi5zZWxmQ2xvc2luZykge1xuICAgICAgICBwLl9hcHBlbmRFbGVtZW50KHRva2VuLCBodG1sX2pzXzEuTlMuU1ZHKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHAuX2luc2VydEVsZW1lbnQodG9rZW4sIGh0bWxfanNfMS5OUy5TVkcpO1xuICAgIH1cbiAgICB0b2tlbi5hY2tTZWxmQ2xvc2luZyA9IHRydWU7XG59XG5mdW5jdGlvbiBnZW5lcmljU3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pIHtcbiAgICBwLl9yZWNvbnN0cnVjdEFjdGl2ZUZvcm1hdHRpbmdFbGVtZW50cygpO1xuICAgIHAuX2luc2VydEVsZW1lbnQodG9rZW4sIGh0bWxfanNfMS5OUy5IVE1MKTtcbn1cbmZ1bmN0aW9uIHN0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKSB7XG4gICAgc3dpdGNoICh0b2tlbi50YWdJRCkge1xuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuSTpcbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELlM6XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5COlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuVTpcbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELkVNOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuVFQ6XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5CSUc6XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5DT0RFOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuRk9OVDpcbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELlNNQUxMOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuU1RSSUtFOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuU1RST05HOiB7XG4gICAgICAgICAgICBiU3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELkE6IHtcbiAgICAgICAgICAgIGFTdGFydFRhZ0luQm9keShwLCB0b2tlbik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuSDE6XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5IMjpcbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELkgzOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuSDQ6XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5INTpcbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELkg2OiB7XG4gICAgICAgICAgICBudW1iZXJlZEhlYWRlclN0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5QOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuREw6XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5PTDpcbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELlVMOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuRElWOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuRElSOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuTkFWOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuTUFJTjpcbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELk1FTlU6XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5BU0lERTpcbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELkNFTlRFUjpcbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELkZJR1VSRTpcbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELkZPT1RFUjpcbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELkhFQURFUjpcbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELkhHUk9VUDpcbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELkRJQUxPRzpcbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELkRFVEFJTFM6XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5BRERSRVNTOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuQVJUSUNMRTpcbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELlNFQ1RJT046XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5TVU1NQVJZOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuRklFTERTRVQ6XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5CTE9DS1FVT1RFOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuRklHQ0FQVElPTjoge1xuICAgICAgICAgICAgYWRkcmVzc1N0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5MSTpcbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELkREOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuRFQ6IHtcbiAgICAgICAgICAgIGxpc3RJdGVtU3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELkJSOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuSU1HOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuV0JSOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuQVJFQTpcbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELkVNQkVEOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuS0VZR0VOOiB7XG4gICAgICAgICAgICBhcmVhU3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELkhSOiB7XG4gICAgICAgICAgICBoclN0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5SQjpcbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELlJUQzoge1xuICAgICAgICAgICAgcmJTdGFydFRhZ0luQm9keShwLCB0b2tlbik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuUlQ6XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5SUDoge1xuICAgICAgICAgICAgcnRTdGFydFRhZ0luQm9keShwLCB0b2tlbik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuUFJFOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuTElTVElORzoge1xuICAgICAgICAgICAgcHJlU3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELlhNUDoge1xuICAgICAgICAgICAgeG1wU3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELlNWRzoge1xuICAgICAgICAgICAgc3ZnU3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELkhUTUw6IHtcbiAgICAgICAgICAgIGh0bWxTdGFydFRhZ0luQm9keShwLCB0b2tlbik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuQkFTRTpcbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELkxJTks6XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5NRVRBOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuU1RZTEU6XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5USVRMRTpcbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELlNDUklQVDpcbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELkJHU09VTkQ6XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5CQVNFRk9OVDpcbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELlRFTVBMQVRFOiB7XG4gICAgICAgICAgICBzdGFydFRhZ0luSGVhZChwLCB0b2tlbik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuQk9EWToge1xuICAgICAgICAgICAgYm9keVN0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5GT1JNOiB7XG4gICAgICAgICAgICBmb3JtU3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELk5PQlI6IHtcbiAgICAgICAgICAgIG5vYnJTdGFydFRhZ0luQm9keShwLCB0b2tlbik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuTUFUSDoge1xuICAgICAgICAgICAgbWF0aFN0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5UQUJMRToge1xuICAgICAgICAgICAgdGFibGVTdGFydFRhZ0luQm9keShwLCB0b2tlbik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuSU5QVVQ6IHtcbiAgICAgICAgICAgIGlucHV0U3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELlBBUkFNOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuVFJBQ0s6XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5TT1VSQ0U6IHtcbiAgICAgICAgICAgIHBhcmFtU3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELklNQUdFOiB7XG4gICAgICAgICAgICBpbWFnZVN0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5CVVRUT046IHtcbiAgICAgICAgICAgIGJ1dHRvblN0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5BUFBMRVQ6XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5PQkpFQ1Q6XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5NQVJRVUVFOiB7XG4gICAgICAgICAgICBhcHBsZXRTdGFydFRhZ0luQm9keShwLCB0b2tlbik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuSUZSQU1FOiB7XG4gICAgICAgICAgICBpZnJhbWVTdGFydFRhZ0luQm9keShwLCB0b2tlbik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuU0VMRUNUOiB7XG4gICAgICAgICAgICBzZWxlY3RTdGFydFRhZ0luQm9keShwLCB0b2tlbik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuT1BUSU9OOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuT1BUR1JPVVA6IHtcbiAgICAgICAgICAgIG9wdGdyb3VwU3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELk5PRU1CRUQ6IHtcbiAgICAgICAgICAgIG5vZW1iZWRTdGFydFRhZ0luQm9keShwLCB0b2tlbik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuRlJBTUVTRVQ6IHtcbiAgICAgICAgICAgIGZyYW1lc2V0U3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELlRFWFRBUkVBOiB7XG4gICAgICAgICAgICB0ZXh0YXJlYVN0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5OT1NDUklQVDoge1xuICAgICAgICAgICAgaWYgKHAub3B0aW9ucy5zY3JpcHRpbmdFbmFibGVkKSB7XG4gICAgICAgICAgICAgICAgbm9lbWJlZFN0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGdlbmVyaWNTdGFydFRhZ0luQm9keShwLCB0b2tlbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuUExBSU5URVhUOiB7XG4gICAgICAgICAgICBwbGFpbnRleHRTdGFydFRhZ0luQm9keShwLCB0b2tlbik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuQ09MOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuVEg6XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5URDpcbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELlRSOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuSEVBRDpcbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELkZSQU1FOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuVEJPRFk6XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5URk9PVDpcbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELlRIRUFEOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuQ0FQVElPTjpcbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELkNPTEdST1VQOiB7XG4gICAgICAgICAgICAvLyBJZ25vcmUgdG9rZW5cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgIGdlbmVyaWNTdGFydFRhZ0luQm9keShwLCB0b2tlbik7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBib2R5RW5kVGFnSW5Cb2R5KHAsIHRva2VuKSB7XG4gICAgaWYgKHAub3BlbkVsZW1lbnRzLmhhc0luU2NvcGUoaHRtbF9qc18xLlRBR19JRC5CT0RZKSkge1xuICAgICAgICBwLmluc2VydGlvbk1vZGUgPSBJbnNlcnRpb25Nb2RlLkFGVEVSX0JPRFk7XG4gICAgICAgIC8vTk9URTogPGJvZHk+IGlzIG5ldmVyIHBvcHBlZCBmcm9tIHRoZSBzdGFjaywgc28gd2UgbmVlZCB0byB1cGRhdGVkXG4gICAgICAgIC8vdGhlIGVuZCBsb2NhdGlvbiBleHBsaWNpdGx5LlxuICAgICAgICBpZiAocC5vcHRpb25zLnNvdXJjZUNvZGVMb2NhdGlvbkluZm8pIHtcbiAgICAgICAgICAgIGNvbnN0IGJvZHlFbGVtZW50ID0gcC5vcGVuRWxlbWVudHMudHJ5UGVla1Byb3Blcmx5TmVzdGVkQm9keUVsZW1lbnQoKTtcbiAgICAgICAgICAgIGlmIChib2R5RWxlbWVudCkge1xuICAgICAgICAgICAgICAgIHAuX3NldEVuZExvY2F0aW9uKGJvZHlFbGVtZW50LCB0b2tlbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBodG1sRW5kVGFnSW5Cb2R5KHAsIHRva2VuKSB7XG4gICAgaWYgKHAub3BlbkVsZW1lbnRzLmhhc0luU2NvcGUoaHRtbF9qc18xLlRBR19JRC5CT0RZKSkge1xuICAgICAgICBwLmluc2VydGlvbk1vZGUgPSBJbnNlcnRpb25Nb2RlLkFGVEVSX0JPRFk7XG4gICAgICAgIGVuZFRhZ0FmdGVyQm9keShwLCB0b2tlbik7XG4gICAgfVxufVxuZnVuY3Rpb24gYWRkcmVzc0VuZFRhZ0luQm9keShwLCB0b2tlbikge1xuICAgIGNvbnN0IHRuID0gdG9rZW4udGFnSUQ7XG4gICAgaWYgKHAub3BlbkVsZW1lbnRzLmhhc0luU2NvcGUodG4pKSB7XG4gICAgICAgIHAub3BlbkVsZW1lbnRzLmdlbmVyYXRlSW1wbGllZEVuZFRhZ3MoKTtcbiAgICAgICAgcC5vcGVuRWxlbWVudHMucG9wVW50aWxUYWdOYW1lUG9wcGVkKHRuKTtcbiAgICB9XG59XG5mdW5jdGlvbiBmb3JtRW5kVGFnSW5Cb2R5KHApIHtcbiAgICBjb25zdCBpblRlbXBsYXRlID0gcC5vcGVuRWxlbWVudHMudG1wbENvdW50ID4gMDtcbiAgICBjb25zdCB7IGZvcm1FbGVtZW50IH0gPSBwO1xuICAgIGlmICghaW5UZW1wbGF0ZSkge1xuICAgICAgICBwLmZvcm1FbGVtZW50ID0gbnVsbDtcbiAgICB9XG4gICAgaWYgKChmb3JtRWxlbWVudCB8fCBpblRlbXBsYXRlKSAmJiBwLm9wZW5FbGVtZW50cy5oYXNJblNjb3BlKGh0bWxfanNfMS5UQUdfSUQuRk9STSkpIHtcbiAgICAgICAgcC5vcGVuRWxlbWVudHMuZ2VuZXJhdGVJbXBsaWVkRW5kVGFncygpO1xuICAgICAgICBpZiAoaW5UZW1wbGF0ZSkge1xuICAgICAgICAgICAgcC5vcGVuRWxlbWVudHMucG9wVW50aWxUYWdOYW1lUG9wcGVkKGh0bWxfanNfMS5UQUdfSUQuRk9STSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZm9ybUVsZW1lbnQpIHtcbiAgICAgICAgICAgIHAub3BlbkVsZW1lbnRzLnJlbW92ZShmb3JtRWxlbWVudCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBwRW5kVGFnSW5Cb2R5KHApIHtcbiAgICBpZiAoIXAub3BlbkVsZW1lbnRzLmhhc0luQnV0dG9uU2NvcGUoaHRtbF9qc18xLlRBR19JRC5QKSkge1xuICAgICAgICBwLl9pbnNlcnRGYWtlRWxlbWVudChodG1sX2pzXzEuVEFHX05BTUVTLlAsIGh0bWxfanNfMS5UQUdfSUQuUCk7XG4gICAgfVxuICAgIHAuX2Nsb3NlUEVsZW1lbnQoKTtcbn1cbmZ1bmN0aW9uIGxpRW5kVGFnSW5Cb2R5KHApIHtcbiAgICBpZiAocC5vcGVuRWxlbWVudHMuaGFzSW5MaXN0SXRlbVNjb3BlKGh0bWxfanNfMS5UQUdfSUQuTEkpKSB7XG4gICAgICAgIHAub3BlbkVsZW1lbnRzLmdlbmVyYXRlSW1wbGllZEVuZFRhZ3NXaXRoRXhjbHVzaW9uKGh0bWxfanNfMS5UQUdfSUQuTEkpO1xuICAgICAgICBwLm9wZW5FbGVtZW50cy5wb3BVbnRpbFRhZ05hbWVQb3BwZWQoaHRtbF9qc18xLlRBR19JRC5MSSk7XG4gICAgfVxufVxuZnVuY3Rpb24gZGRFbmRUYWdJbkJvZHkocCwgdG9rZW4pIHtcbiAgICBjb25zdCB0biA9IHRva2VuLnRhZ0lEO1xuICAgIGlmIChwLm9wZW5FbGVtZW50cy5oYXNJblNjb3BlKHRuKSkge1xuICAgICAgICBwLm9wZW5FbGVtZW50cy5nZW5lcmF0ZUltcGxpZWRFbmRUYWdzV2l0aEV4Y2x1c2lvbih0bik7XG4gICAgICAgIHAub3BlbkVsZW1lbnRzLnBvcFVudGlsVGFnTmFtZVBvcHBlZCh0bik7XG4gICAgfVxufVxuZnVuY3Rpb24gbnVtYmVyZWRIZWFkZXJFbmRUYWdJbkJvZHkocCkge1xuICAgIGlmIChwLm9wZW5FbGVtZW50cy5oYXNOdW1iZXJlZEhlYWRlckluU2NvcGUoKSkge1xuICAgICAgICBwLm9wZW5FbGVtZW50cy5nZW5lcmF0ZUltcGxpZWRFbmRUYWdzKCk7XG4gICAgICAgIHAub3BlbkVsZW1lbnRzLnBvcFVudGlsTnVtYmVyZWRIZWFkZXJQb3BwZWQoKTtcbiAgICB9XG59XG5mdW5jdGlvbiBhcHBsZXRFbmRUYWdJbkJvZHkocCwgdG9rZW4pIHtcbiAgICBjb25zdCB0biA9IHRva2VuLnRhZ0lEO1xuICAgIGlmIChwLm9wZW5FbGVtZW50cy5oYXNJblNjb3BlKHRuKSkge1xuICAgICAgICBwLm9wZW5FbGVtZW50cy5nZW5lcmF0ZUltcGxpZWRFbmRUYWdzKCk7XG4gICAgICAgIHAub3BlbkVsZW1lbnRzLnBvcFVudGlsVGFnTmFtZVBvcHBlZCh0bik7XG4gICAgICAgIHAuYWN0aXZlRm9ybWF0dGluZ0VsZW1lbnRzLmNsZWFyVG9MYXN0TWFya2VyKCk7XG4gICAgfVxufVxuZnVuY3Rpb24gYnJFbmRUYWdJbkJvZHkocCkge1xuICAgIHAuX3JlY29uc3RydWN0QWN0aXZlRm9ybWF0dGluZ0VsZW1lbnRzKCk7XG4gICAgcC5faW5zZXJ0RmFrZUVsZW1lbnQoaHRtbF9qc18xLlRBR19OQU1FUy5CUiwgaHRtbF9qc18xLlRBR19JRC5CUik7XG4gICAgcC5vcGVuRWxlbWVudHMucG9wKCk7XG4gICAgcC5mcmFtZXNldE9rID0gZmFsc2U7XG59XG5mdW5jdGlvbiBnZW5lcmljRW5kVGFnSW5Cb2R5KHAsIHRva2VuKSB7XG4gICAgY29uc3QgdG4gPSB0b2tlbi50YWdOYW1lO1xuICAgIGNvbnN0IHRpZCA9IHRva2VuLnRhZ0lEO1xuICAgIGZvciAobGV0IGkgPSBwLm9wZW5FbGVtZW50cy5zdGFja1RvcDsgaSA+IDA7IGktLSkge1xuICAgICAgICBjb25zdCBlbGVtZW50ID0gcC5vcGVuRWxlbWVudHMuaXRlbXNbaV07XG4gICAgICAgIGNvbnN0IGVsZW1lbnRJZCA9IHAub3BlbkVsZW1lbnRzLnRhZ0lEc1tpXTtcbiAgICAgICAgLy8gQ29tcGFyZSB0aGUgdGFnIG5hbWUgaGVyZSwgYXMgdGhlIHRhZyBtaWdodCBub3QgYmUgYSBrbm93biB0YWcgd2l0aCBhbiBJRC5cbiAgICAgICAgaWYgKHRpZCA9PT0gZWxlbWVudElkICYmICh0aWQgIT09IGh0bWxfanNfMS5UQUdfSUQuVU5LTk9XTiB8fCBwLnRyZWVBZGFwdGVyLmdldFRhZ05hbWUoZWxlbWVudCkgPT09IHRuKSkge1xuICAgICAgICAgICAgcC5vcGVuRWxlbWVudHMuZ2VuZXJhdGVJbXBsaWVkRW5kVGFnc1dpdGhFeGNsdXNpb24odGlkKTtcbiAgICAgICAgICAgIGlmIChwLm9wZW5FbGVtZW50cy5zdGFja1RvcCA+PSBpKVxuICAgICAgICAgICAgICAgIHAub3BlbkVsZW1lbnRzLnNob3J0ZW5Ub0xlbmd0aChpKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwLl9pc1NwZWNpYWxFbGVtZW50KGVsZW1lbnQsIGVsZW1lbnRJZCkpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gZW5kVGFnSW5Cb2R5KHAsIHRva2VuKSB7XG4gICAgc3dpdGNoICh0b2tlbi50YWdJRCkge1xuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuQTpcbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELkI6XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5JOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuUzpcbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELlU6XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5FTTpcbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELlRUOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuQklHOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuQ09ERTpcbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELkZPTlQ6XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5OT0JSOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuU01BTEw6XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5TVFJJS0U6XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5TVFJPTkc6IHtcbiAgICAgICAgICAgIGNhbGxBZG9wdGlvbkFnZW5jeShwLCB0b2tlbik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuUDoge1xuICAgICAgICAgICAgcEVuZFRhZ0luQm9keShwKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5ETDpcbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELlVMOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuT0w6XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5ESVI6XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5ESVY6XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5OQVY6XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5QUkU6XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5NQUlOOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuTUVOVTpcbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELkFTSURFOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuQlVUVE9OOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuQ0VOVEVSOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuRklHVVJFOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuRk9PVEVSOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuSEVBREVSOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuSEdST1VQOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuRElBTE9HOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuQUREUkVTUzpcbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELkFSVElDTEU6XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5ERVRBSUxTOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuU0VDVElPTjpcbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELlNVTU1BUlk6XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5MSVNUSU5HOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuRklFTERTRVQ6XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5CTE9DS1FVT1RFOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuRklHQ0FQVElPTjoge1xuICAgICAgICAgICAgYWRkcmVzc0VuZFRhZ0luQm9keShwLCB0b2tlbik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuTEk6IHtcbiAgICAgICAgICAgIGxpRW5kVGFnSW5Cb2R5KHApO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELkREOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuRFQ6IHtcbiAgICAgICAgICAgIGRkRW5kVGFnSW5Cb2R5KHAsIHRva2VuKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5IMTpcbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELkgyOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuSDM6XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5INDpcbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELkg1OlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuSDY6IHtcbiAgICAgICAgICAgIG51bWJlcmVkSGVhZGVyRW5kVGFnSW5Cb2R5KHApO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELkJSOiB7XG4gICAgICAgICAgICBickVuZFRhZ0luQm9keShwKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5CT0RZOiB7XG4gICAgICAgICAgICBib2R5RW5kVGFnSW5Cb2R5KHAsIHRva2VuKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5IVE1MOiB7XG4gICAgICAgICAgICBodG1sRW5kVGFnSW5Cb2R5KHAsIHRva2VuKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5GT1JNOiB7XG4gICAgICAgICAgICBmb3JtRW5kVGFnSW5Cb2R5KHApO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELkFQUExFVDpcbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELk9CSkVDVDpcbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELk1BUlFVRUU6IHtcbiAgICAgICAgICAgIGFwcGxldEVuZFRhZ0luQm9keShwLCB0b2tlbik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuVEVNUExBVEU6IHtcbiAgICAgICAgICAgIHRlbXBsYXRlRW5kVGFnSW5IZWFkKHAsIHRva2VuKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgIGdlbmVyaWNFbmRUYWdJbkJvZHkocCwgdG9rZW4pO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gZW9mSW5Cb2R5KHAsIHRva2VuKSB7XG4gICAgaWYgKHAudG1wbEluc2VydGlvbk1vZGVTdGFjay5sZW5ndGggPiAwKSB7XG4gICAgICAgIGVvZkluVGVtcGxhdGUocCwgdG9rZW4pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgc3RvcFBhcnNpbmcocCwgdG9rZW4pO1xuICAgIH1cbn1cbi8vIFRoZSBcInRleHRcIiBpbnNlcnRpb24gbW9kZVxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbmZ1bmN0aW9uIGVuZFRhZ0luVGV4dChwLCB0b2tlbikge1xuICAgIHZhciBfYTtcbiAgICBpZiAodG9rZW4udGFnSUQgPT09IGh0bWxfanNfMS5UQUdfSUQuU0NSSVBUKSB7XG4gICAgICAgIChfYSA9IHAuc2NyaXB0SGFuZGxlcikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNhbGwocCwgcC5vcGVuRWxlbWVudHMuY3VycmVudCk7XG4gICAgfVxuICAgIHAub3BlbkVsZW1lbnRzLnBvcCgpO1xuICAgIHAuaW5zZXJ0aW9uTW9kZSA9IHAub3JpZ2luYWxJbnNlcnRpb25Nb2RlO1xufVxuZnVuY3Rpb24gZW9mSW5UZXh0KHAsIHRva2VuKSB7XG4gICAgcC5fZXJyKHRva2VuLCBlcnJvcl9jb2Rlc19qc18xLkVSUi5lb2ZJbkVsZW1lbnRUaGF0Q2FuQ29udGFpbk9ubHlUZXh0KTtcbiAgICBwLm9wZW5FbGVtZW50cy5wb3AoKTtcbiAgICBwLmluc2VydGlvbk1vZGUgPSBwLm9yaWdpbmFsSW5zZXJ0aW9uTW9kZTtcbiAgICBwLm9uRW9mKHRva2VuKTtcbn1cbi8vIFRoZSBcImluIHRhYmxlXCIgaW5zZXJ0aW9uIG1vZGVcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5mdW5jdGlvbiBjaGFyYWN0ZXJJblRhYmxlKHAsIHRva2VuKSB7XG4gICAgaWYgKFRBQkxFX1NUUlVDVFVSRV9UQUdTLmhhcyhwLm9wZW5FbGVtZW50cy5jdXJyZW50VGFnSWQpKSB7XG4gICAgICAgIHAucGVuZGluZ0NoYXJhY3RlclRva2Vucy5sZW5ndGggPSAwO1xuICAgICAgICBwLmhhc05vbldoaXRlc3BhY2VQZW5kaW5nQ2hhcmFjdGVyVG9rZW4gPSBmYWxzZTtcbiAgICAgICAgcC5vcmlnaW5hbEluc2VydGlvbk1vZGUgPSBwLmluc2VydGlvbk1vZGU7XG4gICAgICAgIHAuaW5zZXJ0aW9uTW9kZSA9IEluc2VydGlvbk1vZGUuSU5fVEFCTEVfVEVYVDtcbiAgICAgICAgc3dpdGNoICh0b2tlbi50eXBlKSB7XG4gICAgICAgICAgICBjYXNlIHRva2VuX2pzXzEuVG9rZW5UeXBlLkNIQVJBQ1RFUjoge1xuICAgICAgICAgICAgICAgIGNoYXJhY3RlckluVGFibGVUZXh0KHAsIHRva2VuKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgdG9rZW5fanNfMS5Ub2tlblR5cGUuV0hJVEVTUEFDRV9DSEFSQUNURVI6IHtcbiAgICAgICAgICAgICAgICB3aGl0ZXNwYWNlQ2hhcmFjdGVySW5UYWJsZVRleHQocCwgdG9rZW4pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gSWdub3JlIG51bGxcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdG9rZW5JblRhYmxlKHAsIHRva2VuKTtcbiAgICB9XG59XG5mdW5jdGlvbiBjYXB0aW9uU3RhcnRUYWdJblRhYmxlKHAsIHRva2VuKSB7XG4gICAgcC5vcGVuRWxlbWVudHMuY2xlYXJCYWNrVG9UYWJsZUNvbnRleHQoKTtcbiAgICBwLmFjdGl2ZUZvcm1hdHRpbmdFbGVtZW50cy5pbnNlcnRNYXJrZXIoKTtcbiAgICBwLl9pbnNlcnRFbGVtZW50KHRva2VuLCBodG1sX2pzXzEuTlMuSFRNTCk7XG4gICAgcC5pbnNlcnRpb25Nb2RlID0gSW5zZXJ0aW9uTW9kZS5JTl9DQVBUSU9OO1xufVxuZnVuY3Rpb24gY29sZ3JvdXBTdGFydFRhZ0luVGFibGUocCwgdG9rZW4pIHtcbiAgICBwLm9wZW5FbGVtZW50cy5jbGVhckJhY2tUb1RhYmxlQ29udGV4dCgpO1xuICAgIHAuX2luc2VydEVsZW1lbnQodG9rZW4sIGh0bWxfanNfMS5OUy5IVE1MKTtcbiAgICBwLmluc2VydGlvbk1vZGUgPSBJbnNlcnRpb25Nb2RlLklOX0NPTFVNTl9HUk9VUDtcbn1cbmZ1bmN0aW9uIGNvbFN0YXJ0VGFnSW5UYWJsZShwLCB0b2tlbikge1xuICAgIHAub3BlbkVsZW1lbnRzLmNsZWFyQmFja1RvVGFibGVDb250ZXh0KCk7XG4gICAgcC5faW5zZXJ0RmFrZUVsZW1lbnQoaHRtbF9qc18xLlRBR19OQU1FUy5DT0xHUk9VUCwgaHRtbF9qc18xLlRBR19JRC5DT0xHUk9VUCk7XG4gICAgcC5pbnNlcnRpb25Nb2RlID0gSW5zZXJ0aW9uTW9kZS5JTl9DT0xVTU5fR1JPVVA7XG4gICAgc3RhcnRUYWdJbkNvbHVtbkdyb3VwKHAsIHRva2VuKTtcbn1cbmZ1bmN0aW9uIHRib2R5U3RhcnRUYWdJblRhYmxlKHAsIHRva2VuKSB7XG4gICAgcC5vcGVuRWxlbWVudHMuY2xlYXJCYWNrVG9UYWJsZUNvbnRleHQoKTtcbiAgICBwLl9pbnNlcnRFbGVtZW50KHRva2VuLCBodG1sX2pzXzEuTlMuSFRNTCk7XG4gICAgcC5pbnNlcnRpb25Nb2RlID0gSW5zZXJ0aW9uTW9kZS5JTl9UQUJMRV9CT0RZO1xufVxuZnVuY3Rpb24gdGRTdGFydFRhZ0luVGFibGUocCwgdG9rZW4pIHtcbiAgICBwLm9wZW5FbGVtZW50cy5jbGVhckJhY2tUb1RhYmxlQ29udGV4dCgpO1xuICAgIHAuX2luc2VydEZha2VFbGVtZW50KGh0bWxfanNfMS5UQUdfTkFNRVMuVEJPRFksIGh0bWxfanNfMS5UQUdfSUQuVEJPRFkpO1xuICAgIHAuaW5zZXJ0aW9uTW9kZSA9IEluc2VydGlvbk1vZGUuSU5fVEFCTEVfQk9EWTtcbiAgICBzdGFydFRhZ0luVGFibGVCb2R5KHAsIHRva2VuKTtcbn1cbmZ1bmN0aW9uIHRhYmxlU3RhcnRUYWdJblRhYmxlKHAsIHRva2VuKSB7XG4gICAgaWYgKHAub3BlbkVsZW1lbnRzLmhhc0luVGFibGVTY29wZShodG1sX2pzXzEuVEFHX0lELlRBQkxFKSkge1xuICAgICAgICBwLm9wZW5FbGVtZW50cy5wb3BVbnRpbFRhZ05hbWVQb3BwZWQoaHRtbF9qc18xLlRBR19JRC5UQUJMRSk7XG4gICAgICAgIHAuX3Jlc2V0SW5zZXJ0aW9uTW9kZSgpO1xuICAgICAgICBwLl9wcm9jZXNzU3RhcnRUYWcodG9rZW4pO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGlucHV0U3RhcnRUYWdJblRhYmxlKHAsIHRva2VuKSB7XG4gICAgaWYgKGlzSGlkZGVuSW5wdXQodG9rZW4pKSB7XG4gICAgICAgIHAuX2FwcGVuZEVsZW1lbnQodG9rZW4sIGh0bWxfanNfMS5OUy5IVE1MKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRva2VuSW5UYWJsZShwLCB0b2tlbik7XG4gICAgfVxuICAgIHRva2VuLmFja1NlbGZDbG9zaW5nID0gdHJ1ZTtcbn1cbmZ1bmN0aW9uIGZvcm1TdGFydFRhZ0luVGFibGUocCwgdG9rZW4pIHtcbiAgICBpZiAoIXAuZm9ybUVsZW1lbnQgJiYgcC5vcGVuRWxlbWVudHMudG1wbENvdW50ID09PSAwKSB7XG4gICAgICAgIHAuX2luc2VydEVsZW1lbnQodG9rZW4sIGh0bWxfanNfMS5OUy5IVE1MKTtcbiAgICAgICAgcC5mb3JtRWxlbWVudCA9IHAub3BlbkVsZW1lbnRzLmN1cnJlbnQ7XG4gICAgICAgIHAub3BlbkVsZW1lbnRzLnBvcCgpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHN0YXJ0VGFnSW5UYWJsZShwLCB0b2tlbikge1xuICAgIHN3aXRjaCAodG9rZW4udGFnSUQpIHtcbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELlREOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuVEg6XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5UUjoge1xuICAgICAgICAgICAgdGRTdGFydFRhZ0luVGFibGUocCwgdG9rZW4pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELlNUWUxFOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuU0NSSVBUOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuVEVNUExBVEU6IHtcbiAgICAgICAgICAgIHN0YXJ0VGFnSW5IZWFkKHAsIHRva2VuKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5DT0w6IHtcbiAgICAgICAgICAgIGNvbFN0YXJ0VGFnSW5UYWJsZShwLCB0b2tlbik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuRk9STToge1xuICAgICAgICAgICAgZm9ybVN0YXJ0VGFnSW5UYWJsZShwLCB0b2tlbik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuVEFCTEU6IHtcbiAgICAgICAgICAgIHRhYmxlU3RhcnRUYWdJblRhYmxlKHAsIHRva2VuKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5UQk9EWTpcbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELlRGT09UOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuVEhFQUQ6IHtcbiAgICAgICAgICAgIHRib2R5U3RhcnRUYWdJblRhYmxlKHAsIHRva2VuKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5JTlBVVDoge1xuICAgICAgICAgICAgaW5wdXRTdGFydFRhZ0luVGFibGUocCwgdG9rZW4pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELkNBUFRJT046IHtcbiAgICAgICAgICAgIGNhcHRpb25TdGFydFRhZ0luVGFibGUocCwgdG9rZW4pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELkNPTEdST1VQOiB7XG4gICAgICAgICAgICBjb2xncm91cFN0YXJ0VGFnSW5UYWJsZShwLCB0b2tlbik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICB0b2tlbkluVGFibGUocCwgdG9rZW4pO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gZW5kVGFnSW5UYWJsZShwLCB0b2tlbikge1xuICAgIHN3aXRjaCAodG9rZW4udGFnSUQpIHtcbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELlRBQkxFOiB7XG4gICAgICAgICAgICBpZiAocC5vcGVuRWxlbWVudHMuaGFzSW5UYWJsZVNjb3BlKGh0bWxfanNfMS5UQUdfSUQuVEFCTEUpKSB7XG4gICAgICAgICAgICAgICAgcC5vcGVuRWxlbWVudHMucG9wVW50aWxUYWdOYW1lUG9wcGVkKGh0bWxfanNfMS5UQUdfSUQuVEFCTEUpO1xuICAgICAgICAgICAgICAgIHAuX3Jlc2V0SW5zZXJ0aW9uTW9kZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELlRFTVBMQVRFOiB7XG4gICAgICAgICAgICB0ZW1wbGF0ZUVuZFRhZ0luSGVhZChwLCB0b2tlbik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuQk9EWTpcbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELkNBUFRJT046XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5DT0w6XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5DT0xHUk9VUDpcbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELkhUTUw6XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5UQk9EWTpcbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELlREOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuVEZPT1Q6XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5USDpcbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELlRIRUFEOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuVFI6IHtcbiAgICAgICAgICAgIC8vIElnbm9yZSB0b2tlblxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgdG9rZW5JblRhYmxlKHAsIHRva2VuKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIHRva2VuSW5UYWJsZShwLCB0b2tlbikge1xuICAgIGNvbnN0IHNhdmVkRm9zdGVyUGFyZW50aW5nU3RhdGUgPSBwLmZvc3RlclBhcmVudGluZ0VuYWJsZWQ7XG4gICAgcC5mb3N0ZXJQYXJlbnRpbmdFbmFibGVkID0gdHJ1ZTtcbiAgICAvLyBQcm9jZXNzIHRva2VuIGluIGBJbiBCb2R5YCBtb2RlXG4gICAgbW9kZUluQm9keShwLCB0b2tlbik7XG4gICAgcC5mb3N0ZXJQYXJlbnRpbmdFbmFibGVkID0gc2F2ZWRGb3N0ZXJQYXJlbnRpbmdTdGF0ZTtcbn1cbi8vIFRoZSBcImluIHRhYmxlIHRleHRcIiBpbnNlcnRpb24gbW9kZVxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbmZ1bmN0aW9uIHdoaXRlc3BhY2VDaGFyYWN0ZXJJblRhYmxlVGV4dChwLCB0b2tlbikge1xuICAgIHAucGVuZGluZ0NoYXJhY3RlclRva2Vucy5wdXNoKHRva2VuKTtcbn1cbmZ1bmN0aW9uIGNoYXJhY3RlckluVGFibGVUZXh0KHAsIHRva2VuKSB7XG4gICAgcC5wZW5kaW5nQ2hhcmFjdGVyVG9rZW5zLnB1c2godG9rZW4pO1xuICAgIHAuaGFzTm9uV2hpdGVzcGFjZVBlbmRpbmdDaGFyYWN0ZXJUb2tlbiA9IHRydWU7XG59XG5mdW5jdGlvbiB0b2tlbkluVGFibGVUZXh0KHAsIHRva2VuKSB7XG4gICAgbGV0IGkgPSAwO1xuICAgIGlmIChwLmhhc05vbldoaXRlc3BhY2VQZW5kaW5nQ2hhcmFjdGVyVG9rZW4pIHtcbiAgICAgICAgZm9yICg7IGkgPCBwLnBlbmRpbmdDaGFyYWN0ZXJUb2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRva2VuSW5UYWJsZShwLCBwLnBlbmRpbmdDaGFyYWN0ZXJUb2tlbnNbaV0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBmb3IgKDsgaSA8IHAucGVuZGluZ0NoYXJhY3RlclRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgcC5faW5zZXJ0Q2hhcmFjdGVycyhwLnBlbmRpbmdDaGFyYWN0ZXJUb2tlbnNbaV0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHAuaW5zZXJ0aW9uTW9kZSA9IHAub3JpZ2luYWxJbnNlcnRpb25Nb2RlO1xuICAgIHAuX3Byb2Nlc3NUb2tlbih0b2tlbik7XG59XG4vLyBUaGUgXCJpbiBjYXB0aW9uXCIgaW5zZXJ0aW9uIG1vZGVcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5jb25zdCBUQUJMRV9WT0lEX0VMRU1FTlRTID0gbmV3IFNldChbaHRtbF9qc18xLlRBR19JRC5DQVBUSU9OLCBodG1sX2pzXzEuVEFHX0lELkNPTCwgaHRtbF9qc18xLlRBR19JRC5DT0xHUk9VUCwgaHRtbF9qc18xLlRBR19JRC5UQk9EWSwgaHRtbF9qc18xLlRBR19JRC5URCwgaHRtbF9qc18xLlRBR19JRC5URk9PVCwgaHRtbF9qc18xLlRBR19JRC5USCwgaHRtbF9qc18xLlRBR19JRC5USEVBRCwgaHRtbF9qc18xLlRBR19JRC5UUl0pO1xuZnVuY3Rpb24gc3RhcnRUYWdJbkNhcHRpb24ocCwgdG9rZW4pIHtcbiAgICBjb25zdCB0biA9IHRva2VuLnRhZ0lEO1xuICAgIGlmIChUQUJMRV9WT0lEX0VMRU1FTlRTLmhhcyh0bikpIHtcbiAgICAgICAgaWYgKHAub3BlbkVsZW1lbnRzLmhhc0luVGFibGVTY29wZShodG1sX2pzXzEuVEFHX0lELkNBUFRJT04pKSB7XG4gICAgICAgICAgICBwLm9wZW5FbGVtZW50cy5nZW5lcmF0ZUltcGxpZWRFbmRUYWdzKCk7XG4gICAgICAgICAgICBwLm9wZW5FbGVtZW50cy5wb3BVbnRpbFRhZ05hbWVQb3BwZWQoaHRtbF9qc18xLlRBR19JRC5DQVBUSU9OKTtcbiAgICAgICAgICAgIHAuYWN0aXZlRm9ybWF0dGluZ0VsZW1lbnRzLmNsZWFyVG9MYXN0TWFya2VyKCk7XG4gICAgICAgICAgICBwLmluc2VydGlvbk1vZGUgPSBJbnNlcnRpb25Nb2RlLklOX1RBQkxFO1xuICAgICAgICAgICAgc3RhcnRUYWdJblRhYmxlKHAsIHRva2VuKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgc3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGVuZFRhZ0luQ2FwdGlvbihwLCB0b2tlbikge1xuICAgIGNvbnN0IHRuID0gdG9rZW4udGFnSUQ7XG4gICAgc3dpdGNoICh0bikge1xuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuQ0FQVElPTjpcbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELlRBQkxFOiB7XG4gICAgICAgICAgICBpZiAocC5vcGVuRWxlbWVudHMuaGFzSW5UYWJsZVNjb3BlKGh0bWxfanNfMS5UQUdfSUQuQ0FQVElPTikpIHtcbiAgICAgICAgICAgICAgICBwLm9wZW5FbGVtZW50cy5nZW5lcmF0ZUltcGxpZWRFbmRUYWdzKCk7XG4gICAgICAgICAgICAgICAgcC5vcGVuRWxlbWVudHMucG9wVW50aWxUYWdOYW1lUG9wcGVkKGh0bWxfanNfMS5UQUdfSUQuQ0FQVElPTik7XG4gICAgICAgICAgICAgICAgcC5hY3RpdmVGb3JtYXR0aW5nRWxlbWVudHMuY2xlYXJUb0xhc3RNYXJrZXIoKTtcbiAgICAgICAgICAgICAgICBwLmluc2VydGlvbk1vZGUgPSBJbnNlcnRpb25Nb2RlLklOX1RBQkxFO1xuICAgICAgICAgICAgICAgIGlmICh0biA9PT0gaHRtbF9qc18xLlRBR19JRC5UQUJMRSkge1xuICAgICAgICAgICAgICAgICAgICBlbmRUYWdJblRhYmxlKHAsIHRva2VuKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuQk9EWTpcbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELkNPTDpcbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELkNPTEdST1VQOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuSFRNTDpcbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELlRCT0RZOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuVEQ6XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5URk9PVDpcbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELlRIOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuVEhFQUQ6XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5UUjoge1xuICAgICAgICAgICAgLy8gSWdub3JlIHRva2VuXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICBlbmRUYWdJbkJvZHkocCwgdG9rZW4pO1xuICAgICAgICB9XG4gICAgfVxufVxuLy8gVGhlIFwiaW4gY29sdW1uIGdyb3VwXCIgaW5zZXJ0aW9uIG1vZGVcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5mdW5jdGlvbiBzdGFydFRhZ0luQ29sdW1uR3JvdXAocCwgdG9rZW4pIHtcbiAgICBzd2l0Y2ggKHRva2VuLnRhZ0lEKSB7XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5IVE1MOiB7XG4gICAgICAgICAgICBzdGFydFRhZ0luQm9keShwLCB0b2tlbik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuQ09MOiB7XG4gICAgICAgICAgICBwLl9hcHBlbmRFbGVtZW50KHRva2VuLCBodG1sX2pzXzEuTlMuSFRNTCk7XG4gICAgICAgICAgICB0b2tlbi5hY2tTZWxmQ2xvc2luZyA9IHRydWU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuVEVNUExBVEU6IHtcbiAgICAgICAgICAgIHN0YXJ0VGFnSW5IZWFkKHAsIHRva2VuKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgIHRva2VuSW5Db2x1bW5Hcm91cChwLCB0b2tlbik7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBlbmRUYWdJbkNvbHVtbkdyb3VwKHAsIHRva2VuKSB7XG4gICAgc3dpdGNoICh0b2tlbi50YWdJRCkge1xuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuQ09MR1JPVVA6IHtcbiAgICAgICAgICAgIGlmIChwLm9wZW5FbGVtZW50cy5jdXJyZW50VGFnSWQgPT09IGh0bWxfanNfMS5UQUdfSUQuQ09MR1JPVVApIHtcbiAgICAgICAgICAgICAgICBwLm9wZW5FbGVtZW50cy5wb3AoKTtcbiAgICAgICAgICAgICAgICBwLmluc2VydGlvbk1vZGUgPSBJbnNlcnRpb25Nb2RlLklOX1RBQkxFO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELlRFTVBMQVRFOiB7XG4gICAgICAgICAgICB0ZW1wbGF0ZUVuZFRhZ0luSGVhZChwLCB0b2tlbik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuQ09MOiB7XG4gICAgICAgICAgICAvLyBJZ25vcmUgdG9rZW5cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgIHRva2VuSW5Db2x1bW5Hcm91cChwLCB0b2tlbik7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiB0b2tlbkluQ29sdW1uR3JvdXAocCwgdG9rZW4pIHtcbiAgICBpZiAocC5vcGVuRWxlbWVudHMuY3VycmVudFRhZ0lkID09PSBodG1sX2pzXzEuVEFHX0lELkNPTEdST1VQKSB7XG4gICAgICAgIHAub3BlbkVsZW1lbnRzLnBvcCgpO1xuICAgICAgICBwLmluc2VydGlvbk1vZGUgPSBJbnNlcnRpb25Nb2RlLklOX1RBQkxFO1xuICAgICAgICBwLl9wcm9jZXNzVG9rZW4odG9rZW4pO1xuICAgIH1cbn1cbi8vIFRoZSBcImluIHRhYmxlIGJvZHlcIiBpbnNlcnRpb24gbW9kZVxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbmZ1bmN0aW9uIHN0YXJ0VGFnSW5UYWJsZUJvZHkocCwgdG9rZW4pIHtcbiAgICBzd2l0Y2ggKHRva2VuLnRhZ0lEKSB7XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5UUjoge1xuICAgICAgICAgICAgcC5vcGVuRWxlbWVudHMuY2xlYXJCYWNrVG9UYWJsZUJvZHlDb250ZXh0KCk7XG4gICAgICAgICAgICBwLl9pbnNlcnRFbGVtZW50KHRva2VuLCBodG1sX2pzXzEuTlMuSFRNTCk7XG4gICAgICAgICAgICBwLmluc2VydGlvbk1vZGUgPSBJbnNlcnRpb25Nb2RlLklOX1JPVztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5USDpcbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELlREOiB7XG4gICAgICAgICAgICBwLm9wZW5FbGVtZW50cy5jbGVhckJhY2tUb1RhYmxlQm9keUNvbnRleHQoKTtcbiAgICAgICAgICAgIHAuX2luc2VydEZha2VFbGVtZW50KGh0bWxfanNfMS5UQUdfTkFNRVMuVFIsIGh0bWxfanNfMS5UQUdfSUQuVFIpO1xuICAgICAgICAgICAgcC5pbnNlcnRpb25Nb2RlID0gSW5zZXJ0aW9uTW9kZS5JTl9ST1c7XG4gICAgICAgICAgICBzdGFydFRhZ0luUm93KHAsIHRva2VuKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5DQVBUSU9OOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuQ09MOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuQ09MR1JPVVA6XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5UQk9EWTpcbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELlRGT09UOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuVEhFQUQ6IHtcbiAgICAgICAgICAgIGlmIChwLm9wZW5FbGVtZW50cy5oYXNUYWJsZUJvZHlDb250ZXh0SW5UYWJsZVNjb3BlKCkpIHtcbiAgICAgICAgICAgICAgICBwLm9wZW5FbGVtZW50cy5jbGVhckJhY2tUb1RhYmxlQm9keUNvbnRleHQoKTtcbiAgICAgICAgICAgICAgICBwLm9wZW5FbGVtZW50cy5wb3AoKTtcbiAgICAgICAgICAgICAgICBwLmluc2VydGlvbk1vZGUgPSBJbnNlcnRpb25Nb2RlLklOX1RBQkxFO1xuICAgICAgICAgICAgICAgIHN0YXJ0VGFnSW5UYWJsZShwLCB0b2tlbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICBzdGFydFRhZ0luVGFibGUocCwgdG9rZW4pO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gZW5kVGFnSW5UYWJsZUJvZHkocCwgdG9rZW4pIHtcbiAgICBjb25zdCB0biA9IHRva2VuLnRhZ0lEO1xuICAgIHN3aXRjaCAodG9rZW4udGFnSUQpIHtcbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELlRCT0RZOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuVEZPT1Q6XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5USEVBRDoge1xuICAgICAgICAgICAgaWYgKHAub3BlbkVsZW1lbnRzLmhhc0luVGFibGVTY29wZSh0bikpIHtcbiAgICAgICAgICAgICAgICBwLm9wZW5FbGVtZW50cy5jbGVhckJhY2tUb1RhYmxlQm9keUNvbnRleHQoKTtcbiAgICAgICAgICAgICAgICBwLm9wZW5FbGVtZW50cy5wb3AoKTtcbiAgICAgICAgICAgICAgICBwLmluc2VydGlvbk1vZGUgPSBJbnNlcnRpb25Nb2RlLklOX1RBQkxFO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELlRBQkxFOiB7XG4gICAgICAgICAgICBpZiAocC5vcGVuRWxlbWVudHMuaGFzVGFibGVCb2R5Q29udGV4dEluVGFibGVTY29wZSgpKSB7XG4gICAgICAgICAgICAgICAgcC5vcGVuRWxlbWVudHMuY2xlYXJCYWNrVG9UYWJsZUJvZHlDb250ZXh0KCk7XG4gICAgICAgICAgICAgICAgcC5vcGVuRWxlbWVudHMucG9wKCk7XG4gICAgICAgICAgICAgICAgcC5pbnNlcnRpb25Nb2RlID0gSW5zZXJ0aW9uTW9kZS5JTl9UQUJMRTtcbiAgICAgICAgICAgICAgICBlbmRUYWdJblRhYmxlKHAsIHRva2VuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5CT0RZOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuQ0FQVElPTjpcbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELkNPTDpcbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELkNPTEdST1VQOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuSFRNTDpcbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELlREOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuVEg6XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5UUjoge1xuICAgICAgICAgICAgLy8gSWdub3JlIHRva2VuXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICBlbmRUYWdJblRhYmxlKHAsIHRva2VuKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8vIFRoZSBcImluIHJvd1wiIGluc2VydGlvbiBtb2RlXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuZnVuY3Rpb24gc3RhcnRUYWdJblJvdyhwLCB0b2tlbikge1xuICAgIHN3aXRjaCAodG9rZW4udGFnSUQpIHtcbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELlRIOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuVEQ6IHtcbiAgICAgICAgICAgIHAub3BlbkVsZW1lbnRzLmNsZWFyQmFja1RvVGFibGVSb3dDb250ZXh0KCk7XG4gICAgICAgICAgICBwLl9pbnNlcnRFbGVtZW50KHRva2VuLCBodG1sX2pzXzEuTlMuSFRNTCk7XG4gICAgICAgICAgICBwLmluc2VydGlvbk1vZGUgPSBJbnNlcnRpb25Nb2RlLklOX0NFTEw7XG4gICAgICAgICAgICBwLmFjdGl2ZUZvcm1hdHRpbmdFbGVtZW50cy5pbnNlcnRNYXJrZXIoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5DQVBUSU9OOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuQ09MOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuQ09MR1JPVVA6XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5UQk9EWTpcbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELlRGT09UOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuVEhFQUQ6XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5UUjoge1xuICAgICAgICAgICAgaWYgKHAub3BlbkVsZW1lbnRzLmhhc0luVGFibGVTY29wZShodG1sX2pzXzEuVEFHX0lELlRSKSkge1xuICAgICAgICAgICAgICAgIHAub3BlbkVsZW1lbnRzLmNsZWFyQmFja1RvVGFibGVSb3dDb250ZXh0KCk7XG4gICAgICAgICAgICAgICAgcC5vcGVuRWxlbWVudHMucG9wKCk7XG4gICAgICAgICAgICAgICAgcC5pbnNlcnRpb25Nb2RlID0gSW5zZXJ0aW9uTW9kZS5JTl9UQUJMRV9CT0RZO1xuICAgICAgICAgICAgICAgIHN0YXJ0VGFnSW5UYWJsZUJvZHkocCwgdG9rZW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgc3RhcnRUYWdJblRhYmxlKHAsIHRva2VuKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGVuZFRhZ0luUm93KHAsIHRva2VuKSB7XG4gICAgc3dpdGNoICh0b2tlbi50YWdJRCkge1xuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuVFI6IHtcbiAgICAgICAgICAgIGlmIChwLm9wZW5FbGVtZW50cy5oYXNJblRhYmxlU2NvcGUoaHRtbF9qc18xLlRBR19JRC5UUikpIHtcbiAgICAgICAgICAgICAgICBwLm9wZW5FbGVtZW50cy5jbGVhckJhY2tUb1RhYmxlUm93Q29udGV4dCgpO1xuICAgICAgICAgICAgICAgIHAub3BlbkVsZW1lbnRzLnBvcCgpO1xuICAgICAgICAgICAgICAgIHAuaW5zZXJ0aW9uTW9kZSA9IEluc2VydGlvbk1vZGUuSU5fVEFCTEVfQk9EWTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5UQUJMRToge1xuICAgICAgICAgICAgaWYgKHAub3BlbkVsZW1lbnRzLmhhc0luVGFibGVTY29wZShodG1sX2pzXzEuVEFHX0lELlRSKSkge1xuICAgICAgICAgICAgICAgIHAub3BlbkVsZW1lbnRzLmNsZWFyQmFja1RvVGFibGVSb3dDb250ZXh0KCk7XG4gICAgICAgICAgICAgICAgcC5vcGVuRWxlbWVudHMucG9wKCk7XG4gICAgICAgICAgICAgICAgcC5pbnNlcnRpb25Nb2RlID0gSW5zZXJ0aW9uTW9kZS5JTl9UQUJMRV9CT0RZO1xuICAgICAgICAgICAgICAgIGVuZFRhZ0luVGFibGVCb2R5KHAsIHRva2VuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5UQk9EWTpcbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELlRGT09UOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuVEhFQUQ6IHtcbiAgICAgICAgICAgIGlmIChwLm9wZW5FbGVtZW50cy5oYXNJblRhYmxlU2NvcGUodG9rZW4udGFnSUQpIHx8IHAub3BlbkVsZW1lbnRzLmhhc0luVGFibGVTY29wZShodG1sX2pzXzEuVEFHX0lELlRSKSkge1xuICAgICAgICAgICAgICAgIHAub3BlbkVsZW1lbnRzLmNsZWFyQmFja1RvVGFibGVSb3dDb250ZXh0KCk7XG4gICAgICAgICAgICAgICAgcC5vcGVuRWxlbWVudHMucG9wKCk7XG4gICAgICAgICAgICAgICAgcC5pbnNlcnRpb25Nb2RlID0gSW5zZXJ0aW9uTW9kZS5JTl9UQUJMRV9CT0RZO1xuICAgICAgICAgICAgICAgIGVuZFRhZ0luVGFibGVCb2R5KHAsIHRva2VuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5CT0RZOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuQ0FQVElPTjpcbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELkNPTDpcbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELkNPTEdST1VQOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuSFRNTDpcbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELlREOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuVEg6IHtcbiAgICAgICAgICAgIC8vIElnbm9yZSBlbmQgdGFnXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICBlbmRUYWdJblRhYmxlKHAsIHRva2VuKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8vIFRoZSBcImluIGNlbGxcIiBpbnNlcnRpb24gbW9kZVxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbmZ1bmN0aW9uIHN0YXJ0VGFnSW5DZWxsKHAsIHRva2VuKSB7XG4gICAgY29uc3QgdG4gPSB0b2tlbi50YWdJRDtcbiAgICBpZiAoVEFCTEVfVk9JRF9FTEVNRU5UUy5oYXModG4pKSB7XG4gICAgICAgIGlmIChwLm9wZW5FbGVtZW50cy5oYXNJblRhYmxlU2NvcGUoaHRtbF9qc18xLlRBR19JRC5URCkgfHwgcC5vcGVuRWxlbWVudHMuaGFzSW5UYWJsZVNjb3BlKGh0bWxfanNfMS5UQUdfSUQuVEgpKSB7XG4gICAgICAgICAgICBwLl9jbG9zZVRhYmxlQ2VsbCgpO1xuICAgICAgICAgICAgc3RhcnRUYWdJblJvdyhwLCB0b2tlbik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHN0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKTtcbiAgICB9XG59XG5mdW5jdGlvbiBlbmRUYWdJbkNlbGwocCwgdG9rZW4pIHtcbiAgICBjb25zdCB0biA9IHRva2VuLnRhZ0lEO1xuICAgIHN3aXRjaCAodG4pIHtcbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELlREOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuVEg6IHtcbiAgICAgICAgICAgIGlmIChwLm9wZW5FbGVtZW50cy5oYXNJblRhYmxlU2NvcGUodG4pKSB7XG4gICAgICAgICAgICAgICAgcC5vcGVuRWxlbWVudHMuZ2VuZXJhdGVJbXBsaWVkRW5kVGFncygpO1xuICAgICAgICAgICAgICAgIHAub3BlbkVsZW1lbnRzLnBvcFVudGlsVGFnTmFtZVBvcHBlZCh0bik7XG4gICAgICAgICAgICAgICAgcC5hY3RpdmVGb3JtYXR0aW5nRWxlbWVudHMuY2xlYXJUb0xhc3RNYXJrZXIoKTtcbiAgICAgICAgICAgICAgICBwLmluc2VydGlvbk1vZGUgPSBJbnNlcnRpb25Nb2RlLklOX1JPVztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5UQUJMRTpcbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELlRCT0RZOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuVEZPT1Q6XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5USEVBRDpcbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELlRSOiB7XG4gICAgICAgICAgICBpZiAocC5vcGVuRWxlbWVudHMuaGFzSW5UYWJsZVNjb3BlKHRuKSkge1xuICAgICAgICAgICAgICAgIHAuX2Nsb3NlVGFibGVDZWxsKCk7XG4gICAgICAgICAgICAgICAgZW5kVGFnSW5Sb3cocCwgdG9rZW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELkJPRFk6XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5DQVBUSU9OOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuQ09MOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuQ09MR1JPVVA6XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5IVE1MOiB7XG4gICAgICAgICAgICAvLyBJZ25vcmUgdG9rZW5cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgIGVuZFRhZ0luQm9keShwLCB0b2tlbik7XG4gICAgICAgIH1cbiAgICB9XG59XG4vLyBUaGUgXCJpbiBzZWxlY3RcIiBpbnNlcnRpb24gbW9kZVxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbmZ1bmN0aW9uIHN0YXJ0VGFnSW5TZWxlY3QocCwgdG9rZW4pIHtcbiAgICBzd2l0Y2ggKHRva2VuLnRhZ0lEKSB7XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5IVE1MOiB7XG4gICAgICAgICAgICBzdGFydFRhZ0luQm9keShwLCB0b2tlbik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuT1BUSU9OOiB7XG4gICAgICAgICAgICBpZiAocC5vcGVuRWxlbWVudHMuY3VycmVudFRhZ0lkID09PSBodG1sX2pzXzEuVEFHX0lELk9QVElPTikge1xuICAgICAgICAgICAgICAgIHAub3BlbkVsZW1lbnRzLnBvcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcC5faW5zZXJ0RWxlbWVudCh0b2tlbiwgaHRtbF9qc18xLk5TLkhUTUwpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELk9QVEdST1VQOiB7XG4gICAgICAgICAgICBpZiAocC5vcGVuRWxlbWVudHMuY3VycmVudFRhZ0lkID09PSBodG1sX2pzXzEuVEFHX0lELk9QVElPTikge1xuICAgICAgICAgICAgICAgIHAub3BlbkVsZW1lbnRzLnBvcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHAub3BlbkVsZW1lbnRzLmN1cnJlbnRUYWdJZCA9PT0gaHRtbF9qc18xLlRBR19JRC5PUFRHUk9VUCkge1xuICAgICAgICAgICAgICAgIHAub3BlbkVsZW1lbnRzLnBvcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcC5faW5zZXJ0RWxlbWVudCh0b2tlbiwgaHRtbF9qc18xLk5TLkhUTUwpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELklOUFVUOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuS0VZR0VOOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuVEVYVEFSRUE6XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5TRUxFQ1Q6IHtcbiAgICAgICAgICAgIGlmIChwLm9wZW5FbGVtZW50cy5oYXNJblNlbGVjdFNjb3BlKGh0bWxfanNfMS5UQUdfSUQuU0VMRUNUKSkge1xuICAgICAgICAgICAgICAgIHAub3BlbkVsZW1lbnRzLnBvcFVudGlsVGFnTmFtZVBvcHBlZChodG1sX2pzXzEuVEFHX0lELlNFTEVDVCk7XG4gICAgICAgICAgICAgICAgcC5fcmVzZXRJbnNlcnRpb25Nb2RlKCk7XG4gICAgICAgICAgICAgICAgaWYgKHRva2VuLnRhZ0lEICE9PSBodG1sX2pzXzEuVEFHX0lELlNFTEVDVCkge1xuICAgICAgICAgICAgICAgICAgICBwLl9wcm9jZXNzU3RhcnRUYWcodG9rZW4pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5TQ1JJUFQ6XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5URU1QTEFURToge1xuICAgICAgICAgICAgc3RhcnRUYWdJbkhlYWQocCwgdG9rZW4pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgLy8gRG8gbm90aGluZ1xuICAgIH1cbn1cbmZ1bmN0aW9uIGVuZFRhZ0luU2VsZWN0KHAsIHRva2VuKSB7XG4gICAgc3dpdGNoICh0b2tlbi50YWdJRCkge1xuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuT1BUR1JPVVA6IHtcbiAgICAgICAgICAgIGlmIChwLm9wZW5FbGVtZW50cy5zdGFja1RvcCA+IDAgJiZcbiAgICAgICAgICAgICAgICBwLm9wZW5FbGVtZW50cy5jdXJyZW50VGFnSWQgPT09IGh0bWxfanNfMS5UQUdfSUQuT1BUSU9OICYmXG4gICAgICAgICAgICAgICAgcC5vcGVuRWxlbWVudHMudGFnSURzW3Aub3BlbkVsZW1lbnRzLnN0YWNrVG9wIC0gMV0gPT09IGh0bWxfanNfMS5UQUdfSUQuT1BUR1JPVVApIHtcbiAgICAgICAgICAgICAgICBwLm9wZW5FbGVtZW50cy5wb3AoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwLm9wZW5FbGVtZW50cy5jdXJyZW50VGFnSWQgPT09IGh0bWxfanNfMS5UQUdfSUQuT1BUR1JPVVApIHtcbiAgICAgICAgICAgICAgICBwLm9wZW5FbGVtZW50cy5wb3AoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5PUFRJT046IHtcbiAgICAgICAgICAgIGlmIChwLm9wZW5FbGVtZW50cy5jdXJyZW50VGFnSWQgPT09IGh0bWxfanNfMS5UQUdfSUQuT1BUSU9OKSB7XG4gICAgICAgICAgICAgICAgcC5vcGVuRWxlbWVudHMucG9wKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuU0VMRUNUOiB7XG4gICAgICAgICAgICBpZiAocC5vcGVuRWxlbWVudHMuaGFzSW5TZWxlY3RTY29wZShodG1sX2pzXzEuVEFHX0lELlNFTEVDVCkpIHtcbiAgICAgICAgICAgICAgICBwLm9wZW5FbGVtZW50cy5wb3BVbnRpbFRhZ05hbWVQb3BwZWQoaHRtbF9qc18xLlRBR19JRC5TRUxFQ1QpO1xuICAgICAgICAgICAgICAgIHAuX3Jlc2V0SW5zZXJ0aW9uTW9kZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELlRFTVBMQVRFOiB7XG4gICAgICAgICAgICB0ZW1wbGF0ZUVuZFRhZ0luSGVhZChwLCB0b2tlbik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAvLyBEbyBub3RoaW5nXG4gICAgfVxufVxuLy8gVGhlIFwiaW4gc2VsZWN0IGluIHRhYmxlXCIgaW5zZXJ0aW9uIG1vZGVcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5mdW5jdGlvbiBzdGFydFRhZ0luU2VsZWN0SW5UYWJsZShwLCB0b2tlbikge1xuICAgIGNvbnN0IHRuID0gdG9rZW4udGFnSUQ7XG4gICAgaWYgKHRuID09PSBodG1sX2pzXzEuVEFHX0lELkNBUFRJT04gfHxcbiAgICAgICAgdG4gPT09IGh0bWxfanNfMS5UQUdfSUQuVEFCTEUgfHxcbiAgICAgICAgdG4gPT09IGh0bWxfanNfMS5UQUdfSUQuVEJPRFkgfHxcbiAgICAgICAgdG4gPT09IGh0bWxfanNfMS5UQUdfSUQuVEZPT1QgfHxcbiAgICAgICAgdG4gPT09IGh0bWxfanNfMS5UQUdfSUQuVEhFQUQgfHxcbiAgICAgICAgdG4gPT09IGh0bWxfanNfMS5UQUdfSUQuVFIgfHxcbiAgICAgICAgdG4gPT09IGh0bWxfanNfMS5UQUdfSUQuVEQgfHxcbiAgICAgICAgdG4gPT09IGh0bWxfanNfMS5UQUdfSUQuVEgpIHtcbiAgICAgICAgcC5vcGVuRWxlbWVudHMucG9wVW50aWxUYWdOYW1lUG9wcGVkKGh0bWxfanNfMS5UQUdfSUQuU0VMRUNUKTtcbiAgICAgICAgcC5fcmVzZXRJbnNlcnRpb25Nb2RlKCk7XG4gICAgICAgIHAuX3Byb2Nlc3NTdGFydFRhZyh0b2tlbik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBzdGFydFRhZ0luU2VsZWN0KHAsIHRva2VuKTtcbiAgICB9XG59XG5mdW5jdGlvbiBlbmRUYWdJblNlbGVjdEluVGFibGUocCwgdG9rZW4pIHtcbiAgICBjb25zdCB0biA9IHRva2VuLnRhZ0lEO1xuICAgIGlmICh0biA9PT0gaHRtbF9qc18xLlRBR19JRC5DQVBUSU9OIHx8XG4gICAgICAgIHRuID09PSBodG1sX2pzXzEuVEFHX0lELlRBQkxFIHx8XG4gICAgICAgIHRuID09PSBodG1sX2pzXzEuVEFHX0lELlRCT0RZIHx8XG4gICAgICAgIHRuID09PSBodG1sX2pzXzEuVEFHX0lELlRGT09UIHx8XG4gICAgICAgIHRuID09PSBodG1sX2pzXzEuVEFHX0lELlRIRUFEIHx8XG4gICAgICAgIHRuID09PSBodG1sX2pzXzEuVEFHX0lELlRSIHx8XG4gICAgICAgIHRuID09PSBodG1sX2pzXzEuVEFHX0lELlREIHx8XG4gICAgICAgIHRuID09PSBodG1sX2pzXzEuVEFHX0lELlRIKSB7XG4gICAgICAgIGlmIChwLm9wZW5FbGVtZW50cy5oYXNJblRhYmxlU2NvcGUodG4pKSB7XG4gICAgICAgICAgICBwLm9wZW5FbGVtZW50cy5wb3BVbnRpbFRhZ05hbWVQb3BwZWQoaHRtbF9qc18xLlRBR19JRC5TRUxFQ1QpO1xuICAgICAgICAgICAgcC5fcmVzZXRJbnNlcnRpb25Nb2RlKCk7XG4gICAgICAgICAgICBwLm9uRW5kVGFnKHRva2VuKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZW5kVGFnSW5TZWxlY3QocCwgdG9rZW4pO1xuICAgIH1cbn1cbi8vIFRoZSBcImluIHRlbXBsYXRlXCIgaW5zZXJ0aW9uIG1vZGVcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5mdW5jdGlvbiBzdGFydFRhZ0luVGVtcGxhdGUocCwgdG9rZW4pIHtcbiAgICBzd2l0Y2ggKHRva2VuLnRhZ0lEKSB7XG4gICAgICAgIC8vIEZpcnN0LCBoYW5kbGUgdGFncyB0aGF0IGNhbiBzdGFydCB3aXRob3V0IGEgbW9kZSBjaGFuZ2VcbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELkJBU0U6XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5CQVNFRk9OVDpcbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELkJHU09VTkQ6XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5MSU5LOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuTUVUQTpcbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELk5PRlJBTUVTOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuU0NSSVBUOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuU1RZTEU6XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5URU1QTEFURTpcbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELlRJVExFOiB7XG4gICAgICAgICAgICBzdGFydFRhZ0luSGVhZChwLCB0b2tlbik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICAvLyBSZS1wcm9jZXNzIHRoZSB0b2tlbiBpbiB0aGUgYXBwcm9wcmlhdGUgbW9kZVxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuQ0FQVElPTjpcbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELkNPTEdST1VQOlxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuVEJPRFk6XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5URk9PVDpcbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELlRIRUFEOiB7XG4gICAgICAgICAgICBwLnRtcGxJbnNlcnRpb25Nb2RlU3RhY2tbMF0gPSBJbnNlcnRpb25Nb2RlLklOX1RBQkxFO1xuICAgICAgICAgICAgcC5pbnNlcnRpb25Nb2RlID0gSW5zZXJ0aW9uTW9kZS5JTl9UQUJMRTtcbiAgICAgICAgICAgIHN0YXJ0VGFnSW5UYWJsZShwLCB0b2tlbik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuQ09MOiB7XG4gICAgICAgICAgICBwLnRtcGxJbnNlcnRpb25Nb2RlU3RhY2tbMF0gPSBJbnNlcnRpb25Nb2RlLklOX0NPTFVNTl9HUk9VUDtcbiAgICAgICAgICAgIHAuaW5zZXJ0aW9uTW9kZSA9IEluc2VydGlvbk1vZGUuSU5fQ09MVU1OX0dST1VQO1xuICAgICAgICAgICAgc3RhcnRUYWdJbkNvbHVtbkdyb3VwKHAsIHRva2VuKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5UUjoge1xuICAgICAgICAgICAgcC50bXBsSW5zZXJ0aW9uTW9kZVN0YWNrWzBdID0gSW5zZXJ0aW9uTW9kZS5JTl9UQUJMRV9CT0RZO1xuICAgICAgICAgICAgcC5pbnNlcnRpb25Nb2RlID0gSW5zZXJ0aW9uTW9kZS5JTl9UQUJMRV9CT0RZO1xuICAgICAgICAgICAgc3RhcnRUYWdJblRhYmxlQm9keShwLCB0b2tlbik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuVEQ6XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5USDoge1xuICAgICAgICAgICAgcC50bXBsSW5zZXJ0aW9uTW9kZVN0YWNrWzBdID0gSW5zZXJ0aW9uTW9kZS5JTl9ST1c7XG4gICAgICAgICAgICBwLmluc2VydGlvbk1vZGUgPSBJbnNlcnRpb25Nb2RlLklOX1JPVztcbiAgICAgICAgICAgIHN0YXJ0VGFnSW5Sb3cocCwgdG9rZW4pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgcC50bXBsSW5zZXJ0aW9uTW9kZVN0YWNrWzBdID0gSW5zZXJ0aW9uTW9kZS5JTl9CT0RZO1xuICAgICAgICAgICAgcC5pbnNlcnRpb25Nb2RlID0gSW5zZXJ0aW9uTW9kZS5JTl9CT0RZO1xuICAgICAgICAgICAgc3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gZW5kVGFnSW5UZW1wbGF0ZShwLCB0b2tlbikge1xuICAgIGlmICh0b2tlbi50YWdJRCA9PT0gaHRtbF9qc18xLlRBR19JRC5URU1QTEFURSkge1xuICAgICAgICB0ZW1wbGF0ZUVuZFRhZ0luSGVhZChwLCB0b2tlbik7XG4gICAgfVxufVxuZnVuY3Rpb24gZW9mSW5UZW1wbGF0ZShwLCB0b2tlbikge1xuICAgIGlmIChwLm9wZW5FbGVtZW50cy50bXBsQ291bnQgPiAwKSB7XG4gICAgICAgIHAub3BlbkVsZW1lbnRzLnBvcFVudGlsVGFnTmFtZVBvcHBlZChodG1sX2pzXzEuVEFHX0lELlRFTVBMQVRFKTtcbiAgICAgICAgcC5hY3RpdmVGb3JtYXR0aW5nRWxlbWVudHMuY2xlYXJUb0xhc3RNYXJrZXIoKTtcbiAgICAgICAgcC50bXBsSW5zZXJ0aW9uTW9kZVN0YWNrLnNoaWZ0KCk7XG4gICAgICAgIHAuX3Jlc2V0SW5zZXJ0aW9uTW9kZSgpO1xuICAgICAgICBwLm9uRW9mKHRva2VuKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHN0b3BQYXJzaW5nKHAsIHRva2VuKTtcbiAgICB9XG59XG4vLyBUaGUgXCJhZnRlciBib2R5XCIgaW5zZXJ0aW9uIG1vZGVcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5mdW5jdGlvbiBzdGFydFRhZ0FmdGVyQm9keShwLCB0b2tlbikge1xuICAgIGlmICh0b2tlbi50YWdJRCA9PT0gaHRtbF9qc18xLlRBR19JRC5IVE1MKSB7XG4gICAgICAgIHN0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRva2VuQWZ0ZXJCb2R5KHAsIHRva2VuKTtcbiAgICB9XG59XG5mdW5jdGlvbiBlbmRUYWdBZnRlckJvZHkocCwgdG9rZW4pIHtcbiAgICB2YXIgX2E7XG4gICAgaWYgKHRva2VuLnRhZ0lEID09PSBodG1sX2pzXzEuVEFHX0lELkhUTUwpIHtcbiAgICAgICAgaWYgKCFwLmZyYWdtZW50Q29udGV4dCkge1xuICAgICAgICAgICAgcC5pbnNlcnRpb25Nb2RlID0gSW5zZXJ0aW9uTW9kZS5BRlRFUl9BRlRFUl9CT0RZO1xuICAgICAgICB9XG4gICAgICAgIC8vTk9URTogPGh0bWw+IGlzIG5ldmVyIHBvcHBlZCBmcm9tIHRoZSBzdGFjaywgc28gd2UgbmVlZCB0byB1cGRhdGVkXG4gICAgICAgIC8vdGhlIGVuZCBsb2NhdGlvbiBleHBsaWNpdGx5LlxuICAgICAgICBpZiAocC5vcHRpb25zLnNvdXJjZUNvZGVMb2NhdGlvbkluZm8gJiYgcC5vcGVuRWxlbWVudHMudGFnSURzWzBdID09PSBodG1sX2pzXzEuVEFHX0lELkhUTUwpIHtcbiAgICAgICAgICAgIHAuX3NldEVuZExvY2F0aW9uKHAub3BlbkVsZW1lbnRzLml0ZW1zWzBdLCB0b2tlbik7XG4gICAgICAgICAgICAvLyBVcGRhdGUgdGhlIGJvZHkgZWxlbWVudCwgaWYgaXQgZG9lc24ndCBoYXZlIGFuIGVuZCB0YWdcbiAgICAgICAgICAgIGNvbnN0IGJvZHlFbGVtZW50ID0gcC5vcGVuRWxlbWVudHMuaXRlbXNbMV07XG4gICAgICAgICAgICBpZiAoYm9keUVsZW1lbnQgJiYgISgoX2EgPSBwLnRyZWVBZGFwdGVyLmdldE5vZGVTb3VyY2VDb2RlTG9jYXRpb24oYm9keUVsZW1lbnQpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZW5kVGFnKSkge1xuICAgICAgICAgICAgICAgIHAuX3NldEVuZExvY2F0aW9uKGJvZHlFbGVtZW50LCB0b2tlbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRva2VuQWZ0ZXJCb2R5KHAsIHRva2VuKTtcbiAgICB9XG59XG5mdW5jdGlvbiB0b2tlbkFmdGVyQm9keShwLCB0b2tlbikge1xuICAgIHAuaW5zZXJ0aW9uTW9kZSA9IEluc2VydGlvbk1vZGUuSU5fQk9EWTtcbiAgICBtb2RlSW5Cb2R5KHAsIHRva2VuKTtcbn1cbi8vIFRoZSBcImluIGZyYW1lc2V0XCIgaW5zZXJ0aW9uIG1vZGVcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5mdW5jdGlvbiBzdGFydFRhZ0luRnJhbWVzZXQocCwgdG9rZW4pIHtcbiAgICBzd2l0Y2ggKHRva2VuLnRhZ0lEKSB7XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5IVE1MOiB7XG4gICAgICAgICAgICBzdGFydFRhZ0luQm9keShwLCB0b2tlbik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuRlJBTUVTRVQ6IHtcbiAgICAgICAgICAgIHAuX2luc2VydEVsZW1lbnQodG9rZW4sIGh0bWxfanNfMS5OUy5IVE1MKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5GUkFNRToge1xuICAgICAgICAgICAgcC5fYXBwZW5kRWxlbWVudCh0b2tlbiwgaHRtbF9qc18xLk5TLkhUTUwpO1xuICAgICAgICAgICAgdG9rZW4uYWNrU2VsZkNsb3NpbmcgPSB0cnVlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELk5PRlJBTUVTOiB7XG4gICAgICAgICAgICBzdGFydFRhZ0luSGVhZChwLCB0b2tlbik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAvLyBEbyBub3RoaW5nXG4gICAgfVxufVxuZnVuY3Rpb24gZW5kVGFnSW5GcmFtZXNldChwLCB0b2tlbikge1xuICAgIGlmICh0b2tlbi50YWdJRCA9PT0gaHRtbF9qc18xLlRBR19JRC5GUkFNRVNFVCAmJiAhcC5vcGVuRWxlbWVudHMuaXNSb290SHRtbEVsZW1lbnRDdXJyZW50KCkpIHtcbiAgICAgICAgcC5vcGVuRWxlbWVudHMucG9wKCk7XG4gICAgICAgIGlmICghcC5mcmFnbWVudENvbnRleHQgJiYgcC5vcGVuRWxlbWVudHMuY3VycmVudFRhZ0lkICE9PSBodG1sX2pzXzEuVEFHX0lELkZSQU1FU0VUKSB7XG4gICAgICAgICAgICBwLmluc2VydGlvbk1vZGUgPSBJbnNlcnRpb25Nb2RlLkFGVEVSX0ZSQU1FU0VUO1xuICAgICAgICB9XG4gICAgfVxufVxuLy8gVGhlIFwiYWZ0ZXIgZnJhbWVzZXRcIiBpbnNlcnRpb24gbW9kZVxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbmZ1bmN0aW9uIHN0YXJ0VGFnQWZ0ZXJGcmFtZXNldChwLCB0b2tlbikge1xuICAgIHN3aXRjaCAodG9rZW4udGFnSUQpIHtcbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELkhUTUw6IHtcbiAgICAgICAgICAgIHN0YXJ0VGFnSW5Cb2R5KHAsIHRva2VuKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgaHRtbF9qc18xLlRBR19JRC5OT0ZSQU1FUzoge1xuICAgICAgICAgICAgc3RhcnRUYWdJbkhlYWQocCwgdG9rZW4pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgLy8gRG8gbm90aGluZ1xuICAgIH1cbn1cbmZ1bmN0aW9uIGVuZFRhZ0FmdGVyRnJhbWVzZXQocCwgdG9rZW4pIHtcbiAgICBpZiAodG9rZW4udGFnSUQgPT09IGh0bWxfanNfMS5UQUdfSUQuSFRNTCkge1xuICAgICAgICBwLmluc2VydGlvbk1vZGUgPSBJbnNlcnRpb25Nb2RlLkFGVEVSX0FGVEVSX0ZSQU1FU0VUO1xuICAgIH1cbn1cbi8vIFRoZSBcImFmdGVyIGFmdGVyIGJvZHlcIiBpbnNlcnRpb24gbW9kZVxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbmZ1bmN0aW9uIHN0YXJ0VGFnQWZ0ZXJBZnRlckJvZHkocCwgdG9rZW4pIHtcbiAgICBpZiAodG9rZW4udGFnSUQgPT09IGh0bWxfanNfMS5UQUdfSUQuSFRNTCkge1xuICAgICAgICBzdGFydFRhZ0luQm9keShwLCB0b2tlbik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0b2tlbkFmdGVyQWZ0ZXJCb2R5KHAsIHRva2VuKTtcbiAgICB9XG59XG5mdW5jdGlvbiB0b2tlbkFmdGVyQWZ0ZXJCb2R5KHAsIHRva2VuKSB7XG4gICAgcC5pbnNlcnRpb25Nb2RlID0gSW5zZXJ0aW9uTW9kZS5JTl9CT0RZO1xuICAgIG1vZGVJbkJvZHkocCwgdG9rZW4pO1xufVxuLy8gVGhlIFwiYWZ0ZXIgYWZ0ZXIgZnJhbWVzZXRcIiBpbnNlcnRpb24gbW9kZVxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbmZ1bmN0aW9uIHN0YXJ0VGFnQWZ0ZXJBZnRlckZyYW1lc2V0KHAsIHRva2VuKSB7XG4gICAgc3dpdGNoICh0b2tlbi50YWdJRCkge1xuICAgICAgICBjYXNlIGh0bWxfanNfMS5UQUdfSUQuSFRNTDoge1xuICAgICAgICAgICAgc3RhcnRUYWdJbkJvZHkocCwgdG9rZW4pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBodG1sX2pzXzEuVEFHX0lELk5PRlJBTUVTOiB7XG4gICAgICAgICAgICBzdGFydFRhZ0luSGVhZChwLCB0b2tlbik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAvLyBEbyBub3RoaW5nXG4gICAgfVxufVxuLy8gVGhlIHJ1bGVzIGZvciBwYXJzaW5nIHRva2VucyBpbiBmb3JlaWduIGNvbnRlbnRcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5mdW5jdGlvbiBudWxsQ2hhcmFjdGVySW5Gb3JlaWduQ29udGVudChwLCB0b2tlbikge1xuICAgIHRva2VuLmNoYXJzID0gdW5pY29kZS5SRVBMQUNFTUVOVF9DSEFSQUNURVI7XG4gICAgcC5faW5zZXJ0Q2hhcmFjdGVycyh0b2tlbik7XG59XG5mdW5jdGlvbiBjaGFyYWN0ZXJJbkZvcmVpZ25Db250ZW50KHAsIHRva2VuKSB7XG4gICAgcC5faW5zZXJ0Q2hhcmFjdGVycyh0b2tlbik7XG4gICAgcC5mcmFtZXNldE9rID0gZmFsc2U7XG59XG5mdW5jdGlvbiBwb3BVbnRpbEh0bWxPckludGVncmF0aW9uUG9pbnQocCkge1xuICAgIHdoaWxlIChwLnRyZWVBZGFwdGVyLmdldE5hbWVzcGFjZVVSSShwLm9wZW5FbGVtZW50cy5jdXJyZW50KSAhPT0gaHRtbF9qc18xLk5TLkhUTUwgJiZcbiAgICAgICAgIXAuX2lzSW50ZWdyYXRpb25Qb2ludChwLm9wZW5FbGVtZW50cy5jdXJyZW50VGFnSWQsIHAub3BlbkVsZW1lbnRzLmN1cnJlbnQpKSB7XG4gICAgICAgIHAub3BlbkVsZW1lbnRzLnBvcCgpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHN0YXJ0VGFnSW5Gb3JlaWduQ29udGVudChwLCB0b2tlbikge1xuICAgIGlmIChmb3JlaWduQ29udGVudC5jYXVzZXNFeGl0KHRva2VuKSkge1xuICAgICAgICBwb3BVbnRpbEh0bWxPckludGVncmF0aW9uUG9pbnQocCk7XG4gICAgICAgIHAuX3N0YXJ0VGFnT3V0c2lkZUZvcmVpZ25Db250ZW50KHRva2VuKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnQgPSBwLl9nZXRBZGp1c3RlZEN1cnJlbnRFbGVtZW50KCk7XG4gICAgICAgIGNvbnN0IGN1cnJlbnROcyA9IHAudHJlZUFkYXB0ZXIuZ2V0TmFtZXNwYWNlVVJJKGN1cnJlbnQpO1xuICAgICAgICBpZiAoY3VycmVudE5zID09PSBodG1sX2pzXzEuTlMuTUFUSE1MKSB7XG4gICAgICAgICAgICBmb3JlaWduQ29udGVudC5hZGp1c3RUb2tlbk1hdGhNTEF0dHJzKHRva2VuKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjdXJyZW50TnMgPT09IGh0bWxfanNfMS5OUy5TVkcpIHtcbiAgICAgICAgICAgIGZvcmVpZ25Db250ZW50LmFkanVzdFRva2VuU1ZHVGFnTmFtZSh0b2tlbik7XG4gICAgICAgICAgICBmb3JlaWduQ29udGVudC5hZGp1c3RUb2tlblNWR0F0dHJzKHRva2VuKTtcbiAgICAgICAgfVxuICAgICAgICBmb3JlaWduQ29udGVudC5hZGp1c3RUb2tlblhNTEF0dHJzKHRva2VuKTtcbiAgICAgICAgaWYgKHRva2VuLnNlbGZDbG9zaW5nKSB7XG4gICAgICAgICAgICBwLl9hcHBlbmRFbGVtZW50KHRva2VuLCBjdXJyZW50TnMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcC5faW5zZXJ0RWxlbWVudCh0b2tlbiwgY3VycmVudE5zKTtcbiAgICAgICAgfVxuICAgICAgICB0b2tlbi5hY2tTZWxmQ2xvc2luZyA9IHRydWU7XG4gICAgfVxufVxuZnVuY3Rpb24gZW5kVGFnSW5Gb3JlaWduQ29udGVudChwLCB0b2tlbikge1xuICAgIGlmICh0b2tlbi50YWdJRCA9PT0gaHRtbF9qc18xLlRBR19JRC5QIHx8IHRva2VuLnRhZ0lEID09PSBodG1sX2pzXzEuVEFHX0lELkJSKSB7XG4gICAgICAgIHBvcFVudGlsSHRtbE9ySW50ZWdyYXRpb25Qb2ludChwKTtcbiAgICAgICAgcC5fZW5kVGFnT3V0c2lkZUZvcmVpZ25Db250ZW50KHRva2VuKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gcC5vcGVuRWxlbWVudHMuc3RhY2tUb3A7IGkgPiAwOyBpLS0pIHtcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IHAub3BlbkVsZW1lbnRzLml0ZW1zW2ldO1xuICAgICAgICBpZiAocC50cmVlQWRhcHRlci5nZXROYW1lc3BhY2VVUkkoZWxlbWVudCkgPT09IGh0bWxfanNfMS5OUy5IVE1MKSB7XG4gICAgICAgICAgICBwLl9lbmRUYWdPdXRzaWRlRm9yZWlnbkNvbnRlbnQodG9rZW4pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdGFnTmFtZSA9IHAudHJlZUFkYXB0ZXIuZ2V0VGFnTmFtZShlbGVtZW50KTtcbiAgICAgICAgaWYgKHRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gdG9rZW4udGFnTmFtZSkge1xuICAgICAgICAgICAgLy9OT1RFOiB1cGRhdGUgdGhlIHRva2VuIHRhZyBuYW1lIGZvciBgX3NldEVuZExvY2F0aW9uYC5cbiAgICAgICAgICAgIHRva2VuLnRhZ05hbWUgPSB0YWdOYW1lO1xuICAgICAgICAgICAgcC5vcGVuRWxlbWVudHMuc2hvcnRlblRvTGVuZ3RoKGkpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuT3BlbkVsZW1lbnRTdGFjayA9IHZvaWQgMDtcbmNvbnN0IGh0bWxfanNfMSA9IHJlcXVpcmUoXCIuLi9jb21tb24vaHRtbC5qc1wiKTtcbi8vRWxlbWVudCB1dGlsc1xuY29uc3QgSU1QTElDSVRfRU5EX1RBR19SRVFVSVJFRCA9IG5ldyBTZXQoW2h0bWxfanNfMS5UQUdfSUQuREQsIGh0bWxfanNfMS5UQUdfSUQuRFQsIGh0bWxfanNfMS5UQUdfSUQuTEksIGh0bWxfanNfMS5UQUdfSUQuT1BUR1JPVVAsIGh0bWxfanNfMS5UQUdfSUQuT1BUSU9OLCBodG1sX2pzXzEuVEFHX0lELlAsIGh0bWxfanNfMS5UQUdfSUQuUkIsIGh0bWxfanNfMS5UQUdfSUQuUlAsIGh0bWxfanNfMS5UQUdfSUQuUlQsIGh0bWxfanNfMS5UQUdfSUQuUlRDXSk7XG5jb25zdCBJTVBMSUNJVF9FTkRfVEFHX1JFUVVJUkVEX1RIT1JPVUdITFkgPSBuZXcgU2V0KFtcbiAgICAuLi5JTVBMSUNJVF9FTkRfVEFHX1JFUVVJUkVELFxuICAgIGh0bWxfanNfMS5UQUdfSUQuQ0FQVElPTixcbiAgICBodG1sX2pzXzEuVEFHX0lELkNPTEdST1VQLFxuICAgIGh0bWxfanNfMS5UQUdfSUQuVEJPRFksXG4gICAgaHRtbF9qc18xLlRBR19JRC5URCxcbiAgICBodG1sX2pzXzEuVEFHX0lELlRGT09ULFxuICAgIGh0bWxfanNfMS5UQUdfSUQuVEgsXG4gICAgaHRtbF9qc18xLlRBR19JRC5USEVBRCxcbiAgICBodG1sX2pzXzEuVEFHX0lELlRSLFxuXSk7XG5jb25zdCBTQ09QSU5HX0VMRU1FTlRfTlMgPSBuZXcgTWFwKFtcbiAgICBbaHRtbF9qc18xLlRBR19JRC5BUFBMRVQsIGh0bWxfanNfMS5OUy5IVE1MXSxcbiAgICBbaHRtbF9qc18xLlRBR19JRC5DQVBUSU9OLCBodG1sX2pzXzEuTlMuSFRNTF0sXG4gICAgW2h0bWxfanNfMS5UQUdfSUQuSFRNTCwgaHRtbF9qc18xLk5TLkhUTUxdLFxuICAgIFtodG1sX2pzXzEuVEFHX0lELk1BUlFVRUUsIGh0bWxfanNfMS5OUy5IVE1MXSxcbiAgICBbaHRtbF9qc18xLlRBR19JRC5PQkpFQ1QsIGh0bWxfanNfMS5OUy5IVE1MXSxcbiAgICBbaHRtbF9qc18xLlRBR19JRC5UQUJMRSwgaHRtbF9qc18xLk5TLkhUTUxdLFxuICAgIFtodG1sX2pzXzEuVEFHX0lELlRELCBodG1sX2pzXzEuTlMuSFRNTF0sXG4gICAgW2h0bWxfanNfMS5UQUdfSUQuVEVNUExBVEUsIGh0bWxfanNfMS5OUy5IVE1MXSxcbiAgICBbaHRtbF9qc18xLlRBR19JRC5USCwgaHRtbF9qc18xLk5TLkhUTUxdLFxuICAgIFtodG1sX2pzXzEuVEFHX0lELkFOTk9UQVRJT05fWE1MLCBodG1sX2pzXzEuTlMuTUFUSE1MXSxcbiAgICBbaHRtbF9qc18xLlRBR19JRC5NSSwgaHRtbF9qc18xLk5TLk1BVEhNTF0sXG4gICAgW2h0bWxfanNfMS5UQUdfSUQuTU4sIGh0bWxfanNfMS5OUy5NQVRITUxdLFxuICAgIFtodG1sX2pzXzEuVEFHX0lELk1PLCBodG1sX2pzXzEuTlMuTUFUSE1MXSxcbiAgICBbaHRtbF9qc18xLlRBR19JRC5NUywgaHRtbF9qc18xLk5TLk1BVEhNTF0sXG4gICAgW2h0bWxfanNfMS5UQUdfSUQuTVRFWFQsIGh0bWxfanNfMS5OUy5NQVRITUxdLFxuICAgIFtodG1sX2pzXzEuVEFHX0lELkRFU0MsIGh0bWxfanNfMS5OUy5TVkddLFxuICAgIFtodG1sX2pzXzEuVEFHX0lELkZPUkVJR05fT0JKRUNULCBodG1sX2pzXzEuTlMuU1ZHXSxcbiAgICBbaHRtbF9qc18xLlRBR19JRC5USVRMRSwgaHRtbF9qc18xLk5TLlNWR10sXG5dKTtcbmNvbnN0IE5BTUVEX0hFQURFUlMgPSBbaHRtbF9qc18xLlRBR19JRC5IMSwgaHRtbF9qc18xLlRBR19JRC5IMiwgaHRtbF9qc18xLlRBR19JRC5IMywgaHRtbF9qc18xLlRBR19JRC5INCwgaHRtbF9qc18xLlRBR19JRC5INSwgaHRtbF9qc18xLlRBR19JRC5INl07XG5jb25zdCBUQUJMRV9ST1dfQ09OVEVYVCA9IFtodG1sX2pzXzEuVEFHX0lELlRSLCBodG1sX2pzXzEuVEFHX0lELlRFTVBMQVRFLCBodG1sX2pzXzEuVEFHX0lELkhUTUxdO1xuY29uc3QgVEFCTEVfQk9EWV9DT05URVhUID0gW2h0bWxfanNfMS5UQUdfSUQuVEJPRFksIGh0bWxfanNfMS5UQUdfSUQuVEZPT1QsIGh0bWxfanNfMS5UQUdfSUQuVEhFQUQsIGh0bWxfanNfMS5UQUdfSUQuVEVNUExBVEUsIGh0bWxfanNfMS5UQUdfSUQuSFRNTF07XG5jb25zdCBUQUJMRV9DT05URVhUID0gW2h0bWxfanNfMS5UQUdfSUQuVEFCTEUsIGh0bWxfanNfMS5UQUdfSUQuVEVNUExBVEUsIGh0bWxfanNfMS5UQUdfSUQuSFRNTF07XG5jb25zdCBUQUJMRV9DRUxMUyA9IFtodG1sX2pzXzEuVEFHX0lELlRELCBodG1sX2pzXzEuVEFHX0lELlRIXTtcbi8vU3RhY2sgb2Ygb3BlbiBlbGVtZW50c1xuY2xhc3MgT3BlbkVsZW1lbnRTdGFjayB7XG4gICAgZ2V0IGN1cnJlbnRUbXBsQ29udGVudE9yTm9kZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzSW5UZW1wbGF0ZSgpID8gdGhpcy50cmVlQWRhcHRlci5nZXRUZW1wbGF0ZUNvbnRlbnQodGhpcy5jdXJyZW50KSA6IHRoaXMuY3VycmVudDtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoZG9jdW1lbnQsIHRyZWVBZGFwdGVyLCBoYW5kbGVyKSB7XG4gICAgICAgIHRoaXMudHJlZUFkYXB0ZXIgPSB0cmVlQWRhcHRlcjtcbiAgICAgICAgdGhpcy5oYW5kbGVyID0gaGFuZGxlcjtcbiAgICAgICAgdGhpcy5pdGVtcyA9IFtdO1xuICAgICAgICB0aGlzLnRhZ0lEcyA9IFtdO1xuICAgICAgICB0aGlzLnN0YWNrVG9wID0gLTE7XG4gICAgICAgIHRoaXMudG1wbENvdW50ID0gMDtcbiAgICAgICAgdGhpcy5jdXJyZW50VGFnSWQgPSBodG1sX2pzXzEuVEFHX0lELlVOS05PV047XG4gICAgICAgIHRoaXMuY3VycmVudCA9IGRvY3VtZW50O1xuICAgIH1cbiAgICAvL0luZGV4IG9mIGVsZW1lbnRcbiAgICBfaW5kZXhPZihlbGVtZW50KSB7XG4gICAgICAgIHJldHVybiB0aGlzLml0ZW1zLmxhc3RJbmRleE9mKGVsZW1lbnQsIHRoaXMuc3RhY2tUb3ApO1xuICAgIH1cbiAgICAvL1VwZGF0ZSBjdXJyZW50IGVsZW1lbnRcbiAgICBfaXNJblRlbXBsYXRlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jdXJyZW50VGFnSWQgPT09IGh0bWxfanNfMS5UQUdfSUQuVEVNUExBVEUgJiYgdGhpcy50cmVlQWRhcHRlci5nZXROYW1lc3BhY2VVUkkodGhpcy5jdXJyZW50KSA9PT0gaHRtbF9qc18xLk5TLkhUTUw7XG4gICAgfVxuICAgIF91cGRhdGVDdXJyZW50RWxlbWVudCgpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50ID0gdGhpcy5pdGVtc1t0aGlzLnN0YWNrVG9wXTtcbiAgICAgICAgdGhpcy5jdXJyZW50VGFnSWQgPSB0aGlzLnRhZ0lEc1t0aGlzLnN0YWNrVG9wXTtcbiAgICB9XG4gICAgLy9NdXRhdGlvbnNcbiAgICBwdXNoKGVsZW1lbnQsIHRhZ0lEKSB7XG4gICAgICAgIHRoaXMuc3RhY2tUb3ArKztcbiAgICAgICAgdGhpcy5pdGVtc1t0aGlzLnN0YWNrVG9wXSA9IGVsZW1lbnQ7XG4gICAgICAgIHRoaXMuY3VycmVudCA9IGVsZW1lbnQ7XG4gICAgICAgIHRoaXMudGFnSURzW3RoaXMuc3RhY2tUb3BdID0gdGFnSUQ7XG4gICAgICAgIHRoaXMuY3VycmVudFRhZ0lkID0gdGFnSUQ7XG4gICAgICAgIGlmICh0aGlzLl9pc0luVGVtcGxhdGUoKSkge1xuICAgICAgICAgICAgdGhpcy50bXBsQ291bnQrKztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmhhbmRsZXIub25JdGVtUHVzaChlbGVtZW50LCB0YWdJRCwgdHJ1ZSk7XG4gICAgfVxuICAgIHBvcCgpIHtcbiAgICAgICAgY29uc3QgcG9wcGVkID0gdGhpcy5jdXJyZW50O1xuICAgICAgICBpZiAodGhpcy50bXBsQ291bnQgPiAwICYmIHRoaXMuX2lzSW5UZW1wbGF0ZSgpKSB7XG4gICAgICAgICAgICB0aGlzLnRtcGxDb3VudC0tO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc3RhY2tUb3AtLTtcbiAgICAgICAgdGhpcy5fdXBkYXRlQ3VycmVudEVsZW1lbnQoKTtcbiAgICAgICAgdGhpcy5oYW5kbGVyLm9uSXRlbVBvcChwb3BwZWQsIHRydWUpO1xuICAgIH1cbiAgICByZXBsYWNlKG9sZEVsZW1lbnQsIG5ld0VsZW1lbnQpIHtcbiAgICAgICAgY29uc3QgaWR4ID0gdGhpcy5faW5kZXhPZihvbGRFbGVtZW50KTtcbiAgICAgICAgdGhpcy5pdGVtc1tpZHhdID0gbmV3RWxlbWVudDtcbiAgICAgICAgaWYgKGlkeCA9PT0gdGhpcy5zdGFja1RvcCkge1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50ID0gbmV3RWxlbWVudDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpbnNlcnRBZnRlcihyZWZlcmVuY2VFbGVtZW50LCBuZXdFbGVtZW50LCBuZXdFbGVtZW50SUQpIHtcbiAgICAgICAgY29uc3QgaW5zZXJ0aW9uSWR4ID0gdGhpcy5faW5kZXhPZihyZWZlcmVuY2VFbGVtZW50KSArIDE7XG4gICAgICAgIHRoaXMuaXRlbXMuc3BsaWNlKGluc2VydGlvbklkeCwgMCwgbmV3RWxlbWVudCk7XG4gICAgICAgIHRoaXMudGFnSURzLnNwbGljZShpbnNlcnRpb25JZHgsIDAsIG5ld0VsZW1lbnRJRCk7XG4gICAgICAgIHRoaXMuc3RhY2tUb3ArKztcbiAgICAgICAgaWYgKGluc2VydGlvbklkeCA9PT0gdGhpcy5zdGFja1RvcCkge1xuICAgICAgICAgICAgdGhpcy5fdXBkYXRlQ3VycmVudEVsZW1lbnQoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmhhbmRsZXIub25JdGVtUHVzaCh0aGlzLmN1cnJlbnQsIHRoaXMuY3VycmVudFRhZ0lkLCBpbnNlcnRpb25JZHggPT09IHRoaXMuc3RhY2tUb3ApO1xuICAgIH1cbiAgICBwb3BVbnRpbFRhZ05hbWVQb3BwZWQodGFnTmFtZSkge1xuICAgICAgICBsZXQgdGFyZ2V0SWR4ID0gdGhpcy5zdGFja1RvcCArIDE7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIHRhcmdldElkeCA9IHRoaXMudGFnSURzLmxhc3RJbmRleE9mKHRhZ05hbWUsIHRhcmdldElkeCAtIDEpO1xuICAgICAgICB9IHdoaWxlICh0YXJnZXRJZHggPiAwICYmIHRoaXMudHJlZUFkYXB0ZXIuZ2V0TmFtZXNwYWNlVVJJKHRoaXMuaXRlbXNbdGFyZ2V0SWR4XSkgIT09IGh0bWxfanNfMS5OUy5IVE1MKTtcbiAgICAgICAgdGhpcy5zaG9ydGVuVG9MZW5ndGgodGFyZ2V0SWR4IDwgMCA/IDAgOiB0YXJnZXRJZHgpO1xuICAgIH1cbiAgICBzaG9ydGVuVG9MZW5ndGgoaWR4KSB7XG4gICAgICAgIHdoaWxlICh0aGlzLnN0YWNrVG9wID49IGlkeCkge1xuICAgICAgICAgICAgY29uc3QgcG9wcGVkID0gdGhpcy5jdXJyZW50O1xuICAgICAgICAgICAgaWYgKHRoaXMudG1wbENvdW50ID4gMCAmJiB0aGlzLl9pc0luVGVtcGxhdGUoKSkge1xuICAgICAgICAgICAgICAgIHRoaXMudG1wbENvdW50IC09IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnN0YWNrVG9wLS07XG4gICAgICAgICAgICB0aGlzLl91cGRhdGVDdXJyZW50RWxlbWVudCgpO1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVyLm9uSXRlbVBvcChwb3BwZWQsIHRoaXMuc3RhY2tUb3AgPCBpZHgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHBvcFVudGlsRWxlbWVudFBvcHBlZChlbGVtZW50KSB7XG4gICAgICAgIGNvbnN0IGlkeCA9IHRoaXMuX2luZGV4T2YoZWxlbWVudCk7XG4gICAgICAgIHRoaXMuc2hvcnRlblRvTGVuZ3RoKGlkeCA8IDAgPyAwIDogaWR4KTtcbiAgICB9XG4gICAgcG9wVW50aWxQb3BwZWQodGFnTmFtZXMsIHRhcmdldE5TKSB7XG4gICAgICAgIGNvbnN0IGlkeCA9IHRoaXMuX2luZGV4T2ZUYWdOYW1lcyh0YWdOYW1lcywgdGFyZ2V0TlMpO1xuICAgICAgICB0aGlzLnNob3J0ZW5Ub0xlbmd0aChpZHggPCAwID8gMCA6IGlkeCk7XG4gICAgfVxuICAgIHBvcFVudGlsTnVtYmVyZWRIZWFkZXJQb3BwZWQoKSB7XG4gICAgICAgIHRoaXMucG9wVW50aWxQb3BwZWQoTkFNRURfSEVBREVSUywgaHRtbF9qc18xLk5TLkhUTUwpO1xuICAgIH1cbiAgICBwb3BVbnRpbFRhYmxlQ2VsbFBvcHBlZCgpIHtcbiAgICAgICAgdGhpcy5wb3BVbnRpbFBvcHBlZChUQUJMRV9DRUxMUywgaHRtbF9qc18xLk5TLkhUTUwpO1xuICAgIH1cbiAgICBwb3BBbGxVcFRvSHRtbEVsZW1lbnQoKSB7XG4gICAgICAgIC8vTk9URTogaGVyZSB3ZSBhc3N1bWUgdGhhdCB0aGUgcm9vdCA8aHRtbD4gZWxlbWVudCBpcyBhbHdheXMgZmlyc3QgaW4gdGhlIG9wZW4gZWxlbWVudCBzdGFjaywgc29cbiAgICAgICAgLy93ZSBwZXJmb3JtIHRoaXMgZmFzdCBzdGFjayBjbGVhbiB1cC5cbiAgICAgICAgdGhpcy50bXBsQ291bnQgPSAwO1xuICAgICAgICB0aGlzLnNob3J0ZW5Ub0xlbmd0aCgxKTtcbiAgICB9XG4gICAgX2luZGV4T2ZUYWdOYW1lcyh0YWdOYW1lcywgbmFtZXNwYWNlKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSB0aGlzLnN0YWNrVG9wOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgaWYgKHRhZ05hbWVzLmluY2x1ZGVzKHRoaXMudGFnSURzW2ldKSAmJiB0aGlzLnRyZWVBZGFwdGVyLmdldE5hbWVzcGFjZVVSSSh0aGlzLml0ZW1zW2ldKSA9PT0gbmFtZXNwYWNlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIC0xO1xuICAgIH1cbiAgICBjbGVhckJhY2tUbyh0YWdOYW1lcywgdGFyZ2V0TlMpIHtcbiAgICAgICAgY29uc3QgaWR4ID0gdGhpcy5faW5kZXhPZlRhZ05hbWVzKHRhZ05hbWVzLCB0YXJnZXROUyk7XG4gICAgICAgIHRoaXMuc2hvcnRlblRvTGVuZ3RoKGlkeCArIDEpO1xuICAgIH1cbiAgICBjbGVhckJhY2tUb1RhYmxlQ29udGV4dCgpIHtcbiAgICAgICAgdGhpcy5jbGVhckJhY2tUbyhUQUJMRV9DT05URVhULCBodG1sX2pzXzEuTlMuSFRNTCk7XG4gICAgfVxuICAgIGNsZWFyQmFja1RvVGFibGVCb2R5Q29udGV4dCgpIHtcbiAgICAgICAgdGhpcy5jbGVhckJhY2tUbyhUQUJMRV9CT0RZX0NPTlRFWFQsIGh0bWxfanNfMS5OUy5IVE1MKTtcbiAgICB9XG4gICAgY2xlYXJCYWNrVG9UYWJsZVJvd0NvbnRleHQoKSB7XG4gICAgICAgIHRoaXMuY2xlYXJCYWNrVG8oVEFCTEVfUk9XX0NPTlRFWFQsIGh0bWxfanNfMS5OUy5IVE1MKTtcbiAgICB9XG4gICAgcmVtb3ZlKGVsZW1lbnQpIHtcbiAgICAgICAgY29uc3QgaWR4ID0gdGhpcy5faW5kZXhPZihlbGVtZW50KTtcbiAgICAgICAgaWYgKGlkeCA+PSAwKSB7XG4gICAgICAgICAgICBpZiAoaWR4ID09PSB0aGlzLnN0YWNrVG9wKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wb3AoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuaXRlbXMuc3BsaWNlKGlkeCwgMSk7XG4gICAgICAgICAgICAgICAgdGhpcy50YWdJRHMuc3BsaWNlKGlkeCwgMSk7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGFja1RvcC0tO1xuICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZUN1cnJlbnRFbGVtZW50KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVyLm9uSXRlbVBvcChlbGVtZW50LCBmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy9TZWFyY2hcbiAgICB0cnlQZWVrUHJvcGVybHlOZXN0ZWRCb2R5RWxlbWVudCgpIHtcbiAgICAgICAgLy9Qcm9wZXJseSBuZXN0ZWQgPGJvZHk+IGVsZW1lbnQgKHNob3VsZCBiZSBzZWNvbmQgZWxlbWVudCBpbiBzdGFjaykuXG4gICAgICAgIHJldHVybiB0aGlzLnN0YWNrVG9wID49IDEgJiYgdGhpcy50YWdJRHNbMV0gPT09IGh0bWxfanNfMS5UQUdfSUQuQk9EWSA/IHRoaXMuaXRlbXNbMV0gOiBudWxsO1xuICAgIH1cbiAgICBjb250YWlucyhlbGVtZW50KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbmRleE9mKGVsZW1lbnQpID4gLTE7XG4gICAgfVxuICAgIGdldENvbW1vbkFuY2VzdG9yKGVsZW1lbnQpIHtcbiAgICAgICAgY29uc3QgZWxlbWVudElkeCA9IHRoaXMuX2luZGV4T2YoZWxlbWVudCkgLSAxO1xuICAgICAgICByZXR1cm4gZWxlbWVudElkeCA+PSAwID8gdGhpcy5pdGVtc1tlbGVtZW50SWR4XSA6IG51bGw7XG4gICAgfVxuICAgIGlzUm9vdEh0bWxFbGVtZW50Q3VycmVudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhY2tUb3AgPT09IDAgJiYgdGhpcy50YWdJRHNbMF0gPT09IGh0bWxfanNfMS5UQUdfSUQuSFRNTDtcbiAgICB9XG4gICAgLy9FbGVtZW50IGluIHNjb3BlXG4gICAgaGFzSW5TY29wZSh0YWdOYW1lKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSB0aGlzLnN0YWNrVG9wOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgY29uc3QgdG4gPSB0aGlzLnRhZ0lEc1tpXTtcbiAgICAgICAgICAgIGNvbnN0IG5zID0gdGhpcy50cmVlQWRhcHRlci5nZXROYW1lc3BhY2VVUkkodGhpcy5pdGVtc1tpXSk7XG4gICAgICAgICAgICBpZiAodG4gPT09IHRhZ05hbWUgJiYgbnMgPT09IGh0bWxfanNfMS5OUy5IVE1MKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoU0NPUElOR19FTEVNRU5UX05TLmdldCh0bikgPT09IG5zKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBoYXNOdW1iZXJlZEhlYWRlckluU2NvcGUoKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSB0aGlzLnN0YWNrVG9wOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgY29uc3QgdG4gPSB0aGlzLnRhZ0lEc1tpXTtcbiAgICAgICAgICAgIGNvbnN0IG5zID0gdGhpcy50cmVlQWRhcHRlci5nZXROYW1lc3BhY2VVUkkodGhpcy5pdGVtc1tpXSk7XG4gICAgICAgICAgICBpZiAoKDAsIGh0bWxfanNfMS5pc051bWJlcmVkSGVhZGVyKSh0bikgJiYgbnMgPT09IGh0bWxfanNfMS5OUy5IVE1MKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoU0NPUElOR19FTEVNRU5UX05TLmdldCh0bikgPT09IG5zKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBoYXNJbkxpc3RJdGVtU2NvcGUodGFnTmFtZSkge1xuICAgICAgICBmb3IgKGxldCBpID0gdGhpcy5zdGFja1RvcDsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgIGNvbnN0IHRuID0gdGhpcy50YWdJRHNbaV07XG4gICAgICAgICAgICBjb25zdCBucyA9IHRoaXMudHJlZUFkYXB0ZXIuZ2V0TmFtZXNwYWNlVVJJKHRoaXMuaXRlbXNbaV0pO1xuICAgICAgICAgICAgaWYgKHRuID09PSB0YWdOYW1lICYmIG5zID09PSBodG1sX2pzXzEuTlMuSFRNTCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCgodG4gPT09IGh0bWxfanNfMS5UQUdfSUQuVUwgfHwgdG4gPT09IGh0bWxfanNfMS5UQUdfSUQuT0wpICYmIG5zID09PSBodG1sX2pzXzEuTlMuSFRNTCkgfHwgU0NPUElOR19FTEVNRU5UX05TLmdldCh0bikgPT09IG5zKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBoYXNJbkJ1dHRvblNjb3BlKHRhZ05hbWUpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IHRoaXMuc3RhY2tUb3A7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICBjb25zdCB0biA9IHRoaXMudGFnSURzW2ldO1xuICAgICAgICAgICAgY29uc3QgbnMgPSB0aGlzLnRyZWVBZGFwdGVyLmdldE5hbWVzcGFjZVVSSSh0aGlzLml0ZW1zW2ldKTtcbiAgICAgICAgICAgIGlmICh0biA9PT0gdGFnTmFtZSAmJiBucyA9PT0gaHRtbF9qc18xLk5TLkhUTUwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgodG4gPT09IGh0bWxfanNfMS5UQUdfSUQuQlVUVE9OICYmIG5zID09PSBodG1sX2pzXzEuTlMuSFRNTCkgfHwgU0NPUElOR19FTEVNRU5UX05TLmdldCh0bikgPT09IG5zKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBoYXNJblRhYmxlU2NvcGUodGFnTmFtZSkge1xuICAgICAgICBmb3IgKGxldCBpID0gdGhpcy5zdGFja1RvcDsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgIGNvbnN0IHRuID0gdGhpcy50YWdJRHNbaV07XG4gICAgICAgICAgICBjb25zdCBucyA9IHRoaXMudHJlZUFkYXB0ZXIuZ2V0TmFtZXNwYWNlVVJJKHRoaXMuaXRlbXNbaV0pO1xuICAgICAgICAgICAgaWYgKG5zICE9PSBodG1sX2pzXzEuTlMuSFRNTCkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRuID09PSB0YWdOYW1lKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodG4gPT09IGh0bWxfanNfMS5UQUdfSUQuVEFCTEUgfHwgdG4gPT09IGh0bWxfanNfMS5UQUdfSUQuVEVNUExBVEUgfHwgdG4gPT09IGh0bWxfanNfMS5UQUdfSUQuSFRNTCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaGFzVGFibGVCb2R5Q29udGV4dEluVGFibGVTY29wZSgpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IHRoaXMuc3RhY2tUb3A7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICBjb25zdCB0biA9IHRoaXMudGFnSURzW2ldO1xuICAgICAgICAgICAgY29uc3QgbnMgPSB0aGlzLnRyZWVBZGFwdGVyLmdldE5hbWVzcGFjZVVSSSh0aGlzLml0ZW1zW2ldKTtcbiAgICAgICAgICAgIGlmIChucyAhPT0gaHRtbF9qc18xLk5TLkhUTUwpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0biA9PT0gaHRtbF9qc18xLlRBR19JRC5UQk9EWSB8fCB0biA9PT0gaHRtbF9qc18xLlRBR19JRC5USEVBRCB8fCB0biA9PT0gaHRtbF9qc18xLlRBR19JRC5URk9PVCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRuID09PSBodG1sX2pzXzEuVEFHX0lELlRBQkxFIHx8IHRuID09PSBodG1sX2pzXzEuVEFHX0lELkhUTUwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGhhc0luU2VsZWN0U2NvcGUodGFnTmFtZSkge1xuICAgICAgICBmb3IgKGxldCBpID0gdGhpcy5zdGFja1RvcDsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgIGNvbnN0IHRuID0gdGhpcy50YWdJRHNbaV07XG4gICAgICAgICAgICBjb25zdCBucyA9IHRoaXMudHJlZUFkYXB0ZXIuZ2V0TmFtZXNwYWNlVVJJKHRoaXMuaXRlbXNbaV0pO1xuICAgICAgICAgICAgaWYgKG5zICE9PSBodG1sX2pzXzEuTlMuSFRNTCkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRuID09PSB0YWdOYW1lKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodG4gIT09IGh0bWxfanNfMS5UQUdfSUQuT1BUSU9OICYmIHRuICE9PSBodG1sX2pzXzEuVEFHX0lELk9QVEdST1VQKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICAvL0ltcGxpZWQgZW5kIHRhZ3NcbiAgICBnZW5lcmF0ZUltcGxpZWRFbmRUYWdzKCkge1xuICAgICAgICB3aGlsZSAoSU1QTElDSVRfRU5EX1RBR19SRVFVSVJFRC5oYXModGhpcy5jdXJyZW50VGFnSWQpKSB7XG4gICAgICAgICAgICB0aGlzLnBvcCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdlbmVyYXRlSW1wbGllZEVuZFRhZ3NUaG9yb3VnaGx5KCkge1xuICAgICAgICB3aGlsZSAoSU1QTElDSVRfRU5EX1RBR19SRVFVSVJFRF9USE9ST1VHSExZLmhhcyh0aGlzLmN1cnJlbnRUYWdJZCkpIHtcbiAgICAgICAgICAgIHRoaXMucG9wKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2VuZXJhdGVJbXBsaWVkRW5kVGFnc1dpdGhFeGNsdXNpb24oZXhjbHVzaW9uSWQpIHtcbiAgICAgICAgd2hpbGUgKHRoaXMuY3VycmVudFRhZ0lkICE9PSBleGNsdXNpb25JZCAmJiBJTVBMSUNJVF9FTkRfVEFHX1JFUVVJUkVEX1RIT1JPVUdITFkuaGFzKHRoaXMuY3VycmVudFRhZ0lkKSkge1xuICAgICAgICAgICAgdGhpcy5wb3AoKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuT3BlbkVsZW1lbnRTdGFjayA9IE9wZW5FbGVtZW50U3RhY2s7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vcGVuLWVsZW1lbnQtc3RhY2suanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnNlcmlhbGl6ZU91dGVyID0gZXhwb3J0cy5zZXJpYWxpemUgPSB2b2lkIDA7XG5jb25zdCBodG1sX2pzXzEgPSByZXF1aXJlKFwiLi4vY29tbW9uL2h0bWwuanNcIik7XG5jb25zdCBlc2NhcGVfanNfMSA9IHJlcXVpcmUoXCJlbnRpdGllcy9saWIvZXNjYXBlLmpzXCIpO1xuY29uc3QgZGVmYXVsdF9qc18xID0gcmVxdWlyZShcIi4uL3RyZWUtYWRhcHRlcnMvZGVmYXVsdC5qc1wiKTtcbi8vIFNldHNcbmNvbnN0IFZPSURfRUxFTUVOVFMgPSBuZXcgU2V0KFtcbiAgICBodG1sX2pzXzEuVEFHX05BTUVTLkFSRUEsXG4gICAgaHRtbF9qc18xLlRBR19OQU1FUy5CQVNFLFxuICAgIGh0bWxfanNfMS5UQUdfTkFNRVMuQkFTRUZPTlQsXG4gICAgaHRtbF9qc18xLlRBR19OQU1FUy5CR1NPVU5ELFxuICAgIGh0bWxfanNfMS5UQUdfTkFNRVMuQlIsXG4gICAgaHRtbF9qc18xLlRBR19OQU1FUy5DT0wsXG4gICAgaHRtbF9qc18xLlRBR19OQU1FUy5FTUJFRCxcbiAgICBodG1sX2pzXzEuVEFHX05BTUVTLkZSQU1FLFxuICAgIGh0bWxfanNfMS5UQUdfTkFNRVMuSFIsXG4gICAgaHRtbF9qc18xLlRBR19OQU1FUy5JTUcsXG4gICAgaHRtbF9qc18xLlRBR19OQU1FUy5JTlBVVCxcbiAgICBodG1sX2pzXzEuVEFHX05BTUVTLktFWUdFTixcbiAgICBodG1sX2pzXzEuVEFHX05BTUVTLkxJTkssXG4gICAgaHRtbF9qc18xLlRBR19OQU1FUy5NRVRBLFxuICAgIGh0bWxfanNfMS5UQUdfTkFNRVMuUEFSQU0sXG4gICAgaHRtbF9qc18xLlRBR19OQU1FUy5TT1VSQ0UsXG4gICAgaHRtbF9qc18xLlRBR19OQU1FUy5UUkFDSyxcbiAgICBodG1sX2pzXzEuVEFHX05BTUVTLldCUixcbl0pO1xuZnVuY3Rpb24gaXNWb2lkRWxlbWVudChub2RlLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIChvcHRpb25zLnRyZWVBZGFwdGVyLmlzRWxlbWVudE5vZGUobm9kZSkgJiZcbiAgICAgICAgb3B0aW9ucy50cmVlQWRhcHRlci5nZXROYW1lc3BhY2VVUkkobm9kZSkgPT09IGh0bWxfanNfMS5OUy5IVE1MICYmXG4gICAgICAgIFZPSURfRUxFTUVOVFMuaGFzKG9wdGlvbnMudHJlZUFkYXB0ZXIuZ2V0VGFnTmFtZShub2RlKSkpO1xufVxuY29uc3QgZGVmYXVsdE9wdHMgPSB7IHRyZWVBZGFwdGVyOiBkZWZhdWx0X2pzXzEuZGVmYXVsdFRyZWVBZGFwdGVyLCBzY3JpcHRpbmdFbmFibGVkOiB0cnVlIH07XG4vKipcbiAqIFNlcmlhbGl6ZXMgYW4gQVNUIG5vZGUgdG8gYW4gSFRNTCBzdHJpbmcuXG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiBgYGBqc1xuICogY29uc3QgcGFyc2U1ID0gcmVxdWlyZSgncGFyc2U1Jyk7XG4gKlxuICogY29uc3QgZG9jdW1lbnQgPSBwYXJzZTUucGFyc2UoJzwhRE9DVFlQRSBodG1sPjxodG1sPjxoZWFkPjwvaGVhZD48Ym9keT5IaSB0aGVyZSE8L2JvZHk+PC9odG1sPicpO1xuICpcbiAqIC8vIFNlcmlhbGl6ZXMgYSBkb2N1bWVudC5cbiAqIGNvbnN0IGh0bWwgPSBwYXJzZTUuc2VyaWFsaXplKGRvY3VtZW50KTtcbiAqXG4gKiAvLyBTZXJpYWxpemVzIHRoZSA8aHRtbD4gZWxlbWVudCBjb250ZW50LlxuICogY29uc3Qgc3RyID0gcGFyc2U1LnNlcmlhbGl6ZShkb2N1bWVudC5jaGlsZE5vZGVzWzFdKTtcbiAqXG4gKiBjb25zb2xlLmxvZyhzdHIpOyAvLz4gJzxoZWFkPjwvaGVhZD48Ym9keT5IaSB0aGVyZSE8L2JvZHk+J1xuICogYGBgXG4gKlxuICogQHBhcmFtIG5vZGUgTm9kZSB0byBzZXJpYWxpemUuXG4gKiBAcGFyYW0gb3B0aW9ucyBTZXJpYWxpemF0aW9uIG9wdGlvbnMuXG4gKi9cbmZ1bmN0aW9uIHNlcmlhbGl6ZShub2RlLCBvcHRpb25zKSB7XG4gICAgY29uc3Qgb3B0cyA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdE9wdHMpLCBvcHRpb25zKTtcbiAgICBpZiAoaXNWb2lkRWxlbWVudChub2RlLCBvcHRzKSkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxuICAgIHJldHVybiBzZXJpYWxpemVDaGlsZE5vZGVzKG5vZGUsIG9wdHMpO1xufVxuZXhwb3J0cy5zZXJpYWxpemUgPSBzZXJpYWxpemU7XG4vKipcbiAqIFNlcmlhbGl6ZXMgYW4gQVNUIGVsZW1lbnQgbm9kZSB0byBhbiBIVE1MIHN0cmluZywgaW5jbHVkaW5nIHRoZSBlbGVtZW50IG5vZGUuXG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiBgYGBqc1xuICogY29uc3QgcGFyc2U1ID0gcmVxdWlyZSgncGFyc2U1Jyk7XG4gKlxuICogY29uc3QgZG9jdW1lbnQgPSBwYXJzZTUucGFyc2VGcmFnbWVudCgnPGRpdj5IZWxsbywgPGI+d29ybGQ8L2I+ITwvZGl2PicpO1xuICpcbiAqIC8vIFNlcmlhbGl6ZXMgdGhlIDxkaXY+IGVsZW1lbnQuXG4gKiBjb25zdCBodG1sID0gcGFyc2U1LnNlcmlhbGl6ZU91dGVyKGRvY3VtZW50LmNoaWxkTm9kZXNbMF0pO1xuICpcbiAqIGNvbnNvbGUubG9nKHN0cik7IC8vPiAnPGRpdj5IZWxsbywgPGI+d29ybGQ8L2I+ITwvZGl2PidcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBub2RlIE5vZGUgdG8gc2VyaWFsaXplLlxuICogQHBhcmFtIG9wdGlvbnMgU2VyaWFsaXphdGlvbiBvcHRpb25zLlxuICovXG5mdW5jdGlvbiBzZXJpYWxpemVPdXRlcihub2RlLCBvcHRpb25zKSB7XG4gICAgY29uc3Qgb3B0cyA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdE9wdHMpLCBvcHRpb25zKTtcbiAgICByZXR1cm4gc2VyaWFsaXplTm9kZShub2RlLCBvcHRzKTtcbn1cbmV4cG9ydHMuc2VyaWFsaXplT3V0ZXIgPSBzZXJpYWxpemVPdXRlcjtcbmZ1bmN0aW9uIHNlcmlhbGl6ZUNoaWxkTm9kZXMocGFyZW50Tm9kZSwgb3B0aW9ucykge1xuICAgIGxldCBodG1sID0gJyc7XG4gICAgLy8gR2V0IGNvbnRhaW5lciBvZiB0aGUgY2hpbGQgbm9kZXNcbiAgICBjb25zdCBjb250YWluZXIgPSBvcHRpb25zLnRyZWVBZGFwdGVyLmlzRWxlbWVudE5vZGUocGFyZW50Tm9kZSkgJiZcbiAgICAgICAgb3B0aW9ucy50cmVlQWRhcHRlci5nZXRUYWdOYW1lKHBhcmVudE5vZGUpID09PSBodG1sX2pzXzEuVEFHX05BTUVTLlRFTVBMQVRFICYmXG4gICAgICAgIG9wdGlvbnMudHJlZUFkYXB0ZXIuZ2V0TmFtZXNwYWNlVVJJKHBhcmVudE5vZGUpID09PSBodG1sX2pzXzEuTlMuSFRNTFxuICAgICAgICA/IG9wdGlvbnMudHJlZUFkYXB0ZXIuZ2V0VGVtcGxhdGVDb250ZW50KHBhcmVudE5vZGUpXG4gICAgICAgIDogcGFyZW50Tm9kZTtcbiAgICBjb25zdCBjaGlsZE5vZGVzID0gb3B0aW9ucy50cmVlQWRhcHRlci5nZXRDaGlsZE5vZGVzKGNvbnRhaW5lcik7XG4gICAgaWYgKGNoaWxkTm9kZXMpIHtcbiAgICAgICAgZm9yIChjb25zdCBjdXJyZW50Tm9kZSBvZiBjaGlsZE5vZGVzKSB7XG4gICAgICAgICAgICBodG1sICs9IHNlcmlhbGl6ZU5vZGUoY3VycmVudE5vZGUsIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBodG1sO1xufVxuZnVuY3Rpb24gc2VyaWFsaXplTm9kZShub2RlLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMudHJlZUFkYXB0ZXIuaXNFbGVtZW50Tm9kZShub2RlKSkge1xuICAgICAgICByZXR1cm4gc2VyaWFsaXplRWxlbWVudChub2RlLCBvcHRpb25zKTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMudHJlZUFkYXB0ZXIuaXNUZXh0Tm9kZShub2RlKSkge1xuICAgICAgICByZXR1cm4gc2VyaWFsaXplVGV4dE5vZGUobm9kZSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zLnRyZWVBZGFwdGVyLmlzQ29tbWVudE5vZGUobm9kZSkpIHtcbiAgICAgICAgcmV0dXJuIHNlcmlhbGl6ZUNvbW1lbnROb2RlKG5vZGUsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy50cmVlQWRhcHRlci5pc0RvY3VtZW50VHlwZU5vZGUobm9kZSkpIHtcbiAgICAgICAgcmV0dXJuIHNlcmlhbGl6ZURvY3VtZW50VHlwZU5vZGUobm9kZSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIC8vIFJldHVybiBhbiBlbXB0eSBzdHJpbmcgZm9yIHVua25vd24gbm9kZXNcbiAgICByZXR1cm4gJyc7XG59XG5mdW5jdGlvbiBzZXJpYWxpemVFbGVtZW50KG5vZGUsIG9wdGlvbnMpIHtcbiAgICBjb25zdCB0biA9IG9wdGlvbnMudHJlZUFkYXB0ZXIuZ2V0VGFnTmFtZShub2RlKTtcbiAgICByZXR1cm4gYDwke3RufSR7c2VyaWFsaXplQXR0cmlidXRlcyhub2RlLCBvcHRpb25zKX0+JHtpc1ZvaWRFbGVtZW50KG5vZGUsIG9wdGlvbnMpID8gJycgOiBgJHtzZXJpYWxpemVDaGlsZE5vZGVzKG5vZGUsIG9wdGlvbnMpfTwvJHt0bn0+YH1gO1xufVxuZnVuY3Rpb24gc2VyaWFsaXplQXR0cmlidXRlcyhub2RlLCB7IHRyZWVBZGFwdGVyIH0pIHtcbiAgICBsZXQgaHRtbCA9ICcnO1xuICAgIGZvciAoY29uc3QgYXR0ciBvZiB0cmVlQWRhcHRlci5nZXRBdHRyTGlzdChub2RlKSkge1xuICAgICAgICBodG1sICs9ICcgJztcbiAgICAgICAgaWYgKCFhdHRyLm5hbWVzcGFjZSkge1xuICAgICAgICAgICAgaHRtbCArPSBhdHRyLm5hbWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgc3dpdGNoIChhdHRyLm5hbWVzcGFjZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgaHRtbF9qc18xLk5TLlhNTDoge1xuICAgICAgICAgICAgICAgICAgICBodG1sICs9IGB4bWw6JHthdHRyLm5hbWV9YDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgaHRtbF9qc18xLk5TLlhNTE5TOiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhdHRyLm5hbWUgIT09ICd4bWxucycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGh0bWwgKz0gJ3htbG5zOic7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaHRtbCArPSBhdHRyLm5hbWU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlIGh0bWxfanNfMS5OUy5YTElOSzoge1xuICAgICAgICAgICAgICAgICAgICBodG1sICs9IGB4bGluazoke2F0dHIubmFtZX1gO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgICAgICAgICBodG1sICs9IGAke2F0dHIucHJlZml4fToke2F0dHIubmFtZX1gO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgaHRtbCArPSBgPVwiJHsoMCwgZXNjYXBlX2pzXzEuZXNjYXBlQXR0cmlidXRlKShhdHRyLnZhbHVlKX1cImA7XG4gICAgfVxuICAgIHJldHVybiBodG1sO1xufVxuZnVuY3Rpb24gc2VyaWFsaXplVGV4dE5vZGUobm9kZSwgb3B0aW9ucykge1xuICAgIGNvbnN0IHsgdHJlZUFkYXB0ZXIgfSA9IG9wdGlvbnM7XG4gICAgY29uc3QgY29udGVudCA9IHRyZWVBZGFwdGVyLmdldFRleHROb2RlQ29udGVudChub2RlKTtcbiAgICBjb25zdCBwYXJlbnQgPSB0cmVlQWRhcHRlci5nZXRQYXJlbnROb2RlKG5vZGUpO1xuICAgIGNvbnN0IHBhcmVudFRuID0gcGFyZW50ICYmIHRyZWVBZGFwdGVyLmlzRWxlbWVudE5vZGUocGFyZW50KSAmJiB0cmVlQWRhcHRlci5nZXRUYWdOYW1lKHBhcmVudCk7XG4gICAgcmV0dXJuIHBhcmVudFRuICYmXG4gICAgICAgIHRyZWVBZGFwdGVyLmdldE5hbWVzcGFjZVVSSShwYXJlbnQpID09PSBodG1sX2pzXzEuTlMuSFRNTCAmJlxuICAgICAgICAoMCwgaHRtbF9qc18xLmhhc1VuZXNjYXBlZFRleHQpKHBhcmVudFRuLCBvcHRpb25zLnNjcmlwdGluZ0VuYWJsZWQpXG4gICAgICAgID8gY29udGVudFxuICAgICAgICA6ICgwLCBlc2NhcGVfanNfMS5lc2NhcGVUZXh0KShjb250ZW50KTtcbn1cbmZ1bmN0aW9uIHNlcmlhbGl6ZUNvbW1lbnROb2RlKG5vZGUsIHsgdHJlZUFkYXB0ZXIgfSkge1xuICAgIHJldHVybiBgPCEtLSR7dHJlZUFkYXB0ZXIuZ2V0Q29tbWVudE5vZGVDb250ZW50KG5vZGUpfS0tPmA7XG59XG5mdW5jdGlvbiBzZXJpYWxpemVEb2N1bWVudFR5cGVOb2RlKG5vZGUsIHsgdHJlZUFkYXB0ZXIgfSkge1xuICAgIHJldHVybiBgPCFET0NUWVBFICR7dHJlZUFkYXB0ZXIuZ2V0RG9jdW1lbnRUeXBlTm9kZU5hbWUobm9kZSl9PmA7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuVG9rZW5pemVyID0gZXhwb3J0cy5Ub2tlbml6ZXJNb2RlID0gdm9pZCAwO1xuY29uc3QgcHJlcHJvY2Vzc29yX2pzXzEgPSByZXF1aXJlKFwiLi9wcmVwcm9jZXNzb3IuanNcIik7XG5jb25zdCB1bmljb2RlX2pzXzEgPSByZXF1aXJlKFwiLi4vY29tbW9uL3VuaWNvZGUuanNcIik7XG5jb25zdCB0b2tlbl9qc18xID0gcmVxdWlyZShcIi4uL2NvbW1vbi90b2tlbi5qc1wiKTtcbmNvbnN0IGRlY29kZV9qc18xID0gcmVxdWlyZShcImVudGl0aWVzL2xpYi9kZWNvZGUuanNcIik7XG5jb25zdCBlcnJvcl9jb2Rlc19qc18xID0gcmVxdWlyZShcIi4uL2NvbW1vbi9lcnJvci1jb2Rlcy5qc1wiKTtcbmNvbnN0IGh0bWxfanNfMSA9IHJlcXVpcmUoXCIuLi9jb21tb24vaHRtbC5qc1wiKTtcbi8vQzEgVW5pY29kZSBjb250cm9sIGNoYXJhY3RlciByZWZlcmVuY2UgcmVwbGFjZW1lbnRzXG5jb25zdCBDMV9DT05UUk9MU19SRUZFUkVOQ0VfUkVQTEFDRU1FTlRTID0gbmV3IE1hcChbXG4gICAgWzB4ODAsIDgzNjRdLFxuICAgIFsweDgyLCA4MjE4XSxcbiAgICBbMHg4MywgNDAyXSxcbiAgICBbMHg4NCwgODIyMl0sXG4gICAgWzB4ODUsIDgyMzBdLFxuICAgIFsweDg2LCA4MjI0XSxcbiAgICBbMHg4NywgODIyNV0sXG4gICAgWzB4ODgsIDcxMF0sXG4gICAgWzB4ODksIDgyNDBdLFxuICAgIFsweDhhLCAzNTJdLFxuICAgIFsweDhiLCA4MjQ5XSxcbiAgICBbMHg4YywgMzM4XSxcbiAgICBbMHg4ZSwgMzgxXSxcbiAgICBbMHg5MSwgODIxNl0sXG4gICAgWzB4OTIsIDgyMTddLFxuICAgIFsweDkzLCA4MjIwXSxcbiAgICBbMHg5NCwgODIyMV0sXG4gICAgWzB4OTUsIDgyMjZdLFxuICAgIFsweDk2LCA4MjExXSxcbiAgICBbMHg5NywgODIxMl0sXG4gICAgWzB4OTgsIDczMl0sXG4gICAgWzB4OTksIDg0ODJdLFxuICAgIFsweDlhLCAzNTNdLFxuICAgIFsweDliLCA4MjUwXSxcbiAgICBbMHg5YywgMzM5XSxcbiAgICBbMHg5ZSwgMzgyXSxcbiAgICBbMHg5ZiwgMzc2XSxcbl0pO1xuLy9TdGF0ZXNcbnZhciBTdGF0ZTtcbihmdW5jdGlvbiAoU3RhdGUpIHtcbiAgICBTdGF0ZVtTdGF0ZVtcIkRBVEFcIl0gPSAwXSA9IFwiREFUQVwiO1xuICAgIFN0YXRlW1N0YXRlW1wiUkNEQVRBXCJdID0gMV0gPSBcIlJDREFUQVwiO1xuICAgIFN0YXRlW1N0YXRlW1wiUkFXVEVYVFwiXSA9IDJdID0gXCJSQVdURVhUXCI7XG4gICAgU3RhdGVbU3RhdGVbXCJTQ1JJUFRfREFUQVwiXSA9IDNdID0gXCJTQ1JJUFRfREFUQVwiO1xuICAgIFN0YXRlW1N0YXRlW1wiUExBSU5URVhUXCJdID0gNF0gPSBcIlBMQUlOVEVYVFwiO1xuICAgIFN0YXRlW1N0YXRlW1wiVEFHX09QRU5cIl0gPSA1XSA9IFwiVEFHX09QRU5cIjtcbiAgICBTdGF0ZVtTdGF0ZVtcIkVORF9UQUdfT1BFTlwiXSA9IDZdID0gXCJFTkRfVEFHX09QRU5cIjtcbiAgICBTdGF0ZVtTdGF0ZVtcIlRBR19OQU1FXCJdID0gN10gPSBcIlRBR19OQU1FXCI7XG4gICAgU3RhdGVbU3RhdGVbXCJSQ0RBVEFfTEVTU19USEFOX1NJR05cIl0gPSA4XSA9IFwiUkNEQVRBX0xFU1NfVEhBTl9TSUdOXCI7XG4gICAgU3RhdGVbU3RhdGVbXCJSQ0RBVEFfRU5EX1RBR19PUEVOXCJdID0gOV0gPSBcIlJDREFUQV9FTkRfVEFHX09QRU5cIjtcbiAgICBTdGF0ZVtTdGF0ZVtcIlJDREFUQV9FTkRfVEFHX05BTUVcIl0gPSAxMF0gPSBcIlJDREFUQV9FTkRfVEFHX05BTUVcIjtcbiAgICBTdGF0ZVtTdGF0ZVtcIlJBV1RFWFRfTEVTU19USEFOX1NJR05cIl0gPSAxMV0gPSBcIlJBV1RFWFRfTEVTU19USEFOX1NJR05cIjtcbiAgICBTdGF0ZVtTdGF0ZVtcIlJBV1RFWFRfRU5EX1RBR19PUEVOXCJdID0gMTJdID0gXCJSQVdURVhUX0VORF9UQUdfT1BFTlwiO1xuICAgIFN0YXRlW1N0YXRlW1wiUkFXVEVYVF9FTkRfVEFHX05BTUVcIl0gPSAxM10gPSBcIlJBV1RFWFRfRU5EX1RBR19OQU1FXCI7XG4gICAgU3RhdGVbU3RhdGVbXCJTQ1JJUFRfREFUQV9MRVNTX1RIQU5fU0lHTlwiXSA9IDE0XSA9IFwiU0NSSVBUX0RBVEFfTEVTU19USEFOX1NJR05cIjtcbiAgICBTdGF0ZVtTdGF0ZVtcIlNDUklQVF9EQVRBX0VORF9UQUdfT1BFTlwiXSA9IDE1XSA9IFwiU0NSSVBUX0RBVEFfRU5EX1RBR19PUEVOXCI7XG4gICAgU3RhdGVbU3RhdGVbXCJTQ1JJUFRfREFUQV9FTkRfVEFHX05BTUVcIl0gPSAxNl0gPSBcIlNDUklQVF9EQVRBX0VORF9UQUdfTkFNRVwiO1xuICAgIFN0YXRlW1N0YXRlW1wiU0NSSVBUX0RBVEFfRVNDQVBFX1NUQVJUXCJdID0gMTddID0gXCJTQ1JJUFRfREFUQV9FU0NBUEVfU1RBUlRcIjtcbiAgICBTdGF0ZVtTdGF0ZVtcIlNDUklQVF9EQVRBX0VTQ0FQRV9TVEFSVF9EQVNIXCJdID0gMThdID0gXCJTQ1JJUFRfREFUQV9FU0NBUEVfU1RBUlRfREFTSFwiO1xuICAgIFN0YXRlW1N0YXRlW1wiU0NSSVBUX0RBVEFfRVNDQVBFRFwiXSA9IDE5XSA9IFwiU0NSSVBUX0RBVEFfRVNDQVBFRFwiO1xuICAgIFN0YXRlW1N0YXRlW1wiU0NSSVBUX0RBVEFfRVNDQVBFRF9EQVNIXCJdID0gMjBdID0gXCJTQ1JJUFRfREFUQV9FU0NBUEVEX0RBU0hcIjtcbiAgICBTdGF0ZVtTdGF0ZVtcIlNDUklQVF9EQVRBX0VTQ0FQRURfREFTSF9EQVNIXCJdID0gMjFdID0gXCJTQ1JJUFRfREFUQV9FU0NBUEVEX0RBU0hfREFTSFwiO1xuICAgIFN0YXRlW1N0YXRlW1wiU0NSSVBUX0RBVEFfRVNDQVBFRF9MRVNTX1RIQU5fU0lHTlwiXSA9IDIyXSA9IFwiU0NSSVBUX0RBVEFfRVNDQVBFRF9MRVNTX1RIQU5fU0lHTlwiO1xuICAgIFN0YXRlW1N0YXRlW1wiU0NSSVBUX0RBVEFfRVNDQVBFRF9FTkRfVEFHX09QRU5cIl0gPSAyM10gPSBcIlNDUklQVF9EQVRBX0VTQ0FQRURfRU5EX1RBR19PUEVOXCI7XG4gICAgU3RhdGVbU3RhdGVbXCJTQ1JJUFRfREFUQV9FU0NBUEVEX0VORF9UQUdfTkFNRVwiXSA9IDI0XSA9IFwiU0NSSVBUX0RBVEFfRVNDQVBFRF9FTkRfVEFHX05BTUVcIjtcbiAgICBTdGF0ZVtTdGF0ZVtcIlNDUklQVF9EQVRBX0RPVUJMRV9FU0NBUEVfU1RBUlRcIl0gPSAyNV0gPSBcIlNDUklQVF9EQVRBX0RPVUJMRV9FU0NBUEVfU1RBUlRcIjtcbiAgICBTdGF0ZVtTdGF0ZVtcIlNDUklQVF9EQVRBX0RPVUJMRV9FU0NBUEVEXCJdID0gMjZdID0gXCJTQ1JJUFRfREFUQV9ET1VCTEVfRVNDQVBFRFwiO1xuICAgIFN0YXRlW1N0YXRlW1wiU0NSSVBUX0RBVEFfRE9VQkxFX0VTQ0FQRURfREFTSFwiXSA9IDI3XSA9IFwiU0NSSVBUX0RBVEFfRE9VQkxFX0VTQ0FQRURfREFTSFwiO1xuICAgIFN0YXRlW1N0YXRlW1wiU0NSSVBUX0RBVEFfRE9VQkxFX0VTQ0FQRURfREFTSF9EQVNIXCJdID0gMjhdID0gXCJTQ1JJUFRfREFUQV9ET1VCTEVfRVNDQVBFRF9EQVNIX0RBU0hcIjtcbiAgICBTdGF0ZVtTdGF0ZVtcIlNDUklQVF9EQVRBX0RPVUJMRV9FU0NBUEVEX0xFU1NfVEhBTl9TSUdOXCJdID0gMjldID0gXCJTQ1JJUFRfREFUQV9ET1VCTEVfRVNDQVBFRF9MRVNTX1RIQU5fU0lHTlwiO1xuICAgIFN0YXRlW1N0YXRlW1wiU0NSSVBUX0RBVEFfRE9VQkxFX0VTQ0FQRV9FTkRcIl0gPSAzMF0gPSBcIlNDUklQVF9EQVRBX0RPVUJMRV9FU0NBUEVfRU5EXCI7XG4gICAgU3RhdGVbU3RhdGVbXCJCRUZPUkVfQVRUUklCVVRFX05BTUVcIl0gPSAzMV0gPSBcIkJFRk9SRV9BVFRSSUJVVEVfTkFNRVwiO1xuICAgIFN0YXRlW1N0YXRlW1wiQVRUUklCVVRFX05BTUVcIl0gPSAzMl0gPSBcIkFUVFJJQlVURV9OQU1FXCI7XG4gICAgU3RhdGVbU3RhdGVbXCJBRlRFUl9BVFRSSUJVVEVfTkFNRVwiXSA9IDMzXSA9IFwiQUZURVJfQVRUUklCVVRFX05BTUVcIjtcbiAgICBTdGF0ZVtTdGF0ZVtcIkJFRk9SRV9BVFRSSUJVVEVfVkFMVUVcIl0gPSAzNF0gPSBcIkJFRk9SRV9BVFRSSUJVVEVfVkFMVUVcIjtcbiAgICBTdGF0ZVtTdGF0ZVtcIkFUVFJJQlVURV9WQUxVRV9ET1VCTEVfUVVPVEVEXCJdID0gMzVdID0gXCJBVFRSSUJVVEVfVkFMVUVfRE9VQkxFX1FVT1RFRFwiO1xuICAgIFN0YXRlW1N0YXRlW1wiQVRUUklCVVRFX1ZBTFVFX1NJTkdMRV9RVU9URURcIl0gPSAzNl0gPSBcIkFUVFJJQlVURV9WQUxVRV9TSU5HTEVfUVVPVEVEXCI7XG4gICAgU3RhdGVbU3RhdGVbXCJBVFRSSUJVVEVfVkFMVUVfVU5RVU9URURcIl0gPSAzN10gPSBcIkFUVFJJQlVURV9WQUxVRV9VTlFVT1RFRFwiO1xuICAgIFN0YXRlW1N0YXRlW1wiQUZURVJfQVRUUklCVVRFX1ZBTFVFX1FVT1RFRFwiXSA9IDM4XSA9IFwiQUZURVJfQVRUUklCVVRFX1ZBTFVFX1FVT1RFRFwiO1xuICAgIFN0YXRlW1N0YXRlW1wiU0VMRl9DTE9TSU5HX1NUQVJUX1RBR1wiXSA9IDM5XSA9IFwiU0VMRl9DTE9TSU5HX1NUQVJUX1RBR1wiO1xuICAgIFN0YXRlW1N0YXRlW1wiQk9HVVNfQ09NTUVOVFwiXSA9IDQwXSA9IFwiQk9HVVNfQ09NTUVOVFwiO1xuICAgIFN0YXRlW1N0YXRlW1wiTUFSS1VQX0RFQ0xBUkFUSU9OX09QRU5cIl0gPSA0MV0gPSBcIk1BUktVUF9ERUNMQVJBVElPTl9PUEVOXCI7XG4gICAgU3RhdGVbU3RhdGVbXCJDT01NRU5UX1NUQVJUXCJdID0gNDJdID0gXCJDT01NRU5UX1NUQVJUXCI7XG4gICAgU3RhdGVbU3RhdGVbXCJDT01NRU5UX1NUQVJUX0RBU0hcIl0gPSA0M10gPSBcIkNPTU1FTlRfU1RBUlRfREFTSFwiO1xuICAgIFN0YXRlW1N0YXRlW1wiQ09NTUVOVFwiXSA9IDQ0XSA9IFwiQ09NTUVOVFwiO1xuICAgIFN0YXRlW1N0YXRlW1wiQ09NTUVOVF9MRVNTX1RIQU5fU0lHTlwiXSA9IDQ1XSA9IFwiQ09NTUVOVF9MRVNTX1RIQU5fU0lHTlwiO1xuICAgIFN0YXRlW1N0YXRlW1wiQ09NTUVOVF9MRVNTX1RIQU5fU0lHTl9CQU5HXCJdID0gNDZdID0gXCJDT01NRU5UX0xFU1NfVEhBTl9TSUdOX0JBTkdcIjtcbiAgICBTdGF0ZVtTdGF0ZVtcIkNPTU1FTlRfTEVTU19USEFOX1NJR05fQkFOR19EQVNIXCJdID0gNDddID0gXCJDT01NRU5UX0xFU1NfVEhBTl9TSUdOX0JBTkdfREFTSFwiO1xuICAgIFN0YXRlW1N0YXRlW1wiQ09NTUVOVF9MRVNTX1RIQU5fU0lHTl9CQU5HX0RBU0hfREFTSFwiXSA9IDQ4XSA9IFwiQ09NTUVOVF9MRVNTX1RIQU5fU0lHTl9CQU5HX0RBU0hfREFTSFwiO1xuICAgIFN0YXRlW1N0YXRlW1wiQ09NTUVOVF9FTkRfREFTSFwiXSA9IDQ5XSA9IFwiQ09NTUVOVF9FTkRfREFTSFwiO1xuICAgIFN0YXRlW1N0YXRlW1wiQ09NTUVOVF9FTkRcIl0gPSA1MF0gPSBcIkNPTU1FTlRfRU5EXCI7XG4gICAgU3RhdGVbU3RhdGVbXCJDT01NRU5UX0VORF9CQU5HXCJdID0gNTFdID0gXCJDT01NRU5UX0VORF9CQU5HXCI7XG4gICAgU3RhdGVbU3RhdGVbXCJET0NUWVBFXCJdID0gNTJdID0gXCJET0NUWVBFXCI7XG4gICAgU3RhdGVbU3RhdGVbXCJCRUZPUkVfRE9DVFlQRV9OQU1FXCJdID0gNTNdID0gXCJCRUZPUkVfRE9DVFlQRV9OQU1FXCI7XG4gICAgU3RhdGVbU3RhdGVbXCJET0NUWVBFX05BTUVcIl0gPSA1NF0gPSBcIkRPQ1RZUEVfTkFNRVwiO1xuICAgIFN0YXRlW1N0YXRlW1wiQUZURVJfRE9DVFlQRV9OQU1FXCJdID0gNTVdID0gXCJBRlRFUl9ET0NUWVBFX05BTUVcIjtcbiAgICBTdGF0ZVtTdGF0ZVtcIkFGVEVSX0RPQ1RZUEVfUFVCTElDX0tFWVdPUkRcIl0gPSA1Nl0gPSBcIkFGVEVSX0RPQ1RZUEVfUFVCTElDX0tFWVdPUkRcIjtcbiAgICBTdGF0ZVtTdGF0ZVtcIkJFRk9SRV9ET0NUWVBFX1BVQkxJQ19JREVOVElGSUVSXCJdID0gNTddID0gXCJCRUZPUkVfRE9DVFlQRV9QVUJMSUNfSURFTlRJRklFUlwiO1xuICAgIFN0YXRlW1N0YXRlW1wiRE9DVFlQRV9QVUJMSUNfSURFTlRJRklFUl9ET1VCTEVfUVVPVEVEXCJdID0gNThdID0gXCJET0NUWVBFX1BVQkxJQ19JREVOVElGSUVSX0RPVUJMRV9RVU9URURcIjtcbiAgICBTdGF0ZVtTdGF0ZVtcIkRPQ1RZUEVfUFVCTElDX0lERU5USUZJRVJfU0lOR0xFX1FVT1RFRFwiXSA9IDU5XSA9IFwiRE9DVFlQRV9QVUJMSUNfSURFTlRJRklFUl9TSU5HTEVfUVVPVEVEXCI7XG4gICAgU3RhdGVbU3RhdGVbXCJBRlRFUl9ET0NUWVBFX1BVQkxJQ19JREVOVElGSUVSXCJdID0gNjBdID0gXCJBRlRFUl9ET0NUWVBFX1BVQkxJQ19JREVOVElGSUVSXCI7XG4gICAgU3RhdGVbU3RhdGVbXCJCRVRXRUVOX0RPQ1RZUEVfUFVCTElDX0FORF9TWVNURU1fSURFTlRJRklFUlNcIl0gPSA2MV0gPSBcIkJFVFdFRU5fRE9DVFlQRV9QVUJMSUNfQU5EX1NZU1RFTV9JREVOVElGSUVSU1wiO1xuICAgIFN0YXRlW1N0YXRlW1wiQUZURVJfRE9DVFlQRV9TWVNURU1fS0VZV09SRFwiXSA9IDYyXSA9IFwiQUZURVJfRE9DVFlQRV9TWVNURU1fS0VZV09SRFwiO1xuICAgIFN0YXRlW1N0YXRlW1wiQkVGT1JFX0RPQ1RZUEVfU1lTVEVNX0lERU5USUZJRVJcIl0gPSA2M10gPSBcIkJFRk9SRV9ET0NUWVBFX1NZU1RFTV9JREVOVElGSUVSXCI7XG4gICAgU3RhdGVbU3RhdGVbXCJET0NUWVBFX1NZU1RFTV9JREVOVElGSUVSX0RPVUJMRV9RVU9URURcIl0gPSA2NF0gPSBcIkRPQ1RZUEVfU1lTVEVNX0lERU5USUZJRVJfRE9VQkxFX1FVT1RFRFwiO1xuICAgIFN0YXRlW1N0YXRlW1wiRE9DVFlQRV9TWVNURU1fSURFTlRJRklFUl9TSU5HTEVfUVVPVEVEXCJdID0gNjVdID0gXCJET0NUWVBFX1NZU1RFTV9JREVOVElGSUVSX1NJTkdMRV9RVU9URURcIjtcbiAgICBTdGF0ZVtTdGF0ZVtcIkFGVEVSX0RPQ1RZUEVfU1lTVEVNX0lERU5USUZJRVJcIl0gPSA2Nl0gPSBcIkFGVEVSX0RPQ1RZUEVfU1lTVEVNX0lERU5USUZJRVJcIjtcbiAgICBTdGF0ZVtTdGF0ZVtcIkJPR1VTX0RPQ1RZUEVcIl0gPSA2N10gPSBcIkJPR1VTX0RPQ1RZUEVcIjtcbiAgICBTdGF0ZVtTdGF0ZVtcIkNEQVRBX1NFQ1RJT05cIl0gPSA2OF0gPSBcIkNEQVRBX1NFQ1RJT05cIjtcbiAgICBTdGF0ZVtTdGF0ZVtcIkNEQVRBX1NFQ1RJT05fQlJBQ0tFVFwiXSA9IDY5XSA9IFwiQ0RBVEFfU0VDVElPTl9CUkFDS0VUXCI7XG4gICAgU3RhdGVbU3RhdGVbXCJDREFUQV9TRUNUSU9OX0VORFwiXSA9IDcwXSA9IFwiQ0RBVEFfU0VDVElPTl9FTkRcIjtcbiAgICBTdGF0ZVtTdGF0ZVtcIkNIQVJBQ1RFUl9SRUZFUkVOQ0VcIl0gPSA3MV0gPSBcIkNIQVJBQ1RFUl9SRUZFUkVOQ0VcIjtcbiAgICBTdGF0ZVtTdGF0ZVtcIk5BTUVEX0NIQVJBQ1RFUl9SRUZFUkVOQ0VcIl0gPSA3Ml0gPSBcIk5BTUVEX0NIQVJBQ1RFUl9SRUZFUkVOQ0VcIjtcbiAgICBTdGF0ZVtTdGF0ZVtcIkFNQklHVU9VU19BTVBFUlNBTkRcIl0gPSA3M10gPSBcIkFNQklHVU9VU19BTVBFUlNBTkRcIjtcbiAgICBTdGF0ZVtTdGF0ZVtcIk5VTUVSSUNfQ0hBUkFDVEVSX1JFRkVSRU5DRVwiXSA9IDc0XSA9IFwiTlVNRVJJQ19DSEFSQUNURVJfUkVGRVJFTkNFXCI7XG4gICAgU3RhdGVbU3RhdGVbXCJIRVhBREVNSUNBTF9DSEFSQUNURVJfUkVGRVJFTkNFX1NUQVJUXCJdID0gNzVdID0gXCJIRVhBREVNSUNBTF9DSEFSQUNURVJfUkVGRVJFTkNFX1NUQVJUXCI7XG4gICAgU3RhdGVbU3RhdGVbXCJIRVhBREVNSUNBTF9DSEFSQUNURVJfUkVGRVJFTkNFXCJdID0gNzZdID0gXCJIRVhBREVNSUNBTF9DSEFSQUNURVJfUkVGRVJFTkNFXCI7XG4gICAgU3RhdGVbU3RhdGVbXCJERUNJTUFMX0NIQVJBQ1RFUl9SRUZFUkVOQ0VcIl0gPSA3N10gPSBcIkRFQ0lNQUxfQ0hBUkFDVEVSX1JFRkVSRU5DRVwiO1xuICAgIFN0YXRlW1N0YXRlW1wiTlVNRVJJQ19DSEFSQUNURVJfUkVGRVJFTkNFX0VORFwiXSA9IDc4XSA9IFwiTlVNRVJJQ19DSEFSQUNURVJfUkVGRVJFTkNFX0VORFwiO1xufSkoU3RhdGUgfHwgKFN0YXRlID0ge30pKTtcbi8vVG9rZW5pemVyIGluaXRpYWwgc3RhdGVzIGZvciBkaWZmZXJlbnQgbW9kZXNcbmV4cG9ydHMuVG9rZW5pemVyTW9kZSA9IHtcbiAgICBEQVRBOiBTdGF0ZS5EQVRBLFxuICAgIFJDREFUQTogU3RhdGUuUkNEQVRBLFxuICAgIFJBV1RFWFQ6IFN0YXRlLlJBV1RFWFQsXG4gICAgU0NSSVBUX0RBVEE6IFN0YXRlLlNDUklQVF9EQVRBLFxuICAgIFBMQUlOVEVYVDogU3RhdGUuUExBSU5URVhULFxuICAgIENEQVRBX1NFQ1RJT046IFN0YXRlLkNEQVRBX1NFQ1RJT04sXG59O1xuLy9VdGlsc1xuLy9PUFRJTUlaQVRJT046IHRoZXNlIHV0aWxpdHkgZnVuY3Rpb25zIHNob3VsZCBub3QgYmUgbW92ZWQgb3V0IG9mIHRoaXMgbW9kdWxlLiBWOCBDcmFua3NoYWZ0IHdpbGwgbm90IGlubGluZVxuLy90aGlzIGZ1bmN0aW9ucyBpZiB0aGV5IHdpbGwgYmUgc2l0dWF0ZWQgaW4gYW5vdGhlciBtb2R1bGUgZHVlIHRvIGNvbnRleHQgc3dpdGNoLlxuLy9BbHdheXMgcGVyZm9ybSBpbmxpbmluZyBjaGVjayBiZWZvcmUgbW9kaWZ5aW5nIHRoaXMgZnVuY3Rpb25zICgnbm9kZSAtLXRyYWNlLWlubGluaW5nJykuXG5mdW5jdGlvbiBpc0FzY2lpRGlnaXQoY3ApIHtcbiAgICByZXR1cm4gY3AgPj0gdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLkRJR0lUXzAgJiYgY3AgPD0gdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLkRJR0lUXzk7XG59XG5mdW5jdGlvbiBpc0FzY2lpVXBwZXIoY3ApIHtcbiAgICByZXR1cm4gY3AgPj0gdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLkxBVElOX0NBUElUQUxfQSAmJiBjcCA8PSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuTEFUSU5fQ0FQSVRBTF9aO1xufVxuZnVuY3Rpb24gaXNBc2NpaUxvd2VyKGNwKSB7XG4gICAgcmV0dXJuIGNwID49IHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5MQVRJTl9TTUFMTF9BICYmIGNwIDw9IHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5MQVRJTl9TTUFMTF9aO1xufVxuZnVuY3Rpb24gaXNBc2NpaUxldHRlcihjcCkge1xuICAgIHJldHVybiBpc0FzY2lpTG93ZXIoY3ApIHx8IGlzQXNjaWlVcHBlcihjcCk7XG59XG5mdW5jdGlvbiBpc0FzY2lpQWxwaGFOdW1lcmljKGNwKSB7XG4gICAgcmV0dXJuIGlzQXNjaWlMZXR0ZXIoY3ApIHx8IGlzQXNjaWlEaWdpdChjcCk7XG59XG5mdW5jdGlvbiBpc0FzY2lpVXBwZXJIZXhEaWdpdChjcCkge1xuICAgIHJldHVybiBjcCA+PSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuTEFUSU5fQ0FQSVRBTF9BICYmIGNwIDw9IHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5MQVRJTl9DQVBJVEFMX0Y7XG59XG5mdW5jdGlvbiBpc0FzY2lpTG93ZXJIZXhEaWdpdChjcCkge1xuICAgIHJldHVybiBjcCA+PSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuTEFUSU5fU01BTExfQSAmJiBjcCA8PSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuTEFUSU5fU01BTExfRjtcbn1cbmZ1bmN0aW9uIGlzQXNjaWlIZXhEaWdpdChjcCkge1xuICAgIHJldHVybiBpc0FzY2lpRGlnaXQoY3ApIHx8IGlzQXNjaWlVcHBlckhleERpZ2l0KGNwKSB8fCBpc0FzY2lpTG93ZXJIZXhEaWdpdChjcCk7XG59XG5mdW5jdGlvbiB0b0FzY2lpTG93ZXIoY3ApIHtcbiAgICByZXR1cm4gY3AgKyAzMjtcbn1cbmZ1bmN0aW9uIGlzV2hpdGVzcGFjZShjcCkge1xuICAgIHJldHVybiBjcCA9PT0gdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLlNQQUNFIHx8IGNwID09PSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuTElORV9GRUVEIHx8IGNwID09PSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuVEFCVUxBVElPTiB8fCBjcCA9PT0gdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLkZPUk1fRkVFRDtcbn1cbmZ1bmN0aW9uIGlzRW50aXR5SW5BdHRyaWJ1dGVJbnZhbGlkRW5kKG5leHRDcCkge1xuICAgIHJldHVybiBuZXh0Q3AgPT09IHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5FUVVBTFNfU0lHTiB8fCBpc0FzY2lpQWxwaGFOdW1lcmljKG5leHRDcCk7XG59XG5mdW5jdGlvbiBpc1NjcmlwdERhdGFEb3VibGVFc2NhcGVTZXF1ZW5jZUVuZChjcCkge1xuICAgIHJldHVybiBpc1doaXRlc3BhY2UoY3ApIHx8IGNwID09PSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuU09MSURVUyB8fCBjcCA9PT0gdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLkdSRUFURVJfVEhBTl9TSUdOO1xufVxuLy9Ub2tlbml6ZXJcbmNsYXNzIFRva2VuaXplciB7XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucywgaGFuZGxlcikge1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLmhhbmRsZXIgPSBoYW5kbGVyO1xuICAgICAgICB0aGlzLnBhdXNlZCA9IGZhbHNlO1xuICAgICAgICAvKiogRW5zdXJlcyB0aGF0IHRoZSBwYXJzaW5nIGxvb3AgaXNuJ3QgcnVuIG11bHRpcGxlIHRpbWVzIGF0IG9uY2UuICovXG4gICAgICAgIHRoaXMuaW5Mb29wID0gZmFsc2U7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJbmRpY2F0ZXMgdGhhdCB0aGUgY3VycmVudCBhZGp1c3RlZCBub2RlIGV4aXN0cywgaXMgbm90IGFuIGVsZW1lbnQgaW4gdGhlIEhUTUwgbmFtZXNwYWNlLFxuICAgICAgICAgKiBhbmQgdGhhdCBpdCBpcyBub3QgYW4gaW50ZWdyYXRpb24gcG9pbnQgZm9yIGVpdGhlciBNYXRoTUwgb3IgSFRNTC5cbiAgICAgICAgICpcbiAgICAgICAgICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvcGFyc2luZy5odG1sI3RyZWUtY29uc3RydWN0aW9ufVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5pbkZvcmVpZ25Ob2RlID0gZmFsc2U7XG4gICAgICAgIHRoaXMubGFzdFN0YXJ0VGFnTmFtZSA9ICcnO1xuICAgICAgICB0aGlzLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuREFUQTtcbiAgICAgICAgdGhpcy5yZXR1cm5TdGF0ZSA9IFN0YXRlLkRBVEE7XG4gICAgICAgIHRoaXMuY2hhclJlZkNvZGUgPSAtMTtcbiAgICAgICAgdGhpcy5jb25zdW1lZEFmdGVyU25hcHNob3QgPSAtMTtcbiAgICAgICAgdGhpcy5jdXJyZW50Q2hhcmFjdGVyVG9rZW4gPSBudWxsO1xuICAgICAgICB0aGlzLmN1cnJlbnRUb2tlbiA9IG51bGw7XG4gICAgICAgIHRoaXMuY3VycmVudEF0dHIgPSB7IG5hbWU6ICcnLCB2YWx1ZTogJycgfTtcbiAgICAgICAgdGhpcy5wcmVwcm9jZXNzb3IgPSBuZXcgcHJlcHJvY2Vzc29yX2pzXzEuUHJlcHJvY2Vzc29yKGhhbmRsZXIpO1xuICAgICAgICB0aGlzLmN1cnJlbnRMb2NhdGlvbiA9IHRoaXMuZ2V0Q3VycmVudExvY2F0aW9uKC0xKTtcbiAgICB9XG4gICAgLy9FcnJvcnNcbiAgICBfZXJyKGNvZGUpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgKF9iID0gKF9hID0gdGhpcy5oYW5kbGVyKS5vblBhcnNlRXJyb3IpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jYWxsKF9hLCB0aGlzLnByZXByb2Nlc3Nvci5nZXRFcnJvcihjb2RlKSk7XG4gICAgfVxuICAgIC8vIE5PVEU6IGBvZmZzZXRgIG1heSBuZXZlciBydW4gYWNyb3NzIGxpbmUgYm91bmRhcmllcy5cbiAgICBnZXRDdXJyZW50TG9jYXRpb24ob2Zmc2V0KSB7XG4gICAgICAgIGlmICghdGhpcy5vcHRpb25zLnNvdXJjZUNvZGVMb2NhdGlvbkluZm8pIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzdGFydExpbmU6IHRoaXMucHJlcHJvY2Vzc29yLmxpbmUsXG4gICAgICAgICAgICBzdGFydENvbDogdGhpcy5wcmVwcm9jZXNzb3IuY29sIC0gb2Zmc2V0LFxuICAgICAgICAgICAgc3RhcnRPZmZzZXQ6IHRoaXMucHJlcHJvY2Vzc29yLm9mZnNldCAtIG9mZnNldCxcbiAgICAgICAgICAgIGVuZExpbmU6IC0xLFxuICAgICAgICAgICAgZW5kQ29sOiAtMSxcbiAgICAgICAgICAgIGVuZE9mZnNldDogLTEsXG4gICAgICAgIH07XG4gICAgfVxuICAgIF9ydW5QYXJzaW5nTG9vcCgpIHtcbiAgICAgICAgaWYgKHRoaXMuaW5Mb29wKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0aGlzLmluTG9vcCA9IHRydWU7XG4gICAgICAgIHdoaWxlICh0aGlzLmFjdGl2ZSAmJiAhdGhpcy5wYXVzZWQpIHtcbiAgICAgICAgICAgIHRoaXMuY29uc3VtZWRBZnRlclNuYXBzaG90ID0gMDtcbiAgICAgICAgICAgIGNvbnN0IGNwID0gdGhpcy5fY29uc3VtZSgpO1xuICAgICAgICAgICAgaWYgKCF0aGlzLl9lbnN1cmVIaWJlcm5hdGlvbigpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY2FsbFN0YXRlKGNwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmluTG9vcCA9IGZhbHNlO1xuICAgIH1cbiAgICAvL0FQSVxuICAgIHBhdXNlKCkge1xuICAgICAgICB0aGlzLnBhdXNlZCA9IHRydWU7XG4gICAgfVxuICAgIHJlc3VtZSh3cml0ZUNhbGxiYWNrKSB7XG4gICAgICAgIGlmICghdGhpcy5wYXVzZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUGFyc2VyIHdhcyBhbHJlYWR5IHJlc3VtZWQnKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnBhdXNlZCA9IGZhbHNlO1xuICAgICAgICAvLyBOZWNlc3NhcnkgZm9yIHN5bmNocm9ub3VzIHJlc3VtZS5cbiAgICAgICAgaWYgKHRoaXMuaW5Mb29wKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0aGlzLl9ydW5QYXJzaW5nTG9vcCgpO1xuICAgICAgICBpZiAoIXRoaXMucGF1c2VkKSB7XG4gICAgICAgICAgICB3cml0ZUNhbGxiYWNrID09PSBudWxsIHx8IHdyaXRlQ2FsbGJhY2sgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHdyaXRlQ2FsbGJhY2soKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB3cml0ZShjaHVuaywgaXNMYXN0Q2h1bmssIHdyaXRlQ2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5hY3RpdmUgPSB0cnVlO1xuICAgICAgICB0aGlzLnByZXByb2Nlc3Nvci53cml0ZShjaHVuaywgaXNMYXN0Q2h1bmspO1xuICAgICAgICB0aGlzLl9ydW5QYXJzaW5nTG9vcCgpO1xuICAgICAgICBpZiAoIXRoaXMucGF1c2VkKSB7XG4gICAgICAgICAgICB3cml0ZUNhbGxiYWNrID09PSBudWxsIHx8IHdyaXRlQ2FsbGJhY2sgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHdyaXRlQ2FsbGJhY2soKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpbnNlcnRIdG1sQXRDdXJyZW50UG9zKGNodW5rKSB7XG4gICAgICAgIHRoaXMuYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5wcmVwcm9jZXNzb3IuaW5zZXJ0SHRtbEF0Q3VycmVudFBvcyhjaHVuayk7XG4gICAgICAgIHRoaXMuX3J1blBhcnNpbmdMb29wKCk7XG4gICAgfVxuICAgIC8vSGliZXJuYXRpb25cbiAgICBfZW5zdXJlSGliZXJuYXRpb24oKSB7XG4gICAgICAgIGlmICh0aGlzLnByZXByb2Nlc3Nvci5lbmRPZkNodW5rSGl0KSB7XG4gICAgICAgICAgICB0aGlzLl91bmNvbnN1bWUodGhpcy5jb25zdW1lZEFmdGVyU25hcHNob3QpO1xuICAgICAgICAgICAgdGhpcy5hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgLy9Db25zdW1wdGlvblxuICAgIF9jb25zdW1lKCkge1xuICAgICAgICB0aGlzLmNvbnN1bWVkQWZ0ZXJTbmFwc2hvdCsrO1xuICAgICAgICByZXR1cm4gdGhpcy5wcmVwcm9jZXNzb3IuYWR2YW5jZSgpO1xuICAgIH1cbiAgICBfdW5jb25zdW1lKGNvdW50KSB7XG4gICAgICAgIHRoaXMuY29uc3VtZWRBZnRlclNuYXBzaG90IC09IGNvdW50O1xuICAgICAgICB0aGlzLnByZXByb2Nlc3Nvci5yZXRyZWF0KGNvdW50KTtcbiAgICB9XG4gICAgX3JlY29uc3VtZUluU3RhdGUoc3RhdGUsIGNwKSB7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBzdGF0ZTtcbiAgICAgICAgdGhpcy5fY2FsbFN0YXRlKGNwKTtcbiAgICB9XG4gICAgX2FkdmFuY2VCeShjb3VudCkge1xuICAgICAgICB0aGlzLmNvbnN1bWVkQWZ0ZXJTbmFwc2hvdCArPSBjb3VudDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLnByZXByb2Nlc3Nvci5hZHZhbmNlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX2NvbnN1bWVTZXF1ZW5jZUlmTWF0Y2gocGF0dGVybiwgY2FzZVNlbnNpdGl2ZSkge1xuICAgICAgICBpZiAodGhpcy5wcmVwcm9jZXNzb3Iuc3RhcnRzV2l0aChwYXR0ZXJuLCBjYXNlU2Vuc2l0aXZlKSkge1xuICAgICAgICAgICAgLy8gV2Ugd2lsbCBhbHJlYWR5IGhhdmUgY29uc3VtZWQgb25lIGNoYXJhY3RlciBiZWZvcmUgY2FsbGluZyB0aGlzIG1ldGhvZC5cbiAgICAgICAgICAgIHRoaXMuX2FkdmFuY2VCeShwYXR0ZXJuLmxlbmd0aCAtIDEpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICAvL1Rva2VuIGNyZWF0aW9uXG4gICAgX2NyZWF0ZVN0YXJ0VGFnVG9rZW4oKSB7XG4gICAgICAgIHRoaXMuY3VycmVudFRva2VuID0ge1xuICAgICAgICAgICAgdHlwZTogdG9rZW5fanNfMS5Ub2tlblR5cGUuU1RBUlRfVEFHLFxuICAgICAgICAgICAgdGFnTmFtZTogJycsXG4gICAgICAgICAgICB0YWdJRDogaHRtbF9qc18xLlRBR19JRC5VTktOT1dOLFxuICAgICAgICAgICAgc2VsZkNsb3Npbmc6IGZhbHNlLFxuICAgICAgICAgICAgYWNrU2VsZkNsb3Npbmc6IGZhbHNlLFxuICAgICAgICAgICAgYXR0cnM6IFtdLFxuICAgICAgICAgICAgbG9jYXRpb246IHRoaXMuZ2V0Q3VycmVudExvY2F0aW9uKDEpLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBfY3JlYXRlRW5kVGFnVG9rZW4oKSB7XG4gICAgICAgIHRoaXMuY3VycmVudFRva2VuID0ge1xuICAgICAgICAgICAgdHlwZTogdG9rZW5fanNfMS5Ub2tlblR5cGUuRU5EX1RBRyxcbiAgICAgICAgICAgIHRhZ05hbWU6ICcnLFxuICAgICAgICAgICAgdGFnSUQ6IGh0bWxfanNfMS5UQUdfSUQuVU5LTk9XTixcbiAgICAgICAgICAgIHNlbGZDbG9zaW5nOiBmYWxzZSxcbiAgICAgICAgICAgIGFja1NlbGZDbG9zaW5nOiBmYWxzZSxcbiAgICAgICAgICAgIGF0dHJzOiBbXSxcbiAgICAgICAgICAgIGxvY2F0aW9uOiB0aGlzLmdldEN1cnJlbnRMb2NhdGlvbigyKSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgX2NyZWF0ZUNvbW1lbnRUb2tlbihvZmZzZXQpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50VG9rZW4gPSB7XG4gICAgICAgICAgICB0eXBlOiB0b2tlbl9qc18xLlRva2VuVHlwZS5DT01NRU5ULFxuICAgICAgICAgICAgZGF0YTogJycsXG4gICAgICAgICAgICBsb2NhdGlvbjogdGhpcy5nZXRDdXJyZW50TG9jYXRpb24ob2Zmc2V0KSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgX2NyZWF0ZURvY3R5cGVUb2tlbihpbml0aWFsTmFtZSkge1xuICAgICAgICB0aGlzLmN1cnJlbnRUb2tlbiA9IHtcbiAgICAgICAgICAgIHR5cGU6IHRva2VuX2pzXzEuVG9rZW5UeXBlLkRPQ1RZUEUsXG4gICAgICAgICAgICBuYW1lOiBpbml0aWFsTmFtZSxcbiAgICAgICAgICAgIGZvcmNlUXVpcmtzOiBmYWxzZSxcbiAgICAgICAgICAgIHB1YmxpY0lkOiBudWxsLFxuICAgICAgICAgICAgc3lzdGVtSWQ6IG51bGwsXG4gICAgICAgICAgICBsb2NhdGlvbjogdGhpcy5jdXJyZW50TG9jYXRpb24sXG4gICAgICAgIH07XG4gICAgfVxuICAgIF9jcmVhdGVDaGFyYWN0ZXJUb2tlbih0eXBlLCBjaGFycykge1xuICAgICAgICB0aGlzLmN1cnJlbnRDaGFyYWN0ZXJUb2tlbiA9IHtcbiAgICAgICAgICAgIHR5cGUsXG4gICAgICAgICAgICBjaGFycyxcbiAgICAgICAgICAgIGxvY2F0aW9uOiB0aGlzLmN1cnJlbnRMb2NhdGlvbixcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLy9UYWcgYXR0cmlidXRlc1xuICAgIF9jcmVhdGVBdHRyKGF0dHJOYW1lRmlyc3RDaCkge1xuICAgICAgICB0aGlzLmN1cnJlbnRBdHRyID0ge1xuICAgICAgICAgICAgbmFtZTogYXR0ck5hbWVGaXJzdENoLFxuICAgICAgICAgICAgdmFsdWU6ICcnLFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmN1cnJlbnRMb2NhdGlvbiA9IHRoaXMuZ2V0Q3VycmVudExvY2F0aW9uKDApO1xuICAgIH1cbiAgICBfbGVhdmVBdHRyTmFtZSgpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB2YXIgX2I7XG4gICAgICAgIGNvbnN0IHRva2VuID0gdGhpcy5jdXJyZW50VG9rZW47XG4gICAgICAgIGlmICgoMCwgdG9rZW5fanNfMS5nZXRUb2tlbkF0dHIpKHRva2VuLCB0aGlzLmN1cnJlbnRBdHRyLm5hbWUpID09PSBudWxsKSB7XG4gICAgICAgICAgICB0b2tlbi5hdHRycy5wdXNoKHRoaXMuY3VycmVudEF0dHIpO1xuICAgICAgICAgICAgaWYgKHRva2VuLmxvY2F0aW9uICYmIHRoaXMuY3VycmVudExvY2F0aW9uKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYXR0ckxvY2F0aW9ucyA9ICgoX2EgPSAoX2IgPSB0b2tlbi5sb2NhdGlvbikuYXR0cnMpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IChfYi5hdHRycyA9IE9iamVjdC5jcmVhdGUobnVsbCkpKTtcbiAgICAgICAgICAgICAgICBhdHRyTG9jYXRpb25zW3RoaXMuY3VycmVudEF0dHIubmFtZV0gPSB0aGlzLmN1cnJlbnRMb2NhdGlvbjtcbiAgICAgICAgICAgICAgICAvLyBTZXQgZW5kIGxvY2F0aW9uXG4gICAgICAgICAgICAgICAgdGhpcy5fbGVhdmVBdHRyVmFsdWUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2VycihlcnJvcl9jb2Rlc19qc18xLkVSUi5kdXBsaWNhdGVBdHRyaWJ1dGUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9sZWF2ZUF0dHJWYWx1ZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudExvY2F0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRMb2NhdGlvbi5lbmRMaW5lID0gdGhpcy5wcmVwcm9jZXNzb3IubGluZTtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudExvY2F0aW9uLmVuZENvbCA9IHRoaXMucHJlcHJvY2Vzc29yLmNvbDtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudExvY2F0aW9uLmVuZE9mZnNldCA9IHRoaXMucHJlcHJvY2Vzc29yLm9mZnNldDtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvL1Rva2VuIGVtaXNzaW9uXG4gICAgcHJlcGFyZVRva2VuKGN0KSB7XG4gICAgICAgIHRoaXMuX2VtaXRDdXJyZW50Q2hhcmFjdGVyVG9rZW4oY3QubG9jYXRpb24pO1xuICAgICAgICB0aGlzLmN1cnJlbnRUb2tlbiA9IG51bGw7XG4gICAgICAgIGlmIChjdC5sb2NhdGlvbikge1xuICAgICAgICAgICAgY3QubG9jYXRpb24uZW5kTGluZSA9IHRoaXMucHJlcHJvY2Vzc29yLmxpbmU7XG4gICAgICAgICAgICBjdC5sb2NhdGlvbi5lbmRDb2wgPSB0aGlzLnByZXByb2Nlc3Nvci5jb2wgKyAxO1xuICAgICAgICAgICAgY3QubG9jYXRpb24uZW5kT2Zmc2V0ID0gdGhpcy5wcmVwcm9jZXNzb3Iub2Zmc2V0ICsgMTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmN1cnJlbnRMb2NhdGlvbiA9IHRoaXMuZ2V0Q3VycmVudExvY2F0aW9uKC0xKTtcbiAgICB9XG4gICAgZW1pdEN1cnJlbnRUYWdUb2tlbigpIHtcbiAgICAgICAgY29uc3QgY3QgPSB0aGlzLmN1cnJlbnRUb2tlbjtcbiAgICAgICAgdGhpcy5wcmVwYXJlVG9rZW4oY3QpO1xuICAgICAgICBjdC50YWdJRCA9ICgwLCBodG1sX2pzXzEuZ2V0VGFnSUQpKGN0LnRhZ05hbWUpO1xuICAgICAgICBpZiAoY3QudHlwZSA9PT0gdG9rZW5fanNfMS5Ub2tlblR5cGUuU1RBUlRfVEFHKSB7XG4gICAgICAgICAgICB0aGlzLmxhc3RTdGFydFRhZ05hbWUgPSBjdC50YWdOYW1lO1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVyLm9uU3RhcnRUYWcoY3QpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKGN0LmF0dHJzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9lcnIoZXJyb3JfY29kZXNfanNfMS5FUlIuZW5kVGFnV2l0aEF0dHJpYnV0ZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGN0LnNlbGZDbG9zaW5nKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZXJyKGVycm9yX2NvZGVzX2pzXzEuRVJSLmVuZFRhZ1dpdGhUcmFpbGluZ1NvbGlkdXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5oYW5kbGVyLm9uRW5kVGFnKGN0KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnByZXByb2Nlc3Nvci5kcm9wUGFyc2VkQ2h1bmsoKTtcbiAgICB9XG4gICAgZW1pdEN1cnJlbnRDb21tZW50KGN0KSB7XG4gICAgICAgIHRoaXMucHJlcGFyZVRva2VuKGN0KTtcbiAgICAgICAgdGhpcy5oYW5kbGVyLm9uQ29tbWVudChjdCk7XG4gICAgICAgIHRoaXMucHJlcHJvY2Vzc29yLmRyb3BQYXJzZWRDaHVuaygpO1xuICAgIH1cbiAgICBlbWl0Q3VycmVudERvY3R5cGUoY3QpIHtcbiAgICAgICAgdGhpcy5wcmVwYXJlVG9rZW4oY3QpO1xuICAgICAgICB0aGlzLmhhbmRsZXIub25Eb2N0eXBlKGN0KTtcbiAgICAgICAgdGhpcy5wcmVwcm9jZXNzb3IuZHJvcFBhcnNlZENodW5rKCk7XG4gICAgfVxuICAgIF9lbWl0Q3VycmVudENoYXJhY3RlclRva2VuKG5leHRMb2NhdGlvbikge1xuICAgICAgICBpZiAodGhpcy5jdXJyZW50Q2hhcmFjdGVyVG9rZW4pIHtcbiAgICAgICAgICAgIC8vTk9URTogaWYgd2UgaGF2ZSBhIHBlbmRpbmcgY2hhcmFjdGVyIHRva2VuLCBtYWtlIGl0J3MgZW5kIGxvY2F0aW9uIGVxdWFsIHRvIHRoZVxuICAgICAgICAgICAgLy9jdXJyZW50IHRva2VuJ3Mgc3RhcnQgbG9jYXRpb24uXG4gICAgICAgICAgICBpZiAobmV4dExvY2F0aW9uICYmIHRoaXMuY3VycmVudENoYXJhY3RlclRva2VuLmxvY2F0aW9uKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50Q2hhcmFjdGVyVG9rZW4ubG9jYXRpb24uZW5kTGluZSA9IG5leHRMb2NhdGlvbi5zdGFydExpbmU7XG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50Q2hhcmFjdGVyVG9rZW4ubG9jYXRpb24uZW5kQ29sID0gbmV4dExvY2F0aW9uLnN0YXJ0Q29sO1xuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudENoYXJhY3RlclRva2VuLmxvY2F0aW9uLmVuZE9mZnNldCA9IG5leHRMb2NhdGlvbi5zdGFydE9mZnNldDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5jdXJyZW50Q2hhcmFjdGVyVG9rZW4udHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgdG9rZW5fanNfMS5Ub2tlblR5cGUuQ0hBUkFDVEVSOiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlci5vbkNoYXJhY3Rlcih0aGlzLmN1cnJlbnRDaGFyYWN0ZXJUb2tlbik7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlIHRva2VuX2pzXzEuVG9rZW5UeXBlLk5VTExfQ0hBUkFDVEVSOiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlci5vbk51bGxDaGFyYWN0ZXIodGhpcy5jdXJyZW50Q2hhcmFjdGVyVG9rZW4pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSB0b2tlbl9qc18xLlRva2VuVHlwZS5XSElURVNQQUNFX0NIQVJBQ1RFUjoge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZXIub25XaGl0ZXNwYWNlQ2hhcmFjdGVyKHRoaXMuY3VycmVudENoYXJhY3RlclRva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5jdXJyZW50Q2hhcmFjdGVyVG9rZW4gPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9lbWl0RU9GVG9rZW4oKSB7XG4gICAgICAgIGNvbnN0IGxvY2F0aW9uID0gdGhpcy5nZXRDdXJyZW50TG9jYXRpb24oMCk7XG4gICAgICAgIGlmIChsb2NhdGlvbikge1xuICAgICAgICAgICAgbG9jYXRpb24uZW5kTGluZSA9IGxvY2F0aW9uLnN0YXJ0TGluZTtcbiAgICAgICAgICAgIGxvY2F0aW9uLmVuZENvbCA9IGxvY2F0aW9uLnN0YXJ0Q29sO1xuICAgICAgICAgICAgbG9jYXRpb24uZW5kT2Zmc2V0ID0gbG9jYXRpb24uc3RhcnRPZmZzZXQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fZW1pdEN1cnJlbnRDaGFyYWN0ZXJUb2tlbihsb2NhdGlvbik7XG4gICAgICAgIHRoaXMuaGFuZGxlci5vbkVvZih7IHR5cGU6IHRva2VuX2pzXzEuVG9rZW5UeXBlLkVPRiwgbG9jYXRpb24gfSk7XG4gICAgICAgIHRoaXMuYWN0aXZlID0gZmFsc2U7XG4gICAgfVxuICAgIC8vQ2hhcmFjdGVycyBlbWlzc2lvblxuICAgIC8vT1BUSU1JWkFUSU9OOiBzcGVjaWZpY2F0aW9uIHVzZXMgb25seSBvbmUgdHlwZSBvZiBjaGFyYWN0ZXIgdG9rZW5zIChvbmUgdG9rZW4gcGVyIGNoYXJhY3RlcikuXG4gICAgLy9UaGlzIGNhdXNlcyBhIGh1Z2UgbWVtb3J5IG92ZXJoZWFkIGFuZCBhIGxvdCBvZiB1bm5lY2Vzc2FyeSBwYXJzZXIgbG9vcHMuIHBhcnNlNSB1c2VzIDMgZ3JvdXBzIG9mIGNoYXJhY3RlcnMuXG4gICAgLy9JZiB3ZSBoYXZlIGEgc2VxdWVuY2Ugb2YgY2hhcmFjdGVycyB0aGF0IGJlbG9uZyB0byB0aGUgc2FtZSBncm91cCwgdGhlIHBhcnNlciBjYW4gcHJvY2VzcyBpdFxuICAgIC8vYXMgYSBzaW5nbGUgc29saWQgY2hhcmFjdGVyIHRva2VuLlxuICAgIC8vU28sIHRoZXJlIGFyZSAzIHR5cGVzIG9mIGNoYXJhY3RlciB0b2tlbnMgaW4gcGFyc2U1OlxuICAgIC8vMSlUb2tlblR5cGUuTlVMTF9DSEFSQUNURVIgLSBcXHUwMDAwLWNoYXJhY3RlciBzZXF1ZW5jZXMgKGUuZy4gJ1xcdTAwMDBcXHUwMDAwXFx1MDAwMCcpXG4gICAgLy8yKVRva2VuVHlwZS5XSElURVNQQUNFX0NIQVJBQ1RFUiAtIGFueSB3aGl0ZXNwYWNlL25ldy1saW5lIGNoYXJhY3RlciBzZXF1ZW5jZXMgKGUuZy4gJ1xcbiAgXFxyXFx0ICAgXFxmJylcbiAgICAvLzMpVG9rZW5UeXBlLkNIQVJBQ1RFUiAtIGFueSBjaGFyYWN0ZXIgc2VxdWVuY2Ugd2hpY2ggZG9uJ3QgYmVsb25nIHRvIGdyb3VwcyAxIGFuZCAyIChlLmcuICdhYmNkZWYxMjM0QEAjJCVeJylcbiAgICBfYXBwZW5kQ2hhclRvQ3VycmVudENoYXJhY3RlclRva2VuKHR5cGUsIGNoKSB7XG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRDaGFyYWN0ZXJUb2tlbikge1xuICAgICAgICAgICAgaWYgKHRoaXMuY3VycmVudENoYXJhY3RlclRva2VuLnR5cGUgIT09IHR5cGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRMb2NhdGlvbiA9IHRoaXMuZ2V0Q3VycmVudExvY2F0aW9uKDApO1xuICAgICAgICAgICAgICAgIHRoaXMuX2VtaXRDdXJyZW50Q2hhcmFjdGVyVG9rZW4odGhpcy5jdXJyZW50TG9jYXRpb24pO1xuICAgICAgICAgICAgICAgIHRoaXMucHJlcHJvY2Vzc29yLmRyb3BQYXJzZWRDaHVuaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50Q2hhcmFjdGVyVG9rZW4uY2hhcnMgKz0gY2g7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2NyZWF0ZUNoYXJhY3RlclRva2VuKHR5cGUsIGNoKTtcbiAgICB9XG4gICAgX2VtaXRDb2RlUG9pbnQoY3ApIHtcbiAgICAgICAgY29uc3QgdHlwZSA9IGlzV2hpdGVzcGFjZShjcClcbiAgICAgICAgICAgID8gdG9rZW5fanNfMS5Ub2tlblR5cGUuV0hJVEVTUEFDRV9DSEFSQUNURVJcbiAgICAgICAgICAgIDogY3AgPT09IHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5OVUxMXG4gICAgICAgICAgICAgICAgPyB0b2tlbl9qc18xLlRva2VuVHlwZS5OVUxMX0NIQVJBQ1RFUlxuICAgICAgICAgICAgICAgIDogdG9rZW5fanNfMS5Ub2tlblR5cGUuQ0hBUkFDVEVSO1xuICAgICAgICB0aGlzLl9hcHBlbmRDaGFyVG9DdXJyZW50Q2hhcmFjdGVyVG9rZW4odHlwZSwgU3RyaW5nLmZyb21Db2RlUG9pbnQoY3ApKTtcbiAgICB9XG4gICAgLy9OT1RFOiB1c2VkIHdoZW4gd2UgZW1pdCBjaGFyYWN0ZXJzIGV4cGxpY2l0bHkuXG4gICAgLy9UaGlzIGlzIGFsd2F5cyBmb3Igbm9uLXdoaXRlc3BhY2UgYW5kIG5vbi1udWxsIGNoYXJhY3RlcnMsIHdoaWNoIGFsbG93cyB1cyB0byBhdm9pZCBhZGRpdGlvbmFsIGNoZWNrcy5cbiAgICBfZW1pdENoYXJzKGNoKSB7XG4gICAgICAgIHRoaXMuX2FwcGVuZENoYXJUb0N1cnJlbnRDaGFyYWN0ZXJUb2tlbih0b2tlbl9qc18xLlRva2VuVHlwZS5DSEFSQUNURVIsIGNoKTtcbiAgICB9XG4gICAgLy8gQ2hhcmFjdGVyIHJlZmVyZW5jZSBoZWxwZXJzXG4gICAgX21hdGNoTmFtZWRDaGFyYWN0ZXJSZWZlcmVuY2UoY3ApIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IG51bGw7XG4gICAgICAgIGxldCBleGNlc3MgPSAwO1xuICAgICAgICBsZXQgd2l0aG91dFNlbWljb2xvbiA9IGZhbHNlO1xuICAgICAgICBmb3IgKGxldCBpID0gMCwgY3VycmVudCA9IGRlY29kZV9qc18xLmh0bWxEZWNvZGVUcmVlWzBdOyBpID49IDA7IGNwID0gdGhpcy5fY29uc3VtZSgpKSB7XG4gICAgICAgICAgICBpID0gKDAsIGRlY29kZV9qc18xLmRldGVybWluZUJyYW5jaCkoZGVjb2RlX2pzXzEuaHRtbERlY29kZVRyZWUsIGN1cnJlbnQsIGkgKyAxLCBjcCk7XG4gICAgICAgICAgICBpZiAoaSA8IDApXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBleGNlc3MgKz0gMTtcbiAgICAgICAgICAgIGN1cnJlbnQgPSBkZWNvZGVfanNfMS5odG1sRGVjb2RlVHJlZVtpXTtcbiAgICAgICAgICAgIGNvbnN0IG1hc2tlZCA9IGN1cnJlbnQgJiBkZWNvZGVfanNfMS5CaW5UcmllRmxhZ3MuVkFMVUVfTEVOR1RIO1xuICAgICAgICAgICAgLy8gSWYgdGhlIGJyYW5jaCBpcyBhIHZhbHVlLCBzdG9yZSBpdCBhbmQgY29udGludWVcbiAgICAgICAgICAgIGlmIChtYXNrZWQpIHtcbiAgICAgICAgICAgICAgICAvLyBUaGUgbWFzayBpcyB0aGUgbnVtYmVyIG9mIGJ5dGVzIG9mIHRoZSB2YWx1ZSwgaW5jbHVkaW5nIHRoZSBjdXJyZW50IGJ5dGUuXG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWVMZW5ndGggPSAobWFza2VkID4+IDE0KSAtIDE7XG4gICAgICAgICAgICAgICAgLy8gQXR0cmlidXRlIHZhbHVlcyB0aGF0IGFyZW4ndCB0ZXJtaW5hdGVkIHByb3Blcmx5IGFyZW4ndCBwYXJzZWQsIGFuZCBzaG91bGRuJ3QgbGVhZCB0byBhIHBhcnNlciBlcnJvci5cbiAgICAgICAgICAgICAgICAvLyBTZWUgdGhlIGV4YW1wbGUgaW4gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvcGFyc2luZy5odG1sI25hbWVkLWNoYXJhY3Rlci1yZWZlcmVuY2Utc3RhdGVcbiAgICAgICAgICAgICAgICBpZiAoY3AgIT09IHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5TRU1JQ09MT04gJiZcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faXNDaGFyYWN0ZXJSZWZlcmVuY2VJbkF0dHJpYnV0ZSgpICYmXG4gICAgICAgICAgICAgICAgICAgIGlzRW50aXR5SW5BdHRyaWJ1dGVJbnZhbGlkRW5kKHRoaXMucHJlcHJvY2Vzc29yLnBlZWsoMSkpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vTk9URTogd2UgZG9uJ3QgZmx1c2ggYWxsIGNvbnN1bWVkIGNvZGUgcG9pbnRzIGhlcmUsIGFuZCBpbnN0ZWFkIHN3aXRjaCBiYWNrIHRvIHRoZSBvcmlnaW5hbCBzdGF0ZSBhZnRlclxuICAgICAgICAgICAgICAgICAgICAvL2VtaXR0aW5nIGFuIGFtcGVyc2FuZC4gVGhpcyBpcyBmaW5lLCBhcyBhbHBoYW51bWVyaWMgY2hhcmFjdGVycyB3b24ndCBiZSBwYXJzZWQgZGlmZmVyZW50bHkgaW4gYXR0cmlidXRlcy5cbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gW3VuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5BTVBFUlNBTkRdO1xuICAgICAgICAgICAgICAgICAgICAvLyBTa2lwIG92ZXIgdGhlIHZhbHVlLlxuICAgICAgICAgICAgICAgICAgICBpICs9IHZhbHVlTGVuZ3RoO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhpcyBpcyBhIHN1cnJvZ2F0ZSBwYWlyLCBjb25zdW1lIHRoZSBuZXh0IHR3byBieXRlcy5cbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID1cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlTGVuZ3RoID09PSAwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBbZGVjb2RlX2pzXzEuaHRtbERlY29kZVRyZWVbaV0gJiB+ZGVjb2RlX2pzXzEuQmluVHJpZUZsYWdzLlZBTFVFX0xFTkdUSF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHZhbHVlTGVuZ3RoID09PSAxXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gW2RlY29kZV9qc18xLmh0bWxEZWNvZGVUcmVlWysraV1dXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogW2RlY29kZV9qc18xLmh0bWxEZWNvZGVUcmVlWysraV0sIGRlY29kZV9qc18xLmh0bWxEZWNvZGVUcmVlWysraV1dO1xuICAgICAgICAgICAgICAgICAgICBleGNlc3MgPSAwO1xuICAgICAgICAgICAgICAgICAgICB3aXRob3V0U2VtaWNvbG9uID0gY3AgIT09IHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5TRU1JQ09MT047XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZUxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGUgdmFsdWUgaXMgemVyby1sZW5ndGgsIHdlJ3JlIGRvbmUuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NvbnN1bWUoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3VuY29uc3VtZShleGNlc3MpO1xuICAgICAgICBpZiAod2l0aG91dFNlbWljb2xvbiAmJiAhdGhpcy5wcmVwcm9jZXNzb3IuZW5kT2ZDaHVua0hpdCkge1xuICAgICAgICAgICAgdGhpcy5fZXJyKGVycm9yX2NvZGVzX2pzXzEuRVJSLm1pc3NpbmdTZW1pY29sb25BZnRlckNoYXJhY3RlclJlZmVyZW5jZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gV2Ugd2FudCB0byBlbWl0IHRoZSBlcnJvciBhYm92ZSBvbiB0aGUgY29kZSBwb2ludCBhZnRlciB0aGUgZW50aXR5LlxuICAgICAgICAvLyBXZSBhbHdheXMgY29uc3VtZSBvbmUgY29kZSBwb2ludCB0b28gbWFueSBpbiB0aGUgbG9vcCwgYW5kIHdlIHdhaXQgdG9cbiAgICAgICAgLy8gdW5jb25zdW1lIGl0IHVudGlsIGFmdGVyIHRoZSBlcnJvciBpcyBlbWl0dGVkLlxuICAgICAgICB0aGlzLl91bmNvbnN1bWUoMSk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIF9pc0NoYXJhY3RlclJlZmVyZW5jZUluQXR0cmlidXRlKCkge1xuICAgICAgICByZXR1cm4gKHRoaXMucmV0dXJuU3RhdGUgPT09IFN0YXRlLkFUVFJJQlVURV9WQUxVRV9ET1VCTEVfUVVPVEVEIHx8XG4gICAgICAgICAgICB0aGlzLnJldHVyblN0YXRlID09PSBTdGF0ZS5BVFRSSUJVVEVfVkFMVUVfU0lOR0xFX1FVT1RFRCB8fFxuICAgICAgICAgICAgdGhpcy5yZXR1cm5TdGF0ZSA9PT0gU3RhdGUuQVRUUklCVVRFX1ZBTFVFX1VOUVVPVEVEKTtcbiAgICB9XG4gICAgX2ZsdXNoQ29kZVBvaW50Q29uc3VtZWRBc0NoYXJhY3RlclJlZmVyZW5jZShjcCkge1xuICAgICAgICBpZiAodGhpcy5faXNDaGFyYWN0ZXJSZWZlcmVuY2VJbkF0dHJpYnV0ZSgpKSB7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRBdHRyLnZhbHVlICs9IFN0cmluZy5mcm9tQ29kZVBvaW50KGNwKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2VtaXRDb2RlUG9pbnQoY3ApO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIENhbGxpbmcgc3RhdGVzIHRoaXMgd2F5IHR1cm5zIG91dCB0byBiZSBtdWNoIGZhc3RlciB0aGFuIGFueSBvdGhlciBhcHByb2FjaC5cbiAgICBfY2FsbFN0YXRlKGNwKSB7XG4gICAgICAgIHN3aXRjaCAodGhpcy5zdGF0ZSkge1xuICAgICAgICAgICAgY2FzZSBTdGF0ZS5EQVRBOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhdGVEYXRhKGNwKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgU3RhdGUuUkNEQVRBOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhdGVSY2RhdGEoY3ApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBTdGF0ZS5SQVdURVhUOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhdGVSYXd0ZXh0KGNwKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgU3RhdGUuU0NSSVBUX0RBVEE6IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGF0ZVNjcmlwdERhdGEoY3ApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBTdGF0ZS5QTEFJTlRFWFQ6IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGF0ZVBsYWludGV4dChjcCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIFN0YXRlLlRBR19PUEVOOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhdGVUYWdPcGVuKGNwKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgU3RhdGUuRU5EX1RBR19PUEVOOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhdGVFbmRUYWdPcGVuKGNwKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgU3RhdGUuVEFHX05BTUU6IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGF0ZVRhZ05hbWUoY3ApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBTdGF0ZS5SQ0RBVEFfTEVTU19USEFOX1NJR046IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGF0ZVJjZGF0YUxlc3NUaGFuU2lnbihjcCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIFN0YXRlLlJDREFUQV9FTkRfVEFHX09QRU46IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGF0ZVJjZGF0YUVuZFRhZ09wZW4oY3ApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBTdGF0ZS5SQ0RBVEFfRU5EX1RBR19OQU1FOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhdGVSY2RhdGFFbmRUYWdOYW1lKGNwKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgU3RhdGUuUkFXVEVYVF9MRVNTX1RIQU5fU0lHTjoge1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0YXRlUmF3dGV4dExlc3NUaGFuU2lnbihjcCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIFN0YXRlLlJBV1RFWFRfRU5EX1RBR19PUEVOOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhdGVSYXd0ZXh0RW5kVGFnT3BlbihjcCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIFN0YXRlLlJBV1RFWFRfRU5EX1RBR19OQU1FOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhdGVSYXd0ZXh0RW5kVGFnTmFtZShjcCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIFN0YXRlLlNDUklQVF9EQVRBX0xFU1NfVEhBTl9TSUdOOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhdGVTY3JpcHREYXRhTGVzc1RoYW5TaWduKGNwKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgU3RhdGUuU0NSSVBUX0RBVEFfRU5EX1RBR19PUEVOOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhdGVTY3JpcHREYXRhRW5kVGFnT3BlbihjcCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIFN0YXRlLlNDUklQVF9EQVRBX0VORF9UQUdfTkFNRToge1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0YXRlU2NyaXB0RGF0YUVuZFRhZ05hbWUoY3ApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBTdGF0ZS5TQ1JJUFRfREFUQV9FU0NBUEVfU1RBUlQ6IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGF0ZVNjcmlwdERhdGFFc2NhcGVTdGFydChjcCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIFN0YXRlLlNDUklQVF9EQVRBX0VTQ0FQRV9TVEFSVF9EQVNIOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhdGVTY3JpcHREYXRhRXNjYXBlU3RhcnREYXNoKGNwKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgU3RhdGUuU0NSSVBUX0RBVEFfRVNDQVBFRDoge1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0YXRlU2NyaXB0RGF0YUVzY2FwZWQoY3ApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBTdGF0ZS5TQ1JJUFRfREFUQV9FU0NBUEVEX0RBU0g6IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGF0ZVNjcmlwdERhdGFFc2NhcGVkRGFzaChjcCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIFN0YXRlLlNDUklQVF9EQVRBX0VTQ0FQRURfREFTSF9EQVNIOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhdGVTY3JpcHREYXRhRXNjYXBlZERhc2hEYXNoKGNwKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgU3RhdGUuU0NSSVBUX0RBVEFfRVNDQVBFRF9MRVNTX1RIQU5fU0lHTjoge1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0YXRlU2NyaXB0RGF0YUVzY2FwZWRMZXNzVGhhblNpZ24oY3ApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBTdGF0ZS5TQ1JJUFRfREFUQV9FU0NBUEVEX0VORF9UQUdfT1BFTjoge1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0YXRlU2NyaXB0RGF0YUVzY2FwZWRFbmRUYWdPcGVuKGNwKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgU3RhdGUuU0NSSVBUX0RBVEFfRVNDQVBFRF9FTkRfVEFHX05BTUU6IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGF0ZVNjcmlwdERhdGFFc2NhcGVkRW5kVGFnTmFtZShjcCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIFN0YXRlLlNDUklQVF9EQVRBX0RPVUJMRV9FU0NBUEVfU1RBUlQ6IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGF0ZVNjcmlwdERhdGFEb3VibGVFc2NhcGVTdGFydChjcCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIFN0YXRlLlNDUklQVF9EQVRBX0RPVUJMRV9FU0NBUEVEOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhdGVTY3JpcHREYXRhRG91YmxlRXNjYXBlZChjcCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIFN0YXRlLlNDUklQVF9EQVRBX0RPVUJMRV9FU0NBUEVEX0RBU0g6IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGF0ZVNjcmlwdERhdGFEb3VibGVFc2NhcGVkRGFzaChjcCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIFN0YXRlLlNDUklQVF9EQVRBX0RPVUJMRV9FU0NBUEVEX0RBU0hfREFTSDoge1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0YXRlU2NyaXB0RGF0YURvdWJsZUVzY2FwZWREYXNoRGFzaChjcCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIFN0YXRlLlNDUklQVF9EQVRBX0RPVUJMRV9FU0NBUEVEX0xFU1NfVEhBTl9TSUdOOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhdGVTY3JpcHREYXRhRG91YmxlRXNjYXBlZExlc3NUaGFuU2lnbihjcCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIFN0YXRlLlNDUklQVF9EQVRBX0RPVUJMRV9FU0NBUEVfRU5EOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhdGVTY3JpcHREYXRhRG91YmxlRXNjYXBlRW5kKGNwKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgU3RhdGUuQkVGT1JFX0FUVFJJQlVURV9OQU1FOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhdGVCZWZvcmVBdHRyaWJ1dGVOYW1lKGNwKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgU3RhdGUuQVRUUklCVVRFX05BTUU6IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGF0ZUF0dHJpYnV0ZU5hbWUoY3ApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBTdGF0ZS5BRlRFUl9BVFRSSUJVVEVfTkFNRToge1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0YXRlQWZ0ZXJBdHRyaWJ1dGVOYW1lKGNwKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgU3RhdGUuQkVGT1JFX0FUVFJJQlVURV9WQUxVRToge1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0YXRlQmVmb3JlQXR0cmlidXRlVmFsdWUoY3ApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBTdGF0ZS5BVFRSSUJVVEVfVkFMVUVfRE9VQkxFX1FVT1RFRDoge1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0YXRlQXR0cmlidXRlVmFsdWVEb3VibGVRdW90ZWQoY3ApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBTdGF0ZS5BVFRSSUJVVEVfVkFMVUVfU0lOR0xFX1FVT1RFRDoge1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0YXRlQXR0cmlidXRlVmFsdWVTaW5nbGVRdW90ZWQoY3ApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBTdGF0ZS5BVFRSSUJVVEVfVkFMVUVfVU5RVU9URUQ6IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGF0ZUF0dHJpYnV0ZVZhbHVlVW5xdW90ZWQoY3ApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBTdGF0ZS5BRlRFUl9BVFRSSUJVVEVfVkFMVUVfUVVPVEVEOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhdGVBZnRlckF0dHJpYnV0ZVZhbHVlUXVvdGVkKGNwKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgU3RhdGUuU0VMRl9DTE9TSU5HX1NUQVJUX1RBRzoge1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0YXRlU2VsZkNsb3NpbmdTdGFydFRhZyhjcCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIFN0YXRlLkJPR1VTX0NPTU1FTlQ6IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGF0ZUJvZ3VzQ29tbWVudChjcCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIFN0YXRlLk1BUktVUF9ERUNMQVJBVElPTl9PUEVOOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhdGVNYXJrdXBEZWNsYXJhdGlvbk9wZW4oY3ApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBTdGF0ZS5DT01NRU5UX1NUQVJUOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhdGVDb21tZW50U3RhcnQoY3ApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBTdGF0ZS5DT01NRU5UX1NUQVJUX0RBU0g6IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGF0ZUNvbW1lbnRTdGFydERhc2goY3ApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBTdGF0ZS5DT01NRU5UOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhdGVDb21tZW50KGNwKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgU3RhdGUuQ09NTUVOVF9MRVNTX1RIQU5fU0lHTjoge1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0YXRlQ29tbWVudExlc3NUaGFuU2lnbihjcCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIFN0YXRlLkNPTU1FTlRfTEVTU19USEFOX1NJR05fQkFORzoge1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0YXRlQ29tbWVudExlc3NUaGFuU2lnbkJhbmcoY3ApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBTdGF0ZS5DT01NRU5UX0xFU1NfVEhBTl9TSUdOX0JBTkdfREFTSDoge1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0YXRlQ29tbWVudExlc3NUaGFuU2lnbkJhbmdEYXNoKGNwKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgU3RhdGUuQ09NTUVOVF9MRVNTX1RIQU5fU0lHTl9CQU5HX0RBU0hfREFTSDoge1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0YXRlQ29tbWVudExlc3NUaGFuU2lnbkJhbmdEYXNoRGFzaChjcCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIFN0YXRlLkNPTU1FTlRfRU5EX0RBU0g6IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGF0ZUNvbW1lbnRFbmREYXNoKGNwKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgU3RhdGUuQ09NTUVOVF9FTkQ6IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGF0ZUNvbW1lbnRFbmQoY3ApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBTdGF0ZS5DT01NRU5UX0VORF9CQU5HOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhdGVDb21tZW50RW5kQmFuZyhjcCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIFN0YXRlLkRPQ1RZUEU6IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGF0ZURvY3R5cGUoY3ApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBTdGF0ZS5CRUZPUkVfRE9DVFlQRV9OQU1FOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhdGVCZWZvcmVEb2N0eXBlTmFtZShjcCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIFN0YXRlLkRPQ1RZUEVfTkFNRToge1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0YXRlRG9jdHlwZU5hbWUoY3ApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBTdGF0ZS5BRlRFUl9ET0NUWVBFX05BTUU6IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGF0ZUFmdGVyRG9jdHlwZU5hbWUoY3ApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBTdGF0ZS5BRlRFUl9ET0NUWVBFX1BVQkxJQ19LRVlXT1JEOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhdGVBZnRlckRvY3R5cGVQdWJsaWNLZXl3b3JkKGNwKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgU3RhdGUuQkVGT1JFX0RPQ1RZUEVfUFVCTElDX0lERU5USUZJRVI6IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGF0ZUJlZm9yZURvY3R5cGVQdWJsaWNJZGVudGlmaWVyKGNwKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgU3RhdGUuRE9DVFlQRV9QVUJMSUNfSURFTlRJRklFUl9ET1VCTEVfUVVPVEVEOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhdGVEb2N0eXBlUHVibGljSWRlbnRpZmllckRvdWJsZVF1b3RlZChjcCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIFN0YXRlLkRPQ1RZUEVfUFVCTElDX0lERU5USUZJRVJfU0lOR0xFX1FVT1RFRDoge1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0YXRlRG9jdHlwZVB1YmxpY0lkZW50aWZpZXJTaW5nbGVRdW90ZWQoY3ApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBTdGF0ZS5BRlRFUl9ET0NUWVBFX1BVQkxJQ19JREVOVElGSUVSOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhdGVBZnRlckRvY3R5cGVQdWJsaWNJZGVudGlmaWVyKGNwKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgU3RhdGUuQkVUV0VFTl9ET0NUWVBFX1BVQkxJQ19BTkRfU1lTVEVNX0lERU5USUZJRVJTOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhdGVCZXR3ZWVuRG9jdHlwZVB1YmxpY0FuZFN5c3RlbUlkZW50aWZpZXJzKGNwKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgU3RhdGUuQUZURVJfRE9DVFlQRV9TWVNURU1fS0VZV09SRDoge1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0YXRlQWZ0ZXJEb2N0eXBlU3lzdGVtS2V5d29yZChjcCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIFN0YXRlLkJFRk9SRV9ET0NUWVBFX1NZU1RFTV9JREVOVElGSUVSOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhdGVCZWZvcmVEb2N0eXBlU3lzdGVtSWRlbnRpZmllcihjcCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIFN0YXRlLkRPQ1RZUEVfU1lTVEVNX0lERU5USUZJRVJfRE9VQkxFX1FVT1RFRDoge1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0YXRlRG9jdHlwZVN5c3RlbUlkZW50aWZpZXJEb3VibGVRdW90ZWQoY3ApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBTdGF0ZS5ET0NUWVBFX1NZU1RFTV9JREVOVElGSUVSX1NJTkdMRV9RVU9URUQ6IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGF0ZURvY3R5cGVTeXN0ZW1JZGVudGlmaWVyU2luZ2xlUXVvdGVkKGNwKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgU3RhdGUuQUZURVJfRE9DVFlQRV9TWVNURU1fSURFTlRJRklFUjoge1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0YXRlQWZ0ZXJEb2N0eXBlU3lzdGVtSWRlbnRpZmllcihjcCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIFN0YXRlLkJPR1VTX0RPQ1RZUEU6IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGF0ZUJvZ3VzRG9jdHlwZShjcCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIFN0YXRlLkNEQVRBX1NFQ1RJT046IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGF0ZUNkYXRhU2VjdGlvbihjcCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIFN0YXRlLkNEQVRBX1NFQ1RJT05fQlJBQ0tFVDoge1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0YXRlQ2RhdGFTZWN0aW9uQnJhY2tldChjcCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIFN0YXRlLkNEQVRBX1NFQ1RJT05fRU5EOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhdGVDZGF0YVNlY3Rpb25FbmQoY3ApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBTdGF0ZS5DSEFSQUNURVJfUkVGRVJFTkNFOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhdGVDaGFyYWN0ZXJSZWZlcmVuY2UoY3ApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBTdGF0ZS5OQU1FRF9DSEFSQUNURVJfUkVGRVJFTkNFOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhdGVOYW1lZENoYXJhY3RlclJlZmVyZW5jZShjcCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIFN0YXRlLkFNQklHVU9VU19BTVBFUlNBTkQ6IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGF0ZUFtYmlndW91c0FtcGVyc2FuZChjcCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIFN0YXRlLk5VTUVSSUNfQ0hBUkFDVEVSX1JFRkVSRU5DRToge1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0YXRlTnVtZXJpY0NoYXJhY3RlclJlZmVyZW5jZShjcCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIFN0YXRlLkhFWEFERU1JQ0FMX0NIQVJBQ1RFUl9SRUZFUkVOQ0VfU1RBUlQ6IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGF0ZUhleGFkZW1pY2FsQ2hhcmFjdGVyUmVmZXJlbmNlU3RhcnQoY3ApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBTdGF0ZS5IRVhBREVNSUNBTF9DSEFSQUNURVJfUkVGRVJFTkNFOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhdGVIZXhhZGVtaWNhbENoYXJhY3RlclJlZmVyZW5jZShjcCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIFN0YXRlLkRFQ0lNQUxfQ0hBUkFDVEVSX1JFRkVSRU5DRToge1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0YXRlRGVjaW1hbENoYXJhY3RlclJlZmVyZW5jZShjcCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIFN0YXRlLk5VTUVSSUNfQ0hBUkFDVEVSX1JFRkVSRU5DRV9FTkQ6IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGF0ZU51bWVyaWNDaGFyYWN0ZXJSZWZlcmVuY2VFbmQoY3ApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBzdGF0ZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8vIFN0YXRlIG1hY2hpbmVcbiAgICAvLyBEYXRhIHN0YXRlXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBfc3RhdGVEYXRhKGNwKSB7XG4gICAgICAgIHN3aXRjaCAoY3ApIHtcbiAgICAgICAgICAgIGNhc2UgdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLkxFU1NfVEhBTl9TSUdOOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLlRBR19PUEVOO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuQU1QRVJTQU5EOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZXR1cm5TdGF0ZSA9IFN0YXRlLkRBVEE7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLkNIQVJBQ1RFUl9SRUZFUkVOQ0U7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5OVUxMOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZXJyKGVycm9yX2NvZGVzX2pzXzEuRVJSLnVuZXhwZWN0ZWROdWxsQ2hhcmFjdGVyKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9lbWl0Q29kZVBvaW50KGNwKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLkVPRjoge1xuICAgICAgICAgICAgICAgIHRoaXMuX2VtaXRFT0ZUb2tlbigpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgICAgIHRoaXMuX2VtaXRDb2RlUG9pbnQoY3ApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8vICBSQ0RBVEEgc3RhdGVcbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIF9zdGF0ZVJjZGF0YShjcCkge1xuICAgICAgICBzd2l0Y2ggKGNwKSB7XG4gICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5BTVBFUlNBTkQ6IHtcbiAgICAgICAgICAgICAgICB0aGlzLnJldHVyblN0YXRlID0gU3RhdGUuUkNEQVRBO1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5DSEFSQUNURVJfUkVGRVJFTkNFO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuTEVTU19USEFOX1NJR046IHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuUkNEQVRBX0xFU1NfVEhBTl9TSUdOO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuTlVMTDoge1xuICAgICAgICAgICAgICAgIHRoaXMuX2VycihlcnJvcl9jb2Rlc19qc18xLkVSUi51bmV4cGVjdGVkTnVsbENoYXJhY3Rlcik7XG4gICAgICAgICAgICAgICAgdGhpcy5fZW1pdENoYXJzKHVuaWNvZGVfanNfMS5SRVBMQUNFTUVOVF9DSEFSQUNURVIpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuRU9GOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZW1pdEVPRlRva2VuKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZW1pdENvZGVQb2ludChjcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gUkFXVEVYVCBzdGF0ZVxuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgX3N0YXRlUmF3dGV4dChjcCkge1xuICAgICAgICBzd2l0Y2ggKGNwKSB7XG4gICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5MRVNTX1RIQU5fU0lHTjoge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5SQVdURVhUX0xFU1NfVEhBTl9TSUdOO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuTlVMTDoge1xuICAgICAgICAgICAgICAgIHRoaXMuX2VycihlcnJvcl9jb2Rlc19qc18xLkVSUi51bmV4cGVjdGVkTnVsbENoYXJhY3Rlcik7XG4gICAgICAgICAgICAgICAgdGhpcy5fZW1pdENoYXJzKHVuaWNvZGVfanNfMS5SRVBMQUNFTUVOVF9DSEFSQUNURVIpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuRU9GOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZW1pdEVPRlRva2VuKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZW1pdENvZGVQb2ludChjcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gU2NyaXB0IGRhdGEgc3RhdGVcbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIF9zdGF0ZVNjcmlwdERhdGEoY3ApIHtcbiAgICAgICAgc3dpdGNoIChjcCkge1xuICAgICAgICAgICAgY2FzZSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuTEVTU19USEFOX1NJR046IHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuU0NSSVBUX0RBVEFfTEVTU19USEFOX1NJR047XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5OVUxMOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZXJyKGVycm9yX2NvZGVzX2pzXzEuRVJSLnVuZXhwZWN0ZWROdWxsQ2hhcmFjdGVyKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9lbWl0Q2hhcnModW5pY29kZV9qc18xLlJFUExBQ0VNRU5UX0NIQVJBQ1RFUik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5FT0Y6IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9lbWl0RU9GVG9rZW4oKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9lbWl0Q29kZVBvaW50KGNwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBQTEFJTlRFWFQgc3RhdGVcbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIF9zdGF0ZVBsYWludGV4dChjcCkge1xuICAgICAgICBzd2l0Y2ggKGNwKSB7XG4gICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5OVUxMOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZXJyKGVycm9yX2NvZGVzX2pzXzEuRVJSLnVuZXhwZWN0ZWROdWxsQ2hhcmFjdGVyKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9lbWl0Q2hhcnModW5pY29kZV9qc18xLlJFUExBQ0VNRU5UX0NIQVJBQ1RFUik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5FT0Y6IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9lbWl0RU9GVG9rZW4oKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9lbWl0Q29kZVBvaW50KGNwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBUYWcgb3BlbiBzdGF0ZVxuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgX3N0YXRlVGFnT3BlbihjcCkge1xuICAgICAgICBpZiAoaXNBc2NpaUxldHRlcihjcCkpIHtcbiAgICAgICAgICAgIHRoaXMuX2NyZWF0ZVN0YXJ0VGFnVG9rZW4oKTtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5UQUdfTkFNRTtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlVGFnTmFtZShjcCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgc3dpdGNoIChjcCkge1xuICAgICAgICAgICAgICAgIGNhc2UgdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLkVYQ0xBTUFUSU9OX01BUks6IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLk1BUktVUF9ERUNMQVJBVElPTl9PUEVOO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuU09MSURVUzoge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuRU5EX1RBR19PUEVOO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuUVVFU1RJT05fTUFSSzoge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9lcnIoZXJyb3JfY29kZXNfanNfMS5FUlIudW5leHBlY3RlZFF1ZXN0aW9uTWFya0luc3RlYWRPZlRhZ05hbWUpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jcmVhdGVDb21tZW50VG9rZW4oMSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5CT0dVU19DT01NRU5UO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zdGF0ZUJvZ3VzQ29tbWVudChjcCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5FT0Y6IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZXJyKGVycm9yX2NvZGVzX2pzXzEuRVJSLmVvZkJlZm9yZVRhZ05hbWUpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9lbWl0Q2hhcnMoJzwnKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZW1pdEVPRlRva2VuKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2VycihlcnJvcl9jb2Rlc19qc18xLkVSUi5pbnZhbGlkRmlyc3RDaGFyYWN0ZXJPZlRhZ05hbWUpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9lbWl0Q2hhcnMoJzwnKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLkRBVEE7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3N0YXRlRGF0YShjcCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgIH1cbiAgICAvLyBFbmQgdGFnIG9wZW4gc3RhdGVcbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIF9zdGF0ZUVuZFRhZ09wZW4oY3ApIHtcbiAgICAgICAgaWYgKGlzQXNjaWlMZXR0ZXIoY3ApKSB7XG4gICAgICAgICAgICB0aGlzLl9jcmVhdGVFbmRUYWdUb2tlbigpO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLlRBR19OQU1FO1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVUYWdOYW1lKGNwKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICBzd2l0Y2ggKGNwKSB7XG4gICAgICAgICAgICAgICAgY2FzZSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuR1JFQVRFUl9USEFOX1NJR046IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZXJyKGVycm9yX2NvZGVzX2pzXzEuRVJSLm1pc3NpbmdFbmRUYWdOYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLkRBVEE7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5FT0Y6IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZXJyKGVycm9yX2NvZGVzX2pzXzEuRVJSLmVvZkJlZm9yZVRhZ05hbWUpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9lbWl0Q2hhcnMoJzwvJyk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2VtaXRFT0ZUb2tlbigpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9lcnIoZXJyb3JfY29kZXNfanNfMS5FUlIuaW52YWxpZEZpcnN0Q2hhcmFjdGVyT2ZUYWdOYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY3JlYXRlQ29tbWVudFRva2VuKDIpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuQk9HVVNfQ09NTUVOVDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3RhdGVCb2d1c0NvbW1lbnQoY3ApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICB9XG4gICAgLy8gVGFnIG5hbWUgc3RhdGVcbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIF9zdGF0ZVRhZ05hbWUoY3ApIHtcbiAgICAgICAgY29uc3QgdG9rZW4gPSB0aGlzLmN1cnJlbnRUb2tlbjtcbiAgICAgICAgc3dpdGNoIChjcCkge1xuICAgICAgICAgICAgY2FzZSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuU1BBQ0U6XG4gICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5MSU5FX0ZFRUQ6XG4gICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5UQUJVTEFUSU9OOlxuICAgICAgICAgICAgY2FzZSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuRk9STV9GRUVEOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLkJFRk9SRV9BVFRSSUJVVEVfTkFNRTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLlNPTElEVVM6IHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuU0VMRl9DTE9TSU5HX1NUQVJUX1RBRztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLkdSRUFURVJfVEhBTl9TSUdOOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLkRBVEE7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0Q3VycmVudFRhZ1Rva2VuKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5OVUxMOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZXJyKGVycm9yX2NvZGVzX2pzXzEuRVJSLnVuZXhwZWN0ZWROdWxsQ2hhcmFjdGVyKTtcbiAgICAgICAgICAgICAgICB0b2tlbi50YWdOYW1lICs9IHVuaWNvZGVfanNfMS5SRVBMQUNFTUVOVF9DSEFSQUNURVI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5FT0Y6IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9lcnIoZXJyb3JfY29kZXNfanNfMS5FUlIuZW9mSW5UYWcpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2VtaXRFT0ZUb2tlbigpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgICAgIHRva2VuLnRhZ05hbWUgKz0gU3RyaW5nLmZyb21Db2RlUG9pbnQoaXNBc2NpaVVwcGVyKGNwKSA/IHRvQXNjaWlMb3dlcihjcCkgOiBjcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gUkNEQVRBIGxlc3MtdGhhbiBzaWduIHN0YXRlXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBfc3RhdGVSY2RhdGFMZXNzVGhhblNpZ24oY3ApIHtcbiAgICAgICAgaWYgKGNwID09PSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuU09MSURVUykge1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLlJDREFUQV9FTkRfVEFHX09QRU47XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9lbWl0Q2hhcnMoJzwnKTtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5SQ0RBVEE7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZVJjZGF0YShjcCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gUkNEQVRBIGVuZCB0YWcgb3BlbiBzdGF0ZVxuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgX3N0YXRlUmNkYXRhRW5kVGFnT3BlbihjcCkge1xuICAgICAgICBpZiAoaXNBc2NpaUxldHRlcihjcCkpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5SQ0RBVEFfRU5EX1RBR19OQU1FO1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVSY2RhdGFFbmRUYWdOYW1lKGNwKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2VtaXRDaGFycygnPC8nKTtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5SQ0RBVEE7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZVJjZGF0YShjcCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaGFuZGxlU3BlY2lhbEVuZFRhZyhfY3ApIHtcbiAgICAgICAgaWYgKCF0aGlzLnByZXByb2Nlc3Nvci5zdGFydHNXaXRoKHRoaXMubGFzdFN0YXJ0VGFnTmFtZSwgZmFsc2UpKSB7XG4gICAgICAgICAgICByZXR1cm4gIXRoaXMuX2Vuc3VyZUhpYmVybmF0aW9uKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fY3JlYXRlRW5kVGFnVG9rZW4oKTtcbiAgICAgICAgY29uc3QgdG9rZW4gPSB0aGlzLmN1cnJlbnRUb2tlbjtcbiAgICAgICAgdG9rZW4udGFnTmFtZSA9IHRoaXMubGFzdFN0YXJ0VGFnTmFtZTtcbiAgICAgICAgY29uc3QgY3AgPSB0aGlzLnByZXByb2Nlc3Nvci5wZWVrKHRoaXMubGFzdFN0YXJ0VGFnTmFtZS5sZW5ndGgpO1xuICAgICAgICBzd2l0Y2ggKGNwKSB7XG4gICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5TUEFDRTpcbiAgICAgICAgICAgIGNhc2UgdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLkxJTkVfRkVFRDpcbiAgICAgICAgICAgIGNhc2UgdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLlRBQlVMQVRJT046XG4gICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5GT1JNX0ZFRUQ6IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9hZHZhbmNlQnkodGhpcy5sYXN0U3RhcnRUYWdOYW1lLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLkJFRk9SRV9BVFRSSUJVVEVfTkFNRTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5TT0xJRFVTOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fYWR2YW5jZUJ5KHRoaXMubGFzdFN0YXJ0VGFnTmFtZS5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5TRUxGX0NMT1NJTkdfU1RBUlRfVEFHO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLkdSRUFURVJfVEhBTl9TSUdOOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fYWR2YW5jZUJ5KHRoaXMubGFzdFN0YXJ0VGFnTmFtZS5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdEN1cnJlbnRUYWdUb2tlbigpO1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5EQVRBO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gIXRoaXMuX2Vuc3VyZUhpYmVybmF0aW9uKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gUkNEQVRBIGVuZCB0YWcgbmFtZSBzdGF0ZVxuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgX3N0YXRlUmNkYXRhRW5kVGFnTmFtZShjcCkge1xuICAgICAgICBpZiAodGhpcy5oYW5kbGVTcGVjaWFsRW5kVGFnKGNwKSkge1xuICAgICAgICAgICAgdGhpcy5fZW1pdENoYXJzKCc8LycpO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLlJDREFUQTtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlUmNkYXRhKGNwKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBSQVdURVhUIGxlc3MtdGhhbiBzaWduIHN0YXRlXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBfc3RhdGVSYXd0ZXh0TGVzc1RoYW5TaWduKGNwKSB7XG4gICAgICAgIGlmIChjcCA9PT0gdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLlNPTElEVVMpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5SQVdURVhUX0VORF9UQUdfT1BFTjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2VtaXRDaGFycygnPCcpO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLlJBV1RFWFQ7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZVJhd3RleHQoY3ApO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIFJBV1RFWFQgZW5kIHRhZyBvcGVuIHN0YXRlXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBfc3RhdGVSYXd0ZXh0RW5kVGFnT3BlbihjcCkge1xuICAgICAgICBpZiAoaXNBc2NpaUxldHRlcihjcCkpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5SQVdURVhUX0VORF9UQUdfTkFNRTtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlUmF3dGV4dEVuZFRhZ05hbWUoY3ApO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fZW1pdENoYXJzKCc8LycpO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLlJBV1RFWFQ7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZVJhd3RleHQoY3ApO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIFJBV1RFWFQgZW5kIHRhZyBuYW1lIHN0YXRlXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBfc3RhdGVSYXd0ZXh0RW5kVGFnTmFtZShjcCkge1xuICAgICAgICBpZiAodGhpcy5oYW5kbGVTcGVjaWFsRW5kVGFnKGNwKSkge1xuICAgICAgICAgICAgdGhpcy5fZW1pdENoYXJzKCc8LycpO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLlJBV1RFWFQ7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZVJhd3RleHQoY3ApO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIFNjcmlwdCBkYXRhIGxlc3MtdGhhbiBzaWduIHN0YXRlXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBfc3RhdGVTY3JpcHREYXRhTGVzc1RoYW5TaWduKGNwKSB7XG4gICAgICAgIHN3aXRjaCAoY3ApIHtcbiAgICAgICAgICAgIGNhc2UgdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLlNPTElEVVM6IHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuU0NSSVBUX0RBVEFfRU5EX1RBR19PUEVOO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuRVhDTEFNQVRJT05fTUFSSzoge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5TQ1JJUFRfREFUQV9FU0NBUEVfU1RBUlQ7XG4gICAgICAgICAgICAgICAgdGhpcy5fZW1pdENoYXJzKCc8IScpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgICAgIHRoaXMuX2VtaXRDaGFycygnPCcpO1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5TQ1JJUFRfREFUQTtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGF0ZVNjcmlwdERhdGEoY3ApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8vIFNjcmlwdCBkYXRhIGVuZCB0YWcgb3BlbiBzdGF0ZVxuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgX3N0YXRlU2NyaXB0RGF0YUVuZFRhZ09wZW4oY3ApIHtcbiAgICAgICAgaWYgKGlzQXNjaWlMZXR0ZXIoY3ApKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuU0NSSVBUX0RBVEFfRU5EX1RBR19OQU1FO1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVTY3JpcHREYXRhRW5kVGFnTmFtZShjcCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9lbWl0Q2hhcnMoJzwvJyk7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuU0NSSVBUX0RBVEE7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZVNjcmlwdERhdGEoY3ApO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIFNjcmlwdCBkYXRhIGVuZCB0YWcgbmFtZSBzdGF0ZVxuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgX3N0YXRlU2NyaXB0RGF0YUVuZFRhZ05hbWUoY3ApIHtcbiAgICAgICAgaWYgKHRoaXMuaGFuZGxlU3BlY2lhbEVuZFRhZyhjcCkpIHtcbiAgICAgICAgICAgIHRoaXMuX2VtaXRDaGFycygnPC8nKTtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5TQ1JJUFRfREFUQTtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlU2NyaXB0RGF0YShjcCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gU2NyaXB0IGRhdGEgZXNjYXBlIHN0YXJ0IHN0YXRlXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBfc3RhdGVTY3JpcHREYXRhRXNjYXBlU3RhcnQoY3ApIHtcbiAgICAgICAgaWYgKGNwID09PSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuSFlQSEVOX01JTlVTKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuU0NSSVBUX0RBVEFfRVNDQVBFX1NUQVJUX0RBU0g7XG4gICAgICAgICAgICB0aGlzLl9lbWl0Q2hhcnMoJy0nKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5TQ1JJUFRfREFUQTtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlU2NyaXB0RGF0YShjcCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gU2NyaXB0IGRhdGEgZXNjYXBlIHN0YXJ0IGRhc2ggc3RhdGVcbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIF9zdGF0ZVNjcmlwdERhdGFFc2NhcGVTdGFydERhc2goY3ApIHtcbiAgICAgICAgaWYgKGNwID09PSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuSFlQSEVOX01JTlVTKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuU0NSSVBUX0RBVEFfRVNDQVBFRF9EQVNIX0RBU0g7XG4gICAgICAgICAgICB0aGlzLl9lbWl0Q2hhcnMoJy0nKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5TQ1JJUFRfREFUQTtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlU2NyaXB0RGF0YShjcCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gU2NyaXB0IGRhdGEgZXNjYXBlZCBzdGF0ZVxuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgX3N0YXRlU2NyaXB0RGF0YUVzY2FwZWQoY3ApIHtcbiAgICAgICAgc3dpdGNoIChjcCkge1xuICAgICAgICAgICAgY2FzZSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuSFlQSEVOX01JTlVTOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLlNDUklQVF9EQVRBX0VTQ0FQRURfREFTSDtcbiAgICAgICAgICAgICAgICB0aGlzLl9lbWl0Q2hhcnMoJy0nKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLkxFU1NfVEhBTl9TSUdOOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLlNDUklQVF9EQVRBX0VTQ0FQRURfTEVTU19USEFOX1NJR047XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5OVUxMOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZXJyKGVycm9yX2NvZGVzX2pzXzEuRVJSLnVuZXhwZWN0ZWROdWxsQ2hhcmFjdGVyKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9lbWl0Q2hhcnModW5pY29kZV9qc18xLlJFUExBQ0VNRU5UX0NIQVJBQ1RFUik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5FT0Y6IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9lcnIoZXJyb3JfY29kZXNfanNfMS5FUlIuZW9mSW5TY3JpcHRIdG1sQ29tbWVudExpa2VUZXh0KTtcbiAgICAgICAgICAgICAgICB0aGlzLl9lbWl0RU9GVG9rZW4oKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9lbWl0Q29kZVBvaW50KGNwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBTY3JpcHQgZGF0YSBlc2NhcGVkIGRhc2ggc3RhdGVcbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIF9zdGF0ZVNjcmlwdERhdGFFc2NhcGVkRGFzaChjcCkge1xuICAgICAgICBzd2l0Y2ggKGNwKSB7XG4gICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5IWVBIRU5fTUlOVVM6IHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuU0NSSVBUX0RBVEFfRVNDQVBFRF9EQVNIX0RBU0g7XG4gICAgICAgICAgICAgICAgdGhpcy5fZW1pdENoYXJzKCctJyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5MRVNTX1RIQU5fU0lHTjoge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5TQ1JJUFRfREFUQV9FU0NBUEVEX0xFU1NfVEhBTl9TSUdOO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuTlVMTDoge1xuICAgICAgICAgICAgICAgIHRoaXMuX2VycihlcnJvcl9jb2Rlc19qc18xLkVSUi51bmV4cGVjdGVkTnVsbENoYXJhY3Rlcik7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLlNDUklQVF9EQVRBX0VTQ0FQRUQ7XG4gICAgICAgICAgICAgICAgdGhpcy5fZW1pdENoYXJzKHVuaWNvZGVfanNfMS5SRVBMQUNFTUVOVF9DSEFSQUNURVIpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuRU9GOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZXJyKGVycm9yX2NvZGVzX2pzXzEuRVJSLmVvZkluU2NyaXB0SHRtbENvbW1lbnRMaWtlVGV4dCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fZW1pdEVPRlRva2VuKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLlNDUklQVF9EQVRBX0VTQ0FQRUQ7XG4gICAgICAgICAgICAgICAgdGhpcy5fZW1pdENvZGVQb2ludChjcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gU2NyaXB0IGRhdGEgZXNjYXBlZCBkYXNoIGRhc2ggc3RhdGVcbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIF9zdGF0ZVNjcmlwdERhdGFFc2NhcGVkRGFzaERhc2goY3ApIHtcbiAgICAgICAgc3dpdGNoIChjcCkge1xuICAgICAgICAgICAgY2FzZSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuSFlQSEVOX01JTlVTOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZW1pdENoYXJzKCctJyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5MRVNTX1RIQU5fU0lHTjoge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5TQ1JJUFRfREFUQV9FU0NBUEVEX0xFU1NfVEhBTl9TSUdOO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuR1JFQVRFUl9USEFOX1NJR046IHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuU0NSSVBUX0RBVEE7XG4gICAgICAgICAgICAgICAgdGhpcy5fZW1pdENoYXJzKCc+Jyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5OVUxMOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZXJyKGVycm9yX2NvZGVzX2pzXzEuRVJSLnVuZXhwZWN0ZWROdWxsQ2hhcmFjdGVyKTtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuU0NSSVBUX0RBVEFfRVNDQVBFRDtcbiAgICAgICAgICAgICAgICB0aGlzLl9lbWl0Q2hhcnModW5pY29kZV9qc18xLlJFUExBQ0VNRU5UX0NIQVJBQ1RFUik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5FT0Y6IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9lcnIoZXJyb3JfY29kZXNfanNfMS5FUlIuZW9mSW5TY3JpcHRIdG1sQ29tbWVudExpa2VUZXh0KTtcbiAgICAgICAgICAgICAgICB0aGlzLl9lbWl0RU9GVG9rZW4oKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuU0NSSVBUX0RBVEFfRVNDQVBFRDtcbiAgICAgICAgICAgICAgICB0aGlzLl9lbWl0Q29kZVBvaW50KGNwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBTY3JpcHQgZGF0YSBlc2NhcGVkIGxlc3MtdGhhbiBzaWduIHN0YXRlXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBfc3RhdGVTY3JpcHREYXRhRXNjYXBlZExlc3NUaGFuU2lnbihjcCkge1xuICAgICAgICBpZiAoY3AgPT09IHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5TT0xJRFVTKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuU0NSSVBUX0RBVEFfRVNDQVBFRF9FTkRfVEFHX09QRU47XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNBc2NpaUxldHRlcihjcCkpIHtcbiAgICAgICAgICAgIHRoaXMuX2VtaXRDaGFycygnPCcpO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLlNDUklQVF9EQVRBX0RPVUJMRV9FU0NBUEVfU1RBUlQ7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZVNjcmlwdERhdGFEb3VibGVFc2NhcGVTdGFydChjcCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9lbWl0Q2hhcnMoJzwnKTtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5TQ1JJUFRfREFUQV9FU0NBUEVEO1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVTY3JpcHREYXRhRXNjYXBlZChjcCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gU2NyaXB0IGRhdGEgZXNjYXBlZCBlbmQgdGFnIG9wZW4gc3RhdGVcbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIF9zdGF0ZVNjcmlwdERhdGFFc2NhcGVkRW5kVGFnT3BlbihjcCkge1xuICAgICAgICBpZiAoaXNBc2NpaUxldHRlcihjcCkpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5TQ1JJUFRfREFUQV9FU0NBUEVEX0VORF9UQUdfTkFNRTtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlU2NyaXB0RGF0YUVzY2FwZWRFbmRUYWdOYW1lKGNwKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2VtaXRDaGFycygnPC8nKTtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5TQ1JJUFRfREFUQV9FU0NBUEVEO1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVTY3JpcHREYXRhRXNjYXBlZChjcCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gU2NyaXB0IGRhdGEgZXNjYXBlZCBlbmQgdGFnIG5hbWUgc3RhdGVcbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIF9zdGF0ZVNjcmlwdERhdGFFc2NhcGVkRW5kVGFnTmFtZShjcCkge1xuICAgICAgICBpZiAodGhpcy5oYW5kbGVTcGVjaWFsRW5kVGFnKGNwKSkge1xuICAgICAgICAgICAgdGhpcy5fZW1pdENoYXJzKCc8LycpO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLlNDUklQVF9EQVRBX0VTQ0FQRUQ7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZVNjcmlwdERhdGFFc2NhcGVkKGNwKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBTY3JpcHQgZGF0YSBkb3VibGUgZXNjYXBlIHN0YXJ0IHN0YXRlXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBfc3RhdGVTY3JpcHREYXRhRG91YmxlRXNjYXBlU3RhcnQoY3ApIHtcbiAgICAgICAgaWYgKHRoaXMucHJlcHJvY2Vzc29yLnN0YXJ0c1dpdGgodW5pY29kZV9qc18xLlNFUVVFTkNFUy5TQ1JJUFQsIGZhbHNlKSAmJlxuICAgICAgICAgICAgaXNTY3JpcHREYXRhRG91YmxlRXNjYXBlU2VxdWVuY2VFbmQodGhpcy5wcmVwcm9jZXNzb3IucGVlayh1bmljb2RlX2pzXzEuU0VRVUVOQ0VTLlNDUklQVC5sZW5ndGgpKSkge1xuICAgICAgICAgICAgdGhpcy5fZW1pdENvZGVQb2ludChjcCk7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHVuaWNvZGVfanNfMS5TRVFVRU5DRVMuU0NSSVBULmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZW1pdENvZGVQb2ludCh0aGlzLl9jb25zdW1lKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLlNDUklQVF9EQVRBX0RPVUJMRV9FU0NBUEVEO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCF0aGlzLl9lbnN1cmVIaWJlcm5hdGlvbigpKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuU0NSSVBUX0RBVEFfRVNDQVBFRDtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlU2NyaXB0RGF0YUVzY2FwZWQoY3ApO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIFNjcmlwdCBkYXRhIGRvdWJsZSBlc2NhcGVkIHN0YXRlXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBfc3RhdGVTY3JpcHREYXRhRG91YmxlRXNjYXBlZChjcCkge1xuICAgICAgICBzd2l0Y2ggKGNwKSB7XG4gICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5IWVBIRU5fTUlOVVM6IHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuU0NSSVBUX0RBVEFfRE9VQkxFX0VTQ0FQRURfREFTSDtcbiAgICAgICAgICAgICAgICB0aGlzLl9lbWl0Q2hhcnMoJy0nKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLkxFU1NfVEhBTl9TSUdOOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLlNDUklQVF9EQVRBX0RPVUJMRV9FU0NBUEVEX0xFU1NfVEhBTl9TSUdOO1xuICAgICAgICAgICAgICAgIHRoaXMuX2VtaXRDaGFycygnPCcpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuTlVMTDoge1xuICAgICAgICAgICAgICAgIHRoaXMuX2VycihlcnJvcl9jb2Rlc19qc18xLkVSUi51bmV4cGVjdGVkTnVsbENoYXJhY3Rlcik7XG4gICAgICAgICAgICAgICAgdGhpcy5fZW1pdENoYXJzKHVuaWNvZGVfanNfMS5SRVBMQUNFTUVOVF9DSEFSQUNURVIpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuRU9GOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZXJyKGVycm9yX2NvZGVzX2pzXzEuRVJSLmVvZkluU2NyaXB0SHRtbENvbW1lbnRMaWtlVGV4dCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fZW1pdEVPRlRva2VuKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZW1pdENvZGVQb2ludChjcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gU2NyaXB0IGRhdGEgZG91YmxlIGVzY2FwZWQgZGFzaCBzdGF0ZVxuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgX3N0YXRlU2NyaXB0RGF0YURvdWJsZUVzY2FwZWREYXNoKGNwKSB7XG4gICAgICAgIHN3aXRjaCAoY3ApIHtcbiAgICAgICAgICAgIGNhc2UgdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLkhZUEhFTl9NSU5VUzoge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5TQ1JJUFRfREFUQV9ET1VCTEVfRVNDQVBFRF9EQVNIX0RBU0g7XG4gICAgICAgICAgICAgICAgdGhpcy5fZW1pdENoYXJzKCctJyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5MRVNTX1RIQU5fU0lHTjoge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5TQ1JJUFRfREFUQV9ET1VCTEVfRVNDQVBFRF9MRVNTX1RIQU5fU0lHTjtcbiAgICAgICAgICAgICAgICB0aGlzLl9lbWl0Q2hhcnMoJzwnKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLk5VTEw6IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9lcnIoZXJyb3JfY29kZXNfanNfMS5FUlIudW5leHBlY3RlZE51bGxDaGFyYWN0ZXIpO1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5TQ1JJUFRfREFUQV9ET1VCTEVfRVNDQVBFRDtcbiAgICAgICAgICAgICAgICB0aGlzLl9lbWl0Q2hhcnModW5pY29kZV9qc18xLlJFUExBQ0VNRU5UX0NIQVJBQ1RFUik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5FT0Y6IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9lcnIoZXJyb3JfY29kZXNfanNfMS5FUlIuZW9mSW5TY3JpcHRIdG1sQ29tbWVudExpa2VUZXh0KTtcbiAgICAgICAgICAgICAgICB0aGlzLl9lbWl0RU9GVG9rZW4oKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuU0NSSVBUX0RBVEFfRE9VQkxFX0VTQ0FQRUQ7XG4gICAgICAgICAgICAgICAgdGhpcy5fZW1pdENvZGVQb2ludChjcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gU2NyaXB0IGRhdGEgZG91YmxlIGVzY2FwZWQgZGFzaCBkYXNoIHN0YXRlXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBfc3RhdGVTY3JpcHREYXRhRG91YmxlRXNjYXBlZERhc2hEYXNoKGNwKSB7XG4gICAgICAgIHN3aXRjaCAoY3ApIHtcbiAgICAgICAgICAgIGNhc2UgdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLkhZUEhFTl9NSU5VUzoge1xuICAgICAgICAgICAgICAgIHRoaXMuX2VtaXRDaGFycygnLScpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuTEVTU19USEFOX1NJR046IHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuU0NSSVBUX0RBVEFfRE9VQkxFX0VTQ0FQRURfTEVTU19USEFOX1NJR047XG4gICAgICAgICAgICAgICAgdGhpcy5fZW1pdENoYXJzKCc8Jyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5HUkVBVEVSX1RIQU5fU0lHTjoge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5TQ1JJUFRfREFUQTtcbiAgICAgICAgICAgICAgICB0aGlzLl9lbWl0Q2hhcnMoJz4nKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLk5VTEw6IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9lcnIoZXJyb3JfY29kZXNfanNfMS5FUlIudW5leHBlY3RlZE51bGxDaGFyYWN0ZXIpO1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5TQ1JJUFRfREFUQV9ET1VCTEVfRVNDQVBFRDtcbiAgICAgICAgICAgICAgICB0aGlzLl9lbWl0Q2hhcnModW5pY29kZV9qc18xLlJFUExBQ0VNRU5UX0NIQVJBQ1RFUik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5FT0Y6IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9lcnIoZXJyb3JfY29kZXNfanNfMS5FUlIuZW9mSW5TY3JpcHRIdG1sQ29tbWVudExpa2VUZXh0KTtcbiAgICAgICAgICAgICAgICB0aGlzLl9lbWl0RU9GVG9rZW4oKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuU0NSSVBUX0RBVEFfRE9VQkxFX0VTQ0FQRUQ7XG4gICAgICAgICAgICAgICAgdGhpcy5fZW1pdENvZGVQb2ludChjcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gU2NyaXB0IGRhdGEgZG91YmxlIGVzY2FwZWQgbGVzcy10aGFuIHNpZ24gc3RhdGVcbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIF9zdGF0ZVNjcmlwdERhdGFEb3VibGVFc2NhcGVkTGVzc1RoYW5TaWduKGNwKSB7XG4gICAgICAgIGlmIChjcCA9PT0gdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLlNPTElEVVMpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5TQ1JJUFRfREFUQV9ET1VCTEVfRVNDQVBFX0VORDtcbiAgICAgICAgICAgIHRoaXMuX2VtaXRDaGFycygnLycpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLlNDUklQVF9EQVRBX0RPVUJMRV9FU0NBUEVEO1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVTY3JpcHREYXRhRG91YmxlRXNjYXBlZChjcCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gU2NyaXB0IGRhdGEgZG91YmxlIGVzY2FwZSBlbmQgc3RhdGVcbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIF9zdGF0ZVNjcmlwdERhdGFEb3VibGVFc2NhcGVFbmQoY3ApIHtcbiAgICAgICAgaWYgKHRoaXMucHJlcHJvY2Vzc29yLnN0YXJ0c1dpdGgodW5pY29kZV9qc18xLlNFUVVFTkNFUy5TQ1JJUFQsIGZhbHNlKSAmJlxuICAgICAgICAgICAgaXNTY3JpcHREYXRhRG91YmxlRXNjYXBlU2VxdWVuY2VFbmQodGhpcy5wcmVwcm9jZXNzb3IucGVlayh1bmljb2RlX2pzXzEuU0VRVUVOQ0VTLlNDUklQVC5sZW5ndGgpKSkge1xuICAgICAgICAgICAgdGhpcy5fZW1pdENvZGVQb2ludChjcCk7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHVuaWNvZGVfanNfMS5TRVFVRU5DRVMuU0NSSVBULmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZW1pdENvZGVQb2ludCh0aGlzLl9jb25zdW1lKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLlNDUklQVF9EQVRBX0VTQ0FQRUQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIXRoaXMuX2Vuc3VyZUhpYmVybmF0aW9uKCkpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5TQ1JJUFRfREFUQV9ET1VCTEVfRVNDQVBFRDtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlU2NyaXB0RGF0YURvdWJsZUVzY2FwZWQoY3ApO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIEJlZm9yZSBhdHRyaWJ1dGUgbmFtZSBzdGF0ZVxuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgX3N0YXRlQmVmb3JlQXR0cmlidXRlTmFtZShjcCkge1xuICAgICAgICBzd2l0Y2ggKGNwKSB7XG4gICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5TUEFDRTpcbiAgICAgICAgICAgIGNhc2UgdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLkxJTkVfRkVFRDpcbiAgICAgICAgICAgIGNhc2UgdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLlRBQlVMQVRJT046XG4gICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5GT1JNX0ZFRUQ6IHtcbiAgICAgICAgICAgICAgICAvLyBJZ25vcmUgd2hpdGVzcGFjZVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuU09MSURVUzpcbiAgICAgICAgICAgIGNhc2UgdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLkdSRUFURVJfVEhBTl9TSUdOOlxuICAgICAgICAgICAgY2FzZSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuRU9GOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLkFGVEVSX0FUVFJJQlVURV9OQU1FO1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0YXRlQWZ0ZXJBdHRyaWJ1dGVOYW1lKGNwKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLkVRVUFMU19TSUdOOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZXJyKGVycm9yX2NvZGVzX2pzXzEuRVJSLnVuZXhwZWN0ZWRFcXVhbHNTaWduQmVmb3JlQXR0cmlidXRlTmFtZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fY3JlYXRlQXR0cignPScpO1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5BVFRSSUJVVEVfTkFNRTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jcmVhdGVBdHRyKCcnKTtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuQVRUUklCVVRFX05BTUU7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhdGVBdHRyaWJ1dGVOYW1lKGNwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBBdHRyaWJ1dGUgbmFtZSBzdGF0ZVxuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgX3N0YXRlQXR0cmlidXRlTmFtZShjcCkge1xuICAgICAgICBzd2l0Y2ggKGNwKSB7XG4gICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5TUEFDRTpcbiAgICAgICAgICAgIGNhc2UgdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLkxJTkVfRkVFRDpcbiAgICAgICAgICAgIGNhc2UgdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLlRBQlVMQVRJT046XG4gICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5GT1JNX0ZFRUQ6XG4gICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5TT0xJRFVTOlxuICAgICAgICAgICAgY2FzZSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuR1JFQVRFUl9USEFOX1NJR046XG4gICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5FT0Y6IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9sZWF2ZUF0dHJOYW1lKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLkFGVEVSX0FUVFJJQlVURV9OQU1FO1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0YXRlQWZ0ZXJBdHRyaWJ1dGVOYW1lKGNwKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLkVRVUFMU19TSUdOOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbGVhdmVBdHRyTmFtZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5CRUZPUkVfQVRUUklCVVRFX1ZBTFVFO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuUVVPVEFUSU9OX01BUks6XG4gICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5BUE9TVFJPUEhFOlxuICAgICAgICAgICAgY2FzZSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuTEVTU19USEFOX1NJR046IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9lcnIoZXJyb3JfY29kZXNfanNfMS5FUlIudW5leHBlY3RlZENoYXJhY3RlckluQXR0cmlidXRlTmFtZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50QXR0ci5uYW1lICs9IFN0cmluZy5mcm9tQ29kZVBvaW50KGNwKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLk5VTEw6IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9lcnIoZXJyb3JfY29kZXNfanNfMS5FUlIudW5leHBlY3RlZE51bGxDaGFyYWN0ZXIpO1xuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudEF0dHIubmFtZSArPSB1bmljb2RlX2pzXzEuUkVQTEFDRU1FTlRfQ0hBUkFDVEVSO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudEF0dHIubmFtZSArPSBTdHJpbmcuZnJvbUNvZGVQb2ludChpc0FzY2lpVXBwZXIoY3ApID8gdG9Bc2NpaUxvd2VyKGNwKSA6IGNwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBBZnRlciBhdHRyaWJ1dGUgbmFtZSBzdGF0ZVxuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgX3N0YXRlQWZ0ZXJBdHRyaWJ1dGVOYW1lKGNwKSB7XG4gICAgICAgIHN3aXRjaCAoY3ApIHtcbiAgICAgICAgICAgIGNhc2UgdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLlNQQUNFOlxuICAgICAgICAgICAgY2FzZSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuTElORV9GRUVEOlxuICAgICAgICAgICAgY2FzZSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuVEFCVUxBVElPTjpcbiAgICAgICAgICAgIGNhc2UgdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLkZPUk1fRkVFRDoge1xuICAgICAgICAgICAgICAgIC8vIElnbm9yZSB3aGl0ZXNwYWNlXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5TT0xJRFVTOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLlNFTEZfQ0xPU0lOR19TVEFSVF9UQUc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5FUVVBTFNfU0lHTjoge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5CRUZPUkVfQVRUUklCVVRFX1ZBTFVFO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuR1JFQVRFUl9USEFOX1NJR046IHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuREFUQTtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXRDdXJyZW50VGFnVG9rZW4oKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLkVPRjoge1xuICAgICAgICAgICAgICAgIHRoaXMuX2VycihlcnJvcl9jb2Rlc19qc18xLkVSUi5lb2ZJblRhZyk7XG4gICAgICAgICAgICAgICAgdGhpcy5fZW1pdEVPRlRva2VuKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY3JlYXRlQXR0cignJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLkFUVFJJQlVURV9OQU1FO1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0YXRlQXR0cmlidXRlTmFtZShjcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gQmVmb3JlIGF0dHJpYnV0ZSB2YWx1ZSBzdGF0ZVxuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgX3N0YXRlQmVmb3JlQXR0cmlidXRlVmFsdWUoY3ApIHtcbiAgICAgICAgc3dpdGNoIChjcCkge1xuICAgICAgICAgICAgY2FzZSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuU1BBQ0U6XG4gICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5MSU5FX0ZFRUQ6XG4gICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5UQUJVTEFUSU9OOlxuICAgICAgICAgICAgY2FzZSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuRk9STV9GRUVEOiB7XG4gICAgICAgICAgICAgICAgLy8gSWdub3JlIHdoaXRlc3BhY2VcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLlFVT1RBVElPTl9NQVJLOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLkFUVFJJQlVURV9WQUxVRV9ET1VCTEVfUVVPVEVEO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuQVBPU1RST1BIRToge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5BVFRSSUJVVEVfVkFMVUVfU0lOR0xFX1FVT1RFRDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLkdSRUFURVJfVEhBTl9TSUdOOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZXJyKGVycm9yX2NvZGVzX2pzXzEuRVJSLm1pc3NpbmdBdHRyaWJ1dGVWYWx1ZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLkRBVEE7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0Q3VycmVudFRhZ1Rva2VuKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLkFUVFJJQlVURV9WQUxVRV9VTlFVT1RFRDtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGF0ZUF0dHJpYnV0ZVZhbHVlVW5xdW90ZWQoY3ApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8vIEF0dHJpYnV0ZSB2YWx1ZSAoZG91YmxlLXF1b3RlZCkgc3RhdGVcbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIF9zdGF0ZUF0dHJpYnV0ZVZhbHVlRG91YmxlUXVvdGVkKGNwKSB7XG4gICAgICAgIHN3aXRjaCAoY3ApIHtcbiAgICAgICAgICAgIGNhc2UgdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLlFVT1RBVElPTl9NQVJLOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLkFGVEVSX0FUVFJJQlVURV9WQUxVRV9RVU9URUQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5BTVBFUlNBTkQ6IHtcbiAgICAgICAgICAgICAgICB0aGlzLnJldHVyblN0YXRlID0gU3RhdGUuQVRUUklCVVRFX1ZBTFVFX0RPVUJMRV9RVU9URUQ7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLkNIQVJBQ1RFUl9SRUZFUkVOQ0U7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5OVUxMOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZXJyKGVycm9yX2NvZGVzX2pzXzEuRVJSLnVuZXhwZWN0ZWROdWxsQ2hhcmFjdGVyKTtcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRBdHRyLnZhbHVlICs9IHVuaWNvZGVfanNfMS5SRVBMQUNFTUVOVF9DSEFSQUNURVI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5FT0Y6IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9lcnIoZXJyb3JfY29kZXNfanNfMS5FUlIuZW9mSW5UYWcpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2VtaXRFT0ZUb2tlbigpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudEF0dHIudmFsdWUgKz0gU3RyaW5nLmZyb21Db2RlUG9pbnQoY3ApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8vIEF0dHJpYnV0ZSB2YWx1ZSAoc2luZ2xlLXF1b3RlZCkgc3RhdGVcbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIF9zdGF0ZUF0dHJpYnV0ZVZhbHVlU2luZ2xlUXVvdGVkKGNwKSB7XG4gICAgICAgIHN3aXRjaCAoY3ApIHtcbiAgICAgICAgICAgIGNhc2UgdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLkFQT1NUUk9QSEU6IHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuQUZURVJfQVRUUklCVVRFX1ZBTFVFX1FVT1RFRDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLkFNUEVSU0FORDoge1xuICAgICAgICAgICAgICAgIHRoaXMucmV0dXJuU3RhdGUgPSBTdGF0ZS5BVFRSSUJVVEVfVkFMVUVfU0lOR0xFX1FVT1RFRDtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuQ0hBUkFDVEVSX1JFRkVSRU5DRTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLk5VTEw6IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9lcnIoZXJyb3JfY29kZXNfanNfMS5FUlIudW5leHBlY3RlZE51bGxDaGFyYWN0ZXIpO1xuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudEF0dHIudmFsdWUgKz0gdW5pY29kZV9qc18xLlJFUExBQ0VNRU5UX0NIQVJBQ1RFUjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLkVPRjoge1xuICAgICAgICAgICAgICAgIHRoaXMuX2VycihlcnJvcl9jb2Rlc19qc18xLkVSUi5lb2ZJblRhZyk7XG4gICAgICAgICAgICAgICAgdGhpcy5fZW1pdEVPRlRva2VuKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50QXR0ci52YWx1ZSArPSBTdHJpbmcuZnJvbUNvZGVQb2ludChjcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gQXR0cmlidXRlIHZhbHVlICh1bnF1b3RlZCkgc3RhdGVcbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIF9zdGF0ZUF0dHJpYnV0ZVZhbHVlVW5xdW90ZWQoY3ApIHtcbiAgICAgICAgc3dpdGNoIChjcCkge1xuICAgICAgICAgICAgY2FzZSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuU1BBQ0U6XG4gICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5MSU5FX0ZFRUQ6XG4gICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5UQUJVTEFUSU9OOlxuICAgICAgICAgICAgY2FzZSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuRk9STV9GRUVEOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbGVhdmVBdHRyVmFsdWUoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuQkVGT1JFX0FUVFJJQlVURV9OQU1FO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuQU1QRVJTQU5EOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZXR1cm5TdGF0ZSA9IFN0YXRlLkFUVFJJQlVURV9WQUxVRV9VTlFVT1RFRDtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuQ0hBUkFDVEVSX1JFRkVSRU5DRTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLkdSRUFURVJfVEhBTl9TSUdOOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbGVhdmVBdHRyVmFsdWUoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuREFUQTtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXRDdXJyZW50VGFnVG9rZW4oKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLk5VTEw6IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9lcnIoZXJyb3JfY29kZXNfanNfMS5FUlIudW5leHBlY3RlZE51bGxDaGFyYWN0ZXIpO1xuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudEF0dHIudmFsdWUgKz0gdW5pY29kZV9qc18xLlJFUExBQ0VNRU5UX0NIQVJBQ1RFUjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLlFVT1RBVElPTl9NQVJLOlxuICAgICAgICAgICAgY2FzZSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuQVBPU1RST1BIRTpcbiAgICAgICAgICAgIGNhc2UgdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLkxFU1NfVEhBTl9TSUdOOlxuICAgICAgICAgICAgY2FzZSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuRVFVQUxTX1NJR046XG4gICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5HUkFWRV9BQ0NFTlQ6IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9lcnIoZXJyb3JfY29kZXNfanNfMS5FUlIudW5leHBlY3RlZENoYXJhY3RlckluVW5xdW90ZWRBdHRyaWJ1dGVWYWx1ZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50QXR0ci52YWx1ZSArPSBTdHJpbmcuZnJvbUNvZGVQb2ludChjcCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5FT0Y6IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9lcnIoZXJyb3JfY29kZXNfanNfMS5FUlIuZW9mSW5UYWcpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2VtaXRFT0ZUb2tlbigpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudEF0dHIudmFsdWUgKz0gU3RyaW5nLmZyb21Db2RlUG9pbnQoY3ApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8vIEFmdGVyIGF0dHJpYnV0ZSB2YWx1ZSAocXVvdGVkKSBzdGF0ZVxuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgX3N0YXRlQWZ0ZXJBdHRyaWJ1dGVWYWx1ZVF1b3RlZChjcCkge1xuICAgICAgICBzd2l0Y2ggKGNwKSB7XG4gICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5TUEFDRTpcbiAgICAgICAgICAgIGNhc2UgdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLkxJTkVfRkVFRDpcbiAgICAgICAgICAgIGNhc2UgdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLlRBQlVMQVRJT046XG4gICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5GT1JNX0ZFRUQ6IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9sZWF2ZUF0dHJWYWx1ZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5CRUZPUkVfQVRUUklCVVRFX05BTUU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5TT0xJRFVTOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbGVhdmVBdHRyVmFsdWUoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuU0VMRl9DTE9TSU5HX1NUQVJUX1RBRztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLkdSRUFURVJfVEhBTl9TSUdOOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbGVhdmVBdHRyVmFsdWUoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuREFUQTtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXRDdXJyZW50VGFnVG9rZW4oKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLkVPRjoge1xuICAgICAgICAgICAgICAgIHRoaXMuX2VycihlcnJvcl9jb2Rlc19qc18xLkVSUi5lb2ZJblRhZyk7XG4gICAgICAgICAgICAgICAgdGhpcy5fZW1pdEVPRlRva2VuKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZXJyKGVycm9yX2NvZGVzX2pzXzEuRVJSLm1pc3NpbmdXaGl0ZXNwYWNlQmV0d2VlbkF0dHJpYnV0ZXMpO1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5CRUZPUkVfQVRUUklCVVRFX05BTUU7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhdGVCZWZvcmVBdHRyaWJ1dGVOYW1lKGNwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBTZWxmLWNsb3Npbmcgc3RhcnQgdGFnIHN0YXRlXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBfc3RhdGVTZWxmQ2xvc2luZ1N0YXJ0VGFnKGNwKSB7XG4gICAgICAgIHN3aXRjaCAoY3ApIHtcbiAgICAgICAgICAgIGNhc2UgdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLkdSRUFURVJfVEhBTl9TSUdOOiB7XG4gICAgICAgICAgICAgICAgY29uc3QgdG9rZW4gPSB0aGlzLmN1cnJlbnRUb2tlbjtcbiAgICAgICAgICAgICAgICB0b2tlbi5zZWxmQ2xvc2luZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLkRBVEE7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0Q3VycmVudFRhZ1Rva2VuKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5FT0Y6IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9lcnIoZXJyb3JfY29kZXNfanNfMS5FUlIuZW9mSW5UYWcpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2VtaXRFT0ZUb2tlbigpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgICAgIHRoaXMuX2VycihlcnJvcl9jb2Rlc19qc18xLkVSUi51bmV4cGVjdGVkU29saWR1c0luVGFnKTtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuQkVGT1JFX0FUVFJJQlVURV9OQU1FO1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0YXRlQmVmb3JlQXR0cmlidXRlTmFtZShjcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gQm9ndXMgY29tbWVudCBzdGF0ZVxuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgX3N0YXRlQm9ndXNDb21tZW50KGNwKSB7XG4gICAgICAgIGNvbnN0IHRva2VuID0gdGhpcy5jdXJyZW50VG9rZW47XG4gICAgICAgIHN3aXRjaCAoY3ApIHtcbiAgICAgICAgICAgIGNhc2UgdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLkdSRUFURVJfVEhBTl9TSUdOOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLkRBVEE7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0Q3VycmVudENvbW1lbnQodG9rZW4pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuRU9GOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0Q3VycmVudENvbW1lbnQodG9rZW4pO1xuICAgICAgICAgICAgICAgIHRoaXMuX2VtaXRFT0ZUb2tlbigpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuTlVMTDoge1xuICAgICAgICAgICAgICAgIHRoaXMuX2VycihlcnJvcl9jb2Rlc19qc18xLkVSUi51bmV4cGVjdGVkTnVsbENoYXJhY3Rlcik7XG4gICAgICAgICAgICAgICAgdG9rZW4uZGF0YSArPSB1bmljb2RlX2pzXzEuUkVQTEFDRU1FTlRfQ0hBUkFDVEVSO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgICAgIHRva2VuLmRhdGEgKz0gU3RyaW5nLmZyb21Db2RlUG9pbnQoY3ApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8vIE1hcmt1cCBkZWNsYXJhdGlvbiBvcGVuIHN0YXRlXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBfc3RhdGVNYXJrdXBEZWNsYXJhdGlvbk9wZW4oY3ApIHtcbiAgICAgICAgaWYgKHRoaXMuX2NvbnN1bWVTZXF1ZW5jZUlmTWF0Y2godW5pY29kZV9qc18xLlNFUVVFTkNFUy5EQVNIX0RBU0gsIHRydWUpKSB7XG4gICAgICAgICAgICB0aGlzLl9jcmVhdGVDb21tZW50VG9rZW4odW5pY29kZV9qc18xLlNFUVVFTkNFUy5EQVNIX0RBU0gubGVuZ3RoICsgMSk7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuQ09NTUVOVF9TVEFSVDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLl9jb25zdW1lU2VxdWVuY2VJZk1hdGNoKHVuaWNvZGVfanNfMS5TRVFVRU5DRVMuRE9DVFlQRSwgZmFsc2UpKSB7XG4gICAgICAgICAgICAvLyBOT1RFOiBEb2N0eXBlcyB0b2tlbnMgYXJlIGNyZWF0ZWQgd2l0aG91dCBmaXhlZCBvZmZzZXRzLiBXZSBrZWVwIHRyYWNrIG9mIHRoZSBtb21lbnQgYSBkb2N0eXBlICptaWdodCogc3RhcnQgaGVyZS5cbiAgICAgICAgICAgIHRoaXMuY3VycmVudExvY2F0aW9uID0gdGhpcy5nZXRDdXJyZW50TG9jYXRpb24odW5pY29kZV9qc18xLlNFUVVFTkNFUy5ET0NUWVBFLmxlbmd0aCArIDEpO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLkRPQ1RZUEU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5fY29uc3VtZVNlcXVlbmNlSWZNYXRjaCh1bmljb2RlX2pzXzEuU0VRVUVOQ0VTLkNEQVRBX1NUQVJULCB0cnVlKSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuaW5Gb3JlaWduTm9kZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5DREFUQV9TRUNUSU9OO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZXJyKGVycm9yX2NvZGVzX2pzXzEuRVJSLmNkYXRhSW5IdG1sQ29udGVudCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fY3JlYXRlQ29tbWVudFRva2VuKHVuaWNvZGVfanNfMS5TRVFVRU5DRVMuQ0RBVEFfU1RBUlQubGVuZ3RoICsgMSk7XG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50VG9rZW4uZGF0YSA9ICdbQ0RBVEFbJztcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuQk9HVVNfQ09NTUVOVDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvL05PVEU6IFNlcXVlbmNlIGxvb2t1cHMgY2FuIGJlIGFicnVwdGVkIGJ5IGhpYmVybmF0aW9uLiBJbiB0aGF0IGNhc2UsIGxvb2t1cFxuICAgICAgICAvL3Jlc3VsdHMgYXJlIG5vIGxvbmdlciB2YWxpZCBhbmQgd2Ugd2lsbCBuZWVkIHRvIHN0YXJ0IG92ZXIuXG4gICAgICAgIGVsc2UgaWYgKCF0aGlzLl9lbnN1cmVIaWJlcm5hdGlvbigpKSB7XG4gICAgICAgICAgICB0aGlzLl9lcnIoZXJyb3JfY29kZXNfanNfMS5FUlIuaW5jb3JyZWN0bHlPcGVuZWRDb21tZW50KTtcbiAgICAgICAgICAgIHRoaXMuX2NyZWF0ZUNvbW1lbnRUb2tlbigyKTtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5CT0dVU19DT01NRU5UO1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVCb2d1c0NvbW1lbnQoY3ApO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIENvbW1lbnQgc3RhcnQgc3RhdGVcbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIF9zdGF0ZUNvbW1lbnRTdGFydChjcCkge1xuICAgICAgICBzd2l0Y2ggKGNwKSB7XG4gICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5IWVBIRU5fTUlOVVM6IHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuQ09NTUVOVF9TVEFSVF9EQVNIO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuR1JFQVRFUl9USEFOX1NJR046IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9lcnIoZXJyb3JfY29kZXNfanNfMS5FUlIuYWJydXB0Q2xvc2luZ09mRW1wdHlDb21tZW50KTtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuREFUQTtcbiAgICAgICAgICAgICAgICBjb25zdCB0b2tlbiA9IHRoaXMuY3VycmVudFRva2VuO1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdEN1cnJlbnRDb21tZW50KHRva2VuKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuQ09NTUVOVDtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGF0ZUNvbW1lbnQoY3ApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8vIENvbW1lbnQgc3RhcnQgZGFzaCBzdGF0ZVxuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgX3N0YXRlQ29tbWVudFN0YXJ0RGFzaChjcCkge1xuICAgICAgICBjb25zdCB0b2tlbiA9IHRoaXMuY3VycmVudFRva2VuO1xuICAgICAgICBzd2l0Y2ggKGNwKSB7XG4gICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5IWVBIRU5fTUlOVVM6IHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuQ09NTUVOVF9FTkQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5HUkVBVEVSX1RIQU5fU0lHTjoge1xuICAgICAgICAgICAgICAgIHRoaXMuX2VycihlcnJvcl9jb2Rlc19qc18xLkVSUi5hYnJ1cHRDbG9zaW5nT2ZFbXB0eUNvbW1lbnQpO1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5EQVRBO1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdEN1cnJlbnRDb21tZW50KHRva2VuKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLkVPRjoge1xuICAgICAgICAgICAgICAgIHRoaXMuX2VycihlcnJvcl9jb2Rlc19qc18xLkVSUi5lb2ZJbkNvbW1lbnQpO1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdEN1cnJlbnRDb21tZW50KHRva2VuKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9lbWl0RU9GVG9rZW4oKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgICAgICB0b2tlbi5kYXRhICs9ICctJztcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuQ09NTUVOVDtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGF0ZUNvbW1lbnQoY3ApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8vIENvbW1lbnQgc3RhdGVcbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIF9zdGF0ZUNvbW1lbnQoY3ApIHtcbiAgICAgICAgY29uc3QgdG9rZW4gPSB0aGlzLmN1cnJlbnRUb2tlbjtcbiAgICAgICAgc3dpdGNoIChjcCkge1xuICAgICAgICAgICAgY2FzZSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuSFlQSEVOX01JTlVTOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLkNPTU1FTlRfRU5EX0RBU0g7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5MRVNTX1RIQU5fU0lHTjoge1xuICAgICAgICAgICAgICAgIHRva2VuLmRhdGEgKz0gJzwnO1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5DT01NRU5UX0xFU1NfVEhBTl9TSUdOO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuTlVMTDoge1xuICAgICAgICAgICAgICAgIHRoaXMuX2VycihlcnJvcl9jb2Rlc19qc18xLkVSUi51bmV4cGVjdGVkTnVsbENoYXJhY3Rlcik7XG4gICAgICAgICAgICAgICAgdG9rZW4uZGF0YSArPSB1bmljb2RlX2pzXzEuUkVQTEFDRU1FTlRfQ0hBUkFDVEVSO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuRU9GOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZXJyKGVycm9yX2NvZGVzX2pzXzEuRVJSLmVvZkluQ29tbWVudCk7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0Q3VycmVudENvbW1lbnQodG9rZW4pO1xuICAgICAgICAgICAgICAgIHRoaXMuX2VtaXRFT0ZUb2tlbigpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgICAgIHRva2VuLmRhdGEgKz0gU3RyaW5nLmZyb21Db2RlUG9pbnQoY3ApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8vIENvbW1lbnQgbGVzcy10aGFuIHNpZ24gc3RhdGVcbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIF9zdGF0ZUNvbW1lbnRMZXNzVGhhblNpZ24oY3ApIHtcbiAgICAgICAgY29uc3QgdG9rZW4gPSB0aGlzLmN1cnJlbnRUb2tlbjtcbiAgICAgICAgc3dpdGNoIChjcCkge1xuICAgICAgICAgICAgY2FzZSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuRVhDTEFNQVRJT05fTUFSSzoge1xuICAgICAgICAgICAgICAgIHRva2VuLmRhdGEgKz0gJyEnO1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5DT01NRU5UX0xFU1NfVEhBTl9TSUdOX0JBTkc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5MRVNTX1RIQU5fU0lHTjoge1xuICAgICAgICAgICAgICAgIHRva2VuLmRhdGEgKz0gJzwnO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5DT01NRU5UO1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0YXRlQ29tbWVudChjcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gQ29tbWVudCBsZXNzLXRoYW4gc2lnbiBiYW5nIHN0YXRlXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBfc3RhdGVDb21tZW50TGVzc1RoYW5TaWduQmFuZyhjcCkge1xuICAgICAgICBpZiAoY3AgPT09IHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5IWVBIRU5fTUlOVVMpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5DT01NRU5UX0xFU1NfVEhBTl9TSUdOX0JBTkdfREFTSDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5DT01NRU5UO1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVDb21tZW50KGNwKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBDb21tZW50IGxlc3MtdGhhbiBzaWduIGJhbmcgZGFzaCBzdGF0ZVxuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgX3N0YXRlQ29tbWVudExlc3NUaGFuU2lnbkJhbmdEYXNoKGNwKSB7XG4gICAgICAgIGlmIChjcCA9PT0gdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLkhZUEhFTl9NSU5VUykge1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLkNPTU1FTlRfTEVTU19USEFOX1NJR05fQkFOR19EQVNIX0RBU0g7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuQ09NTUVOVF9FTkRfREFTSDtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlQ29tbWVudEVuZERhc2goY3ApO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIENvbW1lbnQgbGVzcy10aGFuIHNpZ24gYmFuZyBkYXNoIGRhc2ggc3RhdGVcbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIF9zdGF0ZUNvbW1lbnRMZXNzVGhhblNpZ25CYW5nRGFzaERhc2goY3ApIHtcbiAgICAgICAgaWYgKGNwICE9PSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuR1JFQVRFUl9USEFOX1NJR04gJiYgY3AgIT09IHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5FT0YpIHtcbiAgICAgICAgICAgIHRoaXMuX2VycihlcnJvcl9jb2Rlc19qc18xLkVSUi5uZXN0ZWRDb21tZW50KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuQ09NTUVOVF9FTkQ7XG4gICAgICAgIHRoaXMuX3N0YXRlQ29tbWVudEVuZChjcCk7XG4gICAgfVxuICAgIC8vIENvbW1lbnQgZW5kIGRhc2ggc3RhdGVcbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIF9zdGF0ZUNvbW1lbnRFbmREYXNoKGNwKSB7XG4gICAgICAgIGNvbnN0IHRva2VuID0gdGhpcy5jdXJyZW50VG9rZW47XG4gICAgICAgIHN3aXRjaCAoY3ApIHtcbiAgICAgICAgICAgIGNhc2UgdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLkhZUEhFTl9NSU5VUzoge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5DT01NRU5UX0VORDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLkVPRjoge1xuICAgICAgICAgICAgICAgIHRoaXMuX2VycihlcnJvcl9jb2Rlc19qc18xLkVSUi5lb2ZJbkNvbW1lbnQpO1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdEN1cnJlbnRDb21tZW50KHRva2VuKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9lbWl0RU9GVG9rZW4oKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgICAgICB0b2tlbi5kYXRhICs9ICctJztcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuQ09NTUVOVDtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGF0ZUNvbW1lbnQoY3ApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8vIENvbW1lbnQgZW5kIHN0YXRlXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBfc3RhdGVDb21tZW50RW5kKGNwKSB7XG4gICAgICAgIGNvbnN0IHRva2VuID0gdGhpcy5jdXJyZW50VG9rZW47XG4gICAgICAgIHN3aXRjaCAoY3ApIHtcbiAgICAgICAgICAgIGNhc2UgdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLkdSRUFURVJfVEhBTl9TSUdOOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLkRBVEE7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0Q3VycmVudENvbW1lbnQodG9rZW4pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuRVhDTEFNQVRJT05fTUFSSzoge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5DT01NRU5UX0VORF9CQU5HO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuSFlQSEVOX01JTlVTOiB7XG4gICAgICAgICAgICAgICAgdG9rZW4uZGF0YSArPSAnLSc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5FT0Y6IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9lcnIoZXJyb3JfY29kZXNfanNfMS5FUlIuZW9mSW5Db21tZW50KTtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXRDdXJyZW50Q29tbWVudCh0b2tlbik7XG4gICAgICAgICAgICAgICAgdGhpcy5fZW1pdEVPRlRva2VuKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICAgICAgdG9rZW4uZGF0YSArPSAnLS0nO1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5DT01NRU5UO1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0YXRlQ29tbWVudChjcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gQ29tbWVudCBlbmQgYmFuZyBzdGF0ZVxuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgX3N0YXRlQ29tbWVudEVuZEJhbmcoY3ApIHtcbiAgICAgICAgY29uc3QgdG9rZW4gPSB0aGlzLmN1cnJlbnRUb2tlbjtcbiAgICAgICAgc3dpdGNoIChjcCkge1xuICAgICAgICAgICAgY2FzZSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuSFlQSEVOX01JTlVTOiB7XG4gICAgICAgICAgICAgICAgdG9rZW4uZGF0YSArPSAnLS0hJztcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuQ09NTUVOVF9FTkRfREFTSDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLkdSRUFURVJfVEhBTl9TSUdOOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZXJyKGVycm9yX2NvZGVzX2pzXzEuRVJSLmluY29ycmVjdGx5Q2xvc2VkQ29tbWVudCk7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLkRBVEE7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0Q3VycmVudENvbW1lbnQodG9rZW4pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuRU9GOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZXJyKGVycm9yX2NvZGVzX2pzXzEuRVJSLmVvZkluQ29tbWVudCk7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0Q3VycmVudENvbW1lbnQodG9rZW4pO1xuICAgICAgICAgICAgICAgIHRoaXMuX2VtaXRFT0ZUb2tlbigpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgICAgIHRva2VuLmRhdGEgKz0gJy0tISc7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLkNPTU1FTlQ7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhdGVDb21tZW50KGNwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBET0NUWVBFIHN0YXRlXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBfc3RhdGVEb2N0eXBlKGNwKSB7XG4gICAgICAgIHN3aXRjaCAoY3ApIHtcbiAgICAgICAgICAgIGNhc2UgdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLlNQQUNFOlxuICAgICAgICAgICAgY2FzZSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuTElORV9GRUVEOlxuICAgICAgICAgICAgY2FzZSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuVEFCVUxBVElPTjpcbiAgICAgICAgICAgIGNhc2UgdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLkZPUk1fRkVFRDoge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5CRUZPUkVfRE9DVFlQRV9OQU1FO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuR1JFQVRFUl9USEFOX1NJR046IHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuQkVGT1JFX0RPQ1RZUEVfTkFNRTtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGF0ZUJlZm9yZURvY3R5cGVOYW1lKGNwKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLkVPRjoge1xuICAgICAgICAgICAgICAgIHRoaXMuX2VycihlcnJvcl9jb2Rlc19qc18xLkVSUi5lb2ZJbkRvY3R5cGUpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2NyZWF0ZURvY3R5cGVUb2tlbihudWxsKTtcbiAgICAgICAgICAgICAgICBjb25zdCB0b2tlbiA9IHRoaXMuY3VycmVudFRva2VuO1xuICAgICAgICAgICAgICAgIHRva2VuLmZvcmNlUXVpcmtzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXRDdXJyZW50RG9jdHlwZSh0b2tlbik7XG4gICAgICAgICAgICAgICAgdGhpcy5fZW1pdEVPRlRva2VuKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZXJyKGVycm9yX2NvZGVzX2pzXzEuRVJSLm1pc3NpbmdXaGl0ZXNwYWNlQmVmb3JlRG9jdHlwZU5hbWUpO1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5CRUZPUkVfRE9DVFlQRV9OQU1FO1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0YXRlQmVmb3JlRG9jdHlwZU5hbWUoY3ApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8vIEJlZm9yZSBET0NUWVBFIG5hbWUgc3RhdGVcbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIF9zdGF0ZUJlZm9yZURvY3R5cGVOYW1lKGNwKSB7XG4gICAgICAgIGlmIChpc0FzY2lpVXBwZXIoY3ApKSB7XG4gICAgICAgICAgICB0aGlzLl9jcmVhdGVEb2N0eXBlVG9rZW4oU3RyaW5nLmZyb21DaGFyQ29kZSh0b0FzY2lpTG93ZXIoY3ApKSk7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuRE9DVFlQRV9OQU1FO1xuICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHN3aXRjaCAoY3ApIHtcbiAgICAgICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5TUEFDRTpcbiAgICAgICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5MSU5FX0ZFRUQ6XG4gICAgICAgICAgICAgICAgY2FzZSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuVEFCVUxBVElPTjpcbiAgICAgICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5GT1JNX0ZFRUQ6IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSWdub3JlIHdoaXRlc3BhY2VcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLk5VTEw6IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZXJyKGVycm9yX2NvZGVzX2pzXzEuRVJSLnVuZXhwZWN0ZWROdWxsQ2hhcmFjdGVyKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY3JlYXRlRG9jdHlwZVRva2VuKHVuaWNvZGVfanNfMS5SRVBMQUNFTUVOVF9DSEFSQUNURVIpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuRE9DVFlQRV9OQU1FO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuR1JFQVRFUl9USEFOX1NJR046IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZXJyKGVycm9yX2NvZGVzX2pzXzEuRVJSLm1pc3NpbmdEb2N0eXBlTmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NyZWF0ZURvY3R5cGVUb2tlbihudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdG9rZW4gPSB0aGlzLmN1cnJlbnRUb2tlbjtcbiAgICAgICAgICAgICAgICAgICAgdG9rZW4uZm9yY2VRdWlya3MgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXRDdXJyZW50RG9jdHlwZSh0b2tlbik7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5EQVRBO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuRU9GOiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2VycihlcnJvcl9jb2Rlc19qc18xLkVSUi5lb2ZJbkRvY3R5cGUpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jcmVhdGVEb2N0eXBlVG9rZW4obnVsbCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRva2VuID0gdGhpcy5jdXJyZW50VG9rZW47XG4gICAgICAgICAgICAgICAgICAgIHRva2VuLmZvcmNlUXVpcmtzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0Q3VycmVudERvY3R5cGUodG9rZW4pO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9lbWl0RU9GVG9rZW4oKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY3JlYXRlRG9jdHlwZVRva2VuKFN0cmluZy5mcm9tQ29kZVBvaW50KGNwKSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5ET0NUWVBFX05BTUU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgIH1cbiAgICAvLyBET0NUWVBFIG5hbWUgc3RhdGVcbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIF9zdGF0ZURvY3R5cGVOYW1lKGNwKSB7XG4gICAgICAgIGNvbnN0IHRva2VuID0gdGhpcy5jdXJyZW50VG9rZW47XG4gICAgICAgIHN3aXRjaCAoY3ApIHtcbiAgICAgICAgICAgIGNhc2UgdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLlNQQUNFOlxuICAgICAgICAgICAgY2FzZSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuTElORV9GRUVEOlxuICAgICAgICAgICAgY2FzZSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuVEFCVUxBVElPTjpcbiAgICAgICAgICAgIGNhc2UgdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLkZPUk1fRkVFRDoge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5BRlRFUl9ET0NUWVBFX05BTUU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5HUkVBVEVSX1RIQU5fU0lHTjoge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5EQVRBO1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdEN1cnJlbnREb2N0eXBlKHRva2VuKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLk5VTEw6IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9lcnIoZXJyb3JfY29kZXNfanNfMS5FUlIudW5leHBlY3RlZE51bGxDaGFyYWN0ZXIpO1xuICAgICAgICAgICAgICAgIHRva2VuLm5hbWUgKz0gdW5pY29kZV9qc18xLlJFUExBQ0VNRU5UX0NIQVJBQ1RFUjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLkVPRjoge1xuICAgICAgICAgICAgICAgIHRoaXMuX2VycihlcnJvcl9jb2Rlc19qc18xLkVSUi5lb2ZJbkRvY3R5cGUpO1xuICAgICAgICAgICAgICAgIHRva2VuLmZvcmNlUXVpcmtzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXRDdXJyZW50RG9jdHlwZSh0b2tlbik7XG4gICAgICAgICAgICAgICAgdGhpcy5fZW1pdEVPRlRva2VuKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICAgICAgdG9rZW4ubmFtZSArPSBTdHJpbmcuZnJvbUNvZGVQb2ludChpc0FzY2lpVXBwZXIoY3ApID8gdG9Bc2NpaUxvd2VyKGNwKSA6IGNwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBBZnRlciBET0NUWVBFIG5hbWUgc3RhdGVcbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIF9zdGF0ZUFmdGVyRG9jdHlwZU5hbWUoY3ApIHtcbiAgICAgICAgY29uc3QgdG9rZW4gPSB0aGlzLmN1cnJlbnRUb2tlbjtcbiAgICAgICAgc3dpdGNoIChjcCkge1xuICAgICAgICAgICAgY2FzZSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuU1BBQ0U6XG4gICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5MSU5FX0ZFRUQ6XG4gICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5UQUJVTEFUSU9OOlxuICAgICAgICAgICAgY2FzZSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuRk9STV9GRUVEOiB7XG4gICAgICAgICAgICAgICAgLy8gSWdub3JlIHdoaXRlc3BhY2VcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLkdSRUFURVJfVEhBTl9TSUdOOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLkRBVEE7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0Q3VycmVudERvY3R5cGUodG9rZW4pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuRU9GOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZXJyKGVycm9yX2NvZGVzX2pzXzEuRVJSLmVvZkluRG9jdHlwZSk7XG4gICAgICAgICAgICAgICAgdG9rZW4uZm9yY2VRdWlya3MgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdEN1cnJlbnREb2N0eXBlKHRva2VuKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9lbWl0RU9GVG9rZW4oKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fY29uc3VtZVNlcXVlbmNlSWZNYXRjaCh1bmljb2RlX2pzXzEuU0VRVUVOQ0VTLlBVQkxJQywgZmFsc2UpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5BRlRFUl9ET0NUWVBFX1BVQkxJQ19LRVlXT1JEO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9jb25zdW1lU2VxdWVuY2VJZk1hdGNoKHVuaWNvZGVfanNfMS5TRVFVRU5DRVMuU1lTVEVNLCBmYWxzZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLkFGVEVSX0RPQ1RZUEVfU1lTVEVNX0tFWVdPUkQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vTk9URTogc2VxdWVuY2UgbG9va3VwIGNhbiBiZSBhYnJ1cHRlZCBieSBoaWJlcm5hdGlvbi4gSW4gdGhhdCBjYXNlIGxvb2t1cFxuICAgICAgICAgICAgICAgIC8vcmVzdWx0cyBhcmUgbm8gbG9uZ2VyIHZhbGlkIGFuZCB3ZSB3aWxsIG5lZWQgdG8gc3RhcnQgb3Zlci5cbiAgICAgICAgICAgICAgICBlbHNlIGlmICghdGhpcy5fZW5zdXJlSGliZXJuYXRpb24oKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9lcnIoZXJyb3JfY29kZXNfanNfMS5FUlIuaW52YWxpZENoYXJhY3RlclNlcXVlbmNlQWZ0ZXJEb2N0eXBlTmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIHRva2VuLmZvcmNlUXVpcmtzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLkJPR1VTX0RPQ1RZUEU7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3N0YXRlQm9ndXNEb2N0eXBlKGNwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gQWZ0ZXIgRE9DVFlQRSBwdWJsaWMga2V5d29yZCBzdGF0ZVxuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgX3N0YXRlQWZ0ZXJEb2N0eXBlUHVibGljS2V5d29yZChjcCkge1xuICAgICAgICBjb25zdCB0b2tlbiA9IHRoaXMuY3VycmVudFRva2VuO1xuICAgICAgICBzd2l0Y2ggKGNwKSB7XG4gICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5TUEFDRTpcbiAgICAgICAgICAgIGNhc2UgdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLkxJTkVfRkVFRDpcbiAgICAgICAgICAgIGNhc2UgdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLlRBQlVMQVRJT046XG4gICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5GT1JNX0ZFRUQ6IHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuQkVGT1JFX0RPQ1RZUEVfUFVCTElDX0lERU5USUZJRVI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5RVU9UQVRJT05fTUFSSzoge1xuICAgICAgICAgICAgICAgIHRoaXMuX2VycihlcnJvcl9jb2Rlc19qc18xLkVSUi5taXNzaW5nV2hpdGVzcGFjZUFmdGVyRG9jdHlwZVB1YmxpY0tleXdvcmQpO1xuICAgICAgICAgICAgICAgIHRva2VuLnB1YmxpY0lkID0gJyc7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLkRPQ1RZUEVfUFVCTElDX0lERU5USUZJRVJfRE9VQkxFX1FVT1RFRDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLkFQT1NUUk9QSEU6IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9lcnIoZXJyb3JfY29kZXNfanNfMS5FUlIubWlzc2luZ1doaXRlc3BhY2VBZnRlckRvY3R5cGVQdWJsaWNLZXl3b3JkKTtcbiAgICAgICAgICAgICAgICB0b2tlbi5wdWJsaWNJZCA9ICcnO1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5ET0NUWVBFX1BVQkxJQ19JREVOVElGSUVSX1NJTkdMRV9RVU9URUQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5HUkVBVEVSX1RIQU5fU0lHTjoge1xuICAgICAgICAgICAgICAgIHRoaXMuX2VycihlcnJvcl9jb2Rlc19qc18xLkVSUi5taXNzaW5nRG9jdHlwZVB1YmxpY0lkZW50aWZpZXIpO1xuICAgICAgICAgICAgICAgIHRva2VuLmZvcmNlUXVpcmtzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuREFUQTtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXRDdXJyZW50RG9jdHlwZSh0b2tlbik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5FT0Y6IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9lcnIoZXJyb3JfY29kZXNfanNfMS5FUlIuZW9mSW5Eb2N0eXBlKTtcbiAgICAgICAgICAgICAgICB0b2tlbi5mb3JjZVF1aXJrcyA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0Q3VycmVudERvY3R5cGUodG9rZW4pO1xuICAgICAgICAgICAgICAgIHRoaXMuX2VtaXRFT0ZUb2tlbigpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgICAgIHRoaXMuX2VycihlcnJvcl9jb2Rlc19qc18xLkVSUi5taXNzaW5nUXVvdGVCZWZvcmVEb2N0eXBlUHVibGljSWRlbnRpZmllcik7XG4gICAgICAgICAgICAgICAgdG9rZW4uZm9yY2VRdWlya3MgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5CT0dVU19ET0NUWVBFO1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0YXRlQm9ndXNEb2N0eXBlKGNwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBCZWZvcmUgRE9DVFlQRSBwdWJsaWMgaWRlbnRpZmllciBzdGF0ZVxuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgX3N0YXRlQmVmb3JlRG9jdHlwZVB1YmxpY0lkZW50aWZpZXIoY3ApIHtcbiAgICAgICAgY29uc3QgdG9rZW4gPSB0aGlzLmN1cnJlbnRUb2tlbjtcbiAgICAgICAgc3dpdGNoIChjcCkge1xuICAgICAgICAgICAgY2FzZSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuU1BBQ0U6XG4gICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5MSU5FX0ZFRUQ6XG4gICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5UQUJVTEFUSU9OOlxuICAgICAgICAgICAgY2FzZSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuRk9STV9GRUVEOiB7XG4gICAgICAgICAgICAgICAgLy8gSWdub3JlIHdoaXRlc3BhY2VcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLlFVT1RBVElPTl9NQVJLOiB7XG4gICAgICAgICAgICAgICAgdG9rZW4ucHVibGljSWQgPSAnJztcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuRE9DVFlQRV9QVUJMSUNfSURFTlRJRklFUl9ET1VCTEVfUVVPVEVEO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuQVBPU1RST1BIRToge1xuICAgICAgICAgICAgICAgIHRva2VuLnB1YmxpY0lkID0gJyc7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLkRPQ1RZUEVfUFVCTElDX0lERU5USUZJRVJfU0lOR0xFX1FVT1RFRDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLkdSRUFURVJfVEhBTl9TSUdOOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZXJyKGVycm9yX2NvZGVzX2pzXzEuRVJSLm1pc3NpbmdEb2N0eXBlUHVibGljSWRlbnRpZmllcik7XG4gICAgICAgICAgICAgICAgdG9rZW4uZm9yY2VRdWlya3MgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5EQVRBO1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdEN1cnJlbnREb2N0eXBlKHRva2VuKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLkVPRjoge1xuICAgICAgICAgICAgICAgIHRoaXMuX2VycihlcnJvcl9jb2Rlc19qc18xLkVSUi5lb2ZJbkRvY3R5cGUpO1xuICAgICAgICAgICAgICAgIHRva2VuLmZvcmNlUXVpcmtzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXRDdXJyZW50RG9jdHlwZSh0b2tlbik7XG4gICAgICAgICAgICAgICAgdGhpcy5fZW1pdEVPRlRva2VuKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZXJyKGVycm9yX2NvZGVzX2pzXzEuRVJSLm1pc3NpbmdRdW90ZUJlZm9yZURvY3R5cGVQdWJsaWNJZGVudGlmaWVyKTtcbiAgICAgICAgICAgICAgICB0b2tlbi5mb3JjZVF1aXJrcyA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLkJPR1VTX0RPQ1RZUEU7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhdGVCb2d1c0RvY3R5cGUoY3ApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8vIERPQ1RZUEUgcHVibGljIGlkZW50aWZpZXIgKGRvdWJsZS1xdW90ZWQpIHN0YXRlXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBfc3RhdGVEb2N0eXBlUHVibGljSWRlbnRpZmllckRvdWJsZVF1b3RlZChjcCkge1xuICAgICAgICBjb25zdCB0b2tlbiA9IHRoaXMuY3VycmVudFRva2VuO1xuICAgICAgICBzd2l0Y2ggKGNwKSB7XG4gICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5RVU9UQVRJT05fTUFSSzoge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5BRlRFUl9ET0NUWVBFX1BVQkxJQ19JREVOVElGSUVSO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuTlVMTDoge1xuICAgICAgICAgICAgICAgIHRoaXMuX2VycihlcnJvcl9jb2Rlc19qc18xLkVSUi51bmV4cGVjdGVkTnVsbENoYXJhY3Rlcik7XG4gICAgICAgICAgICAgICAgdG9rZW4ucHVibGljSWQgKz0gdW5pY29kZV9qc18xLlJFUExBQ0VNRU5UX0NIQVJBQ1RFUjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLkdSRUFURVJfVEhBTl9TSUdOOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZXJyKGVycm9yX2NvZGVzX2pzXzEuRVJSLmFicnVwdERvY3R5cGVQdWJsaWNJZGVudGlmaWVyKTtcbiAgICAgICAgICAgICAgICB0b2tlbi5mb3JjZVF1aXJrcyA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0Q3VycmVudERvY3R5cGUodG9rZW4pO1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5EQVRBO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuRU9GOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZXJyKGVycm9yX2NvZGVzX2pzXzEuRVJSLmVvZkluRG9jdHlwZSk7XG4gICAgICAgICAgICAgICAgdG9rZW4uZm9yY2VRdWlya3MgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdEN1cnJlbnREb2N0eXBlKHRva2VuKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9lbWl0RU9GVG9rZW4oKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgICAgICB0b2tlbi5wdWJsaWNJZCArPSBTdHJpbmcuZnJvbUNvZGVQb2ludChjcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gRE9DVFlQRSBwdWJsaWMgaWRlbnRpZmllciAoc2luZ2xlLXF1b3RlZCkgc3RhdGVcbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIF9zdGF0ZURvY3R5cGVQdWJsaWNJZGVudGlmaWVyU2luZ2xlUXVvdGVkKGNwKSB7XG4gICAgICAgIGNvbnN0IHRva2VuID0gdGhpcy5jdXJyZW50VG9rZW47XG4gICAgICAgIHN3aXRjaCAoY3ApIHtcbiAgICAgICAgICAgIGNhc2UgdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLkFQT1NUUk9QSEU6IHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuQUZURVJfRE9DVFlQRV9QVUJMSUNfSURFTlRJRklFUjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLk5VTEw6IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9lcnIoZXJyb3JfY29kZXNfanNfMS5FUlIudW5leHBlY3RlZE51bGxDaGFyYWN0ZXIpO1xuICAgICAgICAgICAgICAgIHRva2VuLnB1YmxpY0lkICs9IHVuaWNvZGVfanNfMS5SRVBMQUNFTUVOVF9DSEFSQUNURVI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5HUkVBVEVSX1RIQU5fU0lHTjoge1xuICAgICAgICAgICAgICAgIHRoaXMuX2VycihlcnJvcl9jb2Rlc19qc18xLkVSUi5hYnJ1cHREb2N0eXBlUHVibGljSWRlbnRpZmllcik7XG4gICAgICAgICAgICAgICAgdG9rZW4uZm9yY2VRdWlya3MgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdEN1cnJlbnREb2N0eXBlKHRva2VuKTtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuREFUQTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLkVPRjoge1xuICAgICAgICAgICAgICAgIHRoaXMuX2VycihlcnJvcl9jb2Rlc19qc18xLkVSUi5lb2ZJbkRvY3R5cGUpO1xuICAgICAgICAgICAgICAgIHRva2VuLmZvcmNlUXVpcmtzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXRDdXJyZW50RG9jdHlwZSh0b2tlbik7XG4gICAgICAgICAgICAgICAgdGhpcy5fZW1pdEVPRlRva2VuKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICAgICAgdG9rZW4ucHVibGljSWQgKz0gU3RyaW5nLmZyb21Db2RlUG9pbnQoY3ApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8vIEFmdGVyIERPQ1RZUEUgcHVibGljIGlkZW50aWZpZXIgc3RhdGVcbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIF9zdGF0ZUFmdGVyRG9jdHlwZVB1YmxpY0lkZW50aWZpZXIoY3ApIHtcbiAgICAgICAgY29uc3QgdG9rZW4gPSB0aGlzLmN1cnJlbnRUb2tlbjtcbiAgICAgICAgc3dpdGNoIChjcCkge1xuICAgICAgICAgICAgY2FzZSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuU1BBQ0U6XG4gICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5MSU5FX0ZFRUQ6XG4gICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5UQUJVTEFUSU9OOlxuICAgICAgICAgICAgY2FzZSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuRk9STV9GRUVEOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLkJFVFdFRU5fRE9DVFlQRV9QVUJMSUNfQU5EX1NZU1RFTV9JREVOVElGSUVSUztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLkdSRUFURVJfVEhBTl9TSUdOOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLkRBVEE7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0Q3VycmVudERvY3R5cGUodG9rZW4pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuUVVPVEFUSU9OX01BUks6IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9lcnIoZXJyb3JfY29kZXNfanNfMS5FUlIubWlzc2luZ1doaXRlc3BhY2VCZXR3ZWVuRG9jdHlwZVB1YmxpY0FuZFN5c3RlbUlkZW50aWZpZXJzKTtcbiAgICAgICAgICAgICAgICB0b2tlbi5zeXN0ZW1JZCA9ICcnO1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5ET0NUWVBFX1NZU1RFTV9JREVOVElGSUVSX0RPVUJMRV9RVU9URUQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5BUE9TVFJPUEhFOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZXJyKGVycm9yX2NvZGVzX2pzXzEuRVJSLm1pc3NpbmdXaGl0ZXNwYWNlQmV0d2VlbkRvY3R5cGVQdWJsaWNBbmRTeXN0ZW1JZGVudGlmaWVycyk7XG4gICAgICAgICAgICAgICAgdG9rZW4uc3lzdGVtSWQgPSAnJztcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuRE9DVFlQRV9TWVNURU1fSURFTlRJRklFUl9TSU5HTEVfUVVPVEVEO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuRU9GOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZXJyKGVycm9yX2NvZGVzX2pzXzEuRVJSLmVvZkluRG9jdHlwZSk7XG4gICAgICAgICAgICAgICAgdG9rZW4uZm9yY2VRdWlya3MgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdEN1cnJlbnREb2N0eXBlKHRva2VuKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9lbWl0RU9GVG9rZW4oKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9lcnIoZXJyb3JfY29kZXNfanNfMS5FUlIubWlzc2luZ1F1b3RlQmVmb3JlRG9jdHlwZVN5c3RlbUlkZW50aWZpZXIpO1xuICAgICAgICAgICAgICAgIHRva2VuLmZvcmNlUXVpcmtzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuQk9HVVNfRE9DVFlQRTtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGF0ZUJvZ3VzRG9jdHlwZShjcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gQmV0d2VlbiBET0NUWVBFIHB1YmxpYyBhbmQgc3lzdGVtIGlkZW50aWZpZXJzIHN0YXRlXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBfc3RhdGVCZXR3ZWVuRG9jdHlwZVB1YmxpY0FuZFN5c3RlbUlkZW50aWZpZXJzKGNwKSB7XG4gICAgICAgIGNvbnN0IHRva2VuID0gdGhpcy5jdXJyZW50VG9rZW47XG4gICAgICAgIHN3aXRjaCAoY3ApIHtcbiAgICAgICAgICAgIGNhc2UgdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLlNQQUNFOlxuICAgICAgICAgICAgY2FzZSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuTElORV9GRUVEOlxuICAgICAgICAgICAgY2FzZSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuVEFCVUxBVElPTjpcbiAgICAgICAgICAgIGNhc2UgdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLkZPUk1fRkVFRDoge1xuICAgICAgICAgICAgICAgIC8vIElnbm9yZSB3aGl0ZXNwYWNlXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5HUkVBVEVSX1RIQU5fU0lHTjoge1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdEN1cnJlbnREb2N0eXBlKHRva2VuKTtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuREFUQTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLlFVT1RBVElPTl9NQVJLOiB7XG4gICAgICAgICAgICAgICAgdG9rZW4uc3lzdGVtSWQgPSAnJztcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuRE9DVFlQRV9TWVNURU1fSURFTlRJRklFUl9ET1VCTEVfUVVPVEVEO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuQVBPU1RST1BIRToge1xuICAgICAgICAgICAgICAgIHRva2VuLnN5c3RlbUlkID0gJyc7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLkRPQ1RZUEVfU1lTVEVNX0lERU5USUZJRVJfU0lOR0xFX1FVT1RFRDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLkVPRjoge1xuICAgICAgICAgICAgICAgIHRoaXMuX2VycihlcnJvcl9jb2Rlc19qc18xLkVSUi5lb2ZJbkRvY3R5cGUpO1xuICAgICAgICAgICAgICAgIHRva2VuLmZvcmNlUXVpcmtzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXRDdXJyZW50RG9jdHlwZSh0b2tlbik7XG4gICAgICAgICAgICAgICAgdGhpcy5fZW1pdEVPRlRva2VuKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZXJyKGVycm9yX2NvZGVzX2pzXzEuRVJSLm1pc3NpbmdRdW90ZUJlZm9yZURvY3R5cGVTeXN0ZW1JZGVudGlmaWVyKTtcbiAgICAgICAgICAgICAgICB0b2tlbi5mb3JjZVF1aXJrcyA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLkJPR1VTX0RPQ1RZUEU7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhdGVCb2d1c0RvY3R5cGUoY3ApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8vIEFmdGVyIERPQ1RZUEUgc3lzdGVtIGtleXdvcmQgc3RhdGVcbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIF9zdGF0ZUFmdGVyRG9jdHlwZVN5c3RlbUtleXdvcmQoY3ApIHtcbiAgICAgICAgY29uc3QgdG9rZW4gPSB0aGlzLmN1cnJlbnRUb2tlbjtcbiAgICAgICAgc3dpdGNoIChjcCkge1xuICAgICAgICAgICAgY2FzZSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuU1BBQ0U6XG4gICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5MSU5FX0ZFRUQ6XG4gICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5UQUJVTEFUSU9OOlxuICAgICAgICAgICAgY2FzZSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuRk9STV9GRUVEOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLkJFRk9SRV9ET0NUWVBFX1NZU1RFTV9JREVOVElGSUVSO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuUVVPVEFUSU9OX01BUks6IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9lcnIoZXJyb3JfY29kZXNfanNfMS5FUlIubWlzc2luZ1doaXRlc3BhY2VBZnRlckRvY3R5cGVTeXN0ZW1LZXl3b3JkKTtcbiAgICAgICAgICAgICAgICB0b2tlbi5zeXN0ZW1JZCA9ICcnO1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5ET0NUWVBFX1NZU1RFTV9JREVOVElGSUVSX0RPVUJMRV9RVU9URUQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5BUE9TVFJPUEhFOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZXJyKGVycm9yX2NvZGVzX2pzXzEuRVJSLm1pc3NpbmdXaGl0ZXNwYWNlQWZ0ZXJEb2N0eXBlU3lzdGVtS2V5d29yZCk7XG4gICAgICAgICAgICAgICAgdG9rZW4uc3lzdGVtSWQgPSAnJztcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuRE9DVFlQRV9TWVNURU1fSURFTlRJRklFUl9TSU5HTEVfUVVPVEVEO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuR1JFQVRFUl9USEFOX1NJR046IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9lcnIoZXJyb3JfY29kZXNfanNfMS5FUlIubWlzc2luZ0RvY3R5cGVTeXN0ZW1JZGVudGlmaWVyKTtcbiAgICAgICAgICAgICAgICB0b2tlbi5mb3JjZVF1aXJrcyA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLkRBVEE7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0Q3VycmVudERvY3R5cGUodG9rZW4pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuRU9GOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZXJyKGVycm9yX2NvZGVzX2pzXzEuRVJSLmVvZkluRG9jdHlwZSk7XG4gICAgICAgICAgICAgICAgdG9rZW4uZm9yY2VRdWlya3MgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdEN1cnJlbnREb2N0eXBlKHRva2VuKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9lbWl0RU9GVG9rZW4oKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9lcnIoZXJyb3JfY29kZXNfanNfMS5FUlIubWlzc2luZ1F1b3RlQmVmb3JlRG9jdHlwZVN5c3RlbUlkZW50aWZpZXIpO1xuICAgICAgICAgICAgICAgIHRva2VuLmZvcmNlUXVpcmtzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuQk9HVVNfRE9DVFlQRTtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGF0ZUJvZ3VzRG9jdHlwZShjcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gQmVmb3JlIERPQ1RZUEUgc3lzdGVtIGlkZW50aWZpZXIgc3RhdGVcbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIF9zdGF0ZUJlZm9yZURvY3R5cGVTeXN0ZW1JZGVudGlmaWVyKGNwKSB7XG4gICAgICAgIGNvbnN0IHRva2VuID0gdGhpcy5jdXJyZW50VG9rZW47XG4gICAgICAgIHN3aXRjaCAoY3ApIHtcbiAgICAgICAgICAgIGNhc2UgdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLlNQQUNFOlxuICAgICAgICAgICAgY2FzZSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuTElORV9GRUVEOlxuICAgICAgICAgICAgY2FzZSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuVEFCVUxBVElPTjpcbiAgICAgICAgICAgIGNhc2UgdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLkZPUk1fRkVFRDoge1xuICAgICAgICAgICAgICAgIC8vIElnbm9yZSB3aGl0ZXNwYWNlXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5RVU9UQVRJT05fTUFSSzoge1xuICAgICAgICAgICAgICAgIHRva2VuLnN5c3RlbUlkID0gJyc7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLkRPQ1RZUEVfU1lTVEVNX0lERU5USUZJRVJfRE9VQkxFX1FVT1RFRDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLkFQT1NUUk9QSEU6IHtcbiAgICAgICAgICAgICAgICB0b2tlbi5zeXN0ZW1JZCA9ICcnO1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5ET0NUWVBFX1NZU1RFTV9JREVOVElGSUVSX1NJTkdMRV9RVU9URUQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5HUkVBVEVSX1RIQU5fU0lHTjoge1xuICAgICAgICAgICAgICAgIHRoaXMuX2VycihlcnJvcl9jb2Rlc19qc18xLkVSUi5taXNzaW5nRG9jdHlwZVN5c3RlbUlkZW50aWZpZXIpO1xuICAgICAgICAgICAgICAgIHRva2VuLmZvcmNlUXVpcmtzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuREFUQTtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXRDdXJyZW50RG9jdHlwZSh0b2tlbik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5FT0Y6IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9lcnIoZXJyb3JfY29kZXNfanNfMS5FUlIuZW9mSW5Eb2N0eXBlKTtcbiAgICAgICAgICAgICAgICB0b2tlbi5mb3JjZVF1aXJrcyA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0Q3VycmVudERvY3R5cGUodG9rZW4pO1xuICAgICAgICAgICAgICAgIHRoaXMuX2VtaXRFT0ZUb2tlbigpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgICAgIHRoaXMuX2VycihlcnJvcl9jb2Rlc19qc18xLkVSUi5taXNzaW5nUXVvdGVCZWZvcmVEb2N0eXBlU3lzdGVtSWRlbnRpZmllcik7XG4gICAgICAgICAgICAgICAgdG9rZW4uZm9yY2VRdWlya3MgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5CT0dVU19ET0NUWVBFO1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0YXRlQm9ndXNEb2N0eXBlKGNwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBET0NUWVBFIHN5c3RlbSBpZGVudGlmaWVyIChkb3VibGUtcXVvdGVkKSBzdGF0ZVxuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgX3N0YXRlRG9jdHlwZVN5c3RlbUlkZW50aWZpZXJEb3VibGVRdW90ZWQoY3ApIHtcbiAgICAgICAgY29uc3QgdG9rZW4gPSB0aGlzLmN1cnJlbnRUb2tlbjtcbiAgICAgICAgc3dpdGNoIChjcCkge1xuICAgICAgICAgICAgY2FzZSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuUVVPVEFUSU9OX01BUks6IHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuQUZURVJfRE9DVFlQRV9TWVNURU1fSURFTlRJRklFUjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLk5VTEw6IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9lcnIoZXJyb3JfY29kZXNfanNfMS5FUlIudW5leHBlY3RlZE51bGxDaGFyYWN0ZXIpO1xuICAgICAgICAgICAgICAgIHRva2VuLnN5c3RlbUlkICs9IHVuaWNvZGVfanNfMS5SRVBMQUNFTUVOVF9DSEFSQUNURVI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5HUkVBVEVSX1RIQU5fU0lHTjoge1xuICAgICAgICAgICAgICAgIHRoaXMuX2VycihlcnJvcl9jb2Rlc19qc18xLkVSUi5hYnJ1cHREb2N0eXBlU3lzdGVtSWRlbnRpZmllcik7XG4gICAgICAgICAgICAgICAgdG9rZW4uZm9yY2VRdWlya3MgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdEN1cnJlbnREb2N0eXBlKHRva2VuKTtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuREFUQTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLkVPRjoge1xuICAgICAgICAgICAgICAgIHRoaXMuX2VycihlcnJvcl9jb2Rlc19qc18xLkVSUi5lb2ZJbkRvY3R5cGUpO1xuICAgICAgICAgICAgICAgIHRva2VuLmZvcmNlUXVpcmtzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXRDdXJyZW50RG9jdHlwZSh0b2tlbik7XG4gICAgICAgICAgICAgICAgdGhpcy5fZW1pdEVPRlRva2VuKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICAgICAgdG9rZW4uc3lzdGVtSWQgKz0gU3RyaW5nLmZyb21Db2RlUG9pbnQoY3ApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8vIERPQ1RZUEUgc3lzdGVtIGlkZW50aWZpZXIgKHNpbmdsZS1xdW90ZWQpIHN0YXRlXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBfc3RhdGVEb2N0eXBlU3lzdGVtSWRlbnRpZmllclNpbmdsZVF1b3RlZChjcCkge1xuICAgICAgICBjb25zdCB0b2tlbiA9IHRoaXMuY3VycmVudFRva2VuO1xuICAgICAgICBzd2l0Y2ggKGNwKSB7XG4gICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5BUE9TVFJPUEhFOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLkFGVEVSX0RPQ1RZUEVfU1lTVEVNX0lERU5USUZJRVI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5OVUxMOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZXJyKGVycm9yX2NvZGVzX2pzXzEuRVJSLnVuZXhwZWN0ZWROdWxsQ2hhcmFjdGVyKTtcbiAgICAgICAgICAgICAgICB0b2tlbi5zeXN0ZW1JZCArPSB1bmljb2RlX2pzXzEuUkVQTEFDRU1FTlRfQ0hBUkFDVEVSO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuR1JFQVRFUl9USEFOX1NJR046IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9lcnIoZXJyb3JfY29kZXNfanNfMS5FUlIuYWJydXB0RG9jdHlwZVN5c3RlbUlkZW50aWZpZXIpO1xuICAgICAgICAgICAgICAgIHRva2VuLmZvcmNlUXVpcmtzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXRDdXJyZW50RG9jdHlwZSh0b2tlbik7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLkRBVEE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5FT0Y6IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9lcnIoZXJyb3JfY29kZXNfanNfMS5FUlIuZW9mSW5Eb2N0eXBlKTtcbiAgICAgICAgICAgICAgICB0b2tlbi5mb3JjZVF1aXJrcyA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0Q3VycmVudERvY3R5cGUodG9rZW4pO1xuICAgICAgICAgICAgICAgIHRoaXMuX2VtaXRFT0ZUb2tlbigpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgICAgIHRva2VuLnN5c3RlbUlkICs9IFN0cmluZy5mcm9tQ29kZVBvaW50KGNwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBBZnRlciBET0NUWVBFIHN5c3RlbSBpZGVudGlmaWVyIHN0YXRlXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBfc3RhdGVBZnRlckRvY3R5cGVTeXN0ZW1JZGVudGlmaWVyKGNwKSB7XG4gICAgICAgIGNvbnN0IHRva2VuID0gdGhpcy5jdXJyZW50VG9rZW47XG4gICAgICAgIHN3aXRjaCAoY3ApIHtcbiAgICAgICAgICAgIGNhc2UgdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLlNQQUNFOlxuICAgICAgICAgICAgY2FzZSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuTElORV9GRUVEOlxuICAgICAgICAgICAgY2FzZSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuVEFCVUxBVElPTjpcbiAgICAgICAgICAgIGNhc2UgdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLkZPUk1fRkVFRDoge1xuICAgICAgICAgICAgICAgIC8vIElnbm9yZSB3aGl0ZXNwYWNlXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5HUkVBVEVSX1RIQU5fU0lHTjoge1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdEN1cnJlbnREb2N0eXBlKHRva2VuKTtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuREFUQTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLkVPRjoge1xuICAgICAgICAgICAgICAgIHRoaXMuX2VycihlcnJvcl9jb2Rlc19qc18xLkVSUi5lb2ZJbkRvY3R5cGUpO1xuICAgICAgICAgICAgICAgIHRva2VuLmZvcmNlUXVpcmtzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXRDdXJyZW50RG9jdHlwZSh0b2tlbik7XG4gICAgICAgICAgICAgICAgdGhpcy5fZW1pdEVPRlRva2VuKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZXJyKGVycm9yX2NvZGVzX2pzXzEuRVJSLnVuZXhwZWN0ZWRDaGFyYWN0ZXJBZnRlckRvY3R5cGVTeXN0ZW1JZGVudGlmaWVyKTtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuQk9HVVNfRE9DVFlQRTtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGF0ZUJvZ3VzRG9jdHlwZShjcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gQm9ndXMgRE9DVFlQRSBzdGF0ZVxuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgX3N0YXRlQm9ndXNEb2N0eXBlKGNwKSB7XG4gICAgICAgIGNvbnN0IHRva2VuID0gdGhpcy5jdXJyZW50VG9rZW47XG4gICAgICAgIHN3aXRjaCAoY3ApIHtcbiAgICAgICAgICAgIGNhc2UgdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLkdSRUFURVJfVEhBTl9TSUdOOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0Q3VycmVudERvY3R5cGUodG9rZW4pO1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5EQVRBO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuTlVMTDoge1xuICAgICAgICAgICAgICAgIHRoaXMuX2VycihlcnJvcl9jb2Rlc19qc18xLkVSUi51bmV4cGVjdGVkTnVsbENoYXJhY3Rlcik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5FT0Y6IHtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXRDdXJyZW50RG9jdHlwZSh0b2tlbik7XG4gICAgICAgICAgICAgICAgdGhpcy5fZW1pdEVPRlRva2VuKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgLy8gRG8gbm90aGluZ1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIENEQVRBIHNlY3Rpb24gc3RhdGVcbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIF9zdGF0ZUNkYXRhU2VjdGlvbihjcCkge1xuICAgICAgICBzd2l0Y2ggKGNwKSB7XG4gICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5SSUdIVF9TUVVBUkVfQlJBQ0tFVDoge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5DREFUQV9TRUNUSU9OX0JSQUNLRVQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5FT0Y6IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9lcnIoZXJyb3JfY29kZXNfanNfMS5FUlIuZW9mSW5DZGF0YSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fZW1pdEVPRlRva2VuKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZW1pdENvZGVQb2ludChjcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gQ0RBVEEgc2VjdGlvbiBicmFja2V0IHN0YXRlXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBfc3RhdGVDZGF0YVNlY3Rpb25CcmFja2V0KGNwKSB7XG4gICAgICAgIGlmIChjcCA9PT0gdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLlJJR0hUX1NRVUFSRV9CUkFDS0VUKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuQ0RBVEFfU0VDVElPTl9FTkQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9lbWl0Q2hhcnMoJ10nKTtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5DREFUQV9TRUNUSU9OO1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVDZGF0YVNlY3Rpb24oY3ApO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIENEQVRBIHNlY3Rpb24gZW5kIHN0YXRlXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBfc3RhdGVDZGF0YVNlY3Rpb25FbmQoY3ApIHtcbiAgICAgICAgc3dpdGNoIChjcCkge1xuICAgICAgICAgICAgY2FzZSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuR1JFQVRFUl9USEFOX1NJR046IHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuREFUQTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLlJJR0hUX1NRVUFSRV9CUkFDS0VUOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZW1pdENoYXJzKCddJyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZW1pdENoYXJzKCddXScpO1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5DREFUQV9TRUNUSU9OO1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0YXRlQ2RhdGFTZWN0aW9uKGNwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBDaGFyYWN0ZXIgcmVmZXJlbmNlIHN0YXRlXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBfc3RhdGVDaGFyYWN0ZXJSZWZlcmVuY2UoY3ApIHtcbiAgICAgICAgaWYgKGNwID09PSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuTlVNQkVSX1NJR04pIHtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5OVU1FUklDX0NIQVJBQ1RFUl9SRUZFUkVOQ0U7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNBc2NpaUFscGhhTnVtZXJpYyhjcCkpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5OQU1FRF9DSEFSQUNURVJfUkVGRVJFTkNFO1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVOYW1lZENoYXJhY3RlclJlZmVyZW5jZShjcCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9mbHVzaENvZGVQb2ludENvbnN1bWVkQXNDaGFyYWN0ZXJSZWZlcmVuY2UodW5pY29kZV9qc18xLkNPREVfUE9JTlRTLkFNUEVSU0FORCk7XG4gICAgICAgICAgICB0aGlzLl9yZWNvbnN1bWVJblN0YXRlKHRoaXMucmV0dXJuU3RhdGUsIGNwKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBOYW1lZCBjaGFyYWN0ZXIgcmVmZXJlbmNlIHN0YXRlXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBfc3RhdGVOYW1lZENoYXJhY3RlclJlZmVyZW5jZShjcCkge1xuICAgICAgICBjb25zdCBtYXRjaFJlc3VsdCA9IHRoaXMuX21hdGNoTmFtZWRDaGFyYWN0ZXJSZWZlcmVuY2UoY3ApO1xuICAgICAgICAvL05PVEU6IE1hdGNoaW5nIGNhbiBiZSBhYnJ1cHRlZCBieSBoaWJlcm5hdGlvbi4gSW4gdGhhdCBjYXNlLCBtYXRjaFxuICAgICAgICAvL3Jlc3VsdHMgYXJlIG5vIGxvbmdlciB2YWxpZCBhbmQgd2Ugd2lsbCBuZWVkIHRvIHN0YXJ0IG92ZXIuXG4gICAgICAgIGlmICh0aGlzLl9lbnN1cmVIaWJlcm5hdGlvbigpKSB7XG4gICAgICAgICAgICAvLyBTdGF5IGluIHRoZSBzdGF0ZSwgdHJ5IGFnYWluLlxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG1hdGNoUmVzdWx0KSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1hdGNoUmVzdWx0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZmx1c2hDb2RlUG9pbnRDb25zdW1lZEFzQ2hhcmFjdGVyUmVmZXJlbmNlKG1hdGNoUmVzdWx0W2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSB0aGlzLnJldHVyblN0YXRlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fZmx1c2hDb2RlUG9pbnRDb25zdW1lZEFzQ2hhcmFjdGVyUmVmZXJlbmNlKHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5BTVBFUlNBTkQpO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLkFNQklHVU9VU19BTVBFUlNBTkQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gQW1iaWd1b3MgYW1wZXJzYW5kIHN0YXRlXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICBfc3RhdGVBbWJpZ3VvdXNBbXBlcnNhbmQoY3ApIHtcbiAgICAgICAgaWYgKGlzQXNjaWlBbHBoYU51bWVyaWMoY3ApKSB7XG4gICAgICAgICAgICB0aGlzLl9mbHVzaENvZGVQb2ludENvbnN1bWVkQXNDaGFyYWN0ZXJSZWZlcmVuY2UoY3ApO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKGNwID09PSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuU0VNSUNPTE9OKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZXJyKGVycm9yX2NvZGVzX2pzXzEuRVJSLnVua25vd25OYW1lZENoYXJhY3RlclJlZmVyZW5jZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9yZWNvbnN1bWVJblN0YXRlKHRoaXMucmV0dXJuU3RhdGUsIGNwKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBOdW1lcmljIGNoYXJhY3RlciByZWZlcmVuY2Ugc3RhdGVcbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIF9zdGF0ZU51bWVyaWNDaGFyYWN0ZXJSZWZlcmVuY2UoY3ApIHtcbiAgICAgICAgdGhpcy5jaGFyUmVmQ29kZSA9IDA7XG4gICAgICAgIGlmIChjcCA9PT0gdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLkxBVElOX1NNQUxMX1ggfHwgY3AgPT09IHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5MQVRJTl9DQVBJVEFMX1gpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5IRVhBREVNSUNBTF9DSEFSQUNURVJfUkVGRVJFTkNFX1NUQVJUO1xuICAgICAgICB9XG4gICAgICAgIC8vIElubGluZWQgZGVjaW1hbCBjaGFyYWN0ZXIgcmVmZXJlbmNlIHN0YXJ0IHN0YXRlXG4gICAgICAgIGVsc2UgaWYgKGlzQXNjaWlEaWdpdChjcCkpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5ERUNJTUFMX0NIQVJBQ1RFUl9SRUZFUkVOQ0U7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZURlY2ltYWxDaGFyYWN0ZXJSZWZlcmVuY2UoY3ApO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fZXJyKGVycm9yX2NvZGVzX2pzXzEuRVJSLmFic2VuY2VPZkRpZ2l0c0luTnVtZXJpY0NoYXJhY3RlclJlZmVyZW5jZSk7XG4gICAgICAgICAgICB0aGlzLl9mbHVzaENvZGVQb2ludENvbnN1bWVkQXNDaGFyYWN0ZXJSZWZlcmVuY2UodW5pY29kZV9qc18xLkNPREVfUE9JTlRTLkFNUEVSU0FORCk7XG4gICAgICAgICAgICB0aGlzLl9mbHVzaENvZGVQb2ludENvbnN1bWVkQXNDaGFyYWN0ZXJSZWZlcmVuY2UodW5pY29kZV9qc18xLkNPREVfUE9JTlRTLk5VTUJFUl9TSUdOKTtcbiAgICAgICAgICAgIHRoaXMuX3JlY29uc3VtZUluU3RhdGUodGhpcy5yZXR1cm5TdGF0ZSwgY3ApO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIEhleGFkZW1pY2FsIGNoYXJhY3RlciByZWZlcmVuY2Ugc3RhcnQgc3RhdGVcbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIF9zdGF0ZUhleGFkZW1pY2FsQ2hhcmFjdGVyUmVmZXJlbmNlU3RhcnQoY3ApIHtcbiAgICAgICAgaWYgKGlzQXNjaWlIZXhEaWdpdChjcCkpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5IRVhBREVNSUNBTF9DSEFSQUNURVJfUkVGRVJFTkNFO1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVIZXhhZGVtaWNhbENoYXJhY3RlclJlZmVyZW5jZShjcCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9lcnIoZXJyb3JfY29kZXNfanNfMS5FUlIuYWJzZW5jZU9mRGlnaXRzSW5OdW1lcmljQ2hhcmFjdGVyUmVmZXJlbmNlKTtcbiAgICAgICAgICAgIHRoaXMuX2ZsdXNoQ29kZVBvaW50Q29uc3VtZWRBc0NoYXJhY3RlclJlZmVyZW5jZSh1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuQU1QRVJTQU5EKTtcbiAgICAgICAgICAgIHRoaXMuX2ZsdXNoQ29kZVBvaW50Q29uc3VtZWRBc0NoYXJhY3RlclJlZmVyZW5jZSh1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuTlVNQkVSX1NJR04pO1xuICAgICAgICAgICAgdGhpcy5fdW5jb25zdW1lKDIpO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IHRoaXMucmV0dXJuU3RhdGU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gSGV4YWRlbWljYWwgY2hhcmFjdGVyIHJlZmVyZW5jZSBzdGF0ZVxuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgX3N0YXRlSGV4YWRlbWljYWxDaGFyYWN0ZXJSZWZlcmVuY2UoY3ApIHtcbiAgICAgICAgaWYgKGlzQXNjaWlVcHBlckhleERpZ2l0KGNwKSkge1xuICAgICAgICAgICAgdGhpcy5jaGFyUmVmQ29kZSA9IHRoaXMuY2hhclJlZkNvZGUgKiAxNiArIGNwIC0gMHgzNztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc0FzY2lpTG93ZXJIZXhEaWdpdChjcCkpIHtcbiAgICAgICAgICAgIHRoaXMuY2hhclJlZkNvZGUgPSB0aGlzLmNoYXJSZWZDb2RlICogMTYgKyBjcCAtIDB4NTc7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNBc2NpaURpZ2l0KGNwKSkge1xuICAgICAgICAgICAgdGhpcy5jaGFyUmVmQ29kZSA9IHRoaXMuY2hhclJlZkNvZGUgKiAxNiArIGNwIC0gMHgzMDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjcCA9PT0gdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLlNFTUlDT0xPTikge1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLk5VTUVSSUNfQ0hBUkFDVEVSX1JFRkVSRU5DRV9FTkQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9lcnIoZXJyb3JfY29kZXNfanNfMS5FUlIubWlzc2luZ1NlbWljb2xvbkFmdGVyQ2hhcmFjdGVyUmVmZXJlbmNlKTtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5OVU1FUklDX0NIQVJBQ1RFUl9SRUZFUkVOQ0VfRU5EO1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVOdW1lcmljQ2hhcmFjdGVyUmVmZXJlbmNlRW5kKGNwKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBEZWNpbWFsIGNoYXJhY3RlciByZWZlcmVuY2Ugc3RhdGVcbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIF9zdGF0ZURlY2ltYWxDaGFyYWN0ZXJSZWZlcmVuY2UoY3ApIHtcbiAgICAgICAgaWYgKGlzQXNjaWlEaWdpdChjcCkpIHtcbiAgICAgICAgICAgIHRoaXMuY2hhclJlZkNvZGUgPSB0aGlzLmNoYXJSZWZDb2RlICogMTAgKyBjcCAtIDB4MzA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoY3AgPT09IHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5TRU1JQ09MT04pIHtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTdGF0ZS5OVU1FUklDX0NIQVJBQ1RFUl9SRUZFUkVOQ0VfRU5EO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fZXJyKGVycm9yX2NvZGVzX2pzXzEuRVJSLm1pc3NpbmdTZW1pY29sb25BZnRlckNoYXJhY3RlclJlZmVyZW5jZSk7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuTlVNRVJJQ19DSEFSQUNURVJfUkVGRVJFTkNFX0VORDtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlTnVtZXJpY0NoYXJhY3RlclJlZmVyZW5jZUVuZChjcCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gTnVtZXJpYyBjaGFyYWN0ZXIgcmVmZXJlbmNlIGVuZCBzdGF0ZVxuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgX3N0YXRlTnVtZXJpY0NoYXJhY3RlclJlZmVyZW5jZUVuZChjcCkge1xuICAgICAgICBpZiAodGhpcy5jaGFyUmVmQ29kZSA9PT0gdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLk5VTEwpIHtcbiAgICAgICAgICAgIHRoaXMuX2VycihlcnJvcl9jb2Rlc19qc18xLkVSUi5udWxsQ2hhcmFjdGVyUmVmZXJlbmNlKTtcbiAgICAgICAgICAgIHRoaXMuY2hhclJlZkNvZGUgPSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuUkVQTEFDRU1FTlRfQ0hBUkFDVEVSO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuY2hhclJlZkNvZGUgPiAxMTE0MTExKSB7XG4gICAgICAgICAgICB0aGlzLl9lcnIoZXJyb3JfY29kZXNfanNfMS5FUlIuY2hhcmFjdGVyUmVmZXJlbmNlT3V0c2lkZVVuaWNvZGVSYW5nZSk7XG4gICAgICAgICAgICB0aGlzLmNoYXJSZWZDb2RlID0gdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLlJFUExBQ0VNRU5UX0NIQVJBQ1RFUjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICgoMCwgdW5pY29kZV9qc18xLmlzU3Vycm9nYXRlKSh0aGlzLmNoYXJSZWZDb2RlKSkge1xuICAgICAgICAgICAgdGhpcy5fZXJyKGVycm9yX2NvZGVzX2pzXzEuRVJSLnN1cnJvZ2F0ZUNoYXJhY3RlclJlZmVyZW5jZSk7XG4gICAgICAgICAgICB0aGlzLmNoYXJSZWZDb2RlID0gdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLlJFUExBQ0VNRU5UX0NIQVJBQ1RFUjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICgoMCwgdW5pY29kZV9qc18xLmlzVW5kZWZpbmVkQ29kZVBvaW50KSh0aGlzLmNoYXJSZWZDb2RlKSkge1xuICAgICAgICAgICAgdGhpcy5fZXJyKGVycm9yX2NvZGVzX2pzXzEuRVJSLm5vbmNoYXJhY3RlckNoYXJhY3RlclJlZmVyZW5jZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoKDAsIHVuaWNvZGVfanNfMS5pc0NvbnRyb2xDb2RlUG9pbnQpKHRoaXMuY2hhclJlZkNvZGUpIHx8IHRoaXMuY2hhclJlZkNvZGUgPT09IHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5DQVJSSUFHRV9SRVRVUk4pIHtcbiAgICAgICAgICAgIHRoaXMuX2VycihlcnJvcl9jb2Rlc19qc18xLkVSUi5jb250cm9sQ2hhcmFjdGVyUmVmZXJlbmNlKTtcbiAgICAgICAgICAgIGNvbnN0IHJlcGxhY2VtZW50ID0gQzFfQ09OVFJPTFNfUkVGRVJFTkNFX1JFUExBQ0VNRU5UUy5nZXQodGhpcy5jaGFyUmVmQ29kZSk7XG4gICAgICAgICAgICBpZiAocmVwbGFjZW1lbnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2hhclJlZkNvZGUgPSByZXBsYWNlbWVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9mbHVzaENvZGVQb2ludENvbnN1bWVkQXNDaGFyYWN0ZXJSZWZlcmVuY2UodGhpcy5jaGFyUmVmQ29kZSk7XG4gICAgICAgIHRoaXMuX3JlY29uc3VtZUluU3RhdGUodGhpcy5yZXR1cm5TdGF0ZSwgY3ApO1xuICAgIH1cbn1cbmV4cG9ydHMuVG9rZW5pemVyID0gVG9rZW5pemVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlByZXByb2Nlc3NvciA9IHZvaWQgMDtcbmNvbnN0IHVuaWNvZGVfanNfMSA9IHJlcXVpcmUoXCIuLi9jb21tb24vdW5pY29kZS5qc1wiKTtcbmNvbnN0IGVycm9yX2NvZGVzX2pzXzEgPSByZXF1aXJlKFwiLi4vY29tbW9uL2Vycm9yLWNvZGVzLmpzXCIpO1xuLy9Db25zdFxuY29uc3QgREVGQVVMVF9CVUZGRVJfV0FURVJMSU5FID0gMSA8PCAxNjtcbi8vUHJlcHJvY2Vzc29yXG4vL05PVEU6IEhUTUwgaW5wdXQgcHJlcHJvY2Vzc2luZ1xuLy8oc2VlOiBodHRwOi8vd3d3LndoYXR3Zy5vcmcvc3BlY3Mvd2ViLWFwcHMvY3VycmVudC13b3JrL211bHRpcGFnZS9wYXJzaW5nLmh0bWwjcHJlcHJvY2Vzc2luZy10aGUtaW5wdXQtc3RyZWFtKVxuY2xhc3MgUHJlcHJvY2Vzc29yIHtcbiAgICBjb25zdHJ1Y3RvcihoYW5kbGVyKSB7XG4gICAgICAgIHRoaXMuaGFuZGxlciA9IGhhbmRsZXI7XG4gICAgICAgIHRoaXMuaHRtbCA9ICcnO1xuICAgICAgICB0aGlzLnBvcyA9IC0xO1xuICAgICAgICAvLyBOT1RFOiBJbml0aWFsIGBsYXN0R2FwUG9zYCBpcyAtMiwgdG8gZW5zdXJlIGBjb2xgIG9uIGluaXRpYWxpc2F0aW9uIGlzIDBcbiAgICAgICAgdGhpcy5sYXN0R2FwUG9zID0gLTI7XG4gICAgICAgIHRoaXMuZ2FwU3RhY2sgPSBbXTtcbiAgICAgICAgdGhpcy5za2lwTmV4dE5ld0xpbmUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5sYXN0Q2h1bmtXcml0dGVuID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZW5kT2ZDaHVua0hpdCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmJ1ZmZlcldhdGVybGluZSA9IERFRkFVTFRfQlVGRkVSX1dBVEVSTElORTtcbiAgICAgICAgdGhpcy5pc0VvbCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmxpbmVTdGFydFBvcyA9IDA7XG4gICAgICAgIHRoaXMuZHJvcHBlZEJ1ZmZlclNpemUgPSAwO1xuICAgICAgICB0aGlzLmxpbmUgPSAxO1xuICAgICAgICAvL05PVEU6IGF2b2lkIHJlcG9ydGluZyBlcnJvcnMgdHdpY2Ugb24gYWR2YW5jZS9yZXRyZWF0XG4gICAgICAgIHRoaXMubGFzdEVyck9mZnNldCA9IC0xO1xuICAgIH1cbiAgICAvKiogVGhlIGNvbHVtbiBvbiB0aGUgY3VycmVudCBsaW5lLiBJZiB3ZSBqdXN0IHNhdyBhIGdhcCAoZWcuIGEgc3Vycm9nYXRlIHBhaXIpLCByZXR1cm4gdGhlIGluZGV4IGJlZm9yZS4gKi9cbiAgICBnZXQgY29sKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wb3MgLSB0aGlzLmxpbmVTdGFydFBvcyArIE51bWJlcih0aGlzLmxhc3RHYXBQb3MgIT09IHRoaXMucG9zKTtcbiAgICB9XG4gICAgZ2V0IG9mZnNldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZHJvcHBlZEJ1ZmZlclNpemUgKyB0aGlzLnBvcztcbiAgICB9XG4gICAgZ2V0RXJyb3IoY29kZSkge1xuICAgICAgICBjb25zdCB7IGxpbmUsIGNvbCwgb2Zmc2V0IH0gPSB0aGlzO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY29kZSxcbiAgICAgICAgICAgIHN0YXJ0TGluZTogbGluZSxcbiAgICAgICAgICAgIGVuZExpbmU6IGxpbmUsXG4gICAgICAgICAgICBzdGFydENvbDogY29sLFxuICAgICAgICAgICAgZW5kQ29sOiBjb2wsXG4gICAgICAgICAgICBzdGFydE9mZnNldDogb2Zmc2V0LFxuICAgICAgICAgICAgZW5kT2Zmc2V0OiBvZmZzZXQsXG4gICAgICAgIH07XG4gICAgfVxuICAgIF9lcnIoY29kZSkge1xuICAgICAgICBpZiAodGhpcy5oYW5kbGVyLm9uUGFyc2VFcnJvciAmJiB0aGlzLmxhc3RFcnJPZmZzZXQgIT09IHRoaXMub2Zmc2V0KSB7XG4gICAgICAgICAgICB0aGlzLmxhc3RFcnJPZmZzZXQgPSB0aGlzLm9mZnNldDtcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlci5vblBhcnNlRXJyb3IodGhpcy5nZXRFcnJvcihjb2RlKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX2FkZEdhcCgpIHtcbiAgICAgICAgdGhpcy5nYXBTdGFjay5wdXNoKHRoaXMubGFzdEdhcFBvcyk7XG4gICAgICAgIHRoaXMubGFzdEdhcFBvcyA9IHRoaXMucG9zO1xuICAgIH1cbiAgICBfcHJvY2Vzc1N1cnJvZ2F0ZShjcCkge1xuICAgICAgICAvL05PVEU6IHRyeSB0byBwZWVrIGEgc3Vycm9nYXRlIHBhaXJcbiAgICAgICAgaWYgKHRoaXMucG9zICE9PSB0aGlzLmh0bWwubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgY29uc3QgbmV4dENwID0gdGhpcy5odG1sLmNoYXJDb2RlQXQodGhpcy5wb3MgKyAxKTtcbiAgICAgICAgICAgIGlmICgoMCwgdW5pY29kZV9qc18xLmlzU3Vycm9nYXRlUGFpcikobmV4dENwKSkge1xuICAgICAgICAgICAgICAgIC8vTk9URTogd2UgaGF2ZSBhIHN1cnJvZ2F0ZSBwYWlyLiBQZWVrIHBhaXIgY2hhcmFjdGVyIGFuZCByZWNhbGN1bGF0ZSBjb2RlIHBvaW50LlxuICAgICAgICAgICAgICAgIHRoaXMucG9zKys7XG4gICAgICAgICAgICAgICAgLy9OT1RFOiBhZGQgYSBnYXAgdGhhdCBzaG91bGQgYmUgYXZvaWRlZCBkdXJpbmcgcmV0cmVhdFxuICAgICAgICAgICAgICAgIHRoaXMuX2FkZEdhcCgpO1xuICAgICAgICAgICAgICAgIHJldHVybiAoMCwgdW5pY29kZV9qc18xLmdldFN1cnJvZ2F0ZVBhaXJDb2RlUG9pbnQpKGNwLCBuZXh0Q3ApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vTk9URTogd2UgYXJlIGF0IHRoZSBlbmQgb2YgYSBjaHVuaywgdGhlcmVmb3JlIHdlIGNhbid0IGluZmVyIHRoZSBzdXJyb2dhdGUgcGFpciB5ZXQuXG4gICAgICAgIGVsc2UgaWYgKCF0aGlzLmxhc3RDaHVua1dyaXR0ZW4pIHtcbiAgICAgICAgICAgIHRoaXMuZW5kT2ZDaHVua0hpdCA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm4gdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLkVPRjtcbiAgICAgICAgfVxuICAgICAgICAvL05PVEU6IGlzb2xhdGVkIHN1cnJvZ2F0ZVxuICAgICAgICB0aGlzLl9lcnIoZXJyb3JfY29kZXNfanNfMS5FUlIuc3Vycm9nYXRlSW5JbnB1dFN0cmVhbSk7XG4gICAgICAgIHJldHVybiBjcDtcbiAgICB9XG4gICAgd2lsbERyb3BQYXJzZWRDaHVuaygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucG9zID4gdGhpcy5idWZmZXJXYXRlcmxpbmU7XG4gICAgfVxuICAgIGRyb3BQYXJzZWRDaHVuaygpIHtcbiAgICAgICAgaWYgKHRoaXMud2lsbERyb3BQYXJzZWRDaHVuaygpKSB7XG4gICAgICAgICAgICB0aGlzLmh0bWwgPSB0aGlzLmh0bWwuc3Vic3RyaW5nKHRoaXMucG9zKTtcbiAgICAgICAgICAgIHRoaXMubGluZVN0YXJ0UG9zIC09IHRoaXMucG9zO1xuICAgICAgICAgICAgdGhpcy5kcm9wcGVkQnVmZmVyU2l6ZSArPSB0aGlzLnBvcztcbiAgICAgICAgICAgIHRoaXMucG9zID0gMDtcbiAgICAgICAgICAgIHRoaXMubGFzdEdhcFBvcyA9IC0yO1xuICAgICAgICAgICAgdGhpcy5nYXBTdGFjay5sZW5ndGggPSAwO1xuICAgICAgICB9XG4gICAgfVxuICAgIHdyaXRlKGNodW5rLCBpc0xhc3RDaHVuaykge1xuICAgICAgICBpZiAodGhpcy5odG1sLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMuaHRtbCArPSBjaHVuaztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuaHRtbCA9IGNodW5rO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZW5kT2ZDaHVua0hpdCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmxhc3RDaHVua1dyaXR0ZW4gPSBpc0xhc3RDaHVuaztcbiAgICB9XG4gICAgaW5zZXJ0SHRtbEF0Q3VycmVudFBvcyhjaHVuaykge1xuICAgICAgICB0aGlzLmh0bWwgPSB0aGlzLmh0bWwuc3Vic3RyaW5nKDAsIHRoaXMucG9zICsgMSkgKyBjaHVuayArIHRoaXMuaHRtbC5zdWJzdHJpbmcodGhpcy5wb3MgKyAxKTtcbiAgICAgICAgdGhpcy5lbmRPZkNodW5rSGl0ID0gZmFsc2U7XG4gICAgfVxuICAgIHN0YXJ0c1dpdGgocGF0dGVybiwgY2FzZVNlbnNpdGl2ZSkge1xuICAgICAgICAvLyBDaGVjayBpZiBvdXIgYnVmZmVyIGhhcyBlbm91Z2ggY2hhcmFjdGVyc1xuICAgICAgICBpZiAodGhpcy5wb3MgKyBwYXR0ZXJuLmxlbmd0aCA+IHRoaXMuaHRtbC5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMuZW5kT2ZDaHVua0hpdCA9ICF0aGlzLmxhc3RDaHVua1dyaXR0ZW47XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNhc2VTZW5zaXRpdmUpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmh0bWwuc3RhcnRzV2l0aChwYXR0ZXJuLCB0aGlzLnBvcyk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXR0ZXJuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBjcCA9IHRoaXMuaHRtbC5jaGFyQ29kZUF0KHRoaXMucG9zICsgaSkgfCAweDIwO1xuICAgICAgICAgICAgaWYgKGNwICE9PSBwYXR0ZXJuLmNoYXJDb2RlQXQoaSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHBlZWsob2Zmc2V0KSB7XG4gICAgICAgIGNvbnN0IHBvcyA9IHRoaXMucG9zICsgb2Zmc2V0O1xuICAgICAgICBpZiAocG9zID49IHRoaXMuaHRtbC5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMuZW5kT2ZDaHVua0hpdCA9ICF0aGlzLmxhc3RDaHVua1dyaXR0ZW47XG4gICAgICAgICAgICByZXR1cm4gdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLkVPRjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjb2RlID0gdGhpcy5odG1sLmNoYXJDb2RlQXQocG9zKTtcbiAgICAgICAgcmV0dXJuIGNvZGUgPT09IHVuaWNvZGVfanNfMS5DT0RFX1BPSU5UUy5DQVJSSUFHRV9SRVRVUk4gPyB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuTElORV9GRUVEIDogY29kZTtcbiAgICB9XG4gICAgYWR2YW5jZSgpIHtcbiAgICAgICAgdGhpcy5wb3MrKztcbiAgICAgICAgLy9OT1RFOiBMRiBzaG91bGQgYmUgaW4gdGhlIGxhc3QgY29sdW1uIG9mIHRoZSBsaW5lXG4gICAgICAgIGlmICh0aGlzLmlzRW9sKSB7XG4gICAgICAgICAgICB0aGlzLmlzRW9sID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLmxpbmUrKztcbiAgICAgICAgICAgIHRoaXMubGluZVN0YXJ0UG9zID0gdGhpcy5wb3M7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMucG9zID49IHRoaXMuaHRtbC5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMuZW5kT2ZDaHVua0hpdCA9ICF0aGlzLmxhc3RDaHVua1dyaXR0ZW47XG4gICAgICAgICAgICByZXR1cm4gdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLkVPRjtcbiAgICAgICAgfVxuICAgICAgICBsZXQgY3AgPSB0aGlzLmh0bWwuY2hhckNvZGVBdCh0aGlzLnBvcyk7XG4gICAgICAgIC8vTk9URTogYWxsIFUrMDAwRCBDQVJSSUFHRSBSRVRVUk4gKENSKSBjaGFyYWN0ZXJzIG11c3QgYmUgY29udmVydGVkIHRvIFUrMDAwQSBMSU5FIEZFRUQgKExGKSBjaGFyYWN0ZXJzXG4gICAgICAgIGlmIChjcCA9PT0gdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLkNBUlJJQUdFX1JFVFVSTikge1xuICAgICAgICAgICAgdGhpcy5pc0VvbCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLnNraXBOZXh0TmV3TGluZSA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm4gdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLkxJTkVfRkVFRDtcbiAgICAgICAgfVxuICAgICAgICAvL05PVEU6IGFueSBVKzAwMEEgTElORSBGRUVEIChMRikgY2hhcmFjdGVycyB0aGF0IGltbWVkaWF0ZWx5IGZvbGxvdyBhIFUrMDAwRCBDQVJSSUFHRSBSRVRVUk4gKENSKSBjaGFyYWN0ZXJcbiAgICAgICAgLy9tdXN0IGJlIGlnbm9yZWQuXG4gICAgICAgIGlmIChjcCA9PT0gdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLkxJTkVfRkVFRCkge1xuICAgICAgICAgICAgdGhpcy5pc0VvbCA9IHRydWU7XG4gICAgICAgICAgICBpZiAodGhpcy5za2lwTmV4dE5ld0xpbmUpIHtcbiAgICAgICAgICAgICAgICAvLyBgbGluZWAgd2lsbCBiZSBidW1wZWQgYWdhaW4gaW4gdGhlIHJlY3Vyc2l2ZSBjYWxsLlxuICAgICAgICAgICAgICAgIHRoaXMubGluZS0tO1xuICAgICAgICAgICAgICAgIHRoaXMuc2tpcE5leHROZXdMaW5lID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy5fYWRkR2FwKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuYWR2YW5jZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2tpcE5leHROZXdMaW5lID0gZmFsc2U7XG4gICAgICAgIGlmICgoMCwgdW5pY29kZV9qc18xLmlzU3Vycm9nYXRlKShjcCkpIHtcbiAgICAgICAgICAgIGNwID0gdGhpcy5fcHJvY2Vzc1N1cnJvZ2F0ZShjcCk7XG4gICAgICAgIH1cbiAgICAgICAgLy9PUFRJTUlaQVRJT046IGZpcnN0IGNoZWNrIGlmIGNvZGUgcG9pbnQgaXMgaW4gdGhlIGNvbW1vbiBhbGxvd2VkXG4gICAgICAgIC8vcmFuZ2UgKEFTQ0lJIGFscGhhbnVtZXJpYywgd2hpdGVzcGFjZXMsIGJpZyBjaHVuayBvZiBCTVApXG4gICAgICAgIC8vYmVmb3JlIGdvaW5nIGludG8gZGV0YWlsZWQgcGVyZm9ybWFuY2UgY29zdCB2YWxpZGF0aW9uLlxuICAgICAgICBjb25zdCBpc0NvbW1vblZhbGlkUmFuZ2UgPSB0aGlzLmhhbmRsZXIub25QYXJzZUVycm9yID09PSBudWxsIHx8XG4gICAgICAgICAgICAoY3AgPiAweDFmICYmIGNwIDwgMHg3ZikgfHxcbiAgICAgICAgICAgIGNwID09PSB1bmljb2RlX2pzXzEuQ09ERV9QT0lOVFMuTElORV9GRUVEIHx8XG4gICAgICAgICAgICBjcCA9PT0gdW5pY29kZV9qc18xLkNPREVfUE9JTlRTLkNBUlJJQUdFX1JFVFVSTiB8fFxuICAgICAgICAgICAgKGNwID4gMHg5ZiAmJiBjcCA8IDY0OTc2KTtcbiAgICAgICAgaWYgKCFpc0NvbW1vblZhbGlkUmFuZ2UpIHtcbiAgICAgICAgICAgIHRoaXMuX2NoZWNrRm9yUHJvYmxlbWF0aWNDaGFyYWN0ZXJzKGNwKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY3A7XG4gICAgfVxuICAgIF9jaGVja0ZvclByb2JsZW1hdGljQ2hhcmFjdGVycyhjcCkge1xuICAgICAgICBpZiAoKDAsIHVuaWNvZGVfanNfMS5pc0NvbnRyb2xDb2RlUG9pbnQpKGNwKSkge1xuICAgICAgICAgICAgdGhpcy5fZXJyKGVycm9yX2NvZGVzX2pzXzEuRVJSLmNvbnRyb2xDaGFyYWN0ZXJJbklucHV0U3RyZWFtKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICgoMCwgdW5pY29kZV9qc18xLmlzVW5kZWZpbmVkQ29kZVBvaW50KShjcCkpIHtcbiAgICAgICAgICAgIHRoaXMuX2VycihlcnJvcl9jb2Rlc19qc18xLkVSUi5ub25jaGFyYWN0ZXJJbklucHV0U3RyZWFtKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXRyZWF0KGNvdW50KSB7XG4gICAgICAgIHRoaXMucG9zIC09IGNvdW50O1xuICAgICAgICB3aGlsZSAodGhpcy5wb3MgPCB0aGlzLmxhc3RHYXBQb3MpIHtcbiAgICAgICAgICAgIHRoaXMubGFzdEdhcFBvcyA9IHRoaXMuZ2FwU3RhY2sucG9wKCk7XG4gICAgICAgICAgICB0aGlzLnBvcy0tO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaXNFb2wgPSBmYWxzZTtcbiAgICB9XG59XG5leHBvcnRzLlByZXByb2Nlc3NvciA9IFByZXByb2Nlc3Nvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByZXByb2Nlc3Nvci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZGVmYXVsdFRyZWVBZGFwdGVyID0gdm9pZCAwO1xuY29uc3QgaHRtbF9qc18xID0gcmVxdWlyZShcIi4uL2NvbW1vbi9odG1sLmpzXCIpO1xuZnVuY3Rpb24gY3JlYXRlVGV4dE5vZGUodmFsdWUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBub2RlTmFtZTogJyN0ZXh0JyxcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIHBhcmVudE5vZGU6IG51bGwsXG4gICAgfTtcbn1cbmV4cG9ydHMuZGVmYXVsdFRyZWVBZGFwdGVyID0ge1xuICAgIC8vTm9kZSBjb25zdHJ1Y3Rpb25cbiAgICBjcmVhdGVEb2N1bWVudCgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG5vZGVOYW1lOiAnI2RvY3VtZW50JyxcbiAgICAgICAgICAgIG1vZGU6IGh0bWxfanNfMS5ET0NVTUVOVF9NT0RFLk5PX1FVSVJLUyxcbiAgICAgICAgICAgIGNoaWxkTm9kZXM6IFtdLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG5vZGVOYW1lOiAnI2RvY3VtZW50LWZyYWdtZW50JyxcbiAgICAgICAgICAgIGNoaWxkTm9kZXM6IFtdLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgY3JlYXRlRWxlbWVudCh0YWdOYW1lLCBuYW1lc3BhY2VVUkksIGF0dHJzKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBub2RlTmFtZTogdGFnTmFtZSxcbiAgICAgICAgICAgIHRhZ05hbWUsXG4gICAgICAgICAgICBhdHRycyxcbiAgICAgICAgICAgIG5hbWVzcGFjZVVSSSxcbiAgICAgICAgICAgIGNoaWxkTm9kZXM6IFtdLFxuICAgICAgICAgICAgcGFyZW50Tm9kZTogbnVsbCxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIGNyZWF0ZUNvbW1lbnROb2RlKGRhdGEpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG5vZGVOYW1lOiAnI2NvbW1lbnQnLFxuICAgICAgICAgICAgZGF0YSxcbiAgICAgICAgICAgIHBhcmVudE5vZGU6IG51bGwsXG4gICAgICAgIH07XG4gICAgfSxcbiAgICAvL1RyZWUgbXV0YXRpb25cbiAgICBhcHBlbmRDaGlsZChwYXJlbnROb2RlLCBuZXdOb2RlKSB7XG4gICAgICAgIHBhcmVudE5vZGUuY2hpbGROb2Rlcy5wdXNoKG5ld05vZGUpO1xuICAgICAgICBuZXdOb2RlLnBhcmVudE5vZGUgPSBwYXJlbnROb2RlO1xuICAgIH0sXG4gICAgaW5zZXJ0QmVmb3JlKHBhcmVudE5vZGUsIG5ld05vZGUsIHJlZmVyZW5jZU5vZGUpIHtcbiAgICAgICAgY29uc3QgaW5zZXJ0aW9uSWR4ID0gcGFyZW50Tm9kZS5jaGlsZE5vZGVzLmluZGV4T2YocmVmZXJlbmNlTm9kZSk7XG4gICAgICAgIHBhcmVudE5vZGUuY2hpbGROb2Rlcy5zcGxpY2UoaW5zZXJ0aW9uSWR4LCAwLCBuZXdOb2RlKTtcbiAgICAgICAgbmV3Tm9kZS5wYXJlbnROb2RlID0gcGFyZW50Tm9kZTtcbiAgICB9LFxuICAgIHNldFRlbXBsYXRlQ29udGVudCh0ZW1wbGF0ZUVsZW1lbnQsIGNvbnRlbnRFbGVtZW50KSB7XG4gICAgICAgIHRlbXBsYXRlRWxlbWVudC5jb250ZW50ID0gY29udGVudEVsZW1lbnQ7XG4gICAgfSxcbiAgICBnZXRUZW1wbGF0ZUNvbnRlbnQodGVtcGxhdGVFbGVtZW50KSB7XG4gICAgICAgIHJldHVybiB0ZW1wbGF0ZUVsZW1lbnQuY29udGVudDtcbiAgICB9LFxuICAgIHNldERvY3VtZW50VHlwZShkb2N1bWVudCwgbmFtZSwgcHVibGljSWQsIHN5c3RlbUlkKSB7XG4gICAgICAgIGNvbnN0IGRvY3R5cGVOb2RlID0gZG9jdW1lbnQuY2hpbGROb2Rlcy5maW5kKChub2RlKSA9PiBub2RlLm5vZGVOYW1lID09PSAnI2RvY3VtZW50VHlwZScpO1xuICAgICAgICBpZiAoZG9jdHlwZU5vZGUpIHtcbiAgICAgICAgICAgIGRvY3R5cGVOb2RlLm5hbWUgPSBuYW1lO1xuICAgICAgICAgICAgZG9jdHlwZU5vZGUucHVibGljSWQgPSBwdWJsaWNJZDtcbiAgICAgICAgICAgIGRvY3R5cGVOb2RlLnN5c3RlbUlkID0gc3lzdGVtSWQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBub2RlID0ge1xuICAgICAgICAgICAgICAgIG5vZGVOYW1lOiAnI2RvY3VtZW50VHlwZScsXG4gICAgICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgICAgICBwdWJsaWNJZCxcbiAgICAgICAgICAgICAgICBzeXN0ZW1JZCxcbiAgICAgICAgICAgICAgICBwYXJlbnROb2RlOiBudWxsLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGV4cG9ydHMuZGVmYXVsdFRyZWVBZGFwdGVyLmFwcGVuZENoaWxkKGRvY3VtZW50LCBub2RlKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgc2V0RG9jdW1lbnRNb2RlKGRvY3VtZW50LCBtb2RlKSB7XG4gICAgICAgIGRvY3VtZW50Lm1vZGUgPSBtb2RlO1xuICAgIH0sXG4gICAgZ2V0RG9jdW1lbnRNb2RlKGRvY3VtZW50KSB7XG4gICAgICAgIHJldHVybiBkb2N1bWVudC5tb2RlO1xuICAgIH0sXG4gICAgZGV0YWNoTm9kZShub2RlKSB7XG4gICAgICAgIGlmIChub2RlLnBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgIGNvbnN0IGlkeCA9IG5vZGUucGFyZW50Tm9kZS5jaGlsZE5vZGVzLmluZGV4T2Yobm9kZSk7XG4gICAgICAgICAgICBub2RlLnBhcmVudE5vZGUuY2hpbGROb2Rlcy5zcGxpY2UoaWR4LCAxKTtcbiAgICAgICAgICAgIG5vZGUucGFyZW50Tm9kZSA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGluc2VydFRleHQocGFyZW50Tm9kZSwgdGV4dCkge1xuICAgICAgICBpZiAocGFyZW50Tm9kZS5jaGlsZE5vZGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IHByZXZOb2RlID0gcGFyZW50Tm9kZS5jaGlsZE5vZGVzW3BhcmVudE5vZGUuY2hpbGROb2Rlcy5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgIGlmIChleHBvcnRzLmRlZmF1bHRUcmVlQWRhcHRlci5pc1RleHROb2RlKHByZXZOb2RlKSkge1xuICAgICAgICAgICAgICAgIHByZXZOb2RlLnZhbHVlICs9IHRleHQ7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGV4cG9ydHMuZGVmYXVsdFRyZWVBZGFwdGVyLmFwcGVuZENoaWxkKHBhcmVudE5vZGUsIGNyZWF0ZVRleHROb2RlKHRleHQpKTtcbiAgICB9LFxuICAgIGluc2VydFRleHRCZWZvcmUocGFyZW50Tm9kZSwgdGV4dCwgcmVmZXJlbmNlTm9kZSkge1xuICAgICAgICBjb25zdCBwcmV2Tm9kZSA9IHBhcmVudE5vZGUuY2hpbGROb2Rlc1twYXJlbnROb2RlLmNoaWxkTm9kZXMuaW5kZXhPZihyZWZlcmVuY2VOb2RlKSAtIDFdO1xuICAgICAgICBpZiAocHJldk5vZGUgJiYgZXhwb3J0cy5kZWZhdWx0VHJlZUFkYXB0ZXIuaXNUZXh0Tm9kZShwcmV2Tm9kZSkpIHtcbiAgICAgICAgICAgIHByZXZOb2RlLnZhbHVlICs9IHRleHQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBleHBvcnRzLmRlZmF1bHRUcmVlQWRhcHRlci5pbnNlcnRCZWZvcmUocGFyZW50Tm9kZSwgY3JlYXRlVGV4dE5vZGUodGV4dCksIHJlZmVyZW5jZU5vZGUpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBhZG9wdEF0dHJpYnV0ZXMocmVjaXBpZW50LCBhdHRycykge1xuICAgICAgICBjb25zdCByZWNpcGllbnRBdHRyc01hcCA9IG5ldyBTZXQocmVjaXBpZW50LmF0dHJzLm1hcCgoYXR0cikgPT4gYXR0ci5uYW1lKSk7XG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgYXR0cnMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIGlmICghcmVjaXBpZW50QXR0cnNNYXAuaGFzKGF0dHJzW2pdLm5hbWUpKSB7XG4gICAgICAgICAgICAgICAgcmVjaXBpZW50LmF0dHJzLnB1c2goYXR0cnNbal0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcbiAgICAvL1RyZWUgdHJhdmVyc2luZ1xuICAgIGdldEZpcnN0Q2hpbGQobm9kZSkge1xuICAgICAgICByZXR1cm4gbm9kZS5jaGlsZE5vZGVzWzBdO1xuICAgIH0sXG4gICAgZ2V0Q2hpbGROb2Rlcyhub2RlKSB7XG4gICAgICAgIHJldHVybiBub2RlLmNoaWxkTm9kZXM7XG4gICAgfSxcbiAgICBnZXRQYXJlbnROb2RlKG5vZGUpIHtcbiAgICAgICAgcmV0dXJuIG5vZGUucGFyZW50Tm9kZTtcbiAgICB9LFxuICAgIGdldEF0dHJMaXN0KGVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQuYXR0cnM7XG4gICAgfSxcbiAgICAvL05vZGUgZGF0YVxuICAgIGdldFRhZ05hbWUoZWxlbWVudCkge1xuICAgICAgICByZXR1cm4gZWxlbWVudC50YWdOYW1lO1xuICAgIH0sXG4gICAgZ2V0TmFtZXNwYWNlVVJJKGVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQubmFtZXNwYWNlVVJJO1xuICAgIH0sXG4gICAgZ2V0VGV4dE5vZGVDb250ZW50KHRleHROb2RlKSB7XG4gICAgICAgIHJldHVybiB0ZXh0Tm9kZS52YWx1ZTtcbiAgICB9LFxuICAgIGdldENvbW1lbnROb2RlQ29udGVudChjb21tZW50Tm9kZSkge1xuICAgICAgICByZXR1cm4gY29tbWVudE5vZGUuZGF0YTtcbiAgICB9LFxuICAgIGdldERvY3VtZW50VHlwZU5vZGVOYW1lKGRvY3R5cGVOb2RlKSB7XG4gICAgICAgIHJldHVybiBkb2N0eXBlTm9kZS5uYW1lO1xuICAgIH0sXG4gICAgZ2V0RG9jdW1lbnRUeXBlTm9kZVB1YmxpY0lkKGRvY3R5cGVOb2RlKSB7XG4gICAgICAgIHJldHVybiBkb2N0eXBlTm9kZS5wdWJsaWNJZDtcbiAgICB9LFxuICAgIGdldERvY3VtZW50VHlwZU5vZGVTeXN0ZW1JZChkb2N0eXBlTm9kZSkge1xuICAgICAgICByZXR1cm4gZG9jdHlwZU5vZGUuc3lzdGVtSWQ7XG4gICAgfSxcbiAgICAvL05vZGUgdHlwZXNcbiAgICBpc1RleHROb2RlKG5vZGUpIHtcbiAgICAgICAgcmV0dXJuIG5vZGUubm9kZU5hbWUgPT09ICcjdGV4dCc7XG4gICAgfSxcbiAgICBpc0NvbW1lbnROb2RlKG5vZGUpIHtcbiAgICAgICAgcmV0dXJuIG5vZGUubm9kZU5hbWUgPT09ICcjY29tbWVudCc7XG4gICAgfSxcbiAgICBpc0RvY3VtZW50VHlwZU5vZGUobm9kZSkge1xuICAgICAgICByZXR1cm4gbm9kZS5ub2RlTmFtZSA9PT0gJyNkb2N1bWVudFR5cGUnO1xuICAgIH0sXG4gICAgaXNFbGVtZW50Tm9kZShub2RlKSB7XG4gICAgICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobm9kZSwgJ3RhZ05hbWUnKTtcbiAgICB9LFxuICAgIC8vIFNvdXJjZSBjb2RlIGxvY2F0aW9uXG4gICAgc2V0Tm9kZVNvdXJjZUNvZGVMb2NhdGlvbihub2RlLCBsb2NhdGlvbikge1xuICAgICAgICBub2RlLnNvdXJjZUNvZGVMb2NhdGlvbiA9IGxvY2F0aW9uO1xuICAgIH0sXG4gICAgZ2V0Tm9kZVNvdXJjZUNvZGVMb2NhdGlvbihub2RlKSB7XG4gICAgICAgIHJldHVybiBub2RlLnNvdXJjZUNvZGVMb2NhdGlvbjtcbiAgICB9LFxuICAgIHVwZGF0ZU5vZGVTb3VyY2VDb2RlTG9jYXRpb24obm9kZSwgZW5kTG9jYXRpb24pIHtcbiAgICAgICAgbm9kZS5zb3VyY2VDb2RlTG9jYXRpb24gPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIG5vZGUuc291cmNlQ29kZUxvY2F0aW9uKSwgZW5kTG9jYXRpb24pO1xuICAgIH0sXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVmYXVsdC5qcy5tYXAiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHRsb2FkZWQ6IGZhbHNlLFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcblx0bW9kdWxlLmxvYWRlZCA9IHRydWU7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubm1kID0gKG1vZHVsZSkgPT4ge1xuXHRtb2R1bGUucGF0aHMgPSBbXTtcblx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRyZXR1cm4gbW9kdWxlO1xufTsiLCJ2YXIgc2NyaXB0VXJsO1xuaWYgKF9fd2VicGFja19yZXF1aXJlX18uZy5pbXBvcnRTY3JpcHRzKSBzY3JpcHRVcmwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcubG9jYXRpb24gKyBcIlwiO1xudmFyIGRvY3VtZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmRvY3VtZW50O1xuaWYgKCFzY3JpcHRVcmwgJiYgZG9jdW1lbnQpIHtcblx0aWYgKGRvY3VtZW50LmN1cnJlbnRTY3JpcHQpXG5cdFx0c2NyaXB0VXJsID0gZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmM7XG5cdGlmICghc2NyaXB0VXJsKSB7XG5cdFx0dmFyIHNjcmlwdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKTtcblx0XHRpZihzY3JpcHRzLmxlbmd0aCkge1xuXHRcdFx0dmFyIGkgPSBzY3JpcHRzLmxlbmd0aCAtIDE7XG5cdFx0XHR3aGlsZSAoaSA+IC0xICYmICghc2NyaXB0VXJsIHx8ICEvXmh0dHAocz8pOi8udGVzdChzY3JpcHRVcmwpKSkgc2NyaXB0VXJsID0gc2NyaXB0c1tpLS1dLnNyYztcblx0XHR9XG5cdH1cbn1cbi8vIFdoZW4gc3VwcG9ydGluZyBicm93c2VycyB3aGVyZSBhbiBhdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIHlvdSBtdXN0IHNwZWNpZnkgYW4gb3V0cHV0LnB1YmxpY1BhdGggbWFudWFsbHkgdmlhIGNvbmZpZ3VyYXRpb25cbi8vIG9yIHBhc3MgYW4gZW1wdHkgc3RyaW5nIChcIlwiKSBhbmQgc2V0IHRoZSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyB2YXJpYWJsZSBmcm9tIHlvdXIgY29kZSB0byB1c2UgeW91ciBvd24gbG9naWMuXG5pZiAoIXNjcmlwdFVybCkgdGhyb3cgbmV3IEVycm9yKFwiQXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGJyb3dzZXJcIik7XG5zY3JpcHRVcmwgPSBzY3JpcHRVcmwucmVwbGFjZSgvIy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcPy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcL1teXFwvXSskLywgXCIvXCIpO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5wID0gc2NyaXB0VXJsOyIsIl9fd2VicGFja19yZXF1aXJlX18ubmMgPSB1bmRlZmluZWQ7IiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL05vdGlmaWNhdGlvbnMuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5vcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vTm90aWZpY2F0aW9ucy5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCIvLyBzcmMvTm90aWZpY2F0aW9ucy9Ob3RpZmljYXRpb25JdGVtLmpzXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5cbmZ1bmN0aW9uIE5vdGlmaWNhdGlvbkl0ZW0oeyB0eXBlLCB2YWx1ZSwgaHRtbCB9KSB7XG4gIGlmIChodG1sKSB7XG4gICAgcmV0dXJuIDxsaSBkYXRhLW5vdGlmaWNhdGlvbi10eXBlPXt0eXBlfSBkYW5nZXJvdXNseVNldElubmVySFRNTD17aHRtbH0gLz47XG4gIH1cbiAgcmV0dXJuIDxsaSBkYXRhLW5vdGlmaWNhdGlvbi10eXBlPXt0eXBlfT57dmFsdWV9PC9saT47XG59XG5cbk5vdGlmaWNhdGlvbkl0ZW0ucHJvcFR5cGVzID0ge1xuICB0eXBlOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIHZhbHVlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBodG1sOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIF9faHRtbDogUHJvcFR5cGVzLnN0cmluZyxcbiAgfSksXG59O1xuXG5Ob3RpZmljYXRpb25JdGVtLmRlZmF1bHRQcm9wcyA9IHtcbiAgdHlwZTogXCJkZWZhdWx0XCIsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBOb3RpZmljYXRpb25JdGVtO1xuIiwiLy8gc3JjL05vdGlmaWNhdGlvbnMvTm90aWZpY2F0aW9uc0l0ZW1TaGFwZS5qc1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuXG5leHBvcnQgY29uc3QgTm90aWZpY2F0aW9uSXRlbVNoYXBlID0gUHJvcFR5cGVzLnNoYXBlKHtcbiAgaWQ6IFByb3BUeXBlcy5udW1iZXIuaXNSZXF1aXJlZCxcbiAgaHRtbDogUHJvcFR5cGVzLnNoYXBlKHsgX19odG1sOiBQcm9wVHlwZXMuc3RyaW5nIH0pLFxuICB0eXBlOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIHZhbHVlOiBQcm9wVHlwZXMuc3RyaW5nLFxufSk7XG4iLCIvLyBzcmMvTm90aWZpY2F0aW9ucy9Ob3RpZmljYXRpb25zLmpzXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgXCIuL05vdGlmaWNhdGlvbnMuY3NzXCI7XG5pbXBvcnQgTm90aWZpY2F0aW9uSXRlbSBmcm9tIFwiLi9Ob3RpZmljYXRpb25JdGVtXCI7XG5pbXBvcnQgUHJvcFR5cGVzLCB7IG9uZU9mIH0gZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCB7IE5vdGlmaWNhdGlvbkl0ZW1TaGFwZSB9IGZyb20gXCIuL05vdGlmaWNhdGlvbkl0ZW1TaGFwZVwiO1xuXG5mdW5jdGlvbiBOb3RpZmljYXRpb25zKHsgbGlzdE5vdGlmaWNhdGlvbnMgPSBbXSwgZGlzcGxheURyYXdlciA9IGZhbHNlIH0pIHtcbiAgLy8gZnVuY3Rpb24gdG8gaGFuZGxlIGJ1dHRvbiBjbGlja1xuICBmdW5jdGlvbiBoYW5kbGVDbGljaygpIHtcbiAgICBjb25zb2xlLmxvZyhcIkNsb3NlIGJ1dHRvbiBoYXMgYmVlbiBjbGlja2VkXCIpO1xuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPGRpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtZW51SXRlbVwiPllvdXIgbm90aWZpY2F0aW9uczwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICB7ZGlzcGxheURyYXdlciAmJiAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiTm90aWZpY2F0aW9uc1wiPlxuICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgIGZsb2F0OiBcInJpZ2h0XCIsXG4gICAgICAgICAgICAgIGJvcmRlcjogXCJub25lXCIsXG4gICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogXCJ3aGl0ZVwiLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIGFyaWEtbGFiZWw9XCJDbG9zZVwiXG4gICAgICAgICAgICBvbkNsaWNrPXtoYW5kbGVDbGlja31cbiAgICAgICAgICA+XG4gICAgICAgICAgICBYXG4gICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgPHA+SGVyZSBpcyB0aGUgbGlzdCBvZiBub3RpZmljYXRpb25zPC9wPlxuICAgICAgICAgIDx1bD5cbiAgICAgICAgICAgIHtsaXN0Tm90aWZpY2F0aW9ucy5sZW5ndGggPT09IDAgPyAoXG4gICAgICAgICAgICAgIDxOb3RpZmljYXRpb25JdGVtIHZhbHVlPVwiTm8gbmV3IG5vdGlmaWNhdGlvbiBmb3Igbm93XCIgLz5cbiAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgIGxpc3ROb3RpZmljYXRpb25zLm1hcCgobm90aWZpY2F0aW9uKSA9PiAoXG4gICAgICAgICAgICAgICAgPE5vdGlmaWNhdGlvbkl0ZW1cbiAgICAgICAgICAgICAgICAgIGtleT17bm90aWZpY2F0aW9uLmlkfVxuICAgICAgICAgICAgICAgICAgdHlwZT17bm90aWZpY2F0aW9uLnR5cGV9XG4gICAgICAgICAgICAgICAgICB2YWx1ZT17bm90aWZpY2F0aW9uLnZhbHVlfVxuICAgICAgICAgICAgICAgICAgaHRtbD17bm90aWZpY2F0aW9uLmh0bWx9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgKSlcbiAgICAgICAgICAgICl9XG4gICAgICAgICAgPC91bD5cbiAgICAgICAgPC9kaXY+XG4gICAgICApfVxuICAgIDwvPlxuICApO1xufVxuXG5Ob3RpZmljYXRpb25zLnByb3BUeXBlcyA9IHtcbiAgZGlzcGxheURyYXdlcjogUHJvcFR5cGVzLmJvb2wsXG4gIGxpc3ROb3RpZmljYXRpb25zOiBvbmVPZihbXG4gICAgUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnNoYXBlKE5vdGlmaWNhdGlvbkl0ZW1TaGFwZSkpLFxuICAgIFByb3BUeXBlcy5hcnJheU9mKE5vdGlmaWNhdGlvbkl0ZW1TaGFwZSksXG4gIF0pLFxufTtcblxuTm90aWZpY2F0aW9ucy5kZWZhdWx0UHJvcHMgPSB7XG4gIGRpc3BsYXlEcmF3ZXI6IGZhbHNlLFxuICBsaXN0Tm90aWZpY2F0aW9uczogW10sXG59O1xuXG5leHBvcnQgZGVmYXVsdCBOb3RpZmljYXRpb25zO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0hlYWRlci5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcbm9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9IZWFkZXIuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImU5YTZmMjdiMDVlMjg2M2VmOTJkZjNkNDE0MmUxZDdlLmpwZ1wiOyIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBcIi4vSGVhZGVyLmNzc1wiO1xuaW1wb3J0IGxvZ28gZnJvbSBcIi4uL2Fzc2V0cy9ob2xiZXJ0b25fbG9nby5qcGdcIjtcblxuZnVuY3Rpb24gSGVhZGVyKCkge1xuICByZXR1cm4gKFxuICAgIDxoZWFkZXIgY2xhc3NOYW1lPVwiQXBwLWhlYWRlclwiPlxuICAgICAgPGltZyBzcmM9e2xvZ299IGNsYXNzTmFtZT1cIkFwcC1sb2dvXCIgYWx0PVwibG9nb1wiIC8+XG4gICAgICA8aDEgY2xhc3NOYW1lPVwiaGVhZGVyXCI+U2Nob29sIERhc2hib2FyZDwvaDE+XG4gICAgPC9oZWFkZXI+XG4gICk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IEhlYWRlcjtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9Mb2dpbi5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcbm9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9Mb2dpbi5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgXCIuL0xvZ2luLmNzc1wiO1xuXG5mdW5jdGlvbiBMb2dpbigpIHtcbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPGJvZHkgY2xhc3NOYW1lPVwiQXBwLWJvZHlcIj5cbiAgICAgICAgPHA+TG9naW4gdG8gYWNjZXNzIHRoZSBmdWxsIGRhc2hib2FyZDwvcD5cbiAgICAgICAgPGRpdj5cbiAgICAgICAgICA8bGFiZWxcbiAgICAgICAgICAgIGh0bWxGb3I9XCJlbWFpbFwiXG4gICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImVtYWlsXCIpLmZvY3VzKCl9XG4gICAgICAgICAgPlxuICAgICAgICAgICAgRW1haWw6XG4gICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICA8aW5wdXQgdHlwZT1cImVtYWlsXCIgaWQ9XCJlbWFpbFwiIG5hbWU9XCJlbWFpbFwiIGF1dG9Db21wbGV0ZT1cIm9uXCIgLz5cblxuICAgICAgICAgIDxsYWJlbFxuICAgICAgICAgICAgaHRtbEZvcj1cInBhc3N3b3JkXCJcbiAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicGFzc3dvcmRcIikuZm9jdXMoKX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICBQYXNzd29yZDpcbiAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgdHlwZT1cInBhc3N3b3JkXCJcbiAgICAgICAgICAgIGlkPVwicGFzc3dvcmRcIlxuICAgICAgICAgICAgbmFtZT1cInBhc3N3b3JkXCJcbiAgICAgICAgICAgIGF1dG9Db21wbGV0ZT1cIm9mZlwiXG4gICAgICAgICAgLz5cbiAgICAgICAgICA8YnV0dG9uPk9LPC9idXR0b24+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9ib2R5PlxuICAgIDwvPlxuICApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBMb2dpbjtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9Gb290ZXIuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5vcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vRm9vdGVyLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsIi8vIHRhc2tfMS9kYXNoYm9hcmQvc3JjL3V0aWxzLmpzXG5cbi8vIGZ1bmN0aW9uIGdldHMgZnVsbCB5ZWFyXG5leHBvcnQgZnVuY3Rpb24gZ2V0RnVsbFllYXIoKSB7XG4gIHJldHVybiBuZXcgRGF0ZSgpLmdldEZ1bGxZZWFyKCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRGb290ZXJDb3B5KGlzSW5kZXgpIHtcbiAgaWYgKGlzSW5kZXgpIHtcbiAgICByZXR1cm4gXCJIb2xiZXJ0b24gU2Nob29sXCI7IC8vIHRydWVcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gXCJIb2xiZXJ0b24gU2Nob29sIG1haW4gZGFzaGJvYXJkXCI7IC8vIGZhbHNlXG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldExhdGVzdE5vdGlmaWNhdGlvbigpIHtcbiAgcmV0dXJuIFwiPHN0cm9uZz5VcmdlbnQgcmVxdWlyZW1lbnQ8L3N0cm9uZz4gLSBjb21wbGV0ZSBieSBFT0RcIjtcbn1cbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBcIi4vRm9vdGVyLmNzc1wiO1xuaW1wb3J0IHsgZ2V0RnVsbFllYXIsIGdldEZvb3RlckNvcHkgfSBmcm9tIFwiLi4vdXRpbHMvdXRpbHNcIjtcblxuZnVuY3Rpb24gRm9vdGVyKCkge1xuICByZXR1cm4gKFxuICAgIDxmb290ZXIgY2xhc3NOYW1lPVwiQXBwLWZvb3RlclwiPlxuICAgICAgPHA+e2dldEZvb3RlckNvcHkoZmFsc2UpfTwvcD5cbiAgICAgIDxwPlxuICAgICAgICBDb3B5cmlnaHQge2dldEZ1bGxZZWFyKCl9IC0ge2dldEZvb3RlckNvcHkodHJ1ZSl9XG4gICAgICA8L3A+XG4gICAgPC9mb290ZXI+XG4gICk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IEZvb3RlcjtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcblxuZnVuY3Rpb24gQ291cnNlTGlzdFJvdyh7IGlzSGVhZGVyLCB0ZXh0Rmlyc3RDZWxsLCB0ZXh0U2Vjb25kQ2VsbCA9IG51bGwgfSkge1xuICBpZiAoaXNIZWFkZXIpIHtcbiAgICBpZiAodGV4dFNlY29uZENlbGwgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDx0cj5cbiAgICAgICAgICA8dGggY29sU3Bhbj1cIjJcIj57dGV4dEZpcnN0Q2VsbH08L3RoPlxuICAgICAgICA8L3RyPlxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPHRyPlxuICAgICAgICAgIDx0aD57dGV4dEZpcnN0Q2VsbH08L3RoPlxuICAgICAgICAgIDx0aD57dGV4dFNlY29uZENlbGx9PC90aD5cbiAgICAgICAgPC90cj5cbiAgICAgICk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiAoXG4gICAgICA8dHI+XG4gICAgICAgIDx0ZD57dGV4dEZpcnN0Q2VsbH08L3RkPlxuICAgICAgICA8dGQ+e3RleHRTZWNvbmRDZWxsfTwvdGQ+XG4gICAgICA8L3RyPlxuICAgICk7XG4gIH1cbn1cblxuQ291cnNlTGlzdFJvdy5wcm9wVHlwZXMgPSB7XG4gIGlzSGVhZGVyOiBQcm9wVHlwZXMuYm9vbCxcbiAgdGV4dEZpcnN0Q2VsbDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICB0ZXh0U2Vjb25kQ2VsbDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm51bWJlcl0pLFxufTtcblxuQ291cnNlTGlzdFJvdy5kZWZhdWx0UHJvcHMgPSB7XG4gIGlzSGVhZGVyOiBmYWxzZSxcbiAgdGV4dFNlY29uZENlbGw6IG51bGwsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBDb3Vyc2VMaXN0Um93O1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0NvdXJzZUxpc3QuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5vcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vQ291cnNlTGlzdC5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5cbmV4cG9ydCBjb25zdCBDb3Vyc2VTaGFwZSA9IFByb3BUeXBlcy5zaGFwZSh7XG4gIGlkOiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXG4gIG5hbWU6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgY3JlZGl0OiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXG59KTtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBDb3Vyc2VMaXN0Um93IGZyb20gXCIuL0NvdXJzZUxpc3RSb3dcIjtcbmltcG9ydCBcIi4vQ291cnNlTGlzdC5jc3NcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCB7IENvdXJzZVNoYXBlIH0gZnJvbSBcIi4vQ291cnNlU2hhcGVcIjtcblxuZnVuY3Rpb24gQ291cnNlTGlzdCh7IGxpc3RDb3Vyc2VzID0gW10gfSkge1xuICByZXR1cm4gKFxuICAgIDx0YWJsZSBpZD1cIkNvdXJzZUxpc3RcIj5cbiAgICAgIDx0aGVhZD5cbiAgICAgICAgPENvdXJzZUxpc3RSb3cgaXNIZWFkZXIgdGV4dEZpcnN0Q2VsbD1cIkF2YWlsYWJsZSBjb3Vyc2VzXCIgLz5cbiAgICAgICAgPENvdXJzZUxpc3RSb3dcbiAgICAgICAgICBpc0hlYWRlclxuICAgICAgICAgIHRleHRGaXJzdENlbGw9XCJDb3Vyc2UgbmFtZVwiXG4gICAgICAgICAgdGV4dFNlY29uZENlbGw9XCJDcmVkaXRcIlxuICAgICAgICAvPlxuICAgICAgPC90aGVhZD5cbiAgICAgIDx0Ym9keT5cbiAgICAgICAge2xpc3RDb3Vyc2VzLmxlbmd0aCA9PT0gMCA/IChcbiAgICAgICAgICA8Q291cnNlTGlzdFJvdyB0ZXh0Rmlyc3RDZWxsPVwiTm8gY291cnNlIGF2YWlsYWJsZSB5ZXRcIiAvPlxuICAgICAgICApIDogKFxuICAgICAgICAgIGxpc3RDb3Vyc2VzLm1hcCgoY291cnNlKSA9PiAoXG4gICAgICAgICAgICA8Q291cnNlTGlzdFJvd1xuICAgICAgICAgICAgICBrZXk9e2NvdXJzZS5pZH1cbiAgICAgICAgICAgICAgdGV4dEZpcnN0Q2VsbD17Y291cnNlLm5hbWV9XG4gICAgICAgICAgICAgIHRleHRTZWNvbmRDZWxsPXtjb3Vyc2UuY3JlZGl0fVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApKVxuICAgICAgICApfVxuICAgICAgPC90Ym9keT5cbiAgICA8L3RhYmxlPlxuICApO1xufVxuXG5Db3Vyc2VMaXN0LnByb3BUeXBlcyA9IHtcbiAgbGlzdENvdXJzZXM6IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5zaGFwZShDb3Vyc2VTaGFwZSkpLmlzUmVxdWlyZWQsXG59O1xuXG5Db3Vyc2VMaXN0LmRlZmF1bHRQcm9wcyA9IHtcbiAgbGlzdENvdXJzZXM6IFtdLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgQ291cnNlTGlzdDtcbiIsIi8vIHNyYy9jb21wb25lbnRzL0JvZHlTZWN0aW9uLmpzXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5cbmNsYXNzIEJvZHlTZWN0aW9uIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgdGl0bGUsIGNoaWxkcmVuIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYm9keVNlY3Rpb25cIj5cbiAgICAgICAgPGgyPnt0aXRsZX08L2gyPlxuICAgICAgICB7Y2hpbGRyZW59XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG5cbkJvZHlTZWN0aW9uLnByb3BUeXBlcyA9IHtcbiAgdGl0bGU6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgQm9keVNlY3Rpb247XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vQm9keVNlY3Rpb25XaXRoTWFyZ2luQm90dG9tLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xub3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0JvZHlTZWN0aW9uV2l0aE1hcmdpbkJvdHRvbS5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCIvLyBzcmMvQm9keVNlY3Rpb24vQm9keVNlY3Rpb25XaXRoTWFyZ2luQm90dG9tLmpzXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgQm9keVNlY3Rpb24gZnJvbSBcIi4vQm9keVNlY3Rpb25cIjtcbmltcG9ydCBcIi4vQm9keVNlY3Rpb25XaXRoTWFyZ2luQm90dG9tLmNzc1wiOyAvLyBFbnN1cmUgdGhlIENTUyBmaWxlIGlzIGNyZWF0ZWQgYW5kIGltcG9ydGVkXG5cbmZ1bmN0aW9uIEJvZHlTZWN0aW9uV2l0aE1hcmdpbkJvdHRvbShwcm9wcykge1xuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwiYm9keVNlY3Rpb25XaXRoTWFyZ2luXCI+XG4gICAgICA8Qm9keVNlY3Rpb24gey4uLnByb3BzfSAvPlxuICAgIDwvZGl2PlxuICApO1xufVxuXG5Cb2R5U2VjdGlvbldpdGhNYXJnaW5Cb3R0b20ucHJvcFR5cGVzID0ge1xuICAuLi5Cb2R5U2VjdGlvbi5wcm9wVHlwZXMsIC8vIFJldXNlIHByb3BUeXBlcyBmcm9tIEJvZHlTZWN0aW9uXG59O1xuXG5leHBvcnQgZGVmYXVsdCBCb2R5U2VjdGlvbldpdGhNYXJnaW5Cb3R0b207XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vQXBwLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xub3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0FwcC5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCB7IG1vdW50IH0gZnJvbSBcImVuenltZVwiO1xuaW1wb3J0IE5vdGlmaWNhdGlvbnMgZnJvbSBcIi4uL05vdGlmaWNhdGlvbnMvTm90aWZpY2F0aW9uc1wiO1xuaW1wb3J0IEhlYWRlciBmcm9tIFwiLi4vSGVhZGVyL0hlYWRlclwiO1xuaW1wb3J0IExvZ2luIGZyb20gXCIuLi9Mb2dpbi9Mb2dpblwiO1xuaW1wb3J0IEZvb3RlciBmcm9tIFwiLi4vRm9vdGVyL0Zvb3RlclwiO1xuaW1wb3J0IENvdXJzZUxpc3QgZnJvbSBcIi4uL0NvdXJzZUxpc3QvQ291cnNlTGlzdFwiO1xuaW1wb3J0IEJvZHlTZWN0aW9uIGZyb20gXCIuLi9Cb2R5U2VjdGlvbi9Cb2R5U2VjdGlvblwiO1xuaW1wb3J0IEJvZHlTZWN0aW9uV2l0aE1hcmdpbkJvdHRvbSBmcm9tIFwiLi4vQm9keVNlY3Rpb24vQm9keVNlY3Rpb25XaXRoTWFyZ2luQm90dG9tXCI7XG5cbmltcG9ydCB7IGdldExhdGVzdE5vdGlmaWNhdGlvbiB9IGZyb20gXCIuLi91dGlscy91dGlsc1wiO1xuXG5pbXBvcnQgXCIuL0FwcC5jc3NcIjtcblxuZXhwb3J0IGNvbnN0IGxpc3RDb3Vyc2VzID0gW1xuICB7IGlkOiAxLCBuYW1lOiBcIkVTNlwiLCBjcmVkaXQ6IDYwIH0sXG4gIHsgaWQ6IDIsIG5hbWU6IFwiV2VicGFja1wiLCBjcmVkaXQ6IDIwIH0sXG4gIHsgaWQ6IDMsIG5hbWU6IFwiUmVhY3RcIiwgY3JlZGl0OiA0MCB9LFxuXTtcblxuZXhwb3J0IGNvbnN0IGxpc3ROb3RpZmljYXRpb25zID0gW1xuICB7IGlkOiAxLCB0eXBlOiBcImRlZmF1bHRcIiwgdmFsdWU6IFwiTmV3IGNvdXJzZSBhdmFpbGFibGVcIiB9LFxuICB7IGlkOiAyLCB0eXBlOiBcInVyZ2VudFwiLCB2YWx1ZTogXCJOZXcgcmVzdW1lIGF2YWlsYWJsZVwiIH0sXG4gIHsgaWQ6IDMsIHR5cGU6IFwidXJnZW50XCIsIGh0bWw6IHsgX19odG1sOiBnZXRMYXRlc3ROb3RpZmljYXRpb24oKSB9IH0sXG5dO1xuXG5jbGFzcyBBcHAgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCB0aGlzLmhhbmRsZUtleVByZXNzKTtcbiAgICBjb25zb2xlLmxvZyhcIkNvbXBvbmVudCBkaWQgbW91bnRcIik7XG4gIH1cblxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCB0aGlzLmhhbmRsZUtleVByZXNzKTtcbiAgICBjb25zb2xlLmxvZyhcIlVubW91bnRpbmdcIik7XG4gIH1cblxuICBoYW5kbGVLZXlQcmVzcyA9IChldmVudCkgPT4ge1xuICAgIGlmIChldmVudC5jdHJsS2V5ICYmIGV2ZW50LmtleSA9PT0gXCJoXCIpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBhbGVydChcIkxvZ2dpbmcgeW91IG91dFwiKTtcbiAgICAgIHRoaXMucHJvcHMubG9nT3V0KCk7XG4gICAgfVxuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGlzTG9nZ2VkSW4gfSA9IHRoaXMucHJvcHM7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPD5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJBcHBcIj5cbiAgICAgICAgICA8Tm90aWZpY2F0aW9ucyBsaXN0Tm90aWZpY2F0aW9ucz17bGlzdE5vdGlmaWNhdGlvbnN9IC8+XG4gICAgICAgICAgPEhlYWRlciAvPlxuICAgICAgICAgIHtpc0xvZ2dlZEluID8gKFxuICAgICAgICAgICAgPEJvZHlTZWN0aW9uV2l0aE1hcmdpbkJvdHRvbSB0aXRsZT1cIkNvdXJzZSBMaXN0XCI+XG4gICAgICAgICAgICAgIDxDb3Vyc2VMaXN0IGxpc3RDb3Vyc2VzPXtsaXN0Q291cnNlc30gLz5cbiAgICAgICAgICAgIDwvQm9keVNlY3Rpb25XaXRoTWFyZ2luQm90dG9tPlxuICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICA8Qm9keVNlY3Rpb25XaXRoTWFyZ2luQm90dG9tIHRpdGxlPVwiTG9nIGluIHRvIGNvbnRpbnVlXCI+XG4gICAgICAgICAgICAgIDxMb2dpbiAvPlxuICAgICAgICAgICAgPC9Cb2R5U2VjdGlvbldpdGhNYXJnaW5Cb3R0b20+XG4gICAgICAgICAgKX1cbiAgICAgICAgICA8Qm9keVNlY3Rpb24gdGl0bGU9XCJOZXdzIGZyb20gdGhlIFNjaG9vbFwiPlxuICAgICAgICAgICAgPHA+U3RheSBpbmZvcm1lZCB3aXRoIHRoZSBsYXRlc3QgdXBkYXRlcyBmcm9tIG91ciBzY2hvb2wuPC9wPlxuICAgICAgICAgIDwvQm9keVNlY3Rpb24+XG4gICAgICAgICAgPEJvZHlTZWN0aW9uIHRpdGxlPVwidGVzdFwiPlxuICAgICAgICAgICAgPHA+dGVzdDwvcD5cbiAgICAgICAgICA8L0JvZHlTZWN0aW9uPlxuICAgICAgICAgIDxCb2R5U2VjdGlvbldpdGhNYXJnaW5Cb3R0b20gdGl0bGU9XCJUZXN0IFRpdGxlXCI+XG4gICAgICAgICAgICA8cD5UaGlzIGNvbnRlbnQgd2lsbCBoYXZlIGEgbWFyZ2luIGF0IHRoZSBib3R0b20uPC9wPlxuICAgICAgICAgIDwvQm9keVNlY3Rpb25XaXRoTWFyZ2luQm90dG9tPlxuICAgICAgICAgIDxGb290ZXIgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8Lz5cbiAgICApO1xuICB9XG59XG5cbkFwcC5wcm9wVHlwZXMgPSB7XG4gIGlzTG9nZ2VkSW46IFByb3BUeXBlcy5ib29sLFxuICBsb2dPdXQ6IFByb3BUeXBlcy5mdW5jLFxufTtcblxuQXBwLnByb3BEZWZhdWx0ID0ge1xuICBpc0xvZ2dlZEluOiBmYWxzZSxcbiAgbG9nT3V0OiAoKSA9PiB7fSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEFwcDtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBSZWFjdERPTSBmcm9tIFwicmVhY3QtZG9tL2NsaWVudFwiO1xuaW1wb3J0IEFwcCBmcm9tIFwiLi9BcHAvQXBwXCI7XG5cbmNvbnN0IHJvb3QgPSBSZWFjdERPTS5jcmVhdGVSb290KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicm9vdFwiKSk7XG5yb290LnJlbmRlcihcbiAgPFJlYWN0LlN0cmljdE1vZGU+XG4gICAgPEFwcCBpc0xvZ2dlZEluPXtmYWxzZX0gLz5cbiAgPC9SZWFjdC5TdHJpY3RNb2RlPlxuKTtcbiJdLCJuYW1lcyI6WyJBcnJheVNwZWNpZXNDcmVhdGUiLCJDYWxsIiwiQ3JlYXRlRGF0YVByb3BlcnR5T3JUaHJvdyIsIkdldCIsIkhhc1Byb3BlcnR5IiwiSXNDYWxsYWJsZSIsIkxlbmd0aE9mQXJyYXlMaWtlIiwiVG9Cb29sZWFuIiwiVG9PYmplY3QiLCJUb1N0cmluZyIsImNhbGxCb3VuZCIsImlzU3RyaW5nIiwiYm94ZWRTdHJpbmciLCIkT2JqZWN0Iiwic3BsaXRTdHJpbmciLCJzdHJTcGxpdCIsIm1vZHVsZSIsImV4cG9ydHMiLCJjYWxsYmFja2ZuIiwidGhpc0FyZyIsIk8iLCJ0aGlzIiwic2VsZiIsImxlbiIsIlR5cGVFcnJvciIsImFyZ3VtZW50cyIsImxlbmd0aCIsIkEiLCJrIiwidG8iLCJQayIsImtWYWx1ZSIsImRlZmluZSIsIlJlcXVpcmVPYmplY3RDb2VyY2libGUiLCJjYWxsQmluZCIsImltcGxlbWVudGF0aW9uIiwiZ2V0UG9seWZpbGwiLCJwb2x5ZmlsbCIsImFwcGx5Iiwic2hpbSIsIiRzbGljZSIsImJvdW5kIiwiYXJyYXkiLCJhcnJheU1ldGhvZEJveGVzUHJvcGVybHkiLCJtZXRob2QiLCJBcnJheSIsInByb3RvdHlwZSIsImZpbHRlciIsIkZsYXR0ZW5JbnRvQXJyYXkiLCJUb0ludGVnZXJPckluZmluaXR5IiwiVG9MZW5ndGgiLCJzb3VyY2VMZW4iLCJkZXB0aE51bSIsImJvdW5kRmxhdCIsImZsYXQiLCJzaGltVW5zY29wYWJsZXMiLCJ0cnVlRnVuYyIsImZhbHNlRnVuYyIsIkdldEludHJpbnNpYyIsIiRpbmRleE9mIiwibmFtZSIsImFsbG93TWlzc2luZyIsImludHJpbnNpYyIsImJpbmQiLCJzZXRGdW5jdGlvbkxlbmd0aCIsIiRUeXBlRXJyb3IiLCIkYXBwbHkiLCIkY2FsbCIsIiRyZWZsZWN0QXBwbHkiLCJjYWxsIiwiJGRlZmluZVByb3BlcnR5IiwiJG1heCIsIm9yaWdpbmFsRnVuY3Rpb24iLCJmdW5jIiwiYXBwbHlCaW5kIiwidmFsdWUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdyb3VwU2VsZWN0b3JzIiwiZ2V0RG9jdW1lbnRSb290IiwicG9zaXRpb25hbHNfanNfMSIsIm5vZGUiLCJwYXJlbnQiLCJzZWxlY3RvcnMiLCJmaWx0ZXJlZFNlbGVjdG9ycyIsInBsYWluU2VsZWN0b3JzIiwiX2kiLCJzZWxlY3RvcnNfMSIsInNlbGVjdG9yIiwic29tZSIsImlzRmlsdGVyIiwicHVzaCIsIl9fYXNzaWduIiwiYXNzaWduIiwidCIsInMiLCJpIiwibiIsInAiLCJoYXNPd25Qcm9wZXJ0eSIsIl9fY3JlYXRlQmluZGluZyIsImNyZWF0ZSIsIm8iLCJtIiwiazIiLCJ1bmRlZmluZWQiLCJkZXNjIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiX19lc01vZHVsZSIsIndyaXRhYmxlIiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImdldCIsIl9fc2V0TW9kdWxlRGVmYXVsdCIsInYiLCJfX2ltcG9ydFN0YXIiLCJtb2QiLCJyZXN1bHQiLCJfX3NwcmVhZEFycmF5IiwiZnJvbSIsInBhY2siLCJhciIsImwiLCJzbGljZSIsImNvbmNhdCIsInNlbGVjdCIsImlzIiwiYWxpYXNlcyIsInBzZXVkb3MiLCJmaWx0ZXJzIiwiY3NzX3doYXRfMSIsImNzc19zZWxlY3RfMSIsIkRvbVV0aWxzIiwiYm9vbGJhc2UiLCJoZWxwZXJzX2pzXzEiLCJjc3Nfc2VsZWN0XzIiLCJVTklWRVJTQUxfU0VMRUNUT1IiLCJ0eXBlIiwiU2VsZWN0b3JUeXBlIiwiVW5pdmVyc2FsIiwibmFtZXNwYWNlIiwiU0NPUEVfUFNFVURPIiwiUHNldWRvIiwiZGF0YSIsImVsZW1lbnRzIiwib3B0aW9ucyIsIl9hIiwicGFyc2UiLCJwbGFpbiIsImZpbHRlcmVkIiwiX2NvbXBpbGVUb2tlbiIsInNlbCIsImZpbHRlckJ5U2VsZWN0b3IiLCJmaWx0ZXJQYXJzZWQiLCJmb3VuZCIsImZpbHRlckVsZW1lbnRzIiwiU2V0Iiwic2l6ZSIsImZpbHRlcmVkU2VsZWN0b3IiLCJlIiwiaXNUYWciLCJoYXMiLCJmb3JFYWNoIiwiZWwiLCJhZGQiLCJpc1RyYXZlcnNhbCIsInJvb3QiLCJvcHRzIiwiY29udGV4dCIsInJlbGF0aXZlU2VsZWN0b3IiLCJmaW5kRmlsdGVyRWxlbWVudHMiLCJxdWVyeUZvclNlbGVjdG9yIiwidG90YWxMaW1pdCIsImZpbHRlckluZGV4IiwiZmluZEluZGV4Iiwic3ViIiwicGFydExpbWl0IiwiSW5maW5pdHkiLCJsaW1pdCIsImdldExpbWl0IiwiZWxlbXMiLCJpc0FycmF5IiwiZmluZEVsZW1lbnRzIiwiZ2V0Q2hpbGRyZW4iLCJudW0iLCJwYXJzZUludCIsIk5hTiIsImlzRmluaXRlIiwiTWF0aCIsImFicyIsIl8iLCJmaWx0ZXJlZF8xIiwiZmlsdGVyQnlQb3NpdGlvbiIsInJlbWFpbmluZ1NlbGVjdG9yIiwicmVtYWluaW5nSGFzVHJhdmVyc2FsIiwiU2libGluZyIsIkFkamFjZW50IiwicHJlcGFyZUNvbnRleHQiLCJ1bnNoaWZ0Iiwicm9vdEZ1bmMiLCJpbmNsdWRlcyIsImZpbmQiLCJxdWVyeSIsInNob3VsZFRlc3ROZXh0U2libGluZ3MiLCJlbHMiLCJlbGVtZW50IiwicmVzdWx0cyIsIm1hcCIsInVuaXF1ZVNvcnQiLCJyZWR1Y2UiLCJhIiwiYiIsImZpbHRlck5hbWVzIiwibWluIiwidG9nZ2xlQ2xhc3MiLCJyZW1vdmVDbGFzcyIsImFkZENsYXNzIiwiaGFzQ2xhc3MiLCJyZW1vdmVBdHRyIiwidmFsIiwicHJvcCIsImF0dHIiLCJzdGF0aWNfanNfMSIsInV0aWxzX2pzXzEiLCJkb211dGlsc18xIiwiaGFzT3duIiwicnNwYWNlIiwiZGF0YUF0dHJQcmVmaXgiLCJwcmltaXRpdmVzIiwibnVsbCIsInRydWUiLCJmYWxzZSIsInJib29sZWFuIiwicmJyYWNlIiwiZ2V0QXR0ciIsImVsZW0iLCJ4bWxNb2RlIiwiYXR0cmlicyIsInRlc3QiLCJ0ZXh0IiwiY2hpbGRyZW4iLCJzZXRBdHRyIiwicmVtb3ZlQXR0cmlidXRlIiwiZ2V0UHJvcCIsInNldFByb3AiLCJzZXREYXRhIiwicmVhZERhdGEiLCJkb21OYW1lcyIsImpzTmFtZXMiLCJrZXlzIiwiYXR0ck5hbWUiLCJzdGFydHNXaXRoIiwiZG9tTmFtZSIsImNhbWVsQ2FzZSIsImNzc0Nhc2UiLCJpZHgiLCJqc05hbWUiLCJTdHJpbmciLCJOdW1iZXIiLCJKU09OIiwic3BsaXROYW1lcyIsIm5hbWVzIiwidHJpbSIsInNwbGl0IiwiRXJyb3IiLCJkb21FYWNoIiwib2JqTmFtZSIsIm9ialZhbHVlIiwiX3RoaXMiLCJwcm9wZXJ0eV8xIiwiY3NzIiwidG9VcHBlckNhc2UiLCJwcm9wXzEiLCJVUkwiLCJ0YWdOYW1lIiwiYmFzZVVSSSIsImhyZWYiLCJpbm5lclRleHQiLCJ0ZXh0Q29udGVudCIsImNsb25lIiwid3JhcCIsImh0bWwiLCJrZXkiLCJkYXRhRWwiLCJxdWVyeWluZyIsIm9wdGlvbiIsInZhbHVlcyIsInRvQXJyYXkiLCJhdHRyTmFtZXMiLCJfbG9vcF8xIiwidGhpc18xIiwiY2xhc3NOYW1lIiwiY2xhenoiLCJpbmRleE9mIiwiZW5kIiwiY2xhc3NOYW1lcyIsIm51bUVsZW1lbnRzIiwic2V0Q2xhc3MiLCJqIiwiYXBwZW5kQ2xhc3MiLCJqb2luIiwiY2xhc3NlcyIsIm51bUNsYXNzZXMiLCJyZW1vdmVBbGwiLCJlbENsYXNzZXMiLCJjaGFuZ2VkIiwiaW5kZXgiLCJzcGxpY2UiLCJzdGF0ZVZhbCIsInN0YXRlIiwiZWxlbWVudENsYXNzZXMiLCJzZXRDc3MiLCJzdHlsZXMiLCJnZXRDc3MiLCJvYmoiLCJzdHIiLCJ0cmltbWVkIiwidHJpbUVuZCIsIm5ld1N0eWxlc18xIiwiaXRlbSIsInNlcmlhbGl6ZUFycmF5Iiwic2VyaWFsaXplIiwic3VibWl0dGFibGVTZWxlY3RvciIsInIyMCIsInJDUkxGIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwicmVwbGFjZSIsIiRlbGVtIiwiX21ha2UiLCJ0b1N0cmluZyIsImVtcHR5IiwicmVwbGFjZVdpdGgiLCJyZW1vdmUiLCJpbnNlcnRCZWZvcmUiLCJiZWZvcmUiLCJpbnNlcnRBZnRlciIsImFmdGVyIiwid3JhcEFsbCIsInVud3JhcCIsIndyYXBJbm5lciIsInByZXBlbmQiLCJhcHBlbmQiLCJwcmVwZW5kVG8iLCJhcHBlbmRUbyIsIl9tYWtlRG9tQXJyYXkiLCJkb21oYW5kbGVyXzEiLCJwYXJzZV9qc18xIiwiX2luc2VydCIsImNvbmNhdGVuYXRvciIsImxhc3RJZHgiLCJoYXNDaGlsZHJlbiIsImRvbVNyYyIsIl9yZW5kZXIiLCJkb20iLCJ1bmlxdWVTcGxpY2UiLCJzcGxpY2VJZHgiLCJzcGxpY2VDb3VudCIsIm5ld0VsZW1zIiwiX2IiLCJzcGxpY2VBcmdzIiwicHJldiIsIm5leHQiLCJvbGRQYXJlbnQiLCJwcmV2SWR4IiwiX3dyYXAiLCJpbnNlcnQiLCJ3cmFwcGVyIiwibGFzdFBhcmVudCIsInBhcmVudHMiLCJsYXN0Iiwid3JhcF8xIiwiaXNIdG1sIiwid3JhcHBlckRvbSIsImVsSW5zZXJ0TG9jYXRpb24iLCJjaGlsZCIsImlzQ2hlZXJpbyIsImNsb25lRG9tIiwiX3BhcnNlIiwidGFyZ2V0Iiwic2libGluZ3MiLCJ1cGRhdGUiLCJub3QiLCJlYWNoIiwid3JhcF8yIiwiY2xvbmVzIiwiY2xvbmVkU2VsZiIsInRhcmdldEFyciIsInJlbW92ZUVsZW1lbnQiLCJjb250ZW50IiwiY29udCIsInRleHROb2RlIiwiVGV4dCIsImFkZEJhY2siLCJlcSIsImZpcnN0IiwiZmlsdGVyQXJyYXkiLCJjb250ZW50cyIsInByZXZVbnRpbCIsInByZXZBbGwiLCJuZXh0VW50aWwiLCJuZXh0QWxsIiwiY2xvc2VzdCIsInBhcmVudHNVbnRpbCIsInJlU2libGluZ1NlbGVjdG9yIiwiX2dldE1hdGNoZXIiLCJtYXRjaE1hcCIsImZuIiwicG9zdEZucyIsIm1hdGNoZWQiLCJfcm9vdCIsInNlbGVjdG9yT3JIYXlzdGFjayIsImhheXN0YWNrIiwiY29udGFpbnMiLCJsb3dlckNhc2VUYWdzIiwibG93ZXJDYXNlQXR0cmlidXRlTmFtZXMiLCJxdWlya3NNb2RlIiwiX21hdGNoZXIiLCJyZXQiLCJfc2luZ2xlTWF0Y2hlciIsIl9tYXRjaFVudGlsIiwibmV4dEVsZW0iLCJtYXRjaGVzIiwiaW5uZXJNYXRjaGVyIiwibmV4dF8xIiwiZmlsdGVyU2VsZWN0b3IiLCJnZXRGaWx0ZXJGbiIsIl9yZW1vdmVEdXBsaWNhdGVzIiwibWF0Y2giLCJub2RlcyIsImlzRG9jdW1lbnQiLCJyZXZlcnNlIiwic2V0Iiwic2VsZWN0T3B0cyIsInNlbGVjdEZuIiwibmV4dEVsZW1lbnRTaWJsaW5nIiwicHJldkVsZW1lbnRTaWJsaW5nIiwiZ2V0U2libGluZ3MiLCJtYXRjaGVzXzEiLCJmaWx0ZXJGbl8xIiwic2VsZWN0b3JPck5lZWRsZSIsIiRoYXlzdGFjayIsIm5lZWRsZSIsInN0YXJ0IiwicHJldk9iamVjdCIsIm90aGVyIiwic2VsZWN0aW9uIiwiQ2hlZXJpbyIsIkF0dHJpYnV0ZXMiLCJUcmF2ZXJzaW5nIiwiTWFuaXB1bGF0aW9uIiwiQ3NzIiwiRm9ybXMiLCJjaGVlcmlvIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJfX2V4cG9ydFN0YXIiLCJfX2ltcG9ydERlZmF1bHQiLCJwYXJzZUhUTUwiLCJtZXJnZSIsInhtbCIsImxvYWQiLCJsb2FkX2pzXzEiLCJwYXJzZTVfYWRhcHRlcl9qc18xIiwiZG9tX3NlcmlhbGl6ZXJfMSIsImh0bWxwYXJzZXIyXzEiLCJnZXRQYXJzZSIsIl91c2VIdG1sUGFyc2VyMiIsInBhcnNlRG9jdW1lbnQiLCJwYXJzZVdpdGhQYXJzZTUiLCJnZXRMb2FkIiwiZGVmYXVsdCIsInJlbmRlcldpdGhQYXJzZTUiLCJzdGF0aWNNZXRob2RzIiwiZXh0ZW5kU3RhdGljcyIsIl9fZXh0ZW5kcyIsImQiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIl9fIiwiY29uc3RydWN0b3IiLCJvcHRpb25zX2pzXzEiLCJjaGVlcmlvX2pzXzEiLCJyZW5kZXIiLCJpbnRlcm5hbE9wdHMiLCJmbGF0dGVuIiwiaW5pdGlhbFJvb3QiLCJMb2FkZWRDaGVlcmlvIiwiX3N1cGVyIiwiaW5pdGlhbGl6ZSIsInIiLCJyb290SW5zdGFuY2UiLCJpbnN0YW5jZSIsInNlYXJjaCIsInNlYXJjaENvbnRleHQiLCJfb3B0aW9ucyIsImRlY29kZUVudGl0aWVzIiwieG1sTW9kZURlZmF1bHQiLCJuZXdDaGlsZHMiLCJhcnIiLCJwYXJzZXIiLCJCdWZmZXIiLCJpc0J1ZmZlciIsImRvYyIsIkRvY3VtZW50IiwicGFyc2U1XzEiLCJwYXJzZTVfaHRtbHBhcnNlcjJfdHJlZV9hZGFwdGVyXzEiLCJzY3JpcHRpbmdFbmFibGVkIiwidHJlZUFkYXB0ZXIiLCJhZGFwdGVyIiwic291cmNlQ29kZUxvY2F0aW9uSW5mbyIsInBhcnNlRnJhZ21lbnQiLCJyZW5kZXJPcHRzIiwic2VyaWFsaXplT3V0ZXIiLCJ0aGF0IiwiaXNBcnJheUxpa2UiLCJpc09wdGlvbnMiLCJrZWVwU2NyaXB0cyIsInBhcnNlZCIsImNvbnRhaW5lciIsImNvbnRhaW5lZCIsImFycjEiLCJhcnIyIiwibmV3TGVuZ3RoIiwiQ2hhcmFjdGVyQ29kZXMiLCJkb21oYW5kbGVyXzIiLCJtYXliZUNoZWVyaW8iLCJ4IiwidG9Mb3dlckNhc2UiLCJjbG9uZU5vZGUiLCJ0YWdTdGFydCIsInRhZ0NoYXIiLCJjaGFyQ29kZUF0IiwiTG93ZXJBIiwiTG93ZXJaIiwiVXBwZXJBIiwiVXBwZXJaIiwiRXhjbGFtYXRpb24iLCJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsImlkIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsImxpc3QiLCJuZWVkTGF5ZXIiLCJtb2R1bGVzIiwibWVkaWEiLCJkZWR1cGUiLCJzdXBwb3J0cyIsImxheWVyIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsIl9rIiwiY3NzTWFwcGluZyIsImJ0b2EiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsInN0cmluZ2lmeSIsInNvdXJjZU1hcHBpbmciLCJhdHRyaWJ1dGVSdWxlcyIsImJvb2xiYXNlXzEiLCJyZUNoYXJzIiwiZXNjYXBlUmVnZXgiLCJjYXNlSW5zZW5zaXRpdmVBdHRyaWJ1dGVzIiwic2hvdWxkSWdub3JlQ2FzZSIsImlnbm9yZUNhc2UiLCJlcXVhbHMiLCJnZXRBdHRyaWJ1dGVWYWx1ZSIsImh5cGhlbiIsImNoYXJBdCIsInN1YnN0ciIsInJlZ2V4IiwiUmVnRXhwIiwiZXhpc3RzIiwiaGFzQXR0cmliIiwiZW5kc1dpdGgiLCJhbnkiLCJyZWdleF8xIiwiY29tcGlsZVRva2VuIiwiY29tcGlsZVVuc2FmZSIsImNvbXBpbGUiLCJzb3J0X2pzXzEiLCJnZW5lcmFsX2pzXzEiLCJzdWJzZWxlY3RzX2pzXzEiLCJpbmNsdWRlc1Njb3BlUHNldWRvIiwiZW5zdXJlSXNUYWciLCJERVNDRU5EQU5UX1RPS0VOIiwiRGVzY2VuZGFudCIsIkZMRVhJQkxFX0RFU0NFTkRBTlRfVE9LRU4iLCJTQ09QRV9UT0tFTiIsInRva2VuIiwiaXNBcnJheUNvbnRleHQiLCJmaW5hbENvbnRleHQiLCJoYXNDb250ZXh0IiwiZXZlcnkiLCJnZXRQYXJlbnQiLCJQTEFDRUhPTERFUl9FTEVNRU5UIiwidG9rZW5fMSIsImFic29sdXRpemUiLCJydWxlcyIsInNlY29uZCIsInByZXZpb3VzIiwicnVsZSIsImNvbXBpbGVHZW5lcmFsU2VsZWN0b3IiLCJjb21waWxlUnVsZXMiLCJyZWR1Y2VSdWxlcyIsImF0dHJpYnV0ZXNfanNfMSIsImluZGV4X2pzXzEiLCJnZXRFbGVtZW50UGFyZW50IiwiUHNldWRvRWxlbWVudCIsIkNvbHVtbkNvbWJpbmF0b3IiLCJBdHRyaWJ1dGUiLCJhY3Rpb24iLCJjb21waWxlUHNldWRvU2VsZWN0b3IiLCJUYWciLCJuYW1lXzEiLCJnZXROYW1lIiwiY2FjaGVSZXN1bHRzIiwiV2Vha1NldCIsImN1cnJlbnQiLCJpc0ZhbHNlQ2FjaGVfMSIsIlBhcmVudCIsIkNoaWxkIiwiY3VycmVudFNpYmxpbmciLCJsYXN0RWxlbWVudCIsInNlbGVjdE9uZSIsInNlbGVjdEFsbCIsIl9jb21waWxlVW5zYWZlIiwiY29tcGlsZV9qc18xIiwiZGVmYXVsdEVxdWFscyIsImRlZmF1bHRPcHRpb25zIiwiY29udmVydE9wdGlvbkZvcm1hdHMiLCJfYyIsIl9kIiwid3JhcENvbXBpbGUiLCJnZXRTZWxlY3RvckZ1bmMiLCJzZWFyY2hGdW5jIiwiZmlsdGVyZWRFbGVtZW50cyIsImVsZW1zTGVuZ3RoIiwibmV4dFNpYmxpbmdzIiwiZ2V0TmV4dFNpYmxpbmdzIiwiYXBwZW5kTmV4dFNpYmxpbmdzIiwicmVtb3ZlU3Vic2V0cyIsImZpbmRBbGwiLCJmaW5kT25lIiwibGluayIsImRpc2FibGVkIiwiZW5hYmxlZCIsImNoZWNrZWQiLCJyZXF1aXJlZCIsIm9wdGlvbmFsIiwic2VsZWN0ZWQiLCJjaGVja2JveCIsImZpbGUiLCJwYXNzd29yZCIsInJhZGlvIiwicmVzZXQiLCJpbWFnZSIsInN1Ym1pdCIsImhlYWRlciIsImJ1dHRvbiIsImlucHV0IiwibnRoX2NoZWNrXzEiLCJnZXRDaGlsZEZ1bmMiLCJkeW5hbWljU3RhdGVQc2V1ZG8iLCJfcnVsZSIsImdldFRleHQiLCJpY29udGFpbnMiLCJpdGV4dCIsInBvcyIsInNjb3BlIiwiaG92ZXIiLCJ2aXNpdGVkIiwiYWN0aXZlIiwiZmlsdGVyc19qc18xIiwicHNldWRvc19qc18xIiwiYWxpYXNlc19qc18xIiwic3Vic2VsZWN0cyIsInVzZXJQc2V1ZG8iLCJzdHJpbmdQc2V1ZG8iLCJhbGlhcyIsInZlcmlmeVBzZXVkb0FyZ3MiLCJwc2V1ZG9fMSIsImZpcnN0Q2hpbGQiLCJlbGVtTmFtZSIsInNpYmxpbmciLCJzdWJzZWxlY3QiLCJhcmdJbmRleCIsImVsZW1JbmRleCIsImNvcHlPcHRpb25zIiwid2hlcmUiLCJfY29udGV4dCIsImNvbXBpbGVkIiwiaGFzRWxlbWVudCIsInNob3VsZFRlc3ROZXh0U2libGluZ3NfMSIsImNoaWxkcyIsIm5leHRFbGVtZW50cyIsImV4aXN0c09uZSIsInByb2NlZHVyZSIsIk1hcCIsImF0dHJpYnV0ZXMiLCJBdHRyaWJ1dGVBY3Rpb24iLCJFeGlzdHMiLCJFcXVhbHMiLCJOb3QiLCJTdGFydCIsIkVuZCIsIkFueSIsImdldFByb2NlZHVyZSIsInByb2MiLCJwcm9jcyIsInByb2NOZXciLCJJZ25vcmVDYXNlTW9kZSIsIlVua25vd24iLCJRdWlya3NNb2RlIiwiSWdub3JlQ2FzZSIsIkNhc2VTZW5zaXRpdmUiLCJyZU5hbWUiLCJyZUVzY2FwZSIsImFjdGlvblR5cGVzIiwiRWxlbWVudCIsIkh5cGhlbiIsInVucGFja1BzZXVkb3MiLCJzdHJpcFF1b3Rlc0Zyb21Qc2V1ZG9zIiwiZnVuZXNjYXBlIiwiZXNjYXBlZCIsImVzY2FwZWRXaGl0ZXNwYWNlIiwiaGlnaCIsImZyb21DaGFyQ29kZSIsInVuZXNjYXBlQ1NTIiwiaXNRdW90ZSIsImMiLCJpc1doaXRlc3BhY2UiLCJlbmRJbmRleCIsInBhcnNlU2VsZWN0b3IiLCJzZWxlY3RvckluZGV4IiwidG9rZW5zIiwib2Zmc2V0Iiwic3RyaXBXaGl0ZXNwYWNlIiwicmVhZFZhbHVlV2l0aFBhcmVudGhlc2lzIiwiY291bnRlciIsImlzRXNjYXBlZCIsInNsYXNoQ291bnQiLCJlbnN1cmVOb3RUcmF2ZXJzYWwiLCJhZGRUcmF2ZXJzYWwiLCJhZGRTcGVjaWFsQXR0cmlidXRlIiwiZmluYWxpemVTdWJzZWxlY3RvciIsInBvcCIsImxvb3AiLCJmaXJzdENoYXIiLCJwb3NzaWJsZUFjdGlvbiIsInF1b3RlIiwic2VjdGlvbkVuZCIsInZhbHVlU3RhcnQiLCJmb3JjZUlnbm9yZSIsImF0dHJpYnV0ZVNlbGVjdG9yIiwicXVvdCIsImF0dHJpYlZhbENoYXJzIiwicHNldWRvVmFsQ2hhcnMiLCJjaGFyc1RvRXNjYXBlSW5BdHRyaWJ1dGVWYWx1ZSIsImNoYXJzVG9Fc2NhcGVJblBzZXVkb1ZhbHVlIiwiY2hhcnNUb0VzY2FwZUluTmFtZSIsInN0cmluZ2lmeVRva2VuIiwiZ2V0TmFtZXNwYWNlIiwiZ2V0TmFtZXNwYWNlZE5hbWUiLCJlc2NhcGVOYW1lIiwiZ2V0QWN0aW9uVmFsdWUiLCJjaGFyc1RvRXNjYXBlIiwiJFN5bnRheEVycm9yIiwiZ29wZCIsInByb3BlcnR5Iiwibm9uRW51bWVyYWJsZSIsIm5vbldyaXRhYmxlIiwibm9uQ29uZmlndXJhYmxlIiwibG9vc2UiLCJoYXNTeW1ib2xzIiwidG9TdHIiLCJkZWZpbmVEYXRhUHJvcGVydHkiLCJzdXBwb3J0c0Rlc2NyaXB0b3JzIiwib2JqZWN0IiwicHJlZGljYXRlIiwiZGVmaW5lUHJvcGVydGllcyIsInByZWRpY2F0ZXMiLCJwcm9wcyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImF0dHJpYnV0ZU5hbWVzIiwiZWxlbWVudE5hbWVzIiwiRWxlbWVudFR5cGUiLCJlbnRpdGllc18xIiwiZm9yZWlnbk5hbWVzX2pzXzEiLCJ1bmVuY29kZWRFbGVtZW50cyIsInJlcGxhY2VRdW90ZXMiLCJzaW5nbGVUYWciLCJvdXRwdXQiLCJyZW5kZXJOb2RlIiwiUm9vdCIsIkRvY3R5cGUiLCJEaXJlY3RpdmUiLCJDb21tZW50IiwiQ0RBVEEiLCJyZW5kZXJDZGF0YSIsIlNjcmlwdCIsIlN0eWxlIiwiZm9yZWlnbk1vZGVJbnRlZ3JhdGlvblBvaW50cyIsImZvcmVpZ25FbGVtZW50cyIsInRhZyIsImVuY29kZSIsImVuY29kZUVudGl0aWVzIiwiZW5jb2RlWE1MIiwiZXNjYXBlQXR0cmlidXRlIiwiZW1wdHlBdHRycyIsImZvcm1hdEF0dHJpYnV0ZXMiLCJzZWxmQ2xvc2luZ1RhZ3MiLCJyZW5kZXJUYWciLCJlc2NhcGVUZXh0IiwicmVuZGVyVGV4dCIsIkRvbUhhbmRsZXIiLCJkb21lbGVtZW50dHlwZV8xIiwibm9kZV9qc18xIiwiZGVmYXVsdE9wdHMiLCJ3aXRoU3RhcnRJbmRpY2VzIiwid2l0aEVuZEluZGljZXMiLCJjYWxsYmFjayIsImVsZW1lbnRDQiIsImRvbmUiLCJ0YWdTdGFjayIsImxhc3ROb2RlIiwib25wYXJzZXJpbml0Iiwib25yZXNldCIsIm9uZW5kIiwiaGFuZGxlQ2FsbGJhY2siLCJvbmVycm9yIiwiZXJyb3IiLCJvbmNsb3NldGFnIiwib25vcGVudGFnIiwiYWRkTm9kZSIsIm9udGV4dCIsIm9uY29tbWVudCIsIm9uY29tbWVudGVuZCIsIm9uY2RhdGFzdGFydCIsIm9uY2RhdGFlbmQiLCJvbnByb2Nlc3NpbmdpbnN0cnVjdGlvbiIsIlByb2Nlc3NpbmdJbnN0cnVjdGlvbiIsInByZXZpb3VzU2libGluZyIsInN0YXJ0SW5kZXgiLCJpc0RpcmVjdGl2ZSIsImlzQ29tbWVudCIsImlzVGV4dCIsImlzQ0RBVEEiLCJOb2RlV2l0aENoaWxkcmVuIiwiRGF0YU5vZGUiLCJOb2RlIiwicmVjdXJzaXZlIiwicHJlZml4IiwiY2xvbmVDaGlsZHJlbiIsImNsb25lXzEiLCJjbG9uZV8yIiwiY2xvbmVfMyIsImluc3RydWN0aW9uIiwic291cmNlQ29kZUxvY2F0aW9uIiwiZ2V0RmVlZCIsInN0cmluZ2lmeV9qc18xIiwibGVnYWN5X2pzXzEiLCJmZWVkUm9vdCIsImdldE9uZUVsZW1lbnQiLCJpc1ZhbGlkRmVlZCIsImZlZWQiLCJpdGVtcyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiZW50cnkiLCJnZXRNZWRpYUVsZW1lbnRzIiwiYWRkQ29uZGl0aW9uYWxseSIsImRlc2NyaXB0aW9uIiwiZmV0Y2giLCJwdWJEYXRlIiwiRGF0ZSIsInVwZGF0ZWQiLCJnZXRBdG9tRmVlZCIsImdldFJzc0ZlZWQiLCJNRURJQV9LRVlTX1NUUklORyIsIk1FRElBX0tFWVNfSU5UIiwibWVkaXVtIiwiaXNEZWZhdWx0IiwiTUVESUFfS0VZU19TVFJJTkdfMSIsImF0dHJpYiIsIk1FRElBX0tFWVNfSU5UXzEiLCJleHByZXNzaW9uIiwicmVjdXJzZSIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiRG9jdW1lbnRQb3NpdGlvbiIsIm5vZGVBIiwibm9kZUIiLCJhUGFyZW50cyIsImJQYXJlbnRzIiwibWF4SWR4IiwiRElTQ09OTkVDVEVEIiwic2hhcmVkUGFyZW50IiwiYVNpYmxpbmciLCJiU2libGluZyIsIkZPTExPV0lORyIsIkNPTlRBSU5FRF9CWSIsIlBSRUNFRElORyIsIkNPTlRBSU5TIiwibGFzdEluZGV4T2YiLCJhbmNlc3RvciIsInNvcnQiLCJyZWxhdGl2ZSIsImdldEVsZW1lbnRzQnlUYWdUeXBlIiwiZ2V0RWxlbWVudEJ5SWQiLCJnZXRFbGVtZW50cyIsInRlc3RFbGVtZW50IiwicXVlcnlpbmdfanNfMSIsIkNoZWNrcyIsInRhZ19uYW1lIiwidGFnX3R5cGUiLCJ0YWdfY29udGFpbnMiLCJnZXRBdHRyaWJDaGVjayIsImNvbWJpbmVGdW5jcyIsImNvbXBpbGVUZXN0IiwiZnVuY3MiLCJjaGlsZHNJbmRleCIsInByZXBlbmRDaGlsZCIsImFwcGVuZENoaWxkIiwicmVwbGFjZUVsZW1lbnQiLCJyZXBsYWNlbWVudCIsImN1cnJOZXh0IiwiZmluZE9uZUNoaWxkIiwibm9kZVN0YWNrIiwiaW5kZXhTdGFjayIsInNoaWZ0IiwiZ2V0SW5uZXJIVE1MIiwiZ2V0T3V0ZXJIVE1MIiwiZGVjb2RlWE1MIiwiZGVjb2RlSFRNTFN0cmljdCIsImRlY29kZUhUTUxBdHRyaWJ1dGUiLCJkZWNvZGVIVE1MIiwiZGV0ZXJtaW5lQnJhbmNoIiwiRW50aXR5RGVjb2RlciIsIkRlY29kaW5nTW9kZSIsIkJpblRyaWVGbGFncyIsImZyb21Db2RlUG9pbnQiLCJyZXBsYWNlQ29kZVBvaW50IiwiZGVjb2RlQ29kZVBvaW50IiwieG1sRGVjb2RlVHJlZSIsImh0bWxEZWNvZGVUcmVlIiwiZGVjb2RlX2RhdGFfaHRtbF9qc18xIiwiZGVjb2RlX2RhdGFfeG1sX2pzXzEiLCJkZWNvZGVfY29kZXBvaW50X2pzXzEiLCJDaGFyQ29kZXMiLCJFbnRpdHlEZWNvZGVyU3RhdGUiLCJkZWNvZGVfY29kZXBvaW50X2pzXzIiLCJpc051bWJlciIsImNvZGUiLCJaRVJPIiwiTklORSIsImRlY29kZVRyZWUiLCJlbWl0Q29kZVBvaW50IiwiZXJyb3JzIiwiRW50aXR5U3RhcnQiLCJjb25zdW1lZCIsInRyZWVJbmRleCIsImV4Y2VzcyIsImRlY29kZU1vZGUiLCJTdHJpY3QiLCJzdGFydEVudGl0eSIsIndyaXRlIiwiTlVNIiwiTnVtZXJpY1N0YXJ0Iiwic3RhdGVOdW1lcmljU3RhcnQiLCJOYW1lZEVudGl0eSIsInN0YXRlTmFtZWRFbnRpdHkiLCJOdW1lcmljRGVjaW1hbCIsInN0YXRlTnVtZXJpY0RlY2ltYWwiLCJOdW1lcmljSGV4Iiwic3RhdGVOdW1lcmljSGV4IiwiTE9XRVJfWCIsImFkZFRvTnVtZXJpY1Jlc3VsdCIsImJhc2UiLCJkaWdpdENvdW50IiwicG93Iiwic3RhcnRJZHgiLCJjaGFyIiwiVVBQRVJfQSIsIlVQUEVSX0YiLCJMT1dFUl9BIiwiTE9XRVJfRiIsImVtaXROdW1lcmljRW50aXR5IiwibGFzdENwIiwiZXhwZWN0ZWRMZW5ndGgiLCJhYnNlbmNlT2ZEaWdpdHNJbk51bWVyaWNDaGFyYWN0ZXJSZWZlcmVuY2UiLCJTRU1JIiwibWlzc2luZ1NlbWljb2xvbkFmdGVyQ2hhcmFjdGVyUmVmZXJlbmNlIiwidmFsaWRhdGVOdW1lcmljQ2hhcmFjdGVyUmVmZXJlbmNlIiwidmFsdWVMZW5ndGgiLCJWQUxVRV9MRU5HVEgiLCJtYXgiLCJFUVVBTFMiLCJVUFBFUl9aIiwiTE9XRVJfWiIsImlzQXNjaWlBbHBoYU51bWVyaWMiLCJlbWl0Tm90VGVybWluYXRlZE5hbWVkRW50aXR5IiwiZW1pdE5hbWVkRW50aXR5RGF0YSIsImdldERlY29kZXIiLCJkZWNvZGVyIiwibGFzdEluZGV4Iiwibm9kZUlkeCIsImJyYW5jaENvdW50IiwiQlJBTkNIX0xFTkdUSCIsImp1bXBPZmZzZXQiLCJKVU1QX1RBQkxFIiwibG8iLCJoaSIsIm1pZCIsIm1pZFZhbCIsImh0bWxEZWNvZGVyIiwieG1sRGVjb2RlciIsIm1vZGUiLCJMZWdhY3kiLCJkZWNvZGVNYXAiLCJjb2RlUG9pbnQiLCJlbmNvZGVOb25Bc2NpaUhUTUwiLCJlbmNvZGVIVE1MIiwiZW5jb2RlX2h0bWxfanNfMSIsImVzY2FwZV9qc18xIiwiaHRtbFJlcGxhY2VyIiwiZW5jb2RlSFRNTFRyaWVSZSIsInJlZ0V4cCIsImV4ZWMiLCJzdWJzdHJpbmciLCJuZXh0Q2hhciIsImNwIiwiZ2V0Q29kZVBvaW50IiwieG1sUmVwbGFjZXIiLCJlc2NhcGVVVEY4IiwiZXNjYXBlIiwieG1sQ29kZU1hcCIsImdldEVzY2FwZXIiLCJjb2RlUG9pbnRBdCIsIlVpbnQxNkFycmF5IiwicmVzdG9yZURpZmYiLCJkZWNvZGVYTUxTdHJpY3QiLCJkZWNvZGVIVE1MNVN0cmljdCIsImRlY29kZUhUTUw0U3RyaWN0IiwiZGVjb2RlSFRNTDUiLCJkZWNvZGVIVE1MNCIsImVuY29kZUhUTUw1IiwiZW5jb2RlSFRNTDQiLCJkZWNvZGVTdHJpY3QiLCJkZWNvZGUiLCJFbmNvZGluZ01vZGUiLCJFbnRpdHlMZXZlbCIsImRlY29kZV9qc18xIiwiZW5jb2RlX2pzXzEiLCJYTUwiLCJsZXZlbCIsIkhUTUwiLCJVVEY4IiwiQVNDSUkiLCJlc2NhcGVfanNfMiIsImVuY29kZV9qc18yIiwiZGVjb2RlX2pzXzIiLCJvYmpBIiwib2JqQiIsIl9vYmplY3RJcyIsIl90eXBlb2YiLCJrZXlzQSIsImtleXNCIiwiX2hhc293biIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJ0eXBlTmFtZSIsInNwYWNlcyIsImluZGVudCIsImRlYnVnTm9kZSIsImRlYnVnTm9kZXMiLCJfbG9kYXNoMiIsIl9mdW5jdGlvblByb3RvdHlwZTIiLCJfaXNTdHJpbmcyIiwiX2lzTnVtYmVyT2JqZWN0MiIsIl9pc0NhbGxhYmxlMiIsIl9pc0Jvb2xlYW5PYmplY3QyIiwiX29iamVjdEluc3BlY3QyIiwiX2hhczIiLCJfUlNUVHJhdmVyc2FsIiwiX2dldEFkYXB0ZXIyIiwiYm9vbGVhblZhbHVlIiwiRnVuY3Rpb24iLCJCb29sZWFuIiwidmFsdWVPZiIsImRpc3BsYXlOYW1lT2ZOb2RlIiwiZGlzcGxheU5hbWUiLCJkZXB0aCIsInN0cmluZyIsImluZGVudExlbmd0aCIsImlzVmFsaWRFbGVtZW50Iiwibm9kZVR5cGUiLCJpc1JTVE5vZGVMaWtlIiwiY2hpbGRyZW5TdHJzIiwiY2hpbGRyZW5PZk5vZGUiLCJpZ25vcmVQcm9wcyIsInByb3BzT2ZOb2RlIiwicXVvdGVTdHlsZSIsInZlcmJvc2UiLCJwcm9wU3RyaW5nIiwicHJvcHNTdHJpbmciLCJiZWZvcmVQcm9wcyIsImFmdGVyUHJvcHMiLCJjaGlsZHJlbkluZGVudGVkIiwiaW5kZW50Q2hpbGRyZW4iLCJub2RlQ2xvc2UiLCJfY3JlYXRlQ2xhc3MiLCJkZXNjcmlwdG9yIiwiQ29uc3RydWN0b3IiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJ1bmltcGxlbWVudGVkRXJyb3IiLCJtZXRob2ROYW1lIiwiY2xhc3NuYW1lIiwiRW56eW1lQWRhcHRlciIsIl9jbGFzc0NhbGxDaGVjayIsIm1hdGNoaW5nVHlwZSIsIk1PREVTIiwiU1RSSU5HIiwiTU9VTlQiLCJTSEFMTE9XIiwiaGFzQ2xhc3NOYW1lIiwiX2lzUmVnZXgyIiwidHJlZUZvckVhY2giLCJ0cmVlRmlsdGVyIiwiZmluZFBhcmVudE5vZGUiLCJ0YXJnZXROb2RlIiwicmVuZGVyZWQiLCJwYXRoVG9Ob2RlIiwicGFyZW50c09mTm9kZSIsIm5vZGVIYXNJZCIsIm5vZGVNYXRjaGVzT2JqZWN0UHJvcHMiLCJfaXNTdWJzZXQyIiwiX29iamVjdDQiLCJhY2MiLCJfcmVmIiwiX3JlZjIiLCJfYXJyIiwiX24iLCJfZSIsIl9zIiwiZXJyIiwic2xpY2VJdGVyYXRvciIsIl9zbGljZWRUb0FycmF5IiwiX29iamVjdDIiLCJfZGVmaW5lUHJvcGVydHkiLCJDQU5fTkVWRVJfTUFUQ0giLCJyZXBsYWNlVW5kZWZpbmVkIiwiZ2V0VGV4dEZyb21Ob2RlIiwiZ2V0VGV4dEZyb21SU1ROb2RlIiwiZ2V0Q3VzdG9tIiwiX3JlZjQiLCJnZXRUZXh0RnJvbUhvc3ROb2RlcyIsImhhbmRsZUhvc3ROb2RlcyIsIm5vZGVUb0hvc3ROb2RlIiwiZ2V0VGV4dEZyb21Ib3N0Tm9kZSIsImdldEhUTUxGcm9tSG9zdE5vZGVzIiwiZ2V0SFRNTEZyb21Ib3N0Tm9kZSIsIm51bGxSZW5kZXJSZXR1cm5zTnVsbCIsIl9hcnJheVByb3RvdHlwZTIiLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJhZGFwdGVySGFzSXNGcmFnbWVudCIsImlzRnJhZ21lbnQiLCJyZW5kZXJlZEFycmF5IiwiY3VycmVudENoaWxkIiwidHJlZSIsInBhdGhGaWx0ZXIiLCJwYXRoIiwicXVldWUiLCJoYXNOb2RlIiwidGVzdE5vZGUiLCJob3N0Tm9kZSIsIl9yZWYzIiwiX3JlZjMkbnVsbFJlbmRlclJldHVyIiwib3V0ZXJIVE1MIiwiX1V0aWxzIiwiX0RlYnVnIiwiX3NlbGVjdG9ycyIsIk5PREUiLCJzeW0iLCJOT0RFUyIsIlJFTkRFUkVSIiwiVU5SRU5ERVJFRCIsIlJPT1QiLCJPUFRJT05TIiwiUk9PVF9OT0RFUyIsIldSQVBQSU5HX0NPTVBPTkVOVCIsIkxJTktFRF9ST09UUyIsIlVQREFURURfQlkiLCJmaW5kV2hlcmVVbndyYXBwZWQiLCJmbGF0TWFwIiwiZ2V0Tm9kZUludGVybmFsIiwiZmlsdGVyV2hlcmVVbndyYXBwZWQiLCJnZXROb2Rlc0ludGVybmFsIiwiZ2V0Um9vdE5vZGVJbnRlcm5hbCIsIm5vZGVQYXJlbnRzIiwicHJpdmF0ZVNldE5vZGVzIiwicHJpdmF0ZVNldCIsIlJlYWN0V3JhcHBlciIsInBhc3NlZE9wdGlvbnMiLCJnIiwid2luZG93IiwiZG9jdW1lbnQiLCJtYWtlT3B0aW9ucyIsInJlbmRlcmVyIiwiY3JlYXRlUmVuZGVyZXIiLCJnZXROb2RlIiwiaXNDdXN0b21Db21wb25lbnQiLCJ3cmFwcGluZ0NvbXBvbmVudCIsImdldFdyYXBwaW5nQ29tcG9uZW50UmVuZGVyZXIiLCJXcmFwcGluZ0NvbXBvbmVudFdyYXBwZXIiLCJzaW5nbGUiLCJub2RlVG9FbGVtZW50IiwiX3RoaXMyIiwicmVmbmFtZSIsInJlZnMiLCJfdGhpczMiLCJfdGhpczQiLCJsaW5rZWRSb290IiwiX3RoaXM1IiwidW5tb3VudCIsIl90aGlzNiIsIl90aGlzNyIsImNsb25lRWxlbWVudCIsIl90aGlzOCIsInNldFN0YXRlIiwiaW52b2tlU2V0U3RhdGVDYWxsYmFjayIsIl90aGlzOSIsIm5vZGVPck5vZGVzIiwiY29udGFpbnNDaGlsZHJlblN1YkFycmF5Iiwibm9kZUVxdWFsIiwiZWxlbWVudFRvTm9kZSIsInJzdE5vZGUiLCJub2RlTWF0Y2hlcyIsIl90aGlzMTAiLCJjb250YWluc01hdGNoaW5nRWxlbWVudCIsIl90aGlzMTEiLCJfdGhpczEyIiwiX3RoaXMxMyIsInJlZHVjZVRyZWVzQnlTZWxlY3RvciIsImJ1aWxkUHJlZGljYXRlIiwicmVuZGVyZWREaXZlIiwiX3RoaXMxNCIsImxvYWRDaGVlcmlvUm9vdCIsImV2ZW50IiwiX3RoaXMxNSIsIm1vY2siLCJzaW11bGF0ZUV2ZW50IiwiX3RoaXMxNiIsInRoaXNOb2RlIiwic2ltdWxhdGVFcnJvciIsInJvb3ROb2RlIiwibm9kZUhpZXJhcmNoeSIsIl90aGlzMTciLCJfc3RhdGUiLCJfdGhpczE4IiwiYWxsQ2hpbGRyZW4iLCJfdGhpczE5IiwiYXQiLCJfdGhpczIwIiwiYWxsUGFyZW50cyIsIm1hdGNoaW5nQW5jZXN0b3JzIiwiZmluZFdoZXJlIiwicHJvcE5hbWUiLCJfdGhpczIxIiwiaGFuZGxlciIsIl9sZW4iLCJhcmdzIiwiX2tleSIsInJlc3BvbnNlIiwid3JhcEludm9rZSIsIl90aGlzMjIiLCJSYW5nZUVycm9yIiwicHJvcFZhbHVlIiwid3JhcHBlZCIsInR5cGVPZk5vZGUiLCJjb25zb2xlIiwid2FybiIsIl90aGlzMjMiLCJfdGhpczI0IiwiX3RoaXMyNSIsImluaXRpYWxWYWx1ZSIsImFjY3VtIiwiX3RoaXMyNiIsInJlZHVjZVJpZ2h0IiwiYmVnaW4iLCJfdGhpczI3IiwiX3RoaXMyOCIsIl90aGlzMjkiLCJmbGF0dGVuZWQiLCJfdGhpczMwIiwiZm5OYW1lIiwiX2xlbjIiLCJfa2V5MiIsImludGVyY2VwdGVyIiwiYXR0YWNoVG8iLCJmaWx0ZXJXaGVyZSIsIl9SZWFjdFdyYXBwZXIiLCJfdGhpczMxIiwiUmVmZXJlbmNlRXJyb3IiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsImdldFByb3RvdHlwZU9mIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiX2luaGVyaXRzIiwicHJpdmF0ZVdhcm5pbmciLCJleHRyYU1lc3NhZ2UiLCJJVEVSQVRPUl9TWU1CT0wiLCJpdGVyIiwiX2dldCIsInJlY2VpdmVyIiwiZ2V0dGVyIiwiX2VuenltZVNoYWxsb3dFcXVhbDIiLCJTRVRfU1RBVEUiLCJDSElMRF9DT05URVhUIiwiUFJJTUFSWV9XUkFQUEVSIiwiUk9PVF9GSU5ERVIiLCJQUk9WSURFUl9WQUxVRVMiLCJnZXRBZGFwdGVyTGlmZWN5Y2xlcyIsIl9vcHRpb25zJGxpZmVjeWNsZXMiLCJsaWZlY3ljbGVzIiwiZW5hYmxlQ29tcG9uZW50RGlkVXBkYXRlT25TZXRTdGF0ZSIsInN1cHBvcnRQcmV2Q29udGV4dEFyZ3VtZW50T2ZDb21wb25lbnREaWRVcGRhdGUiLCJoYXNMZWdhY3lTZXRTdGF0ZUFyZyIsImhhc0xlZ2FjeVByZXZDb250ZXh0QXJnIiwiY29tcG9uZW50RGlkVXBkYXRlIiwib25TZXRTdGF0ZSIsInByZXZDb250ZXh0Iiwib3JpZ2luYWxHRFNGUCIsImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsImhhc1Nob3VsZENvbXBvbmVudFVwZGF0ZUJ1ZyIsImdldENoaWxkQ29udGV4dCIsImNhbGxlZEJ5UmVuZGVyZXIiLCJnZXRSb290Tm9kZSIsInB1cmVDb21wb25lbnRTaG91bGRDb21wb25lbnRVcGRhdGUiLCJwcmV2UHJvcHMiLCJwcmV2U3RhdGUiLCJpc1B1cmVDb21wb25lbnQiLCJpc1B1cmVSZWFjdENvbXBvbmVudCIsInByaXZhdGVTZXRDaGlsZENvbnRleHQiLCJyZW5kZXJlZE5vZGUiLCJnZXRDaGlsZENvbnRleHRTcHkiLCJsZWdhY3lDb250ZXh0TW9kZSIsImdldExhc3RSZXR1cm5WYWx1ZSIsInJlc3RvcmUiLCJjaGlsZENvbnRleHQiLCJoaWVyYXJjaHkiLCJDb21wb25lbnQiLCJjb21wb25lbnROYW1lIiwiY2hpbGRDb250ZXh0VHlwZXMiLCJjaGVja1Byb3BUeXBlcyIsIm1vY2tTQ1VJZmdEU0ZQUmV0dXJuTm9uTnVsbCIsIl9zcHlNZXRob2QiLCJzcHlNZXRob2QiLCJvcmlnaW5hbFNDVSIsInNDVVJlc3VsdCIsIm5leHRTdGF0ZSIsImRlZXBSZW5kZXIiLCJkaXZlIiwiaXNDdXN0b21Db21wb25lbnRFbGVtZW50IiwiZ2V0Q29udGV4dEZyb21XcmFwcGluZ0NvbXBvbmVudCIsInJvb3RGaW5kZXIiLCJsZWdhY3lDb250ZXh0IiwicHJvdmlkZXJWYWx1ZXMiLCJtYWtlSW5oZXJpdGVkQ2hpbGRPcHRpb25zIiwiY2hpbGRPcHRpb25zIiwiU2hhbGxvd1dyYXBwZXIiLCJsaWZlY3ljbGVFeHBlcmltZW50YWwiLCJkaXNhYmxlTGlmZWN5Y2xlTWV0aG9kcyIsInZhbGlkYXRlT3B0aW9ucyIsIndyYXBXaXRoV3JhcHBpbmdDb21wb25lbnQiLCJfYWRhcHRlciR3cmFwV2l0aFdyYXAiLCJ3cmFwcGVkTm9kZSIsIlJvb3RGaW5kZXIiLCJfZ2V0Q29udGV4dEZyb21XcmFwcGkiLCJ3cmFwcGluZ0NvbXBvbmVudExlZ2FjeUNvbnRleHQiLCJ3cmFwcGluZ0NvbXBvbmVudFByb3ZpZGVyVmFsdWVzIiwibWFrZVNoYWxsb3dPcHRpb25zIiwic3B5T25HZXRDaGlsZENvbnRleHRJbml0aWFsUmVuZGVyIiwidXBkYXRlciIsImNvbXBvbmVudERpZE1vdW50IiwiYmF0Y2hlZFVwZGF0ZXMiLCJ3aXRoU2V0U3RhdGVBbGxvd2VkIiwibmV4dENvbnRleHQiLCJzaG91bGRSZW5kZXIiLCJzaG91bGRDb21wb25lbnRVcGRhdGVTcHkiLCJzaG91bGRDb21wb25lbnRVcGRhdGUiLCJnRFNGUCIsImdldFNuYXBzaG90QmVmb3JlVXBkYXRlIiwic25hcHNob3QiLCJmcmVlemUiLCJyZXJlbmRlciIsInN0YXRlUGF5bG9hZCIsIm1heWJlSGFzVXBkYXRlIiwic2tpcHNDb21wb25lbnREaWRVcGRhdGVPbk51bGxpc2giLCJpc1JlYWN0RWxlbWVudEFsaWtlIiwiaXNFbXB0eVZhbHVlIiwiX1JFTkRFUkVSIiwiX2xlbjMiLCJfa2V5MyIsInVwZGF0ZVByaW1hcnlSb290Q29udGV4dCIsInByaW1hcnlXcmFwcGVyIiwicHJpbWFyeU5vZGUiLCJfZ2V0Q29udGV4dEZyb21XcmFwcGkyIiwicHJldlByb3ZpZGVyVmFsdWVzIiwic2V0Q29udGV4dCIsImlzQ29udGV4dENvbnN1bWVyIiwiQ29uc3VtZXIiLCJQcm92aWRlciIsImdldFByb3ZpZGVyRnJvbUNvbnN1bWVyIiwiX1NoYWxsb3dXcmFwcGVyIiwiX2dldDIiLCJfbGVuNCIsIl9rZXk0IiwiX2dldDMiLCJfbGVuNSIsIl9rZXk1Iiwic2hhbGxvd0VxdWFsIiwiZ2V0QWRhcHRlciIsIl9jb25maWd1cmF0aW9uIiwiY29uZmlnQXR0YWNoVG8iLCJjb25maWdIeWRyYXRlSW4iLCJoeWRyYXRlSW4iLCJjb25maWciLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJ2YWxpZGF0ZU1vdW50T3B0aW9ucyIsImZpbmFsQXR0YWNoVG8iLCJmaW5hbEh5ZHJhdGVJbiIsIm1vdW50VGFyZ2V0cyIsImNvbXBvbmVudCIsIl92YWxpZGF0ZUFkYXB0ZXIyIiwiaW5zdCIsIm5vZGVIYXNUeXBlIiwic3ViQXJyYXkiLCJsZWZ0IiwicmlnaHQiLCJhcnJheXNFcXVhbCIsImNoaWxkcmVuVG9TaW1wbGlmaWVkQXJyYXkiLCJhcmciLCJpc1RleHR1YWxOb2RlIiwiY2xlYW51cCIsIkFORCIsImZucyIsImZuc1JldmVyc2VkIiwiY3JlYXRlRWxlbWVudCIsImdldFN0dWIiLCJsYXN0UmV0dXJuVmFsdWUiLCJvcmlnaW5hbE1ldGhvZCIsIl9lbnp5bWVTaGFsbG93RXF1YWwiLCJfdXRpbHMiLCJfY2hlZXJpbzIiLCJfb2JqZWN0SXMyIiwiX3N0cmluZ1Byb3RvdHlwZTIiLCJpbnRlcm5hbENoaWxkcmVuQ29tcGFyZSIsImxlbkNvbXAiLCJpc0xvb3NlIiwibm9kZUNvbXBhcmUiLCJmbGF0QSIsImZsYXRCIiwiY2hpbGRyZW5NYXRjaCIsImNoaWxkcmVuRXF1YWwiLCJyZW1vdmVOdWxsYXJ5UmVkdWNlciIsIl9yZWY1IiwiX3JlZjYiLCJhZGRpdGlvbiIsImludGVybmFsTm9kZUNvbXBhcmUiLCJsZWZ0S2V5cyIsImxlZnRIYXNDaGlsZHJlbiIsInJpZ2h0SGFzQ2hpbGRyZW4iLCJyaWdodEtleXMiLCJub2RlQ2hpbGRyZW4iLCJjaGlsZHJlbkFycmF5Iiwic2ltcGxpZmllZEFycmF5IiwicHJldmlvdXNDaGlsZCIsInJlbmRlcmVkVmFsdWUiLCJjb25maWd1cmF0aW9uIiwiZXh0cmEiLCJfUmVhY3RXcmFwcGVyMiIsIl9TaGFsbG93V3JhcHBlcjIiLCJfRW56eW1lQWRhcHRlcjIiLCJfbW91bnQyIiwiX3NoYWxsb3cyIiwiX3JlbmRlcjIiLCJzaGFsbG93IiwibW91bnQiLCJjb25maWd1cmUiLCJyZWR1Y2VUcmVlQnlTZWxlY3RvciIsInJvb3RzIiwidW5pcXVlIiwiX3JzdFNlbGVjdG9yUGFyc2VyIiwiX2J5Q29uc3RydWN0b3IyIiwiY3JlYXRlUGFyc2VyIiwiQ0hJTEQiLCJBREpBQ0VOVF9TSUJMSU5HIiwiR0VORVJBTF9TSUJMSU5HIiwiREVTQ0VOREFOVCIsIlNFTEVDVE9SIiwiVFlQRV9TRUxFQ1RPUiIsIkNMQVNTX1NFTEVDVE9SIiwiSURfU0VMRUNUT1IiLCJBVFRSSUJVVEVfUFJFU0VOQ0UiLCJBVFRSSUJVVEVfVkFMVUUiLCJQU0VVRE9fQ0xBU1MiLCJQU0VVRE9fRUxFTUVOVCIsIkVYQUNUX0FUVFJJQlVURV9PUEVSQVRPUiIsIldISVRFTElTVF9BVFRSSUJVVEVfT1BFUkFUT1IiLCJIWVBIRU5BVEVEX0FUVFJJQlVURV9PUEVSQVRPUiIsIlBSRUZJWF9BVFRSSUJVVEVfT1BFUkFUT1IiLCJTVUZGSVhfQVRUUklCVVRFX09QRVJBVE9SIiwiU1VCU1RSSU5HX0FUVFJJQlVURV9PUEVSQVRPUiIsInVuaXF1ZVJlZHVjZSIsInNhZmVseUdlbmVyYXRlVG9rZW5zIiwibm9kZU1hdGNoZXNUb2tlbiIsIm9wZXJhdG9yIiwibm9kZVByb3BzIiwibm9kZVByb3BWYWx1ZSIsIm1hdGNoQXR0cmlidXRlU2VsZWN0b3IiLCJwYXJhbWV0ZXJzIiwiX3JlbmRlcmVkMiIsImFjdGl2ZUVsZW1lbnQiLCJtYXRjaFBzZXVkb1NlbGVjdG9yIiwiYnVpbGRQcmVkaWNhdGVGcm9tVG9rZW4iLCJib2R5IiwiYm9keVRva2VuIiwiaXNDb21wbGV4U2VsZWN0b3IiLCJpc1ZhbGlkRWxlbWVudFR5cGUiLCJtYXRjaGVzRWxlbWVudFR5cGUiLCJtYXRjaEFkamFjZW50U2libGluZ3MiLCJwYXJlbnRDaGlsZHJlbiIsIm5vZGVJbmRleCIsImFkamFjZW50U2libGluZyIsIm1hdGNoR2VuZXJhbFNpYmxpbmciLCJ5b3VuZ2VyU2libGluZ3MiLCJtYXRjaERpcmVjdENoaWxkIiwibWF0Y2hEZXNjZW5kYW50IiwiX3ByZWRpY2F0ZSIsInByb3Blcmx5Qm94ZXNOb25TdHJpY3QiLCJwcm9wZXJseUJveGVzU3RyaWN0IiwidGhyZXdFeGNlcHRpb24iLCJFdmFsRXJyb3IiLCJTeW50YXhFcnJvciIsIlVSSUVycm9yIiwiaGFzVW5zY29wYWJsZXMiLCJ1bnNjb3BhYmxlcyIsImlzUHJpbWl0aXZlIiwiaXNDYWxsYWJsZSIsImlzRGF0ZSIsImlzU3ltYm9sIiwiZXhvdGljVG9QcmltIiwiaGludCIsInRvUHJpbWl0aXZlIiwiUCIsIkdldE1ldGhvZCIsIm1ldGhvZE5hbWVzIiwib3JkaW5hcnlUb1ByaW1pdGl2ZSIsImNvbmNhdHR5IiwiYXJyTGlrZSIsInNsaWN5IiwiYm91bmRMZW5ndGgiLCJib3VuZEFyZ3MiLCJqb2luZXIiLCJqb2lueSIsIkVtcHR5IiwiSGFzT3duUHJvcGVydHkiLCJmdW5jdGlvbnNIYXZlTmFtZXMiLCIkZnVuY3Rpb25Ub1N0cmluZyIsIiRzdHJpbmdNYXRjaCIsImNsYXNzUmVnZXgiLCJpc0lFNjgiLCJmdW5jdGlvblByb3RvIiwiaXNEREEiLCJhbGwiLCJpc0NsYXNzIiwiVHlwZUVyciIsImdPUEQiLCJmdW5jdGlvbnNIYXZlQ29uZmlndXJhYmxlTmFtZXMiLCIkYmluZCIsImJvdW5kRnVuY3Rpb25zSGF2ZU5hbWVzIiwiJEVycm9yIiwiJEV2YWxFcnJvciIsIiRSYW5nZUVycm9yIiwiJFJlZmVyZW5jZUVycm9yIiwiJFVSSUVycm9yIiwiJEZ1bmN0aW9uIiwiZ2V0RXZhbGxlZENvbnN0cnVjdG9yIiwiZXhwcmVzc2lvblN5bnRheCIsIiRnT1BEIiwidGhyb3dUeXBlRXJyb3IiLCJUaHJvd1R5cGVFcnJvciIsImNhbGxlZVRocm93cyIsImdPUER0aHJvd3MiLCJoYXNQcm90byIsImdldFByb3RvIiwibmVlZHNFdmFsIiwiVHlwZWRBcnJheSIsIlVpbnQ4QXJyYXkiLCJJTlRSSU5TSUNTIiwiQWdncmVnYXRlRXJyb3IiLCJBcnJheUJ1ZmZlciIsIkF0b21pY3MiLCJCaWdJbnQiLCJCaWdJbnQ2NEFycmF5IiwiQmlnVWludDY0QXJyYXkiLCJEYXRhVmlldyIsImRlY29kZVVSSSIsImRlY29kZVVSSUNvbXBvbmVudCIsImVuY29kZVVSSSIsImV2YWwiLCJGbG9hdDMyQXJyYXkiLCJGbG9hdDY0QXJyYXkiLCJGaW5hbGl6YXRpb25SZWdpc3RyeSIsIkludDhBcnJheSIsIkludDE2QXJyYXkiLCJJbnQzMkFycmF5IiwiaXNOYU4iLCJwYXJzZUZsb2F0IiwiUHJvbWlzZSIsIlByb3h5IiwiUmVmbGVjdCIsIlNoYXJlZEFycmF5QnVmZmVyIiwiVWludDhDbGFtcGVkQXJyYXkiLCJVaW50MzJBcnJheSIsIldlYWtNYXAiLCJXZWFrUmVmIiwiZXJyb3JQcm90byIsImRvRXZhbCIsImdlbiIsIkxFR0FDWV9BTElBU0VTIiwiJGNvbmNhdCIsIiRzcGxpY2VBcHBseSIsIiRyZXBsYWNlIiwiJHN0clNsaWNlIiwiJGV4ZWMiLCJyZVByb3BOYW1lIiwicmVFc2NhcGVDaGFyIiwiZ2V0QmFzZUludHJpbnNpYyIsImludHJpbnNpY05hbWUiLCJwYXJ0cyIsIm51bWJlciIsInN1YlN0cmluZyIsInN0cmluZ1RvUGF0aCIsImludHJpbnNpY0Jhc2VOYW1lIiwiaW50cmluc2ljUmVhbE5hbWUiLCJza2lwRnVydGhlckNhY2hpbmciLCJpc093biIsInBhcnQiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3JzIiwiaGFzQXJyYXlMZW5ndGhEZWZpbmVCdWciLCJmb28iLCJvcmlnU3ltYm9sIiwiaGFzU3ltYm9sU2hhbSIsInN5bU9iaiIsImdldE93blByb3BlcnR5TmFtZXMiLCJzeW1zIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJ0b1N0cmluZ1RhZyIsIiRoYXNPd24iLCJnZXREYXRhIiwidW5rbm93biIsIiRwdXNoIiwibWFwcGVyIiwibWFwcGVkIiwiZXhwZWN0ZWRzIiwiZ2V0Q29uc3RydWN0b3IiLCJhY3R1YWwiLCJIVE1MVW5rbm93bkVsZW1lbnQiLCJIVE1MRWxlbWVudCIsImV4cGVjdGVkIiwiYWx0ZXJuYXRlIiwiYWx0Q29uc3RydWN0b3IiLCJjb25zdHJ1Y3Rvck5hbWUiLCJleHBlY3RlZENvbnN0cnVjdG9yIiwiUGFyc2VyIiwiVG9rZW5pemVyX2pzXzEiLCJmb3JtVGFncyIsInBUYWciLCJ0YWJsZVNlY3Rpb25UYWdzIiwiZGR0VGFncyIsInJ0cFRhZ3MiLCJvcGVuSW1wbGllc0Nsb3NlIiwidm9pZEVsZW1lbnRzIiwiZm9yZWlnbkNvbnRleHRFbGVtZW50cyIsImh0bWxJbnRlZ3JhdGlvbkVsZW1lbnRzIiwicmVOYW1lRW5kIiwiY2JzIiwib3BlblRhZ1N0YXJ0IiwidGFnbmFtZSIsImF0dHJpYm5hbWUiLCJhdHRyaWJ2YWx1ZSIsInN0YWNrIiwiZm9yZWlnbkNvbnRleHQiLCJidWZmZXJzIiwiYnVmZmVyT2Zmc2V0Iiwid3JpdGVJbmRleCIsImVuZGVkIiwibG93ZXJDYXNlVGFnTmFtZXMiLCJ0b2tlbml6ZXIiLCJUb2tlbml6ZXIiLCJnZXRTbGljZSIsIm9udGV4dGVudGl0eSIsImdldFNlY3Rpb25TdGFydCIsImlzVm9pZEVsZW1lbnQiLCJvbm9wZW50YWduYW1lIiwiZW1pdE9wZW5UYWciLCJpbXBsaWVzQ2xvc2UiLCJlbmRPcGVuVGFnIiwiaXNJbXBsaWVkIiwib25vcGVudGFnZW5kIiwiX2YiLCJjb3VudCIsImNsb3NlQ3VycmVudFRhZyIsIm9uc2VsZmNsb3Npbmd0YWciLCJyZWNvZ25pemVTZWxmQ2xvc2luZyIsImlzT3BlbkltcGxpZWQiLCJvbmF0dHJpYm5hbWUiLCJvbmF0dHJpYmRhdGEiLCJvbmF0dHJpYmVudGl0eSIsIm9uYXR0cmliZW5kIiwib25hdHRyaWJ1dGUiLCJRdW90ZVR5cGUiLCJEb3VibGUiLCJTaW5nbGUiLCJOb1ZhbHVlIiwiZ2V0SW5zdHJ1Y3Rpb25OYW1lIiwib25kZWNsYXJhdGlvbiIsIm9uY2RhdGEiLCJfZyIsIl9oIiwiX2oiLCJyZWNvZ25pemVDREFUQSIsInBhcnNlQ29tcGxldGUiLCJzaGlmdEJ1ZmZlciIsImNodW5rIiwicnVubmluZyIsInBhdXNlIiwicmVzdW1lIiwicGFyc2VDaHVuayIsIlN0YXRlIiwiU3BhY2UiLCJOZXdMaW5lIiwiVGFiIiwiRm9ybUZlZWQiLCJDYXJyaWFnZVJldHVybiIsImlzRW5kT2ZUYWdTZWN0aW9uIiwiU2xhc2giLCJHdCIsIlplcm8iLCJOaW5lIiwiU2VxdWVuY2VzIiwiQ2RhdGEiLCJDZGF0YUVuZCIsIkNvbW1lbnRFbmQiLCJTY3JpcHRFbmQiLCJTdHlsZUVuZCIsIlRpdGxlRW5kIiwiYnVmZmVyIiwic2VjdGlvblN0YXJ0IiwiYmFzZVN0YXRlIiwiaXNTcGVjaWFsIiwiY3VycmVudFNlcXVlbmNlIiwic2VxdWVuY2VJbmRleCIsInRyaWVJbmRleCIsInRyaWVDdXJyZW50IiwiZW50aXR5UmVzdWx0IiwiZW50aXR5RXhjZXNzIiwiZW50aXR5VHJpZSIsImZpbmlzaCIsImdldEluZGV4Iiwic3RhdGVUZXh0IiwiTHQiLCJmYXN0Rm9yd2FyZFRvIiwiQmVmb3JlVGFnTmFtZSIsIkFtcCIsIkJlZm9yZUVudGl0eSIsInN0YXRlU3BlY2lhbFN0YXJ0U2VxdWVuY2UiLCJpc0VuZCIsIkluVGFnTmFtZSIsInN0YXRlSW5UYWdOYW1lIiwic3RhdGVJblNwZWNpYWxUYWciLCJlbmRPZlRleHQiLCJhY3R1YWxJbmRleCIsInN0YXRlSW5DbG9zaW5nVGFnTmFtZSIsInN0YXRlQ0RBVEFTZXF1ZW5jZSIsIkluQ29tbWVudExpa2UiLCJJbkRlY2xhcmF0aW9uIiwic3RhdGVJbkRlY2xhcmF0aW9uIiwic3RhdGVJbkNvbW1lbnRMaWtlIiwiaXNUYWdTdGFydENoYXIiLCJpc0FTQ0lJQWxwaGEiLCJzdGFydFNwZWNpYWwiLCJzZXF1ZW5jZSIsIlNwZWNpYWxTdGFydFNlcXVlbmNlIiwic3RhdGVCZWZvcmVUYWdOYW1lIiwiRXhjbGFtYXRpb25NYXJrIiwiQmVmb3JlRGVjbGFyYXRpb24iLCJRdWVzdGlvbm1hcmsiLCJJblByb2Nlc3NpbmdJbnN0cnVjdGlvbiIsImxvd2VyIiwiQmVmb3JlU3BlY2lhbFMiLCJCZWZvcmVDbG9zaW5nVGFnTmFtZSIsIkJlZm9yZUF0dHJpYnV0ZU5hbWUiLCJzdGF0ZUJlZm9yZUF0dHJpYnV0ZU5hbWUiLCJzdGF0ZUJlZm9yZUNsb3NpbmdUYWdOYW1lIiwiSW5DbG9zaW5nVGFnTmFtZSIsIkluU3BlY2lhbENvbW1lbnQiLCJBZnRlckNsb3NpbmdUYWdOYW1lIiwic3RhdGVBZnRlckNsb3NpbmdUYWdOYW1lIiwiSW5TcGVjaWFsVGFnIiwiSW5TZWxmQ2xvc2luZ1RhZyIsIkluQXR0cmlidXRlTmFtZSIsInN0YXRlSW5TZWxmQ2xvc2luZ1RhZyIsInN0YXRlSW5BdHRyaWJ1dGVOYW1lIiwiRXEiLCJBZnRlckF0dHJpYnV0ZU5hbWUiLCJzdGF0ZUFmdGVyQXR0cmlidXRlTmFtZSIsIkJlZm9yZUF0dHJpYnV0ZVZhbHVlIiwic3RhdGVCZWZvcmVBdHRyaWJ1dGVWYWx1ZSIsIkRvdWJsZVF1b3RlIiwiSW5BdHRyaWJ1dGVWYWx1ZURxIiwiU2luZ2xlUXVvdGUiLCJJbkF0dHJpYnV0ZVZhbHVlU3EiLCJJbkF0dHJpYnV0ZVZhbHVlTnEiLCJzdGF0ZUluQXR0cmlidXRlVmFsdWVOb1F1b3RlcyIsImhhbmRsZUluQXR0cmlidXRlVmFsdWUiLCJzdGF0ZUluQXR0cmlidXRlVmFsdWVEb3VibGVRdW90ZXMiLCJzdGF0ZUluQXR0cmlidXRlVmFsdWVTaW5nbGVRdW90ZXMiLCJVbnF1b3RlZCIsInN0YXRlQmVmb3JlRGVjbGFyYXRpb24iLCJPcGVuaW5nU3F1YXJlQnJhY2tldCIsIkNEQVRBU2VxdWVuY2UiLCJEYXNoIiwiQmVmb3JlQ29tbWVudCIsInN0YXRlSW5Qcm9jZXNzaW5nSW5zdHJ1Y3Rpb24iLCJzdGF0ZUJlZm9yZUNvbW1lbnQiLCJzdGF0ZUluU3BlY2lhbENvbW1lbnQiLCJzdGF0ZUJlZm9yZVNwZWNpYWxTIiwic3RhdGVCZWZvcmVFbnRpdHkiLCJCZWZvcmVOdW1lcmljRW50aXR5IiwiSW5OYW1lZEVudGl0eSIsInN0YXRlSW5OYW1lZEVudGl0eSIsImVtaXROYW1lZEVudGl0eSIsIm1hc2tlZCIsImFsbG93TGVnYWN5RW50aXR5IiwiU2VtaSIsImVudGl0eVN0YXJ0IiwiZW1pdFBhcnRpYWwiLCJzdGF0ZUJlZm9yZU51bWVyaWNFbnRpdHkiLCJMb3dlclgiLCJJbkhleEVudGl0eSIsIkluTnVtZXJpY0VudGl0eSIsInN0YXRlSW5OdW1lcmljRW50aXR5Iiwic3RyaWN0Iiwic3RhdGVJbkhleEVudGl0eSIsIlVwcGVyRiIsIkxvd2VyRiIsImlzSGV4RGlnaXQiLCJzaG91bGRDb250aW51ZSIsImhhbmRsZVRyYWlsaW5nRGF0YSIsInBhcnNlRmVlZCIsImNyZWF0ZURvbVN0cmVhbSIsInBhcnNlRE9NIiwiRGVmYXVsdEhhbmRsZXIiLCJQYXJzZXJfanNfMSIsIlBhcnNlcl9qc18yIiwiZWxlbWVudENhbGxiYWNrIiwiZG9tdXRpbHNfMiIsInBhcnNlRmVlZERlZmF1bHRPcHRpb25zIiwiJGJvb2xUb1N0ciIsIiR0b1N0cmluZyIsImhhc1RvU3RyaW5nVGFnIiwidHJ5Qm9vbGVhbk9iamVjdCIsImJhZEFycmF5TGlrZSIsImlzQ2FsbGFibGVNYXJrZXIiLCJmblRvU3RyIiwicmVmbGVjdEFwcGx5IiwiY29uc3RydWN0b3JSZWdleCIsImlzRVM2Q2xhc3NGbiIsImZuU3RyIiwidHJ5RnVuY3Rpb25PYmplY3QiLCJzdHJDbGFzcyIsImdldERheSIsInRyeURhdGVPYmplY3QiLCJudW1Ub1N0ciIsInRyeU51bWJlck9iamVjdCIsImlzUmVnZXhNYXJrZXIiLCJiYWRTdHJpbmdpZmllciIsInRocm93UmVnZXhNYXJrZXIiLCJzdHJWYWx1ZSIsInRyeVN0cmluZ09iamVjdCIsImlzU3Vic2V0IiwiX2lzU3Vic2V0IiwiX3giLCJfeDIiLCJzdXBlcnNldCIsInN1YnNldCIsInN1YnNldEl0ZW0iLCJzdXBlcnNldEl0ZW0iLCJzeW1Ub1N0ciIsInN5bVN0cmluZ1JlZ2V4IiwiaXNTeW1ib2xPYmplY3QiLCJyZVVuZXNjYXBlZEh0bWwiLCJyZUhhc1VuZXNjYXBlZEh0bWwiLCJzb3VyY2UiLCJmcmVlR2xvYmFsIiwiZnJlZVNlbGYiLCJlc2NhcGVIdG1sQ2hhciIsIm9iamVjdFRvU3RyaW5nIiwic3ltYm9sUHJvdG8iLCJzeW1ib2xUb1N0cmluZyIsImlzT2JqZWN0TGlrZSIsImJhc2VUb1N0cmluZyIsIklORklOSVRZIiwiTUFYX1NBRkVfSU5URUdFUiIsImFyZ3NUYWciLCJmdW5jVGFnIiwiZ2VuVGFnIiwiYXJyYXlQdXNoIiwib2JqZWN0UHJvdG8iLCJzcHJlYWRhYmxlU3ltYm9sIiwiaXNDb25jYXRTcHJlYWRhYmxlIiwiYmFzZUZsYXR0ZW4iLCJpc1N0cmljdCIsImlzRmxhdHRlbmFibGUiLCJpc0xlbmd0aCIsImlzT2JqZWN0IiwiaXNGdW5jdGlvbiIsImlzQXJyYXlMaWtlT2JqZWN0IiwiaXNBcmd1bWVudHMiLCJIQVNIX1VOREVGSU5FRCIsIkNPTVBBUkVfUEFSVElBTF9GTEFHIiwiQ09NUEFSRV9VTk9SREVSRURfRkxBRyIsImFycmF5VGFnIiwiYXN5bmNUYWciLCJib29sVGFnIiwiZGF0ZVRhZyIsImVycm9yVGFnIiwibWFwVGFnIiwibnVtYmVyVGFnIiwibnVsbFRhZyIsIm9iamVjdFRhZyIsInByb21pc2VUYWciLCJwcm94eVRhZyIsInJlZ2V4cFRhZyIsInNldFRhZyIsInN0cmluZ1RhZyIsInVuZGVmaW5lZFRhZyIsIndlYWtNYXBUYWciLCJhcnJheUJ1ZmZlclRhZyIsImRhdGFWaWV3VGFnIiwicmVJc0hvc3RDdG9yIiwicmVJc1VpbnQiLCJ0eXBlZEFycmF5VGFncyIsImZyZWVFeHBvcnRzIiwiZnJlZU1vZHVsZSIsIm1vZHVsZUV4cG9ydHMiLCJmcmVlUHJvY2VzcyIsInByb2Nlc3MiLCJub2RlVXRpbCIsImJpbmRpbmciLCJub2RlSXNUeXBlZEFycmF5IiwiaXNUeXBlZEFycmF5IiwiYXJyYXlTb21lIiwibWFwVG9BcnJheSIsInNldFRvQXJyYXkiLCJ1aWQiLCJ0cmFuc2Zvcm0iLCJhcnJheVByb3RvIiwiZnVuY1Byb3RvIiwiY29yZUpzRGF0YSIsImZ1bmNUb1N0cmluZyIsIm1hc2tTcmNLZXkiLCJJRV9QUk9UTyIsIm5hdGl2ZU9iamVjdFRvU3RyaW5nIiwicmVJc05hdGl2ZSIsInN5bVRvU3RyaW5nVGFnIiwibmF0aXZlR2V0U3ltYm9scyIsIm5hdGl2ZUlzQnVmZmVyIiwibmF0aXZlS2V5cyIsImdldE5hdGl2ZSIsIm5hdGl2ZUNyZWF0ZSIsImRhdGFWaWV3Q3RvclN0cmluZyIsInRvU291cmNlIiwibWFwQ3RvclN0cmluZyIsInByb21pc2VDdG9yU3RyaW5nIiwic2V0Q3RvclN0cmluZyIsIndlYWtNYXBDdG9yU3RyaW5nIiwic3ltYm9sVmFsdWVPZiIsIkhhc2giLCJlbnRyaWVzIiwiY2xlYXIiLCJMaXN0Q2FjaGUiLCJNYXBDYWNoZSIsIlNldENhY2hlIiwiX19kYXRhX18iLCJTdGFjayIsImFzc29jSW5kZXhPZiIsImJhc2VHZXRUYWciLCJ1bm1hc2tlZCIsImdldFJhd1RhZyIsImJhc2VJc0FyZ3VtZW50cyIsImJhc2VJc0VxdWFsIiwiYml0bWFzayIsImN1c3RvbWl6ZXIiLCJlcXVhbEZ1bmMiLCJvYmpJc0FyciIsIm90aElzQXJyIiwib2JqVGFnIiwiZ2V0VGFnIiwib3RoVGFnIiwib2JqSXNPYmoiLCJvdGhJc09iaiIsImlzU2FtZVRhZyIsImVxdWFsQXJyYXlzIiwiYnl0ZUxlbmd0aCIsImJ5dGVPZmZzZXQiLCJtZXNzYWdlIiwiY29udmVydCIsImlzUGFydGlhbCIsInN0YWNrZWQiLCJlcXVhbEJ5VGFnIiwib2JqSXNXcmFwcGVkIiwib3RoSXNXcmFwcGVkIiwib2JqVW53cmFwcGVkIiwib3RoVW53cmFwcGVkIiwib2JqUHJvcHMiLCJnZXRBbGxLZXlzIiwib2JqTGVuZ3RoIiwic2tpcEN0b3IiLCJvdGhWYWx1ZSIsImNvbXBhcmVkIiwib2JqQ3RvciIsIm90aEN0b3IiLCJlcXVhbE9iamVjdHMiLCJiYXNlSXNFcXVhbERlZXAiLCJhcnJMZW5ndGgiLCJvdGhMZW5ndGgiLCJzZWVuIiwiYXJyVmFsdWUiLCJvdGhJbmRleCIsImtleXNGdW5jIiwic3ltYm9sc0Z1bmMiLCJiYXNlR2V0QWxsS2V5cyIsImdldFN5bWJvbHMiLCJnZXRNYXBEYXRhIiwiZ2V0VmFsdWUiLCJpc01hc2tlZCIsImJhc2VJc05hdGl2ZSIsInBhaXJzIiwiTEFSR0VfQVJSQVlfU0laRSIsInJlc0luZGV4Iiwic3ltYm9sIiwiYXJyYXlGaWx0ZXIiLCJpc0luZGV4IiwicmVzb2x2ZSIsIkN0b3IiLCJjdG9yU3RyaW5nIiwiYmFzZVVuYXJ5IiwiaW5oZXJpdGVkIiwiaXNBcnIiLCJpc0FyZyIsImlzQnVmZiIsImlzVHlwZSIsInNraXBJbmRleGVzIiwiaXRlcmF0ZWUiLCJiYXNlVGltZXMiLCJhcnJheUxpa2VLZXlzIiwiYmFzZUtleXMiLCJmYWN0b3J5IiwiUnVsZSIsInN5bWJvbHMiLCJwb3N0cHJvY2VzcyIsImhpZ2hlc3RJZCIsImRvdCIsInJlZmVyZW5jZSIsIndhbnRlZEJ5IiwiaXNDb21wbGV0ZSIsIkNvbHVtbiIsImdyYW1tYXIiLCJzdGF0ZXMiLCJ3YW50cyIsInNjYW5uYWJsZSIsImNvbXBsZXRlZCIsIkdyYW1tYXIiLCJieU5hbWUiLCJTdHJlYW1MZXhlciIsImZyb21Db21waWxlZCIsImtlZXBIaXN0b3J5IiwibGV4ZXIiLCJsZXhlclN0YXRlIiwiY29sdW1uIiwidGFibGUiLCJwcmVkaWN0IiwiZ2V0U3ltYm9sU2hvcnREaXNwbGF5IiwibGl0ZXJhbCIsIndpdGhDdXJzb3JBdCIsInN5bWJvbFNlcXVlbmNlIiwiYnVpbGQiLCJmYWlsIiwibmV4dENvbHVtbiIsInciLCJjb21wbGV0ZSIsImV4cCIsIm51bGxzIiwiY29weSIsIkxleGVyIiwiUGFyc2VyU3RhcnQiLCJQYXJzZXJSdWxlcyIsImxpbmUiLCJsYXN0TGluZUJyZWFrIiwiY29sIiwiY2giLCJzYXZlIiwiZm9ybWF0RXJyb3IiLCJsaW5lcyIsIm5leHRMaW5lQnJlYWsiLCJsYXN0TGluZURpZ2l0cyIsInBhZCIsInJlcG9ydExleGVyRXJyb3IiLCJleHBlY3QiLCJpc1Rva2VuIiwicmVwb3J0RXJyb3IiLCJsZXhlckVycm9yIiwidG9rZW5EaXNwbGF5IiwibGV4ZXJNZXNzYWdlIiwicmVwb3J0RXJyb3JDb21tb24iLCJsYXN0Q29sdW1uSW5kZXgiLCJsYXN0Q29sdW1uIiwiZXhwZWN0YW50U3RhdGVzIiwibmV4dFN5bWJvbCIsImRpc3BsYXlTdGF0ZVN0YWNrIiwiYnVpbGRGaXJzdFN0YXRlU3RhY2siLCJzdGF0ZVN0YWNrIiwic3ltYm9sRGlzcGxheSIsImdldFN5bWJvbERpc3BsYXkiLCJsYXN0RGlzcGxheSIsInNhbWVEaXNwbGF5Q291bnQiLCJkaXNwbGF5IiwiZ2V0U3ltYm9sTG9uZ0Rpc3BsYXkiLCJjaGlsZFZpc2l0ZWQiLCJjaGlsZFJlc3VsdCIsInJld2luZCIsImNvbnNpZGVyYXRpb25zIiwibmVhcmxleSIsImdlbmVyYXRlIiwiYWJzQSIsImJNb2QiLCJhUG9zXzEiLCJtaW5WYWx1ZV8xIiwiY2VpbCIsImZvcm11bGEiLCJ3aGl0ZXNwYWNlIiwic2lnbiIsInJlYWRTaWduIiwicmVhZE51bWJlciIsInNraXBXaGl0ZXNwYWNlIiwiaGFzTWFwIiwibWFwU2l6ZURlc2NyaXB0b3IiLCJtYXBTaXplIiwibWFwRm9yRWFjaCIsImhhc1NldCIsInNldFNpemVEZXNjcmlwdG9yIiwic2V0U2l6ZSIsInNldEZvckVhY2giLCJ3ZWFrTWFwSGFzIiwid2Vha1NldEhhcyIsIndlYWtSZWZEZXJlZiIsImRlcmVmIiwiYm9vbGVhblZhbHVlT2YiLCJmdW5jdGlvblRvU3RyaW5nIiwiJG1hdGNoIiwiJHRvVXBwZXJDYXNlIiwiJHRvTG93ZXJDYXNlIiwiJHRlc3QiLCIkam9pbiIsIiRhcnJTbGljZSIsIiRmbG9vciIsImZsb29yIiwiYmlnSW50VmFsdWVPZiIsImdPUFMiLCJzeW1Ub1N0cmluZyIsImhhc1NoYW1tZWRTeW1ib2xzIiwiaXNFbnVtZXJhYmxlIiwiZ1BPIiwiYWRkTnVtZXJpY1NlcGFyYXRvciIsInNlcFJlZ2V4IiwiaW50IiwiaW50U3RyIiwiZGVjIiwidXRpbEluc3BlY3QiLCJpbnNwZWN0Q3VzdG9tIiwiY3VzdG9tIiwiaW5zcGVjdFN5bWJvbCIsIndyYXBRdW90ZXMiLCJkZWZhdWx0U3R5bGUiLCJxdW90ZUNoYXIiLCJpc1JlZ0V4cCIsImluc3BlY3RfIiwibWF4U3RyaW5nTGVuZ3RoIiwiY3VzdG9tSW5zcGVjdCIsIm51bWVyaWNTZXBhcmF0b3IiLCJpbnNwZWN0U3RyaW5nIiwiYmlnSW50U3RyIiwibWF4RGVwdGgiLCJiYXNlSW5kZW50IiwiZ2V0SW5kZW50IiwiaW5zcGVjdCIsIm5vSW5kZW50IiwibmV3T3B0cyIsImYiLCJuYW1lT2YiLCJhcnJPYmpLZXlzIiwic3ltU3RyaW5nIiwibWFya0JveGVkIiwibm9kZU5hbWUiLCJnZXRBdHRyaWJ1dGUiLCJhdHRycyIsImNoaWxkTm9kZXMiLCJ4cyIsInNpbmdsZUxpbmVWYWx1ZXMiLCJpbmRlbnRlZEpvaW4iLCJpc0Vycm9yIiwiY2F1c2UiLCJpc01hcCIsIm1hcFBhcnRzIiwiY29sbGVjdGlvbk9mIiwiaXNTZXQiLCJzZXRQYXJ0cyIsImlzV2Vha01hcCIsIndlYWtDb2xsZWN0aW9uT2YiLCJpc1dlYWtTZXQiLCJpc1dlYWtSZWYiLCJpc0JpZ0ludCIsImlzQm9vbGVhbiIsInlzIiwiaXNQbGFpbk9iamVjdCIsInByb3RvVGFnIiwicmVtYWluaW5nIiwidHJhaWxlciIsImxvd2J5dGUiLCJsaW5lSm9pbmVyIiwic3ltTWFwIiwibnVtYmVySXNOYU4iLCJrZXlzU2hpbSIsImlzQXJncyIsImhhc0RvbnRFbnVtQnVnIiwiaGFzUHJvdG9FbnVtQnVnIiwiZG9udEVudW1zIiwiZXF1YWxzQ29uc3RydWN0b3JQcm90b3R5cGUiLCJjdG9yIiwiZXhjbHVkZWRLZXlzIiwiJGFwcGxpY2F0aW9uQ2FjaGUiLCIkY29uc29sZSIsIiRleHRlcm5hbCIsIiRmcmFtZSIsIiRmcmFtZUVsZW1lbnQiLCIkZnJhbWVzIiwiJGlubmVySGVpZ2h0IiwiJGlubmVyV2lkdGgiLCIkb25tb3pmdWxsc2NyZWVuY2hhbmdlIiwiJG9ubW96ZnVsbHNjcmVlbmVycm9yIiwiJG91dGVySGVpZ2h0IiwiJG91dGVyV2lkdGgiLCIkcGFnZVhPZmZzZXQiLCIkcGFnZVlPZmZzZXQiLCIkcGFyZW50IiwiJHNjcm9sbExlZnQiLCIkc2Nyb2xsVG9wIiwiJHNjcm9sbFgiLCIkc2Nyb2xsWSIsIiRzZWxmIiwiJHdlYmtpdEluZGV4ZWREQiIsIiR3ZWJraXRTdG9yYWdlSW5mbyIsIiR3aW5kb3ciLCJoYXNBdXRvbWF0aW9uRXF1YWxpdHlCdWciLCJ0aGVLZXlzIiwic2tpcFByb3RvIiwic2tpcENvbnN0cnVjdG9yIiwiZXF1YWxzQ29uc3RydWN0b3JQcm90b3R5cGVJZk5vdEJ1Z2d5Iiwib3JpZ0tleXMiLCJvcmlnaW5hbEtleXMiLCJrZXlzV29ya3NXaXRoQXJndW1lbnRzIiwiY2FsbGVlIiwib2JqZWN0S2V5cyIsInRvT2JqZWN0IiwiJHByb3BJc0VudW1lcmFibGUiLCJvcmlnaW5hbEdldFN5bWJvbHMiLCJzb3VyY2UxIiwibmV4dEtleSIsImxldHRlcnMiLCJsYWNrc1Byb3BlckVudW1lcmF0aW9uT3JkZXIiLCJwcmV2ZW50RXh0ZW5zaW9ucyIsInRocm93ZXIiLCJhc3NpZ25IYXNQZW5kaW5nRXhjZXB0aW9ucyIsIiRpc0VudW1lcmFibGUiLCJlbnRyeXMiLCJ2YWxzIiwiUmVhY3RQcm9wVHlwZXNTZWNyZXQiLCJlbXB0eUZ1bmN0aW9uIiwiZW1wdHlGdW5jdGlvbldpdGhSZXNldCIsInJlc2V0V2FybmluZ0NhY2hlIiwibG9jYXRpb24iLCJwcm9wRnVsbE5hbWUiLCJzZWNyZXQiLCJnZXRTaGltIiwiaXNSZXF1aXJlZCIsIlJlYWN0UHJvcFR5cGVzIiwiYmlnaW50IiwiYm9vbCIsImFycmF5T2YiLCJlbGVtZW50VHlwZSIsImluc3RhbmNlT2YiLCJvYmplY3RPZiIsIm9uZU9mIiwib25lT2ZUeXBlIiwic2hhcGUiLCJleGFjdCIsIlByb3BUeXBlcyIsImFhIiwiY2EiLCJkYSIsImVhIiwiZmEiLCJoYSIsImlhIiwiamEiLCJrYSIsImxhIiwibWEiLCJhY2NlcHRzQm9vbGVhbnMiLCJhdHRyaWJ1dGVOYW1lIiwiYXR0cmlidXRlTmFtZXNwYWNlIiwibXVzdFVzZVByb3BlcnR5IiwicHJvcGVydHlOYW1lIiwic2FuaXRpemVVUkwiLCJyZW1vdmVFbXB0eVN0cmluZyIsInoiLCJyYSIsInNhIiwidGEiLCJwYSIsInFhIiwib2EiLCJzZXRBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGVOUyIsInhsaW5rSHJlZiIsInVhIiwiX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQiLCJ2YSIsImZvciIsIndhIiwieWEiLCJ6YSIsIkFhIiwiQmEiLCJDYSIsIkRhIiwiRWEiLCJGYSIsIkdhIiwiSGEiLCJJYSIsIkphIiwiS2EiLCJMYSIsIk1hIiwiTmEiLCJPYSIsInByZXBhcmVTdGFja1RyYWNlIiwiY29uc3RydWN0IiwiaCIsIlBhIiwiUWEiLCIkJHR5cGVvZiIsIl9wYXlsb2FkIiwiX2luaXQiLCJSYSIsIlNhIiwiVGEiLCJWYSIsIl92YWx1ZVRyYWNrZXIiLCJzZXRWYWx1ZSIsInN0b3BUcmFja2luZyIsIlVhIiwiV2EiLCJYYSIsIllhIiwiZGVmYXVsdENoZWNrZWQiLCJkZWZhdWx0VmFsdWUiLCJfd3JhcHBlclN0YXRlIiwiaW5pdGlhbENoZWNrZWQiLCJaYSIsImNvbnRyb2xsZWQiLCJhYiIsImJiIiwiY2IiLCJkYiIsIm93bmVyRG9jdW1lbnQiLCJlYiIsImZiIiwiZGVmYXVsdFNlbGVjdGVkIiwiZ2IiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsImhiIiwiaWIiLCJqYiIsImtiIiwibGIiLCJtYiIsIm5iIiwibmFtZXNwYWNlVVJJIiwiaW5uZXJIVE1MIiwicmVtb3ZlQ2hpbGQiLCJNU0FwcCIsImV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uIiwib2IiLCJsYXN0Q2hpbGQiLCJub2RlVmFsdWUiLCJwYiIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiYXNwZWN0UmF0aW8iLCJib3JkZXJJbWFnZU91dHNldCIsImJvcmRlckltYWdlU2xpY2UiLCJib3JkZXJJbWFnZVdpZHRoIiwiYm94RmxleCIsImJveEZsZXhHcm91cCIsImJveE9yZGluYWxHcm91cCIsImNvbHVtbkNvdW50IiwiY29sdW1ucyIsImZsZXgiLCJmbGV4R3JvdyIsImZsZXhQb3NpdGl2ZSIsImZsZXhTaHJpbmsiLCJmbGV4TmVnYXRpdmUiLCJmbGV4T3JkZXIiLCJncmlkQXJlYSIsImdyaWRSb3ciLCJncmlkUm93RW5kIiwiZ3JpZFJvd1NwYW4iLCJncmlkUm93U3RhcnQiLCJncmlkQ29sdW1uIiwiZ3JpZENvbHVtbkVuZCIsImdyaWRDb2x1bW5TcGFuIiwiZ3JpZENvbHVtblN0YXJ0IiwiZm9udFdlaWdodCIsImxpbmVDbGFtcCIsImxpbmVIZWlnaHQiLCJvcGFjaXR5Iiwib3JkZXIiLCJvcnBoYW5zIiwidGFiU2l6ZSIsIndpZG93cyIsInpJbmRleCIsInpvb20iLCJmaWxsT3BhY2l0eSIsImZsb29kT3BhY2l0eSIsInN0b3BPcGFjaXR5Iiwic3Ryb2tlRGFzaGFycmF5Iiwic3Ryb2tlRGFzaG9mZnNldCIsInN0cm9rZU1pdGVybGltaXQiLCJzdHJva2VPcGFjaXR5Iiwic3Ryb2tlV2lkdGgiLCJxYiIsInJiIiwic2IiLCJzdHlsZSIsInNldFByb3BlcnR5IiwidGIiLCJtZW51aXRlbSIsImFyZWEiLCJiciIsImVtYmVkIiwiaHIiLCJpbWciLCJrZXlnZW4iLCJtZXRhIiwicGFyYW0iLCJ0cmFjayIsIndiciIsInViIiwidmIiLCJ3YiIsInhiIiwic3JjRWxlbWVudCIsImNvcnJlc3BvbmRpbmdVc2VFbGVtZW50IiwicGFyZW50Tm9kZSIsInliIiwiemIiLCJBYiIsIkJiIiwiQ2IiLCJzdGF0ZU5vZGUiLCJEYiIsIkViIiwiRmIiLCJHYiIsIkhiIiwiSWIiLCJKYiIsIktiIiwiTGIiLCJNYiIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiTmIiLCJvbkVycm9yIiwiT2IiLCJQYiIsIlFiIiwiUmIiLCJTYiIsIlRiIiwiVmIiLCJyZXR1cm4iLCJmbGFncyIsIldiIiwibWVtb2l6ZWRTdGF0ZSIsImRlaHlkcmF0ZWQiLCJYYiIsIlpiIiwiWWIiLCIkYiIsImFjIiwidW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayIsImJjIiwidW5zdGFibGVfY2FuY2VsQ2FsbGJhY2siLCJjYyIsInVuc3RhYmxlX3Nob3VsZFlpZWxkIiwiZGMiLCJ1bnN0YWJsZV9yZXF1ZXN0UGFpbnQiLCJCIiwidW5zdGFibGVfbm93IiwiZWMiLCJ1bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCIsImZjIiwidW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHkiLCJnYyIsInVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5IiwiaGMiLCJ1bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSIsImljIiwidW5zdGFibGVfTG93UHJpb3JpdHkiLCJqYyIsInVuc3RhYmxlX0lkbGVQcmlvcml0eSIsImtjIiwibGMiLCJvYyIsImNsejMyIiwicGMiLCJxYyIsImxvZyIsIkxOMiIsInJjIiwic2MiLCJ0YyIsInVjIiwicGVuZGluZ0xhbmVzIiwic3VzcGVuZGVkTGFuZXMiLCJwaW5nZWRMYW5lcyIsImVudGFuZ2xlZExhbmVzIiwiZW50YW5nbGVtZW50cyIsInZjIiwieGMiLCJ5YyIsInpjIiwiQWMiLCJldmVudFRpbWVzIiwiQ2MiLCJDIiwiRGMiLCJFYyIsIkZjIiwiR2MiLCJIYyIsIkljIiwiSmMiLCJLYyIsIkxjIiwiTWMiLCJOYyIsIk9jIiwiUGMiLCJRYyIsIlJjIiwiU2MiLCJkZWxldGUiLCJwb2ludGVySWQiLCJUYyIsIm5hdGl2ZUV2ZW50IiwiYmxvY2tlZE9uIiwiZG9tRXZlbnROYW1lIiwiZXZlbnRTeXN0ZW1GbGFncyIsInRhcmdldENvbnRhaW5lcnMiLCJWYyIsIldjIiwicHJpb3JpdHkiLCJpc0RlaHlkcmF0ZWQiLCJjb250YWluZXJJbmZvIiwiWGMiLCJZYyIsImRpc3BhdGNoRXZlbnQiLCJaYyIsIiRjIiwiYWQiLCJiZCIsImNkIiwiUmVhY3RDdXJyZW50QmF0Y2hDb25maWciLCJkZCIsImVkIiwidHJhbnNpdGlvbiIsImZkIiwiZ2QiLCJoZCIsIlVjIiwic3RvcFByb3BhZ2F0aW9uIiwiamQiLCJrZCIsImxkIiwibWQiLCJuZCIsIm9kIiwia2V5Q29kZSIsImNoYXJDb2RlIiwicGQiLCJxZCIsInJkIiwiX3JlYWN0TmFtZSIsIl90YXJnZXRJbnN0IiwiY3VycmVudFRhcmdldCIsImlzRGVmYXVsdFByZXZlbnRlZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJyZXR1cm5WYWx1ZSIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwicHJldmVudERlZmF1bHQiLCJjYW5jZWxCdWJibGUiLCJwZXJzaXN0IiwiaXNQZXJzaXN0ZW50Iiwid2QiLCJ4ZCIsInlkIiwic2QiLCJldmVudFBoYXNlIiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJ0aW1lU3RhbXAiLCJub3ciLCJpc1RydXN0ZWQiLCJ0ZCIsInVkIiwidmlldyIsImRldGFpbCIsInZkIiwiQWQiLCJzY3JlZW5YIiwic2NyZWVuWSIsImNsaWVudFgiLCJjbGllbnRZIiwicGFnZVgiLCJwYWdlWSIsImN0cmxLZXkiLCJzaGlmdEtleSIsImFsdEtleSIsIm1ldGFLZXkiLCJnZXRNb2RpZmllclN0YXRlIiwiemQiLCJidXR0b25zIiwicmVsYXRlZFRhcmdldCIsImZyb21FbGVtZW50IiwidG9FbGVtZW50IiwibW92ZW1lbnRYIiwibW92ZW1lbnRZIiwiQmQiLCJEZCIsImRhdGFUcmFuc2ZlciIsIkZkIiwiSGQiLCJhbmltYXRpb25OYW1lIiwiZWxhcHNlZFRpbWUiLCJwc2V1ZG9FbGVtZW50IiwiSWQiLCJjbGlwYm9hcmREYXRhIiwiSmQiLCJMZCIsIk1kIiwiRXNjIiwiU3BhY2ViYXIiLCJMZWZ0IiwiVXAiLCJSaWdodCIsIkRvd24iLCJEZWwiLCJXaW4iLCJNZW51IiwiQXBwcyIsIlNjcm9sbCIsIk1velByaW50YWJsZUtleSIsIk5kIiwiT2QiLCJBbHQiLCJDb250cm9sIiwiTWV0YSIsIlNoaWZ0IiwiUGQiLCJRZCIsInJlcGVhdCIsImxvY2FsZSIsIndoaWNoIiwiUmQiLCJUZCIsIndpZHRoIiwiaGVpZ2h0IiwicHJlc3N1cmUiLCJ0YW5nZW50aWFsUHJlc3N1cmUiLCJ0aWx0WCIsInRpbHRZIiwidHdpc3QiLCJwb2ludGVyVHlwZSIsImlzUHJpbWFyeSIsIlZkIiwidG91Y2hlcyIsInRhcmdldFRvdWNoZXMiLCJjaGFuZ2VkVG91Y2hlcyIsIlhkIiwiWWQiLCJkZWx0YVgiLCJ3aGVlbERlbHRhWCIsImRlbHRhWSIsIndoZWVsRGVsdGFZIiwid2hlZWxEZWx0YSIsImRlbHRhWiIsImRlbHRhTW9kZSIsIlpkIiwiJGQiLCJhZSIsImJlIiwiZG9jdW1lbnRNb2RlIiwiY2UiLCJkZSIsImVlIiwiZmUiLCJnZSIsImhlIiwiaWUiLCJsZSIsImNvbG9yIiwiZGF0ZSIsImRhdGV0aW1lIiwiZW1haWwiLCJtb250aCIsInJhbmdlIiwidGVsIiwidGltZSIsInVybCIsIndlZWsiLCJtZSIsIm5lIiwib2UiLCJsaXN0ZW5lcnMiLCJwZSIsInFlIiwicmUiLCJzZSIsInRlIiwidWUiLCJ2ZSIsIndlIiwieGUiLCJ5ZSIsInplIiwib25pbnB1dCIsIkFlIiwiZGV0YWNoRXZlbnQiLCJCZSIsIkNlIiwiYXR0YWNoRXZlbnQiLCJEZSIsIkVlIiwiRmUiLCJIZSIsIkllIiwiSmUiLCJLZSIsIm5leHRTaWJsaW5nIiwiTGUiLCJNZSIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudFdpbmRvdyIsIk5lIiwiY29udGVudEVkaXRhYmxlIiwiT2UiLCJmb2N1c2VkRWxlbSIsInNlbGVjdGlvblJhbmdlIiwiZG9jdW1lbnRFbGVtZW50Iiwic2VsZWN0aW9uU3RhcnQiLCJzZWxlY3Rpb25FbmQiLCJkZWZhdWx0VmlldyIsImdldFNlbGVjdGlvbiIsImV4dGVuZCIsInJhbmdlQ291bnQiLCJhbmNob3JOb2RlIiwiYW5jaG9yT2Zmc2V0IiwiZm9jdXNOb2RlIiwiZm9jdXNPZmZzZXQiLCJjcmVhdGVSYW5nZSIsInNldFN0YXJ0IiwicmVtb3ZlQWxsUmFuZ2VzIiwiYWRkUmFuZ2UiLCJzZXRFbmQiLCJzY3JvbGxMZWZ0IiwidG9wIiwic2Nyb2xsVG9wIiwiZm9jdXMiLCJQZSIsIlFlIiwiUmUiLCJTZSIsIlRlIiwiVWUiLCJWZSIsIldlIiwiYW5pbWF0aW9uZW5kIiwiYW5pbWF0aW9uaXRlcmF0aW9uIiwiYW5pbWF0aW9uc3RhcnQiLCJ0cmFuc2l0aW9uZW5kIiwiWGUiLCJZZSIsIlplIiwiYW5pbWF0aW9uIiwiJGUiLCJhZiIsImJmIiwiY2YiLCJkZiIsImVmIiwiZmYiLCJnZiIsImhmIiwibGYiLCJtZiIsIm5mIiwiVWIiLCJsaXN0ZW5lciIsIkQiLCJvZiIsInBmIiwicWYiLCJyZiIsInJhbmRvbSIsInNmIiwiY2FwdHVyZSIsInBhc3NpdmUiLCJKIiwidSIsIkYiLCJ0ZiIsInVmIiwicGFyZW50V2luZG93IiwidmYiLCJ3ZiIsIm5hIiwieGEiLCIkYSIsImJhIiwiamUiLCJrZSIsInhmIiwieWYiLCJ6ZiIsIkFmIiwiQmYiLCJDZiIsIkRmIiwiRWYiLCJfX2h0bWwiLCJGZiIsInNldFRpbWVvdXQiLCJHZiIsImNsZWFyVGltZW91dCIsIkhmIiwiSmYiLCJxdWV1ZU1pY3JvdGFzayIsInRoZW4iLCJjYXRjaCIsIklmIiwiS2YiLCJMZiIsIk1mIiwiTmYiLCJPZiIsIlBmIiwiUWYiLCJSZiIsIlNmIiwiVGYiLCJVZiIsIkUiLCJHIiwiVmYiLCJIIiwiV2YiLCJYZiIsIllmIiwiY29udGV4dFR5cGVzIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dCIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0IiwiWmYiLCIkZiIsImFnIiwiYmciLCJjZyIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0IiwiZGciLCJlZyIsImZnIiwiZ2ciLCJoZyIsImpnIiwia2ciLCJsZyIsIm1nIiwibmciLCJvZyIsInBnIiwicWciLCJyZyIsInNnIiwidGciLCJ1ZyIsInZnIiwid2ciLCJ4ZyIsInlnIiwiSSIsInpnIiwiQWciLCJCZyIsImRlbGV0aW9ucyIsIkNnIiwicGVuZGluZ1Byb3BzIiwib3ZlcmZsb3ciLCJ0cmVlQ29udGV4dCIsInJldHJ5TGFuZSIsIkRnIiwiRWciLCJGZyIsIkdnIiwibWVtb2l6ZWRQcm9wcyIsIkhnIiwiSWciLCJKZyIsIktnIiwiTGciLCJyZWYiLCJfb3duZXIiLCJfc3RyaW5nUmVmIiwiTWciLCJOZyIsIk9nIiwiUGciLCJRZyIsIlJnIiwiU2ciLCJUZyIsInEiLCJ5IiwiVWciLCJWZyIsIldnIiwiWGciLCJZZyIsIlpnIiwiJGciLCJhaCIsIl9jdXJyZW50VmFsdWUiLCJiaCIsImNoaWxkTGFuZXMiLCJkZXBlbmRlbmNpZXMiLCJmaXJzdENvbnRleHQiLCJsYW5lcyIsImRoIiwiZWgiLCJtZW1vaXplZFZhbHVlIiwiZmgiLCJnaCIsImhoIiwiaW50ZXJsZWF2ZWQiLCJpaCIsImpoIiwia2giLCJ1cGRhdGVRdWV1ZSIsImZpcnN0QmFzZVVwZGF0ZSIsImxhc3RCYXNlVXBkYXRlIiwic2hhcmVkIiwicGVuZGluZyIsImVmZmVjdHMiLCJsaCIsIm1oIiwiZXZlbnRUaW1lIiwibGFuZSIsInBheWxvYWQiLCJuaCIsIksiLCJvaCIsInBoIiwicWgiLCJyaCIsInNoIiwidGgiLCJ1aCIsInZoIiwid2giLCJ4aCIsInloIiwiemgiLCJBaCIsIkJoIiwiTCIsIkNoIiwicmV2ZWFsT3JkZXIiLCJEaCIsIkVoIiwiX3dvcmtJblByb2dyZXNzVmVyc2lvblByaW1hcnkiLCJGaCIsIlJlYWN0Q3VycmVudERpc3BhdGNoZXIiLCJHaCIsIkhoIiwiTSIsIk4iLCJJaCIsIkpoIiwiS2giLCJMaCIsIk1oIiwiTmgiLCJPaCIsIlBoIiwiUWgiLCJSaCIsIlNoIiwiVGgiLCJiYXNlUXVldWUiLCJVaCIsIlZoIiwiV2giLCJsYXN0UmVuZGVyZWRSZWR1Y2VyIiwiaGFzRWFnZXJTdGF0ZSIsImVhZ2VyU3RhdGUiLCJsYXN0UmVuZGVyZWRTdGF0ZSIsImRpc3BhdGNoIiwiWGgiLCJZaCIsIlpoIiwiJGgiLCJhaSIsImdldFNuYXBzaG90IiwiYmkiLCJjaSIsIlEiLCJkaSIsImxhc3RFZmZlY3QiLCJzdG9yZXMiLCJlaSIsImZpIiwiZ2kiLCJpaSIsImRlc3Ryb3kiLCJkZXBzIiwiamkiLCJraSIsImxpIiwibWkiLCJuaSIsIm9pIiwicGkiLCJxaSIsInJpIiwic2kiLCJ0aSIsInVpIiwidmkiLCJ3aSIsInhpIiwieWkiLCJ6aSIsIkFpIiwiUiIsIkJpIiwicmVhZENvbnRleHQiLCJ1c2VDYWxsYmFjayIsInVzZUNvbnRleHQiLCJ1c2VFZmZlY3QiLCJ1c2VJbXBlcmF0aXZlSGFuZGxlIiwidXNlSW5zZXJ0aW9uRWZmZWN0IiwidXNlTGF5b3V0RWZmZWN0IiwidXNlTWVtbyIsInVzZVJlZHVjZXIiLCJ1c2VSZWYiLCJ1c2VTdGF0ZSIsInVzZURlYnVnVmFsdWUiLCJ1c2VEZWZlcnJlZFZhbHVlIiwidXNlVHJhbnNpdGlvbiIsInVzZU11dGFibGVTb3VyY2UiLCJ1c2VTeW5jRXh0ZXJuYWxTdG9yZSIsInVzZUlkIiwidW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyIiwiaWRlbnRpZmllclByZWZpeCIsIkNpIiwiZGVmYXVsdFByb3BzIiwiRGkiLCJFaSIsImlzTW91bnRlZCIsIl9yZWFjdEludGVybmFscyIsImVucXVldWVTZXRTdGF0ZSIsImVucXVldWVSZXBsYWNlU3RhdGUiLCJlbnF1ZXVlRm9yY2VVcGRhdGUiLCJGaSIsIkdpIiwiY29udGV4dFR5cGUiLCJIaSIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIklpIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCIsImNvbXBvbmVudFdpbGxNb3VudCIsIkppIiwiZGlnZXN0IiwiS2kiLCJMaSIsIk1pIiwiTmkiLCJPaSIsIlBpIiwiUWkiLCJnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IiLCJjb21wb25lbnREaWRDYXRjaCIsIlJpIiwiY29tcG9uZW50U3RhY2siLCJTaSIsInBpbmdDYWNoZSIsIlRpIiwiVWkiLCJWaSIsIldpIiwiUmVhY3RDdXJyZW50T3duZXIiLCJYaSIsIllpIiwiWmkiLCIkaSIsImFqIiwiY29tcGFyZSIsImJqIiwiY2oiLCJkaiIsImJhc2VMYW5lcyIsImNhY2hlUG9vbCIsInRyYW5zaXRpb25zIiwiZWoiLCJmaiIsImdqIiwiaGoiLCJpaiIsIlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50V2lsbFVwZGF0ZSIsImpqIiwia2oiLCJwZW5kaW5nQ29udGV4dCIsImxqIiwiemoiLCJBaiIsIkJqIiwiQ2oiLCJtaiIsIm5qIiwib2oiLCJmYWxsYmFjayIsInBqIiwicWoiLCJzaiIsImRhdGFzZXQiLCJkZ3N0IiwidGoiLCJ1aiIsIl9yZWFjdFJldHJ5IiwicmoiLCJzdWJ0cmVlRmxhZ3MiLCJ2aiIsIndqIiwiaXNCYWNrd2FyZHMiLCJyZW5kZXJpbmciLCJyZW5kZXJpbmdTdGFydFRpbWUiLCJ0YWlsIiwidGFpbE1vZGUiLCJ4aiIsIkRqIiwiUyIsIkVqIiwiRmoiLCJ3YXNNdWx0aXBsZSIsIm11bHRpcGxlIiwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nIiwib25DbGljayIsIm9uY2xpY2siLCJjcmVhdGVFbGVtZW50TlMiLCJhdXRvRm9jdXMiLCJjcmVhdGVUZXh0Tm9kZSIsIlQiLCJHaiIsIkhqIiwiSWoiLCJKaiIsIlUiLCJLaiIsIlYiLCJMaiIsIlciLCJNaiIsIk5qIiwiUGoiLCJRaiIsIlJqIiwiU2oiLCJUaiIsIlVqIiwiVmoiLCJfcmVhY3RSb290Q29udGFpbmVyIiwiV2oiLCJYIiwiWGoiLCJZaiIsIlpqIiwib25Db21taXRGaWJlclVubW91bnQiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsImFrIiwiYmsiLCJjayIsImRrIiwiZWsiLCJpc0hpZGRlbiIsImZrIiwiZ2siLCJoayIsImlrIiwiamsiLCJrayIsIl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlIiwic3JjIiwiVmsiLCJsayIsIm1rIiwibmsiLCJvayIsIlkiLCJaIiwicGsiLCJxayIsInJrIiwic2siLCJ0ayIsInVrIiwidmsiLCJ3ayIsInhrIiwieWsiLCJ6ayIsIkFrIiwiQmsiLCJDayIsIkRrIiwiY2FsbGJhY2tOb2RlIiwiZXhwaXJhdGlvblRpbWVzIiwiZXhwaXJlZExhbmVzIiwid2MiLCJjYWxsYmFja1ByaW9yaXR5IiwiaWciLCJFayIsIkZrIiwiR2siLCJIayIsIklrIiwiSmsiLCJLayIsIkxrIiwiTWsiLCJOayIsIk9rIiwiZmluaXNoZWRXb3JrIiwiZmluaXNoZWRMYW5lcyIsInRpbWVvdXRIYW5kbGUiLCJRayIsIlJrIiwiU2siLCJUayIsIlVrIiwibXV0YWJsZVJlYWRMYW5lcyIsIkJjIiwiT2oiLCJvbkNvbW1pdEZpYmVyUm9vdCIsIm1jIiwib25SZWNvdmVyYWJsZUVycm9yIiwiV2siLCJvblBvc3RDb21taXRGaWJlclJvb3QiLCJYayIsIllrIiwiJGsiLCJpc1JlYWN0Q29tcG9uZW50IiwicGVuZGluZ0NoaWxkcmVuIiwiYWwiLCJtdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhIiwiYmwiLCJjYWNoZSIsInBlbmRpbmdTdXNwZW5zZUJvdW5kYXJpZXMiLCJkbCIsImZsIiwiZ2wiLCJobCIsImlsIiwieWoiLCJaayIsImtsIiwibGwiLCJfaW50ZXJuYWxSb290IiwibWwiLCJubCIsIm9sIiwicGwiLCJybCIsInFsIiwidW5zdGFibGVfc2NoZWR1bGVIeWRyYXRpb24iLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9ybSIsInNsIiwidXNpbmdDbGllbnRFbnRyeVBvaW50IiwiRXZlbnRzIiwidGwiLCJmaW5kRmliZXJCeUhvc3RJbnN0YW5jZSIsImJ1bmRsZVR5cGUiLCJ2ZXJzaW9uIiwicmVuZGVyZXJQYWNrYWdlTmFtZSIsInVsIiwicmVuZGVyZXJDb25maWciLCJvdmVycmlkZUhvb2tTdGF0ZSIsIm92ZXJyaWRlSG9va1N0YXRlRGVsZXRlUGF0aCIsIm92ZXJyaWRlSG9va1N0YXRlUmVuYW1lUGF0aCIsIm92ZXJyaWRlUHJvcHMiLCJvdmVycmlkZVByb3BzRGVsZXRlUGF0aCIsIm92ZXJyaWRlUHJvcHNSZW5hbWVQYXRoIiwic2V0RXJyb3JIYW5kbGVyIiwic2V0U3VzcGVuc2VIYW5kbGVyIiwic2NoZWR1bGVVcGRhdGUiLCJjdXJyZW50RGlzcGF0Y2hlclJlZiIsImZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyIiwiZmluZEhvc3RJbnN0YW5jZXNGb3JSZWZyZXNoIiwic2NoZWR1bGVSZWZyZXNoIiwic2NoZWR1bGVSb290Iiwic2V0UmVmcmVzaEhhbmRsZXIiLCJnZXRDdXJyZW50RmliZXIiLCJyZWNvbmNpbGVyVmVyc2lvbiIsIl9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsInZsIiwiaXNEaXNhYmxlZCIsInN1cHBvcnRzRmliZXIiLCJpbmplY3QiLCJjcmVhdGVQb3J0YWwiLCJjbCIsImNyZWF0ZVJvb3QiLCJ1bnN0YWJsZV9zdHJpY3RNb2RlIiwiZmluZERPTU5vZGUiLCJmbHVzaFN5bmMiLCJoeWRyYXRlIiwiaHlkcmF0ZVJvb3QiLCJoeWRyYXRlZFNvdXJjZXMiLCJfZ2V0VmVyc2lvbiIsIl9zb3VyY2UiLCJ1bm1vdW50Q29tcG9uZW50QXROb2RlIiwidW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMiLCJ1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lciIsImNoZWNrRENFIiwiZm9yY2VVcGRhdGUiLCJfX3NlbGYiLCJfX3NvdXJjZSIsIl9zdGF0dXMiLCJfcmVzdWx0IiwiQ2hpbGRyZW4iLCJvbmx5IiwiRnJhZ21lbnQiLCJQcm9maWxlciIsIlB1cmVDb21wb25lbnQiLCJTdHJpY3RNb2RlIiwiU3VzcGVuc2UiLCJhY3QiLCJjcmVhdGVDb250ZXh0IiwiX2N1cnJlbnRWYWx1ZTIiLCJfdGhyZWFkQ291bnQiLCJfZGVmYXVsdFZhbHVlIiwiX2dsb2JhbE5hbWUiLCJjcmVhdGVGYWN0b3J5IiwiY3JlYXRlUmVmIiwiZm9yd2FyZFJlZiIsImxhenkiLCJtZW1vIiwic3RhcnRUcmFuc2l0aW9uIiwidW5zdGFibGVfYWN0IiwiZXNjYXBlVmFsdWUiLCJyZW5kZXJTZWxlY3RvciIsInNlbGVjdG9yVG9rZW4iLCJfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uIiwiX2RpZEl0ZXJhdG9yRXJyb3IiLCJfaXRlcmF0b3JFcnJvciIsIl9zdGVwIiwiX2l0ZXJhdG9yIiwic2VxdWVuY2VzIiwiX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIiLCJfZGlkSXRlcmF0b3JFcnJvcjIiLCJfaXRlcmF0b3JFcnJvcjIiLCJfc3RlcDIiLCJfaXRlcmF0b3IyIiwiX25lYXJsZXkiLCJfZ3JhbW1hcjIiLCJmbGF0dGVuRGVlcCIsImNvbWJpbmF0b3JNYXAiLCJwYXJzZUFzTnVtYmVyIiwicmVqZWN0Iiwiam9pbmVkIiwicGFyc2VBc0Jvb2xlYW4iLCJwYXJzZUZhbHN5UHJpbWl0aXZlIiwiY3JlYXRlR2VuZXJhdG9yIiwiX2NyZWF0ZUdlbmVyYXRvcjIiLCJfY3JlYXRlUGFyc2VyMiIsImlzUmVnZXgiLCJzb3J0SW5kZXgiLCJwZXJmb3JtYW5jZSIsInNldEltbWVkaWF0ZSIsInN0YXJ0VGltZSIsImV4cGlyYXRpb25UaW1lIiwicHJpb3JpdHlMZXZlbCIsIm5hdmlnYXRvciIsInNjaGVkdWxpbmciLCJpc0lucHV0UGVuZGluZyIsIk1lc3NhZ2VDaGFubmVsIiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsInBvc3RNZXNzYWdlIiwidW5zdGFibGVfUHJvZmlsaW5nIiwidW5zdGFibGVfY29udGludWVFeGVjdXRpb24iLCJ1bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZSIsInVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlIiwidW5zdGFibGVfbmV4dCIsInVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uIiwidW5zdGFibGVfcnVuV2l0aFByaW9yaXR5IiwiZGVsYXkiLCJ1bnN0YWJsZV93cmFwQ2FsbGJhY2siLCJoYXNEZXNjcmlwdG9ycyIsImZ1bmN0aW9uTGVuZ3RoSXNDb25maWd1cmFibGUiLCJmdW5jdGlvbkxlbmd0aElzV3JpdGFibGUiLCJtdnNJc1dTIiwibGVmdFdoaXRlc3BhY2UiLCJyaWdodFdoaXRlc3BhY2UiLCJib3VuZE1ldGhvZCIsInN0eWxlc0luRE9NIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwibW9kdWxlc1RvRG9tIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiaW5kZXhCeUlkZW50aWZpZXIiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwiYWRkRWxlbWVudFN0eWxlIiwiYnlJbmRleCIsImFwaSIsImRvbUFQSSIsIm5ld09iaiIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJuZXdMYXN0SWRlbnRpZmllcnMiLCJfaW5kZXgiLCJzdHlsZVRhcmdldCIsInF1ZXJ5U2VsZWN0b3IiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiZ2V0VGFyZ2V0Iiwic2V0QXR0cmlidXRlcyIsInN0eWxlRWxlbWVudCIsIm5vbmNlIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGVUYWdUcmFuc2Zvcm0iLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsIiRBcnJheVByb3RvdHlwZSIsImlzSW50ZWdlciIsIk1BWF9BUlJBWV9MRU5HVEgiLCIkc2V0UHJvdG8iLCJwcm90byIsIiRzcGVjaWVzIiwiQXJyYXlDcmVhdGUiLCJJc0FycmF5IiwiSXNDb25zdHJ1Y3RvciIsIlR5cGUiLCJvcmlnaW5hbEFycmF5IiwiYXJndW1lbnRzTGlzdCIsIklzUHJvcGVydHlLZXkiLCJPcmRpbmFyeURlZmluZU93blByb3BlcnR5IiwiQ3JlYXRlRGF0YVByb3BlcnR5IiwiaXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJEZWZpbmVPd25Qcm9wZXJ0eSIsIkZyb21Qcm9wZXJ0eURlc2NyaXB0b3IiLCJJc0RhdGFEZXNjcmlwdG9yIiwiU2FtZVZhbHVlIiwiVG9Qcm9wZXJ0eURlc2NyaXB0b3IiLCJEZXNjIiwibWFwcGVyRnVuY3Rpb24iLCJ0YXJnZXRJbmRleCIsInNvdXJjZUluZGV4Iiwic2hvdWxkRmxhdHRlbiIsImZyb21Qcm9wZXJ0eURlc2NyaXB0b3IiLCIkY29uc3RydWN0IiwiRGVmaW5lUHJvcGVydHlPclRocm93IiwiaXNDb25zdHJ1Y3Rvck1hcmtlciIsImFyZ3VtZW50IiwiJHByZXZlbnRFeHRlbnNpb25zIiwiJGlzRXh0ZW5zaWJsZSIsIklzQWNjZXNzb3JEZXNjcmlwdG9yIiwiSXNFeHRlbnNpYmxlIiwiVmFsaWRhdGVBbmRBcHBseVByb3BlcnR5RGVzY3JpcHRvciIsImNyZWF0aW5nTm9ybWFsRGF0YVByb3BlcnR5Iiwic2V0dGluZ0V4aXN0aW5nRGF0YVByb3BlcnR5IiwiZXh0ZW5zaWJsZSIsIiRpc05hTiIsIiROdW1iZXIiLCIkUmVnRXhwIiwiJHBhcnNlSW50ZWdlciIsInJlZ2V4VGVzdGVyIiwiaXNCaW5hcnkiLCJpc09jdGFsIiwiaXNJbnZhbGlkSGV4TGl0ZXJhbCIsImhhc05vbldTIiwiJHRyaW0iLCJTdHJpbmdUb051bWJlciIsIlRvTnVtYmVyIiwidHJ1bmNhdGUiLCIkaXNGaW5pdGUiLCJUb1ByaW1pdGl2ZSIsIk9iaiIsInNldHRlciIsIiRTdHJpbmciLCJFUzVUeXBlIiwiaXNGdWxseVBvcHVsYXRlZFByb3BlcnR5RGVzY3JpcHRvciIsIklzR2VuZXJpY0Rlc2NyaXB0b3IiLCJvVHlwZSIsIiRBcnJheSIsIkVTIiwiJGFicyIsImFic1ZhbHVlIiwiYWxsb3dlZCIsImlzRGF0YSIsIklzQWNjZXNzb3IiLCJzZXJpYWxpemVEb2N0eXBlQ29udGVudCIsImVucXVvdGVEb2N0eXBlSWQiLCJwdWJsaWNJZCIsInN5c3RlbUlkIiwiaXNDb21tZW50Tm9kZSIsImlzRWxlbWVudE5vZGUiLCJpc1RleHROb2RlIiwiY3JlYXRlRG9jdW1lbnQiLCJET0NVTUVOVF9NT0RFIiwiTk9fUVVJUktTIiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsImF0dHJpYnNOYW1lc3BhY2UiLCJhdHRyaWJzUHJlZml4IiwiY3JlYXRlQ29tbWVudE5vZGUiLCJuZXdOb2RlIiwicmVmZXJlbmNlTm9kZSIsImluc2VydGlvbklkeCIsInNldFRlbXBsYXRlQ29udGVudCIsInRlbXBsYXRlRWxlbWVudCIsImNvbnRlbnRFbGVtZW50IiwiZ2V0VGVtcGxhdGVDb250ZW50Iiwic2V0RG9jdW1lbnRUeXBlIiwiZG9jdHlwZU5vZGUiLCJzZXREb2N1bWVudE1vZGUiLCJnZXREb2N1bWVudE1vZGUiLCJkZXRhY2hOb2RlIiwiaW5zZXJ0VGV4dCIsImluc2VydFRleHRCZWZvcmUiLCJwcmV2Tm9kZSIsImFkb3B0QXR0cmlidXRlcyIsInJlY2lwaWVudCIsImdldEZpcnN0Q2hpbGQiLCJnZXRDaGlsZE5vZGVzIiwiZ2V0UGFyZW50Tm9kZSIsImdldEF0dHJMaXN0IiwiZ2V0VGFnTmFtZSIsImdldE5hbWVzcGFjZVVSSSIsImdldFRleHROb2RlQ29udGVudCIsImdldENvbW1lbnROb2RlQ29udGVudCIsImNvbW1lbnROb2RlIiwiZ2V0RG9jdW1lbnRUeXBlTm9kZU5hbWUiLCJnZXREb2N1bWVudFR5cGVOb2RlUHVibGljSWQiLCJnZXREb2N1bWVudFR5cGVOb2RlU3lzdGVtSWQiLCJpc0RvY3VtZW50VHlwZU5vZGUiLCJzZXROb2RlU291cmNlQ29kZUxvY2F0aW9uIiwic3RhcnRPZmZzZXQiLCJlbmRPZmZzZXQiLCJnZXROb2RlU291cmNlQ29kZUxvY2F0aW9uIiwidXBkYXRlTm9kZVNvdXJjZUNvZGVMb2NhdGlvbiIsImVuZExvY2F0aW9uIiwiaXNDb25mb3JtaW5nIiwiaHRtbF9qc18xIiwiVkFMSURfRE9DVFlQRV9OQU1FIiwiUVVJUktTX01PREVfUFVCTElDX0lEX1BSRUZJWEVTIiwiUVVJUktTX01PREVfTk9fU1lTVEVNX0lEX1BVQkxJQ19JRF9QUkVGSVhFUyIsIlFVSVJLU19NT0RFX1BVQkxJQ19JRFMiLCJMSU1JVEVEX1FVSVJLU19QVUJMSUNfSURfUFJFRklYRVMiLCJMSU1JVEVEX1FVSVJLU19XSVRIX1NZU1RFTV9JRF9QVUJMSUNfSURfUFJFRklYRVMiLCJoYXNQcmVmaXgiLCJwcmVmaXhlcyIsIlFVSVJLUyIsIkxJTUlURURfUVVJUktTIiwiRVJSIiwiaXNJbnRlZ3JhdGlvblBvaW50IiwiYWRqdXN0VG9rZW5TVkdUYWdOYW1lIiwiYWRqdXN0VG9rZW5YTUxBdHRycyIsImFkanVzdFRva2VuU1ZHQXR0cnMiLCJhZGp1c3RUb2tlbk1hdGhNTEF0dHJzIiwiY2F1c2VzRXhpdCIsIlNWR19UQUdfTkFNRVNfQURKVVNUTUVOVF9NQVAiLCJNSU1FX1RZUEVTIiwiU1ZHX0FUVFJTX0FESlVTVE1FTlRfTUFQIiwiWE1MX0FUVFJTX0FESlVTVE1FTlRfTUFQIiwiTlMiLCJYTElOSyIsIlhNTE5TIiwidG4iLCJFWElUU19GT1JFSUdOX0NPTlRFTlQiLCJUQUdfSUQiLCJCSUciLCJCTE9DS1FVT1RFIiwiQk9EWSIsIkJSIiwiQ0VOVEVSIiwiQ09ERSIsIkREIiwiRElWIiwiREwiLCJEVCIsIkVNIiwiRU1CRUQiLCJIMSIsIkgyIiwiSDMiLCJINCIsIkg1IiwiSDYiLCJIRUFEIiwiSFIiLCJJTUciLCJMSSIsIkxJU1RJTkciLCJNRU5VIiwiTUVUQSIsIk5PQlIiLCJPTCIsIlBSRSIsIlJVQlkiLCJTTUFMTCIsIlNQQU4iLCJTVFJPTkciLCJTVFJJS0UiLCJTVUIiLCJTVVAiLCJUQUJMRSIsIlRUIiwiVUwiLCJWQVIiLCJzdGFydFRhZ1Rva2VuIiwidGFnSUQiLCJGT05UIiwiQVRUUlMiLCJDT0xPUiIsIlNJWkUiLCJGQUNFIiwiYWRqdXN0ZWRBdHRyTmFtZSIsImFkanVzdGVkQXR0ckVudHJ5IiwiYWRqdXN0ZWRUYWdOYW1lIiwiZ2V0VGFnSUQiLCJucyIsImZvcmVpZ25OUyIsIk1BVEhNTCIsIkFOTk9UQVRJT05fWE1MIiwiRU5DT0RJTkciLCJTVkciLCJGT1JFSUdOX09CSkVDVCIsIkRFU0MiLCJUSVRMRSIsImlzSHRtbEludGVncmF0aW9uUG9pbnQiLCJNSSIsIk1PIiwiTU4iLCJNUyIsIk1URVhUIiwiaXNNYXRoTUxUZXh0SW50ZWdyYXRpb25Qb2ludCIsIlRBR19OQU1FUyIsImhhc1VuZXNjYXBlZFRleHQiLCJpc051bWJlcmVkSGVhZGVyIiwiU1BFQ0lBTF9FTEVNRU5UUyIsIlRBR19OQU1FX1RPX0lEIiwiQUREUkVTUyIsIkFQUExFVCIsIkFSRUEiLCJBUlRJQ0xFIiwiQVNJREUiLCJCQVNFIiwiQkFTRUZPTlQiLCJCR1NPVU5EIiwiQlVUVE9OIiwiQ0FQVElPTiIsIkNPTCIsIkNPTEdST1VQIiwiREVUQUlMUyIsIkRJQUxPRyIsIkRJUiIsIkZJRUxEU0VUIiwiRklHQ0FQVElPTiIsIkZJR1VSRSIsIkZPT1RFUiIsIkZPUk0iLCJGUkFNRSIsIkZSQU1FU0VUIiwiSEVBREVSIiwiSEdST1VQIiwiSU1BR0UiLCJJTlBVVCIsIklGUkFNRSIsIktFWUdFTiIsIkxBQkVMIiwiTElOSyIsIk1BSU4iLCJNQUxJR05NQVJLIiwiTUFSUVVFRSIsIk1BVEgiLCJNR0xZUEgiLCJOQVYiLCJOT0ZSQU1FUyIsIk5PRU1CRUQiLCJOT1NDUklQVCIsIk9CSkVDVCIsIk9QVEdST1VQIiwiT1BUSU9OIiwiUEFSQU0iLCJQTEFJTlRFWFQiLCJSQiIsIlJQIiwiUlQiLCJSVEMiLCJTQ1JJUFQiLCJTRUNUSU9OIiwiU0VMRUNUIiwiU09VUkNFIiwiU1RZTEUiLCJTVU1NQVJZIiwiVEJPRFkiLCJURU1QTEFURSIsIlRFWFRBUkVBIiwiVEZPT1QiLCJURCIsIlRIIiwiVEhFQUQiLCJUUiIsIlRSQUNLIiwiV0JSIiwiWE1QIiwiVU5LTk9XTiIsIiQiLCJVTkVTQ0FQRURfVEVYVCIsIlRva2VuVHlwZSIsImdldFRva2VuQXR0ciIsImlzVW5kZWZpbmVkQ29kZVBvaW50IiwiaXNDb250cm9sQ29kZVBvaW50IiwiZ2V0U3Vycm9nYXRlUGFpckNvZGVQb2ludCIsImlzU3Vycm9nYXRlUGFpciIsImlzU3Vycm9nYXRlIiwiU0VRVUVOQ0VTIiwiQ09ERV9QT0lOVFMiLCJSRVBMQUNFTUVOVF9DSEFSQUNURVIiLCJVTkRFRklORURfQ09ERV9QT0lOVFMiLCJEQVNIX0RBU0giLCJDREFUQV9TVEFSVCIsIkRPQ1RZUEUiLCJQVUJMSUMiLCJTWVNURU0iLCJjcDEiLCJjcDIiLCJUb2tlbml6ZXJNb2RlIiwiVG9rZW4iLCJmb3JlaWduQ29udGVudCIsIkVycm9yQ29kZXMiLCJkZWZhdWx0VHJlZUFkYXB0ZXIiLCJkZWZhdWx0X2pzXzEiLCJpbmRleF9qc18yIiwiaW5kZXhfanNfMyIsImVycm9yX2NvZGVzX2pzXzEiLCJpbmRleF9qc180IiwiZnJhZ21lbnRDb250ZXh0IiwiZ2V0RnJhZ21lbnRQYXJzZXIiLCJnZXRGcmFnbWVudCIsIkVudHJ5VHlwZSIsIkZvcm1hdHRpbmdFbGVtZW50TGlzdCIsIk1BUktFUiIsIk1hcmtlciIsImJvb2ttYXJrIiwiX2dldE5vYWhBcmtDb25kaXRpb25DYW5kaWRhdGVzIiwibmV3RWxlbWVudCIsIm5lQXR0cnMiLCJjYW5kaWRhdGVzIiwibmVBdHRyc0xlbmd0aCIsIm5lVGFnTmFtZSIsIm5lTmFtZXNwYWNlVVJJIiwiZWxlbWVudEF0dHJzIiwiX2Vuc3VyZU5vYWhBcmtDb25kaXRpb24iLCJuZUF0dHJzTWFwIiwibmVBdHRyIiwidmFsaWRDYW5kaWRhdGVzIiwiY2FuZGlkYXRlIiwiY0F0dHIiLCJpbnNlcnRNYXJrZXIiLCJwdXNoRWxlbWVudCIsImluc2VydEVsZW1lbnRBZnRlckJvb2ttYXJrIiwiYm9va21hcmtJZHgiLCJyZW1vdmVFbnRyeSIsImVudHJ5SW5kZXgiLCJjbGVhclRvTGFzdE1hcmtlciIsIm1hcmtlcklkeCIsImdldEVsZW1lbnRFbnRyeUluU2NvcGVXaXRoVGFnTmFtZSIsImdldEVsZW1lbnRFbnRyeSIsIm9wZW5fZWxlbWVudF9zdGFja19qc18xIiwiZm9ybWF0dGluZ19lbGVtZW50X2xpc3RfanNfMSIsImRvY3R5cGUiLCJ1bmljb2RlIiwidG9rZW5fanNfMSIsIkhJRERFTl9JTlBVVF9UWVBFIiwiQUFfT1VURVJfTE9PUF9JVEVSIiwiQUFfSU5ORVJfTE9PUF9JVEVSIiwiSW5zZXJ0aW9uTW9kZSIsIkJBU0VfTE9DIiwic3RhcnRMaW5lIiwic3RhcnRDb2wiLCJlbmRMaW5lIiwiZW5kQ29sIiwiVEFCTEVfU1RSVUNUVVJFX1RBR1MiLCJkZWZhdWx0UGFyc2VyT3B0aW9ucyIsIm9uUGFyc2VFcnJvciIsImFhT2J0YWluRm9ybWF0dGluZ0VsZW1lbnRFbnRyeSIsImZvcm1hdHRpbmdFbGVtZW50RW50cnkiLCJhY3RpdmVGb3JtYXR0aW5nRWxlbWVudHMiLCJvcGVuRWxlbWVudHMiLCJoYXNJblNjb3BlIiwiZ2VuZXJpY0VuZFRhZ0luQm9keSIsImFhT2J0YWluRnVydGhlc3RCbG9jayIsImZ1cnRoZXN0QmxvY2siLCJzdGFja1RvcCIsIl9pc1NwZWNpYWxFbGVtZW50IiwidGFnSURzIiwic2hvcnRlblRvTGVuZ3RoIiwiYWFJbm5lckxvb3AiLCJmb3JtYXR0aW5nRWxlbWVudCIsIm5leHRFbGVtZW50IiwiZ2V0Q29tbW9uQW5jZXN0b3IiLCJlbGVtZW50RW50cnkiLCJjb3VudGVyT3ZlcmZsb3ciLCJhYVJlY3JlYXRlRWxlbWVudEZyb21FbnRyeSIsImFhSW5zZXJ0TGFzdE5vZGVJbkNvbW1vbkFuY2VzdG9yIiwiY29tbW9uQW5jZXN0b3IiLCJ0aWQiLCJfaXNFbGVtZW50Q2F1c2VzRm9zdGVyUGFyZW50aW5nIiwiX2Zvc3RlclBhcmVudEVsZW1lbnQiLCJhYVJlcGxhY2VGb3JtYXR0aW5nRWxlbWVudCIsIl9hZG9wdE5vZGVzIiwiY2FsbEFkb3B0aW9uQWdlbmN5IiwiYXBwZW5kQ29tbWVudCIsIl9hcHBlbmRDb21tZW50Tm9kZSIsImN1cnJlbnRUbXBsQ29udGVudE9yTm9kZSIsInN0b3BQYXJzaW5nIiwic3RvcHBlZCIsIl9zZXRFbmRMb2NhdGlvbiIsImh0bWxFbGVtZW50IiwiaHRtbExvY2F0aW9uIiwiZW5kVGFnIiwiYm9keUVsZW1lbnQiLCJib2R5TG9jYXRpb24iLCJ0b2tlbkluSW5pdGlhbE1vZGUiLCJfZXJyIiwibWlzc2luZ0RvY3R5cGUiLCJpbnNlcnRpb25Nb2RlIiwiQkVGT1JFX0hUTUwiLCJfcHJvY2Vzc1Rva2VuIiwidG9rZW5CZWZvcmVIdG1sIiwiX2luc2VydEZha2VSb290RWxlbWVudCIsIkJFRk9SRV9IRUFEIiwidG9rZW5CZWZvcmVIZWFkIiwiX2luc2VydEZha2VFbGVtZW50IiwiaGVhZEVsZW1lbnQiLCJJTl9IRUFEIiwic3RhcnRUYWdJbkhlYWQiLCJzdGFydFRhZ0luQm9keSIsIl9hcHBlbmRFbGVtZW50IiwiYWNrU2VsZkNsb3NpbmciLCJfc3dpdGNoVG9UZXh0UGFyc2luZyIsIlJDREFUQSIsIlJBV1RFWFQiLCJfaW5zZXJ0RWxlbWVudCIsIklOX0hFQURfTk9fU0NSSVBUIiwiU0NSSVBUX0RBVEEiLCJfaW5zZXJ0VGVtcGxhdGUiLCJmcmFtZXNldE9rIiwiSU5fVEVNUExBVEUiLCJ0bXBsSW5zZXJ0aW9uTW9kZVN0YWNrIiwibWlzcGxhY2VkU3RhcnRUYWdGb3JIZWFkRWxlbWVudCIsInRva2VuSW5IZWFkIiwidGVtcGxhdGVFbmRUYWdJbkhlYWQiLCJ0bXBsQ291bnQiLCJnZW5lcmF0ZUltcGxpZWRFbmRUYWdzVGhvcm91Z2hseSIsImN1cnJlbnRUYWdJZCIsImNsb3NpbmdPZkVsZW1lbnRXaXRoT3BlbkNoaWxkRWxlbWVudHMiLCJwb3BVbnRpbFRhZ05hbWVQb3BwZWQiLCJfcmVzZXRJbnNlcnRpb25Nb2RlIiwiZW5kVGFnV2l0aG91dE1hdGNoaW5nT3BlbkVsZW1lbnQiLCJBRlRFUl9IRUFEIiwidG9rZW5JbkhlYWROb1NjcmlwdCIsImVyckNvZGUiLCJFT0YiLCJvcGVuRWxlbWVudHNMZWZ0QWZ0ZXJFb2YiLCJkaXNhbGxvd2VkQ29udGVudEluTm9zY3JpcHRJbkhlYWQiLCJ0b2tlbkFmdGVySGVhZCIsIklOX0JPRFkiLCJtb2RlSW5Cb2R5IiwiQ0hBUkFDVEVSIiwiY2hhcmFjdGVySW5Cb2R5IiwiV0hJVEVTUEFDRV9DSEFSQUNURVIiLCJ3aGl0ZXNwYWNlQ2hhcmFjdGVySW5Cb2R5IiwiQ09NTUVOVCIsIlNUQVJUX1RBRyIsIkVORF9UQUciLCJlbmRUYWdJbkJvZHkiLCJlb2ZJbkJvZHkiLCJfcmVjb25zdHJ1Y3RBY3RpdmVGb3JtYXR0aW5nRWxlbWVudHMiLCJfaW5zZXJ0Q2hhcmFjdGVycyIsImFyZWFTdGFydFRhZ0luQm9keSIsImlzSGlkZGVuSW5wdXQiLCJpbnB1dFR5cGUiLCJUWVBFIiwibm9lbWJlZFN0YXJ0VGFnSW5Cb2R5IiwiZ2VuZXJpY1N0YXJ0VGFnSW5Cb2R5IiwiYlN0YXJ0VGFnSW5Cb2R5IiwiYWN0aXZlRWxlbWVudEVudHJ5IiwiYVN0YXJ0VGFnSW5Cb2R5IiwiaGFzSW5CdXR0b25TY29wZSIsIl9jbG9zZVBFbGVtZW50IiwibnVtYmVyZWRIZWFkZXJTdGFydFRhZ0luQm9keSIsImFkZHJlc3NTdGFydFRhZ0luQm9keSIsImVsZW1lbnRJZCIsImdlbmVyYXRlSW1wbGllZEVuZFRhZ3NXaXRoRXhjbHVzaW9uIiwibGlzdEl0ZW1TdGFydFRhZ0luQm9keSIsImhyU3RhcnRUYWdJbkJvZHkiLCJnZW5lcmF0ZUltcGxpZWRFbmRUYWdzIiwicmJTdGFydFRhZ0luQm9keSIsInJ0U3RhcnRUYWdJbkJvZHkiLCJza2lwTmV4dE5ld0xpbmUiLCJwcmVTdGFydFRhZ0luQm9keSIsInhtcFN0YXJ0VGFnSW5Cb2R5Iiwic2VsZkNsb3NpbmciLCJzdmdTdGFydFRhZ0luQm9keSIsImh0bWxTdGFydFRhZ0luQm9keSIsInRyeVBlZWtQcm9wZXJseU5lc3RlZEJvZHlFbGVtZW50IiwiYm9keVN0YXJ0VGFnSW5Cb2R5IiwiaW5UZW1wbGF0ZSIsImZvcm1FbGVtZW50IiwiZm9ybVN0YXJ0VGFnSW5Cb2R5Iiwibm9iclN0YXJ0VGFnSW5Cb2R5IiwibWF0aFN0YXJ0VGFnSW5Cb2R5IiwiSU5fVEFCTEUiLCJ0YWJsZVN0YXJ0VGFnSW5Cb2R5IiwiaW5wdXRTdGFydFRhZ0luQm9keSIsInBhcmFtU3RhcnRUYWdJbkJvZHkiLCJpbWFnZVN0YXJ0VGFnSW5Cb2R5IiwiYnV0dG9uU3RhcnRUYWdJbkJvZHkiLCJhcHBsZXRTdGFydFRhZ0luQm9keSIsImlmcmFtZVN0YXJ0VGFnSW5Cb2R5IiwiSU5fQ0FQVElPTiIsIklOX1RBQkxFX0JPRFkiLCJJTl9ST1ciLCJJTl9DRUxMIiwiSU5fU0VMRUNUX0lOX1RBQkxFIiwiSU5fU0VMRUNUIiwic2VsZWN0U3RhcnRUYWdJbkJvZHkiLCJvcHRncm91cFN0YXJ0VGFnSW5Cb2R5IiwicG9wQWxsVXBUb0h0bWxFbGVtZW50IiwiSU5fRlJBTUVTRVQiLCJmcmFtZXNldFN0YXJ0VGFnSW5Cb2R5Iiwib3JpZ2luYWxJbnNlcnRpb25Nb2RlIiwiVEVYVCIsInRleHRhcmVhU3RhcnRUYWdJbkJvZHkiLCJwbGFpbnRleHRTdGFydFRhZ0luQm9keSIsInBFbmRUYWdJbkJvZHkiLCJhZGRyZXNzRW5kVGFnSW5Cb2R5IiwiaGFzSW5MaXN0SXRlbVNjb3BlIiwibGlFbmRUYWdJbkJvZHkiLCJkZEVuZFRhZ0luQm9keSIsImhhc051bWJlcmVkSGVhZGVySW5TY29wZSIsInBvcFVudGlsTnVtYmVyZWRIZWFkZXJQb3BwZWQiLCJudW1iZXJlZEhlYWRlckVuZFRhZ0luQm9keSIsImJyRW5kVGFnSW5Cb2R5IiwiQUZURVJfQk9EWSIsImJvZHlFbmRUYWdJbkJvZHkiLCJlbmRUYWdBZnRlckJvZHkiLCJodG1sRW5kVGFnSW5Cb2R5IiwiZm9ybUVuZFRhZ0luQm9keSIsImFwcGxldEVuZFRhZ0luQm9keSIsImVvZkluVGVtcGxhdGUiLCJjaGFyYWN0ZXJJblRhYmxlIiwicGVuZGluZ0NoYXJhY3RlclRva2VucyIsImhhc05vbldoaXRlc3BhY2VQZW5kaW5nQ2hhcmFjdGVyVG9rZW4iLCJJTl9UQUJMRV9URVhUIiwiY2hhcmFjdGVySW5UYWJsZVRleHQiLCJ3aGl0ZXNwYWNlQ2hhcmFjdGVySW5UYWJsZVRleHQiLCJ0b2tlbkluVGFibGUiLCJzdGFydFRhZ0luVGFibGUiLCJjbGVhckJhY2tUb1RhYmxlQ29udGV4dCIsInN0YXJ0VGFnSW5UYWJsZUJvZHkiLCJ0ZFN0YXJ0VGFnSW5UYWJsZSIsIklOX0NPTFVNTl9HUk9VUCIsInN0YXJ0VGFnSW5Db2x1bW5Hcm91cCIsImNvbFN0YXJ0VGFnSW5UYWJsZSIsImZvcm1TdGFydFRhZ0luVGFibGUiLCJoYXNJblRhYmxlU2NvcGUiLCJfcHJvY2Vzc1N0YXJ0VGFnIiwidGFibGVTdGFydFRhZ0luVGFibGUiLCJ0Ym9keVN0YXJ0VGFnSW5UYWJsZSIsImlucHV0U3RhcnRUYWdJblRhYmxlIiwiY2FwdGlvblN0YXJ0VGFnSW5UYWJsZSIsImNvbGdyb3VwU3RhcnRUYWdJblRhYmxlIiwiZW5kVGFnSW5UYWJsZSIsInNhdmVkRm9zdGVyUGFyZW50aW5nU3RhdGUiLCJmb3N0ZXJQYXJlbnRpbmdFbmFibGVkIiwidG9rZW5JblRhYmxlVGV4dCIsInNjcmlwdEhhbmRsZXIiLCJjdXJyZW50VG9rZW4iLCJJTklUSUFMIiwiY3VycmVudE5vdEluSFRNTCIsImZyYWdtZW50Q29udGV4dElEIiwiX3NldENvbnRleHRNb2RlcyIsIk9wZW5FbGVtZW50U3RhY2siLCJkb2N1bWVudE1vY2siLCJfaW5pdFRva2VuaXplckZvckZyYWdtZW50UGFyc2luZyIsIl9maW5kRm9ybUluRnJhZ21lbnRDb250ZXh0Iiwicm9vdEVsZW1lbnQiLCJmcmFnbWVudCIsImJlZm9yZVRva2VuIiwibG9jIiwib25JdGVtUHVzaCIsImlzVG9wIiwib25JdGVtUG9wIiwiaXNIVE1MIiwiaW5Gb3JlaWduTm9kZSIsIl9pc0ludGVncmF0aW9uUG9pbnQiLCJuZXh0VG9rZW5pemVyU3RhdGUiLCJzd2l0Y2hUb1BsYWludGV4dFBhcnNpbmciLCJfZ2V0QWRqdXN0ZWRDdXJyZW50RWxlbWVudCIsIl9zZXREb2N1bWVudFR5cGUiLCJkb2NUeXBlTm9kZSIsIl9hdHRhY2hFbGVtZW50VG9UcmVlIiwic3RhcnRUYWciLCJfc2hvdWxkRm9zdGVyUGFyZW50T25JbnNlcnRpb24iLCJ0bXBsIiwiYmVmb3JlRWxlbWVudCIsIl9maW5kRm9zdGVyUGFyZW50aW5nTG9jYXRpb24iLCJjaGFycyIsInRleHROb2RlSWR4IiwiZG9ub3IiLCJjbG9zaW5nVG9rZW4iLCJjdExvYyIsImVuZExvYyIsInNob3VsZFByb2Nlc3NTdGFydFRhZ1Rva2VuSW5Gb3JlaWduQ29udGVudCIsIm9uQ2hhcmFjdGVyIiwiTlVMTF9DSEFSQUNURVIiLCJvbk51bGxDaGFyYWN0ZXIiLCJvbkNvbW1lbnQiLCJvbkRvY3R5cGUiLCJvbkVuZFRhZyIsIm9uRW9mIiwib25XaGl0ZXNwYWNlQ2hhcmFjdGVyIiwibGlzdExlbmd0aCIsIl9jbG9zZVRhYmxlQ2VsbCIsInBvcFVudGlsVGFibGVDZWxsUG9wcGVkIiwiX3Jlc2V0SW5zZXJ0aW9uTW9kZUZvclNlbGVjdCIsInNlbGVjdElkeCIsIm9wZW5FbGVtZW50IiwiY2hhcmFjdGVySW5Gb3JlaWduQ29udGVudCIsInRva2VuSW5Db2x1bW5Hcm91cCIsInRva2VuQWZ0ZXJCb2R5IiwiQUZURVJfQUZURVJfQk9EWSIsInRva2VuQWZ0ZXJBZnRlckJvZHkiLCJudWxsQ2hhcmFjdGVySW5Gb3JlaWduQ29udGVudCIsIkFGVEVSX0ZSQU1FU0VUIiwiYXBwZW5kQ29tbWVudFRvUm9vdEh0bWxFbGVtZW50IiwiQUZURVJfQUZURVJfRlJBTUVTRVQiLCJhcHBlbmRDb21tZW50VG9Eb2N1bWVudCIsImZvcmNlUXVpcmtzIiwibm9uQ29uZm9ybWluZ0RvY3R5cGUiLCJkb2N0eXBlSW5Jbml0aWFsTW9kZSIsIm1pc3BsYWNlZERvY3R5cGUiLCJvblN0YXJ0VGFnIiwibm9uVm9pZEh0bWxFbGVtZW50U3RhcnRUYWdXaXRoVHJhaWxpbmdTb2xpZHVzIiwicG9wVW50aWxIdG1sT3JJbnRlZ3JhdGlvblBvaW50IiwiX3N0YXJ0VGFnT3V0c2lkZUZvcmVpZ25Db250ZW50IiwiY3VycmVudE5zIiwic3RhcnRUYWdJbkZvcmVpZ25Db250ZW50Iiwic3RhcnRUYWdCZWZvcmVIdG1sIiwic3RhcnRUYWdCZWZvcmVIZWFkIiwibmVzdGVkTm9zY3JpcHRJbkhlYWQiLCJzdGFydFRhZ0luSGVhZE5vU2NyaXB0IiwiYWJhbmRvbmVkSGVhZEVsZW1lbnRDaGlsZCIsInN0YXJ0VGFnQWZ0ZXJIZWFkIiwiVEFCTEVfVk9JRF9FTEVNRU5UUyIsInN0YXJ0VGFnSW5DYXB0aW9uIiwic3RhcnRUYWdJblJvdyIsInN0YXJ0VGFnSW5DZWxsIiwic3RhcnRUYWdJblNlbGVjdCIsInN0YXJ0VGFnSW5TZWxlY3RJblRhYmxlIiwic3RhcnRUYWdJblRlbXBsYXRlIiwic3RhcnRUYWdBZnRlckJvZHkiLCJzdGFydFRhZ0luRnJhbWVzZXQiLCJzdGFydFRhZ0FmdGVyRnJhbWVzZXQiLCJzdGFydFRhZ0FmdGVyQWZ0ZXJCb2R5Iiwic3RhcnRUYWdBZnRlckFmdGVyRnJhbWVzZXQiLCJfZW5kVGFnT3V0c2lkZUZvcmVpZ25Db250ZW50IiwiZW5kVGFnSW5Gb3JlaWduQ29udGVudCIsImVuZFRhZ0JlZm9yZUh0bWwiLCJlbmRUYWdCZWZvcmVIZWFkIiwiZW5kVGFnSW5IZWFkIiwiZW5kVGFnSW5IZWFkTm9TY3JpcHQiLCJlbmRUYWdBZnRlckhlYWQiLCJlbmRUYWdJblRleHQiLCJlbmRUYWdJbkNhcHRpb24iLCJlbmRUYWdJbkNvbHVtbkdyb3VwIiwiZW5kVGFnSW5UYWJsZUJvZHkiLCJlbmRUYWdJblJvdyIsImVuZFRhZ0luQ2VsbCIsImVuZFRhZ0luU2VsZWN0IiwiZW5kVGFnSW5TZWxlY3RJblRhYmxlIiwiZW5kVGFnSW5UZW1wbGF0ZSIsImlzUm9vdEh0bWxFbGVtZW50Q3VycmVudCIsImVuZFRhZ0luRnJhbWVzZXQiLCJlbmRUYWdBZnRlckZyYW1lc2V0IiwiZW9mSW5FbGVtZW50VGhhdENhbkNvbnRhaW5Pbmx5VGV4dCIsImVvZkluVGV4dCIsIkxJTkVfRkVFRCIsImNsZWFyQmFja1RvVGFibGVCb2R5Q29udGV4dCIsImhhc1RhYmxlQm9keUNvbnRleHRJblRhYmxlU2NvcGUiLCJjbGVhckJhY2tUb1RhYmxlUm93Q29udGV4dCIsImhhc0luU2VsZWN0U2NvcGUiLCJJTVBMSUNJVF9FTkRfVEFHX1JFUVVJUkVEIiwiSU1QTElDSVRfRU5EX1RBR19SRVFVSVJFRF9USE9ST1VHSExZIiwiU0NPUElOR19FTEVNRU5UX05TIiwiTkFNRURfSEVBREVSUyIsIlRBQkxFX1JPV19DT05URVhUIiwiVEFCTEVfQk9EWV9DT05URVhUIiwiVEFCTEVfQ09OVEVYVCIsIlRBQkxFX0NFTExTIiwiX2lzSW5UZW1wbGF0ZSIsIl9pbmRleE9mIiwiX3VwZGF0ZUN1cnJlbnRFbGVtZW50IiwicG9wcGVkIiwib2xkRWxlbWVudCIsInJlZmVyZW5jZUVsZW1lbnQiLCJuZXdFbGVtZW50SUQiLCJ0YXJnZXRJZHgiLCJwb3BVbnRpbEVsZW1lbnRQb3BwZWQiLCJwb3BVbnRpbFBvcHBlZCIsInRhZ05hbWVzIiwidGFyZ2V0TlMiLCJfaW5kZXhPZlRhZ05hbWVzIiwiY2xlYXJCYWNrVG8iLCJlbGVtZW50SWR4IiwiZXhjbHVzaW9uSWQiLCJWT0lEX0VMRU1FTlRTIiwic2VyaWFsaXplQ2hpbGROb2RlcyIsImN1cnJlbnROb2RlIiwic2VyaWFsaXplTm9kZSIsInNlcmlhbGl6ZUF0dHJpYnV0ZXMiLCJzZXJpYWxpemVFbGVtZW50IiwicGFyZW50VG4iLCJzZXJpYWxpemVUZXh0Tm9kZSIsInNlcmlhbGl6ZUNvbW1lbnROb2RlIiwic2VyaWFsaXplRG9jdW1lbnRUeXBlTm9kZSIsInByZXByb2Nlc3Nvcl9qc18xIiwidW5pY29kZV9qc18xIiwiQzFfQ09OVFJPTFNfUkVGRVJFTkNFX1JFUExBQ0VNRU5UUyIsImlzQXNjaWlEaWdpdCIsIkRJR0lUXzAiLCJESUdJVF85IiwiaXNBc2NpaVVwcGVyIiwiTEFUSU5fQ0FQSVRBTF9BIiwiTEFUSU5fQ0FQSVRBTF9aIiwiaXNBc2NpaUxldHRlciIsIkxBVElOX1NNQUxMX0EiLCJMQVRJTl9TTUFMTF9aIiwiaXNBc2NpaUxvd2VyIiwiaXNBc2NpaVVwcGVySGV4RGlnaXQiLCJMQVRJTl9DQVBJVEFMX0YiLCJpc0FzY2lpTG93ZXJIZXhEaWdpdCIsIkxBVElOX1NNQUxMX0YiLCJ0b0FzY2lpTG93ZXIiLCJTUEFDRSIsIlRBQlVMQVRJT04iLCJGT1JNX0ZFRUQiLCJpc1NjcmlwdERhdGFEb3VibGVFc2NhcGVTZXF1ZW5jZUVuZCIsIlNPTElEVVMiLCJHUkVBVEVSX1RIQU5fU0lHTiIsIkRBVEEiLCJDREFUQV9TRUNUSU9OIiwicGF1c2VkIiwiaW5Mb29wIiwibGFzdFN0YXJ0VGFnTmFtZSIsInJldHVyblN0YXRlIiwiY2hhclJlZkNvZGUiLCJjb25zdW1lZEFmdGVyU25hcHNob3QiLCJjdXJyZW50Q2hhcmFjdGVyVG9rZW4iLCJjdXJyZW50QXR0ciIsInByZXByb2Nlc3NvciIsIlByZXByb2Nlc3NvciIsImN1cnJlbnRMb2NhdGlvbiIsImdldEN1cnJlbnRMb2NhdGlvbiIsImdldEVycm9yIiwiX3J1blBhcnNpbmdMb29wIiwiX2NvbnN1bWUiLCJfZW5zdXJlSGliZXJuYXRpb24iLCJfY2FsbFN0YXRlIiwid3JpdGVDYWxsYmFjayIsImlzTGFzdENodW5rIiwiaW5zZXJ0SHRtbEF0Q3VycmVudFBvcyIsImVuZE9mQ2h1bmtIaXQiLCJfdW5jb25zdW1lIiwiYWR2YW5jZSIsInJldHJlYXQiLCJfcmVjb25zdW1lSW5TdGF0ZSIsIl9hZHZhbmNlQnkiLCJfY29uc3VtZVNlcXVlbmNlSWZNYXRjaCIsInBhdHRlcm4iLCJjYXNlU2Vuc2l0aXZlIiwiX2NyZWF0ZVN0YXJ0VGFnVG9rZW4iLCJfY3JlYXRlRW5kVGFnVG9rZW4iLCJfY3JlYXRlQ29tbWVudFRva2VuIiwiX2NyZWF0ZURvY3R5cGVUb2tlbiIsImluaXRpYWxOYW1lIiwiX2NyZWF0ZUNoYXJhY3RlclRva2VuIiwiX2NyZWF0ZUF0dHIiLCJhdHRyTmFtZUZpcnN0Q2giLCJfbGVhdmVBdHRyTmFtZSIsIl9sZWF2ZUF0dHJWYWx1ZSIsImR1cGxpY2F0ZUF0dHJpYnV0ZSIsInByZXBhcmVUb2tlbiIsImN0IiwiX2VtaXRDdXJyZW50Q2hhcmFjdGVyVG9rZW4iLCJlbWl0Q3VycmVudFRhZ1Rva2VuIiwiZW5kVGFnV2l0aEF0dHJpYnV0ZXMiLCJlbmRUYWdXaXRoVHJhaWxpbmdTb2xpZHVzIiwiZHJvcFBhcnNlZENodW5rIiwiZW1pdEN1cnJlbnRDb21tZW50IiwiZW1pdEN1cnJlbnREb2N0eXBlIiwibmV4dExvY2F0aW9uIiwiX2VtaXRFT0ZUb2tlbiIsIl9hcHBlbmRDaGFyVG9DdXJyZW50Q2hhcmFjdGVyVG9rZW4iLCJfZW1pdENvZGVQb2ludCIsIk5VTEwiLCJfZW1pdENoYXJzIiwiX21hdGNoTmFtZWRDaGFyYWN0ZXJSZWZlcmVuY2UiLCJ3aXRob3V0U2VtaWNvbG9uIiwiU0VNSUNPTE9OIiwiX2lzQ2hhcmFjdGVyUmVmZXJlbmNlSW5BdHRyaWJ1dGUiLCJuZXh0Q3AiLCJwZWVrIiwiRVFVQUxTX1NJR04iLCJBTVBFUlNBTkQiLCJBVFRSSUJVVEVfVkFMVUVfRE9VQkxFX1FVT1RFRCIsIkFUVFJJQlVURV9WQUxVRV9TSU5HTEVfUVVPVEVEIiwiQVRUUklCVVRFX1ZBTFVFX1VOUVVPVEVEIiwiX2ZsdXNoQ29kZVBvaW50Q29uc3VtZWRBc0NoYXJhY3RlclJlZmVyZW5jZSIsIl9zdGF0ZURhdGEiLCJfc3RhdGVSY2RhdGEiLCJfc3RhdGVSYXd0ZXh0IiwiX3N0YXRlU2NyaXB0RGF0YSIsIl9zdGF0ZVBsYWludGV4dCIsIlRBR19PUEVOIiwiX3N0YXRlVGFnT3BlbiIsIkVORF9UQUdfT1BFTiIsIl9zdGF0ZUVuZFRhZ09wZW4iLCJUQUdfTkFNRSIsIl9zdGF0ZVRhZ05hbWUiLCJSQ0RBVEFfTEVTU19USEFOX1NJR04iLCJfc3RhdGVSY2RhdGFMZXNzVGhhblNpZ24iLCJSQ0RBVEFfRU5EX1RBR19PUEVOIiwiX3N0YXRlUmNkYXRhRW5kVGFnT3BlbiIsIlJDREFUQV9FTkRfVEFHX05BTUUiLCJfc3RhdGVSY2RhdGFFbmRUYWdOYW1lIiwiUkFXVEVYVF9MRVNTX1RIQU5fU0lHTiIsIl9zdGF0ZVJhd3RleHRMZXNzVGhhblNpZ24iLCJSQVdURVhUX0VORF9UQUdfT1BFTiIsIl9zdGF0ZVJhd3RleHRFbmRUYWdPcGVuIiwiUkFXVEVYVF9FTkRfVEFHX05BTUUiLCJfc3RhdGVSYXd0ZXh0RW5kVGFnTmFtZSIsIlNDUklQVF9EQVRBX0xFU1NfVEhBTl9TSUdOIiwiX3N0YXRlU2NyaXB0RGF0YUxlc3NUaGFuU2lnbiIsIlNDUklQVF9EQVRBX0VORF9UQUdfT1BFTiIsIl9zdGF0ZVNjcmlwdERhdGFFbmRUYWdPcGVuIiwiU0NSSVBUX0RBVEFfRU5EX1RBR19OQU1FIiwiX3N0YXRlU2NyaXB0RGF0YUVuZFRhZ05hbWUiLCJTQ1JJUFRfREFUQV9FU0NBUEVfU1RBUlQiLCJfc3RhdGVTY3JpcHREYXRhRXNjYXBlU3RhcnQiLCJTQ1JJUFRfREFUQV9FU0NBUEVfU1RBUlRfREFTSCIsIl9zdGF0ZVNjcmlwdERhdGFFc2NhcGVTdGFydERhc2giLCJTQ1JJUFRfREFUQV9FU0NBUEVEIiwiX3N0YXRlU2NyaXB0RGF0YUVzY2FwZWQiLCJTQ1JJUFRfREFUQV9FU0NBUEVEX0RBU0giLCJfc3RhdGVTY3JpcHREYXRhRXNjYXBlZERhc2giLCJTQ1JJUFRfREFUQV9FU0NBUEVEX0RBU0hfREFTSCIsIl9zdGF0ZVNjcmlwdERhdGFFc2NhcGVkRGFzaERhc2giLCJTQ1JJUFRfREFUQV9FU0NBUEVEX0xFU1NfVEhBTl9TSUdOIiwiX3N0YXRlU2NyaXB0RGF0YUVzY2FwZWRMZXNzVGhhblNpZ24iLCJTQ1JJUFRfREFUQV9FU0NBUEVEX0VORF9UQUdfT1BFTiIsIl9zdGF0ZVNjcmlwdERhdGFFc2NhcGVkRW5kVGFnT3BlbiIsIlNDUklQVF9EQVRBX0VTQ0FQRURfRU5EX1RBR19OQU1FIiwiX3N0YXRlU2NyaXB0RGF0YUVzY2FwZWRFbmRUYWdOYW1lIiwiU0NSSVBUX0RBVEFfRE9VQkxFX0VTQ0FQRV9TVEFSVCIsIl9zdGF0ZVNjcmlwdERhdGFEb3VibGVFc2NhcGVTdGFydCIsIlNDUklQVF9EQVRBX0RPVUJMRV9FU0NBUEVEIiwiX3N0YXRlU2NyaXB0RGF0YURvdWJsZUVzY2FwZWQiLCJTQ1JJUFRfREFUQV9ET1VCTEVfRVNDQVBFRF9EQVNIIiwiX3N0YXRlU2NyaXB0RGF0YURvdWJsZUVzY2FwZWREYXNoIiwiU0NSSVBUX0RBVEFfRE9VQkxFX0VTQ0FQRURfREFTSF9EQVNIIiwiX3N0YXRlU2NyaXB0RGF0YURvdWJsZUVzY2FwZWREYXNoRGFzaCIsIlNDUklQVF9EQVRBX0RPVUJMRV9FU0NBUEVEX0xFU1NfVEhBTl9TSUdOIiwiX3N0YXRlU2NyaXB0RGF0YURvdWJsZUVzY2FwZWRMZXNzVGhhblNpZ24iLCJTQ1JJUFRfREFUQV9ET1VCTEVfRVNDQVBFX0VORCIsIl9zdGF0ZVNjcmlwdERhdGFEb3VibGVFc2NhcGVFbmQiLCJCRUZPUkVfQVRUUklCVVRFX05BTUUiLCJfc3RhdGVCZWZvcmVBdHRyaWJ1dGVOYW1lIiwiQVRUUklCVVRFX05BTUUiLCJfc3RhdGVBdHRyaWJ1dGVOYW1lIiwiQUZURVJfQVRUUklCVVRFX05BTUUiLCJfc3RhdGVBZnRlckF0dHJpYnV0ZU5hbWUiLCJCRUZPUkVfQVRUUklCVVRFX1ZBTFVFIiwiX3N0YXRlQmVmb3JlQXR0cmlidXRlVmFsdWUiLCJfc3RhdGVBdHRyaWJ1dGVWYWx1ZURvdWJsZVF1b3RlZCIsIl9zdGF0ZUF0dHJpYnV0ZVZhbHVlU2luZ2xlUXVvdGVkIiwiX3N0YXRlQXR0cmlidXRlVmFsdWVVbnF1b3RlZCIsIkFGVEVSX0FUVFJJQlVURV9WQUxVRV9RVU9URUQiLCJfc3RhdGVBZnRlckF0dHJpYnV0ZVZhbHVlUXVvdGVkIiwiU0VMRl9DTE9TSU5HX1NUQVJUX1RBRyIsIl9zdGF0ZVNlbGZDbG9zaW5nU3RhcnRUYWciLCJCT0dVU19DT01NRU5UIiwiX3N0YXRlQm9ndXNDb21tZW50IiwiTUFSS1VQX0RFQ0xBUkFUSU9OX09QRU4iLCJfc3RhdGVNYXJrdXBEZWNsYXJhdGlvbk9wZW4iLCJDT01NRU5UX1NUQVJUIiwiX3N0YXRlQ29tbWVudFN0YXJ0IiwiQ09NTUVOVF9TVEFSVF9EQVNIIiwiX3N0YXRlQ29tbWVudFN0YXJ0RGFzaCIsIl9zdGF0ZUNvbW1lbnQiLCJDT01NRU5UX0xFU1NfVEhBTl9TSUdOIiwiX3N0YXRlQ29tbWVudExlc3NUaGFuU2lnbiIsIkNPTU1FTlRfTEVTU19USEFOX1NJR05fQkFORyIsIl9zdGF0ZUNvbW1lbnRMZXNzVGhhblNpZ25CYW5nIiwiQ09NTUVOVF9MRVNTX1RIQU5fU0lHTl9CQU5HX0RBU0giLCJfc3RhdGVDb21tZW50TGVzc1RoYW5TaWduQmFuZ0Rhc2giLCJDT01NRU5UX0xFU1NfVEhBTl9TSUdOX0JBTkdfREFTSF9EQVNIIiwiX3N0YXRlQ29tbWVudExlc3NUaGFuU2lnbkJhbmdEYXNoRGFzaCIsIkNPTU1FTlRfRU5EX0RBU0giLCJfc3RhdGVDb21tZW50RW5kRGFzaCIsIkNPTU1FTlRfRU5EIiwiX3N0YXRlQ29tbWVudEVuZCIsIkNPTU1FTlRfRU5EX0JBTkciLCJfc3RhdGVDb21tZW50RW5kQmFuZyIsIl9zdGF0ZURvY3R5cGUiLCJCRUZPUkVfRE9DVFlQRV9OQU1FIiwiX3N0YXRlQmVmb3JlRG9jdHlwZU5hbWUiLCJET0NUWVBFX05BTUUiLCJfc3RhdGVEb2N0eXBlTmFtZSIsIkFGVEVSX0RPQ1RZUEVfTkFNRSIsIl9zdGF0ZUFmdGVyRG9jdHlwZU5hbWUiLCJBRlRFUl9ET0NUWVBFX1BVQkxJQ19LRVlXT1JEIiwiX3N0YXRlQWZ0ZXJEb2N0eXBlUHVibGljS2V5d29yZCIsIkJFRk9SRV9ET0NUWVBFX1BVQkxJQ19JREVOVElGSUVSIiwiX3N0YXRlQmVmb3JlRG9jdHlwZVB1YmxpY0lkZW50aWZpZXIiLCJET0NUWVBFX1BVQkxJQ19JREVOVElGSUVSX0RPVUJMRV9RVU9URUQiLCJfc3RhdGVEb2N0eXBlUHVibGljSWRlbnRpZmllckRvdWJsZVF1b3RlZCIsIkRPQ1RZUEVfUFVCTElDX0lERU5USUZJRVJfU0lOR0xFX1FVT1RFRCIsIl9zdGF0ZURvY3R5cGVQdWJsaWNJZGVudGlmaWVyU2luZ2xlUXVvdGVkIiwiQUZURVJfRE9DVFlQRV9QVUJMSUNfSURFTlRJRklFUiIsIl9zdGF0ZUFmdGVyRG9jdHlwZVB1YmxpY0lkZW50aWZpZXIiLCJCRVRXRUVOX0RPQ1RZUEVfUFVCTElDX0FORF9TWVNURU1fSURFTlRJRklFUlMiLCJfc3RhdGVCZXR3ZWVuRG9jdHlwZVB1YmxpY0FuZFN5c3RlbUlkZW50aWZpZXJzIiwiQUZURVJfRE9DVFlQRV9TWVNURU1fS0VZV09SRCIsIl9zdGF0ZUFmdGVyRG9jdHlwZVN5c3RlbUtleXdvcmQiLCJCRUZPUkVfRE9DVFlQRV9TWVNURU1fSURFTlRJRklFUiIsIl9zdGF0ZUJlZm9yZURvY3R5cGVTeXN0ZW1JZGVudGlmaWVyIiwiRE9DVFlQRV9TWVNURU1fSURFTlRJRklFUl9ET1VCTEVfUVVPVEVEIiwiX3N0YXRlRG9jdHlwZVN5c3RlbUlkZW50aWZpZXJEb3VibGVRdW90ZWQiLCJET0NUWVBFX1NZU1RFTV9JREVOVElGSUVSX1NJTkdMRV9RVU9URUQiLCJfc3RhdGVEb2N0eXBlU3lzdGVtSWRlbnRpZmllclNpbmdsZVF1b3RlZCIsIkFGVEVSX0RPQ1RZUEVfU1lTVEVNX0lERU5USUZJRVIiLCJfc3RhdGVBZnRlckRvY3R5cGVTeXN0ZW1JZGVudGlmaWVyIiwiQk9HVVNfRE9DVFlQRSIsIl9zdGF0ZUJvZ3VzRG9jdHlwZSIsIl9zdGF0ZUNkYXRhU2VjdGlvbiIsIkNEQVRBX1NFQ1RJT05fQlJBQ0tFVCIsIl9zdGF0ZUNkYXRhU2VjdGlvbkJyYWNrZXQiLCJDREFUQV9TRUNUSU9OX0VORCIsIl9zdGF0ZUNkYXRhU2VjdGlvbkVuZCIsIkNIQVJBQ1RFUl9SRUZFUkVOQ0UiLCJfc3RhdGVDaGFyYWN0ZXJSZWZlcmVuY2UiLCJOQU1FRF9DSEFSQUNURVJfUkVGRVJFTkNFIiwiX3N0YXRlTmFtZWRDaGFyYWN0ZXJSZWZlcmVuY2UiLCJBTUJJR1VPVVNfQU1QRVJTQU5EIiwiX3N0YXRlQW1iaWd1b3VzQW1wZXJzYW5kIiwiTlVNRVJJQ19DSEFSQUNURVJfUkVGRVJFTkNFIiwiX3N0YXRlTnVtZXJpY0NoYXJhY3RlclJlZmVyZW5jZSIsIkhFWEFERU1JQ0FMX0NIQVJBQ1RFUl9SRUZFUkVOQ0VfU1RBUlQiLCJfc3RhdGVIZXhhZGVtaWNhbENoYXJhY3RlclJlZmVyZW5jZVN0YXJ0IiwiSEVYQURFTUlDQUxfQ0hBUkFDVEVSX1JFRkVSRU5DRSIsIl9zdGF0ZUhleGFkZW1pY2FsQ2hhcmFjdGVyUmVmZXJlbmNlIiwiREVDSU1BTF9DSEFSQUNURVJfUkVGRVJFTkNFIiwiX3N0YXRlRGVjaW1hbENoYXJhY3RlclJlZmVyZW5jZSIsIk5VTUVSSUNfQ0hBUkFDVEVSX1JFRkVSRU5DRV9FTkQiLCJfc3RhdGVOdW1lcmljQ2hhcmFjdGVyUmVmZXJlbmNlRW5kIiwiTEVTU19USEFOX1NJR04iLCJ1bmV4cGVjdGVkTnVsbENoYXJhY3RlciIsIkVYQ0xBTUFUSU9OX01BUksiLCJRVUVTVElPTl9NQVJLIiwidW5leHBlY3RlZFF1ZXN0aW9uTWFya0luc3RlYWRPZlRhZ05hbWUiLCJlb2ZCZWZvcmVUYWdOYW1lIiwiaW52YWxpZEZpcnN0Q2hhcmFjdGVyT2ZUYWdOYW1lIiwibWlzc2luZ0VuZFRhZ05hbWUiLCJlb2ZJblRhZyIsImhhbmRsZVNwZWNpYWxFbmRUYWciLCJfY3AiLCJIWVBIRU5fTUlOVVMiLCJlb2ZJblNjcmlwdEh0bWxDb21tZW50TGlrZVRleHQiLCJ1bmV4cGVjdGVkRXF1YWxzU2lnbkJlZm9yZUF0dHJpYnV0ZU5hbWUiLCJRVU9UQVRJT05fTUFSSyIsIkFQT1NUUk9QSEUiLCJ1bmV4cGVjdGVkQ2hhcmFjdGVySW5BdHRyaWJ1dGVOYW1lIiwibWlzc2luZ0F0dHJpYnV0ZVZhbHVlIiwiR1JBVkVfQUNDRU5UIiwidW5leHBlY3RlZENoYXJhY3RlckluVW5xdW90ZWRBdHRyaWJ1dGVWYWx1ZSIsIm1pc3NpbmdXaGl0ZXNwYWNlQmV0d2VlbkF0dHJpYnV0ZXMiLCJ1bmV4cGVjdGVkU29saWR1c0luVGFnIiwiY2RhdGFJbkh0bWxDb250ZW50IiwiaW5jb3JyZWN0bHlPcGVuZWRDb21tZW50IiwiYWJydXB0Q2xvc2luZ09mRW1wdHlDb21tZW50IiwiZW9mSW5Db21tZW50IiwibmVzdGVkQ29tbWVudCIsImluY29ycmVjdGx5Q2xvc2VkQ29tbWVudCIsImVvZkluRG9jdHlwZSIsIm1pc3NpbmdXaGl0ZXNwYWNlQmVmb3JlRG9jdHlwZU5hbWUiLCJtaXNzaW5nRG9jdHlwZU5hbWUiLCJpbnZhbGlkQ2hhcmFjdGVyU2VxdWVuY2VBZnRlckRvY3R5cGVOYW1lIiwibWlzc2luZ1doaXRlc3BhY2VBZnRlckRvY3R5cGVQdWJsaWNLZXl3b3JkIiwibWlzc2luZ0RvY3R5cGVQdWJsaWNJZGVudGlmaWVyIiwibWlzc2luZ1F1b3RlQmVmb3JlRG9jdHlwZVB1YmxpY0lkZW50aWZpZXIiLCJhYnJ1cHREb2N0eXBlUHVibGljSWRlbnRpZmllciIsIm1pc3NpbmdXaGl0ZXNwYWNlQmV0d2VlbkRvY3R5cGVQdWJsaWNBbmRTeXN0ZW1JZGVudGlmaWVycyIsIm1pc3NpbmdRdW90ZUJlZm9yZURvY3R5cGVTeXN0ZW1JZGVudGlmaWVyIiwibWlzc2luZ1doaXRlc3BhY2VBZnRlckRvY3R5cGVTeXN0ZW1LZXl3b3JkIiwibWlzc2luZ0RvY3R5cGVTeXN0ZW1JZGVudGlmaWVyIiwiYWJydXB0RG9jdHlwZVN5c3RlbUlkZW50aWZpZXIiLCJ1bmV4cGVjdGVkQ2hhcmFjdGVyQWZ0ZXJEb2N0eXBlU3lzdGVtSWRlbnRpZmllciIsIlJJR0hUX1NRVUFSRV9CUkFDS0VUIiwiZW9mSW5DZGF0YSIsIk5VTUJFUl9TSUdOIiwibWF0Y2hSZXN1bHQiLCJ1bmtub3duTmFtZWRDaGFyYWN0ZXJSZWZlcmVuY2UiLCJMQVRJTl9TTUFMTF9YIiwiTEFUSU5fQ0FQSVRBTF9YIiwiaXNBc2NpaUhleERpZ2l0IiwibnVsbENoYXJhY3RlclJlZmVyZW5jZSIsImNoYXJhY3RlclJlZmVyZW5jZU91dHNpZGVVbmljb2RlUmFuZ2UiLCJzdXJyb2dhdGVDaGFyYWN0ZXJSZWZlcmVuY2UiLCJub25jaGFyYWN0ZXJDaGFyYWN0ZXJSZWZlcmVuY2UiLCJDQVJSSUFHRV9SRVRVUk4iLCJjb250cm9sQ2hhcmFjdGVyUmVmZXJlbmNlIiwibGFzdEdhcFBvcyIsImdhcFN0YWNrIiwibGFzdENodW5rV3JpdHRlbiIsImJ1ZmZlcldhdGVybGluZSIsImlzRW9sIiwibGluZVN0YXJ0UG9zIiwiZHJvcHBlZEJ1ZmZlclNpemUiLCJsYXN0RXJyT2Zmc2V0IiwiX2FkZEdhcCIsIl9wcm9jZXNzU3Vycm9nYXRlIiwic3Vycm9nYXRlSW5JbnB1dFN0cmVhbSIsIndpbGxEcm9wUGFyc2VkQ2h1bmsiLCJfY2hlY2tGb3JQcm9ibGVtYXRpY0NoYXJhY3RlcnMiLCJjb250cm9sQ2hhcmFjdGVySW5JbnB1dFN0cmVhbSIsIm5vbmNoYXJhY3RlckluSW5wdXRTdHJlYW0iLCJyZWNpcGllbnRBdHRyc01hcCIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsImxvYWRlZCIsIl9fd2VicGFja19tb2R1bGVzX18iLCJkZWZpbml0aW9uIiwiZ2xvYmFsVGhpcyIsIm5tZCIsInBhdGhzIiwic2NyaXB0VXJsIiwiaW1wb3J0U2NyaXB0cyIsImN1cnJlbnRTY3JpcHQiLCJzY3JpcHRzIiwibmMiLCJOb3RpZmljYXRpb25JdGVtIiwiUmVhY3QiLCJsb2NhbHMiLCJwcm9wVHlwZXMiLCJOb3RpZmljYXRpb25JdGVtU2hhcGUiLCJOb3RpZmljYXRpb25zIiwiX3JlZiRsaXN0Tm90aWZpY2F0aW9uIiwibGlzdE5vdGlmaWNhdGlvbnMiLCJfcmVmJGRpc3BsYXlEcmF3ZXIiLCJkaXNwbGF5RHJhd2VyIiwiZmxvYXQiLCJib3JkZXIiLCJiYWNrZ3JvdW5kQ29sb3IiLCJub3RpZmljYXRpb24iLCJsb2dvIiwiYWx0IiwiaHRtbEZvciIsImF1dG9Db21wbGV0ZSIsImdldEZvb3RlckNvcHkiLCJnZXRGdWxsWWVhciIsIkNvdXJzZUxpc3RSb3ciLCJpc0hlYWRlciIsInRleHRGaXJzdENlbGwiLCJfcmVmJHRleHRTZWNvbmRDZWxsIiwidGV4dFNlY29uZENlbGwiLCJjb2xTcGFuIiwiQ291cnNlU2hhcGUiLCJjcmVkaXQiLCJDb3Vyc2VMaXN0IiwiX3JlZiRsaXN0Q291cnNlcyIsImxpc3RDb3Vyc2VzIiwiY291cnNlIiwiQm9keVNlY3Rpb24iLCJfUmVhY3QkQ29tcG9uZW50IiwiX2NhbGxTdXBlciIsIl90aGlzJHByb3BzIiwidGl0bGUiLCJCb2R5U2VjdGlvbldpdGhNYXJnaW5Cb3R0b20iLCJfb2JqZWN0U3ByZWFkIiwiQXBwIiwiYWxlcnQiLCJsb2dPdXQiLCJoYW5kbGVLZXlQcmVzcyIsImlzTG9nZ2VkSW4iLCJIZWFkZXIiLCJMb2dpbiIsIkZvb3RlciIsInByb3BEZWZhdWx0IiwiUmVhY3RET00iXSwic291cmNlUm9vdCI6IiJ9